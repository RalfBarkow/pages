{
  "title": "2023-01-25",
  "story": [
    {
      "type": "paragraph",
      "id": "0188cb4c8e625859",
      "text": "‚áí [[Demo Sim & Viz]] ‚áí [[Generate a Rectangular Grid]]  ‚áí [[Grid]] ‚áí [[Rectangular Grid Fringe Pattern]] ‚áí [[Magic TV]] ‚áí [[Scenery]]"
    },
    {
      "type": "frame",
      "id": "aa38ca6e5914f7e4",
      "text": "https://wiki.ralfbarkow.ch/assets/pages/generate-a-rectangular-grid/grid.html"
    },
    {
      "type": "paragraph",
      "id": "714ebab2a8379ff9",
      "text": "‚áí [[Generate a Rectangular Grid]]"
    },
    {
      "type": "assets",
      "id": "dca8e058ff10a859",
      "text": "pages/2023-01-25"
    },
    {
      "type": "paragraph",
      "id": "edff32aa684d302b",
      "text": " ‚áí [[Rectangular Grid Fringe Pattern]] ‚áí [[Magic TV]]"
    },
    {
      "type": "pagefold",
      "id": "90cadc5a966886d6",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "b00d92d8adc8b2c7",
      "text": "‚áí [[Costa Shulyupin]]'s [[Grid]] [https://graphviz.org/Gallery/undirected/grid.html graphviz]"
    },
    {
      "type": "paragraph",
      "id": "ccaf68f0dc54180c",
      "text": "Often an layout engine places nodes on undesired locations. Weighted invisible edges allow to manipulate nodes location. This graph defines rigid grid of heavy weighted nodes and arbitrary path on the grid.\n\nYou can rename and hide nodes to have graph which looks like matrix or table. [https://graphviz.org/Gallery/undirected/grid.html graphviz]"
    },
    {
      "type": "pagefold",
      "id": "4f27b645a9781c9b",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "5eefee9f3abe36fb",
      "text": "‚áí [[Walmart Effect]] ‚áí [[Bike Sharing Network]]"
    },
    {
      "type": "paragraph",
      "id": "2864409e843eaf08",
      "text": "‚áí [[Babylon.js]] ‚áí [[Apple Lisa Source Code]] ‚áí [[MultilayerGraphs.jl]]"
    },
    {
      "type": "paragraph",
      "id": "091351393d3569d7",
      "text": "‚áí [[Konrad Hinsen]] @khinsen@scholar.social via [https://scholar.social/@khinsen/109750189358105074 mastodon]\n\n@rgb I guess a standard #Wiki would be a better choice for a formal reviewing process. A common \"source of truth\" shared by everyone. But... that's really a question that should be explored empirically!\n\nI really wish #FederatedWiki were easier to deploy, to encourage more people to explore its potential."
    },
    {
      "type": "pagefold",
      "id": "1bc039f5a591ddd4",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "582a7ceea65a649f",
      "text": "codefrau ü¶© ‚Äî 16.01.2023 22:43 via [https://discord.com/channels/694586717247635488/965416739779248158/1064661181442314280 discord]\nThere likely were other changes needed to make that work properly ‚Äì the subscribers of the event at that time probably relied on the event having a ThreeJS ray. \n\n[explanation, feel free to ignore] Which is fine for pawn-to-pawn events, it's only if an actor subscribes to that same event then it needs to be serialized, to be sent via the reflector (that's what the error message meant, $[1].evt.ray  refers to an argument of that event). But we don't use ThreeJS for actor behaviors, it's only used for rendering/event handling in pawns. So while someone could add proper serialization for ThreeJS classes, it's simpler to use plain objects for events, and we get to catch errors like this.\n\nIn any case, Yoshiki didn't mean you should use that old version, but take the code as an example of handling the gizmo axes independently."
    },
    {
      "type": "pagefold",
      "id": "49863d5810c71e1b",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "5b761bd408fdfdb0",
      "text": "tone1699 ‚Äî 22.01.2023 18:52\nhi, I'm a student and I started making my first Microverse for a thesis project.\nI would like to ask if someone could help me with the problem I'm having (I don't know if it's actually feasible).\nI made my first Microverse and followed your get started, what I would like to do now is use croquet in node.js to connect via Session.join and subscribe to some events.\nMy idea was that using the same appID and the same apiKey by connecting to the session I would be able to receive Microverse publishes via reflectors.\nI would like to ask if this thing is actually feasible and if someone could help me in the correct implementation thank you very much\n"
    },
    {
      "type": "paragraph",
      "id": "a47a146f69ac0918",
      "text": "codefrau ü¶© ‚Äî 22.01.2023 19:40 via [https://discord.com/channels/694586717247635488/965416739779248158/1066789544759926844 discord]\nThis is infeasible right now. While Croquet OS runs on node too, the Microverse code base is not structured in a way to allow this. There would need to be a clear separation of browser and non-browser code to be able to only run the common parts on node.\nIf your goal is to trigger some server-side actions from Microverse, we can certainly help you to figure that out.\n"
    },
    {
      "type": "paragraph",
      "id": "be7e2889fb535d27",
      "text": "codefrau ü¶© ‚Äî 22.01.2023 19:56 \nIn a nutshell, we call that ‚Äúconnectors,‚Äù to connect sessions to the real world. We have examples for both pulling external data into Microverse and triggering external actions. \nBoth directions can be implemented with the same ‚Äúclient-side connector‚Äù mechanism. It elects one of the peers to be the relay between the outside world and Microverse."
    },
    {
      "type": "paragraph",
      "id": "d1246e3ceb6d2e1a",
      "text": "[‚Ä¶]"
    },
    {
      "type": "paragraph",
      "id": "7adcefabce94c782",
      "text": "codefrau ü¶© ‚Äî 22.01.2023 22:00 via [https://discord.com/channels/694586717247635488/965416739779248158/1066824707552313404 discord]\nCroquet is based on replicated computation. The node client would have to run the exact same code as the browser clients, in order to have access to the same state and generate the same events as the browser clients. That is possible in general but infeasible in the context of Microverse due to the structure of its source code, which was not designed to be used outside of a browser. \nThe only feasible way to connect Microverse to external tools is by using client-side code. For example, for our live coding, the browser client connects to a nodejs server running on the same machine, which provides the connection to an external editor. Your 3d object bridge could be implemented in a similar way."
    },
    {
      "type": "paragraph",
      "id": "0a06acf0724770a7",
      "text": "‚áí [[Live Coding]]  ‚áí [[Connect Microverse]] to External Tools "
    },
    {
      "type": "paragraph",
      "id": "d79bf22547df33d0",
      "text": "‚áí [[Antinet Zettelkasten]] ‚áí [[Top-Level Branches]]"
    },
    {
      "type": "graphviz",
      "id": "dad854ea0343b4f0",
      "text": "DOT FROM lambda-browsing"
    },
    {
      "type": "pagefold",
      "id": "eb6c29cd72eda4c0",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "86f41f3330a190e4",
      "text": "‚áí [[Classification]] ‚áí [[Text Classification]] ‚áí [[Self-Organizing Map]] ‚áí [[Document Classification]] ‚áí [[Information Retrieval Community]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-01-25",
        "story": []
      },
      "date": 1674630079353
    },
    {
      "item": {
        "type": "factory",
        "id": "0188cb4c8e625859"
      },
      "id": "0188cb4c8e625859",
      "type": "add",
      "date": 1674630085596
    },
    {
      "type": "edit",
      "id": "0188cb4c8e625859",
      "item": {
        "type": "paragraph",
        "id": "0188cb4c8e625859",
        "text": "‚áí [[Generate a Rectangular Grid]]"
      },
      "date": 1674630096129
    },
    {
      "id": "aa38ca6e5914f7e4",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "aa38ca6e5914f7e4",
        "text": "https://wiki.ralfbarkow.ch/assets/pages/generate-a-rectangular-grid/grid.html"
      },
      "after": "0188cb4c8e625859",
      "date": 1674630108376
    },
    {
      "type": "edit",
      "id": "0188cb4c8e625859",
      "item": {
        "type": "paragraph",
        "id": "0188cb4c8e625859",
        "text": "‚áí [[Generate a Rectangular Grid]] ‚áí [[Demo Sim & Viz]] ‚áí [[Rectangular Grid Fringe Pattern]]"
      },
      "date": 1674630226654
    },
    {
      "id": "827cf205e6c16d46",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "827cf205e6c16d46",
        "text": "//wiki.ralfbarkow.ch/assets/pages/demo-sim--viz/demo.html\nHEIGHT 450"
      },
      "after": "aa38ca6e5914f7e4",
      "date": 1674630241522
    },
    {
      "type": "edit",
      "id": "0188cb4c8e625859",
      "item": {
        "type": "paragraph",
        "id": "0188cb4c8e625859",
        "text": "‚áí [[Generate a Rectangular Grid]]  ‚áí [[Rectangular Grid Fringe Pattern]]"
      },
      "date": 1674630276961
    },
    {
      "type": "add",
      "id": "109a45426f214de6",
      "item": {
        "type": "paragraph",
        "id": "109a45426f214de6",
        "text": "‚áí [[Demo Sim & Viz]]"
      },
      "after": "0188cb4c8e625859",
      "date": 1674630277982
    },
    {
      "id": "109a45426f214de6",
      "type": "move",
      "order": [
        "0188cb4c8e625859",
        "aa38ca6e5914f7e4",
        "109a45426f214de6",
        "827cf205e6c16d46"
      ],
      "date": 1674630281152
    },
    {
      "type": "remove",
      "id": "827cf205e6c16d46",
      "date": 1674631161450
    },
    {
      "type": "remove",
      "id": "109a45426f214de6",
      "date": 1674645174804
    },
    {
      "type": "edit",
      "id": "0188cb4c8e625859",
      "item": {
        "type": "paragraph",
        "id": "0188cb4c8e625859",
        "text": "‚áí [[Demo Sim & Viz]] ‚áí [[Generate a Rectangular Grid]]  ‚áí [[Rectangular Grid Fringe Pattern]]"
      },
      "date": 1674645177114
    },
    {
      "type": "edit",
      "id": "0188cb4c8e625859",
      "item": {
        "type": "paragraph",
        "id": "0188cb4c8e625859",
        "text": "‚áí [[Demo Sim & Viz]] ‚áí [[Generate a Rectangular Grid]]  ‚áí [[Rectangular Grid Fringe Pattern]] ‚áí [[Magic TV]]"
      },
      "date": 1674645238470
    },
    {
      "item": {
        "type": "factory",
        "id": "dca8e058ff10a859"
      },
      "id": "dca8e058ff10a859",
      "type": "add",
      "after": "aa38ca6e5914f7e4",
      "date": 1674645660145
    },
    {
      "type": "edit",
      "id": "dca8e058ff10a859",
      "item": {
        "type": "assets",
        "id": "dca8e058ff10a859",
        "text": "pages/2023-01-25"
      },
      "date": 1674645670185
    },
    {
      "item": {
        "type": "factory",
        "id": "5eefee9f3abe36fb"
      },
      "id": "5eefee9f3abe36fb",
      "type": "add",
      "after": "dca8e058ff10a859",
      "date": 1674646256451
    },
    {
      "type": "edit",
      "id": "5eefee9f3abe36fb",
      "item": {
        "type": "paragraph",
        "id": "5eefee9f3abe36fb",
        "text": "‚áí [[Walmart Effect]]"
      },
      "date": 1674646268934
    },
    {
      "type": "edit",
      "id": "0188cb4c8e625859",
      "item": {
        "type": "paragraph",
        "id": "0188cb4c8e625859",
        "text": "‚áí [[Demo Sim & Viz]] ‚áí [[Generate a Rectangular Grid]]  ‚áí [[Rectangular Grid Fringe Pattern]] ‚áí [[Magic TV]] ‚áí [[Scenery]]"
      },
      "date": 1674647975907
    },
    {
      "type": "edit",
      "id": "5eefee9f3abe36fb",
      "item": {
        "type": "paragraph",
        "id": "5eefee9f3abe36fb",
        "text": "‚áí [[Walmart Effect]] ‚áí [[Bike Sharing Network]]"
      },
      "date": 1674648644179
    },
    {
      "id": "90cadc5a966886d6",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "90cadc5a966886d6",
        "text": "~"
      },
      "after": "dca8e058ff10a859",
      "date": 1674651979222
    },
    {
      "id": "4f27b645a9781c9b",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "4f27b645a9781c9b",
        "text": "~"
      },
      "after": "90cadc5a966886d6",
      "date": 1674651992110
    },
    {
      "id": "b00d92d8adc8b2c7",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b00d92d8adc8b2c7",
        "text": "‚áí https://graphviz.org/Gallery/undirected/grid.html"
      },
      "after": "90cadc5a966886d6",
      "date": 1674651996341
    },
    {
      "id": "ccaf68f0dc54180c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ccaf68f0dc54180c",
        "text": "Often an layout engine places nodes on undesired locations. Weighted invisible edges allow to manipulate nodes location. This graph defines rigid grid of heavy weighted nodes and arbitrary path on the grid.\n\nYou can rename and hide nodes to have graph which looks like matrix or table. [https://graphviz.org/Gallery/undirected/grid.html graphviz]"
      },
      "after": "b00d92d8adc8b2c7",
      "date": 1674651999333
    },
    {
      "type": "edit",
      "id": "b00d92d8adc8b2c7",
      "item": {
        "type": "paragraph",
        "id": "b00d92d8adc8b2c7",
        "text": "‚áí [[Costa Shulyupin]]'s [[Grid]] [https://graphviz.org/Gallery/undirected/grid.html graphviz]"
      },
      "date": 1674652063051
    },
    {
      "type": "fork",
      "date": 1674652257656
    },
    {
      "type": "edit",
      "id": "0188cb4c8e625859",
      "item": {
        "type": "paragraph",
        "id": "0188cb4c8e625859",
        "text": "‚áí [[Demo Sim & Viz]] ‚áí [[Generate a Rectangular Grid]]  ‚áí [[Grid]] ‚áí [[Rectangular Grid Fringe Pattern]] ‚áí [[Magic TV]] ‚áí [[Scenery]]"
      },
      "date": 1674652314381
    },
    {
      "type": "add",
      "id": "edff32aa684d302b",
      "item": {
        "type": "paragraph",
        "id": "edff32aa684d302b",
        "text": " ‚áí [[Rectangular Grid Fringe Pattern]] ‚áí [[Magic TV]]"
      },
      "after": "0188cb4c8e625859",
      "date": 1674652736903
    },
    {
      "id": "edff32aa684d302b",
      "type": "move",
      "order": [
        "0188cb4c8e625859",
        "aa38ca6e5914f7e4",
        "dca8e058ff10a859",
        "edff32aa684d302b",
        "90cadc5a966886d6",
        "b00d92d8adc8b2c7",
        "ccaf68f0dc54180c",
        "4f27b645a9781c9b",
        "5eefee9f3abe36fb"
      ],
      "date": 1674652739640
    },
    {
      "type": "add",
      "id": "714ebab2a8379ff9",
      "item": {
        "type": "paragraph",
        "id": "714ebab2a8379ff9",
        "text": "‚áí [[Generate a Rectangular Grid]]"
      },
      "after": "0188cb4c8e625859",
      "date": 1674653913343
    },
    {
      "id": "714ebab2a8379ff9",
      "type": "move",
      "order": [
        "0188cb4c8e625859",
        "aa38ca6e5914f7e4",
        "714ebab2a8379ff9",
        "dca8e058ff10a859",
        "edff32aa684d302b",
        "90cadc5a966886d6",
        "b00d92d8adc8b2c7",
        "ccaf68f0dc54180c",
        "4f27b645a9781c9b",
        "5eefee9f3abe36fb"
      ],
      "date": 1674653916474
    },
    {
      "item": {
        "type": "factory",
        "id": "2864409e843eaf08"
      },
      "id": "2864409e843eaf08",
      "type": "add",
      "after": "5eefee9f3abe36fb",
      "date": 1674654961127
    },
    {
      "type": "edit",
      "id": "2864409e843eaf08",
      "item": {
        "type": "paragraph",
        "id": "2864409e843eaf08",
        "text": "‚áí [[Babylon.js]]"
      },
      "date": 1674654971295
    },
    {
      "type": "edit",
      "id": "2864409e843eaf08",
      "item": {
        "type": "paragraph",
        "id": "2864409e843eaf08",
        "text": "‚áí [[Babylon.js]] ‚áí [[Apple Lisa Source Code]]"
      },
      "date": 1674655742774
    },
    {
      "type": "edit",
      "id": "2864409e843eaf08",
      "item": {
        "type": "paragraph",
        "id": "2864409e843eaf08",
        "text": "‚áí [[Babylon.js]] ‚áí [[Apple Lisa Source Code]] ‚áí [[MultilayerGraphs.jl]]"
      },
      "date": 1674657113974
    },
    {
      "item": {
        "type": "factory",
        "id": "091351393d3569d7"
      },
      "id": "091351393d3569d7",
      "type": "add",
      "after": "2864409e843eaf08",
      "date": 1674658022752
    },
    {
      "type": "edit",
      "id": "091351393d3569d7",
      "item": {
        "type": "paragraph",
        "id": "091351393d3569d7",
        "text": "‚áí [[Konrad Hinsen]] via \n@khinsen@scholar.social\n@rgb I guess a standard #Wiki would be a better choice for a formal reviewing process. A common \"source of truth\" shared by everyone. But... that's really a question that should be explored empirically!\n\nI really wish #FederatedWiki were easier to deploy, to encourage more people to explore its potential."
      },
      "date": 1674658041277
    },
    {
      "type": "edit",
      "id": "091351393d3569d7",
      "item": {
        "type": "paragraph",
        "id": "091351393d3569d7",
        "text": "‚áí [[Konrad Hinsen]] via [mastodon\n@khinsen@scholar.social\n@rgb I guess a standard #Wiki would be a better choice for a formal reviewing process. A common \"source of truth\" shared by everyone. But... that's really a question that should be explored empirically!\n\nI really wish #FederatedWiki were easier to deploy, to encourage more people to explore its potential."
      },
      "date": 1674658098849
    },
    {
      "type": "edit",
      "id": "091351393d3569d7",
      "item": {
        "type": "paragraph",
        "id": "091351393d3569d7",
        "text": "‚áí [[Konrad Hinsen]] @khinsen@scholar.social via [https://scholar.social/@khinsen/109750189358105074 mastodon]\n\n@rgb I guess a standard #Wiki would be a better choice for a formal reviewing process. A common \"source of truth\" shared by everyone. But... that's really a question that should be explored empirically!\n\nI really wish #FederatedWiki were easier to deploy, to encourage more people to explore its potential."
      },
      "date": 1674658129175
    },
    {
      "item": {
        "type": "factory",
        "id": "1bc039f5a591ddd4"
      },
      "id": "1bc039f5a591ddd4",
      "type": "add",
      "after": "091351393d3569d7",
      "date": 1674660687246
    },
    {
      "type": "edit",
      "id": "1bc039f5a591ddd4",
      "item": {
        "type": "pagefold",
        "id": "1bc039f5a591ddd4",
        "text": "~"
      },
      "date": 1674660690265
    },
    {
      "item": {
        "type": "factory",
        "id": "582a7ceea65a649f"
      },
      "id": "582a7ceea65a649f",
      "type": "add",
      "after": "1bc039f5a591ddd4",
      "date": 1674660691795
    },
    {
      "type": "edit",
      "id": "582a7ceea65a649f",
      "item": {
        "type": "paragraph",
        "id": "582a7ceea65a649f",
        "text": "codefrau ü¶© ‚Äî 16.01.2023 22:43\nThere likely were other changes needed to make that work properly ‚Äì the subscribers of the event at that time probably relied on the event having a ThreeJS ray. \n\n[explanation, feel free to ignore] Which is fine for pawn-to-pawn events, it's only if an actor subscribes to that same event then it needs to be serialized, to be sent via the reflector (that's what the error message meant, $[1].evt.ray  refers to an argument of that event). But we don't use ThreeJS for actor behaviors, it's only used for rendering/event handling in pawns. So while someone could add proper serialization for ThreeJS classes, it's simpler to use plain objects for events, and we get to catch errors like this.\n\nIn any case, Yoshiki didn't mean you should use that old version, but take the code as an example of handling the gizmo axes independently."
      },
      "date": 1674660693998
    },
    {
      "type": "edit",
      "id": "582a7ceea65a649f",
      "item": {
        "type": "paragraph",
        "id": "582a7ceea65a649f",
        "text": "codefrau ü¶© ‚Äî 16.01.2023 22:43 via [https://discord.com/channels/694586717247635488/965416739779248158/1064661181442314280 discord]\nThere likely were other changes needed to make that work properly ‚Äì the subscribers of the event at that time probably relied on the event having a ThreeJS ray. \n\n[explanation, feel free to ignore] Which is fine for pawn-to-pawn events, it's only if an actor subscribes to that same event then it needs to be serialized, to be sent via the reflector (that's what the error message meant, $[1].evt.ray  refers to an argument of that event). But we don't use ThreeJS for actor behaviors, it's only used for rendering/event handling in pawns. So while someone could add proper serialization for ThreeJS classes, it's simpler to use plain objects for events, and we get to catch errors like this.\n\nIn any case, Yoshiki didn't mean you should use that old version, but take the code as an example of handling the gizmo axes independently."
      },
      "date": 1674660716025
    },
    {
      "item": {
        "type": "factory",
        "id": "49863d5810c71e1b"
      },
      "id": "49863d5810c71e1b",
      "type": "add",
      "after": "582a7ceea65a649f",
      "date": 1674660861504
    },
    {
      "type": "edit",
      "id": "49863d5810c71e1b",
      "item": {
        "type": "pagefold",
        "id": "49863d5810c71e1b",
        "text": "~"
      },
      "date": 1674660864423
    },
    {
      "item": {
        "type": "factory",
        "id": "5b761bd408fdfdb0"
      },
      "id": "5b761bd408fdfdb0",
      "type": "add",
      "after": "49863d5810c71e1b",
      "date": 1674660865992
    },
    {
      "type": "edit",
      "id": "5b761bd408fdfdb0",
      "item": {
        "type": "paragraph",
        "id": "5b761bd408fdfdb0",
        "text": "tone1699 ‚Äî 22.01.2023 18:52\nhi, I'm a student and I started making my first Microverse for a thesis project.\nI would like to ask if someone could help me with the problem I'm having (I don't know if it's actually feasible).\nI made my first Microverse and followed your get started, what I would like to do now is use croquet in node.js to connect via Session.join and subscribe to some events.\nMy idea was that using the same appID and the same apiKey by connecting to the session I would be able to receive Microverse publishes via reflectors.\nI would like to ask if this thing is actually feasible and if someone could help me in the correct implementation thank you very much\ncodefrau ü¶© ‚Äî 22.01.2023 19:40\nThis is infeasible right now. While Croquet OS runs on node too, the Microverse code base is not structured in a way to allow this. There would need to be a clear separation of browser and non-browser code to be able to only run the common parts on node.\nIf your goal is to trigger some server-side actions from Microverse, we can certainly help you to figure that out.\ncodefrau ü¶© ‚Äî 22.01.2023 19:56\nIn a nutshell, we call that ‚Äúconnectors,‚Äù to connect sessions to the real world. We have examples for both pulling external data into Microverse and triggering external actions. \nBoth directions can be implemented with the same ‚Äúclient-side connector‚Äù mechanism. It elects one of the peers to be the relay between the outside world and Microverse."
      },
      "date": 1674660867696
    },
    {
      "type": "edit",
      "id": "5b761bd408fdfdb0",
      "item": {
        "type": "paragraph",
        "id": "5b761bd408fdfdb0",
        "text": "tone1699 ‚Äî 22.01.2023 18:52\nhi, I'm a student and I started making my first Microverse for a thesis project.\nI would like to ask if someone could help me with the problem I'm having (I don't know if it's actually feasible).\nI made my first Microverse and followed your get started, what I would like to do now is use croquet in node.js to connect via Session.join and subscribe to some events.\nMy idea was that using the same appID and the same apiKey by connecting to the session I would be able to receive Microverse publishes via reflectors.\nI would like to ask if this thing is actually feasible and if someone could help me in the correct implementation thank you very much\ncodefrau ü¶© ‚Äî 22.01.2023 19:40\nThis is infeasible right now. While Croquet OS runs on node too, the Microverse code base is not structured in a way to allow this. There would need to be a clear separation of browser and non-browser code to be able to only run the common parts on node.\nIf your goal is to trigger some server-side actions from Microverse, we can certainly help you to figure that out.\n"
      },
      "date": 1674660875378
    },
    {
      "type": "add",
      "id": "be7e2889fb535d27",
      "item": {
        "type": "paragraph",
        "id": "be7e2889fb535d27",
        "text": "codefrau ü¶© ‚Äî 22.01.2023 19:56\nIn a nutshell, we call that ‚Äúconnectors,‚Äù to connect sessions to the real world. We have examples for both pulling external data into Microverse and triggering external actions. \nBoth directions can be implemented with the same ‚Äúclient-side connector‚Äù mechanism. It elects one of the peers to be the relay between the outside world and Microverse."
      },
      "after": "5b761bd408fdfdb0",
      "date": 1674660877466
    },
    {
      "type": "edit",
      "id": "be7e2889fb535d27",
      "item": {
        "type": "paragraph",
        "id": "be7e2889fb535d27",
        "text": "codefrau ü¶© ‚Äî 22.01.2023 19:56 via [https://discord.com/channels/694586717247635488/965416739779248158/1066789544759926844 discord]\nIn a nutshell, we call that ‚Äúconnectors,‚Äù to connect sessions to the real world. We have examples for both pulling external data into Microverse and triggering external actions. \nBoth directions can be implemented with the same ‚Äúclient-side connector‚Äù mechanism. It elects one of the peers to be the relay between the outside world and Microverse."
      },
      "date": 1674660900397
    },
    {
      "type": "edit",
      "id": "be7e2889fb535d27",
      "item": {
        "type": "paragraph",
        "id": "be7e2889fb535d27",
        "text": "codefrau ü¶© ‚Äî 22.01.2023 19:56 \nIn a nutshell, we call that ‚Äúconnectors,‚Äù to connect sessions to the real world. We have examples for both pulling external data into Microverse and triggering external actions. \nBoth directions can be implemented with the same ‚Äúclient-side connector‚Äù mechanism. It elects one of the peers to be the relay between the outside world and Microverse."
      },
      "date": 1674660913510
    },
    {
      "type": "edit",
      "id": "5b761bd408fdfdb0",
      "item": {
        "type": "paragraph",
        "id": "5b761bd408fdfdb0",
        "text": "tone1699 ‚Äî 22.01.2023 18:52\nhi, I'm a student and I started making my first Microverse for a thesis project.\nI would like to ask if someone could help me with the problem I'm having (I don't know if it's actually feasible).\nI made my first Microverse and followed your get started, what I would like to do now is use croquet in node.js to connect via Session.join and subscribe to some events.\nMy idea was that using the same appID and the same apiKey by connecting to the session I would be able to receive Microverse publishes via reflectors.\nI would like to ask if this thing is actually feasible and if someone could help me in the correct implementation thank you very much\n"
      },
      "date": 1674660918582
    },
    {
      "type": "add",
      "id": "a47a146f69ac0918",
      "item": {
        "type": "paragraph",
        "id": "a47a146f69ac0918",
        "text": "codefrau ü¶© ‚Äî 22.01.2023 19:40 via [https://discord.com/channels/694586717247635488/965416739779248158/1066789544759926844 discord]\nThis is infeasible right now. While Croquet OS runs on node too, the Microverse code base is not structured in a way to allow this. There would need to be a clear separation of browser and non-browser code to be able to only run the common parts on node.\nIf your goal is to trigger some server-side actions from Microverse, we can certainly help you to figure that out.\n"
      },
      "after": "5b761bd408fdfdb0",
      "date": 1674660922560
    },
    {
      "type": "add",
      "id": "d1246e3ceb6d2e1a",
      "item": {
        "type": "paragraph",
        "id": "d1246e3ceb6d2e1a",
        "text": "[‚Ä¶]"
      },
      "after": "be7e2889fb535d27",
      "date": 1674661020798
    },
    {
      "type": "add",
      "id": "7adcefabce94c782",
      "item": {
        "type": "paragraph",
        "id": "7adcefabce94c782",
        "text": "codefrau ü¶© ‚Äî 22.01.2023 22:00\nCroquet is based on replicated computation. The node client would have to run the exact same code as the browser clients, in order to have access to the same state and generate the same events as the browser clients. That is possible in general but infeasible in the context of Microverse due to the structure of its source code, which was not designed to be used outside of a browser. \nThe only feasible way to connect Microverse to external tools is by using client-side code. For example, for our live coding, the browser client connects to a nodejs server running on the same machine, which provides the connection to an external editor. Your 3d object bridge could be implemented in a similar way."
      },
      "after": "d1246e3ceb6d2e1a",
      "date": 1674661047360
    },
    {
      "type": "edit",
      "id": "7adcefabce94c782",
      "item": {
        "type": "paragraph",
        "id": "7adcefabce94c782",
        "text": "codefrau ü¶© ‚Äî 22.01.2023 22:00 via [https://discord.com/channels/694586717247635488/965416739779248158/1066824707552313404 discord]\nCroquet is based on replicated computation. The node client would have to run the exact same code as the browser clients, in order to have access to the same state and generate the same events as the browser clients. That is possible in general but infeasible in the context of Microverse due to the structure of its source code, which was not designed to be used outside of a browser. \nThe only feasible way to connect Microverse to external tools is by using client-side code. For example, for our live coding, the browser client connects to a nodejs server running on the same machine, which provides the connection to an external editor. Your 3d object bridge could be implemented in a similar way."
      },
      "date": 1674661259756
    },
    {
      "item": {
        "type": "factory",
        "id": "0a06acf0724770a7"
      },
      "id": "0a06acf0724770a7",
      "type": "add",
      "after": "7adcefabce94c782",
      "date": 1674661463952
    },
    {
      "type": "edit",
      "id": "0a06acf0724770a7",
      "item": {
        "type": "paragraph",
        "id": "0a06acf0724770a7",
        "text": "‚áí [[Live Coding]]"
      },
      "date": 1674661474808
    },
    {
      "type": "edit",
      "id": "0a06acf0724770a7",
      "item": {
        "type": "paragraph",
        "id": "0a06acf0724770a7",
        "text": "‚áí [[Live Coding]]  ‚áí [[connect "
      },
      "date": 1674661603160
    },
    {
      "type": "edit",
      "id": "0a06acf0724770a7",
      "item": {
        "type": "paragraph",
        "id": "0a06acf0724770a7",
        "text": "‚áí [[Live Coding]]  ‚áí [[connect Microverse to external tools]] "
      },
      "date": 1674661631103
    },
    {
      "type": "edit",
      "id": "0a06acf0724770a7",
      "item": {
        "type": "paragraph",
        "id": "0a06acf0724770a7",
        "text": "‚áí [[Live Coding]]  ‚áí [[Connect Microverse to External Tools]] "
      },
      "date": 1674661642116
    },
    {
      "type": "edit",
      "id": "0a06acf0724770a7",
      "item": {
        "type": "paragraph",
        "id": "0a06acf0724770a7",
        "text": "‚áí [[Live Coding]]  ‚áí [[Connect Microverse]] to External Tools "
      },
      "date": 1674661672510
    },
    {
      "item": {
        "type": "factory",
        "id": "d79bf22547df33d0"
      },
      "id": "d79bf22547df33d0",
      "type": "add",
      "after": "0a06acf0724770a7",
      "date": 1674672501793
    },
    {
      "type": "edit",
      "id": "d79bf22547df33d0",
      "item": {
        "type": "paragraph",
        "id": "d79bf22547df33d0",
        "text": "‚áí [[Top-Level Branches]]"
      },
      "date": 1674672512626
    },
    {
      "type": "edit",
      "id": "d79bf22547df33d0",
      "item": {
        "type": "paragraph",
        "id": "d79bf22547df33d0",
        "text": "‚áí [[Antinet Zettelkasten]] ‚áí [[Top-Level Branches]]"
      },
      "date": 1674672640720
    },
    {
      "item": {
        "type": "factory",
        "id": "dad854ea0343b4f0"
      },
      "id": "dad854ea0343b4f0",
      "type": "add",
      "after": "d79bf22547df33d0",
      "date": 1674674657241
    },
    {
      "type": "edit",
      "id": "dad854ea0343b4f0",
      "item": {
        "type": "graphviz",
        "id": "dad854ea0343b4f0",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1674674663778
    },
    {
      "item": {
        "type": "factory",
        "id": "eb6c29cd72eda4c0"
      },
      "id": "eb6c29cd72eda4c0",
      "type": "add",
      "after": "dad854ea0343b4f0",
      "date": 1674677388417
    },
    {
      "type": "edit",
      "id": "eb6c29cd72eda4c0",
      "item": {
        "type": "pagefold",
        "id": "eb6c29cd72eda4c0",
        "text": "~"
      },
      "date": 1674677392733
    },
    {
      "item": {
        "type": "factory",
        "id": "86f41f3330a190e4"
      },
      "id": "86f41f3330a190e4",
      "type": "add",
      "after": "eb6c29cd72eda4c0",
      "date": 1674677394406
    },
    {
      "type": "edit",
      "id": "86f41f3330a190e4",
      "item": {
        "type": "paragraph",
        "id": "86f41f3330a190e4",
        "text": "The self-organizing map has already found appreciation for document classification in the information retrieval community. The map display is a highly effective and intuitive metaphor for orientation in the information space established by a document collection. In this paper we discuss ways for using self-organizing maps for document classification. Furthermore, we argue in favor of paying more attention to the fact that document collections lend themselves naturally to a hierarchical structure defined by the subject matter of the documents. We take advantage of this fact by using a hierarchically organized neural network, built up from a number of independent self-organizing maps in order to enable the true establishment of a document taxonomy. As a highly convenient side effect of using such an architecture, the time needed for training is reduced substantially and the user is provided with an even more intuitive metaphor for visualization. Since the single layers of self-organizing maps represent different aspects of the document collection at different levels of detail, the neural network shows the document collection in a form comparable to an atlas where the user may easily select the most appropriate degree of granularity depending on the actual focus of interest during the exploration of the document collection."
      },
      "date": 1674677397468
    },
    {
      "type": "edit",
      "id": "86f41f3330a190e4",
      "item": {
        "type": "paragraph",
        "id": "86f41f3330a190e4",
        "text": "‚áí [[ Self-Organizing Map]]"
      },
      "date": 1674677447025
    },
    {
      "type": "add",
      "id": "42178f79fd9c21c3",
      "item": {
        "type": "paragraph",
        "id": "42178f79fd9c21c3",
        "text": "The self-organizing map has already found appreciation for document classification in the information retrieval community. The map display is a highly effective and intuitive metaphor for orientation in the information space established by a document collection. In this paper we discuss ways for using self-organizing maps for document classification. Furthermore, we argue in favor of paying more attention to the fact that document collections lend themselves naturally to a hierarchical structure defined by the subject matter of the documents. We take advantage of this fact by using a hierarchically organized neural network, built up from a number of independent self-organizing maps in order to enable the true establishment of a document taxonomy. As a highly convenient side effect of using such an architecture, the time needed for training is reduced substantially and the user is provided with an even more intuitive metaphor for visualization. Since the single layers of self-organizing maps represent different aspects of the document collection at different levels of detail, the neural network shows the document collection in a form comparable to an atlas where the user may easily select the most appropriate degree of granularity depending on the actual focus of interest during the exploration of the document collection."
      },
      "after": "86f41f3330a190e4",
      "date": 1674677448735
    },
    {
      "type": "edit",
      "id": "86f41f3330a190e4",
      "item": {
        "type": "paragraph",
        "id": "86f41f3330a190e4",
        "text": "‚áí [[Self-Organizing Map]]"
      },
      "date": 1674677450825
    },
    {
      "type": "edit",
      "id": "86f41f3330a190e4",
      "item": {
        "type": "paragraph",
        "id": "86f41f3330a190e4",
        "text": "‚áí [[Self-Organizing Map]] ‚áí [[Document Classification]]"
      },
      "date": 1674677504803
    },
    {
      "type": "edit",
      "id": "86f41f3330a190e4",
      "item": {
        "type": "paragraph",
        "id": "86f41f3330a190e4",
        "text": "‚áí [[Self-Organizing Map]] ‚áí [[Document Classification]] ‚áí [[Information Retrieval Community]]"
      },
      "date": 1674677549160
    },
    {
      "type": "edit",
      "id": "42178f79fd9c21c3",
      "item": {
        "type": "paragraph",
        "id": "42178f79fd9c21c3",
        "text": "The self-organizing map has already found appreciation for document classification in the information retrieval community. The map display is a highly effective and intuitive metaphor for orientation in the information space established by a document collection. "
      },
      "date": 1674677554305
    },
    {
      "type": "add",
      "id": "ae490f5412328277",
      "item": {
        "type": "paragraph",
        "id": "ae490f5412328277",
        "text": "In this paper we discuss ways for using self-organizing maps for document classification. Furthermore, we argue in favor of paying more attention to the fact that document collections lend themselves naturally to a hierarchical structure defined by the subject matter of the documents. We take advantage of this fact by using a hierarchically organized neural network, built up from a number of independent self-organizing maps in order to enable the true establishment of a document taxonomy. As a highly convenient side effect of using such an architecture, the time needed for training is reduced substantially and the user is provided with an even more intuitive metaphor for visualization. Since the single layers of self-organizing maps represent different aspects of the document collection at different levels of detail, the neural network shows the document collection in a form comparable to an atlas where the user may easily select the most appropriate degree of granularity depending on the actual focus of interest during the exploration of the document collection."
      },
      "after": "42178f79fd9c21c3",
      "date": 1674677558098
    },
    {
      "item": {
        "type": "factory",
        "id": "99c1d5fc47e090c1"
      },
      "id": "99c1d5fc47e090c1",
      "type": "add",
      "after": "ae490f5412328277",
      "date": 1674677580482
    },
    {
      "type": "edit",
      "id": "99c1d5fc47e090c1",
      "item": {
        "type": "paragraph",
        "id": "99c1d5fc47e090c1",
        "text": "\nMERKL, Dieter, 1998. Text classification with self-organizing maps: Some lessons learned. Neurocomputing. 6 November 1998. Vol.¬†21, no.¬†1, p.¬†61‚Äì77. DOI¬†10.1016/S0925-2312(98)00032-0. \n"
      },
      "date": 1674677589200
    },
    {
      "type": "edit",
      "id": "99c1d5fc47e090c1",
      "item": {
        "type": "paragraph",
        "id": "99c1d5fc47e090c1",
        "text": "MERKL, Dieter, 1998. Text classification with self-organizing maps: Some lessons learned. Neurocomputing. 6 November 1998. Vol.¬†21, no.¬†1, p.¬†61‚Äì77. DOI¬†10.1016/S0925-2312(98)00032-0. \n"
      },
      "date": 1674677603733
    },
    {
      "type": "edit",
      "id": "86f41f3330a190e4",
      "item": {
        "type": "paragraph",
        "id": "86f41f3330a190e4",
        "text": "‚áí [[Classification]] ‚áí [[Text Classification]] ‚áí [[Self-Organizing Map]] ‚áí [[Document Classification]] ‚áí [[Information Retrieval Community]]"
      },
      "date": 1674677639863
    },
    {
      "id": "42178f79fd9c21c3",
      "type": "remove",
      "date": 1674677765754
    },
    {
      "id": "ae490f5412328277",
      "type": "remove",
      "date": 1674677770802
    },
    {
      "id": "99c1d5fc47e090c1",
      "type": "remove",
      "date": 1674677780787
    }
  ]
}