{
  "title": "Cobol Language",
  "story": [
    {
      "type": "html",
      "text": "The <i>C</i><i>o</i>mmon <i>B</i>usiness <i>O</i>riented <i>L</i>anguage, designed by a team lead by [[Grace Hopper]]. Designed to be read by managers. Its unverified origin is explained at [[Cobol Causes Brain Damage]].",
      "id": "fcaae69c8264b9f496ca54c78cd7a253"
    },
    {
      "type": "html",
      "text": " I don't think [[Grace Hopper]] was the \"official\" team leader. However, her earlier work on language design had a lot of influence on COBOL. The way some of the members describe it is basically the committee couldn't agree on anything (massive ego battles), ran out of time, and then fell back on Grace's earlier work as a basis for the language because it had generally worked, was liked, and they needed to produce something fast because they had squandered their time on those ego battles. Nothing like a deadline to inject reality into idealists.",
      "id": "8dd8c4597efacbee31dfe9c1fda01721"
    },
    {
      "type": "html",
      "text": "<i>I believe COBOL was originally designed to be easier to read than assembly language.  That's pretty much all you can say for it...</i>",
      "id": "8d2e0e444bbdc95f2045af566ecf7c34"
    },
    {
      "type": "html",
      "text": "<i>Don't forget the B in COBOL.</i>",
      "id": "7f3e450731a1c92dd871ed87ce0b5ec2"
    },
    {
      "type": "html",
      "text": "\nSee also its spiritual successor [[Abap Language]], which is basically COBOL for SAP R/3 systems.",
      "id": "5b361bb035e1ac8dd9bd0d8f31e47d34"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "66daba07c64dc733b8d0476b497faa3f"
    },
    {
      "type": "html",
      "text": "\nA COBOL programmer can say things like:",
      "id": "27ea3465aa5f0a15449d1e792bc5ed95"
    },
    {
      "type": "code",
      "text": " DIVIDE TOTAL BY NUMBER GIVING PRO-RATA REMAINDER RESIDUE.",
      "id": "0041f4d9438148f2b490537f9d173cd1"
    },
    {
      "type": "html",
      "text": "\nCobol also allowed things like",
      "id": "cf46609798be67e1e94aaa9512d78af8"
    },
    {
      "type": "code",
      "text": "  SORT PEOPLE-FILE ON KEY SSN.",
      "id": "1533e4b8eb97b195f8e69957fe470854"
    },
    {
      "type": "html",
      "text": "\nA COBOL program is divided into divisions, sections, paragraphs and sentences. The sentence above may not be valid, as COBOL has getting on for a thousand keywords, one or more of which I may have used as, well, not variables exactly, as <i>names</i> above.",
      "id": "433ab82d2096c4b2e245659b1ff07aad"
    },
    {
      "type": "html",
      "text": "\nCOBOL assumes hierarchical data records. This fitted most of data of the time: Unit Record Systems, Tabulators, Punch Cards, Line Printers, Magnetic Tapes, etc..",
      "id": "c7e6037f36a8f3d7f5ed4606562d49e3"
    },
    {
      "type": "html",
      "text": "\nIt was and is one of the few languages that had exact fixed point decimal arithmetic on big numbers.  This is useful\nfor a type of data called <i>money</i>.  The <i>B</i> in <i>COBOL</i>.  For example, if you computed WAGES\nyou could get the dollars and cents to count how many bills and coin of each denomination\nwould be needed to fill the weekly pay packets.  No division was needed, you just had CENTS OF WAGES.",
      "id": "f30ce20eccccb84412bb53dca2da5f1f"
    },
    {
      "type": "html",
      "text": "\nInterestingly, there is some attempt to isolate a COBOL program from its environment, placing all the system specific details in one division at the top. Not bad for the 50's.",
      "id": "2897058eabf46be598e4dd9e5d5e2eab"
    },
    {
      "type": "html",
      "text": "\nThe most fun construct in COBOL is the ALTER verb. COBOL has something like the \"computed goto\" of FORTRAN. Older dialects have no notion of a procedure or function, all the flow of control is done with named paragraphs and gotos.  Anyway, ALTER lets you change, at runtime, where the branches of a goto go to. As [[Charles Weir]] pointed out, one could use this to implement polymorphism. If you had a lot of time on your hands.",
      "id": "c8af492650daaab59ed9fb9769dac2ff"
    },
    {
      "type": "html",
      "text": "<i>FORTRAN has (or had) a similar thing called assigned GOTO. -- [[John Fletcher]]</i>",
      "id": "163a423022edb9176fd6e1058e3de9b2"
    },
    {
      "type": "html",
      "text": "\nBy 1970, if not earlier, any section or paragraph (or sequence of sections or paragraphs) could be executed as a subprogram with the PERFORM verb.  This also provided structured loops:",
      "id": "782351bb65485d1d1137b130ccc6113c"
    },
    {
      "type": "code",
      "text": "  PERFORM WAGE-CALCULATION UNTIL END-OF-FILE.\n  PERFORM FACTORIAL-MULTIPLICATION VARYING MULT FROM 2 BY 1 UNTIL MULT > 100.",
      "id": "c2340d75d646c14e9228011e10eec6a6"
    },
    {
      "type": "html",
      "text": "\nCOBOL is still a force in the world, so much so that when I was an unemployable fresh graduate the British employment service thought that having a [[City And Guilds]] certificate in COBOL programming would help my job prospects enough for them to pay for me to get one.",
      "id": "86ee22deefcf9492905923b0ec2c9790"
    },
    {
      "type": "html",
      "text": "-- [[Keith Braithwaite]]",
      "id": "39d79012ecba373a07f032fadd4b94c4"
    },
    {
      "type": "html",
      "text": "\n[[Cobol Language]]'s market share is the envy, aspiration and Holy Grail of all [[Fourth Generation Language]] vendors.",
      "id": "01415cf27cc046b4f37037a2b872859c"
    },
    {
      "type": "html",
      "text": "-- [[Matt Rickard]]",
      "id": "076320f86368311ff9d53feef68c0d46"
    },
    {
      "type": "html",
      "text": "\nSyntax for old COBOL at",
      "id": "6da11ac71ddf379f8d7310e0a542a662"
    },
    {
      "type": "code",
      "text": "  http://www.csci.csusb.edu/dick/samples/cobol.syntax.html",
      "id": "892b95707c80c39e7be6678a077c55ad"
    },
    {
      "type": "html",
      "text": "\nThe readableness of things like",
      "id": "a52d4fb372b737b448b7ed14fc7fc35f"
    },
    {
      "type": "html",
      "text": " PRINT PIC CR********9V.99.",
      "id": "b1b6c9e413e39bd9af9a13ecf6670c65"
    },
    {
      "type": "html",
      "text": "was always debatable.",
      "id": "111edd7308dfcadf7c5c49ad5a20f351"
    },
    {
      "type": "html",
      "text": "-- [[Dick Botting]]",
      "id": "59a4e408f213f8377dc40faa58316f4e"
    },
    {
      "type": "html",
      "text": "\nNot if you were working at a financial institute of the time. Leading with asterisks was done to ensure no alteration of counter-checks. Seems pretty obvious in that light, print amount with all leading spaces filled with '*', float a '+' or '-' in front.",
      "id": "4b690955a06a3893cab9933cfee7c9ac"
    },
    {
      "type": "html",
      "text": "-- CHergerThomann",
      "id": "3c910282e7f6ce38bd0519da7f8e9c25"
    },
    {
      "type": "html",
      "text": "<i>Format templating is a good thing in my opinion. I don't know of a better alternative. I agree that maybe COBOL's templating symbol choices were not always the best, but at least it had a solid set.</i>",
      "id": "8376931d99830f6a6872562ea5138888"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "66daba07c64dc733b8d0476b497faa3f"
    },
    {
      "type": "html",
      "text": "\nThere's speculation on [[What The Ytwok Drivers]] that the inflexibility of COBOL, and in particular, the absence of abstract data types (or some other mechanism for information hiding/encapsulation) aggravated the Y2K problem. Had COBOL these features, moving from 2 to 4 digits dates should have been much easier.",
      "id": "750030d1eacb88aec9bcc449dfb629e8"
    },
    {
      "type": "html",
      "text": "<i>Many developers said that it was often to save disk, memory space, and card space, which was very expensive at the dawn of computing. ADT's wouldn't help there. Also, standard punched cards had 80 characters. If you went over that, then you had to deal with double stacks. Many interviewed said they would have happily used 4-digit years if not for the hardware-related issues.</i>",
      "id": "861fb532d88800d94e44816f43580410"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "66daba07c64dc733b8d0476b497faa3f"
    },
    {
      "type": "html",
      "text": "\nAnd if pigs had wings, they could fly. In those days, compiler writers were still fighting to show that assembler wasn't the Ultimate Language, external storage was magtape and punched cards, and <i>no one</i> had things like ADTs. (Though perhaps it could be faked in Lisp, which is approximately the same age as Cobol.) -- David Wolff.",
      "id": "cf9791d431b8141de864a53263e8f8b4"
    },
    {
      "type": "html",
      "text": "\nIt would seem that the poster on WTYD was not suggesting that COBOL was deficient by not having features that weren't available at the time, but rather that because we all do use ADTs and encapsulation and such these days (right?) any future such problem would be easier to fix. Not that Y2K was such a problem anyway, it turns out. Judge the porcine aviation factor of todays \"best practice\" for yourself.",
      "id": "7b700b960f15b6c5b18826bcec5d6b4b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "66daba07c64dc733b8d0476b497faa3f"
    },
    {
      "type": "html",
      "text": "COBOL made me think of [[Code As Poetry]] before I knew much about the [[Perl Language]]. -- [[Nick Bensema]]\nOr perhaps, code-as-folktale?  I present, \"The Common Business-Oriented Goldilocks\":",
      "id": "dca756b1426b74629846b525e251b150"
    },
    {
      "type": "html",
      "text": " [http://www-users.cs.york.ac.uk/susan/joke/cblgold.htm www-users.cs.york.ac.uk]",
      "id": "e77e21ab066c4494079c2509ea8d0a42"
    },
    {
      "type": "html",
      "text": "\nSee also [[Cobol Fallacy]], a lesson which [[Apple Script]] did not learn.",
      "id": "2904bd7091f7a777ea9a1c22ec690239"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "66daba07c64dc733b8d0476b497faa3f"
    },
    {
      "type": "html",
      "text": "A Cobol grammar generated from the official Cobol standard is available (in a rather readable format) at ",
      "id": "dd2e674c735c14fab9115f02441ef0e1"
    },
    {
      "type": "html",
      "text": "[http://www.cwi.nl/~ralf/grammars/vs-cobol-ii/ www.cwi.nl]",
      "id": "637ed3a17024c5aad8231b4d17d9a6a4"
    },
    {
      "type": "html",
      "text": "\nAnother Cobol grammar, which was actually used for the purpose of [[Reverse Engineering]] Cobol [[Legacy Code]], is available at",
      "id": "1aff726f8e262342347fcd13079647b0"
    },
    {
      "type": "html",
      "text": "[http://www.cwi.nl/~mdejonge/grammar-base/ www.cwi.nl]",
      "id": "880dd7e9273de30462dd0f9cb8322b78"
    },
    {
      "type": "html",
      "text": "-- [[Arie Van Deursen]]",
      "id": "c7d374791d1c26e3f2a0f33301c65ce3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "66daba07c64dc733b8d0476b497faa3f"
    },
    {
      "type": "html",
      "text": "Apparently, COBOL is now available for the Microsoft .NET framework. See [[Other Dot Net Languages]].",
      "id": "0f6ef51d4990c8aaa407a8d1f902d2c5"
    },
    {
      "type": "html",
      "text": "\nThere's also OO-COBOL - see [http://home.swbell.net/mck9/cobol/ooc/overview.html home.swbell.net]. <i>Cobol++? Should be called \"POSTINCREMENT COBOL BY 1 GIVING COBOL\"!</i>",
      "id": "2285c1b3a04ed5f602864c7da99794d7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "66daba07c64dc733b8d0476b497faa3f"
    },
    {
      "type": "html",
      "text": "\nCOBOL Standards:",
      "id": "6ad4b9a4bb24a3b4b862065214c571c4"
    },
    {
      "type": "html",
      "text": " 1968 = \"COBOL Classic\"  ;->",
      "id": "123fbcfaee27291898f3f98da1c5befc"
    },
    {
      "type": "html",
      "text": " 1974",
      "id": "5c15eeeb3a9871baca14fb3d2ffa5c9a"
    },
    {
      "type": "html",
      "text": " 1985 = Adds structured if/else/end-if, perform/end-perform, etc.",
      "id": "cb50f08a09a6473c0feffbcd9416fcb7"
    },
    {
      "type": "html",
      "text": " 1989 addendum = \"added intrinsic functions, such as COSINE and TANGENT\"",
      "id": "bc4f6c4dca21279dbcd67c6d66663126"
    },
    {
      "type": "html",
      "text": " 1993 addendum = \"corrected errors and ambiguities\"",
      "id": "9067edfe786d7a29dfb332bc4542755b"
    },
    {
      "type": "html",
      "text": " 1995 = \"Object Oriented\" COBOL",
      "id": "52964f4fd4989b71b4955214c156e36d"
    },
    {
      "type": "html",
      "text": " 2002 = \"includes object-oriented features, locale support, UNICODE support and data validation.\"",
      "id": "1ffa70b33357868e0b64698abdc84bdb"
    },
    {
      "type": "html",
      "text": " [http://www.microfocus.com/whitepapers/developmentcobolstandard.asp www.microfocus.com]",
      "id": "9418c5d4bd940f39fe3cbe5d4561f610"
    },
    {
      "type": "html",
      "text": " [http://objectz.com/AnEveningwith/transcript1.html objectz.com] = an interview with Don Schricker",
      "id": "41d91a48088b0013985071e4f0c58e20"
    },
    {
      "type": "html",
      "text": " 2008 = planned next version",
      "id": "a4132ede8090ab1e55d22119d61193dc"
    },
    {
      "type": "html",
      "text": " [http://www.cobolstandards.com/ www.cobolstandards.com]",
      "id": "1fd9850a70f18586a5b774a7839e5844"
    },
    {
      "type": "html",
      "text": " [http://www.cobolstandards.com/annexf.pdf www.cobolstandards.com]",
      "id": "2f46f03b7444a3191dce0354aec59f18"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "66daba07c64dc733b8d0476b497faa3f"
    },
    {
      "type": "html",
      "text": "\nI've been tutoring a university student who's taking an intro programming course, and the instruction language is [[Java Language]]. One day she was asking me some questions about why Java is the way it is, and I forwarded a link to [[Java Is The New Cobol]] and some COBOL example program for reference. She came back a few minutes later and asked, \"um, so why don't people just use that?\" Since this question required an hour of answer or none at all, I changed the subject. Still, it's interesting how the verbosity of COBOL makes it somehow seem less dated than it is.",
      "id": "5caed68337f1f664840f57facef05784"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "66daba07c64dc733b8d0476b497faa3f"
    },
    {
      "type": "html",
      "text": "\nCOBOL User Groups (COBUG)",
      "id": "b83678b272687ed247c6c13310a0e0a4"
    },
    {
      "type": "html",
      "text": "\nA COBOL programming portal that is a one-stop resource for the COBOL community where you will find references to user groups, compilers, forums, jobs, and other COBOL programming resources.",
      "id": "5c41cbabefa854bbaaebcda4ad93a625"
    },
    {
      "type": "html",
      "text": "\n[http://www.cobug.com/ www.cobug.com]",
      "id": "2e2666a9ff45c884769b86a71e25b48c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "66daba07c64dc733b8d0476b497faa3f"
    },
    {
      "type": "html",
      "text": "\n[[Category Programming Language]]",
      "id": "04b8ae3c9a58799afa22ab7049570e52"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CobolLanguage c2.com]",
      "id": "3fd3fd96c388118e136c35a5a79b5d69"
    }
  ],
  "journal": [
    {
      "date": 1402419794000,
      "id": "c2f6d9bbc8ee6aca17238217a6914131",
      "type": "create",
      "item": {
        "title": "Cobol Language",
        "story": [
          {
            "type": "html",
            "text": "The <i>C</i><i>o</i>mmon <i>B</i>usiness <i>O</i>riented <i>L</i>anguage, designed by a team lead by [[Grace Hopper]]. Designed to be read by managers. Its unverified origin is explained at [[Cobol Causes Brain Damage]].",
            "id": "fcaae69c8264b9f496ca54c78cd7a253"
          },
          {
            "type": "html",
            "text": " I don't think [[Grace Hopper]] was the \"official\" team leader. However, her earlier work on language design had a lot of influence on COBOL. The way some of the members describe it is basically the committee couldn't agree on anything (massive ego battles), ran out of time, and then fell back on Grace's earlier work as a basis for the language because it had generally worked, was liked, and they needed to produce something fast because they had squandered their time on those ego battles. Nothing like a deadline to inject reality into idealists.",
            "id": "8dd8c4597efacbee31dfe9c1fda01721"
          },
          {
            "type": "html",
            "text": "<i>I believe COBOL was originally designed to be easier to read than assembly language.  That's pretty much all you can say for it...</i>",
            "id": "8d2e0e444bbdc95f2045af566ecf7c34"
          },
          {
            "type": "html",
            "text": "<i>Don't forget the B in COBOL.</i>",
            "id": "7f3e450731a1c92dd871ed87ce0b5ec2"
          },
          {
            "type": "html",
            "text": "\nSee also its spiritual successor [[Abap Language]], which is basically COBOL for SAP R/3 systems.",
            "id": "5b361bb035e1ac8dd9bd0d8f31e47d34"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "66daba07c64dc733b8d0476b497faa3f"
          },
          {
            "type": "html",
            "text": "\nA COBOL programmer can say things like:",
            "id": "27ea3465aa5f0a15449d1e792bc5ed95"
          },
          {
            "type": "code",
            "text": " DIVIDE TOTAL BY NUMBER GIVING PRO-RATA REMAINDER RESIDUE.",
            "id": "0041f4d9438148f2b490537f9d173cd1"
          },
          {
            "type": "html",
            "text": "\nCobol also allowed things like",
            "id": "cf46609798be67e1e94aaa9512d78af8"
          },
          {
            "type": "code",
            "text": "  SORT PEOPLE-FILE ON KEY SSN.",
            "id": "1533e4b8eb97b195f8e69957fe470854"
          },
          {
            "type": "html",
            "text": "\nA COBOL program is divided into divisions, sections, paragraphs and sentences. The sentence above may not be valid, as COBOL has getting on for a thousand keywords, one or more of which I may have used as, well, not variables exactly, as <i>names</i> above.",
            "id": "433ab82d2096c4b2e245659b1ff07aad"
          },
          {
            "type": "html",
            "text": "\nCOBOL assumes hierarchical data records. This fitted most of data of the time: Unit Record Systems, Tabulators, Punch Cards, Line Printers, Magnetic Tapes, etc..",
            "id": "c7e6037f36a8f3d7f5ed4606562d49e3"
          },
          {
            "type": "html",
            "text": "\nIt was and is one of the few languages that had exact fixed point decimal arithmetic on big numbers.  This is useful\nfor a type of data called <i>money</i>.  The <i>B</i> in <i>COBOL</i>.  For example, if you computed WAGES\nyou could get the dollars and cents to count how many bills and coin of each denomination\nwould be needed to fill the weekly pay packets.  No division was needed, you just had CENTS OF WAGES.",
            "id": "f30ce20eccccb84412bb53dca2da5f1f"
          },
          {
            "type": "html",
            "text": "\nInterestingly, there is some attempt to isolate a COBOL program from its environment, placing all the system specific details in one division at the top. Not bad for the 50's.",
            "id": "2897058eabf46be598e4dd9e5d5e2eab"
          },
          {
            "type": "html",
            "text": "\nThe most fun construct in COBOL is the ALTER verb. COBOL has something like the \"computed goto\" of FORTRAN. Older dialects have no notion of a procedure or function, all the flow of control is done with named paragraphs and gotos.  Anyway, ALTER lets you change, at runtime, where the branches of a goto go to. As [[Charles Weir]] pointed out, one could use this to implement polymorphism. If you had a lot of time on your hands.",
            "id": "c8af492650daaab59ed9fb9769dac2ff"
          },
          {
            "type": "html",
            "text": "<i>FORTRAN has (or had) a similar thing called assigned GOTO. -- [[John Fletcher]]</i>",
            "id": "163a423022edb9176fd6e1058e3de9b2"
          },
          {
            "type": "html",
            "text": "\nBy 1970, if not earlier, any section or paragraph (or sequence of sections or paragraphs) could be executed as a subprogram with the PERFORM verb.  This also provided structured loops:",
            "id": "782351bb65485d1d1137b130ccc6113c"
          },
          {
            "type": "code",
            "text": "  PERFORM WAGE-CALCULATION UNTIL END-OF-FILE.\n  PERFORM FACTORIAL-MULTIPLICATION VARYING MULT FROM 2 BY 1 UNTIL MULT > 100.",
            "id": "c2340d75d646c14e9228011e10eec6a6"
          },
          {
            "type": "html",
            "text": "\nCOBOL is still a force in the world, so much so that when I was an unemployable fresh graduate the British employment service thought that having a [[City And Guilds]] certificate in COBOL programming would help my job prospects enough for them to pay for me to get one.",
            "id": "86ee22deefcf9492905923b0ec2c9790"
          },
          {
            "type": "html",
            "text": "-- [[Keith Braithwaite]]",
            "id": "39d79012ecba373a07f032fadd4b94c4"
          },
          {
            "type": "html",
            "text": "\n[[Cobol Language]]'s market share is the envy, aspiration and Holy Grail of all [[Fourth Generation Language]] vendors.",
            "id": "01415cf27cc046b4f37037a2b872859c"
          },
          {
            "type": "html",
            "text": "-- [[Matt Rickard]]",
            "id": "076320f86368311ff9d53feef68c0d46"
          },
          {
            "type": "html",
            "text": "\nSyntax for old COBOL at",
            "id": "6da11ac71ddf379f8d7310e0a542a662"
          },
          {
            "type": "code",
            "text": "  http://www.csci.csusb.edu/dick/samples/cobol.syntax.html",
            "id": "892b95707c80c39e7be6678a077c55ad"
          },
          {
            "type": "html",
            "text": "\nThe readableness of things like",
            "id": "a52d4fb372b737b448b7ed14fc7fc35f"
          },
          {
            "type": "html",
            "text": " PRINT PIC CR********9V.99.",
            "id": "b1b6c9e413e39bd9af9a13ecf6670c65"
          },
          {
            "type": "html",
            "text": "was always debatable.",
            "id": "111edd7308dfcadf7c5c49ad5a20f351"
          },
          {
            "type": "html",
            "text": "-- [[Dick Botting]]",
            "id": "59a4e408f213f8377dc40faa58316f4e"
          },
          {
            "type": "html",
            "text": "\nNot if you were working at a financial institute of the time. Leading with asterisks was done to ensure no alteration of counter-checks. Seems pretty obvious in that light, print amount with all leading spaces filled with '*', float a '+' or '-' in front.",
            "id": "4b690955a06a3893cab9933cfee7c9ac"
          },
          {
            "type": "html",
            "text": "-- CHergerThomann",
            "id": "3c910282e7f6ce38bd0519da7f8e9c25"
          },
          {
            "type": "html",
            "text": "<i>Format templating is a good thing in my opinion. I don't know of a better alternative. I agree that maybe COBOL's templating symbol choices were not always the best, but at least it had a solid set.</i>",
            "id": "8376931d99830f6a6872562ea5138888"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "66daba07c64dc733b8d0476b497faa3f"
          },
          {
            "type": "html",
            "text": "\nThere's speculation on [[What The Ytwok Drivers]] that the inflexibility of COBOL, and in particular, the absence of abstract data types (or some other mechanism for information hiding/encapsulation) aggravated the Y2K problem. Had COBOL these features, moving from 2 to 4 digits dates should have been much easier.",
            "id": "750030d1eacb88aec9bcc449dfb629e8"
          },
          {
            "type": "html",
            "text": "<i>Many developers said that it was often to save disk, memory space, and card space, which was very expensive at the dawn of computing. ADT's wouldn't help there. Also, standard punched cards had 80 characters. If you went over that, then you had to deal with double stacks. Many interviewed said they would have happily used 4-digit years if not for the hardware-related issues.</i>",
            "id": "861fb532d88800d94e44816f43580410"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "66daba07c64dc733b8d0476b497faa3f"
          },
          {
            "type": "html",
            "text": "\nAnd if pigs had wings, they could fly. In those days, compiler writers were still fighting to show that assembler wasn't the Ultimate Language, external storage was magtape and punched cards, and <i>no one</i> had things like ADTs. (Though perhaps it could be faked in Lisp, which is approximately the same age as Cobol.) -- David Wolff.",
            "id": "cf9791d431b8141de864a53263e8f8b4"
          },
          {
            "type": "html",
            "text": "\nIt would seem that the poster on WTYD was not suggesting that COBOL was deficient by not having features that weren't available at the time, but rather that because we all do use ADTs and encapsulation and such these days (right?) any future such problem would be easier to fix. Not that Y2K was such a problem anyway, it turns out. Judge the porcine aviation factor of todays \"best practice\" for yourself.",
            "id": "7b700b960f15b6c5b18826bcec5d6b4b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "66daba07c64dc733b8d0476b497faa3f"
          },
          {
            "type": "html",
            "text": "COBOL made me think of [[Code As Poetry]] before I knew much about the [[Perl Language]]. -- [[Nick Bensema]]\nOr perhaps, code-as-folktale?  I present, \"The Common Business-Oriented Goldilocks\":",
            "id": "dca756b1426b74629846b525e251b150"
          },
          {
            "type": "html",
            "text": " [http://www-users.cs.york.ac.uk/susan/joke/cblgold.htm www-users.cs.york.ac.uk]",
            "id": "e77e21ab066c4494079c2509ea8d0a42"
          },
          {
            "type": "html",
            "text": "\nSee also [[Cobol Fallacy]], a lesson which [[Apple Script]] did not learn.",
            "id": "2904bd7091f7a777ea9a1c22ec690239"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "66daba07c64dc733b8d0476b497faa3f"
          },
          {
            "type": "html",
            "text": "A Cobol grammar generated from the official Cobol standard is available (in a rather readable format) at ",
            "id": "dd2e674c735c14fab9115f02441ef0e1"
          },
          {
            "type": "html",
            "text": "[http://www.cwi.nl/~ralf/grammars/vs-cobol-ii/ www.cwi.nl]",
            "id": "637ed3a17024c5aad8231b4d17d9a6a4"
          },
          {
            "type": "html",
            "text": "\nAnother Cobol grammar, which was actually used for the purpose of [[Reverse Engineering]] Cobol [[Legacy Code]], is available at",
            "id": "1aff726f8e262342347fcd13079647b0"
          },
          {
            "type": "html",
            "text": "[http://www.cwi.nl/~mdejonge/grammar-base/ www.cwi.nl]",
            "id": "880dd7e9273de30462dd0f9cb8322b78"
          },
          {
            "type": "html",
            "text": "-- [[Arie Van Deursen]]",
            "id": "c7d374791d1c26e3f2a0f33301c65ce3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "66daba07c64dc733b8d0476b497faa3f"
          },
          {
            "type": "html",
            "text": "Apparently, COBOL is now available for the Microsoft .NET framework. See [[Other Dot Net Languages]].",
            "id": "0f6ef51d4990c8aaa407a8d1f902d2c5"
          },
          {
            "type": "html",
            "text": "\nThere's also OO-COBOL - see [http://home.swbell.net/mck9/cobol/ooc/overview.html home.swbell.net]. <i>Cobol++? Should be called \"POSTINCREMENT COBOL BY 1 GIVING COBOL\"!</i>",
            "id": "2285c1b3a04ed5f602864c7da99794d7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "66daba07c64dc733b8d0476b497faa3f"
          },
          {
            "type": "html",
            "text": "\nCOBOL Standards:",
            "id": "6ad4b9a4bb24a3b4b862065214c571c4"
          },
          {
            "type": "html",
            "text": " 1968 = \"COBOL Classic\"  ;->",
            "id": "123fbcfaee27291898f3f98da1c5befc"
          },
          {
            "type": "html",
            "text": " 1974",
            "id": "5c15eeeb3a9871baca14fb3d2ffa5c9a"
          },
          {
            "type": "html",
            "text": " 1985 = Adds structured if/else/end-if, perform/end-perform, etc.",
            "id": "cb50f08a09a6473c0feffbcd9416fcb7"
          },
          {
            "type": "html",
            "text": " 1989 addendum = \"added intrinsic functions, such as COSINE and TANGENT\"",
            "id": "bc4f6c4dca21279dbcd67c6d66663126"
          },
          {
            "type": "html",
            "text": " 1993 addendum = \"corrected errors and ambiguities\"",
            "id": "9067edfe786d7a29dfb332bc4542755b"
          },
          {
            "type": "html",
            "text": " 1995 = \"Object Oriented\" COBOL",
            "id": "52964f4fd4989b71b4955214c156e36d"
          },
          {
            "type": "html",
            "text": " 2002 = \"includes object-oriented features, locale support, UNICODE support and data validation.\"",
            "id": "1ffa70b33357868e0b64698abdc84bdb"
          },
          {
            "type": "html",
            "text": " [http://www.microfocus.com/whitepapers/developmentcobolstandard.asp www.microfocus.com]",
            "id": "9418c5d4bd940f39fe3cbe5d4561f610"
          },
          {
            "type": "html",
            "text": " [http://objectz.com/AnEveningwith/transcript1.html objectz.com] = an interview with Don Schricker",
            "id": "41d91a48088b0013985071e4f0c58e20"
          },
          {
            "type": "html",
            "text": " 2008 = planned next version",
            "id": "a4132ede8090ab1e55d22119d61193dc"
          },
          {
            "type": "html",
            "text": " [http://www.cobolstandards.com/ www.cobolstandards.com]",
            "id": "1fd9850a70f18586a5b774a7839e5844"
          },
          {
            "type": "html",
            "text": " [http://www.cobolstandards.com/annexf.pdf www.cobolstandards.com]",
            "id": "2f46f03b7444a3191dce0354aec59f18"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "66daba07c64dc733b8d0476b497faa3f"
          },
          {
            "type": "html",
            "text": "\nI've been tutoring a university student who's taking an intro programming course, and the instruction language is [[Java Language]]. One day she was asking me some questions about why Java is the way it is, and I forwarded a link to [[Java Is The New Cobol]] and some COBOL example program for reference. She came back a few minutes later and asked, \"um, so why don't people just use that?\" Since this question required an hour of answer or none at all, I changed the subject. Still, it's interesting how the verbosity of COBOL makes it somehow seem less dated than it is.",
            "id": "5caed68337f1f664840f57facef05784"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "66daba07c64dc733b8d0476b497faa3f"
          },
          {
            "type": "html",
            "text": "\nCOBOL User Groups (COBUG)",
            "id": "b83678b272687ed247c6c13310a0e0a4"
          },
          {
            "type": "html",
            "text": "\nA COBOL programming portal that is a one-stop resource for the COBOL community where you will find references to user groups, compilers, forums, jobs, and other COBOL programming resources.",
            "id": "5c41cbabefa854bbaaebcda4ad93a625"
          },
          {
            "type": "html",
            "text": "\n[http://www.cobug.com/ www.cobug.com]",
            "id": "2e2666a9ff45c884769b86a71e25b48c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "66daba07c64dc733b8d0476b497faa3f"
          },
          {
            "type": "html",
            "text": "\n[[Category Programming Language]]",
            "id": "04b8ae3c9a58799afa22ab7049570e52"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CobolLanguage c2.com]",
            "id": "3fd3fd96c388118e136c35a5a79b5d69"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1708204869394
    }
  ]
}