{
  "title": "getChompedString",
  "story": [
    {
      "type": "paragraph",
      "id": "a1b9d2ad8c7836a7",
      "text": "Sometimes parsers like int or variable cannot do exactly what you need. The \"chomping\" family of functions is meant for that case! [https://package.elm-lang.org/packages/elm/parser/latest/Parser#getChompedString page]"
    },
    {
      "type": "code",
      "id": "a3afe2c097c22b23",
      "text": "getChompedString : Parser a -> Parser String"
    },
    {
      "type": "paragraph",
      "id": "0ee5d80477c7be99",
      "text": "Maybe you need to parse valid PHP variables like $x and $txt:"
    },
    {
      "type": "code",
      "id": "43fb4d7a2e2d8ff2",
      "text": "php : Parser String\nphp =\n  getChompedString <|\n    succeed ()\n      |. chompIf (\\c -> c == '$')\n      |. chompIf (\\c -> Char.isAlpha c || c == '_')\n      |. chompWhile (\\c -> Char.isAlphaNum c || c == '_')"
    },
    {
      "type": "paragraph",
      "id": "115322251a4613cb",
      "text": "The idea is that you create a bunch of chompers that validate the underlying characters. Then getChompedString extracts the underlying String efficiently."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "getChompedString",
        "story": []
      },
      "date": 1696923408528
    },
    {
      "item": {
        "type": "factory",
        "id": "a1b9d2ad8c7836a7"
      },
      "id": "a1b9d2ad8c7836a7",
      "type": "add",
      "date": 1696923410118
    },
    {
      "type": "edit",
      "id": "a1b9d2ad8c7836a7",
      "item": {
        "type": "paragraph",
        "id": "a1b9d2ad8c7836a7",
        "text": "[https://package.elm-lang.org/packages/elm/parser/latest/Parser#getChompedString page]"
      },
      "date": 1696923415614
    },
    {
      "item": {
        "type": "factory",
        "id": "a3afe2c097c22b23"
      },
      "id": "a3afe2c097c22b23",
      "type": "add",
      "after": "a1b9d2ad8c7836a7",
      "date": 1696923428066
    },
    {
      "type": "edit",
      "id": "a3afe2c097c22b23",
      "item": {
        "type": "code",
        "id": "a3afe2c097c22b23",
        "text": "getChompedString : Parser a -> Parser String"
      },
      "date": 1696923429993
    },
    {
      "type": "edit",
      "id": "a1b9d2ad8c7836a7",
      "item": {
        "type": "paragraph",
        "id": "a1b9d2ad8c7836a7",
        "text": "Sometimes parsers like int or variable cannot do exactly what you need. The \"chomping\" family of functions is meant for that case! [https://package.elm-lang.org/packages/elm/parser/latest/Parser#getChompedString page]"
      },
      "date": 1696923449512
    },
    {
      "item": {
        "type": "factory",
        "id": "0ee5d80477c7be99"
      },
      "id": "0ee5d80477c7be99",
      "type": "add",
      "after": "a3afe2c097c22b23",
      "date": 1696923640865
    },
    {
      "type": "edit",
      "id": "0ee5d80477c7be99",
      "item": {
        "type": "paragraph",
        "id": "0ee5d80477c7be99",
        "text": "Maybe you need to parse valid PHP variables like $x and $txt:"
      },
      "date": 1696923642490
    },
    {
      "item": {
        "type": "factory",
        "id": "43fb4d7a2e2d8ff2"
      },
      "id": "43fb4d7a2e2d8ff2",
      "type": "add",
      "after": "0ee5d80477c7be99",
      "date": 1696923655349
    },
    {
      "type": "edit",
      "id": "43fb4d7a2e2d8ff2",
      "item": {
        "type": "code",
        "id": "43fb4d7a2e2d8ff2",
        "text": "php : Parser String\nphp =\n  getChompedString <|\n    succeed ()\n      |. chompIf (\\c -> c == '$')\n      |. chompIf (\\c -> Char.isAlpha c || c == '_')\n      |. chompWhile (\\c -> Char.isAlphaNum c || c == '_')"
      },
      "date": 1696923657127
    },
    {
      "item": {
        "type": "factory",
        "id": "115322251a4613cb"
      },
      "id": "115322251a4613cb",
      "type": "add",
      "after": "43fb4d7a2e2d8ff2",
      "date": 1696923666517
    },
    {
      "type": "edit",
      "id": "115322251a4613cb",
      "item": {
        "type": "paragraph",
        "id": "115322251a4613cb",
        "text": "The idea is that you create a bunch of chompers that validate the underlying characters. Then getChompedString extracts the underlying String efficiently."
      },
      "date": 1696923667873
    }
  ]
}