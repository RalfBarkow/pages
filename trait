{
  "title": "Trait",
  "story": [
    {
      "type": "markdown",
      "id": "db4b33e497b14107",
      "text": "*What is a **trait**?* [https://arxiv.org/pdf/2011.10975.pdf pdf] – A trait is a set of methods, divorced from any class hierarchy."
    },
    {
      "type": "paragraph",
      "id": "530b9c76212e2443",
      "text": "Traits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly."
    },
    {
      "type": "paragraph",
      "id": "668ae334fbba8b71",
      "text": "In their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. [[Stateful Traits]] extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes. "
    },
    {
      "type": "paragraph",
      "id": "d432fd1248ca328c",
      "text": "A class or another trait is composed from traits and it retains full control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
    },
    {
      "type": "markdown",
      "id": "64ad14f91d718c20",
      "text": "See *Create and use a new Trait*. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#create-and-use-a-new-trait github] (pharo-wiki)"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Trait",
        "story": []
      },
      "date": 1640586812856
    },
    {
      "item": {
        "type": "factory",
        "id": "db4b33e497b14107"
      },
      "id": "db4b33e497b14107",
      "type": "add",
      "date": 1640586822999
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "paragraph",
        "id": "db4b33e497b14107",
        "text": "What is a trait? “A trait is a set of methods, divorced from any class hierarchy.\nTraits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly”.\nIn their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. Stateful traits extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes [23]. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses."
      },
      "date": 1640586825138
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "paragraph",
        "id": "db4b33e497b14107",
        "text": "What is a trait? “A trait is a set of methods, divorced from any class hierarchy.\nTraits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly”.\nIn their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. Stateful traits extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes [23]. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. [https://arxiv.org/pdf/2011.10975.pdf pdf]"
      },
      "date": 1640586833179
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "paragraph",
        "id": "db4b33e497b14107",
        "text": "*What is a [[trait]]?* “A trait is a set of methods, divorced from any class hierarchy.\nTraits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly”.\nIn their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. Stateful traits extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes [23]. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. [https://arxiv.org/pdf/2011.10975.pdf pdf]"
      },
      "date": 1640586854875
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "paragraph",
        "id": "db4b33e497b14107",
        "text": "*What is a [[trait]]?* [https://arxiv.org/pdf/2011.10975.pdf pdf]“"
      },
      "date": 1651067230697
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "markdown",
        "id": "db4b33e497b14107",
        "text": "*What is a [[trait]]?* [https://arxiv.org/pdf/2011.10975.pdf pdf]“"
      },
      "date": 1651067241948
    },
    {
      "type": "add",
      "id": "530b9c76212e2443",
      "item": {
        "type": "paragraph",
        "id": "530b9c76212e2443",
        "text": "A trait is a set of methods, divorced from any class hierarchy.\nTraits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly”.\nIn their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. Stateful traits extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes [23]. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
      },
      "after": "db4b33e497b14107",
      "date": 1651067245608
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "markdown",
        "id": "db4b33e497b14107",
        "text": "*What is a [[trait]]?* [https://arxiv.org/pdf/2011.10975.pdf pdf] –"
      },
      "date": 1651067259009
    },
    {
      "type": "edit",
      "id": "530b9c76212e2443",
      "item": {
        "type": "paragraph",
        "id": "530b9c76212e2443",
        "text": "\nTraits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly”.\nIn their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. Stateful traits extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes [23]. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
      },
      "date": 1651067266825
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "markdown",
        "id": "db4b33e497b14107",
        "text": "*What is a [[trait]]?* [https://arxiv.org/pdf/2011.10975.pdf pdf] – A trait is a set of methods, divorced from any class hierarchy."
      },
      "date": 1651067269373
    },
    {
      "type": "edit",
      "id": "530b9c76212e2443",
      "item": {
        "type": "paragraph",
        "id": "530b9c76212e2443",
        "text": "Traits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly."
      },
      "date": 1651067302150
    },
    {
      "type": "add",
      "id": "668ae334fbba8b71",
      "item": {
        "type": "paragraph",
        "id": "668ae334fbba8b71",
        "text": "In their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. Stateful traits extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
      },
      "after": "530b9c76212e2443",
      "date": 1651067308320
    },
    {
      "item": {
        "type": "factory",
        "id": "64ad14f91d718c20"
      },
      "id": "64ad14f91d718c20",
      "type": "add",
      "after": "668ae334fbba8b71",
      "date": 1651067441775
    },
    {
      "type": "edit",
      "id": "64ad14f91d718c20",
      "item": {
        "type": "paragraph",
        "id": "64ad14f91d718c20",
        "text": "See *Create and use a new Trait*"
      },
      "date": 1651067451186
    },
    {
      "type": "edit",
      "id": "64ad14f91d718c20",
      "item": {
        "type": "paragraph",
        "id": "64ad14f91d718c20",
        "text": "See *Create and use a new Trait* [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#create-and-use-a-new-trait github]."
      },
      "date": 1651067464912
    },
    {
      "type": "edit",
      "id": "64ad14f91d718c20",
      "item": {
        "type": "markdown",
        "id": "64ad14f91d718c20",
        "text": "See *Create and use a new Trait* [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#create-and-use-a-new-trait github]."
      },
      "date": 1651067467126
    },
    {
      "type": "edit",
      "id": "64ad14f91d718c20",
      "item": {
        "type": "markdown",
        "id": "64ad14f91d718c20",
        "text": "See *Create and use a new Trait*. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#create-and-use-a-new-trait github]"
      },
      "date": 1651067474502
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "markdown",
        "id": "db4b33e497b14107",
        "text": "*What is a **trait**?* [https://arxiv.org/pdf/2011.10975.pdf pdf] – A trait is a set of methods, divorced from any class hierarchy."
      },
      "date": 1662443268672
    },
    {
      "type": "edit",
      "id": "668ae334fbba8b71",
      "item": {
        "type": "paragraph",
        "id": "668ae334fbba8b71",
        "text": "In their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. [[Stateful traits]] extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
      },
      "date": 1662443301723
    },
    {
      "type": "edit",
      "id": "668ae334fbba8b71",
      "item": {
        "type": "paragraph",
        "id": "668ae334fbba8b71",
        "text": "In their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. [[Stateful Traits]] extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
      },
      "date": 1662443309425
    },
    {
      "type": "edit",
      "id": "64ad14f91d718c20",
      "item": {
        "type": "markdown",
        "id": "64ad14f91d718c20",
        "text": "See *Create and use a new Trait*. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#create-and-use-a-new-trait github] (pharo-wiki)"
      },
      "date": 1662443347010
    },
    {
      "type": "edit",
      "id": "668ae334fbba8b71",
      "item": {
        "type": "paragraph",
        "id": "668ae334fbba8b71",
        "text": "In their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. [[Stateful Traits]] extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes. "
      },
      "date": 1662443366397
    },
    {
      "type": "add",
      "id": "d432fd1248ca328c",
      "item": {
        "type": "paragraph",
        "id": "d432fd1248ca328c",
        "text": "A class or another trait is composed from traits and it retains full control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
      },
      "after": "668ae334fbba8b71",
      "date": 1662443369646
    }
  ]
}