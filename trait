{
  "title": "Trait",
  "story": [
    {
      "type": "markdown",
      "id": "db4b33e497b14107",
      "text": "a set of methods, divorced from any class hierarchy [https://arxiv.org/pdf/2011.10975.pdf pdf]"
    },
    {
      "type": "paragraph",
      "id": "530b9c76212e2443",
      "text": "Traits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly."
    },
    {
      "type": "paragraph",
      "id": "668ae334fbba8b71",
      "text": "In their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. [[Stateful Traits]] extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes. "
    },
    {
      "type": "paragraph",
      "id": "d432fd1248ca328c",
      "text": "A class or another trait is composed from traits and it retains full control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
    },
    {
      "type": "markdown",
      "id": "64ad14f91d718c20",
      "text": "See *Create and use a new Trait*. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#create-and-use-a-new-trait github] (pharo-wiki)"
    },
    {
      "type": "pagefold",
      "id": "1e8d4e48d306f6f6",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "756978dba54e6b17",
      "text": "\nANQUETIL, Nicolas, ETIEN, Anne, HOUEKPETODJI, Mahugnon H., VERHAEGHE, Benoit, DUCASSE, Stéphane, TOULLEC, Clotilde, DJAREDDIR, Fatiha, SUDICH, Jerôme and DERRAS, Mustapha, 2020. Modular Moose: A new generation software reverse engineering environment. Online. 22 November 2020. arXiv. arXiv:2011.10975. [Accessed 3 December 2022]. Available from: http://arxiv.org/abs/2011.10975\n> Advanced reverse engineering tools are required to cope with the complexity of software systems and the speciﬁc requirements of numerous diﬀerent tasks (re-architecturing, migration, evolution). Consequently, reverse engineering tools should adapt to a wide range of situations. Yet, because they require a large infrastructure investment, being able to reuse these tools is key. Moose is a reverse engineering environment answering these requirements. While Moose started as a research project 20 years ago, it is also used in industrial projects, exposing itself to all these diﬃculties. In this paper we present ModMoose, the new version of Moose. ModMoose revolves around a new meta-model, modular and extensible; a new toolset of generic tools (query module, visualization engine, ...); and an open architecture supporting the synchronization and interaction of tools per task. With ModMoose, tool developers can develop speciﬁc meta-models by reusing existing elementary concepts, and dedicated reverse engineering tools that can interact with the existing ones.arXiv:2011.10975 [cs]\n"
    },
    {
      "type": "pagefold",
      "id": "13fb7f3d83b4b2cc",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "30a0d1d56e493724",
      "text": "⇒ [[Composable Units of Behaviour]]"
    },
    {
      "type": "reference",
      "id": "36202016a6fb11c3",
      "site": "wiki.ralfbarkow.ch",
      "slug": "traits",
      "title": "Traits",
      "text": "Traits are pure units of [[Behavior]] that can be composed to form classes or other **traits**. The trait composition mechanism is an alternative to multiple or mixin inheritance in which **the composer has full control over the trait composition**. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Trait",
        "story": []
      },
      "date": 1640586812856
    },
    {
      "item": {
        "type": "factory",
        "id": "db4b33e497b14107"
      },
      "id": "db4b33e497b14107",
      "type": "add",
      "date": 1640586822999
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "paragraph",
        "id": "db4b33e497b14107",
        "text": "What is a trait? “A trait is a set of methods, divorced from any class hierarchy.\nTraits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly”.\nIn their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. Stateful traits extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes [23]. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses."
      },
      "date": 1640586825138
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "paragraph",
        "id": "db4b33e497b14107",
        "text": "What is a trait? “A trait is a set of methods, divorced from any class hierarchy.\nTraits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly”.\nIn their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. Stateful traits extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes [23]. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. [https://arxiv.org/pdf/2011.10975.pdf pdf]"
      },
      "date": 1640586833179
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "paragraph",
        "id": "db4b33e497b14107",
        "text": "*What is a [[trait]]?* “A trait is a set of methods, divorced from any class hierarchy.\nTraits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly”.\nIn their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. Stateful traits extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes [23]. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. [https://arxiv.org/pdf/2011.10975.pdf pdf]"
      },
      "date": 1640586854875
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "paragraph",
        "id": "db4b33e497b14107",
        "text": "*What is a [[trait]]?* [https://arxiv.org/pdf/2011.10975.pdf pdf]“"
      },
      "date": 1651067230697
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "markdown",
        "id": "db4b33e497b14107",
        "text": "*What is a [[trait]]?* [https://arxiv.org/pdf/2011.10975.pdf pdf]“"
      },
      "date": 1651067241948
    },
    {
      "type": "add",
      "id": "530b9c76212e2443",
      "item": {
        "type": "paragraph",
        "id": "530b9c76212e2443",
        "text": "A trait is a set of methods, divorced from any class hierarchy.\nTraits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly”.\nIn their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. Stateful traits extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes [23]. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
      },
      "after": "db4b33e497b14107",
      "date": 1651067245608
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "markdown",
        "id": "db4b33e497b14107",
        "text": "*What is a [[trait]]?* [https://arxiv.org/pdf/2011.10975.pdf pdf] –"
      },
      "date": 1651067259009
    },
    {
      "type": "edit",
      "id": "530b9c76212e2443",
      "item": {
        "type": "paragraph",
        "id": "530b9c76212e2443",
        "text": "\nTraits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly”.\nIn their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. Stateful traits extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes [23]. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
      },
      "date": 1651067266825
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "markdown",
        "id": "db4b33e497b14107",
        "text": "*What is a [[trait]]?* [https://arxiv.org/pdf/2011.10975.pdf pdf] – A trait is a set of methods, divorced from any class hierarchy."
      },
      "date": 1651067269373
    },
    {
      "type": "edit",
      "id": "530b9c76212e2443",
      "item": {
        "type": "paragraph",
        "id": "530b9c76212e2443",
        "text": "Traits can be composed in arbitrary order. The composite entity (class or trait)\nhas complete control over the composition and can resolve conflicts explicitly."
      },
      "date": 1651067302150
    },
    {
      "type": "add",
      "id": "668ae334fbba8b71",
      "item": {
        "type": "paragraph",
        "id": "668ae334fbba8b71",
        "text": "In their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. Stateful traits extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
      },
      "after": "530b9c76212e2443",
      "date": 1651067308320
    },
    {
      "item": {
        "type": "factory",
        "id": "64ad14f91d718c20"
      },
      "id": "64ad14f91d718c20",
      "type": "add",
      "after": "668ae334fbba8b71",
      "date": 1651067441775
    },
    {
      "type": "edit",
      "id": "64ad14f91d718c20",
      "item": {
        "type": "paragraph",
        "id": "64ad14f91d718c20",
        "text": "See *Create and use a new Trait*"
      },
      "date": 1651067451186
    },
    {
      "type": "edit",
      "id": "64ad14f91d718c20",
      "item": {
        "type": "paragraph",
        "id": "64ad14f91d718c20",
        "text": "See *Create and use a new Trait* [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#create-and-use-a-new-trait github]."
      },
      "date": 1651067464912
    },
    {
      "type": "edit",
      "id": "64ad14f91d718c20",
      "item": {
        "type": "markdown",
        "id": "64ad14f91d718c20",
        "text": "See *Create and use a new Trait* [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#create-and-use-a-new-trait github]."
      },
      "date": 1651067467126
    },
    {
      "type": "edit",
      "id": "64ad14f91d718c20",
      "item": {
        "type": "markdown",
        "id": "64ad14f91d718c20",
        "text": "See *Create and use a new Trait*. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#create-and-use-a-new-trait github]"
      },
      "date": 1651067474502
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "markdown",
        "id": "db4b33e497b14107",
        "text": "*What is a **trait**?* [https://arxiv.org/pdf/2011.10975.pdf pdf] – A trait is a set of methods, divorced from any class hierarchy."
      },
      "date": 1662443268672
    },
    {
      "type": "edit",
      "id": "668ae334fbba8b71",
      "item": {
        "type": "paragraph",
        "id": "668ae334fbba8b71",
        "text": "In their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. [[Stateful traits]] extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
      },
      "date": 1662443301723
    },
    {
      "type": "edit",
      "id": "668ae334fbba8b71",
      "item": {
        "type": "paragraph",
        "id": "668ae334fbba8b71",
        "text": "In their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. [[Stateful Traits]] extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes. A class or another trait is composed from traits and it retains\nfull control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
      },
      "date": 1662443309425
    },
    {
      "type": "edit",
      "id": "64ad14f91d718c20",
      "item": {
        "type": "markdown",
        "id": "64ad14f91d718c20",
        "text": "See *Create and use a new Trait*. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#create-and-use-a-new-trait github] (pharo-wiki)"
      },
      "date": 1662443347010
    },
    {
      "type": "edit",
      "id": "668ae334fbba8b71",
      "item": {
        "type": "paragraph",
        "id": "668ae334fbba8b71",
        "text": "In their original form, traits were stateless, i.e., pure groups of methods without\nany attributes. [[Stateful Traits]] extend stateless traits by introducing a single\nattribute access operator to give clients of the trait control over the visibility of\nattributes. "
      },
      "date": 1662443366397
    },
    {
      "type": "add",
      "id": "d432fd1248ca328c",
      "item": {
        "type": "paragraph",
        "id": "d432fd1248ca328c",
        "text": "A class or another trait is composed from traits and it retains full control of the composition being able to ignore or rename some methods of\nthe traits it uses. "
      },
      "after": "668ae334fbba8b71",
      "date": 1662443369646
    },
    {
      "item": {
        "type": "factory",
        "id": "756978dba54e6b17"
      },
      "id": "756978dba54e6b17",
      "type": "add",
      "after": "64ad14f91d718c20",
      "date": 1670073692130
    },
    {
      "type": "edit",
      "id": "756978dba54e6b17",
      "item": {
        "type": "markdown",
        "id": "756978dba54e6b17",
        "text": "~"
      },
      "date": 1670073695425
    },
    {
      "item": {
        "type": "factory",
        "id": "1e8d4e48d306f6f6"
      },
      "id": "1e8d4e48d306f6f6",
      "type": "add",
      "after": "756978dba54e6b17",
      "date": 1670073697233
    },
    {
      "type": "edit",
      "id": "1e8d4e48d306f6f6",
      "item": {
        "type": "pagefold",
        "id": "1e8d4e48d306f6f6",
        "text": "~"
      },
      "date": 1670073699896
    },
    {
      "type": "edit",
      "id": "756978dba54e6b17",
      "item": {
        "type": "markdown",
        "id": "756978dba54e6b17",
        "text": "\nANQUETIL, Nicolas, ETIEN, Anne, HOUEKPETODJI, Mahugnon H., VERHAEGHE, Benoit, DUCASSE, Stéphane, TOULLEC, Clotilde, DJAREDDIR, Fatiha, SUDICH, Jerôme and DERRAS, Mustapha, 2020. Modular Moose: A new generation software reverse engineering environment. Online. 22 November 2020. arXiv. arXiv:2011.10975. [Accessed 3 December 2022]. Available from: http://arxiv.org/abs/2011.10975\n> Advanced reverse engineering tools are required to cope with the complexity of software systems and the speciﬁc requirements of numerous diﬀerent tasks (re-architecturing, migration, evolution). Consequently, reverse engineering tools should adapt to a wide range of situations. Yet, because they require a large infrastructure investment, being able to reuse these tools is key. Moose is a reverse engineering environment answering these requirements. While Moose started as a research project 20 years ago, it is also used in industrial projects, exposing itself to all these diﬃculties. In this paper we present ModMoose, the new version of Moose. ModMoose revolves around a new meta-model, modular and extensible; a new toolset of generic tools (query module, visualization engine, ...); and an open architecture supporting the synchronization and interaction of tools per task. With ModMoose, tool developers can develop speciﬁc meta-models by reusing existing elementary concepts, and dedicated reverse engineering tools that can interact with the existing ones.arXiv:2011.10975 [cs]\n"
      },
      "date": 1670073712617
    },
    {
      "id": "1e8d4e48d306f6f6",
      "type": "move",
      "order": [
        "db4b33e497b14107",
        "530b9c76212e2443",
        "668ae334fbba8b71",
        "d432fd1248ca328c",
        "64ad14f91d718c20",
        "1e8d4e48d306f6f6",
        "756978dba54e6b17"
      ],
      "date": 1670073717513
    },
    {
      "item": {
        "type": "factory",
        "id": "13fb7f3d83b4b2cc"
      },
      "id": "13fb7f3d83b4b2cc",
      "type": "add",
      "after": "756978dba54e6b17",
      "date": 1671458571848
    },
    {
      "type": "edit",
      "id": "13fb7f3d83b4b2cc",
      "item": {
        "type": "pagefold",
        "id": "13fb7f3d83b4b2cc",
        "text": "~"
      },
      "date": 1671458575101
    },
    {
      "item": {
        "type": "factory",
        "id": "30a0d1d56e493724"
      },
      "id": "30a0d1d56e493724",
      "type": "add",
      "after": "13fb7f3d83b4b2cc",
      "date": 1671458577227
    },
    {
      "type": "edit",
      "id": "30a0d1d56e493724",
      "item": {
        "type": "paragraph",
        "id": "30a0d1d56e493724",
        "text": "[[Composable Units of Behaviour]]"
      },
      "date": 1671458582654
    },
    {
      "type": "edit",
      "id": "30a0d1d56e493724",
      "item": {
        "type": "paragraph",
        "id": "30a0d1d56e493724",
        "text": "⇒ [[Composable Units of Behaviour]]"
      },
      "date": 1671458593605
    },
    {
      "item": {
        "type": "factory",
        "id": "36202016a6fb11c3"
      },
      "id": "36202016a6fb11c3",
      "type": "add",
      "after": "30a0d1d56e493724",
      "date": 1673880647241
    },
    {
      "type": "edit",
      "id": "36202016a6fb11c3",
      "item": {
        "type": "reference",
        "id": "36202016a6fb11c3",
        "site": "wiki.ralfbarkow.ch",
        "slug": "traits",
        "title": "Traits",
        "text": "Traits are pure units of [[Behavior]] that can be composed to form classes or other **traits**. The trait composition mechanism is an alternative to multiple or mixin inheritance in which **the composer has full control over the trait composition**. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
      },
      "date": 1673880649556
    },
    {
      "type": "edit",
      "id": "db4b33e497b14107",
      "item": {
        "type": "markdown",
        "id": "db4b33e497b14107",
        "text": "a set of methods, divorced from any class hierarchy [https://arxiv.org/pdf/2011.10975.pdf pdf]"
      },
      "date": 1702970169108
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1702970505846
    },
    {
      "type": "fork",
      "site": "traits.code.dreyeck.ch",
      "date": 1702988854221
    }
  ]
}