{
  "title": "Contextual Playground",
  "story": [
    {
      "type": "markdown",
      "id": "6a6f014126edd419",
      "text": "**Problem:** When we code new behavior as methods, we must repeatedly change our context to incrementally develop the logic. Testing the code requires a separate setup. How can we efficiently prototype and test the new behavior? "
    },
    {
      "type": "markdown",
      "id": "d2a4a845ac0c5cdf",
      "text": "**Forces:**"
    },
    {
      "type": "paragraph",
      "id": "9b84f02340a62466",
      "text": "An editor for coding new methods typically provides no facilities for testing the code.\n\nSetting up code to prototype and test logic can be cumbersome.\n\nWriting tests first for parts of the logic of a complex method can be overkill.\n"
    },
    {
      "type": "markdown",
      "id": "039f5493abe5852c",
      "text": "**Solution:**"
    },
    {
      "type": "paragraph",
      "id": "95841114be5b5884",
      "text": "Prototype new behavior in the Playground of a [[Moldable Object]], i.e., an Inspector on a live instance of the class. The Playground will be bound to the context of the instance, so self and all slots can be accessed exactly as they would in a running method.\n\nFrom the moldable object you can navigate to any parts of the instance, to explore the APIs, or to test experimental code.\n\nCode snippets that work as expected can then be copy-pasted to existing methods, or extracted to new methods using an Extract method refactoring.\n"
    },
    {
      "type": "markdown",
      "id": "7e3d4af3cf92d85c",
      "text": "**Steps:**"
    },
    {
      "type": "paragraph",
      "id": "1fffd0aca7ae3832",
      "text": "The following steps illustrate how the Inspector Playground can be leveraged to explore an object's state, experiment with code, extract methods, extract (test) examples, and add custom views to a live object.\n\nSuppose we are implementing a StackMachine class to simulate an RPN calculator. So far it just holds a stack slot initialized to an empty OrderedCollection , and nothing else. We want to implement operations to perform calculations with the stack machine."
    },
    {
      "type": "paragraph",
      "id": "abb9da91ed17b524",
      "text": "[…] [https://book.gtoolkit.com/contextual-playground-9jkob08mw269cpxowmbe0ld8i book]"
    },
    {
      "type": "markdown",
      "id": "4b0c8d726f042d38",
      "text": "**Related patterns:**"
    },
    {
      "type": "paragraph",
      "id": "be0f2797ce761154",
      "text": "Start with a [[Moldable Object]], in order to get a live instance to prototype from."
    },
    {
      "type": "paragraph",
      "id": "c7f87b9dd8dd59e2",
      "text": "[[Example Object]]"
    },
    {
      "type": "paragraph",
      "id": "29eafd5eb88842bc",
      "text": "[[Viewable Entity]]"
    },
    {
      "type": "paragraph",
      "id": "19031e59541aec00",
      "text": "[[Custom Action]]"
    },
    {
      "type": "markdown",
      "id": "057ec440a1ca1b2e",
      "text": "**Known Uses:**"
    },
    {
      "type": "paragraph",
      "id": "4a6889905b5ab1cd",
      "text": "\nThe JavaScript console of a web browser can be used to explore and experiment with the behavior of live objects in a web page.\n\nYou can also see this process at work in the short video [[Exploring the GitHub REST API in 7']].\n"
    },
    {
      "type": "pagefold",
      "id": "838632211f2b2977",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "9fe9044d27c5a00c",
      "text": "Contextual playground [https://book.gtoolkit.com/contextual-playground-9jkob08mw269cpxowmbe0ld8i book]"
    },
    {
      "type": "graphviz",
      "id": "467e424da3df5e2b",
      "text": "DOT FROM two-level-diagram"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Contextual Playground",
        "story": [
          {
            "type": "markdown",
            "id": "6a6f014126edd419",
            "text": "**Problem:**"
          },
          {
            "type": "factory",
            "id": "197203ba7c0dfe36"
          },
          {
            "type": "markdown",
            "id": "d2a4a845ac0c5cdf",
            "text": "**Forces:**"
          },
          {
            "type": "factory",
            "id": "9b84f02340a62466"
          },
          {
            "type": "markdown",
            "id": "039f5493abe5852c",
            "text": "**Solution:**"
          },
          {
            "type": "factory",
            "id": "95841114be5b5884"
          },
          {
            "type": "markdown",
            "id": "7e3d4af3cf92d85c",
            "text": "**Steps:**"
          },
          {
            "type": "factory",
            "id": "1fffd0aca7ae3832"
          },
          {
            "type": "markdown",
            "id": "4b0c8d726f042d38",
            "text": "**Related patterns:**"
          },
          {
            "type": "factory",
            "id": "be0f2797ce761154"
          },
          {
            "type": "markdown",
            "id": "057ec440a1ca1b2e",
            "text": "**Known Uses:**"
          },
          {
            "type": "factory",
            "id": "4a6889905b5ab1cd"
          }
        ]
      },
      "date": 1699898681196
    },
    {
      "type": "edit",
      "id": "197203ba7c0dfe36",
      "item": {
        "type": "paragraph",
        "id": "197203ba7c0dfe36",
        "text": "When we code new behavior as methods, we must must repeatedly change our context to incrementally develop the logic. Testing the code requires a separate setup. How can we efficiently prototype and test the new behavior? "
      },
      "date": 1699898689698
    },
    {
      "type": "edit",
      "id": "9b84f02340a62466",
      "item": {
        "type": "paragraph",
        "id": "9b84f02340a62466",
        "text": "\n\nAn editor for coding new methods typically provides no facilities for testing the code.\n\nSetting up code to prototype and test logic can be cumbersome.\n\nWriting tests first for parts of the logic of a complex method may can be overkill.\n"
      },
      "date": 1699898695796
    },
    {
      "type": "edit",
      "id": "95841114be5b5884",
      "item": {
        "type": "paragraph",
        "id": "95841114be5b5884",
        "text": "\n\nPrototype new behavior in the Playground of a [[Moldable object]], i.e., an Inspector on a live instance of the class. The Playground will be bound to the context of the instance, so self and all slots can be accessed exactly as they would in a running method.\n\nFrom the moldable object you can navigate to any parts of the instance, to explore the APIs, or to test experimental code.\n\nCode snippets that work as expected can then be copy-pasted to existing methods, or extracted to new methods using an Extract method refactoring.\n"
      },
      "date": 1699898711755
    },
    {
      "type": "edit",
      "id": "1fffd0aca7ae3832",
      "item": {
        "type": "paragraph",
        "id": "1fffd0aca7ae3832",
        "text": "\n\nThe following steps illustrate how the Inspector Playground can be leveraged to explore an object's state, experiment with code, extract methods, extract (test) examples, and add custom views to a live object.\n\nSuppose we are implementing a StackMachine class to simulate an RPN calculator. So far it just holds a stack slot initialized to an empty OrderedCollection , and nothing else. We want to implement operations to perform calculations with the stack machine.\n"
      },
      "date": 1699898745230
    },
    {
      "type": "edit",
      "id": "1fffd0aca7ae3832",
      "item": {
        "type": "paragraph",
        "id": "1fffd0aca7ae3832",
        "text": "The following steps illustrate how the Inspector Playground can be leveraged to explore an object's state, experiment with code, extract methods, extract (test) examples, and add custom views to a live object.\n\nSuppose we are implementing a StackMachine class to simulate an RPN calculator. So far it just holds a stack slot initialized to an empty OrderedCollection , and nothing else. We want to implement operations to perform calculations with the stack machine."
      },
      "date": 1699898777757
    },
    {
      "type": "add",
      "id": "abb9da91ed17b524",
      "item": {
        "type": "paragraph",
        "id": "abb9da91ed17b524",
        "text": "[…]"
      },
      "after": "1fffd0aca7ae3832",
      "date": 1699898779744
    },
    {
      "type": "edit",
      "id": "be0f2797ce761154",
      "item": {
        "type": "paragraph",
        "id": "be0f2797ce761154",
        "text": "Start with a [[Moldable Object]], in order to get a live instance to prototype from. "
      },
      "date": 1699898803924
    },
    {
      "type": "edit",
      "id": "4a6889905b5ab1cd",
      "item": {
        "type": "paragraph",
        "id": "4a6889905b5ab1cd",
        "text": "\n\nThe JavaScript console of a web browser can be used to explore and experiment with the behavior of live objects in a web page.\n\nYou can also see this process at work in the short video Exploring the GitHub REST API in 7'.\n"
      },
      "date": 1699898820344
    },
    {
      "type": "edit",
      "id": "4a6889905b5ab1cd",
      "item": {
        "type": "paragraph",
        "id": "4a6889905b5ab1cd",
        "text": "\nThe JavaScript console of a web browser can be used to explore and experiment with the behavior of live objects in a web page.\n\nYou can also see this process at work in the short video [[Exploring the GitHub REST API in 7']].\n"
      },
      "date": 1699898829707
    },
    {
      "item": {
        "type": "factory",
        "id": "838632211f2b2977"
      },
      "id": "838632211f2b2977",
      "type": "add",
      "after": "4a6889905b5ab1cd",
      "date": 1699898856670
    },
    {
      "type": "edit",
      "id": "838632211f2b2977",
      "item": {
        "type": "pagefold",
        "id": "838632211f2b2977",
        "text": "~"
      },
      "date": 1699898862603
    },
    {
      "item": {
        "type": "factory",
        "id": "9fe9044d27c5a00c"
      },
      "id": "9fe9044d27c5a00c",
      "type": "add",
      "after": "838632211f2b2977",
      "date": 1699898864026
    },
    {
      "type": "edit",
      "id": "9fe9044d27c5a00c",
      "item": {
        "type": "paragraph",
        "id": "9fe9044d27c5a00c",
        "text": "[https://book.gtoolkit.com/contextual-playground-9jkob08mw269cpxowmbe0ld8i book]"
      },
      "date": 1699898869113
    },
    {
      "type": "edit",
      "id": "9fe9044d27c5a00c",
      "item": {
        "type": "paragraph",
        "id": "9fe9044d27c5a00c",
        "text": "Contextual playground [https://book.gtoolkit.com/contextual-playground-9jkob08mw269cpxowmbe0ld8i book]"
      },
      "date": 1699898880559
    },
    {
      "type": "edit",
      "id": "197203ba7c0dfe36",
      "item": {
        "type": "paragraph",
        "id": "197203ba7c0dfe36",
        "text": "When we code new behavior as methods, we must repeatedly change our context to incrementally develop the logic. Testing the code requires a separate setup. How can we efficiently prototype and test the new behavior? "
      },
      "date": 1699898958698
    },
    {
      "type": "edit",
      "id": "9b84f02340a62466",
      "item": {
        "type": "paragraph",
        "id": "9b84f02340a62466",
        "text": "\nAn editor for coding new methods typically provides no facilities for testing the code.\n\nSetting up code to prototype and test logic can be cumbersome.\n\nWriting tests first for parts of the logic of a complex method may can be overkill.\n"
      },
      "date": 1699899044251
    },
    {
      "type": "edit",
      "id": "9b84f02340a62466",
      "item": {
        "type": "paragraph",
        "id": "9b84f02340a62466",
        "text": "An editor for coding new methods typically provides no facilities for testing the code.\n\nSetting up code to prototype and test logic can be cumbersome.\n\nWriting tests first for parts of the logic of a complex method can be overkill.\n"
      },
      "date": 1699899115928
    },
    {
      "type": "edit",
      "id": "95841114be5b5884",
      "item": {
        "type": "paragraph",
        "id": "95841114be5b5884",
        "text": "Prototype new behavior in the Playground of a [[Moldable Object]], i.e., an Inspector on a live instance of the class. The Playground will be bound to the context of the instance, so self and all slots can be accessed exactly as they would in a running method.\n\nFrom the moldable object you can navigate to any parts of the instance, to explore the APIs, or to test experimental code.\n\nCode snippets that work as expected can then be copy-pasted to existing methods, or extracted to new methods using an Extract method refactoring.\n"
      },
      "date": 1699899132668
    },
    {
      "type": "edit",
      "id": "abb9da91ed17b524",
      "item": {
        "type": "paragraph",
        "id": "abb9da91ed17b524",
        "text": "[…] [https://book.gtoolkit.com/contextual-playground-9jkob08mw269cpxowmbe0ld8i book]"
      },
      "date": 1699899180337
    },
    {
      "type": "remove",
      "id": "197203ba7c0dfe36",
      "date": 1700382848809
    },
    {
      "type": "edit",
      "id": "6a6f014126edd419",
      "item": {
        "type": "markdown",
        "id": "6a6f014126edd419",
        "text": "**Problem:** When we code new behavior as methods, we must repeatedly change our context to incrementally develop the logic. Testing the code requires a separate setup. How can we efficiently prototype and test the new behavior? "
      },
      "date": 1700382850404
    },
    {
      "item": {
        "type": "factory",
        "id": "467e424da3df5e2b"
      },
      "id": "467e424da3df5e2b",
      "type": "add",
      "after": "9fe9044d27c5a00c",
      "date": 1701119761460
    },
    {
      "type": "edit",
      "id": "467e424da3df5e2b",
      "item": {
        "type": "graphviz",
        "id": "467e424da3df5e2b",
        "text": "DOT FROM two-level-diagram"
      },
      "date": 1701119764981
    },
    {
      "type": "edit",
      "id": "be0f2797ce761154",
      "item": {
        "type": "paragraph",
        "id": "be0f2797ce761154",
        "text": "Start with a [[Moldable Object]], in order to get a live instance to prototype from."
      },
      "date": 1701119845044
    },
    {
      "type": "add",
      "id": "c7f87b9dd8dd59e2",
      "item": {
        "type": "paragraph",
        "id": "c7f87b9dd8dd59e2",
        "text": "[[Example Object]]"
      },
      "after": "be0f2797ce761154",
      "date": 1701119845793
    },
    {
      "type": "add",
      "id": "29eafd5eb88842bc",
      "item": {
        "type": "paragraph",
        "id": "29eafd5eb88842bc",
        "text": "[[Viewable Entity]]"
      },
      "after": "c7f87b9dd8dd59e2",
      "date": 1701119955518
    },
    {
      "type": "add",
      "id": "19031e59541aec00",
      "item": {
        "type": "paragraph",
        "id": "19031e59541aec00",
        "text": "[[Custom Action]]"
      },
      "after": "29eafd5eb88842bc",
      "date": 1701119961068
    }
  ]
}