{
  "title": "Create Items and Pages",
  "story": [
    {
      "type": "paragraph",
      "id": "54a39b1ea079b8c4",
      "text": "We create items and pages with all of the page json elements we would expect of complete pages."
    },
    {
      "type": "paragraph",
      "id": "9f0f82cb57a61b27",
      "text": "See [[JSON Schema]]"
    },
    {
      "type": "code",
      "id": "c8963fb39e7da82f",
      "text": "function id() {\n  let rand = Math.floor(2**48*Math.random())\n  return rand.toString(16)\n}"
    },
    {
      "type": "paragraph",
      "id": "e33121b07782ab05",
      "text": "Items and Actions are objects with type and properties, some of which are generated automatically. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign mdn]"
    },
    {
      "type": "code",
      "id": "f5848c67d9e1cbba",
      "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}\n\nfunction action (type, props) {\n  let date = Date.now()\n  return Object.assign({type, date}, props)\n}"
    },
    {
      "type": "paragraph",
      "id": "07af86ced8a0279d",
      "text": "A [[Story]] is made from Items or strings turned to items. A [[Page]] adds a [[Title]] and [[Journal]] to the story."
    },
    {
      "type": "code",
      "id": "fba404780d0604af",
      "text": "function story (items) {\n  return items.map(each =>\n    typeof each == typeof \"\" ?\n      item('paragraph', {text:each}) :\n      each\n  )\n}\n\nfunction page (title, items) {\n  let page = {title, story:story(items)}\n  let item = JSON.parse(JSON.stringify(page))\n  page.journal = [action('create',{item})]\n  return page\n}"
    },
    {
      "type": "paragraph",
      "id": "520191bdcb56afaf",
      "text": "Many pages start with an empty create action but for bulk generated pages we include most of the page as the item being created, once carefully copied."
    },
    {
      "type": "code",
      "id": "27ab76811c99a1c7",
      "text": "page(\"Wind River\", [\n  \"A lat/lon confluence near Mt. Saint Helens.\",\n  item('map', {text:'46,-122', zoom:10}),\n  \"See [[Aerial Map]]\"\n])"
    },
    {
      "type": "frame",
      "id": "777ff878d8f1cc7e",
      "text": "http://js.ward.asia.wiki.org/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 400"
    },
    {
      "type": "paragraph",
      "id": "d9f1d2c97f160715",
      "text": "Adapted from similar code in the Seran Outpost. When serving pages Seran allowed async evaluation of functions as valid items for late bound content. [https://github.com/joshuabenuck/seran-wiki/blob/8c01ea423bf8eb7cf929bfdb7287f798fef806a8/server/wiki.ts#L39-L70 github] [https://github.com/WardCunningham/seran-dig/blob/master/dig.ts#L132-L212 github]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Create Items and Pages",
        "story": [
          {
            "type": "paragraph",
            "id": "54a39b1ea079b8c4",
            "text": "Explain what this code does."
          },
          {
            "type": "code",
            "id": "c8963fb39e7da82f",
            "text": "2 + 3"
          },
          {
            "type": "frame",
            "id": "777ff878d8f1cc7e",
            "text": "http://js.ward.asia.wiki.org/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 200"
          }
        ]
      },
      "date": 1616630523601
    },
    {
      "type": "edit",
      "id": "54a39b1ea079b8c4",
      "item": {
        "type": "paragraph",
        "id": "54a39b1ea079b8c4",
        "text": "We create items and pages with all of the page json elements we would expect of complete pages."
      },
      "date": 1616630621837
    },
    {
      "type": "edit",
      "id": "c8963fb39e7da82f",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "const id = () => Math.toString(1000,36)"
      },
      "date": 1616630751252
    },
    {
      "type": "edit",
      "id": "c8963fb39e7da82f",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "const id = () => Math.toString(1000,36)\nid()"
      },
      "date": 1616630764279
    },
    {
      "type": "edit",
      "id": "c8963fb39e7da82f",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "const id = () => Math.random().toString(36)\nid()"
      },
      "date": 1616630879337
    },
    {
      "type": "edit",
      "id": "c8963fb39e7da82f",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "const id = () => Math.random().toString(16)\nid()"
      },
      "date": 1616630893885
    },
    {
      "type": "edit",
      "id": "c8963fb39e7da82f",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "const id = () => Math.floor(2**64*Math.random()).toString(16)\nid()"
      },
      "date": 1616630941835
    },
    {
      "type": "edit",
      "id": "c8963fb39e7da82f",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "const id = () => Math.floor(2**48*Math.random()).toString(16)\nid()"
      },
      "date": 1616630984962
    },
    {
      "type": "edit",
      "id": "c8963fb39e7da82f",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "const id = ()=>Math.floor(2**48*Math.random()).toString(16)\nid()"
      },
      "date": 1616631040225
    },
    {
      "type": "edit",
      "id": "c8963fb39e7da82f",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "const id=()=>Math.floor(2**48*Math.random()).toString(16)\nid()"
      },
      "date": 1616631054395
    },
    {
      "type": "edit",
      "id": "c8963fb39e7da82f",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "function id() { \n  return Math.floor(2**48*Math.random()).toString(16)\n}\n\nid()"
      },
      "date": 1616631146999
    },
    {
      "type": "edit",
      "id": "c8963fb39e7da82f",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "function id() {\n  let rand = Math.floor(2**48*Math.random())\n  return rand.toString(16)\n}"
      },
      "date": 1616631228771
    },
    {
      "item": {
        "type": "factory",
        "id": "27ab76811c99a1c7"
      },
      "id": "27ab76811c99a1c7",
      "type": "add",
      "after": "777ff878d8f1cc7e",
      "date": 1616631235388
    },
    {
      "type": "edit",
      "id": "27ab76811c99a1c7",
      "item": {
        "type": "code",
        "id": "27ab76811c99a1c7",
        "text": "id()"
      },
      "date": 1616631244406
    },
    {
      "id": "27ab76811c99a1c7",
      "type": "move",
      "order": [
        "54a39b1ea079b8c4",
        "c8963fb39e7da82f",
        "27ab76811c99a1c7",
        "777ff878d8f1cc7e"
      ],
      "date": 1616631251166
    },
    {
      "item": {
        "type": "factory",
        "id": "fba404780d0604af"
      },
      "id": "fba404780d0604af",
      "type": "add",
      "after": "777ff878d8f1cc7e",
      "date": 1616631294668
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function item (type, props) {\n}"
      },
      "date": 1616631375142
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}"
      },
      "date": 1616631718863
    },
    {
      "id": "fba404780d0604af",
      "type": "move",
      "order": [
        "54a39b1ea079b8c4",
        "c8963fb39e7da82f",
        "fba404780d0604af",
        "27ab76811c99a1c7",
        "777ff878d8f1cc7e"
      ],
      "date": 1616631721818
    },
    {
      "type": "edit",
      "id": "27ab76811c99a1c7",
      "item": {
        "type": "code",
        "id": "27ab76811c99a1c7",
        "text": "item('map', {text: '46, -122'})"
      },
      "date": 1616631782109
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}\n\nfunction story (items) {\n  return story.map(item => item."
      },
      "date": 1616632258477
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}\n\nfunction story (items) {\n  return story.map(item => typeof item == String ?\n    item('paragraph', {text:item} : item)\n}"
      },
      "date": 1616632424217
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}\n\nfunction story (items) {\n  return story.map(item => typeof item == String ?\n    item('paragraph', {text:item}) : item)\n}"
      },
      "date": 1616632437921
    },
    {
      "type": "edit",
      "id": "27ab76811c99a1c7",
      "item": {
        "type": "code",
        "id": "27ab76811c99a1c7",
        "text": "story([\n  \"Map of somewhere\",\n  item('map', {text: '46, -122'})\n])"
      },
      "date": 1616632511561
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}\n\nfunction story (items) {\n  return items.map(item => typeof item == String ?\n    item('paragraph', {text:item}) : item)\n}"
      },
      "date": 1616632540522
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}\n\nfunction story (items) {\n  return items.map(item =>\n    typeof item == typeof \"\" ?\n      item('paragraph', {text:item}) : item)\n}"
      },
      "date": 1616632583382
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}\n\nfunction story (items) {\n  return items.map(each =>\n    typeof each == typeof \"\" ?\n      item('paragraph', {text:each}) : each)\n}"
      },
      "date": 1616632633780
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}\n\nfunction story (items) {\n  return items.map(each =>\n    typeof each == typeof \"\" ?\n      item('paragraph', {text:each}) :\n      each\n  )\n}"
      },
      "date": 1616632701236
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}\n\nfunction action (type, props) {\n  let date = Date.now()\n  return Object.assign({type, date}, props)\n}\n\nfunction story (items) {\n  return items.map(each =>\n    typeof each == typeof \"\" ?\n      item('paragraph', {text:each}) :\n      each\n  )\n}\n\nfunction page (title, items) {\n  let page = {title, story:story(items)}\n  let journal = action('create',{"
      },
      "date": 1616633245915
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}\n\nfunction action (type, props) {\n  let date = Date.now()\n  return Object.assign({type, date}, props)\n}\n\nfunction story (items) {\n  return items.map(each =>\n    typeof each == typeof \"\" ?\n      item('paragraph', {text:each}) :\n      each\n  )\n}\n\nfunction page (title, items) {\n  let page = {title, story:story(items)}\n  let item = JSON.parse(JSON.stringify(page))\n  page.journal = action('create',{item})\n  return page\n}"
      },
      "date": 1616633479911
    },
    {
      "type": "edit",
      "id": "27ab76811c99a1c7",
      "item": {
        "type": "code",
        "id": "27ab76811c99a1c7",
        "text": "page(\"Somewhere\", [\n  \"Map of somewhere\",\n  item('map', {text: '46, -122'})\n])"
      },
      "date": 1616633519641
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}\n\nfunction action (type, props) {\n  let date = Date.now()\n  return Object.assign({type, date}, props)\n}\n\nfunction story (items) {\n  return items.map(each =>\n    typeof each == typeof \"\" ?\n      item('paragraph', {text:each}) :\n      each\n  )\n}\n\nfunction page (title, items) {\n  let page = {title, story:story(items)}\n  let item = JSON.parse(JSON.stringify(page))\n  page.journal = [action('create',{item})]\n  return page\n}"
      },
      "date": 1616633649290
    },
    {
      "item": {
        "type": "factory",
        "id": "79e7afab3fd0180b"
      },
      "id": "79e7afab3fd0180b",
      "type": "add",
      "after": "777ff878d8f1cc7e",
      "date": 1616633762487
    },
    {
      "type": "remove",
      "id": "79e7afab3fd0180b",
      "date": 1616633780627
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function story (items) {\n  return items.map(each =>\n    typeof each == typeof \"\" ?\n      item('paragraph', {text:each}) :\n      each\n  )\n}\n\nfunction page (title, items) {\n  let page = {title, story:story(items)}\n  let item = JSON.parse(JSON.stringify(page))\n  page.journal = [action('create',{item})]\n  return page\n}"
      },
      "date": 1616633798471
    },
    {
      "item": {
        "type": "factory",
        "id": "f5848c67d9e1cbba"
      },
      "id": "f5848c67d9e1cbba",
      "type": "add",
      "after": "777ff878d8f1cc7e",
      "date": 1616633803003
    },
    {
      "type": "edit",
      "id": "f5848c67d9e1cbba",
      "item": {
        "type": "code",
        "id": "f5848c67d9e1cbba",
        "text": "function item (type, props) {\n  return Object.assign({type, id:id()}, props)\n}\n\nfunction action (type, props) {\n  let date = Date.now()\n  return Object.assign({type, date}, props)\n}"
      },
      "date": 1616633809105
    },
    {
      "id": "f5848c67d9e1cbba",
      "type": "move",
      "order": [
        "54a39b1ea079b8c4",
        "c8963fb39e7da82f",
        "f5848c67d9e1cbba",
        "fba404780d0604af",
        "27ab76811c99a1c7",
        "777ff878d8f1cc7e"
      ],
      "date": 1616633813537
    },
    {
      "type": "add",
      "id": "e33121b07782ab05",
      "item": {
        "type": "paragraph",
        "id": "e33121b07782ab05",
        "text": "Items and Actions are objects with type and other properties, some of which are generated automatically."
      },
      "after": "54a39b1ea079b8c4",
      "date": 1616634008399
    },
    {
      "id": "e33121b07782ab05",
      "type": "move",
      "order": [
        "54a39b1ea079b8c4",
        "c8963fb39e7da82f",
        "e33121b07782ab05",
        "f5848c67d9e1cbba",
        "fba404780d0604af",
        "27ab76811c99a1c7",
        "777ff878d8f1cc7e"
      ],
      "date": 1616634011934
    },
    {
      "type": "add",
      "id": "07af86ced8a0279d",
      "item": {
        "type": "paragraph",
        "id": "07af86ced8a0279d",
        "text": "A Story is made from Items or strings turned to items. A Page adds a Title and Journal to the story."
      },
      "after": "e33121b07782ab05",
      "date": 1616634424996
    },
    {
      "id": "07af86ced8a0279d",
      "type": "move",
      "order": [
        "54a39b1ea079b8c4",
        "c8963fb39e7da82f",
        "e33121b07782ab05",
        "f5848c67d9e1cbba",
        "07af86ced8a0279d",
        "fba404780d0604af",
        "27ab76811c99a1c7",
        "777ff878d8f1cc7e"
      ],
      "date": 1616634428080
    },
    {
      "type": "edit",
      "id": "777ff878d8f1cc7e",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "http://js.ward.asia.wiki.org/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 400"
      },
      "date": 1616634471917
    },
    {
      "type": "add",
      "id": "520191bdcb56afaf",
      "item": {
        "type": "paragraph",
        "id": "520191bdcb56afaf",
        "text": "Many pages start with an empty create action but for bulk generated pages we include the most of the page as the item being created."
      },
      "after": "07af86ced8a0279d",
      "date": 1616634641985
    },
    {
      "id": "520191bdcb56afaf",
      "type": "move",
      "order": [
        "54a39b1ea079b8c4",
        "c8963fb39e7da82f",
        "e33121b07782ab05",
        "f5848c67d9e1cbba",
        "07af86ced8a0279d",
        "fba404780d0604af",
        "520191bdcb56afaf",
        "27ab76811c99a1c7",
        "777ff878d8f1cc7e"
      ],
      "date": 1616634648530
    },
    {
      "type": "edit",
      "id": "520191bdcb56afaf",
      "item": {
        "type": "paragraph",
        "id": "520191bdcb56afaf",
        "text": "Many pages start with an empty create action but for bulk generated pages we include the most of the page as the item being created, carefully copied first."
      },
      "date": 1616634703142
    },
    {
      "type": "edit",
      "id": "27ab76811c99a1c7",
      "item": {
        "type": "code",
        "id": "27ab76811c99a1c7",
        "text": "page(\"Somewhere\", [\n  \"Map of somewhere.\",\n  item('map', {text: '46, -122'})\n])"
      },
      "date": 1616634739454
    },
    {
      "type": "edit",
      "id": "27ab76811c99a1c7",
      "item": {
        "type": "code",
        "id": "27ab76811c99a1c7",
        "text": "page(\"Wind River\", [\n  \"Map of somewhere.\",\n  item('map', {text: '46, -122'})\n])"
      },
      "date": 1616634859207
    },
    {
      "type": "edit",
      "id": "27ab76811c99a1c7",
      "item": {
        "type": "code",
        "id": "27ab76811c99a1c7",
        "text": "page(\"Wind River\", [\n  \"This lat/lon confluence is\\\n    16 miles SW of Mt. Saint Hellens.\",\n  item('map', {text: '46, -122'})\n])"
      },
      "date": 1616635001223
    },
    {
      "type": "edit",
      "id": "27ab76811c99a1c7",
      "item": {
        "type": "code",
        "id": "27ab76811c99a1c7",
        "text": "page(\"Wind River\", [\n  \"A lat/lon confluence near Mt. Saint Helens.\",\n  item('map', {text: '46, -122'})\n])"
      },
      "date": 1616635040993
    },
    {
      "type": "edit",
      "id": "520191bdcb56afaf",
      "item": {
        "type": "paragraph",
        "id": "520191bdcb56afaf",
        "text": "Many pages start with an empty create action but for bulk generated pages we include most of the page as the item being created, once carefully copied."
      },
      "date": 1616635855215
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function story (items) {\n  return items.map(each =>\n    typeof each == typeof \"\" ?\n      item('paragraph', {text:each}) :\n      each\n  )\n}\n\nfunction page (title, items) {\n  let page = {title, story:story(items)}\n  let item = page\n  page.journal = [action('create',{item})]\n  return page\n}"
      },
      "date": 1616635902698
    },
    {
      "type": "edit",
      "id": "fba404780d0604af",
      "item": {
        "type": "code",
        "id": "fba404780d0604af",
        "text": "function story (items) {\n  return items.map(each =>\n    typeof each == typeof \"\" ?\n      item('paragraph', {text:each}) :\n      each\n  )\n}\n\nfunction page (title, items) {\n  let page = {title, story:story(items)}\n  let item = JSON.parse(JSON.stringify(page))\n  page.journal = [action('create',{item})]\n  return page\n}"
      },
      "date": 1616635919150
    },
    {
      "type": "edit",
      "id": "27ab76811c99a1c7",
      "item": {
        "type": "code",
        "id": "27ab76811c99a1c7",
        "text": "page(\"Wind River\", [\n  \"A lat/lon confluence near Mt. Saint Helens.\",\n  item('map', {text:'46,-122', zoom:10})\n])"
      },
      "date": 1616636274725
    },
    {
      "type": "edit",
      "id": "e33121b07782ab05",
      "item": {
        "type": "paragraph",
        "id": "e33121b07782ab05",
        "text": "Items and Actions are objects with type and properties, some of which are generated automatically."
      },
      "date": 1616636939262
    },
    {
      "type": "edit",
      "id": "e33121b07782ab05",
      "item": {
        "type": "paragraph",
        "id": "e33121b07782ab05",
        "text": "Items and Actions are objects with type and properties, some of which are generated automatically. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign mdn]"
      },
      "date": 1616636948830
    },
    {
      "item": {
        "type": "factory",
        "id": "d9f1d2c97f160715"
      },
      "id": "d9f1d2c97f160715",
      "type": "add",
      "after": "777ff878d8f1cc7e",
      "date": 1616637111506
    },
    {
      "type": "edit",
      "id": "d9f1d2c97f160715",
      "item": {
        "type": "paragraph",
        "id": "d9f1d2c97f160715",
        "text": "Adapted from similar code in the Seran Outpost. [https://github.com/joshuabenuck/seran-wiki/blob/8c01ea423bf8eb7cf929bfdb7287f798fef806a8/server/wiki.ts#L39-L70 github]"
      },
      "date": 1616637166818
    },
    {
      "type": "edit",
      "id": "d9f1d2c97f160715",
      "item": {
        "type": "paragraph",
        "id": "d9f1d2c97f160715",
        "text": "Adapted from similar code in the Seran Outpost which includes async evaluation of functions as valid items. [https://github.com/joshuabenuck/seran-wiki/blob/8c01ea423bf8eb7cf929bfdb7287f798fef806a8/server/wiki.ts#L39-L70 github]"
      },
      "date": 1616637294287
    },
    {
      "type": "edit",
      "id": "d9f1d2c97f160715",
      "item": {
        "type": "paragraph",
        "id": "d9f1d2c97f160715",
        "text": "Adapted from similar code in the Seran Outpost. "
      },
      "date": 1616637307841
    },
    {
      "type": "edit",
      "id": "d9f1d2c97f160715",
      "item": {
        "type": "paragraph",
        "id": "d9f1d2c97f160715",
        "text": "Adapted from similar code in the Seran Outpost. When serving pages Seran allowed async evaluation of functions as valid items for late bound content. [https://github.com/joshuabenuck/seran-wiki/blob/8c01ea423bf8eb7cf929bfdb7287f798fef806a8/server/wiki.ts#L39-L70 github]"
      },
      "date": 1616637367663
    },
    {
      "type": "edit",
      "id": "27ab76811c99a1c7",
      "item": {
        "type": "code",
        "id": "27ab76811c99a1c7",
        "text": "page(\"Wind River\", [\n  \"A lat/lon confluence near Mt. Saint Helens.\",\n  item('map', {text:'46,-122', zoom:10}),\n  \"See [[Aerial Map]]\"\n])"
      },
      "date": 1616638102623,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "fork",
      "date": 1616638118799
    },
    {
      "type": "edit",
      "id": "d9f1d2c97f160715",
      "item": {
        "type": "paragraph",
        "id": "d9f1d2c97f160715",
        "text": "Adapted from similar code in the Seran Outpost. When serving pages Seran allowed async evaluation of functions as valid items for late bound content. [https://github.com/joshuabenuck/seran-wiki/blob/8c01ea423bf8eb7cf929bfdb7287f798fef806a8/server/wiki.ts#L39-L70 github] [https://github.com/WardCunningham/seran-dig/blob/master/dig.ts#L132-L212 github]"
      },
      "date": 1616640793060
    },
    {
      "type": "add",
      "id": "9f0f82cb57a61b27",
      "item": {
        "type": "paragraph",
        "id": "9f0f82cb57a61b27",
        "text": "See [[JSON Schema]]"
      },
      "after": "54a39b1ea079b8c4",
      "date": 1616689375818
    },
    {
      "type": "fork",
      "site": "js.ward.asia.wiki.org",
      "date": 1637928766832
    },
    {
      "type": "edit",
      "id": "07af86ced8a0279d",
      "item": {
        "type": "paragraph",
        "id": "07af86ced8a0279d",
        "text": "A [[Story]] is made from Items or strings turned to items. A Page adds a Title and Journal to the story."
      },
      "date": 1637928789062
    },
    {
      "type": "edit",
      "id": "07af86ced8a0279d",
      "item": {
        "type": "paragraph",
        "id": "07af86ced8a0279d",
        "text": "A [[Story]] is made from Items or strings turned to items. A [[Page]] adds a [[Title]] and [[Journal]] to the story."
      },
      "date": 1637928813189
    }
  ]
}