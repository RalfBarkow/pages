{
  "title": "Leibniz Is Not a Computer Algebra System",
  "story": [
    {
      "type": "markdown",
      "id": "8ef2ab311d732302",
      "text": "The most visible difference between [[Leibniz]] and a programming language is that Leibniz is used to write mathematical equations. Symbolic expressions that represent mathematical concepts. So maybe Leibniz is more like a computer algebra system, such as [Maxima](https://maxima.sourceforge.io/), [Gap](https://github.com/gap-system/gap), [FriCAS](https://fricas.github.io/) and many others?"
    },
    {
      "type": "paragraph",
      "id": "aa7b7ee350973d34",
      "text": "The answer to this question is mostly \"no\", though not a categorical \"no\". Leibniz has a small subset of the functionality usually associated with computer algebra systems. But if you do view Leibniz as a computer algebra system, you will rapidly conclude that it's a very weak one."
    },
    {
      "type": "markdown",
      "id": "326de15b1323a003",
      "text": "The main difference is that Leibniz is a *[[Notation]]*, whereas computer algebra systems are *tools*. When  you use a computer algebra system, you ask it questions and it provides (more or less helpful) answers. Each computer algebra system has its own notation used for questions and answers. The notation is an almost accidental construct: it is necessary for interacting with the system, but it's not its central aspect. No computer algebra system encourages you to use its notation for other purposes, or with other tools."
    },
    {
      "type": "paragraph",
      "id": "59badcf32319bb60",
      "text": "Leibniz takes the opposite stance: it's the notation that matters, and the symbolic manipulation tool aspect is an accidental construct, introduced to make the notation useful."
    },
    {
      "type": "paragraph",
      "id": "6cf76230223c3fc8",
      "text": "There is also a fundamental difference in attitude between Leibniz and most (but not all) computer algebra systems. Computer algebra systems behave like oracles: you get an answer to your question, but no explanation whatsoever. The answer is usually the outcome of the application of sophisticated and little-known algorithms, but you aren't told what these algorithms are, why one was used rather than another, or what the possible implicit assumptions of an algorithm are. Leibniz, in contrast, goes for transparency above all. You may not get the answer you were hoping for, but for everything that Leibniz tells you, you can see the code with a few clicks."
    },
    {
      "type": "paragraph",
      "id": "00cc2a2d73279da8",
      "text": "Ideally, someone would write a computer algebra system using Leibniz as its notation for questions and answers. If that someone fully adopted the Leibniz attitude, the resulting computer algebra system would provide not only an answer, but a complete trace of its computations, with references to the methods being applied, all in Leibniz."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Leibniz Is Not a Computer Algebra System",
        "story": []
      },
      "date": 1697450222525
    },
    {
      "id": "8ef2ab311d732302",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "8ef2ab311d732302",
        "text": "The most visible difference between Leibniz and a programming language is that Leibniz is used to write mathematical equations. Symbolic expressions that represent mathematical concepts. So maybe Leibniz is more like a computer algebra system, such as [Maxima](https://maxima.sourceforge.io/), [Gap](https://github.com/gap-system/gap), [FriCAS](https://fricas.github.io/) and many others?"
      },
      "attribution": {
        "page": "2023-10-16"
      },
      "date": 1697450242988
    },
    {
      "id": "aa7b7ee350973d34",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "aa7b7ee350973d34",
        "text": "The answer to this question is mostly \"no\", though not a categorical \"no\". Leibniz has a small subset of the functionality usually associated with computer algebra systems. But if you do view Leibniz as a computer algebra system, you will rapidly conclude that it's a very weak one."
      },
      "after": "8ef2ab311d732302",
      "attribution": {
        "page": "2023-10-16"
      },
      "date": 1697450279005
    },
    {
      "id": "326de15b1323a003",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "326de15b1323a003",
        "text": "The main difference is that Leibniz is a *[[Notation]]*, whereas computer algebra systems are *tools*. When  you use a computer algebra system, you ask it questions and it provides (more or less helpful) answers. Each computer algebra system has its own notation used for questions and answers. The notation is an almost accidental construct: it is necessary for interacting with the system, but it's not its central aspect. No computer algebra system encourages you to use its notation for other purposes, or with other tools."
      },
      "after": "aa7b7ee350973d34",
      "attribution": {
        "page": "2023-10-16"
      },
      "date": 1697450283601
    },
    {
      "id": "59badcf32319bb60",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "59badcf32319bb60",
        "text": "Leibniz takes the opposite stance: it's the notation that matters, and the symbolic manipulation tool aspect is an accidental construct, introduced to make the notation useful."
      },
      "after": "326de15b1323a003",
      "attribution": {
        "page": "2023-10-16"
      },
      "date": 1697450287310
    },
    {
      "id": "6cf76230223c3fc8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6cf76230223c3fc8",
        "text": "There is also a fundamental difference in attitude between Leibniz and most (but not all) computer algebra systems. Computer algebra systems behave like oracles: you get an answer to your question, but no explanation whatsoever. The answer is usually the outcome of the application of sophisticated and little-known algorithms, but you aren't told what these algorithms are, why one was used rather than another, or what the possible implicit assumptions of an algorithm are. Leibniz, in contrast, goes for transparency above all. You may not get the answer you were hoping for, but for everything that Leibniz tells you, you can see the code with a few clicks."
      },
      "after": "59badcf32319bb60",
      "attribution": {
        "page": "2023-10-16"
      },
      "date": 1697450291453
    },
    {
      "id": "00cc2a2d73279da8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "00cc2a2d73279da8",
        "text": "Ideally, someone would write a computer algebra system using Leibniz as its notation for questions and answers. If that someone fully adopted the Leibniz attitude, the resulting computer algebra system would provide not only an answer, but a complete trace of its computations, with references to the methods being applied, all in Leibniz."
      },
      "after": "6cf76230223c3fc8",
      "attribution": {
        "page": "2023-10-16"
      },
      "date": 1697450295118
    },
    {
      "type": "edit",
      "id": "8ef2ab311d732302",
      "item": {
        "type": "markdown",
        "id": "8ef2ab311d732302",
        "text": "The most visible difference between [[Leibniz]] and a programming language is that Leibniz is used to write mathematical equations. Symbolic expressions that represent mathematical concepts. So maybe Leibniz is more like a computer algebra system, such as [Maxima](https://maxima.sourceforge.io/), [Gap](https://github.com/gap-system/gap), [FriCAS](https://fricas.github.io/) and many others?"
      },
      "date": 1697450305690
    }
  ]
}