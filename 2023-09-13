{
  "title": "2023-09-13",
  "story": [
    {
      "type": "paragraph",
      "id": "c97a664163c36131",
      "text": "⇒ [[Half-Earth Socialism]] ⇒ [[Nurture the Wilderness]] ⇒ [[Experiential Education]]"
    },
    {
      "type": "paragraph",
      "id": "65de0ad393316029",
      "text": "⇒ [[The (|>) Pipe]]"
    },
    {
      "type": "code",
      "id": "fee0d1c3ad871206",
      "text": "-- TYPE MISMATCH --------------- /Users/rgb/Projects/dreyeck/blog/elm-pages-starter-express/src/Wiki.elm\n\nThis function cannot handle the argument sent through the (|>) pipe:\n\n54|                             paragraph.text\n55|                                 |> parseWikiLink\n56|                                 |> List.map renderWikiLink\n                                       ^^^^^^^^^^^^^^^^^^^^^^^\nThe argument is:\n\n    Result (List DeadEnd) WikiLink\n\nBut (|>) is piping it to a function that expects:\n\n    List String"
    },
    {
      "type": "paragraph",
      "id": "07de5c14fd3ca9fa",
      "text": "⇒ [[Funktionale Programmierung]] ⇐ [[Know the Problem]]"
    },
    {
      "type": "paragraph",
      "id": "a5c836daf0c65442",
      "text": "Das elektronische Schulbuch [https://dev.inf-schule.de/deklarativ/fp_python 📄 inf-schule]"
    },
    {
      "type": "roster",
      "id": "fc0af16607fe5367",
      "text": "de.dreyeck.ch"
    },
    {
      "type": "paragraph",
      "id": "e3ef37f82b973c77",
      "text": "⇒ Translate [[Link Word]]s? – Web Words – page ⇒ 📄"
    },
    {
      "type": "paragraph",
      "id": "1194a2c2e0d90424",
      "text": "because links are not portals through which we could see what to expect."
    },
    {
      "type": "reference",
      "id": "247c7251482e7411",
      "site": "fed.wiki.org",
      "slug": "follow-links",
      "title": "Follow Links",
      "text": "You will find two kinds of links in the text of wiki pages. Internal links go between wiki pages. External links go to other places on the internet."
    },
    {
      "type": "paragraph",
      "id": "d6e5d748f8f68157",
      "text": "⇒ "
    },
    {
      "type": "reference",
      "id": "ade1b872c8017577",
      "site": "de.dreyeck.ch",
      "slug": "links-folgen",
      "title": "Links folgen",
      "text": "Es gibt zwei Arten von Links im Text von Wiki-Seiten. [[Interne Links]] führen zwischen Wikiseiten. [[Externe Links]] führen zu anderen Stellen im Internet."
    },
    {
      "type": "paragraph",
      "id": "a2078f51341e86ee",
      "text": "See English wiki page to German translation video (24.6 MB) [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$16945935733JCZER:dreyeck.freedombox.rocks?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix], [https://www.linkedin.com/posts/ralfbarkow_federatedwiki-mov-video-activity-7107646763494187010-gjqa?utm_source=share&utm_medium=member_desktop linkedin]"
    },
    {
      "type": "reference",
      "id": "312522de442d89db",
      "site": "de.dreyeck.ch",
      "slug": "ursprungsserver",
      "title": "Ursprungsserver",
      "text": "Der Server, der das clientseitige Javascript bereitstellt, mit dem Sie die Suche im föderierten Wiki starten, wird Origin-Server genannt. Er ist etwas Besonderes."
    },
    {
      "type": "code",
      "id": "b3bd8b3a9a590966",
      "text": "➜  Desktop rsync -avz ./Bildschirmaufnahme\\ 2023-09-13\\ um\\ 10.11.43.mov rgb@wiki.ralfbarkow.ch:/home/rgb/.wiki/wiki.ralfbarkow.ch/assets/pages/2023-09-13/"
    },
    {
      "type": "assets",
      "id": "c4f898049feea80e",
      "text": "pages/2023-09-13"
    },
    {
      "type": "image",
      "id": "71a1e518bcc803da",
      "text": "Find pages sharing any of these items",
      "size": "wide",
      "width": 430,
      "height": 310,
      "url": "/assets/plugins/image/434e5e57c9e2b743480d2745699eca34.jpg"
    },
    {
      "type": "code",
      "id": "d3bd0ee6676fe5e5",
      "text": "SEARCH ANY ITEMS 014a48b53d8e7e09 560451b26f631758 a5863ae79bd552d9 bfacfa99a093ff32 e303cb53a4bee4a1"
    },
    {
      "type": "paragraph",
      "id": "6d93b98f9d950fbc",
      "text": "JSON for Ursprungsserver ⇒ JSON for Origin Server"
    },
    {
      "type": "paragraph",
      "id": "3c6a2ceb3a2cf9f0",
      "text": "⇒ [[Zettelkasten Journal]]"
    },
    {
      "type": "paragraph",
      "id": "71eadde9b88255c8",
      "text": "⇒ [[Elm Parser]]"
    },
    {
      "type": "reference",
      "id": "4d22501af6ca3738",
      "site": "wiki.ralfbarkow.ch",
      "slug": "minilatex",
      "title": "MiniLatex",
      "text": "a Parser-Renderer for a Subset of [[LaTeX]] [https://jxxcarlson.github.io/pdf/minilatex-acm.pdf pdf], [https://github.com/jxxcarlson/miniLaTeX#minilatex github]"
    },
    {
      "type": "paragraph",
      "id": "4dd4cf277845eb7c",
      "text": "Introduction to the elm/parser package [https://korban.net/posts/elm/2018-09-07-introduction-elm-parser/ page]"
    },
    {
      "type": "paragraph",
      "id": "d9e76e54b216027c",
      "text": "How it works"
    },
    {
      "type": "paragraph",
      "id": "51712adc830c29e9",
      "text": "If you have worked with JSON in Elm, the pattern will look familiar. We build a parser, a type that consists of smaller composable parsers. This parser is a value that describes the parsing rules. To actually perform the parsing, we call Parser.run parser str."
    },
    {
      "type": "paragraph",
      "id": "62092fe1c81c1102",
      "text": "Parser.run then applies the appropriate parsers to the input string one by one, consuming zero or more characters at each step. "
    },
    {
      "type": "paragraph",
      "id": "d7e1b4a20604ac9d",
      "text": "How about adding a parser (or more parsers) which gobble the paragraph.text up regardless of whether a wiki link was found?"
    },
    {
      "type": "paragraph",
      "id": "46472932e499c0bc",
      "text": "Certainly, if you want to ensure that the parser consumes the entire paragraph text, regardless of whether a wiki link is found, you can achieve this by adding a parser that captures the remaining text.\n\nHere's an updated version of the code: (ChatGPT version from August 3)"
    },
    {
      "type": "code",
      "id": "0d0d0199b53e070d",
      "text": "-- Define a parser to capture the remaining text in a paragraph\nremainderParser : Parser String\nremainderParser =\n    chompWhile (\\c -> c /= '[')\n\n-- Modify the wikiLink parser to handle multiple occurrences of \"[[\" and \"]]\"\nwikiLink : Parser WikiLink\nwikiLink =\n    succeed WikiLink\n        |. symbol \"[[\"\n        |= (getChompedString <| chompWhile (\\c -> c /= ']'))\n        |. symbol \"]]\"\n\n-- Combine the wikiLink parser and remainderParser\nwikiLinkOrRemainder : Parser (Either WikiLink String)\nwikiLinkOrRemainder =\n    oneOf\n        [ Left <$> wikiLink\n        , Right <$> remainderParser\n        ]\n\n-- Modify the parseWikiLink function to handle either a wikiLink or the remainder of the text\nparseWikiLink : String -> Result (List Parser.DeadEnd) (List (Either WikiLink String))\nparseWikiLink str =\n    Parser.run (zeroOrMore wikiLinkOrRemainder) str\n"
    },
    {
      "type": "paragraph",
      "id": "19956a00b5890dc7",
      "text": "In this updated code:\n\n1. We introduce a remainderParser which will consume characters until it encounters a [."
    },
    {
      "type": "paragraph",
      "id": "d24c1356166dd96f",
      "text": "2. We create a new parser wikiLinkOrRemainder using [[oneOf]] to handle either a wiki link or the remaining text."
    },
    {
      "type": "paragraph",
      "id": "c25808f652e38816",
      "text": "3. The parseWikiLink function now returns a list of Either WikiLink String, where Left represents a wiki link, and Right represents the remaining text."
    },
    {
      "type": "paragraph",
      "id": "855d6f4b12aa4985",
      "text": "This approach ensures that even if a wiki link is not found, the parser will still consume the entire paragraph text. If a wiki link is found, it will be captured, but if not, the remaining text will be captured instead. (ChatGPT version from August 3)"
    },
    {
      "type": "pagefold",
      "id": "aff9891c5498e26b",
      "text": "oneOf"
    },
    {
      "type": "paragraph",
      "id": "6b94109a7b936a59",
      "text": "See section 4 (Parser) of the [[MiniLatex]] paper."
    },
    {
      "type": "paragraph",
      "id": "aeaa4cd79306b9bc",
      "text": "In this section, we discuss the combinators in the [[elm/parser]] library."
    },
    {
      "type": "reference",
      "id": "a0578c382c400dea",
      "site": "wiki.ralfbarkow.ch",
      "slug": "elm-parser",
      "title": "Elm Parser",
      "text": "Regular expressions are quite confusing and difficult to use. This library provides a coherent alternative that handles more cases and produces clearer code. [https://github.com/elm/parser#parser github], [https://package.elm-lang.org/packages/elm/parser/latest page]"
    },
    {
      "type": "paragraph",
      "id": "c84952c6d2b75ce0",
      "text": "Notable are the pipeline combinators (|.) and (|=) discussed below."
    },
    {
      "type": "paragraph",
      "id": "307f7a5fcd02063b",
      "text": "The parser is built from elementary parsers that recognize fixed strings, e.g., \\begin{theorem}, whitespace, words, etc. Words are defined as strings not containing whitespace and not beginning with a reserved character such as a backslash or a dollar sign."
    },
    {
      "type": "paragraph",
      "id": "ba055e1561f9f23d",
      "text": "There are also special parsers such as"
    },
    {
      "type": "code",
      "id": "6a80f56ffa73f45b",
      "text": "succeed : a → Parser a"
    },
    {
      "type": "paragraph",
      "id": "1bdd3b9a970078d1",
      "text": "which always succeeds and returns a value of type a."
    },
    {
      "type": "image",
      "id": "7bf1e1ddaa093e47",
      "text": "Let's build a parser ! [https://youtu.be/dmDA7iziSgs?t=1067 video]",
      "size": "wide",
      "width": 430,
      "height": 242,
      "url": "/assets/plugins/image/541d9f3eb7d99a7106db306080fe7838.jpg"
    },
    {
      "type": "paragraph",
      "id": "8c367fcb8880577b",
      "text": "Note: Compare this with our parser for wiki links (reserved characters are doubled square brackets): [https://github.com/dreyeck/blog/blob/ec442f48190d36b91a97fb7c5b44bc1da730d471/elm-pages-starter-express/src/Wiki.elm#L16-L27 code]"
    },
    {
      "type": "code",
      "id": "f8534cb213076b33",
      "text": "link : Parser WikiLink\nlink =\n    succeed WikiLink\n        |. symbol \"[[\"\n        |= (getChompedString <| chompWhile (\\c -> c /= ']'))\n        |. symbol \"]]\"\n\n"
    },
    {
      "type": "paragraph",
      "id": "68943dee6b991f16",
      "text": "We get an error message (see the following figure) stating that the expectation of finding the doubled square brackets at the beginning of the paragraph was disappointed."
    },
    {
      "type": "image",
      "id": "6cbf2a9b113eb15c",
      "text": "Expecting [[Symbol]]",
      "size": "wide",
      "width": 430,
      "height": 350,
      "url": "/assets/plugins/image/317d9a41cd2182d21908a8a0d7fbf702.jpg"
    },
    {
      "type": "reference",
      "id": "be2e060a4cc61676",
      "site": "wiki.ralfbarkow.ch",
      "slug": "gobble-it-up",
      "title": "Gobble It Up",
      "text": "⇒ [[Elm Parser]] ⇒ [[Parser Pipelines]]"
    },
    {
      "type": "paragraph",
      "id": "e9eb3f3cf85df720",
      "text": "We come back to the proposal to use the parser function oneOf."
    },
    {
      "type": "paragraph",
      "id": "b2c9d2d17f2dfec9",
      "text": "From given parsers one may construct others using combinators. Thus the top level parser is constructed using the oneOf parser function, which takes a list of parsers as input, applies each in turn, returning on the first parser to succeed, otherwise finishing with an error. [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Parser.elm#L232 code]"
    },
    {
      "type": "code",
      "id": "ac7e278cd1ad230b",
      "text": "{-| Production: $ LatexExpression &\\Rightarrow Words\\ |\\ Comment\\ |\\ IMath\\ |\\ DMath\\ |\\ Macro\\ |\\ Env $\n-}\nlatexExpression : Parser LatexExpression\nlatexExpression =\n    oneOf\n        [ texComment\n        , lazy (\\_ -> environment)\n        , displayMathDollar\n        , displayMathBrackets\n        , inlineMath ws\n        , macro ws\n        , smacro\n        , words\n        ]\n\n"
    },
    {
      "type": "paragraph",
      "id": "8a65696cb725b268",
      "text": "Notice the close correspondence between the production for the nonterminal symbol LatexExpr and the construction of the parser: reading the right-hand side of the first is like reading the argument to oneOf from top to bottom. [https://youtu.be/dmDA7iziSgs?t=1172 video]"
    },
    {
      "type": "markdown",
      "id": "afe4313fd08184de",
      "text": "> Reading across the right-hand side of the production is like reading down the code for the parser. So there there's an intimate relationship between these production rules and parser combinators."
    },
    {
      "type": "paragraph",
      "id": "f562a869609f5ac5",
      "text": "See words in Parser.elm: [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Parser.elm#L69 code]"
    },
    {
      "type": "code",
      "id": "c336ddc9b2c54740",
      "text": "{- WORDS AND TEXT -}\n\n\nwords : Parser LatexExpression\nwords =\n    inContext \"words\" <|\n        (succeed identity\n            |= repeat oneOrMore word\n            |> map (String.join \" \")\n            |> map LXString\n        )\n\n\n{-| Like `words`, but after a word is recognized spaces, not spaces + newlines are consumed\n-}\nspecialWords : Parser LatexExpression\nspecialWords =\n    inContext \"specialWords\" <|\n        (succeed identity\n            |= repeat oneOrMore specialWord\n            |> map (String.join \" \")\n            |> map LXString\n        )\n\n"
    },
    {
      "type": "paragraph",
      "id": "46c760f3676d7e84",
      "text": "and in ParserHelpers.elm: [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/ParserHelpers.elm#L62-L83 code]"
    },
    {
      "type": "code",
      "id": "917a3379166f5027",
      "text": "word : Parser String\nword =\n    (inContext \"word\" <|\n        succeed identity\n            |. spaces\n            |= keep oneOrMore notSpecialCharacter\n            |. ws\n    )\n        -- |> map transformWords\n\n\n{-| Like `word`, but after a word is recognized spaces, not spaces + newlines are consumed\n-}\nspecialWord : Parser String\nspecialWord =\n    inContext \"specialWord\" <|\n        succeed identity\n            |. spaces\n            |= keep oneOrMore notSpecialTableOrMacroCharacter\n            |. spaces\n\n"
    },
    {
      "type": "code",
      "id": "1c9a05321fd03984",
      "text": "notSpecialTableOrMacroCharacter : Char -> Bool\nnotSpecialTableOrMacroCharacter c =\n    not (c == ' ' || c == '\\n' || c == '\\\\' || c == '$' || c == '}' || c == ']' || c == '&')\n"
    },
    {
      "type": "pagefold",
      "id": "586002fa37dfb5be",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "1637db47255f8863",
      "site": "ward.dojo.fed.wiki",
      "slug": "ward-cunningham",
      "title": "Ward Cunningham",
      "text": "With this site I am participating in and learning from at least one wiki dojo. I'm happy to join more."
    },
    {
      "type": "reference",
      "id": "b6b80d584b768b9b",
      "site": "plugins.dojo.fed.wiki",
      "slug": "register-new-site",
      "title": "Register New Site",
      "text": "The owner of this site can create new sites as subdomains of this site. The simplest option is to create the new site with the same owner and login information as used here."
    },
    {
      "type": "reference",
      "id": "39465dcebbc3d68a",
      "site": "ward.dojo.fed.wiki",
      "slug": "custom-registration",
      "title": "Custom Registration",
      "text": "We can disable automatic creation of new sites in a farm by setting server config parameters. Now we explore possible automated workflows that will replace this convenience."
    },
    {
      "type": "paragraph",
      "id": "8f5bb78e6b0fc44d",
      "text": "martech ⇒ [[Michael Martin]]"
    },
    {
      "type": "roster",
      "id": "b5819f0e37211d15",
      "text": "martech.dojo.fed.wiki"
    },
    {
      "type": "paragraph",
      "id": "a94fb03dad478666",
      "text": "The Crazy Wiki Place [http://crazy.fed.wiki/assets/home/index.html page] – assets/home/index.html"
    },
    {
      "type": "paragraph",
      "id": "df6292869e31c966",
      "text": "register.js is stored in the assets/home folder and deployed as a node.js application."
    },
    {
      "type": "pagefold",
      "id": "2571467b7726be2c",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "71eed8dfe27e7036",
      "text": "How to build interesting parsers [https://discourse.elm-lang.org/t/how-to-build-interesting-parsers/8786 page]"
    },
    {
      "type": "markdown",
      "id": "d11b96f3eb0b1032",
      "text": "> Yes, good! But I don’t want to run the parser at the beginning of the source string. I want to run it at the current parser position."
    },
    {
      "type": "reference",
      "id": "d65fe5768c55d9dc",
      "site": "wiki.ralfbarkow.ch",
      "slug": "flip",
      "title": "flip",
      "text": "⇒ [[Flip Operation]]"
    },
    {
      "type": "paragraph",
      "id": "a3153d571e723786",
      "text": "It’s possible to implement a negative lookahead parser in the same way, but the resulting code wouldn’t be easily recognizable as the inverse of the above (positive) lookahead parser. It would be nice to have a common code structure like an if ... then ... else ... with the branches flipped for the negative lookahead parser."
    },
    {
      "type": "paragraph",
      "id": "d74a1536d06b5ef4",
      "text": "[…] “getResultAndThen” because we determine the Result of the Parser.run 1 function, “getResultAndThen” like the other “getXxx” functions in the elm/parser package which return information without affecting the current parser state, and “getResultAndThen” because the signature looks similar to a flipped version of Parser.andThen:"
    },
    {
      "type": "code",
      "id": "3c74db2c53b36aee",
      "text": "flippedAndThen   : Parser a -> (a -> Parser b) -> Parser b\n\ngetResultAndThen : Parser a -> (Result (List Parser.DeadEnd) a -> Parser b) -> Parser b"
    },
    {
      "type": "code",
      "id": "1d986ef7e6fb1fa9",
      "text": "negativeLookAhead : String -> Parser.Parser a -> Parser.Parser ()\nnegativeLookAhead msg parser =\n    getResultAndThen parser <|\n        \\result ->\n            case result of\n                Ok _ ->\n                    Parser.problem msg\n\n                Err _ ->\n                    Parser.succeed ()"
    },
    {
      "type": "paragraph",
      "id": "e97cdbd157e2a6e7",
      "text": "As you can see, it has exactly the same structure as the (positive) lookAhead parser, with both cases flipped (more or less)."
    },
    {
      "type": "paragraph",
      "id": "34cdf62138cbcd98",
      "text": "Parser.Extra [https://package.elm-lang.org/packages/pithub/elm-parser-extra/latest page], [https://github.com/pithub/elm-parser-extra/tree/1.0.0#parserextra github]"
    },
    {
      "type": "video",
      "id": "66b902d4335c6227",
      "text": "YOUTUBE M9ulswr1z0E\n\"Demystifying Parsers\" by [[Tereza Sokol]]"
    },
    {
      "type": "paragraph",
      "id": "920f3dda8466569c",
      "text": "terezka/yaml [https://github.com/terezka/yaml#yaml-in-elm github]"
    },
    {
      "type": "paragraph",
      "id": "5375a1ea3b49c29f",
      "text": "﻿﻿"
    },
    {
      "type": "pagefold",
      "id": "dd1c93c66095e202",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "f3e73afeaed35a3c",
      "text": "Sociotechnical system design for \"digital coal mines\" [https://www.linkedin.com/posts/trondhjort_sosioteknisk-systemdesign-for-digitale-kullgruver-activity-7106884183951589376-1VUD?utm_source=share&utm_medium=member_desktop linkedin]"
    },
    {
      "type": "video",
      "id": "94ad1e36f11e5b80",
      "text": "VIMEO 861989662\nSosioteknisk systemdesign for “digitale kullgruver” - [[Trond Hjorteland]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-09-13",
        "story": []
      },
      "date": 1694582575903
    },
    {
      "id": "5ee1f32482a6f0af",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5ee1f32482a6f0af",
        "text": "⇒ [[Nurture the Wilderness]]"
      },
      "attribution": {
        "page": "Die Wildnis pflegen"
      },
      "date": 1694582581576
    },
    {
      "id": "c97a664163c36131",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c97a664163c36131",
        "text": "⇒ [[Half-Earth Socialism]]"
      },
      "after": "5ee1f32482a6f0af",
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694582594268
    },
    {
      "id": "c97a664163c36131",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "5ee1f32482a6f0af"
      ],
      "date": 1694582596443
    },
    {
      "type": "remove",
      "id": "5ee1f32482a6f0af",
      "date": 1694582599216
    },
    {
      "type": "edit",
      "id": "c97a664163c36131",
      "item": {
        "type": "paragraph",
        "id": "c97a664163c36131",
        "text": "⇒ [[Half-Earth Socialism]] ⇒ [[Nurture the Wilderness]]"
      },
      "date": 1694582600190
    },
    {
      "type": "edit",
      "id": "c97a664163c36131",
      "item": {
        "type": "paragraph",
        "id": "c97a664163c36131",
        "text": "⇒ [[Half-Earth Socialism]] ⇒ [[Nurture the Wilderness]] ⇒ [[Experiential Education]]"
      },
      "date": 1694585882980
    },
    {
      "item": {
        "type": "factory",
        "id": "65de0ad393316029"
      },
      "id": "65de0ad393316029",
      "type": "add",
      "after": "c97a664163c36131",
      "date": 1694587222654
    },
    {
      "type": "edit",
      "id": "65de0ad393316029",
      "item": {
        "type": "paragraph",
        "id": "65de0ad393316029",
        "text": "⇒ [[The (|>) Pipe]]"
      },
      "date": 1694587230518
    },
    {
      "type": "add",
      "id": "07de5c14fd3ca9fa",
      "item": {
        "type": "paragraph",
        "id": "07de5c14fd3ca9fa",
        "text": "⇒ [[Funktionale Programmierung]]"
      },
      "after": "65de0ad393316029",
      "date": 1694588221651
    },
    {
      "type": "edit",
      "id": "07de5c14fd3ca9fa",
      "item": {
        "type": "paragraph",
        "id": "07de5c14fd3ca9fa",
        "text": "⇒ [[Funktionale Programmierung]] ⇐ [[Know the Problem]]"
      },
      "date": 1694588372406
    },
    {
      "item": {
        "type": "factory",
        "id": "a5c836daf0c65442"
      },
      "id": "a5c836daf0c65442",
      "type": "add",
      "after": "07de5c14fd3ca9fa",
      "date": 1694588539381
    },
    {
      "type": "edit",
      "id": "a5c836daf0c65442",
      "item": {
        "type": "paragraph",
        "id": "a5c836daf0c65442",
        "text": "Das elektronische Schulbuch inf-schule "
      },
      "date": 1694588542083
    },
    {
      "type": "edit",
      "id": "a5c836daf0c65442",
      "item": {
        "type": "paragraph",
        "id": "a5c836daf0c65442",
        "text": "Das elektronische Schulbuch inf-schule [https://dev.inf-schule.de/infschule/information page]"
      },
      "date": 1694588551995
    },
    {
      "type": "edit",
      "id": "a5c836daf0c65442",
      "item": {
        "type": "paragraph",
        "id": "a5c836daf0c65442",
        "text": "Das elektronische Schulbuch [https://dev.inf-schule.de/infschule/information inf-schule]"
      },
      "date": 1694588583460
    },
    {
      "item": {
        "type": "factory",
        "id": "e3ef37f82b973c77"
      },
      "id": "e3ef37f82b973c77",
      "type": "add",
      "after": "a5c836daf0c65442",
      "date": 1694589401494
    },
    {
      "type": "edit",
      "id": "e3ef37f82b973c77",
      "item": {
        "type": "paragraph",
        "id": "e3ef37f82b973c77",
        "text": "[[Link Word]] – 📄"
      },
      "date": 1694589410388
    },
    {
      "type": "edit",
      "id": "e3ef37f82b973c77",
      "item": {
        "type": "paragraph",
        "id": "e3ef37f82b973c77",
        "text": "⇒ Translate [[Link Word]]s? – 📄"
      },
      "date": 1694589442698
    },
    {
      "type": "edit",
      "id": "e3ef37f82b973c77",
      "item": {
        "type": "paragraph",
        "id": "e3ef37f82b973c77",
        "text": "⇒ Translate [[Link Word]]s? – Web Words – page – 📄"
      },
      "date": 1694589477991
    },
    {
      "item": {
        "type": "factory",
        "id": "fc0af16607fe5367"
      },
      "id": "fc0af16607fe5367",
      "type": "add",
      "after": "e3ef37f82b973c77",
      "date": 1694589494911
    },
    {
      "id": "fc0af16607fe5367",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "07de5c14fd3ca9fa",
        "fc0af16607fe5367",
        "a5c836daf0c65442",
        "e3ef37f82b973c77"
      ],
      "date": 1694589496745
    },
    {
      "type": "edit",
      "id": "fc0af16607fe5367",
      "item": {
        "type": "roster",
        "id": "fc0af16607fe5367",
        "text": "de.dreyeck.ch"
      },
      "date": 1694589502551
    },
    {
      "id": "e3ef37f82b973c77",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "07de5c14fd3ca9fa",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "a5c836daf0c65442"
      ],
      "date": 1694589646261
    },
    {
      "type": "edit",
      "id": "a5c836daf0c65442",
      "item": {
        "type": "paragraph",
        "id": "a5c836daf0c65442",
        "text": "Das elektronische Schulbuch [https://dev.inf-schule.de/deklarativ/fp_python 📄 inf-schule]"
      },
      "date": 1694589653445
    },
    {
      "type": "edit",
      "id": "e3ef37f82b973c77",
      "item": {
        "type": "paragraph",
        "id": "e3ef37f82b973c77",
        "text": "⇒ Translate [[Link Word]]s? – Web Words – page ⇒ 📄"
      },
      "date": 1694589692534
    },
    {
      "item": {
        "type": "factory",
        "id": "1194a2c2e0d90424"
      },
      "id": "1194a2c2e0d90424",
      "type": "add",
      "after": "a5c836daf0c65442",
      "date": 1694589778360
    },
    {
      "id": "1194a2c2e0d90424",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "07de5c14fd3ca9fa",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "a5c836daf0c65442"
      ],
      "date": 1694589781228
    },
    {
      "type": "edit",
      "id": "1194a2c2e0d90424",
      "item": {
        "type": "paragraph",
        "id": "1194a2c2e0d90424",
        "text": "because links are not portals through which we could see what to expect."
      },
      "date": 1694589782700
    },
    {
      "item": {
        "type": "factory",
        "id": "247c7251482e7411"
      },
      "id": "247c7251482e7411",
      "type": "add",
      "after": "a5c836daf0c65442",
      "date": 1694589814142
    },
    {
      "type": "edit",
      "id": "247c7251482e7411",
      "item": {
        "type": "reference",
        "id": "247c7251482e7411",
        "site": "fed.wiki.org",
        "slug": "follow-links",
        "title": "Follow Links",
        "text": "You will find two kinds of links in the text of wiki pages. Internal links go between wiki pages. External links go to other places on the internet."
      },
      "date": 1694589824539
    },
    {
      "item": {
        "type": "factory",
        "id": "d6e5d748f8f68157"
      },
      "id": "d6e5d748f8f68157",
      "type": "add",
      "after": "247c7251482e7411",
      "date": 1694589856544
    },
    {
      "type": "edit",
      "id": "d6e5d748f8f68157",
      "item": {
        "type": "paragraph",
        "id": "d6e5d748f8f68157",
        "text": "⇒ [[Links folgen]]"
      },
      "date": 1694589866350
    },
    {
      "item": {
        "type": "factory",
        "id": "3c6a2ceb3a2cf9f0"
      },
      "id": "3c6a2ceb3a2cf9f0",
      "type": "add",
      "after": "d6e5d748f8f68157",
      "date": 1694590374009
    },
    {
      "type": "edit",
      "id": "3c6a2ceb3a2cf9f0",
      "item": {
        "type": "paragraph",
        "id": "3c6a2ceb3a2cf9f0",
        "text": "⇒ [[Zettelkasten Journal]]"
      },
      "date": 1694590386905
    },
    {
      "item": {
        "type": "factory",
        "id": "e2466b59b8bd5de6"
      },
      "id": "e2466b59b8bd5de6",
      "type": "add",
      "after": "3c6a2ceb3a2cf9f0",
      "date": 1694593016488
    },
    {
      "type": "remove",
      "id": "e2466b59b8bd5de6",
      "date": 1694593023912
    },
    {
      "item": {
        "type": "factory",
        "id": "c4f898049feea80e"
      },
      "id": "c4f898049feea80e",
      "type": "add",
      "after": "3c6a2ceb3a2cf9f0",
      "date": 1694593026947
    },
    {
      "type": "edit",
      "id": "c4f898049feea80e",
      "item": {
        "type": "assets",
        "id": "c4f898049feea80e",
        "text": " 2023-09-13"
      },
      "date": 1694593038088
    },
    {
      "type": "edit",
      "id": "c4f898049feea80e",
      "item": {
        "type": "assets",
        "id": "c4f898049feea80e",
        "text": "2023-09-13"
      },
      "date": 1694593043620
    },
    {
      "type": "edit",
      "id": "c4f898049feea80e",
      "item": {
        "type": "assets",
        "id": "c4f898049feea80e",
        "text": "pages/2023-09-13"
      },
      "date": 1694593118797
    },
    {
      "item": {
        "type": "factory",
        "id": "997c6c5e719134af"
      },
      "id": "997c6c5e719134af",
      "type": "add",
      "after": "c4f898049feea80e",
      "date": 1694593449664
    },
    {
      "type": "edit",
      "id": "997c6c5e719134af",
      "item": {
        "type": "audio",
        "id": "997c6c5e719134af",
        "text": "➜  Desktop rsync -avz ./Bildschirmaufnahme\\ 2023-09-13\\ um\\ 10.11.43.mov rgb@wiki.ralfbarkow.ch:/home/rgb/.wiki/wiki.ralfbarkow.ch/assets/pages/2023-09-13/"
      },
      "date": 1694593452254
    },
    {
      "type": "remove",
      "id": "997c6c5e719134af",
      "date": 1694593457495
    },
    {
      "item": {
        "type": "factory",
        "id": "b3bd8b3a9a590966"
      },
      "id": "b3bd8b3a9a590966",
      "type": "add",
      "after": "c4f898049feea80e",
      "date": 1694593458631
    },
    {
      "type": "edit",
      "id": "b3bd8b3a9a590966",
      "item": {
        "type": "code",
        "id": "b3bd8b3a9a590966",
        "text": "➜  Desktop rsync -avz ./Bildschirmaufnahme\\ 2023-09-13\\ um\\ 10.11.43.mov rgb@wiki.ralfbarkow.ch:/home/rgb/.wiki/wiki.ralfbarkow.ch/assets/pages/2023-09-13/"
      },
      "date": 1694593461983
    },
    {
      "item": {
        "type": "factory",
        "id": "312522de442d89db"
      },
      "id": "312522de442d89db",
      "type": "add",
      "after": "b3bd8b3a9a590966",
      "date": 1694593761248
    },
    {
      "type": "edit",
      "id": "312522de442d89db",
      "item": {
        "type": "reference",
        "id": "312522de442d89db",
        "site": "de.dreyeck.ch",
        "slug": "ursprungsserver",
        "title": "Ursprungsserver",
        "text": "Der Server, der das clientseitige Javascript bereitstellt, mit dem Sie die Suche im föderierten Wiki starten, wird Origin-Server genannt. Er ist etwas Besonderes."
      },
      "date": 1694593764076
    },
    {
      "id": "312522de442d89db",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "07de5c14fd3ca9fa",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "a5c836daf0c65442",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "3c6a2ceb3a2cf9f0",
        "312522de442d89db",
        "c4f898049feea80e",
        "b3bd8b3a9a590966"
      ],
      "date": 1694593765999
    },
    {
      "id": "b3bd8b3a9a590966",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "07de5c14fd3ca9fa",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "a5c836daf0c65442",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "3c6a2ceb3a2cf9f0",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e"
      ],
      "date": 1694593773681
    },
    {
      "item": {
        "type": "factory",
        "id": "a2078f51341e86ee"
      },
      "id": "a2078f51341e86ee",
      "type": "add",
      "after": "c4f898049feea80e",
      "date": 1694593885963
    },
    {
      "type": "edit",
      "id": "a2078f51341e86ee",
      "item": {
        "type": "paragraph",
        "id": "a2078f51341e86ee",
        "text": "See English wiki page to German translation video (24.6 MB)"
      },
      "date": 1694593887715
    },
    {
      "type": "edit",
      "id": "a2078f51341e86ee",
      "item": {
        "type": "paragraph",
        "id": "a2078f51341e86ee",
        "text": "See English wiki page to German translation video (24.6 MB) [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$16945935733JCZER:dreyeck.freedombox.rocks?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "date": 1694593899929
    },
    {
      "id": "fc0af16607fe5367",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fc0af16607fe5367",
        "07de5c14fd3ca9fa",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "a5c836daf0c65442",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "3c6a2ceb3a2cf9f0",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "a2078f51341e86ee"
      ],
      "date": 1694594465177
    },
    {
      "item": {
        "type": "factory",
        "id": "ade1b872c8017577"
      },
      "id": "ade1b872c8017577",
      "type": "add",
      "after": "a2078f51341e86ee",
      "date": 1694594552059
    },
    {
      "type": "edit",
      "id": "ade1b872c8017577",
      "item": {
        "type": "reference",
        "id": "ade1b872c8017577",
        "site": "de.dreyeck.ch",
        "slug": "links-folgen",
        "title": "Links folgen",
        "text": "Es gibt zwei Arten von Links im Text von Wiki-Seiten. [[Interne Links]] führen zwischen Wikiseiten. [[Externe Links]] führen zu anderen Stellen im Internet."
      },
      "date": 1694594555057
    },
    {
      "id": "ade1b872c8017577",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fc0af16607fe5367",
        "07de5c14fd3ca9fa",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "a5c836daf0c65442",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "3c6a2ceb3a2cf9f0",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "a2078f51341e86ee"
      ],
      "date": 1694594559626
    },
    {
      "type": "edit",
      "id": "d6e5d748f8f68157",
      "item": {
        "type": "paragraph",
        "id": "d6e5d748f8f68157",
        "text": "⇒ "
      },
      "date": 1694594571047
    },
    {
      "id": "3c6a2ceb3a2cf9f0",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fc0af16607fe5367",
        "07de5c14fd3ca9fa",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "a5c836daf0c65442",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "a2078f51341e86ee",
        "3c6a2ceb3a2cf9f0"
      ],
      "date": 1694594595195
    },
    {
      "id": "a2078f51341e86ee",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fc0af16607fe5367",
        "07de5c14fd3ca9fa",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "a5c836daf0c65442",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "3c6a2ceb3a2cf9f0"
      ],
      "date": 1694594609910
    },
    {
      "type": "edit",
      "id": "a2078f51341e86ee",
      "item": {
        "type": "paragraph",
        "id": "a2078f51341e86ee",
        "text": "See English wiki page to German translation video (24.6 MB) [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$16945935733JCZER:dreyeck.freedombox.rocks?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix], [https://www.linkedin.com/posts/ralfbarkow_federatedwiki-mov-video-activity-7107646763494187010-gjqa?utm_source=share&utm_medium=member_desktop linkedin]"
      },
      "date": 1694595873223
    },
    {
      "item": {
        "type": "factory",
        "id": "d3bd0ee6676fe5e5"
      },
      "id": "d3bd0ee6676fe5e5",
      "type": "add",
      "after": "3c6a2ceb3a2cf9f0",
      "date": 1694596260594
    },
    {
      "id": "d3bd0ee6676fe5e5",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fc0af16607fe5367",
        "07de5c14fd3ca9fa",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "a5c836daf0c65442",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "d3bd0ee6676fe5e5",
        "3c6a2ceb3a2cf9f0"
      ],
      "date": 1694596263840
    },
    {
      "type": "edit",
      "id": "d3bd0ee6676fe5e5",
      "item": {
        "type": "code",
        "id": "d3bd0ee6676fe5e5",
        "text": "SEARCH ANY ITEMS 014a48b53d8e7e09 560451b26f631758 a5863ae79bd552d9 bfacfa99a093ff32 e303cb53a4bee4a1"
      },
      "date": 1694596265705
    },
    {
      "item": {
        "type": "factory",
        "id": "6d93b98f9d950fbc"
      },
      "id": "6d93b98f9d950fbc",
      "type": "add",
      "after": "3c6a2ceb3a2cf9f0",
      "date": 1694596350111
    },
    {
      "id": "6d93b98f9d950fbc",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fc0af16607fe5367",
        "07de5c14fd3ca9fa",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "a5c836daf0c65442",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0"
      ],
      "date": 1694596352090
    },
    {
      "type": "edit",
      "id": "6d93b98f9d950fbc",
      "item": {
        "type": "paragraph",
        "id": "6d93b98f9d950fbc",
        "text": "JSON for Origin Server"
      },
      "date": 1694596354913
    },
    {
      "type": "edit",
      "id": "6d93b98f9d950fbc",
      "item": {
        "type": "paragraph",
        "id": "6d93b98f9d950fbc",
        "text": "JSON for Ursprungsserver ⇒ JSON for Origin Server"
      },
      "date": 1694596447417
    },
    {
      "item": {
        "type": "factory",
        "id": "71a1e518bcc803da"
      },
      "id": "71a1e518bcc803da",
      "type": "add",
      "after": "3c6a2ceb3a2cf9f0",
      "date": 1694596560160
    },
    {
      "id": "71a1e518bcc803da",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fc0af16607fe5367",
        "07de5c14fd3ca9fa",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "a5c836daf0c65442",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0"
      ],
      "date": 1694596563346
    },
    {
      "type": "edit",
      "id": "71a1e518bcc803da",
      "item": {
        "type": "image",
        "id": "71a1e518bcc803da",
        "text": "Find pages sharing any of these items",
        "size": "wide",
        "width": 430,
        "height": 310,
        "url": "/assets/plugins/image/434e5e57c9e2b743480d2745699eca34.jpg"
      },
      "date": 1694596582833
    },
    {
      "item": {
        "type": "factory",
        "id": "fee0d1c3ad871206"
      },
      "id": "fee0d1c3ad871206",
      "type": "add",
      "after": "3c6a2ceb3a2cf9f0",
      "date": 1694597447743
    },
    {
      "id": "fee0d1c3ad871206",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "fc0af16607fe5367",
        "07de5c14fd3ca9fa",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "a5c836daf0c65442",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0"
      ],
      "date": 1694597458627
    },
    {
      "type": "edit",
      "id": "fee0d1c3ad871206",
      "item": {
        "type": "code",
        "id": "fee0d1c3ad871206",
        "text": "-- TYPE MISMATCH --------------- /Users/rgb/Projects/dreyeck/blog/elm-pages-starter-express/src/Wiki.elm\n\nThis function cannot handle the argument sent through the (|>) pipe:\n\n54|                             paragraph.text\n55|                                 |> parseWikiLink\n56|                                 |> List.map renderWikiLink\n                                       ^^^^^^^^^^^^^^^^^^^^^^^\nThe argument is:\n\n    Result (List DeadEnd) WikiLink\n\nBut (|>) is piping it to a function that expects:\n\n    List String"
      },
      "date": 1694597460900
    },
    {
      "id": "07de5c14fd3ca9fa",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "a5c836daf0c65442",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0"
      ],
      "date": 1694597530726
    },
    {
      "id": "a5c836daf0c65442",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0"
      ],
      "date": 1694598940985
    },
    {
      "item": {
        "type": "factory",
        "id": "71eadde9b88255c8"
      },
      "id": "71eadde9b88255c8",
      "type": "add",
      "after": "3c6a2ceb3a2cf9f0",
      "date": 1694601474717
    },
    {
      "type": "edit",
      "id": "71eadde9b88255c8",
      "item": {
        "type": "paragraph",
        "id": "71eadde9b88255c8",
        "text": "⇒ [[Elm Parser]]"
      },
      "date": 1694601485996
    },
    {
      "id": "4dd4cf277845eb7c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4dd4cf277845eb7c",
        "text": "Introduction to the elm/parser package [https://korban.net/posts/elm/2018-09-07-introduction-elm-parser/ page]"
      },
      "after": "71eadde9b88255c8",
      "attribution": {
        "page": "Elm Parser"
      },
      "date": 1694601714614
    },
    {
      "item": {
        "type": "factory",
        "id": "b04786929dfb993a"
      },
      "id": "b04786929dfb993a",
      "type": "add",
      "after": "4dd4cf277845eb7c",
      "date": 1694601929057
    },
    {
      "type": "edit",
      "id": "b04786929dfb993a",
      "item": {
        "type": "paragraph",
        "id": "b04786929dfb993a",
        "text": "\nKORBAN, Alex, 2018. Introduction to the elm/parser package. Korban.net. Online. 7 September 2018. [Accessed 13 September 2023]. Available from: https://korban.net/posts/elm/2018-09-07-introduction-elm-parser/\n"
      },
      "date": 1694601930841
    },
    {
      "type": "edit",
      "id": "b04786929dfb993a",
      "item": {
        "type": "paragraph",
        "id": "b04786929dfb993a",
        "text": "KORBAN, Alex, 2018. Introduction to the elm/parser package. Korban.net. Online. 7 September 2018. [Accessed 13 September 2023]. Available from: https://korban.net/posts/elm/2018-09-07-introduction-elm-parser/\n"
      },
      "date": 1694601933755
    },
    {
      "type": "edit",
      "id": "b04786929dfb993a",
      "item": {
        "type": "paragraph",
        "id": "b04786929dfb993a",
        "text": "KORBAN, Alex, 2018. Introduction to the elm/parser package. Korban.net. 7 September 2018. [Accessed 13 September 2023]. [https://korban.net/posts/elm/2018-09-07-introduction-elm-parser/ page]\n"
      },
      "date": 1694601960149
    },
    {
      "id": "b04786929dfb993a",
      "type": "remove",
      "removedTo": {
        "page": "Elm Parser"
      },
      "date": 1694601983454
    },
    {
      "item": {
        "type": "factory",
        "id": "4d22501af6ca3738"
      },
      "id": "4d22501af6ca3738",
      "type": "add",
      "after": "4dd4cf277845eb7c",
      "date": 1694603242103
    },
    {
      "type": "edit",
      "id": "4d22501af6ca3738",
      "item": {
        "type": "reference",
        "id": "4d22501af6ca3738",
        "site": "wiki.ralfbarkow.ch",
        "slug": "minilatex",
        "title": "MiniLatex",
        "text": "a Parser-Renderer for a Subset of [[LaTeX]] [https://jxxcarlson.github.io/pdf/minilatex-acm.pdf pdf], [https://github.com/jxxcarlson/miniLaTeX#minilatex github]"
      },
      "date": 1694603249320
    },
    {
      "type": "add",
      "id": "d9e76e54b216027c",
      "item": {
        "type": "paragraph",
        "id": "d9e76e54b216027c",
        "text": "How it works"
      },
      "after": "4dd4cf277845eb7c",
      "date": 1694603289669
    },
    {
      "type": "add",
      "id": "51712adc830c29e9",
      "item": {
        "type": "paragraph",
        "id": "51712adc830c29e9",
        "text": "If you’ve worked with JSON in Elm, the pattern will be familiar. We build up a Parser a type out of smaller composable parsers. This parser is a value that describes the parser rules. To actually perform the parsing, we call Parser.run parser str. "
      },
      "after": "d9e76e54b216027c",
      "date": 1694603298487
    },
    {
      "type": "edit",
      "id": "51712adc830c29e9",
      "item": {
        "type": "paragraph",
        "id": "51712adc830c29e9",
        "text": "If you have worked with JSON in Elm, the pattern will look familiar. We build a parser, a type that consists of smaller composable parsers. This parser is a value that describes the parsing rules. To actually perform the parsing, we call parser.run parser str. "
      },
      "date": 1694603364741
    },
    {
      "type": "edit",
      "id": "51712adc830c29e9",
      "item": {
        "type": "paragraph",
        "id": "51712adc830c29e9",
        "text": "If you have worked with JSON in Elm, the pattern will look familiar. We build a parser, a type that consists of smaller composable parsers. This parser is a value that describes the parsing rules. To actually perform the parsing, we call Parser.run parser str. "
      },
      "date": 1694603462726
    },
    {
      "type": "edit",
      "id": "51712adc830c29e9",
      "item": {
        "type": "paragraph",
        "id": "51712adc830c29e9",
        "text": "If you have worked with JSON in Elm, the pattern will look familiar. We build a parser, a type that consists of smaller composable parsers. This parser is a value that describes the parsing rules. To actually perform the parsing, we call Parser.run parser str."
      },
      "date": 1694603508533
    },
    {
      "type": "add",
      "id": "62092fe1c81c1102",
      "item": {
        "type": "paragraph",
        "id": "62092fe1c81c1102",
        "text": "Parser.run then applies the appropriate parsers to the input string one by one, consuming zero or more characters at each step. "
      },
      "after": "51712adc830c29e9",
      "date": 1694603509286
    },
    {
      "id": "4d22501af6ca3738",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102"
      ],
      "date": 1694609155154
    },
    {
      "item": {
        "type": "factory",
        "id": "d7e1b4a20604ac9d"
      },
      "id": "d7e1b4a20604ac9d",
      "type": "add",
      "after": "62092fe1c81c1102",
      "date": 1694609157521
    },
    {
      "type": "edit",
      "id": "d7e1b4a20604ac9d",
      "item": {
        "type": "paragraph",
        "id": "d7e1b4a20604ac9d",
        "text": "How about adding a parser (or more parsers) which gobble the paragraph.text up regardless of whether a wiki link was found?"
      },
      "date": 1694609159482
    },
    {
      "item": {
        "type": "factory",
        "id": "46472932e499c0bc"
      },
      "id": "46472932e499c0bc",
      "type": "add",
      "after": "d7e1b4a20604ac9d",
      "date": 1694609168108
    },
    {
      "type": "edit",
      "id": "46472932e499c0bc",
      "item": {
        "type": "paragraph",
        "id": "46472932e499c0bc",
        "text": "Certainly, if you want to ensure that the parser consumes the entire paragraph text, regardless of whether a wiki link is found, you can achieve this by adding a parser that captures the remaining text.\n\nHere's an updated version of the code:"
      },
      "date": 1694609169907
    },
    {
      "item": {
        "type": "factory",
        "id": "0d0d0199b53e070d"
      },
      "id": "0d0d0199b53e070d",
      "type": "add",
      "after": "46472932e499c0bc",
      "date": 1694609175429
    },
    {
      "type": "edit",
      "id": "0d0d0199b53e070d",
      "item": {
        "type": "code",
        "id": "0d0d0199b53e070d",
        "text": "-- Define a parser to capture the remaining text in a paragraph\nremainderParser : Parser String\nremainderParser =\n    chompWhile (\\c -> c /= '[')\n\n-- Modify the wikiLink parser to handle multiple occurrences of \"[[\" and \"]]\"\nwikiLink : Parser WikiLink\nwikiLink =\n    succeed WikiLink\n        |. symbol \"[[\"\n        |= (getChompedString <| chompWhile (\\c -> c /= ']'))\n        |. symbol \"]]\"\n\n-- Combine the wikiLink parser and remainderParser\nwikiLinkOrRemainder : Parser (Either WikiLink String)\nwikiLinkOrRemainder =\n    oneOf\n        [ Left <$> wikiLink\n        , Right <$> remainderParser\n        ]\n\n-- Modify the parseWikiLink function to handle either a wikiLink or the remainder of the text\nparseWikiLink : String -> Result (List Parser.DeadEnd) (List (Either WikiLink String))\nparseWikiLink str =\n    Parser.run (zeroOrMore wikiLinkOrRemainder) str\n"
      },
      "date": 1694609178653
    },
    {
      "item": {
        "type": "factory",
        "id": "19956a00b5890dc7"
      },
      "id": "19956a00b5890dc7",
      "type": "add",
      "after": "0d0d0199b53e070d",
      "date": 1694609215779
    },
    {
      "type": "edit",
      "id": "19956a00b5890dc7",
      "item": {
        "type": "paragraph",
        "id": "19956a00b5890dc7",
        "text": "In this updated code:\n\nWe introduce a remainderParser which will consume characters until it encounters a [.\nWe create a new parser wikiLinkOrRemainder using oneOf to handle either a wiki link or the remaining text.\nThe parseWikiLink function now returns a list of Either WikiLink String, where Left represents a wiki link, and Right represents the remaining text.\nThis approach ensures that even if a wiki link is not found, the parser will still consume the entire paragraph text. If a wiki link is found, it will be captured, but if not, the remaining text will be captured instead."
      },
      "date": 1694609218735
    },
    {
      "item": {
        "type": "factory",
        "id": "aff9891c5498e26b"
      },
      "id": "aff9891c5498e26b",
      "type": "add",
      "after": "19956a00b5890dc7",
      "date": 1694609230327
    },
    {
      "type": "edit",
      "id": "46472932e499c0bc",
      "item": {
        "type": "paragraph",
        "id": "46472932e499c0bc",
        "text": "Certainly, if you want to ensure that the parser consumes the entire paragraph text, regardless of whether a wiki link is found, you can achieve this by adding a parser that captures the remaining text.\n\nHere's an updated version of the code: (ChatGPT Version vom 3. August)"
      },
      "date": 1694609237668
    },
    {
      "type": "edit",
      "id": "46472932e499c0bc",
      "item": {
        "type": "paragraph",
        "id": "46472932e499c0bc",
        "text": "Certainly, if you want to ensure that the parser consumes the entire paragraph text, regardless of whether a wiki link is found, you can achieve this by adding a parser that captures the remaining text.\n\nHere's an updated version of the code: (ChatGPT version from August 3)"
      },
      "date": 1694609270990
    },
    {
      "type": "edit",
      "id": "19956a00b5890dc7",
      "item": {
        "type": "paragraph",
        "id": "19956a00b5890dc7",
        "text": "In this updated code:\n\n1. We introduce a remainderParser which will consume characters until it encounters a [.\nWe create a new parser wikiLinkOrRemainder using oneOf to handle either a wiki link or the remaining text.\nThe parseWikiLink function now returns a list of Either WikiLink String, where Left represents a wiki link, and Right represents the remaining text.\nThis approach ensures that even if a wiki link is not found, the parser will still consume the entire paragraph text. If a wiki link is found, it will be captured, but if not, the remaining text will be captured instead."
      },
      "date": 1694609332160
    },
    {
      "type": "edit",
      "id": "19956a00b5890dc7",
      "item": {
        "type": "paragraph",
        "id": "19956a00b5890dc7",
        "text": "In this updated code:\n\n1. We introduce a remainderParser which will consume characters until it encounters a [."
      },
      "date": 1694609351588
    },
    {
      "type": "add",
      "id": "d24c1356166dd96f",
      "item": {
        "type": "paragraph",
        "id": "d24c1356166dd96f",
        "text": "2. We create a new parser wikiLinkOrRemainder using oneOf to handle either a wiki link or the remaining text."
      },
      "after": "19956a00b5890dc7",
      "date": 1694609355507
    },
    {
      "type": "add",
      "id": "c25808f652e38816",
      "item": {
        "type": "paragraph",
        "id": "c25808f652e38816",
        "text": "3. The parseWikiLink function now returns a list of Either WikiLink String, where Left represents a wiki link, and Right represents the remaining text.\nThis approach ensures that even if a wiki link is not found, the parser will still consume the entire paragraph text. If a wiki link is found, it will be captured, but if not, the remaining text will be captured instead."
      },
      "after": "d24c1356166dd96f",
      "date": 1694609356351
    },
    {
      "type": "edit",
      "id": "c25808f652e38816",
      "item": {
        "type": "paragraph",
        "id": "c25808f652e38816",
        "text": "3. The parseWikiLink function now returns a list of Either WikiLink String, where Left represents a wiki link, and Right represents the remaining text."
      },
      "date": 1694609361591
    },
    {
      "type": "add",
      "id": "855d6f4b12aa4985",
      "item": {
        "type": "paragraph",
        "id": "855d6f4b12aa4985",
        "text": "This approach ensures that even if a wiki link is not found, the parser will still consume the entire paragraph text. If a wiki link is found, it will be captured, but if not, the remaining text will be captured instead."
      },
      "after": "c25808f652e38816",
      "date": 1694609362083
    },
    {
      "type": "edit",
      "id": "aff9891c5498e26b",
      "item": {
        "type": "pagefold",
        "id": "aff9891c5498e26b",
        "text": "oneOf"
      },
      "date": 1694609401258
    },
    {
      "item": {
        "type": "factory",
        "id": "6b94109a7b936a59"
      },
      "id": "6b94109a7b936a59",
      "type": "add",
      "after": "aff9891c5498e26b",
      "date": 1694609478974
    },
    {
      "type": "edit",
      "id": "6b94109a7b936a59",
      "item": {
        "type": "paragraph",
        "id": "6b94109a7b936a59",
        "text": "See section 4 (Parser) of [[MiniLaTeX]]"
      },
      "date": 1694609497040
    },
    {
      "type": "edit",
      "id": "6b94109a7b936a59",
      "item": {
        "type": "paragraph",
        "id": "6b94109a7b936a59",
        "text": "See section 4 (Parser) of [[MiniLatex]]"
      },
      "date": 1694609513528
    },
    {
      "type": "edit",
      "id": "6b94109a7b936a59",
      "item": {
        "type": "paragraph",
        "id": "6b94109a7b936a59",
        "text": "See section 4 (Parser) of the [[MiniLatex]] paper."
      },
      "date": 1694609529044
    },
    {
      "type": "add",
      "id": "aeaa4cd79306b9bc",
      "item": {
        "type": "paragraph",
        "id": "aeaa4cd79306b9bc",
        "text": "In this section, we discuss the combinators in the [[elm/parser]] library. Notable are the pipeline combinators (|.) and (|=) discussed below."
      },
      "after": "6b94109a7b936a59",
      "date": 1694609571310
    },
    {
      "type": "edit",
      "id": "d24c1356166dd96f",
      "item": {
        "type": "paragraph",
        "id": "d24c1356166dd96f",
        "text": "2. We create a new parser wikiLinkOrRemainder using [[oneOf]] to handle either a wiki link or the remaining text."
      },
      "date": 1694609699881
    },
    {
      "type": "add",
      "id": "c2ce48f9ecece468",
      "item": {
        "type": "paragraph",
        "id": "c2ce48f9ecece468",
        "text": "Evan Czaplicki. 2018. elm/parser. https://package.elm-lang.org/packages/elm/parser/latest/"
      },
      "after": "aeaa4cd79306b9bc",
      "date": 1694609762730
    },
    {
      "item": {
        "type": "factory",
        "id": "a0578c382c400dea"
      },
      "id": "a0578c382c400dea",
      "type": "add",
      "after": "c2ce48f9ecece468",
      "date": 1694609774139
    },
    {
      "type": "edit",
      "id": "a0578c382c400dea",
      "item": {
        "type": "reference",
        "id": "a0578c382c400dea",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-parser",
        "title": "Elm Parser",
        "text": "Regular expressions are quite confusing and difficult to use. This library provides a coherent alternative that handles more cases and produces clearer code. [https://github.com/elm/parser#parser github], [https://package.elm-lang.org/packages/elm/parser/latest page]"
      },
      "date": 1694609777410
    },
    {
      "id": "a0578c382c400dea",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c2ce48f9ecece468"
      ],
      "date": 1694609789837
    },
    {
      "type": "remove",
      "id": "c2ce48f9ecece468",
      "date": 1694609794985
    },
    {
      "type": "edit",
      "id": "aeaa4cd79306b9bc",
      "item": {
        "type": "paragraph",
        "id": "aeaa4cd79306b9bc",
        "text": "In this section, we discuss the combinators in the [[elm/parser]] library."
      },
      "date": 1694609802823
    },
    {
      "type": "add",
      "id": "c84952c6d2b75ce0",
      "item": {
        "type": "paragraph",
        "id": "c84952c6d2b75ce0",
        "text": "Notable are the pipeline combinators (|.) and (|=) discussed below."
      },
      "after": "aeaa4cd79306b9bc",
      "date": 1694609803807
    },
    {
      "id": "a0578c382c400dea",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0"
      ],
      "date": 1694609805673
    },
    {
      "item": {
        "type": "calculator",
        "id": "f0a93be1d7a20793",
        "text": "",
        "data": []
      },
      "id": "f0a93be1d7a20793",
      "type": "add",
      "after": "c84952c6d2b75ce0",
      "date": 1694610119143
    },
    {
      "type": "edit",
      "id": "f0a93be1d7a20793",
      "item": {
        "type": "calculator",
        "id": "f0a93be1d7a20793",
        "text": "",
        "data": []
      },
      "date": 1694610121277
    },
    {
      "item": {
        "type": "paragraph",
        "id": "307f7a5fcd02063b",
        "text": "The parser is built from elementary parsers that recognize fixed strings, e.g., \\begin{theorem}, whitespace, words, etc. Words are defined as strings not containing whitespace and not beginning with a reserved character such as a backslash or a dollar sign."
      },
      "id": "307f7a5fcd02063b",
      "type": "add",
      "after": "f0a93be1d7a20793",
      "date": 1694610124059
    },
    {
      "type": "edit",
      "id": "307f7a5fcd02063b",
      "item": {
        "type": "paragraph",
        "id": "307f7a5fcd02063b",
        "text": "The parser is built from elementary parsers that recognize fixed strings, e.g., \\begin{theorem}, whitespace, words, etc. Words are defined as strings not containing whitespace and not beginning with a reserved character such as a backslash or a dollar sign."
      },
      "date": 1694610127963
    },
    {
      "id": "307f7a5fcd02063b",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "f0a93be1d7a20793"
      ],
      "date": 1694610129606
    },
    {
      "type": "edit",
      "id": "f0a93be1d7a20793",
      "item": {
        "type": "calculator",
        "id": "f0a93be1d7a20793",
        "text": "",
        "data": []
      },
      "date": 1694610136502
    },
    {
      "type": "remove",
      "id": "f0a93be1d7a20793",
      "date": 1694610161162
    },
    {
      "item": {
        "type": "code",
        "id": "6a80f56ffa73f45b",
        "text": "succeed : a → Parser a"
      },
      "id": "6a80f56ffa73f45b",
      "type": "add",
      "after": "307f7a5fcd02063b",
      "date": 1694610162589
    },
    {
      "type": "edit",
      "id": "6a80f56ffa73f45b",
      "item": {
        "type": "code",
        "id": "6a80f56ffa73f45b",
        "text": "succeed : a → Parser a"
      },
      "date": 1694610164544
    },
    {
      "item": {
        "type": "paragraph",
        "id": "8c367fcb8880577b",
        "text": "Note: Compare this with our parser for wiki links (reserved characters are double square brackets):"
      },
      "id": "8c367fcb8880577b",
      "type": "add",
      "after": "6a80f56ffa73f45b",
      "date": 1694610192283
    },
    {
      "item": {
        "type": "code",
        "id": "f8534cb213076b33",
        "text": "link : Parser WikiLink\nlink =\n    succeed WikiLink\n        |. symbol \"[[\"\n        |= (getChompedString <| chompWhile (\\c -> c /= ']'))\n        |. symbol \"]]\"\n\n"
      },
      "id": "f8534cb213076b33",
      "type": "add",
      "after": "8c367fcb8880577b",
      "date": 1694610196233
    },
    {
      "type": "edit",
      "id": "f8534cb213076b33",
      "item": {
        "type": "code",
        "id": "f8534cb213076b33",
        "text": "link : Parser WikiLink\nlink =\n    succeed WikiLink\n        |. symbol \"[[\"\n        |= (getChompedString <| chompWhile (\\c -> c /= ']'))\n        |. symbol \"]]\"\n\n"
      },
      "date": 1694610198865
    },
    {
      "type": "edit",
      "id": "8c367fcb8880577b",
      "item": {
        "type": "paragraph",
        "id": "8c367fcb8880577b",
        "text": "Note: Compare this with our parser for wiki links (reserved characters are double square brackets):"
      },
      "date": 1694610247372
    },
    {
      "type": "add",
      "id": "1bdd3b9a970078d1",
      "item": {
        "type": "paragraph",
        "id": "1bdd3b9a970078d1",
        "text": "which always succeeds and returns a value of type a."
      },
      "after": "307f7a5fcd02063b",
      "date": 1694610292814
    },
    {
      "id": "1bdd3b9a970078d1",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "8c367fcb8880577b",
        "f8534cb213076b33"
      ],
      "date": 1694610294622
    },
    {
      "item": {
        "type": "paragraph",
        "id": "b2c9d2d17f2dfec9",
        "text": "From given parsers one may construct others using combinators. Thus the top level parser is constructed using the oneOf parser function, which takes a list of parsers as input, applies each in turn, returning on the first parser to succeed, otherwise finishing with an error. [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Parser.elm#L232 code]"
      },
      "id": "b2c9d2d17f2dfec9",
      "type": "add",
      "after": "f8534cb213076b33",
      "date": 1694610354194
    },
    {
      "type": "edit",
      "id": "b2c9d2d17f2dfec9",
      "item": {
        "type": "paragraph",
        "id": "b2c9d2d17f2dfec9",
        "text": "From given parsers one may construct others using combinators. Thus the top level parser is constructed using the oneOf parser function, which takes a list of parsers as input, applies each in turn, returning on the first parser to succeed, otherwise finishing with an error. [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Parser.elm#L232 code]"
      },
      "date": 1694610356469
    },
    {
      "type": "edit",
      "id": "8c367fcb8880577b",
      "item": {
        "type": "paragraph",
        "id": "8c367fcb8880577b",
        "text": "Note: Compare this with our parser for wiki links (reserved characters are double square brackets):"
      },
      "date": 1694610363264
    },
    {
      "type": "add",
      "id": "af95baffbd005fbf",
      "item": {
        "type": "paragraph",
        "id": "af95baffbd005fbf",
        "text": ""
      },
      "after": "b2c9d2d17f2dfec9",
      "date": 1694610519547
    },
    {
      "item": {
        "type": "code",
        "id": "ac7e278cd1ad230b",
        "text": "{-| Production: $ LatexExpression &\\Rightarrow Words\\ |\\ Comment\\ |\\ IMath\\ |\\ DMath\\ |\\ Macro\\ |\\ Env $\n-}\nlatexExpression : Parser LatexExpression\nlatexExpression =\n    oneOf\n        [ texComment\n        , lazy (\\_ -> environment)\n        , displayMathDollar\n        , displayMathBrackets\n        , inlineMath ws\n        , macro ws\n        , smacro\n        , words\n        ]\n\n"
      },
      "id": "ac7e278cd1ad230b",
      "type": "add",
      "after": "af95baffbd005fbf",
      "date": 1694610574788
    },
    {
      "type": "edit",
      "id": "ac7e278cd1ad230b",
      "item": {
        "type": "code",
        "id": "ac7e278cd1ad230b",
        "text": "{-| Production: $ LatexExpression &\\Rightarrow Words\\ |\\ Comment\\ |\\ IMath\\ |\\ DMath\\ |\\ Macro\\ |\\ Env $\n-}\nlatexExpression : Parser LatexExpression\nlatexExpression =\n    oneOf\n        [ texComment\n        , lazy (\\_ -> environment)\n        , displayMathDollar\n        , displayMathBrackets\n        , inlineMath ws\n        , macro ws\n        , smacro\n        , words\n        ]\n\n"
      },
      "date": 1694610576825
    },
    {
      "type": "remove",
      "id": "af95baffbd005fbf",
      "date": 1694610580765
    },
    {
      "type": "edit",
      "id": "b2c9d2d17f2dfec9",
      "item": {
        "type": "paragraph",
        "id": "b2c9d2d17f2dfec9",
        "text": "From given parsers one may construct others using combinators. Thus the top level parser is constructed using the oneOf parser function, which takes a list of parsers as input, applies each in turn, returning on the first parser to succeed, otherwise finishing with an error. [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Parser.elm#L232 code]"
      },
      "date": 1694610582767
    },
    {
      "item": {
        "type": "paragraph",
        "id": "8a65696cb725b268",
        "text": "Notice the close correspondence between the production for the nonterminal symbol LatexExpr and the construction of the parser: reading the right-hand side of the first is like reading the argument to oneOf from top to bottom. [https://youtu.be/dmDA7iziSgs?t=1172 video]"
      },
      "id": "8a65696cb725b268",
      "type": "add",
      "after": "ac7e278cd1ad230b",
      "date": 1694610674020
    },
    {
      "type": "edit",
      "id": "8a65696cb725b268",
      "item": {
        "type": "paragraph",
        "id": "8a65696cb725b268",
        "text": "Notice the close correspondence between the production for the nonterminal symbol LatexExpr and the construction of the parser: reading the right-hand side of the first is like reading the argument to oneOf from top to bottom. [https://youtu.be/dmDA7iziSgs?t=1172 video]"
      },
      "date": 1694610681590
    },
    {
      "item": {
        "type": "code",
        "id": "c336ddc9b2c54740",
        "text": "{- WORDS AND TEXT -}\n\n\nwords : Parser LatexExpression\nwords =\n    inContext \"words\" <|\n        (succeed identity\n            |= repeat oneOrMore word\n            |> map (String.join \" \")\n            |> map LXString\n        )\n\n\n{-| Like `words`, but after a word is recognized spaces, not spaces + newlines are consumed\n-}\nspecialWords : Parser LatexExpression\nspecialWords =\n    inContext \"specialWords\" <|\n        (succeed identity\n            |= repeat oneOrMore specialWord\n            |> map (String.join \" \")\n            |> map LXString\n        )\n\n"
      },
      "id": "c336ddc9b2c54740",
      "type": "add",
      "after": "8a65696cb725b268",
      "date": 1694610716489
    },
    {
      "type": "edit",
      "id": "c336ddc9b2c54740",
      "item": {
        "type": "code",
        "id": "c336ddc9b2c54740",
        "text": "{- WORDS AND TEXT -}\n\n\nwords : Parser LatexExpression\nwords =\n    inContext \"words\" <|\n        (succeed identity\n            |= repeat oneOrMore word\n            |> map (String.join \" \")\n            |> map LXString\n        )\n\n\n{-| Like `words`, but after a word is recognized spaces, not spaces + newlines are consumed\n-}\nspecialWords : Parser LatexExpression\nspecialWords =\n    inContext \"specialWords\" <|\n        (succeed identity\n            |= repeat oneOrMore specialWord\n            |> map (String.join \" \")\n            |> map LXString\n        )\n\n"
      },
      "date": 1694610718782
    },
    {
      "type": "edit",
      "id": "8a65696cb725b268",
      "item": {
        "type": "paragraph",
        "id": "8a65696cb725b268",
        "text": "Notice the close correspondence between the production for the nonterminal symbol LatexExpr and the construction of the parser: reading the right-hand side of the first is like reading the argument to oneOf from top to bottom. [https://youtu.be/dmDA7iziSgs?t=1172 video]"
      },
      "date": 1694610732015
    },
    {
      "type": "edit",
      "id": "8a65696cb725b268",
      "item": {
        "type": "paragraph",
        "id": "8a65696cb725b268",
        "text": "Notice the close correspondence between the production for the nonterminal symbol LatexExpr and the construction of the parser: reading the right-hand side of the first is like reading the argument to oneOf from top to bottom. [https://youtu.be/dmDA7iziSgs?t=1172 video]"
      },
      "date": 1694610738624
    },
    {
      "type": "edit",
      "id": "8a65696cb725b268",
      "item": {
        "type": "paragraph",
        "id": "8a65696cb725b268",
        "text": "Notice the close correspondence between the production for the nonterminal symbol LatexExpr and the construction of the parser: reading the right-hand side of the first is like reading the argument to oneOf from top to bottom. [https://youtu.be/dmDA7iziSgs?t=1172 video]"
      },
      "date": 1694610745821
    },
    {
      "type": "edit",
      "id": "8a65696cb725b268",
      "item": {
        "type": "paragraph",
        "id": "8a65696cb725b268",
        "text": "Notice the close correspondence between the production for the nonterminal symbol LatexExpr and the construction of the parser: reading the right-hand side of the first is like reading the argument to oneOf from top to bottom. [https://youtu.be/dmDA7iziSgs?t=1172 video]"
      },
      "date": 1694610834621
    },
    {
      "type": "add",
      "id": "f562a869609f5ac5",
      "item": {
        "type": "paragraph",
        "id": "f562a869609f5ac5",
        "text": "See words in Parser.elm: [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Parser.elm#L69 code]"
      },
      "after": "8a65696cb725b268",
      "date": 1694610834977
    },
    {
      "item": {
        "type": "image",
        "id": "7bf1e1ddaa093e47",
        "text": "Let's build a parser ! [https://youtu.be/dmDA7iziSgs?t=1067 video]",
        "size": "wide",
        "width": 430,
        "height": 242,
        "url": "/assets/plugins/image/541d9f3eb7d99a7106db306080fe7838.jpg"
      },
      "id": "7bf1e1ddaa093e47",
      "type": "add",
      "after": "c336ddc9b2c54740",
      "date": 1694611046980
    },
    {
      "type": "edit",
      "id": "7bf1e1ddaa093e47",
      "item": {
        "type": "image",
        "id": "7bf1e1ddaa093e47",
        "text": "Let's build a parser ! [https://youtu.be/dmDA7iziSgs?t=1067 video]",
        "size": "wide",
        "width": 430,
        "height": 242,
        "url": "/assets/plugins/image/541d9f3eb7d99a7106db306080fe7838.jpg"
      },
      "date": 1694611090723
    },
    {
      "type": "edit",
      "id": "7bf1e1ddaa093e47",
      "item": {
        "type": "image",
        "id": "7bf1e1ddaa093e47",
        "text": "Let's build a parser ! [https://youtu.be/dmDA7iziSgs?t=1067 video]",
        "size": "wide",
        "width": 430,
        "height": 242,
        "url": "/assets/plugins/image/541d9f3eb7d99a7106db306080fe7838.jpg"
      },
      "date": 1694611116441
    },
    {
      "item": {
        "type": "video",
        "id": "4dabc23f1106aa83",
        "text": ""
      },
      "id": "4dabc23f1106aa83",
      "type": "add",
      "after": "7bf1e1ddaa093e47",
      "date": 1694611129088
    },
    {
      "type": "edit",
      "id": "4dabc23f1106aa83",
      "item": {
        "type": "video",
        "id": "4dabc23f1106aa83",
        "text": ""
      },
      "date": 1694611143113
    },
    {
      "type": "edit",
      "id": "4dabc23f1106aa83",
      "item": {
        "type": "video",
        "id": "4dabc23f1106aa83",
        "text": ""
      },
      "date": 1694611146741
    },
    {
      "type": "edit",
      "id": "4dabc23f1106aa83",
      "item": {
        "type": "video",
        "id": "4dabc23f1106aa83",
        "text": ""
      },
      "date": 1694611154849
    },
    {
      "type": "edit",
      "id": "4dabc23f1106aa83",
      "item": {
        "type": "video",
        "id": "4dabc23f1106aa83",
        "text": ""
      },
      "date": 1694611160222
    },
    {
      "type": "edit",
      "id": "4dabc23f1106aa83",
      "item": {
        "type": "video",
        "id": "4dabc23f1106aa83",
        "text": ""
      },
      "date": 1694611165592
    },
    {
      "type": "edit",
      "id": "4dabc23f1106aa83",
      "item": {
        "type": "video",
        "id": "4dabc23f1106aa83",
        "text": ""
      },
      "date": 1694611170657
    },
    {
      "type": "edit",
      "id": "4dabc23f1106aa83",
      "item": {
        "type": "video",
        "id": "4dabc23f1106aa83",
        "text": ""
      },
      "date": 1694611178515
    },
    {
      "type": "remove",
      "id": "4dabc23f1106aa83",
      "date": 1694611181524
    },
    {
      "id": "7bf1e1ddaa093e47",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "8c367fcb8880577b",
        "7bf1e1ddaa093e47",
        "f8534cb213076b33",
        "b2c9d2d17f2dfec9",
        "ac7e278cd1ad230b",
        "8a65696cb725b268",
        "f562a869609f5ac5",
        "c336ddc9b2c54740"
      ],
      "date": 1694611226142
    },
    {
      "id": "8c367fcb8880577b",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "7bf1e1ddaa093e47",
        "8c367fcb8880577b",
        "f8534cb213076b33",
        "b2c9d2d17f2dfec9",
        "ac7e278cd1ad230b",
        "8a65696cb725b268",
        "f562a869609f5ac5",
        "c336ddc9b2c54740"
      ],
      "date": 1694611229287
    },
    {
      "item": {
        "type": "reference",
        "id": "be2e060a4cc61676",
        "site": "wiki.ralfbarkow.ch",
        "slug": "gobble-it-up",
        "title": "Gobble It Up",
        "text": "⇒ [[Elm Parser]] ⇒ [[Parser Pipelines]]"
      },
      "id": "be2e060a4cc61676",
      "type": "add",
      "after": "c336ddc9b2c54740",
      "date": 1694611336233
    },
    {
      "id": "be2e060a4cc61676",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "7bf1e1ddaa093e47",
        "8c367fcb8880577b",
        "f8534cb213076b33",
        "be2e060a4cc61676",
        "b2c9d2d17f2dfec9",
        "ac7e278cd1ad230b",
        "8a65696cb725b268",
        "f562a869609f5ac5",
        "c336ddc9b2c54740"
      ],
      "date": 1694611344446
    },
    {
      "type": "edit",
      "id": "be2e060a4cc61676",
      "item": {
        "type": "reference",
        "id": "be2e060a4cc61676",
        "site": "wiki.ralfbarkow.ch",
        "slug": "gobble-it-up",
        "title": "Gobble It Up",
        "text": "⇒ [[Elm Parser]] ⇒ [[Parser Pipelines]]"
      },
      "date": 1694611347054
    },
    {
      "type": "edit",
      "id": "8a65696cb725b268",
      "item": {
        "type": "paragraph",
        "id": "8a65696cb725b268",
        "text": "Notice the close correspondence between the production for the nonterminal symbol LatexExpr and the construction of the parser: reading the right-hand side of the first is like reading the argument to oneOf from top to bottom. [https://youtu.be/dmDA7iziSgs?t=1172 video]"
      },
      "date": 1694611427419
    },
    {
      "type": "edit",
      "id": "8a65696cb725b268",
      "item": {
        "type": "paragraph",
        "id": "8a65696cb725b268",
        "text": "Notice the close correspondence between the production for the nonterminal symbol LatexExpr and the construction of the parser: reading the right-hand side of the first is like reading the argument to oneOf from top to bottom. [https://youtu.be/dmDA7iziSgs?t=1172 video]"
      },
      "date": 1694611473003
    },
    {
      "type": "edit",
      "id": "8a65696cb725b268",
      "item": {
        "type": "paragraph",
        "id": "8a65696cb725b268",
        "text": "Notice the close correspondence between the production for the nonterminal symbol LatexExpr and the construction of the parser: reading the right-hand side of the first is like reading the argument to oneOf from top to bottom. [https://youtu.be/dmDA7iziSgs?t=1172 video]"
      },
      "date": 1694611486729
    },
    {
      "type": "edit",
      "id": "8a65696cb725b268",
      "item": {
        "type": "paragraph",
        "id": "8a65696cb725b268",
        "text": "Notice the close correspondence between the production for the nonterminal symbol LatexExpr and the construction of the parser: reading the right-hand side of the first is like reading the argument to oneOf from top to bottom. [https://youtu.be/dmDA7iziSgs?t=1172 video]"
      },
      "date": 1694611499767
    },
    {
      "type": "add",
      "id": "afe4313fd08184de",
      "item": {
        "type": "markdown",
        "id": "afe4313fd08184de",
        "text": "> Reading across the right-hand side of the production is like reading down the code for the parser. So there there's an intimate relationship between these production rules and parser combinators."
      },
      "after": "8a65696cb725b268",
      "date": 1694611636117
    },
    {
      "type": "edit",
      "id": "afe4313fd08184de",
      "item": {
        "type": "markdown",
        "id": "afe4313fd08184de",
        "text": "> Reading across the right-hand side of the production is like reading down the code for the parser. So there there's an intimate relationship between these production rules and parser combinators."
      },
      "date": 1694611637043
    },
    {
      "type": "edit",
      "id": "855d6f4b12aa4985",
      "item": {
        "type": "paragraph",
        "id": "855d6f4b12aa4985",
        "text": "This approach ensures that even if a wiki link is not found, the parser will still consume the entire paragraph text. If a wiki link is found, it will be captured, but if not, the remaining text will be captured instead. (ChatGPT version from August 3)"
      },
      "date": 1694611955443
    },
    {
      "type": "edit",
      "id": "8c367fcb8880577b",
      "item": {
        "type": "paragraph",
        "id": "8c367fcb8880577b",
        "text": "Note: Compare this with our parser for wiki links (reserved characters are double square brackets):"
      },
      "date": 1694612203213
    },
    {
      "type": "edit",
      "id": "8c367fcb8880577b",
      "item": {
        "type": "paragraph",
        "id": "8c367fcb8880577b",
        "text": "Note: Compare this with our parser for wiki links (reserved characters are double square brackets):"
      },
      "date": 1694612258576
    },
    {
      "type": "edit",
      "id": "8c367fcb8880577b",
      "item": {
        "type": "paragraph",
        "id": "8c367fcb8880577b",
        "text": "Note: Compare this with our parser for wiki links (reserved characters are double square brackets):"
      },
      "date": 1694612301669
    },
    {
      "type": "edit",
      "id": "307f7a5fcd02063b",
      "item": {
        "type": "paragraph",
        "id": "307f7a5fcd02063b",
        "text": "The parser is built from elementary parsers that recognize fixed strings, e.g., \\begin{theorem}, whitespace, words, etc. Words are defined as strings not containing whitespace and not beginning with a reserved character such as a backslash or a dollar sign."
      },
      "date": 1694612475380
    },
    {
      "type": "add",
      "id": "ba055e1561f9f23d",
      "item": {
        "type": "paragraph",
        "id": "ba055e1561f9f23d",
        "text": "There are also special parsers such as"
      },
      "after": "307f7a5fcd02063b",
      "date": 1694612476317
    },
    {
      "item": {
        "type": "image",
        "id": "6cbf2a9b113eb15c",
        "text": "Expecting Symbol",
        "size": "wide",
        "width": 430,
        "height": 350,
        "url": "/assets/plugins/image/317d9a41cd2182d21908a8a0d7fbf702.jpg"
      },
      "id": "6cbf2a9b113eb15c",
      "type": "add",
      "after": "c336ddc9b2c54740",
      "date": 1694613833638
    },
    {
      "id": "6cbf2a9b113eb15c",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "ba055e1561f9f23d",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "7bf1e1ddaa093e47",
        "8c367fcb8880577b",
        "f8534cb213076b33",
        "6cbf2a9b113eb15c",
        "be2e060a4cc61676",
        "b2c9d2d17f2dfec9",
        "ac7e278cd1ad230b",
        "8a65696cb725b268",
        "afe4313fd08184de",
        "f562a869609f5ac5",
        "c336ddc9b2c54740"
      ],
      "date": 1694613839641
    },
    {
      "type": "edit",
      "id": "6cbf2a9b113eb15c",
      "item": {
        "type": "image",
        "id": "6cbf2a9b113eb15c",
        "text": "Expecting Symbol",
        "size": "wide",
        "width": 430,
        "height": 350,
        "url": "/assets/plugins/image/317d9a41cd2182d21908a8a0d7fbf702.jpg"
      },
      "date": 1694613871729
    },
    {
      "type": "edit",
      "id": "6cbf2a9b113eb15c",
      "item": {
        "type": "image",
        "id": "6cbf2a9b113eb15c",
        "text": "Expecting Symbol",
        "size": "wide",
        "width": 430,
        "height": 350,
        "url": "/assets/plugins/image/317d9a41cd2182d21908a8a0d7fbf702.jpg"
      },
      "date": 1694613880380
    },
    {
      "type": "edit",
      "id": "f8534cb213076b33",
      "item": {
        "type": "code",
        "id": "f8534cb213076b33",
        "text": "link : Parser WikiLink\nlink =\n    succeed WikiLink\n        |. symbol \"[[\"\n        |= (getChompedString <| chompWhile (\\c -> c /= ']'))\n        |. symbol \"]]\"\n\n"
      },
      "date": 1694613899411
    },
    {
      "item": {
        "type": "paragraph",
        "id": "46c760f3676d7e84",
        "text": "and in ParserHelpers.elm: [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/ParserHelpers.elm#L62-L83 code]"
      },
      "id": "46c760f3676d7e84",
      "type": "add",
      "after": "c336ddc9b2c54740",
      "date": 1694614240914
    },
    {
      "type": "edit",
      "id": "46c760f3676d7e84",
      "item": {
        "type": "paragraph",
        "id": "46c760f3676d7e84",
        "text": "and in ParserHelpers.elm: [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/ParserHelpers.elm#L62-L83 code]"
      },
      "date": 1694614245575
    },
    {
      "type": "edit",
      "id": "46c760f3676d7e84",
      "item": {
        "type": "paragraph",
        "id": "46c760f3676d7e84",
        "text": "and in ParserHelpers.elm: [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/ParserHelpers.elm#L62-L83 code]"
      },
      "date": 1694614255131
    },
    {
      "type": "add",
      "id": "b10c047121a0c265",
      "item": {
        "type": "paragraph",
        "id": "b10c047121a0c265",
        "text": ""
      },
      "after": "46c760f3676d7e84",
      "date": 1694614258651
    },
    {
      "item": {
        "type": "code",
        "id": "917a3379166f5027",
        "text": "word : Parser String\nword =\n    (inContext \"word\" <|\n        succeed identity\n            |. spaces\n            |= keep oneOrMore notSpecialCharacter\n            |. ws\n    )\n        -- |> map transformWords\n\n\n{-| Like `word`, but after a word is recognized spaces, not spaces + newlines are consumed\n-}\nspecialWord : Parser String\nspecialWord =\n    inContext \"specialWord\" <|\n        succeed identity\n            |. spaces\n            |= keep oneOrMore notSpecialTableOrMacroCharacter\n            |. spaces\n\n"
      },
      "id": "917a3379166f5027",
      "type": "add",
      "after": "b10c047121a0c265",
      "date": 1694614275902
    },
    {
      "type": "edit",
      "id": "917a3379166f5027",
      "item": {
        "type": "code",
        "id": "917a3379166f5027",
        "text": "word : Parser String\nword =\n    (inContext \"word\" <|\n        succeed identity\n            |. spaces\n            |= keep oneOrMore notSpecialCharacter\n            |. ws\n    )\n        -- |> map transformWords\n\n\n{-| Like `word`, but after a word is recognized spaces, not spaces + newlines are consumed\n-}\nspecialWord : Parser String\nspecialWord =\n    inContext \"specialWord\" <|\n        succeed identity\n            |. spaces\n            |= keep oneOrMore notSpecialTableOrMacroCharacter\n            |. spaces\n\n"
      },
      "date": 1694614278003
    },
    {
      "type": "remove",
      "id": "b10c047121a0c265",
      "date": 1694614280997
    },
    {
      "type": "edit",
      "id": "46c760f3676d7e84",
      "item": {
        "type": "paragraph",
        "id": "46c760f3676d7e84",
        "text": "and in ParserHelpers.elm: [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/ParserHelpers.elm#L62-L83 code]"
      },
      "date": 1694614291964
    },
    {
      "type": "edit",
      "id": "46c760f3676d7e84",
      "item": {
        "type": "paragraph",
        "id": "46c760f3676d7e84",
        "text": "and in ParserHelpers.elm: [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/ParserHelpers.elm#L62-L83 code]"
      },
      "date": 1694614295338
    },
    {
      "item": {
        "type": "code",
        "id": "1c9a05321fd03984",
        "text": "notSpecialTableOrMacroCharacter : Char -> Bool\nnotSpecialTableOrMacroCharacter c =\n    not (c == ' ' || c == '\\n' || c == '\\\\' || c == '$' || c == '}' || c == ']' || c == '&')\n"
      },
      "id": "1c9a05321fd03984",
      "type": "add",
      "after": "917a3379166f5027",
      "date": 1694614351894
    },
    {
      "type": "edit",
      "id": "1c9a05321fd03984",
      "item": {
        "type": "code",
        "id": "1c9a05321fd03984",
        "text": "notSpecialTableOrMacroCharacter : Char -> Bool\nnotSpecialTableOrMacroCharacter c =\n    not (c == ' ' || c == '\\n' || c == '\\\\' || c == '$' || c == '}' || c == ']' || c == '&')\n"
      },
      "date": 1694614353846
    },
    {
      "type": "edit",
      "id": "f562a869609f5ac5",
      "item": {
        "type": "paragraph",
        "id": "f562a869609f5ac5",
        "text": "See words in Parser.elm: [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/Parser.elm#L69 code]"
      },
      "date": 1694614443805
    },
    {
      "type": "fork",
      "date": 1694614494734
    },
    {
      "type": "edit",
      "id": "8c367fcb8880577b",
      "item": {
        "type": "paragraph",
        "id": "8c367fcb8880577b",
        "text": "Note: Compare this with our parser for wiki links (reserved characters are doubled square brackets): [https://github.com/dreyeck/blog/blob/ec442f48190d36b91a97fb7c5b44bc1da730d471/elm-pages-starter-express/src/Wiki.elm#L16-L27 code]"
      },
      "date": 1694614969060
    },
    {
      "type": "edit",
      "id": "8c367fcb8880577b",
      "item": {
        "type": "paragraph",
        "id": "8c367fcb8880577b",
        "text": "Note: Compare this with our parser for wiki links (reserved characters are doubled square brackets): [https://github.com/dreyeck/blog/blob/ec442f48190d36b91a97fb7c5b44bc1da730d471/elm-pages-starter-express/src/Wiki.elm#L16-L27 code]"
      },
      "date": 1694615371393
    },
    {
      "type": "edit",
      "id": "8c367fcb8880577b",
      "item": {
        "type": "paragraph",
        "id": "8c367fcb8880577b",
        "text": "Note: Compare this with our parser for wiki links (reserved characters are doubled square brackets): [https://github.com/dreyeck/blog/blob/ec442f48190d36b91a97fb7c5b44bc1da730d471/elm-pages-starter-express/src/Wiki.elm#L16-L27 code]"
      },
      "date": 1694615395816
    },
    {
      "type": "add",
      "id": "68943dee6b991f16",
      "item": {
        "type": "paragraph",
        "id": "68943dee6b991f16",
        "text": "We get an error message (see the following figure) stating that the expectation of finding the doubled square brackets at the beginning of the paragraph was disappointed."
      },
      "after": "8c367fcb8880577b",
      "date": 1694615580264
    },
    {
      "id": "68943dee6b991f16",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "ba055e1561f9f23d",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "7bf1e1ddaa093e47",
        "8c367fcb8880577b",
        "f8534cb213076b33",
        "68943dee6b991f16",
        "6cbf2a9b113eb15c",
        "be2e060a4cc61676",
        "b2c9d2d17f2dfec9",
        "ac7e278cd1ad230b",
        "8a65696cb725b268",
        "afe4313fd08184de",
        "f562a869609f5ac5",
        "c336ddc9b2c54740",
        "46c760f3676d7e84",
        "917a3379166f5027",
        "1c9a05321fd03984"
      ],
      "date": 1694615582715
    },
    {
      "type": "edit",
      "id": "68943dee6b991f16",
      "item": {
        "type": "paragraph",
        "id": "68943dee6b991f16",
        "text": "We get an error message (see the following figure) stating that the expectation of finding the doubled square brackets at the beginning of the paragraph was disappointed."
      },
      "date": 1694615594499
    },
    {
      "type": "edit",
      "id": "68943dee6b991f16",
      "item": {
        "type": "paragraph",
        "id": "68943dee6b991f16",
        "text": "We get an error message (see the following figure) stating that the expectation of finding the doubled square brackets at the beginning of the paragraph was disappointed."
      },
      "date": 1694615608255
    },
    {
      "type": "edit",
      "id": "68943dee6b991f16",
      "item": {
        "type": "paragraph",
        "id": "68943dee6b991f16",
        "text": "We get an error message (see the following figure) stating that the expectation of finding the doubled square brackets at the beginning of the paragraph was disappointed."
      },
      "date": 1694615636478
    },
    {
      "type": "add",
      "id": "e9eb3f3cf85df720",
      "item": {
        "type": "paragraph",
        "id": "e9eb3f3cf85df720",
        "text": "We come back to the proposal to use the parser function oneOf."
      },
      "after": "68943dee6b991f16",
      "date": 1694615714096
    },
    {
      "id": "e9eb3f3cf85df720",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "ba055e1561f9f23d",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "7bf1e1ddaa093e47",
        "8c367fcb8880577b",
        "f8534cb213076b33",
        "68943dee6b991f16",
        "6cbf2a9b113eb15c",
        "e9eb3f3cf85df720",
        "be2e060a4cc61676",
        "b2c9d2d17f2dfec9",
        "ac7e278cd1ad230b",
        "8a65696cb725b268",
        "afe4313fd08184de",
        "f562a869609f5ac5",
        "c336ddc9b2c54740",
        "46c760f3676d7e84",
        "917a3379166f5027",
        "1c9a05321fd03984"
      ],
      "date": 1694615716443
    },
    {
      "id": "be2e060a4cc61676",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "ba055e1561f9f23d",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "7bf1e1ddaa093e47",
        "8c367fcb8880577b",
        "f8534cb213076b33",
        "68943dee6b991f16",
        "6cbf2a9b113eb15c",
        "be2e060a4cc61676",
        "e9eb3f3cf85df720",
        "b2c9d2d17f2dfec9",
        "ac7e278cd1ad230b",
        "8a65696cb725b268",
        "afe4313fd08184de",
        "f562a869609f5ac5",
        "c336ddc9b2c54740",
        "46c760f3676d7e84",
        "917a3379166f5027",
        "1c9a05321fd03984"
      ],
      "date": 1694615719912
    },
    {
      "type": "edit",
      "id": "e9eb3f3cf85df720",
      "item": {
        "type": "paragraph",
        "id": "e9eb3f3cf85df720",
        "text": "We come back to the proposal to use the parser function oneOf."
      },
      "date": 1694615754180
    },
    {
      "type": "edit",
      "id": "e9eb3f3cf85df720",
      "item": {
        "type": "paragraph",
        "id": "e9eb3f3cf85df720",
        "text": "We come back to the proposal to use the parser function oneOf."
      },
      "date": 1694615786664
    },
    {
      "type": "fork",
      "date": 1694615983054
    },
    {
      "type": "edit",
      "id": "6cbf2a9b113eb15c",
      "item": {
        "type": "image",
        "id": "6cbf2a9b113eb15c",
        "text": "Expecting [[Symbol]]",
        "size": "wide",
        "width": 430,
        "height": 350,
        "url": "/assets/plugins/image/317d9a41cd2182d21908a8a0d7fbf702.jpg"
      },
      "date": 1694616489002
    },
    {
      "item": {
        "type": "factory",
        "id": "586002fa37dfb5be"
      },
      "id": "586002fa37dfb5be",
      "type": "add",
      "after": "1c9a05321fd03984",
      "date": 1694625595693
    },
    {
      "type": "edit",
      "id": "586002fa37dfb5be",
      "item": {
        "type": "pagefold",
        "id": "586002fa37dfb5be",
        "text": "~"
      },
      "date": 1694625599676
    },
    {
      "item": {
        "type": "factory",
        "id": "b6b80d584b768b9b"
      },
      "id": "b6b80d584b768b9b",
      "type": "add",
      "after": "586002fa37dfb5be",
      "date": 1694625601459
    },
    {
      "type": "edit",
      "id": "b6b80d584b768b9b",
      "item": {
        "type": "reference",
        "id": "b6b80d584b768b9b",
        "site": "plugins.dojo.fed.wiki",
        "slug": "register-new-site",
        "title": "Register New Site",
        "text": "The owner of this site can create new sites as subdomains of this site. The simplest option is to create the new site with the same owner and login information as used here."
      },
      "date": 1694625604579
    },
    {
      "item": {
        "type": "factory",
        "id": "39465dcebbc3d68a"
      },
      "id": "39465dcebbc3d68a",
      "type": "add",
      "after": "b6b80d584b768b9b",
      "date": 1694625640363
    },
    {
      "type": "edit",
      "id": "39465dcebbc3d68a",
      "item": {
        "type": "reference",
        "id": "39465dcebbc3d68a",
        "site": "ward.dojo.fed.wiki",
        "slug": "custom-registration",
        "title": "Custom Registration",
        "text": "We can disable automatic creation of new sites in a farm by setting server config parameters. Now we explore possible automated workflows that will replace this convenience."
      },
      "date": 1694625647051
    },
    {
      "item": {
        "type": "factory",
        "id": "b5819f0e37211d15"
      },
      "id": "b5819f0e37211d15",
      "type": "add",
      "after": "39465dcebbc3d68a",
      "date": 1694625698456
    },
    {
      "type": "edit",
      "id": "b5819f0e37211d15",
      "item": {
        "type": "roster",
        "id": "b5819f0e37211d15",
        "text": "marctech.dojo.fed.wiki"
      },
      "date": 1694625708873
    },
    {
      "type": "edit",
      "id": "b5819f0e37211d15",
      "item": {
        "type": "roster",
        "id": "b5819f0e37211d15",
        "text": "martech.dojo.fed.wiki"
      },
      "date": 1694625777602
    },
    {
      "item": {
        "type": "factory",
        "id": "8f5bb78e6b0fc44d"
      },
      "id": "8f5bb78e6b0fc44d",
      "type": "add",
      "after": "b5819f0e37211d15",
      "date": 1694625819428
    },
    {
      "id": "8f5bb78e6b0fc44d",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "ba055e1561f9f23d",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "7bf1e1ddaa093e47",
        "8c367fcb8880577b",
        "f8534cb213076b33",
        "68943dee6b991f16",
        "6cbf2a9b113eb15c",
        "be2e060a4cc61676",
        "e9eb3f3cf85df720",
        "b2c9d2d17f2dfec9",
        "ac7e278cd1ad230b",
        "8a65696cb725b268",
        "afe4313fd08184de",
        "f562a869609f5ac5",
        "c336ddc9b2c54740",
        "46c760f3676d7e84",
        "917a3379166f5027",
        "1c9a05321fd03984",
        "586002fa37dfb5be",
        "b6b80d584b768b9b",
        "39465dcebbc3d68a",
        "8f5bb78e6b0fc44d",
        "b5819f0e37211d15"
      ],
      "date": 1694625821615
    },
    {
      "type": "edit",
      "id": "8f5bb78e6b0fc44d",
      "item": {
        "type": "paragraph",
        "id": "8f5bb78e6b0fc44d",
        "text": "martech"
      },
      "date": 1694625823775
    },
    {
      "item": {
        "type": "factory",
        "id": "1637db47255f8863"
      },
      "id": "1637db47255f8863",
      "type": "add",
      "after": "b5819f0e37211d15",
      "date": 1694626924909
    },
    {
      "id": "1637db47255f8863",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "ba055e1561f9f23d",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "7bf1e1ddaa093e47",
        "8c367fcb8880577b",
        "f8534cb213076b33",
        "68943dee6b991f16",
        "6cbf2a9b113eb15c",
        "be2e060a4cc61676",
        "e9eb3f3cf85df720",
        "b2c9d2d17f2dfec9",
        "ac7e278cd1ad230b",
        "8a65696cb725b268",
        "afe4313fd08184de",
        "f562a869609f5ac5",
        "c336ddc9b2c54740",
        "46c760f3676d7e84",
        "917a3379166f5027",
        "1c9a05321fd03984",
        "586002fa37dfb5be",
        "1637db47255f8863",
        "b6b80d584b768b9b",
        "39465dcebbc3d68a",
        "8f5bb78e6b0fc44d",
        "b5819f0e37211d15"
      ],
      "date": 1694626927725
    },
    {
      "type": "edit",
      "id": "1637db47255f8863",
      "item": {
        "type": "reference",
        "id": "1637db47255f8863",
        "site": "ward.dojo.fed.wiki",
        "slug": "ward-cunningham",
        "title": "Ward Cunningham",
        "text": "With this site I am participating in and learning from at least one wiki dojo. I'm happy to join more."
      },
      "date": 1694626932093
    },
    {
      "item": {
        "type": "factory",
        "id": "a94fb03dad478666"
      },
      "id": "a94fb03dad478666",
      "type": "add",
      "after": "b5819f0e37211d15",
      "date": 1694627024560
    },
    {
      "type": "edit",
      "id": "a94fb03dad478666",
      "item": {
        "type": "paragraph",
        "id": "a94fb03dad478666",
        "text": "[http://crazy.fed.wiki/assets/home/index.html crazy]"
      },
      "date": 1694627038616
    },
    {
      "type": "edit",
      "id": "a94fb03dad478666",
      "item": {
        "type": "paragraph",
        "id": "a94fb03dad478666",
        "text": "The Crazy Wiki Place [http://crazy.fed.wiki/assets/home/index.html page]"
      },
      "date": 1694627052080
    },
    {
      "type": "add",
      "id": "df6292869e31c966",
      "item": {
        "type": "paragraph",
        "id": "df6292869e31c966",
        "text": "register.js saved to assets/home folder servered as node.js app."
      },
      "after": "a94fb03dad478666",
      "date": 1694627286693
    },
    {
      "type": "edit",
      "id": "a94fb03dad478666",
      "item": {
        "type": "paragraph",
        "id": "a94fb03dad478666",
        "text": "The Crazy Wiki Place [http://crazy.fed.wiki/assets/home/index.html page] – assets/home/index.html"
      },
      "date": 1694627448113
    },
    {
      "type": "edit",
      "id": "df6292869e31c966",
      "item": {
        "type": "paragraph",
        "id": "df6292869e31c966",
        "text": "register.js is stored in the assets/home folder and deployed as a node.js application."
      },
      "date": 1694627506477
    },
    {
      "type": "edit",
      "id": "8f5bb78e6b0fc44d",
      "item": {
        "type": "paragraph",
        "id": "8f5bb78e6b0fc44d",
        "text": "martech ⇒ [[Michael Martin]]"
      },
      "date": 1694630753699
    },
    {
      "item": {
        "type": "factory",
        "id": "2571467b7726be2c"
      },
      "id": "2571467b7726be2c",
      "type": "add",
      "after": "df6292869e31c966",
      "date": 1694638702384
    },
    {
      "type": "edit",
      "id": "2571467b7726be2c",
      "item": {
        "type": "pagefold",
        "id": "2571467b7726be2c",
        "text": "~"
      },
      "date": 1694638707999
    },
    {
      "item": {
        "type": "factory",
        "id": "71eed8dfe27e7036"
      },
      "id": "71eed8dfe27e7036",
      "type": "add",
      "after": "2571467b7726be2c",
      "date": 1694638714145
    },
    {
      "type": "edit",
      "id": "71eed8dfe27e7036",
      "item": {
        "type": "paragraph",
        "id": "71eed8dfe27e7036",
        "text": "How to build interesting parsers"
      },
      "date": 1694638718428
    },
    {
      "type": "edit",
      "id": "71eed8dfe27e7036",
      "item": {
        "type": "paragraph",
        "id": "71eed8dfe27e7036",
        "text": "How to build interesting parsers [https://discourse.elm-lang.org/t/how-to-build-interesting-parsers/8786 page]"
      },
      "date": 1694638732776
    },
    {
      "type": "add",
      "id": "d11b96f3eb0b1032",
      "item": {
        "type": "paragraph",
        "id": "d11b96f3eb0b1032",
        "text": "> Yes, good! But I don’t want to run the parser at the beginning of the source string. I want to run it at the current parser position."
      },
      "after": "71eed8dfe27e7036",
      "date": 1694639127824
    },
    {
      "type": "edit",
      "id": "d11b96f3eb0b1032",
      "item": {
        "type": "markdown",
        "id": "d11b96f3eb0b1032",
        "text": "> Yes, good! But I don’t want to run the parser at the beginning of the source string. I want to run it at the current parser position."
      },
      "date": 1694639129058
    },
    {
      "item": {
        "type": "factory",
        "id": "d65fe5768c55d9dc"
      },
      "id": "d65fe5768c55d9dc",
      "type": "add",
      "after": "d11b96f3eb0b1032",
      "date": 1694639278426
    },
    {
      "type": "edit",
      "id": "d65fe5768c55d9dc",
      "item": {
        "type": "reference",
        "id": "d65fe5768c55d9dc",
        "site": "wiki.ralfbarkow.ch",
        "slug": "flip",
        "title": "flip",
        "text": "⇒ [[Flip Operation]]"
      },
      "date": 1694639281844
    },
    {
      "item": {
        "type": "factory",
        "id": "a3153d571e723786"
      },
      "id": "a3153d571e723786",
      "type": "add",
      "after": "d65fe5768c55d9dc",
      "date": 1694639350030
    },
    {
      "type": "edit",
      "id": "a3153d571e723786",
      "item": {
        "type": "paragraph",
        "id": "a3153d571e723786",
        "text": "It’s possible to implement a negative lookahead parser in the same way, but the resulting code wouldn’t be easily recognizable as the inverse of the above (positive) lookahead parser. It would be nice to have a common code structure like an if ... then ... else ... with the branches flipped for the negative lookahead parser."
      },
      "date": 1694639352328
    },
    {
      "item": {
        "type": "factory",
        "id": "3c74db2c53b36aee"
      },
      "id": "3c74db2c53b36aee",
      "type": "add",
      "after": "a3153d571e723786",
      "date": 1694639392004
    },
    {
      "type": "edit",
      "id": "3c74db2c53b36aee",
      "item": {
        "type": "code",
        "id": "3c74db2c53b36aee",
        "text": "flippedAndThen   : Parser a -> (a -> Parser b) -> Parser b\n\ngetResultAndThen : Parser a -> (Result (List Parser.DeadEnd) a -> Parser b) -> Parser b"
      },
      "date": 1694639396337
    },
    {
      "item": {
        "type": "factory",
        "id": "1d986ef7e6fb1fa9"
      },
      "id": "1d986ef7e6fb1fa9",
      "type": "add",
      "after": "3c74db2c53b36aee",
      "date": 1694639431700
    },
    {
      "type": "edit",
      "id": "1d986ef7e6fb1fa9",
      "item": {
        "type": "code",
        "id": "1d986ef7e6fb1fa9",
        "text": "negativeLookAhead : String -> Parser.Parser a -> Parser.Parser ()\nnegativeLookAhead msg parser =\n    getResultAndThen parser <|\n        \\result ->\n            case result of\n                Ok _ ->\n                    Parser.problem msg\n\n                Err _ ->\n                    Parser.succeed ()"
      },
      "date": 1694639436474
    },
    {
      "item": {
        "type": "factory",
        "id": "e97cdbd157e2a6e7"
      },
      "id": "e97cdbd157e2a6e7",
      "type": "add",
      "after": "1d986ef7e6fb1fa9",
      "date": 1694639460276
    },
    {
      "type": "edit",
      "id": "e97cdbd157e2a6e7",
      "item": {
        "type": "paragraph",
        "id": "e97cdbd157e2a6e7",
        "text": "As you can see, it has exactly the same structure as the (positive) lookAhead parser, with both cases flipped (more or less)."
      },
      "date": 1694639463285
    },
    {
      "item": {
        "type": "factory",
        "id": "d74a1536d06b5ef4"
      },
      "id": "d74a1536d06b5ef4",
      "type": "add",
      "after": "e97cdbd157e2a6e7",
      "date": 1694639517253
    },
    {
      "id": "d74a1536d06b5ef4",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "ba055e1561f9f23d",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "7bf1e1ddaa093e47",
        "8c367fcb8880577b",
        "f8534cb213076b33",
        "68943dee6b991f16",
        "6cbf2a9b113eb15c",
        "be2e060a4cc61676",
        "e9eb3f3cf85df720",
        "b2c9d2d17f2dfec9",
        "ac7e278cd1ad230b",
        "8a65696cb725b268",
        "afe4313fd08184de",
        "f562a869609f5ac5",
        "c336ddc9b2c54740",
        "46c760f3676d7e84",
        "917a3379166f5027",
        "1c9a05321fd03984",
        "586002fa37dfb5be",
        "1637db47255f8863",
        "b6b80d584b768b9b",
        "39465dcebbc3d68a",
        "8f5bb78e6b0fc44d",
        "b5819f0e37211d15",
        "a94fb03dad478666",
        "df6292869e31c966",
        "2571467b7726be2c",
        "71eed8dfe27e7036",
        "d11b96f3eb0b1032",
        "d65fe5768c55d9dc",
        "a3153d571e723786",
        "d74a1536d06b5ef4",
        "3c74db2c53b36aee",
        "1d986ef7e6fb1fa9",
        "e97cdbd157e2a6e7"
      ],
      "date": 1694639520254
    },
    {
      "type": "edit",
      "id": "d74a1536d06b5ef4",
      "item": {
        "type": "paragraph",
        "id": "d74a1536d06b5ef4",
        "text": "“getResultAndThen” because we determine the Result of the Parser.run 1 function, “getResultAndThen” like the other “getXxx” functions in the elm/parser package which return information without affecting the current parser state, and “getResultAndThen” because the signature looks similar to a flipped version of Parser.andThen:"
      },
      "date": 1694639521606
    },
    {
      "type": "edit",
      "id": "d74a1536d06b5ef4",
      "item": {
        "type": "paragraph",
        "id": "d74a1536d06b5ef4",
        "text": "[…] “getResultAndThen” because we determine the Result of the Parser.run 1 function, “getResultAndThen” like the other “getXxx” functions in the elm/parser package which return information without affecting the current parser state, and “getResultAndThen” because the signature looks similar to a flipped version of Parser.andThen:"
      },
      "date": 1694639542414
    },
    {
      "type": "add",
      "id": "34cdf62138cbcd98",
      "item": {
        "type": "paragraph",
        "id": "34cdf62138cbcd98",
        "text": "Parser.Extra"
      },
      "after": "e97cdbd157e2a6e7",
      "date": 1694639733256
    },
    {
      "type": "edit",
      "id": "34cdf62138cbcd98",
      "item": {
        "type": "paragraph",
        "id": "34cdf62138cbcd98",
        "text": "Parser.Extra ["
      },
      "date": 1694639744737
    },
    {
      "type": "edit",
      "id": "34cdf62138cbcd98",
      "item": {
        "type": "paragraph",
        "id": "34cdf62138cbcd98",
        "text": "Parser.Extra [https://package.elm-lang.org/packages/pithub/elm-parser-extra/latest page]"
      },
      "date": 1694639754611
    },
    {
      "type": "edit",
      "id": "34cdf62138cbcd98",
      "item": {
        "type": "paragraph",
        "id": "34cdf62138cbcd98",
        "text": "Parser.Extra [https://package.elm-lang.org/packages/pithub/elm-parser-extra/latest page], [https://github.com/pithub/elm-parser-extra/tree/1.0.0#parserextra github]"
      },
      "date": 1694639791297
    },
    {
      "item": {
        "type": "factory",
        "id": "66b902d4335c6227"
      },
      "id": "66b902d4335c6227",
      "type": "add",
      "after": "34cdf62138cbcd98",
      "date": 1694639931706
    },
    {
      "type": "edit",
      "id": "66b902d4335c6227",
      "item": {
        "type": "video",
        "id": "66b902d4335c6227",
        "text": "https://youtu.be/M9ulswr1z0E"
      },
      "date": 1694639934972
    },
    {
      "type": "edit",
      "id": "66b902d4335c6227",
      "item": {
        "type": "video",
        "id": "66b902d4335c6227",
        "text": "Youtube M9ulswr1z0E"
      },
      "date": 1694639943242
    },
    {
      "type": "edit",
      "id": "66b902d4335c6227",
      "item": {
        "type": "video",
        "id": "66b902d4335c6227",
        "text": "YOUTUBE M9ulswr1z0E"
      },
      "date": 1694639951289
    },
    {
      "type": "edit",
      "id": "66b902d4335c6227",
      "item": {
        "type": "video",
        "id": "66b902d4335c6227",
        "text": "YOUTUBE M9ulswr1z0E\n\"Demystifying Parsers\" by Tereza Sokol"
      },
      "date": 1694640163850
    },
    {
      "type": "edit",
      "id": "66b902d4335c6227",
      "item": {
        "type": "video",
        "id": "66b902d4335c6227",
        "text": "YOUTUBE M9ulswr1z0E\n\"Demystifying Parsers\" by [[Tereza Sokol]]"
      },
      "date": 1694640174942
    },
    {
      "item": {
        "type": "factory",
        "id": "920f3dda8466569c"
      },
      "id": "920f3dda8466569c",
      "type": "add",
      "after": "66b902d4335c6227",
      "date": 1694641361039
    },
    {
      "type": "edit",
      "id": "920f3dda8466569c",
      "item": {
        "type": "paragraph",
        "id": "920f3dda8466569c",
        "text": "terezka/yaml"
      },
      "date": 1694641365967
    },
    {
      "item": {
        "type": "factory",
        "id": "94ad1e36f11e5b80"
      },
      "id": "94ad1e36f11e5b80",
      "type": "add",
      "after": "920f3dda8466569c",
      "date": 1694642457572
    },
    {
      "type": "edit",
      "id": "94ad1e36f11e5b80",
      "item": {
        "type": "video",
        "id": "94ad1e36f11e5b80",
        "text": "VIMEO 861989662"
      },
      "date": 1694642468866
    },
    {
      "type": "edit",
      "id": "920f3dda8466569c",
      "item": {
        "type": "paragraph",
        "id": "920f3dda8466569c",
        "text": "terezka/yaml [https://github.com/terezka/yaml#yaml-in-elm github]"
      },
      "date": 1694642500780
    },
    {
      "type": "edit",
      "id": "94ad1e36f11e5b80",
      "item": {
        "type": "video",
        "id": "94ad1e36f11e5b80",
        "text": "VIMEO 861989662\nSosioteknisk systemdesign for “digitale kullgruver” - Trond Hjorteland"
      },
      "date": 1694642540154
    },
    {
      "item": {
        "type": "factory",
        "id": "dd1c93c66095e202"
      },
      "id": "dd1c93c66095e202",
      "type": "add",
      "after": "94ad1e36f11e5b80",
      "date": 1694642546054
    },
    {
      "id": "dd1c93c66095e202",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "ba055e1561f9f23d",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "7bf1e1ddaa093e47",
        "8c367fcb8880577b",
        "f8534cb213076b33",
        "68943dee6b991f16",
        "6cbf2a9b113eb15c",
        "be2e060a4cc61676",
        "e9eb3f3cf85df720",
        "b2c9d2d17f2dfec9",
        "ac7e278cd1ad230b",
        "8a65696cb725b268",
        "afe4313fd08184de",
        "f562a869609f5ac5",
        "c336ddc9b2c54740",
        "46c760f3676d7e84",
        "917a3379166f5027",
        "1c9a05321fd03984",
        "586002fa37dfb5be",
        "1637db47255f8863",
        "b6b80d584b768b9b",
        "39465dcebbc3d68a",
        "8f5bb78e6b0fc44d",
        "b5819f0e37211d15",
        "a94fb03dad478666",
        "df6292869e31c966",
        "2571467b7726be2c",
        "71eed8dfe27e7036",
        "d11b96f3eb0b1032",
        "d65fe5768c55d9dc",
        "a3153d571e723786",
        "d74a1536d06b5ef4",
        "3c74db2c53b36aee",
        "1d986ef7e6fb1fa9",
        "e97cdbd157e2a6e7",
        "34cdf62138cbcd98",
        "66b902d4335c6227",
        "920f3dda8466569c",
        "dd1c93c66095e202",
        "94ad1e36f11e5b80"
      ],
      "date": 1694642548993
    },
    {
      "type": "edit",
      "id": "dd1c93c66095e202",
      "item": {
        "type": "pagefold",
        "id": "dd1c93c66095e202",
        "text": "~"
      },
      "date": 1694642553102
    },
    {
      "type": "edit",
      "id": "94ad1e36f11e5b80",
      "item": {
        "type": "video",
        "id": "94ad1e36f11e5b80",
        "text": "VIMEO 861989662\nSosioteknisk systemdesign for “digitale kullgruver” - [Trond Hjorteland"
      },
      "date": 1694642559066
    },
    {
      "type": "edit",
      "id": "94ad1e36f11e5b80",
      "item": {
        "type": "video",
        "id": "94ad1e36f11e5b80",
        "text": "VIMEO 861989662\nSosioteknisk systemdesign for “digitale kullgruver” - [[Trond Hjorteland]]"
      },
      "date": 1694642586007
    },
    {
      "type": "add",
      "id": "5375a1ea3b49c29f",
      "item": {
        "type": "paragraph",
        "id": "5375a1ea3b49c29f",
        "text": "﻿﻿"
      },
      "after": "920f3dda8466569c",
      "date": 1694642731772
    },
    {
      "type": "add",
      "id": "f3e73afeaed35a3c",
      "item": {
        "type": "paragraph",
        "id": "f3e73afeaed35a3c",
        "text": "Sociotechnical system design for \"digital coal mines\""
      },
      "after": "920f3dda8466569c",
      "date": 1694642755232
    },
    {
      "id": "f3e73afeaed35a3c",
      "type": "move",
      "order": [
        "c97a664163c36131",
        "65de0ad393316029",
        "fee0d1c3ad871206",
        "07de5c14fd3ca9fa",
        "a5c836daf0c65442",
        "fc0af16607fe5367",
        "e3ef37f82b973c77",
        "1194a2c2e0d90424",
        "247c7251482e7411",
        "d6e5d748f8f68157",
        "ade1b872c8017577",
        "a2078f51341e86ee",
        "312522de442d89db",
        "b3bd8b3a9a590966",
        "c4f898049feea80e",
        "71a1e518bcc803da",
        "d3bd0ee6676fe5e5",
        "6d93b98f9d950fbc",
        "3c6a2ceb3a2cf9f0",
        "71eadde9b88255c8",
        "4d22501af6ca3738",
        "4dd4cf277845eb7c",
        "d9e76e54b216027c",
        "51712adc830c29e9",
        "62092fe1c81c1102",
        "d7e1b4a20604ac9d",
        "46472932e499c0bc",
        "0d0d0199b53e070d",
        "19956a00b5890dc7",
        "d24c1356166dd96f",
        "c25808f652e38816",
        "855d6f4b12aa4985",
        "aff9891c5498e26b",
        "6b94109a7b936a59",
        "aeaa4cd79306b9bc",
        "a0578c382c400dea",
        "c84952c6d2b75ce0",
        "307f7a5fcd02063b",
        "ba055e1561f9f23d",
        "6a80f56ffa73f45b",
        "1bdd3b9a970078d1",
        "7bf1e1ddaa093e47",
        "8c367fcb8880577b",
        "f8534cb213076b33",
        "68943dee6b991f16",
        "6cbf2a9b113eb15c",
        "be2e060a4cc61676",
        "e9eb3f3cf85df720",
        "b2c9d2d17f2dfec9",
        "ac7e278cd1ad230b",
        "8a65696cb725b268",
        "afe4313fd08184de",
        "f562a869609f5ac5",
        "c336ddc9b2c54740",
        "46c760f3676d7e84",
        "917a3379166f5027",
        "1c9a05321fd03984",
        "586002fa37dfb5be",
        "1637db47255f8863",
        "b6b80d584b768b9b",
        "39465dcebbc3d68a",
        "8f5bb78e6b0fc44d",
        "b5819f0e37211d15",
        "a94fb03dad478666",
        "df6292869e31c966",
        "2571467b7726be2c",
        "71eed8dfe27e7036",
        "d11b96f3eb0b1032",
        "d65fe5768c55d9dc",
        "a3153d571e723786",
        "d74a1536d06b5ef4",
        "3c74db2c53b36aee",
        "1d986ef7e6fb1fa9",
        "e97cdbd157e2a6e7",
        "34cdf62138cbcd98",
        "66b902d4335c6227",
        "920f3dda8466569c",
        "5375a1ea3b49c29f",
        "dd1c93c66095e202",
        "f3e73afeaed35a3c",
        "94ad1e36f11e5b80"
      ],
      "date": 1694642757078
    },
    {
      "type": "edit",
      "id": "f3e73afeaed35a3c",
      "item": {
        "type": "paragraph",
        "id": "f3e73afeaed35a3c",
        "text": "Sociotechnical system design for \"digital coal mines\" [https://www.linkedin.com/posts/trondhjort_sosioteknisk-systemdesign-for-digitale-kullgruver-activity-7106884183951589376-1VUD?utm_source=share&utm_medium=member_desktop linkedin]"
      },
      "date": 1694642831623
    }
  ]
}