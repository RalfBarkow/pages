{
  "title": "Self Language",
  "story": [
    {
      "type": "html",
      "text": "<i>Self is like Smalltalk, [[Only More So]]</i>",
      "id": "2edf124a504202b768dc53ad39507004"
    },
    {
      "type": "html",
      "text": "\nSelf slogan from [[David Ungar]].",
      "id": "f2de248134a60fd346b69a93b594bd6e"
    },
    {
      "type": "html",
      "text": "\nThe Self homepage at [http://selflanguage.org selflanguage.org] contains much information, as well as source for Linux and [[Mac Osx]] (and [[Sparc Solaris]] for an older version). Self 4.5 was released for download in 14 January 2014.  ",
      "id": "1dbbe2d93fcaaef08d24ca8dbff93f11"
    },
    {
      "type": "html",
      "text": "(The original Sun page at [http://labs.oracle.com/self/ labs.oracle.com] is now only useful for historical purposes. Alternate and older Linux and [[Cyg Win]] sources and binaries are at [http://www.gliebe.de/self/ www.gliebe.de] )",
      "id": "77c3b7c1e4fbd5ce1d55f12b07f9311b"
    },
    {
      "type": "html",
      "text": "\nSelf was first announced in academic literature in 1987. The latest release was version 4.5 in January 2014, and is available from the language homepage. The [[Mac Os]] version has the poly-whatsit-inline-thingummies now and has a working source-level performance profiler.",
      "id": "b18025757b5a3f3a5a15fc2520964487"
    },
    {
      "type": "html",
      "text": "\nThe reference manual and a tutorial are at [http://selflanguage.org/documentation/index.html selflanguage.org]",
      "id": "d2af967bd957b7a790439a20a5587239"
    },
    {
      "type": "html",
      "text": "\nPublished papers on Self are at [http://bibliography.selflanguage.org/index.html bibliography.selflanguage.org]",
      "id": "7e0f4dad047ddb4e87f1f075294b26b7"
    },
    {
      "type": "html",
      "text": "\nBlog at: [http://blog.selflanguage.org/ blog.selflanguage.org]",
      "id": "39671d1867295a50ad01773cf8de4a1b"
    },
    {
      "type": "html",
      "text": "\nOther information about this language (papers, alternate implementations) is available from: [http://www.cetus-links.org/oo_self.html www.cetus-links.org]",
      "id": "12098b4920a5e3cb275f5f2c3813cb47"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "\nSelf has no classes, only prototypes (see [[Prototype Based Programming]] and [[Classes Prototypes Comparison]]). This makes implementation of lambda forms and singletons cleaner: there's no need to define a class when you just want an object. However it makes the structure of the program less explicit: in many cases there are many objects that behave the same way and it's good to make them members of the same class.",
      "id": "ca30d6adf97faa00046c2f6c50613022"
    },
    {
      "type": "html",
      "text": "<i>That's not a very good objection to [[Prototype Based Programming]]. If it's really true you can create a \"class\" object, or just have prototypes keep track of their progeny. Classes are available but the language doesn't force classes on you.</i>",
      "id": "c42522ea38a8399b6c47c504b44d3c03"
    },
    {
      "type": "html",
      "text": "\nRight, but I think there's an even simpler answer to the objection: objects with similar behaviour in a prototype language are made progeny of the same object and inherit some/most/all (whatever you want) of their behaviour from it. -- [[Jason Grossman]]",
      "id": "a049f7a9b6898c57424f800fb927ebc8"
    },
    {
      "type": "html",
      "text": "\nYes. See the paper \"Organizing Programs Without Classes\", available at the Self website: [http://research.sun.com/self/papers/organizing-programs.html research.sun.com]",
      "id": "30897f8259d6cbd0129def4ff63d6220"
    },
    {
      "type": "html",
      "text": "\nMy own experience with Self has been that it's always perfectly clear when two objects are the same \"type.\" The system keeps track (under the hood) of which objects are part of the same \"clone family\", and the environment will display that information when you're looking at an object. When you're looking at the prototypical \"point\" object, the object will be labelled \"point\". If you clone that object, the new object will be labelled \"a point\". (Of course, you could then mess around with the object and add slots to it or something, in which case it wouldn't be \"a point\" anymore, and so the environment would just label it as \"an object\".) I find it very intuitive; I really don't miss classes at all.",
      "id": "78f94906c7b9d57772dc85f02f57cc35"
    },
    {
      "type": "html",
      "text": "\nAnd all of this is on top of the fact (which Jason pointed out) that every point object will have a parent slot pointing explicitly to \"traits point\".",
      "id": "928b7c7fcab42c55929abc088d8df452"
    },
    {
      "type": "html",
      "text": "\nI can describe this aspect of the system in more detail, if anybody wants me to.",
      "id": "72edae302144b6a624737070ba5cbf4d"
    },
    {
      "type": "html",
      "text": "-- [[Adam Spitz]]",
      "id": "7a3b8ff7e2f010ec8ee0ff623246832f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "Self makes no distinction between member access and method calls: everything is just a <i>slot</i>. The caller doesn't need to know if a slot is (like a) read-write variable, a read-only value, or a method, and that can be redefined transparently in any object.",
      "id": "d01f6c8c68d131d7afd4986b2fafc6a7"
    },
    {
      "type": "html",
      "text": "\nSelf objects can change behaviour dynamically: if they had classes, then we could say that they change class.",
      "id": "9c7222bcfcfff4d1dddd0088f4692db2"
    },
    {
      "type": "html",
      "text": "\n[[Self Uses Capitalization For Syntax]], which is a little weird.",
      "id": "bbc52bc047b46962d209c5b9942b3774"
    },
    {
      "type": "html",
      "text": "-- [[Martin Pool]]",
      "id": "72b194a2f0099557fd8669797883deb7"
    },
    {
      "type": "html",
      "text": "(...says the guy who just typed \"[[Self Uses Capitalization For Syntax]]\". :) )",
      "id": "3abb80e6ce41b54740bd88ccf55d22ad"
    },
    {
      "type": "html",
      "text": "\nI'm growing to like the capitalization thing. The rule is simple, it doesn't really constrain me in any significant way, and my eye is learning to use the capitalization to parse the code more quickly. I feel a little twinge of annoyance whenever [[Smalltalk Language]] forces me to use parentheses now (and also whenever it forces me to type out the word \"self\" [[[Self Dot Syndrome]]] :). -- [[Adam Spitz]]",
      "id": "54ce9aee5cb4096fa282bd8dd3d67347"
    },
    {
      "type": "html",
      "text": "\nNote that [[Haskell Language]] also uses capitalization for syntax; I'm finding it less weird than I expected. -- [[Shae Erisson]]",
      "id": "4e944e44eb54d955c3f245959fd87a76"
    },
    {
      "type": "html",
      "text": "\nSo does English, and especially German. It complements using periods to end statements. -- Brock",
      "id": "a17fb5129329584c3aca7ad8657e8533"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "Also see [http://www.consultar.com/JSelf/ www.consultar.com] for a project in progress to run Self inside a [[Java Virtual Machine]].",
      "id": "26bd4b6d56a9d645b69704ee03e0d726"
    },
    {
      "type": "html",
      "text": "\nThis topic really piques my interest because I spent two years developing for the Apple Newton PDA. Development happened in a language specifically designed for the Newton called [[Newton Script]] whose closest kin is Self. I learned this prototypical OO language before doing any serious work in a class-based OO language ([[Java Language]]) and I believe it has broadened the way I think about design.",
      "id": "d52d7110a03387309f1af3f542ee0ef3"
    },
    {
      "type": "html",
      "text": "<i>The former head of research for [[File Maker Pro]] told me that [[Newton Script]] is based on Self -- [[Shae Erisson]]</i>",
      "id": "046eb4a40f0c8b73b5ff349b68861c78"
    },
    {
      "type": "html",
      "text": "\nI love how dynamic the language is. As was written above, there is no distinction between instance variables and methods. 'Slots' are basically named buckets inside an object which can contain either data or code. In one program where execution speed was important, I checked an initalization variable at startup and used that to determine which routine to put in a particular slot. I was essentially modifying the code at runtime.",
      "id": "3420b40be44e43531f4d3e4560b5b860"
    },
    {
      "type": "html",
      "text": "<i>The objects in [[Java Script]] are rather like this. Objects are just associative arrays or maps, from names to members, and members can be functions as well as variables, allowing you to reassign them whenever. There is a standard prototype 'slot' (or </i>property<i>, in [[Java Script]] terminology) that causes the object to effectively inherit features of another object (the value of that property.) So in reality, something rather like Self is most likely enabled in the Web browser you are reading this page with. :) It might make sense to consider the experiences of [[Java Script]] users if you want a picture of what large scale Self usage would be like! Probably not much fun. (Personally I would miss [[Static Type Safety]]...) -- [[Daniel Earwicker]]</i>",
      "id": "ae1d8404a5c67e59ac01c68a8ed3efac"
    },
    {
      "type": "html",
      "text": "\nThe prototype of an object is essentially a delegate. If some bit of code tries to access a slot of an object (either read/write data or method call) and the object doesn't have the slot, then the prototype is automatically checked. This prototype approach is really strong in building GUI code. For example, you could have a [[Basic Button]] object with data slots specifying label, font, color, size, etc. It can handle basic event processing and call a method slot called 'buttonClicked'. Then each time you need a button in your GUI, you set the prototype to [[Basic Button]] and override the label and buttonClicked slots.",
      "id": "24fc793d7913a31dad7bd16cabf5509c"
    },
    {
      "type": "html",
      "text": "\nI've heard it argued that prototypical languages are more fundamental than class-based languages because you can emulate class-based behavior in a prototypical language, but not vice versa.",
      "id": "0956cda0df8d0b3fdaeb0a187415fa81"
    },
    {
      "type": "html",
      "text": "<i>I've recently heard it argued that they both can emulate each other</i> -- [[Greg Vaughn]]",
      "id": "9ce59da9c50288af02e73c28189668a4"
    },
    {
      "type": "html",
      "text": "\nIt's true, they can. I've been reading up on metaclasses in [[Python Language]], and I suddenly realized metaclasses would let you do prototypical Python, I'm sure it would work the other way around as well. -- [[Shae Erisson]]",
      "id": "43f18a1c47e8263ef1d877df054e9020"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "Has anyone played with Kansas, the collaborative development environment that Sun based on [[Self Language]]? -- [[Shae Erisson]]",
      "id": "95a7e3bc0198300c06875450490b52ac"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "Has anyone tried doing [[Extreme Programming]] in Self? ",
      "id": "b274868fe66aa9838fe3702fd3200af7"
    },
    {
      "type": "html",
      "text": "\nI'm starting to do a bit of XP-like stuff in Self now. (Our project doesn't really fit into the classic XP mold - we're more-or-less our own [[Goal Donor]], and there's not much of a deadline, so we don't bother with any of the planning stuff - but we do [[Automated Testing]] and [[Pair Programming]] and [[Refactor Mercilessly]] and all of that.) XP in Self is wonderful for all the same reasons that XP in [[Smalltalk Language]] is wonderful (only more so ;).",
      "id": "6e0e6ee6d93631c5f227b5e1633dac7b"
    },
    {
      "type": "html",
      "text": "\nThe only really interesting thing is the collaborative features of the Self environment. When we program in pairs, instead of both sitting at the same computer, we sometimes sit at our own individual computers (which are right beside each other) and pop up the Self window on both screens. Self gives us each a mouse pointer and a keyboard focus (so it's not like we're constantly fighting over control of the mouse cursor). Most of the time it's pretty much the same as sharing a single computer, but occasionally it smooths the process a little bit. (Instead of trying to get me to notice a typo - \"Complier? Look, you spelled it complier instead of compiler. Over there. Up one line.\" - my partner can just fix it himself.) And sometimes there's the occasional boring task (renaming a bunch of methods, for example) that we can divide up and work on simultaneously.",
      "id": "3f45a680a2ff48e18cfbf2e421b75aaf"
    },
    {
      "type": "html",
      "text": "\nWe've only just started experimenting with this kind of stuff, and I'm sure there are a bunch of cool things we could be doing that we're not doing. :) If we had a larger team, we could probably take better advantage of the extra working room that Self gives us. (We've got an infinite flat plane to work in, so if we wanted to, each pair could go off and work in a different area, and we'd still all be sharing the same world. <i>Real</i> [[Continuous Integration]]. :)",
      "id": "c1a012be8b028b2eb52f0c094a7a53cd"
    },
    {
      "type": "html",
      "text": "\nIf anybody's got any suggestions, or questions, or experiments you'd like us to try, I'd love to hear them. :)",
      "id": "a3c61024edb9fde9a21ee6839094cfd9"
    },
    {
      "type": "html",
      "text": "-- [[Adam Spitz]]",
      "id": "7a3b8ff7e2f010ec8ee0ff623246832f"
    },
    {
      "type": "html",
      "text": " Which version of self are you using?",
      "id": "94e5d85d5b5f2ffee1377bb1ea366dec"
    },
    {
      "type": "html",
      "text": " Where can I get the software?",
      "id": "8fe37cd8feaf9721d1154e9937c63378"
    },
    {
      "type": "html",
      "text": " What does it run on?",
      "id": "330504b1044483b05f7f03f26b45a99d"
    },
    {
      "type": "html",
      "text": " What do I need to do to make it run?",
      "id": "11681097174fcb556ba788e7fc5060bb"
    },
    {
      "type": "html",
      "text": "-- rk",
      "id": "953aa0dc0ec6a0fad5c62851a5fa34ac"
    },
    {
      "type": "html",
      "text": "\nWe're using version 4.2.1, which you can get from the Self homepage ([http://research.sun.com/self research.sun.com]). The version from Sun only runs on the SPARC and on [[Mac Osx]]. (We're running it on [[Mac Os]] 10.3.) It's also possible to go to [http://gliebe.de/ gliebe.de] and get an older version (4.1.6, maybe?) that runs on Linux or (they claim - I haven't tried it) [[Cyg Win]] on [[Microsoft Windows]].",
      "id": "12b8510982a8635d0c1271397d459691"
    },
    {
      "type": "html",
      "text": "\nTo make it run... well, the version from Sun ought to just work, right out of the box. (If it doesn't, please let me know.) I have no idea about the x86 version. (I <i>have</i> gotten Self running on a Linux machine before, so I can promise you that it's possible, but that was about a year ago, and I don't have the machine anymore, and I don't remember the instructions.)",
      "id": "c564f0838327081a45a0d0c99d041b3e"
    },
    {
      "type": "html",
      "text": "-- [[Adam Spitz]]",
      "id": "7a3b8ff7e2f010ec8ee0ff623246832f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "Self's great innovation performance-wise is [[Polymorphic Inline Caches]]. They are now also used in [[Visual Works Smalltalk]].",
      "id": "875d2a0d546ec446f50f15f30177dfe6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "<i>I'm researching the Self VM right now, and it lives on in languages like [[Java Script]]. It's my impression that Sun killed it in favour of Java; and they own it. But even if it \"dies\", it's still an amazing piece of technology that we can reapply elsewhere. -- [[Sunir Shah]]</i>",
      "id": "c4957fa01410c449cdd5403a40e4708b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "[[Java Script]] is very much a prototypical language and it's extremely easy to work with. I wish there were a good development environment. (The debugger provided by the [[Mozilla Browser]] is pretty good though.) It's much easier to add new behavior to third-party classes than even [[Smalltalk Languages]] and other class-based languages (I am a big Smalltalk fan). The ability to add new properties on the fly saves ton of code during GUI development. -- Ram Nukala",
      "id": "ff271c19bf1bf0176c744c0300304871"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "[[Java Script]] is a very nice language that has been tainted by association with bad web code. [[Smalltalk Language]] is wonderful. Self seems to have all the good things of both. But I can't use any of them. Why? They combine a great language with a very specialized environment... Smalltalk and Self are informed and guided by the GUI, and you live or die by the GUI (yes, I know that this is an oversimplification, but in general it's hard to even talk about Smalltalk without a GUI with Smalltalk people), [[Java Script]] with web applications, and so on. I should be able to take a Smalltalk program and compile it to an executable from a script, or run a [[Java Script]] file directly from CMD.EXE or /bin/sh. But while I've found fragments of tools like these, they're always so wrapped around with limitations as to be useless... and I end up programming in [[Cee Language]] or /bin/sh or [[Tcl Language]] because I can depend on them being there where and when I need them. Has anyone any suggestions (other than Castaneda-like Stopping The World and changing careers)? -- Peter da Silva",
      "id": "143abf48cc8683638f8897ee5efa1943"
    },
    {
      "type": "html",
      "text": "\nSuggestions:",
      "id": "27513e43908662addefef0e9e0ec3e00"
    },
    {
      "type": "html",
      "text": " [[Delegator Is Delegation In Java]] makes Delegation available in the [[Java Language]]. It's an API in native Java so adoption for Java Programmers shouldn't be a problem -- [[Klaas Van Schelven]]",
      "id": "8c639db54246649794d3e4ecbeaf893f"
    },
    {
      "type": "html",
      "text": " [[Lua Language]] is very similar to [[Java Script]], but had a chance to mature for longer before public release. While it doesn't have a prototype object model in the core language, it's easy to add one in less than a page of code using \"metatables\", and the primary Lua book ([[Programming In Lua]]) does so to demonstrate OOP. It also integrates remarkably well with [[Cee Language]], and is portable to literally anywhere with an ANSI C compiler. -- [[Scott Vokes]]",
      "id": "598cfed0594ff9e398c358430c7f2117"
    },
    {
      "type": "html",
      "text": " [[Io Language]] is a prototypical language that takes a lot from Self and has an execution model that's more like a [[Scripting Language]].",
      "id": "ca06b3a36e214844e05125a54d23c72e"
    },
    {
      "type": "html",
      "text": " [[Slate Language]] takes from Self, [[Strong Talk]], and Squeak, and attempts to do better than any of them (by learning their lessons and the lessons of those that came after, eg [[Dylan Language]]).",
      "id": "35808b56037957cb9a056a60e53b3575"
    },
    {
      "type": "html",
      "text": " [[Gnu Smalltalk]] is an [[Image Based Language]], like a typical [[Smalltalk Language]], but it's much more file-oriented that typical Smalltalks. Most editions don't even *have* a GUI, though that seems to be changing. Development is usually done in Emacs, and it seems to be possible to write shell script-like things with it. It's faster than Squeak, by my measurements, though not as well supported.",
      "id": "35325ee1d4c0af3c14774cebe2051134"
    },
    {
      "type": "html",
      "text": " There are several [[Java Script]] engines in Unix that can run from the shell:",
      "id": "9b638d5f7eb6beb8820e71043aa945bf"
    },
    {
      "type": "html",
      "text": " njs (supersedes ngs-js) [http://www.njs-javascript.org/ www.njs-javascript.org]",
      "id": "e9a5027f9022c7cfbd20ed27ae3277a5"
    },
    {
      "type": "html",
      "text": " Older: ngs-js [http://people.ssh.com/mtr/js/ people.ssh.com]",
      "id": "0805708023a6d2af7bcbf547b2634d2c"
    },
    {
      "type": "html",
      "text": " Mozilla spidermonkey (in C) [http://www.mozilla.org/js/spidermonkey/ www.mozilla.org]",
      "id": "077704c84b5765e57f52a4a9479dac20"
    },
    {
      "type": "html",
      "text": " Mozilla [[Rhino Interpreter]] (written in Java) [http://www.mozilla.org/rhino/ www.mozilla.org]",
      "id": "b9b50124fbba28f4f9cdfa6174075f26"
    },
    {
      "type": "html",
      "text": "\nOkay, so what's wrong with [[Visual Works]]' headless package? Isn't it supposed to do exactly what Peter wants? A Smalltalk executable without any GUI, browsers or debugger?",
      "id": "d9521414d3cefa8eacd3dd5233e9633f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "\nJust double-checking something. IIRC, Self does <i>not</i> have hidden variables. If that's correct then it means Self can't support capabilities, or any other notion of security, as is. It also means that it's the absolute perfectest candidate for adding an orthogonal security scheme. So can someone confirm or refute that Self's variables are always accessible from outside the object?",
      "id": "e421f03c8783c5aa91d41e9a74c9b182"
    },
    {
      "type": "html",
      "text": "<i>Yes, that's true. -- [[Adam Spitz]]</i>",
      "id": "1917944c7b0feb728725f5381bef25f1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "I just watched <i>Self: The Video</i>. (See [http://www.merlintec.com:8080/Self www.merlintec.com:8080] The page calls it <i>Self: The Movie</i>, though it calls itself \"the Video\".) Is it just me or do they spend more time talking about the things they inherited from [[Smalltalk Language]] (as if they were Self innovations) & very little time talking about what differentiates Self from Smalltalk?",
      "id": "3513cdded646036dd63693362b59fdde"
    },
    {
      "type": "html",
      "text": "\nIt's interesting that they show a Smalltalk environment running under Self. (& they claim it out performs commercial Smalltalk<b></b>s.)",
      "id": "cada75e6a8114f9cf8e03dab4277c3f4"
    },
    {
      "type": "html",
      "text": "-- [[Robert Fisher]]",
      "id": "ed0b06594156f68394d04bfaef009c3e"
    },
    {
      "type": "html",
      "text": "\nI suspect that the benchmarking mentioned in the movie was done on the [[Ana Morphic]] [[Hot Spot Vm]], a virtual machine.  As I understand, it was done by [[Mario Wolczko]].  (Reportedly Sun bought the Anamorphic company assigned the employees and the technology to the Self project, thought the timelines in this essay, [http://research.sun.com/features/tenyears/volcd/papers/ungar.htm research.sun.com] , are confusing.  Names to look for include [[Lars Bak]], [[Urs Hoelzle]] and [[John Maloney]].)  It is indeed interesting that Smalltalk on Self on Hot<b></b>Spot is so fast, and makes Hot<b></b>Spot sound all the more interesting technology.  Now that Hot<b></b>Spot is open source (as part of [[Open Jdk]] [http://openjdk.java.net/groups/hotspot/ openjdk.java.net] ), it can, in principle, be ported to more architectures and more operating systems, and the [[Davinci Machine]] project could result in it again supporting fast Self and fast Smalltalk.",
      "id": "fcf97aaa86950d914c3577768a0ad541"
    },
    {
      "type": "html",
      "text": "\nIs Anamorphic also associated with [[John Maloney]]'s [[Morphic Interface]] for Self, which reappeared in [[Squeak Smalltalk]] and then in [[Dan Ingalls]]'s [[Lively Kernel]] research at Sun ?",
      "id": "6bf3b7a7000f399a0a7182013a3d5e60"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "\nI just read this in the Self manual: \"It is an error to evaluate a block method after the activation record for its lexically enclosing scope has returned. Such a block is called a non-lifo block because returning from it would violate the last-in, first-out semantics of activation object invocation.\nThis restriction is made primarily to allow activation records to be allocated from a stack. A future release of Self may relax this restriction, at least for blocks that do not access variables in enclosing scopes.\"",
      "id": "835c711dccc4c0f1bea019b708fcf597"
    },
    {
      "type": "html",
      "text": "\nIf it is really true that you can't call a closure after the enclosing lexical scope has terminated, then what is the point of having them?  This seems like a very onerous restriction.",
      "id": "95031ee087edcabceb50610eb93290df"
    },
    {
      "type": "html",
      "text": "-- [[Vincent Toups]]",
      "id": "0f604ca78520aa0499bc47867e1baa77"
    },
    {
      "type": "html",
      "text": "<i>While I can't speak for Self specifically, in general you can pass the closure to functions you call. This allows one to perform actions that depend on or alter the closed over data without the called code having to explicitly know about it.</i>",
      "id": "e61482b8fa994fc4b0e596813c5cc19b"
    },
    {
      "type": "html",
      "text": "\nNon-Lifo blocks still work fine for most common uses of closures in [[Smalltalk Language]] type systems such as true ifTrue: [] False: []. If you need more, making one off objects is easy: (| value = ( 3 + 4 ) |) will act as if it were a block, only without the automatic wrapping to the calling context.",
      "id": "51cb61ca1c223bc9f528cc1cf7550357"
    },
    {
      "type": "html",
      "text": "-- [[Russell Allen]]",
      "id": "6c083709bf0bf814807ef9051f700c08"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "94ee25335720f608584e29815a41efea"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]] [[Category Self]] [[Category Prototype Programming]]",
      "id": "2a3a129e4e2d664e371ea5696cd4d1ff"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?SelfLanguage c2.com]",
      "id": "b5420e9fb2568e59c8bb08c2e6b1b079"
    }
  ],
  "journal": [
    {
      "date": 1390773723000,
      "id": "6b5053f024e621f99cec46ebb3266a00",
      "type": "create",
      "item": {
        "title": "Self Language",
        "story": [
          {
            "type": "html",
            "text": "<i>Self is like Smalltalk, [[Only More So]]</i>",
            "id": "2edf124a504202b768dc53ad39507004"
          },
          {
            "type": "html",
            "text": "\nSelf slogan from [[David Ungar]].",
            "id": "f2de248134a60fd346b69a93b594bd6e"
          },
          {
            "type": "html",
            "text": "\nThe Self homepage at [http://selflanguage.org selflanguage.org] contains much information, as well as source for Linux and [[Mac Osx]] (and [[Sparc Solaris]] for an older version). Self 4.5 was released for download in 14 January 2014.  ",
            "id": "1dbbe2d93fcaaef08d24ca8dbff93f11"
          },
          {
            "type": "html",
            "text": "(The original Sun page at [http://labs.oracle.com/self/ labs.oracle.com] is now only useful for historical purposes. Alternate and older Linux and [[Cyg Win]] sources and binaries are at [http://www.gliebe.de/self/ www.gliebe.de] )",
            "id": "77c3b7c1e4fbd5ce1d55f12b07f9311b"
          },
          {
            "type": "html",
            "text": "\nSelf was first announced in academic literature in 1987. The latest release was version 4.5 in January 2014, and is available from the language homepage. The [[Mac Os]] version has the poly-whatsit-inline-thingummies now and has a working source-level performance profiler.",
            "id": "b18025757b5a3f3a5a15fc2520964487"
          },
          {
            "type": "html",
            "text": "\nThe reference manual and a tutorial are at [http://selflanguage.org/documentation/index.html selflanguage.org]",
            "id": "d2af967bd957b7a790439a20a5587239"
          },
          {
            "type": "html",
            "text": "\nPublished papers on Self are at [http://bibliography.selflanguage.org/index.html bibliography.selflanguage.org]",
            "id": "7e0f4dad047ddb4e87f1f075294b26b7"
          },
          {
            "type": "html",
            "text": "\nBlog at: [http://blog.selflanguage.org/ blog.selflanguage.org]",
            "id": "39671d1867295a50ad01773cf8de4a1b"
          },
          {
            "type": "html",
            "text": "\nOther information about this language (papers, alternate implementations) is available from: [http://www.cetus-links.org/oo_self.html www.cetus-links.org]",
            "id": "12098b4920a5e3cb275f5f2c3813cb47"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "\nSelf has no classes, only prototypes (see [[Prototype Based Programming]] and [[Classes Prototypes Comparison]]). This makes implementation of lambda forms and singletons cleaner: there's no need to define a class when you just want an object. However it makes the structure of the program less explicit: in many cases there are many objects that behave the same way and it's good to make them members of the same class.",
            "id": "ca30d6adf97faa00046c2f6c50613022"
          },
          {
            "type": "html",
            "text": "<i>That's not a very good objection to [[Prototype Based Programming]]. If it's really true you can create a \"class\" object, or just have prototypes keep track of their progeny. Classes are available but the language doesn't force classes on you.</i>",
            "id": "c42522ea38a8399b6c47c504b44d3c03"
          },
          {
            "type": "html",
            "text": "\nRight, but I think there's an even simpler answer to the objection: objects with similar behaviour in a prototype language are made progeny of the same object and inherit some/most/all (whatever you want) of their behaviour from it. -- [[Jason Grossman]]",
            "id": "a049f7a9b6898c57424f800fb927ebc8"
          },
          {
            "type": "html",
            "text": "\nYes. See the paper \"Organizing Programs Without Classes\", available at the Self website: [http://research.sun.com/self/papers/organizing-programs.html research.sun.com]",
            "id": "30897f8259d6cbd0129def4ff63d6220"
          },
          {
            "type": "html",
            "text": "\nMy own experience with Self has been that it's always perfectly clear when two objects are the same \"type.\" The system keeps track (under the hood) of which objects are part of the same \"clone family\", and the environment will display that information when you're looking at an object. When you're looking at the prototypical \"point\" object, the object will be labelled \"point\". If you clone that object, the new object will be labelled \"a point\". (Of course, you could then mess around with the object and add slots to it or something, in which case it wouldn't be \"a point\" anymore, and so the environment would just label it as \"an object\".) I find it very intuitive; I really don't miss classes at all.",
            "id": "78f94906c7b9d57772dc85f02f57cc35"
          },
          {
            "type": "html",
            "text": "\nAnd all of this is on top of the fact (which Jason pointed out) that every point object will have a parent slot pointing explicitly to \"traits point\".",
            "id": "928b7c7fcab42c55929abc088d8df452"
          },
          {
            "type": "html",
            "text": "\nI can describe this aspect of the system in more detail, if anybody wants me to.",
            "id": "72edae302144b6a624737070ba5cbf4d"
          },
          {
            "type": "html",
            "text": "-- [[Adam Spitz]]",
            "id": "7a3b8ff7e2f010ec8ee0ff623246832f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "Self makes no distinction between member access and method calls: everything is just a <i>slot</i>. The caller doesn't need to know if a slot is (like a) read-write variable, a read-only value, or a method, and that can be redefined transparently in any object.",
            "id": "d01f6c8c68d131d7afd4986b2fafc6a7"
          },
          {
            "type": "html",
            "text": "\nSelf objects can change behaviour dynamically: if they had classes, then we could say that they change class.",
            "id": "9c7222bcfcfff4d1dddd0088f4692db2"
          },
          {
            "type": "html",
            "text": "\n[[Self Uses Capitalization For Syntax]], which is a little weird.",
            "id": "bbc52bc047b46962d209c5b9942b3774"
          },
          {
            "type": "html",
            "text": "-- [[Martin Pool]]",
            "id": "72b194a2f0099557fd8669797883deb7"
          },
          {
            "type": "html",
            "text": "(...says the guy who just typed \"[[Self Uses Capitalization For Syntax]]\". :) )",
            "id": "3abb80e6ce41b54740bd88ccf55d22ad"
          },
          {
            "type": "html",
            "text": "\nI'm growing to like the capitalization thing. The rule is simple, it doesn't really constrain me in any significant way, and my eye is learning to use the capitalization to parse the code more quickly. I feel a little twinge of annoyance whenever [[Smalltalk Language]] forces me to use parentheses now (and also whenever it forces me to type out the word \"self\" [[[Self Dot Syndrome]]] :). -- [[Adam Spitz]]",
            "id": "54ce9aee5cb4096fa282bd8dd3d67347"
          },
          {
            "type": "html",
            "text": "\nNote that [[Haskell Language]] also uses capitalization for syntax; I'm finding it less weird than I expected. -- [[Shae Erisson]]",
            "id": "4e944e44eb54d955c3f245959fd87a76"
          },
          {
            "type": "html",
            "text": "\nSo does English, and especially German. It complements using periods to end statements. -- Brock",
            "id": "a17fb5129329584c3aca7ad8657e8533"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "Also see [http://www.consultar.com/JSelf/ www.consultar.com] for a project in progress to run Self inside a [[Java Virtual Machine]].",
            "id": "26bd4b6d56a9d645b69704ee03e0d726"
          },
          {
            "type": "html",
            "text": "\nThis topic really piques my interest because I spent two years developing for the Apple Newton PDA. Development happened in a language specifically designed for the Newton called [[Newton Script]] whose closest kin is Self. I learned this prototypical OO language before doing any serious work in a class-based OO language ([[Java Language]]) and I believe it has broadened the way I think about design.",
            "id": "d52d7110a03387309f1af3f542ee0ef3"
          },
          {
            "type": "html",
            "text": "<i>The former head of research for [[File Maker Pro]] told me that [[Newton Script]] is based on Self -- [[Shae Erisson]]</i>",
            "id": "046eb4a40f0c8b73b5ff349b68861c78"
          },
          {
            "type": "html",
            "text": "\nI love how dynamic the language is. As was written above, there is no distinction between instance variables and methods. 'Slots' are basically named buckets inside an object which can contain either data or code. In one program where execution speed was important, I checked an initalization variable at startup and used that to determine which routine to put in a particular slot. I was essentially modifying the code at runtime.",
            "id": "3420b40be44e43531f4d3e4560b5b860"
          },
          {
            "type": "html",
            "text": "<i>The objects in [[Java Script]] are rather like this. Objects are just associative arrays or maps, from names to members, and members can be functions as well as variables, allowing you to reassign them whenever. There is a standard prototype 'slot' (or </i>property<i>, in [[Java Script]] terminology) that causes the object to effectively inherit features of another object (the value of that property.) So in reality, something rather like Self is most likely enabled in the Web browser you are reading this page with. :) It might make sense to consider the experiences of [[Java Script]] users if you want a picture of what large scale Self usage would be like! Probably not much fun. (Personally I would miss [[Static Type Safety]]...) -- [[Daniel Earwicker]]</i>",
            "id": "ae1d8404a5c67e59ac01c68a8ed3efac"
          },
          {
            "type": "html",
            "text": "\nThe prototype of an object is essentially a delegate. If some bit of code tries to access a slot of an object (either read/write data or method call) and the object doesn't have the slot, then the prototype is automatically checked. This prototype approach is really strong in building GUI code. For example, you could have a [[Basic Button]] object with data slots specifying label, font, color, size, etc. It can handle basic event processing and call a method slot called 'buttonClicked'. Then each time you need a button in your GUI, you set the prototype to [[Basic Button]] and override the label and buttonClicked slots.",
            "id": "24fc793d7913a31dad7bd16cabf5509c"
          },
          {
            "type": "html",
            "text": "\nI've heard it argued that prototypical languages are more fundamental than class-based languages because you can emulate class-based behavior in a prototypical language, but not vice versa.",
            "id": "0956cda0df8d0b3fdaeb0a187415fa81"
          },
          {
            "type": "html",
            "text": "<i>I've recently heard it argued that they both can emulate each other</i> -- [[Greg Vaughn]]",
            "id": "9ce59da9c50288af02e73c28189668a4"
          },
          {
            "type": "html",
            "text": "\nIt's true, they can. I've been reading up on metaclasses in [[Python Language]], and I suddenly realized metaclasses would let you do prototypical Python, I'm sure it would work the other way around as well. -- [[Shae Erisson]]",
            "id": "43f18a1c47e8263ef1d877df054e9020"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "Has anyone played with Kansas, the collaborative development environment that Sun based on [[Self Language]]? -- [[Shae Erisson]]",
            "id": "95a7e3bc0198300c06875450490b52ac"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "Has anyone tried doing [[Extreme Programming]] in Self? ",
            "id": "b274868fe66aa9838fe3702fd3200af7"
          },
          {
            "type": "html",
            "text": "\nI'm starting to do a bit of XP-like stuff in Self now. (Our project doesn't really fit into the classic XP mold - we're more-or-less our own [[Goal Donor]], and there's not much of a deadline, so we don't bother with any of the planning stuff - but we do [[Automated Testing]] and [[Pair Programming]] and [[Refactor Mercilessly]] and all of that.) XP in Self is wonderful for all the same reasons that XP in [[Smalltalk Language]] is wonderful (only more so ;).",
            "id": "6e0e6ee6d93631c5f227b5e1633dac7b"
          },
          {
            "type": "html",
            "text": "\nThe only really interesting thing is the collaborative features of the Self environment. When we program in pairs, instead of both sitting at the same computer, we sometimes sit at our own individual computers (which are right beside each other) and pop up the Self window on both screens. Self gives us each a mouse pointer and a keyboard focus (so it's not like we're constantly fighting over control of the mouse cursor). Most of the time it's pretty much the same as sharing a single computer, but occasionally it smooths the process a little bit. (Instead of trying to get me to notice a typo - \"Complier? Look, you spelled it complier instead of compiler. Over there. Up one line.\" - my partner can just fix it himself.) And sometimes there's the occasional boring task (renaming a bunch of methods, for example) that we can divide up and work on simultaneously.",
            "id": "3f45a680a2ff48e18cfbf2e421b75aaf"
          },
          {
            "type": "html",
            "text": "\nWe've only just started experimenting with this kind of stuff, and I'm sure there are a bunch of cool things we could be doing that we're not doing. :) If we had a larger team, we could probably take better advantage of the extra working room that Self gives us. (We've got an infinite flat plane to work in, so if we wanted to, each pair could go off and work in a different area, and we'd still all be sharing the same world. <i>Real</i> [[Continuous Integration]]. :)",
            "id": "c1a012be8b028b2eb52f0c094a7a53cd"
          },
          {
            "type": "html",
            "text": "\nIf anybody's got any suggestions, or questions, or experiments you'd like us to try, I'd love to hear them. :)",
            "id": "a3c61024edb9fde9a21ee6839094cfd9"
          },
          {
            "type": "html",
            "text": "-- [[Adam Spitz]]",
            "id": "7a3b8ff7e2f010ec8ee0ff623246832f"
          },
          {
            "type": "html",
            "text": " Which version of self are you using?",
            "id": "94e5d85d5b5f2ffee1377bb1ea366dec"
          },
          {
            "type": "html",
            "text": " Where can I get the software?",
            "id": "8fe37cd8feaf9721d1154e9937c63378"
          },
          {
            "type": "html",
            "text": " What does it run on?",
            "id": "330504b1044483b05f7f03f26b45a99d"
          },
          {
            "type": "html",
            "text": " What do I need to do to make it run?",
            "id": "11681097174fcb556ba788e7fc5060bb"
          },
          {
            "type": "html",
            "text": "-- rk",
            "id": "953aa0dc0ec6a0fad5c62851a5fa34ac"
          },
          {
            "type": "html",
            "text": "\nWe're using version 4.2.1, which you can get from the Self homepage ([http://research.sun.com/self research.sun.com]). The version from Sun only runs on the SPARC and on [[Mac Osx]]. (We're running it on [[Mac Os]] 10.3.) It's also possible to go to [http://gliebe.de/ gliebe.de] and get an older version (4.1.6, maybe?) that runs on Linux or (they claim - I haven't tried it) [[Cyg Win]] on [[Microsoft Windows]].",
            "id": "12b8510982a8635d0c1271397d459691"
          },
          {
            "type": "html",
            "text": "\nTo make it run... well, the version from Sun ought to just work, right out of the box. (If it doesn't, please let me know.) I have no idea about the x86 version. (I <i>have</i> gotten Self running on a Linux machine before, so I can promise you that it's possible, but that was about a year ago, and I don't have the machine anymore, and I don't remember the instructions.)",
            "id": "c564f0838327081a45a0d0c99d041b3e"
          },
          {
            "type": "html",
            "text": "-- [[Adam Spitz]]",
            "id": "7a3b8ff7e2f010ec8ee0ff623246832f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "Self's great innovation performance-wise is [[Polymorphic Inline Caches]]. They are now also used in [[Visual Works Smalltalk]].",
            "id": "875d2a0d546ec446f50f15f30177dfe6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "<i>I'm researching the Self VM right now, and it lives on in languages like [[Java Script]]. It's my impression that Sun killed it in favour of Java; and they own it. But even if it \"dies\", it's still an amazing piece of technology that we can reapply elsewhere. -- [[Sunir Shah]]</i>",
            "id": "c4957fa01410c449cdd5403a40e4708b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "[[Java Script]] is very much a prototypical language and it's extremely easy to work with. I wish there were a good development environment. (The debugger provided by the [[Mozilla Browser]] is pretty good though.) It's much easier to add new behavior to third-party classes than even [[Smalltalk Languages]] and other class-based languages (I am a big Smalltalk fan). The ability to add new properties on the fly saves ton of code during GUI development. -- Ram Nukala",
            "id": "ff271c19bf1bf0176c744c0300304871"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "[[Java Script]] is a very nice language that has been tainted by association with bad web code. [[Smalltalk Language]] is wonderful. Self seems to have all the good things of both. But I can't use any of them. Why? They combine a great language with a very specialized environment... Smalltalk and Self are informed and guided by the GUI, and you live or die by the GUI (yes, I know that this is an oversimplification, but in general it's hard to even talk about Smalltalk without a GUI with Smalltalk people), [[Java Script]] with web applications, and so on. I should be able to take a Smalltalk program and compile it to an executable from a script, or run a [[Java Script]] file directly from CMD.EXE or /bin/sh. But while I've found fragments of tools like these, they're always so wrapped around with limitations as to be useless... and I end up programming in [[Cee Language]] or /bin/sh or [[Tcl Language]] because I can depend on them being there where and when I need them. Has anyone any suggestions (other than Castaneda-like Stopping The World and changing careers)? -- Peter da Silva",
            "id": "143abf48cc8683638f8897ee5efa1943"
          },
          {
            "type": "html",
            "text": "\nSuggestions:",
            "id": "27513e43908662addefef0e9e0ec3e00"
          },
          {
            "type": "html",
            "text": " [[Delegator Is Delegation In Java]] makes Delegation available in the [[Java Language]]. It's an API in native Java so adoption for Java Programmers shouldn't be a problem -- [[Klaas Van Schelven]]",
            "id": "8c639db54246649794d3e4ecbeaf893f"
          },
          {
            "type": "html",
            "text": " [[Lua Language]] is very similar to [[Java Script]], but had a chance to mature for longer before public release. While it doesn't have a prototype object model in the core language, it's easy to add one in less than a page of code using \"metatables\", and the primary Lua book ([[Programming In Lua]]) does so to demonstrate OOP. It also integrates remarkably well with [[Cee Language]], and is portable to literally anywhere with an ANSI C compiler. -- [[Scott Vokes]]",
            "id": "598cfed0594ff9e398c358430c7f2117"
          },
          {
            "type": "html",
            "text": " [[Io Language]] is a prototypical language that takes a lot from Self and has an execution model that's more like a [[Scripting Language]].",
            "id": "ca06b3a36e214844e05125a54d23c72e"
          },
          {
            "type": "html",
            "text": " [[Slate Language]] takes from Self, [[Strong Talk]], and Squeak, and attempts to do better than any of them (by learning their lessons and the lessons of those that came after, eg [[Dylan Language]]).",
            "id": "35808b56037957cb9a056a60e53b3575"
          },
          {
            "type": "html",
            "text": " [[Gnu Smalltalk]] is an [[Image Based Language]], like a typical [[Smalltalk Language]], but it's much more file-oriented that typical Smalltalks. Most editions don't even *have* a GUI, though that seems to be changing. Development is usually done in Emacs, and it seems to be possible to write shell script-like things with it. It's faster than Squeak, by my measurements, though not as well supported.",
            "id": "35325ee1d4c0af3c14774cebe2051134"
          },
          {
            "type": "html",
            "text": " There are several [[Java Script]] engines in Unix that can run from the shell:",
            "id": "9b638d5f7eb6beb8820e71043aa945bf"
          },
          {
            "type": "html",
            "text": " njs (supersedes ngs-js) [http://www.njs-javascript.org/ www.njs-javascript.org]",
            "id": "e9a5027f9022c7cfbd20ed27ae3277a5"
          },
          {
            "type": "html",
            "text": " Older: ngs-js [http://people.ssh.com/mtr/js/ people.ssh.com]",
            "id": "0805708023a6d2af7bcbf547b2634d2c"
          },
          {
            "type": "html",
            "text": " Mozilla spidermonkey (in C) [http://www.mozilla.org/js/spidermonkey/ www.mozilla.org]",
            "id": "077704c84b5765e57f52a4a9479dac20"
          },
          {
            "type": "html",
            "text": " Mozilla [[Rhino Interpreter]] (written in Java) [http://www.mozilla.org/rhino/ www.mozilla.org]",
            "id": "b9b50124fbba28f4f9cdfa6174075f26"
          },
          {
            "type": "html",
            "text": "\nOkay, so what's wrong with [[Visual Works]]' headless package? Isn't it supposed to do exactly what Peter wants? A Smalltalk executable without any GUI, browsers or debugger?",
            "id": "d9521414d3cefa8eacd3dd5233e9633f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "\nJust double-checking something. IIRC, Self does <i>not</i> have hidden variables. If that's correct then it means Self can't support capabilities, or any other notion of security, as is. It also means that it's the absolute perfectest candidate for adding an orthogonal security scheme. So can someone confirm or refute that Self's variables are always accessible from outside the object?",
            "id": "e421f03c8783c5aa91d41e9a74c9b182"
          },
          {
            "type": "html",
            "text": "<i>Yes, that's true. -- [[Adam Spitz]]</i>",
            "id": "1917944c7b0feb728725f5381bef25f1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "I just watched <i>Self: The Video</i>. (See [http://www.merlintec.com:8080/Self www.merlintec.com:8080] The page calls it <i>Self: The Movie</i>, though it calls itself \"the Video\".) Is it just me or do they spend more time talking about the things they inherited from [[Smalltalk Language]] (as if they were Self innovations) & very little time talking about what differentiates Self from Smalltalk?",
            "id": "3513cdded646036dd63693362b59fdde"
          },
          {
            "type": "html",
            "text": "\nIt's interesting that they show a Smalltalk environment running under Self. (& they claim it out performs commercial Smalltalk<b></b>s.)",
            "id": "cada75e6a8114f9cf8e03dab4277c3f4"
          },
          {
            "type": "html",
            "text": "-- [[Robert Fisher]]",
            "id": "ed0b06594156f68394d04bfaef009c3e"
          },
          {
            "type": "html",
            "text": "\nI suspect that the benchmarking mentioned in the movie was done on the [[Ana Morphic]] [[Hot Spot Vm]], a virtual machine.  As I understand, it was done by [[Mario Wolczko]].  (Reportedly Sun bought the Anamorphic company assigned the employees and the technology to the Self project, thought the timelines in this essay, [http://research.sun.com/features/tenyears/volcd/papers/ungar.htm research.sun.com] , are confusing.  Names to look for include [[Lars Bak]], [[Urs Hoelzle]] and [[John Maloney]].)  It is indeed interesting that Smalltalk on Self on Hot<b></b>Spot is so fast, and makes Hot<b></b>Spot sound all the more interesting technology.  Now that Hot<b></b>Spot is open source (as part of [[Open Jdk]] [http://openjdk.java.net/groups/hotspot/ openjdk.java.net] ), it can, in principle, be ported to more architectures and more operating systems, and the [[Davinci Machine]] project could result in it again supporting fast Self and fast Smalltalk.",
            "id": "fcf97aaa86950d914c3577768a0ad541"
          },
          {
            "type": "html",
            "text": "\nIs Anamorphic also associated with [[John Maloney]]'s [[Morphic Interface]] for Self, which reappeared in [[Squeak Smalltalk]] and then in [[Dan Ingalls]]'s [[Lively Kernel]] research at Sun ?",
            "id": "6bf3b7a7000f399a0a7182013a3d5e60"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "\nI just read this in the Self manual: \"It is an error to evaluate a block method after the activation record for its lexically enclosing scope has returned. Such a block is called a non-lifo block because returning from it would violate the last-in, first-out semantics of activation object invocation.\nThis restriction is made primarily to allow activation records to be allocated from a stack. A future release of Self may relax this restriction, at least for blocks that do not access variables in enclosing scopes.\"",
            "id": "835c711dccc4c0f1bea019b708fcf597"
          },
          {
            "type": "html",
            "text": "\nIf it is really true that you can't call a closure after the enclosing lexical scope has terminated, then what is the point of having them?  This seems like a very onerous restriction.",
            "id": "95031ee087edcabceb50610eb93290df"
          },
          {
            "type": "html",
            "text": "-- [[Vincent Toups]]",
            "id": "0f604ca78520aa0499bc47867e1baa77"
          },
          {
            "type": "html",
            "text": "<i>While I can't speak for Self specifically, in general you can pass the closure to functions you call. This allows one to perform actions that depend on or alter the closed over data without the called code having to explicitly know about it.</i>",
            "id": "e61482b8fa994fc4b0e596813c5cc19b"
          },
          {
            "type": "html",
            "text": "\nNon-Lifo blocks still work fine for most common uses of closures in [[Smalltalk Language]] type systems such as true ifTrue: [] False: []. If you need more, making one off objects is easy: (| value = ( 3 + 4 ) |) will act as if it were a block, only without the automatic wrapping to the calling context.",
            "id": "51cb61ca1c223bc9f528cc1cf7550357"
          },
          {
            "type": "html",
            "text": "-- [[Russell Allen]]",
            "id": "6c083709bf0bf814807ef9051f700c08"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "94ee25335720f608584e29815a41efea"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]] [[Category Self]] [[Category Prototype Programming]]",
            "id": "2a3a129e4e2d664e371ea5696cd4d1ff"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?SelfLanguage c2.com]",
            "id": "b5420e9fb2568e59c8bb08c2e6b1b079"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1626125028510
    }
  ]
}