{
  "title": "Interpreting Assets Source",
  "story": [
    {
      "type": "paragraph",
      "id": "54a39b1ea079b8c4",
      "text": "These functions read and interpret assets-source data read from the lineup. Open [[Read Assets from Lineup]] for test assets."
    },
    {
      "type": "code",
      "id": "28b66362485f7727",
      "text": "  function sources(topic) {\n    const action = 'requestSourceData'\n    return new Promise(resolve => {\n      let fn = event => {\n        let {data} = event\n        if (!data.action == action) return\n        window.removeEventListener('message', fn)\n        resolve(data.sources)\n      }\n      window.addEventListener('message', fn)\n      window.parent.postMessage({action, topic},\"*\")\n    })\n  }",
      "alias": "c8963fb39e7da82f"
    },
    {
      "type": "paragraph",
      "id": "02472276b235b81b",
      "text": "We expect sources to be return with the closest first. We reverse this when we want entries in left to right order."
    },
    {
      "type": "code",
      "id": "4ec46c57b64fcc51",
      "text": "async function sequence() {\n  let all = await sources('assets')\n  let result = [all[0].panel]\n  for (let pane of all.reverse()) {\n    for (let folder in pane.assetsData) {\n      for (let twin in pane.assetsData[folder]) {\n        let route = `${twin}/${folder}`\n        let files = pane.assetsData[folder][twin]\n        result.push({route, files})\n      }\n    }\n  }\n  let json = JSON.stringify(result,null,2)\n  output.innerHTML = `<pre>${json}</pre>`\n}"
    },
    {
      "type": "code",
      "id": "c8963fb39e7da82f",
      "text": "sequence()"
    },
    {
      "type": "paragraph",
      "id": "5ca5b6e308b8e4ec",
      "text": "We show the first of many identical panel details."
    },
    {
      "type": "frame",
      "id": "777ff878d8f1cc7e",
      "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 600"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Interpreting Assets Source",
        "story": [
          {
            "type": "paragraph",
            "id": "54a39b1ea079b8c4",
            "text": "Explain what this code does."
          },
          {
            "type": "code",
            "id": "c8963fb39e7da82f",
            "text": "2 + 3"
          },
          {
            "type": "frame",
            "id": "777ff878d8f1cc7e",
            "text": "http://js.ward.asia.wiki.org/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 200"
          }
        ]
      },
      "date": 1629498592123
    },
    {
      "id": "28b66362485f7727",
      "type": "add",
      "item": {
        "type": "code",
        "id": "28b66362485f7727",
        "text": "  function sources(topic) {\n    const action = 'requestSourceData'\n    return new Promise(resolve => {\n      let fn = event => {\n        let {data} = event\n        if (!data.action == action) return\n        window.removeEventListener('message', fn)\n        resolve(data.sources)\n      }\n      window.addEventListener('message', fn)\n      window.parent.postMessage({action, topic},\"*\")\n    })\n  }",
        "alias": "c8963fb39e7da82f"
      },
      "after": "54a39b1ea079b8c4",
      "date": 1629498617715
    },
    {
      "id": "4ec46c57b64fcc51",
      "type": "add",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "  const doit = async () => {\n    let res = await sources('marker')\n    let json = JSON.stringify(res,null,2)\n    output.innerHTML = `<pre>${json}</pre>`\n  }\n  doit()"
      },
      "after": "28b66362485f7727",
      "date": 1629498649008
    },
    {
      "type": "edit",
      "id": "4ec46c57b64fcc51",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "  const doit = async () => {\n    let res = await sources('assets')\n    let json = JSON.stringify(res,null,2)\n    output.innerHTML = `<pre>${json}</pre>`\n  }\n  doit()"
      },
      "date": 1629498657937
    },
    {
      "type": "edit",
      "id": "4ec46c57b64fcc51",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "function sequence() {\n  let all = await sources('assets')\n  for (let pane of all.reverse()) {\n    for (let folder in pane.assetsData) {\n      for (let twin in pane.assetsData[folder]) {\n        let files = pane.assetsData[folder][twin]\n        let show = {folder, twin, files}\n        let json = JSON.stringify(show,null,2)\n        output.innerHTML += `<pre>${show}</pre>`\n      }\n    }\n  }\n}"
      },
      "date": 1629499475188
    },
    {
      "type": "edit",
      "id": "c8963fb39e7da82f",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "sequence()"
      },
      "date": 1629499488237
    },
    {
      "type": "edit",
      "id": "4ec46c57b64fcc51",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "async function sequence() {\n  let all = await sources('assets')\n  for (let pane of all.reverse()) {\n    for (let folder in pane.assetsData) {\n      for (let twin in pane.assetsData[folder]) {\n        let files = pane.assetsData[folder][twin]\n        let show = {folder, twin, files}\n        let json = JSON.stringify(show,null,2)\n        output.innerHTML += `<pre>${show}</pre>`\n      }\n    }\n  }\n}"
      },
      "date": 1629499493135
    },
    {
      "type": "edit",
      "id": "4ec46c57b64fcc51",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "async function sequence() {\n  let all = await sources('assets')\n  for (let pane of all.reverse()) {\n    for (let folder in pane.assetsData) {\n      for (let twin in pane.assetsData[folder]) {\n        let files = pane.assetsData[folder][twin]\n        let show = {folder, twin, files}\n        let json = JSON.stringify(show,null,2)\n        output.innerHTML += `<pre>${json}</pre>`\n      }\n    }\n  }\n}"
      },
      "date": 1629499518203
    },
    {
      "type": "edit",
      "id": "4ec46c57b64fcc51",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "async function sequence() {\n  let result = []\n  let all = await sources('assets')\n  for (let pane of all.reverse()) {\n    for (let folder in pane.assetsData) {\n      for (let twin in pane.assetsData[folder]) {\n        let files = pane.assetsData[folder][twin]\n        result.push({folder, twin, files})>`\n      }\n    }\n  }\n  let json = JSON.stringify(result,null,2)\n  output.innerHTML = `<pre>${json}</pre>`\n}"
      },
      "date": 1629499813696
    },
    {
      "type": "edit",
      "id": "4ec46c57b64fcc51",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "async function sequence() {\n  let result = []\n  let all = await sources('assets')\n  for (let pane of all.reverse()) {\n    for (let folder in pane.assetsData) {\n      for (let twin in pane.assetsData[folder]) {\n        let files = pane.assetsData[folder][twin]\n        result.push({folder, twin, files})\n      }\n    }\n  }\n  let json = JSON.stringify(result,null,2)\n  output.innerHTML = `<pre>${json}</pre>`\n}"
      },
      "date": 1629499828968
    },
    {
      "type": "edit",
      "id": "54a39b1ea079b8c4",
      "item": {
        "type": "paragraph",
        "id": "54a39b1ea079b8c4",
        "text": "These functions read and interpret assets-source data read from the lineup. Open [[Read Assets from Lineup]] for test assets."
      },
      "date": 1629500015791
    },
    {
      "type": "add",
      "id": "02472276b235b81b",
      "item": {
        "type": "paragraph",
        "id": "02472276b235b81b",
        "text": "We expect sources to be return with the closest first. we reverse this list if we want entries in left to right order."
      },
      "after": "54a39b1ea079b8c4",
      "date": 1629500148919
    },
    {
      "id": "02472276b235b81b",
      "type": "move",
      "order": [
        "54a39b1ea079b8c4",
        "28b66362485f7727",
        "02472276b235b81b",
        "4ec46c57b64fcc51",
        "c8963fb39e7da82f",
        "777ff878d8f1cc7e"
      ],
      "date": 1629500151576
    },
    {
      "type": "edit",
      "id": "4ec46c57b64fcc51",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "async function sequence() {\n  let all = await sources('assets')\n  let result = [all[0]]\n  for (let pane of all.reverse()) {\n    for (let folder in pane.assetsData) {\n      for (let twin in pane.assetsData[folder]) {\n        let files = pane.assetsData[folder][twin]\n        result.push({folder, twin, files})\n      }\n    }\n  }\n  let json = JSON.stringify(result,null,2)\n  output.innerHTML = `<pre>${json}</pre>`\n}"
      },
      "date": 1629500263106
    },
    {
      "type": "edit",
      "id": "4ec46c57b64fcc51",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "async function sequence() {\n  let all = await sources('assets')\n  let result = [all[0].panel]\n  for (let pane of all.reverse()) {\n    for (let folder in pane.assetsData) {\n      for (let twin in pane.assetsData[folder]) {\n        let files = pane.assetsData[folder][twin]\n        result.push({folder, twin, files})\n      }\n    }\n  }\n  let json = JSON.stringify(result,null,2)\n  output.innerHTML = `<pre>${json}</pre>`\n}"
      },
      "date": 1629500413059
    },
    {
      "type": "edit",
      "id": "4ec46c57b64fcc51",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "async function sequence() {\n  let all = await sources('assets')\n  let result = [all[0].panel]\n  for (let pane of all.reverse()) {\n    for (let folder in pane.assetsData) {\n      for (let twin in pane.assetsData[folder]) {\n        let files = pane.assetsData[folder][twin]\n        result.push({twin, folder, files})\n      }\n    }\n  }\n  let json = JSON.stringify(result,null,2)\n  output.innerHTML = `<pre>${json}</pre>`\n}"
      },
      "date": 1629500672540
    },
    {
      "type": "edit",
      "id": "02472276b235b81b",
      "item": {
        "type": "paragraph",
        "id": "02472276b235b81b",
        "text": "We expect sources to be return with the closest first. We reverse this when we want entries in left to right order."
      },
      "date": 1629501822369
    },
    {
      "type": "add",
      "id": "5ca5b6e308b8e4ec",
      "item": {
        "type": "paragraph",
        "id": "5ca5b6e308b8e4ec",
        "text": "Each result includes panel information. We show only one here because our test Assets are all viewed from the same page."
      },
      "after": "02472276b235b81b",
      "date": 1629501940052
    },
    {
      "id": "5ca5b6e308b8e4ec",
      "type": "move",
      "order": [
        "54a39b1ea079b8c4",
        "28b66362485f7727",
        "02472276b235b81b",
        "4ec46c57b64fcc51",
        "c8963fb39e7da82f",
        "5ca5b6e308b8e4ec",
        "777ff878d8f1cc7e"
      ],
      "date": 1629501944943
    },
    {
      "type": "edit",
      "id": "5ca5b6e308b8e4ec",
      "item": {
        "type": "paragraph",
        "id": "5ca5b6e308b8e4ec",
        "text": "Each result includes panel information. We show only one panel because our test Assets plugins are all on the same page."
      },
      "date": 1629501984611
    },
    {
      "type": "edit",
      "id": "5ca5b6e308b8e4ec",
      "item": {
        "type": "paragraph",
        "id": "5ca5b6e308b8e4ec",
        "text": "Each result includes panel information. We show the first panel only because our test Assets plugins are all on the same page."
      },
      "date": 1629502053083
    },
    {
      "type": "edit",
      "id": "5ca5b6e308b8e4ec",
      "item": {
        "type": "paragraph",
        "id": "5ca5b6e308b8e4ec",
        "text": "We show the first of many identical panel details."
      },
      "date": 1629502098554
    },
    {
      "type": "edit",
      "id": "4ec46c57b64fcc51",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "async function sequence() {\n  let all = await sources('assets')\n  let result = [all[0].panel]\n  for (let pane of all.reverse()) {\n    for (let folder in pane.assetsData) {\n      for (let twin in pane.assetsData[folder]) {\n\n        let files = pane.assetsData[folder][twin]\n        result.push({twin, folder, files})\n      }\n    }\n  }\n  let json = JSON.stringify(result,null,2)\n  output.innerHTML = `<pre>${json}</pre>`\n}"
      },
      "date": 1629502160980
    },
    {
      "type": "edit",
      "id": "4ec46c57b64fcc51",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "async function sequence() {\n  let all = await sources('assets')\n  let result = [all[0].panel]\n  for (let pane of all.reverse()) {\n    for (let folder in pane.assetsData) {\n      for (let twin in pane.assetsData[folder]) {\n        let endpoint = `${twin}/${folder}`\n        let files = pane.assetsData[folder][twin]\n        result.push({endpoint, files})\n      }\n    }\n  }\n  let json = JSON.stringify(result,null,2)\n  output.innerHTML = `<pre>${json}</pre>`\n}"
      },
      "date": 1629502259096
    },
    {
      "type": "edit",
      "id": "4ec46c57b64fcc51",
      "item": {
        "type": "code",
        "id": "4ec46c57b64fcc51",
        "text": "async function sequence() {\n  let all = await sources('assets')\n  let result = [all[0].panel]\n  for (let pane of all.reverse()) {\n    for (let folder in pane.assetsData) {\n      for (let twin in pane.assetsData[folder]) {\n        let route = `${twin}/${folder}`\n        let files = pane.assetsData[folder][twin]\n        result.push({route, files})\n      }\n    }\n  }\n  let json = JSON.stringify(result,null,2)\n  output.innerHTML = `<pre>${json}</pre>`\n}"
      },
      "date": 1629502365548
    },
    {
      "type": "edit",
      "id": "777ff878d8f1cc7e",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "http://js.ward.asia.wiki.org/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 400"
      },
      "date": 1629502464252
    },
    {
      "type": "edit",
      "id": "777ff878d8f1cc7e",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "http://js.ward.asia.wiki.org/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 500"
      },
      "date": 1629502476215
    },
    {
      "type": "edit",
      "id": "777ff878d8f1cc7e",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "http://js.ward.asia.wiki.org/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 600"
      },
      "date": 1629502486663
    },
    {
      "type": "fork",
      "site": "js.ward.asia.wiki.org",
      "date": 1678894124291
    },
    {
      "type": "edit",
      "id": "777ff878d8f1cc7e",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 600"
      },
      "date": 1678894144454
    }
  ]
}