{
  "title": "Torch",
  "story": [
    {
      "type": "paragraph",
      "id": "be4d64c47094f1f5",
      "text": "Torch provides tool support to characterize single deltas based on a RingS model. It uses several\nof the integrators’ information needs to provide such characterization of changes and by means of\nvisualizations aid integrators to comprehend these changes and their context. Torch provides a visual\ndashboard that not only shows the changes between two versions but also the version in which those\nchanges were applied."
    },
    {
      "type": "paragraph",
      "id": "fbb86bbd35751efd",
      "text": "The Torch dashboard presents metrics about changes, a set of visualizations showing the structural\ninformation of changes, symbolic clouds of the changed source code, several panels to explore the\ndetails of changes, and two diffs as a fly-by-help to quickly explore information of changes. By com-\nbining graphical and textual information, Torch brings semantic information to change exploration."
    },
    {
      "type": "pagefold",
      "id": "8d249a981c9344bb",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "fca9ea3413720f52",
      "text": "[[Verónica Isabel Uquillas Gómez]], Supporting Integration Activities in Object-Oriented Applications. Brussel, Oktober 2012"
    },
    {
      "type": "markdown",
      "id": "d67dde346792cea4",
      "text": "> **Abstract**. Modern software is built by teams of developers that work in a collaborative environment. The goal of this kind of development is that multiple developers can work in parallel. They can alter a set of shared artifacts and inspect and integrate the source code changes of other developers. For example, bug fixes, enhancements, new features or adaptations due to changing environment might be integrated into the system release.\n>\n> At a technical level, a collaborative development process is supported by version control systems. Since these version control systems allow developers to work in their own branch, merging and integration have become an integral part of the development process. These systems use automatic and advanced merging techniques to help developers to merge their modifications in the development repositories. However, these techniques do not guarantee to have a functional system.\n>\n> While the use of branching in the development process offers numerous advantages, the activity of merging and integrating changes is hampered by the lack of comprehensive support to assist developers in these activities. For example, the integration of changes can have an unexpected impact on the design or behavior of the system, leading to the introduction of subtle bugs. Furthermore, developers are not supported when integrating changes across branches (cherry picking), when dealing with branches that have diverged, when finding the dependencies between changes, or when assessing the potential impact of changes.\n>\n> In this dissertation we present an approach that aims at alleviating these problems by providing developers and, more precisely, integrators with semi-automated support for assisted integration within a branch and across branches. We focus on helping integrators with their information needs when understanding and integrating changes by means of characterizations of changes and streams of changes (i.e., sequence of successive changes within a branch) together with their dependencies.\n>\n> These characterizations rely on the first-class representation of systems’ histories and changes\nbased on program entities and their relationships rather than on files and text. For this, we provide a family of meta-models (*Ring*, *RingH*, *RingS* and *RingC*) that offer us the representation of program entities, systems’ histories, changes and their dependencies, along with analyses for version comparison, and change and dependency identification. Instances of these meta-models are then used by our proposed tool support to enable integrators to analyze the characterizations and changes. *Torch*, a\nvisual tool, and *JET*, a set of tools, actually provide the information needs to assist integration within a branch and across branches by means of the characterization of changes and streams of changes respectively."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Torch",
        "story": []
      },
      "date": 1641406815745
    },
    {
      "item": {
        "type": "factory",
        "id": "be4d64c47094f1f5"
      },
      "id": "be4d64c47094f1f5",
      "type": "add",
      "date": 1641406828374
    },
    {
      "type": "edit",
      "id": "be4d64c47094f1f5",
      "item": {
        "type": "paragraph",
        "id": "be4d64c47094f1f5",
        "text": "Torch provides tool support to characterize single deltas based on a RingS model. It uses several\nof the integrators’ information needs to provide such characterization of changes and by means of\nvisualizations aid integrators to comprehend these changes and their context. Torch provides a visual\ndashboard that not only shows the changes between two versions but also the version in which those\nchanges were applied.\nThe Torch dashboard presents metrics about changes, a set of visualizations showing the structural\ninformation of changes, symbolic clouds of the changed source code, several panels to explore the\ndetails of changes, and two diffs as a fly-by-help to quickly explore information of changes. By com-\nbining graphical and textual information, Torch brings semantic information to change exploration."
      },
      "date": 1641406829919
    },
    {
      "type": "edit",
      "id": "be4d64c47094f1f5",
      "item": {
        "type": "paragraph",
        "id": "be4d64c47094f1f5",
        "text": "Torch provides tool support to characterize single deltas based on a RingS model. It uses several\nof the integrators’ information needs to provide such characterization of changes and by means of\nvisualizations aid integrators to comprehend these changes and their context. Torch provides a visual\ndashboard that not only shows the changes between two versions but also the version in which those\nchanges were applied."
      },
      "date": 1641406834988
    },
    {
      "type": "add",
      "id": "fbb86bbd35751efd",
      "item": {
        "type": "paragraph",
        "id": "fbb86bbd35751efd",
        "text": "The Torch dashboard presents metrics about changes, a set of visualizations showing the structural\ninformation of changes, symbolic clouds of the changed source code, several panels to explore the\ndetails of changes, and two diffs as a fly-by-help to quickly explore information of changes. By com-\nbining graphical and textual information, Torch brings semantic information to change exploration."
      },
      "after": "be4d64c47094f1f5",
      "date": 1641406841009
    },
    {
      "item": {
        "type": "factory",
        "id": "fca9ea3413720f52"
      },
      "id": "fca9ea3413720f52",
      "type": "add",
      "after": "fbb86bbd35751efd",
      "date": 1641406977388
    },
    {
      "type": "edit",
      "id": "fca9ea3413720f52",
      "item": {
        "type": "paragraph",
        "id": "fca9ea3413720f52",
        "text": "[[Verónica Isabel Uquillas Gómez]]"
      },
      "date": 1641406982317
    },
    {
      "type": "edit",
      "id": "fca9ea3413720f52",
      "item": {
        "type": "paragraph",
        "id": "fca9ea3413720f52",
        "text": "[[Verónica Isabel Uquillas Gómez]], Supporting Integration Activities in Object-Oriented Applications"
      },
      "date": 1641406997520
    },
    {
      "type": "edit",
      "id": "fca9ea3413720f52",
      "item": {
        "type": "paragraph",
        "id": "fca9ea3413720f52",
        "text": "[[Verónica Isabel Uquillas Gómez]], Supporting Integration Activities in Object-Oriented Applications. Brussel, Oktober 2012"
      },
      "date": 1641407007893
    },
    {
      "item": {
        "type": "factory",
        "id": "8d249a981c9344bb"
      },
      "id": "8d249a981c9344bb",
      "type": "add",
      "after": "fca9ea3413720f52",
      "date": 1641407014743
    },
    {
      "type": "edit",
      "id": "8d249a981c9344bb",
      "item": {
        "type": "pagefold",
        "id": "8d249a981c9344bb",
        "text": "~"
      },
      "date": 1641407018307
    },
    {
      "id": "8d249a981c9344bb",
      "type": "move",
      "order": [
        "be4d64c47094f1f5",
        "fbb86bbd35751efd",
        "8d249a981c9344bb",
        "fca9ea3413720f52"
      ],
      "date": 1641407021908
    },
    {
      "item": {
        "type": "factory",
        "id": "d67dde346792cea4"
      },
      "id": "d67dde346792cea4",
      "type": "add",
      "after": "fca9ea3413720f52",
      "date": 1641407057774
    },
    {
      "type": "edit",
      "id": "d67dde346792cea4",
      "item": {
        "type": "markdown",
        "id": "d67dde346792cea4",
        "text": "> Modern software is built by teams of developers that work in a collaborative environment. The goal of\nthis kind of development is that multiple developers can work in parallel. They can alter a set of shared\nartifacts and inspect and integrate the source code changes of other developers. For example, bug\nfixes, enhancements, new features or adaptations due to changing environment might be integrated\ninto the system release.\nAt a technical level, a collaborative development process is supported by version control systems.\nSince these version control systems allow developers to work in their own branch, merging and in-\ntegration have become an integral part of the development process. These systems use automatic\nand advanced merging techniques to help developers to merge their modifications in the development\nrepositories. However, these techniques do not guarantee to have a functional system.\nWhile the use of branching in the development process offers numerous advantages, the activity\nof merging and integrating changes is hampered by the lack of comprehensive support to assist de-\nvelopers in these activities. For example, the integration of changes can have an unexpected impact\non the design or behavior of the system, leading to the introduction of subtle bugs. Furthermore, de-\nvelopers are not supported when integrating changes across branches (cherry picking), when dealing\nwith branches that have diverged, when finding the dependencies between changes, or when assessing\nthe potential impact of changes.\nIn this dissertation we present an approach that aims at alleviating these problems by provid-\ning developers and, more precisely, integrators with semi-automated support for assisted integration\nwithin a branch and across branches. We focus on helping integrators with their information needs\nwhen understanding and integrating changes by means of characterizations of changes and streams\nof changes (i.e., sequence of successive changes within a branch) together with their dependencies.\nThese characterizations rely on the first-class representation of systems’ histories and changes\nbased on program entities and their relationships rather than on files and text. For this, we provide a\nfamily of meta-models (Ring, RingH, RingS and RingC) that offer us the representation of program\nentities, systems’ histories, changes and their dependencies, along with analyses for version compar-\nison, and change and dependency identification. Instances of these meta-models are then used by our\nproposed tool support to enable integrators to analyze the characterizations and changes. Torch, a\nvisual tool, and JET, a set of tools, actually provide the information needs to assist integration within\na branch and across branches by means of the characterization of changes and streams of changes\nrespectively."
      },
      "date": 1641407062460
    },
    {
      "type": "edit",
      "id": "d67dde346792cea4",
      "item": {
        "type": "markdown",
        "id": "d67dde346792cea4",
        "text": "> **Abstract**. Modern software is built by teams of developers that work in a collaborative environment. The goal of this kind of development is that multiple developers can work in parallel. They can alter a set of shared\nartifacts and inspect and integrate the source code changes of other developers. For example, bug\nfixes, enhancements, new features or adaptations due to changing environment might be integrated\ninto the system release.\nAt a technical level, a collaborative development process is supported by version control systems.\nSince these version control systems allow developers to work in their own branch, merging and in-\ntegration have become an integral part of the development process. These systems use automatic\nand advanced merging techniques to help developers to merge their modifications in the development\nrepositories. However, these techniques do not guarantee to have a functional system.\nWhile the use of branching in the development process offers numerous advantages, the activity\nof merging and integrating changes is hampered by the lack of comprehensive support to assist de-\nvelopers in these activities. For example, the integration of changes can have an unexpected impact\non the design or behavior of the system, leading to the introduction of subtle bugs. Furthermore, de-\nvelopers are not supported when integrating changes across branches (cherry picking), when dealing\nwith branches that have diverged, when finding the dependencies between changes, or when assessing\nthe potential impact of changes.\nIn this dissertation we present an approach that aims at alleviating these problems by provid-\ning developers and, more precisely, integrators with semi-automated support for assisted integration\nwithin a branch and across branches. We focus on helping integrators with their information needs\nwhen understanding and integrating changes by means of characterizations of changes and streams\nof changes (i.e., sequence of successive changes within a branch) together with their dependencies.\nThese characterizations rely on the first-class representation of systems’ histories and changes\nbased on program entities and their relationships rather than on files and text. For this, we provide a\nfamily of meta-models (Ring, RingH, RingS and RingC) that offer us the representation of program\nentities, systems’ histories, changes and their dependencies, along with analyses for version compar-\nison, and change and dependency identification. Instances of these meta-models are then used by our\nproposed tool support to enable integrators to analyze the characterizations and changes. Torch, a\nvisual tool, and JET, a set of tools, actually provide the information needs to assist integration within\na branch and across branches by means of the characterization of changes and streams of changes\nrespectively."
      },
      "date": 1641407088276
    },
    {
      "type": "edit",
      "id": "d67dde346792cea4",
      "item": {
        "type": "markdown",
        "id": "d67dde346792cea4",
        "text": "> **Abstract**. Modern software is built by teams of developers that work in a collaborative environment. The goal of this kind of development is that multiple developers can work in parallel. They can alter a set of shared artifacts and inspect and integrate the source code changes of other developers. For example, bug fixes, enhancements, new features or adaptations due to changing environment might be integrated\ninto the system release.\n>\n> At a technical level, a collaborative development process is supported by version control systems.\nSince these version control systems allow developers to work in their own branch, merging and in-\ntegration have become an integral part of the development process. These systems use automatic\nand advanced merging techniques to help developers to merge their modifications in the development\nrepositories. However, these techniques do not guarantee to have a functional system.\nWhile the use of branching in the development process offers numerous advantages, the activity\nof merging and integrating changes is hampered by the lack of comprehensive support to assist de-\nvelopers in these activities. For example, the integration of changes can have an unexpected impact\non the design or behavior of the system, leading to the introduction of subtle bugs. Furthermore, de-\nvelopers are not supported when integrating changes across branches (cherry picking), when dealing\nwith branches that have diverged, when finding the dependencies between changes, or when assessing\nthe potential impact of changes.\nIn this dissertation we present an approach that aims at alleviating these problems by provid-\ning developers and, more precisely, integrators with semi-automated support for assisted integration\nwithin a branch and across branches. We focus on helping integrators with their information needs\nwhen understanding and integrating changes by means of characterizations of changes and streams\nof changes (i.e., sequence of successive changes within a branch) together with their dependencies.\nThese characterizations rely on the first-class representation of systems’ histories and changes\nbased on program entities and their relationships rather than on files and text. For this, we provide a\nfamily of meta-models (Ring, RingH, RingS and RingC) that offer us the representation of program\nentities, systems’ histories, changes and their dependencies, along with analyses for version compar-\nison, and change and dependency identification. Instances of these meta-models are then used by our\nproposed tool support to enable integrators to analyze the characterizations and changes. Torch, a\nvisual tool, and JET, a set of tools, actually provide the information needs to assist integration within\na branch and across branches by means of the characterization of changes and streams of changes\nrespectively."
      },
      "date": 1641407110296
    },
    {
      "type": "edit",
      "id": "d67dde346792cea4",
      "item": {
        "type": "markdown",
        "id": "d67dde346792cea4",
        "text": "> **Abstract**. Modern software is built by teams of developers that work in a collaborative environment. The goal of this kind of development is that multiple developers can work in parallel. They can alter a set of shared artifacts and inspect and integrate the source code changes of other developers. For example, bug fixes, enhancements, new features or adaptations due to changing environment might be integrated into the system release.\n>\n> At a technical level, a collaborative development process is supported by version control systems.\nSince these version control systems allow developers to work in their own branch, merging and in-\ntegration have become an integral part of the development process. These systems use automatic\nand advanced merging techniques to help developers to merge their modifications in the development\nrepositories. However, these techniques do not guarantee to have a functional system.\nWhile the use of branching in the development process offers numerous advantages, the activity\nof merging and integrating changes is hampered by the lack of comprehensive support to assist de-\nvelopers in these activities. For example, the integration of changes can have an unexpected impact\non the design or behavior of the system, leading to the introduction of subtle bugs. Furthermore, de-\nvelopers are not supported when integrating changes across branches (cherry picking), when dealing\nwith branches that have diverged, when finding the dependencies between changes, or when assessing\nthe potential impact of changes.\nIn this dissertation we present an approach that aims at alleviating these problems by provid-\ning developers and, more precisely, integrators with semi-automated support for assisted integration\nwithin a branch and across branches. We focus on helping integrators with their information needs\nwhen understanding and integrating changes by means of characterizations of changes and streams\nof changes (i.e., sequence of successive changes within a branch) together with their dependencies.\nThese characterizations rely on the first-class representation of systems’ histories and changes\nbased on program entities and their relationships rather than on files and text. For this, we provide a\nfamily of meta-models (Ring, RingH, RingS and RingC) that offer us the representation of program\nentities, systems’ histories, changes and their dependencies, along with analyses for version compar-\nison, and change and dependency identification. Instances of these meta-models are then used by our\nproposed tool support to enable integrators to analyze the characterizations and changes. Torch, a\nvisual tool, and JET, a set of tools, actually provide the information needs to assist integration within\na branch and across branches by means of the characterization of changes and streams of changes\nrespectively."
      },
      "date": 1641407131234
    },
    {
      "type": "edit",
      "id": "d67dde346792cea4",
      "item": {
        "type": "markdown",
        "id": "d67dde346792cea4",
        "text": "> **Abstract**. Modern software is built by teams of developers that work in a collaborative environment. The goal of this kind of development is that multiple developers can work in parallel. They can alter a set of shared artifacts and inspect and integrate the source code changes of other developers. For example, bug fixes, enhancements, new features or adaptations due to changing environment might be integrated into the system release.\n>\n> At a technical level, a collaborative development process is supported by version control systems. Since these version control systems allow developers to work in their own branch, merging and integration have become an integral part of the development process. These systems use automatic and advanced merging techniques to help developers to merge their modifications in the development repositories. However, these techniques do not guarantee to have a functional system.\n>\n> While the use of branching in the development process offers numerous advantages, the activity\nof merging and integrating changes is hampered by the lack of comprehensive support to assist de-\nvelopers in these activities. For example, the integration of changes can have an unexpected impact on the design or behavior of the system, leading to the introduction of subtle bugs. Furthermore, developers are not supported when integrating changes across branches (cherry picking), when dealing with branches that have diverged, when finding the dependencies between changes, or when assessing the potential impact of changes.\n>\n> In this dissertation we present an approach that aims at alleviating these problems by providing developers and, more precisely, integrators with semi-automated support for assisted integration within a branch and across branches. We focus on helping integrators with their information needs when understanding and integrating changes by means of characterizations of changes and streams of changes (i.e., sequence of successive changes within a branch) together with their dependencies.\n>\n> These characterizations rely on the first-class representation of systems’ histories and changes\nbased on program entities and their relationships rather than on files and text. For this, we provide a family of meta-models (*Ring*, *RingH*, *RingS* and *RingC*) that offer us the representation of program entities, systems’ histories, changes and their dependencies, along with analyses for version comparison, and change and dependency identification. Instances of these meta-models are then used by our proposed tool support to enable integrators to analyze the characterizations and changes. *Torch*, a\nvisual tool, and *JET*, a set of tools, actually provide the information needs to assist integration within a branch and across branches by means of the characterization of changes and streams of changes respectively."
      },
      "date": 1641407287256
    },
    {
      "type": "edit",
      "id": "d67dde346792cea4",
      "item": {
        "type": "markdown",
        "id": "d67dde346792cea4",
        "text": "> **Abstract**. Modern software is built by teams of developers that work in a collaborative environment. The goal of this kind of development is that multiple developers can work in parallel. They can alter a set of shared artifacts and inspect and integrate the source code changes of other developers. For example, bug fixes, enhancements, new features or adaptations due to changing environment might be integrated into the system release.\n>\n> At a technical level, a collaborative development process is supported by version control systems. Since these version control systems allow developers to work in their own branch, merging and integration have become an integral part of the development process. These systems use automatic and advanced merging techniques to help developers to merge their modifications in the development repositories. However, these techniques do not guarantee to have a functional system.\n>\n> While the use of branching in the development process offers numerous advantages, the activity of merging and integrating changes is hampered by the lack of comprehensive support to assist developers in these activities. For example, the integration of changes can have an unexpected impact on the design or behavior of the system, leading to the introduction of subtle bugs. Furthermore, developers are not supported when integrating changes across branches (cherry picking), when dealing with branches that have diverged, when finding the dependencies between changes, or when assessing the potential impact of changes.\n>\n> In this dissertation we present an approach that aims at alleviating these problems by providing developers and, more precisely, integrators with semi-automated support for assisted integration within a branch and across branches. We focus on helping integrators with their information needs when understanding and integrating changes by means of characterizations of changes and streams of changes (i.e., sequence of successive changes within a branch) together with their dependencies.\n>\n> These characterizations rely on the first-class representation of systems’ histories and changes\nbased on program entities and their relationships rather than on files and text. For this, we provide a family of meta-models (*Ring*, *RingH*, *RingS* and *RingC*) that offer us the representation of program entities, systems’ histories, changes and their dependencies, along with analyses for version comparison, and change and dependency identification. Instances of these meta-models are then used by our proposed tool support to enable integrators to analyze the characterizations and changes. *Torch*, a\nvisual tool, and *JET*, a set of tools, actually provide the information needs to assist integration within a branch and across branches by means of the characterization of changes and streams of changes respectively."
      },
      "date": 1641407319472
    }
  ]
}