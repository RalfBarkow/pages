{
  "title": "Extract to Files",
  "story": [
    {
      "type": "paragraph",
      "id": "4e43f60a0a18ac6e",
      "text": "Sources can be highly variable in how much data is available and how quickly it can be retrieved. Cache each extract as flat raw json files that can be examined and processed repeatedly."
    },
    {
      "type": "paragraph",
      "id": "30e932a2a7849572",
      "text": "Script the extraction so that it can be repeated daily to get fresh data. Design scripts to run locally for testing and in batch under automatic control. A common debugging scenario is to run the extract script locally for a failed extract source adding print statements as necessary."
    },
    {
      "type": "code",
      "id": "29f6fd8456d8ded5",
      "text": "./data/<source>/raw.json"
    },
    {
      "type": "paragraph",
      "id": "e3e1a9cb0b7c7955",
      "text": "Choose the simplest extraction methods that will yield identifiable nodes first. Prefer raw data that is organized as an array of object, each destine to become a node."
    },
    {
      "type": "paragraph",
      "id": "c4fd13a817d2c632",
      "text": "Format raw json files to be easily read with command line tools and text editors. Use tools and editors that can read large files without choking. Expect to text search these files to find missing or malformed records."
    },
    {
      "type": "paragraph",
      "id": "346417c36e2b963f",
      "text": "See [[Github Example]]"
    },
    {
      "type": "paragraph",
      "id": "194266e4858208af",
      "text": "With each extraction we create an additional file with source details we will use to document when and how the extraction has taken place."
    },
    {
      "type": "code",
      "id": "cf86bc711f8b333f",
      "text": "cat <EOF >explain.yml\ndate: `date`\ndescription: \"blah blah blah\"\nlinks:\n- http://github.com ...\n- http://data.example.com ...\nEOF"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Extract to Files",
        "story": []
      },
      "date": 1507774838480
    },
    {
      "item": {
        "type": "factory",
        "id": "4e43f60a0a18ac6e"
      },
      "id": "4e43f60a0a18ac6e",
      "type": "add",
      "date": 1507774840886
    },
    {
      "type": "edit",
      "id": "4e43f60a0a18ac6e",
      "item": {
        "type": "paragraph",
        "id": "4e43f60a0a18ac6e",
        "text": "Sources can be highly variable in how much data is available and how quickly it can be retrieved. Cache each extract as flat json files that can be examined and processed repeatedly."
      },
      "date": 1507774955250
    },
    {
      "type": "edit",
      "id": "4e43f60a0a18ac6e",
      "item": {
        "type": "paragraph",
        "id": "4e43f60a0a18ac6e",
        "text": "Sources can be highly variable in how much data is available and how quickly it can be retrieved. Cache each extract as flat raw json files that can be examined and processed repeatedly."
      },
      "date": 1507775024377
    },
    {
      "type": "add",
      "id": "30e932a2a7849572",
      "item": {
        "type": "paragraph",
        "id": "30e932a2a7849572",
        "text": "Script the extraction so that it can be repeated daily to get fresh data. Design scripts to run locally for testing and in batch under automatic control. A common debugging scenario is to run the extract script locally for a failed extract source adding print statements as necessary."
      },
      "after": "4e43f60a0a18ac6e",
      "date": 1507775457582
    },
    {
      "type": "add",
      "id": "e3e1a9cb0b7c7955",
      "item": {
        "type": "paragraph",
        "id": "e3e1a9cb0b7c7955",
        "text": "Choose the simplest extraction methods that will yield identifiable nodes first. "
      },
      "after": "30e932a2a7849572",
      "date": 1507775860364
    },
    {
      "item": {
        "type": "factory",
        "id": "29f6fd8456d8ded5"
      },
      "id": "29f6fd8456d8ded5",
      "type": "add",
      "after": "e3e1a9cb0b7c7955",
      "date": 1507775863365
    },
    {
      "type": "edit",
      "id": "29f6fd8456d8ded5",
      "item": {
        "type": "code",
        "id": "29f6fd8456d8ded5",
        "text": "./data/<source>/raw.json"
      },
      "date": 1507775903636
    },
    {
      "type": "move",
      "order": [
        "4e43f60a0a18ac6e",
        "30e932a2a7849572",
        "29f6fd8456d8ded5",
        "e3e1a9cb0b7c7955"
      ],
      "id": "29f6fd8456d8ded5",
      "date": 1507775907655
    },
    {
      "type": "edit",
      "id": "e3e1a9cb0b7c7955",
      "item": {
        "type": "paragraph",
        "id": "e3e1a9cb0b7c7955",
        "text": "Choose the simplest extraction methods that will yield identifiable nodes first. Prefer raw data that is organized as an array of object, each destine to become a node."
      },
      "date": 1507775983849
    },
    {
      "type": "add",
      "id": "c4fd13a817d2c632",
      "item": {
        "type": "paragraph",
        "id": "c4fd13a817d2c632",
        "text": "Format raw json files to be easily read with command line tools and text editors. Use tools and editors that can read large files without choking."
      },
      "after": "e3e1a9cb0b7c7955",
      "date": 1507776190513
    },
    {
      "type": "edit",
      "id": "c4fd13a817d2c632",
      "item": {
        "type": "paragraph",
        "id": "c4fd13a817d2c632",
        "text": "Format raw json files to be easily read with command line tools and text editors. Use tools and editors that can read large files without choking. Expect to text search these files to find missing or malformed records."
      },
      "date": 1507776249545
    },
    {
      "type": "add",
      "id": "346417c36e2b963f",
      "item": {
        "type": "paragraph",
        "id": "346417c36e2b963f",
        "text": "See [[Github Example]]"
      },
      "after": "c4fd13a817d2c632",
      "date": 1508434195218
    },
    {
      "type": "add",
      "id": "194266e4858208af",
      "item": {
        "type": "paragraph",
        "id": "194266e4858208af",
        "text": "With each extraction we create an additional file with source details we will use to document when and how the extraction has taken place."
      },
      "after": "c4fd13a817d2c632",
      "date": 1508591781537
    },
    {
      "type": "move",
      "order": [
        "4e43f60a0a18ac6e",
        "30e932a2a7849572",
        "29f6fd8456d8ded5",
        "e3e1a9cb0b7c7955",
        "c4fd13a817d2c632",
        "346417c36e2b963f",
        "194266e4858208af"
      ],
      "id": "346417c36e2b963f",
      "date": 1508591790372
    },
    {
      "item": {
        "type": "factory",
        "id": "cf86bc711f8b333f"
      },
      "id": "cf86bc711f8b333f",
      "type": "add",
      "after": "194266e4858208af",
      "date": 1508591803051
    },
    {
      "type": "edit",
      "id": "cf86bc711f8b333f",
      "item": {
        "type": "code",
        "id": "cf86bc711f8b333f",
        "text": "cat <EOF >explain.yml\ndate: `date`\ndescription: \"blah blah blah\"\nlinks:\n- http://github.com ...\n- http://data.example.com ...\nEOF"
      },
      "date": 1508592002910
    },
    {
      "type": "fork",
      "site": "ddd.ward.wiki.org",
      "date": 1627665492622
    }
  ]
}