{
  "title": "support",
  "story": [
    {
      "type": "markdown",
      "id": "c170768efb861e61",
      "text": "* unlimited [[Backtracking]], provide ordered choice as a means for disambiguation, and can combine scanning (lexical analysis) and parsing (syntactic analysis) into a single activity. "
    },
    {
      "type": "pagefold",
      "id": "df2d6cc6c1c8188d",
      "text": "~"
    },
    {
      "type": "graphviz",
      "id": "217a7175c6a468af",
      "text": "DOT FROM lambda-browsing"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "support",
        "story": []
      },
      "date": 1662095076870
    },
    {
      "id": "c170768efb861e61",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "c170768efb861e61",
        "text": "peg and leg are tools for generating recursive-descent parsers: programs that perform pattern matching on text. They processes a Parsing Expression Grammar ([[PEG]]) [Ford 2004] to produce a program that recognises legal sentences of that grammar. peg processes PEGs written using the original syntax described by Ford; leg processes PEGs written using slightly different syntax and conventions that are intended to make it an attractive replacement for parsers built with lex and yacc. Unlike lex and yacc, peg and leg [[support]] unlimited backtracking, provide ordered choice as a means for disambiguation, and can combine scanning (lexical analysis) and parsing (syntactic analysis) into a single activity. "
      },
      "date": 1662095085120
    },
    {
      "type": "edit",
      "id": "c170768efb861e61",
      "item": {
        "type": "markdown",
        "id": "c170768efb861e61",
        "text": "* unlimited backtracking, provide ordered choice as a means for disambiguation, and can combine scanning (lexical analysis) and parsing (syntactic analysis) into a single activity. "
      },
      "date": 1662095096690
    },
    {
      "item": {
        "type": "factory",
        "id": "217a7175c6a468af"
      },
      "id": "217a7175c6a468af",
      "type": "add",
      "after": "c170768efb861e61",
      "date": 1662095118957
    },
    {
      "type": "edit",
      "id": "217a7175c6a468af",
      "item": {
        "type": "graphviz",
        "id": "217a7175c6a468af",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1662095126430
    },
    {
      "item": {
        "type": "factory",
        "id": "df2d6cc6c1c8188d"
      },
      "id": "df2d6cc6c1c8188d",
      "type": "add",
      "after": "217a7175c6a468af",
      "date": 1662095194526
    },
    {
      "type": "edit",
      "id": "df2d6cc6c1c8188d",
      "item": {
        "type": "pagefold",
        "id": "df2d6cc6c1c8188d",
        "text": "~"
      },
      "date": 1662095197830
    },
    {
      "id": "df2d6cc6c1c8188d",
      "type": "move",
      "order": [
        "c170768efb861e61",
        "df2d6cc6c1c8188d",
        "217a7175c6a468af"
      ],
      "date": 1662095200244
    },
    {
      "type": "edit",
      "id": "c170768efb861e61",
      "item": {
        "type": "markdown",
        "id": "c170768efb861e61",
        "text": "* unlimited [[backtracking]], provide ordered choice as a means for disambiguation, and can combine scanning (lexical analysis) and parsing (syntactic analysis) into a single activity. "
      },
      "date": 1662095223778
    },
    {
      "type": "edit",
      "id": "c170768efb861e61",
      "item": {
        "type": "markdown",
        "id": "c170768efb861e61",
        "text": "* unlimited [[Backtracking]], provide ordered choice as a means for disambiguation, and can combine scanning (lexical analysis) and parsing (syntactic analysis) into a single activity. "
      },
      "date": 1662095262357
    }
  ]
}