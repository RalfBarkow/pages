{
  "title": "Red Green Refactor",
  "story": [
    {
      "type": "paragraph",
      "id": "19c1cdfbceb1d501",
      "text": "Red means a test has failed. A good practice is to write a test first, see it red, then make it green by the most direct path. When this leads to foolish duplication, resolve to change whatever is necessary to make for the cleanest expression possible for the solution up to now."
    },
    {
      "type": "paragraph",
      "id": "8a3a10894cfe1d80",
      "text": "This relentless refactoring leads to eventual stability when either all forces have been resolved or familiarity with the quirks of near resolution offers acceptable productivity. In this later case, our sense of cleanliness has been distorted by familiarity. "
    },
    {
      "type": "paragraph",
      "id": "59931a4a37d13516",
      "text": "Explain the debt metaphor as justification for refactoring."
    },
    {
      "type": "paragraph",
      "id": "316285042dd1dc08",
      "text": "Distinguish technical debt as a strategy rather than the outcome of careless ignorance."
    },
    {
      "type": "paragraph",
      "id": "ecc5a8ee0900431d",
      "text": "Observe that even clean code will resist the addition of new functionality. This is especially true when familiarity with previous function has wained."
    },
    {
      "type": "paragraph",
      "id": "2f677282e64df426",
      "text": "Explain how one might make a place for new function before setting out to create that function."
    },
    {
      "type": "paragraph",
      "id": "2cab13dafbea2b3a",
      "text": "Explain the danger of refactoring for function not yet written. The existing cases present a drag upon the creative mind."
    },
    {
      "type": "paragraph",
      "id": "fad762a3d410be10",
      "text": "Explain how the radical modularity of objects permit the coexistence of alternative architectures within a single running program."
    },
    {
      "type": "paragraph",
      "id": "80b594aa7dfc2305",
      "text": "Explain how an alternate architecture can effect the slow migration of features from the weaker to the stronger. A reverse of the usual bit-rot."
    },
    {
      "type": "paragraph",
      "id": "5fca626ebc6f58a2",
      "text": "Justify this architectural competition on both economic and ecological grounds."
    },
    {
      "type": "paragraph",
      "id": "7abe49de0a158a28",
      "text": "Distinguish this use of refactoring from that usually assumed by the proponents of relentless refactoring."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Red Green Refactor"
      },
      "date": 1375626422001
    },
    {
      "item": {
        "type": "factory",
        "id": "19c1cdfbceb1d501"
      },
      "id": "19c1cdfbceb1d501",
      "type": "add",
      "date": 1375626424197
    },
    {
      "type": "edit",
      "id": "19c1cdfbceb1d501",
      "item": {
        "type": "paragraph",
        "id": "19c1cdfbceb1d501",
        "text": "Red means a test has failed. A good practice is to write a test first, see it red, then make it green by the most direct path. When this leads to foolish duplication, resolve to change whatever is necessary to make for the cleanest expression possible for the solution up to now."
      },
      "date": 1375626722508
    },
    {
      "item": {
        "type": "paragraph",
        "id": "8a3a10894cfe1d80",
        "text": ""
      },
      "id": "8a3a10894cfe1d80",
      "type": "add",
      "after": "19c1cdfbceb1d501",
      "date": 1375626723020
    },
    {
      "type": "edit",
      "id": "8a3a10894cfe1d80",
      "item": {
        "type": "paragraph",
        "id": "8a3a10894cfe1d80",
        "text": "This relentless refactoring leads to eventual stability when either all forces have been resolved or familiarity with the quirks of near resolution offers acceptable productivity. In this later case, our sense of cleanliness has been distorted by familiarity. "
      },
      "date": 1375627121515
    },
    {
      "item": {
        "type": "factory",
        "id": "59931a4a37d13516"
      },
      "id": "59931a4a37d13516",
      "type": "add",
      "after": "8a3a10894cfe1d80",
      "date": 1375627146699
    },
    {
      "type": "edit",
      "id": "59931a4a37d13516",
      "item": {
        "type": "paragraph",
        "id": "59931a4a37d13516",
        "text": "Explain the debt metaphor as justification for refactoring. Distinguish technical debt as a strategy rather than the outcome of careless ignorance."
      },
      "date": 1375627529466
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ecc5a8ee0900431d",
        "text": ""
      },
      "id": "ecc5a8ee0900431d",
      "type": "add",
      "after": "59931a4a37d13516",
      "date": 1375627529970
    },
    {
      "type": "edit",
      "id": "ecc5a8ee0900431d",
      "item": {
        "type": "paragraph",
        "id": "ecc5a8ee0900431d",
        "text": "Observe that even clean code will resist the addition of new functionality. This is especially true when familiarity with previous function has wained."
      },
      "date": 1375627723407
    },
    {
      "type": "edit",
      "id": "59931a4a37d13516",
      "item": {
        "type": "paragraph",
        "id": "59931a4a37d13516",
        "text": "Explain the debt metaphor as justification for refactoring."
      },
      "date": 1375627729662
    },
    {
      "item": {
        "type": "paragraph",
        "id": "316285042dd1dc08",
        "text": "Distinguish technical debt as a strategy rather than the outcome of careless ignorance."
      },
      "id": "316285042dd1dc08",
      "type": "add",
      "after": "59931a4a37d13516",
      "date": 1375627730168
    },
    {
      "item": {
        "type": "paragraph",
        "id": "2f677282e64df426",
        "text": ""
      },
      "id": "2f677282e64df426",
      "type": "add",
      "after": "ecc5a8ee0900431d",
      "date": 1375627737912
    },
    {
      "type": "edit",
      "id": "2f677282e64df426",
      "item": {
        "type": "paragraph",
        "id": "2f677282e64df426",
        "text": "Explain how one might make a place for new function before setting out to create that function."
      },
      "date": 1375628028552
    },
    {
      "item": {
        "type": "paragraph",
        "id": "2cab13dafbea2b3a",
        "text": ""
      },
      "id": "2cab13dafbea2b3a",
      "type": "add",
      "after": "2f677282e64df426",
      "date": 1375628029059
    },
    {
      "type": "edit",
      "id": "2cab13dafbea2b3a",
      "item": {
        "type": "paragraph",
        "id": "2cab13dafbea2b3a",
        "text": "Explain the danger of refactoring for function not yet written. The existing cases present a drag upon the creative mind."
      },
      "date": 1375628107467
    },
    {
      "item": {
        "type": "paragraph",
        "id": "fad762a3d410be10",
        "text": ""
      },
      "id": "fad762a3d410be10",
      "type": "add",
      "after": "2cab13dafbea2b3a",
      "date": 1375628107973
    },
    {
      "type": "edit",
      "id": "fad762a3d410be10",
      "item": {
        "type": "paragraph",
        "id": "fad762a3d410be10",
        "text": "Explain how the radical modularity of objects permit the coexistence of alternative architectures within a single running program."
      },
      "date": 1375628168426
    },
    {
      "item": {
        "type": "paragraph",
        "id": "80b594aa7dfc2305",
        "text": ""
      },
      "id": "80b594aa7dfc2305",
      "type": "add",
      "after": "fad762a3d410be10",
      "date": 1375628168931
    },
    {
      "type": "edit",
      "id": "80b594aa7dfc2305",
      "item": {
        "type": "paragraph",
        "id": "80b594aa7dfc2305",
        "text": "Explain how an alternate architecture can effect the slow migration of features from the weaker to the stronger. A reverse of the usual bit-rot."
      },
      "date": 1375628466588
    },
    {
      "item": {
        "type": "paragraph",
        "id": "5fca626ebc6f58a2",
        "text": ""
      },
      "id": "5fca626ebc6f58a2",
      "type": "add",
      "after": "80b594aa7dfc2305",
      "date": 1375628467093
    },
    {
      "type": "edit",
      "id": "5fca626ebc6f58a2",
      "item": {
        "type": "paragraph",
        "id": "5fca626ebc6f58a2",
        "text": "Justify this architectural competition on both economic and ecological grounds."
      },
      "date": 1375628637470
    },
    {
      "item": {
        "type": "paragraph",
        "id": "7abe49de0a158a28",
        "text": ""
      },
      "id": "7abe49de0a158a28",
      "type": "add",
      "after": "5fca626ebc6f58a2",
      "date": 1375628637976
    },
    {
      "type": "edit",
      "id": "7abe49de0a158a28",
      "item": {
        "type": "paragraph",
        "id": "7abe49de0a158a28",
        "text": "Distinguish this use of refactoring from that usually assumed by the proponents of relentless refactoring."
      },
      "date": 1375628695915
    },
    {
      "type": "fork",
      "site": "design.fed.wiki.org",
      "date": 1592055390758
    },
    {
      "type": "fork",
      "site": "don.noyes.asia.wiki.org",
      "date": 1651831876351
    }
  ]
}