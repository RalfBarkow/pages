{
  "title": "DEVS",
  "story": [
    {
      "type": "paragraph",
      "id": "30ce86db150a9020",
      "text": "Discrete Event System Specification ([[DEVS]]) "
    },
    {
      "type": "paragraph",
      "id": "d30db3bcaa6d7ec7",
      "text": "On the Prototype-Based Object Orientation in\nSystems Modeling and Simulation. [http://www.fit.vutbr.cz/~janousek/publications/2006-prototype-based-mas.pdf pdf]"
    },
    {
      "type": "markdown",
      "id": "47b9b897d6aa06d5",
      "text": "> **Abstract**: This paper deals with an alternative to traditional class-based approach to the simulation modeling. Benefits of the prototype-based approach are discussed. Our focus is restricted to DEVS, a Disctere Event Systems Specification formalism."
    },
    {
      "type": "factory",
      "id": "a3809a31d0b8da34"
    },
    {
      "type": "markdown",
      "id": "c5db4805cee0b383",
      "text": "# Prototype-Based DEVS Implementation"
    },
    {
      "type": "factory",
      "id": "bcb4a2a6061abe0c"
    },
    {
      "type": "paragraph",
      "id": "59d1cca7e6dfdf19",
      "text": "Smalltalk offers a possibility of inspecting, creating, and modifying classes during the program execution. Moreover, there also exists an extension (package Prototypes), that allows us to modify the structure and behavior of the individual instances. It makes possible to deal with prototype objects. A prototype object can be created as an instance of the class [[PrototypeObject]], or as a clone of another prototype object. The class PrototypeObject defines a protocol that allows us to edit slots and methods for any particular prototype object without a need to define a new class for it. In this way the prototype objects can behave completely differently depending on their slots and methods which can be edited at run-time. We need such a degree of flexibility in order to allow reflective and evolving systems modeling, and interactive building of model under simulation (we call it exploratory modeling)."
    },
    {
      "type": "factory",
      "id": "d432037accdb76db"
    },
    {
      "type": "markdown",
      "id": "3ccdaf10416f74fc",
      "text": "# Conclusion"
    },
    {
      "type": "paragraph",
      "id": "6f6ba17b428ad80d",
      "text": "The paper has demonstrated an alternative to mainstream approach to DEVS-based modeling\nand simulation. In the prototype-based OO, the focus is on concrete objects which are allways\nready for run (can be simulated). Possible shared behavior can be easily extracted from them and\nput to shareable traits. Objects which are considered to become patterns for cloning can be put\namong other well-known objects (and available by pathname in MyRepository) as prototypes.\nModels can be edited during simulation and any state of the simulation can be considered to be\na model – its “source code” can be generated from the live model at any time. These features\nare suitable for experiments with more dynamics in modeling and simulation."
    },
    {
      "type": "paragraph",
      "id": "61b8a70789a97ed0",
      "text": "The interactivity and feeling of concretness can be significantly amplified by an appropriate\nGUI. SmallDEVS GUI has been higly influenced by the GUI of Self [3]. Current version of\nSmallDEVS can be downloaded from its website [4]."
    },
    {
      "type": "paragraph",
      "id": "345a3652235903de",
      "text": "This work has been supported by the Grant Agency of Czech Republic grant No. 102/04/0780\n“Automated Methods and Tools Supporting Development of Reliable Concurrent and Dis-\ntributed Systems”."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "DEVS",
        "story": []
      },
      "date": 1653232229266
    },
    {
      "item": {
        "type": "factory",
        "id": "d30db3bcaa6d7ec7"
      },
      "id": "d30db3bcaa6d7ec7",
      "type": "add",
      "date": 1653232246019
    },
    {
      "type": "edit",
      "id": "d30db3bcaa6d7ec7",
      "item": {
        "type": "paragraph",
        "id": "d30db3bcaa6d7ec7",
        "text": "On the Prototype-Based Object Orientation in\nSystems Modeling and Simulation. [pdt]"
      },
      "date": 1653232252542
    },
    {
      "type": "edit",
      "id": "d30db3bcaa6d7ec7",
      "item": {
        "type": "paragraph",
        "id": "d30db3bcaa6d7ec7",
        "text": "On the Prototype-Based Object Orientation in\nSystems Modeling and Simulation. [http://www.fit.vutbr.cz/~janousek/publications/2006-prototype-based-mas.pdf pdf]"
      },
      "date": 1653232259455
    },
    {
      "item": {
        "type": "factory",
        "id": "47b9b897d6aa06d5"
      },
      "id": "47b9b897d6aa06d5",
      "type": "add",
      "after": "d30db3bcaa6d7ec7",
      "date": 1653232288885
    },
    {
      "type": "edit",
      "id": "47b9b897d6aa06d5",
      "item": {
        "type": "paragraph",
        "id": "47b9b897d6aa06d5",
        "text": "> **Abstract**: This paper deals with an alternative to traditional class-based approach to the simula-\ntion modeling. Benefits of the prototype-based approach are discussed. Our focus is restricted to\nDEVS, a Disctere Event Systems Specification formalism."
      },
      "date": 1653232297108
    },
    {
      "type": "edit",
      "id": "47b9b897d6aa06d5",
      "item": {
        "type": "markdown",
        "id": "47b9b897d6aa06d5",
        "text": "> **Abstract**: This paper deals with an alternative to traditional class-based approach to the simula-\ntion modeling. Benefits of the prototype-based approach are discussed. Our focus is restricted to\nDEVS, a Disctere Event Systems Specification formalism."
      },
      "date": 1653232298217
    },
    {
      "type": "edit",
      "id": "47b9b897d6aa06d5",
      "item": {
        "type": "markdown",
        "id": "47b9b897d6aa06d5",
        "text": "> **Abstract**: This paper deals with an alternative to traditional class-based approach to the simula-\ntion modeling. Benefits of the prototype-based approach are discussed. Our focus is restricted to DEVS, a Disctere Event Systems Specification formalism."
      },
      "date": 1653232303877
    },
    {
      "type": "edit",
      "id": "47b9b897d6aa06d5",
      "item": {
        "type": "markdown",
        "id": "47b9b897d6aa06d5",
        "text": "> **Abstract**: This paper deals with an alternative to traditional class-based approach to the simulation modeling. Benefits of the prototype-based approach are discussed. Our focus is restricted to DEVS, a Disctere Event Systems Specification formalism."
      },
      "date": 1653232449330
    },
    {
      "item": {
        "type": "factory",
        "id": "a3809a31d0b8da34"
      },
      "id": "a3809a31d0b8da34",
      "type": "add",
      "after": "47b9b897d6aa06d5",
      "date": 1653232575229
    },
    {
      "item": {
        "type": "factory",
        "id": "c5db4805cee0b383"
      },
      "id": "c5db4805cee0b383",
      "type": "add",
      "after": "a3809a31d0b8da34",
      "date": 1653232576868
    },
    {
      "type": "edit",
      "id": "c5db4805cee0b383",
      "item": {
        "type": "paragraph",
        "id": "c5db4805cee0b383",
        "text": "# Prototype-Based Devs Implementation"
      },
      "date": 1653232581394
    },
    {
      "type": "edit",
      "id": "c5db4805cee0b383",
      "item": {
        "type": "paragraph",
        "id": "c5db4805cee0b383",
        "text": "# Prototype-Based DEVS Implementation"
      },
      "date": 1653232590123
    },
    {
      "type": "edit",
      "id": "c5db4805cee0b383",
      "item": {
        "type": "markdown",
        "id": "c5db4805cee0b383",
        "text": "# Prototype-Based DEVS Implementation"
      },
      "date": 1653232591093
    },
    {
      "item": {
        "type": "factory",
        "id": "bcb4a2a6061abe0c"
      },
      "id": "bcb4a2a6061abe0c",
      "type": "add",
      "after": "c5db4805cee0b383",
      "date": 1653232608538
    },
    {
      "item": {
        "type": "factory",
        "id": "59d1cca7e6dfdf19"
      },
      "id": "59d1cca7e6dfdf19",
      "type": "add",
      "after": "bcb4a2a6061abe0c",
      "date": 1653232609999
    },
    {
      "type": "edit",
      "id": "59d1cca7e6dfdf19",
      "item": {
        "type": "paragraph",
        "id": "59d1cca7e6dfdf19",
        "text": "Smalltalk offers a possibility of inspecting, creating, and modifying classes during the program execution. Moreover, there also exists an extension (package Prototypes), that allows us to modify the structure and behavior of the individual instances. It makes possible to deal with prototype objects. A prototype object can be created as an instance of the class PrototypeObject, or as a clone of another prototype object. The class PrototypeObject defines a protocol that allows us to edit slots and methods for any particular prototype object without a need to define a new class for it. In this way the prototype objects can behave completely differently depending on their slots and methods which can be edited at run-time. We need such a degree of flexibility in order to allow reflective and evolving systems modeling, and interactive building of model under simulation (we call it exploratory modeling)."
      },
      "date": 1653232653603
    },
    {
      "type": "edit",
      "id": "59d1cca7e6dfdf19",
      "item": {
        "type": "paragraph",
        "id": "59d1cca7e6dfdf19",
        "text": "Smalltalk offers a possibility of inspecting, creating, and modifying classes during the program execution. Moreover, there also exists an extension (package Prototypes), that allows us to modify the structure and behavior of the individual instances. It makes possible to deal with prototype objects. A prototype object can be created as an instance of the class [[PrototypeObject]], or as a clone of another prototype object. The class PrototypeObject defines a protocol that allows us to edit slots and methods for any particular prototype object without a need to define a new class for it. In this way the prototype objects can behave completely differently depending on their slots and methods which can be edited at run-time. We need such a degree of flexibility in order to allow reflective and evolving systems modeling, and interactive building of model under simulation (we call it exploratory modeling)."
      },
      "date": 1653232678514
    },
    {
      "item": {
        "type": "factory",
        "id": "d432037accdb76db"
      },
      "id": "d432037accdb76db",
      "type": "add",
      "after": "59d1cca7e6dfdf19",
      "date": 1653232794415
    },
    {
      "item": {
        "type": "factory",
        "id": "3ccdaf10416f74fc"
      },
      "id": "3ccdaf10416f74fc",
      "type": "add",
      "after": "d432037accdb76db",
      "date": 1653232796036
    },
    {
      "type": "edit",
      "id": "3ccdaf10416f74fc",
      "item": {
        "type": "paragraph",
        "id": "3ccdaf10416f74fc",
        "text": "# Conclusion"
      },
      "date": 1653232800893
    },
    {
      "type": "edit",
      "id": "3ccdaf10416f74fc",
      "item": {
        "type": "markdown",
        "id": "3ccdaf10416f74fc",
        "text": "# Conclusion"
      },
      "date": 1653232802021
    },
    {
      "item": {
        "type": "factory",
        "id": "6f6ba17b428ad80d"
      },
      "id": "6f6ba17b428ad80d",
      "type": "add",
      "after": "3ccdaf10416f74fc",
      "date": 1653232819607
    },
    {
      "type": "edit",
      "id": "6f6ba17b428ad80d",
      "item": {
        "type": "paragraph",
        "id": "6f6ba17b428ad80d",
        "text": "The paper has demonstrated an alternative to mainstream approach to DEVS-based modeling\nand simulation. In the prototype-based OO, the focus is on concrete objects which are allways\nready for run (can be simulated). Possible shared behavior can be easily extracted from them and\nput to shareable traits. Objects which are considered to become patterns for cloning can be put\namong other well-known objects (and available by pathname in MyRepository) as prototypes.\nModels can be edited during simulation and any state of the simulation can be considered to be\na model – its “source code” can be generated from the live model at any time. These features\nare suitable for experiments with more dynamics in modeling and simulation.\nThe interactivity and feeling of concretness can be significantly amplified by an appropriate\nGUI. SmallDEVS GUI has been higly influenced by the GUI of Self [3]. Current version of\nSmallDEVS can be downloaded from its website [4].\nThis work has been supported by the Grant Agency of Czech Republic grant No. 102/04/0780\n“Automated Methods and Tools Supporting Development of Reliable Concurrent and Dis-\ntributed Systems”."
      },
      "date": 1653232820895
    },
    {
      "type": "edit",
      "id": "6f6ba17b428ad80d",
      "item": {
        "type": "paragraph",
        "id": "6f6ba17b428ad80d",
        "text": "The paper has demonstrated an alternative to mainstream approach to DEVS-based modeling\nand simulation. In the prototype-based OO, the focus is on concrete objects which are allways\nready for run (can be simulated). Possible shared behavior can be easily extracted from them and\nput to shareable traits. Objects which are considered to become patterns for cloning can be put\namong other well-known objects (and available by pathname in MyRepository) as prototypes.\nModels can be edited during simulation and any state of the simulation can be considered to be\na model – its “source code” can be generated from the live model at any time. These features\nare suitable for experiments with more dynamics in modeling and simulation.\nThe interactivity and feeling of concretness can be significantly amplified by an appropriate\nGUI. SmallDEVS GUI has been higly influenced by the GUI of Self [3]. Current version of\nSmallDEVS can be downloaded from its website [4]."
      },
      "date": 1653232832586
    },
    {
      "type": "add",
      "id": "345a3652235903de",
      "item": {
        "type": "paragraph",
        "id": "345a3652235903de",
        "text": "This work has been supported by the Grant Agency of Czech Republic grant No. 102/04/0780\n“Automated Methods and Tools Supporting Development of Reliable Concurrent and Dis-\ntributed Systems”."
      },
      "after": "6f6ba17b428ad80d",
      "date": 1653232834353
    },
    {
      "type": "edit",
      "id": "6f6ba17b428ad80d",
      "item": {
        "type": "paragraph",
        "id": "6f6ba17b428ad80d",
        "text": "The paper has demonstrated an alternative to mainstream approach to DEVS-based modeling\nand simulation. In the prototype-based OO, the focus is on concrete objects which are allways\nready for run (can be simulated). Possible shared behavior can be easily extracted from them and\nput to shareable traits. Objects which are considered to become patterns for cloning can be put\namong other well-known objects (and available by pathname in MyRepository) as prototypes.\nModels can be edited during simulation and any state of the simulation can be considered to be\na model – its “source code” can be generated from the live model at any time. These features\nare suitable for experiments with more dynamics in modeling and simulation."
      },
      "date": 1653232841352
    },
    {
      "type": "add",
      "id": "61b8a70789a97ed0",
      "item": {
        "type": "paragraph",
        "id": "61b8a70789a97ed0",
        "text": "The interactivity and feeling of concretness can be significantly amplified by an appropriate\nGUI. SmallDEVS GUI has been higly influenced by the GUI of Self [3]. Current version of\nSmallDEVS can be downloaded from its website [4]."
      },
      "after": "6f6ba17b428ad80d",
      "date": 1653232841982
    },
    {
      "item": {
        "type": "factory",
        "id": "30ce86db150a9020"
      },
      "id": "30ce86db150a9020",
      "type": "add",
      "after": "345a3652235903de",
      "date": 1653234023261
    },
    {
      "id": "30ce86db150a9020",
      "type": "move",
      "order": [
        "30ce86db150a9020",
        "d30db3bcaa6d7ec7",
        "47b9b897d6aa06d5",
        "a3809a31d0b8da34",
        "c5db4805cee0b383",
        "bcb4a2a6061abe0c",
        "59d1cca7e6dfdf19",
        "d432037accdb76db",
        "3ccdaf10416f74fc",
        "6f6ba17b428ad80d",
        "61b8a70789a97ed0",
        "345a3652235903de"
      ],
      "date": 1653234029307
    },
    {
      "type": "edit",
      "id": "30ce86db150a9020",
      "item": {
        "type": "paragraph",
        "id": "30ce86db150a9020",
        "text": "Discrete Event System Specification ([[DEVS]]) "
      },
      "date": 1653234030860
    }
  ]
}