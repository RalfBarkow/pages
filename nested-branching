{
  "title": "Nested branching",
  "story": [
    {
      "type": "paragraph",
      "id": "f576744cf5fd62d4",
      "text": "Despite our best efforts to keep things simple, sometimes getting the business logic correct necessitates deep, nested branching. It's painful when you get painted into a corner like that, dozens of different paths, each conditionally dependent on the last, but you gotta do what you gotta do. Trying to keep these things readable and debuggable is one of the [[JavaScript Common Pitfalls]]"
    },
    {
      "type": "paragraph",
      "id": "4d2a1b590b84a770",
      "text": "We need to get down to the very serious business of choosing the right emoticon to use depending on the occasion. We need to choose based on what type of emotion are we trying to convey, should it be intensified, and/or are we exaggerating?"
    },
    {
      "type": "paragraph",
      "id": "d383fed4312cdcdd",
      "text": "One way to handle this is with if/else statements."
    },
    {
      "type": "code",
      "id": "b620b0a509e222ae",
      "text": "var type = 'sympathetic'\nvar acute = true\nvar exaggerated = true\n\nvar face = ''\n\nif (type === 'joking') {\n  if (acute) {\n    if (exaggerated) {\n      face = ';p'\n    } else {\n      face = ':p'\n    }\n  } else {\n    face = ';)'\n  }\n} else if (type === 'sympathetic') {\n  if (acute) {\n    if (exaggerated) {\n      face = ':( :( :( :('\n    } else {\n      face = ':('\n    }\n  } else {\n    if (exaggerated) {\n      face = ':*('\n    } else {\n      face = ':/'\n    }\n  }\n} else {\n  face = ':)'\n}\n\nconsole.log(face) //:( :( :( :("
    },
    {
      "type": "paragraph",
      "id": "a6970402bf5f7f84",
      "text": "But even with a small number of cases this gets obviously painful. You have to write the assignment again and again, you have to make sure each if has an else or you risk not assigning an emoticon at all. And you can imagine, as this gets more cluttered and the conditions become more complex it gets really hard to tell where you end up given a set of parameters."
    },
    {
      "type": "code",
      "id": "17f83ee3ceb64c94",
      "text": "var type = 'sympathetic'\nvar acute = false\nvar exaggerated = true\n\nvar face =\n  type === 'joking' ?\n    acute ?\n      exaggerated ? ';P' : ':p'\n    : ';)'\n  : type === 'sympathetic' ?\n    acute ?\n      exaggerated ? ':( :( :( :(' : ':('\n    : exaggerated ? ':*(' : ':/'\n  : ':)'\n\nconsole.log(face) // :*("
    },
    {
      "type": "paragraph",
      "id": "a8be729cc8a5fd84",
      "text": "Using nested ternaries we can get rid of the redundant assignments, which is nice. This is very terse compared to the if statements, and it is nice that it's an expression with a value, instead of a bunch of statements with side effects. However it's even more confusing. The only reason I can read it at all is the use of white space. Cram it all on one or two lines, and I'm totally lost."
    },
    {
      "type": "paragraph",
      "id": "7c94faaa996b6e16",
      "text": "I like to wrap this kind of problem up in a function, and use if/else statements and ternary expressions in whatever combination makes it easiest for me to understand."
    },
    {
      "type": "code",
      "id": "deefdad6a1d19496",
      "text": "var face = getFace('joking', true, true)\n\nconsole.log(face) // ;P\n\nfunction getFace (type, acute, exaggerated) {\n  if (type === 'joking') {\n    if (acute) return exaggerated ? ';P' : ':p'\n    return ';)'\n  }\n\n  if (type === 'sympathetic') {\n    if (acute) return exaggerated ? ':( :( :( :(' : ':('\n    return  exaggerated ? ':*(' : ':/'\n  }\n\n  return ':)'\n}\n"
    },
    {
      "type": "paragraph",
      "id": "c73da0207ba5a506",
      "text": "This approach also makes the state that goes into making the decision more explicit, as well as the result of the decision (choosing a string). This also makes it extremely plain what the catchall default is, and hard to screw up in a way that we don't end up choosing an emoticon, which would be tragic."
    },
    {
      "type": "pagefold",
      "id": "b40758f1d9bac08d",
      "text": "Fun"
    },
    {
      "type": "paragraph",
      "id": "ed3587d89b29db66",
      "text": "Playing with other ways to do this, I looked at what you could do using mostly object property access. This implements the same logic based on the same parameters, but in an extra interesting way. This is too obtuse for most use cases, but it was fun to write :)"
    },
    {
      "type": "code",
      "id": "a67eb78b2df2cf68",
      "text": "var type = 'sympathetic'\nvar acute = false\nvar exaggerated = false\n\n// this is the crazy answer\n// not the good answer.\nvar smileys =\n  { joking:\n    [ [ ';p', ':p' ]\n    , [ ';)', ';)' ]\n    ]\n  , sympathetic:\n    [ [ ':( :( :( :(', ':(' ]\n    , [ ':*(', ':/' ]\n    ]\n  }\n\nvar face = type in smileys ? smileys[type][+!acute][+!exaggerated] : ':)'\n\nconsole.log(face) // :/\n"
    },
    {
      "type": "paragraph",
      "id": "c7d9c4b1210a2959",
      "text": "`[ a, b][+!condition]` is approximately the same as a ternary `condition ? a : b`, but if you start littering that all over your code base, you didn't hear that here ;p"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Nested branching",
        "story": []
      },
      "date": 1432617064610
    },
    {
      "item": {
        "type": "factory",
        "id": "f576744cf5fd62d4"
      },
      "id": "f576744cf5fd62d4",
      "type": "add",
      "date": 1432617073700
    },
    {
      "type": "edit",
      "id": "f576744cf5fd62d4",
      "item": {
        "type": "paragraph",
        "id": "f576744cf5fd62d4",
        "text": "Despite our best efforts to keep things simple, sometimes getting the business logic correct necessitates deep, nested branching. It's painful when you get painted into a corner like that, dozens of different paths, each conditionally dependent on the last, but you gotta do what you gotta do. Trying to keep these things readable and debuggable is one of the [[JavaScript Common Pitfalls]]"
      },
      "date": 1432617302455
    },
    {
      "item": {
        "type": "factory",
        "id": "91e85f21b34d5434"
      },
      "id": "91e85f21b34d5434",
      "type": "add",
      "after": "f576744cf5fd62d4",
      "date": 1432617404420
    },
    {
      "type": "remove",
      "id": "91e85f21b34d5434",
      "date": 1432617749974
    },
    {
      "item": {
        "type": "factory",
        "id": "4d2a1b590b84a770"
      },
      "id": "4d2a1b590b84a770",
      "type": "add",
      "after": "f576744cf5fd62d4",
      "date": 1432619704951
    },
    {
      "type": "edit",
      "id": "4d2a1b590b84a770",
      "item": {
        "type": "paragraph",
        "id": "4d2a1b590b84a770",
        "text": "One way to handle this is with if/else statements."
      },
      "date": 1432619741649
    },
    {
      "item": {
        "type": "factory",
        "id": "b620b0a509e222ae"
      },
      "id": "b620b0a509e222ae",
      "type": "add",
      "after": "4d2a1b590b84a770",
      "date": 1432619749779
    },
    {
      "type": "edit",
      "id": "b620b0a509e222ae",
      "item": {
        "type": "code",
        "id": "b620b0a509e222ae",
        "text": "var type = 'sympathetic'\nvar acute = true\nvar exaggerated = true\n\nvar face = ''\n\nif (type === 'joking') {\n  if (acute) {\n    if (exaggerated) {\n      face = ';p'\n    } else {\n      face = ':p'\n    }\n  } else {\n    face = ';)'\n  }\n} else if (type === 'sympathetic') {\n  if (acute) {\n    if (exaggerated) {\n      face = ':( :( :( :('\n    } else {\n      face = ':('\n    }\n  } else {\n    if (exaggerated) {\n      face = ':.('\n    } else {\n      face = ':/'\n    }\n  }\n} else {\n  face = ':)'\n}\n\nconsole.log(face) //:( :( :( :("
      },
      "date": 1432619758994
    },
    {
      "type": "edit",
      "id": "4d2a1b590b84a770",
      "item": {
        "type": "paragraph",
        "id": "4d2a1b590b84a770",
        "text": "We need to get down to the very serious business of choosing the right smiley face to use depending on the occasion. We need to choose based on what type of emotion are we trying to convey, should it be intensified, and/or are we exaggerating?"
      },
      "date": 1432619943854
    },
    {
      "type": "add",
      "id": "d383fed4312cdcdd",
      "item": {
        "type": "paragraph",
        "id": "d383fed4312cdcdd",
        "text": "One way to handle this is with if/else statements."
      },
      "after": "4d2a1b590b84a770",
      "date": 1432619949297
    },
    {
      "item": {
        "type": "factory",
        "id": "a6970402bf5f7f84"
      },
      "id": "a6970402bf5f7f84",
      "type": "add",
      "after": "b620b0a509e222ae",
      "date": 1432619971171
    },
    {
      "type": "edit",
      "id": "a6970402bf5f7f84",
      "item": {
        "type": "paragraph",
        "id": "a6970402bf5f7f84",
        "text": "But even with a small number of cases this gets obviously painful. You have to write the assignment again and again, you have to make sure each if has an else or you risk not assigning a smily at all. And you can imagine, as this gets more cluttered and the conditions become more complex it gets really hard to tell where you end up given a set of parameters."
      },
      "date": 1432620129619
    },
    {
      "item": {
        "type": "factory",
        "id": "17f83ee3ceb64c94"
      },
      "id": "17f83ee3ceb64c94",
      "type": "add",
      "after": "a6970402bf5f7f84",
      "date": 1432621171450
    },
    {
      "type": "edit",
      "id": "17f83ee3ceb64c94",
      "item": {
        "type": "code",
        "id": "17f83ee3ceb64c94",
        "text": "\n  : type === 'sympathetic' ?"
      },
      "date": 1432621178889
    },
    {
      "type": "edit",
      "id": "17f83ee3ceb64c94",
      "item": {
        "type": "code",
        "id": "17f83ee3ceb64c94",
        "text": "var type = 'sympathetic'\nvar acute = false\nvar exaggerated = true\n\nvar face =\n  type === 'joking' ?\n    acute ?\n      exaggerated ? ';P' : ':p'\n    : ';)'\n  : type === 'sympathetic' ?\n    acute ?\n      exaggerated ? ':( :( :( :(' : ':('\n    : exaggerated ? ':*(' : ':/'\n  : ':)'\n\nconsole.log(face) // :*("
      },
      "date": 1432621196363
    },
    {
      "type": "edit",
      "id": "b620b0a509e222ae",
      "item": {
        "type": "code",
        "id": "b620b0a509e222ae",
        "text": "var type = 'sympathetic'\nvar acute = true\nvar exaggerated = true\n\nvar face = ''\n\nif (type === 'joking') {\n  if (acute) {\n    if (exaggerated) {\n      face = ';p'\n    } else {\n      face = ':p'\n    }\n  } else {\n    face = ';)'\n  }\n} else if (type === 'sympathetic') {\n  if (acute) {\n    if (exaggerated) {\n      face = ':( :( :( :('\n    } else {\n      face = ':('\n    }\n  } else {\n    if (exaggerated) {\n      face = ':*('\n    } else {\n      face = ':/'\n    }\n  }\n} else {\n  face = ':)'\n}\n\nconsole.log(face) //:( :( :( :("
      },
      "date": 1432621263718
    },
    {
      "item": {
        "type": "factory",
        "id": "a8be729cc8a5fd84"
      },
      "id": "a8be729cc8a5fd84",
      "type": "add",
      "after": "17f83ee3ceb64c94",
      "date": 1432621315093
    },
    {
      "type": "edit",
      "id": "a8be729cc8a5fd84",
      "item": {
        "type": "paragraph",
        "id": "a8be729cc8a5fd84",
        "text": "Using nested ternaries we can get rid of the redundant assignments, which is nice. This is very terse compared to the if statements, and it is nice that it's an expression with a value, instead of a bunch of statements with side effects. However it's even more confusing. The only reason I can read it at all is the use of white space. Cram it all on one or two lines, and I'm totally lost."
      },
      "date": 1432621554438
    },
    {
      "item": {
        "type": "factory",
        "id": "7c94faaa996b6e16"
      },
      "id": "7c94faaa996b6e16",
      "type": "add",
      "after": "a8be729cc8a5fd84",
      "date": 1432622251950
    },
    {
      "type": "edit",
      "id": "7c94faaa996b6e16",
      "item": {
        "type": "paragraph",
        "id": "7c94faaa996b6e16",
        "text": "I like to wrap this kind of problem up in a function, and use if/else statements and ternary expressions in whatever combination makes it easiest for me to understand."
      },
      "date": 1432622555254
    },
    {
      "item": {
        "type": "factory",
        "id": "deefdad6a1d19496"
      },
      "id": "deefdad6a1d19496",
      "type": "add",
      "after": "7c94faaa996b6e16",
      "date": 1432622558253
    },
    {
      "type": "edit",
      "id": "deefdad6a1d19496",
      "item": {
        "type": "code",
        "id": "deefdad6a1d19496",
        "text": "var face = getFace('joking', true, true)\n\nconsole.log(face) // ;P\n\nfunction getFace (type, acute, exaggerated) {\n  if (type === 'joking') {\n    if (acute) return exaggerated ? ';P' : ':p'\n    return ';)'\n  }\n\n  if (type === 'sympathetic') {\n    if (acute) return exaggerated ? ':( :( :( :(' : ':('\n    return  exaggerated ? ':*(' : ':/'\n  }\n\n  return ':)'\n}\n"
      },
      "date": 1432622565204
    },
    {
      "item": {
        "type": "factory",
        "id": "c73da0207ba5a506"
      },
      "id": "c73da0207ba5a506",
      "type": "add",
      "after": "deefdad6a1d19496",
      "date": 1432622646475
    },
    {
      "type": "edit",
      "id": "c73da0207ba5a506",
      "item": {
        "type": "paragraph",
        "id": "c73da0207ba5a506",
        "text": "This approach also makes the state that goes into making the decision more explicit, as well as the result of the decision (choosing a string). This also makes it extremely plain what the catchall default is, and hard to screw up in a way that we don't end up choosing a smiley at all, which would be tragic."
      },
      "date": 1432622743334
    },
    {
      "item": {
        "type": "factory",
        "id": "6b5b65bc4a60a89f"
      },
      "id": "6b5b65bc4a60a89f",
      "type": "add",
      "after": "c73da0207ba5a506",
      "date": 1432622917051
    },
    {
      "type": "remove",
      "id": "6b5b65bc4a60a89f",
      "date": 1432622927084
    },
    {
      "type": "edit",
      "id": "4d2a1b590b84a770",
      "item": {
        "type": "paragraph",
        "id": "4d2a1b590b84a770",
        "text": "We need to get down to the very serious business of choosing the right emoticon to use depending on the occasion. We need to choose based on what type of emotion are we trying to convey, should it be intensified, and/or are we exaggerating?"
      },
      "date": 1432656019266
    },
    {
      "type": "edit",
      "id": "a6970402bf5f7f84",
      "item": {
        "type": "paragraph",
        "id": "a6970402bf5f7f84",
        "text": "But even with a small number of cases this gets obviously painful. You have to write the assignment again and again, you have to make sure each if has an else or you risk not assigning an emoticon at all. And you can imagine, as this gets more cluttered and the conditions become more complex it gets really hard to tell where you end up given a set of parameters."
      },
      "date": 1432656082240
    },
    {
      "type": "edit",
      "id": "c73da0207ba5a506",
      "item": {
        "type": "paragraph",
        "id": "c73da0207ba5a506",
        "text": "This approach also makes the state that goes into making the decision more explicit, as well as the result of the decision (choosing a string). This also makes it extremely plain what the catchall default is, and hard to screw up in a way that we don't end up choosing an emoticon, which would be tragic."
      },
      "date": 1432656106885
    },
    {
      "item": {
        "type": "factory",
        "id": "b40758f1d9bac08d"
      },
      "id": "b40758f1d9bac08d",
      "type": "add",
      "after": "c73da0207ba5a506",
      "date": 1432748202161
    },
    {
      "type": "edit",
      "id": "b40758f1d9bac08d",
      "item": {
        "type": "pagefold",
        "id": "b40758f1d9bac08d",
        "text": "Fun"
      },
      "date": 1432748209186
    },
    {
      "item": {
        "type": "factory",
        "id": "ed3587d89b29db66"
      },
      "id": "ed3587d89b29db66",
      "type": "add",
      "after": "b40758f1d9bac08d",
      "date": 1432748214327
    },
    {
      "type": "edit",
      "id": "ed3587d89b29db66",
      "item": {
        "type": "paragraph",
        "id": "ed3587d89b29db66",
        "text": "Playing with other ways to do this, I looked at what you could do using mostly object property access. This implements the same logic based on the same parameters, but in an extra interesting way. This is too obtuse for most use cases, but it was fun to write :)"
      },
      "date": 1432748358705
    },
    {
      "item": {
        "type": "factory",
        "id": "a67eb78b2df2cf68"
      },
      "id": "a67eb78b2df2cf68",
      "type": "add",
      "after": "ed3587d89b29db66",
      "date": 1432748361183
    },
    {
      "type": "edit",
      "id": "a67eb78b2df2cf68",
      "item": {
        "type": "code",
        "id": "a67eb78b2df2cf68",
        "text": "var type = 'sympathetic'\nvar acute = false\nvar exaggerated = false\n\n// this is the crazy answer\n// not the good answer.\nvar smileys =\n  { joking:\n    [ [ ';p', ':p' ]\n    , [ ';)', ';)' ]\n    ]\n  , sympathetic:\n    [ [ ':( :( :( :(', ':(' ]\n    , [ ':*(', ':/' ]\n    ]\n  }\n\nvar face = type in smileys ? smileys[type][+!acute][+!exaggerated] : ':)'\n\nconsole.log(face) // :/\n"
      },
      "date": 1432748366531
    },
    {
      "item": {
        "type": "factory",
        "id": "c7d9c4b1210a2959"
      },
      "id": "c7d9c4b1210a2959",
      "type": "add",
      "after": "a67eb78b2df2cf68",
      "date": 1432748471743
    },
    {
      "type": "edit",
      "id": "c7d9c4b1210a2959",
      "item": {
        "type": "paragraph",
        "id": "c7d9c4b1210a2959",
        "text": "`[ a, b][+!condition]` is approximately the same as a ternary `condition ? a : b`, but if you start littering that all over your code base, you didn't hear that here ;p"
      },
      "date": 1432748679986
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1652868556259
    }
  ]
}