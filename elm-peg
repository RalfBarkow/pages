{
  "title": "elm-peg",
  "story": [
    {
      "type": "paragraph",
      "id": "f6ae85c1225c1b52",
      "text": "[[Parsing Expression Grammar]] ([[PEG]]) in [[Elm]]. [https://github.com/microelm/elm-peg github], [https://package.elm-lang.org/packages/microelm/elm-peg/latest/ package] by [[Romāns Potašovs]]"
    },
    {
      "type": "markdown",
      "id": "505834656e131276",
      "text": "# Getting Started"
    },
    {
      "type": "paragraph",
      "id": "64ae4cce0666769e",
      "text": "To get started with Elm PEG Parser, you first need to [[Define a PEG Grammar]] using the Grammar type. Once you have defined your grammar, you can use the parse function to parse input text using the grammar."
    },
    {
      "type": "code",
      "id": "4f74b160f25488d1",
      "text": "import Html\nimport Peg exposing (Error, fromString, parse)\n\n\ngrammarString : String\ngrammarString =\n    \"\"\"\n    start <- <digit+> {action}\n    digit <- [0-9]\n    \"\"\"\n\n\n{-| Parse a string with the grammar\n-}\nresult : Result Error String\nresult =\n    let\n        actions _ found _ =\n            Ok found\n\n        predicate _ _ state =\n            ( True, state )\n    in\n    grammarString\n        |> fromString\n        |> Result.andThen (\\grammar -> parse grammar \"\" actions predicate \"123\")\n\n\n{-| Check if the parse succeeded\n-}\nmain =\n    case result of\n        Ok value ->\n            Html.text (\"Parsed value: \" ++ value)\n\n        Err error ->\n            Html.text (\"Parse error: \" ++ error.message)"
    },
    {
      "type": "pagefold",
      "id": "ee359156e7c93c43",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "e8a50218feea0b7d",
      "text": "Adding Actions to a PEG Grammar [https://medium.com/@gvanrossum_83706/adding-actions-to-a-peg-grammar-d5e00fa1092f post] by [[Guido van Rossum]]"
    },
    {
      "type": "markdown",
      "id": "ffead5cd7fa7e3d9",
      "text": "In the provided Elm code, the `{action}` placeholder in the grammar does not have a specific processing step associated with it. Instead, it's a placeholder that can be used to denote where a custom action would be performed if needed. \n\nIn this code, the `{action}` is just part of the grammar rule, but it doesn't have any specific processing step defined within the Elm code. It's up to the developer to provide the actual action that should be taken when a match occurs. \n\nIn the provided code, the action placeholder `{action}` is present in the `start` rule, but no specific processing step is defined for it within the Elm code. If you wanted to perform a specific action when a match occurs, you would need to replace `{action}` with the actual code for that action. For example: […] (ChatGPT September 25 Version)"
    },
    {
      "type": "markdown",
      "id": "749c515eb63b1761",
      "text": "In your Elm code, the `actions` function is defined like this:\n\n```elm\nactions _ found _ =\n    Ok found\n```\n\nThis function is called when a match occurs. It takes three arguments: `left`, `found`, and `right`. In this case, it simply returns `Ok found`, where `found` is the matched text.\n\nThe placeholder `{action}` in the grammar corresponds to the part of the grammar where you might want to perform a custom action. In your Elm code, this action is defined in the `actions` function.\n\nIf you want to perform a different action, you would modify the `actions` function accordingly. For example, if you wanted to transform the matched text before returning it, you would do so within the `actions` function."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "elm-peg",
        "story": []
      },
      "date": 1696269546470
    },
    {
      "id": "f6ae85c1225c1b52",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f6ae85c1225c1b52",
        "text": "⇒ [[elm-peg]]: Parsing expression grammar (PEG) in [[Elm]]. [https://github.com/microelm/elm-peg github]"
      },
      "attribution": {
        "page": "2023-10-02"
      },
      "date": 1696269549870
    },
    {
      "type": "edit",
      "id": "f6ae85c1225c1b52",
      "item": {
        "type": "paragraph",
        "id": "f6ae85c1225c1b52",
        "text": "Parsing expression grammar (PEG) in [[Elm]]. [https://github.com/microelm/elm-peg github]"
      },
      "date": 1696269553448
    },
    {
      "type": "edit",
      "id": "f6ae85c1225c1b52",
      "item": {
        "type": "paragraph",
        "id": "f6ae85c1225c1b52",
        "text": "Parsing expression grammar ([[PEG]]) in [[Elm]]. [https://github.com/microelm/elm-peg github]"
      },
      "date": 1696269563381
    },
    {
      "type": "edit",
      "id": "f6ae85c1225c1b52",
      "item": {
        "type": "paragraph",
        "id": "f6ae85c1225c1b52",
        "text": "Parsing expression grammar ([[PEG]]) in [[Elm]]. [https://github.com/microelm/elm-peg github], [https://package.elm-lang.org/packages/microelm/elm-peg/latest/ package]"
      },
      "date": 1696269584375
    },
    {
      "item": {
        "type": "factory",
        "id": "505834656e131276"
      },
      "id": "505834656e131276",
      "type": "add",
      "after": "f6ae85c1225c1b52",
      "date": 1696269817768
    },
    {
      "type": "edit",
      "id": "505834656e131276",
      "item": {
        "type": "paragraph",
        "id": "505834656e131276",
        "text": "Getting Started"
      },
      "date": 1696269819203
    },
    {
      "item": {
        "type": "factory",
        "id": "64ae4cce0666769e"
      },
      "id": "64ae4cce0666769e",
      "type": "add",
      "after": "505834656e131276",
      "date": 1696269826770
    },
    {
      "type": "edit",
      "id": "64ae4cce0666769e",
      "item": {
        "type": "paragraph",
        "id": "64ae4cce0666769e",
        "text": "To get started with Elm PEG Parser, you first need to define a PEG grammar using the Grammar type. Once you have defined your grammar, you can use the parse function to parse input text using the grammar."
      },
      "date": 1696269828049
    },
    {
      "type": "edit",
      "id": "505834656e131276",
      "item": {
        "type": "paragraph",
        "id": "505834656e131276",
        "text": "# Getting Started"
      },
      "date": 1696269831561
    },
    {
      "type": "edit",
      "id": "505834656e131276",
      "item": {
        "type": "markdown",
        "id": "505834656e131276",
        "text": "# Getting Started"
      },
      "date": 1696269832852
    },
    {
      "item": {
        "type": "factory",
        "id": "4f74b160f25488d1"
      },
      "id": "4f74b160f25488d1",
      "type": "add",
      "after": "64ae4cce0666769e",
      "date": 1696269853591
    },
    {
      "type": "edit",
      "id": "4f74b160f25488d1",
      "item": {
        "type": "code",
        "id": "4f74b160f25488d1",
        "text": "import Html\nimport Peg exposing (Error, fromString, parse)\n\n\ngrammarString : String\ngrammarString =\n    \"\"\"\n    start <- <digit+> {action}\n    digit <- [0-9]\n    \"\"\"\n\n\n{-| Parse a string with the grammar\n-}\nresult : Result Error String\nresult =\n    let\n        actions _ found _ =\n            Ok found\n\n        predicate _ _ state =\n            ( True, state )\n    in\n    grammarString\n        |> fromString\n        |> Result.andThen (\\grammar -> parse grammar \"\" actions predicate \"123\")\n\n\n{-| Check if the parse succeeded\n-}\nmain =\n    case result of\n        Ok value ->\n            Html.text (\"Parsed value: \" ++ value)\n\n        Err error ->\n            Html.text (\"Parse error: \" ++ error.message)"
      },
      "date": 1696269855249
    },
    {
      "item": {
        "type": "factory",
        "id": "12c8b049ff3245cb"
      },
      "id": "12c8b049ff3245cb",
      "type": "add",
      "after": "4f74b160f25488d1",
      "date": 1696284342851
    },
    {
      "type": "remove",
      "id": "12c8b049ff3245cb",
      "date": 1696284347898
    },
    {
      "type": "edit",
      "id": "64ae4cce0666769e",
      "item": {
        "type": "paragraph",
        "id": "64ae4cce0666769e",
        "text": "To get started with Elm PEG Parser, you first need to [[Define a PEG Grammar]] using the Grammar type. Once you have defined your grammar, you can use the parse function to parse input text using the grammar."
      },
      "date": 1696325084013
    },
    {
      "item": {
        "type": "factory",
        "id": "ee359156e7c93c43"
      },
      "id": "ee359156e7c93c43",
      "type": "add",
      "after": "4f74b160f25488d1",
      "date": 1696325620301
    },
    {
      "type": "edit",
      "id": "ee359156e7c93c43",
      "item": {
        "type": "pagefold",
        "id": "ee359156e7c93c43",
        "text": "~"
      },
      "date": 1696325623371
    },
    {
      "item": {
        "type": "factory",
        "id": "e8a50218feea0b7d"
      },
      "id": "e8a50218feea0b7d",
      "type": "add",
      "after": "ee359156e7c93c43",
      "date": 1696325632082
    },
    {
      "type": "edit",
      "id": "e8a50218feea0b7d",
      "item": {
        "type": "paragraph",
        "id": "e8a50218feea0b7d",
        "text": "Adding Actions to a PEG Grammar"
      },
      "date": 1696325634497
    },
    {
      "type": "edit",
      "id": "e8a50218feea0b7d",
      "item": {
        "type": "paragraph",
        "id": "e8a50218feea0b7d",
        "text": "Adding Actions to a PEG Grammar [https://medium.com/@gvanrossum_83706/adding-actions-to-a-peg-grammar-d5e00fa1092f post]"
      },
      "date": 1696325641231
    },
    {
      "type": "edit",
      "id": "e8a50218feea0b7d",
      "item": {
        "type": "paragraph",
        "id": "e8a50218feea0b7d",
        "text": "Adding Actions to a PEG Grammar [https://medium.com/@gvanrossum_83706/adding-actions-to-a-peg-grammar-d5e00fa1092f post] by [[Guido van Rossum]]"
      },
      "date": 1696325682750
    },
    {
      "item": {
        "type": "factory",
        "id": "ffead5cd7fa7e3d9"
      },
      "id": "ffead5cd7fa7e3d9",
      "type": "add",
      "after": "e8a50218feea0b7d",
      "date": 1696327778799
    },
    {
      "type": "edit",
      "id": "ffead5cd7fa7e3d9",
      "item": {
        "type": "markdown",
        "id": "ffead5cd7fa7e3d9",
        "text": "In the provided Elm code, the `{action}` placeholder in the grammar does not have a specific processing step associated with it. Instead, it's a placeholder that can be used to denote where a custom action would be performed if needed. \n\nIn this code, the `{action}` is just part of the grammar rule, but it doesn't have any specific processing step defined within the Elm code. It's up to the developer to provide the actual action that should be taken when a match occurs. \n\nIn the provided code, the action placeholder `{action}` is present in the `start` rule, but no specific processing step is defined for it within the Elm code. If you wanted to perform a specific action when a match occurs, you would need to replace `{action}` with the actual code for that action. For example:\n\n```elm\ngrammarString : String\ngrammarString =\n    \"\"\"\n    start <- <char+> { String.toUpper found }\n    char <- [a-z]    \n    \"\"\"\n```\n\nIn this modified grammar, when a match occurs in the `start` rule, it will convert the matched string to uppercase before returning it as the result."
      },
      "date": 1696327781632
    },
    {
      "type": "edit",
      "id": "ffead5cd7fa7e3d9",
      "item": {
        "type": "markdown",
        "id": "ffead5cd7fa7e3d9",
        "text": "In the provided Elm code, the `{action}` placeholder in the grammar does not have a specific processing step associated with it. Instead, it's a placeholder that can be used to denote where a custom action would be performed if needed. \n\nIn this code, the `{action}` is just part of the grammar rule, but it doesn't have any specific processing step defined within the Elm code. It's up to the developer to provide the actual action that should be taken when a match occurs. \n\nIn the provided code, the action placeholder `{action}` is present in the `start` rule, but no specific processing step is defined for it within the Elm code. If you wanted to perform a specific action when a match occurs, you would need to replace `{action}` with the actual code for that action. For example: […] (ChatGPT September 25 Version)"
      },
      "date": 1696327897200
    },
    {
      "item": {
        "type": "factory",
        "id": "749c515eb63b1761"
      },
      "id": "749c515eb63b1761",
      "type": "add",
      "after": "ffead5cd7fa7e3d9",
      "date": 1696327912914
    },
    {
      "type": "edit",
      "id": "749c515eb63b1761",
      "item": {
        "type": "markdown",
        "id": "749c515eb63b1761",
        "text": "I see that there might be a misunderstanding here. The `{action}` in the PEG grammar doesn't directly map to Elm code. It's a placeholder that indicates where you might want to perform a custom action during parsing. \n\nIn your Elm code, the `actions` function is defined like this:\n\n```elm\nactions _ found _ =\n    Ok found\n```\n\nThis function is called when a match occurs. It takes three arguments: `left`, `found`, and `right`. In this case, it simply returns `Ok found`, where `found` is the matched text.\n\nThe placeholder `{action}` in the grammar corresponds to the part of the grammar where you might want to perform a custom action. In your Elm code, this action is defined in the `actions` function.\n\nIf you want to perform a different action, you would modify the `actions` function accordingly. For example, if you wanted to transform the matched text before returning it, you would do so within the `actions` function."
      },
      "date": 1696327914917
    },
    {
      "type": "edit",
      "id": "749c515eb63b1761",
      "item": {
        "type": "markdown",
        "id": "749c515eb63b1761",
        "text": "In your Elm code, the `actions` function is defined like this:\n\n```elm\nactions _ found _ =\n    Ok found\n```\n\nThis function is called when a match occurs. It takes three arguments: `left`, `found`, and `right`. In this case, it simply returns `Ok found`, where `found` is the matched text.\n\nThe placeholder `{action}` in the grammar corresponds to the part of the grammar where you might want to perform a custom action. In your Elm code, this action is defined in the `actions` function.\n\nIf you want to perform a different action, you would modify the `actions` function accordingly. For example, if you wanted to transform the matched text before returning it, you would do so within the `actions` function."
      },
      "date": 1696327927324
    },
    {
      "type": "edit",
      "id": "f6ae85c1225c1b52",
      "item": {
        "type": "paragraph",
        "id": "f6ae85c1225c1b52",
        "text": "Parsing Expression Grammar ([[PEG]]) in [[Elm]]. [https://github.com/microelm/elm-peg github], [https://package.elm-lang.org/packages/microelm/elm-peg/latest/ package]"
      },
      "date": 1696329465370
    },
    {
      "type": "edit",
      "id": "f6ae85c1225c1b52",
      "item": {
        "type": "paragraph",
        "id": "f6ae85c1225c1b52",
        "text": "[[Parsing Expression Grammar]] ([[PEG]]) in [[Elm]]. [https://github.com/microelm/elm-peg github], [https://package.elm-lang.org/packages/microelm/elm-peg/latest/ package]"
      },
      "date": 1696329477175
    },
    {
      "type": "edit",
      "id": "f6ae85c1225c1b52",
      "item": {
        "type": "paragraph",
        "id": "f6ae85c1225c1b52",
        "text": "[[Parsing Expression Grammar]] ([[PEG]]) in [[Elm]]. [https://github.com/microelm/elm-peg github], [https://package.elm-lang.org/packages/microelm/elm-peg/latest/ package] by [[Romāns Potašovs]]"
      },
      "date": 1696329606116
    }
  ]
}