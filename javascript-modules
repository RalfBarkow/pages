{
  "title": "Javascript Modules",
  "story": [
    {
      "type": "paragraph",
      "id": "734ea97d6721c238",
      "text": "In the most ubiquitous programming ecosystem, modules have been shoehorned in where they were originally lacking.  As of early 2018, nodejs gradually builds toward ECMAScript Modules.  Guidance for transition from CommonJS to ESM: [https://medium.com/@giltayar/native-es-modules-in-nodejs-status-and-future-directions-part-i-ee5ea3001f71 link]"
    },
    {
      "type": "paragraph",
      "id": "863fc1b3a11095b3",
      "text": "The whole thing is complicated by the fact that ES Module loading is asynchronous in nature, while CommonJS is synchronous by nature. "
    },
    {
      "type": "markdown",
      "id": "b3f48cb7fe86e1e7",
      "text": "Lots of code out there in the wild uses ES Modules as specified by babel/webpack, but which is different from the final way. Why different? Because babel/webpack load ES Modules synchronously, while the specification of ES Modules specify _asynchronous_ loading.\n"
    },
    {
      "type": "markdown",
      "id": "d53605aaa5d16741",
      "text": "NPM is the largest package repository in the world:"
    },
    {
      "text": "<div style=\"\n  padding: 12px;\n  background:#eee;\n  width:96%;\n  align=centered;\">\n\n<img style=\"\n  display:block;\n  margin:auto;\n  width:100%;\"\n  src=\"https://cdn-images-1.medium.com/max/1600/1*C_m4eORezKNi-IAIgbxdLg.png\">\n\n<p class=caption>\n  Transported image.\n  [https://cdn-images-1.medium.com/max/1600/1*C_m4eORezKNi-IAIgbxdLg.png source]\n</p>\n\n<p class=caption>\n  Data. [http://www.modulecounts.com/ source]\n</p>\n</div>\n",
      "type": "html",
      "id": "f0ea4c5fa4fd5ec3"
    },
    {
      "type": "markdown",
      "id": "c49bd7f5369855e3",
      "text": "# The Rules of ES Modules\n\n1. A file is ESM if and only if the extension is “mjs”\n2. A file is CJS if and only if the extension is “js”\n3. Only ESM is allowed to use `export`/`import` statements\n4. Only CJS is allowed to use import CJS using `require`\n\n"
    },
    {
      "type": "markdown",
      "id": "9aa4aec0fe0cae7c",
      "text": "# The Rules of Interoperability\n\n1. CJS can import ESM, but only using `await import()`\n2. ESM can import CJS using the `import` statement, but only a default import\n\n"
    },
    {
      "type": "markdown",
      "id": "d07133a742296edc",
      "text": "# The Rules of Migration\n\n1. `require`-ing a file with no extension resolves to a `.js` file.\n2. Importing a file with no extension resolves first to a `.mjs` file, and only if not found, to a `.js` file.\n3. Resolving bare imports is the same in CJS and MJS, except for which extension is used."
    },
    {
      "type": "pagefold",
      "id": "e1cb39f1ef738d33",
      "text": "."
    },
    {
      "type": "markdown",
      "id": "8c1f3e5f26dcbc3a",
      "text": "There's also a status report from Node.js Technical Steering Committee.  It reads as an example of argument mapping with areas of agreement identified along with areas still unresolved.  [https://medium.com/the-node-js-collection/the-current-state-of-implementation-and-planning-for-esmodules-a4ecb2aac07a link]"
    },
    {
      "type": "markdown",
      "id": "2d429a2743845714",
      "text": "Someday this will be nice: \"We are committed to having the Node.js and Web platform as first class runtimes for modules. Modules installed via npm should be able to run after installation without requiring a build step.\"\n"
    },
    {
      "type": "paragraph",
      "id": "af0680888a377355",
      "text": "Will wiki need to adopt ECMAScript Module conventions?  [[Eric Dobbs]] thinks `grunt` and `browserify` produce CommonJS-style behavior.  Will we need to adopt different build tools?"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Javascript Modules",
        "story": []
      },
      "date": 1522714505810
    },
    {
      "item": {
        "type": "factory",
        "id": "734ea97d6721c238"
      },
      "id": "734ea97d6721c238",
      "type": "add",
      "date": 1522714515578
    },
    {
      "type": "edit",
      "id": "734ea97d6721c238",
      "item": {
        "type": "paragraph",
        "id": "734ea97d6721c238",
        "text": "In the most ubiquitous programming ecosystem, modules have been shoehorned in where they were originally lacking.  As of early 2018, nodejs gradually build toward ECMScript Modules.  Guidance for transition to ESM: [https://medium.com/ link]"
      },
      "date": 1522714677004
    },
    {
      "type": "edit",
      "id": "734ea97d6721c238",
      "item": {
        "type": "paragraph",
        "id": "734ea97d6721c238",
        "text": "In the most ubiquitous programming ecosystem, modules have been shoehorned in where they were originally lacking.  As of early 2018, nodejs gradually build toward ECMScript Modules.  Guidance for transition to ESM: [https://medium.com/@giltayar/native-es-modules-in-nodejs-status-and-future-directions-part-i-ee5ea3001f71 link]"
      },
      "date": 1522714728566
    },
    {
      "type": "edit",
      "id": "734ea97d6721c238",
      "item": {
        "type": "paragraph",
        "id": "734ea97d6721c238",
        "text": "In the most ubiquitous programming ecosystem, modules have been shoehorned in where they were originally lacking.  As of early 2018, nodejs gradually builds toward ECMScript Modules.  Guidance for transition to ESM: [https://medium.com/@giltayar/native-es-modules-in-nodejs-status-and-future-directions-part-i-ee5ea3001f71 link]"
      },
      "date": 1522714751584
    },
    {
      "type": "edit",
      "id": "734ea97d6721c238",
      "item": {
        "type": "paragraph",
        "id": "734ea97d6721c238",
        "text": "In the most ubiquitous programming ecosystem, modules have been shoehorned in where they were originally lacking.  As of early 2018, nodejs gradually builds toward ECMScript Modules.  Guidance for transition from CommonJS to ESM: [https://medium.com/@giltayar/native-es-modules-in-nodejs-status-and-future-directions-part-i-ee5ea3001f71 link]"
      },
      "date": 1522714809960
    },
    {
      "type": "add",
      "id": "863fc1b3a11095b3",
      "item": {
        "type": "paragraph",
        "id": "863fc1b3a11095b3",
        "text": "The whole thing is complicated by the fact that ES Module loading is asynchronous in nature, while CommonJS is synchronous by nature."
      },
      "after": "734ea97d6721c238",
      "date": 1522715031666
    },
    {
      "type": "edit",
      "id": "863fc1b3a11095b3",
      "item": {
        "type": "paragraph",
        "id": "863fc1b3a11095b3",
        "text": "The whole thing is complicated by the fact that ES Module loading is asynchronous in nature, while CommonJS is synchronous by nature. "
      },
      "date": 1522715120144
    },
    {
      "type": "add",
      "id": "b3f48cb7fe86e1e7",
      "item": {
        "type": "paragraph",
        "id": "b3f48cb7fe86e1e7",
        "text": "Lots of code out there in the wild uses ES Modules as specified by babel/webpack, but which is different from the final way. Why different? Because babel/webpack load ES Modules synchronously"
      },
      "after": "863fc1b3a11095b3",
      "date": 1522715159332
    },
    {
      "type": "edit",
      "id": "b3f48cb7fe86e1e7",
      "item": {
        "type": "factory",
        "id": "b3f48cb7fe86e1e7",
        "text": "Lots of code out there in the wild uses ES Modules as specified by babel/webpack, but which is different from the final way. Why different? Because babel/webpack load ES Modules synchronously, while the specification of ES Modules specify "
      },
      "date": 1522715185684
    },
    {
      "type": "edit",
      "id": "b3f48cb7fe86e1e7",
      "item": {
        "type": "markdown",
        "id": "b3f48cb7fe86e1e7",
        "text": "Lots of code out there in the wild uses ES Modules as specified by babel/webpack, but which is different from the final way. Why different? Because babel/webpack load ES Modules synchronously, while the specification of ES Modules specify _asynchronous_ loading."
      },
      "date": 1522715202924
    },
    {
      "type": "add",
      "item": {
        "text": "<div style=\"\n  padding: 12px;\n  background:#eee;\n  width:96%;\n  align=centered;\">\n\n<img style=\"\n  display:block;\n  margin:auto;\n  width:100%;\"\n  src=\"https://cdn-images-1.medium.com/max/1600/1*C_m4eORezKNi-IAIgbxdLg.png\">\n\n<p class=caption>\n  Transported image.\n  [https://cdn-images-1.medium.com/max/1600/1*C_m4eORezKNi-IAIgbxdLg.png source]\n</p>\n</div>\n",
        "type": "html",
        "id": "f0ea4c5fa4fd5ec3"
      },
      "after": "b3f48cb7fe86e1e7",
      "id": "f0ea4c5fa4fd5ec3",
      "date": 1522715328930
    },
    {
      "type": "edit",
      "id": "f0ea4c5fa4fd5ec3",
      "item": {
        "text": "<div style=\"\n  padding: 12px;\n  background:#eee;\n  width:96%;\n  align=centered;\">\n\n<img style=\"\n  display:block;\n  margin:auto;\n  width:100%;\"\n  src=\"https://cdn-images-1.medium.com/max/1600/1*C_m4eORezKNi-IAIgbxdLg.png\">\n\n<p class=caption>\n  Transported image.\n  [https://cdn-images-1.medium.com/max/1600/1*C_m4eORezKNi-IAIgbxdLg.png source]\n</p>\n\n<p class=caption>\n  Data. [http://www.modulecounts.com/ source]\n</p>\n</div>\n",
        "type": "html",
        "id": "f0ea4c5fa4fd5ec3"
      },
      "date": 1522715639672
    },
    {
      "type": "edit",
      "id": "b3f48cb7fe86e1e7",
      "item": {
        "type": "markdown",
        "id": "b3f48cb7fe86e1e7",
        "text": "Lots of code out there in the wild uses ES Modules as specified by babel/webpack, but which is different from the final way. Why different? Because babel/webpack load ES Modules synchronously, while the specification of ES Modules specify _asynchronous_ loading.\n"
      },
      "date": 1522715676656
    },
    {
      "type": "add",
      "id": "d53605aaa5d16741",
      "item": {
        "type": "markdown",
        "id": "d53605aaa5d16741",
        "text": "NPM is the largest package repository in the world:"
      },
      "after": "b3f48cb7fe86e1e7",
      "date": 1522715689580
    },
    {
      "item": {
        "type": "factory",
        "id": "c49bd7f5369855e3"
      },
      "id": "c49bd7f5369855e3",
      "type": "add",
      "after": "f0ea4c5fa4fd5ec3",
      "date": 1522715745010
    },
    {
      "type": "edit",
      "id": "c49bd7f5369855e3",
      "item": {
        "type": "markdown",
        "id": "c49bd7f5369855e3",
        "text": "# The Rules of ES Modules\n\n1. A file is ESM if and only if the extension is “mjs”\n2. A file is CJS if and only if the extension is “js”\n3. Only ESM is allowed to use export/import statements\n4. Only CJS is allowed to use import CJS using require\n\n"
      },
      "date": 1522715882212
    },
    {
      "type": "add",
      "id": "9aa4aec0fe0cae7c",
      "item": {
        "type": "markdown",
        "id": "9aa4aec0fe0cae7c",
        "text": "# The Rules of Interoperability\n\n1. CJS can import ESM, but only using `await import()`\n2. ESM can import CJS using the `import` statement, but only a default import\n\n"
      },
      "after": "c49bd7f5369855e3",
      "date": 1522715884906
    },
    {
      "type": "add",
      "id": "d07133a742296edc",
      "item": {
        "type": "markdown",
        "id": "d07133a742296edc",
        "text": "# The Rules of Migration\n\n1. `require`-ing a file with no extension resolves to a `.js` file.\n2. Importing a file with no extension resolves first to a `.mjs` file, and only if not found, to a `.js` file.\n3. Resolving bare imports is the same in CJS and MJS, except for which extension is used."
      },
      "after": "9aa4aec0fe0cae7c",
      "date": 1522715889248
    },
    {
      "type": "edit",
      "id": "c49bd7f5369855e3",
      "item": {
        "type": "markdown",
        "id": "c49bd7f5369855e3",
        "text": "# The Rules of ES Modules\n\n1. A file is ESM if and only if the extension is “mjs”\n2. A file is CJS if and only if the extension is “js”\n3. Only ESM is allowed to use `export`/`import` statements\n4. Only CJS is allowed to use import CJS using `require`\n\n"
      },
      "date": 1522715921358
    },
    {
      "item": {
        "type": "factory",
        "id": "e1cb39f1ef738d33"
      },
      "id": "e1cb39f1ef738d33",
      "type": "add",
      "after": "d07133a742296edc",
      "date": 1522717904738
    },
    {
      "type": "edit",
      "id": "e1cb39f1ef738d33",
      "item": {
        "type": "pagefold",
        "id": "e1cb39f1ef738d33",
        "text": "."
      },
      "date": 1522717908528
    },
    {
      "item": {
        "type": "factory",
        "id": "8c1f3e5f26dcbc3a"
      },
      "id": "8c1f3e5f26dcbc3a",
      "type": "add",
      "after": "e1cb39f1ef738d33",
      "date": 1522717910678
    },
    {
      "type": "edit",
      "id": "8c1f3e5f26dcbc3a",
      "item": {
        "type": "markdown",
        "id": "8c1f3e5f26dcbc3a",
        "text": "There's also a status report from ECMAScript Technical Committee.  It reads as an example of argument mapping with areas of agreement identified along with areas still unresolved.  [https://medium.com/the-node-js-collection/the-current-state-of-implementation-and-planning-for-esmodules-a4ecb2aac07a link]"
      },
      "date": 1522718210074
    },
    {
      "type": "edit",
      "id": "8c1f3e5f26dcbc3a",
      "item": {
        "type": "markdown",
        "id": "8c1f3e5f26dcbc3a",
        "text": "There's also a status report from Node.js Technical Steering Committee.  It reads as an example of argument mapping with areas of agreement identified along with areas still unresolved.  [https://medium.com/the-node-js-collection/the-current-state-of-implementation-and-planning-for-esmodules-a4ecb2aac07a link]"
      },
      "date": 1522718253712
    },
    {
      "item": {
        "type": "factory",
        "id": "2d429a2743845714"
      },
      "id": "2d429a2743845714",
      "type": "add",
      "after": "8c1f3e5f26dcbc3a",
      "date": 1522718509220
    },
    {
      "type": "edit",
      "id": "2d429a2743845714",
      "item": {
        "type": "markdown",
        "id": "2d429a2743845714",
        "text": "Someday this will be nice: \"We are committed to having the Node.js and Web platform as first class runtimes for modules. Modules installed via npm should be able to run after installation without requiring a build step.\"\n"
      },
      "date": 1522718563724
    },
    {
      "item": {
        "type": "factory",
        "id": "af0680888a377355"
      },
      "id": "af0680888a377355",
      "type": "add",
      "after": "2d429a2743845714",
      "date": 1522779015450
    },
    {
      "type": "edit",
      "id": "af0680888a377355",
      "item": {
        "type": "paragraph",
        "id": "af0680888a377355",
        "text": "Will wiki need to adopt ECMAScript Module conventions?  I think `grunt` and `browserify` produce CommonJS-style behavior.  Will we need to adopt different build tools?"
      },
      "date": 1522779392030
    },
    {
      "type": "edit",
      "id": "734ea97d6721c238",
      "item": {
        "type": "paragraph",
        "id": "734ea97d6721c238",
        "text": "In the most ubiquitous programming ecosystem, modules have been shoehorned in where they were originally lacking.  As of early 2018, nodejs gradually builds toward ECMAScript Modules.  Guidance for transition from CommonJS to ESM: [https://medium.com/@giltayar/native-es-modules-in-nodejs-status-and-future-directions-part-i-ee5ea3001f71 link]"
      },
      "date": 1523218696980
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1523283266322
    },
    {
      "type": "fork",
      "site": "ward.asia.wiki.org",
      "date": 1636030900080
    },
    {
      "type": "edit",
      "id": "af0680888a377355",
      "item": {
        "type": "paragraph",
        "id": "af0680888a377355",
        "text": "Will wiki need to adopt ECMAScript Module conventions?  [[Eric Doobs]] thinks `grunt` and `browserify` produce CommonJS-style behavior.  Will we need to adopt different build tools?"
      },
      "date": 1682754558877
    },
    {
      "type": "edit",
      "id": "af0680888a377355",
      "item": {
        "type": "paragraph",
        "id": "af0680888a377355",
        "text": "Will wiki need to adopt ECMAScript Module conventions?  [[Eric Dobbs]] thinks `grunt` and `browserify` produce CommonJS-style behavior.  Will we need to adopt different build tools?"
      },
      "date": 1682754570997
    }
  ]
}