{
  "title": "Performance",
  "story": [
    {
      "type": "paragraph",
      "id": "c5cb2c67b0157b86",
      "text": "Smalltalk execution performance had been a major issue in the 1980s. But by the mid 1990s every major commercial Smalltalk had a JIT-based virtual machine and a multi-generation garbage collector. When “[[Strongtalk]] applied Self’s technology to Smalltalk” it was already practical."
    },
    {
      "type": "paragraph",
      "id": "d8bba2da60c856fc",
      "text": "While those of us working on Smalltalk VMs loved to chase C++ performance our actual competition was PowerBuilder, Visual Basic, and occasionally Delphi. All the major Smalltalk VMs had much better execution performance than any of those. Microsoft once even made a bid to acquire Digitalk, even though they had no interest in Smalltalk. They just wanted to repurpose the Smalltalk/V VM technology to make Visual Basic faster."
    },
    {
      "type": "paragraph",
      "id": "ba2a86d2528923cf",
      "text": "But as Gilad points out, raw speed is seldom an issue. Particularly for the fat client UIs that were the focus of most commercial Smalltalk customers. Smalltalk VMs also had much better performance than the other dynamic languages that emerged and gained some popularity during the 1990s. Perl, Python, Ruby, PHP all had, and as far as I know still have, much poorer execution performance than 1995 Smalltalks running on comparable hardware."
    },
    {
      "type": "paragraph",
      "id": "dda2ee293119c82a",
      "text": "Memory usage was a bigger issues. It was expensive for customers to have to double the memory in PCs to effectively run commercial Smalltalk. But Moore’s law quickly overcame that issue."
    },
    {
      "type": "markdown",
      "id": "f40cbd848e1c0274",
      "text": "> It’s also worth dwelling on the fact that raw speed is often much less relevant than people think. Java was introduced as a client technology (anyone remember applets?). The vision was programs running in web pages. Alas, Java was a terrible client technology. In contrast, even a Squeak interpreter, let alone Strongtalk, had much better start up times than Java, and better interactive response as well. It also had much smaller footprint. It was a much better basis for performant client software than Java. The implications are staggering."
    },
    {
      "type": "markdown",
      "id": "f573b593c20af6df",
      "text": "Would Squeak (or any mid-1990s version of Smalltalk) have really fared better than Java in the browser? You can try it yourself by running a 1998 version of Squeak right now in your browser: https://squeak.js.org/demo/simple.html. Is this what web developers needed at that time?"
    },
    {
      "type": "paragraph",
      "id": "6d82c79d5f046b80",
      "text": "Java’s problem as a web client was that it wanted to be it’s own platform. Java wasn’t well integrated into the HTML-based architecture of web browsers. Instead, Java treated the browser as simply another processor to host the Sun-controlled “write once, run [the same] everywhere ” Java application platform. It’s goal wasn’t to enhance native browser technology—it’s goal was to replace them."
    },
    {
      "type": "paragraph",
      "id": "ca294c6579e5b39c",
      "text": "Next: [[Interaction with the Outside World]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Performance",
        "story": []
      },
      "date": 1640378311495
    },
    {
      "item": {
        "type": "factory",
        "id": "c5cb2c67b0157b86"
      },
      "id": "c5cb2c67b0157b86",
      "type": "add",
      "date": 1640378319797
    },
    {
      "type": "edit",
      "id": "c5cb2c67b0157b86",
      "item": {
        "type": "paragraph",
        "id": "c5cb2c67b0157b86",
        "text": "Smalltalk execution performance had been a major issue in the 1980s. But by the mid 1990s every major commercial Smalltalk had a JIT-based virtual machine and a multi-generation garbage collector. When “[[Strongtalk]] applied Self’s technology to Smalltalk” it was already practical."
      },
      "date": 1640378333463
    },
    {
      "item": {
        "type": "factory",
        "id": "d8bba2da60c856fc"
      },
      "id": "d8bba2da60c856fc",
      "type": "add",
      "after": "c5cb2c67b0157b86",
      "date": 1640378363988
    },
    {
      "type": "edit",
      "id": "d8bba2da60c856fc",
      "item": {
        "type": "paragraph",
        "id": "d8bba2da60c856fc",
        "text": "While those of us working on Smalltalk VMs loved to chase C++ performance our actual competition was PowerBuilder, Visual Basic, and occasionally Delphi. All the major Smalltalk VMs had much better execution performance than any of those. Microsoft once even made a bid to acquire Digitalk, even though they had no interest in Smalltalk. They just wanted to repurpose the Smalltalk/V VM technology to make Visual Basic faster."
      },
      "date": 1640378366097
    },
    {
      "item": {
        "type": "factory",
        "id": "ba2a86d2528923cf"
      },
      "id": "ba2a86d2528923cf",
      "type": "add",
      "after": "d8bba2da60c856fc",
      "date": 1640378390531
    },
    {
      "type": "edit",
      "id": "ba2a86d2528923cf",
      "item": {
        "type": "paragraph",
        "id": "ba2a86d2528923cf",
        "text": "But as Gilad points out, raw speed is seldom an issue. Particularly for the fat client UIs that were the focus of most commercial Smalltalk customers. Smalltalk VMs also had much better performance than the other dynamic languages that emerged and gained some popularity during the 1990s. Perl, Python, Ruby, PHP all had, and as far as I know still have, much poorer execution performance than 1995 Smalltalks running on comparable hardware."
      },
      "date": 1640378391740
    },
    {
      "item": {
        "type": "factory",
        "id": "dda2ee293119c82a"
      },
      "id": "dda2ee293119c82a",
      "type": "add",
      "after": "ba2a86d2528923cf",
      "date": 1640378412285
    },
    {
      "type": "edit",
      "id": "dda2ee293119c82a",
      "item": {
        "type": "paragraph",
        "id": "dda2ee293119c82a",
        "text": "Memory usage was a bigger issues. It was expensive for customers to have to double the memory in PCs to effectively run commercial Smalltalk. But Moore’s law quickly overcame that issue."
      },
      "date": 1640378414022
    },
    {
      "item": {
        "type": "factory",
        "id": "f40cbd848e1c0274"
      },
      "id": "f40cbd848e1c0274",
      "type": "add",
      "after": "dda2ee293119c82a",
      "date": 1640378422557
    },
    {
      "type": "edit",
      "id": "f40cbd848e1c0274",
      "item": {
        "type": "markdown",
        "id": "f40cbd848e1c0274",
        "text": "> It’s also worth dwelling on the fact that raw speed is often much less relevant than people think. Java was introduced as a client technology (anyone remember applets?). The vision was programs running in web pages. Alas, Java was a terrible client technology. In contrast, even a Squeak interpreter, let alone Strongtalk, had much better start up times than Java, and better interactive response as well. It also had much smaller footprint. It was a much better basis for performant client software than Java. The implications are staggering."
      },
      "date": 1640378427095
    },
    {
      "item": {
        "type": "factory",
        "id": "f573b593c20af6df"
      },
      "id": "f573b593c20af6df",
      "type": "add",
      "after": "f40cbd848e1c0274",
      "date": 1640378434066
    },
    {
      "type": "edit",
      "id": "f573b593c20af6df",
      "item": {
        "type": "paragraph",
        "id": "f573b593c20af6df",
        "text": "Would Squeak (or any mid-1990s version of Smalltalk) have really fared better than Java in the browser? You can try it yourself by running a 1998 version of Squeak right now in your browser: https://squeak.js.org/demo/simple.html. Is this what web developers needed at that time?"
      },
      "date": 1640378435488
    },
    {
      "type": "edit",
      "id": "f573b593c20af6df",
      "item": {
        "type": "markdown",
        "id": "f573b593c20af6df",
        "text": "Would Squeak (or any mid-1990s version of Smalltalk) have really fared better than Java in the browser? You can try it yourself by running a 1998 version of Squeak right now in your browser: https://squeak.js.org/demo/simple.html. Is this what web developers needed at that time?"
      },
      "date": 1640378448633
    },
    {
      "item": {
        "type": "factory",
        "id": "6d82c79d5f046b80"
      },
      "id": "6d82c79d5f046b80",
      "type": "add",
      "after": "f573b593c20af6df",
      "date": 1640378463534
    },
    {
      "type": "edit",
      "id": "6d82c79d5f046b80",
      "item": {
        "type": "paragraph",
        "id": "6d82c79d5f046b80",
        "text": "Java’s problem as a web client was that it wanted to be it’s own platform. Java wasn’t well integrated into the HTML-based architecture of web browsers. Instead, Java treated the browser as simply another processor to host the Sun-controlled “write once, run [the same] everywhere ” Java application platform. It’s goal wasn’t to enhance native browser technology—it’s goal was to replace them."
      },
      "date": 1640378465391
    },
    {
      "item": {
        "type": "factory",
        "id": "ca294c6579e5b39c"
      },
      "id": "ca294c6579e5b39c",
      "type": "add",
      "after": "6d82c79d5f046b80",
      "date": 1640400866562
    },
    {
      "type": "edit",
      "id": "ca294c6579e5b39c",
      "item": {
        "type": "paragraph",
        "id": "ca294c6579e5b39c",
        "text": "Next: [[Interaction with the Outside World]]"
      },
      "date": 1640400893365
    }
  ]
}