{
  "title": "Transforming a Stream",
  "story": [
    {
      "type": "paragraph",
      "id": "883d86361b306383",
      "text": "map transforms a stream into a new stream of the same type or a different type. It does this using a function you supply it to convert the contained values."
    },
    {
      "type": "paragraph",
      "id": "fbe7dff3be8da0a1",
      "text": "In the clearfield example, you convert a button click to a text value to write into the text field. The button click is represented by this"
    },
    {
      "type": "code",
      "id": "c84a030b331873fe",
      "text": "Stream<Unit> sClicked"
    },
    {
      "type": "paragraph",
      "id": "8dd0294e07e7e347",
      "text": "and the change to the text field is represented by"
    },
    {
      "type": "code",
      "id": "c0ca8e8cace72946",
      "text": "Stream<String> sClearIt"
    },
    {
      "type": "paragraph",
      "id": "b2c336311f82b216",
      "text": "You use map to convert one into the other with this line of code:"
    },
    {
      "type": "code",
      "id": "143ab17e8c06533f",
      "text": "Stream<String> sClearIt = clear.sClicked.map(u -> \"\");"
    },
    {
      "type": "paragraph",
      "id": "4f0faa22304d2a92",
      "text": "This uses the Java 8 lambda syntax."
    },
    {
      "type": "paragraph",
      "id": "51c49ee2dfcd7754",
      "text": "In the example, you convert the button click (cf. SButton.ts [https://github.com/RalfBarkow/sodium-typescript-examples/blob/88b3c71da0faf07805e4ec45aefcfef68df2f166/examples/ex1/SButton.ts github]) into a text-field update by passing a function to map that converts a Unit to a String, and map uses it to convert the input Stream<Unit> to the desired Stream<String>."
    },
    {
      "type": "code",
      "id": "5df303b840d4afe1",
      "text": "class Button {\n    constructor(name) {\n        this.button = document.createElement('button');\n        this.button.textContent = name;\n        this.sClickedSink = new StreamSink();\n        this.sClicked = this.sClickedSink;\n\n        this.button.addEventListener('click', (event) => {\n            this.sClickedSink.send(Unit.UNIT);\n        });\n\n        this.render();\n    }\n\n    render() {\n        document.body.appendChild(this.button);\n        return this;\n    }\n}"
    },
    {
      "type": "paragraph",
      "id": "2b7d0576d0cdd31c",
      "text": "This sets things up so that when the sClicked stream fires with its Unit event value, the sClearIt stream created by map fires at the same time with a value of \"\". To perform this conversion, map executes the code inside the function you gave it each time sClicked fires."
    },
    {
      "type": "paragraph",
      "id": "9db191a765d3944c",
      "text": "NOTE It may seem strange that we’re saying the new stream fires at the same time as the old one. Clearly this isn’t what’s actually occurring, but in FRP we don’t think operationally. Conceptually, in FRP, we can view these two events as truly simultaneous. A transactional context makes this so. We’ll explain soon."
    },
    {
      "type": "paragraph",
      "id": "e9ff94c8521e5ed8",
      "text": "map returns a new stream that fires events at the same time as the original stream, but the payload is transformed by the given function. More generally, map takes a transformation on values (that is, a function) and performs a transformation on streams."
    },
    {
      "type": "paragraph",
      "id": "cdf0d7ca92cc8fcd",
      "text": "NOTE The examples in the next few chapters are in Java. We’ll give examples in some other languages later in the book. Look online for examples that have been translated to other programming languages."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Transforming a Stream",
        "story": []
      },
      "date": 1710223576849
    },
    {
      "item": {
        "type": "factory",
        "id": "883d86361b306383"
      },
      "id": "883d86361b306383",
      "type": "add",
      "date": 1710223578870
    },
    {
      "type": "edit",
      "id": "883d86361b306383",
      "item": {
        "type": "paragraph",
        "id": "883d86361b306383",
        "text": "map transforms a stream into a new stream of the same type or a different type. It does this using a function you supply it to convert the contained values."
      },
      "date": 1710223580617
    },
    {
      "item": {
        "type": "factory",
        "id": "8dd0294e07e7e347"
      },
      "id": "8dd0294e07e7e347",
      "type": "add",
      "after": "883d86361b306383",
      "date": 1710223590144
    },
    {
      "type": "edit",
      "id": "8dd0294e07e7e347",
      "item": {
        "type": "paragraph",
        "id": "8dd0294e07e7e347",
        "text": "In the example, you convert the button click into a text-field update by passing a function to map that converts a Unit to a String, and map uses it to convert the input Stream<Unit> to the desired Stream<String>. This sets things up so that when the sClicked stream fires with its Unit event value, the sClearIt stream created by map fires at the same time with a value of \"\". To perform this conversion, map executes the code inside the function you gave it each time sClicked fires."
      },
      "date": 1710223592285
    },
    {
      "item": {
        "type": "factory",
        "id": "9db191a765d3944c"
      },
      "id": "9db191a765d3944c",
      "type": "add",
      "after": "8dd0294e07e7e347",
      "date": 1710223610890
    },
    {
      "type": "edit",
      "id": "9db191a765d3944c",
      "item": {
        "type": "paragraph",
        "id": "9db191a765d3944c",
        "text": "NOTE It may seem strange that we’re saying the new stream fires at the same time as the old one. Clearly this isn’t what’s actually occurring, but in FRP we don’t think operationally. Conceptually, in FRP, we can view these two events as truly simultaneous. A transactional context makes this so. We’ll explain soon."
      },
      "date": 1710223613425
    },
    {
      "item": {
        "type": "factory",
        "id": "e9ff94c8521e5ed8"
      },
      "id": "e9ff94c8521e5ed8",
      "type": "add",
      "after": "9db191a765d3944c",
      "date": 1710223698987
    },
    {
      "type": "edit",
      "id": "e9ff94c8521e5ed8",
      "item": {
        "type": "paragraph",
        "id": "e9ff94c8521e5ed8",
        "text": "When a stream fires, an event or a message is propagated from one part of the program to another. That message consists of a value, often referred to as a payload, and the type of that value is specified (in Java) using generics, in the same way you represent the type of elements in a List or other container. For example, to represent a stream of keypress positions, you’d want the Stream to have a payload of type Char, so you’d declare it like this:"
      },
      "date": 1710223700566
    },
    {
      "item": {
        "type": "factory",
        "id": "625d7516d720ec11"
      },
      "id": "625d7516d720ec11",
      "type": "add",
      "after": "e9ff94c8521e5ed8",
      "date": 1710223709138
    },
    {
      "type": "edit",
      "id": "625d7516d720ec11",
      "item": {
        "type": "code",
        "id": "625d7516d720ec11",
        "text": "Stream<Char> sKeyPresses = ..."
      },
      "date": 1710223711176
    },
    {
      "item": {
        "type": "factory",
        "id": "cdf0d7ca92cc8fcd"
      },
      "id": "cdf0d7ca92cc8fcd",
      "type": "add",
      "after": "625d7516d720ec11",
      "date": 1710223719811
    },
    {
      "type": "edit",
      "id": "cdf0d7ca92cc8fcd",
      "item": {
        "type": "paragraph",
        "id": "cdf0d7ca92cc8fcd",
        "text": "NOTE The examples in the next few chapters are in Java. We’ll give examples in some other languages later in the book. Look online for examples that have been translated to other programming languages."
      },
      "date": 1710223721652
    },
    {
      "type": "edit",
      "id": "8dd0294e07e7e347",
      "item": {
        "type": "paragraph",
        "id": "8dd0294e07e7e347",
        "text": "In the example (cf. SButton.ts [https://github.com/RalfBarkow/sodium-typescript-examples/blob/88b3c71da0faf07805e4ec45aefcfef68df2f166/examples/ex1/SButton.ts github]), you convert the button click into a text-field update by passing a function to map that converts a Unit to a String, and map uses it to convert the input Stream<Unit> to the desired Stream<String>. This sets things up so that when the sClicked stream fires with its Unit event value, the sClearIt stream created by map fires at the same time with a value of \"\". To perform this conversion, map executes the code inside the function you gave it each time sClicked fires."
      },
      "date": 1710224096266
    },
    {
      "id": "5df303b840d4afe1",
      "type": "add",
      "item": {
        "type": "code",
        "id": "5df303b840d4afe1",
        "text": "class Button {\n    constructor(name) {\n        this.button = document.createElement('button');\n        this.button.textContent = name;\n        this.sClickedSink = new StreamSink();\n        this.sClicked = this.sClickedSink;\n\n        this.button.addEventListener('click', (event) => {\n            this.sClickedSink.send(Unit.UNIT);\n        });\n\n        this.render();\n    }\n\n    render() {\n        document.body.appendChild(this.button);\n        return this;\n    }\n}"
      },
      "after": "883d86361b306383",
      "attribution": {
        "page": "2024-03-12"
      },
      "date": 1710224102714
    },
    {
      "type": "edit",
      "id": "8dd0294e07e7e347",
      "item": {
        "type": "paragraph",
        "id": "8dd0294e07e7e347",
        "text": "In the example (cf. SButton.ts [https://github.com/RalfBarkow/sodium-typescript-examples/blob/88b3c71da0faf07805e4ec45aefcfef68df2f166/examples/ex1/SButton.ts github]), you convert the button click into a text-field update by passing a function to map that converts a Unit to a String, and map uses it to convert the input Stream<Unit> to the desired Stream<String>."
      },
      "date": 1710224132044
    },
    {
      "type": "add",
      "id": "2b7d0576d0cdd31c",
      "item": {
        "type": "paragraph",
        "id": "2b7d0576d0cdd31c",
        "text": "This sets things up so that when the sClicked stream fires with its Unit event value, the sClearIt stream created by map fires at the same time with a value of \"\". To perform this conversion, map executes the code inside the function you gave it each time sClicked fires."
      },
      "after": "8dd0294e07e7e347",
      "date": 1710224133667
    },
    {
      "id": "8dd0294e07e7e347",
      "type": "move",
      "order": [
        "883d86361b306383",
        "8dd0294e07e7e347",
        "5df303b840d4afe1",
        "2b7d0576d0cdd31c",
        "9db191a765d3944c",
        "e9ff94c8521e5ed8",
        "625d7516d720ec11",
        "cdf0d7ca92cc8fcd"
      ],
      "date": 1710224135554
    },
    {
      "type": "add",
      "id": "fbe7dff3be8da0a1",
      "item": {
        "type": "paragraph",
        "id": "fbe7dff3be8da0a1",
        "text": "In the clearfield example, you convert a button click to a text value to write into the text field. The button click is represented by this"
      },
      "after": "883d86361b306383",
      "date": 1710224354287
    },
    {
      "id": "c84a030b331873fe",
      "type": "add",
      "item": {
        "type": "code",
        "id": "c84a030b331873fe",
        "text": "Stream<Unit> sClicked"
      },
      "after": "fbe7dff3be8da0a1",
      "attribution": {
        "page": "scratch"
      },
      "date": 1710224374705
    },
    {
      "type": "edit",
      "id": "8dd0294e07e7e347",
      "item": {
        "type": "paragraph",
        "id": "8dd0294e07e7e347",
        "text": "and the change to the text field is represented by"
      },
      "date": 1710224404624
    },
    {
      "type": "add",
      "id": "51c49ee2dfcd7754",
      "item": {
        "type": "paragraph",
        "id": "51c49ee2dfcd7754",
        "text": "In the example (cf. SButton.ts [https://github.com/RalfBarkow/sodium-typescript-examples/blob/88b3c71da0faf07805e4ec45aefcfef68df2f166/examples/ex1/SButton.ts github]), you convert the button click into a text-field update by passing a function to map that converts a Unit to a String, and map uses it to convert the input Stream<Unit> to the desired Stream<String>."
      },
      "after": "8dd0294e07e7e347",
      "date": 1710224405560
    },
    {
      "id": "c0ca8e8cace72946",
      "type": "add",
      "item": {
        "type": "code",
        "id": "c0ca8e8cace72946",
        "text": "Stream<String> sClearIt"
      },
      "after": "8dd0294e07e7e347",
      "attribution": {
        "page": "scratch"
      },
      "date": 1710224423209
    },
    {
      "id": "b2c336311f82b216",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b2c336311f82b216",
        "text": "You use map to convert one into the other with this line of code:"
      },
      "after": "c0ca8e8cace72946",
      "attribution": {
        "page": "scratch"
      },
      "date": 1710224441208
    },
    {
      "id": "143ab17e8c06533f",
      "type": "add",
      "item": {
        "type": "code",
        "id": "143ab17e8c06533f",
        "text": "Stream<String> sClearIt = clear.sClicked.map(u -> \"\");"
      },
      "after": "b2c336311f82b216",
      "attribution": {
        "page": "scratch"
      },
      "date": 1710224462096
    },
    {
      "id": "4f0faa22304d2a92",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4f0faa22304d2a92",
        "text": "This uses the Java 8 lambda syntax."
      },
      "after": "143ab17e8c06533f",
      "attribution": {
        "page": "scratch"
      },
      "date": 1710224475983
    },
    {
      "type": "edit",
      "id": "51c49ee2dfcd7754",
      "item": {
        "type": "paragraph",
        "id": "51c49ee2dfcd7754",
        "text": "In the example, you convert the button click (cf. SButton.ts [https://github.com/RalfBarkow/sodium-typescript-examples/blob/88b3c71da0faf07805e4ec45aefcfef68df2f166/examples/ex1/SButton.ts github]) into a text-field update by passing a function to map that converts a Unit to a String, and map uses it to convert the input Stream<Unit> to the desired Stream<String>."
      },
      "date": 1710224526630
    },
    {
      "type": "edit",
      "id": "e9ff94c8521e5ed8",
      "item": {
        "type": "paragraph",
        "id": "e9ff94c8521e5ed8",
        "text": "map returns a new stream that fires events at the same time as the original stream, but the payload is transformed by the given function. More generally, map takes a transformation on values (that is, a function) and performs a transformation on streams."
      },
      "date": 1710224686729
    },
    {
      "type": "remove",
      "id": "625d7516d720ec11",
      "date": 1710224688812
    }
  ]
}