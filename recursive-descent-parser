{
  "title": "Recursive Descent Parser",
  "story": [
    {
      "type": "paragraph",
      "id": "dca96d0c100b5208",
      "text": "is a kind of Top-Down Parser. [https://www.geeksforgeeks.org/recursive-descent-parser/ page]"
    },
    {
      "type": "paragraph",
      "id": "5a78661a3ad2d1f2",
      "text": "A top-down parser builds the parse tree from the top to down, starting with the start non-terminal. A Predictive Parser is a special case of Recursive Descent Parser, where no Back Tracking is required."
    },
    {
      "type": "paragraph",
      "id": "af4bd775ae1f65e8",
      "text": "By carefully writing a grammar means eliminating left recursion and left factoring from it, the resulting grammar will be a grammar that can be parsed by a recursive descent parser."
    },
    {
      "type": "paragraph",
      "id": "10433c17f3149c14",
      "text": "What is Recursive Descent Parser? [https://www.tutorialspoint.com/what-is-recursive-descent-parser page], courseware [https://athena.ecs.csus.edu/~mei/rdp135/rdr/rdp.php csus.edu]:"
    },
    {
      "type": "markdown",
      "id": "5239befb69bbeee8",
      "text": "\n"
    },
    {
      "type": "markdown",
      "id": "51956c8c879b48cc",
      "text": "* [[Recognizer]] is like a scanner, which also determines whether lexemes are in proper order or not.\n* [[Recursive Descent Parsing]] is the top-down parsing approach which is used to build [[Recognizer]] for your language.\n* Recursive Descent Parser is a recursive program to recognise sentences in the language. A recursive descent parser consists of a set of methods, one for each non-terminal symbol.\n* Recursive Descent Parser can be written in any programming language which supports [[Recursion]].\n\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Recursive Descent Parser",
        "story": []
      },
      "date": 1651135595842
    },
    {
      "item": {
        "type": "factory",
        "id": "5239befb69bbeee8"
      },
      "id": "5239befb69bbeee8",
      "type": "add",
      "date": 1651135615312
    },
    {
      "type": "edit",
      "id": "5239befb69bbeee8",
      "item": {
        "type": "markdown",
        "id": "5239befb69bbeee8",
        "text": "Prerequisite – Construction of LL(1) Parsing Table, Classification of top down parsers \nParsing is the process to determine whether the start symbol can derive the program or not. If the Parsing is successful then the program is a valid program otherwise the program is invalid. \nThere are generally two types of Parsers: \n \n\n    Top-Down Parsers: \n        In this Parsing technique we expand the start symbol to the whole program.\n        Recursive Descent and LL parsers are the Top-Down parsers.\n    Bottom-Up Parsers: \n        In this Parsing technique we reduce the whole program to start symbol.\n        Operator Precedence Parser, LR(0) Parser, SLR Parser, LALR Parser and CLR Parser are the Bottom-Up parsers.\n\nRecursive Descent Parser: \nIt is a kind of Top-Down Parser. A top-down parser builds the parse tree from the top to down, starting with the start non-terminal. A Predictive Parser is a special case of Recursive Descent Parser, where no Back Tracking is required. \nBy carefully writing a grammar means eliminating left recursion and left factoring from it, the resulting grammar will be a grammar that can be parsed by a recursive descent parser."
      },
      "date": 1651135617135
    },
    {
      "type": "edit",
      "id": "5239befb69bbeee8",
      "item": {
        "type": "markdown",
        "id": "5239befb69bbeee8",
        "text": "Prerequisite – Construction of LL(1) Parsing Table, Classification of top down parsers \nParsing is the process to determine whether the start symbol can derive the program or not. If the Parsing is successful then the program is a valid program otherwise the program is invalid. \nThere are generally two types of Parsers: \n \n\n1. Top-Down Parsers: \n* In this Parsing technique we expand the start symbol to the whole program.\n* Recursive Descent and LL parsers are the Top-Down parsers.\n1. Bottom-Up Parsers: \n* In this Parsing technique we reduce the whole program to start symbol.\n* Operator Precedence Parser, LR(0) Parser, SLR Parser, LALR Parser and CLR Parser are the Bottom-Up parsers.\n\nRecursive Descent Parser: \nIt is a kind of Top-Down Parser. A top-down parser builds the parse tree from the top to down, starting with the start non-terminal. A Predictive Parser is a special case of Recursive Descent Parser, where no Back Tracking is required. \nBy carefully writing a grammar means eliminating left recursion and left factoring from it, the resulting grammar will be a grammar that can be parsed by a recursive descent parser."
      },
      "date": 1651135667035
    },
    {
      "type": "edit",
      "id": "5239befb69bbeee8",
      "item": {
        "type": "markdown",
        "id": "5239befb69bbeee8",
        "text": "Prerequisite – Construction of LL(1) Parsing Table, Classification of top down parsers \nParsing is the process to determine whether the start symbol can derive the program or not. If the Parsing is successful then the program is a valid program otherwise the program is invalid. \nThere are generally two types of Parsers: \n \n\n1. Top-Down Parsers: \n** In this Parsing technique we expand the start symbol to the whole program.\n** Recursive Descent and LL parsers are the Top-Down parsers.\n1. Bottom-Up Parsers: \n** In this Parsing technique we reduce the whole program to start symbol.\n** Operator Precedence Parser, LR(0) Parser, SLR Parser, LALR Parser and CLR Parser are the Bottom-Up parsers.\n\nRecursive Descent Parser: \nIt is a kind of Top-Down Parser. A top-down parser builds the parse tree from the top to down, starting with the start non-terminal. A Predictive Parser is a special case of Recursive Descent Parser, where no Back Tracking is required. \nBy carefully writing a grammar means eliminating left recursion and left factoring from it, the resulting grammar will be a grammar that can be parsed by a recursive descent parser."
      },
      "date": 1651135692064
    },
    {
      "type": "edit",
      "id": "5239befb69bbeee8",
      "item": {
        "type": "markdown",
        "id": "5239befb69bbeee8",
        "text": " It is a kind of Top-Down Parser. A top-down parser builds the parse tree from the top to down, starting with the start non-terminal. A Predictive Parser is a special case of Recursive Descent Parser, where no Back Tracking is required. \nBy carefully writing a grammar means eliminating left recursion and left factoring from it, the resulting grammar will be a grammar that can be parsed by a recursive descent parser."
      },
      "date": 1651135757450
    },
    {
      "type": "edit",
      "id": "5239befb69bbeee8",
      "item": {
        "type": "markdown",
        "id": "5239befb69bbeee8",
        "text": " It is a kind of Top-Down Parser. [https://www.geeksforgeeks.org/recursive-descent-parser/ page]\nA top-down parser builds the parse tree from the top to down, starting with the start non-terminal. A Predictive Parser is a special case of Recursive Descent Parser, where no Back Tracking is required. \nBy carefully writing a grammar means eliminating left recursion and left factoring from it, the resulting grammar will be a grammar that can be parsed by a recursive descent parser."
      },
      "date": 1651135780666
    },
    {
      "type": "edit",
      "id": "5239befb69bbeee8",
      "item": {
        "type": "markdown",
        "id": "5239befb69bbeee8",
        "text": " It is a kind of Top-Down Parser. [https://www.geeksforgeeks.org/recursive-descent-parser/ page]\nA top-down parser builds the parse tree from the top to down, starting with the start non-terminal. A Predictive Parser is a special case of Recursive Descent Parser, where no Back Tracking is required.\n"
      },
      "date": 1651135798094
    },
    {
      "type": "add",
      "id": "a7cb8e75c3b2d4bf",
      "item": {
        "type": "markdown",
        "id": "a7cb8e75c3b2d4bf",
        "text": " \nBy carefully writing a grammar means eliminating left recursion and left factoring from it, the resulting grammar will be a grammar that can be parsed by a recursive descent parser."
      },
      "after": "5239befb69bbeee8",
      "date": 1651135798470
    },
    {
      "item": {
        "type": "factory",
        "id": "a2bd6fb8d0e102e9"
      },
      "id": "a2bd6fb8d0e102e9",
      "type": "add",
      "after": "a7cb8e75c3b2d4bf",
      "date": 1651135877028
    },
    {
      "type": "edit",
      "id": "a2bd6fb8d0e102e9",
      "item": {
        "type": "paragraph",
        "id": "a2bd6fb8d0e102e9",
        "text": "[https://www.tutorialspoint.com/what-is-recursive-descent-parser page]"
      },
      "date": 1651135890410
    },
    {
      "type": "edit",
      "id": "a2bd6fb8d0e102e9",
      "item": {
        "type": "paragraph",
        "id": "a2bd6fb8d0e102e9",
        "text": "What is Recursive Descent Parser? [https://www.tutorialspoint.com/what-is-recursive-descent-parser page]"
      },
      "date": 1651135902251
    },
    {
      "item": {
        "type": "factory",
        "id": "15ed2390618a100a"
      },
      "id": "15ed2390618a100a",
      "type": "add",
      "after": "a2bd6fb8d0e102e9",
      "date": 1651135930983
    },
    {
      "type": "edit",
      "id": "15ed2390618a100a",
      "item": {
        "type": "paragraph",
        "id": "15ed2390618a100a",
        "text": "[https://athena.ecs.csus.edu/~mei/rdp135/rdr/rdp.php page]"
      },
      "date": 1651135944130
    },
    {
      "type": "edit",
      "id": "15ed2390618a100a",
      "item": {
        "type": "paragraph",
        "id": "15ed2390618a100a",
        "text": "Courseware [https://athena.ecs.csus.edu/~mei/rdp135/rdr/rdp.php page]"
      },
      "date": 1651135957753
    },
    {
      "type": "edit",
      "id": "15ed2390618a100a",
      "item": {
        "type": "paragraph",
        "id": "15ed2390618a100a",
        "text": "Courseware [https://athena.ecs.csus.edu/~mei/rdp135/rdr/rdp.php csus.edu]"
      },
      "date": 1651135976179
    },
    {
      "item": {
        "type": "factory",
        "id": "51956c8c879b48cc"
      },
      "id": "51956c8c879b48cc",
      "type": "add",
      "after": "15ed2390618a100a",
      "date": 1651136006035
    },
    {
      "type": "edit",
      "id": "51956c8c879b48cc",
      "item": {
        "type": "markdown",
        "id": "51956c8c879b48cc",
        "text": "* Recognizer is like a scanner, which also determines whether lexemes are in proper order or not.\n* Recursive Descent Parsing is the top-down parsing approach which is used to build recognizer for your language.\n* Recursive Descent Parser is a recursive program to recognise sentences in the language. A recursive descent parser consists of a set of methods, one for each non-terminal symbol.\n* Recursive Descent Parser can be written in any programming language which supports recursion.\n\n"
      },
      "date": 1651136024212
    },
    {
      "type": "remove",
      "id": "15ed2390618a100a",
      "date": 1651136121623
    },
    {
      "type": "edit",
      "id": "a2bd6fb8d0e102e9",
      "item": {
        "type": "paragraph",
        "id": "a2bd6fb8d0e102e9",
        "text": "What is Recursive Descent Parser? [https://www.tutorialspoint.com/what-is-recursive-descent-parser page], courseware [https://athena.ecs.csus.edu/~mei/rdp135/rdr/rdp.php csus.edu]"
      },
      "date": 1651136126219
    },
    {
      "type": "edit",
      "id": "51956c8c879b48cc",
      "item": {
        "type": "markdown",
        "id": "51956c8c879b48cc",
        "text": "* [[Recognizer]] is like a scanner, which also determines whether lexemes are in proper order or not.\n* Recursive Descent Parsing is the top-down parsing approach which is used to build recognizer for your language.\n* Recursive Descent Parser is a recursive program to recognise sentences in the language. A recursive descent parser consists of a set of methods, one for each non-terminal symbol.\n* Recursive Descent Parser can be written in any programming language which supports recursion.\n\n"
      },
      "date": 1651136180459
    },
    {
      "type": "edit",
      "id": "a2bd6fb8d0e102e9",
      "item": {
        "type": "paragraph",
        "id": "a2bd6fb8d0e102e9",
        "text": "What is Recursive Descent Parser? [https://www.tutorialspoint.com/what-is-recursive-descent-parser page], courseware [https://athena.ecs.csus.edu/~mei/rdp135/rdr/rdp.php csus.edu]:"
      },
      "date": 1651136286007
    },
    {
      "type": "edit",
      "id": "51956c8c879b48cc",
      "item": {
        "type": "markdown",
        "id": "51956c8c879b48cc",
        "text": "* [[Recognizer]] is like a scanner, which also determines whether lexemes are in proper order or not.\n* [[Recursive Descent Parsing]] is the top-down parsing approach which is used to build [[recognizer]] for your language.\n* Recursive Descent Parser is a recursive program to recognise sentences in the language. A recursive descent parser consists of a set of methods, one for each non-terminal symbol.\n* Recursive Descent Parser can be written in any programming language which supports recursion.\n\n"
      },
      "date": 1651136321245
    },
    {
      "type": "edit",
      "id": "51956c8c879b48cc",
      "item": {
        "type": "markdown",
        "id": "51956c8c879b48cc",
        "text": "* [[Recognizer]] is like a scanner, which also determines whether lexemes are in proper order or not.\n* [[Recursive Descent Parsing]] is the top-down parsing approach which is used to build [[recognizer]] for your language.\n* Recursive Descent Parser is a recursive program to recognise sentences in the language. A recursive descent parser consists of a set of methods, one for each non-terminal symbol.\n* Recursive Descent Parser can be written in any programming language which supports [[recursion]].\n\n"
      },
      "date": 1651136343520
    },
    {
      "item": {
        "type": "factory",
        "id": "dca96d0c100b5208"
      },
      "id": "dca96d0c100b5208",
      "type": "add",
      "after": "51956c8c879b48cc",
      "date": 1696434900877
    },
    {
      "id": "dca96d0c100b5208",
      "type": "move",
      "order": [
        "dca96d0c100b5208",
        "5239befb69bbeee8",
        "a7cb8e75c3b2d4bf",
        "a2bd6fb8d0e102e9",
        "51956c8c879b48cc"
      ],
      "date": 1696434905612
    },
    {
      "type": "edit",
      "id": "5239befb69bbeee8",
      "item": {
        "type": "markdown",
        "id": "5239befb69bbeee8",
        "text": "\n"
      },
      "date": 1696434915180
    },
    {
      "type": "edit",
      "id": "dca96d0c100b5208",
      "item": {
        "type": "paragraph",
        "id": "dca96d0c100b5208",
        "text": "is a kind of Top-Down Parser. [https://www.geeksforgeeks.org/recursive-descent-parser/ page]"
      },
      "date": 1696434919721
    },
    {
      "type": "add",
      "id": "5a78661a3ad2d1f2",
      "item": {
        "type": "paragraph",
        "id": "5a78661a3ad2d1f2",
        "text": "A top-down parser builds the parse tree from the top to down, starting with the start non-terminal. A Predictive Parser is a special case of Recursive Descent Parser, where no Back Tracking is required."
      },
      "after": "dca96d0c100b5208",
      "date": 1696434920363
    },
    {
      "type": "remove",
      "id": "a7cb8e75c3b2d4bf",
      "date": 1696434941064
    },
    {
      "type": "add",
      "id": "af4bd775ae1f65e8",
      "item": {
        "type": "paragraph",
        "id": "af4bd775ae1f65e8",
        "text": " By carefully writing a grammar means eliminating left recursion and left factoring from it, the resulting grammar will be a grammar that can be parsed by a recursive descent parser."
      },
      "after": "5a78661a3ad2d1f2",
      "date": 1696434946585
    },
    {
      "type": "edit",
      "id": "af4bd775ae1f65e8",
      "item": {
        "type": "paragraph",
        "id": "af4bd775ae1f65e8",
        "text": "By carefully writing a grammar means eliminating left recursion and left factoring from it, the resulting grammar will be a grammar that can be parsed by a recursive descent parser."
      },
      "date": 1696434949935
    },
    {
      "type": "remove",
      "id": "a2bd6fb8d0e102e9",
      "date": 1696434965679
    },
    {
      "type": "add",
      "id": "10433c17f3149c14",
      "item": {
        "type": "paragraph",
        "id": "10433c17f3149c14",
        "text": "What is Recursive Descent Parser? [https://www.tutorialspoint.com/what-is-recursive-descent-parser page], courseware [https://athena.ecs.csus.edu/~mei/rdp135/rdr/rdp.php csus.edu]:"
      },
      "after": "af4bd775ae1f65e8",
      "date": 1696434967587
    },
    {
      "type": "edit",
      "id": "51956c8c879b48cc",
      "item": {
        "type": "markdown",
        "id": "51956c8c879b48cc",
        "text": "* [[Recognizer]] is like a scanner, which also determines whether lexemes are in proper order or not.\n* [[Recursive Descent Parsing]] is the top-down parsing approach which is used to build [[Recognizer]] for your language.\n* Recursive Descent Parser is a recursive program to recognise sentences in the language. A recursive descent parser consists of a set of methods, one for each non-terminal symbol.\n* Recursive Descent Parser can be written in any programming language which supports [[recursion]].\n\n"
      },
      "date": 1696435018821
    },
    {
      "type": "edit",
      "id": "51956c8c879b48cc",
      "item": {
        "type": "markdown",
        "id": "51956c8c879b48cc",
        "text": "* [[Recognizer]] is like a scanner, which also determines whether lexemes are in proper order or not.\n* [[Recursive Descent Parsing]] is the top-down parsing approach which is used to build [[Recognizer]] for your language.\n* Recursive Descent Parser is a recursive program to recognise sentences in the language. A recursive descent parser consists of a set of methods, one for each non-terminal symbol.\n* Recursive Descent Parser can be written in any programming language which supports [[Recursion]].\n\n"
      },
      "date": 1696435037577
    }
  ]
}