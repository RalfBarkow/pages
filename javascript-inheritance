{
  "title": "JavaScript Inheritance",
  "story": [
    {
      "type": "paragraph",
      "id": "eeaac4f0ddfcd568",
      "text": "JavaScript has single, prototypical inheritance. This means that each object can inherit from exactly one other object, any other object. And they can form a chain. You can thus inherit from an arbitrary number of previous objects, in order all the way back to Object.prototype, the default object that all prototype chains lead back to."
    },
    {
      "type": "paragraph",
      "id": "83c163a61d985d85",
      "text": "There are a couple of built in ways to build objects in JavaScript. There are also lots of ways to create and extend objects in JS libraries that can be very handy, but they are mostly just sugar on top of these options."
    },
    {
      "type": "paragraph",
      "id": "7b34b1e76054aeaa",
      "text": "Object literals are by far the most common. They allow you to very quickly create an object with exactly what you want in it. The syntax should also be familiar from JSON. There is no clearer way to define an object in JavaScript, but by default this leaves you directly inheriting from Object.prototype, with nothing else in your chain."
    },
    {
      "type": "paragraph",
      "id": "568d9a0d7ff85b0f",
      "text": "You can also use Object.create(o) which returns a new object that inherits from o."
    },
    {
      "type": "paragraph",
      "id": "1f981a49b6ce6a11",
      "text": "Object.create is the only way to create an object that inherits from null, and thus doesn't trace back to Object.prototype."
    },
    {
      "type": "paragraph",
      "id": "852a90af01380965",
      "text": "The \"new\" keyword is another way to create objects with some sugar to make them more like a classical inheritance model. The most important thing to understand is that the constructor functions themselves have no magic, they are normal functions. The function.prototype property of that function also has no magic, it is just a normal object, with a reference to the constructor function itself."
    },
    {
      "type": "paragraph",
      "id": "db649e7e5fd4e34a",
      "text": "The object returned from new's invocation of a constructor inherits from that functions prototype property. This allows you to easily have a \"class' of objects, that you only need to go one place to extend their prototype. The prototype property is just a normal object who's \"constructor\" property points back to the function, and who's prototype is Object.prototype by default."
    },
    {
      "type": "paragraph",
      "id": "0b9b47870826b087",
      "text": "To use \"new\" to create an object chain replace func.prototype with another object that inherits from the grandparent, and a \"constructor\" property that points to the function you are attaching it to."
    }
  ],
  "journal": [
    {
      "type": "create",
      "id": "7c8bce24572b933f",
      "item": {
        "title": "JavaScript Inheritance"
      },
      "date": 1346285362428
    },
    {
      "item": {
        "type": "factory",
        "id": "eeaac4f0ddfcd568"
      },
      "id": "eeaac4f0ddfcd568",
      "type": "add",
      "date": 1346285389358
    },
    {
      "type": "edit",
      "id": "eeaac4f0ddfcd568",
      "item": {
        "type": "paragraph",
        "id": "eeaac4f0ddfcd568",
        "text": "JavaScript has single, Prototypical inheritance. This means that each object can inherit from exactly one other object, but they can form a chain. You can thus inherit from an arbitrary number of previous objects, in order all the way back to Object.prototype, the default object that all prototype chains lead back to."
      },
      "date": 1346285571821
    },
    {
      "item": {
        "type": "paragraph",
        "id": "83c163a61d985d85",
        "text": ""
      },
      "id": "83c163a61d985d85",
      "type": "add",
      "after": "eeaac4f0ddfcd568",
      "date": 1346285572334
    },
    {
      "type": "edit",
      "id": "83c163a61d985d85",
      "item": {
        "type": "paragraph",
        "id": "83c163a61d985d85",
        "text": "There are a couple of built in ways to build objects in JavaScript. There are also lots of ways to create and extend objects in JS libraries that can be very handy, but they are mostly just sugar on top of these options."
      },
      "date": 1346285672991
    },
    {
      "item": {
        "type": "paragraph",
        "id": "7b34b1e76054aeaa",
        "text": ""
      },
      "id": "7b34b1e76054aeaa",
      "type": "add",
      "after": "83c163a61d985d85",
      "date": 1346285673499
    },
    {
      "type": "edit",
      "id": "7b34b1e76054aeaa",
      "item": {
        "type": "paragraph",
        "id": "7b34b1e76054aeaa",
        "text": "Object literals are by far the most common. The allow you to very quickly create an object with exactly what you want in it. The syntax should also be familiar from JSON. There is no clearer way to define an object in JavaScript, but by default this leaves you directly inheriting from Object.prototype, with nothing else in your chain."
      },
      "date": 1346285791318
    },
    {
      "type": "edit",
      "id": "7b34b1e76054aeaa",
      "item": {
        "type": "paragraph",
        "id": "7b34b1e76054aeaa",
        "text": "Object literals are by far the most common. They allow you to very quickly create an object with exactly what you want in it. The syntax should also be familiar from JSON. There is no clearer way to define an object in JavaScript, but by default this leaves you directly inheriting from Object.prototype, with nothing else in your chain."
      },
      "date": 1351296068264
    },
    {
      "item": {
        "type": "paragraph",
        "id": "568d9a0d7ff85b0f",
        "text": ""
      },
      "id": "568d9a0d7ff85b0f",
      "type": "add",
      "after": "7b34b1e76054aeaa",
      "date": 1351296068768
    },
    {
      "type": "edit",
      "id": "568d9a0d7ff85b0f",
      "item": {
        "type": "paragraph",
        "id": "568d9a0d7ff85b0f",
        "text": "You can also use Object.create(o) which returns a new object that inherits from o."
      },
      "date": 1351296218665
    },
    {
      "item": {
        "type": "paragraph",
        "id": "1f981a49b6ce6a11",
        "text": "This is also the only way to create an object that inherits from null, and thus doesn't trace back to Object.prototype."
      },
      "id": "1f981a49b6ce6a11",
      "type": "add",
      "after": "568d9a0d7ff85b0f",
      "date": 1351296219172
    },
    {
      "type": "edit",
      "id": "1f981a49b6ce6a11",
      "item": {
        "type": "paragraph",
        "id": "1f981a49b6ce6a11",
        "text": "Object.create is the only way to create an object that inherits from null, and thus doesn't trace back to Object.prototype."
      },
      "date": 1351296286671
    },
    {
      "item": {
        "type": "paragraph",
        "id": "852a90af01380965",
        "text": ""
      },
      "id": "852a90af01380965",
      "type": "add",
      "after": "1f981a49b6ce6a11",
      "date": 1351296287174
    },
    {
      "type": "edit",
      "id": "852a90af01380965",
      "item": {
        "type": "paragraph",
        "id": "852a90af01380965",
        "text": "The \"new\" keyword is another way to create objects with some sugar to make them more like a classical inheritance model."
      },
      "date": 1351296444419
    },
    {
      "type": "edit",
      "id": "852a90af01380965",
      "item": {
        "type": "paragraph",
        "id": "852a90af01380965",
        "text": "The \"new\" keyword is another way to create objects with some sugar to make them more like a classical inheritance model. Warning: while this is a common pattern, but it doesn't relate well to any other part of javascript."
      },
      "date": 1351296949998
    },
    {
      "item": {
        "type": "paragraph",
        "id": "df8b849eb26acb57",
        "text": ""
      },
      "id": "df8b849eb26acb57",
      "type": "add",
      "after": "852a90af01380965",
      "date": 1351296950502
    },
    {
      "type": "remove",
      "id": "df8b849eb26acb57",
      "date": 1351297021989
    },
    {
      "type": "edit",
      "id": "852a90af01380965",
      "item": {
        "type": "paragraph",
        "id": "852a90af01380965",
        "text": "The \"new\" keyword is another way to create objects with some sugar to make them more like a classical inheritance model. The most important thing to understand is that the constructor functions themselves have no magic, they are normal functions. The function.prototype property of that function also has no magic, it is just a normal object, with a reference to the constructor function itself."
      },
      "date": 1351297206474
    },
    {
      "item": {
        "type": "paragraph",
        "id": "db649e7e5fd4e34a",
        "text": ""
      },
      "id": "db649e7e5fd4e34a",
      "type": "add",
      "after": "852a90af01380965",
      "date": 1351297206978
    },
    {
      "type": "edit",
      "id": "db649e7e5fd4e34a",
      "item": {
        "type": "paragraph",
        "id": "db649e7e5fd4e34a",
        "text": "The object returned from new's invocation of a constructor inherits from that functions prototype property. This allows you to easily have a \"class' of objects, that you only need to go one place to extend their prototype. The prototype "
      },
      "date": 1351297481787
    },
    {
      "type": "edit",
      "id": "db649e7e5fd4e34a",
      "item": {
        "type": "paragraph",
        "id": "db649e7e5fd4e34a",
        "text": "The object returned from new's invocation of a constructor inherits from that functions prototype property. This allows you to easily have a \"class' of objects, that you only need to go one place to extend their prototype. The prototype is just a normal object who's "
      },
      "date": 1351297603972
    },
    {
      "type": "edit",
      "id": "db649e7e5fd4e34a",
      "item": {
        "type": "paragraph",
        "id": "db649e7e5fd4e34a",
        "text": "The object returned from new's invocation of a constructor inherits from that functions prototype property. This allows you to easily have a \"class' of objects, that you only need to go one place to extend their prototype. The prototype property is just a normal object who's \"constructor\" property points back to the function, and who's prototype is Object.prototype by default."
      },
      "date": 1351297702952
    },
    {
      "item": {
        "type": "paragraph",
        "id": "1012e99eeb1d7006",
        "text": ""
      },
      "id": "1012e99eeb1d7006",
      "type": "add",
      "after": "db649e7e5fd4e34a",
      "date": 1351297703455
    },
    {
      "type": "remove",
      "id": "1012e99eeb1d7006",
      "date": 1351297712116
    },
    {
      "item": {
        "type": "paragraph",
        "id": "0b9b47870826b087",
        "text": ""
      },
      "id": "0b9b47870826b087",
      "type": "add",
      "after": "db649e7e5fd4e34a",
      "date": 1351297713773
    },
    {
      "type": "edit",
      "id": "0b9b47870826b087",
      "item": {
        "type": "paragraph",
        "id": "0b9b47870826b087",
        "text": "To use \"new\" to create an object chain replace func.prototype with another object that inherits from the grandparent, and a \"constructor\" property that points to the function you are attaching it to."
      },
      "date": 1351297937926
    },
    {
      "item": {
        "type": "paragraph",
        "id": "b671ef8124bdc737",
        "text": ""
      },
      "id": "b671ef8124bdc737",
      "type": "add",
      "after": "0b9b47870826b087",
      "date": 1351297938430
    },
    {
      "type": "remove",
      "id": "b671ef8124bdc737",
      "date": 1351297995937
    },
    {
      "type": "edit",
      "id": "eeaac4f0ddfcd568",
      "item": {
        "type": "paragraph",
        "id": "eeaac4f0ddfcd568",
        "text": "JavaScript has single, prototypical inheritance. This means that each object can inherit from exactly one other object, any other object. And they can form a chain. You can thus inherit from an arbitrary number of previous objects, in order all the way back to Object.prototype, the default object that all prototype chains lead back to."
      },
      "date": 1362725099295
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1678777279787
    }
  ]
}