{
  "title": "The Equal Sign",
  "story": [
    {
      "type": "reference",
      "id": "d8ffad9675a091b8",
      "site": "wiki.ralfbarkow.ch",
      "slug": "existence",
      "title": "Existence",
      "text": "If we begin with nothing, where does the equal sign = come from? "
    },
    {
      "type": "reference",
      "id": "d1236ee0e9cf413c",
      "site": "wiki.ralfbarkow.ch",
      "slug": "equality",
      "title": "Equality",
      "text": "Equality is the absence of [[distinction]]."
    },
    {
      "type": "reference",
      "id": "5bd4aff21862c14f",
      "site": "wiki.ralfbarkow.ch",
      "slug": "overriding-equality",
      "title": "Overriding Equality",
      "text": "Identity is such a fundamental Smalltalk notion that if you override the `==` method Smalltalk ignores your override. By contrast, you can override the `=` method at will. "
    },
    {
      "type": "markdown",
      "id": "bdb547311afa8cd7",
      "text": "> Therefore, in your own classes, the definition of [[equality]] – “indistinguishability” – is entirely up to you. As a case in point, Smalltalk's designers decided on their own defi­nition of equality for strings, namely that two strings are equal if they contain the same characters in the same order. But before you override equality in your classes, read the upcoming section \"[[Overriding equality]].\""
    },
    {
      "type": "pagefold",
      "id": "2acd7ab8715ea88d",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "f79652596622d73e",
      "text": "The `=` operator in [[Elixir]] is a bit different from the ones we see in other languages: […] ([[Pattern matching]]) ⇒ [[match]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "The Equal Sign",
        "story": []
      },
      "date": 1660633158526
    },
    {
      "item": {
        "type": "factory",
        "id": "d8ffad9675a091b8"
      },
      "id": "d8ffad9675a091b8",
      "type": "add",
      "date": 1660633190373
    },
    {
      "type": "edit",
      "id": "d8ffad9675a091b8",
      "item": {
        "type": "reference",
        "id": "d8ffad9675a091b8",
        "site": "wiki.ralfbarkow.ch",
        "slug": "existence",
        "title": "Existence",
        "text": "If we begin with nothing, where does the equal sign = come from? This delicate question is explored more fully in Volume II. [[Equality]] is the absence of distinction. The base case is"
      },
      "date": 1660633192884
    },
    {
      "type": "edit",
      "id": "d8ffad9675a091b8",
      "item": {
        "type": "reference",
        "id": "d8ffad9675a091b8",
        "site": "wiki.ralfbarkow.ch",
        "slug": "existence",
        "title": "Existence",
        "text": "If we begin with nothing, where does the equal sign = come from? "
      },
      "date": 1660633202450
    },
    {
      "item": {
        "type": "factory",
        "id": "d1236ee0e9cf413c"
      },
      "id": "d1236ee0e9cf413c",
      "type": "add",
      "after": "d8ffad9675a091b8",
      "date": 1660731394192
    },
    {
      "type": "edit",
      "id": "d1236ee0e9cf413c",
      "item": {
        "type": "reference",
        "id": "d1236ee0e9cf413c",
        "site": "wiki.ralfbarkow.ch",
        "slug": "equality",
        "title": "Equality",
        "text": "Equality is the absence of [[distinction]]."
      },
      "date": 1660731397980
    },
    {
      "item": {
        "type": "factory",
        "id": "2acd7ab8715ea88d"
      },
      "id": "2acd7ab8715ea88d",
      "type": "add",
      "after": "d1236ee0e9cf413c",
      "date": 1660731421115
    },
    {
      "type": "edit",
      "id": "2acd7ab8715ea88d",
      "item": {
        "type": "pagefold",
        "id": "2acd7ab8715ea88d",
        "text": "~"
      },
      "date": 1660731425719
    },
    {
      "item": {
        "type": "factory",
        "id": "f79652596622d73e"
      },
      "id": "f79652596622d73e",
      "type": "add",
      "after": "2acd7ab8715ea88d",
      "date": 1660731427110
    },
    {
      "type": "edit",
      "id": "f79652596622d73e",
      "item": {
        "type": "paragraph",
        "id": "f79652596622d73e",
        "text": "The `=` operator in Elixir is a bit different from the ones we see in other languages:"
      },
      "date": 1660731434130
    },
    {
      "type": "edit",
      "id": "f79652596622d73e",
      "item": {
        "type": "markdown",
        "id": "f79652596622d73e",
        "text": "The `=` operator in Elixir is a bit different from the ones we see in other languages:"
      },
      "date": 1660731441480
    },
    {
      "type": "edit",
      "id": "f79652596622d73e",
      "item": {
        "type": "markdown",
        "id": "f79652596622d73e",
        "text": "The `=` operator in [[Elixir]] is a bit different from the ones we see in other languages:"
      },
      "date": 1660731453030
    },
    {
      "type": "edit",
      "id": "f79652596622d73e",
      "item": {
        "type": "markdown",
        "id": "f79652596622d73e",
        "text": "The `=` operator in [[Elixir]] is a bit different from the ones we see in other languages: […] ["
      },
      "date": 1660731478390
    },
    {
      "type": "edit",
      "id": "f79652596622d73e",
      "item": {
        "type": "markdown",
        "id": "f79652596622d73e",
        "text": "The `=` operator in [[Elixir]] is a bit different from the ones we see in other languages: […] [[match]]"
      },
      "date": 1660731510995
    },
    {
      "type": "edit",
      "id": "f79652596622d73e",
      "item": {
        "type": "markdown",
        "id": "f79652596622d73e",
        "text": "The `=` operator in [[Elixir]] is a bit different from the ones we see in other languages: […] ⇒ [[match]]"
      },
      "date": 1660731521240
    },
    {
      "type": "edit",
      "id": "f79652596622d73e",
      "item": {
        "type": "markdown",
        "id": "f79652596622d73e",
        "text": "The `=` operator in [[Elixir]] is a bit different from the ones we see in other languages: […] ([[Pattern matching]]) ⇒ [[match]]"
      },
      "date": 1660731551033
    },
    {
      "item": {
        "type": "factory",
        "id": "5bd4aff21862c14f"
      },
      "id": "5bd4aff21862c14f",
      "type": "add",
      "after": "f79652596622d73e",
      "date": 1660902628793
    },
    {
      "id": "5bd4aff21862c14f",
      "type": "move",
      "order": [
        "d8ffad9675a091b8",
        "d1236ee0e9cf413c",
        "5bd4aff21862c14f",
        "2acd7ab8715ea88d",
        "f79652596622d73e"
      ],
      "date": 1660902632001
    },
    {
      "type": "edit",
      "id": "5bd4aff21862c14f",
      "item": {
        "type": "reference",
        "id": "5bd4aff21862c14f",
        "site": "wiki.ralfbarkow.ch",
        "slug": "overriding-equality",
        "title": "Overriding Equality",
        "text": "Identity is such a fundamental Smalltalk notion that if you override the `==` method Smalltalk ignores your override. By contrast, you can override the `=` method at will. "
      },
      "date": 1660902633889
    },
    {
      "id": "bdb547311afa8cd7",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "bdb547311afa8cd7",
        "text": "Therefore, in your own classes, the definition of [[equality]] – “indistinguishability” – is entirely up to you. As a case in point, Smalltalk's designers decided on their own defi­nition of equality for strings, namely that two strings are equal if they contain the same characters in the same order. But before you override equality in your classes, read the upcoming section \"Overriding equality.\""
      },
      "after": "5bd4aff21862c14f",
      "date": 1660902661596
    },
    {
      "type": "edit",
      "id": "bdb547311afa8cd7",
      "item": {
        "type": "markdown",
        "id": "bdb547311afa8cd7",
        "text": "> Therefore, in your own classes, the definition of [[equality]] – “indistinguishability” – is entirely up to you. As a case in point, Smalltalk's designers decided on their own defi­nition of equality for strings, namely that two strings are equal if they contain the same characters in the same order. But before you override equality in your classes, read the upcoming section \"Overriding equality.\""
      },
      "date": 1660902666479
    },
    {
      "type": "edit",
      "id": "bdb547311afa8cd7",
      "item": {
        "type": "markdown",
        "id": "bdb547311afa8cd7",
        "text": "> Therefore, in your own classes, the definition of [[equality]] – “indistinguishability” – is entirely up to you. As a case in point, Smalltalk's designers decided on their own defi­nition of equality for strings, namely that two strings are equal if they contain the same characters in the same order. But before you override equality in your classes, read the upcoming section \"[[Overriding equality]].\""
      },
      "date": 1660902715088
    }
  ]
}