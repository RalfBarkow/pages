{
  "title": "Method Commenting",
  "story": [
    {
      "type": "html",
      "text": "Now would be a good time for us to step out of <i>[[Thread Mode]]</i> and try writing in [[Pattern Mode]] some patterns in which we all could agree. I'll start this phase with a couple patlets which I won't sign. I'll leave the original thread below them with the hope that the thread will actually shrink as the patterns grow. -- [[Ward Cunningham]]",
      "id": "c00b4758d4cbb2b4d49eb9248884e94f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "<b>Program for People.</b> \nPrograms must be understood by both man and machine. ",
      "id": "51f62ed6829547a79580986f10069452"
    },
    {
      "type": "html",
      "text": "<i>Therefore:</i>\nWrite with the human reader in mind while satisfying the needs of the machine to the degree necessary. This is most difficult where the needs of the two readers conflict. ",
      "id": "6a551057ca10a91fd59a1272bdcea867"
    },
    {
      "type": "html",
      "text": "(The context of this pattern is <i>writing</i> code. See <b>Think Like the Machine</b> below for a pattern for <i>reading</i> code.) See [[Reads Like Prose]], [[Meaningful Name]] and [[Meaningful Comment]].",
      "id": "552c3500f4fbe96f1e11cf656589752c"
    },
    {
      "type": "html",
      "text": "<b>Reveal Intention.</b>\nYour reader will want to know what you were trying to do as well as what you actually did.",
      "id": "95638a5cea9af83650205d5516fc343a"
    },
    {
      "type": "html",
      "text": "<i>Therefore:</i>\nReveal your intentions in the way you name, format and document your code.",
      "id": "ba19156edd1de270345dc49e6d6bbdf7"
    },
    {
      "type": "html",
      "text": "\n[[Once And Only Once]]",
      "id": "5fa0248b61b084ce87fedbb0acc5f447"
    },
    {
      "type": "html",
      "text": "<b>Mini-Languages.</b> Where you have the same idea in two different forms, try to derive one from the other automatically. In general this means designing a formal language which expresses the idea in a way that the machine can understand.",
      "id": "910a0b81ae8088bb96e5e4441a62654f"
    },
    {
      "type": "html",
      "text": "<b>Clear Warning.</b>\nCircumstances may require coding for the machine in a way that could easily mislead the human.",
      "id": "dbebb69514c886be7bff15675c9b9fae"
    },
    {
      "type": "html",
      "text": "<i>Therefore:</i>\nMark each such case with a comment giving the reader clear warning of the possible confusion.",
      "id": "6feca5cb52d1c2956a7dae09d8463c92"
    },
    {
      "type": "html",
      "text": "<b>Order Dependency.</b>\nSometimes one method cannot be invoked until after another has been invoked.",
      "id": "2f4012638584bacc962534d99672ae2a"
    },
    {
      "type": "html",
      "text": "<i>Therefore:</i>\nWrite a comment explaining the dependency, to prevent someone from accidentally violating the constraint. Practically, I have always been able to transform the situation into a single public method that invokes the other two privately in the correct order.",
      "id": "3846d1827c14bf294013c1ff0dd03e7b"
    },
    {
      "type": "html",
      "text": "<b>Think Like the Machine.</b>\nMachines don't think like humans and aren't likely to do so soon. In fact, we humans find the logical nature of machines useful.",
      "id": "1ab3a30b4392ba88e7c3cfafa4acb6c0"
    },
    {
      "type": "html",
      "text": "<i>Therefore:</i>\nLearn to read a program as if you were the machine. Don't expect to have the machine's normal behavior explained in comments. Prefer programs written as objects since it is somewhat easier to <i>think like an object</i> than other semantics.",
      "id": "da578b20ceff6d911bc6f1b9ced8749b"
    },
    {
      "type": "html",
      "text": "(The context of this pattern is <i>reading</i> code. See <i>'Program for People</i> above for a pattern for <i>writing</i> code.) (A programmer <i>must</i> be able to think like the machine in reading code; however if one can prefer code written in objects, one can prefer code written for people using comments as well).",
      "id": "79f85be8feb9d6849d2e6b1c54fd0ed1"
    },
    {
      "type": "html",
      "text": "<b>To Do.</b>\nWhen you are programming for insight, you will often have ideas that will be required at some point, but pursuit of which would distract you from learning.",
      "id": "1b817e493a2120c7667ce0c44b17897b"
    },
    {
      "type": "html",
      "text": "<i>Therefore:</i>\nMark each such case with a comment giving the reader a suggestion of what other logic will be required. (or [[Use Code To Bookmark]])",
      "id": "9e0418f8ba357f46433dca619d37f511"
    },
    {
      "type": "html",
      "text": "([[Todo Comments]])",
      "id": "1e444dd7ce81bd55f3cf0c34cc0d41c4"
    },
    {
      "type": "html",
      "text": "<b>Un-Done.</b>\nWhen following an iterative process, you may stop with code intentionally left unfinished or untested. Circumstances may preclude your picking up where you left off.",
      "id": "6ba975fa17ec34794b36c349125e8c80"
    },
    {
      "type": "html",
      "text": "<i>Therefore:</i> Mark each such case with a comment giving (or pointing to) clear instructions on what is left to be done.",
      "id": "61373e2068c3f736be744858bdf0e9a6"
    },
    {
      "type": "html",
      "text": "<b>Fence It Off.</b>\nWhen you are implementing a design, you may be promised that there will never be more than 50 widgets, or 10 simultaneous users. Sometimes there are enormous performance payoffs to taking advantage of those constraints... until they change.",
      "id": "7c1b6fa7698da4cdb5c0de369dee3c47"
    },
    {
      "type": "html",
      "text": "<i>Therefore:</i> When you are writing code that you know depends on data being within constraints, document those constraints. \"This method handles only arrays of size 1-50. It must be rewritten for larger arrays.\" ",
      "id": "d7867a1460b6f95f821ba38592b9d781"
    },
    {
      "type": "html",
      "text": "<b>Blind Alley.</b>\nThere's often a solution that's \"simple, obvious, and <b>wrong</b>.\" Usually, it's in version 1.0 of the code, and replaced by something less simple, less obvious, and less wrong in version 1.1. Someone who comes back to the code later is often tempted to unknowingly repeat the mistakes of the past.",
      "id": "5f175764581f5b776c5e82ab7192a15c"
    },
    {
      "type": "html",
      "text": "<i>Therefore:</i>\nWhen you replace obvious but incorrect code with non-obvious but correct code, <b>comment</b> the old approach as a blind alley that shouldn't be traversed again.",
      "id": "7ca8fb08802ab528ccd35937d8df6991"
    },
    {
      "type": "html",
      "text": "\nAgree: [[Betsy Hanes Perry]] ",
      "id": "d3521f0456bb4e1b82e4a77696ac2a16"
    },
    {
      "type": "html",
      "text": "(Sorry; probably redundant with <b>Clear Warning</b> above.) ([[Blind Alley]])",
      "id": "d762a19b88a7350f37a8363dc469117d"
    },
    {
      "type": "html",
      "text": "<b>Format/Comment to Understand</b>\nWhen you are faced with understanding a large piece of unfamiliar code, you may have trouble deciding where to start.",
      "id": "2076f87d9acfb123f6359c75dc00cbdb"
    },
    {
      "type": "html",
      "text": "<i>Therefore:</i>\nRead actively, by formatting, commenting, or decomposing methods.",
      "id": "d7ebcaec830e86ee3d990eeadcbf8076"
    },
    {
      "type": "html",
      "text": "<b>Generated Documentation</b>\nUnderstanding a program by reading its code can be daunting.",
      "id": "cc6c812a6556ed165e48c052ba99f1d8"
    },
    {
      "type": "html",
      "text": "<i>Therefore:</i>\nInclude comments in predictable places like the beginning of methods. Generate paper or electronic documentation using those comments.",
      "id": "276a05e8af5c8ba980de46728b2866ee"
    },
    {
      "type": "html",
      "text": "<b>Named idioms</b>\nThere are some common but odd looking coding idioms. (One of my favorite in Perl is:",
      "id": "0fb31a206fcec1662d147ea6793bdfc2"
    },
    {
      "type": "code",
      "text": "        local $_ = $string;",
      "id": "7d9d7bcfd85a4ec6150850fc970bf820"
    },
    {
      "type": "html",
      "text": "which makes a copy of the magic <b>$_</b> variable that's the default target for regular expression matching. Note that:",
      "id": "4709f70c08885759cdc9fc355deedaa7"
    },
    {
      "type": "code",
      "text": "        my $_ = $string;  # WRONG!",
      "id": "5cec3ac47c3b8de4c86bbdedf084461e"
    },
    {
      "type": "html",
      "text": "which most reformed Perl 4 programmers would think of, isn't the same thing; it's a <i>'Blind Alley</i> as described above.) Such idioms are hard to understand.",
      "id": "7b32970e9ee4650c2e5dcc360633c368"
    },
    {
      "type": "html",
      "text": "<i>Therefore:</i>\nAgree on names for such idioms. Use the idiom name in the comment. For example:",
      "id": "283106bca08583cc782faf14b0c1f19a"
    },
    {
      "type": "code",
      "text": "        local $_ = $string;  # \"Local Default Match\" idiom",
      "id": "9182e4a96d13571bd2786c925817c8b5"
    },
    {
      "type": "html",
      "text": "If you're a distinguished author (or gang of four distinguished authors:-), publish a book that makes such idioms part of the industry vocabulary. ([[Patterns Of Software]] has an interesting opinion on this.)",
      "id": "5b8d4e1c91dddbeac8026771175665f2"
    },
    {
      "type": "html",
      "text": "<b>Fix Broken Code Instead Of Commenting Bugs</b>:",
      "id": "aac913f38881915d336f22273aaf0656"
    },
    {
      "type": "html",
      "text": "\"There is always a good reason for doing the wrong thing.\"\nDon't explain (in a comment or elsewhere) why the wrong thing was done. Instead, fix it; do it right instead. (Exception: when you don't have time. See also <b>Un-Done</b> above.)",
      "id": "d56bf066a13862f9f09e577bb777d16d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nA collection of <i>get it done</i> practices have been dubbed [[Extreme Programming]]. In this context, [[Kent Beck]] and others have pointed out the value of intention-revealing code. We pick up the thread here with Alistair's questioning what might have been a bit of overstatement...",
      "id": "3e679b2dbbffc0d6025b04f6ca4bdddc"
    },
    {
      "type": "html",
      "text": "\nHow come all the rigor on the [[Coding Conventions]]? That really surprised me. What causes you to put so much weight on the idea that everyone should write identically? Usually programmers tell me the indentation style etc makes so little difference.",
      "id": "15f60a6c42208fa27bf28d256046d0e8"
    },
    {
      "type": "html",
      "text": "-- [[Alistair Cockburn]]",
      "id": "781d2f4e64482aa911c97b2140039700"
    },
    {
      "type": "html",
      "text": "\nSee [[Coding Conventions]] for remarks on why we do this. -- [[Ron Jeffries]]",
      "id": "2e43223be3460e6fb87aef4445a61f77"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nThe [[Coding Conventions]] question seems related to a separate issue concerning uniformity of formatting/indentation. [[Method Commenting]] followed from other guidelines suggesting comments per se were (usually) unnecessary and to be deprecated. The following discussion here followed from that, rather than [[Alistair Cockburn]]'s note above. -- [[Jim Perry]]",
      "id": "7edab2765a9a2af9eaa0442e1e55e97d"
    },
    {
      "type": "html",
      "text": "\nOne should write relevant and helpful comments. As to whether comments are \"needed\", that's surely subjective. I am of the [[Programmers Are Writers]] sect, myself, but we're a small denomination. I can't help but protest what appears to be active discouragement of documentation, though. -- [[Jim Perry]]",
      "id": "5419c3475f4e6b93194ffb56322f741d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nPerhaps I've been reading too much [[Douglas Hofstadter]] lately, but I think an aspect of this that may be slipping by is the distinction between <i>meaning</i> and <i>message</i>. A comment, like code, is a message that is intended to convey a meaning to the reader. If both author and reader have a deep and shared understanding of the meaning space, the comment need not say as much. In fact, among a community of seasoned Smalltalkers, method comments often are superfluous, as Kent and Martin have observed.",
      "id": "e924e37a85a0b6bd5d91fafd7d115c2e"
    },
    {
      "type": "html",
      "text": "\nOn the other hand, we Smalltalkers have internalized an ability to either ignore or derive meaning from several superficial aspects that drive other coder's crazy. These include:",
      "id": "1156d3b3c3d6dc56e9011fd7d346bd59"
    },
    {
      "type": "html",
      "text": " Joining words together and capitalizing, instead of other conventions (like underscores)",
      "id": "f0c823f50da3fdc658f612e5b0689c0a"
    },
    {
      "type": "html",
      "text": " Spelling out words instead of abbreviating them",
      "id": "027ebfc415d86730ccdf4c8d9ef34509"
    },
    {
      "type": "html",
      "text": " Infix instead of postfix or prefix function notation.",
      "id": "14c4fc1ea91c81c71f248625595c8f4d"
    },
    {
      "type": "html",
      "text": "\nWhen the number of possible meanings in a communication is very restricted, a very simple message is enough; some call these \"signals\". For instance, among long-time coworkers, a mere raising of an eyebrow, rolling of a eye, or comment in code that says \"yeah, right...\" is enough to convey a meaning.",
      "id": "8f8afb7a6e45d563bef1de7bdd1f11e5"
    },
    {
      "type": "html",
      "text": "\nFor a long-time C programmer, a phrase like <i>*dst++=*src++</i> is completely self-explanatory and requires no comment; \nthe <i>meaning</i> is evident from the code. Not all communities share in this assessment, however.",
      "id": "8ab71038f33a8ad727130509bb84a310"
    },
    {
      "type": "html",
      "text": "\nAn aspect that perhaps might be interesting to explore further is suggested to me by Ward's [[Hyper Perl]] pages. Perhaps comments could be captured in the environment as phrases, paragraphs, or stories that were linked to the code, as opposed to being linearized with it. I envision different communities perhaps wanting to link different webs of narrative to the same fragments of code. Some of these might be written by the developer. Others might be annotations by other interested parties. All might be turned on or off, followed or ignored by the reader, just as we do with the links here.",
      "id": "9ca9e877d21bc698bfffa8ef1462a660"
    },
    {
      "type": "html",
      "text": "-- [[Tom Stambaugh]]",
      "id": "ff3792469ceb88e2ac6b19f40e1b18f7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nAll writing should be targeted at a specific class of reader, and comments are no exception. Part of the problem is to decide how much you can assume about the reader's knowledge.",
      "id": "746096227d487260735ee14697b8c882"
    },
    {
      "type": "html",
      "text": "\nWhen I'm reading other people's code, I often know very little about their application. With a big project, it can take a while to learn it. So some comments should be explaining, not so much what a method is doing, but when and why it should be called.",
      "id": "208cfc436f64a28d11ca068419361cc1"
    },
    {
      "type": "html",
      "text": "\nSystems that are written by seasoned Smalltalkers with deep understanding of the meaning space, sometimes get maintained by inexperienced, lowly paid novices. You may not be writing for yourself, but for the people who come after you when you have moved onto higher things.",
      "id": "46cdcf7150331d0e50b44109af822ba7"
    },
    {
      "type": "html",
      "text": "-- [[Dave Harris]]",
      "id": "9cd940f9a523c5984f332abacc53fc87"
    },
    {
      "type": "html",
      "text": "\n[[Dave Harris]]'s last point nicely captures an oft-overlooked aspect of professionalism in any endeavor. The variant I was taught, and strive to follow, is: \"It is your responsibility to [[Prepare The Way]] for those who will follow.\" -- [[Dave Smith]]",
      "id": "62a9340b102be9d5ca1645bf89561067"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nI wonder if [[Dave Harris]] and [[Dave Smith]] are making an implicit assumption about the communication path between the author and the reader? I wholeheartedly concur with all they say; its the <i>mechanism</i> of providing it that I'm interested in looking at more deeply.",
      "id": "aa1518eae922c89337c9ec73d2028759"
    },
    {
      "type": "html",
      "text": "\nSuppose the author is [[Seasoned Smalltalker]], and suppose one reader is [[Lowly Paid Novice]] and another is [[Seasoned Maintainer]]. In a conventional environment, the two readers ([[Lowly Paid Novice]] and [[Seasoned Maintainer]]) are forced to read the same material, because the medium cannot adjust its presentation to the reader.",
      "id": "bb7fdce0dff0f0774324248e4e126b64"
    },
    {
      "type": "html",
      "text": "\nIn systems with [[Wiki Nature]], however (or perhaps [[Mu Nature]], an environment I'm currently pondering), the <i>medium</i> has the ability to recognize the cross-product of [[Seasoned Smalltalk]] and whichever reader is requesting the page. It's therefore perfectly feasible for [[Seasoned Maintainer]] to see completely different text from [[Lowly Paid Novice]], even when accessing the same page.",
      "id": "2bc31ff2b5dd9b0f87e00d143ea86671"
    },
    {
      "type": "html",
      "text": "\nImagine a mechanism, roughly analogous to function overloading in C++ or Lisp, that tags \"comments\" about a fragment of code (like a method) from multiple authors, and supports rules for mapping those comments onto author/reader combinations. This mechanism can be invoked during the Retrieve Page (or maybe [http://c2.com/wikibase?HandleBrowse c2.com] ) in Wiki, so that the actual page that appears represents the result of evaluating the mapping in the context of the specific reader referencing the page (I assume that each reader is [[Known User]], a rash assumption in the current Wiki environment).",
      "id": "1e627d10cc3df38c27ec05fcb24d4f35"
    },
    {
      "type": "html",
      "text": "\nSo while I totally agree with [[Dave Smith]] that we should [[Prepare The Way]] for [[Lowly Paid Novice]], I also think [[Kent Beck]] is following accurate intuition when he suggests that [[Seasoned Smalltalker]](s) would prefer more terse or perhaps even missing comments. I get excited by the opportunity to work with a medium like wiki that lets us effectively accomplish both...we've never had <i>that</i> before.",
      "id": "45df31a3e9a282922f466429d7a0a906"
    },
    {
      "type": "html",
      "text": "-- [[Tom Stambaugh]]",
      "id": "ff3792469ceb88e2ac6b19f40e1b18f7"
    },
    {
      "type": "html",
      "text": "\nThe nature of the Smalltalk medium is indeed unique and wonderful. [[Prepare The Way]] applied to Smalltalk includes \"follow [[Kent Beck]]'s lead, and express your meaning through clear code, and not method comments.\" -- [[Dave Smith]]",
      "id": "638115eec3664d7159621a9a44f66769"
    },
    {
      "type": "html",
      "text": "\nAre you saying, [[Tom Stambaugh]], that the [[Seasoned Smalltalker]] should actually write every comment twice, once aimed at the [[Lowly Paid Novice]] and once at [[Seasoned Maintainer]]? Well, maybe. -- [[Dave Harris]]",
      "id": "c96c2b38fbad8aa07863929b162e101c"
    },
    {
      "type": "html",
      "text": "\nOne potential problem with hiding [[Lowly Paid Novice]] comments from the [[Seasoned Smalltalker]], is that the [[Seasoned Smalltalker]] may never get a chance to learn from the novice. If someone else is finding my code obscure or difficult to understand, or feels my comments are inadequate, I want to know about it.",
      "id": "407644d728d71bce58bab6145f30900b"
    },
    {
      "type": "html",
      "text": "\nAlso, there's a risk that the [[Lowly Paid Novice]] will write a comment which is wrong or misses the point.",
      "id": "5db5a8f9ba40fdd5f7337b44ebdb0458"
    },
    {
      "type": "html",
      "text": "\nI suppose these problems can and should be caught by a code review, but I've worked in environments where they wouldn't be.",
      "id": "f4ea17efd45766dabd92c1aba0aac83c"
    },
    {
      "type": "html",
      "text": "-- [[Dave Harris]]",
      "id": "9cd940f9a523c5984f332abacc53fc87"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nHmmm, I think I'm saying \"All of the above\". I think there are a multitude of possible approaches, of which you've identified several interesting ones:",
      "id": "797c2e1d5862adb509e0b68d16e1e179"
    },
    {
      "type": "html",
      "text": " [[Code Author]] writes all the comments (at all levels). This is your first scenario, where the [[Seasoned Smalltalker]] is the [[Code Author]]. As you've observed, this puts a burden on the [[Code Author]], and many [[Code Author]]s just can't do it.",
      "id": "87be2905f276472fd48dd86680d9327a"
    },
    {
      "type": "html",
      "text": " Each [[Code Reader]] annotates the code with his or her learnings (your second scenario). This strikes me as more consistent with [[Wiki Nature]], and I like its organic nature.",
      "id": "2bd1ae4fdb7cdf71ef832a5db0c19f6b"
    },
    {
      "type": "html",
      "text": " [[Comment Author]]s write comments, perhaps in conjunction with [[Code Author]]s and [[Code Reader]]s. I wonder if this approach might grow out of such a system in real use, over time.",
      "id": "b02564bc19d798a6a65b9ae2b6652d3a"
    },
    {
      "type": "html",
      "text": "\nI particularly liked your final observation. Its been my experience that those \"blindingly obvious\" insights are precisely the sort of meanings that newcomers DO need to be explicitly told about and that seasoned veterans literally can't imagine not \"getting\", and so feel no need to explain.",
      "id": "6ec19f43ad438ce03f206ae417aa535b"
    },
    {
      "type": "html",
      "text": "-- [[Tom Stambaugh]]",
      "id": "ff3792469ceb88e2ac6b19f40e1b18f7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nI like some of these suggestions. However, I don't think that the [[Lowly Paid Novice]]/[[Seasoned Programmer]] dichotomy catches the real issue as I see it. Comments carry information outside the scope of the language, at a different level of abstraction; they are not primarily for clarification of language idioms for those unfamiliar with the language, and they supplement rather than replace clarity of code.",
      "id": "de654b76c9b3552194153edf82e2bb37"
    },
    {
      "type": "html",
      "text": "\nI agree with the [[Prepare The Way]] principle, but in my experience a significant proportion of the time the person whose way is prepared by (my) adequate documentation of code is myself (some months or years later). The [[Code Author]] at the time of writing the code is privy to the complete design of the piece of code, the reasoning that led to that design over other considered alternatives, and so forth. If, between the code per se and the comments, the author doesn't put down that information, it is lost (up-to-date external documentation is even rarer than internal documentation/comments).",
      "id": "da937d234448af8089b8c5a4f04b7789"
    },
    {
      "type": "html",
      "text": "\nA later visitor, whether the original author or another, may need to reconstruct at some pain the original information, but typically can't do so to the degree that the original author could have at the time of composition.",
      "id": "053cbe005fd249634230d6d3ec6e27b1"
    },
    {
      "type": "html",
      "text": "-- [[Jim Perry]]",
      "id": "76690184569f6d7122b23a964190be42"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nAt the lowest level, all commenting is for purpose, rather than function. I make this distinction for two reasons - one, it was drummed into me when I was first learning assembly language that what the statement says is far less important than what it does, in the overall scheme of what the program is trying to accomplish, and two, very often, even though I am an experienced and skilled programmer, I very often write code that is supposed to do one thing yet does another. If I have comments that tell me what it is that I thought the code was supposed to be doing, I have a better chance of actually making it do that.",
      "id": "a1f42614abff98dffdbaf9aeb91fd814"
    },
    {
      "type": "html",
      "text": "\nI liken uncommented code, no matter how clearly written, to the kind of directions you get when someone tells you, \"okay, fourth right, go 4 miles, third right, go 1/2 a mile, seventh left ...\". I mean, they're <i>precise</i>, all right, but if you're trying to follow them in the rain or at night, you'll probably get lost if there are more than a couple turns. ",
      "id": "129daf5bf2d1a818414aa0b919fd3fd1"
    },
    {
      "type": "html",
      "text": "\n[[Well Commented Code]] is more like \"follow this road to the Shell station, and turn right onto route 302. You'll see the Wal-Mart on the left after 5 miles. Turn at the next stop light onto River Road ... \". I've got signposts (assertions) to show me my subgoals in this piece of code.",
      "id": "a02a0c3ef493d60cdce4b80e7820a3d8"
    },
    {
      "type": "html",
      "text": "-- [[Joe Mc Mahon]]",
      "id": "5def39535f0dbf240161f788a4a8abdf"
    },
    {
      "type": "html",
      "text": "\nOne further thing that needs to be mentioned. It's the second of these two rules:",
      "id": "5496e81a78887d2562b31d0e0bc95048"
    },
    {
      "type": "html",
      "text": " If your code needs a comment to explain it, rewrite it.",
      "id": "8782889f7b2deba34202a2c59f8daf66"
    },
    {
      "type": "html",
      "text": " If you can't explain your code with a comment, rewrite it.",
      "id": "16781832e8db51e6a7de32e6f9ce72c1"
    },
    {
      "type": "html",
      "text": "(I list both rules because I think they look pretty together.) I've found that documentation exposes flaws. It can be easier to redesign a feature than to document it clearly as it stands. Similarly I have sometimes rewritten code to make the comments easier to write. Truly, one should strive to write the comments first. -- [[Dave Harris]]",
      "id": "6d7ff85800eff8db48c29fe5846a2477"
    },
    {
      "type": "html",
      "text": "<i>As some would say, write user manual concurrently with code. This exposes many instances when the programmer loses sight of [[End User]] functionality. It also throws light on \"what the hey are we doing here\" in more obscure sections. The above rules of comments is but a minor sidelight of this, since it is too easy to think one's own comment actually explains what one intended it to. -- [[Bo Leuf]]</i>",
      "id": "ae3a2008a59ba8e12c1240afa13e62ac"
    },
    {
      "type": "html",
      "text": "\nI see an interesting spectrum here.",
      "id": "8108390b8c00b8d786dc5a8dc09464c9"
    },
    {
      "type": "html",
      "text": " Sometimes a programmer hacks out code first ([[Spike Solution]]).",
      "id": "4240f586ffd021b2b5cd830f79b17757"
    },
    {
      "type": "html",
      "text": " Other times a programmer writes a one-line test first ([[Replace Comment With Assertion]]; [[Never Writea Line Of Code Withouta Failing Test]]), then writes the code.",
      "id": "fb13661cbdef30e7cc06612496508b88"
    },
    {
      "type": "html",
      "text": " Other times a programmer writes [[Code Unit Test First]], then writes the code.",
      "id": "d9fa7b1ceeda07ae1be42765f0e6ae49"
    },
    {
      "type": "html",
      "text": " Other times someone (the programmer?) writes a rough draft of a small section of the user manual before writing the code implementing that feature ([[Write The User Manual As You Go]]).",
      "id": "87f0a63d954c504e4c0839227e43429c"
    },
    {
      "type": "html",
      "text": " Apparently no one has actually written the entire user manual before writing an application ([[Manual As Specification]], [[Write The User Manual First]]).",
      "id": "50efc5aeb6010ed5161c9d63c0575595"
    },
    {
      "type": "html",
      "text": "-- [[David Cary]]",
      "id": "817192ac32e925c77e96f23443902b52"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nAs my first boss said, \"No comments don't lie.\"",
      "id": "61473cfe3f2684296b0dd2a927b2d36e"
    },
    {
      "type": "html",
      "text": "\nThe value of:",
      "id": "1c376a86813d6e67c6eb45963fe63ec4"
    },
    {
      "type": "code",
      "text": "        ++i;  /* add one to i */",
      "id": "022041e4d66beada4ecdbad34f6f68ee"
    },
    {
      "type": "html",
      "text": "is significantly <i>less</i> than:",
      "id": "331cf26a0ff96f3c3a18fdb174810e4a"
    },
    {
      "type": "code",
      "text": "        ++i;",
      "id": "bfbe40deffaf72cbd22a4ac7259447db"
    },
    {
      "type": "html",
      "text": "There may be some value in <i>very</i> short comments, i.e., naming the [[Gang Of Four]] design pattern you're using. (Using the name in the method you're invoking would be better.)",
      "id": "28bc6f783aa74dec7502f5e55f7c1a15"
    },
    {
      "type": "html",
      "text": "-- [[Paul Chisholm]]",
      "id": "bca09ec14cd07ced7edf3c5800540402"
    },
    {
      "type": "html",
      "text": "\nSometimes lying comments are extraordinarily useful. Every so often you see",
      "id": "203ebe0b0ae972dc2a01197dbdc9a292"
    },
    {
      "type": "code",
      "text": "  --i; /* add one to i */",
      "id": "6efb7a72c1620b5fcd2a08450bc1889e"
    },
    {
      "type": "html",
      "text": "which is a blinking neon sign that the programmer wasn't thinking clearly. When you see that, you have a Very Big Clue about what the code was supposed to do, as opposed to what it does.",
      "id": "a91e86e194d2dd52f0250417bec30408"
    },
    {
      "type": "html",
      "text": "\nI don't advocate commenting every line, by the way; I'm just addressing the particular example. I haven't heard anybody here recommending commenting every line; rather, they say that there's a large practice space between Comment Every Line and No Comments At All.",
      "id": "47d258b911f7c9c0ec20fd0767c805ec"
    },
    {
      "type": "html",
      "text": "<b>Comments Tell Why. Code Tells How.</b>",
      "id": "c64959ade46aa1fddb6c7ea091350d47"
    },
    {
      "type": "html",
      "text": "\nSee also [[History Matters]].",
      "id": "47d09c729eab42ad108a998e5c3d7de0"
    },
    {
      "type": "html",
      "text": "-- [[Betsy Hanes Perry]]",
      "id": "345529efa3a24d5108762346babfda5f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nThis example:",
      "id": "dc2e158330c914855457a91a05635708"
    },
    {
      "type": "code",
      "text": "        ++i;    /* add one to i */",
      "id": "6b133322103d287baff7f8e13c26156f"
    },
    {
      "type": "html",
      "text": "is a non-comment. It adds nothing to the communication - it's a tautology. Now if it says",
      "id": "e40e9a9bbd34dec4638e5b7b4c2669c1"
    },
    {
      "type": "code",
      "text": "        ++i;    /* record another match of this expression */",
      "id": "41459be41c0d0ace36e35e843ed8f0a6"
    },
    {
      "type": "html",
      "text": "that is a comment that tells me what the point of the statement is; and is not more noise in the communication. This way I know that (say) after the current loop, <b>i</b> will contain the number of hits. Conversely, if the number of hits is wrong after someone has modified the code, I can see that I should find out where <b>i</b> got clobbered. ",
      "id": "95409cba1dabc4e2d4baf95b56cfc87b"
    },
    {
      "type": "html",
      "text": "-- [[Joe Mc Mahon]]",
      "id": "5def39535f0dbf240161f788a4a8abdf"
    },
    {
      "type": "html",
      "text": "\nA better alternative is:",
      "id": "5a3bb5d8be7317d87feae3650bf2c5d1"
    },
    {
      "type": "code",
      "text": "        ++expressionMatchCount;",
      "id": "011a3088cc63e06ed050d53036e1081d"
    },
    {
      "type": "html",
      "text": "(or something slightly less verbose).",
      "id": "2dd0c8335c2ef5db4022b48266b965ee"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nI agree with [[Joe Mc Mahon]]; \"/* add one to i */\" is a classic example of a <i>bad</i> comment, hence of bad coding.\nAnother common form is the \"required boilerplate\" where each subroutine is preceded by a large box constructed of asterisks or whatever, possibly containing the subroutine name and typically some <i>unfilled</i> slots for author, dates, calling conventions etc. and no actual useful descriptive information. See [[Massive Function Headers]].",
      "id": "ee1b8606df32287e677c73df7967d89a"
    },
    {
      "type": "html",
      "text": "\nSuch usage tends to arise in courses or similar environments where some rule about comment frequency is in place, but there is no appropriate feedback about the <i>quality</i> of the comments. Such an environment teaches that comments are an onerous and pointless chore.",
      "id": "95a11be2560bdde24393154693e8bb6d"
    },
    {
      "type": "html",
      "text": "\nHowever, the fact that a thing <i>can</i> be done poorly is a poor excuse not to do the thing yourself; to go further and advocate therefore that it not be done at all is worse.",
      "id": "d319f642e42a4ecbff70f6b24543b691"
    },
    {
      "type": "html",
      "text": "-- [[Jim Perry]]",
      "id": "76690184569f6d7122b23a964190be42"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "(Here's a list of related Anti-patterns or anti-idioms, called \"How to Write Unmaintainable Code\": [http://mindprod.com/unmain.html mindprod.com] -- [[Katy Mulvey]])",
      "id": "042972edc3a16245fdc0cfcc5534ac54"
    },
    {
      "type": "html",
      "text": "<i>Website above moved to [http://mindprod.com/index.html mindprod.com] but there is no longer any reference to these anti-idioms. (July 1998 -- [[Bo Leuf]])</i>",
      "id": "8b60145fb74378b063e42842413924ab"
    },
    {
      "type": "html",
      "text": "\nAs of 2005-10, it has moved again to [http://mindprod.com/jgloss/unmain.html mindprod.com] - but that's only the index. Apparently it has grown over the years, split into several sections and a blog.",
      "id": "9c5ffe23f1f818ec5012c14096ae4541"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nI've been reading the Wiki source code (see [[Hyper Perl]] or [http://c2.com/cgi-bin/wikibase/ c2.com]), which has no method comments. It's been an interesting experience.",
      "id": "1b883472577590eaa7fb102f458a7a7f"
    },
    {
      "type": "html",
      "text": "(Actually, I've been reading a printout of it as \"straight Perl\" on the train. It's clearly the wrong way to read it. Would a Smalltalker ever try to read from a static piece of paper? It's what I have time and equipment to do.)",
      "id": "5584de27c7204f6b13055b0f6ca35d17"
    },
    {
      "type": "html",
      "text": "\nThe [[Hyper Perl]] links, in addition to being a useful tool for navigating the source (with the right tools), also provide some information about the code itself. This is more true for those code fragments outside any Perl subroutines, notably variable definitions.",
      "id": "f80e5ae895129cb770f6dfc7a7d12bf5"
    },
    {
      "type": "html",
      "text": "\nI find code without method comments makes me juggle multiple levels of abstraction simultaneously. If I'm trying to figure out what the Print Body Text subroutine does, I need to build that up out of elements such as <b>foreach(split(/\\n/,$_)</b> ... okay, I know that means the value of $_ changes within this loop from the whole document to each line of the document, but I've got to spend a half second figuring that out without forgetting all the other stuff I had been trying to figure out.",
      "id": "8368f180e9038dfdf2381cbf185f97f5"
    },
    {
      "type": "html",
      "text": "\nThis is particularly tough in Perl 4, which is infamously short on ways to build up user defined data structures. There are common idioms to build such structures (which end up being stored in strings, very easy to store and retrieve). I can follow them, but it's one or two more things to remember.",
      "id": "0f9ee204040a1a23e4cc5d70de84eb46"
    },
    {
      "type": "html",
      "text": "\nFunny thing. Most programmers have great memories; they can do that easily. I have a lousy memory. I can't even keep track of everything that's going on in a short program (a few hundred lines long, say) I'm currently writing. The good news is, I write very clean, modular code with a lot of information hiding. The bad news is, I think I need method comments more than most programmers. --[[Paul Chisholm]]",
      "id": "bf2ac9bd01ab7c2d2441179d2ea09283"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\n[[Hyper Perl]] Wiki is a great read, but I found it very difficult to answer questions about the scope of locking, who has the db open when, etc., without resorting to the the straight Perl source. This is the same problem I have when doing database work in Smalltalk: it's often easier to reason about the \"big picture\" from flattened source than it is from hyper-linked pieces. -- [[Dave Smith]]",
      "id": "7166ac6c18cb197af304faa2d4de1ebf"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nA thought about comments. If comments lie, and we are game to try to get away with fewer and fewer comments, perhaps we could facilitate this by changing our development environments so that all comments for a method are deleted whenever it is touched. It is kind of an evil way of forcing ourselves out of the comment habit. -- [[Michael Feathers]]",
      "id": "eade250bc87f8cc042b82195946d8638"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nAn idea that has been bouncing around in my head in a half-formed state suddenly just jelled: [[Identifiers Are Comments]].",
      "id": "c2791ab5188cf239e5485411fe07a125"
    },
    {
      "type": "html",
      "text": "-- [[Curtis Bartley]]",
      "id": "b91d929add1c780594d9efd046e537f7"
    },
    {
      "type": "html",
      "text": "\nGood recognition. Also, indentation is comments, in general source code is comments, but, identifiers are the most informative.",
      "id": "6093856a94f1f3fe754f3bbc1231a8b5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nIf we could compile and execute [[Natural Language]], the comments would be the code.",
      "id": "24dee446f9d48e5d88778b5832f5a01c"
    },
    {
      "type": "html",
      "text": "<i>I doubt it. When teaching a human how to do something, one talks about more than just a sequence of steps, and ways to detect and correct exceptional situations. One also comments on situations where this skill may be useful, the overall goal of doing it this way, the possibility of other methods of reaching the same goal, and sometimes a bit of theory as to why this sequence of steps could possibly achieve that goal.</i>",
      "id": "da8796bbecf2a2fee55b422b71429bcd"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "\nI agree with most of the patterns listed at the top of the page, but I am a bit uncomfortable with relying on comments for correct program behavior, since [[Comments Dont Compile]]. So for patterns like <b>Order Dependency</b>, <b>Un Done</b>, and <b>Fence it off</b>, I prefer to add code that ensures that my intent gets carried out. -- [[Jay Dunning]] ",
      "id": "e20286454e088fdbcd94f6c27daf7c33"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "See [[Comment Costs And Benefits]]",
      "id": "7ebdad353610998e26909208a098018e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "bb9a36ff31a3dd00bc19d413f363e367"
    },
    {
      "type": "html",
      "text": "[[Category Pattern]] [[Category Coding Issues]]",
      "id": "2f1ba84984d984703badfbd9481bc944"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?MethodCommenting c2.com]",
      "id": "9a5c3f7d895094c206043f1041d77586"
    }
  ],
  "journal": [
    {
      "date": 1187726231000,
      "id": "3a65060f7e1acbc57c1073b3ddde1bb8",
      "type": "create",
      "item": {
        "title": "Method Commenting",
        "story": [
          {
            "type": "html",
            "text": "Now would be a good time for us to step out of <i>[[Thread Mode]]</i> and try writing in [[Pattern Mode]] some patterns in which we all could agree. I'll start this phase with a couple patlets which I won't sign. I'll leave the original thread below them with the hope that the thread will actually shrink as the patterns grow. -- [[Ward Cunningham]]",
            "id": "c00b4758d4cbb2b4d49eb9248884e94f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "<b>Program for People.</b> \nPrograms must be understood by both man and machine. ",
            "id": "51f62ed6829547a79580986f10069452"
          },
          {
            "type": "html",
            "text": "<i>Therefore:</i>\nWrite with the human reader in mind while satisfying the needs of the machine to the degree necessary. This is most difficult where the needs of the two readers conflict. ",
            "id": "6a551057ca10a91fd59a1272bdcea867"
          },
          {
            "type": "html",
            "text": "(The context of this pattern is <i>writing</i> code. See <b>Think Like the Machine</b> below for a pattern for <i>reading</i> code.) See [[Reads Like Prose]], [[Meaningful Name]] and [[Meaningful Comment]].",
            "id": "552c3500f4fbe96f1e11cf656589752c"
          },
          {
            "type": "html",
            "text": "<b>Reveal Intention.</b>\nYour reader will want to know what you were trying to do as well as what you actually did.",
            "id": "95638a5cea9af83650205d5516fc343a"
          },
          {
            "type": "html",
            "text": "<i>Therefore:</i>\nReveal your intentions in the way you name, format and document your code.",
            "id": "ba19156edd1de270345dc49e6d6bbdf7"
          },
          {
            "type": "html",
            "text": "\n[[Once And Only Once]]",
            "id": "5fa0248b61b084ce87fedbb0acc5f447"
          },
          {
            "type": "html",
            "text": "<b>Mini-Languages.</b> Where you have the same idea in two different forms, try to derive one from the other automatically. In general this means designing a formal language which expresses the idea in a way that the machine can understand.",
            "id": "910a0b81ae8088bb96e5e4441a62654f"
          },
          {
            "type": "html",
            "text": "<b>Clear Warning.</b>\nCircumstances may require coding for the machine in a way that could easily mislead the human.",
            "id": "dbebb69514c886be7bff15675c9b9fae"
          },
          {
            "type": "html",
            "text": "<i>Therefore:</i>\nMark each such case with a comment giving the reader clear warning of the possible confusion.",
            "id": "6feca5cb52d1c2956a7dae09d8463c92"
          },
          {
            "type": "html",
            "text": "<b>Order Dependency.</b>\nSometimes one method cannot be invoked until after another has been invoked.",
            "id": "2f4012638584bacc962534d99672ae2a"
          },
          {
            "type": "html",
            "text": "<i>Therefore:</i>\nWrite a comment explaining the dependency, to prevent someone from accidentally violating the constraint. Practically, I have always been able to transform the situation into a single public method that invokes the other two privately in the correct order.",
            "id": "3846d1827c14bf294013c1ff0dd03e7b"
          },
          {
            "type": "html",
            "text": "<b>Think Like the Machine.</b>\nMachines don't think like humans and aren't likely to do so soon. In fact, we humans find the logical nature of machines useful.",
            "id": "1ab3a30b4392ba88e7c3cfafa4acb6c0"
          },
          {
            "type": "html",
            "text": "<i>Therefore:</i>\nLearn to read a program as if you were the machine. Don't expect to have the machine's normal behavior explained in comments. Prefer programs written as objects since it is somewhat easier to <i>think like an object</i> than other semantics.",
            "id": "da578b20ceff6d911bc6f1b9ced8749b"
          },
          {
            "type": "html",
            "text": "(The context of this pattern is <i>reading</i> code. See <i>'Program for People</i> above for a pattern for <i>writing</i> code.) (A programmer <i>must</i> be able to think like the machine in reading code; however if one can prefer code written in objects, one can prefer code written for people using comments as well).",
            "id": "79f85be8feb9d6849d2e6b1c54fd0ed1"
          },
          {
            "type": "html",
            "text": "<b>To Do.</b>\nWhen you are programming for insight, you will often have ideas that will be required at some point, but pursuit of which would distract you from learning.",
            "id": "1b817e493a2120c7667ce0c44b17897b"
          },
          {
            "type": "html",
            "text": "<i>Therefore:</i>\nMark each such case with a comment giving the reader a suggestion of what other logic will be required. (or [[Use Code To Bookmark]])",
            "id": "9e0418f8ba357f46433dca619d37f511"
          },
          {
            "type": "html",
            "text": "([[Todo Comments]])",
            "id": "1e444dd7ce81bd55f3cf0c34cc0d41c4"
          },
          {
            "type": "html",
            "text": "<b>Un-Done.</b>\nWhen following an iterative process, you may stop with code intentionally left unfinished or untested. Circumstances may preclude your picking up where you left off.",
            "id": "6ba975fa17ec34794b36c349125e8c80"
          },
          {
            "type": "html",
            "text": "<i>Therefore:</i> Mark each such case with a comment giving (or pointing to) clear instructions on what is left to be done.",
            "id": "61373e2068c3f736be744858bdf0e9a6"
          },
          {
            "type": "html",
            "text": "<b>Fence It Off.</b>\nWhen you are implementing a design, you may be promised that there will never be more than 50 widgets, or 10 simultaneous users. Sometimes there are enormous performance payoffs to taking advantage of those constraints... until they change.",
            "id": "7c1b6fa7698da4cdb5c0de369dee3c47"
          },
          {
            "type": "html",
            "text": "<i>Therefore:</i> When you are writing code that you know depends on data being within constraints, document those constraints. \"This method handles only arrays of size 1-50. It must be rewritten for larger arrays.\" ",
            "id": "d7867a1460b6f95f821ba38592b9d781"
          },
          {
            "type": "html",
            "text": "<b>Blind Alley.</b>\nThere's often a solution that's \"simple, obvious, and <b>wrong</b>.\" Usually, it's in version 1.0 of the code, and replaced by something less simple, less obvious, and less wrong in version 1.1. Someone who comes back to the code later is often tempted to unknowingly repeat the mistakes of the past.",
            "id": "5f175764581f5b776c5e82ab7192a15c"
          },
          {
            "type": "html",
            "text": "<i>Therefore:</i>\nWhen you replace obvious but incorrect code with non-obvious but correct code, <b>comment</b> the old approach as a blind alley that shouldn't be traversed again.",
            "id": "7ca8fb08802ab528ccd35937d8df6991"
          },
          {
            "type": "html",
            "text": "\nAgree: [[Betsy Hanes Perry]] ",
            "id": "d3521f0456bb4e1b82e4a77696ac2a16"
          },
          {
            "type": "html",
            "text": "(Sorry; probably redundant with <b>Clear Warning</b> above.) ([[Blind Alley]])",
            "id": "d762a19b88a7350f37a8363dc469117d"
          },
          {
            "type": "html",
            "text": "<b>Format/Comment to Understand</b>\nWhen you are faced with understanding a large piece of unfamiliar code, you may have trouble deciding where to start.",
            "id": "2076f87d9acfb123f6359c75dc00cbdb"
          },
          {
            "type": "html",
            "text": "<i>Therefore:</i>\nRead actively, by formatting, commenting, or decomposing methods.",
            "id": "d7ebcaec830e86ee3d990eeadcbf8076"
          },
          {
            "type": "html",
            "text": "<b>Generated Documentation</b>\nUnderstanding a program by reading its code can be daunting.",
            "id": "cc6c812a6556ed165e48c052ba99f1d8"
          },
          {
            "type": "html",
            "text": "<i>Therefore:</i>\nInclude comments in predictable places like the beginning of methods. Generate paper or electronic documentation using those comments.",
            "id": "276a05e8af5c8ba980de46728b2866ee"
          },
          {
            "type": "html",
            "text": "<b>Named idioms</b>\nThere are some common but odd looking coding idioms. (One of my favorite in Perl is:",
            "id": "0fb31a206fcec1662d147ea6793bdfc2"
          },
          {
            "type": "code",
            "text": "        local $_ = $string;",
            "id": "7d9d7bcfd85a4ec6150850fc970bf820"
          },
          {
            "type": "html",
            "text": "which makes a copy of the magic <b>$_</b> variable that's the default target for regular expression matching. Note that:",
            "id": "4709f70c08885759cdc9fc355deedaa7"
          },
          {
            "type": "code",
            "text": "        my $_ = $string;  # WRONG!",
            "id": "5cec3ac47c3b8de4c86bbdedf084461e"
          },
          {
            "type": "html",
            "text": "which most reformed Perl 4 programmers would think of, isn't the same thing; it's a <i>'Blind Alley</i> as described above.) Such idioms are hard to understand.",
            "id": "7b32970e9ee4650c2e5dcc360633c368"
          },
          {
            "type": "html",
            "text": "<i>Therefore:</i>\nAgree on names for such idioms. Use the idiom name in the comment. For example:",
            "id": "283106bca08583cc782faf14b0c1f19a"
          },
          {
            "type": "code",
            "text": "        local $_ = $string;  # \"Local Default Match\" idiom",
            "id": "9182e4a96d13571bd2786c925817c8b5"
          },
          {
            "type": "html",
            "text": "If you're a distinguished author (or gang of four distinguished authors:-), publish a book that makes such idioms part of the industry vocabulary. ([[Patterns Of Software]] has an interesting opinion on this.)",
            "id": "5b8d4e1c91dddbeac8026771175665f2"
          },
          {
            "type": "html",
            "text": "<b>Fix Broken Code Instead Of Commenting Bugs</b>:",
            "id": "aac913f38881915d336f22273aaf0656"
          },
          {
            "type": "html",
            "text": "\"There is always a good reason for doing the wrong thing.\"\nDon't explain (in a comment or elsewhere) why the wrong thing was done. Instead, fix it; do it right instead. (Exception: when you don't have time. See also <b>Un-Done</b> above.)",
            "id": "d56bf066a13862f9f09e577bb777d16d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nA collection of <i>get it done</i> practices have been dubbed [[Extreme Programming]]. In this context, [[Kent Beck]] and others have pointed out the value of intention-revealing code. We pick up the thread here with Alistair's questioning what might have been a bit of overstatement...",
            "id": "3e679b2dbbffc0d6025b04f6ca4bdddc"
          },
          {
            "type": "html",
            "text": "\nHow come all the rigor on the [[Coding Conventions]]? That really surprised me. What causes you to put so much weight on the idea that everyone should write identically? Usually programmers tell me the indentation style etc makes so little difference.",
            "id": "15f60a6c42208fa27bf28d256046d0e8"
          },
          {
            "type": "html",
            "text": "-- [[Alistair Cockburn]]",
            "id": "781d2f4e64482aa911c97b2140039700"
          },
          {
            "type": "html",
            "text": "\nSee [[Coding Conventions]] for remarks on why we do this. -- [[Ron Jeffries]]",
            "id": "2e43223be3460e6fb87aef4445a61f77"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nThe [[Coding Conventions]] question seems related to a separate issue concerning uniformity of formatting/indentation. [[Method Commenting]] followed from other guidelines suggesting comments per se were (usually) unnecessary and to be deprecated. The following discussion here followed from that, rather than [[Alistair Cockburn]]'s note above. -- [[Jim Perry]]",
            "id": "7edab2765a9a2af9eaa0442e1e55e97d"
          },
          {
            "type": "html",
            "text": "\nOne should write relevant and helpful comments. As to whether comments are \"needed\", that's surely subjective. I am of the [[Programmers Are Writers]] sect, myself, but we're a small denomination. I can't help but protest what appears to be active discouragement of documentation, though. -- [[Jim Perry]]",
            "id": "5419c3475f4e6b93194ffb56322f741d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nPerhaps I've been reading too much [[Douglas Hofstadter]] lately, but I think an aspect of this that may be slipping by is the distinction between <i>meaning</i> and <i>message</i>. A comment, like code, is a message that is intended to convey a meaning to the reader. If both author and reader have a deep and shared understanding of the meaning space, the comment need not say as much. In fact, among a community of seasoned Smalltalkers, method comments often are superfluous, as Kent and Martin have observed.",
            "id": "e924e37a85a0b6bd5d91fafd7d115c2e"
          },
          {
            "type": "html",
            "text": "\nOn the other hand, we Smalltalkers have internalized an ability to either ignore or derive meaning from several superficial aspects that drive other coder's crazy. These include:",
            "id": "1156d3b3c3d6dc56e9011fd7d346bd59"
          },
          {
            "type": "html",
            "text": " Joining words together and capitalizing, instead of other conventions (like underscores)",
            "id": "f0c823f50da3fdc658f612e5b0689c0a"
          },
          {
            "type": "html",
            "text": " Spelling out words instead of abbreviating them",
            "id": "027ebfc415d86730ccdf4c8d9ef34509"
          },
          {
            "type": "html",
            "text": " Infix instead of postfix or prefix function notation.",
            "id": "14c4fc1ea91c81c71f248625595c8f4d"
          },
          {
            "type": "html",
            "text": "\nWhen the number of possible meanings in a communication is very restricted, a very simple message is enough; some call these \"signals\". For instance, among long-time coworkers, a mere raising of an eyebrow, rolling of a eye, or comment in code that says \"yeah, right...\" is enough to convey a meaning.",
            "id": "8f8afb7a6e45d563bef1de7bdd1f11e5"
          },
          {
            "type": "html",
            "text": "\nFor a long-time C programmer, a phrase like <i>*dst++=*src++</i> is completely self-explanatory and requires no comment; \nthe <i>meaning</i> is evident from the code. Not all communities share in this assessment, however.",
            "id": "8ab71038f33a8ad727130509bb84a310"
          },
          {
            "type": "html",
            "text": "\nAn aspect that perhaps might be interesting to explore further is suggested to me by Ward's [[Hyper Perl]] pages. Perhaps comments could be captured in the environment as phrases, paragraphs, or stories that were linked to the code, as opposed to being linearized with it. I envision different communities perhaps wanting to link different webs of narrative to the same fragments of code. Some of these might be written by the developer. Others might be annotations by other interested parties. All might be turned on or off, followed or ignored by the reader, just as we do with the links here.",
            "id": "9ca9e877d21bc698bfffa8ef1462a660"
          },
          {
            "type": "html",
            "text": "-- [[Tom Stambaugh]]",
            "id": "ff3792469ceb88e2ac6b19f40e1b18f7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nAll writing should be targeted at a specific class of reader, and comments are no exception. Part of the problem is to decide how much you can assume about the reader's knowledge.",
            "id": "746096227d487260735ee14697b8c882"
          },
          {
            "type": "html",
            "text": "\nWhen I'm reading other people's code, I often know very little about their application. With a big project, it can take a while to learn it. So some comments should be explaining, not so much what a method is doing, but when and why it should be called.",
            "id": "208cfc436f64a28d11ca068419361cc1"
          },
          {
            "type": "html",
            "text": "\nSystems that are written by seasoned Smalltalkers with deep understanding of the meaning space, sometimes get maintained by inexperienced, lowly paid novices. You may not be writing for yourself, but for the people who come after you when you have moved onto higher things.",
            "id": "46cdcf7150331d0e50b44109af822ba7"
          },
          {
            "type": "html",
            "text": "-- [[Dave Harris]]",
            "id": "9cd940f9a523c5984f332abacc53fc87"
          },
          {
            "type": "html",
            "text": "\n[[Dave Harris]]'s last point nicely captures an oft-overlooked aspect of professionalism in any endeavor. The variant I was taught, and strive to follow, is: \"It is your responsibility to [[Prepare The Way]] for those who will follow.\" -- [[Dave Smith]]",
            "id": "62a9340b102be9d5ca1645bf89561067"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nI wonder if [[Dave Harris]] and [[Dave Smith]] are making an implicit assumption about the communication path between the author and the reader? I wholeheartedly concur with all they say; its the <i>mechanism</i> of providing it that I'm interested in looking at more deeply.",
            "id": "aa1518eae922c89337c9ec73d2028759"
          },
          {
            "type": "html",
            "text": "\nSuppose the author is [[Seasoned Smalltalker]], and suppose one reader is [[Lowly Paid Novice]] and another is [[Seasoned Maintainer]]. In a conventional environment, the two readers ([[Lowly Paid Novice]] and [[Seasoned Maintainer]]) are forced to read the same material, because the medium cannot adjust its presentation to the reader.",
            "id": "bb7fdce0dff0f0774324248e4e126b64"
          },
          {
            "type": "html",
            "text": "\nIn systems with [[Wiki Nature]], however (or perhaps [[Mu Nature]], an environment I'm currently pondering), the <i>medium</i> has the ability to recognize the cross-product of [[Seasoned Smalltalk]] and whichever reader is requesting the page. It's therefore perfectly feasible for [[Seasoned Maintainer]] to see completely different text from [[Lowly Paid Novice]], even when accessing the same page.",
            "id": "2bc31ff2b5dd9b0f87e00d143ea86671"
          },
          {
            "type": "html",
            "text": "\nImagine a mechanism, roughly analogous to function overloading in C++ or Lisp, that tags \"comments\" about a fragment of code (like a method) from multiple authors, and supports rules for mapping those comments onto author/reader combinations. This mechanism can be invoked during the Retrieve Page (or maybe [http://c2.com/wikibase?HandleBrowse c2.com] ) in Wiki, so that the actual page that appears represents the result of evaluating the mapping in the context of the specific reader referencing the page (I assume that each reader is [[Known User]], a rash assumption in the current Wiki environment).",
            "id": "1e627d10cc3df38c27ec05fcb24d4f35"
          },
          {
            "type": "html",
            "text": "\nSo while I totally agree with [[Dave Smith]] that we should [[Prepare The Way]] for [[Lowly Paid Novice]], I also think [[Kent Beck]] is following accurate intuition when he suggests that [[Seasoned Smalltalker]](s) would prefer more terse or perhaps even missing comments. I get excited by the opportunity to work with a medium like wiki that lets us effectively accomplish both...we've never had <i>that</i> before.",
            "id": "45df31a3e9a282922f466429d7a0a906"
          },
          {
            "type": "html",
            "text": "-- [[Tom Stambaugh]]",
            "id": "ff3792469ceb88e2ac6b19f40e1b18f7"
          },
          {
            "type": "html",
            "text": "\nThe nature of the Smalltalk medium is indeed unique and wonderful. [[Prepare The Way]] applied to Smalltalk includes \"follow [[Kent Beck]]'s lead, and express your meaning through clear code, and not method comments.\" -- [[Dave Smith]]",
            "id": "638115eec3664d7159621a9a44f66769"
          },
          {
            "type": "html",
            "text": "\nAre you saying, [[Tom Stambaugh]], that the [[Seasoned Smalltalker]] should actually write every comment twice, once aimed at the [[Lowly Paid Novice]] and once at [[Seasoned Maintainer]]? Well, maybe. -- [[Dave Harris]]",
            "id": "c96c2b38fbad8aa07863929b162e101c"
          },
          {
            "type": "html",
            "text": "\nOne potential problem with hiding [[Lowly Paid Novice]] comments from the [[Seasoned Smalltalker]], is that the [[Seasoned Smalltalker]] may never get a chance to learn from the novice. If someone else is finding my code obscure or difficult to understand, or feels my comments are inadequate, I want to know about it.",
            "id": "407644d728d71bce58bab6145f30900b"
          },
          {
            "type": "html",
            "text": "\nAlso, there's a risk that the [[Lowly Paid Novice]] will write a comment which is wrong or misses the point.",
            "id": "5db5a8f9ba40fdd5f7337b44ebdb0458"
          },
          {
            "type": "html",
            "text": "\nI suppose these problems can and should be caught by a code review, but I've worked in environments where they wouldn't be.",
            "id": "f4ea17efd45766dabd92c1aba0aac83c"
          },
          {
            "type": "html",
            "text": "-- [[Dave Harris]]",
            "id": "9cd940f9a523c5984f332abacc53fc87"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nHmmm, I think I'm saying \"All of the above\". I think there are a multitude of possible approaches, of which you've identified several interesting ones:",
            "id": "797c2e1d5862adb509e0b68d16e1e179"
          },
          {
            "type": "html",
            "text": " [[Code Author]] writes all the comments (at all levels). This is your first scenario, where the [[Seasoned Smalltalker]] is the [[Code Author]]. As you've observed, this puts a burden on the [[Code Author]], and many [[Code Author]]s just can't do it.",
            "id": "87be2905f276472fd48dd86680d9327a"
          },
          {
            "type": "html",
            "text": " Each [[Code Reader]] annotates the code with his or her learnings (your second scenario). This strikes me as more consistent with [[Wiki Nature]], and I like its organic nature.",
            "id": "2bd1ae4fdb7cdf71ef832a5db0c19f6b"
          },
          {
            "type": "html",
            "text": " [[Comment Author]]s write comments, perhaps in conjunction with [[Code Author]]s and [[Code Reader]]s. I wonder if this approach might grow out of such a system in real use, over time.",
            "id": "b02564bc19d798a6a65b9ae2b6652d3a"
          },
          {
            "type": "html",
            "text": "\nI particularly liked your final observation. Its been my experience that those \"blindingly obvious\" insights are precisely the sort of meanings that newcomers DO need to be explicitly told about and that seasoned veterans literally can't imagine not \"getting\", and so feel no need to explain.",
            "id": "6ec19f43ad438ce03f206ae417aa535b"
          },
          {
            "type": "html",
            "text": "-- [[Tom Stambaugh]]",
            "id": "ff3792469ceb88e2ac6b19f40e1b18f7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nI like some of these suggestions. However, I don't think that the [[Lowly Paid Novice]]/[[Seasoned Programmer]] dichotomy catches the real issue as I see it. Comments carry information outside the scope of the language, at a different level of abstraction; they are not primarily for clarification of language idioms for those unfamiliar with the language, and they supplement rather than replace clarity of code.",
            "id": "de654b76c9b3552194153edf82e2bb37"
          },
          {
            "type": "html",
            "text": "\nI agree with the [[Prepare The Way]] principle, but in my experience a significant proportion of the time the person whose way is prepared by (my) adequate documentation of code is myself (some months or years later). The [[Code Author]] at the time of writing the code is privy to the complete design of the piece of code, the reasoning that led to that design over other considered alternatives, and so forth. If, between the code per se and the comments, the author doesn't put down that information, it is lost (up-to-date external documentation is even rarer than internal documentation/comments).",
            "id": "da937d234448af8089b8c5a4f04b7789"
          },
          {
            "type": "html",
            "text": "\nA later visitor, whether the original author or another, may need to reconstruct at some pain the original information, but typically can't do so to the degree that the original author could have at the time of composition.",
            "id": "053cbe005fd249634230d6d3ec6e27b1"
          },
          {
            "type": "html",
            "text": "-- [[Jim Perry]]",
            "id": "76690184569f6d7122b23a964190be42"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nAt the lowest level, all commenting is for purpose, rather than function. I make this distinction for two reasons - one, it was drummed into me when I was first learning assembly language that what the statement says is far less important than what it does, in the overall scheme of what the program is trying to accomplish, and two, very often, even though I am an experienced and skilled programmer, I very often write code that is supposed to do one thing yet does another. If I have comments that tell me what it is that I thought the code was supposed to be doing, I have a better chance of actually making it do that.",
            "id": "a1f42614abff98dffdbaf9aeb91fd814"
          },
          {
            "type": "html",
            "text": "\nI liken uncommented code, no matter how clearly written, to the kind of directions you get when someone tells you, \"okay, fourth right, go 4 miles, third right, go 1/2 a mile, seventh left ...\". I mean, they're <i>precise</i>, all right, but if you're trying to follow them in the rain or at night, you'll probably get lost if there are more than a couple turns. ",
            "id": "129daf5bf2d1a818414aa0b919fd3fd1"
          },
          {
            "type": "html",
            "text": "\n[[Well Commented Code]] is more like \"follow this road to the Shell station, and turn right onto route 302. You'll see the Wal-Mart on the left after 5 miles. Turn at the next stop light onto River Road ... \". I've got signposts (assertions) to show me my subgoals in this piece of code.",
            "id": "a02a0c3ef493d60cdce4b80e7820a3d8"
          },
          {
            "type": "html",
            "text": "-- [[Joe Mc Mahon]]",
            "id": "5def39535f0dbf240161f788a4a8abdf"
          },
          {
            "type": "html",
            "text": "\nOne further thing that needs to be mentioned. It's the second of these two rules:",
            "id": "5496e81a78887d2562b31d0e0bc95048"
          },
          {
            "type": "html",
            "text": " If your code needs a comment to explain it, rewrite it.",
            "id": "8782889f7b2deba34202a2c59f8daf66"
          },
          {
            "type": "html",
            "text": " If you can't explain your code with a comment, rewrite it.",
            "id": "16781832e8db51e6a7de32e6f9ce72c1"
          },
          {
            "type": "html",
            "text": "(I list both rules because I think they look pretty together.) I've found that documentation exposes flaws. It can be easier to redesign a feature than to document it clearly as it stands. Similarly I have sometimes rewritten code to make the comments easier to write. Truly, one should strive to write the comments first. -- [[Dave Harris]]",
            "id": "6d7ff85800eff8db48c29fe5846a2477"
          },
          {
            "type": "html",
            "text": "<i>As some would say, write user manual concurrently with code. This exposes many instances when the programmer loses sight of [[End User]] functionality. It also throws light on \"what the hey are we doing here\" in more obscure sections. The above rules of comments is but a minor sidelight of this, since it is too easy to think one's own comment actually explains what one intended it to. -- [[Bo Leuf]]</i>",
            "id": "ae3a2008a59ba8e12c1240afa13e62ac"
          },
          {
            "type": "html",
            "text": "\nI see an interesting spectrum here.",
            "id": "8108390b8c00b8d786dc5a8dc09464c9"
          },
          {
            "type": "html",
            "text": " Sometimes a programmer hacks out code first ([[Spike Solution]]).",
            "id": "4240f586ffd021b2b5cd830f79b17757"
          },
          {
            "type": "html",
            "text": " Other times a programmer writes a one-line test first ([[Replace Comment With Assertion]]; [[Never Writea Line Of Code Withouta Failing Test]]), then writes the code.",
            "id": "fb13661cbdef30e7cc06612496508b88"
          },
          {
            "type": "html",
            "text": " Other times a programmer writes [[Code Unit Test First]], then writes the code.",
            "id": "d9fa7b1ceeda07ae1be42765f0e6ae49"
          },
          {
            "type": "html",
            "text": " Other times someone (the programmer?) writes a rough draft of a small section of the user manual before writing the code implementing that feature ([[Write The User Manual As You Go]]).",
            "id": "87f0a63d954c504e4c0839227e43429c"
          },
          {
            "type": "html",
            "text": " Apparently no one has actually written the entire user manual before writing an application ([[Manual As Specification]], [[Write The User Manual First]]).",
            "id": "50efc5aeb6010ed5161c9d63c0575595"
          },
          {
            "type": "html",
            "text": "-- [[David Cary]]",
            "id": "817192ac32e925c77e96f23443902b52"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nAs my first boss said, \"No comments don't lie.\"",
            "id": "61473cfe3f2684296b0dd2a927b2d36e"
          },
          {
            "type": "html",
            "text": "\nThe value of:",
            "id": "1c376a86813d6e67c6eb45963fe63ec4"
          },
          {
            "type": "code",
            "text": "        ++i;  /* add one to i */",
            "id": "022041e4d66beada4ecdbad34f6f68ee"
          },
          {
            "type": "html",
            "text": "is significantly <i>less</i> than:",
            "id": "331cf26a0ff96f3c3a18fdb174810e4a"
          },
          {
            "type": "code",
            "text": "        ++i;",
            "id": "bfbe40deffaf72cbd22a4ac7259447db"
          },
          {
            "type": "html",
            "text": "There may be some value in <i>very</i> short comments, i.e., naming the [[Gang Of Four]] design pattern you're using. (Using the name in the method you're invoking would be better.)",
            "id": "28bc6f783aa74dec7502f5e55f7c1a15"
          },
          {
            "type": "html",
            "text": "-- [[Paul Chisholm]]",
            "id": "bca09ec14cd07ced7edf3c5800540402"
          },
          {
            "type": "html",
            "text": "\nSometimes lying comments are extraordinarily useful. Every so often you see",
            "id": "203ebe0b0ae972dc2a01197dbdc9a292"
          },
          {
            "type": "code",
            "text": "  --i; /* add one to i */",
            "id": "6efb7a72c1620b5fcd2a08450bc1889e"
          },
          {
            "type": "html",
            "text": "which is a blinking neon sign that the programmer wasn't thinking clearly. When you see that, you have a Very Big Clue about what the code was supposed to do, as opposed to what it does.",
            "id": "a91e86e194d2dd52f0250417bec30408"
          },
          {
            "type": "html",
            "text": "\nI don't advocate commenting every line, by the way; I'm just addressing the particular example. I haven't heard anybody here recommending commenting every line; rather, they say that there's a large practice space between Comment Every Line and No Comments At All.",
            "id": "47d258b911f7c9c0ec20fd0767c805ec"
          },
          {
            "type": "html",
            "text": "<b>Comments Tell Why. Code Tells How.</b>",
            "id": "c64959ade46aa1fddb6c7ea091350d47"
          },
          {
            "type": "html",
            "text": "\nSee also [[History Matters]].",
            "id": "47d09c729eab42ad108a998e5c3d7de0"
          },
          {
            "type": "html",
            "text": "-- [[Betsy Hanes Perry]]",
            "id": "345529efa3a24d5108762346babfda5f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nThis example:",
            "id": "dc2e158330c914855457a91a05635708"
          },
          {
            "type": "code",
            "text": "        ++i;    /* add one to i */",
            "id": "6b133322103d287baff7f8e13c26156f"
          },
          {
            "type": "html",
            "text": "is a non-comment. It adds nothing to the communication - it's a tautology. Now if it says",
            "id": "e40e9a9bbd34dec4638e5b7b4c2669c1"
          },
          {
            "type": "code",
            "text": "        ++i;    /* record another match of this expression */",
            "id": "41459be41c0d0ace36e35e843ed8f0a6"
          },
          {
            "type": "html",
            "text": "that is a comment that tells me what the point of the statement is; and is not more noise in the communication. This way I know that (say) after the current loop, <b>i</b> will contain the number of hits. Conversely, if the number of hits is wrong after someone has modified the code, I can see that I should find out where <b>i</b> got clobbered. ",
            "id": "95409cba1dabc4e2d4baf95b56cfc87b"
          },
          {
            "type": "html",
            "text": "-- [[Joe Mc Mahon]]",
            "id": "5def39535f0dbf240161f788a4a8abdf"
          },
          {
            "type": "html",
            "text": "\nA better alternative is:",
            "id": "5a3bb5d8be7317d87feae3650bf2c5d1"
          },
          {
            "type": "code",
            "text": "        ++expressionMatchCount;",
            "id": "011a3088cc63e06ed050d53036e1081d"
          },
          {
            "type": "html",
            "text": "(or something slightly less verbose).",
            "id": "2dd0c8335c2ef5db4022b48266b965ee"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nI agree with [[Joe Mc Mahon]]; \"/* add one to i */\" is a classic example of a <i>bad</i> comment, hence of bad coding.\nAnother common form is the \"required boilerplate\" where each subroutine is preceded by a large box constructed of asterisks or whatever, possibly containing the subroutine name and typically some <i>unfilled</i> slots for author, dates, calling conventions etc. and no actual useful descriptive information. See [[Massive Function Headers]].",
            "id": "ee1b8606df32287e677c73df7967d89a"
          },
          {
            "type": "html",
            "text": "\nSuch usage tends to arise in courses or similar environments where some rule about comment frequency is in place, but there is no appropriate feedback about the <i>quality</i> of the comments. Such an environment teaches that comments are an onerous and pointless chore.",
            "id": "95a11be2560bdde24393154693e8bb6d"
          },
          {
            "type": "html",
            "text": "\nHowever, the fact that a thing <i>can</i> be done poorly is a poor excuse not to do the thing yourself; to go further and advocate therefore that it not be done at all is worse.",
            "id": "d319f642e42a4ecbff70f6b24543b691"
          },
          {
            "type": "html",
            "text": "-- [[Jim Perry]]",
            "id": "76690184569f6d7122b23a964190be42"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "(Here's a list of related Anti-patterns or anti-idioms, called \"How to Write Unmaintainable Code\": [http://mindprod.com/unmain.html mindprod.com] -- [[Katy Mulvey]])",
            "id": "042972edc3a16245fdc0cfcc5534ac54"
          },
          {
            "type": "html",
            "text": "<i>Website above moved to [http://mindprod.com/index.html mindprod.com] but there is no longer any reference to these anti-idioms. (July 1998 -- [[Bo Leuf]])</i>",
            "id": "8b60145fb74378b063e42842413924ab"
          },
          {
            "type": "html",
            "text": "\nAs of 2005-10, it has moved again to [http://mindprod.com/jgloss/unmain.html mindprod.com] - but that's only the index. Apparently it has grown over the years, split into several sections and a blog.",
            "id": "9c5ffe23f1f818ec5012c14096ae4541"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nI've been reading the Wiki source code (see [[Hyper Perl]] or [http://c2.com/cgi-bin/wikibase/ c2.com]), which has no method comments. It's been an interesting experience.",
            "id": "1b883472577590eaa7fb102f458a7a7f"
          },
          {
            "type": "html",
            "text": "(Actually, I've been reading a printout of it as \"straight Perl\" on the train. It's clearly the wrong way to read it. Would a Smalltalker ever try to read from a static piece of paper? It's what I have time and equipment to do.)",
            "id": "5584de27c7204f6b13055b0f6ca35d17"
          },
          {
            "type": "html",
            "text": "\nThe [[Hyper Perl]] links, in addition to being a useful tool for navigating the source (with the right tools), also provide some information about the code itself. This is more true for those code fragments outside any Perl subroutines, notably variable definitions.",
            "id": "f80e5ae895129cb770f6dfc7a7d12bf5"
          },
          {
            "type": "html",
            "text": "\nI find code without method comments makes me juggle multiple levels of abstraction simultaneously. If I'm trying to figure out what the Print Body Text subroutine does, I need to build that up out of elements such as <b>foreach(split(/\\n/,$_)</b> ... okay, I know that means the value of $_ changes within this loop from the whole document to each line of the document, but I've got to spend a half second figuring that out without forgetting all the other stuff I had been trying to figure out.",
            "id": "8368f180e9038dfdf2381cbf185f97f5"
          },
          {
            "type": "html",
            "text": "\nThis is particularly tough in Perl 4, which is infamously short on ways to build up user defined data structures. There are common idioms to build such structures (which end up being stored in strings, very easy to store and retrieve). I can follow them, but it's one or two more things to remember.",
            "id": "0f9ee204040a1a23e4cc5d70de84eb46"
          },
          {
            "type": "html",
            "text": "\nFunny thing. Most programmers have great memories; they can do that easily. I have a lousy memory. I can't even keep track of everything that's going on in a short program (a few hundred lines long, say) I'm currently writing. The good news is, I write very clean, modular code with a lot of information hiding. The bad news is, I think I need method comments more than most programmers. --[[Paul Chisholm]]",
            "id": "bf2ac9bd01ab7c2d2441179d2ea09283"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\n[[Hyper Perl]] Wiki is a great read, but I found it very difficult to answer questions about the scope of locking, who has the db open when, etc., without resorting to the the straight Perl source. This is the same problem I have when doing database work in Smalltalk: it's often easier to reason about the \"big picture\" from flattened source than it is from hyper-linked pieces. -- [[Dave Smith]]",
            "id": "7166ac6c18cb197af304faa2d4de1ebf"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nA thought about comments. If comments lie, and we are game to try to get away with fewer and fewer comments, perhaps we could facilitate this by changing our development environments so that all comments for a method are deleted whenever it is touched. It is kind of an evil way of forcing ourselves out of the comment habit. -- [[Michael Feathers]]",
            "id": "eade250bc87f8cc042b82195946d8638"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nAn idea that has been bouncing around in my head in a half-formed state suddenly just jelled: [[Identifiers Are Comments]].",
            "id": "c2791ab5188cf239e5485411fe07a125"
          },
          {
            "type": "html",
            "text": "-- [[Curtis Bartley]]",
            "id": "b91d929add1c780594d9efd046e537f7"
          },
          {
            "type": "html",
            "text": "\nGood recognition. Also, indentation is comments, in general source code is comments, but, identifiers are the most informative.",
            "id": "6093856a94f1f3fe754f3bbc1231a8b5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nIf we could compile and execute [[Natural Language]], the comments would be the code.",
            "id": "24dee446f9d48e5d88778b5832f5a01c"
          },
          {
            "type": "html",
            "text": "<i>I doubt it. When teaching a human how to do something, one talks about more than just a sequence of steps, and ways to detect and correct exceptional situations. One also comments on situations where this skill may be useful, the overall goal of doing it this way, the possibility of other methods of reaching the same goal, and sometimes a bit of theory as to why this sequence of steps could possibly achieve that goal.</i>",
            "id": "da8796bbecf2a2fee55b422b71429bcd"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "\nI agree with most of the patterns listed at the top of the page, but I am a bit uncomfortable with relying on comments for correct program behavior, since [[Comments Dont Compile]]. So for patterns like <b>Order Dependency</b>, <b>Un Done</b>, and <b>Fence it off</b>, I prefer to add code that ensures that my intent gets carried out. -- [[Jay Dunning]] ",
            "id": "e20286454e088fdbcd94f6c27daf7c33"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "See [[Comment Costs And Benefits]]",
            "id": "7ebdad353610998e26909208a098018e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "bb9a36ff31a3dd00bc19d413f363e367"
          },
          {
            "type": "html",
            "text": "[[Category Pattern]] [[Category Coding Issues]]",
            "id": "2f1ba84984d984703badfbd9481bc944"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?MethodCommenting c2.com]",
            "id": "9a5c3f7d895094c206043f1041d77586"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1634968489291
    }
  ]
}