{
  "title": "2023-06-12",
  "story": [
    {
      "type": "paragraph",
      "id": "ec77971e00dd5764",
      "text": "⇒ [[Decode JSON in Elm]]: In the Msg type of Main.elm I want to add a new variant to represent a message to be created by the eventDecoder function in case of an Unknown event and received by Main's update function."
    },
    {
      "type": "paragraph",
      "id": "fa99ce5409748aca",
      "text": "Let's call it UnknownEventMsg: (ChatGPT May 24 Version)\n\n"
    },
    {
      "type": "code",
      "id": "7688efbb9da26273",
      "text": "type Msg\n    = UpdateInput String\n    | ParseJson\n    | UnknownEventMsg String  -- Add this line to represent the message for Unknown events\n"
    },
    {
      "type": "paragraph",
      "id": "7517a93f063a20fd",
      "text": "Here, String represents the data associated with the message. You can change it to the appropriate data type based on your needs."
    },
    {
      "type": "paragraph",
      "id": "aa5ba8b2d48dc6f3",
      "text": "Next, in the update function, you need to handle the new UnknownEventMsg variant and perform the desired action when this message is received. For example, you can update the update function as follows:"
    },
    {
      "type": "code",
      "id": "ced23df335c78554",
      "text": "update : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        UpdateInput value ->\n            ( { model | input = value }, Cmd.none )\n\n        ParseJson ->\n            […]\n\n        UnknownEventMsg eventData ->\n            -- Perform the action you want to take when an Unknown event message is received\n            -- For example, you can update the model or trigger some other side effect\n            ( model, Cmd.none )  -- Replace with the appropriate action\n\n"
    },
    {
      "type": "paragraph",
      "id": "b21fab6bd73ab4dc",
      "text": "In this example, the UnknownEventMsg variant is handled, but you need to define the specific action you want to take when this message is received. Replace ( model, Cmd.none ) with the appropriate action based on your requirements."
    },
    {
      "type": "paragraph",
      "id": "885b9d997410fb09",
      "text": "By making these changes, you can handle the new message type in Main.elm and perform the desired action when an Unknown event is encountered during parsing."
    },
    {
      "type": "paragraph",
      "id": "c3e8bfe1f9e31d7f",
      "text": "⇒ test(MainSpec): RED UnknownEventMsg _ [https://github.com/RalfBarkow/vite-elm-dojo/commit/fe18a0571e115037ea98aae19b6b6594ca51772d commit]"
    },
    {
      "type": "markdown",
      "id": "6a77497c8caf67a4",
      "text": "> MainSpec still needs to be heavily reworked."
    },
    {
      "type": "pagefold",
      "id": "6fbfdbfa312bcc1b",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "95078cab80f325b5",
      "text": "⇒ [[Elm]]: Setup toolchain"
    },
    {
      "type": "code",
      "id": "1189bbbcca342f82",
      "text": "npm install -g elm@latest"
    },
    {
      "type": "code",
      "id": "7064cfc441fb02ce",
      "text": "npm install -g elm-test"
    },
    {
      "type": "pagefold",
      "id": "32ab72f7c48d47f8",
      "text": "~"
    },
    {
      "type": "code",
      "id": "1758597965721939",
      "text": "home-manager switch                                                      ~\nerror: attribute 'defaultOverridePriority' missing\n\n       at /Users/rgb/.nix-defexpr/channels/home-manager/modules/misc/nixpkgs.nix:134:25:\n\n          133|       # `_pkgs`, see https://github.com/nix-community/home-manager/pull/993\n          134|       pkgs = mkOverride modules.defaultOverridePriority _pkgs;\n             |                         ^\n          135|       pkgs_i686 =\n(use '--show-trace' to show detailed location information)"
    },
    {
      "type": "paragraph",
      "id": "169bb196ee92046d",
      "text": " nixpkgs: add indirection to _module.args.pkgs #993  [https://github.com/nix-community/home-manager/pull/993 github]"
    },
    {
      "type": "code",
      "id": "7a095099025de9ad",
      "text": "rgb@mbp-rgb>    home-manager switch                                               \nzsh: command not found: home-manager"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-06-12",
        "story": []
      },
      "date": 1686550113460
    },
    {
      "item": {
        "type": "factory",
        "id": "58463f6be35e39d6"
      },
      "id": "58463f6be35e39d6",
      "type": "add",
      "date": 1686550232125
    },
    {
      "item": {
        "type": "factory",
        "id": "0b750c5c5d0b5af9"
      },
      "id": "0b750c5c5d0b5af9",
      "type": "add",
      "after": "58463f6be35e39d6",
      "date": 1686550233552
    },
    {
      "type": "edit",
      "id": "0b750c5c5d0b5af9",
      "item": {
        "type": "code",
        "id": "0b750c5c5d0b5af9",
        "text": "        Unknown unknownEvent ->\n            let\n                eventItem =\n                    unknownEvent.item\n                msg =\n                    SomeMsg -- Replace with the actual message you want to send to Main\n            in\n            Encode.object\n                [ ( \"type\", Encode.string \"unknown\" )\n                , ( \"item\", Encode.string eventItem ) -- Encode the item data as needed\n                , ( \"msg\", Encode.string msg ) -- Encode the message data as needed\n                ]\n"
      },
      "date": 1686550237803
    },
    {
      "type": "edit",
      "id": "58463f6be35e39d6",
      "item": {
        "type": "paragraph",
        "id": "58463f6be35e39d6",
        "text": "journalEncoder"
      },
      "date": 1686550254640
    },
    {
      "type": "edit",
      "id": "0b750c5c5d0b5af9",
      "item": {
        "type": "code",
        "id": "0b750c5c5d0b5af9",
        "text": "Unknown unknownEvent ->\n    let\n        eventItem =\n            unknownEvent.item\n        msg =\n            SomeMsg -- Replace with the actual message you want to send to Main\n    in\n    Encode.object\n        [ ( \"type\", Encode.string \"unknown\" )\n        , ( \"item\", Encode.string eventItem ) -- Encode the item data as needed\n        , ( \"msg\", Encode.string msg ) -- Encode the message data as needed\n        ]"
      },
      "date": 1686550277597
    },
    {
      "type": "edit",
      "id": "0b750c5c5d0b5af9",
      "item": {
        "type": "code",
        "id": "0b750c5c5d0b5af9",
        "text": "Unknown unknownEvent ->\n    let\n        eventItem =\n            unknownEvent.item\n        msg =\n            SomeMsg -- Replace with the actual message you want to send to Main\n    in\n    Encode.null"
      },
      "date": 1686550330950
    },
    {
      "item": {
        "type": "factory",
        "id": "ec77971e00dd5764"
      },
      "id": "ec77971e00dd5764",
      "type": "add",
      "after": "0b750c5c5d0b5af9",
      "date": 1686550500607
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "In the Msg type of Main.elm, you need to add a new variant to represent the message received from the journalEncoder function. Let's call it UnknownEventMsg:\n\n"
      },
      "date": 1686550502682
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "In the Msg type of Main.elm, you need to add a new variant to represent the message received from the journalEncoder function. Let's call it UnknownEventMsg: (ChatGPT May 24 Version)\n\n"
      },
      "date": 1686550511687
    },
    {
      "item": {
        "type": "factory",
        "id": "7688efbb9da26273"
      },
      "id": "7688efbb9da26273",
      "type": "add",
      "after": "ec77971e00dd5764",
      "date": 1686550515381
    },
    {
      "type": "edit",
      "id": "7688efbb9da26273",
      "item": {
        "type": "code",
        "id": "7688efbb9da26273",
        "text": "type Msg\n    = UpdateInput String\n    | ParseJson\n    | UnknownEventMsg String  -- Add this line to represent the message for Unknown events\n"
      },
      "date": 1686550517614
    },
    {
      "type": "edit",
      "id": "58463f6be35e39d6",
      "item": {
        "type": "paragraph",
        "id": "58463f6be35e39d6",
        "text": "journalEncoder:"
      },
      "date": 1686550523919
    },
    {
      "item": {
        "type": "factory",
        "id": "7517a93f063a20fd"
      },
      "id": "7517a93f063a20fd",
      "type": "add",
      "after": "7688efbb9da26273",
      "date": 1686550798085
    },
    {
      "type": "edit",
      "id": "7517a93f063a20fd",
      "item": {
        "type": "paragraph",
        "id": "7517a93f063a20fd",
        "text": "Here, String represents the data associated with the message. You can change it to the appropriate data type based on your needs."
      },
      "date": 1686550799477
    },
    {
      "item": {
        "type": "factory",
        "id": "aa5ba8b2d48dc6f3"
      },
      "id": "aa5ba8b2d48dc6f3",
      "type": "add",
      "after": "7517a93f063a20fd",
      "date": 1686550809026
    },
    {
      "type": "edit",
      "id": "aa5ba8b2d48dc6f3",
      "item": {
        "type": "paragraph",
        "id": "aa5ba8b2d48dc6f3",
        "text": "Next, in the update function, you need to handle the new UnknownEventMsg variant and perform the desired action when this message is received. For example, you can update the update function as follows:"
      },
      "date": 1686550810327
    },
    {
      "item": {
        "type": "factory",
        "id": "a456654e6db416d8"
      },
      "id": "a456654e6db416d8",
      "type": "add",
      "after": "aa5ba8b2d48dc6f3",
      "date": 1686550814898
    },
    {
      "type": "edit",
      "id": "a456654e6db416d8",
      "item": {
        "type": "paragraph",
        "id": "a456654e6db416d8",
        "text": "update : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        UpdateInput value ->\n            ( { model | input = value }, Cmd.none )\n\n        ParseJson ->\n            let\n                json =\n                    trim model.input\n\n                result =\n                    case Decode.decodeString Wiki.pageDecoder json of\n                        Ok value ->\n                            ( { model | parsedJson = Parsed value, output = Wiki.pageEncoder value |> Encode.encode 0 }, Cmd.none )\n\n                        Err _ ->\n                            ( { model | parsedJson = NotParsed, output = \"\" }, Cmd.none )\n            in\n            result\n\n        UnknownEventMsg eventData ->\n            -- Perform the action you want to take when an Unknown event message is received\n            -- For example, you can update the model or trigger some other side effect\n            ( model, Cmd.none )  -- Replace with the appropriate action\n\n"
      },
      "date": 1686550816128
    },
    {
      "item": {
        "type": "factory",
        "id": "ced23df335c78554"
      },
      "id": "ced23df335c78554",
      "type": "add",
      "after": "a456654e6db416d8",
      "date": 1686550825646
    },
    {
      "type": "edit",
      "id": "ced23df335c78554",
      "item": {
        "type": "code",
        "id": "ced23df335c78554",
        "text": "update : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        UpdateInput value ->\n            ( { model | input = value }, Cmd.none )\n\n        ParseJson ->\n            let\n                json =\n                    trim model.input\n\n                result =\n                    case Decode.decodeString Wiki.pageDecoder json of\n                        Ok value ->\n                            ( { model | parsedJson = Parsed value, output = Wiki.pageEncoder value |> Encode.encode 0 }, Cmd.none )\n\n                        Err _ ->\n                            ( { model | parsedJson = NotParsed, output = \"\" }, Cmd.none )\n            in\n            result\n\n        UnknownEventMsg eventData ->\n            -- Perform the action you want to take when an Unknown event message is received\n            -- For example, you can update the model or trigger some other side effect\n            ( model, Cmd.none )  -- Replace with the appropriate action\n\n"
      },
      "date": 1686550827591
    },
    {
      "type": "edit",
      "id": "ced23df335c78554",
      "item": {
        "type": "code",
        "id": "ced23df335c78554",
        "text": "update : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        UpdateInput value ->\n            ( { model | input = value }, Cmd.none )\n\n        ParseJson ->\n            […]\n\n        UnknownEventMsg eventData ->\n            -- Perform the action you want to take when an Unknown event message is received\n            -- For example, you can update the model or trigger some other side effect\n            ( model, Cmd.none )  -- Replace with the appropriate action\n\n"
      },
      "date": 1686550883071
    },
    {
      "item": {
        "type": "factory",
        "id": "b21fab6bd73ab4dc"
      },
      "id": "b21fab6bd73ab4dc",
      "type": "add",
      "after": "ced23df335c78554",
      "date": 1686550919678
    },
    {
      "type": "edit",
      "id": "b21fab6bd73ab4dc",
      "item": {
        "type": "paragraph",
        "id": "b21fab6bd73ab4dc",
        "text": "In this example, the UnknownEventMsg variant is handled, but you need to define the specific action you want to take when this message is received. Replace ( model, Cmd.none ) with the appropriate action based on your requirements."
      },
      "date": 1686550921299
    },
    {
      "item": {
        "type": "factory",
        "id": "885b9d997410fb09"
      },
      "id": "885b9d997410fb09",
      "type": "add",
      "after": "b21fab6bd73ab4dc",
      "date": 1686550931283
    },
    {
      "type": "edit",
      "id": "885b9d997410fb09",
      "item": {
        "type": "paragraph",
        "id": "885b9d997410fb09",
        "text": "By making these changes, you can handle the new message type in Main.elm and perform the desired action when an Unknown event is encountered during parsing."
      },
      "date": 1686550932677
    },
    {
      "type": "edit",
      "id": "0b750c5c5d0b5af9",
      "item": {
        "type": "code",
        "id": "0b750c5c5d0b5af9",
        "text": "eventDecoder : Decode.Decoder Event\neventDecoder =\n    Decode.oneOf\n        [ Decode.map Create createEventDecoder\n        , Decode.map Add addEventDecoder\n        , Decode.map Edit editEventDecoder\n        -- Add decoders for other journal event variants as needed\n        , Decode.andThen handleUnknownEvent Decode.value\n        ]\n\nhandleUnknownEvent : Decode.Value -> Decode.Decoder Event\nhandleUnknownEvent value =\n    case Decode.decodeValue Wiki.eventDecoder value of\n        Ok knownEvent ->\n            Decode.succeed (Unknown knownEvent)\n\n        Err _ ->\n            Decode.fail \"Unknown event\"\n\n"
      },
      "date": 1686556493737
    },
    {
      "type": "edit",
      "id": "58463f6be35e39d6",
      "item": {
        "type": "paragraph",
        "id": "58463f6be35e39d6",
        "text": "eventdecoder:"
      },
      "date": 1686556502781
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "In the Msg type of Main.elm, you need to add a new variant to represent the message received from the eventDecoder function. Let's call it UnknownEventMsg: (ChatGPT May 24 Version)\n\n"
      },
      "date": 1686556799055
    },
    {
      "type": "edit",
      "id": "0b750c5c5d0b5af9",
      "item": {
        "type": "code",
        "id": "0b750c5c5d0b5af9",
        "text": "eventDecoder : Decode.Decoder Event\neventDecoder =\n    Decode.oneOf\n        [ Decode.map Create createEventDecoder\n        , Decode.map Add addEventDecoder\n        , Decode.map Edit editEventDecoder\n        -- Add decoders for other journal event variants as needed\n        , Decode.andThen handleUnknownEvent Decode.value\n        ]\n\nhandleUnknownEvent : Decode.Value -> Decode.Decoder Event\nhandleUnknownEvent value =\n    case Decode.decodeValue eventDecoder value of\n        Ok knownEvent ->\n            Decode.fail \"Known event\"\n\n        Err _ ->\n            Decode.fail \"Unknown event\"\n\n"
      },
      "date": 1686559261020
    },
    {
      "type": "remove",
      "id": "a456654e6db416d8",
      "date": 1686559741286
    },
    {
      "type": "remove",
      "id": "58463f6be35e39d6",
      "date": 1686559947065
    },
    {
      "type": "remove",
      "id": "0b750c5c5d0b5af9",
      "date": 1686559948669
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "In the Msg type of Main.elm, I wand to add a new variant to represent the message received from the eventDecoder function. Let's call it UnknownEventMsg: (ChatGPT May 24 Version)\n\n"
      },
      "date": 1686559981238
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "In the Msg type of Main.elm, I wand to add a new variant to represent a to be created message received from the eventDecoder function in case of an Unknown event. "
      },
      "date": 1686560029916
    },
    {
      "type": "add",
      "id": "fa99ce5409748aca",
      "item": {
        "type": "paragraph",
        "id": "fa99ce5409748aca",
        "text": "Let's call it UnknownEventMsg: (ChatGPT May 24 Version)\n\n"
      },
      "after": "ec77971e00dd5764",
      "date": 1686560030556
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "In the Msg type of Main.elm I want to add a new variant to represent a message to be created by the eventDecoder function and received  by Main's update function in case of an Unknown event. "
      },
      "date": 1686560291729
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "⇒ [[Decode JSON in Elm]]: In the Msg type of Main.elm I want to add a new variant to represent a message to be created by the eventDecoder function and received  by Main's update function in case of an Unknown event. ⇒"
      },
      "date": 1686560359818
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "⇒ [[Decode JSON in Elm]]: In the Msg type of Main.elm I want to add a new variant to represent a message to be created by the eventDecoder function in case of an Unknown event and received  by Main's update function "
      },
      "date": 1686560524211
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "⇒ [[Decode JSON in Elm]]: In the Msg type of Main.elm I want to add a new variant to represent a message to be created by the eventDecoder function in case of an Unknown event and received by Main's update function "
      },
      "date": 1686560527891
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "⇒ [[Decode JSON in Elm]]: In the Msg type of Main.elm I want to add a new variant to represent a message to be created by the eventDecoder function in case of an Unknown event and received by Main's update function."
      },
      "date": 1686560532314
    },
    {
      "item": {
        "type": "factory",
        "id": "c3e8bfe1f9e31d7f"
      },
      "id": "c3e8bfe1f9e31d7f",
      "type": "add",
      "after": "885b9d997410fb09",
      "date": 1686566027521
    },
    {
      "type": "edit",
      "id": "c3e8bfe1f9e31d7f",
      "item": {
        "type": "paragraph",
        "id": "c3e8bfe1f9e31d7f",
        "text": "⇒ test(MainSpec): RED UnknownEventMsg _ "
      },
      "date": 1686566035051
    },
    {
      "type": "edit",
      "id": "c3e8bfe1f9e31d7f",
      "item": {
        "type": "paragraph",
        "id": "c3e8bfe1f9e31d7f",
        "text": "⇒ test(MainSpec): RED UnknownEventMsg _ [https://github.com/RalfBarkow/vite-elm-dojo/commit/fe18a0571e115037ea98aae19b6b6594ca51772d commit]"
      },
      "date": 1686566046001
    },
    {
      "type": "add",
      "id": "6a77497c8caf67a4",
      "item": {
        "type": "paragraph",
        "id": "6a77497c8caf67a4",
        "text": "> MainSpec still needs to be heavily reworked."
      },
      "after": "c3e8bfe1f9e31d7f",
      "date": 1686566057038
    },
    {
      "type": "edit",
      "id": "6a77497c8caf67a4",
      "item": {
        "type": "markdown",
        "id": "6a77497c8caf67a4",
        "text": "> MainSpec still needs to be heavily reworked."
      },
      "date": 1686566058054
    },
    {
      "item": {
        "type": "factory",
        "id": "6fbfdbfa312bcc1b"
      },
      "id": "6fbfdbfa312bcc1b",
      "type": "add",
      "after": "6a77497c8caf67a4",
      "date": 1686567757249
    },
    {
      "type": "edit",
      "id": "6fbfdbfa312bcc1b",
      "item": {
        "type": "pagefold",
        "id": "6fbfdbfa312bcc1b",
        "text": "~"
      },
      "date": 1686567761658
    },
    {
      "item": {
        "type": "factory",
        "id": "95078cab80f325b5"
      },
      "id": "95078cab80f325b5",
      "type": "add",
      "after": "6fbfdbfa312bcc1b",
      "date": 1686567771540
    },
    {
      "type": "edit",
      "id": "95078cab80f325b5",
      "item": {
        "type": "paragraph",
        "id": "95078cab80f325b5",
        "text": "⇒ [[Elm]]: "
      },
      "date": 1686567785021
    },
    {
      "type": "edit",
      "id": "95078cab80f325b5",
      "item": {
        "type": "paragraph",
        "id": "95078cab80f325b5",
        "text": "⇒ [[Elm]]: Setup toolchain"
      },
      "date": 1686567794908
    },
    {
      "item": {
        "type": "factory",
        "id": "169bb196ee92046d"
      },
      "id": "169bb196ee92046d",
      "type": "add",
      "after": "95078cab80f325b5",
      "date": 1686568014459
    },
    {
      "type": "edit",
      "id": "169bb196ee92046d",
      "item": {
        "type": "paragraph",
        "id": "169bb196ee92046d",
        "text": "https://github.com/nix-community/home-manager/pull/993 github"
      },
      "date": 1686568023787
    },
    {
      "item": {
        "type": "factory",
        "id": "1758597965721939"
      },
      "id": "1758597965721939",
      "type": "add",
      "after": "169bb196ee92046d",
      "date": 1686568031818
    },
    {
      "type": "edit",
      "id": "1758597965721939",
      "item": {
        "type": "code",
        "id": "1758597965721939",
        "text": "home-manager switch                                                      ~\nerror: attribute 'defaultOverridePriority' missing\n\n       at /Users/rgb/.nix-defexpr/channels/home-manager/modules/misc/nixpkgs.nix:134:25:\n\n          133|       # `_pkgs`, see https://github.com/nix-community/home-manager/pull/993\n          134|       pkgs = mkOverride modules.defaultOverridePriority _pkgs;\n             |                         ^\n          135|       pkgs_i686 =\n(use '--show-trace' to show detailed location information)"
      },
      "date": 1686568033248
    },
    {
      "id": "1758597965721939",
      "type": "move",
      "order": [
        "ec77971e00dd5764",
        "fa99ce5409748aca",
        "7688efbb9da26273",
        "7517a93f063a20fd",
        "aa5ba8b2d48dc6f3",
        "ced23df335c78554",
        "b21fab6bd73ab4dc",
        "885b9d997410fb09",
        "c3e8bfe1f9e31d7f",
        "6a77497c8caf67a4",
        "6fbfdbfa312bcc1b",
        "95078cab80f325b5",
        "1758597965721939",
        "169bb196ee92046d"
      ],
      "date": 1686568034689
    },
    {
      "type": "edit",
      "id": "169bb196ee92046d",
      "item": {
        "type": "paragraph",
        "id": "169bb196ee92046d",
        "text": "[https://github.com/nix-community/home-manager/pull/993 github]"
      },
      "date": 1686568041281
    },
    {
      "item": {
        "type": "factory",
        "id": "32ab72f7c48d47f8"
      },
      "id": "32ab72f7c48d47f8",
      "type": "add",
      "after": "169bb196ee92046d",
      "date": 1686568081730
    },
    {
      "type": "edit",
      "id": "32ab72f7c48d47f8",
      "item": {
        "type": "pagefold",
        "id": "32ab72f7c48d47f8",
        "text": "~"
      },
      "date": 1686568085792
    },
    {
      "id": "32ab72f7c48d47f8",
      "type": "move",
      "order": [
        "ec77971e00dd5764",
        "fa99ce5409748aca",
        "7688efbb9da26273",
        "7517a93f063a20fd",
        "aa5ba8b2d48dc6f3",
        "ced23df335c78554",
        "b21fab6bd73ab4dc",
        "885b9d997410fb09",
        "c3e8bfe1f9e31d7f",
        "6a77497c8caf67a4",
        "6fbfdbfa312bcc1b",
        "95078cab80f325b5",
        "32ab72f7c48d47f8",
        "1758597965721939",
        "169bb196ee92046d"
      ],
      "date": 1686568089149
    },
    {
      "item": {
        "type": "factory",
        "id": "7064cfc441fb02ce"
      },
      "id": "7064cfc441fb02ce",
      "type": "add",
      "after": "169bb196ee92046d",
      "date": 1686568092492
    },
    {
      "type": "edit",
      "id": "7064cfc441fb02ce",
      "item": {
        "type": "code",
        "id": "7064cfc441fb02ce",
        "text": " npm install -g elm-test"
      },
      "date": 1686568094369
    },
    {
      "id": "7064cfc441fb02ce",
      "type": "move",
      "order": [
        "ec77971e00dd5764",
        "fa99ce5409748aca",
        "7688efbb9da26273",
        "7517a93f063a20fd",
        "aa5ba8b2d48dc6f3",
        "ced23df335c78554",
        "b21fab6bd73ab4dc",
        "885b9d997410fb09",
        "c3e8bfe1f9e31d7f",
        "6a77497c8caf67a4",
        "6fbfdbfa312bcc1b",
        "95078cab80f325b5",
        "7064cfc441fb02ce",
        "32ab72f7c48d47f8",
        "1758597965721939",
        "169bb196ee92046d"
      ],
      "date": 1686568097689
    },
    {
      "type": "edit",
      "id": "7064cfc441fb02ce",
      "item": {
        "type": "code",
        "id": "7064cfc441fb02ce",
        "text": "npm install -g elm-test"
      },
      "date": 1686568103449
    },
    {
      "item": {
        "type": "factory",
        "id": "1189bbbcca342f82"
      },
      "id": "1189bbbcca342f82",
      "type": "add",
      "after": "169bb196ee92046d",
      "date": 1686568217517
    },
    {
      "type": "edit",
      "id": "1189bbbcca342f82",
      "item": {
        "type": "code",
        "id": "1189bbbcca342f82",
        "text": "npm install -g elm@latest"
      },
      "date": 1686568219496
    },
    {
      "id": "1189bbbcca342f82",
      "type": "move",
      "order": [
        "ec77971e00dd5764",
        "fa99ce5409748aca",
        "7688efbb9da26273",
        "7517a93f063a20fd",
        "aa5ba8b2d48dc6f3",
        "ced23df335c78554",
        "b21fab6bd73ab4dc",
        "885b9d997410fb09",
        "c3e8bfe1f9e31d7f",
        "6a77497c8caf67a4",
        "6fbfdbfa312bcc1b",
        "95078cab80f325b5",
        "1189bbbcca342f82",
        "7064cfc441fb02ce",
        "32ab72f7c48d47f8",
        "1758597965721939",
        "169bb196ee92046d"
      ],
      "date": 1686568222843
    },
    {
      "type": "edit",
      "id": "169bb196ee92046d",
      "item": {
        "type": "paragraph",
        "id": "169bb196ee92046d",
        "text": " nixpkgs: add indirection to _module.args.pkgs #993  [https://github.com/nix-community/home-manager/pull/993 github]"
      },
      "date": 1686568605406
    },
    {
      "item": {
        "type": "factory",
        "id": "7a095099025de9ad"
      },
      "id": "7a095099025de9ad",
      "type": "add",
      "after": "169bb196ee92046d",
      "date": 1686643141828
    },
    {
      "type": "edit",
      "id": "7a095099025de9ad",
      "item": {
        "type": "code",
        "id": "7a095099025de9ad",
        "text": "rgb@mbp-rgb>    home-manager switch                                               ~/Projects/RalfBarkow/vite-elm-dojo/tests\nzsh: command not found: home-manager"
      },
      "date": 1686643144397
    },
    {
      "type": "edit",
      "id": "7a095099025de9ad",
      "item": {
        "type": "code",
        "id": "7a095099025de9ad",
        "text": "rgb@mbp-rgb>    home-manager switch                                               \nzsh: command not found: home-manager"
      },
      "date": 1686643158293
    }
  ]
}