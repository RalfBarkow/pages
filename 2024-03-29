{
  "title": "2024-03-29",
  "story": [
    {
      "type": "paragraph",
      "id": "28673d138fb9949c",
      "text": "⇐ [[Unit Programming Language]]"
    },
    {
      "type": "video",
      "id": "309f5e245cb51d14",
      "text": "YOUTUBE vwknTfGVDq8\nLee Trout (2022-08-07)\n"
    },
    {
      "type": "paragraph",
      "id": "22267aa7dd01143e",
      "text": "[…] I found this thing called Unit visual programming uh visual program environment it's similar to node-red it's more futuristic looking it's really really cool so it's taken me a couple hours to figure out what's going on I've read some of the source code not that that really helped and I thought yeah I would just jump on a stream really quick maybe like a two minute stream to record and uh document what I figured out so maybe if somebody sees this I'll do this on YouTube too so if you're watching on YouTube thanks for watching um but you know just the getting started was really rough there were some sample gifts but there were no instructions so I thought I would just run through um what the uh interface is like and how it actually get started um I was already fooling around here and had made a flow so I'm just going to refresh the page and clear everything out here so we can just start from scratch so I've got the developer tools open here because I wasn't really sure the best way to see output but I did find a console log widget in here but when you first load the page this is what you see it's pretty sparse you see some tools over here if you hover over them the icons tell you various things so the top one is info you can access info by holding down Q on your keyboard the second one down is change I believe let's see is that ASDF f is change you can hold F down D for remove s for add a for data and then shift for the multi-select down here and then at the bottom here's where you have your palette or search bar where you can go and look and see everything that you can add to the stage here and there's the filter button here circle is related to unit things client platform unit things and square is related to input like UI elements again I'm not really sure what the intent is since there's not a lot of instruction but I was trying to think of like you know what are some simple things that I could test out and the first thing I tried to do is just how do you make some something console log out so you search in here so search for log then you click on it drops it here so everything kind of synthesizes in the center of the screen in this area and so you see there's a message and a log and so you can double click on this message and you'll get an input over here so if we type in four then hit enter it logs out four and that value disappears so it's consumed to that value 4 and it logged it out if you double click again and put that in quotes So now that's a string double click again we can put this uh in Brackets and you see it it's an array and then hopefully as you would expect and you're already ahead of me uh you can do curlies and you can create an actual object so that's how I got started okay so I can log things out I can put data types in through this input by double clicking on on one of these node inputs and I thought where's somewhere that I can you know store this something more than console log"
    },
    {
      "type": "paragraph",
      "id": "6941adeaee894f25",
      "text": "localStorage"
    },
    {
      "type": "paragraph",
      "id": "d0f17bdc00804723",
      "text": "(3:18) so I typed in storage there's tab storage session storage local storage uh we'll just play around with local storage so you you get local storage out here and I'm just clicking and dragging these things around so I'm going to hold down Q on my keyboard and if you'll notice here on the left the info widget lights up so now when I hover over this by holding Q you get a little more information about this unit so it persist add-on local storage and if we hover over this one print log on the console and notice it's got little tie pins over these pins I don't know you know if the author of this is going to add more information in some cases you will get explicit type information so if it must be a string you'll see that it's a string um so the a generic type I think it just means they can take anything but you will see any referenced as well so I'm not sure the difference there when any is used versus the a in the greater than less than sign but anyway so you have local storage so I don't know how to do anything with local storage so I started looking around like what is local storage platform API and so then you can search for platform is it platform I found it or API but I was able to um search for one of these and I found some stuff digging around um and I'll just jump to it basically there is a set and there's two set methods they're set on an object and then they're a set on a platform method object so I'm going to uh we'll synthesize both of these and so we can compare the difference so a set on a platform object again we hold q and pull this up it'll set unit property name to data and this takes a unit uh with a type of J and then set here on an object is different this has a key value and an obj object we hover over this you can see that's actual object keys can be numbers for Strings value can be any um so when you click on something that you want to connect it will actually show you what you can plug this into so you get a little green circle on uh valid pins so we can say I want to set on local storage some key and we'll just use the key Foo and then I want to set some value and we'll set it to the stream bar so same behavior that I experienced before those values get consumed we do see something some log message over here but let's go refresh our uh local storage here and you can see Foo is set to bar so the next little Adventure on is like if these are constantly consuming these values how do I hang on to a value and sure enough if you search for constant you can see that you have this constant it says F control if you look at the source code in system it's in the git repo and I can I can search for it and pull up in just a second you can go and look at these functions but the source code didn't make a lot of sense to me but you can take us a constant value here and so I can set this to our key Foo you can see it just outputs Foo and I can hook that up to name and now when I plug in a new piece of data blah then the data gets consumed but the key hangs around so I was like that's pretty cool how do I get some sort of data that changes and so I started looking around so I found this input and there's a name and a unit and you get a pen and that didn't didn't really help me there either if you keep looking for input you can find text input and so text input I tried playing around with this and I was like okay you type in Fubar how do I do something with this value you can't connect it to anything so notice when I'm clicking it doesn't light up as green so you have to find something that'll convert this input widget to a value and I found that with on watch the search is kind of buggy I think yeah watch watch change and if you if you look when it synthesizes it shows you there's a watch change which will take an element and produce a value and there's watch input which will take an element produce a value so I'm just going to try watch change I don't remember what I had done before but now when I click on this element you can see oh yeah you can you can connect those so connect here have my text input Fubar and then value comes out as Fubar and now I can plug this into Data and let's refresh over here and so we see the value is set to foobar if I change this input now double clicking to activate it and we'll say hello world if you caught that I don't know if the frame rate's quick enough on the recording this this chain flashed yellow so this chain that's currently gray these links here are they flash yellow it's going to show you that that flow activated and executed and so now it can refresh over here and we can see Hello World and so I'm gonna hold down D and clear up my canvas here just to delete some of the stuff um or probably needed that console log let me grab that back so then I was like okay well if I have a value in here how can I read a value back out so I have Foo is the key this text input is changing the value and it's sitting in local storage how can I get this value out of local storage so the same as set there's a get platform method and we can connect local storage to that unit and we can connect to this constant to the name and now we can see the value comes out hello world which is good and we can actually hook that up to console log here and that'll fire and we see Hello World so now if I change this goodbye world and hit enter these this flash you probably didn't see it on the stream and then we get the log uh goodbye world is this evaluated we can refresh up here goodbye world and I ran into a situation where it wasn't always updating the output as well so if it changed us to goodbye um and so then I started playing around like if I wanted these to be completely disconnected so if I didn't want this to fire every time I updated storage uh here there was another node in here called a delay which was pretty cool so you can come into delay and set up some number of milliseconds I can say every 500 milliseconds I want to emit some value and so every 500 milliseconds I can actually emit the constant Foo and then I can run with a different copy of local storage and a different copy of get oops yeah let's just get I keep wanting to say get value so with a completely different copy of local storage here uh this every 500 milliseconds is going to Output Foo and then that will cause this to execute and I can get this value goodbye and once again we could plug this into a console log here and then we should start seeing do I set that up right oh uh our delay got consumed yes of course it did uh once again we need a constant uh here so we'll just say 500 for 500 milliseconds and that'll give us a constant input into this delay and now what are we missing let's see 500 milliseconds comes into the delay maybe I should split these apart Let's uh let's unhook this just so we can see this separate flow so I'm just holding down D and clicking on things to delete them so 500 milliseconds comes in a constant here goes into our delay so that'll prevent that from being consumed by the delay and I think I deleted the value on the delay I'm not sure how you get pins back so I've messed up that delay so let's get a delay back here there we go so we want the output of the delay to go into the name and then here our constant will give us 500 milliseconds and let's just go ahead and do another constant instead of sharing the other one oops double click on that so we can add the food string and we'll plug that in here and so now it's pulsing and so we are we have a get from local storage that is running and then let's um let's delete the get here really quick let's set this up again because I think I lost another node when I disconnected those um so I want to get oops that's the object get wrong one hold down D there get platform method there we go so local storage get Foo value goodbye and then up here we say hello again so we should see this update after uh half a second in five more milliseconds oh maybe I still don't have it wired upright that's what I was playing with before I jumped on the stream now and I thought oh I'm going to stream this because it's pretty cool the delay runs uh it outputs this value but I may still have something not not set up right the life's number string outputs a string plug that into get value here let's throw that onto a console log because maybe it just realizes there's no drain on this and it's not actually doing anything there it is yep so that's pretty cool too so however these flows get evaluated um they detect that there's no output there and so I had to actually have that drain into something so that's pretty cool but there's all kinds of stuff in here there's uh for loops and things you kind of have to figure out what to search for and look around in here but I may dig through the source code and figure out how to make an index of this and maybe generate some additional documentation because I find the whole concept of this platform very fascinating yeah so just over the foo bar and then that runs yeah anyways that was that so just a short stream uh just showing off uh unit since I O U N dot i t and it was just unit flow programming and figure out how to uh maybe add show notes um on well I can certainly put a …"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2024-03-29",
        "story": []
      },
      "date": 1711722203209
    },
    {
      "item": {
        "type": "factory",
        "id": "edd911a71ace52f2"
      },
      "id": "edd911a71ace52f2",
      "type": "add",
      "date": 1711722204813
    },
    {
      "type": "edit",
      "id": "edd911a71ace52f2",
      "item": {
        "type": "pagefold",
        "id": "edd911a71ace52f2",
        "text": "YOUTUBE vwknTfGVDq8"
      },
      "date": 1711722221394
    },
    {
      "item": {
        "type": "factory",
        "id": "309f5e245cb51d14"
      },
      "id": "309f5e245cb51d14",
      "type": "add",
      "after": "edd911a71ace52f2",
      "date": 1711722541021
    },
    {
      "type": "edit",
      "id": "22267aa7dd01143e",
      "item": {
        "type": "paragraph",
        "id": "22267aa7dd01143e",
        "text": "oh Zoo camera only here I doubt anybody's gonna drop in here but using this instead of loom just to um record a quick demo I found this thing called Unit visual programming uh visual program environment it's similar to node-red it's more futuristic looking it's really really cool so it's taken me a couple hours to figure out what's going on I've read some of the source code not that that really helped and I thought yeah I would just jump on a stream really quick maybe like a two minute stream to record and uh document what I figured out so maybe if somebody sees this I'll do this on YouTube too so if you're watching on YouTube thanks for watching um but you know just the getting started was really rough there were some sample gifts but there were no instructions so I thought I would just run through um what the uh interface is like and how it actually get started um I was already fooling around here and had made a flow so I'm just going to refresh the page and clear everything out here so we can just start from scratch so I've got the developer tools open here because I wasn't really sure the best way to see output but I did find a console log widget in here but when you first load the page this is what you see it's pretty sparse you see some tools over here if you hover over them the icons tell you various things so the top one is info you can access info by holding down Q on your keyboard the second one down is change I believe let's see is that ASDF f is change you can hold F down D for remove s for add a for data and then shift for the multi-select down here and then at the bottom here's where you have your palette or search bar where you can go and look and see everything that you can add to the stage here and there's the filter button here circle is related to unit things client platform unit things and square is related to input like UI elements again I'm not really sure what the intent is since there's not a lot of instruction but I was trying to think of like you know what are some simple things that I could test out and the first thing I tried to do is just how do you make some something console log out so you search in here so search for log then you click on it drops it here so everything kind of synthesizes in the center of the screen in this area and so you see there's a message and a log and so you can double click on this message and you'll get an input over here so if we type in four then hit enter it logs out four and that value disappears so it's consumed to that value 4 and it logged it out if you double click again and put that in quotes So now that's a string double click again we can put this uh in Brackets and you see it it's an array and then hopefully as you would expect and you're already ahead of me uh you can do curlies and you can create an actual object so that's how I got started okay so I can log things out I can put data types in through this input by double clicking on on one of these node inputs and I thought where's somewhere that I can you know store this something more than console log so I typed in storage there's tab storage session storage local storage uh we'll just play around with local storage so you you get local storage out here and I'm just clicking and dragging these things around so I'm going to hold down Q on my keyboard and if you'll notice here on the left the info widget lights up so now when I hover over this by holding Q you get a little more information about this unit so it persist add-on local storage and if we hover over this one print log on the console and notice it's got little tie pins over these pins I don't know you know if the author of this is going to add more information in some cases you will get explicit type information so if it must be a string you'll see that it's a string um so the a generic type I think it just means they can take anything but you will see any referenced as well so I'm not sure the difference there when any is used versus the a in the greater than less than sign but anyway so you have local storage so I don't know how to do anything with local storage so I started looking around like what is local storage platform API and so then you can search for platform is it platform I found it or API but I was able to um search for one of these and I found some stuff digging around um and I'll just jump to it basically there is a set and there's two set methods they're set on an object and then they're a set on a platform method object so I'm going to uh we'll synthesize both of these and so we can compare the difference so a set on a platform object again we hold q and pull this up it'll set unit property name to data and this takes a unit uh with a type of J and then set here on an object is different this has a key value and an obj object we hover over this you can see that's actual object keys can be numbers for Strings value can be any um so when you click on something that you want to connect it will actually show you what you can plug this into so you get a little green circle on uh valid pins so we can say I want to set on local storage some key and we'll just use the key Foo and then I want to set some value and we'll set it to the stream bar so same behavior that I experienced before those values get consumed we do see something some log message over here but let's go refresh our uh local storage here and you can see Foo is set to bar so the next little Adventure on is like if these are constantly consuming these values how do I hang on to a value and sure enough if you search for constant you can see that you have this constant it says F control if you look at the source code in system it's in the git repo and I can I can search for it and pull up in just a second you can go and look at these functions but the source code didn't make a lot of sense to me but you can take us a constant value here and so I can set this to our key Foo you can see it just outputs Foo and I can hook that up to name and now when I plug in a new piece of data blah then the data gets consumed but the key hangs around so I was like that's pretty cool how do I get some sort of data that changes and so I started looking around so I found this input and there's a name and a unit and you get a pen and that didn't didn't really help me there either if you keep looking for input you can find text input and so text input I tried playing around with this and I was like okay you type in Fubar how do I do something with this value you can't connect it to anything so notice when I'm clicking it doesn't light up as green so you have to find something that'll convert this input widget to a value and I found that with on watch the search is kind of buggy I think yeah watch watch change and if you if you look when it synthesizes it shows you there's a watch change which will take an element and produce a value and there's watch input which will take an element produce a value so I'm just going to try watch change I don't remember what I had done before but now when I click on this element you can see oh yeah you can you can connect those so connect here have my text input Fubar and then value comes out as Fubar and now I can plug this into Data and let's refresh over here and so we see the value is set to foobar if I change this input now double clicking to activate it and we'll say hello world if you caught that I don't know if the frame rate's quick enough on the recording this this chain flashed yellow so this chain that's currently gray these links here are they flash yellow it's going to show you that that flow activated and executed and so now it can refresh over here and we can see Hello World and so I'm gonna hold down D and clear up my canvas here just to delete some of the stuff um or probably needed that console log let me grab that back so then I was like okay well if I have a value in here how can I read a value back out so I have Foo is the key this text input is changing the value and it's sitting in local storage how can I get this value out of local storage so the same as set there's a get platform method and we can connect local storage to that unit and we can connect to this constant to the name and now we can see the value comes out hello world which is good and we can actually hook that up to console log here and that'll fire and we see Hello World so now if I change this goodbye world and hit enter these this flash you probably didn't see it on the stream and then we get the log uh goodbye world is this evaluated we can refresh up here goodbye world and I ran into a situation where it wasn't always updating the output as well so if it changed us to goodbye um and so then I started playing around like if I wanted these to be completely disconnected so if I didn't want this to fire every time I updated storage uh here there was another node in here called a delay which was pretty cool so you can come into delay and set up some number of milliseconds I can say every 500 milliseconds I want to emit some value and so every 500 milliseconds I can actually emit the constant Foo and then I can run with a different copy of local storage and a different copy of get oops yeah let's just get I keep wanting to say get value so with a completely different copy of local storage here uh this every 500 milliseconds is going to Output Foo and then that will cause this to execute and I can get this value goodbye and once again we could plug this into a console log here and then we should start seeing do I set that up right oh uh our delay got consumed yes of course it did uh once again we need a constant uh here so we'll just say 500 for 500 milliseconds and that'll give us a constant input into this delay and now what are we missing let's see 500 milliseconds comes into the delay maybe I should split these apart Let's uh let's unhook this just so we can see this separate flow so I'm just holding down D and clicking on things to delete them so 500 milliseconds comes in a constant here goes into our delay so that'll prevent that from being consumed by the delay and I think I deleted the value on the delay I'm not sure how you get pins back so I've messed up that delay so let's get a delay back here there we go so we want the output of the delay to go into the name and then here our constant will give us 500 milliseconds and let's just go ahead and do another constant instead of sharing the other one oops double click on that so we can add the food string and we'll plug that in here and so now it's pulsing and so we are we have a get from local storage that is running and then let's um let's delete the get here really quick let's set this up again because I think I lost another node when I disconnected those um so I want to get oops that's the object get wrong one hold down D there get platform method there we go so local storage get Foo value goodbye and then up here we say hello again so we should see this update after uh half a second in five more milliseconds oh maybe I still don't have it wired upright that's what I was playing with before I jumped on the stream now and I thought oh I'm going to stream this because it's pretty cool the delay runs uh it outputs this value but I may still have something not not set up right the life's number string outputs a string plug that into get value here let's throw that onto a console log because maybe it just realizes there's no drain on this and it's not actually doing anything there it is yep so that's pretty cool too so however these flows get evaluated um they detect that there's no output there and so I had to actually have that drain into something so that's pretty cool but there's all kinds of stuff in here there's uh for loops and things you kind of have to figure out what to search for and look around in here but I may dig through the source code and figure out how to make an index of this and maybe generate some additional documentation because I find the whole concept of this platform very fascinating yeah so just over the foo bar and then that runs yeah anyways that was that so just a short stream uh just showing off uh unit since I O U N dot i t and it was just unit flow programming and figure out how to uh maybe add show notes um on well I can certainly put a YouTube"
      },
      "date": 1711722546666
    },
    {
      "type": "remove",
      "id": "edd911a71ace52f2",
      "date": 1711722549901
    },
    {
      "type": "edit",
      "id": "309f5e245cb51d14",
      "item": {
        "type": "video",
        "id": "309f5e245cb51d14",
        "text": "YOUTUBE vwknTfGVDq8"
      },
      "date": 1711722552328
    },
    {
      "type": "fork",
      "date": 1711722972841
    },
    {
      "type": "edit",
      "id": "22267aa7dd01143e",
      "item": {
        "type": "paragraph",
        "id": "22267aa7dd01143e",
        "text": "oh Zoo camera only here I doubt anybody's gonna drop in here but using this instead of loom just to um record a quick demo I found this thing called Unit visual programming uh visual program environment it's similar to node-red it's more futuristic looking it's really really cool so it's taken me a couple hours to figure out what's going on I've read some of the source code not that that really helped and I thought yeah I would just jump on a stream really quick maybe like a two minute stream to record and uh document what I figured out so maybe if somebody sees this I'll do this on YouTube too so if you're watching on YouTube thanks for watching um but you know just the getting started was really rough there were some sample gifts but there were no instructions so I thought I would just run through um what the uh interface is like and how it actually get started um I was already fooling around here and had made a flow so I'm just going to refresh the page and clear everything out here so we can just start from scratch so I've got the developer tools open here because I wasn't really sure the best way to see output but I did find a console log widget in here but when you first load the page this is what you see it's pretty sparse you see some tools over here if you hover over them the icons tell you various things so the top one is info you can access info by holding down Q on your keyboard the second one down is change I believe let's see is that ASDF f is change you can hold F down D for remove s for add a for data and then shift for the multi-select down here and then at the bottom here's where you have your palette or search bar where you can go and look and see everything that you can add to the stage here and there's the filter button here circle is related to unit things client platform unit things and square is related to input like UI elements again I'm not really sure what the intent is since there's not a lot of instruction but I was trying to think of like you know what are some simple things that I could test out and the first thing I tried to do is just how do you make some something console log out so you search in here so search for log then you click on it drops it here so everything kind of synthesizes in the center of the screen in this area and so you see there's a message and a log and so you can double click on this message and you'll get an input over here so if we type in four then hit enter it logs out four and that value disappears so it's consumed to that value 4 and it logged it out if you double click again and put that in quotes So now that's a string double click again we can put this uh in Brackets and you see it it's an array and then hopefully as you would expect and you're already ahead of me uh you can do curlies and you can create an actual object so that's how I got started okay so I can log things out I can put data types in through this input by double clicking on on one of these node inputs and I thought where's somewhere that I can you know store this something more than console log"
      },
      "date": 1711722996579
    },
    {
      "type": "add",
      "id": "d0f17bdc00804723",
      "item": {
        "type": "paragraph",
        "id": "d0f17bdc00804723",
        "text": "so I typed in storage there's tab storage session storage local storage uh we'll just play around with local storage so you you get local storage out here and I'm just clicking and dragging these things around so I'm going to hold down Q on my keyboard and if you'll notice here on the left the info widget lights up so now when I hover over this by holding Q you get a little more information about this unit so it persist add-on local storage and if we hover over this one print log on the console and notice it's got little tie pins over these pins I don't know you know if the author of this is going to add more information in some cases you will get explicit type information so if it must be a string you'll see that it's a string um so the a generic type I think it just means they can take anything but you will see any referenced as well so I'm not sure the difference there when any is used versus the a in the greater than less than sign but anyway so you have local storage so I don't know how to do anything with local storage so I started looking around like what is local storage platform API and so then you can search for platform is it platform I found it or API but I was able to um search for one of these and I found some stuff digging around um and I'll just jump to it basically there is a set and there's two set methods they're set on an object and then they're a set on a platform method object so I'm going to uh we'll synthesize both of these and so we can compare the difference so a set on a platform object again we hold q and pull this up it'll set unit property name to data and this takes a unit uh with a type of J and then set here on an object is different this has a key value and an obj object we hover over this you can see that's actual object keys can be numbers for Strings value can be any um so when you click on something that you want to connect it will actually show you what you can plug this into so you get a little green circle on uh valid pins so we can say I want to set on local storage some key and we'll just use the key Foo and then I want to set some value and we'll set it to the stream bar so same behavior that I experienced before those values get consumed we do see something some log message over here but let's go refresh our uh local storage here and you can see Foo is set to bar so the next little Adventure on is like if these are constantly consuming these values how do I hang on to a value and sure enough if you search for constant you can see that you have this constant it says F control if you look at the source code in system it's in the git repo and I can I can search for it and pull up in just a second you can go and look at these functions but the source code didn't make a lot of sense to me but you can take us a constant value here and so I can set this to our key Foo you can see it just outputs Foo and I can hook that up to name and now when I plug in a new piece of data blah then the data gets consumed but the key hangs around so I was like that's pretty cool how do I get some sort of data that changes and so I started looking around so I found this input and there's a name and a unit and you get a pen and that didn't didn't really help me there either if you keep looking for input you can find text input and so text input I tried playing around with this and I was like okay you type in Fubar how do I do something with this value you can't connect it to anything so notice when I'm clicking it doesn't light up as green so you have to find something that'll convert this input widget to a value and I found that with on watch the search is kind of buggy I think yeah watch watch change and if you if you look when it synthesizes it shows you there's a watch change which will take an element and produce a value and there's watch input which will take an element produce a value so I'm just going to try watch change I don't remember what I had done before but now when I click on this element you can see oh yeah you can you can connect those so connect here have my text input Fubar and then value comes out as Fubar and now I can plug this into Data and let's refresh over here and so we see the value is set to foobar if I change this input now double clicking to activate it and we'll say hello world if you caught that I don't know if the frame rate's quick enough on the recording this this chain flashed yellow so this chain that's currently gray these links here are they flash yellow it's going to show you that that flow activated and executed and so now it can refresh over here and we can see Hello World and so I'm gonna hold down D and clear up my canvas here just to delete some of the stuff um or probably needed that console log let me grab that back so then I was like okay well if I have a value in here how can I read a value back out so I have Foo is the key this text input is changing the value and it's sitting in local storage how can I get this value out of local storage so the same as set there's a get platform method and we can connect local storage to that unit and we can connect to this constant to the name and now we can see the value comes out hello world which is good and we can actually hook that up to console log here and that'll fire and we see Hello World so now if I change this goodbye world and hit enter these this flash you probably didn't see it on the stream and then we get the log uh goodbye world is this evaluated we can refresh up here goodbye world and I ran into a situation where it wasn't always updating the output as well so if it changed us to goodbye um and so then I started playing around like if I wanted these to be completely disconnected so if I didn't want this to fire every time I updated storage uh here there was another node in here called a delay which was pretty cool so you can come into delay and set up some number of milliseconds I can say every 500 milliseconds I want to emit some value and so every 500 milliseconds I can actually emit the constant Foo and then I can run with a different copy of local storage and a different copy of get oops yeah let's just get I keep wanting to say get value so with a completely different copy of local storage here uh this every 500 milliseconds is going to Output Foo and then that will cause this to execute and I can get this value goodbye and once again we could plug this into a console log here and then we should start seeing do I set that up right oh uh our delay got consumed yes of course it did uh once again we need a constant uh here so we'll just say 500 for 500 milliseconds and that'll give us a constant input into this delay and now what are we missing let's see 500 milliseconds comes into the delay maybe I should split these apart Let's uh let's unhook this just so we can see this separate flow so I'm just holding down D and clicking on things to delete them so 500 milliseconds comes in a constant here goes into our delay so that'll prevent that from being consumed by the delay and I think I deleted the value on the delay I'm not sure how you get pins back so I've messed up that delay so let's get a delay back here there we go so we want the output of the delay to go into the name and then here our constant will give us 500 milliseconds and let's just go ahead and do another constant instead of sharing the other one oops double click on that so we can add the food string and we'll plug that in here and so now it's pulsing and so we are we have a get from local storage that is running and then let's um let's delete the get here really quick let's set this up again because I think I lost another node when I disconnected those um so I want to get oops that's the object get wrong one hold down D there get platform method there we go so local storage get Foo value goodbye and then up here we say hello again so we should see this update after uh half a second in five more milliseconds oh maybe I still don't have it wired upright that's what I was playing with before I jumped on the stream now and I thought oh I'm going to stream this because it's pretty cool the delay runs uh it outputs this value but I may still have something not not set up right the life's number string outputs a string plug that into get value here let's throw that onto a console log because maybe it just realizes there's no drain on this and it's not actually doing anything there it is yep so that's pretty cool too so however these flows get evaluated um they detect that there's no output there and so I had to actually have that drain into something so that's pretty cool but there's all kinds of stuff in here there's uh for loops and things you kind of have to figure out what to search for and look around in here but I may dig through the source code and figure out how to make an index of this and maybe generate some additional documentation because I find the whole concept of this platform very fascinating yeah so just over the foo bar and then that runs yeah anyways that was that so just a short stream uh just showing off uh unit since I O U N dot i t and it was just unit flow programming and figure out how to uh maybe add show notes um on well I can certainly put a YouTube"
      },
      "after": "22267aa7dd01143e",
      "date": 1711722997261
    },
    {
      "type": "edit",
      "id": "d0f17bdc00804723",
      "item": {
        "type": "paragraph",
        "id": "d0f17bdc00804723",
        "text": "(3:18) so I typed in storage there's tab storage session storage local storage uh we'll just play around with local storage so you you get local storage out here and I'm just clicking and dragging these things around so I'm going to hold down Q on my keyboard and if you'll notice here on the left the info widget lights up so now when I hover over this by holding Q you get a little more information about this unit so it persist add-on local storage and if we hover over this one print log on the console and notice it's got little tie pins over these pins I don't know you know if the author of this is going to add more information in some cases you will get explicit type information so if it must be a string you'll see that it's a string um so the a generic type I think it just means they can take anything but you will see any referenced as well so I'm not sure the difference there when any is used versus the a in the greater than less than sign but anyway so you have local storage so I don't know how to do anything with local storage so I started looking around like what is local storage platform API and so then you can search for platform is it platform I found it or API but I was able to um search for one of these and I found some stuff digging around um and I'll just jump to it basically there is a set and there's two set methods they're set on an object and then they're a set on a platform method object so I'm going to uh we'll synthesize both of these and so we can compare the difference so a set on a platform object again we hold q and pull this up it'll set unit property name to data and this takes a unit uh with a type of J and then set here on an object is different this has a key value and an obj object we hover over this you can see that's actual object keys can be numbers for Strings value can be any um so when you click on something that you want to connect it will actually show you what you can plug this into so you get a little green circle on uh valid pins so we can say I want to set on local storage some key and we'll just use the key Foo and then I want to set some value and we'll set it to the stream bar so same behavior that I experienced before those values get consumed we do see something some log message over here but let's go refresh our uh local storage here and you can see Foo is set to bar so the next little Adventure on is like if these are constantly consuming these values how do I hang on to a value and sure enough if you search for constant you can see that you have this constant it says F control if you look at the source code in system it's in the git repo and I can I can search for it and pull up in just a second you can go and look at these functions but the source code didn't make a lot of sense to me but you can take us a constant value here and so I can set this to our key Foo you can see it just outputs Foo and I can hook that up to name and now when I plug in a new piece of data blah then the data gets consumed but the key hangs around so I was like that's pretty cool how do I get some sort of data that changes and so I started looking around so I found this input and there's a name and a unit and you get a pen and that didn't didn't really help me there either if you keep looking for input you can find text input and so text input I tried playing around with this and I was like okay you type in Fubar how do I do something with this value you can't connect it to anything so notice when I'm clicking it doesn't light up as green so you have to find something that'll convert this input widget to a value and I found that with on watch the search is kind of buggy I think yeah watch watch change and if you if you look when it synthesizes it shows you there's a watch change which will take an element and produce a value and there's watch input which will take an element produce a value so I'm just going to try watch change I don't remember what I had done before but now when I click on this element you can see oh yeah you can you can connect those so connect here have my text input Fubar and then value comes out as Fubar and now I can plug this into Data and let's refresh over here and so we see the value is set to foobar if I change this input now double clicking to activate it and we'll say hello world if you caught that I don't know if the frame rate's quick enough on the recording this this chain flashed yellow so this chain that's currently gray these links here are they flash yellow it's going to show you that that flow activated and executed and so now it can refresh over here and we can see Hello World and so I'm gonna hold down D and clear up my canvas here just to delete some of the stuff um or probably needed that console log let me grab that back so then I was like okay well if I have a value in here how can I read a value back out so I have Foo is the key this text input is changing the value and it's sitting in local storage how can I get this value out of local storage so the same as set there's a get platform method and we can connect local storage to that unit and we can connect to this constant to the name and now we can see the value comes out hello world which is good and we can actually hook that up to console log here and that'll fire and we see Hello World so now if I change this goodbye world and hit enter these this flash you probably didn't see it on the stream and then we get the log uh goodbye world is this evaluated we can refresh up here goodbye world and I ran into a situation where it wasn't always updating the output as well so if it changed us to goodbye um and so then I started playing around like if I wanted these to be completely disconnected so if I didn't want this to fire every time I updated storage uh here there was another node in here called a delay which was pretty cool so you can come into delay and set up some number of milliseconds I can say every 500 milliseconds I want to emit some value and so every 500 milliseconds I can actually emit the constant Foo and then I can run with a different copy of local storage and a different copy of get oops yeah let's just get I keep wanting to say get value so with a completely different copy of local storage here uh this every 500 milliseconds is going to Output Foo and then that will cause this to execute and I can get this value goodbye and once again we could plug this into a console log here and then we should start seeing do I set that up right oh uh our delay got consumed yes of course it did uh once again we need a constant uh here so we'll just say 500 for 500 milliseconds and that'll give us a constant input into this delay and now what are we missing let's see 500 milliseconds comes into the delay maybe I should split these apart Let's uh let's unhook this just so we can see this separate flow so I'm just holding down D and clicking on things to delete them so 500 milliseconds comes in a constant here goes into our delay so that'll prevent that from being consumed by the delay and I think I deleted the value on the delay I'm not sure how you get pins back so I've messed up that delay so let's get a delay back here there we go so we want the output of the delay to go into the name and then here our constant will give us 500 milliseconds and let's just go ahead and do another constant instead of sharing the other one oops double click on that so we can add the food string and we'll plug that in here and so now it's pulsing and so we are we have a get from local storage that is running and then let's um let's delete the get here really quick let's set this up again because I think I lost another node when I disconnected those um so I want to get oops that's the object get wrong one hold down D there get platform method there we go so local storage get Foo value goodbye and then up here we say hello again so we should see this update after uh half a second in five more milliseconds oh maybe I still don't have it wired upright that's what I was playing with before I jumped on the stream now and I thought oh I'm going to stream this because it's pretty cool the delay runs uh it outputs this value but I may still have something not not set up right the life's number string outputs a string plug that into get value here let's throw that onto a console log because maybe it just realizes there's no drain on this and it's not actually doing anything there it is yep so that's pretty cool too so however these flows get evaluated um they detect that there's no output there and so I had to actually have that drain into something so that's pretty cool but there's all kinds of stuff in here there's uh for loops and things you kind of have to figure out what to search for and look around in here but I may dig through the source code and figure out how to make an index of this and maybe generate some additional documentation because I find the whole concept of this platform very fascinating yeah so just over the foo bar and then that runs yeah anyways that was that so just a short stream uh just showing off uh unit since I O U N dot i t and it was just unit flow programming and figure out how to uh maybe add show notes um on well I can certainly put a YouTube"
      },
      "date": 1711723130651
    },
    {
      "type": "edit",
      "id": "309f5e245cb51d14",
      "item": {
        "type": "video",
        "id": "309f5e245cb51d14",
        "text": "YOUTUBE vwknTfGVDq8\n Lee Trout\n"
      },
      "date": 1711723834128
    },
    {
      "type": "edit",
      "id": "309f5e245cb51d14",
      "item": {
        "type": "video",
        "id": "309f5e245cb51d14",
        "text": "YOUTUBE vwknTfGVDq8\nLee Trout\n"
      },
      "date": 1711723839638
    },
    {
      "id": "28673d138fb9949c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "28673d138fb9949c",
        "text": "⇐ [[Unit Programming Language]]"
      },
      "attribution": {
        "page": "scratch"
      },
      "date": 1711723903696
    },
    {
      "type": "edit",
      "id": "22267aa7dd01143e",
      "item": {
        "type": "paragraph",
        "id": "22267aa7dd01143e",
        "text": "[…] I found this thing called Unit visual programming uh visual program environment it's similar to node-red it's more futuristic looking it's really really cool so it's taken me a couple hours to figure out what's going on I've read some of the source code not that that really helped and I thought yeah I would just jump on a stream really quick maybe like a two minute stream to record and uh document what I figured out so maybe if somebody sees this I'll do this on YouTube too so if you're watching on YouTube thanks for watching um but you know just the getting started was really rough there were some sample gifts but there were no instructions so I thought I would just run through um what the uh interface is like and how it actually get started um I was already fooling around here and had made a flow so I'm just going to refresh the page and clear everything out here so we can just start from scratch so I've got the developer tools open here because I wasn't really sure the best way to see output but I did find a console log widget in here but when you first load the page this is what you see it's pretty sparse you see some tools over here if you hover over them the icons tell you various things so the top one is info you can access info by holding down Q on your keyboard the second one down is change I believe let's see is that ASDF f is change you can hold F down D for remove s for add a for data and then shift for the multi-select down here and then at the bottom here's where you have your palette or search bar where you can go and look and see everything that you can add to the stage here and there's the filter button here circle is related to unit things client platform unit things and square is related to input like UI elements again I'm not really sure what the intent is since there's not a lot of instruction but I was trying to think of like you know what are some simple things that I could test out and the first thing I tried to do is just how do you make some something console log out so you search in here so search for log then you click on it drops it here so everything kind of synthesizes in the center of the screen in this area and so you see there's a message and a log and so you can double click on this message and you'll get an input over here so if we type in four then hit enter it logs out four and that value disappears so it's consumed to that value 4 and it logged it out if you double click again and put that in quotes So now that's a string double click again we can put this uh in Brackets and you see it it's an array and then hopefully as you would expect and you're already ahead of me uh you can do curlies and you can create an actual object so that's how I got started okay so I can log things out I can put data types in through this input by double clicking on on one of these node inputs and I thought where's somewhere that I can you know store this something more than console log"
      },
      "date": 1711723960120
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1711724066342
    },
    {
      "type": "edit",
      "id": "309f5e245cb51d14",
      "item": {
        "type": "video",
        "id": "309f5e245cb51d14",
        "text": "YOUTUBE vwknTfGVDq8\nLee Trout (2022-08-07)\n"
      },
      "date": 1711724170475
    },
    {
      "type": "add",
      "id": "6941adeaee894f25",
      "item": {
        "type": "paragraph",
        "id": "6941adeaee894f25",
        "text": "localStorage"
      },
      "after": "22267aa7dd01143e",
      "date": 1711724244454
    },
    {
      "type": "edit",
      "id": "d0f17bdc00804723",
      "item": {
        "type": "paragraph",
        "id": "d0f17bdc00804723",
        "text": "(3:18) so I typed in storage there's tab storage session storage local storage uh we'll just play around with local storage so you you get local storage out here and I'm just clicking and dragging these things around so I'm going to hold down Q on my keyboard and if you'll notice here on the left the info widget lights up so now when I hover over this by holding Q you get a little more information about this unit so it persist add-on local storage and if we hover over this one print log on the console and notice it's got little tie pins over these pins I don't know you know if the author of this is going to add more information in some cases you will get explicit type information so if it must be a string you'll see that it's a string um so the a generic type I think it just means they can take anything but you will see any referenced as well so I'm not sure the difference there when any is used versus the a in the greater than less than sign but anyway so you have local storage so I don't know how to do anything with local storage so I started looking around like what is local storage platform API and so then you can search for platform is it platform I found it or API but I was able to um search for one of these and I found some stuff digging around um and I'll just jump to it basically there is a set and there's two set methods they're set on an object and then they're a set on a platform method object so I'm going to uh we'll synthesize both of these and so we can compare the difference so a set on a platform object again we hold q and pull this up it'll set unit property name to data and this takes a unit uh with a type of J and then set here on an object is different this has a key value and an obj object we hover over this you can see that's actual object keys can be numbers for Strings value can be any um so when you click on something that you want to connect it will actually show you what you can plug this into so you get a little green circle on uh valid pins so we can say I want to set on local storage some key and we'll just use the key Foo and then I want to set some value and we'll set it to the stream bar so same behavior that I experienced before those values get consumed we do see something some log message over here but let's go refresh our uh local storage here and you can see Foo is set to bar so the next little Adventure on is like if these are constantly consuming these values how do I hang on to a value and sure enough if you search for constant you can see that you have this constant it says F control if you look at the source code in system it's in the git repo and I can I can search for it and pull up in just a second you can go and look at these functions but the source code didn't make a lot of sense to me but you can take us a constant value here and so I can set this to our key Foo you can see it just outputs Foo and I can hook that up to name and now when I plug in a new piece of data blah then the data gets consumed but the key hangs around so I was like that's pretty cool how do I get some sort of data that changes and so I started looking around so I found this input and there's a name and a unit and you get a pen and that didn't didn't really help me there either if you keep looking for input you can find text input and so text input I tried playing around with this and I was like okay you type in Fubar how do I do something with this value you can't connect it to anything so notice when I'm clicking it doesn't light up as green so you have to find something that'll convert this input widget to a value and I found that with on watch the search is kind of buggy I think yeah watch watch change and if you if you look when it synthesizes it shows you there's a watch change which will take an element and produce a value and there's watch input which will take an element produce a value so I'm just going to try watch change I don't remember what I had done before but now when I click on this element you can see oh yeah you can you can connect those so connect here have my text input Fubar and then value comes out as Fubar and now I can plug this into Data and let's refresh over here and so we see the value is set to foobar if I change this input now double clicking to activate it and we'll say hello world if you caught that I don't know if the frame rate's quick enough on the recording this this chain flashed yellow so this chain that's currently gray these links here are they flash yellow it's going to show you that that flow activated and executed and so now it can refresh over here and we can see Hello World and so I'm gonna hold down D and clear up my canvas here just to delete some of the stuff um or probably needed that console log let me grab that back so then I was like okay well if I have a value in here how can I read a value back out so I have Foo is the key this text input is changing the value and it's sitting in local storage how can I get this value out of local storage so the same as set there's a get platform method and we can connect local storage to that unit and we can connect to this constant to the name and now we can see the value comes out hello world which is good and we can actually hook that up to console log here and that'll fire and we see Hello World so now if I change this goodbye world and hit enter these this flash you probably didn't see it on the stream and then we get the log uh goodbye world is this evaluated we can refresh up here goodbye world and I ran into a situation where it wasn't always updating the output as well so if it changed us to goodbye um and so then I started playing around like if I wanted these to be completely disconnected so if I didn't want this to fire every time I updated storage uh here there was another node in here called a delay which was pretty cool so you can come into delay and set up some number of milliseconds I can say every 500 milliseconds I want to emit some value and so every 500 milliseconds I can actually emit the constant Foo and then I can run with a different copy of local storage and a different copy of get oops yeah let's just get I keep wanting to say get value so with a completely different copy of local storage here uh this every 500 milliseconds is going to Output Foo and then that will cause this to execute and I can get this value goodbye and once again we could plug this into a console log here and then we should start seeing do I set that up right oh uh our delay got consumed yes of course it did uh once again we need a constant uh here so we'll just say 500 for 500 milliseconds and that'll give us a constant input into this delay and now what are we missing let's see 500 milliseconds comes into the delay maybe I should split these apart Let's uh let's unhook this just so we can see this separate flow so I'm just holding down D and clicking on things to delete them so 500 milliseconds comes in a constant here goes into our delay so that'll prevent that from being consumed by the delay and I think I deleted the value on the delay I'm not sure how you get pins back so I've messed up that delay so let's get a delay back here there we go so we want the output of the delay to go into the name and then here our constant will give us 500 milliseconds and let's just go ahead and do another constant instead of sharing the other one oops double click on that so we can add the food string and we'll plug that in here and so now it's pulsing and so we are we have a get from local storage that is running and then let's um let's delete the get here really quick let's set this up again because I think I lost another node when I disconnected those um so I want to get oops that's the object get wrong one hold down D there get platform method there we go so local storage get Foo value goodbye and then up here we say hello again so we should see this update after uh half a second in five more milliseconds oh maybe I still don't have it wired upright that's what I was playing with before I jumped on the stream now and I thought oh I'm going to stream this because it's pretty cool the delay runs uh it outputs this value but I may still have something not not set up right the life's number string outputs a string plug that into get value here let's throw that onto a console log because maybe it just realizes there's no drain on this and it's not actually doing anything there it is yep so that's pretty cool too so however these flows get evaluated um they detect that there's no output there and so I had to actually have that drain into something so that's pretty cool but there's all kinds of stuff in here there's uh for loops and things you kind of have to figure out what to search for and look around in here but I may dig through the source code and figure out how to make an index of this and maybe generate some additional documentation because I find the whole concept of this platform very fascinating yeah so just over the foo bar and then that runs yeah anyways that was that so just a short stream uh just showing off uh unit since I O U N dot i t and it was just unit flow programming and figure out how to uh maybe add show notes um on well I can certainly put a …"
      },
      "date": 1711724314100
    }
  ]
}