{
  "title": "OPE",
  "story": [
    {
      "type": "paragraph",
      "id": "9cf0422f4242fa21",
      "text": "short for Original [[Pile Engine]]"
    },
    {
      "type": "pagefold",
      "id": "3fc0cd2ccae08029",
      "text": "ðŸ”º"
    },
    {
      "type": "reference",
      "id": "b0b28dad2b42753d",
      "site": "wiki.ralfbarkow.ch",
      "slug": "the-original-pile-engine-demystified",
      "title": "The Original Pile Engine Demystified",
      "text": "[[Ralf Westphal]]'s [https://weblogs.asp.net/ralfw/441384 post], [https://web.archive.org/web/20081119150632/http://www.pilesys.com/TheOriginalPileEngineDemystified.pdf pdf]"
    },
    {
      "type": "reference",
      "id": "0d6e3906b8c93ebe",
      "site": "wiki.ralfbarkow.ch",
      "slug": "relations-in-pile",
      "title": "Relations in Pile",
      "text": "See \"Beyond WinFS â€“ Let associations rule! â€“ or: An introduction to Pile for mere mortals\" [https://weblogs.asp.net/ralfw/433714 post]"
    },
    {
      "type": "image",
      "id": "58cbec929cb159a5",
      "text": "Relations in Pile ",
      "size": "wide",
      "width": 430,
      "height": 166,
      "url": "/assets/plugins/image/0d7e49536cb9099e71dc248e6f56ac3e.jpg"
    },
    {
      "type": "markdown",
      "id": "3205f13f74100b96",
      "text": "> The parent-child relationship between two relations can be in so called normative manner or in associative manner. The Normative parent (Np) of a relation is the origin of it, the Associative parent (Ap) is the destination. So you could read a relation from left to right: A to B or A before B or whatever. (Erez even sees time encoded in Pile relations â€“ but thatÂ´s a part I donÂ´t understand yet. He probably alludes to a reading of relations like \"A causing B\".)"
    },
    {
      "type": "pagefold",
      "id": "df34326672e05057",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "c60d5902fbe50c6d",
      "site": "wiki.ralfbarkow.ch",
      "slug": "patricia",
      "title": "Patricia",
      "text": "Practical Algorithm To Retrieve Information Coded In Alphanumericâ€™s basic idea is to build a binary [[Trie]], but to avoid one-way branching by including in each node the number of bits to skip over before making the next test. "
    },
    {
      "type": "markdown",
      "id": "d1867df4931a57d0",
      "text": "> The tree that Patricia uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. It consists of a header and N âˆ’1 nodes, where the nodes contain several fields: â€¦"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "OPE",
        "story": []
      },
      "date": 1695053736246
    },
    {
      "id": "3fc0cd2ccae08029",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "3fc0cd2ccae08029",
        "text": "ðŸ”º"
      },
      "attribution": {
        "page": "GetChild"
      },
      "date": 1695053747317
    },
    {
      "id": "b0b28dad2b42753d",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "b0b28dad2b42753d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "the-original-pile-engine-demystified",
        "title": "The Original Pile Engine Demystified",
        "text": "[[Ralf Westphal]]'s [https://weblogs.asp.net/ralfw/441384 post], [https://web.archive.org/web/20081119150632/http://www.pilesys.com/TheOriginalPileEngineDemystified.pdf pdf]"
      },
      "after": "3fc0cd2ccae08029",
      "attribution": {
        "page": "GetChild"
      },
      "date": 1695053750717
    },
    {
      "id": "0d6e3906b8c93ebe",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "0d6e3906b8c93ebe",
        "site": "wiki.ralfbarkow.ch",
        "slug": "relations-in-pile",
        "title": "Relations in Pile",
        "text": "See \"Beyond WinFS â€“ Let associations rule! â€“ or: An introduction to Pile for mere mortals\" [https://weblogs.asp.net/ralfw/433714 post]"
      },
      "after": "b0b28dad2b42753d",
      "attribution": {
        "page": "GetChild"
      },
      "date": 1695053753334
    },
    {
      "id": "c60d5902fbe50c6d",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "c60d5902fbe50c6d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "patricia",
        "title": "Patricia",
        "text": "Practical Algorithm To Retrieve Information Coded In Alphanumericâ€™s basic idea is to build a binary [[Trie]], but to avoid one-way branching by including in each node the number of bits to skip over before making the next test. "
      },
      "after": "0d6e3906b8c93ebe",
      "attribution": {
        "page": "GetChild"
      },
      "date": 1695053756417
    },
    {
      "id": "d1867df4931a57d0",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "d1867df4931a57d0",
        "text": "> The tree that Patricia uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. It consists of a header and N âˆ’1 nodes, where the nodes contain several fields:"
      },
      "after": "c60d5902fbe50c6d",
      "attribution": {
        "page": "GetChild"
      },
      "date": 1695053759568
    },
    {
      "type": "edit",
      "id": "d1867df4931a57d0",
      "item": {
        "type": "markdown",
        "id": "d1867df4931a57d0",
        "text": "> The tree that Patricia uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. It consists of a header and N âˆ’1 nodes, where the nodes contain several fields: â€¦"
      },
      "date": 1695053765202
    },
    {
      "item": {
        "type": "factory",
        "id": "9cf0422f4242fa21"
      },
      "id": "9cf0422f4242fa21",
      "type": "add",
      "after": "d1867df4931a57d0",
      "date": 1695053774366
    },
    {
      "id": "9cf0422f4242fa21",
      "type": "move",
      "order": [
        "9cf0422f4242fa21",
        "3fc0cd2ccae08029",
        "b0b28dad2b42753d",
        "0d6e3906b8c93ebe",
        "c60d5902fbe50c6d",
        "d1867df4931a57d0"
      ],
      "date": 1695053776685
    },
    {
      "type": "edit",
      "id": "9cf0422f4242fa21",
      "item": {
        "type": "paragraph",
        "id": "9cf0422f4242fa21",
        "text": "short for Original [[Pile Engine]]"
      },
      "date": 1695053786593
    },
    {
      "id": "58cbec929cb159a5",
      "type": "add",
      "item": {
        "type": "image",
        "id": "58cbec929cb159a5",
        "text": "Relations in Pile ",
        "size": "wide",
        "width": 430,
        "height": 166,
        "url": "/assets/plugins/image/0d7e49536cb9099e71dc248e6f56ac3e.jpg"
      },
      "after": "0d6e3906b8c93ebe",
      "attribution": {
        "page": "Relations in Pile"
      },
      "date": 1695054471745
    },
    {
      "id": "3205f13f74100b96",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "3205f13f74100b96",
        "text": "> The parent-child relationship between two relations can be in so called normative manner or in associative manner. The Normative parent (Np) of a relation is the origin of it, the Associative parent (Ap) is the destination. So you could read a relation from left to right: A to B or A before B or whatever. (Erez even sees time encoded in Pile relations â€“ but thatÂ´s a part I donÂ´t understand yet. He probably alludes to a reading of relations like \"A causing B\".)"
      },
      "after": "58cbec929cb159a5",
      "attribution": {
        "page": "Relations in Pile"
      },
      "date": 1695054479956
    },
    {
      "item": {
        "type": "factory",
        "id": "df34326672e05057"
      },
      "id": "df34326672e05057",
      "type": "add",
      "after": "d1867df4931a57d0",
      "date": 1695054507230
    },
    {
      "type": "edit",
      "id": "df34326672e05057",
      "item": {
        "type": "pagefold",
        "id": "df34326672e05057",
        "text": "~"
      },
      "date": 1695054510841
    },
    {
      "id": "df34326672e05057",
      "type": "move",
      "order": [
        "9cf0422f4242fa21",
        "3fc0cd2ccae08029",
        "b0b28dad2b42753d",
        "0d6e3906b8c93ebe",
        "58cbec929cb159a5",
        "3205f13f74100b96",
        "df34326672e05057",
        "c60d5902fbe50c6d",
        "d1867df4931a57d0"
      ],
      "date": 1695054513190
    }
  ]
}