{
  "title": "Model-View-ViewModel",
  "story": [
    {
      "type": "paragraph",
      "id": "9968ac8a1a4ae695",
      "text": "Model–view–viewmodel (MVVM) is a software architectural pattern that facilitates the separation of the development of the graphical user interface (the view) – be it via a markup language or GUI code – from the development of the business logic or back-end logic (the model) so that the view is not dependent on any specific model platform. The viewmodel of MVVM is a value converter,[1] meaning the viewmodel is responsible for exposing (converting) the data objects from the model in such a way that objects are easily managed and presented. In this respect, the viewmodel is more model than view, and handles most if not all of the view's display logic.[1] The viewmodel may implement a mediator pattern, organizing access to the back-end logic around the set of use cases supported by the view. "
    },
    {
      "type": "markdown",
      "id": "60ea9408532a22bf",
      "text": "– https://de.wikipedia.org/wiki/Model_View_ViewModel"
    },
    {
      "type": "markdown",
      "id": "3668f6f2289e501b",
      "text": "– https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel"
    },
    {
      "type": "paragraph",
      "id": "d1f78c362729a680",
      "text": "MVVM is a variation of Martin Fowler's Presentation Model design pattern.[2][3] It was invented by Microsoft architects [[Ken Cooper]] and [[Ted Peters]] specifically to simplify event-driven programming of user interfaces. The pattern was incorporated into Windows Presentation Foundation (WPF) (Microsoft's .NET graphics system) and Silverlight (WPF's Internet application derivative).[3] [[John Gossman]], one of Microsoft's WPF and Silverlight architects, announced MVVM on his blog in 2005.[3][4]\n\n"
    },
    {
      "type": "paragraph",
      "id": "b6a0c7524f3d6ad5",
      "text": "Model–view–viewmodel is also referred to as model–view–binder, especially in implementations not involving the .NET platform. ZK (a web application framework written in Java) and KnockoutJS (a JavaScript library) use model–view–binder.[3][5][6] "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Model-View-ViewModel",
        "story": []
      },
      "date": 1655468017099
    },
    {
      "item": {
        "type": "factory",
        "id": "60ea9408532a22bf"
      },
      "id": "60ea9408532a22bf",
      "type": "add",
      "date": 1655468019409
    },
    {
      "type": "edit",
      "id": "60ea9408532a22bf",
      "item": {
        "type": "paragraph",
        "id": "60ea9408532a22bf",
        "text": "– https://de.wikipedia.org/wiki/Model_View_ViewModel"
      },
      "date": 1655468022338
    },
    {
      "type": "edit",
      "id": "60ea9408532a22bf",
      "item": {
        "type": "markdown",
        "id": "60ea9408532a22bf",
        "text": "– https://de.wikipedia.org/wiki/Model_View_ViewModel"
      },
      "date": 1655468023556
    },
    {
      "item": {
        "type": "factory",
        "id": "3668f6f2289e501b"
      },
      "id": "3668f6f2289e501b",
      "type": "add",
      "after": "60ea9408532a22bf",
      "date": 1655468034225
    },
    {
      "type": "edit",
      "id": "3668f6f2289e501b",
      "item": {
        "type": "paragraph",
        "id": "3668f6f2289e501b",
        "text": "– https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel"
      },
      "date": 1655468036782
    },
    {
      "type": "edit",
      "id": "3668f6f2289e501b",
      "item": {
        "type": "markdown",
        "id": "3668f6f2289e501b",
        "text": "– https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel"
      },
      "date": 1655468038030
    },
    {
      "item": {
        "type": "factory",
        "id": "9968ac8a1a4ae695"
      },
      "id": "9968ac8a1a4ae695",
      "type": "add",
      "after": "3668f6f2289e501b",
      "date": 1655468071632
    },
    {
      "type": "edit",
      "id": "9968ac8a1a4ae695",
      "item": {
        "type": "paragraph",
        "id": "9968ac8a1a4ae695",
        "text": "Model–view–viewmodel (MVVM) is a software architectural pattern that facilitates the separation of the development of the graphical user interface (the view) – be it via a markup language or GUI code – from the development of the business logic or back-end logic (the model) so that the view is not dependent on any specific model platform. The viewmodel of MVVM is a value converter,[1] meaning the viewmodel is responsible for exposing (converting) the data objects from the model in such a way that objects are easily managed and presented. In this respect, the viewmodel is more model than view, and handles most if not all of the view's display logic.[1] The viewmodel may implement a mediator pattern, organizing access to the back-end logic around the set of use cases supported by the view. "
      },
      "date": 1655468074284
    },
    {
      "id": "9968ac8a1a4ae695",
      "type": "move",
      "order": [
        "9968ac8a1a4ae695",
        "60ea9408532a22bf",
        "3668f6f2289e501b"
      ],
      "date": 1655468076992
    },
    {
      "item": {
        "type": "factory",
        "id": "d1f78c362729a680"
      },
      "id": "d1f78c362729a680",
      "type": "add",
      "after": "3668f6f2289e501b",
      "date": 1655468132917
    },
    {
      "type": "edit",
      "id": "d1f78c362729a680",
      "item": {
        "type": "paragraph",
        "id": "d1f78c362729a680",
        "text": "MVVM is a variation of Martin Fowler's Presentation Model design pattern.[2][3] It was invented by Microsoft architects Ken Cooper and Ted Peters specifically to simplify event-driven programming of user interfaces. The pattern was incorporated into Windows Presentation Foundation (WPF) (Microsoft's .NET graphics system) and Silverlight (WPF's Internet application derivative).[3] John Gossman, one of Microsoft's WPF and Silverlight architects, announced MVVM on his blog in 2005.[3][4]\n\nModel–view–viewmodel is also referred to as model–view–binder, especially in implementations not involving the .NET platform. ZK (a web application framework written in Java) and KnockoutJS (a JavaScript library) use model–view–binder.[3][5][6] "
      },
      "date": 1655468134397
    },
    {
      "type": "edit",
      "id": "d1f78c362729a680",
      "item": {
        "type": "paragraph",
        "id": "d1f78c362729a680",
        "text": "MVVM is a variation of Martin Fowler's Presentation Model design pattern.[2][3] It was invented by Microsoft architects [[Ken Cooper]] and [[Ted Peters]] specifically to simplify event-driven programming of user interfaces. The pattern was incorporated into Windows Presentation Foundation (WPF) (Microsoft's .NET graphics system) and Silverlight (WPF's Internet application derivative).[3] John Gossman, one of Microsoft's WPF and Silverlight architects, announced MVVM on his blog in 2005.[3][4]\n\nModel–view–viewmodel is also referred to as model–view–binder, especially in implementations not involving the .NET platform. ZK (a web application framework written in Java) and KnockoutJS (a JavaScript library) use model–view–binder.[3][5][6] "
      },
      "date": 1655468180567
    },
    {
      "type": "edit",
      "id": "d1f78c362729a680",
      "item": {
        "type": "paragraph",
        "id": "d1f78c362729a680",
        "text": "MVVM is a variation of Martin Fowler's Presentation Model design pattern.[2][3] It was invented by Microsoft architects [[Ken Cooper]] and [[Ted Peters]] specifically to simplify event-driven programming of user interfaces. The pattern was incorporated into Windows Presentation Foundation (WPF) (Microsoft's .NET graphics system) and Silverlight (WPF's Internet application derivative).[3] [[John Gossman]], one of Microsoft's WPF and Silverlight architects, announced MVVM on his blog in 2005.[3][4]\n\n"
      },
      "date": 1655468209123
    },
    {
      "type": "add",
      "id": "b6a0c7524f3d6ad5",
      "item": {
        "type": "paragraph",
        "id": "b6a0c7524f3d6ad5",
        "text": "Model–view–viewmodel is also referred to as model–view–binder, especially in implementations not involving the .NET platform. ZK (a web application framework written in Java) and KnockoutJS (a JavaScript library) use model–view–binder.[3][5][6] "
      },
      "after": "d1f78c362729a680",
      "date": 1655468209388
    }
  ]
}