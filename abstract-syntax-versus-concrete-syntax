{
  "title": "Abstract Syntax versus Concrete Syntax",
  "story": [
    {
      "type": "paragraph",
      "id": "c8ac50f0563731e6",
      "text": "The abstract syntax of a language is just a representation of the structure of the different components of a language without the superfluous details related to its particular textual representation [13]. On the other hand, concrete syntax is a particularization of the abstract syntax that defines, with precision, a specific textual or graphical representation of a language. It should be noted that a single abstract syntax can be shared by several concrete syntaxes."
    },
    {
      "type": "paragraph",
      "id": "755f1ef8635159a3",
      "text": "13. Kleppe, A.: Towards the generation of a text-based IDE from a language metamodel. In: Akehurst, D.H., Vogel, R., Paige, R.F. (eds.) ECMDA-FA. LNCS, vol. 4530, pp. 114–129. Springer, Heidelberg (2007)"
    },
    {
      "type": "paragraph",
      "id": "7e9e5cba5817d0b4",
      "text": "For example, the abstract syntax of the typical if-then-optional else sentence of an imperative programming language could be specified as a composition of a condition and one or two sentences. Two concrete syntaxes corresponding to specific textual representations of such a conditional sentence could be specified as: {“if”, “(”, expression, “)”, sentence, and optionally “else” and another sentence}, and {“IF”, expression, “THEN”, sentence, optionally “ELSE” and another sentence, and “ENDIF”}."
    },
    {
      "type": "paragraph",
      "id": "a8cc289d3f8f2bb9",
      "text": "When using [[ModelCC]], the language designer has to focus on the language abstract syntax model instead of focusing on specifying the BNF-like notation that describes a concrete syntax."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Abstract Syntax versus Concrete Syntax",
        "story": []
      },
      "date": 1656005971208
    },
    {
      "type": "fork",
      "date": 1656005974651
    },
    {
      "item": {
        "type": "factory",
        "id": "c8ac50f0563731e6"
      },
      "id": "c8ac50f0563731e6",
      "type": "add",
      "date": 1656005976653
    },
    {
      "type": "edit",
      "id": "c8ac50f0563731e6",
      "item": {
        "type": "paragraph",
        "id": "c8ac50f0563731e6",
        "text": "The abstract syntax of a language is just a representation of the structure of the different components of a language without the superfluous details related to its particular textual representation [13]. On the other hand, concrete syntax is a particularization of the abstract syntax that defines, with precision, a specific textual or graphical representation of a language. It should be noted that a single abstract syntax can be shared by several concrete syntaxes."
      },
      "date": 1656005989511
    },
    {
      "item": {
        "type": "factory",
        "id": "755f1ef8635159a3"
      },
      "id": "755f1ef8635159a3",
      "type": "add",
      "after": "c8ac50f0563731e6",
      "date": 1656006012709
    },
    {
      "type": "edit",
      "id": "755f1ef8635159a3",
      "item": {
        "type": "paragraph",
        "id": "755f1ef8635159a3",
        "text": "3. Kleppe, A.: Towards the generation of a text-based IDE from a language metamodel. In: Akehurst, D.H., Vogel, R., Paige, R.F. (eds.) ECMDA-FA. LNCS, vol. 4530, pp. 114–129. Springer, Heidelberg (2007)"
      },
      "date": 1656006014356
    },
    {
      "type": "edit",
      "id": "755f1ef8635159a3",
      "item": {
        "type": "paragraph",
        "id": "755f1ef8635159a3",
        "text": "13. Kleppe, A.: Towards the generation of a text-based IDE from a language metamodel. In: Akehurst, D.H., Vogel, R., Paige, R.F. (eds.) ECMDA-FA. LNCS, vol. 4530, pp. 114–129. Springer, Heidelberg (2007)"
      },
      "date": 1656006021207
    },
    {
      "item": {
        "type": "factory",
        "id": "7e9e5cba5817d0b4"
      },
      "id": "7e9e5cba5817d0b4",
      "type": "add",
      "after": "755f1ef8635159a3",
      "date": 1656006052438
    },
    {
      "type": "edit",
      "id": "7e9e5cba5817d0b4",
      "item": {
        "type": "paragraph",
        "id": "7e9e5cba5817d0b4",
        "text": "For example, the abstract syntax of the typical if-then-optional else sentence of an imperative programming language could be specified as a composition o\n\nA Language Specification Tool for Model-Based Parsing 53 a condition and one or two sentences. Two concrete syntaxes corresponding to specific textual representations of such a conditional sentence could be specified as: {“if”, “(”, expression, “)”, sentence, and optionally “else” and another sentence},and{“IF”, expression, “THEN”, sentence, optionally “ELSE” and another sentence, and “ENDIF”}."
      },
      "date": 1656006065888
    },
    {
      "type": "edit",
      "id": "7e9e5cba5817d0b4",
      "item": {
        "type": "paragraph",
        "id": "7e9e5cba5817d0b4",
        "text": "For example, the abstract syntax of the typical if-then-optional else sentence of an imperative programming language could be specified as a composition ofa condition and one or two sentences. Two concrete syntaxes corresponding to specific textual representations of such a conditional sentence could be specified as: {“if”, “(”, expression, “)”, sentence, and optionally “else” and another sentence},and{“IF”, expression, “THEN”, sentence, optionally “ELSE” and another sentence, and “ENDIF”}."
      },
      "date": 1656006079155
    },
    {
      "type": "edit",
      "id": "7e9e5cba5817d0b4",
      "item": {
        "type": "paragraph",
        "id": "7e9e5cba5817d0b4",
        "text": "For example, the abstract syntax of the typical if-then-optional else sentence of an imperative programming language could be specified as a composition of a condition and one or two sentences. Two concrete syntaxes corresponding to specific textual representations of such a conditional sentence could be specified as: {“if”, “(”, expression, “)”, sentence, and optionally “else” and another sentence},and{“IF”, expression, “THEN”, sentence, optionally “ELSE” and another sentence, and “ENDIF”}."
      },
      "date": 1656006091408
    },
    {
      "item": {
        "type": "factory",
        "id": "a8cc289d3f8f2bb9"
      },
      "id": "a8cc289d3f8f2bb9",
      "type": "add",
      "after": "7e9e5cba5817d0b4",
      "date": 1656006127300
    },
    {
      "type": "edit",
      "id": "a8cc289d3f8f2bb9",
      "item": {
        "type": "paragraph",
        "id": "a8cc289d3f8f2bb9",
        "text": "When using [[ModelCC]], the language designer has to focus on the language abstract syntax model instead of focusing on specifying the BNF-like notation that describes a concrete syntax."
      },
      "date": 1656006136450
    },
    {
      "type": "edit",
      "id": "7e9e5cba5817d0b4",
      "item": {
        "type": "paragraph",
        "id": "7e9e5cba5817d0b4",
        "text": "For example, the abstract syntax of the typical if-then-optional else sentence of an imperative programming language could be specified as a composition of a condition and one or two sentences. Two concrete syntaxes corresponding to specific textual representations of such a conditional sentence could be specified as: {“if”, “(”, expression, “)”, sentence, and optionally “else” and another sentence}, and {“IF”, expression, “THEN”, sentence, optionally “ELSE” and another sentence, and “ENDIF”}."
      },
      "date": 1656006176225
    }
  ]
}