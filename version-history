{
  "title": "Version History",
  "story": [
    {
      "type": "markdown",
      "id": "d929b284514bcba2",
      "text": "**Problem:** Things change. You’d like to know what happened when. But people (and processes and organizations) are imperfect. Put these three facts together and you are faced with a challenge. How do you construct objects that can record and compute correctly in spite of imperfect recording of change?\n\n"
    },
    {
      "type": "markdown",
      "id": "0705fbc4690a6115",
      "text": "**Therefore:**  Split one conceptual object into two parts, one part that doesn’t change, the [[History]], and one part that does change, the [[Version]]. Give the History messages to store and retrieve versions similar to keyed access to a collection.\n* `History>>versionAt: aTime put: aVersion` - Says that from the point of view of `aTime`, the Version\nin force is now `aVersion`\n* `History>>versionAt: aTime` – Returns the version visible from `aTime`"
    },
    {
      "type": "pagefold",
      "id": "66c458778c71c5d6",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "91e01dfcf290ffe7",
      "text": "Arnoldi, Massimo, Kent Beck, Markus Bieri, and Manfred Lange. “[[Time Travel]]: A Pattern Language for Values That Change,” [http://www.manfred-lange.com/publications/TimeTravel.pdf pdf] "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Version History",
        "story": []
      },
      "date": 1644302991196
    },
    {
      "item": {
        "type": "factory",
        "id": "d929b284514bcba2"
      },
      "id": "d929b284514bcba2",
      "type": "add",
      "date": 1644302992370
    },
    {
      "type": "edit",
      "id": "d929b284514bcba2",
      "item": {
        "type": "paragraph",
        "id": "d929b284514bcba2",
        "text": "Things change. You’d like to know what happened when. But people (and processes and\norganizations) are imperfect. Put these three facts together and you are faced with a\nchallenge. How do you construct objects that can record and compute correctly in spite of\nimperfect recording of change?\nSplit one conceptual object into two parts, one part that doesn’t change, the History, and one\npart that does change, the Version. Give the History messages to store and retrieve versions\nsimilar to keyed access to a collection.\n• History>>versionAt: aTime put: aVersion - Says that from the point of view of aTime, the Version\nin force is now aVersion\n• History>>versionAt: aTime – Returns the version visible from aTime"
      },
      "date": 1644303004251
    },
    {
      "type": "edit",
      "id": "d929b284514bcba2",
      "item": {
        "type": "markdown",
        "id": "d929b284514bcba2",
        "text": "Things change. You’d like to know what happened when. But people (and processes and\norganizations) are imperfect. Put these three facts together and you are faced with a\nchallenge. How do you construct objects that can record and compute correctly in spite of\nimperfect recording of change?\nSplit one conceptual object into two parts, one part that doesn’t change, the History, and one\npart that does change, the Version. Give the History messages to store and retrieve versions\nsimilar to keyed access to a collection.\n• History>>versionAt: aTime put: aVersion - Says that from the point of view of aTime, the Version\nin force is now aVersion\n• History>>versionAt: aTime – Returns the version visible from aTime"
      },
      "date": 1644303016282
    },
    {
      "type": "edit",
      "id": "d929b284514bcba2",
      "item": {
        "type": "markdown",
        "id": "d929b284514bcba2",
        "text": "Things change. You’d like to know what happened when. But people (and processes and organizations) are imperfect. Put these three facts together and you are faced with a challenge. How do you construct objects that can record and compute correctly in spite of imperfect recording of change?\n\n"
      },
      "date": 1644303032018
    },
    {
      "type": "add",
      "id": "0705fbc4690a6115",
      "item": {
        "type": "markdown",
        "id": "0705fbc4690a6115",
        "text": "Split one conceptual object into two parts, one part that doesn’t change, the History, and one\npart that does change, the Version. Give the History messages to store and retrieve versions\nsimilar to keyed access to a collection.\n* History>>versionAt: aTime put: aVersion - Says that from the point of view of aTime, the Version\nin force is now aVersion\n* History>>versionAt: aTime – Returns the version visible from aTime"
      },
      "after": "d929b284514bcba2",
      "date": 1644303043366
    },
    {
      "type": "edit",
      "id": "0705fbc4690a6115",
      "item": {
        "type": "markdown",
        "id": "0705fbc4690a6115",
        "text": "Split one conceptual object into two parts, one part that doesn’t change, the History, and one\npart that does change, the Version. Give the History messages to store and retrieve versions\nsimilar to keyed access to a collection.\n* `History>>versionAt: aTime put: aVersion` - Says that from the point of view of aTime, the Version\nin force is now aVersion\n* `History>>versionAt: aTime` – Returns the version visible from aTime"
      },
      "date": 1644303085590
    },
    {
      "type": "edit",
      "id": "0705fbc4690a6115",
      "item": {
        "type": "markdown",
        "id": "0705fbc4690a6115",
        "text": "Split one conceptual object into two parts, one part that doesn’t change, the History, and one\npart that does change, the Version. Give the History messages to store and retrieve versions\nsimilar to keyed access to a collection.\n* `History>>versionAt: aTime put: aVersion` - Says that from the point of view of `aTime`, the Version\nin force is now `aVersion`\n* `History>>versionAt: aTime` – Returns the version visible from aTime"
      },
      "date": 1644303150047
    },
    {
      "type": "edit",
      "id": "0705fbc4690a6115",
      "item": {
        "type": "markdown",
        "id": "0705fbc4690a6115",
        "text": "Split one conceptual object into two parts, one part that doesn’t change, the History, and one\npart that does change, the Version. Give the History messages to store and retrieve versions\nsimilar to keyed access to a collection.\n* `History>>versionAt: aTime put: aVersion` - Says that from the point of view of `aTime`, the Version\nin force is now `aVersion`\n* `History>>versionAt: aTime` – Returns the version visible from `aTime`"
      },
      "date": 1644303158428
    },
    {
      "item": {
        "type": "factory",
        "id": "66c458778c71c5d6"
      },
      "id": "66c458778c71c5d6",
      "type": "add",
      "after": "0705fbc4690a6115",
      "date": 1644303304704
    },
    {
      "type": "edit",
      "id": "66c458778c71c5d6",
      "item": {
        "type": "pagefold",
        "id": "66c458778c71c5d6",
        "text": "~"
      },
      "date": 1644303307731
    },
    {
      "item": {
        "type": "factory",
        "id": "91e01dfcf290ffe7"
      },
      "id": "91e01dfcf290ffe7",
      "type": "add",
      "after": "66c458778c71c5d6",
      "date": 1644303309256
    },
    {
      "type": "edit",
      "id": "91e01dfcf290ffe7",
      "item": {
        "type": "paragraph",
        "id": "91e01dfcf290ffe7",
        "text": "Arnoldi, Massimo, Kent Beck, Markus Bieri, and Manfred Lange. “Time Travel: A Pattern Language for Values That Change,” n.d., 15.\n"
      },
      "date": 1644303310886
    },
    {
      "type": "edit",
      "id": "91e01dfcf290ffe7",
      "item": {
        "type": "paragraph",
        "id": "91e01dfcf290ffe7",
        "text": "Arnoldi, Massimo, Kent Beck, Markus Bieri, and Manfred Lange. “Time Travel: A Pattern Language for Values That Change,” [http://www.manfred-lange.com/publications/TimeTravel.pdf pdf]"
      },
      "date": 1644303366816
    },
    {
      "type": "edit",
      "id": "91e01dfcf290ffe7",
      "item": {
        "type": "paragraph",
        "id": "91e01dfcf290ffe7",
        "text": "Arnoldi, Massimo, Kent Beck, Markus Bieri, and Manfred Lange. “[[Time Travel]]: A Pattern Language for Values That Change,” [http://www.manfred-lange.com/publications/TimeTravel.pdf pdf]"
      },
      "date": 1644303378818
    },
    {
      "type": "edit",
      "id": "91e01dfcf290ffe7",
      "item": {
        "type": "paragraph",
        "id": "91e01dfcf290ffe7",
        "text": "Arnoldi, Massimo, Kent Beck, Markus Bieri, and Manfred Lange. “[[Time Travel]]: A Pattern Language for Values That Change,” [http://www.manfred-lange.com/publications/TimeTravel.pdf pdf] "
      },
      "date": 1644305247186
    },
    {
      "type": "edit",
      "id": "0705fbc4690a6115",
      "item": {
        "type": "markdown",
        "id": "0705fbc4690a6115",
        "text": "Split one conceptual object into two parts, one part that doesn’t change, the History, and one part that does change, the Version. Give the History messages to store and retrieve versions similar to keyed access to a collection.\n* `History>>versionAt: aTime put: aVersion` - Says that from the point of view of `aTime`, the Version\nin force is now `aVersion`\n* `History>>versionAt: aTime` – Returns the version visible from `aTime`"
      },
      "date": 1654233039358
    },
    {
      "type": "edit",
      "id": "0705fbc4690a6115",
      "item": {
        "type": "markdown",
        "id": "0705fbc4690a6115",
        "text": "Split one conceptual object into two parts, one part that doesn’t change, the [[History]], and one part that does change, the Version. Give the History messages to store and retrieve versions similar to keyed access to a collection.\n* `History>>versionAt: aTime put: aVersion` - Says that from the point of view of `aTime`, the Version\nin force is now `aVersion`\n* `History>>versionAt: aTime` – Returns the version visible from `aTime`"
      },
      "date": 1654233111750
    },
    {
      "type": "edit",
      "id": "0705fbc4690a6115",
      "item": {
        "type": "markdown",
        "id": "0705fbc4690a6115",
        "text": "Split one conceptual object into two parts, one part that doesn’t change, the [[History]], and one part that does change, the [[Version]]. Give the History messages to store and retrieve versions similar to keyed access to a collection.\n* `History>>versionAt: aTime put: aVersion` - Says that from the point of view of `aTime`, the Version\nin force is now `aVersion`\n* `History>>versionAt: aTime` – Returns the version visible from `aTime`"
      },
      "date": 1654233122660
    },
    {
      "type": "edit",
      "id": "d929b284514bcba2",
      "item": {
        "type": "markdown",
        "id": "d929b284514bcba2",
        "text": "**Problem:** Things change. You’d like to know what happened when. But people (and processes and organizations) are imperfect. Put these three facts together and you are faced with a challenge. How do you construct objects that can record and compute correctly in spite of imperfect recording of change?\n\n"
      },
      "date": 1654233328988
    },
    {
      "type": "edit",
      "id": "0705fbc4690a6115",
      "item": {
        "type": "markdown",
        "id": "0705fbc4690a6115",
        "text": "**Therefore:**  Split one conceptual object into two parts, one part that doesn’t change, the [[History]], and one part that does change, the [[Version]]. Give the History messages to store and retrieve versions similar to keyed access to a collection.\n* `History>>versionAt: aTime put: aVersion` - Says that from the point of view of `aTime`, the Version\nin force is now `aVersion`\n* `History>>versionAt: aTime` – Returns the version visible from `aTime`"
      },
      "date": 1654233440459
    }
  ]
}