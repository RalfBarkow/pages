{
  "title": "Capability System",
  "story": [
    {
      "type": "html",
      "text": "Introduction to capabilities at the homepage of [[Eros Os]]: [http://www.eros-os.org/essays/capintro.html www.eros-os.org]",
      "id": "46a3be11c46315f857f624127666ba49"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "febc689d08aaf44c2de5215648994e14"
    },
    {
      "type": "html",
      "text": "Quoting from the essay mentioned above:",
      "id": "90b8f168c81b8f7d6508ccebe0f4e7cf"
    },
    {
      "type": "html",
      "text": "<i>The term [[capability]] was introduced by Dennis and Van Horn in 1966 in a paper entitled Programming Semantics for Multiprogrammed Computations [[[Dennis And Van Horn]]]. The basic idea is this: suppose we design a computer system so that in order to access an object, a program must have a special token. This token designates an object and gives the program the authority to perform a specific set of actions (such as reading or writing) on that object. Such a token is known as a capability.</i>",
      "id": "23c5f94d13c4719f30cc86d24399b39e"
    },
    {
      "type": "html",
      "text": "<i>A capability is a lot like the keys on your key ring. As an example, consider your car key. It works on a specific car (it designates a particular object), and anyone holding the key can perform certain actions (locking or unlocking the car, starting the car, opening the glove compartment). You can hand your car key to me, after which I can open, lock, or start the car, but only on your car. Holding your car key won't let me test drive my neighbor's Lamborghini (which is just as well -- I would undoubtedly wrap it around a tree somewhere). Note that the car key doesn't know that it's me starting the car; it's sufficient that I possess the key. In the same way, capabilities do not care who uses them.</i>",
      "id": "bf79db0e01bfc676fb83eca1a8101b6f"
    },
    {
      "type": "html",
      "text": "<i>Car keys sometimes come in several variations. Two common ones are the valet key (starts, locks, and unlocks the car, but not the glove compartment) or the door key (locks/unlocks the car, but won't start it). In exactly this way, two capabilities can designate the same object (such as the car) but authorize different sets of actions. One program might hold a read-only capability to a file while another holds a read-write capability to the same file.</i>",
      "id": "232c6f57b0e64820be47c70003b133ef"
    },
    {
      "type": "html",
      "text": "<i>As with keys, you can give me a capability to a box full of other capabilities.</i>",
      "id": "4c0524acd111d8717bbb7c8522855ba6"
    },
    {
      "type": "html",
      "text": "<i>Capabilities can be delegated. If you give your car key to me, you are trusting me not to hand it to somebody else. If you don't want trust me, you shouldn't hand me the key.</i>",
      "id": "ebe18be934e3fed25826f4c7e2a006ae"
    },
    {
      "type": "html",
      "text": "<i>Capabilities can be copied. If you give me your car key, there is nothing to stop me from going down to my local car dealer and having a duplicate key made. In practice, this isn't much of a problem, because you wouldn't have handed me the key if you didn't trust me. If it comes down to desperate measures, you can change the locks on the car, making all of the keys useless. This can be done with capabilities too; it is known as severing an object, which has the effect of rescinding all capabilities. A rescinded capability conveys no authority to do anything at all.</i>",
      "id": "084d9fa73a104976c130d764ce0cc87a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "febc689d08aaf44c2de5215648994e14"
    },
    {
      "type": "html",
      "text": "Unfortunately, the above story is great for explaining the [[Capabilities As Keys Model]], whereas [[Eros Os]] is actually in the [[Object Capability Model]].",
      "id": "4c4870a7ac844812797d46cbda4363ce"
    },
    {
      "type": "html",
      "text": "\nSee [[Capability Computing]], [[Capability Security Model]].",
      "id": "937490a20a66d5b67294a158948221d2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "febc689d08aaf44c2de5215648994e14"
    },
    {
      "type": "html",
      "text": "[[Category Security]]",
      "id": "2aeb721961ee351186177c8d2a0c58b8"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CapabilitySystem c2.com]",
      "id": "870c8685928907b86d4f1d4ad90abc1a"
    }
  ],
  "journal": [
    {
      "date": 1095819238000,
      "id": "08361b3531881828f81bbc368a13a88a",
      "type": "create",
      "item": {
        "title": "Capability System",
        "story": [
          {
            "type": "html",
            "text": "Introduction to capabilities at the homepage of [[Eros Os]]: [http://www.eros-os.org/essays/capintro.html www.eros-os.org]",
            "id": "46a3be11c46315f857f624127666ba49"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "febc689d08aaf44c2de5215648994e14"
          },
          {
            "type": "html",
            "text": "Quoting from the essay mentioned above:",
            "id": "90b8f168c81b8f7d6508ccebe0f4e7cf"
          },
          {
            "type": "html",
            "text": "<i>The term capability was introduced by Dennis and Van Horn in 1966 in a paper entitled Programming Semantics for Multiprogrammed Computations [[[Dennis And Van Horn]]]. The basic idea is this: suppose we design a computer system so that in order to access an object, a program must have a special token. This token designates an object and gives the program the authority to perform a specific set of actions (such as reading or writing) on that object. Such a token is known as a capability.</i>",
            "id": "23c5f94d13c4719f30cc86d24399b39e"
          },
          {
            "type": "html",
            "text": "<i>A capability is a lot like the keys on your key ring. As an example, consider your car key. It works on a specific car (it designates a particular object), and anyone holding the key can perform certain actions (locking or unlocking the car, starting the car, opening the glove compartment). You can hand your car key to me, after which I can open, lock, or start the car, but only on your car. Holding your car key won't let me test drive my neighbor's Lamborghini (which is just as well -- I would undoubtedly wrap it around a tree somewhere). Note that the car key doesn't know that it's me starting the car; it's sufficient that I possess the key. In the same way, capabilities do not care who uses them.</i>",
            "id": "bf79db0e01bfc676fb83eca1a8101b6f"
          },
          {
            "type": "html",
            "text": "<i>Car keys sometimes come in several variations. Two common ones are the valet key (starts, locks, and unlocks the car, but not the glove compartment) or the door key (locks/unlocks the car, but won't start it). In exactly this way, two capabilities can designate the same object (such as the car) but authorize different sets of actions. One program might hold a read-only capability to a file while another holds a read-write capability to the same file.</i>",
            "id": "232c6f57b0e64820be47c70003b133ef"
          },
          {
            "type": "html",
            "text": "<i>As with keys, you can give me a capability to a box full of other capabilities.</i>",
            "id": "4c0524acd111d8717bbb7c8522855ba6"
          },
          {
            "type": "html",
            "text": "<i>Capabilities can be delegated. If you give your car key to me, you are trusting me not to hand it to somebody else. If you don't want trust me, you shouldn't hand me the key.</i>",
            "id": "ebe18be934e3fed25826f4c7e2a006ae"
          },
          {
            "type": "html",
            "text": "<i>Capabilities can be copied. If you give me your car key, there is nothing to stop me from going down to my local car dealer and having a duplicate key made. In practice, this isn't much of a problem, because you wouldn't have handed me the key if you didn't trust me. If it comes down to desperate measures, you can change the locks on the car, making all of the keys useless. This can be done with capabilities too; it is known as severing an object, which has the effect of rescinding all capabilities. A rescinded capability conveys no authority to do anything at all.</i>",
            "id": "084d9fa73a104976c130d764ce0cc87a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "febc689d08aaf44c2de5215648994e14"
          },
          {
            "type": "html",
            "text": "Unfortunately, the above story is great for explaining the [[Capabilities As Keys Model]], whereas [[Eros Os]] is actually in the [[Object Capability Model]].",
            "id": "4c4870a7ac844812797d46cbda4363ce"
          },
          {
            "type": "html",
            "text": "\nSee [[Capability Computing]], [[Capability Security Model]].",
            "id": "937490a20a66d5b67294a158948221d2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "febc689d08aaf44c2de5215648994e14"
          },
          {
            "type": "html",
            "text": "[[Category Security]]",
            "id": "2aeb721961ee351186177c8d2a0c58b8"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CapabilitySystem c2.com]",
            "id": "870c8685928907b86d4f1d4ad90abc1a"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628512359608
    },
    {
      "type": "edit",
      "id": "23c5f94d13c4719f30cc86d24399b39e",
      "item": {
        "type": "html",
        "text": "<i>The term [[capability]] was introduced by Dennis and Van Horn in 1966 in a paper entitled Programming Semantics for Multiprogrammed Computations [[[Dennis And Van Horn]]]. The basic idea is this: suppose we design a computer system so that in order to access an object, a program must have a special token. This token designates an object and gives the program the authority to perform a specific set of actions (such as reading or writing) on that object. Such a token is known as a capability.</i>",
        "id": "23c5f94d13c4719f30cc86d24399b39e"
      },
      "date": 1628512370166
    }
  ]
}