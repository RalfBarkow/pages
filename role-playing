{
  "title": "Role-Playing",
  "story": [
    {
      "type": "paragraph",
      "id": "eaa1eabf9dbe461f",
      "text": "Can we get strong guarantees from AI tools that are known to hallucinate? We discuss some strategies, and ways that [[Elm]] might be a great target for AI assistance."
    },
    {
      "type": "audio",
      "id": "0c7f5903c3db90c2",
      "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/d1c5f97c-9700-48b0-ab35-a039edbfd0d5/audio/16dc506d-5aa1-42c1-8838-9ffaa3e0e1e9/default_tc.mp3\nelm radio – 080: Elm and AI [https://elm-radio.com/episode/elm-and-ai/ page]"
    },
    {
      "type": "paragraph",
      "id": "5d1685e6c4d05464",
      "text": "[00:14:04]\n[…] writing skills have been valuable for a long time, but this unlocks\n[00:14:11]\na whole new set of things you can do, including engineering with your writing.\n[00:14:15]\nAnd it really is like, I mean, if you think about what these prompts are doing, like the\n[00:14:20]\nway that they work is they're based on the [[Context]] they're given, they're sort of like\n[00:14:26]\nrole playing with that context, essentially, because their basic premise is given like\n[00:14:33]\nthis context, what's likely to follow it, right? >> context role play"
    },
    {
      "type": "paragraph",
      "id": "5848c20ec7ee962e",
      "text": "[00:14:36]\nSo if you write in a certain style, it is going to be more likely to follow with a certain\n[00:14:42]\nstyle.\n[00:14:43]\nIf you write in a style that sounds very much like a scientific paper, a scientific journal\n[00:14:48]\npublication, and you write about your method for your study and all these things, it's\n[00:14:57]\nprobably going to give you more rigorous results.\n[00:15:00]\nAnd it's probably going to do the things that it's seen by gathering information from a\n[00:15:06]\nbunch of scientific journals, like coming up with a rigorous method and talking about\n[00:15:11]\nwhatever, like counterbalancing, you know, addressing particular concerns and stuff.\n[00:15:16]\nSo like, you have to really get it to role play to solve the problem you want it to solve,\n[00:15:22]\nto be like the smartest thing to address the problem you want."
    },
    {
      "type": "paragraph",
      "id": "33cd21e0f706043f",
      "text": "[00:15:27]\nAnd that's where nerds come into play again.\n[00:15:30]\nYes, totally.\n[00:15:32]\nBecause we kind of get that.\n[00:15:34]\nIt's not just like some magic box to us, like we kind of can understand how it could synthesize\n[00:15:40]\ninformation so we need to give it useful context for that."
    },
    {
      "type": "paragraph",
      "id": "2aa07e85ecbea61d",
      "text": "[00:15:44]\nNow I was thinking like, people play Dungeons and Dragons.\n[00:15:48]\nOh, that too.\n[00:15:49]\nOr used to role playing.\n[00:15:52]\nYeah, very true."
    },
    {
      "type": "paragraph",
      "id": "feb885dcf1189f73",
      "text": "[00:15:55]\n[…] priming it with good context is one thing that I've been thinking about as I've been playing with it. >> context\n"
    },
    {
      "type": "paragraph",
      "id": "1fefcce7a612507b",
      "text": "[00:16:04]\nAnd another thing I think about is like, is like how verifiable is the problem you're\n[00:16:11]\ngiving it?"
    },
    {
      "type": "paragraph",
      "id": "5876a332943c6aec",
      "text": "[00:16:28]\nI'm not like giving it a specific problem to solve.\n[00:16:31]\nI'm not giving it a problem that I can verify that I've gotten the answer.\n[00:16:37]\nSo if I give it some like an elm problem, and I have a way to check.\n[00:16:45]\nSo like there are certain problems where it's difficult to find an answer, but it's easy\n[00:16:52]\nto know that the answer is correct once you have it.\n"
    },
    {
      "type": "paragraph",
      "id": "083a96920828146d",
      "text": "[00:16:56]\nNP problems.\n[00:16:57]\nIs that the term?\n[00:16:58]\nNo, but you know, P equals NP.\n[00:17:02]\nI never quite got that."
    },
    {
      "type": "paragraph",
      "id": "2bedf25e3e797bf3",
      "text": "[00:17:16]\nI guess like things like the traveling salesman problem you like would be an example of that,\n[00:17:21]\nright?\n[00:17:22]\nAnd then yeah, that's an NP problem."
    },
    {
      "type": "paragraph",
      "id": "b0b3f3e15468c504",
      "text": "[00:17:23]\nYou can tell if you have a solution and it does fit an optimal [[Path]], it's easy to tell,\n[00:17:29]\nbut it's not easy to derive an optimal path, something like that.\n[00:17:33]\nYeah, almost.\n[00:17:35]\nYou know whether the solution that is given is a solution because you can check it and\n[00:17:39]\nthe checking is pretty easy.\n[00:17:41]\nBut knowing whether it's optimal is extremely hard.\n[00:17:45]\nI see. >> path"
    },
    {
      "type": "paragraph",
      "id": "572b9bab977e74ba",
      "text": "[00:17:48]\nSo like, is this the most optimal solution?\n[00:17:51]\nWell, to check that you would need to check all other solutions.\n[00:17:55]\nAnd it's easy to if you find a counter example, then yes, you know, it's not the most optimal\n[00:18:00]\none, but to know that whether it is indeed the most optimal one, you're going to have\n[00:18:05]\nto check everything.\n[00:18:06]\nAnd that's, that's extremely expensive.\n[00:18:08]\nRight, exactly."
    },
    {
      "type": "paragraph",
      "id": "0a369bf0519b9854",
      "text": "[00:18:10]\nSo I think like, to me, that's the type of mindset for finding good ways to use these\n[00:18:15]\ntools to automate our coding."
    },
    {
      "type": "pagefold",
      "id": "030200450fc6f723",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "d372f72a33d4b3a9",
      "site": "ward.dojo.fed.wiki",
      "slug": "automation-as-team-player",
      "title": "Automation as Team Player",
      "text": "⇒ [[Collaborative Automation]]"
    },
    {
      "type": "pagefold",
      "id": "171e0bc03b344c94",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "242c0d412f0a9839",
      "text": "[00:18:18]\nAlso like, like you mentioned, finding a counter example in the traveling salesman problem\n[00:18:24]\nis easy to verify because you just check how many nodes it traverses or whatever, right?\n[00:18:30]\nAnd it's, is the number smaller, right?\n[00:18:33]\nSo that's a very cheap operation to test a counter example.\n[00:18:38]\nSo if you know, so, so if you're able to like, get, let's say you try to prompt the, you\n[00:18:46]\nknow, write a prompt engineering prompt for chat GPT to solve the traveling salesman problem\n[00:18:52]\nfor something and you set it up and you prime it with some context and you like, you found\n[00:18:58]\none solution, but now it needs to find a better path.\n[00:19:03]\nAnd if it, if it gives you a more optimal path, then you're done."
    },
    {
      "type": "paragraph",
      "id": "3784d9a714427600",
      "text": "[00:19:07]\nYou can easily verify that and you can say, you know that it provided you with something\n[00:19:13]\nvaluable because you can easily verify that it's a valid solution and a more optimal solution."
    },
    {
      "type": "paragraph",
      "id": "39bb2c1803c4e644",
      "text": "[00:19:21]\nSo the, there, this class of problems that is easy and cheap to verify that it's valuable\n[00:19:29]\nis the kind of thing that where I find it to be a very interesting space.\n[00:19:34]\nAnd I think that Elm is very well suited to this type of problem.\n[00:19:37]\nSo like one very simple example, like if you, if you want to write a JSON decoder and now\n[00:19:46]\nanother consideration here is like what inputs can we feed it to prime it to give, to give\n[00:19:52]\nus better results."
    },
    {
      "type": "paragraph",
      "id": "38d87e3726c11a19",
      "text": "[00:19:55]\nSo that, so we want to give it like prime it with good context and we want to have verifiable\n[00:20:02]\noutput.\n[00:20:03]\nI've also been thinking about like that verification through a feedback cycle.\n[00:20:08]\nSo iterating on that verification becomes interesting."
    },
    {
      "type": "paragraph",
      "id": "ed104e99732cfc5c",
      "text": "[00:20:12]\nIf you use the open AI APIs, you can automate this process where you can test these results.\n[00:20:20]\nSo you, and then you can even give it information like Elm compiler output or did a JSON decoder\n[00:20:26]\nsucceed."
    },
    {
      "type": "paragraph",
      "id": "a021009cc09592ff",
      "text": "[00:20:27]\nSo if you, for example, you're trying to solve the problem of, I want to write a JSON decoder\n[00:20:32]\nand you either have like a curl command to run to hidden API or some JSON example of\n[00:20:39]\nwhat the API gives you, for example, that's your input.\n[00:20:43]\nYou prime it with that."
    },
    {
      "type": "paragraph",
      "id": "d4ba7bf93643a771",
      "text": "[00:20:44]\nYou can even prime it with like a prompt that helps step you through that process to, to\n[00:20:51]\ngive you higher quality output, but then you can verify that.\n[00:20:54]\nSo you say your job is to write a JSON decoder.\n[00:20:58]\nIt needs to decode into this Elm type and it needs at the end, it needs to give me a\n[00:21:05]\ncompiling JSON decoder of this type and it needs to successfully decode given this input.\n[00:21:12]\nThat's all verifiable."
    },
    {
      "type": "paragraph",
      "id": "01f0fa3d9cfda3f6",
      "text": "[00:21:14]\nSo if it gives you garbage or hallucinate something, or it gives you invalid syntax,\n[00:21:18]\nyou can even tell it and it can iterate on that.\n[00:21:21]\nAnd you can kind of reduce the amount of noise.\n[00:21:24]\nBecause I don't want to hear about hallucinations from AI.\n[00:21:28]\nSo you know, like before I mentioned like how much we want guarantees, not like somewhat\n[00:21:34]\nhigh confidence.\n[00:21:35]\nI want guarantees."
    },
    {
      "type": "paragraph",
      "id": "99d0dfe8b2a35390",
      "text": "[00:21:37]\nBut if we can throw away anything that's garbage and only get signal, no noise, then we can\n[00:21:44]\ndo really interesting things.\n[00:21:46]\nAnd Elm is really good for that."
    },
    {
      "type": "paragraph",
      "id": "9eeda3868cc807c2",
      "text": "[00:21:48]\nYou would like to have a system where you skip the intermediate steps of saying, telling,\n[00:21:52]\nhey, this is wrong, because this doesn't compile.\n[00:21:55]\nSo here's some source code.\n[00:21:58]\nHere's my request.\n[00:21:59]\nAnd then there's some back and forth between the Elm compiler, for instance, and the system,\n[00:22:05]\nthe AI."
    },
    {
      "type": "paragraph",
      "id": "2b7531f9cf8fb625",
      "text": "[00:22:06]\nAnd then you only get to know the ending result.\n[00:22:09]\nExactly."
    },
    {
      "type": "paragraph",
      "id": "f9a3a03e2232d907",
      "text": "[00:22:11]\nAnd then it's like a proven result.\n[00:22:14]\nIt's a guarantee at that point."
    },
    {
      "type": "paragraph",
      "id": "cda8e78d8d34cec4",
      "text": "[00:22:15]\nSo this is kind of the cool thing is like, with a little bit of glue and a little bit\n[00:22:22]\nof piecing things together, a little bit of allowing it to iterate and get feedback and\n[00:22:27]\nadapt based on that feedback, which is actually like GPT-4 is very good at this.\n[00:22:32]\nYou can get guarantees, you can get guaranteed safe tools, especially with Elm."
    },
    {
      "type": "pagefold",
      "id": "a0e9017c8050fd34",
      "text": "Writing Tests"
    },
    {
      "type": "paragraph",
      "id": "831f15916c32dd6b",
      "text": "[00:22:41]\nBut I'm guessing, or at least whenever you say verifying the results, I'm thinking of\n[00:22:46]\nthe Elm compiler.\n[00:22:47]\nBut I'm also thinking of writing tests, you know."
    },
    {
      "type": "paragraph",
      "id": "89f90d0b304d6124",
      "text": "[00:22:51]\nI would probably also try to include the results of Elm tests to the prompt, if possible.\n[00:22:59]\nBut that does mean that you need to verify things.\n[00:23:03]\nAnd that's kind of what our industry is all about, right?\n[00:23:07]\nWhy we have software engineers and not just coders."
    },
    {
      "type": "paragraph",
      "id": "6d4d1ad98feb05ed",
      "text": "[00:23:11]\nThat's why we call ourselves engineers, is because we make things and we know it's going\n[00:23:18]\nto be, we know we shouldn't trust even ourselves."
    },
    {
      "type": "paragraph",
      "id": "92aa83c0faef99e6",
      "text": "[00:23:23]\nWe shouldn't trust the code that we're writing, the code that we're reading, and the code\n[00:23:28]\nthat has been running for years, because we know, well, there are bugs everywhere.\n[00:23:34]\nSo that's why we have all those tools, type systems, test suites, formal logic, manual\n[00:23:42]\nQA, all those kinds of things, to make sure that we do things correctly."
    },
    {
      "type": "paragraph",
      "id": "aea8fb9fc8ccbb9f",
      "text": "[00:23:48]\nAnd also, even the processes, like the Agile movement is running your code in such a way,\n[00:23:57]\nor working in such a way, that you get better results out of it.\n[00:24:02]\nSo we do need to verify our results.\n[00:24:06]\nAnd we can't just use the results of the AI willy-nilly."
    },
    {
      "type": "paragraph",
      "id": "6ac326333d84cd2b",
      "text": "[00:24:11]\nI mean, we can, and people are.\n[00:24:13]\nI think that's actually kind of the norm.\n[00:24:16]\nIt's going to become increasingly common to see, sort of like, this is a really weird\n[00:24:21]\npiece of code.\n[00:24:22]\nDoes this even give the right results?\n[00:24:24]\nLike, oh, somebody just YOLOed this chat GPT or this copilot completion into the code and\n[00:24:32]\ncommitted it."
    },
    {
      "type": "paragraph",
      "id": "17d8f38739b38eff",
      "text": "[00:24:34]\nBut I mean, it's something very different from what we do today.\n[00:24:38]\nBecause in a lot of cases, we are still running code and with not a lot of tests in practice.\n[00:24:45]\nI feel like most people don't write enough tests, myself included.\n[00:24:50]\nSo this is just maybe strengthening the need for adding tests."
    },
    {
      "type": "paragraph",
      "id": "823ace371405d496",
      "text": "[00:24:59]\nOur role becomes more like verifying and guiding systems rather than like, I can write a line\n[00:25:07]\nof code.\n[00:25:08]\nThat's not the super valuable asset anymore."
    },
    {
      "type": "paragraph",
      "id": "f1b88078cf38792d",
      "text": "[00:25:12]\nBut I do feel like because it's going to be so easy to write code, and because you don't\n[00:25:16]\ngo through all the steps of writing good code, you're not going to do it as much.\n[00:25:22]\nFor instance, what you like to do, and myself as well, is to do things in a TDD style.\n[00:25:29]\nYou know, you start with a red test, and you change the code to make the test green, but\n[00:25:40]\nyou only change the code as much as necessary for that test to become green.\n[00:25:46]\nAnd then you continuously improve or complexify that function until it hits all the requirements."
    },
    {
      "type": "paragraph",
      "id": "89c86ba9fab7fbed",
      "text": "[00:25:54]\nBut if I ask the tool, hey, can you give me a function that does this?\n[00:26:00]\nWell, I probably won't have all the same tests that would have been the results."
    },
    {
      "type": "paragraph",
      "id": "b342d1caa09c31cd",
      "text": "[00:26:07]\nJust like running tests after the fact.\n[00:26:09]\nSo you can probably ask the tool to write tests, but do you want an AI to write your\n[00:26:16]\ntests?"
    },
    {
      "type": "paragraph",
      "id": "3ecdea720f9fc37b",
      "text": "[00:26:18]\nIt's kind of like, who monitors the police or whatever that sentence is."
    },
    {
      "type": "pagefold",
      "id": "a93a9b099b2fdc66",
      "text": "JSON Decoders"
    },
    {
      "type": "paragraph",
      "id": "91258a1ace863640",
      "text": "[00:26:42]\nDo we want to take JSON decoders for granted?\n[00:26:46]\nKind of like we kind of we want to be able to write them with a lot of flexibility, but\n[00:26:51]\nwe don't want to spend a lot of brainpower creating and maintaining them.\n[00:26:56]\nSo I mean, if they're verifiable, that's great.\n[00:27:01]\nIf we can continue to verify them, if we can, I mean, better still, if we can use something\n[00:27:08]\nlike GraphQL to make sure it stays in sync even better."
    },
    {
      "type": "paragraph",
      "id": "de4bdb2e40054024",
      "text": "[00:27:13]\nBut we don't really want to have to think too much about building and maintaining those\n[00:27:17]\nlow level details.\n[00:27:18]\nWe want that to just be like, given a decoder that works.\n[00:27:23]\nAnd so this is a very good thing to delegate to AI and in my opinion, and whereas like\n[00:27:29]\nsolve this complex problem that has a lot of edge cases, and a lot of like things to\n[00:27:36]\nconsider the use case, how do we want it to behave and stuff like these are the types\n[00:27:41]\nof things that I think our job as an engineer is still extremely relevant."
    },
    {
      "type": "paragraph",
      "id": "a8a9c2c9fb2b75a0",
      "text": "[00:27:46]\nThinking about the user experience.\n[00:27:48]\nAnd in my opinion, I think that engineering, these types of things are going to become\n[00:27:54]\na more important part of the job.\n[00:27:56]\nThinking about the user experience.\n[00:27:57]\nSure these AI systems can sort of do that, but we need like they can, we can tell them\n[00:28:03]\nthink about the user experience and think about these different use cases and think\n[00:28:09]\nabout that in the test suite you write."
    },
    {
      "type": "paragraph",
      "id": "92f57d526c976d79",
      "text": "[00:28:11]\nBut I think you want a human involved in really artisanally crafting user experiences and\n[00:28:18]\nuse cases.\n[00:28:20]\nAnd then you want to say, okay, now that I've figured these things out, here's a suite of\n[00:28:24]\ntests.\n[00:28:25]\nAnd if some AI thing can just satisfy those tests, maybe you're good, you know?"
    },
    {
      "type": "paragraph",
      "id": "ffc057b2d36a945f",
      "text": "[00:28:33]\nActually, one of the things that I tried with chat GPT three, so maybe it's better now,\n[00:28:39]\nbut I think my point was to hold is I told it, please write a function that satisfies\n[00:28:46]\nthese elm tests."
    },
    {
      "type": "paragraph",
      "id": "25d7c21f80650a52",
      "text": "[00:28:48]\nSo I wrote some tests and basically told it to write a function.\n[00:28:53]\nAnd it did so and it was pretty good, but it wasn't correct.\n[00:28:58]\nLike there were syntax errors, which I told it to fix."
    },
    {
      "type": "paragraph",
      "id": "e76759aeeba8fdba",
      "text": "[00:29:03]\nAnd when those were gone, well, the, the tests were not passing.\n[00:29:06]\nSome of them were, but not, not all of them."
    },
    {
      "type": "paragraph",
      "id": "f30d607e6598ccc1",
      "text": "[00:29:09]\nAnd the function that I needed was slightly a bit too complex to be such an easy function\n[00:29:16]\nto implement, as you said before."
    },
    {
      "type": "paragraph",
      "id": "64e64057ed104ed6",
      "text": "[00:29:19]\nSo basically the code that it wrote was pretty hard to read.\n[00:29:24]\nAnd so that means that, okay, I have something that I can use as a basis and that I need\n[00:29:29]\nto change to, to make the test pass the few failing tests pass."
    },
    {
      "type": "paragraph",
      "id": "67121f8e25a0b0e1",
      "text": "[00:29:34]\nBut because it was so complex, I was like, well, how do I make the test pass?\n[00:29:40]\nWell, to, to make the test pass, I need to change the code to change the code.\n[00:29:44]\nI need to understand the code."
    },
    {
      "type": "paragraph",
      "id": "e34c5697ad62b0a6",
      "text": "[00:29:46]\nSo how do we understand the code?\n[00:29:48]\nWell, if anything you've taught me is like, or other people in the agile community, like\n[00:29:55]\nyou can get an understanding of the code by changing the code, by doing refactoring techniques,"
    },
    {
      "type": "paragraph",
      "id": "86d7ccb0a6b4fd44",
      "text": "[00:30:03]\nso extracting variables, renaming things, changing how conditions work.\n[00:30:10]\nAnd as you do these steps, these tiny steps, because we like them, you start to get some\n[00:30:16]\ninsights into the code and then you can finally notice, oh, well, this is clearly wrong.\n[00:30:22]\nNow I know what I need to change."
    },
    {
      "type": "pagefold",
      "id": "610ee27053532961",
      "text": "Work with Legacy Code"
    },
    {
      "type": "paragraph",
      "id": "309e9d921995670b",
      "text": "[00:30:25]\nAnd the thing is that I find funny is that this is exactly how you work with legacy code.\n[00:30:30]\nBut this code is only a few seconds old or a few minutes old, which is like working with\n[00:30:37]\nlegacy is becoming even more relevant."
    },
    {
      "type": "paragraph",
      "id": "cc01f39d76366261",
      "text": "[00:30:41]\nEven this new code, which I find very odd and more interesting.\n[00:30:46]\nThat's a nice insight.\n[00:30:47]\nI like that."
    },
    {
      "type": "paragraph",
      "id": "b3235aad494c5449",
      "text": "[00:30:48]\nI think, I mean, I do think that we need to guide what kinds of results we want also with\n[00:30:56]\nthese steps, with prompt engineering and priming.\n[00:31:00]\nBut I think you're right that this does become a sort of process of creating some code that\n[00:31:07]\nwe can look at its behavior, we can see, we can get a test around it and see that the\n[00:31:12]\ntest is passing and verify it, but then not really understand the code and need to do\n[00:31:17]\nthat process of refactoring to get clarity and get it in the way that fits our mental\n[00:31:22]\nmodel or gets away complexity."
    },
    {
      "type": "paragraph",
      "id": "23743c372df71255",
      "text": "[00:31:26]\nBut also like we can say, you know, here's a unit test, make this, like write some code\n[00:31:35]\nthat makes this test pass.\n[00:31:37]\nAnd we can do some prompt engineering that says, do that using the simplest thing that\n[00:31:42]\ncould possibly work.\n[00:31:44]\nHere's an example of the simplest thing that could possibly work."
    },
    {
      "type": "paragraph",
      "id": "3548b083cac09171",
      "text": "[00:31:47]\nIn this test, there's this error message that the test is giving and you write this thing\n[00:31:52]\nthat, okay, sorting a list, it returns the hard-coded list and it makes it green.\n[00:31:58]\nAnd that's the simplest way it could make that work."
    },
    {
      "type": "paragraph",
      "id": "fed36a7b2cf08bfb",
      "text": "[00:32:01]\nSo you can actually illustrate that with examples.\n[00:32:04]\nYou can write very long prompts and you can get it to do a sort of fake it till you make\n[00:32:11]\nit style process that you can actually understand.\n[00:32:15]\nSo you can get it to like follow the kind of process you would follow and it totally\n[00:32:20]\nchanges the results you get."
    },
    {
      "type": "paragraph",
      "id": "257514e02eff7c91",
      "text": "[00:32:22]\nAnd if you've, in addition to that, connect it to test output and compiler output so it\n[00:32:27]\ncan iterate on that, you can actually like automate some of those things, which starts\n[00:32:32]\nto become very interesting."
    },
    {
      "type": "paragraph",
      "id": "7d319d5c6d72b16a",
      "text": "[00:32:33]\nI'm wondering whether that would have the same effect in the sense that if I don't see,\n[00:32:40]\nif I do this and I only see the end results, which is kind of the point, well, will I have\n[00:32:46]\nan insight into how this function works because I didn't write it."
    },
    {
      "type": "paragraph",
      "id": "f440cdb568cb9c6e",
      "text": "[00:32:50]\nSo now it's just like someone else's code.\n[00:32:52]\nAnd again, if I need to change it, then I need to go through all those refactoring steps\n[00:32:57]\nor making it easier to understand for myself or just go read it well.\n"
    },
    {
      "type": "paragraph",
      "id": "4b6005869fd388a5",
      "text": "[00:33:05]\nBut definitely the thing that I will keep in mind is that all these techniques about\n[00:33:12]\nrunning good code, they will stay relevant."
    },
    {
      "type": "paragraph",
      "id": "955b5b145e182202",
      "text": "[00:33:15]\nSo if I don't want to lose my job, this is the kind of things that I can maybe should\n[00:33:21]\nfocus on because I think that these will stay relevant."
    },
    {
      "type": "paragraph",
      "id": "6d418e5f65ac821c",
      "text": "[00:33:25]\nMaybe my whole job will be removed.\n[00:33:27]\nMaybe I will get fired if it has become way too good.\n[00:33:31]\nBut maybe my chances of not being fired increase if I am one of those who are better at these\n[00:33:37]\ntasks."
    },
    {
      "type": "pagefold",
      "id": "288bc0fde2d03688",
      "text": "What Do I Want to Be Atomic?"
    },
    {
      "type": "paragraph",
      "id": "29c6814edfa63220",
      "text": "[00:33:40]\nAnd one of the things that keeps coming up for me is like, what do I want to be [[atomic]]?\n[00:33:45]\nLike there's a certain philosophy of using tools that I've arrived at through a lot of craftsmanship principles and TDD and things like that, which is like, I don't want tools that I can partially trust and I don't want tools that give me partial results. >> atomic"
    },
    {
      "type": "paragraph",
      "id": "d46753231b26b571",
      "text": "[00:34:04]\nI want tools that I can completely trust and that allow me to take a set of low level steps,\n[00:34:12]\nbut think of them as one high level step.\n[00:34:15]\nSo to me, that's the question."
    },
    {
      "type": "paragraph",
      "id": "ee8b6771100fae84",
      "text": "[00:34:16]\nNow, in the case of making a red test green and a TDD step, for example, like do the simplest thing that could possibly work."
    },
    {
      "type": "paragraph",
      "id": "e9f1dcfa76503f02",
      "text": "[00:34:26]\nWhat if that was an atomic step I could take for granted?\n[00:34:30]\nThat instead of a set of low level steps, I will look at the code, I will hard code the return value, I will create a new module with the name that's failing. It says could not find module of this name. I will create that module.\n[00:34:43]\nI will create a function of the name that the error message in the failing test says\n[00:34:48]\nis missing. >> atomic"
    },
    {
      "type": "paragraph",
      "id": "58e6536d179b8190",
      "text": "[00:34:49]\nI will write a type annotation that satisfies the compiler and return an empty value and\n[00:34:56]\nhave a failing test.\n[00:34:58]\nAnd then to make it green, I will change that empty value to a hard coded value that makes\n[00:35:03]\nthe test green."
    },
    {
      "type": "paragraph",
      "id": "1fe7ac0b1f16558c",
      "text": "[00:35:05]\nWhat if I could just take that for granted and say, hey, computer, do that step, do that\n[00:35:09]\nTDD step to make it red and then make it green in the simplest way possible.\n[00:35:13]\nAnd I could take that for granted and then I can take it from there.\n[00:35:15]\nThat would be great."
    },
    {
      "type": "pagefold",
      "id": "cb41b8a4f3df0f97",
      "text": "Guard Rail"
    },
    {
      "type": "paragraph",
      "id": "b2209320c2084baf",
      "text": "[00:35:16]\nAnd then that's something I can fully trust and I can sort of verify it.\n[00:35:22]\nAnd so another principle I've been thinking about in sort of like designing these prompts\n[00:35:27]\nand these workflows using AI tools is guardrails."
    },
    {
      "type": "paragraph",
      "id": "9cf30ee00000ec9c",
      "text": "[00:35:31]\nSo like not only verifying something at the end that it did the correct thing because\n[00:35:37]\nyou can run the Elm compiler, you can."
    },
    {
      "type": "paragraph",
      "id": "eaa63f683f93a07f",
      "text": "[00:35:39]\nBut along the way, if you can say, OK, like, for example, you can create a new module and\n[00:35:46]\na new function, but you can't touch any other code and you can't touch the test.\n[00:35:53]\nThe test has to remain the same and the test must succeed at the end.\n[00:35:56]\nYou sort of set up guardrails and you say, listen, if the AI given these guardrails can\n[00:36:03]\ngive me a result that satisfies all these criteria by the end of it, then if it does\n[00:36:09]\nthat, I can verify that it gave me what I wanted and I can fully trust it."
    },
    {
      "type": "paragraph",
      "id": "bee2e896d6c9c74c",
      "text": "[00:36:14]\nThose are the types of tools that I want."
    },
    {
      "type": "paragraph",
      "id": "983e77dbf9d07619",
      "text": "[00:36:16]\nSo one thing that I was really amazed by, I'll share a link to this tweet, but I saw\n[00:36:23]\nthis demo where this was actually with GPT-3, but this example stuck with me where somebody\n[00:36:31]\nwas finding that GPT-3 did a poor job if you asked it questions that went through sort\n[00:36:38]\nof several steps."
    },
    {
      "type": "paragraph",
      "id": "c4d44b0f8186c24e",
      "text": "[https://mobile.twitter.com/simonw/status/1577785656238960640 Tweet] showing intermediary questions prompt engineering technique [https://github.com/ofirpress/self-ask github], [https://arxiv.org/abs/2210.03350 arxiv]\n "
    },
    {
      "type": "video",
      "id": "9048c9f533824bd4",
      "text": "YOUTUBE A3GtlwwWDhI\nThe Compositionality Gap Explained (with GPT-3)"
    },
    {
      "type": "paragraph",
      "id": "9f840fe74dbb6322",
      "text": "compositional questions ⇒ [[Compositionality Gap]]"
    },
    {
      "type": "pagefold",
      "id": "b67786df01b86a72",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "3a5796bfc0b50443",
      "text": "PRESS, Ofir, ZHANG, Muru, MIN, Sewon, SCHMIDT, Ludwig, SMITH, Noah A. and LEWIS, Mike, 2022. Measuring and Narrowing the Compositionality Gap in Language Models. Online. 7 October 2022. arXiv. arXiv:2210.03350. [Accessed 19 April 2023]. \n"
    },
    {
      "type": "pagefold",
      "id": "e8e4ad7018eb6b58",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "9341adfb8588666c",
      "site": "wiki.ralfbarkow.ch",
      "slug": "compositionality-gap",
      "title": "Compositionality Gap",
      "text": "Can we get strong guarantees from AI tools that are known to hallucinate? We discuss some strategies, and ways that [[Elm]] might be a great target for AI assistance."
    },
    {
      "type": "paragraph",
      "id": "6507b979bc039c68",
      "text": "[00:56:29]\nBut I think that they're getting enough mileage solving problems through this sort of predictive\n[00:56:36]\ntext, that they're going to keep going with that.\n[00:56:39]\nBut I think the interesting intersection, especially with typed pure functional programming\n[00:56:46]\nlanguages is if you, so humans have their role, these sort of like compiler tools and\n[00:56:55]\nstatic analysis tools have their role, and these AI tools have their role."
    },
    {
      "type": "pagefold",
      "id": "6dcc61881d16a11e",
      "text": "Trifecta"
    },
    {
      "type": "paragraph",
      "id": "7ee9d38e880c4b2d",
      "text": "[00:56:59]\nSo with this [[Trifecta]], I think each of these pieces needs to do what it is best at.\n[00:57:06]\nCompilers are good at verifying things.\n[00:57:08]\nHumans are good at, do we even need humans anymore?\n[00:57:15]\nHumans are good at critically thinking, guiding these tools.\n[00:57:20]\nHumans have goals.\n[00:57:24]\nHumans are good at gathering requirements."
    },
    {
      "type": "paragraph",
      "id": "0532c00a5e8511c5",
      "text": "chat.openai: Trifecta is a term used in various contexts to refer to a sequence of three events, actions, or elements that occur together or are grouped together.\n\nIn horse racing, a trifecta is a type of bet in which a bettor selects the first three finishers of a race in the correct order.\n\nIn politics, a trifecta is a situation where a single political party holds the majority in all three branches of government: the executive, legislative, and judicial branches.\n\nIn sports, a trifecta can refer to a player or team achieving three major accomplishments in a single game or season, such as hitting a home run, stealing a base, and making a great defensive play in baseball.\n\nOverall, trifecta is a versatile term that can refer to any three related or significant things that occur together or are grouped together."
    },
    {
      "type": "pagefold",
      "id": "b84ea46beb5936e0",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "12f0dc87a70e9ced",
      "text": "⇒ [[Trifecta]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Role-Playing",
        "story": []
      },
      "date": 1681922201732
    },
    {
      "id": "eaa1eabf9dbe461f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "eaa1eabf9dbe461f",
        "text": "Can we get strong guarantees from AI tools that are known to hallucinate? We discuss some strategies, and ways that [[Elm]] might be a great target for AI assistance."
      },
      "attribution": {
        "page": "Elm and AI"
      },
      "date": 1681922204868
    },
    {
      "id": "0c7f5903c3db90c2",
      "type": "add",
      "item": {
        "type": "audio",
        "id": "0c7f5903c3db90c2",
        "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/d1c5f97c-9700-48b0-ab35-a039edbfd0d5/audio/16dc506d-5aa1-42c1-8838-9ffaa3e0e1e9/default_tc.mp3\nelm radio – 080: Elm and AI [https://elm-radio.com/episode/elm-and-ai/ page]"
      },
      "after": "eaa1eabf9dbe461f",
      "attribution": {
        "page": "Elm and AI"
      },
      "date": 1681922207389
    },
    {
      "id": "5d1685e6c4d05464",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5d1685e6c4d05464",
        "text": "[00:14:04]\nYeah, I mean, I think writing skills have been valuable for a long time, but this unlocks\n[00:14:11]\na whole new set of things you can do, including engineering with your writing.\n[00:14:15]\nAnd it really is like, I mean, if you think about what these prompts are doing, like the\n[00:14:20]\nway that they work is they're based on the context they're given, they're sort of like\n[00:14:26]\nrole playing with that context, essentially, because their basic premise is given like\n[00:14:33]\nthis context, what's likely to follow it, right?"
      },
      "after": "0c7f5903c3db90c2",
      "attribution": {
        "page": "Prompt Engineering"
      },
      "date": 1681922701801
    },
    {
      "id": "5848c20ec7ee962e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5848c20ec7ee962e",
        "text": "[00:14:36]\nSo if you write in a certain style, it is going to be more likely to follow with a certain\n[00:14:42]\nstyle.\n[00:14:43]\nIf you write in a style that sounds very much like a scientific paper, a scientific journal\n[00:14:48]\npublication, and you write about your method for your study and all these things, it's\n[00:14:57]\nprobably going to give you more rigorous results.\n[00:15:00]\nAnd it's probably going to do the things that it's seen by gathering information from a\n[00:15:06]\nbunch of scientific journals, like coming up with a rigorous method and talking about\n[00:15:11]\nwhatever, like counterbalancing, you know, addressing particular concerns and stuff.\n[00:15:16]\nSo like, you have to really get it to role play to solve the problem you want it to solve,\n[00:15:22]\nto be like the smartest thing to address the problem you want."
      },
      "after": "5d1685e6c4d05464",
      "attribution": {
        "page": "Prompt Engineering"
      },
      "date": 1681922703803
    },
    {
      "type": "edit",
      "id": "5d1685e6c4d05464",
      "item": {
        "type": "paragraph",
        "id": "5d1685e6c4d05464",
        "text": "[00:14:04]\n[…] I think writing skills have been valuable for a long time, but this unlocks\n[00:14:11]\na whole new set of things you can do, including engineering with your writing.\n[00:14:15]\nAnd it really is like, I mean, if you think about what these prompts are doing, like the\n[00:14:20]\nway that they work is they're based on the context they're given, they're sort of like\n[00:14:26]\nrole playing with that context, essentially, because their basic premise is given like\n[00:14:33]\nthis context, what's likely to follow it, right?"
      },
      "date": 1681922716397
    },
    {
      "type": "edit",
      "id": "5d1685e6c4d05464",
      "item": {
        "type": "paragraph",
        "id": "5d1685e6c4d05464",
        "text": "[00:14:04]\n[…] writing skills have been valuable for a long time, but this unlocks\n[00:14:11]\na whole new set of things you can do, including engineering with your writing.\n[00:14:15]\nAnd it really is like, I mean, if you think about what these prompts are doing, like the\n[00:14:20]\nway that they work is they're based on the context they're given, they're sort of like\n[00:14:26]\nrole playing with that context, essentially, because their basic premise is given like\n[00:14:33]\nthis context, what's likely to follow it, right?"
      },
      "date": 1681922796034
    },
    {
      "type": "edit",
      "id": "5d1685e6c4d05464",
      "item": {
        "type": "paragraph",
        "id": "5d1685e6c4d05464",
        "text": "[00:14:04]\n[…] writing skills have been valuable for a long time, but this unlocks\n[00:14:11]\na whole new set of things you can do, including engineering with your writing.\n[00:14:15]\nAnd it really is like, I mean, if you think about what these prompts are doing, like the\n[00:14:20]\nway that they work is they're based on the context they're given, they're sort of like\n[00:14:26]\nrole playing with that context, essentially, because their basic premise is given like\n[00:14:33]\nthis context, what's likely to follow it, right? >> context role play"
      },
      "date": 1681922830678
    },
    {
      "type": "edit",
      "id": "5d1685e6c4d05464",
      "item": {
        "type": "paragraph",
        "id": "5d1685e6c4d05464",
        "text": "[00:14:04]\n[…] writing skills have been valuable for a long time, but this unlocks\n[00:14:11]\na whole new set of things you can do, including engineering with your writing.\n[00:14:15]\nAnd it really is like, I mean, if you think about what these prompts are doing, like the\n[00:14:20]\nway that they work is they're based on the [[Context]] they're given, they're sort of like\n[00:14:26]\nrole playing with that context, essentially, because their basic premise is given like\n[00:14:33]\nthis context, what's likely to follow it, right? >> context role play"
      },
      "date": 1681922841700
    },
    {
      "item": {
        "type": "factory",
        "id": "33cd21e0f706043f"
      },
      "id": "33cd21e0f706043f",
      "type": "add",
      "after": "5848c20ec7ee962e",
      "date": 1681922886924
    },
    {
      "type": "edit",
      "id": "33cd21e0f706043f",
      "item": {
        "type": "paragraph",
        "id": "33cd21e0f706043f",
        "text": "[00:15:27]\nAnd that's where nerds come into play again.\n[00:15:30]\nYes, totally.\n[00:15:32]\nBecause we kind of get that.\n[00:15:34]\nIt's not just like some magic box to us, like we kind of can understand how it could synthesize\n[00:15:40]\ninformation so we need to give it useful context for that."
      },
      "date": 1681922888431
    },
    {
      "item": {
        "type": "factory",
        "id": "2aa07e85ecbea61d"
      },
      "id": "2aa07e85ecbea61d",
      "type": "add",
      "after": "33cd21e0f706043f",
      "date": 1681922899502
    },
    {
      "type": "edit",
      "id": "2aa07e85ecbea61d",
      "item": {
        "type": "paragraph",
        "id": "2aa07e85ecbea61d",
        "text": "[00:15:44]\nNow I was thinking like, people play Dungeons and Dragons.\n[00:15:48]\nOh, that too.\n[00:15:49]\nOr used to role playing.\n[00:15:52]\nYeah, very true."
      },
      "date": 1681922901129
    },
    {
      "item": {
        "type": "factory",
        "id": "feb885dcf1189f73"
      },
      "id": "feb885dcf1189f73",
      "type": "add",
      "after": "2aa07e85ecbea61d",
      "date": 1681922932297
    },
    {
      "type": "edit",
      "id": "feb885dcf1189f73",
      "item": {
        "type": "paragraph",
        "id": "feb885dcf1189f73",
        "text": "[00:15:55]\nYeah, so like, I think priming it with good context is one thing that I've been thinking\n[00:16:02]\nabout as I've been playing with it.\n[00:16:04]\nAnd another thing I think about is like, is like how verifiable is the problem you're\n[00:16:11]\ngiving it?"
      },
      "date": 1681922933815
    },
    {
      "type": "edit",
      "id": "feb885dcf1189f73",
      "item": {
        "type": "paragraph",
        "id": "feb885dcf1189f73",
        "text": "[00:15:55]\nYeah, so like, I think priming it with good context is one thing that I've been thinking\n[00:16:02]\nabout as I've been playing with it.\n"
      },
      "date": 1681923013517
    },
    {
      "type": "add",
      "id": "1fefcce7a612507b",
      "item": {
        "type": "paragraph",
        "id": "1fefcce7a612507b",
        "text": "[00:16:04]\nAnd another thing I think about is like, is like how verifiable is the problem you're\n[00:16:11]\ngiving it?"
      },
      "after": "feb885dcf1189f73",
      "date": 1681923015012
    },
    {
      "item": {
        "type": "factory",
        "id": "5876a332943c6aec"
      },
      "id": "5876a332943c6aec",
      "type": "add",
      "after": "1fefcce7a612507b",
      "date": 1681923047389
    },
    {
      "type": "edit",
      "id": "5876a332943c6aec",
      "item": {
        "type": "paragraph",
        "id": "5876a332943c6aec",
        "text": "[00:16:28]\nI'm not like giving it a specific problem to solve.\n[00:16:31]\nI'm not giving it a problem that I can verify that I've gotten the answer.\n[00:16:37]\nSo if I give it some like an elm problem, and I have a way to check.\n[00:16:45]\nSo like there are certain problems where it's difficult to find an answer, but it's easy\n[00:16:52]\nto know that the answer is correct once you have it.\n[00:16:56]\nNP problems.\n[00:16:57]\nIs that the term?\n[00:16:58]\nNo, but you know, P equals NP.\n[00:17:02]\nI never quite got that."
      },
      "date": 1681923054282
    },
    {
      "type": "edit",
      "id": "5876a332943c6aec",
      "item": {
        "type": "paragraph",
        "id": "5876a332943c6aec",
        "text": "[00:16:28]\nI'm not like giving it a specific problem to solve.\n[00:16:31]\nI'm not giving it a problem that I can verify that I've gotten the answer.\n[00:16:37]\nSo if I give it some like an elm problem, and I have a way to check.\n[00:16:45]\nSo like there are certain problems where it's difficult to find an answer, but it's easy\n[00:16:52]\nto know that the answer is correct once you have it.\n"
      },
      "date": 1681923063684
    },
    {
      "type": "add",
      "id": "083a96920828146d",
      "item": {
        "type": "paragraph",
        "id": "083a96920828146d",
        "text": "[00:16:56]\nNP problems.\n[00:16:57]\nIs that the term?\n[00:16:58]\nNo, but you know, P equals NP.\n[00:17:02]\nI never quite got that."
      },
      "after": "5876a332943c6aec",
      "date": 1681923064277
    },
    {
      "item": {
        "type": "factory",
        "id": "2bedf25e3e797bf3"
      },
      "id": "2bedf25e3e797bf3",
      "type": "add",
      "after": "083a96920828146d",
      "date": 1681923079694
    },
    {
      "type": "edit",
      "id": "2bedf25e3e797bf3",
      "item": {
        "type": "paragraph",
        "id": "2bedf25e3e797bf3",
        "text": "[00:17:16]\nI guess like things like the traveling salesman problem you like would be an example of that,\n[00:17:21]\nright?\n[00:17:22]\nAnd then yeah, that's an NP problem."
      },
      "date": 1681923081164
    },
    {
      "item": {
        "type": "factory",
        "id": "b0b3f3e15468c504"
      },
      "id": "b0b3f3e15468c504",
      "type": "add",
      "after": "2bedf25e3e797bf3",
      "date": 1681923125041
    },
    {
      "type": "edit",
      "id": "b0b3f3e15468c504",
      "item": {
        "type": "paragraph",
        "id": "b0b3f3e15468c504",
        "text": "[00:17:23]\nYou can tell if you have a solution and it does fit an optimal [[Path]], it's easy to tell,\n[00:17:29]\nbut it's not easy to derive an optimal path, something like that.\n[00:17:33]\nYeah, almost.\n[00:17:35]\nYou know whether the solution that is given is a solution because you can check it and\n[00:17:39]\nthe checking is pretty easy.\n[00:17:41]\nBut knowing whether it's optimal is extremely hard.\n[00:17:45]\nI see. >> path"
      },
      "date": 1681923149576
    },
    {
      "item": {
        "type": "factory",
        "id": "572b9bab977e74ba"
      },
      "id": "572b9bab977e74ba",
      "type": "add",
      "after": "b0b3f3e15468c504",
      "date": 1681923192862
    },
    {
      "type": "edit",
      "id": "572b9bab977e74ba",
      "item": {
        "type": "paragraph",
        "id": "572b9bab977e74ba",
        "text": "[00:17:48]\nSo like, is this the most optimal solution?\n[00:17:51]\nWell, to check that you would need to check all other solutions.\n[00:17:55]\nAnd it's easy to if you find a counter example, then yes, you know, it's not the most optimal\n[00:18:00]\none, but to know that whether it is indeed the most optimal one, you're going to have\n[00:18:05]\nto check everything.\n[00:18:06]\nAnd that's, that's extremely expensive.\n[00:18:08]\nRight, exactly."
      },
      "date": 1681923195365
    },
    {
      "item": {
        "type": "factory",
        "id": "0a369bf0519b9854"
      },
      "id": "0a369bf0519b9854",
      "type": "add",
      "after": "572b9bab977e74ba",
      "date": 1681923214787
    },
    {
      "type": "edit",
      "id": "0a369bf0519b9854",
      "item": {
        "type": "paragraph",
        "id": "0a369bf0519b9854",
        "text": "[00:18:10]\nSo I think like, to me, that's the type of mindset for finding good ways to use these\n[00:18:15]\ntools to automate our coding."
      },
      "date": 1681923217675
    },
    {
      "item": {
        "type": "factory",
        "id": "030200450fc6f723"
      },
      "id": "030200450fc6f723",
      "type": "add",
      "after": "0a369bf0519b9854",
      "date": 1681923233880
    },
    {
      "type": "edit",
      "id": "030200450fc6f723",
      "item": {
        "type": "pagefold",
        "id": "030200450fc6f723",
        "text": "~"
      },
      "date": 1681923237597
    },
    {
      "item": {
        "type": "factory",
        "id": "d372f72a33d4b3a9"
      },
      "id": "d372f72a33d4b3a9",
      "type": "add",
      "after": "030200450fc6f723",
      "date": 1681923238842
    },
    {
      "type": "edit",
      "id": "d372f72a33d4b3a9",
      "item": {
        "type": "reference",
        "id": "d372f72a33d4b3a9",
        "site": "ward.dojo.fed.wiki",
        "slug": "automation-as-team-player",
        "title": "Automation as Team Player",
        "text": "Ten challenges for making"
      },
      "date": 1681923245570
    },
    {
      "type": "edit",
      "id": "d372f72a33d4b3a9",
      "item": {
        "type": "reference",
        "id": "d372f72a33d4b3a9",
        "site": "ward.dojo.fed.wiki",
        "slug": "automation-as-team-player",
        "title": "Automation as Team Player",
        "text": "⇒ [[Collaborative Automation]]"
      },
      "date": 1681923277160
    },
    {
      "item": {
        "type": "factory",
        "id": "171e0bc03b344c94"
      },
      "id": "171e0bc03b344c94",
      "type": "add",
      "after": "d372f72a33d4b3a9",
      "date": 1681923613821
    },
    {
      "type": "edit",
      "id": "171e0bc03b344c94",
      "item": {
        "type": "pagefold",
        "id": "171e0bc03b344c94",
        "text": "~"
      },
      "date": 1681923617571
    },
    {
      "item": {
        "type": "factory",
        "id": "242c0d412f0a9839"
      },
      "id": "242c0d412f0a9839",
      "type": "add",
      "after": "171e0bc03b344c94",
      "date": 1681923619097
    },
    {
      "type": "edit",
      "id": "242c0d412f0a9839",
      "item": {
        "type": "paragraph",
        "id": "242c0d412f0a9839",
        "text": "[00:18:18]\nAlso like, like you mentioned, finding a counter example in the traveling salesman problem\n[00:18:24]\nis easy to verify because you just check how many nodes it traverses or whatever, right?\n[00:18:30]\nAnd it's, is the number smaller, right?\n[00:18:33]\nSo that's a very cheap operation to test a counter example.\n[00:18:38]\nSo if you know, so, so if you're able to like, get, let's say you try to prompt the, you\n[00:18:46]\nknow, write a prompt engineering prompt for chat GPT to solve the traveling salesman problem\n[00:18:52]\nfor something and you set it up and you prime it with some context and you like, you found\n[00:18:58]\none solution, but now it needs to find a better path.\n[00:19:03]\nAnd if it, if it gives you a more optimal path, then you're done."
      },
      "date": 1681923620738
    },
    {
      "item": {
        "type": "factory",
        "id": "3784d9a714427600"
      },
      "id": "3784d9a714427600",
      "type": "add",
      "after": "242c0d412f0a9839",
      "date": 1681923636219
    },
    {
      "type": "edit",
      "id": "3784d9a714427600",
      "item": {
        "type": "paragraph",
        "id": "3784d9a714427600",
        "text": "[00:19:07]\nYou can easily verify that and you can say, you know that it provided you with something\n[00:19:13]\nvaluable because you can easily verify that it's a valid solution and a more optimal solution."
      },
      "date": 1681923637527
    },
    {
      "item": {
        "type": "factory",
        "id": "39bb2c1803c4e644"
      },
      "id": "39bb2c1803c4e644",
      "type": "add",
      "after": "3784d9a714427600",
      "date": 1681923701179
    },
    {
      "type": "edit",
      "id": "39bb2c1803c4e644",
      "item": {
        "type": "paragraph",
        "id": "39bb2c1803c4e644",
        "text": "[00:19:21]\nSo the, there, this class of problems that is easy and cheap to verify that it's valuable\n[00:19:29]\nis the kind of thing that where I find it to be a very interesting space.\n[00:19:34]\nAnd I think that Elm is very well suited to this type of problem.\n[00:19:37]\nSo like one very simple example, like if you, if you want to write a JSON decoder and now\n[00:19:46]\nanother consideration here is like what inputs can we feed it to prime it to give, to give\n[00:19:52]\nus better results."
      },
      "date": 1681923702731
    },
    {
      "item": {
        "type": "factory",
        "id": "38d87e3726c11a19"
      },
      "id": "38d87e3726c11a19",
      "type": "add",
      "after": "39bb2c1803c4e644",
      "date": 1681923722341
    },
    {
      "type": "edit",
      "id": "38d87e3726c11a19",
      "item": {
        "type": "paragraph",
        "id": "38d87e3726c11a19",
        "text": "[00:19:55]\nSo that, so we want to give it like prime it with good context and we want to have verifiable\n[00:20:02]\noutput.\n[00:20:03]\nI've also been thinking about like that verification through a feedback cycle.\n[00:20:08]\nSo iterating on that verification becomes interesting."
      },
      "date": 1681923724029
    },
    {
      "item": {
        "type": "factory",
        "id": "ed104e99732cfc5c"
      },
      "id": "ed104e99732cfc5c",
      "type": "add",
      "after": "38d87e3726c11a19",
      "date": 1681923743717
    },
    {
      "type": "edit",
      "id": "ed104e99732cfc5c",
      "item": {
        "type": "paragraph",
        "id": "ed104e99732cfc5c",
        "text": "[00:20:12]\nIf you use the open AI APIs, you can automate this process where you can test these results.\n[00:20:20]\nSo you, and then you can even give it information like Elm compiler output or did a JSON decoder\n[00:20:26]\nsucceed."
      },
      "date": 1681923748704
    },
    {
      "item": {
        "type": "factory",
        "id": "a021009cc09592ff"
      },
      "id": "a021009cc09592ff",
      "type": "add",
      "after": "ed104e99732cfc5c",
      "date": 1681923774678
    },
    {
      "type": "edit",
      "id": "a021009cc09592ff",
      "item": {
        "type": "paragraph",
        "id": "a021009cc09592ff",
        "text": "[00:20:27]\nSo if you, for example, you're trying to solve the problem of, I want to write a JSON decoder\n[00:20:32]\nand you either have like a curl command to run to hidden API or some JSON example of\n[00:20:39]\nwhat the API gives you, for example, that's your input.\n[00:20:43]\nYou prime it with that."
      },
      "date": 1681923775890
    },
    {
      "item": {
        "type": "factory",
        "id": "d4ba7bf93643a771"
      },
      "id": "d4ba7bf93643a771",
      "type": "add",
      "after": "a021009cc09592ff",
      "date": 1681923833081
    },
    {
      "type": "edit",
      "id": "d4ba7bf93643a771",
      "item": {
        "type": "paragraph",
        "id": "d4ba7bf93643a771",
        "text": "[00:20:44]\nYou can even prime it with like a prompt that helps step you through that process to, to\n[00:20:51]\ngive you higher quality output, but then you can verify that.\n[00:20:54]\nSo you say your job is to write a JSON decoder.\n[00:20:58]\nIt needs to decode into this Elm type and it needs at the end, it needs to give me a\n[00:21:05]\ncompiling JSON decoder of this type and it needs to successfully decode given this input.\n[00:21:12]\nThat's all verifiable."
      },
      "date": 1681923834729
    },
    {
      "item": {
        "type": "factory",
        "id": "01f0fa3d9cfda3f6"
      },
      "id": "01f0fa3d9cfda3f6",
      "type": "add",
      "after": "d4ba7bf93643a771",
      "date": 1681923883850
    },
    {
      "type": "edit",
      "id": "01f0fa3d9cfda3f6",
      "item": {
        "type": "paragraph",
        "id": "01f0fa3d9cfda3f6",
        "text": "[00:21:14]\nSo if it gives you garbage or hallucinate something, or it gives you invalid syntax,\n[00:21:18]\nyou can even tell it and it can iterate on that.\n[00:21:21]\nAnd you can kind of reduce the amount of noise.\n[00:21:24]\nBecause I don't want to hear about hallucinations from AI.\n[00:21:28]\nSo you know, like before I mentioned like how much we want guarantees, not like somewhat\n[00:21:34]\nhigh confidence.\n[00:21:35]\nI want guarantees."
      },
      "date": 1681923885314
    },
    {
      "item": {
        "type": "factory",
        "id": "99d0dfe8b2a35390"
      },
      "id": "99d0dfe8b2a35390",
      "type": "add",
      "after": "01f0fa3d9cfda3f6",
      "date": 1681923901187
    },
    {
      "type": "edit",
      "id": "99d0dfe8b2a35390",
      "item": {
        "type": "paragraph",
        "id": "99d0dfe8b2a35390",
        "text": "[00:21:37]\nBut if we can throw away anything that's garbage and only get signal, no noise, then we can\n[00:21:44]\ndo really interesting things.\n[00:21:46]\nAnd Elm is really good for that."
      },
      "date": 1681923902682
    },
    {
      "item": {
        "type": "factory",
        "id": "9eeda3868cc807c2"
      },
      "id": "9eeda3868cc807c2",
      "type": "add",
      "after": "99d0dfe8b2a35390",
      "date": 1681923930631
    },
    {
      "type": "edit",
      "id": "9eeda3868cc807c2",
      "item": {
        "type": "paragraph",
        "id": "9eeda3868cc807c2",
        "text": "[00:21:48]\nYou would like to have a system where you skip the intermediate steps of saying, telling,\n[00:21:52]\nhey, this is wrong, because this doesn't compile.\n[00:21:55]\nSo here's some source code.\n[00:21:58]\nHere's my request.\n[00:21:59]\nAnd then there's some back and forth between the Elm compiler, for instance, and the system,\n[00:22:05]\nthe AI."
      },
      "date": 1681923932262
    },
    {
      "item": {
        "type": "factory",
        "id": "2b7531f9cf8fb625"
      },
      "id": "2b7531f9cf8fb625",
      "type": "add",
      "after": "9eeda3868cc807c2",
      "date": 1681923945069
    },
    {
      "type": "edit",
      "id": "2b7531f9cf8fb625",
      "item": {
        "type": "paragraph",
        "id": "2b7531f9cf8fb625",
        "text": "[00:22:06]\nAnd then you only get to know the ending result.\n[00:22:09]\nExactly."
      },
      "date": 1681923946488
    },
    {
      "item": {
        "type": "factory",
        "id": "f9a3a03e2232d907"
      },
      "id": "f9a3a03e2232d907",
      "type": "add",
      "after": "2b7531f9cf8fb625",
      "date": 1681923964557
    },
    {
      "type": "edit",
      "id": "f9a3a03e2232d907",
      "item": {
        "type": "paragraph",
        "id": "f9a3a03e2232d907",
        "text": "[00:22:11]\nAnd then it's like a proven result.\n[00:22:14]\nIt's a guarantee at that point."
      },
      "date": 1681923965857
    },
    {
      "item": {
        "type": "factory",
        "id": "cda8e78d8d34cec4"
      },
      "id": "cda8e78d8d34cec4",
      "type": "add",
      "after": "f9a3a03e2232d907",
      "date": 1681923994344
    },
    {
      "type": "edit",
      "id": "cda8e78d8d34cec4",
      "item": {
        "type": "paragraph",
        "id": "cda8e78d8d34cec4",
        "text": "[00:22:15]\nSo this is kind of the cool thing is like, with a little bit of glue and a little bit\n[00:22:22]\nof piecing things together, a little bit of allowing it to iterate and get feedback and\n[00:22:27]\nadapt based on that feedback, which is actually like GPT-4 is very good at this.\n[00:22:32]\nYou can get guarantees, you can get guaranteed safe tools, especially with Elm."
      },
      "date": 1681923995861
    },
    {
      "item": {
        "type": "factory",
        "id": "831f15916c32dd6b"
      },
      "id": "831f15916c32dd6b",
      "type": "add",
      "after": "cda8e78d8d34cec4",
      "date": 1681924036809
    },
    {
      "type": "edit",
      "id": "831f15916c32dd6b",
      "item": {
        "type": "paragraph",
        "id": "831f15916c32dd6b",
        "text": "[00:22:41]\nBut I'm guessing, or at least whenever you say verifying the results, I'm thinking of\n[00:22:46]\nthe Elm compiler.\n[00:22:47]\nBut I'm also thinking of writing tests, you know."
      },
      "date": 1681924038378
    },
    {
      "item": {
        "type": "factory",
        "id": "a0e9017c8050fd34"
      },
      "id": "a0e9017c8050fd34",
      "type": "add",
      "after": "831f15916c32dd6b",
      "date": 1681924061759
    },
    {
      "id": "a0e9017c8050fd34",
      "type": "move",
      "order": [
        "eaa1eabf9dbe461f",
        "0c7f5903c3db90c2",
        "5d1685e6c4d05464",
        "5848c20ec7ee962e",
        "33cd21e0f706043f",
        "2aa07e85ecbea61d",
        "feb885dcf1189f73",
        "1fefcce7a612507b",
        "5876a332943c6aec",
        "083a96920828146d",
        "2bedf25e3e797bf3",
        "b0b3f3e15468c504",
        "572b9bab977e74ba",
        "0a369bf0519b9854",
        "030200450fc6f723",
        "d372f72a33d4b3a9",
        "171e0bc03b344c94",
        "242c0d412f0a9839",
        "3784d9a714427600",
        "39bb2c1803c4e644",
        "38d87e3726c11a19",
        "ed104e99732cfc5c",
        "a021009cc09592ff",
        "d4ba7bf93643a771",
        "01f0fa3d9cfda3f6",
        "99d0dfe8b2a35390",
        "9eeda3868cc807c2",
        "2b7531f9cf8fb625",
        "f9a3a03e2232d907",
        "cda8e78d8d34cec4",
        "a0e9017c8050fd34",
        "831f15916c32dd6b"
      ],
      "date": 1681924063575
    },
    {
      "type": "edit",
      "id": "a0e9017c8050fd34",
      "item": {
        "type": "pagefold",
        "id": "a0e9017c8050fd34",
        "text": "Writing Tests"
      },
      "date": 1681924065184
    },
    {
      "item": {
        "type": "factory",
        "id": "89f90d0b304d6124"
      },
      "id": "89f90d0b304d6124",
      "type": "add",
      "after": "831f15916c32dd6b",
      "date": 1681924135504
    },
    {
      "type": "edit",
      "id": "89f90d0b304d6124",
      "item": {
        "type": "paragraph",
        "id": "89f90d0b304d6124",
        "text": "[00:22:51]\nI would probably also try to include the results of Elm tests to the prompt, if possible.\n[00:22:59]\nBut that does mean that you need to verify things.\n[00:23:03]\nAnd that's kind of what our industry is all about, right?\n[00:23:07]\nWhy we have software engineers and not just coders."
      },
      "date": 1681924136953
    },
    {
      "item": {
        "type": "factory",
        "id": "6d4d1ad98feb05ed"
      },
      "id": "6d4d1ad98feb05ed",
      "type": "add",
      "after": "89f90d0b304d6124",
      "date": 1681924159312
    },
    {
      "type": "edit",
      "id": "6d4d1ad98feb05ed",
      "item": {
        "type": "paragraph",
        "id": "6d4d1ad98feb05ed",
        "text": "[00:23:11]\nThat's why we call ourselves engineers, is because we make things and we know it's going\n[00:23:18]\nto be, we know we shouldn't trust even ourselves."
      },
      "date": 1681924160805
    },
    {
      "item": {
        "type": "factory",
        "id": "92aa83c0faef99e6"
      },
      "id": "92aa83c0faef99e6",
      "type": "add",
      "after": "6d4d1ad98feb05ed",
      "date": 1681924180889
    },
    {
      "type": "edit",
      "id": "92aa83c0faef99e6",
      "item": {
        "type": "paragraph",
        "id": "92aa83c0faef99e6",
        "text": "[00:23:23]\nWe shouldn't trust the code that we're writing, the code that we're reading, and the code\n[00:23:28]\nthat has been running for years, because we know, well, there are bugs everywhere.\n[00:23:34]\nSo that's why we have all those tools, type systems, test suites, formal logic, manual\n[00:23:42]\nQA, all those kinds of things, to make sure that we do things correctly."
      },
      "date": 1681924182273
    },
    {
      "item": {
        "type": "factory",
        "id": "aea8fb9fc8ccbb9f"
      },
      "id": "aea8fb9fc8ccbb9f",
      "type": "add",
      "after": "92aa83c0faef99e6",
      "date": 1681924203243
    },
    {
      "type": "edit",
      "id": "aea8fb9fc8ccbb9f",
      "item": {
        "type": "paragraph",
        "id": "aea8fb9fc8ccbb9f",
        "text": "[00:23:48]\nAnd also, even the processes, like the Agile movement is running your code in such a way,\n[00:23:57]\nor working in such a way, that you get better results out of it.\n[00:24:02]\nSo we do need to verify our results.\n[00:24:06]\nAnd we can't just use the results of the AI willy-nilly."
      },
      "date": 1681924204415
    },
    {
      "item": {
        "type": "factory",
        "id": "6ac326333d84cd2b"
      },
      "id": "6ac326333d84cd2b",
      "type": "add",
      "after": "aea8fb9fc8ccbb9f",
      "date": 1681924234668
    },
    {
      "type": "edit",
      "id": "6ac326333d84cd2b",
      "item": {
        "type": "paragraph",
        "id": "6ac326333d84cd2b",
        "text": "[00:24:11]\nI mean, we can, and people are.\n[00:24:13]\nI think that's actually kind of the norm.\n[00:24:16]\nIt's going to become increasingly common to see, sort of like, this is a really weird\n[00:24:21]\npiece of code.\n[00:24:22]\nDoes this even give the right results?\n[00:24:24]\nLike, oh, somebody just YOLOed this chat GPT or this copilot completion into the code and\n[00:24:32]\ncommitted it."
      },
      "date": 1681924236076
    },
    {
      "item": {
        "type": "factory",
        "id": "17d8f38739b38eff"
      },
      "id": "17d8f38739b38eff",
      "type": "add",
      "after": "6ac326333d84cd2b",
      "date": 1681924250921
    },
    {
      "type": "edit",
      "id": "17d8f38739b38eff",
      "item": {
        "type": "paragraph",
        "id": "17d8f38739b38eff",
        "text": "[00:24:34]\nBut I mean, it's something very different from what we do today.\n[00:24:38]\nBecause in a lot of cases, we are still running code and with not a lot of tests in practice.\n[00:24:45]\nI feel like most people don't write enough tests, myself included.\n[00:24:50]\nSo this is just maybe strengthening the need for adding tests."
      },
      "date": 1681924252274
    },
    {
      "item": {
        "type": "factory",
        "id": "823ace371405d496"
      },
      "id": "823ace371405d496",
      "type": "add",
      "after": "17d8f38739b38eff",
      "date": 1681924265966
    },
    {
      "type": "edit",
      "id": "823ace371405d496",
      "item": {
        "type": "paragraph",
        "id": "823ace371405d496",
        "text": "[00:24:59]\nOur role becomes more like verifying and guiding systems rather than like, I can write a line\n[00:25:07]\nof code.\n[00:25:08]\nThat's not the super valuable asset anymore."
      },
      "date": 1681924267546
    },
    {
      "item": {
        "type": "factory",
        "id": "f1b88078cf38792d"
      },
      "id": "f1b88078cf38792d",
      "type": "add",
      "after": "823ace371405d496",
      "date": 1681924293260
    },
    {
      "type": "edit",
      "id": "f1b88078cf38792d",
      "item": {
        "type": "paragraph",
        "id": "f1b88078cf38792d",
        "text": "[00:25:12]\nBut I do feel like because it's going to be so easy to write code, and because you don't\n[00:25:16]\ngo through all the steps of writing good code, you're not going to do it as much.\n[00:25:22]\nFor instance, what you like to do, and myself as well, is to do things in a TDD style.\n[00:25:29]\nYou know, you start with a red test, and you change the code to make the test green, but\n[00:25:40]\nyou only change the code as much as necessary for that test to become green.\n[00:25:46]\nAnd then you continuously improve or complexify that function until it hits all the requirements."
      },
      "date": 1681924294773
    },
    {
      "item": {
        "type": "factory",
        "id": "89c86ba9fab7fbed"
      },
      "id": "89c86ba9fab7fbed",
      "type": "add",
      "after": "f1b88078cf38792d",
      "date": 1681924318963
    },
    {
      "type": "edit",
      "id": "89c86ba9fab7fbed",
      "item": {
        "type": "paragraph",
        "id": "89c86ba9fab7fbed",
        "text": "[00:25:54]\nBut if I ask the tool, hey, can you give me a function that does this?\n[00:26:00]\nWell, I probably won't have all the same tests that would have been the results."
      },
      "date": 1681924320372
    },
    {
      "item": {
        "type": "factory",
        "id": "b342d1caa09c31cd"
      },
      "id": "b342d1caa09c31cd",
      "type": "add",
      "after": "89c86ba9fab7fbed",
      "date": 1681924330823
    },
    {
      "type": "edit",
      "id": "b342d1caa09c31cd",
      "item": {
        "type": "paragraph",
        "id": "b342d1caa09c31cd",
        "text": "[00:26:07]\nJust like running tests after the fact.\n[00:26:09]\nSo you can probably ask the tool to write tests, but do you want an AI to write your\n[00:26:16]\ntests?"
      },
      "date": 1681924332361
    },
    {
      "item": {
        "type": "factory",
        "id": "3ecdea720f9fc37b"
      },
      "id": "3ecdea720f9fc37b",
      "type": "add",
      "after": "b342d1caa09c31cd",
      "date": 1681924341433
    },
    {
      "type": "edit",
      "id": "3ecdea720f9fc37b",
      "item": {
        "type": "paragraph",
        "id": "3ecdea720f9fc37b",
        "text": "[00:26:18]\nIt's kind of like, who monitors the police or whatever that sentence is."
      },
      "date": 1681924342722
    },
    {
      "item": {
        "type": "factory",
        "id": "a93a9b099b2fdc66"
      },
      "id": "a93a9b099b2fdc66",
      "type": "add",
      "after": "3ecdea720f9fc37b",
      "date": 1681924381314
    },
    {
      "type": "edit",
      "id": "a93a9b099b2fdc66",
      "item": {
        "type": "pagefold",
        "id": "a93a9b099b2fdc66",
        "text": "JSON Decoders"
      },
      "date": 1681924384595
    },
    {
      "item": {
        "type": "factory",
        "id": "91258a1ace863640"
      },
      "id": "91258a1ace863640",
      "type": "add",
      "after": "a93a9b099b2fdc66",
      "date": 1681924410645
    },
    {
      "type": "edit",
      "id": "91258a1ace863640",
      "item": {
        "type": "paragraph",
        "id": "91258a1ace863640",
        "text": "[00:26:42]\nDo we want to take JSON decoders for granted?\n[00:26:46]\nKind of like we kind of we want to be able to write them with a lot of flexibility, but\n[00:26:51]\nwe don't want to spend a lot of brainpower creating and maintaining them.\n[00:26:56]\nSo I mean, if they're verifiable, that's great.\n[00:27:01]\nIf we can continue to verify them, if we can, I mean, better still, if we can use something\n[00:27:08]\nlike GraphQL to make sure it stays in sync even better."
      },
      "date": 1681924412047
    },
    {
      "item": {
        "type": "factory",
        "id": "de4bdb2e40054024"
      },
      "id": "de4bdb2e40054024",
      "type": "add",
      "after": "91258a1ace863640",
      "date": 1681924437984
    },
    {
      "type": "edit",
      "id": "de4bdb2e40054024",
      "item": {
        "type": "paragraph",
        "id": "de4bdb2e40054024",
        "text": "[00:27:13]\nBut we don't really want to have to think too much about building and maintaining those\n[00:27:17]\nlow level details.\n[00:27:18]\nWe want that to just be like, given a decoder that works.\n[00:27:23]\nAnd so this is a very good thing to delegate to AI and in my opinion, and whereas like\n[00:27:29]\nsolve this complex problem that has a lot of edge cases, and a lot of like things to\n[00:27:36]\nconsider the use case, how do we want it to behave and stuff like these are the types\n[00:27:41]\nof things that I think our job as an engineer is still extremely relevant."
      },
      "date": 1681924439256
    },
    {
      "item": {
        "type": "factory",
        "id": "a8a9c2c9fb2b75a0"
      },
      "id": "a8a9c2c9fb2b75a0",
      "type": "add",
      "after": "de4bdb2e40054024",
      "date": 1681924462970
    },
    {
      "type": "edit",
      "id": "a8a9c2c9fb2b75a0",
      "item": {
        "type": "paragraph",
        "id": "a8a9c2c9fb2b75a0",
        "text": "[00:27:46]\nThinking about the user experience.\n[00:27:48]\nAnd in my opinion, I think that engineering, these types of things are going to become\n[00:27:54]\na more important part of the job.\n[00:27:56]\nThinking about the user experience.\n[00:27:57]\nSure these AI systems can sort of do that, but we need like they can, we can tell them\n[00:28:03]\nthink about the user experience and think about these different use cases and think\n[00:28:09]\nabout that in the test suite you write."
      },
      "date": 1681924464875
    },
    {
      "item": {
        "type": "factory",
        "id": "92f57d526c976d79"
      },
      "id": "92f57d526c976d79",
      "type": "add",
      "after": "a8a9c2c9fb2b75a0",
      "date": 1681924514846
    },
    {
      "type": "edit",
      "id": "92f57d526c976d79",
      "item": {
        "type": "paragraph",
        "id": "92f57d526c976d79",
        "text": "[00:28:11]\nBut I think you want a human involved in really artisanally crafting user experiences and\n[00:28:18]\nuse cases.\n[00:28:20]\nAnd then you want to say, okay, now that I've figured these things out, here's a suite of\n[00:28:24]\ntests.\n[00:28:25]\nAnd if some AI thing can just satisfy those tests, maybe you're good, you know?"
      },
      "date": 1681924516344
    },
    {
      "item": {
        "type": "factory",
        "id": "ffc057b2d36a945f"
      },
      "id": "ffc057b2d36a945f",
      "type": "add",
      "after": "92f57d526c976d79",
      "date": 1681924546245
    },
    {
      "type": "edit",
      "id": "ffc057b2d36a945f",
      "item": {
        "type": "paragraph",
        "id": "ffc057b2d36a945f",
        "text": "[00:28:33]\nActually, one of the things that I tried with chat GPT three, so maybe it's better now,\n[00:28:39]\nbut I think my point was to hold is I told it, please write a function that satisfies\n[00:28:46]\nthese elm tests."
      },
      "date": 1681924547913
    },
    {
      "item": {
        "type": "factory",
        "id": "25d7c21f80650a52"
      },
      "id": "25d7c21f80650a52",
      "type": "add",
      "after": "ffc057b2d36a945f",
      "date": 1681924564910
    },
    {
      "type": "edit",
      "id": "25d7c21f80650a52",
      "item": {
        "type": "paragraph",
        "id": "25d7c21f80650a52",
        "text": "[00:28:48]\nSo I wrote some tests and basically told it to write a function.\n[00:28:53]\nAnd it did so and it was pretty good, but it wasn't correct.\n[00:28:58]\nLike there were syntax errors, which I told it to fix."
      },
      "date": 1681924566648
    },
    {
      "item": {
        "type": "factory",
        "id": "e76759aeeba8fdba"
      },
      "id": "e76759aeeba8fdba",
      "type": "add",
      "after": "25d7c21f80650a52",
      "date": 1681924586520
    },
    {
      "type": "edit",
      "id": "e76759aeeba8fdba",
      "item": {
        "type": "paragraph",
        "id": "e76759aeeba8fdba",
        "text": "[00:29:03]\nAnd when those were gone, well, the, the tests were not passing.\n[00:29:06]\nSome of them were, but not, not all of them."
      },
      "date": 1681924588070
    },
    {
      "item": {
        "type": "factory",
        "id": "f30d607e6598ccc1"
      },
      "id": "f30d607e6598ccc1",
      "type": "add",
      "after": "e76759aeeba8fdba",
      "date": 1681924604343
    },
    {
      "type": "edit",
      "id": "f30d607e6598ccc1",
      "item": {
        "type": "paragraph",
        "id": "f30d607e6598ccc1",
        "text": "[00:29:09]\nAnd the function that I needed was slightly a bit too complex to be such an easy function\n[00:29:16]\nto implement, as you said before."
      },
      "date": 1681924605637
    },
    {
      "item": {
        "type": "factory",
        "id": "64e64057ed104ed6"
      },
      "id": "64e64057ed104ed6",
      "type": "add",
      "after": "f30d607e6598ccc1",
      "date": 1681924617999
    },
    {
      "type": "edit",
      "id": "64e64057ed104ed6",
      "item": {
        "type": "paragraph",
        "id": "64e64057ed104ed6",
        "text": "[00:29:19]\nSo basically the code that it wrote was pretty hard to read.\n[00:29:24]\nAnd so that means that, okay, I have something that I can use as a basis and that I need\n[00:29:29]\nto change to, to make the test pass the few failing tests pass."
      },
      "date": 1681924619411
    },
    {
      "item": {
        "type": "factory",
        "id": "67121f8e25a0b0e1"
      },
      "id": "67121f8e25a0b0e1",
      "type": "add",
      "after": "64e64057ed104ed6",
      "date": 1681924629980
    },
    {
      "type": "edit",
      "id": "67121f8e25a0b0e1",
      "item": {
        "type": "paragraph",
        "id": "67121f8e25a0b0e1",
        "text": "[00:29:34]\nBut because it was so complex, I was like, well, how do I make the test pass?\n[00:29:40]\nWell, to, to make the test pass, I need to change the code to change the code.\n[00:29:44]\nI need to understand the code."
      },
      "date": 1681924631176
    },
    {
      "item": {
        "type": "factory",
        "id": "e34c5697ad62b0a6"
      },
      "id": "e34c5697ad62b0a6",
      "type": "add",
      "after": "67121f8e25a0b0e1",
      "date": 1681924641872
    },
    {
      "type": "edit",
      "id": "e34c5697ad62b0a6",
      "item": {
        "type": "paragraph",
        "id": "e34c5697ad62b0a6",
        "text": "[00:29:46]\nSo how do we understand the code?\n[00:29:48]\nWell, if anything you've taught me is like, or other people in the agile community, like\n[00:29:55]\nyou can get an understanding of the code by changing the code, by doing refactoring techniques,"
      },
      "date": 1681924643101
    },
    {
      "item": {
        "type": "factory",
        "id": "86d7ccb0a6b4fd44"
      },
      "id": "86d7ccb0a6b4fd44",
      "type": "add",
      "after": "e34c5697ad62b0a6",
      "date": 1681924662549
    },
    {
      "type": "edit",
      "id": "86d7ccb0a6b4fd44",
      "item": {
        "type": "paragraph",
        "id": "86d7ccb0a6b4fd44",
        "text": "[00:30:03]\nso extracting variables, renaming things, changing how conditions work.\n[00:30:10]\nAnd as you do these steps, these tiny steps, because we like them, you start to get some\n[00:30:16]\ninsights into the code and then you can finally notice, oh, well, this is clearly wrong.\n[00:30:22]\nNow I know what I need to change."
      },
      "date": 1681924663758
    },
    {
      "item": {
        "type": "factory",
        "id": "309e9d921995670b"
      },
      "id": "309e9d921995670b",
      "type": "add",
      "after": "86d7ccb0a6b4fd44",
      "date": 1681924679785
    },
    {
      "type": "edit",
      "id": "309e9d921995670b",
      "item": {
        "type": "paragraph",
        "id": "309e9d921995670b",
        "text": "[00:30:25]\nAnd the thing is that I find funny is that this is exactly how you work with legacy code.\n[00:30:30]\nBut this code is only a few seconds old or a few minutes old, which is like working with\n[00:30:37]\nlegacy is becoming even more relevant."
      },
      "date": 1681924681066
    },
    {
      "item": {
        "type": "factory",
        "id": "cc01f39d76366261"
      },
      "id": "cc01f39d76366261",
      "type": "add",
      "after": "309e9d921995670b",
      "date": 1681924696231
    },
    {
      "type": "edit",
      "id": "cc01f39d76366261",
      "item": {
        "type": "paragraph",
        "id": "cc01f39d76366261",
        "text": "[00:30:41]\nEven this new code, which I find very odd and more interesting.\n[00:30:46]\nThat's a nice insight.\n[00:30:47]\nI like that."
      },
      "date": 1681924698235
    },
    {
      "item": {
        "type": "factory",
        "id": "610ee27053532961"
      },
      "id": "610ee27053532961",
      "type": "add",
      "after": "cc01f39d76366261",
      "date": 1681924737251
    },
    {
      "type": "edit",
      "id": "610ee27053532961",
      "item": {
        "type": "pagefold",
        "id": "610ee27053532961",
        "text": "Work with Legacy Code"
      },
      "date": 1681924739101
    },
    {
      "id": "610ee27053532961",
      "type": "move",
      "order": [
        "eaa1eabf9dbe461f",
        "0c7f5903c3db90c2",
        "5d1685e6c4d05464",
        "5848c20ec7ee962e",
        "33cd21e0f706043f",
        "2aa07e85ecbea61d",
        "feb885dcf1189f73",
        "1fefcce7a612507b",
        "5876a332943c6aec",
        "083a96920828146d",
        "2bedf25e3e797bf3",
        "b0b3f3e15468c504",
        "572b9bab977e74ba",
        "0a369bf0519b9854",
        "030200450fc6f723",
        "d372f72a33d4b3a9",
        "171e0bc03b344c94",
        "242c0d412f0a9839",
        "3784d9a714427600",
        "39bb2c1803c4e644",
        "38d87e3726c11a19",
        "ed104e99732cfc5c",
        "a021009cc09592ff",
        "d4ba7bf93643a771",
        "01f0fa3d9cfda3f6",
        "99d0dfe8b2a35390",
        "9eeda3868cc807c2",
        "2b7531f9cf8fb625",
        "f9a3a03e2232d907",
        "cda8e78d8d34cec4",
        "a0e9017c8050fd34",
        "831f15916c32dd6b",
        "89f90d0b304d6124",
        "6d4d1ad98feb05ed",
        "92aa83c0faef99e6",
        "aea8fb9fc8ccbb9f",
        "6ac326333d84cd2b",
        "17d8f38739b38eff",
        "823ace371405d496",
        "f1b88078cf38792d",
        "89c86ba9fab7fbed",
        "b342d1caa09c31cd",
        "3ecdea720f9fc37b",
        "a93a9b099b2fdc66",
        "91258a1ace863640",
        "de4bdb2e40054024",
        "a8a9c2c9fb2b75a0",
        "92f57d526c976d79",
        "ffc057b2d36a945f",
        "25d7c21f80650a52",
        "e76759aeeba8fdba",
        "f30d607e6598ccc1",
        "64e64057ed104ed6",
        "67121f8e25a0b0e1",
        "e34c5697ad62b0a6",
        "86d7ccb0a6b4fd44",
        "610ee27053532961",
        "309e9d921995670b",
        "cc01f39d76366261"
      ],
      "date": 1681924743992
    },
    {
      "item": {
        "type": "factory",
        "id": "b3235aad494c5449"
      },
      "id": "b3235aad494c5449",
      "type": "add",
      "after": "cc01f39d76366261",
      "date": 1681924783019
    },
    {
      "type": "edit",
      "id": "b3235aad494c5449",
      "item": {
        "type": "paragraph",
        "id": "b3235aad494c5449",
        "text": "[00:30:48]\nI think, I mean, I do think that we need to guide what kinds of results we want also with\n[00:30:56]\nthese steps, with prompt engineering and priming.\n[00:31:00]\nBut I think you're right that this does become a sort of process of creating some code that\n[00:31:07]\nwe can look at its behavior, we can see, we can get a test around it and see that the\n[00:31:12]\ntest is passing and verify it, but then not really understand the code and need to do\n[00:31:17]\nthat process of refactoring to get clarity and get it in the way that fits our mental\n[00:31:22]\nmodel or gets away complexity."
      },
      "date": 1681924784300
    },
    {
      "item": {
        "type": "factory",
        "id": "23743c372df71255"
      },
      "id": "23743c372df71255",
      "type": "add",
      "after": "b3235aad494c5449",
      "date": 1681924846146
    },
    {
      "type": "edit",
      "id": "23743c372df71255",
      "item": {
        "type": "paragraph",
        "id": "23743c372df71255",
        "text": "[00:31:26]\nBut also like we can say, you know, here's a unit test, make this, like write some code\n[00:31:35]\nthat makes this test pass.\n[00:31:37]\nAnd we can do some prompt engineering that says, do that using the simplest thing that\n[00:31:42]\ncould possibly work.\n[00:31:44]\nHere's an example of the simplest thing that could possibly work."
      },
      "date": 1681924847555
    },
    {
      "item": {
        "type": "factory",
        "id": "3548b083cac09171"
      },
      "id": "3548b083cac09171",
      "type": "add",
      "after": "23743c372df71255",
      "date": 1681924858152
    },
    {
      "type": "edit",
      "id": "3548b083cac09171",
      "item": {
        "type": "paragraph",
        "id": "3548b083cac09171",
        "text": "[00:31:47]\nIn this test, there's this error message that the test is giving and you write this thing\n[00:31:52]\nthat, okay, sorting a list, it returns the hard-coded list and it makes it green.\n[00:31:58]\nAnd that's the simplest way it could make that work."
      },
      "date": 1681924859483
    },
    {
      "item": {
        "type": "factory",
        "id": "fed36a7b2cf08bfb"
      },
      "id": "fed36a7b2cf08bfb",
      "type": "add",
      "after": "3548b083cac09171",
      "date": 1681924876477
    },
    {
      "type": "edit",
      "id": "fed36a7b2cf08bfb",
      "item": {
        "type": "paragraph",
        "id": "fed36a7b2cf08bfb",
        "text": "[00:32:01]\nSo you can actually illustrate that with examples.\n[00:32:04]\nYou can write very long prompts and you can get it to do a sort of fake it till you make\n[00:32:11]\nit style process that you can actually understand.\n[00:32:15]\nSo you can get it to like follow the kind of process you would follow and it totally\n[00:32:20]\nchanges the results you get."
      },
      "date": 1681924877746
    },
    {
      "item": {
        "type": "factory",
        "id": "257514e02eff7c91"
      },
      "id": "257514e02eff7c91",
      "type": "add",
      "after": "fed36a7b2cf08bfb",
      "date": 1681924889202
    },
    {
      "type": "edit",
      "id": "257514e02eff7c91",
      "item": {
        "type": "paragraph",
        "id": "257514e02eff7c91",
        "text": "[00:32:22]\nAnd if you've, in addition to that, connect it to test output and compiler output so it\n[00:32:27]\ncan iterate on that, you can actually like automate some of those things, which starts\n[00:32:32]\nto become very interesting."
      },
      "date": 1681924890594
    },
    {
      "item": {
        "type": "factory",
        "id": "7d319d5c6d72b16a"
      },
      "id": "7d319d5c6d72b16a",
      "type": "add",
      "after": "257514e02eff7c91",
      "date": 1681924905639
    },
    {
      "type": "edit",
      "id": "7d319d5c6d72b16a",
      "item": {
        "type": "paragraph",
        "id": "7d319d5c6d72b16a",
        "text": "[00:32:33]\nI'm wondering whether that would have the same effect in the sense that if I don't see,\n[00:32:40]\nif I do this and I only see the end results, which is kind of the point, well, will I have\n[00:32:46]\nan insight into how this function works because I didn't write it."
      },
      "date": 1681924906995
    },
    {
      "item": {
        "type": "factory",
        "id": "f440cdb568cb9c6e"
      },
      "id": "f440cdb568cb9c6e",
      "type": "add",
      "after": "7d319d5c6d72b16a",
      "date": 1681924919737
    },
    {
      "type": "edit",
      "id": "f440cdb568cb9c6e",
      "item": {
        "type": "paragraph",
        "id": "f440cdb568cb9c6e",
        "text": "[00:32:50]\nSo now it's just like someone else's code.\n[00:32:52]\nAnd again, if I need to change it, then I need to go through all those refactoring steps\n[00:32:57]\nor making it easier to understand for myself or just go read it well.\n"
      },
      "date": 1681924920933
    },
    {
      "item": {
        "type": "factory",
        "id": "4b6005869fd388a5"
      },
      "id": "4b6005869fd388a5",
      "type": "add",
      "after": "f440cdb568cb9c6e",
      "date": 1681924930748
    },
    {
      "type": "edit",
      "id": "4b6005869fd388a5",
      "item": {
        "type": "paragraph",
        "id": "4b6005869fd388a5",
        "text": "[00:33:05]\nBut definitely the thing that I will keep in mind is that all these techniques about\n[00:33:12]\nrunning good code, they will stay relevant."
      },
      "date": 1681924932049
    },
    {
      "item": {
        "type": "factory",
        "id": "955b5b145e182202"
      },
      "id": "955b5b145e182202",
      "type": "add",
      "after": "4b6005869fd388a5",
      "date": 1681924941780
    },
    {
      "type": "edit",
      "id": "955b5b145e182202",
      "item": {
        "type": "paragraph",
        "id": "955b5b145e182202",
        "text": "[00:33:15]\nSo if I don't want to lose my job, this is the kind of things that I can maybe should\n[00:33:21]\nfocus on because I think that these will stay relevant."
      },
      "date": 1681924942985
    },
    {
      "item": {
        "type": "factory",
        "id": "6d418e5f65ac821c"
      },
      "id": "6d418e5f65ac821c",
      "type": "add",
      "after": "955b5b145e182202",
      "date": 1681924950876
    },
    {
      "type": "edit",
      "id": "6d418e5f65ac821c",
      "item": {
        "type": "paragraph",
        "id": "6d418e5f65ac821c",
        "text": "[00:33:25]\nMaybe my whole job will be removed.\n[00:33:27]\nMaybe I will get fired if it has become way too good.\n[00:33:31]\nBut maybe my chances of not being fired increase if I am one of those who are better at these\n[00:33:37]\ntasks."
      },
      "date": 1681924952240
    },
    {
      "item": {
        "type": "factory",
        "id": "29c6814edfa63220"
      },
      "id": "29c6814edfa63220",
      "type": "add",
      "after": "6d418e5f65ac821c",
      "date": 1681924977844
    },
    {
      "type": "edit",
      "id": "29c6814edfa63220",
      "item": {
        "type": "paragraph",
        "id": "29c6814edfa63220",
        "text": "[00:33:40]\nAnd one of the things that keeps coming up for me is like, what do I want to be atomic?\n[00:33:45]\nLike there's a certain philosophy of using tools that I've arrived at through a lot of\n[00:33:51]\ncraftsmanship principles and TDD and things like that, which is like, I don't want tools\n[00:34:00]\nthat I can partially trust and I don't want tools that give me partial results."
      },
      "date": 1681924979543
    },
    {
      "item": {
        "type": "factory",
        "id": "288bc0fde2d03688"
      },
      "id": "288bc0fde2d03688",
      "type": "add",
      "after": "29c6814edfa63220",
      "date": 1681925012992
    },
    {
      "id": "288bc0fde2d03688",
      "type": "move",
      "order": [
        "eaa1eabf9dbe461f",
        "0c7f5903c3db90c2",
        "5d1685e6c4d05464",
        "5848c20ec7ee962e",
        "33cd21e0f706043f",
        "2aa07e85ecbea61d",
        "feb885dcf1189f73",
        "1fefcce7a612507b",
        "5876a332943c6aec",
        "083a96920828146d",
        "2bedf25e3e797bf3",
        "b0b3f3e15468c504",
        "572b9bab977e74ba",
        "0a369bf0519b9854",
        "030200450fc6f723",
        "d372f72a33d4b3a9",
        "171e0bc03b344c94",
        "242c0d412f0a9839",
        "3784d9a714427600",
        "39bb2c1803c4e644",
        "38d87e3726c11a19",
        "ed104e99732cfc5c",
        "a021009cc09592ff",
        "d4ba7bf93643a771",
        "01f0fa3d9cfda3f6",
        "99d0dfe8b2a35390",
        "9eeda3868cc807c2",
        "2b7531f9cf8fb625",
        "f9a3a03e2232d907",
        "cda8e78d8d34cec4",
        "a0e9017c8050fd34",
        "831f15916c32dd6b",
        "89f90d0b304d6124",
        "6d4d1ad98feb05ed",
        "92aa83c0faef99e6",
        "aea8fb9fc8ccbb9f",
        "6ac326333d84cd2b",
        "17d8f38739b38eff",
        "823ace371405d496",
        "f1b88078cf38792d",
        "89c86ba9fab7fbed",
        "b342d1caa09c31cd",
        "3ecdea720f9fc37b",
        "a93a9b099b2fdc66",
        "91258a1ace863640",
        "de4bdb2e40054024",
        "a8a9c2c9fb2b75a0",
        "92f57d526c976d79",
        "ffc057b2d36a945f",
        "25d7c21f80650a52",
        "e76759aeeba8fdba",
        "f30d607e6598ccc1",
        "64e64057ed104ed6",
        "67121f8e25a0b0e1",
        "e34c5697ad62b0a6",
        "86d7ccb0a6b4fd44",
        "610ee27053532961",
        "309e9d921995670b",
        "cc01f39d76366261",
        "b3235aad494c5449",
        "23743c372df71255",
        "3548b083cac09171",
        "fed36a7b2cf08bfb",
        "257514e02eff7c91",
        "7d319d5c6d72b16a",
        "f440cdb568cb9c6e",
        "4b6005869fd388a5",
        "955b5b145e182202",
        "6d418e5f65ac821c",
        "288bc0fde2d03688",
        "29c6814edfa63220"
      ],
      "date": 1681925015492
    },
    {
      "type": "edit",
      "id": "288bc0fde2d03688",
      "item": {
        "type": "pagefold",
        "id": "288bc0fde2d03688",
        "text": "What Do I Want to Be Atomic?"
      },
      "date": 1681925017605
    },
    {
      "item": {
        "type": "factory",
        "id": "d46753231b26b571"
      },
      "id": "d46753231b26b571",
      "type": "add",
      "after": "29c6814edfa63220",
      "date": 1681925063763
    },
    {
      "type": "edit",
      "id": "d46753231b26b571",
      "item": {
        "type": "paragraph",
        "id": "d46753231b26b571",
        "text": "[00:34:04]\nI want tools that I can completely trust and that allow me to take a set of low level steps,\n[00:34:12]\nbut think of them as one high level step.\n[00:34:15]\nSo to me, that's the question."
      },
      "date": 1681925065469
    },
    {
      "item": {
        "type": "factory",
        "id": "ee8b6771100fae84"
      },
      "id": "ee8b6771100fae84",
      "type": "add",
      "after": "d46753231b26b571",
      "date": 1681925095847
    },
    {
      "type": "edit",
      "id": "ee8b6771100fae84",
      "item": {
        "type": "paragraph",
        "id": "ee8b6771100fae84",
        "text": "[00:34:16]\nNow, in the case of making a red test green and a TDD step, for example, like do the simplest\n[00:34:24]\nthing that could possibly work.\n[00:34:26]\nWhat if that was an atomic step I could take for granted?\n[00:34:30]\nThat instead of a set of low level steps, I will look at the code, I will hard code\n[00:34:36]\nthe return value, I will create a new module with the name that's failing.\n[00:34:40]\nIt says could not find module of this name.\n[00:34:42]\nI will create that module.\n[00:34:43]\nI will create a function of the name that the error message in the failing test says\n[00:34:48]\nis missing."
      },
      "date": 1681925097734
    },
    {
      "item": {
        "type": "factory",
        "id": "58e6536d179b8190"
      },
      "id": "58e6536d179b8190",
      "type": "add",
      "after": "ee8b6771100fae84",
      "date": 1681925147049
    },
    {
      "type": "edit",
      "id": "58e6536d179b8190",
      "item": {
        "type": "paragraph",
        "id": "58e6536d179b8190",
        "text": "[00:34:49]\nI will write a type annotation that satisfies the compiler and return an empty value and\n[00:34:56]\nhave a failing test.\n[00:34:58]\nAnd then to make it green, I will change that empty value to a hard coded value that makes\n[00:35:03]\nthe test green."
      },
      "date": 1681925148570
    },
    {
      "item": {
        "type": "factory",
        "id": "1fe7ac0b1f16558c"
      },
      "id": "1fe7ac0b1f16558c",
      "type": "add",
      "after": "58e6536d179b8190",
      "date": 1681925176278
    },
    {
      "type": "edit",
      "id": "1fe7ac0b1f16558c",
      "item": {
        "type": "paragraph",
        "id": "1fe7ac0b1f16558c",
        "text": "[00:35:05]\nWhat if I could just take that for granted and say, hey, computer, do that step, do that\n[00:35:09]\nTDD step to make it red and then make it green in the simplest way possible.\n[00:35:13]\nAnd I could take that for granted and then I can take it from there.\n[00:35:15]\nThat would be great."
      },
      "date": 1681925177874
    },
    {
      "item": {
        "type": "factory",
        "id": "b2209320c2084baf"
      },
      "id": "b2209320c2084baf",
      "type": "add",
      "after": "1fe7ac0b1f16558c",
      "date": 1681925209556
    },
    {
      "type": "edit",
      "id": "b2209320c2084baf",
      "item": {
        "type": "paragraph",
        "id": "b2209320c2084baf",
        "text": "[00:35:16]\nAnd then that's something I can fully trust and I can sort of verify it.\n[00:35:22]\nAnd so another principle I've been thinking about in sort of like designing these prompts\n[00:35:27]\nand these workflows using AI tools is guardrails."
      },
      "date": 1681925211248
    },
    {
      "item": {
        "type": "factory",
        "id": "cb41b8a4f3df0f97"
      },
      "id": "cb41b8a4f3df0f97",
      "type": "add",
      "after": "b2209320c2084baf",
      "date": 1681925284749
    },
    {
      "type": "edit",
      "id": "cb41b8a4f3df0f97",
      "item": {
        "type": "pagefold",
        "id": "cb41b8a4f3df0f97",
        "text": "Guard Rail"
      },
      "date": 1681925286443
    },
    {
      "id": "cb41b8a4f3df0f97",
      "type": "move",
      "order": [
        "eaa1eabf9dbe461f",
        "0c7f5903c3db90c2",
        "5d1685e6c4d05464",
        "5848c20ec7ee962e",
        "33cd21e0f706043f",
        "2aa07e85ecbea61d",
        "feb885dcf1189f73",
        "1fefcce7a612507b",
        "5876a332943c6aec",
        "083a96920828146d",
        "2bedf25e3e797bf3",
        "b0b3f3e15468c504",
        "572b9bab977e74ba",
        "0a369bf0519b9854",
        "030200450fc6f723",
        "d372f72a33d4b3a9",
        "171e0bc03b344c94",
        "242c0d412f0a9839",
        "3784d9a714427600",
        "39bb2c1803c4e644",
        "38d87e3726c11a19",
        "ed104e99732cfc5c",
        "a021009cc09592ff",
        "d4ba7bf93643a771",
        "01f0fa3d9cfda3f6",
        "99d0dfe8b2a35390",
        "9eeda3868cc807c2",
        "2b7531f9cf8fb625",
        "f9a3a03e2232d907",
        "cda8e78d8d34cec4",
        "a0e9017c8050fd34",
        "831f15916c32dd6b",
        "89f90d0b304d6124",
        "6d4d1ad98feb05ed",
        "92aa83c0faef99e6",
        "aea8fb9fc8ccbb9f",
        "6ac326333d84cd2b",
        "17d8f38739b38eff",
        "823ace371405d496",
        "f1b88078cf38792d",
        "89c86ba9fab7fbed",
        "b342d1caa09c31cd",
        "3ecdea720f9fc37b",
        "a93a9b099b2fdc66",
        "91258a1ace863640",
        "de4bdb2e40054024",
        "a8a9c2c9fb2b75a0",
        "92f57d526c976d79",
        "ffc057b2d36a945f",
        "25d7c21f80650a52",
        "e76759aeeba8fdba",
        "f30d607e6598ccc1",
        "64e64057ed104ed6",
        "67121f8e25a0b0e1",
        "e34c5697ad62b0a6",
        "86d7ccb0a6b4fd44",
        "610ee27053532961",
        "309e9d921995670b",
        "cc01f39d76366261",
        "b3235aad494c5449",
        "23743c372df71255",
        "3548b083cac09171",
        "fed36a7b2cf08bfb",
        "257514e02eff7c91",
        "7d319d5c6d72b16a",
        "f440cdb568cb9c6e",
        "4b6005869fd388a5",
        "955b5b145e182202",
        "6d418e5f65ac821c",
        "288bc0fde2d03688",
        "29c6814edfa63220",
        "d46753231b26b571",
        "ee8b6771100fae84",
        "58e6536d179b8190",
        "1fe7ac0b1f16558c",
        "cb41b8a4f3df0f97",
        "b2209320c2084baf"
      ],
      "date": 1681925287997
    },
    {
      "item": {
        "type": "factory",
        "id": "9cf30ee00000ec9c"
      },
      "id": "9cf30ee00000ec9c",
      "type": "add",
      "after": "b2209320c2084baf",
      "date": 1681925321650
    },
    {
      "type": "edit",
      "id": "9cf30ee00000ec9c",
      "item": {
        "type": "paragraph",
        "id": "9cf30ee00000ec9c",
        "text": "[00:35:31]\nSo like not only verifying something at the end that it did the correct thing because\n[00:35:37]\nyou can run the Elm compiler, you can."
      },
      "date": 1681925323428
    },
    {
      "item": {
        "type": "factory",
        "id": "eaa63f683f93a07f"
      },
      "id": "eaa63f683f93a07f",
      "type": "add",
      "after": "9cf30ee00000ec9c",
      "date": 1681925370462
    },
    {
      "type": "edit",
      "id": "eaa63f683f93a07f",
      "item": {
        "type": "paragraph",
        "id": "eaa63f683f93a07f",
        "text": "[00:35:39]\nBut along the way, if you can say, OK, like, for example, you can create a new module and\n[00:35:46]\na new function, but you can't touch any other code and you can't touch the test.\n[00:35:53]\nThe test has to remain the same and the test must succeed at the end.\n[00:35:56]\nYou sort of set up guardrails and you say, listen, if the AI given these guardrails can\n[00:36:03]\ngive me a result that satisfies all these criteria by the end of it, then if it does\n[00:36:09]\nthat, I can verify that it gave me what I wanted and I can fully trust it."
      },
      "date": 1681925372223
    },
    {
      "item": {
        "type": "factory",
        "id": "bee2e896d6c9c74c"
      },
      "id": "bee2e896d6c9c74c",
      "type": "add",
      "after": "eaa63f683f93a07f",
      "date": 1681925384796
    },
    {
      "type": "edit",
      "id": "bee2e896d6c9c74c",
      "item": {
        "type": "paragraph",
        "id": "bee2e896d6c9c74c",
        "text": "[00:36:14]\nThose are the types of tools that I want."
      },
      "date": 1681925386098
    },
    {
      "item": {
        "type": "factory",
        "id": "983e77dbf9d07619"
      },
      "id": "983e77dbf9d07619",
      "type": "add",
      "after": "bee2e896d6c9c74c",
      "date": 1681925412925
    },
    {
      "type": "edit",
      "id": "983e77dbf9d07619",
      "item": {
        "type": "paragraph",
        "id": "983e77dbf9d07619",
        "text": "[00:36:16]\nSo one thing that I was really amazed by, I'll share a link to this tweet, but I saw\n[00:36:23]\nthis demo where this was actually with GPT-3, but this example stuck with me where somebody\n[00:36:31]\nwas finding that GPT-3 did a poor job if you asked it questions that went through sort\n[00:36:38]\nof several steps."
      },
      "date": 1681925414847
    },
    {
      "item": {
        "type": "factory",
        "id": "c4d44b0f8186c24e"
      },
      "id": "c4d44b0f8186c24e",
      "type": "add",
      "after": "983e77dbf9d07619",
      "date": 1681925440260
    },
    {
      "type": "edit",
      "id": "c4d44b0f8186c24e",
      "item": {
        "type": "paragraph",
        "id": "c4d44b0f8186c24e",
        "text": "Tweet showing intermediary questions prompt engineering technique\nelm-gql episode"
      },
      "date": 1681925442924
    },
    {
      "type": "edit",
      "id": "c4d44b0f8186c24e",
      "item": {
        "type": "paragraph",
        "id": "c4d44b0f8186c24e",
        "text": "Tweet showing intermediary questions prompt engineering technique\n[https://mobile.twitter.com/simonw/status/1577785656238960640 tweet]"
      },
      "date": 1681925462749
    },
    {
      "type": "edit",
      "id": "c4d44b0f8186c24e",
      "item": {
        "type": "paragraph",
        "id": "c4d44b0f8186c24e",
        "text": "[https://mobile.twitter.com/simonw/status/1577785656238960640 Tweet] showing intermediary questions prompt engineering technique\n"
      },
      "date": 1681925471700
    },
    {
      "type": "edit",
      "id": "c4d44b0f8186c24e",
      "item": {
        "type": "paragraph",
        "id": "c4d44b0f8186c24e",
        "text": "[https://mobile.twitter.com/simonw/status/1577785656238960640 Tweet] showing intermediary questions prompt engineering technique [https://github.com/ofirpress/self-ask github]\n"
      },
      "date": 1681925698593
    },
    {
      "type": "edit",
      "id": "c4d44b0f8186c24e",
      "item": {
        "type": "paragraph",
        "id": "c4d44b0f8186c24e",
        "text": "[https://mobile.twitter.com/simonw/status/1577785656238960640 Tweet] showing intermediary questions prompt engineering technique [https://github.com/ofirpress/self-ask github], [https://arxiv.org/abs/2210.03350 arxiv]\n "
      },
      "date": 1681925780441
    },
    {
      "item": {
        "type": "factory",
        "id": "9048c9f533824bd4"
      },
      "id": "9048c9f533824bd4",
      "type": "add",
      "after": "c4d44b0f8186c24e",
      "date": 1681925840018
    },
    {
      "type": "edit",
      "id": "9048c9f533824bd4",
      "item": {
        "type": "video",
        "id": "9048c9f533824bd4",
        "text": "YOUTUBE A3GtlwwWDhI"
      },
      "date": 1681925849553
    },
    {
      "item": {
        "type": "factory",
        "id": "9f840fe74dbb6322"
      },
      "id": "9f840fe74dbb6322",
      "type": "add",
      "after": "9048c9f533824bd4",
      "date": 1681925936970
    },
    {
      "type": "edit",
      "id": "9f840fe74dbb6322",
      "item": {
        "type": "paragraph",
        "id": "9f840fe74dbb6322",
        "text": "compositional questions"
      },
      "date": 1681925938973
    },
    {
      "type": "edit",
      "id": "feb885dcf1189f73",
      "item": {
        "type": "paragraph",
        "id": "feb885dcf1189f73",
        "text": "[00:15:55]\nYeah, so like, I think priming it with good context is one thing that I've been thinking about as I've been playing with it. >> context\n"
      },
      "date": 1681967741490
    },
    {
      "type": "edit",
      "id": "feb885dcf1189f73",
      "item": {
        "type": "paragraph",
        "id": "feb885dcf1189f73",
        "text": "[00:15:55]\n[…] priming it with good context is one thing that I've been thinking about as I've been playing with it. >> context\n"
      },
      "date": 1681967756490
    },
    {
      "type": "edit",
      "id": "29c6814edfa63220",
      "item": {
        "type": "paragraph",
        "id": "29c6814edfa63220",
        "text": "[00:33:40]\nAnd one of the things that keeps coming up for me is like, what do I want to be [[atomic]]?\n[00:33:45]\nLike there's a certain philosophy of using tools that I've arrived at through a lot of\n[00:33:51]\ncraftsmanship principles and TDD and things like that, which is like, I don't want tools\n[00:34:00]\nthat I can partially trust and I don't want tools that give me partial results."
      },
      "date": 1681968940388
    },
    {
      "type": "edit",
      "id": "29c6814edfa63220",
      "item": {
        "type": "paragraph",
        "id": "29c6814edfa63220",
        "text": "[00:33:40]\nAnd one of the things that keeps coming up for me is like, what do I want to be [[atomic]]?\n[00:33:45]\nLike there's a certain philosophy of using tools that I've arrived at through a lot of craftsmanship principles and TDD and things like that, which is like, I don't want tools that I can partially trust and I don't want tools that give me partial results. >> atomic"
      },
      "date": 1681968999180
    },
    {
      "type": "edit",
      "id": "ee8b6771100fae84",
      "item": {
        "type": "paragraph",
        "id": "ee8b6771100fae84",
        "text": "[00:34:16]\nNow, in the case of making a red test green and a TDD step, for example, like do the simplest thing that could possibly work."
      },
      "date": 1681969043812
    },
    {
      "type": "add",
      "id": "e9f1dcfa76503f02",
      "item": {
        "type": "paragraph",
        "id": "e9f1dcfa76503f02",
        "text": "[00:34:26]\nWhat if that was an atomic step I could take for granted?\n[00:34:30]\nThat instead of a set of low level steps, I will look at the code, I will hard code the return value, I will create a new module with the name that's failing. It says could not find module of this name. I will create that module.\n[00:34:43]\nI will create a function of the name that the error message in the failing test says\n[00:34:48]\nis missing. >> atomic"
      },
      "after": "ee8b6771100fae84",
      "date": 1681969076621
    },
    {
      "item": {
        "type": "factory",
        "id": "3a5796bfc0b50443"
      },
      "id": "3a5796bfc0b50443",
      "type": "add",
      "after": "9f840fe74dbb6322",
      "date": 1681969804186
    },
    {
      "type": "edit",
      "id": "3a5796bfc0b50443",
      "item": {
        "type": "paragraph",
        "id": "3a5796bfc0b50443",
        "text": "\nPRESS, Ofir, ZHANG, Muru, MIN, Sewon, SCHMIDT, Ludwig, SMITH, Noah A. and LEWIS, Mike, 2022. Measuring and Narrowing the Compositionality Gap in Language Models. Online. 7 October 2022. arXiv. arXiv:2210.03350. [Accessed 19 April 2023]. We investigate the ability of language models to perform compositional reasoning tasks where the overall solution depends on correctly composing the answers to sub-problems. We measure how often models can correctly answer all sub-problems but not generate the overall solution, a ratio we call the compositionality gap. We evaluate this ratio by asking multi-hop questions with answers that require composing multiple facts unlikely to have been observed together during pretraining. In the GPT-3 family of models, as model size increases we show that the single-hop question answering performance improves faster than the multi-hop performance does, therefore the compositionality gap does not decrease. This surprising result suggests that while more powerful models memorize and recall more factual knowledge, they show no corresponding improvement in their ability to perform this kind of compositional reasoning. We then demonstrate how elicitive prompting (such as chain of thought) narrows the compositionality gap by reasoning explicitly instead of implicitly. We present a new method, self-ask, that further improves on chain of thought. In our method, the model explicitly asks itself (and then answers) follow-up questions before answering the initial question. We finally show that self-ask’s structured prompting lets us easily plug in a search engine to answer the follow-up questions, which additionally improves accuracy.arXiv:2210.03350 [cs]\n"
      },
      "date": 1681969806918
    },
    {
      "item": {
        "type": "factory",
        "id": "b67786df01b86a72"
      },
      "id": "b67786df01b86a72",
      "type": "add",
      "after": "3a5796bfc0b50443",
      "date": 1681969811700
    },
    {
      "id": "b67786df01b86a72",
      "type": "move",
      "order": [
        "eaa1eabf9dbe461f",
        "0c7f5903c3db90c2",
        "5d1685e6c4d05464",
        "5848c20ec7ee962e",
        "33cd21e0f706043f",
        "2aa07e85ecbea61d",
        "feb885dcf1189f73",
        "1fefcce7a612507b",
        "5876a332943c6aec",
        "083a96920828146d",
        "2bedf25e3e797bf3",
        "b0b3f3e15468c504",
        "572b9bab977e74ba",
        "0a369bf0519b9854",
        "030200450fc6f723",
        "d372f72a33d4b3a9",
        "171e0bc03b344c94",
        "242c0d412f0a9839",
        "3784d9a714427600",
        "39bb2c1803c4e644",
        "38d87e3726c11a19",
        "ed104e99732cfc5c",
        "a021009cc09592ff",
        "d4ba7bf93643a771",
        "01f0fa3d9cfda3f6",
        "99d0dfe8b2a35390",
        "9eeda3868cc807c2",
        "2b7531f9cf8fb625",
        "f9a3a03e2232d907",
        "cda8e78d8d34cec4",
        "a0e9017c8050fd34",
        "831f15916c32dd6b",
        "89f90d0b304d6124",
        "6d4d1ad98feb05ed",
        "92aa83c0faef99e6",
        "aea8fb9fc8ccbb9f",
        "6ac326333d84cd2b",
        "17d8f38739b38eff",
        "823ace371405d496",
        "f1b88078cf38792d",
        "89c86ba9fab7fbed",
        "b342d1caa09c31cd",
        "3ecdea720f9fc37b",
        "a93a9b099b2fdc66",
        "91258a1ace863640",
        "de4bdb2e40054024",
        "a8a9c2c9fb2b75a0",
        "92f57d526c976d79",
        "ffc057b2d36a945f",
        "25d7c21f80650a52",
        "e76759aeeba8fdba",
        "f30d607e6598ccc1",
        "64e64057ed104ed6",
        "67121f8e25a0b0e1",
        "e34c5697ad62b0a6",
        "86d7ccb0a6b4fd44",
        "610ee27053532961",
        "309e9d921995670b",
        "cc01f39d76366261",
        "b3235aad494c5449",
        "23743c372df71255",
        "3548b083cac09171",
        "fed36a7b2cf08bfb",
        "257514e02eff7c91",
        "7d319d5c6d72b16a",
        "f440cdb568cb9c6e",
        "4b6005869fd388a5",
        "955b5b145e182202",
        "6d418e5f65ac821c",
        "288bc0fde2d03688",
        "29c6814edfa63220",
        "d46753231b26b571",
        "ee8b6771100fae84",
        "e9f1dcfa76503f02",
        "58e6536d179b8190",
        "1fe7ac0b1f16558c",
        "cb41b8a4f3df0f97",
        "b2209320c2084baf",
        "9cf30ee00000ec9c",
        "eaa63f683f93a07f",
        "bee2e896d6c9c74c",
        "983e77dbf9d07619",
        "c4d44b0f8186c24e",
        "9048c9f533824bd4",
        "9f840fe74dbb6322",
        "b67786df01b86a72",
        "3a5796bfc0b50443"
      ],
      "date": 1681969815233
    },
    {
      "type": "edit",
      "id": "b67786df01b86a72",
      "item": {
        "type": "pagefold",
        "id": "b67786df01b86a72",
        "text": "~"
      },
      "date": 1681969818196
    },
    {
      "type": "edit",
      "id": "3a5796bfc0b50443",
      "item": {
        "type": "paragraph",
        "id": "3a5796bfc0b50443",
        "text": "PRESS, Ofir, ZHANG, Muru, MIN, Sewon, SCHMIDT, Ludwig, SMITH, Noah A. and LEWIS, Mike, 2022. Measuring and Narrowing the Compositionality Gap in Language Models. Online. 7 October 2022. arXiv. arXiv:2210.03350. [Accessed 19 April 2023]. We investigate the ability of language models to perform compositional reasoning tasks where the overall solution depends on correctly composing the answers to sub-problems. We measure how often models can correctly answer all sub-problems but not generate the overall solution, a ratio we call the compositionality gap. We evaluate this ratio by asking multi-hop questions with answers that require composing multiple facts unlikely to have been observed together during pretraining. In the GPT-3 family of models, as model size increases we show that the single-hop question answering performance improves faster than the multi-hop performance does, therefore the compositionality gap does not decrease. This surprising result suggests that while more powerful models memorize and recall more factual knowledge, they show no corresponding improvement in their ability to perform this kind of compositional reasoning. We then demonstrate how elicitive prompting (such as chain of thought) narrows the compositionality gap by reasoning explicitly instead of implicitly. We present a new method, self-ask, that further improves on chain of thought. In our method, the model explicitly asks itself (and then answers) follow-up questions before answering the initial question. We finally show that self-ask’s structured prompting lets us easily plug in a search engine to answer the follow-up questions, which additionally improves accuracy.arXiv:2210.03350 [cs]\n"
      },
      "date": 1681969852025
    },
    {
      "type": "edit",
      "id": "9f840fe74dbb6322",
      "item": {
        "type": "paragraph",
        "id": "9f840fe74dbb6322",
        "text": "compositional questions ⇒ [[Compositionality Gap]]"
      },
      "date": 1681969884621
    },
    {
      "type": "edit",
      "id": "9048c9f533824bd4",
      "item": {
        "type": "video",
        "id": "9048c9f533824bd4",
        "text": "YOUTUBE A3GtlwwWDhI\nThe Compositionality Gap Explained (with GPT-3)"
      },
      "date": 1681970019333
    },
    {
      "type": "edit",
      "id": "3a5796bfc0b50443",
      "item": {
        "type": "paragraph",
        "id": "3a5796bfc0b50443",
        "text": "PRESS, Ofir, ZHANG, Muru, MIN, Sewon, SCHMIDT, Ludwig, SMITH, Noah A. and LEWIS, Mike, 2022. Measuring and Narrowing the Compositionality Gap in Language Models. Online. 7 October 2022. arXiv. arXiv:2210.03350. [Accessed 19 April 2023]. \n"
      },
      "date": 1681973376715
    },
    {
      "item": {
        "type": "factory",
        "id": "e8e4ad7018eb6b58"
      },
      "id": "e8e4ad7018eb6b58",
      "type": "add",
      "after": "3a5796bfc0b50443",
      "date": 1681975567832
    },
    {
      "type": "edit",
      "id": "e8e4ad7018eb6b58",
      "item": {
        "type": "pagefold",
        "id": "e8e4ad7018eb6b58",
        "text": "~"
      },
      "date": 1681975571650
    },
    {
      "item": {
        "type": "factory",
        "id": "9341adfb8588666c"
      },
      "id": "9341adfb8588666c",
      "type": "add",
      "after": "e8e4ad7018eb6b58",
      "date": 1681975573720
    },
    {
      "type": "edit",
      "id": "9341adfb8588666c",
      "item": {
        "type": "reference",
        "id": "9341adfb8588666c",
        "site": "wiki.ralfbarkow.ch",
        "slug": "compositionality-gap",
        "title": "Compositionality Gap",
        "text": "Can we get strong guarantees from AI tools that are known to hallucinate? We discuss some strategies, and ways that [[Elm]] might be a great target for AI assistance."
      },
      "date": 1681975579750
    },
    {
      "id": "6507b979bc039c68",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6507b979bc039c68",
        "text": "[00:56:29]\nBut I think that they're getting enough mileage solving problems through this sort of predictive\n[00:56:36]\ntext, that they're going to keep going with that.\n[00:56:39]\nBut I think the interesting intersection, especially with typed pure functional programming\n[00:56:46]\nlanguages is if you, so humans have their role, these sort of like compiler tools and\n[00:56:55]\nstatic analysis tools have their role, and these AI tools have their role."
      },
      "after": "9341adfb8588666c",
      "attribution": {
        "page": "Compositionality Gap"
      },
      "date": 1681975606577
    },
    {
      "item": {
        "type": "factory",
        "id": "7ee9d38e880c4b2d"
      },
      "id": "7ee9d38e880c4b2d",
      "type": "add",
      "after": "6507b979bc039c68",
      "date": 1681975669018
    },
    {
      "type": "edit",
      "id": "7ee9d38e880c4b2d",
      "item": {
        "type": "paragraph",
        "id": "7ee9d38e880c4b2d",
        "text": "[00:56:59]\nSo with this trifecta, I think each of these pieces needs to do what it is best at.\n[00:57:06]\nCompilers are good at verifying things.\n[00:57:08]\nHumans are good at, do we even need humans anymore?\n[00:57:15]\nHumans are good at critically thinking, guiding these tools.\n[00:57:20]\nHumans have goals.\n[00:57:24]\nHumans are good at gathering requirements."
      },
      "date": 1681975670670
    },
    {
      "item": {
        "type": "factory",
        "id": "0532c00a5e8511c5"
      },
      "id": "0532c00a5e8511c5",
      "type": "add",
      "after": "7ee9d38e880c4b2d",
      "date": 1681975786528
    },
    {
      "type": "edit",
      "id": "0532c00a5e8511c5",
      "item": {
        "type": "paragraph",
        "id": "0532c00a5e8511c5",
        "text": "Trifecta is a term used in various contexts to refer to a sequence of three events, actions, or elements that occur together or are grouped together.\n\nIn horse racing, a trifecta is a type of bet in which a bettor selects the first three finishers of a race in the correct order.\n\nIn politics, a trifecta is a situation where a single political party holds the majority in all three branches of government: the executive, legislative, and judicial branches.\n\nIn sports, a trifecta can refer to a player or team achieving three major accomplishments in a single game or season, such as hitting a home run, stealing a base, and making a great defensive play in baseball.\n\nOverall, trifecta is a versatile term that can refer to any three related or significant things that occur together or are grouped together."
      },
      "date": 1681975792544
    },
    {
      "item": {
        "type": "factory",
        "id": "b84ea46beb5936e0"
      },
      "id": "b84ea46beb5936e0",
      "type": "add",
      "after": "0532c00a5e8511c5",
      "date": 1681975816192
    },
    {
      "type": "edit",
      "id": "0532c00a5e8511c5",
      "item": {
        "type": "paragraph",
        "id": "0532c00a5e8511c5",
        "text": "chat.openai: Trifecta is a term used in various contexts to refer to a sequence of three events, actions, or elements that occur together or are grouped together.\n\nIn horse racing, a trifecta is a type of bet in which a bettor selects the first three finishers of a race in the correct order.\n\nIn politics, a trifecta is a situation where a single political party holds the majority in all three branches of government: the executive, legislative, and judicial branches.\n\nIn sports, a trifecta can refer to a player or team achieving three major accomplishments in a single game or season, such as hitting a home run, stealing a base, and making a great defensive play in baseball.\n\nOverall, trifecta is a versatile term that can refer to any three related or significant things that occur together or are grouped together."
      },
      "date": 1681975818175
    },
    {
      "type": "edit",
      "id": "b84ea46beb5936e0",
      "item": {
        "type": "pagefold",
        "id": "b84ea46beb5936e0",
        "text": "~"
      },
      "date": 1681975822076
    },
    {
      "item": {
        "type": "factory",
        "id": "6dcc61881d16a11e"
      },
      "id": "6dcc61881d16a11e",
      "type": "add",
      "after": "b84ea46beb5936e0",
      "date": 1681975824289
    },
    {
      "id": "6dcc61881d16a11e",
      "type": "move",
      "order": [
        "eaa1eabf9dbe461f",
        "0c7f5903c3db90c2",
        "5d1685e6c4d05464",
        "5848c20ec7ee962e",
        "33cd21e0f706043f",
        "2aa07e85ecbea61d",
        "feb885dcf1189f73",
        "1fefcce7a612507b",
        "5876a332943c6aec",
        "083a96920828146d",
        "2bedf25e3e797bf3",
        "b0b3f3e15468c504",
        "572b9bab977e74ba",
        "0a369bf0519b9854",
        "030200450fc6f723",
        "d372f72a33d4b3a9",
        "171e0bc03b344c94",
        "242c0d412f0a9839",
        "3784d9a714427600",
        "39bb2c1803c4e644",
        "38d87e3726c11a19",
        "ed104e99732cfc5c",
        "a021009cc09592ff",
        "d4ba7bf93643a771",
        "01f0fa3d9cfda3f6",
        "99d0dfe8b2a35390",
        "9eeda3868cc807c2",
        "2b7531f9cf8fb625",
        "f9a3a03e2232d907",
        "cda8e78d8d34cec4",
        "a0e9017c8050fd34",
        "831f15916c32dd6b",
        "89f90d0b304d6124",
        "6d4d1ad98feb05ed",
        "92aa83c0faef99e6",
        "aea8fb9fc8ccbb9f",
        "6ac326333d84cd2b",
        "17d8f38739b38eff",
        "823ace371405d496",
        "f1b88078cf38792d",
        "89c86ba9fab7fbed",
        "b342d1caa09c31cd",
        "3ecdea720f9fc37b",
        "a93a9b099b2fdc66",
        "91258a1ace863640",
        "de4bdb2e40054024",
        "a8a9c2c9fb2b75a0",
        "92f57d526c976d79",
        "ffc057b2d36a945f",
        "25d7c21f80650a52",
        "e76759aeeba8fdba",
        "f30d607e6598ccc1",
        "64e64057ed104ed6",
        "67121f8e25a0b0e1",
        "e34c5697ad62b0a6",
        "86d7ccb0a6b4fd44",
        "610ee27053532961",
        "309e9d921995670b",
        "cc01f39d76366261",
        "b3235aad494c5449",
        "23743c372df71255",
        "3548b083cac09171",
        "fed36a7b2cf08bfb",
        "257514e02eff7c91",
        "7d319d5c6d72b16a",
        "f440cdb568cb9c6e",
        "4b6005869fd388a5",
        "955b5b145e182202",
        "6d418e5f65ac821c",
        "288bc0fde2d03688",
        "29c6814edfa63220",
        "d46753231b26b571",
        "ee8b6771100fae84",
        "e9f1dcfa76503f02",
        "58e6536d179b8190",
        "1fe7ac0b1f16558c",
        "cb41b8a4f3df0f97",
        "b2209320c2084baf",
        "9cf30ee00000ec9c",
        "eaa63f683f93a07f",
        "bee2e896d6c9c74c",
        "983e77dbf9d07619",
        "c4d44b0f8186c24e",
        "9048c9f533824bd4",
        "9f840fe74dbb6322",
        "b67786df01b86a72",
        "3a5796bfc0b50443",
        "e8e4ad7018eb6b58",
        "9341adfb8588666c",
        "6507b979bc039c68",
        "6dcc61881d16a11e",
        "7ee9d38e880c4b2d",
        "0532c00a5e8511c5",
        "b84ea46beb5936e0"
      ],
      "date": 1681975833189
    },
    {
      "type": "edit",
      "id": "6dcc61881d16a11e",
      "item": {
        "type": "pagefold",
        "id": "6dcc61881d16a11e",
        "text": "Trifecta"
      },
      "date": 1681975836185
    },
    {
      "type": "edit",
      "id": "7ee9d38e880c4b2d",
      "item": {
        "type": "paragraph",
        "id": "7ee9d38e880c4b2d",
        "text": "[00:56:59]\nSo with this [[Trifecta]], I think each of these pieces needs to do what it is best at.\n[00:57:06]\nCompilers are good at verifying things.\n[00:57:08]\nHumans are good at, do we even need humans anymore?\n[00:57:15]\nHumans are good at critically thinking, guiding these tools.\n[00:57:20]\nHumans have goals.\n[00:57:24]\nHumans are good at gathering requirements."
      },
      "date": 1681975844054
    },
    {
      "item": {
        "type": "factory",
        "id": "12f0dc87a70e9ced"
      },
      "id": "12f0dc87a70e9ced",
      "type": "add",
      "after": "b84ea46beb5936e0",
      "date": 1681975928309
    },
    {
      "type": "edit",
      "id": "12f0dc87a70e9ced",
      "item": {
        "type": "paragraph",
        "id": "12f0dc87a70e9ced",
        "text": "⇒ [[Trifecta]]"
      },
      "date": 1681975935071
    }
  ]
}