{
  "title": "Refactoring In Various Languages",
  "story": [
    {
      "type": "html",
      "text": "Q:<br>\"Is it possible to do refactoring in language 'X'?\"",
      "id": "5d940b19bb977d4e34e40293ec737ae1"
    },
    {
      "type": "html",
      "text": "A:<br>\"Yes.\"  <i>(And it doesn't matter what 'X' is.)</i>",
      "id": "a51d1addde87309c82cd732cd581aa53"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e167ea8f4fe7cb046c1bfbebff0defc1"
    },
    {
      "type": "html",
      "text": "\nDiscussion of refactoring in various implementation languages:",
      "id": "d59c7baf5021e71a835bb30a0d99e32e"
    },
    {
      "type": "html",
      "text": " [[Visual Basic]]:<br>[[Refactoring In Visual Basic]]",
      "id": "99132637dd38c77324d6d087acc40a3b"
    },
    {
      "type": "html",
      "text": " SQL ([[Structured Query Language]]) -> [[Refactoring With Relational Databases]]",
      "id": "4ceaedd8a9c136b642341ef833c4c6c9"
    },
    {
      "type": "html",
      "text": " C++ ([[Cee Plus Plus]]):<br>[[Refactoring With Cee Plus Plus]]",
      "id": "e4bdcb6910221911a82be1e1ce682c2e"
    },
    {
      "type": "html",
      "text": " Python ([[Python Language]]):<br>[[Refactoring With Python]]",
      "id": "92e516d2e48f54fd18108ba1886b0210"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e167ea8f4fe7cb046c1bfbebff0defc1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e167ea8f4fe7cb046c1bfbebff0defc1"
    },
    {
      "type": "html",
      "text": "\nIt's been my experience that you can refactor in any language.\nNow some languages are not very expressive, so refactoring can be limited, but it's always possible.\nObject oriented languages like the [[Smalltalk Language]] and C++ ([[Cee Plus Plus]]) are powerful tools, and provide lots of opportunities to improve the structure of code through refactoring.\nProcedural languages like COBOL, C and Transact-SQL (stored procedure language for Sybase and SQL Server) limit your ability to refactor.\nBut there's often plenty of room for improvement, even when limited to strictly procedural code:\nYou can rename procedures and variables to make them more clear.\nYou can move global variables into parameters.",
      "id": "ce8fd4a8e13b2b4eeb342506f0575787"
    },
    {
      "type": "html",
      "text": "\nNever give up; there's always hope!  ;->  -- [[Jeff Grigg]]",
      "id": "f9b2cd2e29c634dffc8b560912b0c966"
    },
    {
      "type": "html",
      "text": "<i>T-SQL on its own has little structure, but in combination with the database it inhabits and the code which calls it, there is plenty of scope e.g. moving all SQL code into stored procedures is a desirable refactoring.</i>",
      "id": "b901dfe842a5c0019ad1cb65d5888bd8"
    },
    {
      "type": "html",
      "text": "-- [[Anonymous Donor]]",
      "id": "4c2741a80c2ed3d05ab1e50fbd88dc87"
    },
    {
      "type": "html",
      "text": "\nRefactoring <b>within</b> Transact-SQL can be quite limited.",
      "id": "6337d1b40f508059680e3a81ece12588"
    },
    {
      "type": "html",
      "text": "\nI was working on a project in 1992 where so much business logic was embedded in triggers and the stored procedures they called, that we hit both size and depth limits of Transact-SQL calls.",
      "id": "5169a10f45cdb8fa5706613f3141d8de"
    },
    {
      "type": "html",
      "text": "(Most databases have vaguely documented size limitations for stored procedures.  Sybase had a documented calling depth limit of 16 calls, but would get real flaky after about 12.)",
      "id": "35903ccfc41c706696d14fbc97450ab8"
    },
    {
      "type": "html",
      "text": "\nThe whole project was a silly idea.",
      "id": "951c5a2ceb0feabd43c8b24b06ceeea1"
    },
    {
      "type": "html",
      "text": "<i>...and putting the entire accounting system into triggers was just one of the funnier parts.  ;-></i>",
      "id": "5492c7087ddabbe93b2b070f874dedaf"
    },
    {
      "type": "html",
      "text": "-- [[Jeff Grigg]]",
      "id": "af0a2190a0ac02305c1477f764b86c37"
    },
    {
      "type": "html",
      "text": "<i>Grim. SQL is crap at business logic and triggers are a good way of making your system single-user. Fun when all your state changes are scattered around the place. I see a similar problem with some fundamentalist OO techniques. Massive trees of state-orientated objects with no central coordination, just brutal locking.</i>",
      "id": "02d46c49874ec5e738db46b790e1ae3c"
    },
    {
      "type": "html",
      "text": "<i>I look at refactoring as very much an architectural process. Code on its own doesn't drive a refactoring. Something else does, usually some architectural constraint which is failing. Therefore SQL is extensively refactored for performance, if not for beauty and adherence to Oo<b></b>Wei. This includes consideration of the data structures (as tables and indexes), their physical devices etc. The location of the code may be important to ensure low-bandwidth physical channels are aligned with low volume logical interfaces. And so on. Maybe this is not what you mean by refactoring. If it is, then SQL is extensively refactored code in an application beyond the initial development. Most other code is added. High performance, high quality persistence is hard, and the best way to get it is by refactoring your SQL and data structures appropriately. There are many tips and tricks to be found. Like not putting logic in triggers ;). --[[Richard Henderson]].</i>",
      "id": "467fb56f6bd45833678a2712811c2061"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e167ea8f4fe7cb046c1bfbebff0defc1"
    },
    {
      "type": "html",
      "text": "[[[Category Refactoring]]]",
      "id": "e70ac709c6d1d4fc25a43dac0ef1f37e"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?RefactoringInVariousLanguages c2.com]",
      "id": "15ec99fceb6883c862198b333128e7b2"
    }
  ],
  "journal": [
    {
      "date": 1207833419000,
      "id": "31bb6393674d2d466568a33f5b6ae02a",
      "type": "create",
      "item": {
        "title": "Refactoring In Various Languages",
        "story": [
          {
            "type": "html",
            "text": "Q:<br>\"Is it possible to do refactoring in language 'X'?\"",
            "id": "5d940b19bb977d4e34e40293ec737ae1"
          },
          {
            "type": "html",
            "text": "A:<br>\"Yes.\"  <i>(And it doesn't matter what 'X' is.)</i>",
            "id": "a51d1addde87309c82cd732cd581aa53"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e167ea8f4fe7cb046c1bfbebff0defc1"
          },
          {
            "type": "html",
            "text": "\nDiscussion of refactoring in various implementation languages:",
            "id": "d59c7baf5021e71a835bb30a0d99e32e"
          },
          {
            "type": "html",
            "text": " [[Visual Basic]]:<br>[[Refactoring In Visual Basic]]",
            "id": "99132637dd38c77324d6d087acc40a3b"
          },
          {
            "type": "html",
            "text": " SQL ([[Structured Query Language]]) -> [[Refactoring With Relational Databases]]",
            "id": "4ceaedd8a9c136b642341ef833c4c6c9"
          },
          {
            "type": "html",
            "text": " C++ ([[Cee Plus Plus]]):<br>[[Refactoring With Cee Plus Plus]]",
            "id": "e4bdcb6910221911a82be1e1ce682c2e"
          },
          {
            "type": "html",
            "text": " Python ([[Python Language]]):<br>[[Refactoring With Python]]",
            "id": "92e516d2e48f54fd18108ba1886b0210"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e167ea8f4fe7cb046c1bfbebff0defc1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e167ea8f4fe7cb046c1bfbebff0defc1"
          },
          {
            "type": "html",
            "text": "\nIt's been my experience that you can refactor in any language.\nNow some languages are not very expressive, so refactoring can be limited, but it's always possible.\nObject oriented languages like the [[Smalltalk Language]] and C++ ([[Cee Plus Plus]]) are powerful tools, and provide lots of opportunities to improve the structure of code through refactoring.\nProcedural languages like COBOL, C and Transact-SQL (stored procedure language for Sybase and SQL Server) limit your ability to refactor.\nBut there's often plenty of room for improvement, even when limited to strictly procedural code:\nYou can rename procedures and variables to make them more clear.\nYou can move global variables into parameters.",
            "id": "ce8fd4a8e13b2b4eeb342506f0575787"
          },
          {
            "type": "html",
            "text": "\nNever give up; there's always hope!  ;->  -- [[Jeff Grigg]]",
            "id": "f9b2cd2e29c634dffc8b560912b0c966"
          },
          {
            "type": "html",
            "text": "<i>T-SQL on its own has little structure, but in combination with the database it inhabits and the code which calls it, there is plenty of scope e.g. moving all SQL code into stored procedures is a desirable refactoring.</i>",
            "id": "b901dfe842a5c0019ad1cb65d5888bd8"
          },
          {
            "type": "html",
            "text": "-- [[Anonymous Donor]]",
            "id": "4c2741a80c2ed3d05ab1e50fbd88dc87"
          },
          {
            "type": "html",
            "text": "\nRefactoring <b>within</b> Transact-SQL can be quite limited.",
            "id": "6337d1b40f508059680e3a81ece12588"
          },
          {
            "type": "html",
            "text": "\nI was working on a project in 1992 where so much business logic was embedded in triggers and the stored procedures they called, that we hit both size and depth limits of Transact-SQL calls.",
            "id": "5169a10f45cdb8fa5706613f3141d8de"
          },
          {
            "type": "html",
            "text": "(Most databases have vaguely documented size limitations for stored procedures.  Sybase had a documented calling depth limit of 16 calls, but would get real flaky after about 12.)",
            "id": "35903ccfc41c706696d14fbc97450ab8"
          },
          {
            "type": "html",
            "text": "\nThe whole project was a silly idea.",
            "id": "951c5a2ceb0feabd43c8b24b06ceeea1"
          },
          {
            "type": "html",
            "text": "<i>...and putting the entire accounting system into triggers was just one of the funnier parts.  ;-></i>",
            "id": "5492c7087ddabbe93b2b070f874dedaf"
          },
          {
            "type": "html",
            "text": "-- [[Jeff Grigg]]",
            "id": "af0a2190a0ac02305c1477f764b86c37"
          },
          {
            "type": "html",
            "text": "<i>Grim. SQL is crap at business logic and triggers are a good way of making your system single-user. Fun when all your state changes are scattered around the place. I see a similar problem with some fundamentalist OO techniques. Massive trees of state-orientated objects with no central coordination, just brutal locking.</i>",
            "id": "02d46c49874ec5e738db46b790e1ae3c"
          },
          {
            "type": "html",
            "text": "<i>I look at refactoring as very much an architectural process. Code on its own doesn't drive a refactoring. Something else does, usually some architectural constraint which is failing. Therefore SQL is extensively refactored for performance, if not for beauty and adherence to Oo<b></b>Wei. This includes consideration of the data structures (as tables and indexes), their physical devices etc. The location of the code may be important to ensure low-bandwidth physical channels are aligned with low volume logical interfaces. And so on. Maybe this is not what you mean by refactoring. If it is, then SQL is extensively refactored code in an application beyond the initial development. Most other code is added. High performance, high quality persistence is hard, and the best way to get it is by refactoring your SQL and data structures appropriately. There are many tips and tricks to be found. Like not putting logic in triggers ;). --[[Richard Henderson]].</i>",
            "id": "467fb56f6bd45833678a2712811c2061"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e167ea8f4fe7cb046c1bfbebff0defc1"
          },
          {
            "type": "html",
            "text": "[[[Category Refactoring]]]",
            "id": "e70ac709c6d1d4fc25a43dac0ef1f37e"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?RefactoringInVariousLanguages c2.com]",
            "id": "15ec99fceb6883c862198b333128e7b2"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1627291247726
    }
  ]
}