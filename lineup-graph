{
  "title": "LINEUP graph",
  "story": [
    {
      "type": "paragraph",
      "id": "484e092159df2d01",
      "text": "We show a graph from  [[Parse Page Paragraphs]]."
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nHEIGHT 500\nLINEUP graph"
    },
    {
      "type": "paragraph",
      "id": "b8a37b6e0014e5d2",
      "text": "We need a function that can handle a graph."
    },
    {
      "type": "code",
      "id": "7474b13b85017948",
      "text": "// Function to handle the received graph data and render the graph\nasync function handleGraphData(message) {\n    console.log(\"Received graph data:\", message);\n\n    // Assuming graphData is a JSON object representing the graph\n    const graph = message.graph;\n\n    // Display the graph in the graph container\n    renderGraph(graph);\n}"
    },
    {
      "type": "paragraph",
      "id": "2b83956535395893",
      "text": "We need a function that displays the graph."
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": "// Function to emit HTML content for the graph container\nexport async function emit(el) {\n    el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}"
    },
    {
      "type": "code",
      "id": "09ab139176bd5b5e",
      "text": "// Function to render the graph in the graph container\nasync function renderGraph(graph) {\n    console.log(\"Rendering graph:\", graph);\n\n    // Parse the JSON string into an object\n    const graphObject = JSON.parse(graph);\n\n    // Select the graph container element\n    const graphContainer = document.getElementById('graph-container');\n    \n    // Render the graph in the graph container\n    graphContainer.innerHTML = `<pre>${JSON.stringify(graphObject, null, 2)}</pre>`; // Pretty print the JSON\n}\n",
      "alias": "f60c71defbe486e0"
    },
    {
      "type": "code",
      "id": "8f875986430b7928",
      "text": "// Event listener to handle messages sent from the \"Parse Page Paragraphs\" page (SOURCE graph)\nwindow.addEventListener('message', function(event) {\n    console.log(\"Received message:\", event.data);\n\n    const message = event.data;\n    \n    // Check if the message is intended for this frame and contains graph data\n    if (message.action === 'graphStream') {\n\n        // Handle the graph data\n        handleGraphData(message);\n    }\n});"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "LINEUP graph",
        "story": []
      },
      "date": 1708939147112
    },
    {
      "id": "484e092159df2d01",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "484e092159df2d01",
        "text": "We scribble a line on a canvas from a [[Stream of Points]]."
      },
      "attribution": {
        "page": "Scribble",
        "site": "frame.wiki.dbbs.co"
      },
      "date": 1708939155106
    },
    {
      "type": "edit",
      "id": "484e092159df2d01",
      "item": {
        "type": "paragraph",
        "id": "484e092159df2d01",
        "text": "We show a graph on a canvas from a [[Stream of Points]]."
      },
      "date": 1708939202375
    },
    {
      "type": "edit",
      "id": "484e092159df2d01",
      "item": {
        "type": "paragraph",
        "id": "484e092159df2d01",
        "text": "We show a graph from  [[Parse Page Paragraphs]]."
      },
      "date": 1708939221204
    },
    {
      "id": "6cf52409eec3988c",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nLINEUP point"
      },
      "attribution": {
        "page": "Scribble",
        "site": "frame.wiki.dbbs.co"
      },
      "date": 1708939227017
    },
    {
      "id": "484e092159df2d01",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "6cf52409eec3988c"
      ],
      "date": 1708939229340
    },
    {
      "id": "f60c71defbe486e0",
      "type": "add",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "function line() {return Generators.observe(change => {\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"pointStream\") {\n      const {point} = data\n      change(point)\n    }\n  }\n  return () => window\n    .removeEventListener(\"message\", listen)\n})}"
      },
      "after": "484e092159df2d01",
      "attribution": {
        "page": "Scribble",
        "site": "frame.wiki.dbbs.co"
      },
      "date": 1708939272300
    },
    {
      "id": "6cf52409eec3988c",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "6cf52409eec3988c",
        "f60c71defbe486e0"
      ],
      "date": 1708939283234
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nLINEUP graph"
      },
      "date": 1708939294009
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "function line() {return Generators.observe(change => {\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"pointStream\") {\n      const {graph} = data\n      change(graph)\n    }\n  }\n  return () => window\n    .removeEventListener(\"message\", listen)\n})}"
      },
      "date": 1708939307555
    },
    {
      "id": "2b83956535395893",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need a canvas on which to draw."
      },
      "after": "6cf52409eec3988c",
      "attribution": {
        "page": "Scribble",
        "site": "frame.wiki.dbbs.co"
      },
      "date": 1708939428097
    },
    {
      "id": "5eb6b67568179aa3",
      "type": "add",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <canvas width=\"380\" height=\"300\"></canvas>\n    <style>canvas {border: 1px solid black;}</style>`\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n  const canvas = el.querySelector(\"canvas\")\n  const ctx = canvas.getContext(\"2d\")\n  ctx.translate(190, 150)\n  resize()\n  drawLine(ctx, line(), \"purple\")\n}"
      },
      "after": "2b83956535395893",
      "attribution": {
        "page": "Scribble",
        "site": "frame.wiki.dbbs.co"
      },
      "date": 1708939431255
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"pointStream\") {\n      const {graph} = data\n      change(graph)\n    }\n  }\n  return () => window\n    .removeEventListener(\"message\", listen)\n})}"
      },
      "date": 1708939444373
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "function line() {return Generators.observe(change => {\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"pointStream\") {\n      const {point} = data\n      change(point)\n    }\n  }\n  return () => window\n    .removeEventListener(\"message\", listen)\n})}"
      },
      "date": 1708939448542
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <canvas width=\"380\" height=\"300\"></canvas>\n    <style>canvas {border: 1px solid black;}</style>`\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n\n  drawLine(ctx, line(), \"purple\")\n}"
      },
      "date": 1708939767805
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "function renderGraph(container, graph) {\n  // Clear the container before rendering the graph\n  container.innerHTML = \"\";\n\n  // Create elements to represent nodes and edges\n  graph.nodes.forEach(node => {\n    const nodeElement = document.createElement(\"div\");\n    nodeElement.textContent = node.type; // Render node type as text for simplicity\n    nodeElement.style.backgroundColor = \"lightblue\"; // Example styling\n    nodeElement.style.padding = \"5px\";\n    nodeElement.style.margin = \"5px\";\n    container.appendChild(nodeElement);\n  });\n\n  // Render edges (if needed)\n  graph.rels.forEach(rel => {\n    // Here you can render edges between nodes based on the graph's relationship data\n    // This depends on how you represent relationships in your graph object\n    // For simplicity, we are not rendering edges in this example\n  });\n}"
      },
      "date": 1708939790213
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <canvas width=\"380\" height=\"300\"></canvas>\n    <style>canvas {border: 1px solid black;}</style>`\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n  renderGraph(container, graph)\n}"
      },
      "date": 1708939826348
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el, graph) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n  renderGraph(el.querySelector(\"#graph-container\"), graph);\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n  renderGraph(container, graph)\n}"
      },
      "date": 1708939850736
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el, graph) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n  renderGraph(el.querySelector(\"#graph-container\"), graph);\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n}"
      },
      "date": 1708939891215
    },
    {
      "type": "edit",
      "id": "2b83956535395893",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need something to show the graph."
      },
      "date": 1708939922298
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el, graph) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n  renderGraph(el.querySelector(\"#graph-container\"), graph);\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n\n{\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"pointStream\") {\n      const {point} = data\n      change(point)\n    }\n  }\n  return () => window\n    .removeEventListener(\"message\", listen)\n}\n}"
      },
      "date": 1708940455521
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el, graph) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"pointStream\") {\n      const {graph} = data\n      change(graph)\n    }\n  }\n\n  renderGraph(el.querySelector(\"#graph-container\"), graph);\n\n  return () => window\n    .removeEventListener(\"message\", listen)\n}"
      },
      "date": 1708940583896
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"pointStream\") {\n      const {graph} = data\n      change(graph)\n    }\n  }\n\n  renderGraph(el.querySelector(\"#graph-container\"), graph);\n\n  return () => window\n    .removeEventListener(\"message\", listen)\n}"
      },
      "date": 1708940760799
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"graphStream\") {\n      const {graph} = data\n      change(graph)\n    }\n  }\n\n  renderGraph(el.querySelector(\"#graph-container\"), graph);\n\n  return () => window\n    .removeEventListener(\"message\", listen)\n}"
      },
      "date": 1708941246518
    },
    {
      "id": "b8a37b6e0014e5d2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b8a37b6e0014e5d2",
        "text": "We need something that knows how to convert a sequence of points into graphics instructions."
      },
      "after": "6cf52409eec3988c",
      "attribution": {
        "page": "Scribble",
        "site": "frame.wiki.dbbs.co"
      },
      "date": 1708941388891
    },
    {
      "id": "7474b13b85017948",
      "type": "add",
      "item": {
        "type": "code",
        "id": "7474b13b85017948",
        "text": "async function drawLine(ctx, line, color) {\n  ctx.beginPath()\n  ctx.strokeStyle = color\n  ctx.lineWidth = 1\n  let first = true\n  for await (let {x, y} of line) { // knows iterators \n    first ? ctx.moveTo(x, y) : ctx.lineTo(x, y)\n    ctx.stroke()\n    first = false\n  }\n}"
      },
      "after": "b8a37b6e0014e5d2",
      "attribution": {
        "page": "Scribble",
        "site": "frame.wiki.dbbs.co"
      },
      "date": 1708941396862
    },
    {
      "type": "edit",
      "id": "b8a37b6e0014e5d2",
      "item": {
        "type": "paragraph",
        "id": "b8a37b6e0014e5d2",
        "text": "We need something that knows how to deal with a graph."
      },
      "date": 1708941458773
    },
    {
      "type": "edit",
      "id": "7474b13b85017948",
      "item": {
        "type": "code",
        "id": "7474b13b85017948",
        "text": "async function drawGraph(graph) {\n  ctx.beginPath()\n  ctx.strokeStyle = color\n  ctx.lineWidth = 1\n  let first = true\n  for await (let {x, y} of line) { // knows iterators \n    first ? ctx.moveTo(x, y) : ctx.lineTo(x, y)\n    ctx.stroke()\n    first = false\n  }\n}"
      },
      "date": 1708941493957
    },
    {
      "type": "edit",
      "id": "7474b13b85017948",
      "item": {
        "type": "code",
        "id": "7474b13b85017948",
        "text": "async function drawGraph(graph) {\n  console.log(\"Graph:\" graph)\n}"
      },
      "date": 1708941519321
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n\n  drawGraph(graph)\n}"
      },
      "date": 1708941647276
    },
    {
      "id": "09ab139176bd5b5e",
      "type": "add",
      "item": {
        "type": "code",
        "id": "09ab139176bd5b5e",
        "text": "function line() {return Generators.observe(change => {\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"pointStream\") {\n      const {point} = data\n      change(point)\n    }\n  }\n  return () => window\n    .removeEventListener(\"message\", listen)\n})}",
        "alias": "f60c71defbe486e0"
      },
      "after": "f60c71defbe486e0",
      "attribution": {
        "page": "Scribble",
        "site": "frame.wiki.dbbs.co"
      },
      "date": 1708941690569
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n\n  drawGraph(line)\n}"
      },
      "date": 1708941744543
    },
    {
      "type": "remove",
      "id": "f60c71defbe486e0",
      "date": 1708941765013
    },
    {
      "type": "edit",
      "id": "09ab139176bd5b5e",
      "item": {
        "type": "code",
        "id": "09ab139176bd5b5e",
        "text": "function line() { => {\n  window.addEventListener(\"message\", listen)\n  function listen({data}) {\n    if (data.action == \"pointStream\") {\n      const {point} = data\n      change(point)\n    }\n  }\n  return () => window\n    .removeEventListener(\"message\", listen)\n})}",
        "alias": "f60c71defbe486e0"
      },
      "date": 1708941776678
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n\n  drawLine(line)\n}"
      },
      "date": 1708941838889
    },
    {
      "type": "edit",
      "id": "7474b13b85017948",
      "item": {
        "type": "code",
        "id": "7474b13b85017948",
        "text": "async function drawLine(line) {\n  console.log(\"Line:\" line)\n}"
      },
      "date": 1708941858376
    },
    {
      "type": "edit",
      "id": "09ab139176bd5b5e",
      "item": {
        "type": "code",
        "id": "09ab139176bd5b5e",
        "text": "function line() {\n  window.addEventListener(\"message\", listen);\n  function listen({ data }) {\n    if (data.action == \"pointStream\") {\n      const { point } = data;\n      change(point);\n    }\n  }\n  return () => window.removeEventListener(\"message\", listen);\n}\n",
        "alias": "f60c71defbe486e0"
      },
      "date": 1708941959432
    },
    {
      "type": "edit",
      "id": "09ab139176bd5b5e",
      "item": {
        "type": "code",
        "id": "09ab139176bd5b5e",
        "text": "function line() {\n  window.addEventListener(\"message\", listen);\n  function listen({ data }) {\n    if (data.action == \"publishSourceData\"\") {\n      const { point } = data;\n      change(point);\n    }\n  }\n  return () => window.removeEventListener(\"message\", listen);\n}\n",
        "alias": "f60c71defbe486e0"
      },
      "date": 1708942302846
    },
    {
      "type": "edit",
      "id": "09ab139176bd5b5e",
      "item": {
        "type": "code",
        "id": "09ab139176bd5b5e",
        "text": "function line() {\n  window.addEventListener(\"message\", listen);\n  function listen({ data }) {\n    if (data.action == \"publishSourceData\") {\n      const { point } = data;\n      change(point);\n    }\n  }\n  return () => window.removeEventListener(\"message\", listen);\n}\n",
        "alias": "f60c71defbe486e0"
      },
      "date": 1708942306798
    },
    {
      "type": "edit",
      "id": "7474b13b85017948",
      "item": {
        "type": "code",
        "id": "7474b13b85017948",
        "text": "// Function to handle the received graph data and render the graph\nasync function handleGraphData(graphData) {\n    // Assuming graphData is a JSON object representing the graph\n    const graph = JSON.parse(graphData);\n\n    // Display the graph in the graph container\n    renderGraph(graph);\n}"
      },
      "date": 1708942518823
    },
    {
      "type": "fork",
      "date": 1708942566384
    },
    {
      "type": "edit",
      "id": "09ab139176bd5b5e",
      "item": {
        "type": "code",
        "id": "09ab139176bd5b5e",
        "text": "// Function to render the graph in the graph container\nasync function renderGraph(graph) {\n    // Select the graph container element\n    const graphContainer = document.getElementById('graph-container');\n    \n    // Render the graph in the graph container (implementation depends on how the graph is structured)\n    // For example, if the graph is represented as SVG, you can directly insert it into the container:\n    graphContainer.innerHTML = graph; // Replace 'graph' with the appropriate code to render the graph\n}",
        "alias": "f60c71defbe486e0"
      },
      "date": 1708942613888
    },
    {
      "item": {
        "type": "factory",
        "id": "8f875986430b7928"
      },
      "id": "8f875986430b7928",
      "type": "add",
      "after": "09ab139176bd5b5e",
      "date": 1708942637522
    },
    {
      "type": "edit",
      "id": "8f875986430b7928",
      "item": {
        "type": "code",
        "id": "8f875986430b7928",
        "text": "// Event listener to handle messages sent from the parent window\nwindow.addEventListener('message', function(event) {\n    const message = event.data;\n    \n    // Check if the message is intended for this frame and contains graph data\n    if (message.action === 'publishSourceData' && message.name === 'graph' && message.sourceData.graph) {\n        // Extract the graph data\n        const graphData = message.sourceData.graph;\n        \n        // Handle the graph data\n        handleGraphData(graphData);\n    }\n});"
      },
      "date": 1708942639794
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n\n  renderGraph(graph)\n}"
      },
      "date": 1708942699473
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n\n  handleGraphData(graphData) \n}"
      },
      "date": 1708942738653
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n}"
      },
      "date": 1708942930936
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}"
      },
      "date": 1708943391470
    },
    {
      "type": "edit",
      "id": "8f875986430b7928",
      "item": {
        "type": "code",
        "id": "8f875986430b7928",
        "text": "// Event listener to handle messages sent from the parent window\nwindow.addEventListener('message', function(event) {\n    console.log(\"Received message:\", event.data);\n\n    const message = event.data;\n    \n    // Check if the message is intended for this frame and contains graph data\n    if (message.action === 'publishSourceData' && message.name === 'graph' && message.sourceData.graph) {\n        // Extract the graph data\n        const graphData = message.sourceData.graph;\n        \n        // Handle the graph data\n        handleGraphData(graphData);\n    }\n});"
      },
      "date": 1708943448694
    },
    {
      "type": "edit",
      "id": "09ab139176bd5b5e",
      "item": {
        "type": "code",
        "id": "09ab139176bd5b5e",
        "text": "// Function to render the graph in the graph container\nasync function renderGraph(graph) {\n    console.log(\"Rendering graph:\", graph);\n\n    // Select the graph container element\n    const graphContainer = document.getElementById('graph-container');\n    \n    // Render the graph in the graph container (implementation depends on how the graph is structured)\n    // For example, if the graph is represented as SVG, you can directly insert it into the container:\n    graphContainer.innerHTML = JSON.stringify(graph); // Replace 'graph' with the appropriate code to render the graph\n}",
        "alias": "f60c71defbe486e0"
      },
      "date": 1708943465772
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Function to emit HTML content for the graph container\nexport async function emit(el) {\n    el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}"
      },
      "date": 1708943491498
    },
    {
      "type": "edit",
      "id": "7474b13b85017948",
      "item": {
        "type": "code",
        "id": "7474b13b85017948",
        "text": "// Function to handle the received graph data and render the graph\nasync function handleGraphData(graphData) {\n    console.log(\"Received graph data:\", graphData);\n\n    // Assuming graphData is a JSON object representing the graph\n    const graph = JSON.parse(graphData);\n\n    // Display the graph in the graph container\n    renderGraph(graph);\n}"
      },
      "date": 1708943510484
    },
    {
      "type": "edit",
      "id": "8f875986430b7928",
      "item": {
        "type": "code",
        "id": "8f875986430b7928",
        "text": "// Event listener to handle messages sent from the Parse Page Paragraphs page\nwindow.addEventListener('message', function(event) {\n    console.log(\"Received message:\", event.data);\n\n    const message = event.data;\n    \n    // Check if the message is intended for this frame and contains graph data\n    if (message.action === 'publishSourceData' && message.name === 'graph' && message.sourceData.graph) {\n        // Extract the graph data\n        const graphData = message.sourceData.graph;\n        \n        // Handle the graph data\n        handleGraphData(graphData);\n    }\n});"
      },
      "date": 1708945226502
    },
    {
      "type": "edit",
      "id": "8f875986430b7928",
      "item": {
        "type": "code",
        "id": "8f875986430b7928",
        "text": "// Event listener to handle messages sent from the [[Parse Page Paragraphs]] page\nwindow.addEventListener('message', function(event) {\n    console.log(\"Received message:\", event.data);\n\n    const message = event.data;\n    \n    // Check if the message is intended for this frame and contains graph data\n    if (message.action === 'publishSourceData' && message.name === 'graph' && message.sourceData.graph) {\n        // Extract the graph data\n        const graphData = message.sourceData.graph;\n        \n        // Handle the graph data\n        handleGraphData(graphData);\n    }\n});"
      },
      "date": 1708945250699
    },
    {
      "type": "edit",
      "id": "8f875986430b7928",
      "item": {
        "type": "code",
        "id": "8f875986430b7928",
        "text": "// Event listener to handle messages sent from the \"Parse Page Paragraphs\" page\nwindow.addEventListener('message', function(event) {\n    console.log(\"Received message:\", event.data);\n\n    const message = event.data;\n    \n    // Check if the message is intended for this frame and contains graph data\n    if (message.action === 'publishSourceData' && message.name === 'graph' && message.sourceData.graph) {\n        // Extract the graph data\n        const graphData = message.sourceData.graph;\n        \n        // Handle the graph data\n        handleGraphData(graphData);\n    }\n});"
      },
      "date": 1708945267473
    },
    {
      "type": "fork",
      "date": 1708954458895
    },
    {
      "type": "fork",
      "date": 1708954783646
    },
    {
      "type": "edit",
      "id": "8f875986430b7928",
      "item": {
        "type": "code",
        "id": "8f875986430b7928",
        "text": "// Event listener to handle messages sent from the \"Parse Page Paragraphs\" page\nwindow.addEventListener('message', function(event) {\n    console.log(\"Received message:\", event.data);\n\n    const message = event.data;\n    \n    // Check if the message is intended for this frame and contains graph data\n    if (message.action === 'publishSourceData' && message.name === 'graph' && message.sourceData.graph) {\n\n        // Handle the graph data\n        handleGraphData(message);\n    }\n});"
      },
      "date": 1708954944144
    },
    {
      "type": "edit",
      "id": "7474b13b85017948",
      "item": {
        "type": "code",
        "id": "7474b13b85017948",
        "text": "// Function to handle the received graph data and render the graph\nasync function handleGraphData(message) {\n    console.log(\"Received graph data:\", message);\n\n    // Assuming graphData is a JSON object representing the graph\n    const graph = message.sourceData.graph;\n\n    // Display the graph in the graph container\n    renderGraph(graph);\n}"
      },
      "date": 1708954999687
    },
    {
      "type": "edit",
      "id": "8f875986430b7928",
      "item": {
        "type": "code",
        "id": "8f875986430b7928",
        "text": "// Event listener to handle messages sent from the \"Parse Page Paragraphs\" page\nwindow.addEventListener('message', function(event) {\n    console.log(\"Received message:\", event.data);\n\n    const message = event.data;\n    \n    // Check if the message is intended for this frame and contains graph data\n    if (message.action === 'graphStream' && message.name === 'graph' && message.sourceData.graph) {\n\n        // Handle the graph data\n        handleGraphData(message);\n    }\n});"
      },
      "date": 1708955131405
    },
    {
      "type": "edit",
      "id": "8f875986430b7928",
      "item": {
        "type": "code",
        "id": "8f875986430b7928",
        "text": "// Event listener to handle messages sent from the \"Parse Page Paragraphs\" page\nwindow.addEventListener('message', function(event) {\n    console.log(\"Received message:\", event.data);\n\n    const message = event.data;\n    \n    // Check if the message is intended for this frame and contains graph data\n    if (message.action === 'graphStream') {\n\n        // Handle the graph data\n        handleGraphData(message);\n    }\n});"
      },
      "date": 1708955266183
    },
    {
      "type": "edit",
      "id": "7474b13b85017948",
      "item": {
        "type": "code",
        "id": "7474b13b85017948",
        "text": "// Function to handle the received graph data and render the graph\nasync function handleGraphData(message) {\n    console.log(\"Received graph data:\", message);\n\n    // Assuming graphData is a JSON object representing the graph\n    const graph = message.graph;\n\n    // Display the graph in the graph container\n    renderGraph(graph);\n}"
      },
      "date": 1708955332403
    },
    {
      "type": "fork",
      "date": 1708955767037
    },
    {
      "type": "edit",
      "id": "09ab139176bd5b5e",
      "item": {
        "type": "code",
        "id": "09ab139176bd5b5e",
        "text": "// Function to render the graph in the graph container\nasync function renderGraph(graph) {\n    console.log(\"Rendering graph:\", graph);\n\n    // Select the graph container element\n    const graphContainer = document.getElementById('graph-container');\n    \n    // Render the graph in the graph container (implementation depends on how the graph is structured)\n    // For example, if the graph is represented as SVG, you can directly insert it into the container:\n    graphContainer.innerHTML = `<pre>${JSON.stringify(graph, null, 2)}</pre>`; // Pretty print the JSON\n}\n",
        "alias": "f60c71defbe486e0"
      },
      "date": 1708955881362
    },
    {
      "type": "edit",
      "id": "09ab139176bd5b5e",
      "item": {
        "type": "code",
        "id": "09ab139176bd5b5e",
        "text": "// Function to render the graph in the graph container\nasync function renderGraph(graph) {\n    console.log(\"Rendering graph:\", graph);\n\n    // Parse the JSON string into an object\n    const graphObject = JSON.parse(graph);\n\n    // Select the graph container element\n    const graphContainer = document.getElementById('graph-container');\n    \n    // Render the graph in the graph container\n    graphContainer.innerHTML = `<pre>${JSON.stringify(graphObject, null, 2)}</pre>`; // Pretty print the JSON\n}\n",
        "alias": "f60c71defbe486e0"
      },
      "date": 1708955991034
    },
    {
      "type": "fork",
      "date": 1708956204855
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nHEIGHT 500\nLINEUP graph"
      },
      "date": 1708956555872
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nHEIGHT 500\nLINEUP graph"
      },
      "date": 1708956566420
    },
    {
      "type": "fork",
      "date": 1708956695127
    },
    {
      "type": "edit",
      "id": "8f875986430b7928",
      "item": {
        "type": "code",
        "id": "8f875986430b7928",
        "text": "// Event listener to handle messages sent from the \"Parse Page Paragraphs\" page (SOURCE graph)\nwindow.addEventListener('message', function(event) {\n    console.log(\"Received message:\", event.data);\n\n    const message = event.data;\n    \n    // Check if the message is intended for this frame and contains graph data\n    if (message.action === 'graphStream') {\n\n        // Handle the graph data\n        handleGraphData(message);\n    }\n});"
      },
      "date": 1708958620217
    },
    {
      "type": "fork",
      "date": 1708958817843
    },
    {
      "type": "edit",
      "id": "b8a37b6e0014e5d2",
      "item": {
        "type": "paragraph",
        "id": "b8a37b6e0014e5d2",
        "text": "We need a function that can handle a graph."
      },
      "date": 1708958903838
    },
    {
      "type": "edit",
      "id": "2b83956535395893",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need a function that displays the graph."
      },
      "date": 1708958946697
    }
  ]
}