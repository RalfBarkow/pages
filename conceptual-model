{
  "title": "Conceptual Model",
  "story": [
    {
      "type": "paragraph",
      "id": "4178ba35c506b5bf",
      "text": "Reason 1: A [[Tree]] [[Structure]]"
    },
    {
      "type": "paragraph",
      "id": "83a2bdcf0606b223",
      "text": "[[Simulation]]s often have many equations, scalar values, and fields of values; some are input parameters or constants, while others are results that depend on this input. Such values explicitly and implicitly define the context for your simulation. With huge amounts of interrelated data, you need a conceptual model to help organize and manage data—first in your mind, and hopefully on the computer thereafter."
    },
    {
      "type": "paragraph",
      "id": "aa5f95d57eec59b3",
      "text": "How can you [[map]] this organization on the disk?"
    },
    {
      "type": "paragraph",
      "id": "fa7a8272dfcf4ca0",
      "text": "It’s possible to have hundreds of files in the same directory, as well as a [[Hierarchy]] of directories. Each file can also have its own inner organization, including lists of header and trailer values, or tabulated value arrays, or whatever other arrangement you can imagine. There’s no better organization than yours, because you know your simulation and your application, as well as its algorithm and required parameters. But if your application will be used more than once, you have to write all this down—both so you can remember it and so you can share it with other scientists if the need arises. To achieve this, you need a formalism to [[describe]] the [[Context]] you have in mind and a structure to help you organize your data."
    },
    {
      "type": "pagefold",
      "id": "5f0cb8411b9ea2ed",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "309676b4486374a1",
      "text": "M. Poinot, “Five Good Reasons to Use the [[Hierarchical]] [[Data Format]],” Computing in Science & Eng., vol. 12, no. 5, 2010, pp. 84–90."
    },
    {
      "type": "paragraph",
      "id": "9e4900533ce3272f",
      "text": "In computer science, the tree data structure is well known. It’s both expressive and exists in many parts of your workstation, including in file systems, programming language translations, and top-down approaches to software design. In CGNS, we can completely [[describe]] a [[Simulation]] as a [[Tree]], calling the root node CGNSBase_t. This root node contains the simulation’s global information, such as a ReferenceState holding common physical parameters. A CGNS tree also includes the Zone_t, which are the elementary mesh containers used to discretize the space, including boundary conditions and so on. CGNS organizes the tree using the topology as criteria. When you define your tree, you create a data model that structures mandatory and optional data for your context. Without a standard like CGNS, you have to define your own."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Conceptual Model",
        "story": []
      },
      "date": 1675321533032
    },
    {
      "id": "309676b4486374a1",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "309676b4486374a1",
        "text": "M. Poinot, “Five Good Reasons to Use the [[Hierarchical]] [[Data Format]],” Computing in Science & Eng., vol. 12, no. 5, 2010, pp. 84–90."
      },
      "date": 1675321536409
    },
    {
      "item": {
        "type": "factory",
        "id": "5f0cb8411b9ea2ed"
      },
      "id": "5f0cb8411b9ea2ed",
      "type": "add",
      "after": "309676b4486374a1",
      "date": 1675321537579
    },
    {
      "type": "edit",
      "id": "5f0cb8411b9ea2ed",
      "item": {
        "type": "pagefold",
        "id": "5f0cb8411b9ea2ed",
        "text": "~"
      },
      "date": 1675321540021
    },
    {
      "id": "5f0cb8411b9ea2ed",
      "type": "move",
      "order": [
        "5f0cb8411b9ea2ed",
        "309676b4486374a1"
      ],
      "date": 1675321541933
    },
    {
      "id": "4178ba35c506b5bf",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4178ba35c506b5bf",
        "text": "Reason 1: A Tree Structure"
      },
      "date": 1675321548098
    },
    {
      "id": "83a2bdcf0606b223",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "83a2bdcf0606b223",
        "text": "[[Simulation]]s often have many equations, scalar values, and fields of values; some are input parameters or constants, while others are results that depend on this input. Such values explicitly and implicitly define the context for your simulation. With huge amounts of interrelated data, you need a conceptual model to help organize and manage data—first in your mind, and hopefully on the computer thereafter."
      },
      "after": "4178ba35c506b5bf",
      "date": 1675321551192
    },
    {
      "type": "add",
      "id": "aa5f95d57eec59b3",
      "item": {
        "type": "paragraph",
        "id": "aa5f95d57eec59b3",
        "text": "How can you [[map]] this organization on the disk?"
      },
      "after": "83a2bdcf0606b223",
      "date": 1675321592654
    },
    {
      "item": {
        "type": "factory",
        "id": "fa7a8272dfcf4ca0"
      },
      "id": "fa7a8272dfcf4ca0",
      "type": "add",
      "after": "309676b4486374a1",
      "date": 1675321607394
    },
    {
      "id": "fa7a8272dfcf4ca0",
      "type": "move",
      "order": [
        "4178ba35c506b5bf",
        "83a2bdcf0606b223",
        "aa5f95d57eec59b3",
        "fa7a8272dfcf4ca0",
        "5f0cb8411b9ea2ed",
        "309676b4486374a1"
      ],
      "date": 1675321609152
    },
    {
      "type": "edit",
      "id": "fa7a8272dfcf4ca0",
      "item": {
        "type": "paragraph",
        "id": "fa7a8272dfcf4ca0",
        "text": "It’s possible to have hundreds of files in the same directory, as well as a hierarchy of directories. Each file can also have its own inner organization, including lists of header and"
      },
      "date": 1675321610826
    },
    {
      "type": "edit",
      "id": "fa7a8272dfcf4ca0",
      "item": {
        "type": "paragraph",
        "id": "fa7a8272dfcf4ca0",
        "text": "It’s possible to have hundreds of files in the same directory, as well as a hierarchy of directories. Each file can also have its own inner organization, including lists of header and trailer values, or tabulated value arrays, or whatever other arrangement you can imagine. There’s no better organization than yours, because you know your simulation and your application, as well as its algorithm and required parameters. But if your application will be used more than once, you have to write all this down—both so you can remember it and so you can share it with other scientists if the need arises. To achieve this, you need a formalism to describe the context you have in mind and a structure to help you organize your data."
      },
      "date": 1675321624695
    },
    {
      "type": "edit",
      "id": "fa7a8272dfcf4ca0",
      "item": {
        "type": "paragraph",
        "id": "fa7a8272dfcf4ca0",
        "text": "It’s possible to have hundreds of files in the same directory, as well as a [[Hierarchy]] of directories. Each file can also have its own inner organization, including lists of header and trailer values, or tabulated value arrays, or whatever other arrangement you can imagine. There’s no better organization than yours, because you know your simulation and your application, as well as its algorithm and required parameters. But if your application will be used more than once, you have to write all this down—both so you can remember it and so you can share it with other scientists if the need arises. To achieve this, you need a formalism to describe the context you have in mind and a structure to help you organize your data."
      },
      "date": 1675321639496
    },
    {
      "type": "edit",
      "id": "fa7a8272dfcf4ca0",
      "item": {
        "type": "paragraph",
        "id": "fa7a8272dfcf4ca0",
        "text": "It’s possible to have hundreds of files in the same directory, as well as a [[Hierarchy]] of directories. Each file can also have its own inner organization, including lists of header and trailer values, or tabulated value arrays, or whatever other arrangement you can imagine. There’s no better organization than yours, because you know your simulation and your application, as well as its algorithm and required parameters. But if your application will be used more than once, you have to write all this down—both so you can remember it and so you can share it with other scientists if the need arises. To achieve this, you need a formalism to [[describe]] the [[Context]] you have in mind and a structure to help you organize your data."
      },
      "date": 1675321681221
    },
    {
      "type": "edit",
      "id": "4178ba35c506b5bf",
      "item": {
        "type": "paragraph",
        "id": "4178ba35c506b5bf",
        "text": "Reason 1: A [[Tree]] [[Structure]]"
      },
      "date": 1675322185075
    },
    {
      "item": {
        "type": "factory",
        "id": "9e4900533ce3272f"
      },
      "id": "9e4900533ce3272f",
      "type": "add",
      "after": "309676b4486374a1",
      "date": 1675322204488
    },
    {
      "type": "edit",
      "id": "9e4900533ce3272f",
      "item": {
        "type": "paragraph",
        "id": "9e4900533ce3272f",
        "text": "In computer science, the tree data structure is well known. It’s both expressive and exists in many parts of your workstation, including in file systems, programming language translations, and top-down approaches to software design. In CGNS, we can completely describe a simulation as a tree, calling the root node CGNSBase_t. This root node contains the simulation’s global information, such as a ReferenceState holding common physical parameters. A CGNS tree also includes the Zone_t, which are the elementary mesh containers used to discretize the space, including boundary conditions and so on. CGNS organizes the tree using the topology as criteria. When you define your tree, you create a data model that structures mandatory and optional data for your context. Without a standard like CGNS, you have to define your own."
      },
      "date": 1675322206019
    },
    {
      "type": "edit",
      "id": "9e4900533ce3272f",
      "item": {
        "type": "paragraph",
        "id": "9e4900533ce3272f",
        "text": "In computer science, the tree data structure is well known. It’s both expressive and exists in many parts of your workstation, including in file systems, programming language translations, and top-down approaches to software design. In CGNS, we can completely [[describe]] a [[simulation]] as a [[tree]], calling the root node CGNSBase_t. This root node contains the simulation’s global information, such as a ReferenceState holding common physical parameters. A CGNS tree also includes the Zone_t, which are the elementary mesh containers used to discretize the space, including boundary conditions and so on. CGNS organizes the tree using the topology as criteria. When you define your tree, you create a data model that structures mandatory and optional data for your context. Without a standard like CGNS, you have to define your own."
      },
      "date": 1675322248146
    },
    {
      "type": "edit",
      "id": "9e4900533ce3272f",
      "item": {
        "type": "paragraph",
        "id": "9e4900533ce3272f",
        "text": "In computer science, the tree data structure is well known. It’s both expressive and exists in many parts of your workstation, including in file systems, programming language translations, and top-down approaches to software design. In CGNS, we can completely [[describe]] a [[Simulation]] as a [[Tree]], calling the root node CGNSBase_t. This root node contains the simulation’s global information, such as a ReferenceState holding common physical parameters. A CGNS tree also includes the Zone_t, which are the elementary mesh containers used to discretize the space, including boundary conditions and so on. CGNS organizes the tree using the topology as criteria. When you define your tree, you create a data model that structures mandatory and optional data for your context. Without a standard like CGNS, you have to define your own."
      },
      "date": 1675322281363
    }
  ]
}