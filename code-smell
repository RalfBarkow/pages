{
  "title": "Code Smell",
  "story": [
    {
      "type": "html",
      "text": "A <i>code smell</i> is a hint that something has gone wrong somewhere in your code. Use the smell to track down the problem. [[Kent Beck]] (with inspiration from the nose of [[Massimo Arnoldi]]) seems to have coined the phrase in the \"[[Once And Only Once]]\" page, where he also said that code \"wants to be simple\". <i>Bad Smells in Code</i> was an essay by [[Kent Beck]] and [[Martin Fowler]], published as Chapter 3 of [[Refactoring Improving The Design Of Existing Code]].",
      "id": "ae81f603a408cf76281f2a8d97488c5f"
    },
    {
      "type": "html",
      "text": "\nHighly experienced and knowledgeable developers have a \"feel\" for good design. Having reached a state of \"[[Unconscious Competence]],\" where they routinely practice good design without thinking about it too much, they find that they can look at a design or the code and immediately get a \"feel\" for its quality, without getting bogged down in extensive \"logically detailed arguments\".",
      "id": "280e7fbad41b9d1d3241da15814b31cb"
    },
    {
      "type": "html",
      "text": "\nNote that a [[Code Smell]] is a <i>hint</i> that something <i>might</i> be wrong, not a certainty. A perfectly good idiom may be considered a [[Code Smell]] because it's often misused, or because there's a simpler alternative that works in most cases. Calling something a [[Code Smell]] is not an attack; it's simply a sign that a closer look is warranted.",
      "id": "888f98ef5320c92a273abd009de66885"
    },
    {
      "type": "html",
      "text": "\n[[Theyre Just Rules]] or as [[Douglas Bader]] put it : \"Rules are for the guidance of the wise and the obedience of fools.\" ",
      "id": "84c1f830c1e732e2838d3bf3ad530753"
    },
    {
      "type": "html",
      "text": "[Copied from [[Goto Considered Harmful]]:]",
      "id": "0647403923e94ca676254b7c36422b1e"
    },
    {
      "type": "html",
      "text": "\nThere are two major approaches to programming: <i>[is there a page that covers this? there should be]</i>",
      "id": "6dbf0725c210b8832d79b87dd093fc07"
    },
    {
      "type": "html",
      "text": " Pragmatic:<br>[[Code Smell]]s should be considered on a case by case basis",
      "id": "4742b7056518f16fd53b80597ffc0abd"
    },
    {
      "type": "html",
      "text": " Purist:<br>all [[Code Smell]]s should be avoided, no exceptions",
      "id": "330c9f24ace1cbfd0cce3580f3c342da"
    },
    {
      "type": "html",
      "text": "...And therefore a [[Code Smell]] is a hint of possible bad practice to a pragmatist, but a sure sign of bad practice to a purist.",
      "id": "fe8b8abe1a35ddaec507f4d1c3fffc89"
    },
    {
      "type": "html",
      "text": "<i>If I recall correctly, this is part of the reason why (was it [[Kent Beck]] or [[Martin Fowler]]) chose this name for the term. They wanted to emphasize the pragmatic view of [[Code Smell]]s by the connotation of the word smell. If something smells, it definitely needs to be checked out, but it may not actually need fixing or might have to just be tolerated.</i>",
      "id": "fb5c68ce2f94c6f49dcb467271b9ad41"
    },
    {
      "type": "html",
      "text": "\nSee also ",
      "id": "156b1ffcb02a8a8e5a27c9cacb7c90a6"
    },
    {
      "type": "html",
      "text": " [[Code Stench]], but note that all [[Code Smell]]s are [[Code Stench]]es to purists!",
      "id": "48d4e5ca3d558e932a7b5caebfbb35ae"
    },
    {
      "type": "html",
      "text": " [[Code Smell Template]]",
      "id": "d64d80ce710b8c64736c14df0cf0d430"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "\nHere are some <i>Code Smells</i> that tell you something might be wrong.",
      "id": "9bc39d25b950ca6d246dc0f2180b5256"
    },
    {
      "type": "html",
      "text": "\nToo much code, time to take something off the stove before it boils over:",
      "id": "1f540d8913c06425c01cf91742fc27f2"
    },
    {
      "type": "html",
      "text": " [[Duplicated Code]] - See:<br>[[Once And Only Once]], [[Switch Statements Smell]]",
      "id": "378d31314e4d37ff62765cb224d3ce23"
    },
    {
      "type": "html",
      "text": " Methods too big - See:<br>[[Composed Method]], [[Taller Than Me]], [[Long Method Smell]]",
      "id": "408486ba273ede92c1958a16bfd120a8"
    },
    {
      "type": "html",
      "text": " Classes with too many instance variables - See:<br>[[Extract Component]], [[Value Object]], and [[Whole Value]]",
      "id": "5f3dc026892199f2100b7b8471f021f1"
    },
    {
      "type": "html",
      "text": " Classes with too much code - See:<br>[[One Responsibility Rule]], [[God Class]]",
      "id": "5b1a67222801f120b23173d59ca87d21"
    },
    {
      "type": "html",
      "text": " Strikingly similar subclasses - See:<br>[[Behavior To State]]",
      "id": "bb1334e5540c6c3d6541c6ee1f0f00c0"
    },
    {
      "type": "html",
      "text": " [[Parallel Inheritance Hierarchies]] - Violates [[Once And Only Once]].",
      "id": "d20b8499d2392d8e9bd39071e1419d64"
    },
    {
      "type": "html",
      "text": " An instance variable that is only set in some circumstances",
      "id": "56c3506181f6899d3cf9f72023979b97"
    },
    {
      "type": "html",
      "text": " Comparing variables to <i>null</i> - See:<br>[[Null Object]], [[Null Considered Harmful]]",
      "id": "0b4bbf9c3d7f26188e93d11729cfebe0"
    },
    {
      "type": "html",
      "text": " Too many private (or protected) methods - [[Methods Should Be Public]].",
      "id": "127ff21a1b88727b51fce14e5077f09d"
    },
    {
      "type": "html",
      "text": " [[Feature Envy Smell]], many messages to the same object from the same method - See:<br>[[Move Method]].",
      "id": "6f972f79abe06d6a9802ff2e9f0b9e9c"
    },
    {
      "type": "html",
      "text": " [[Verb Subject]] construction - See:<br>[[Move Method]]",
      "id": "ca410b9e69d4d7270e3772e0f4c50864"
    },
    {
      "type": "html",
      "text": " [[Excessive Overloading]] - this probably like [[Verb Subject]] construction - See:<br>[[Move Method]]",
      "id": "898771f20f9ffacfb071aaceb5c3b661"
    },
    {
      "type": "html",
      "text": " [[Same Name Different Meaning]]",
      "id": "39482e6588a4152d278542a57d7632c2"
    },
    {
      "type": "html",
      "text": " [[Expensive Set Up Smell]] - As in the \"setUp()\" of [[Java Unit]].",
      "id": "7073d344a263251f834f4343b0989fce"
    },
    {
      "type": "html",
      "text": " [[With Blocks]] ([[With Block Code Smell]]) - [[Extract Method]] to the object the code is acting on. <i>(Or encapsulate the data or 3rd party object in an object you control and can add methods to.)</i>",
      "id": "11585678b99029490258dec59b0383c2"
    },
    {
      "type": "html",
      "text": " Code not actually ever used - see:<br>[[You Dont Need It Anymore]]",
      "id": "a04748254c2c326f0ceac81058ab5aed"
    },
    {
      "type": "html",
      "text": " Trivial modules or layers - they only call the next layer down",
      "id": "4f3e6e7e003f3ba5541b0f0667302495"
    },
    {
      "type": "html",
      "text": " [[Instanceof In Conditionals]]",
      "id": "7424311c028eee66c98f76a3d1d16aa7"
    },
    {
      "type": "html",
      "text": " Similar looking code sections that vary only a few percent - [[Code Generation Isa Design Smell]] unless it's [[Active Code Generation]], in which case it's a valid workaround for a [[Language Smell]].",
      "id": "010f1010a9c245d5c451c5705fcd54fe"
    },
    {
      "type": "html",
      "text": "\nNot enough code, better put the half-baked code back in the oven a while:",
      "id": "e87b2bb22ab6f03b8dd67d3e65aa1ccb"
    },
    {
      "type": "html",
      "text": " Classes with too few instance variables",
      "id": "8f75e679ad11e426e546f45db33bdcf3"
    },
    {
      "type": "html",
      "text": " Classes with too little code - See:<br>[[One Responsibility Rule]]",
      "id": "98d386c276cdadbf858e24652b498ec1"
    },
    {
      "type": "html",
      "text": " Methods with no messages to self - See:<br>[[Utility Method]]",
      "id": "02e64b9f63026dbee38559588321073f"
    },
    {
      "type": "html",
      "text": " [[Empty Catch Clause]]s",
      "id": "157e0c288a1cf4150ba16cede3f5b4f3"
    },
    {
      "type": "html",
      "text": " Explicitly setting variables to null. Can indicate that either",
      "id": "34adb31d674e07d2edefc734223fc0a9"
    },
    {
      "type": "html",
      "text": " there are references to things that this code has no business referencing, or",
      "id": "423a5cfceff270c5b3e43502d948d05d"
    },
    {
      "type": "html",
      "text": " the structure is so complex that the programmer doesn't really understand it and feels the need to do this to be safe.",
      "id": "83d062bb2cff394dfa47fdde296ef5e7"
    },
    {
      "type": "html",
      "text": " <i>Is this too language specific? For example in Perl and other agile/scripting languages setting a variable to null can be the equivalent of destroying an object. -- [[Mark Aufflick]]</i>",
      "id": "32f1bb14b7698f1bdd7ad3b9b1dc6252"
    },
    {
      "type": "html",
      "text": "\nNot actually the code:",
      "id": "9dab381477ce223c4ddf827ba9f20125"
    },
    {
      "type": "html",
      "text": " [[Cee Preprocessor Statements]]",
      "id": "c1706b85d22624a66e76ac179dc3299e"
    },
    {
      "type": "html",
      "text": " Comments - See:<br>[[To Need Comments]], [[Too Much Documentation]]",
      "id": "94db00a7479371c1291123b505a97817"
    },
    {
      "type": "html",
      "text": " [[Excessive Logging]] - Lots of logs are needed to figure out what the heck the code is doing!",
      "id": "4fcd284aa7ea0b67ca8df5ac1c4071e5"
    },
    {
      "type": "html",
      "text": " [[Boredom Isa Smell]] - If you're bored, you might be doing something wrong.",
      "id": "81d652b428ea45cc2b057dfec9881a8b"
    },
    {
      "type": "html",
      "text": "\nProblems with the way the code is changing:",
      "id": "4663ae706399fa494ab546cd215c87c0"
    },
    {
      "type": "html",
      "text": " Sporadic [[Change Velocity]] - Different rates of change in the same object.",
      "id": "a7280862d65343db200faf03b2079d83"
    },
    {
      "type": "html",
      "text": " [[Shotgun Surgery]] - The same rate of change in different, disconnected objects.",
      "id": "00d6c66553012fb3c6d7fc0853ad6ed1"
    },
    {
      "type": "html",
      "text": "\nOther code problems:",
      "id": "f44b5c37922612ec5efb2d1dd58c7bf3"
    },
    {
      "type": "html",
      "text": " [[Contrived Interfaces]] - A smell of [[Premature Generalization]].",
      "id": "e4dcad3f7e81196c0cbb4a60516127c2"
    },
    {
      "type": "html",
      "text": " [[Asymmetrical Code]]/Imbalance",
      "id": "a6cd18e24e930559c9a1f0d06ffb93d5"
    },
    {
      "type": "html",
      "text": " [[Variable Clumps]]",
      "id": "097c9c8f4f388c4c0e1b3dae1a92cc8a"
    },
    {
      "type": "html",
      "text": " [[Arrow Anti Pattern]] (nested if statements), Complex Conditionals",
      "id": "2f566386f1a46feab471fa18582d5b55"
    },
    {
      "type": "html",
      "text": " [[Law Of Demeter]] Violations - Messages to the results of messages.",
      "id": "1104cb0453efbc8e877ad6b20540852f"
    },
    {
      "type": "html",
      "text": " Dependency cycles among packages or classes within a package.",
      "id": "62408f0cae6dbddf722924a44be79374"
    },
    {
      "type": "html",
      "text": " Concrete classes that depend on other concrete classes",
      "id": "2dfe04781aa26b2377630cfb49f51327"
    },
    {
      "type": "html",
      "text": " Methods requiring [[Special Formatting]] to be readable",
      "id": "5e81c35cd1d43d8eb21a7eb9d9fb7e83"
    },
    {
      "type": "html",
      "text": " [[Back Pedalling]] (loss of context)",
      "id": "7ff2055a6f59b6d5bd62ef33813983c8"
    },
    {
      "type": "html",
      "text": " Long method names. Seriously:<br>If you follow good naming standards, long method names are often an indication that the method is in the wrong class. For example, createWhateverFromWhateverOtherClass([[Other Class]] creator) vs creator.createWhatever(). See [[Using Good Naming To Detect Bad Code]].",
      "id": "5a7b39a1189997952967fb498662dbc9"
    },
    {
      "type": "html",
      "text": " [[Vague Identifier]]s",
      "id": "548deefb0f45767f0c3586b4b50a8409"
    },
    {
      "type": "html",
      "text": " Procedural code masquerading as objects. See [[Dont Name Classes Object Manager Handler Or Data]]",
      "id": "264abd25a41c70678b5258ae5e8ae35d"
    },
    {
      "type": "html",
      "text": " Embedded code strings. Large chunks of SQL, HTML or XML (for example) are not best read, edited or tested in the code. They start there because its simpler, but end up making both languages unreadable as they get more complex, and require developers to know both languages.",
      "id": "4cf6469684f3475ad917d3896b50d53c"
    },
    {
      "type": "html",
      "text": " [[Passing Nulls To Constructors]] - use a [[Factory Method]]",
      "id": "86f6a7f807cb48767d8a45b82986dc10"
    },
    {
      "type": "html",
      "text": " [[Too Many Parameters]], [[Long Parameter List]]",
      "id": "6d40a6177fc124e46546843d74a98ce6"
    },
    {
      "type": "html",
      "text": " [[Variable Name Same As Type]]",
      "id": "3dffe44276cc5bd51541ff4e9b0005db"
    },
    {
      "type": "html",
      "text": " [[While Not Done Loop]]s",
      "id": "66fadae7a98f8a3771871202b3b0b5d1"
    },
    {
      "type": "html",
      "text": " False unification of procedures. A procedure, function, or method has a boolean that provides a variation on its behavior, but the two variations in fact have completely different semantics. It would be better to refactor the common code into another method and split the remainder into two separate methods, removing the boolean.",
      "id": "259e0a74782f833423d26d228bbadd5d"
    },
    {
      "type": "html",
      "text": " False unification of interfaces. An interface has two implementors. One implementor implements half of the interface and throws [[Unsupported Operation Exception]] for the other half. The second implementor implements the other half and throws [[Unsupported Operation Exception]] for the first half. It would be better to split the interface into two. Similar to [[Refused Bequest]].",
      "id": "a1ba7c9d800df10e475621a3493e2386"
    },
    {
      "type": "html",
      "text": " Hidden coupling. Code depends on completely non-obvious characteristics, such as relying on reference equality instead of value equality.",
      "id": "0b809bc51bd9e73cac2bfa64aedc9ba5"
    },
    {
      "type": "html",
      "text": " Hardwired policy. Instead of policy being wrapped around a mechanism, the policy is wired directly into the mechanism. Often, implementation of the policy requires additional information not available, so it has to be fetched from outside, creating an implicit external dependency. Instead of a simple, self-contained mechanism, you now have a fragile, context-sensitive mechanism.",
      "id": "c737d62e0bfe89301648f6fdd3684353"
    },
    {
      "type": "html",
      "text": "<i>From [[Bad Smells In Code]]:</i>",
      "id": "f4d7f75a19e370ed04f82403582185ea"
    },
    {
      "type": "html",
      "text": " [[Divergent Change]]",
      "id": "c31a9bd672d76836562f883e22e75d2f"
    },
    {
      "type": "html",
      "text": " [[Feature Envy Smell]]",
      "id": "1e0031145fa989f4f38de64bd3d07123"
    },
    {
      "type": "html",
      "text": " [[Data Clumps]]",
      "id": "ff43dff9b7f3e91ed77819dbcae358eb"
    },
    {
      "type": "html",
      "text": " [[Primitive Obsession]]",
      "id": "1dd3ce72128b2271eba3b5e71e2f5ece"
    },
    {
      "type": "html",
      "text": " [[Switch Statements Smell]]",
      "id": "7181aedce9564c8579653006dbe57962"
    },
    {
      "type": "html",
      "text": " [[Parallel Inheritance Hierarchies]]",
      "id": "cb129c00ffab732e37bbd9eff6506969"
    },
    {
      "type": "html",
      "text": " [[Lazy Class]] ([[Collapse Hierarchy]])",
      "id": "6afdf76e0753bf525d9846ee43d9d16d"
    },
    {
      "type": "html",
      "text": " [[Speculative Generality]]",
      "id": "f26d9f919ebb81820e08ac1f82a36b06"
    },
    {
      "type": "html",
      "text": " [[Temporary Field]]",
      "id": "3e6bc3648d00f6278baa28a6a7c749fa"
    },
    {
      "type": "html",
      "text": " [[Message Chains]]",
      "id": "be1657259e821eb8b96c1af6bada1413"
    },
    {
      "type": "html",
      "text": " [[Middle Man]]",
      "id": "894702cd7ef0c1e9c2a743d503284900"
    },
    {
      "type": "html",
      "text": " [[Inappropriate Intimacy]]",
      "id": "60a4274cecff585edfbd887d589ff2b9"
    },
    {
      "type": "html",
      "text": " Alternative Classes with Different Interfaces",
      "id": "9f2b4e046291adec2320456159abfd70"
    },
    {
      "type": "html",
      "text": " [[Incomplete Library Class]]",
      "id": "e7ceefa3133e213503ce51e268b4c031"
    },
    {
      "type": "html",
      "text": " [[Data Class]]",
      "id": "199258554d9946075a0a08db5ebb76bc"
    },
    {
      "type": "html",
      "text": " [[Refused Bequest]]",
      "id": "9211db09fc21bad96ae9abf01ca2d7c2"
    },
    {
      "type": "html",
      "text": "\nThe list of canonical smells found in [[Refactoring Improving The Design Of Existing Code]] can be found at: [http://jexp.de/papers/refactoring/refactoring/node26.html jexp.de] (we're slowly making sure they're all here).",
      "id": "8000a3e37a2292c0cfdd8a5f9f3a578b"
    },
    {
      "type": "html",
      "text": "-- updated broken link, Michael Hunger",
      "id": "788f4bf91f86b04d57134c7caee546ab"
    },
    {
      "type": "html",
      "text": "\nSome Principles for judging whether code smells bad or good are defined in [[Principles Of Object Oriented Design]].",
      "id": "39e44e51d595bafb38c57d1f8a86305b"
    },
    {
      "type": "html",
      "text": "\nSee Also:",
      "id": "df520f236597551402fb5cbdb38a04e4"
    },
    {
      "type": "html",
      "text": " [[Code Deodorant]]",
      "id": "a73621745a07fa770deee88dc6dafda3"
    },
    {
      "type": "html",
      "text": " [[Listen To The Code]] - For another sensory metaphor.",
      "id": "21f07bda84855c51539199b2e602cfab"
    },
    {
      "type": "html",
      "text": " [[Code Smells Illustrated With Java Awt]] - More examples.",
      "id": "bf00b5cece0985efd77205fc7aabef3f"
    },
    {
      "type": "html",
      "text": " [[Coding Cost Model]] - Asking for an objective metric for \"better code\" (i.e.:<br>\"not smells\")",
      "id": "a3068b7973cd0c8cf161e83e2853a803"
    },
    {
      "type": "html",
      "text": " [[Small Lint]] - a [[Smalltalk Language]] style checker, with some rules for \"good\" and \"bad\" constructs.",
      "id": "2e7ac03e7867b7ce815debf6b459b804"
    },
    {
      "type": "html",
      "text": " [[Bigger Refactoring Thoughts]] - [[Code Smell]]s prompt [[Refactor Mercilessly]], which often ends up rediscovering [[Design Patterns]].",
      "id": "80a0c4c3f35e47ae6f3ade30c9d0d5d2"
    },
    {
      "type": "html",
      "text": " Finding smells:<br>[[Change Brainstrom]], [[Comment Brainstorm]]",
      "id": "2bd2b35c6a1ea9a7f7af69f9c22fee9a"
    },
    {
      "type": "html",
      "text": " The Other Smellable Things:<br>[[Model Smell]]s, [[Text Smell]]s, [[Language Smell]]s",
      "id": "a7548244eec0d9561cb6874b45b866ef"
    },
    {
      "type": "html",
      "text": " [[Code Sensing]]",
      "id": "f321a64457983d2b0a4ad34ecfe04d9f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "<i>[This list needs refactoring to above:]</i>\n[[Code Smell]]s referenced in:",
      "id": "c86aab78b7e5aa528ea60f666d99a351"
    },
    {
      "type": "html",
      "text": " [[Refactoring Improving The Design Of Existing Code]] - a book including [[Kent Beck]]'s comments on [[Code Smell]]s and refactoring.",
      "id": "41d6f640a0a5389067e4b9e31722a594"
    },
    {
      "type": "html",
      "text": " [[Wiki Pages About Refactoring]] - related pages.",
      "id": "0233b4445262ce355a19fd9a5bc6434b"
    },
    {
      "type": "html",
      "text": " [[Beauty Aint My Business No Sir]] - [[Kent Beck]]'s comment on parallel inheritance hierarchies, [a minor example of code that smells].",
      "id": "686b91cfa2e5a16b6de8462eff252af2"
    },
    {
      "type": "html",
      "text": " [[Daves Real Example Where Thinking Ahead Would Have Helped]] - An argument over [[You Arent Gonna Need It]]:<br>After [[Do The Simplest Thing That Could Possibly Work]] the [[Code Smell]]s because it violates the [[Once And Only Once]] rule.",
      "id": "8cae9113925a401479677d349453d0b0"
    },
    {
      "type": "html",
      "text": " [[Extreme Normal Form Defined]] - <i>another metric to drive refactoring?</i>",
      "id": "03e026694499a07f23448a23cf63bbe7"
    },
    {
      "type": "html",
      "text": " [[Extreme Normal Form Definitions]] - <i>(same as [[Extreme Normal Form Defined]])</i>",
      "id": "2bff66cc1afd3177f1d82ce305300ee9"
    },
    {
      "type": "html",
      "text": " [[Extreme Reuse]] - reuse is good. But you may have to ignore [[Code Smell]]s in 3rd party library, unless you want maintenance and upgrade problems.",
      "id": "d85dc36c6b20cbdb965e6eeac0b4d0f0"
    },
    {
      "type": "html",
      "text": " [[Xp Productivity Measurement Problem]] - and does it, and refactoring, violate [[You Arent Gonna Need It]]?",
      "id": "0471e4ccbbd1ded498c51e60ebf37a3a"
    },
    {
      "type": "html",
      "text": " [[My Java Students]] - <i>(...just a reading recommendation.)</i>",
      "id": "427ca0dd124053f0ba94b0b2f7bda4b6"
    },
    {
      "type": "html",
      "text": " [[Value Objects Should Be Passed By Value]] - ''a vague feeling of \"wrongness.\"",
      "id": "33863aeed806081066d304f760d33bc2"
    },
    {
      "type": "html",
      "text": " [[Code Smell Metrics]] - Objective signals that your code might benefit from some refactoring",
      "id": "f25351ffd1a7fc9e0bb9e11494153837"
    },
    {
      "type": "html",
      "text": " [[Test Resistance]] - If writing [[Unit Test]]s for your code is difficult, your code is probably not well-factored. Pay attention when you become reluctant to write necessary tests.",
      "id": "1484c212d3a46d2e2379742b43e35c70"
    },
    {
      "type": "html",
      "text": " [[Abstraction Distraction]] - Use of different abstraction levels in the same code.",
      "id": "86ea0426f02dd8cb402b25fb4b022bd6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "<b>Discussion:</b>",
      "id": "3323e3a4fa450db76a65f681cdffb548"
    },
    {
      "type": "html",
      "text": "\nWhat ever happened to \"Listen to what Smalltalk is telling you?\"",
      "id": "cb6e806f6e3a28e409d07e0310131dee"
    },
    {
      "type": "html",
      "text": "<i>Same thing, isn't it? Just a different analogy: perhaps some of us smell out code problems; some see them; and some [[Listen To The Code]]. </i>",
      "id": "a6791c41aba32cbdb226e8783ab0f18a"
    },
    {
      "type": "html",
      "text": ". . . . . .",
      "id": "a1781b71ae677c1e253f07770cce718c"
    },
    {
      "type": "html",
      "text": "\nI have recently completed a Sensory Orientation Survey of 11,352 randomly-selected software developers, determining their primary sensory mode. 10,901 were visually-oriented, 430 hearing-oriented, 20 were touch-oriented, and one was smell-oriented. Some other interesting statistics were also gleaned, but I'm not sure how they are related. There were 386 visually-impaired developers, 19 vision-and-hearing-impaired developers, and one developer named Spot.",
      "id": "46b68fc2b7d46dd73ed92b6c5417f876"
    },
    {
      "type": "html",
      "text": "<i>I think I interviewed Spot today. </i>",
      "id": "ad51697166e34feac6f638d0e12aa113"
    },
    {
      "type": "html",
      "text": "\nI think my major problem with the terminology is that it complicates critiques. It means one thing for one developer to say to another, \"your code doesn't sound right,\" or, \"your code sounds off-key,\" and quite a different thing to say, \"your code smells.\" I wish the earlier auditory metaphor had stuck... -- [[Russell Gold]]",
      "id": "ac9f1d500af18092e88b9e9670e39b2c"
    },
    {
      "type": "html",
      "text": "\nMost people are visual (\"I see that\"). Fewer are auditory (\"I hear you\"). Fewer still are tactile (\"I feel that\"). So few use smell as their primary sense that speaking of smells seems a bit alien to almost everyone. Perhaps that makes it a good choice.",
      "id": "858218152a589d081d08ee75735a87ca"
    },
    {
      "type": "html",
      "text": "<i>You see <b>this</b>, you hear <b>that</b>. But you go \"<b>what</b> is that smell ?\"</i>",
      "id": "3553c14fca433d0bcf90a399b7067da2"
    },
    {
      "type": "html",
      "text": "<b>It must be Coffee</b> Which brings up the point that all smells are not [[Bad Thing]]s. Smells tend to permeate the air and are not necessarily easy to track down. (Except in the kitchen). It seems that smell has been used in a negative sense. Could this term be used to describe a [[Good Thing]]? Can someone create code that smells good?",
      "id": "e1d41a39af138a0fef75a55c19ac9ddd"
    },
    {
      "type": "html",
      "text": "<i>Smell is such a primitive (neurologically speaking) sense that people often respond to smells without being consciously aware of them, with their hindbrain acting on it before the cerebrum learns about it (if it ever does). This goes for smells good and bad. Not to say the same thing doesn't happen with other senses, but that \"something's going on here\" impression that comes with a consciously unperceived whiff of something may possibly be not too dissimilar to the same \"something's going on here\" impression that comes with \"smelly code\".</i>",
      "id": "a9f65f9003fa0f434502a962ce562d4e"
    },
    {
      "type": "html",
      "text": "\nI think that some of this misses the point. Smell is an indirect sense. It has in humans a  very limited direction finding capablity.  It may indicate an issue or it may not. The smell that you think is due to X may be due to Y. But most important to my mind it is a primative tool of hunting. We are hunting issues in code. Seeing is precise, directional and of limited range. Hearing is less percise, may or may not be directional ( echos frequency issues etc) and intermediate range. Smell is not precise, has limited direction, but may cary for miles on the wind. The Fire you smell to the west may in fact be on your east, if the wind has carryied it around. There is a fire somewhere, it is big, it is a problem-- so start hunting for it. .. If you think that  'nondirectional longrange indeterminate trouble detection criterion' is a better term to use-- have at it.\t",
      "id": "1a8d060a141d90709816e4a66aad0e73"
    },
    {
      "type": "html",
      "text": "-- [[Marc Grundfest]]",
      "id": "d088ba89ae2c8e6d92bfb8056ae1c4d6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "\nIn English, \"it smells\" ~= \"it smells bad\".",
      "id": "7d9e26528e4201b82cb643386ffcc85e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "\nCode is too abstract to map well to visual metaphor, and not enough people have the ear for auditory metaphor, but [almost] everyone has a nose and can smell garbage or roses. -- Pete Hardie",
      "id": "a38eab1d9f1ac87579f9cdde90b30a4f"
    },
    {
      "type": "html",
      "text": "\nAlso, smells cause a greater visceral reaction, reaching deeper into the grey matter than sight or sound. Both sight and sound are so overloaded that we have evolved the ability to tune out a lot of noise and clutter. Its easier to provoke a response with a smell, assuming the scent is communicated. -- [[Eric Scheid]]",
      "id": "5a3e7deab50f369e7a051dad958a034d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "\nAh, but when you smell a problem, you only know that you have to fix something. You still have to look to find exactly what needs fixing.",
      "id": "811ed0ecafda715d36d9186a0924774c"
    },
    {
      "type": "html",
      "text": "<i>The smell is only a symptom.</i>",
      "id": "8a7b35956d4e4c923deeff497aa9c0dc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "<i>When I eat a bowl of plain rice while smelling my neighbor's broiled duck, I eat a feast fit for a king.</i> -- Chinese saying (paraphrased)",
      "id": "e83d6c6f65a5cfeb41c62ea431d2fe21"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "\n[[Code Smell]] can creep up on you. Look at [[Empirical Pattern Discovery]] as a development tool to guide you in the process of [[Slow Refactoring]] as complement to doing what we call [[Refactor Mercilessly]]. -- [[Niclas Olofsson]]",
      "id": "e64d2f91c0d66802bd043b3d260e3bce"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "\nWhile chatting with [[Charles Medcoff]] over drinks, we came up with the idea of [[Process Smell]]'s. He gave the example of a company that has more QA staff than developers. Maybe this should be called [[Massive Quality Assurance Required]], or maybe something shorter. Hmmm...",
      "id": "754150192a14263187125b5fa8302f93"
    },
    {
      "type": "html",
      "text": "-- [[Eric Runquist]]",
      "id": "8f9c0cb4a36e3fbd4f2396b1e1b28d8c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "Code sounds: [http://www.newscientist.com/news/news.jsp?id=ns99992757 www.newscientist.com]",
      "id": "f841f6fee95bf72313dfa098f35e611c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "<i>In English, \"it smells\" ~= \"it smells bad\".</i>",
      "id": "7b93486277db18d740ee830a7428644c"
    },
    {
      "type": "html",
      "text": "\nYes, but 'smell' is not neutral enough for my liking. I suppose [[Code Smell]] is more neutral than [[Code Stench]] or [[Code Perfume]].",
      "id": "65aa4c04d1779ee7550f8916b038c744"
    },
    {
      "type": "html",
      "text": "-- [[David Vincent]]",
      "id": "1f4442be4cc5e95e1bf1da2e0183fae8"
    },
    {
      "type": "html",
      "text": "\nCodour? (or Codor, for those that think \"US English\" is a language) ;o) -- Nick Grimshaw",
      "id": "718467178f663b518342e7ebd88bdf27"
    },
    {
      "type": "html",
      "text": "\n[[Code Suspicion But Not Raving Paranoia]]? :-)",
      "id": "c55335865463653b5b0f6ee7c3ee0c7d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "A bit of empirical evidence for the code smell concept - see \"Using Redundancies to Find Error\" at \n[http://www.stanford.edu/~engler/p401-xie.pdf www.stanford.edu].",
      "id": "62c65953b0ec99841519dfa3a55cccb6"
    },
    {
      "type": "html",
      "text": "\nIn it, the authors use code scanners to look for redundant operations (assignment to self, duplicated conditions statements). They find that not only are redundant operations sometimes \"hard errors\" themselves, but also that the presence of redundant operations in a source file is a good predictor of other hard errors in the same file.",
      "id": "a09eb32528f4fa5684a4279506100202"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "<b>code smells in C, C++</b> ([[Edit Hint]]: do we need a separate page for this?)",
      "id": "829f564b70bbefea9a6f8a7750c79a5b"
    },
    {
      "type": "html",
      "text": "\n[[Tail Call Optimization]] has some example code.\nOne function has a (\"automatic\") local variable, and it passes that variable to another function.\nThen it mentions",
      "id": "4e7297f3863275805b3d0f5277155c54"
    },
    {
      "type": "html",
      "text": "\"On the other hand, bar() may do something like tuck the pointer away for later use, so using an automatic variable this way may not be safe anyhow.\"",
      "id": "802f2cf84142723e5375fe6d2d306c28"
    },
    {
      "type": "html",
      "text": "\nI agree - this may not be safe; it's a code smell.\nI can't decide if it's the",
      "id": "f80fc9a27edf4c52499212c81906e7c4"
    },
    {
      "type": "html",
      "text": " \"passing a pointer to a local variable\" part that smells bad, or the",
      "id": "27bdefae74009595b0dbb97b3e2e2b33"
    },
    {
      "type": "html",
      "text": " \"tuck the pointer away for later use\" part that smells bad.",
      "id": "89f0972832ae4043aac2ab3ff17e069e"
    },
    {
      "type": "html",
      "text": "\nThe problem:\nAfter that function tucks the pointer away for later use and returns,\nafter the calling function returns,\nthen the (stack) memory that pointer points to is no longer valid.\nIt probably gets overwritten with other values.\nThen if that pointer ever gets used, it is pointing to irrelevant invalid data.",
      "id": "f387ad1b3c49448826731a43416a7af7"
    },
    {
      "type": "html",
      "text": "\nJava goes to great lengths to make sure this problem never happens, by making it impossible to pass a pointer to a local (stack) variable - the only pointers that can be passed are \"references\" to objects created on the heap.",
      "id": "ecc224acaa7a019cada7c9e9a4276ab4"
    },
    {
      "type": "html",
      "text": "<i>Please look at Java Servlets and the re-entrancy problems due to avoidance of stack based storage. I don't want to start yet another language battle, I just want to highlight that memory management issues are a complex problem that rears its head in different ways in different languages.</i>",
      "id": "1b6a80b6111ef226a017e4f040f7df9e"
    },
    {
      "type": "html",
      "text": "\nI guess it depends on the documentation for the function. If a function 'tucks away' a pointer, then I would expect it to have a name like 'register_foo' or 'insert_foo' or at least document the fact that it requires a long-lived heap pointer. In C++ of course, you would use shared_ptr and avoid any problems with stack pointers becoming invalid. [[Mike Weller]].",
      "id": "b3385772151e2350fe2b5efaf0f5ebca"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "'code fragrance' - when a piece of coding is particularly elegant in design and efficiency. (code smells good)",
      "id": "f06153431327ca7061a4588fd0484dfd"
    },
    {
      "type": "html",
      "text": "<i>Who said, \"when I find myself congratulating myself on how very clever a line or word is, I take it out\"?</i>",
      "id": "9d1af1cf30e4d4a4c9223a1b117e69bb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "Another advantage of the \"Smell\" metaphor is that scents are often very noticeable initially, but after a while you become accustomed to them and don't notice them any more, which I figure is also the case for [[Code Smells]], if you're not careful. (And even more so for [[User Interface Smells]], I suppose.) -- [[Scott Mc Murray]]",
      "id": "26a7378a0602c06d8a8670efdb749456"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "<b>Category comment</b>",
      "id": "82c3c7d028af21687bc77fd22a7f04d1"
    },
    {
      "type": "html",
      "text": "\nI de-duplicated the [[Development Anti Pattern]]s area in the [[Anti Pattern Catalog]]. There is some overlaps between [[Development Anti Pattern]]s found in the [[Anti Pattern Catalog]] and the pages attached to the [[Category Code Smell]] which often uses the same template as [[Anti Pattern]].",
      "id": "490ead65872ec4a8e502e5521433e513"
    },
    {
      "type": "html",
      "text": "\nIn order to get the maximum of pages auto-indexed in categories, I propose:",
      "id": "131840b2bcba3d207bd176e445e3e459"
    },
    {
      "type": "html",
      "text": " To attach to all [[Code Smell]]s to the [[Category Development Anti Pattern]].",
      "id": "a06f551ec16ae44256e21f9be62d3a9c"
    },
    {
      "type": "html",
      "text": " Then in the [[Development Anti Pattern Road Map]], links will be put to [[Category Code Smell]].",
      "id": "b1e63d366bcb99958d555b89d860d861"
    },
    {
      "type": "html",
      "text": " All not categorized [[Code Smell]]s will be attached to both categories [[Category Code Smell]] (few pages not in there) and [[Category Development Anti Pattern]].",
      "id": "c421d574c89337ce39ff874d8e907fd8"
    },
    {
      "type": "html",
      "text": "\nAny comments?",
      "id": "85040733e21fa47213864a7018a38cf5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "\nBoilerplate.  The existence of boilerplate code is either a smell coming from your code (if it's reasonably possible to eliminate it) or from your language / framework (if it isn't).  Some languages (e.g. [[Lisp Macro]]) make boilerplate elimination easy, others (e.g. [[Csharp Language]]) positively require boilerplate under certain circumstances.",
      "id": "236cbf5000f75975ea2ffcdc5ea6386f"
    },
    {
      "type": "html",
      "text": "-- [[Duncan Bayne]]",
      "id": "b2a098f0d08276269d31286d042a28c7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "\nI propose that [[Hiding Type With String]] should be considered a [[Code Smell]]. -- [[Martin Spamer]] ",
      "id": "ba5137d15d434ac8572e5a3b758e5ef8"
    },
    {
      "type": "html",
      "text": "\nSome examples.",
      "id": "99036d7cba1ef7df07bcbbf685272ab2"
    },
    {
      "type": "code",
      "text": "  String telephoneNo;\n  String xPath;",
      "id": "f8266796114033124408c12f1ecb23f8"
    },
    {
      "type": "html",
      "text": "\nYes -- we tend to call that [[Primitive Obsession]]. -- [[Jb Rainsberger]]",
      "id": "5c360298206fdba1b96f722714d7d244"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "See also: [[What Isa Smell]]",
      "id": "a6d35de448a549012367cee378741595"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "What about [[Bad Smell In Data]]?  Alot of data can also be an indication of too much or improperly specified factoring. -- [[Id Know]].",
      "id": "13e56d2ce77ada514e0420e5f42e42aa"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "50654c74aaf8ac680c9123feb7bcbb52"
    },
    {
      "type": "html",
      "text": "[[Code Smell]]s can often be caused by doing [[Information Programming]] in a [[Data Programming Context]] or [[Data Programming]] in an [[Information Programming Context]]. In many cases the opposite approaches are correct for these two situations. For example, coding things with letter is bad in data and good in information. Storing UI labels in a database is bad in data and good in information (but you need an [[Info Base]] to do it right). Using plurals for table names is bad in a database (which is designed to handle data organization entities - tables) and may be good when building information organization entities. ",
      "id": "883d721c509f78ad0a49122b2f06685a"
    },
    {
      "type": "html",
      "text": "\nWe need a term to describe a [[Code Smell]] that indicates that the code is good or well built. Perhaps call that a [[Good Code Smell]].",
      "id": "5109add1c508e2b5f2cb8789eaabb1d9"
    },
    {
      "type": "html",
      "text": "-- [[Jon Grover]]",
      "id": "334cce0d93c927991b5a44309068918d"
    },
    {
      "type": "html",
      "text": "\n[[Category Code Smell]] [[Category Jargon]]",
      "id": "e9cde21c22237edd14daf41186206692"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CodeSmell c2.com]",
      "id": "b353515c9944d0185c084660d7ec5f6b"
    }
  ],
  "journal": [
    {
      "date": 1418410975000,
      "id": "d982e00ebf97cd57e44c25fb2e5399d7",
      "type": "create",
      "item": {
        "title": "Code Smell",
        "story": [
          {
            "type": "html",
            "text": "A <i>code smell</i> is a hint that something has gone wrong somewhere in your code. Use the smell to track down the problem. [[Kent Beck]] (with inspiration from the nose of [[Massimo Arnoldi]]) seems to have coined the phrase in the \"[[Once And Only Once]]\" page, where he also said that code \"wants to be simple\". <i>Bad Smells in Code</i> was an essay by [[Kent Beck]] and [[Martin Fowler]], published as Chapter 3 of [[Refactoring Improving The Design Of Existing Code]].",
            "id": "ae81f603a408cf76281f2a8d97488c5f"
          },
          {
            "type": "html",
            "text": "\nHighly experienced and knowledgeable developers have a \"feel\" for good design. Having reached a state of \"[[Unconscious Competence]],\" where they routinely practice good design without thinking about it too much, they find that they can look at a design or the code and immediately get a \"feel\" for its quality, without getting bogged down in extensive \"logically detailed arguments\".",
            "id": "280e7fbad41b9d1d3241da15814b31cb"
          },
          {
            "type": "html",
            "text": "\nNote that a [[Code Smell]] is a <i>hint</i> that something <i>might</i> be wrong, not a certainty. A perfectly good idiom may be considered a [[Code Smell]] because it's often misused, or because there's a simpler alternative that works in most cases. Calling something a [[Code Smell]] is not an attack; it's simply a sign that a closer look is warranted.",
            "id": "888f98ef5320c92a273abd009de66885"
          },
          {
            "type": "html",
            "text": "\n[[Theyre Just Rules]] or as [[Douglas Bader]] put it : \"Rules are for the guidance of the wise and the obedience of fools.\" ",
            "id": "84c1f830c1e732e2838d3bf3ad530753"
          },
          {
            "type": "html",
            "text": "[Copied from [[Goto Considered Harmful]]:]",
            "id": "0647403923e94ca676254b7c36422b1e"
          },
          {
            "type": "html",
            "text": "\nThere are two major approaches to programming: <i>[is there a page that covers this? there should be]</i>",
            "id": "6dbf0725c210b8832d79b87dd093fc07"
          },
          {
            "type": "html",
            "text": " Pragmatic:<br>[[Code Smell]]s should be considered on a case by case basis",
            "id": "4742b7056518f16fd53b80597ffc0abd"
          },
          {
            "type": "html",
            "text": " Purist:<br>all [[Code Smell]]s should be avoided, no exceptions",
            "id": "330c9f24ace1cbfd0cce3580f3c342da"
          },
          {
            "type": "html",
            "text": "...And therefore a [[Code Smell]] is a hint of possible bad practice to a pragmatist, but a sure sign of bad practice to a purist.",
            "id": "fe8b8abe1a35ddaec507f4d1c3fffc89"
          },
          {
            "type": "html",
            "text": "<i>If I recall correctly, this is part of the reason why (was it [[Kent Beck]] or [[Martin Fowler]]) chose this name for the term. They wanted to emphasize the pragmatic view of [[Code Smell]]s by the connotation of the word smell. If something smells, it definitely needs to be checked out, but it may not actually need fixing or might have to just be tolerated.</i>",
            "id": "fb5c68ce2f94c6f49dcb467271b9ad41"
          },
          {
            "type": "html",
            "text": "\nSee also ",
            "id": "156b1ffcb02a8a8e5a27c9cacb7c90a6"
          },
          {
            "type": "html",
            "text": " [[Code Stench]], but note that all [[Code Smell]]s are [[Code Stench]]es to purists!",
            "id": "48d4e5ca3d558e932a7b5caebfbb35ae"
          },
          {
            "type": "html",
            "text": " [[Code Smell Template]]",
            "id": "d64d80ce710b8c64736c14df0cf0d430"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "\nHere are some <i>Code Smells</i> that tell you something might be wrong.",
            "id": "9bc39d25b950ca6d246dc0f2180b5256"
          },
          {
            "type": "html",
            "text": "\nToo much code, time to take something off the stove before it boils over:",
            "id": "1f540d8913c06425c01cf91742fc27f2"
          },
          {
            "type": "html",
            "text": " [[Duplicated Code]] - See:<br>[[Once And Only Once]], [[Switch Statements Smell]]",
            "id": "378d31314e4d37ff62765cb224d3ce23"
          },
          {
            "type": "html",
            "text": " Methods too big - See:<br>[[Composed Method]], [[Taller Than Me]], [[Long Method Smell]]",
            "id": "408486ba273ede92c1958a16bfd120a8"
          },
          {
            "type": "html",
            "text": " Classes with too many instance variables - See:<br>[[Extract Component]], [[Value Object]], and [[Whole Value]]",
            "id": "5f3dc026892199f2100b7b8471f021f1"
          },
          {
            "type": "html",
            "text": " Classes with too much code - See:<br>[[One Responsibility Rule]], [[God Class]]",
            "id": "5b1a67222801f120b23173d59ca87d21"
          },
          {
            "type": "html",
            "text": " Strikingly similar subclasses - See:<br>[[Behavior To State]]",
            "id": "bb1334e5540c6c3d6541c6ee1f0f00c0"
          },
          {
            "type": "html",
            "text": " [[Parallel Inheritance Hierarchies]] - Violates [[Once And Only Once]].",
            "id": "d20b8499d2392d8e9bd39071e1419d64"
          },
          {
            "type": "html",
            "text": " An instance variable that is only set in some circumstances",
            "id": "56c3506181f6899d3cf9f72023979b97"
          },
          {
            "type": "html",
            "text": " Comparing variables to <i>null</i> - See:<br>[[Null Object]], [[Null Considered Harmful]]",
            "id": "0b4bbf9c3d7f26188e93d11729cfebe0"
          },
          {
            "type": "html",
            "text": " Too many private (or protected) methods - [[Methods Should Be Public]].",
            "id": "127ff21a1b88727b51fce14e5077f09d"
          },
          {
            "type": "html",
            "text": " [[Feature Envy Smell]], many messages to the same object from the same method - See:<br>[[Move Method]].",
            "id": "6f972f79abe06d6a9802ff2e9f0b9e9c"
          },
          {
            "type": "html",
            "text": " [[Verb Subject]] construction - See:<br>[[Move Method]]",
            "id": "ca410b9e69d4d7270e3772e0f4c50864"
          },
          {
            "type": "html",
            "text": " [[Excessive Overloading]] - this probably like [[Verb Subject]] construction - See:<br>[[Move Method]]",
            "id": "898771f20f9ffacfb071aaceb5c3b661"
          },
          {
            "type": "html",
            "text": " [[Same Name Different Meaning]]",
            "id": "39482e6588a4152d278542a57d7632c2"
          },
          {
            "type": "html",
            "text": " [[Expensive Set Up Smell]] - As in the \"setUp()\" of [[Java Unit]].",
            "id": "7073d344a263251f834f4343b0989fce"
          },
          {
            "type": "html",
            "text": " [[With Blocks]] ([[With Block Code Smell]]) - [[Extract Method]] to the object the code is acting on. <i>(Or encapsulate the data or 3rd party object in an object you control and can add methods to.)</i>",
            "id": "11585678b99029490258dec59b0383c2"
          },
          {
            "type": "html",
            "text": " Code not actually ever used - see:<br>[[You Dont Need It Anymore]]",
            "id": "a04748254c2c326f0ceac81058ab5aed"
          },
          {
            "type": "html",
            "text": " Trivial modules or layers - they only call the next layer down",
            "id": "4f3e6e7e003f3ba5541b0f0667302495"
          },
          {
            "type": "html",
            "text": " [[Instanceof In Conditionals]]",
            "id": "7424311c028eee66c98f76a3d1d16aa7"
          },
          {
            "type": "html",
            "text": " Similar looking code sections that vary only a few percent - [[Code Generation Isa Design Smell]] unless it's [[Active Code Generation]], in which case it's a valid workaround for a [[Language Smell]].",
            "id": "010f1010a9c245d5c451c5705fcd54fe"
          },
          {
            "type": "html",
            "text": "\nNot enough code, better put the half-baked code back in the oven a while:",
            "id": "e87b2bb22ab6f03b8dd67d3e65aa1ccb"
          },
          {
            "type": "html",
            "text": " Classes with too few instance variables",
            "id": "8f75e679ad11e426e546f45db33bdcf3"
          },
          {
            "type": "html",
            "text": " Classes with too little code - See:<br>[[One Responsibility Rule]]",
            "id": "98d386c276cdadbf858e24652b498ec1"
          },
          {
            "type": "html",
            "text": " Methods with no messages to self - See:<br>[[Utility Method]]",
            "id": "02e64b9f63026dbee38559588321073f"
          },
          {
            "type": "html",
            "text": " [[Empty Catch Clause]]s",
            "id": "157e0c288a1cf4150ba16cede3f5b4f3"
          },
          {
            "type": "html",
            "text": " Explicitly setting variables to null. Can indicate that either",
            "id": "34adb31d674e07d2edefc734223fc0a9"
          },
          {
            "type": "html",
            "text": " there are references to things that this code has no business referencing, or",
            "id": "423a5cfceff270c5b3e43502d948d05d"
          },
          {
            "type": "html",
            "text": " the structure is so complex that the programmer doesn't really understand it and feels the need to do this to be safe.",
            "id": "83d062bb2cff394dfa47fdde296ef5e7"
          },
          {
            "type": "html",
            "text": " <i>Is this too language specific? For example in Perl and other agile/scripting languages setting a variable to null can be the equivalent of destroying an object. -- [[Mark Aufflick]]</i>",
            "id": "32f1bb14b7698f1bdd7ad3b9b1dc6252"
          },
          {
            "type": "html",
            "text": "\nNot actually the code:",
            "id": "9dab381477ce223c4ddf827ba9f20125"
          },
          {
            "type": "html",
            "text": " [[Cee Preprocessor Statements]]",
            "id": "c1706b85d22624a66e76ac179dc3299e"
          },
          {
            "type": "html",
            "text": " Comments - See:<br>[[To Need Comments]], [[Too Much Documentation]]",
            "id": "94db00a7479371c1291123b505a97817"
          },
          {
            "type": "html",
            "text": " [[Excessive Logging]] - Lots of logs are needed to figure out what the heck the code is doing!",
            "id": "4fcd284aa7ea0b67ca8df5ac1c4071e5"
          },
          {
            "type": "html",
            "text": " [[Boredom Isa Smell]] - If you're bored, you might be doing something wrong.",
            "id": "81d652b428ea45cc2b057dfec9881a8b"
          },
          {
            "type": "html",
            "text": "\nProblems with the way the code is changing:",
            "id": "4663ae706399fa494ab546cd215c87c0"
          },
          {
            "type": "html",
            "text": " Sporadic [[Change Velocity]] - Different rates of change in the same object.",
            "id": "a7280862d65343db200faf03b2079d83"
          },
          {
            "type": "html",
            "text": " [[Shotgun Surgery]] - The same rate of change in different, disconnected objects.",
            "id": "00d6c66553012fb3c6d7fc0853ad6ed1"
          },
          {
            "type": "html",
            "text": "\nOther code problems:",
            "id": "f44b5c37922612ec5efb2d1dd58c7bf3"
          },
          {
            "type": "html",
            "text": " [[Contrived Interfaces]] - A smell of [[Premature Generalization]].",
            "id": "e4dcad3f7e81196c0cbb4a60516127c2"
          },
          {
            "type": "html",
            "text": " [[Asymmetrical Code]]/Imbalance",
            "id": "a6cd18e24e930559c9a1f0d06ffb93d5"
          },
          {
            "type": "html",
            "text": " [[Variable Clumps]]",
            "id": "097c9c8f4f388c4c0e1b3dae1a92cc8a"
          },
          {
            "type": "html",
            "text": " [[Arrow Anti Pattern]] (nested if statements), Complex Conditionals",
            "id": "2f566386f1a46feab471fa18582d5b55"
          },
          {
            "type": "html",
            "text": " [[Law Of Demeter]] Violations - Messages to the results of messages.",
            "id": "1104cb0453efbc8e877ad6b20540852f"
          },
          {
            "type": "html",
            "text": " Dependency cycles among packages or classes within a package.",
            "id": "62408f0cae6dbddf722924a44be79374"
          },
          {
            "type": "html",
            "text": " Concrete classes that depend on other concrete classes",
            "id": "2dfe04781aa26b2377630cfb49f51327"
          },
          {
            "type": "html",
            "text": " Methods requiring [[Special Formatting]] to be readable",
            "id": "5e81c35cd1d43d8eb21a7eb9d9fb7e83"
          },
          {
            "type": "html",
            "text": " [[Back Pedalling]] (loss of context)",
            "id": "7ff2055a6f59b6d5bd62ef33813983c8"
          },
          {
            "type": "html",
            "text": " Long method names. Seriously:<br>If you follow good naming standards, long method names are often an indication that the method is in the wrong class. For example, createWhateverFromWhateverOtherClass([[Other Class]] creator) vs creator.createWhatever(). See [[Using Good Naming To Detect Bad Code]].",
            "id": "5a7b39a1189997952967fb498662dbc9"
          },
          {
            "type": "html",
            "text": " [[Vague Identifier]]s",
            "id": "548deefb0f45767f0c3586b4b50a8409"
          },
          {
            "type": "html",
            "text": " Procedural code masquerading as objects. See [[Dont Name Classes Object Manager Handler Or Data]]",
            "id": "264abd25a41c70678b5258ae5e8ae35d"
          },
          {
            "type": "html",
            "text": " Embedded code strings. Large chunks of SQL, HTML or XML (for example) are not best read, edited or tested in the code. They start there because its simpler, but end up making both languages unreadable as they get more complex, and require developers to know both languages.",
            "id": "4cf6469684f3475ad917d3896b50d53c"
          },
          {
            "type": "html",
            "text": " [[Passing Nulls To Constructors]] - use a [[Factory Method]]",
            "id": "86f6a7f807cb48767d8a45b82986dc10"
          },
          {
            "type": "html",
            "text": " [[Too Many Parameters]], [[Long Parameter List]]",
            "id": "6d40a6177fc124e46546843d74a98ce6"
          },
          {
            "type": "html",
            "text": " [[Variable Name Same As Type]]",
            "id": "3dffe44276cc5bd51541ff4e9b0005db"
          },
          {
            "type": "html",
            "text": " [[While Not Done Loop]]s",
            "id": "66fadae7a98f8a3771871202b3b0b5d1"
          },
          {
            "type": "html",
            "text": " False unification of procedures. A procedure, function, or method has a boolean that provides a variation on its behavior, but the two variations in fact have completely different semantics. It would be better to refactor the common code into another method and split the remainder into two separate methods, removing the boolean.",
            "id": "259e0a74782f833423d26d228bbadd5d"
          },
          {
            "type": "html",
            "text": " False unification of interfaces. An interface has two implementors. One implementor implements half of the interface and throws [[Unsupported Operation Exception]] for the other half. The second implementor implements the other half and throws [[Unsupported Operation Exception]] for the first half. It would be better to split the interface into two. Similar to [[Refused Bequest]].",
            "id": "a1ba7c9d800df10e475621a3493e2386"
          },
          {
            "type": "html",
            "text": " Hidden coupling. Code depends on completely non-obvious characteristics, such as relying on reference equality instead of value equality.",
            "id": "0b809bc51bd9e73cac2bfa64aedc9ba5"
          },
          {
            "type": "html",
            "text": " Hardwired policy. Instead of policy being wrapped around a mechanism, the policy is wired directly into the mechanism. Often, implementation of the policy requires additional information not available, so it has to be fetched from outside, creating an implicit external dependency. Instead of a simple, self-contained mechanism, you now have a fragile, context-sensitive mechanism.",
            "id": "c737d62e0bfe89301648f6fdd3684353"
          },
          {
            "type": "html",
            "text": "<i>From [[Bad Smells In Code]]:</i>",
            "id": "f4d7f75a19e370ed04f82403582185ea"
          },
          {
            "type": "html",
            "text": " [[Divergent Change]]",
            "id": "c31a9bd672d76836562f883e22e75d2f"
          },
          {
            "type": "html",
            "text": " [[Feature Envy Smell]]",
            "id": "1e0031145fa989f4f38de64bd3d07123"
          },
          {
            "type": "html",
            "text": " [[Data Clumps]]",
            "id": "ff43dff9b7f3e91ed77819dbcae358eb"
          },
          {
            "type": "html",
            "text": " [[Primitive Obsession]]",
            "id": "1dd3ce72128b2271eba3b5e71e2f5ece"
          },
          {
            "type": "html",
            "text": " [[Switch Statements Smell]]",
            "id": "7181aedce9564c8579653006dbe57962"
          },
          {
            "type": "html",
            "text": " [[Parallel Inheritance Hierarchies]]",
            "id": "cb129c00ffab732e37bbd9eff6506969"
          },
          {
            "type": "html",
            "text": " [[Lazy Class]] ([[Collapse Hierarchy]])",
            "id": "6afdf76e0753bf525d9846ee43d9d16d"
          },
          {
            "type": "html",
            "text": " [[Speculative Generality]]",
            "id": "f26d9f919ebb81820e08ac1f82a36b06"
          },
          {
            "type": "html",
            "text": " [[Temporary Field]]",
            "id": "3e6bc3648d00f6278baa28a6a7c749fa"
          },
          {
            "type": "html",
            "text": " [[Message Chains]]",
            "id": "be1657259e821eb8b96c1af6bada1413"
          },
          {
            "type": "html",
            "text": " [[Middle Man]]",
            "id": "894702cd7ef0c1e9c2a743d503284900"
          },
          {
            "type": "html",
            "text": " [[Inappropriate Intimacy]]",
            "id": "60a4274cecff585edfbd887d589ff2b9"
          },
          {
            "type": "html",
            "text": " Alternative Classes with Different Interfaces",
            "id": "9f2b4e046291adec2320456159abfd70"
          },
          {
            "type": "html",
            "text": " [[Incomplete Library Class]]",
            "id": "e7ceefa3133e213503ce51e268b4c031"
          },
          {
            "type": "html",
            "text": " [[Data Class]]",
            "id": "199258554d9946075a0a08db5ebb76bc"
          },
          {
            "type": "html",
            "text": " [[Refused Bequest]]",
            "id": "9211db09fc21bad96ae9abf01ca2d7c2"
          },
          {
            "type": "html",
            "text": "\nThe list of canonical smells found in [[Refactoring Improving The Design Of Existing Code]] can be found at: [http://jexp.de/papers/refactoring/refactoring/node26.html jexp.de] (we're slowly making sure they're all here).",
            "id": "8000a3e37a2292c0cfdd8a5f9f3a578b"
          },
          {
            "type": "html",
            "text": "-- updated broken link, Michael Hunger",
            "id": "788f4bf91f86b04d57134c7caee546ab"
          },
          {
            "type": "html",
            "text": "\nSome Principles for judging whether code smells bad or good are defined in [[Principles Of Object Oriented Design]].",
            "id": "39e44e51d595bafb38c57d1f8a86305b"
          },
          {
            "type": "html",
            "text": "\nSee Also:",
            "id": "df520f236597551402fb5cbdb38a04e4"
          },
          {
            "type": "html",
            "text": " [[Code Deodorant]]",
            "id": "a73621745a07fa770deee88dc6dafda3"
          },
          {
            "type": "html",
            "text": " [[Listen To The Code]] - For another sensory metaphor.",
            "id": "21f07bda84855c51539199b2e602cfab"
          },
          {
            "type": "html",
            "text": " [[Code Smells Illustrated With Java Awt]] - More examples.",
            "id": "bf00b5cece0985efd77205fc7aabef3f"
          },
          {
            "type": "html",
            "text": " [[Coding Cost Model]] - Asking for an objective metric for \"better code\" (i.e.:<br>\"not smells\")",
            "id": "a3068b7973cd0c8cf161e83e2853a803"
          },
          {
            "type": "html",
            "text": " [[Small Lint]] - a [[Smalltalk Language]] style checker, with some rules for \"good\" and \"bad\" constructs.",
            "id": "2e7ac03e7867b7ce815debf6b459b804"
          },
          {
            "type": "html",
            "text": " [[Bigger Refactoring Thoughts]] - [[Code Smell]]s prompt [[Refactor Mercilessly]], which often ends up rediscovering [[Design Patterns]].",
            "id": "80a0c4c3f35e47ae6f3ade30c9d0d5d2"
          },
          {
            "type": "html",
            "text": " Finding smells:<br>[[Change Brainstrom]], [[Comment Brainstorm]]",
            "id": "2bd2b35c6a1ea9a7f7af69f9c22fee9a"
          },
          {
            "type": "html",
            "text": " The Other Smellable Things:<br>[[Model Smell]]s, [[Text Smell]]s, [[Language Smell]]s",
            "id": "a7548244eec0d9561cb6874b45b866ef"
          },
          {
            "type": "html",
            "text": " [[Code Sensing]]",
            "id": "f321a64457983d2b0a4ad34ecfe04d9f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "<i>[This list needs refactoring to above:]</i>\n[[Code Smell]]s referenced in:",
            "id": "c86aab78b7e5aa528ea60f666d99a351"
          },
          {
            "type": "html",
            "text": " [[Refactoring Improving The Design Of Existing Code]] - a book including [[Kent Beck]]'s comments on [[Code Smell]]s and refactoring.",
            "id": "41d6f640a0a5389067e4b9e31722a594"
          },
          {
            "type": "html",
            "text": " [[Wiki Pages About Refactoring]] - related pages.",
            "id": "0233b4445262ce355a19fd9a5bc6434b"
          },
          {
            "type": "html",
            "text": " [[Beauty Aint My Business No Sir]] - [[Kent Beck]]'s comment on parallel inheritance hierarchies, [a minor example of code that smells].",
            "id": "686b91cfa2e5a16b6de8462eff252af2"
          },
          {
            "type": "html",
            "text": " [[Daves Real Example Where Thinking Ahead Would Have Helped]] - An argument over [[You Arent Gonna Need It]]:<br>After [[Do The Simplest Thing That Could Possibly Work]] the [[Code Smell]]s because it violates the [[Once And Only Once]] rule.",
            "id": "8cae9113925a401479677d349453d0b0"
          },
          {
            "type": "html",
            "text": " [[Extreme Normal Form Defined]] - <i>another metric to drive refactoring?</i>",
            "id": "03e026694499a07f23448a23cf63bbe7"
          },
          {
            "type": "html",
            "text": " [[Extreme Normal Form Definitions]] - <i>(same as [[Extreme Normal Form Defined]])</i>",
            "id": "2bff66cc1afd3177f1d82ce305300ee9"
          },
          {
            "type": "html",
            "text": " [[Extreme Reuse]] - reuse is good. But you may have to ignore [[Code Smell]]s in 3rd party library, unless you want maintenance and upgrade problems.",
            "id": "d85dc36c6b20cbdb965e6eeac0b4d0f0"
          },
          {
            "type": "html",
            "text": " [[Xp Productivity Measurement Problem]] - and does it, and refactoring, violate [[You Arent Gonna Need It]]?",
            "id": "0471e4ccbbd1ded498c51e60ebf37a3a"
          },
          {
            "type": "html",
            "text": " [[My Java Students]] - <i>(...just a reading recommendation.)</i>",
            "id": "427ca0dd124053f0ba94b0b2f7bda4b6"
          },
          {
            "type": "html",
            "text": " [[Value Objects Should Be Passed By Value]] - ''a vague feeling of \"wrongness.\"",
            "id": "33863aeed806081066d304f760d33bc2"
          },
          {
            "type": "html",
            "text": " [[Code Smell Metrics]] - Objective signals that your code might benefit from some refactoring",
            "id": "f25351ffd1a7fc9e0bb9e11494153837"
          },
          {
            "type": "html",
            "text": " [[Test Resistance]] - If writing [[Unit Test]]s for your code is difficult, your code is probably not well-factored. Pay attention when you become reluctant to write necessary tests.",
            "id": "1484c212d3a46d2e2379742b43e35c70"
          },
          {
            "type": "html",
            "text": " [[Abstraction Distraction]] - Use of different abstraction levels in the same code.",
            "id": "86ea0426f02dd8cb402b25fb4b022bd6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "<b>Discussion:</b>",
            "id": "3323e3a4fa450db76a65f681cdffb548"
          },
          {
            "type": "html",
            "text": "\nWhat ever happened to \"Listen to what Smalltalk is telling you?\"",
            "id": "cb6e806f6e3a28e409d07e0310131dee"
          },
          {
            "type": "html",
            "text": "<i>Same thing, isn't it? Just a different analogy: perhaps some of us smell out code problems; some see them; and some [[Listen To The Code]]. </i>",
            "id": "a6791c41aba32cbdb226e8783ab0f18a"
          },
          {
            "type": "html",
            "text": ". . . . . .",
            "id": "a1781b71ae677c1e253f07770cce718c"
          },
          {
            "type": "html",
            "text": "\nI have recently completed a Sensory Orientation Survey of 11,352 randomly-selected software developers, determining their primary sensory mode. 10,901 were visually-oriented, 430 hearing-oriented, 20 were touch-oriented, and one was smell-oriented. Some other interesting statistics were also gleaned, but I'm not sure how they are related. There were 386 visually-impaired developers, 19 vision-and-hearing-impaired developers, and one developer named Spot.",
            "id": "46b68fc2b7d46dd73ed92b6c5417f876"
          },
          {
            "type": "html",
            "text": "<i>I think I interviewed Spot today. </i>",
            "id": "ad51697166e34feac6f638d0e12aa113"
          },
          {
            "type": "html",
            "text": "\nI think my major problem with the terminology is that it complicates critiques. It means one thing for one developer to say to another, \"your code doesn't sound right,\" or, \"your code sounds off-key,\" and quite a different thing to say, \"your code smells.\" I wish the earlier auditory metaphor had stuck... -- [[Russell Gold]]",
            "id": "ac9f1d500af18092e88b9e9670e39b2c"
          },
          {
            "type": "html",
            "text": "\nMost people are visual (\"I see that\"). Fewer are auditory (\"I hear you\"). Fewer still are tactile (\"I feel that\"). So few use smell as their primary sense that speaking of smells seems a bit alien to almost everyone. Perhaps that makes it a good choice.",
            "id": "858218152a589d081d08ee75735a87ca"
          },
          {
            "type": "html",
            "text": "<i>You see <b>this</b>, you hear <b>that</b>. But you go \"<b>what</b> is that smell ?\"</i>",
            "id": "3553c14fca433d0bcf90a399b7067da2"
          },
          {
            "type": "html",
            "text": "<b>It must be Coffee</b> Which brings up the point that all smells are not [[Bad Thing]]s. Smells tend to permeate the air and are not necessarily easy to track down. (Except in the kitchen). It seems that smell has been used in a negative sense. Could this term be used to describe a [[Good Thing]]? Can someone create code that smells good?",
            "id": "e1d41a39af138a0fef75a55c19ac9ddd"
          },
          {
            "type": "html",
            "text": "<i>Smell is such a primitive (neurologically speaking) sense that people often respond to smells without being consciously aware of them, with their hindbrain acting on it before the cerebrum learns about it (if it ever does). This goes for smells good and bad. Not to say the same thing doesn't happen with other senses, but that \"something's going on here\" impression that comes with a consciously unperceived whiff of something may possibly be not too dissimilar to the same \"something's going on here\" impression that comes with \"smelly code\".</i>",
            "id": "a9f65f9003fa0f434502a962ce562d4e"
          },
          {
            "type": "html",
            "text": "\nI think that some of this misses the point. Smell is an indirect sense. It has in humans a  very limited direction finding capablity.  It may indicate an issue or it may not. The smell that you think is due to X may be due to Y. But most important to my mind it is a primative tool of hunting. We are hunting issues in code. Seeing is precise, directional and of limited range. Hearing is less percise, may or may not be directional ( echos frequency issues etc) and intermediate range. Smell is not precise, has limited direction, but may cary for miles on the wind. The Fire you smell to the west may in fact be on your east, if the wind has carryied it around. There is a fire somewhere, it is big, it is a problem-- so start hunting for it. .. If you think that  'nondirectional longrange indeterminate trouble detection criterion' is a better term to use-- have at it.\t",
            "id": "1a8d060a141d90709816e4a66aad0e73"
          },
          {
            "type": "html",
            "text": "-- [[Marc Grundfest]]",
            "id": "d088ba89ae2c8e6d92bfb8056ae1c4d6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "\nIn English, \"it smells\" ~= \"it smells bad\".",
            "id": "7d9e26528e4201b82cb643386ffcc85e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "\nCode is too abstract to map well to visual metaphor, and not enough people have the ear for auditory metaphor, but [almost] everyone has a nose and can smell garbage or roses. -- Pete Hardie",
            "id": "a38eab1d9f1ac87579f9cdde90b30a4f"
          },
          {
            "type": "html",
            "text": "\nAlso, smells cause a greater visceral reaction, reaching deeper into the grey matter than sight or sound. Both sight and sound are so overloaded that we have evolved the ability to tune out a lot of noise and clutter. Its easier to provoke a response with a smell, assuming the scent is communicated. -- [[Eric Scheid]]",
            "id": "5a3e7deab50f369e7a051dad958a034d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "\nAh, but when you smell a problem, you only know that you have to fix something. You still have to look to find exactly what needs fixing.",
            "id": "811ed0ecafda715d36d9186a0924774c"
          },
          {
            "type": "html",
            "text": "<i>The smell is only a symptom.</i>",
            "id": "8a7b35956d4e4c923deeff497aa9c0dc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "<i>When I eat a bowl of plain rice while smelling my neighbor's broiled duck, I eat a feast fit for a king.</i> -- Chinese saying (paraphrased)",
            "id": "e83d6c6f65a5cfeb41c62ea431d2fe21"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "\n[[Code Smell]] can creep up on you. Look at [[Empirical Pattern Discovery]] as a development tool to guide you in the process of [[Slow Refactoring]] as complement to doing what we call [[Refactor Mercilessly]]. -- [[Niclas Olofsson]]",
            "id": "e64d2f91c0d66802bd043b3d260e3bce"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "\nWhile chatting with [[Charles Medcoff]] over drinks, we came up with the idea of [[Process Smell]]'s. He gave the example of a company that has more QA staff than developers. Maybe this should be called [[Massive Quality Assurance Required]], or maybe something shorter. Hmmm...",
            "id": "754150192a14263187125b5fa8302f93"
          },
          {
            "type": "html",
            "text": "-- [[Eric Runquist]]",
            "id": "8f9c0cb4a36e3fbd4f2396b1e1b28d8c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "Code sounds: [http://www.newscientist.com/news/news.jsp?id=ns99992757 www.newscientist.com]",
            "id": "f841f6fee95bf72313dfa098f35e611c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "<i>In English, \"it smells\" ~= \"it smells bad\".</i>",
            "id": "7b93486277db18d740ee830a7428644c"
          },
          {
            "type": "html",
            "text": "\nYes, but 'smell' is not neutral enough for my liking. I suppose [[Code Smell]] is more neutral than [[Code Stench]] or [[Code Perfume]].",
            "id": "65aa4c04d1779ee7550f8916b038c744"
          },
          {
            "type": "html",
            "text": "-- [[David Vincent]]",
            "id": "1f4442be4cc5e95e1bf1da2e0183fae8"
          },
          {
            "type": "html",
            "text": "\nCodour? (or Codor, for those that think \"US English\" is a language) ;o) -- Nick Grimshaw",
            "id": "718467178f663b518342e7ebd88bdf27"
          },
          {
            "type": "html",
            "text": "\n[[Code Suspicion But Not Raving Paranoia]]? :-)",
            "id": "c55335865463653b5b0f6ee7c3ee0c7d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "A bit of empirical evidence for the code smell concept - see \"Using Redundancies to Find Error\" at \n[http://www.stanford.edu/~engler/p401-xie.pdf www.stanford.edu].",
            "id": "62c65953b0ec99841519dfa3a55cccb6"
          },
          {
            "type": "html",
            "text": "\nIn it, the authors use code scanners to look for redundant operations (assignment to self, duplicated conditions statements). They find that not only are redundant operations sometimes \"hard errors\" themselves, but also that the presence of redundant operations in a source file is a good predictor of other hard errors in the same file.",
            "id": "a09eb32528f4fa5684a4279506100202"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "<b>code smells in C, C++</b> ([[Edit Hint]]: do we need a separate page for this?)",
            "id": "829f564b70bbefea9a6f8a7750c79a5b"
          },
          {
            "type": "html",
            "text": "\n[[Tail Call Optimization]] has some example code.\nOne function has a (\"automatic\") local variable, and it passes that variable to another function.\nThen it mentions",
            "id": "4e7297f3863275805b3d0f5277155c54"
          },
          {
            "type": "html",
            "text": "\"On the other hand, bar() may do something like tuck the pointer away for later use, so using an automatic variable this way may not be safe anyhow.\"",
            "id": "802f2cf84142723e5375fe6d2d306c28"
          },
          {
            "type": "html",
            "text": "\nI agree - this may not be safe; it's a code smell.\nI can't decide if it's the",
            "id": "f80fc9a27edf4c52499212c81906e7c4"
          },
          {
            "type": "html",
            "text": " \"passing a pointer to a local variable\" part that smells bad, or the",
            "id": "27bdefae74009595b0dbb97b3e2e2b33"
          },
          {
            "type": "html",
            "text": " \"tuck the pointer away for later use\" part that smells bad.",
            "id": "89f0972832ae4043aac2ab3ff17e069e"
          },
          {
            "type": "html",
            "text": "\nThe problem:\nAfter that function tucks the pointer away for later use and returns,\nafter the calling function returns,\nthen the (stack) memory that pointer points to is no longer valid.\nIt probably gets overwritten with other values.\nThen if that pointer ever gets used, it is pointing to irrelevant invalid data.",
            "id": "f387ad1b3c49448826731a43416a7af7"
          },
          {
            "type": "html",
            "text": "\nJava goes to great lengths to make sure this problem never happens, by making it impossible to pass a pointer to a local (stack) variable - the only pointers that can be passed are \"references\" to objects created on the heap.",
            "id": "ecc224acaa7a019cada7c9e9a4276ab4"
          },
          {
            "type": "html",
            "text": "<i>Please look at Java Servlets and the re-entrancy problems due to avoidance of stack based storage. I don't want to start yet another language battle, I just want to highlight that memory management issues are a complex problem that rears its head in different ways in different languages.</i>",
            "id": "1b6a80b6111ef226a017e4f040f7df9e"
          },
          {
            "type": "html",
            "text": "\nI guess it depends on the documentation for the function. If a function 'tucks away' a pointer, then I would expect it to have a name like 'register_foo' or 'insert_foo' or at least document the fact that it requires a long-lived heap pointer. In C++ of course, you would use shared_ptr and avoid any problems with stack pointers becoming invalid. [[Mike Weller]].",
            "id": "b3385772151e2350fe2b5efaf0f5ebca"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "'code fragrance' - when a piece of coding is particularly elegant in design and efficiency. (code smells good)",
            "id": "f06153431327ca7061a4588fd0484dfd"
          },
          {
            "type": "html",
            "text": "<i>Who said, \"when I find myself congratulating myself on how very clever a line or word is, I take it out\"?</i>",
            "id": "9d1af1cf30e4d4a4c9223a1b117e69bb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "Another advantage of the \"Smell\" metaphor is that scents are often very noticeable initially, but after a while you become accustomed to them and don't notice them any more, which I figure is also the case for [[Code Smells]], if you're not careful. (And even more so for [[User Interface Smells]], I suppose.) -- [[Scott Mc Murray]]",
            "id": "26a7378a0602c06d8a8670efdb749456"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "<b>Category comment</b>",
            "id": "82c3c7d028af21687bc77fd22a7f04d1"
          },
          {
            "type": "html",
            "text": "\nI de-duplicated the [[Development Anti Pattern]]s area in the [[Anti Pattern Catalog]]. There is some overlaps between [[Development Anti Pattern]]s found in the [[Anti Pattern Catalog]] and the pages attached to the [[Category Code Smell]] which often uses the same template as [[Anti Pattern]].",
            "id": "490ead65872ec4a8e502e5521433e513"
          },
          {
            "type": "html",
            "text": "\nIn order to get the maximum of pages auto-indexed in categories, I propose:",
            "id": "131840b2bcba3d207bd176e445e3e459"
          },
          {
            "type": "html",
            "text": " To attach to all [[Code Smell]]s to the [[Category Development Anti Pattern]].",
            "id": "a06f551ec16ae44256e21f9be62d3a9c"
          },
          {
            "type": "html",
            "text": " Then in the [[Development Anti Pattern Road Map]], links will be put to [[Category Code Smell]].",
            "id": "b1e63d366bcb99958d555b89d860d861"
          },
          {
            "type": "html",
            "text": " All not categorized [[Code Smell]]s will be attached to both categories [[Category Code Smell]] (few pages not in there) and [[Category Development Anti Pattern]].",
            "id": "c421d574c89337ce39ff874d8e907fd8"
          },
          {
            "type": "html",
            "text": "\nAny comments?",
            "id": "85040733e21fa47213864a7018a38cf5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "\nBoilerplate.  The existence of boilerplate code is either a smell coming from your code (if it's reasonably possible to eliminate it) or from your language / framework (if it isn't).  Some languages (e.g. [[Lisp Macro]]) make boilerplate elimination easy, others (e.g. [[Csharp Language]]) positively require boilerplate under certain circumstances.",
            "id": "236cbf5000f75975ea2ffcdc5ea6386f"
          },
          {
            "type": "html",
            "text": "-- [[Duncan Bayne]]",
            "id": "b2a098f0d08276269d31286d042a28c7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "\nI propose that [[Hiding Type With String]] should be considered a [[Code Smell]]. -- [[Martin Spamer]] ",
            "id": "ba5137d15d434ac8572e5a3b758e5ef8"
          },
          {
            "type": "html",
            "text": "\nSome examples.",
            "id": "99036d7cba1ef7df07bcbbf685272ab2"
          },
          {
            "type": "code",
            "text": "  String telephoneNo;\n  String xPath;",
            "id": "f8266796114033124408c12f1ecb23f8"
          },
          {
            "type": "html",
            "text": "\nYes -- we tend to call that [[Primitive Obsession]]. -- [[Jb Rainsberger]]",
            "id": "5c360298206fdba1b96f722714d7d244"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "See also: [[What Isa Smell]]",
            "id": "a6d35de448a549012367cee378741595"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "What about [[Bad Smell In Data]]?  Alot of data can also be an indication of too much or improperly specified factoring. -- [[Id Know]].",
            "id": "13e56d2ce77ada514e0420e5f42e42aa"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "50654c74aaf8ac680c9123feb7bcbb52"
          },
          {
            "type": "html",
            "text": "[[Code Smell]]s can often be caused by doing [[Information Programming]] in a [[Data Programming Context]] or [[Data Programming]] in an [[Information Programming Context]]. In many cases the opposite approaches are correct for these two situations. For example, coding things with letter is bad in data and good in information. Storing UI labels in a database is bad in data and good in information (but you need an [[Info Base]] to do it right). Using plurals for table names is bad in a database (which is designed to handle data organization entities - tables) and may be good when building information organization entities. ",
            "id": "883d721c509f78ad0a49122b2f06685a"
          },
          {
            "type": "html",
            "text": "\nWe need a term to describe a [[Code Smell]] that indicates that the code is good or well built. Perhaps call that a [[Good Code Smell]].",
            "id": "5109add1c508e2b5f2cb8789eaabb1d9"
          },
          {
            "type": "html",
            "text": "-- [[Jon Grover]]",
            "id": "334cce0d93c927991b5a44309068918d"
          },
          {
            "type": "html",
            "text": "\n[[Category Code Smell]] [[Category Jargon]]",
            "id": "e9cde21c22237edd14daf41186206692"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CodeSmell c2.com]",
            "id": "b353515c9944d0185c084660d7ec5f6b"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1627476692626
    }
  ]
}