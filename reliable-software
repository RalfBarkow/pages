{
  "title": "Reliable Software",
  "story": [
    {
      "type": "paragraph",
      "id": "1ccedd3a8b8d90b4",
      "text": "NASA/JPL's Gerard Holzmann offers Ten\nRules for Developing Safety Critical Code. [http://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "b55461439ed66a67",
      "text": "The short paper is worth reading. It makes clear the attention to detail required of any programmer writing code that has to work reliably."
    },
    {
      "type": "pagefold",
      "id": "482cc848f3516c70",
      "text": "rules"
    },
    {
      "type": "paragraph",
      "id": "c5a043d9c4cda3e7",
      "text": "simple control flow constructs"
    },
    {
      "type": "paragraph",
      "id": "29c9a2a0c32ea2ae",
      "text": "loops with fixed upper-bounds"
    },
    {
      "type": "paragraph",
      "id": "15fd92025f79a6a9",
      "text": "no memory allocation after initialization"
    },
    {
      "type": "paragraph",
      "id": "328b0e6a1a83c4c3",
      "text": "no function longer than a printed page"
    },
    {
      "type": "paragraph",
      "id": "118b179efa79c029",
      "text": "minimum of two\nassertions per function"
    },
    {
      "type": "paragraph",
      "id": "93066f672e77c55a",
      "text": "data declared in smallest possible scope"
    },
    {
      "type": "paragraph",
      "id": "afba9d446adbb48c",
      "text": "check validity of parameters and return values"
    },
    {
      "type": "paragraph",
      "id": "b37b8612813bd3f3",
      "text": "use of the preprocessor must be limited"
    },
    {
      "type": "paragraph",
      "id": "fc180b5b1d226227",
      "text": "pointers should be restricted"
    },
    {
      "type": "paragraph",
      "id": "23b5c4fc6ff714df",
      "text": "code must\ncompile without any warnings"
    },
    {
      "type": "pagefold",
      "id": "c3ba8729a01f03e4",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "5befbf0f54c5f373",
      "text": "The most striking difference from casual programming is the avoidance of recursive data structures or control flows. However, when these are allowed one cannot state with authority that a finite computer will not run out of time or memory."
    },
    {
      "type": "paragraph",
      "id": "6f75e3f8e0505f5d",
      "text": "Contrast these rules with my own patterns for [[Information Integrity]] wherein a user could run the program out of memory, detect the subsequent [[Meaningless Behavior]], and then reduce their demand on the system by closing windows."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Reliable Software",
        "story": []
      },
      "date": 1429369212554
    },
    {
      "item": {
        "type": "factory",
        "id": "1ccedd3a8b8d90b4"
      },
      "id": "1ccedd3a8b8d90b4",
      "type": "add",
      "date": 1429369241348
    },
    {
      "type": "edit",
      "id": "1ccedd3a8b8d90b4",
      "item": {
        "type": "paragraph",
        "id": "1ccedd3a8b8d90b4",
        "text": "NASA/JPL's Gerard Holzmann offers Ten\nRules for Developing Safety Critical Code."
      },
      "date": 1429369328968
    },
    {
      "type": "edit",
      "id": "1ccedd3a8b8d90b4",
      "item": {
        "type": "paragraph",
        "id": "1ccedd3a8b8d90b4",
        "text": "NASA/JPL's Gerard Holzmann offers Ten\nRules for Developing Safety Critical Code. [http://en.wikipedia.org/wiki/The_Power_of_10:_Rules_for_Developing_Safety-Critical_Code wikipedia]"
      },
      "date": 1429369473129
    },
    {
      "item": {
        "type": "factory",
        "id": "482cc848f3516c70"
      },
      "id": "482cc848f3516c70",
      "type": "add",
      "after": "b55461439ed66a67",
      "date": 1429370058375
    },
    {
      "type": "add",
      "id": "b55461439ed66a67",
      "item": {
        "type": "paragraph",
        "id": "b55461439ed66a67",
        "text": "The short paper is worth reading. It makes clear the attention to detail required of any programmer writing code that has to work reliably."
      },
      "after": "1ccedd3a8b8d90b4",
      "date": 1429370063548
    },
    {
      "type": "edit",
      "id": "482cc848f3516c70",
      "item": {
        "type": "pagefold",
        "id": "482cc848f3516c70",
        "text": "rules"
      },
      "date": 1429370068629
    },
    {
      "item": {
        "type": "factory",
        "id": "c5a043d9c4cda3e7"
      },
      "id": "c5a043d9c4cda3e7",
      "type": "add",
      "after": "482cc848f3516c70",
      "date": 1429370114225
    },
    {
      "type": "edit",
      "id": "c5a043d9c4cda3e7",
      "item": {
        "type": "paragraph",
        "id": "c5a043d9c4cda3e7",
        "text": "simple control flow constructs"
      },
      "date": 1429370124266
    },
    {
      "item": {
        "type": "factory",
        "id": "29c9a2a0c32ea2ae"
      },
      "id": "29c9a2a0c32ea2ae",
      "type": "add",
      "after": "c5a043d9c4cda3e7",
      "date": 1429370142326
    },
    {
      "type": "edit",
      "id": "29c9a2a0c32ea2ae",
      "item": {
        "type": "paragraph",
        "id": "29c9a2a0c32ea2ae",
        "text": "fixed upper-bounds"
      },
      "date": 1429370147239
    },
    {
      "type": "add",
      "id": "15fd92025f79a6a9",
      "item": {
        "type": "paragraph",
        "id": "15fd92025f79a6a9",
        "text": "no memory allocation after initialization"
      },
      "after": "29c9a2a0c32ea2ae",
      "date": 1429370179388
    },
    {
      "type": "add",
      "id": "328b0e6a1a83c4c3",
      "item": {
        "type": "paragraph",
        "id": "328b0e6a1a83c4c3",
        "text": "no function longer than a printed page"
      },
      "after": "15fd92025f79a6a9",
      "date": 1429370234812
    },
    {
      "type": "edit",
      "id": "29c9a2a0c32ea2ae",
      "item": {
        "type": "paragraph",
        "id": "29c9a2a0c32ea2ae",
        "text": "loops with fixed upper-bounds"
      },
      "date": 1429370260212
    },
    {
      "type": "add",
      "id": "118b179efa79c029",
      "item": {
        "type": "paragraph",
        "id": "118b179efa79c029",
        "text": "minimum of two\nassertions per function"
      },
      "after": "328b0e6a1a83c4c3",
      "date": 1429370325698
    },
    {
      "type": "add",
      "id": "93066f672e77c55a",
      "item": {
        "type": "paragraph",
        "id": "93066f672e77c55a",
        "text": "data declared in smallest possible scope"
      },
      "after": "118b179efa79c029",
      "date": 1429370415702
    },
    {
      "type": "add",
      "id": "afba9d446adbb48c",
      "item": {
        "type": "paragraph",
        "id": "afba9d446adbb48c",
        "text": "check validity of parameters and return values"
      },
      "after": "93066f672e77c55a",
      "date": 1429370525738
    },
    {
      "type": "add",
      "id": "b37b8612813bd3f3",
      "item": {
        "type": "paragraph",
        "id": "b37b8612813bd3f3",
        "text": "use of the preprocessor must be limited"
      },
      "after": "afba9d446adbb48c",
      "date": 1429370615858
    },
    {
      "type": "add",
      "id": "fc180b5b1d226227",
      "item": {
        "type": "paragraph",
        "id": "fc180b5b1d226227",
        "text": "no more than one level of pointer\ndereferencing"
      },
      "after": "b37b8612813bd3f3",
      "date": 1429370670712
    },
    {
      "type": "edit",
      "id": "fc180b5b1d226227",
      "item": {
        "type": "paragraph",
        "id": "fc180b5b1d226227",
        "text": "pointers should be restricted"
      },
      "date": 1429370700253
    },
    {
      "type": "add",
      "id": "23b5c4fc6ff714df",
      "item": {
        "type": "paragraph",
        "id": "23b5c4fc6ff714df",
        "text": "code must\ncompile without any warnings"
      },
      "after": "fc180b5b1d226227",
      "date": 1429370801391
    },
    {
      "item": {
        "type": "factory",
        "id": "c3ba8729a01f03e4"
      },
      "id": "c3ba8729a01f03e4",
      "type": "add",
      "after": "23b5c4fc6ff714df",
      "date": 1429370856768
    },
    {
      "type": "edit",
      "id": "c3ba8729a01f03e4",
      "item": {
        "type": "pagefold",
        "id": "c3ba8729a01f03e4",
        "text": "."
      },
      "date": 1429370861308
    },
    {
      "item": {
        "type": "factory",
        "id": "5befbf0f54c5f373"
      },
      "id": "5befbf0f54c5f373",
      "type": "add",
      "after": "c3ba8729a01f03e4",
      "date": 1429370909586
    },
    {
      "type": "edit",
      "id": "5befbf0f54c5f373",
      "item": {
        "type": "paragraph",
        "id": "5befbf0f54c5f373",
        "text": "The most striking difference from casual programming is the avoidance of recursive data structures or control flows. However, when these are allowed one cannot state with authority that a finite computer will not run out of time or memory."
      },
      "date": 1429371071325
    },
    {
      "type": "move",
      "order": [
        "1ccedd3a8b8d90b4",
        "482cc848f3516c70",
        "c5a043d9c4cda3e7",
        "29c9a2a0c32ea2ae",
        "15fd92025f79a6a9",
        "328b0e6a1a83c4c3",
        "118b179efa79c029",
        "93066f672e77c55a",
        "afba9d446adbb48c",
        "b37b8612813bd3f3",
        "fc180b5b1d226227",
        "23b5c4fc6ff714df",
        "c3ba8729a01f03e4",
        "5befbf0f54c5f373",
        "b55461439ed66a67"
      ],
      "id": "1ccedd3a8b8d90b4",
      "date": 1429371525993
    },
    {
      "type": "move",
      "order": [
        "1ccedd3a8b8d90b4",
        "b55461439ed66a67",
        "482cc848f3516c70",
        "c5a043d9c4cda3e7",
        "29c9a2a0c32ea2ae",
        "15fd92025f79a6a9",
        "328b0e6a1a83c4c3",
        "118b179efa79c029",
        "93066f672e77c55a",
        "afba9d446adbb48c",
        "b37b8612813bd3f3",
        "fc180b5b1d226227",
        "23b5c4fc6ff714df",
        "c3ba8729a01f03e4",
        "5befbf0f54c5f373"
      ],
      "id": "b55461439ed66a67",
      "date": 1429371535502
    },
    {
      "type": "add",
      "id": "6f75e3f8e0505f5d",
      "item": {
        "type": "paragraph",
        "id": "6f75e3f8e0505f5d",
        "text": "Contrast these rules with my own patterns for [[Information Integrity]] wherein a user could run the program out of memory, "
      },
      "after": "5befbf0f54c5f373",
      "date": 1429371714802
    },
    {
      "type": "edit",
      "id": "6f75e3f8e0505f5d",
      "item": {
        "type": "paragraph",
        "id": "6f75e3f8e0505f5d",
        "text": "Contrast these rules with my own patterns for [[Information Integrity]] wherein a user could run the program out of memory, detect the subsequent [[Meaningless Behavior]], and then reduce their demand on the system by closing windows."
      },
      "date": 1429371802334
    },
    {
      "type": "fork",
      "site": "forage.ward.fed.wiki.org",
      "date": 1708092400859
    }
  ]
}