{
  "title": "Proper Mazes",
  "story": [
    {
      "type": "paragraph",
      "id": "0aca5a4418acc8a8",
      "text": "I had always considered solving mazes with a pencil to be boring and pointless. However, programming a computer to generate mazes has been a rewarding pastime."
    },
    {
      "type": "html",
      "id": "981a8cb0f95049e8",
      "text": "<h3> Specification"
    },
    {
      "type": "paragraph",
      "id": "ef4c3918a242729d",
      "text": "My first programming job was at Purdue. My boss was a mathematician. He would tell me interesting things in an off-handed way. Sometimes he would say things about mazes:\n\n"
    },
    {
      "type": "paragraph",
      "id": "54c1e9b19301c387",
      "text": "• In a proper maze, all squares are reachable but there is only one path from start to finish. This implies no loops. The network of paths must be a tree.\n\n"
    },
    {
      "type": "paragraph",
      "id": "454a9423bce0380f",
      "text": "• You solve any proper maze (and many improper mazes) by following the left hand wall. (A depth-first traversal of the tree.)\n\n"
    },
    {
      "type": "paragraph",
      "id": "238c30030f9ebec5",
      "text": "• You can generate a proper maze by knocking down walls, always from a visited square to a non-visited square, extending a path. "
    },
    {
      "type": "paragraph",
      "id": "efa455648a89a954",
      "text": "This is a sound algorithm because it won't get stuck: as long as there are unvisited squares, there will be at least one unvisited square next to a visited square.\n\n"
    },
    {
      "type": "html",
      "id": "6d2517c4f5c7cc21",
      "text": "<h3> Implementation"
    },
    {
      "type": "paragraph",
      "id": "1b511aba36398aa3",
      "text": "I have written the knocking down walls algorithm in several languages. I found that the visual effect was highly influenced by how one chose to knock down walls. "
    },
    {
      "type": "paragraph",
      "id": "a8b48db0b3ad8b10",
      "text": "My most interesting maze generator/solver was on the [[Imlac PDS-1]] where walls were represented as bits in a display processor program. While the central processor ran, the display processor visualized the progress of the generator and then solver."
    },
    {
      "type": "paragraph",
      "id": "d8fa283043891113",
      "text": "My most successful mazes, called [[Pebeliths]], were both aesthetically pleasing and had interesting solutions.  This came from my biasing of the random wall selection to look right at the top of the maze, down on the right side, left on the bottom, and back up on the left side. The result was swirly mazes with long solutions that went round and round the center. "
    },
    {
      "type": "html",
      "id": "c4896a5a5b0ec9a6",
      "text": "<h3> Notes"
    },
    {
      "type": "reference",
      "id": "edcebc9fde2204fd",
      "site": "sfw.c2.com",
      "slug": "more-about-the-logo",
      "title": "More About The Logo",
      "text": "The Portland Pattern Repository used a maze-like pattern for its logo. Contributors cooked up programs that would extend this to large fields of random paths."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Proper Mazes"
      },
      "date": 1354389097016
    },
    {
      "item": {
        "type": "factory",
        "id": "0aca5a4418acc8a8"
      },
      "id": "0aca5a4418acc8a8",
      "type": "add",
      "date": 1354389100174
    },
    {
      "type": "edit",
      "id": "0aca5a4418acc8a8",
      "item": {
        "type": "paragraph",
        "id": "0aca5a4418acc8a8",
        "text": "I had always considered solving mazes with a pencil to be boring and pointless. However, programming a computer to generate mazes has been a rewarding pastime."
      },
      "date": 1354389223653
    },
    {
      "item": {
        "type": "paragraph",
        "id": "981a8cb0f95049e8",
        "text": "\nMy first programming job was at Purdue. My boss was a mathematician. He would tell me interesting things in an off-handed way. Sometimes he would say things about mazes:\n\nIn a proper maze, all squares are reachable but there is only one path from start to finish. This implies no loops. The network must be a tree.\n\nYou solve any proper maze (and many improper mazes) by following the left hand wall. (A depth-first traversal of the tree.)\n\nYou can generate a proper maze by knocking down walls, always from a visited square to a non-visited square, extending a path. (this is a sound algorithm because it won't get stuck (as long as there unvisited squares, there will be at least one unvisited square next to a visited square).\n\nI have written the knocking down walls algorithm in several languages. I found that the visual effect was highly influenced by how one chose to knock down walls. My most successful mazes (aesthetically pleasing with interesting solutions) came from biasing my random wall selection to look right at the top of the maze, down on the right side, left on the bottom, and back up on the left side. The result was swirly mazes with long solutions that went round and round the center."
      },
      "id": "981a8cb0f95049e8",
      "type": "add",
      "after": "0aca5a4418acc8a8",
      "date": 1354389224161
    },
    {
      "type": "edit",
      "id": "981a8cb0f95049e8",
      "item": {
        "type": "paragraph",
        "id": "981a8cb0f95049e8",
        "text": "My first programming job was at Purdue. My boss was a mathematician. He would tell me interesting things in an off-handed way. Sometimes he would say things about mazes:\n\n"
      },
      "date": 1354389228083
    },
    {
      "item": {
        "type": "paragraph",
        "id": "54c1e9b19301c387",
        "text": "In a proper maze, all squares are reachable but there is only one path from start to finish. This implies no loops. The network must be a tree.\n\nYou solve any proper maze (and many improper mazes) by following the left hand wall. (A depth-first traversal of the tree.)\n\nYou can generate a proper maze by knocking down walls, always from a visited square to a non-visited square, extending a path. (this is a sound algorithm because it won't get stuck (as long as there unvisited squares, there will be at least one unvisited square next to a visited square).\n\nI have written the knocking down walls algorithm in several languages. I found that the visual effect was highly influenced by how one chose to knock down walls. My most successful mazes (aesthetically pleasing with interesting solutions) came from biasing my random wall selection to look right at the top of the maze, down on the right side, left on the bottom, and back up on the left side. The result was swirly mazes with long solutions that went round and round the center."
      },
      "id": "54c1e9b19301c387",
      "type": "add",
      "after": "981a8cb0f95049e8",
      "date": 1354389228591
    },
    {
      "type": "edit",
      "id": "54c1e9b19301c387",
      "item": {
        "type": "paragraph",
        "id": "54c1e9b19301c387",
        "text": "In a proper maze, all squares are reachable but there is only one path from start to finish. This implies no loops. The network must be a tree.\n\n"
      },
      "date": 1354389230515
    },
    {
      "item": {
        "type": "paragraph",
        "id": "454a9423bce0380f",
        "text": "You solve any proper maze (and many improper mazes) by following the left hand wall. (A depth-first traversal of the tree.)\n\nYou can generate a proper maze by knocking down walls, always from a visited square to a non-visited square, extending a path. (this is a sound algorithm because it won't get stuck (as long as there unvisited squares, there will be at least one unvisited square next to a visited square).\n\nI have written the knocking down walls algorithm in several languages. I found that the visual effect was highly influenced by how one chose to knock down walls. My most successful mazes (aesthetically pleasing with interesting solutions) came from biasing my random wall selection to look right at the top of the maze, down on the right side, left on the bottom, and back up on the left side. The result was swirly mazes with long solutions that went round and round the center."
      },
      "id": "454a9423bce0380f",
      "type": "add",
      "after": "54c1e9b19301c387",
      "date": 1354389231021
    },
    {
      "type": "edit",
      "id": "454a9423bce0380f",
      "item": {
        "type": "paragraph",
        "id": "454a9423bce0380f",
        "text": "You solve any proper maze (and many improper mazes) by following the left hand wall. (A depth-first traversal of the tree.)\n\n"
      },
      "date": 1354389233139
    },
    {
      "item": {
        "type": "paragraph",
        "id": "238c30030f9ebec5",
        "text": "You can generate a proper maze by knocking down walls, always from a visited square to a non-visited square, extending a path. (this is a sound algorithm because it won't get stuck (as long as there unvisited squares, there will be at least one unvisited square next to a visited square).\n\nI have written the knocking down walls algorithm in several languages. I found that the visual effect was highly influenced by how one chose to knock down walls. My most successful mazes (aesthetically pleasing with interesting solutions) came from biasing my random wall selection to look right at the top of the maze, down on the right side, left on the bottom, and back up on the left side. The result was swirly mazes with long solutions that went round and round the center."
      },
      "id": "238c30030f9ebec5",
      "type": "add",
      "after": "454a9423bce0380f",
      "date": 1354389233645
    },
    {
      "type": "edit",
      "id": "238c30030f9ebec5",
      "item": {
        "type": "paragraph",
        "id": "238c30030f9ebec5",
        "text": "You can generate a proper maze by knocking down walls, always from a visited square to a non-visited square, extending a path. (this is a sound algorithm because it won't get stuck (as long as there unvisited squares, there will be at least one unvisited square next to a visited square).\n\n"
      },
      "date": 1354389236299
    },
    {
      "item": {
        "type": "paragraph",
        "id": "6d2517c4f5c7cc21",
        "text": "I have written the knocking down walls algorithm in several languages. I found that the visual effect was highly influenced by how one chose to knock down walls. My most successful mazes (aesthetically pleasing with interesting solutions) came from biasing my random wall selection to look right at the top of the maze, down on the right side, left on the bottom, and back up on the left side. The result was swirly mazes with long solutions that went round and round the center."
      },
      "id": "6d2517c4f5c7cc21",
      "type": "add",
      "after": "238c30030f9ebec5",
      "date": 1354389236806
    },
    {
      "type": "edit",
      "id": "6d2517c4f5c7cc21",
      "item": {
        "type": "paragraph",
        "id": "6d2517c4f5c7cc21",
        "text": "I have written the knocking down walls algorithm in several languages. I found that the visual effect was highly influenced by how one chose to knock down walls. "
      },
      "date": 1354389245597
    },
    {
      "item": {
        "type": "paragraph",
        "id": "d8fa283043891113",
        "text": "My most successful mazes (aesthetically pleasing with interesting solutions) came from biasing my random wall selection to look right at the top of the maze, down on the right side, left on the bottom, and back up on the left side. The result was swirly mazes with long solutions that went round and round the center."
      },
      "id": "d8fa283043891113",
      "type": "add",
      "after": "6d2517c4f5c7cc21",
      "date": 1354389246103
    },
    {
      "type": "edit",
      "id": "54c1e9b19301c387",
      "item": {
        "type": "paragraph",
        "id": "54c1e9b19301c387",
        "text": "• In a proper maze, all squares are reachable but there is only one path from start to finish. This implies no loops. The network must be a tree.\n\n"
      },
      "date": 1354389285416
    },
    {
      "type": "edit",
      "id": "454a9423bce0380f",
      "item": {
        "type": "paragraph",
        "id": "454a9423bce0380f",
        "text": "• You solve any proper maze (and many improper mazes) by following the left hand wall. (A depth-first traversal of the tree.)\n\n"
      },
      "date": 1354389294330
    },
    {
      "type": "edit",
      "id": "238c30030f9ebec5",
      "item": {
        "type": "paragraph",
        "id": "238c30030f9ebec5",
        "text": "• You can generate a proper maze by knocking down walls, always from a visited square to a non-visited square, extending a path. (this is a sound algorithm because it won't get stuck (as long as there unvisited squares, there will be at least one unvisited square next to a visited square).\n\n"
      },
      "date": 1354389302879
    },
    {
      "type": "edit",
      "id": "d8fa283043891113",
      "item": {
        "type": "paragraph",
        "id": "d8fa283043891113",
        "text": "My most successful mazes (aesthetically pleasing with interesting solutions) came from biasing my random wall selection to look right at the top of the maze, down on the right side, left on the bottom, and back up on the left side. The result was swirly mazes with long solutions that went round and round the center. See [[Pebeliths]]."
      },
      "date": 1354389391595
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a8b48db0b3ad8b10",
        "text": ""
      },
      "id": "a8b48db0b3ad8b10",
      "type": "add",
      "after": "6d2517c4f5c7cc21",
      "date": 1354389410930
    },
    {
      "type": "edit",
      "id": "a8b48db0b3ad8b10",
      "item": {
        "type": "paragraph",
        "id": "a8b48db0b3ad8b10",
        "text": "My most interesting maze generator/solver was on the [[Imlac PDS-1]] where walls were represented as bits in a display processor program. While the central processor ran, the display processor visualized the progress of the generator and then solver."
      },
      "date": 1354389603402
    },
    {
      "type": "edit",
      "id": "d8fa283043891113",
      "item": {
        "type": "paragraph",
        "id": "d8fa283043891113",
        "text": "My most successful mazes, called [[Pebeliths]], were both aesthetically pleasing and had interesting solutions.  This came from my biasing of the random wall selection to look right at the top of the maze, down on the right side, left on the bottom, and back up on the left side. The result was swirly mazes with long solutions that went round and round the center. See [[Pebeliths]]."
      },
      "date": 1354389705295
    },
    {
      "type": "edit",
      "id": "d8fa283043891113",
      "item": {
        "type": "paragraph",
        "id": "d8fa283043891113",
        "text": "My most successful mazes, called [[Pebeliths]], were both aesthetically pleasing and had interesting solutions.  This came from my biasing of the random wall selection to look right at the top of the maze, down on the right side, left on the bottom, and back up on the left side. The result was swirly mazes with long solutions that went round and round the center. "
      },
      "date": 1354389712167
    },
    {
      "type": "edit",
      "id": "981a8cb0f95049e8",
      "item": {
        "type": "paragraph",
        "id": "981a8cb0f95049e8",
        "text": "<h3> Specification"
      },
      "date": 1354389763197
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ef4c3918a242729d",
        "text": "My first programming job was at Purdue. My boss was a mathematician. He would tell me interesting things in an off-handed way. Sometimes he would say things about mazes:\n\n"
      },
      "id": "ef4c3918a242729d",
      "type": "add",
      "after": "981a8cb0f95049e8",
      "date": 1354389763702
    },
    {
      "type": "edit",
      "id": "6d2517c4f5c7cc21",
      "item": {
        "type": "paragraph",
        "id": "6d2517c4f5c7cc21",
        "text": "<h3> Implementation"
      },
      "date": 1354389784157
    },
    {
      "item": {
        "type": "paragraph",
        "id": "1b511aba36398aa3",
        "text": "I have written the knocking down walls algorithm in several languages. I found that the visual effect was highly influenced by how one chose to knock down walls. "
      },
      "id": "1b511aba36398aa3",
      "type": "add",
      "after": "6d2517c4f5c7cc21",
      "date": 1354389784663
    },
    {
      "item": {
        "type": "factory",
        "id": "c4896a5a5b0ec9a6"
      },
      "id": "c4896a5a5b0ec9a6",
      "type": "add",
      "after": "d8fa283043891113",
      "date": 1354390354989
    },
    {
      "type": "edit",
      "id": "c4896a5a5b0ec9a6",
      "item": {
        "type": "paragraph",
        "id": "c4896a5a5b0ec9a6",
        "text": "<h3> Notes"
      },
      "date": 1354390381703
    },
    {
      "item": {
        "type": "paragraph",
        "id": "fbd318e7d07c0bd3",
        "text": ""
      },
      "id": "fbd318e7d07c0bd3",
      "type": "add",
      "after": "c4896a5a5b0ec9a6",
      "date": 1354390382213
    },
    {
      "type": "edit",
      "id": "fbd318e7d07c0bd3",
      "item": {
        "type": "paragraph",
        "id": "fbd318e7d07c0bd3",
        "text": "The Portland Pattern Repository used a maze-like pattern for its logo."
      },
      "date": 1354390483338
    },
    {
      "item": {
        "type": "factory",
        "id": "edcebc9fde2204fd"
      },
      "id": "edcebc9fde2204fd",
      "type": "add",
      "after": "fbd318e7d07c0bd3",
      "date": 1354390581851
    },
    {
      "type": "edit",
      "id": "edcebc9fde2204fd",
      "item": {
        "type": "reference",
        "id": "edcebc9fde2204fd",
        "site": "sfw.c2.com",
        "slug": "more-about-the-logo",
        "title": "More About The Logo",
        "text": "<b>History of the C2 Logo</b>"
      },
      "date": 1354390587425
    },
    {
      "type": "remove",
      "id": "fbd318e7d07c0bd3",
      "date": 1354390608467
    },
    {
      "type": "edit",
      "id": "edcebc9fde2204fd",
      "item": {
        "type": "reference",
        "id": "edcebc9fde2204fd",
        "site": "sfw.c2.com",
        "slug": "more-about-the-logo",
        "title": "More About The Logo",
        "text": "The Portland Pattern Repository used a maze-like pattern for its logo. Contributors cooked up programs that would extend this to large fields of random paths."
      },
      "date": 1354390667170
    },
    {
      "type": "edit",
      "id": "238c30030f9ebec5",
      "item": {
        "type": "paragraph",
        "id": "238c30030f9ebec5",
        "text": "• You can generate a proper maze by knocking down walls, always from a visited square to a non-visited square, extending a path. This is a sound algorithm because it won't get stuck: as long as there unvisited squares, there will be at least one unvisited square next to a visited square.\n\n"
      },
      "date": 1354470444099
    },
    {
      "type": "edit",
      "id": "238c30030f9ebec5",
      "item": {
        "type": "paragraph",
        "id": "238c30030f9ebec5",
        "text": "• You can generate a proper maze by knocking down walls, always from a visited square to a non-visited square, extending a path. This is a sound algorithm because it won't get stuck: as long as there are unvisited squares, there will be at least one unvisited square next to a visited square.\n\n"
      },
      "date": 1354470462570
    },
    {
      "type": "edit",
      "id": "238c30030f9ebec5",
      "item": {
        "type": "paragraph",
        "id": "238c30030f9ebec5",
        "text": "• You can generate a proper maze by knocking down walls, always from a visited square to a non-visited square, extending a path. "
      },
      "date": 1354470480363
    },
    {
      "item": {
        "type": "paragraph",
        "id": "efa455648a89a954",
        "text": "This is a sound algorithm because it won't get stuck: as long as there are unvisited squares, there will be at least one unvisited square next to a visited square.\n\n"
      },
      "id": "efa455648a89a954",
      "type": "add",
      "after": "238c30030f9ebec5",
      "date": 1354470480871
    },
    {
      "type": "edit",
      "id": "54c1e9b19301c387",
      "item": {
        "type": "paragraph",
        "id": "54c1e9b19301c387",
        "text": "• In a proper maze, all squares are reachable but there is only one path from start to finish. This implies no loops. The network of paths must be a tree.\n\n"
      },
      "date": 1354470519825
    },
    {
      "type": "edit",
      "id": "981a8cb0f95049e8",
      "item": {
        "type": "html",
        "id": "981a8cb0f95049e8",
        "text": "<h3> Specification"
      },
      "date": 1420390408706
    },
    {
      "type": "edit",
      "id": "6d2517c4f5c7cc21",
      "item": {
        "type": "html",
        "id": "6d2517c4f5c7cc21",
        "text": "<h3> Implementation"
      },
      "date": 1420390412244
    },
    {
      "type": "edit",
      "id": "c4896a5a5b0ec9a6",
      "item": {
        "type": "html",
        "id": "c4896a5a5b0ec9a6",
        "text": "<h3> Notes"
      },
      "date": 1420390414869
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org",
      "date": 1651907899131
    }
  ]
}