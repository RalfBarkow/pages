{
  "title": "Virtual DOM",
  "story": [
    {
      "type": "paragraph",
      "id": "b70ed4f6331a5a8b",
      "text": "The [[Elm]] [[runtime]] uses a package called elm/virtual-dom to render HTML on a screen. In this section, we’ll learn how this package works. First, let’s understand how browsers render HTML in general. [https://elmprogramming.com/virtual-dom.html elmprogramming]"
    },
    {
      "type": "paragraph",
      "id": "da39c14d55c015e2",
      "text": "We were getting into the dirty details of updating the DOM by ourselves. In Elm, all we need to do is specify how we want to present our model to the user and let the runtime take care of updating the DOM. In the Model View Update - Part 1 section [https://elmprogramming.com/model-view-update-part-1.html#generating-messages page], we wrote the following code to display our view."
    },
    {
      "type": "code",
      "id": "e851eba20db495c8",
      "text": "view : Model -> Html Msg\nview model =\n    div []\n        [ button [ onClick Decrement ] [ text \"-\" ]\n        , text (String.fromInt model)\n        , button [ onClick Increment ] [ text \"+\" ]\n        ]"
    },
    {
      "type": "paragraph",
      "id": "1b37e3fad359cf54",
      "text": "We didn’t have to specify which DOM nodes should be updated. All we did was declare what our view should look like by using simple Elm functions. Behind the scenes, Elm used the elm/virtual-dom package to convert the code in view to actual DOM nodes."
    },
    {
      "type": "html",
      "id": "d6f025d1a0bfdc05",
      "text": "<center><img width=\"100%\" src=\"https://elmprogramming.com/images/chapter-5/5.3-virtual-dom/elm-runtime-virtual-dom.svg\"></center>"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Virtual DOM",
        "story": []
      },
      "date": 1638188372735
    },
    {
      "item": {
        "type": "factory",
        "id": "b70ed4f6331a5a8b"
      },
      "id": "b70ed4f6331a5a8b",
      "type": "add",
      "date": 1638188380994
    },
    {
      "type": "edit",
      "id": "b70ed4f6331a5a8b",
      "item": {
        "type": "paragraph",
        "id": "b70ed4f6331a5a8b",
        "text": "[https://elmprogramming.com/virtual-dom.htmlelmprogramming|"
      },
      "date": 1638188392197
    },
    {
      "type": "edit",
      "id": "b70ed4f6331a5a8b",
      "item": {
        "type": "paragraph",
        "id": "b70ed4f6331a5a8b",
        "text": "[https://elmprogramming.com/virtual-dom.htmlelmprogramming]"
      },
      "date": 1638188396222
    },
    {
      "type": "edit",
      "id": "b70ed4f6331a5a8b",
      "item": {
        "type": "paragraph",
        "id": "b70ed4f6331a5a8b",
        "text": "[https://elmprogramming.com/virtual-dom.html elmprogramming]"
      },
      "date": 1638188400364
    },
    {
      "type": "edit",
      "id": "b70ed4f6331a5a8b",
      "item": {
        "type": "paragraph",
        "id": "b70ed4f6331a5a8b",
        "text": "The Elm runtime uses a package called elm/virtual-dom to render HTML on a screen. In this section, we’ll learn how this package works. First, let’s understand how browsers render HTML in general. [https://elmprogramming.com/virtual-dom.html elmprogramming]"
      },
      "date": 1638188417082
    },
    {
      "type": "edit",
      "id": "b70ed4f6331a5a8b",
      "item": {
        "type": "paragraph",
        "id": "b70ed4f6331a5a8b",
        "text": "The [[Elm]] runtime uses a package called elm/virtual-dom to render HTML on a screen. In this section, we’ll learn how this package works. First, let’s understand how browsers render HTML in general. [https://elmprogramming.com/virtual-dom.html elmprogramming]"
      },
      "date": 1638188428185
    },
    {
      "type": "edit",
      "id": "b70ed4f6331a5a8b",
      "item": {
        "type": "paragraph",
        "id": "b70ed4f6331a5a8b",
        "text": "The [[Elm]] [[runtime]] uses a package called elm/virtual-dom to render HTML on a screen. In this section, we’ll learn how this package works. First, let’s understand how browsers render HTML in general. [https://elmprogramming.com/virtual-dom.html elmprogramming]"
      },
      "date": 1638188438804
    },
    {
      "item": {
        "type": "factory",
        "id": "da39c14d55c015e2"
      },
      "id": "da39c14d55c015e2",
      "type": "add",
      "after": "b70ed4f6331a5a8b",
      "date": 1638188566260
    },
    {
      "type": "edit",
      "id": "da39c14d55c015e2",
      "item": {
        "type": "paragraph",
        "id": "da39c14d55c015e2",
        "text": "We were getting into the dirty details of updating the DOM by ourselves. In Elm, all we need to do is specify how we want to present our model to the user and let the runtime take care of updating the DOM. In the Model View Update - Part 1 section, we wrote the following code to display our view."
      },
      "date": 1638188569968
    },
    {
      "type": "edit",
      "id": "da39c14d55c015e2",
      "item": {
        "type": "paragraph",
        "id": "da39c14d55c015e2",
        "text": "We were getting into the dirty details of updating the DOM by ourselves. In Elm, all we need to do is specify how we want to present our model to the user and let the runtime take care of updating the DOM. In the Model View Update - Part 1 section [https://elmprogramming.com/model-view-update-part-1.html#generating-messages page], we wrote the following code to display our view."
      },
      "date": 1638188596132
    },
    {
      "item": {
        "type": "factory",
        "id": "e851eba20db495c8"
      },
      "id": "e851eba20db495c8",
      "type": "add",
      "after": "da39c14d55c015e2",
      "date": 1638188655496
    },
    {
      "type": "edit",
      "id": "e851eba20db495c8",
      "item": {
        "type": "code",
        "id": "e851eba20db495c8",
        "text": "view : Model -> Html Msg\nview model =\n    div []\n        [ button [ onClick Decrement ] [ text \"-\" ]\n        , text (String.fromInt model)\n        , button [ onClick Increment ] [ text \"+\" ]\n        ]"
      },
      "date": 1638188657835
    },
    {
      "item": {
        "type": "factory",
        "id": "1b37e3fad359cf54"
      },
      "id": "1b37e3fad359cf54",
      "type": "add",
      "after": "e851eba20db495c8",
      "date": 1638188707906
    },
    {
      "type": "edit",
      "id": "1b37e3fad359cf54",
      "item": {
        "type": "paragraph",
        "id": "1b37e3fad359cf54",
        "text": "We didn’t have to specify which DOM nodes should be updated. All we did was declare what our view should look like by using simple Elm functions. Behind the scenes, Elm used the elm/virtual-dom package to convert the code in view to actual DOM nodes."
      },
      "date": 1638188709715
    },
    {
      "item": {
        "type": "factory",
        "id": "d6f025d1a0bfdc05"
      },
      "id": "d6f025d1a0bfdc05",
      "type": "add",
      "after": "1b37e3fad359cf54",
      "date": 1638188737938
    },
    {
      "type": "edit",
      "id": "d6f025d1a0bfdc05",
      "item": {
        "type": "html",
        "id": "d6f025d1a0bfdc05",
        "text": "<center><img width=\"100%\" src=\"https://elmprogramming.com/images/chapter-5/5.3-virtual-dom/elm-runtime-virtual-dom.svg\"></center>"
      },
      "date": 1638188758292
    }
  ]
}