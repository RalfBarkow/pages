{
  "title": "Track in Reverse Order",
  "story": [
    {
      "type": "paragraph",
      "id": "f60f58d21e281fff",
      "text": "Notice that the statements are tracked in reverse as we [[Loop]], and we reorder them only once we are Done. This is a very common pattern with loop! [https://package.elm-lang.org/packages/elm/parser/latest/Parser#loop page]"
    },
    {
      "type": "paragraph",
      "id": "072e0ef5d7041c04",
      "text": "If we consider the [[KWIC Indexing]] application of Fig. 15 instead of the 31 commonest English words, the [[Trie]] loses its advantage because of the nature of the data. For example, a trie requires 12 iterations to distinguish between COMPUTATION and COMPUTATIONS. In this case it would be better to build the trie so that words are scanned from right to left instead of from left to right. (TAOCP, v. 3, p. 494)"
    },
    {
      "type": "pagefold",
      "id": "45b3c9571f8e66a8",
      "text": "ðŸ”º"
    },
    {
      "type": "reference",
      "id": "c5fc5f0309a4fd88",
      "site": "wiki.ralfbarkow.ch",
      "slug": "elm-parser",
      "title": "Elm Parser",
      "text": "Regular expressions are quite confusing and difficult to use. This library provides a coherent alternative that handles more cases and produces clearer code. [https://github.com/elm/parser#parser github], [https://package.elm-lang.org/packages/elm/parser/latest page]"
    },
    {
      "type": "reference",
      "id": "c60d5902fbe50c6d",
      "site": "wiki.ralfbarkow.ch",
      "slug": "patricia",
      "title": "Patricia",
      "text": "Practical Algorithm To Retrieve Information Coded In Alphanumericâ€™s basic idea is to build a binary [[Trie]], but to avoid one-way branching by including in each node the number of bits to skip over before making the next test. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Track in Reverse Order",
        "story": []
      },
      "date": 1695023389665
    },
    {
      "id": "f60f58d21e281fff",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f60f58d21e281fff",
        "text": "Notice that the statements are tracked in reverse as we Loop, and we reorder them only once we are Done. This is a very common pattern with loop! [â‡’ [[Track in Reverse Order]]]"
      },
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695023392899
    },
    {
      "type": "edit",
      "id": "f60f58d21e281fff",
      "item": {
        "type": "paragraph",
        "id": "f60f58d21e281fff",
        "text": "Notice that the statements are tracked in reverse as we Loop, and we reorder them only once we are Done. This is a very common pattern with loop! "
      },
      "date": 1695023398263
    },
    {
      "item": {
        "type": "factory",
        "id": "c5fc5f0309a4fd88"
      },
      "id": "c5fc5f0309a4fd88",
      "type": "add",
      "after": "f60f58d21e281fff",
      "date": 1695023402966
    },
    {
      "type": "edit",
      "id": "c5fc5f0309a4fd88",
      "item": {
        "type": "reference",
        "id": "c5fc5f0309a4fd88",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-parser",
        "title": "Elm Parser",
        "text": "Regular expressions are quite confusing and difficult to use. This library provides a coherent alternative that handles more cases and produces clearer code. [https://github.com/elm/parser#parser github], [https://package.elm-lang.org/packages/elm/parser/latest page]"
      },
      "date": 1695023405419
    },
    {
      "id": "45b3c9571f8e66a8",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "45b3c9571f8e66a8",
        "text": "ðŸ”º"
      },
      "after": "f60f58d21e281fff",
      "attribution": {
        "page": "Sense of the Potential"
      },
      "date": 1695023426116
    },
    {
      "id": "c60d5902fbe50c6d",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "c60d5902fbe50c6d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "patricia",
        "title": "Patricia",
        "text": "Practical Algorithm To Retrieve Information Coded In Alphanumericâ€™s basic idea is to build a binary [[Trie]], but to avoid one-way branching by including in each node the number of bits to skip over before making the next test. "
      },
      "after": "c5fc5f0309a4fd88",
      "attribution": {
        "page": "2023-09-18"
      },
      "date": 1695023535463
    },
    {
      "type": "edit",
      "id": "f60f58d21e281fff",
      "item": {
        "type": "paragraph",
        "id": "f60f58d21e281fff",
        "text": "Notice that the statements are tracked in reverse as we Loop, and we reorder them only once we are Done. This is a very common pattern with loop!"
      },
      "date": 1695024613374
    },
    {
      "type": "add",
      "id": "072e0ef5d7041c04",
      "item": {
        "type": "paragraph",
        "id": "072e0ef5d7041c04",
        "text": "If we consider the KWIC indexing application of Fig. 15 instead of the 31 commonest English words, the trie loses its advantage because of the nature of the data. For example, a trie requires 12 iterations to distinguish between COMPUTATION and COMPUTATIONS. In this case it would be better to build the trie so that words are scanned from right to left instead of from left to right."
      },
      "after": "f60f58d21e281fff",
      "date": 1695024618448
    },
    {
      "type": "edit",
      "id": "f60f58d21e281fff",
      "item": {
        "type": "paragraph",
        "id": "f60f58d21e281fff",
        "text": "Notice that the statements are tracked in reverse as we Loop, and we reorder them only once we are Done. This is a very common pattern with loop! [https://package.elm-lang.org/packages/elm/parser/latest/Parser#loop page]"
      },
      "date": 1695024627848
    },
    {
      "type": "edit",
      "id": "072e0ef5d7041c04",
      "item": {
        "type": "paragraph",
        "id": "072e0ef5d7041c04",
        "text": "If we consider the [[KWIC Indexing]] application of Fig. 15 instead of the 31 commonest English words, the trie loses its advantage because of the nature of the data. For example, a trie requires 12 iterations to distinguish between COMPUTATION and COMPUTATIONS. In this case it would be better to build the trie so that words are scanned from right to left instead of from left to right."
      },
      "date": 1695024659821
    },
    {
      "type": "edit",
      "id": "072e0ef5d7041c04",
      "item": {
        "type": "paragraph",
        "id": "072e0ef5d7041c04",
        "text": "If we consider the [[KWIC Indexing]] application of Fig. 15 instead of the 31 commonest English words, the trie loses its advantage because of the nature of the data. For example, a trie requires 12 iterations to distinguish between COMPUTATION and COMPUTATIONS. In this case it would be better to build the trie so that words are scanned from right to left instead of from left to right. (TAOCP, v. 3, p. 494)"
      },
      "date": 1695024694960
    },
    {
      "type": "edit",
      "id": "072e0ef5d7041c04",
      "item": {
        "type": "paragraph",
        "id": "072e0ef5d7041c04",
        "text": "If we consider the [[KWIC Indexing]] application of Fig. 15 instead of the 31 commonest English words, the [[Trie]] loses its advantage because of the nature of the data. For example, a trie requires 12 iterations to distinguish between COMPUTATION and COMPUTATIONS. In this case it would be better to build the trie so that words are scanned from right to left instead of from left to right. (TAOCP, v. 3, p. 494)"
      },
      "date": 1695024741442
    },
    {
      "type": "edit",
      "id": "f60f58d21e281fff",
      "item": {
        "type": "paragraph",
        "id": "f60f58d21e281fff",
        "text": "Notice that the statements are tracked in reverse as we [[Loop]], and we reorder them only once we are Done. This is a very common pattern with loop! [https://package.elm-lang.org/packages/elm/parser/latest/Parser#loop page]"
      },
      "date": 1695024780201
    }
  ]
}