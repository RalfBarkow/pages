{
  "title": "Create the Dictionary Class With JavaScript",
  "story": [
    {
      "type": "markdown",
      "id": "cb0bbf934388f2d5",
      "text": "[[Dictionary]] – a [[Container]] of values that are externally named; an [[Object]] from the [[Outside]] and a [[Process]] from the [[Inside]]  –\n * should remove an association by key\n * should retrieve all keys\n * should retrieve undefined for non-existent key\n * should check if a key exists\n * should associate a key with a value\n * should retrieve all associations\n * should retrieve all values"
    },
    {
      "type": "paragraph",
      "id": "3907b6cd7b1dc17b",
      "text": "Click SpecRunner.html and see usage example below."
    },
    {
      "type": "assets",
      "id": "989a640a2bf3b349",
      "text": "pages/create-the-dictionary-class-with-javascript"
    },
    {
      "type": "markdown",
      "id": "bdd06c044fd69fb4",
      "text": "# Usage Example"
    },
    {
      "type": "code",
      "id": "f7bf66cb0b70e0b4",
      "text": "// Import the Dictionary class\nimport Dictionary from 'https://wiki.ralfbarkow.ch/assets/pages/create-the-dictionary-class-with-javascript/dictionary.js';\n\n// Create a new instance of Dictionary\nconst dict = new Dictionary();\n\n// Associate keys with values\ndict.associate('name', 'John');\ndict.associate('age', 30);\ndict.associate('isStudent', false);\n\n// Retrieve values\nconsole.log(dict.getValue('name')); // Output: John\nconsole.log(dict.getValue('age')); // Output: 30\n\n// Check if a key exists\nconsole.log(dict.containsKey('name')); // Output: true\nconsole.log(dict.containsKey('occupation')); // Output: false\n\n// Remove an association\ndict.remove('isStudent');\nconsole.log(dict.getValue('isStudent')); // Output: undefined\n\n// Retrieve keys, values, and associations\nconsole.log(dict.keys()); // Output: [\"name\", \"age\"]\nconsole.log(dict.values()); // Output: [\"John\", 30]\nconsole.log(dict.associations()); // Output: [[\"name\", \"John\"], [\"age\", 30]]\n"
    },
    {
      "type": "markdown",
      "id": "00f76ff348892888",
      "text": "# Application Frame"
    },
    {
      "type": "frame",
      "id": "ddb9f8e3172ed2a3",
      "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/esm.html\nHEIGHT 111\n"
    },
    {
      "type": "paragraph",
      "id": "0983cb3c531c6365",
      "text": "Note: We redirect console.log messages into the <pre> element within the render function of esm.html in the application frame above."
    },
    {
      "type": "paragraph",
      "id": "83dd784ccb0ad19b",
      "text": "See [[Console]]"
    },
    {
      "type": "paragraph",
      "id": "b6bd1b8fbeec35ec",
      "text": "Note: We are using 2 runners here. The [[Jasmine]] test runner and our wiki ESM javascript snippet runner (see [[ESM Snippet Template]])."
    },
    {
      "type": "paragraph",
      "id": "90f8de5db2bb2d6d",
      "text": "See [[Runner]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Create the Dictionary Class With JavaScript",
        "story": []
      },
      "date": 1712942690921
    },
    {
      "item": {
        "type": "factory",
        "id": "989a640a2bf3b349"
      },
      "id": "989a640a2bf3b349",
      "type": "add",
      "date": 1712942697147
    },
    {
      "type": "edit",
      "id": "989a640a2bf3b349",
      "item": {
        "type": "assets",
        "id": "989a640a2bf3b349",
        "text": "pages/create-the-dictionary-class-with-javascript"
      },
      "date": 1712942715526
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1712942991414
    },
    {
      "item": {
        "type": "markdown",
        "id": "cb0bbf934388f2d5",
        "text": "    Dictionary\n        should remove an association by key\n        should retrieve all keys\n        should retrieve undefined for non-existent key\n        should check if a key exists\n        should associate a key with a value\n        should retrieve all associations\n        should retrieve all values"
      },
      "id": "cb0bbf934388f2d5",
      "type": "add",
      "after": "989a640a2bf3b349",
      "date": 1712943111227
    },
    {
      "id": "cb0bbf934388f2d5",
      "type": "move",
      "order": [
        "cb0bbf934388f2d5",
        "989a640a2bf3b349"
      ],
      "date": 1712943113184
    },
    {
      "type": "edit",
      "id": "cb0bbf934388f2d5",
      "item": {
        "type": "markdown",
        "id": "cb0bbf934388f2d5",
        "text": "    Dictionary\n        should remove an association by key\n        should retrieve all keys\n        should retrieve undefined for non-existent key\n        should check if a key exists\n        should associate a key with a value\n        should retrieve all associations\n        should retrieve all values"
      },
      "date": 1712943116933
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ac73f5f395f82f8e",
        "text": ""
      },
      "id": "ac73f5f395f82f8e",
      "type": "add",
      "after": "989a640a2bf3b349",
      "date": 1712943411209
    },
    {
      "item": {
        "type": "frame",
        "id": "ddb9f8e3172ed2a3",
        "text": "//localhost:3000/assets/pages/snippet-template/esm.html\nHEIGHT 111\n"
      },
      "id": "ddb9f8e3172ed2a3",
      "type": "add",
      "after": "989a640a2bf3b349",
      "date": 1712943414526
    },
    {
      "type": "remove",
      "id": "ac73f5f395f82f8e",
      "date": 1712943413424
    },
    {
      "type": "edit",
      "id": "ddb9f8e3172ed2a3",
      "item": {
        "type": "frame",
        "id": "ddb9f8e3172ed2a3",
        "text": "//localhost:3000/assets/pages/snippet-template/esm.html\nHEIGHT 111\n"
      },
      "date": 1712943429281
    },
    {
      "item": {
        "type": "code",
        "id": "f7bf66cb0b70e0b4",
        "text": "// Import the Dictionary class\nimport Dictionary from './dictionary.js';\n\n// Create a new instance of Dictionary\nconst dict = new Dictionary();\n\n// Associate keys with values\ndict.associate('name', 'John');\ndict.associate('age', 30);\ndict.associate('isStudent', false);\n\n// Retrieve values\nconsole.log(dict.getValue('name')); // Output: John\nconsole.log(dict.getValue('age')); // Output: 30\n\n// Check if a key exists\nconsole.log(dict.containsKey('name')); // Output: true\nconsole.log(dict.containsKey('occupation')); // Output: false\n\n// Remove an association\ndict.remove('isStudent');\nconsole.log(dict.getValue('isStudent')); // Output: undefined\n\n// Retrieve keys, values, and associations\nconsole.log(dict.keys()); // Output: [\"name\", \"age\"]\nconsole.log(dict.values()); // Output: [\"John\", 30]\nconsole.log(dict.associations()); // Output: [[\"name\", \"John\"], [\"age\", 30]]\n"
      },
      "id": "f7bf66cb0b70e0b4",
      "type": "add",
      "after": "ddb9f8e3172ed2a3",
      "date": 1712943440022
    },
    {
      "type": "edit",
      "id": "f7bf66cb0b70e0b4",
      "item": {
        "type": "code",
        "id": "f7bf66cb0b70e0b4",
        "text": "// Import the Dictionary class\nimport Dictionary from './dictionary.js';\n\n// Create a new instance of Dictionary\nconst dict = new Dictionary();\n\n// Associate keys with values\ndict.associate('name', 'John');\ndict.associate('age', 30);\ndict.associate('isStudent', false);\n\n// Retrieve values\nconsole.log(dict.getValue('name')); // Output: John\nconsole.log(dict.getValue('age')); // Output: 30\n\n// Check if a key exists\nconsole.log(dict.containsKey('name')); // Output: true\nconsole.log(dict.containsKey('occupation')); // Output: false\n\n// Remove an association\ndict.remove('isStudent');\nconsole.log(dict.getValue('isStudent')); // Output: undefined\n\n// Retrieve keys, values, and associations\nconsole.log(dict.keys()); // Output: [\"name\", \"age\"]\nconsole.log(dict.values()); // Output: [\"John\", 30]\nconsole.log(dict.associations()); // Output: [[\"name\", \"John\"], [\"age\", 30]]\n"
      },
      "date": 1712943442051
    },
    {
      "id": "f7bf66cb0b70e0b4",
      "type": "move",
      "order": [
        "cb0bbf934388f2d5",
        "989a640a2bf3b349",
        "f7bf66cb0b70e0b4",
        "ddb9f8e3172ed2a3"
      ],
      "date": 1712943445692,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1712943449407
    },
    {
      "type": "edit",
      "id": "f7bf66cb0b70e0b4",
      "item": {
        "type": "code",
        "id": "f7bf66cb0b70e0b4",
        "text": "// Import the Dictionary class\nimport Dictionary from 'http://localhost:3000/assets/pages/create-the-dictionary-class-with-javascript/dictionary.js';\n\n// Create a new instance of Dictionary\nconst dict = new Dictionary();\n\n// Associate keys with values\ndict.associate('name', 'John');\ndict.associate('age', 30);\ndict.associate('isStudent', false);\n\n// Retrieve values\nconsole.log(dict.getValue('name')); // Output: John\nconsole.log(dict.getValue('age')); // Output: 30\n\n// Check if a key exists\nconsole.log(dict.containsKey('name')); // Output: true\nconsole.log(dict.containsKey('occupation')); // Output: false\n\n// Remove an association\ndict.remove('isStudent');\nconsole.log(dict.getValue('isStudent')); // Output: undefined\n\n// Retrieve keys, values, and associations\nconsole.log(dict.keys()); // Output: [\"name\", \"age\"]\nconsole.log(dict.values()); // Output: [\"John\", 30]\nconsole.log(dict.associations()); // Output: [[\"name\", \"John\"], [\"age\", 30]]\n"
      },
      "date": 1712943472681
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1712953839455
    },
    {
      "type": "edit",
      "id": "ddb9f8e3172ed2a3",
      "item": {
        "type": "frame",
        "id": "ddb9f8e3172ed2a3",
        "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/esm.html\nHEIGHT 111\n"
      },
      "date": 1712953891866
    },
    {
      "item": {
        "type": "factory",
        "id": "83dd784ccb0ad19b"
      },
      "id": "83dd784ccb0ad19b",
      "type": "add",
      "after": "ddb9f8e3172ed2a3",
      "date": 1712954289868
    },
    {
      "type": "edit",
      "id": "83dd784ccb0ad19b",
      "item": {
        "type": "paragraph",
        "id": "83dd784ccb0ad19b",
        "text": "See [[Console]]"
      },
      "date": 1712954319526
    },
    {
      "type": "edit",
      "id": "f7bf66cb0b70e0b4",
      "item": {
        "type": "code",
        "id": "f7bf66cb0b70e0b4",
        "text": "// Import the Dictionary class\nimport Dictionary from 'https://wiki.ralfbarkow.ch/assets/pages/create-the-dictionary-class-with-javascript/dictionary.js';\n\n// Create a new instance of Dictionary\nconst dict = new Dictionary();\n\n// Associate keys with values\ndict.associate('name', 'John');\ndict.associate('age', 30);\ndict.associate('isStudent', false);\n\n// Retrieve values\nconsole.log(dict.getValue('name')); // Output: John\nconsole.log(dict.getValue('age')); // Output: 30\n\n// Check if a key exists\nconsole.log(dict.containsKey('name')); // Output: true\nconsole.log(dict.containsKey('occupation')); // Output: false\n\n// Remove an association\ndict.remove('isStudent');\nconsole.log(dict.getValue('isStudent')); // Output: undefined\n\n// Retrieve keys, values, and associations\nconsole.log(dict.keys()); // Output: [\"name\", \"age\"]\nconsole.log(dict.values()); // Output: [\"John\", 30]\nconsole.log(dict.associations()); // Output: [[\"name\", \"John\"], [\"age\", 30]]\n"
      },
      "date": 1712956408622
    },
    {
      "id": "0983cb3c531c6365",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "0983cb3c531c6365",
        "text": "Note: We redirect console.log messages into the <pre> element within the render function of esm.html."
      },
      "after": "83dd784ccb0ad19b",
      "attribution": {
        "page": "scratch"
      },
      "date": 1713004605490
    },
    {
      "id": "00f76ff348892888",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "00f76ff348892888",
        "text": "# Application Frame"
      },
      "after": "989a640a2bf3b349",
      "attribution": {
        "page": "scratch"
      },
      "date": 1713004630918
    },
    {
      "id": "00f76ff348892888",
      "type": "move",
      "order": [
        "cb0bbf934388f2d5",
        "989a640a2bf3b349",
        "f7bf66cb0b70e0b4",
        "00f76ff348892888",
        "ddb9f8e3172ed2a3",
        "83dd784ccb0ad19b",
        "0983cb3c531c6365"
      ],
      "date": 1713005008575
    },
    {
      "id": "bdd06c044fd69fb4",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "bdd06c044fd69fb4",
        "text": "# Usage Example"
      },
      "after": "989a640a2bf3b349",
      "attribution": {
        "page": "scratch"
      },
      "date": 1713005032436
    },
    {
      "type": "edit",
      "id": "cb0bbf934388f2d5",
      "item": {
        "type": "markdown",
        "id": "cb0bbf934388f2d5",
        "text": "[[Dictionary]]\n        should remove an association by key\n        should retrieve all keys\n        should retrieve undefined for non-existent key\n        should check if a key exists\n        should associate a key with a value\n        should retrieve all associations\n        should retrieve all values"
      },
      "date": 1713009767718
    },
    {
      "type": "edit",
      "id": "cb0bbf934388f2d5",
      "item": {
        "type": "markdown",
        "id": "cb0bbf934388f2d5",
        "text": "[[Dictionary]] – a [[Container]] of values that are externally named –\n        should remove an association by key\n        should retrieve all keys\n        should retrieve undefined for non-existent key\n        should check if a key exists\n        should associate a key with a value\n        should retrieve all associations\n        should retrieve all values"
      },
      "date": 1713010286362
    },
    {
      "type": "edit",
      "id": "cb0bbf934388f2d5",
      "item": {
        "type": "markdown",
        "id": "cb0bbf934388f2d5",
        "text": "[[Dictionary]] – a [[Container]] of values that are externally named;  –\n        should remove an association by key\n        should retrieve all keys\n        should retrieve undefined for non-existent key\n        should check if a key exists\n        should associate a key with a value\n        should retrieve all associations\n        should retrieve all values"
      },
      "date": 1713010374546
    },
    {
      "type": "edit",
      "id": "cb0bbf934388f2d5",
      "item": {
        "type": "markdown",
        "id": "cb0bbf934388f2d5",
        "text": "[[Dictionary]] – a [[Container]] of values that are externally named; an [[Object]] from the [[Outside]] and a [[Process]] from the [[Inside]]  –\n        should remove an association by key\n        should retrieve all keys\n        should retrieve undefined for non-existent key\n        should check if a key exists\n        should associate a key with a value\n        should retrieve all associations\n        should retrieve all values"
      },
      "date": 1713010384719
    },
    {
      "id": "3907b6cd7b1dc17b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3907b6cd7b1dc17b",
        "text": "Click SpecRunner.html and see usage example below."
      },
      "after": "cb0bbf934388f2d5",
      "attribution": {
        "page": "scratch"
      },
      "date": 1713010532552
    },
    {
      "id": "0983cb3c531c6365",
      "type": "move",
      "order": [
        "cb0bbf934388f2d5",
        "3907b6cd7b1dc17b",
        "989a640a2bf3b349",
        "bdd06c044fd69fb4",
        "f7bf66cb0b70e0b4",
        "00f76ff348892888",
        "ddb9f8e3172ed2a3",
        "0983cb3c531c6365",
        "83dd784ccb0ad19b"
      ],
      "date": 1713011166443
    },
    {
      "type": "fork",
      "date": 1713011234396,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1713011289822
    },
    {
      "type": "edit",
      "id": "0983cb3c531c6365",
      "item": {
        "type": "paragraph",
        "id": "0983cb3c531c6365",
        "text": "Note: We redirect console.log messages into the <pre> element within the render function of esm.html in the apllication frame above."
      },
      "date": 1713013465440
    },
    {
      "type": "edit",
      "id": "0983cb3c531c6365",
      "item": {
        "type": "paragraph",
        "id": "0983cb3c531c6365",
        "text": "Note: We redirect console.log messages into the <pre> element within the render function of esm.html in the application frame above."
      },
      "date": 1713013472892
    },
    {
      "item": {
        "type": "factory",
        "id": "b6bd1b8fbeec35ec"
      },
      "id": "b6bd1b8fbeec35ec",
      "type": "add",
      "after": "83dd784ccb0ad19b",
      "date": 1713013511733
    },
    {
      "type": "edit",
      "id": "b6bd1b8fbeec35ec",
      "item": {
        "type": "paragraph",
        "id": "b6bd1b8fbeec35ec",
        "text": "Note: We are using 2 runners here. The Jasmine runner and our wiki ESM javascript snippet runner."
      },
      "date": 1713013547226
    },
    {
      "type": "add",
      "id": "90f8de5db2bb2d6d",
      "item": {
        "type": "paragraph",
        "id": "90f8de5db2bb2d6d",
        "text": "See [[Runner]]"
      },
      "after": "b6bd1b8fbeec35ec",
      "date": 1713013577004
    },
    {
      "type": "edit",
      "id": "cb0bbf934388f2d5",
      "item": {
        "type": "markdown",
        "id": "cb0bbf934388f2d5",
        "text": "[[Dictionary]] – a [[Container]] of values that are externally named; an [[Object]] from the [[Outside]] and a [[Process]] from the [[Inside]]  –\n * should remove an association by key\n * should retrieve all keys\n * should retrieve undefined for non-existent key\n * should check if a key exists\n * should associate a key with a value\n * should retrieve all associations\n * should retrieve all values"
      },
      "date": 1713013668318
    },
    {
      "type": "edit",
      "id": "b6bd1b8fbeec35ec",
      "item": {
        "type": "paragraph",
        "id": "b6bd1b8fbeec35ec",
        "text": "Note: We are using 2 runners here. The [[Jasmine]] runner and our wiki ESM javascript snippet runner."
      },
      "date": 1713013777443
    },
    {
      "type": "edit",
      "id": "b6bd1b8fbeec35ec",
      "item": {
        "type": "paragraph",
        "id": "b6bd1b8fbeec35ec",
        "text": "Note: We are using 2 runners here. The [[Jasmine]] runner and our wiki ESM javascript snippet runner (see [[ESM Snippet Template]]."
      },
      "date": 1713013824588
    },
    {
      "type": "edit",
      "id": "b6bd1b8fbeec35ec",
      "item": {
        "type": "paragraph",
        "id": "b6bd1b8fbeec35ec",
        "text": "Note: We are using 2 runners here. The [[Jasmine]] runner and our wiki ESM javascript snippet runner (see [[ESM Snippet Template]])."
      },
      "date": 1713013828966
    },
    {
      "type": "edit",
      "id": "b6bd1b8fbeec35ec",
      "item": {
        "type": "paragraph",
        "id": "b6bd1b8fbeec35ec",
        "text": "Note: We are using 2 runners here. The [[Jasmine]] test runner and our wiki ESM javascript snippet runner (see [[ESM Snippet Template]])."
      },
      "date": 1713013910516
    }
  ]
}