{
  "title": "Create a Ghost Page",
  "story": [
    {
      "type": "paragraph",
      "id": "ba07b9b71c48e77b",
      "text": "This page picks up a section of the same title on the [[About Frame Integrations]] page:"
    },
    {
      "type": "code",
      "id": "d5c957014e3db5ea",
      "text": "document.querySelector(\"button\")\n  .addEventListener(\"click\", event => {\n    window.parent.postMessage({\n      action:\"showResult\",\n      page: {\n        title: \"Hello, World!\", story: [\n        {\n          type: \"paragraph\",\n          text: \"Greetings from frame content!\",\n          id: Math.abs(Math.random()*1e20|0)\n                .toString(16)\n        }\n      ]},\n      keepLineup: event.shiftKey\n    }, \"*\");\n  });"
    },
    {
      "type": "paragraph",
      "id": "ead6fea8beaf403a",
      "text": "We extend the code on the [[Table Lookup and Dispatch]] page (see function ghost) to include code that creates a [[Ghost Page]] ."
    },
    {
      "type": "pagefold",
      "id": "b04e5eac3a001b1e",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "b33e97a6d7ff228f",
      "site": "ward.dojo.fed.wiki",
      "slug": "generate-a-rectangular-grid",
      "title": "Generate a Rectangular Grid",
      "text": "[[kohonen-stars]] [https://github.com/seracio/kohonen-stars github] is an example for our library kohonen [https://github.com/seracio/kohonen github], a basic implementation of [[SOM]] algorithm in JavaScript."
    },
    {
      "type": "paragraph",
      "id": "874a148bb1d3fdc5",
      "text": "grid.html(open): "
    },
    {
      "type": "code",
      "id": "aec315d56c9e2a8c",
      "text": "// http://code.fed.wiki/frame-integration-promises.html\nfunction open(page, keepLineup=false, forks=[]) {\n      const asCopy = obj => JSON.parse(JSON.stringify(obj))\n      let date = Date.now()\n      for (let item of page.story) item.id ||= (Math.random()*10**20).toFixed(0)\n      page.journal ||= [{type:'create', date, item:asCopy(page)}, ...forks.map(site => ({type:'fork',date,site}))]\n      let message = {action: \"showResult\", page, keepLineup}\n      window.parent.postMessage(message, \"*\")\n    }"
    },
    {
      "type": "paragraph",
      "id": "f65ce367f3410a37",
      "text": "called by"
    },
    {
      "type": "code",
      "id": "b124d78d9f06423d",
      "text": "function doopen(event) {\n        const info = event.target.getAttribute('info')\n        const color = event.target.getAttribute('fill')\n        if(!info || !color) return\n        console.log({info,color})\n        const title = `${color?.toUpperCase()} Item Clicked`\n        const story = [\n            {type:'paragraph',text:`Click arrived at ${new Date().toLocaleTimeString()}`},\n            {type:'code',text:`pos: [${info}]`}\n        ]\n        open({title,story},event.shiftKey)\n   }"
    },
    {
      "type": "reference",
      "id": "96bf85ed379a5c19",
      "site": "wiki.ralfbarkow.ch",
      "slug": "frame-integration",
      "title": "Frame Integration",
      "text": "We wrap the Frame plugin's integrations with a promise-based interface and distribute them as an [[ES6 module]] along with a couple of helpers we've found useful."
    },
    {
      "type": "reference",
      "id": "5465f415c16ea484",
      "site": "glossary.asia.wiki.org",
      "slug": "ghost",
      "title": "Ghost",
      "text": "A wiki page is rendered with a translucent background when that page exists only in the browser as a ghost of a page that has been or will soon be."
    },
    {
      "type": "reference",
      "id": "c9e5653a0b2f50df",
      "site": "ward.asia.wiki.org",
      "slug": "gray-ghost",
      "title": "Gray Ghost",
      "text": "A page constructed for the browser but not yet stored anywhere else is shown as a translucent page with no border."
    },
    {
      "type": "paragraph",
      "id": "96b93836181f10b0",
      "text": "â‡’ [[Table Lookup and Dispatch]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Create a Ghost Page",
        "story": []
      },
      "date": 1679842083388
    },
    {
      "item": {
        "type": "factory",
        "id": "ba07b9b71c48e77b"
      },
      "id": "ba07b9b71c48e77b",
      "type": "add",
      "date": 1679842184125
    },
    {
      "type": "edit",
      "id": "ba07b9b71c48e77b",
      "item": {
        "type": "paragraph",
        "id": "ba07b9b71c48e77b",
        "text": "This page links to the [[About Frame Integrations]] page."
      },
      "date": 1679842199136
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1679844582879
    },
    {
      "item": {
        "type": "factory",
        "id": "bca8a7eedb1ac9c3"
      },
      "id": "bca8a7eedb1ac9c3",
      "type": "add",
      "after": "ba07b9b71c48e77b",
      "date": 1679844700462
    },
    {
      "type": "remove",
      "id": "bca8a7eedb1ac9c3",
      "date": 1679844701640
    },
    {
      "item": {
        "type": "factory",
        "id": "ead6fea8beaf403a"
      },
      "id": "ead6fea8beaf403a",
      "type": "add",
      "after": "ba07b9b71c48e77b",
      "date": 1679844703474
    },
    {
      "type": "edit",
      "id": "ead6fea8beaf403a",
      "item": {
        "type": "paragraph",
        "id": "ead6fea8beaf403a",
        "text": "We extend the code on the [[Table Lookup and Dispatch]] page to include code that creates a ghost page."
      },
      "date": 1679844711357
    },
    {
      "type": "edit",
      "id": "ead6fea8beaf403a",
      "item": {
        "type": "paragraph",
        "id": "ead6fea8beaf403a",
        "text": "We extend the code on the [[Table Lookup and Dispatch]] page to include code that creates a [[Ghost Page]]."
      },
      "date": 1679845059525
    },
    {
      "item": {
        "type": "factory",
        "id": "b04e5eac3a001b1e"
      },
      "id": "b04e5eac3a001b1e",
      "type": "add",
      "after": "ead6fea8beaf403a",
      "date": 1679845067971
    },
    {
      "type": "edit",
      "id": "b04e5eac3a001b1e",
      "item": {
        "type": "pagefold",
        "id": "b04e5eac3a001b1e",
        "text": "~"
      },
      "date": 1679845071265
    },
    {
      "item": {
        "type": "factory",
        "id": "47a563c30c394c5d"
      },
      "id": "47a563c30c394c5d",
      "type": "add",
      "after": "b04e5eac3a001b1e",
      "date": 1679845073673
    },
    {
      "type": "edit",
      "id": "47a563c30c394c5d",
      "item": {
        "type": "reference",
        "id": "47a563c30c394c5d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "ghost",
        "title": "Ghost",
        "text": "A wiki page is rendered with a translucent background when that page exists only in the browser as a ghost of a page that has been or will soon be."
      },
      "date": 1679845076310
    },
    {
      "item": {
        "type": "factory",
        "id": "c9e5653a0b2f50df"
      },
      "id": "c9e5653a0b2f50df",
      "type": "add",
      "after": "47a563c30c394c5d",
      "date": 1679845109268
    },
    {
      "type": "edit",
      "id": "c9e5653a0b2f50df",
      "item": {
        "type": "reference",
        "id": "c9e5653a0b2f50df",
        "site": "ward.asia.wiki.org",
        "slug": "gray-ghost",
        "title": "Gray Ghost",
        "text": "A page constructed for the browser but not yet stored anywhere else is shown as a translucent page with no border."
      },
      "date": 1679845112190
    },
    {
      "item": {
        "type": "factory",
        "id": "5465f415c16ea484"
      },
      "id": "5465f415c16ea484",
      "type": "add",
      "after": "c9e5653a0b2f50df",
      "date": 1679845124205
    },
    {
      "type": "edit",
      "id": "5465f415c16ea484",
      "item": {
        "type": "reference",
        "id": "5465f415c16ea484",
        "site": "glossary.asia.wiki.org",
        "slug": "ghost",
        "title": "Ghost",
        "text": "A wiki page is rendered with a translucent background when that page exists only in the browser as a ghost of a page that has been or will soon be."
      },
      "date": 1679845126899
    },
    {
      "id": "5465f415c16ea484",
      "type": "move",
      "order": [
        "ba07b9b71c48e77b",
        "ead6fea8beaf403a",
        "b04e5eac3a001b1e",
        "47a563c30c394c5d",
        "5465f415c16ea484",
        "c9e5653a0b2f50df"
      ],
      "date": 1679845128467
    },
    {
      "type": "remove",
      "id": "47a563c30c394c5d",
      "date": 1679845132000
    },
    {
      "item": {
        "type": "factory",
        "id": "b33e97a6d7ff228f"
      },
      "id": "b33e97a6d7ff228f",
      "type": "add",
      "after": "c9e5653a0b2f50df",
      "date": 1679845208910
    },
    {
      "type": "edit",
      "id": "b33e97a6d7ff228f",
      "item": {
        "type": "reference",
        "id": "b33e97a6d7ff228f",
        "site": "ward.dojo.fed.wiki",
        "slug": "generate-a-rectangular-grid",
        "title": "Generate a Rectangular Grid",
        "text": "[[kohonen-stars]] [https://github.com/seracio/kohonen-stars github] is an example for our library kohonen [https://github.com/seracio/kohonen github], a basic implementation of [[SOM]] algorithm in JavaScript."
      },
      "date": 1679845211574
    },
    {
      "item": {
        "type": "factory",
        "id": "aec315d56c9e2a8c"
      },
      "id": "aec315d56c9e2a8c",
      "type": "add",
      "after": "b33e97a6d7ff228f",
      "date": 1679845248796
    },
    {
      "type": "edit",
      "id": "aec315d56c9e2a8c",
      "item": {
        "type": "code",
        "id": "aec315d56c9e2a8c",
        "text": "   // http://code.fed.wiki/frame-integration-promises.html\n   function open(page, keepLineup=false, forks=[]) {\n      const asCopy = obj => JSON.parse(JSON.stringify(obj))\n      let date = Date.now()\n      for (let item of page.story) item.id ||= (Math.random()*10**20).toFixed(0)\n      page.journal ||= [{type:'create', date, item:asCopy(page)}, ...forks.map(site => ({type:'fork',date,site}))]\n      let message = {action: \"showResult\", page, keepLineup}\n      window.parent.postMessage(message, \"*\")\n    }"
      },
      "date": 1679845251438
    },
    {
      "type": "add",
      "id": "874a148bb1d3fdc5",
      "item": {
        "type": "paragraph",
        "id": "874a148bb1d3fdc5",
        "text": "grid.html"
      },
      "after": "ead6fea8beaf403a",
      "date": 1679845267666
    },
    {
      "id": "874a148bb1d3fdc5",
      "type": "move",
      "order": [
        "ba07b9b71c48e77b",
        "ead6fea8beaf403a",
        "b04e5eac3a001b1e",
        "5465f415c16ea484",
        "c9e5653a0b2f50df",
        "b33e97a6d7ff228f",
        "874a148bb1d3fdc5",
        "aec315d56c9e2a8c"
      ],
      "date": 1679845270712
    },
    {
      "type": "edit",
      "id": "874a148bb1d3fdc5",
      "item": {
        "type": "paragraph",
        "id": "874a148bb1d3fdc5",
        "text": "grid.html: "
      },
      "date": 1679845273580
    },
    {
      "type": "edit",
      "id": "874a148bb1d3fdc5",
      "item": {
        "type": "paragraph",
        "id": "874a148bb1d3fdc5",
        "text": "grid.html(open): "
      },
      "date": 1679845280239
    },
    {
      "item": {
        "type": "factory",
        "id": "f65ce367f3410a37"
      },
      "id": "f65ce367f3410a37",
      "type": "add",
      "after": "aec315d56c9e2a8c",
      "date": 1679845300428
    },
    {
      "type": "edit",
      "id": "f65ce367f3410a37",
      "item": {
        "type": "paragraph",
        "id": "f65ce367f3410a37",
        "text": "called by"
      },
      "date": 1679845304033
    },
    {
      "item": {
        "type": "factory",
        "id": "b124d78d9f06423d"
      },
      "id": "b124d78d9f06423d",
      "type": "add",
      "after": "f65ce367f3410a37",
      "date": 1679845305655
    },
    {
      "type": "edit",
      "id": "b124d78d9f06423d",
      "item": {
        "type": "code",
        "id": "b124d78d9f06423d",
        "text": "   // http://code.fed.wiki/frame-integration-promises.html\n   function open(page, keepLineup=false, forks=[]) {\n      const asCopy = obj => JSON.parse(JSON.stringify(obj))\n      let date = Date.now()\n      for (let item of page.story) item.id ||= (Math.random()*10**20).toFixed(0)\n      page.journal ||= [{type:'create', date, item:asCopy(page)}, ...forks.map(site => ({type:'fork',date,site}))]\n      let message = {action: \"showResult\", page, keepLineup}\n      window.parent.postMessage(message, \"*\")\n    }"
      },
      "date": 1679845308340
    },
    {
      "type": "edit",
      "id": "b124d78d9f06423d",
      "item": {
        "type": "code",
        "id": "b124d78d9f06423d",
        "text": "   function doopen(event) {\n        const info = event.target.getAttribute('info')\n        const color = event.target.getAttribute('fill')\n        if(!info || !color) return\n        console.log({info,color})\n        const title = `${color?.toUpperCase()} Item Clicked`\n        const story = [\n            {type:'paragraph',text:`Click arrived at ${new Date().toLocaleTimeString()}`},\n            {type:'code',text:`pos: [${info}]`}\n        ]\n        open({title,story},event.shiftKey)\n   }"
      },
      "date": 1679845320124
    },
    {
      "type": "edit",
      "id": "b124d78d9f06423d",
      "item": {
        "type": "code",
        "id": "b124d78d9f06423d",
        "text": "function doopen(event) {\n        const info = event.target.getAttribute('info')\n        const color = event.target.getAttribute('fill')\n        if(!info || !color) return\n        console.log({info,color})\n        const title = `${color?.toUpperCase()} Item Clicked`\n        const story = [\n            {type:'paragraph',text:`Click arrived at ${new Date().toLocaleTimeString()}`},\n            {type:'code',text:`pos: [${info}]`}\n        ]\n        open({title,story},event.shiftKey)\n   }"
      },
      "date": 1679845330923
    },
    {
      "type": "edit",
      "id": "aec315d56c9e2a8c",
      "item": {
        "type": "code",
        "id": "aec315d56c9e2a8c",
        "text": "// http://code.fed.wiki/frame-integration-promises.html\nfunction open(page, keepLineup=false, forks=[]) {\n      const asCopy = obj => JSON.parse(JSON.stringify(obj))\n      let date = Date.now()\n      for (let item of page.story) item.id ||= (Math.random()*10**20).toFixed(0)\n      page.journal ||= [{type:'create', date, item:asCopy(page)}, ...forks.map(site => ({type:'fork',date,site}))]\n      let message = {action: \"showResult\", page, keepLineup}\n      window.parent.postMessage(message, \"*\")\n    }"
      },
      "date": 1679845337990
    },
    {
      "item": {
        "type": "factory",
        "id": "96b93836181f10b0"
      },
      "id": "96b93836181f10b0",
      "type": "add",
      "after": "b124d78d9f06423d",
      "date": 1679845358012
    },
    {
      "type": "edit",
      "id": "96b93836181f10b0",
      "item": {
        "type": "paragraph",
        "id": "96b93836181f10b0",
        "text": "â‡’ [[[[Table Lookup and Dispatch]]]]"
      },
      "date": 1679845366471
    },
    {
      "type": "edit",
      "id": "96b93836181f10b0",
      "item": {
        "type": "paragraph",
        "id": "96b93836181f10b0",
        "text": "â‡’ [[Table Lookup and Dispatch]]"
      },
      "date": 1679845374285
    },
    {
      "type": "fork",
      "site": "code.dreyeck.ch",
      "date": 1679852836369
    },
    {
      "type": "edit",
      "id": "ba07b9b71c48e77b",
      "item": {
        "type": "paragraph",
        "id": "ba07b9b71c48e77b",
        "text": "This page picks up a section on the [[About Frame Integrations]] page."
      },
      "date": 1679853244348
    },
    {
      "id": "d5c957014e3db5ea",
      "type": "add",
      "item": {
        "type": "code",
        "id": "d5c957014e3db5ea",
        "text": "document.querySelector(\"button\")\n  .addEventListener(\"click\", event => {\n    window.parent.postMessage({\n      action:\"showResult\",\n      page: {\n        title: \"Hello, World!\", story: [\n        {\n          type: \"paragraph\",\n          text: \"Greetings from frame content!\",\n          id: Math.abs(Math.random()*1e20|0)\n                .toString(16)\n        }\n      ]},\n      keepLineup: event.shiftKey\n    }, \"*\");\n  });"
      },
      "after": "ba07b9b71c48e77b",
      "attribution": {
        "page": "About Frame Integrations"
      },
      "date": 1679853256922
    },
    {
      "type": "edit",
      "id": "ba07b9b71c48e77b",
      "item": {
        "type": "paragraph",
        "id": "ba07b9b71c48e77b",
        "text": "This page picks up a section on the [[About Frame Integrations]] page:"
      },
      "date": 1679853288713
    },
    {
      "type": "edit",
      "id": "ead6fea8beaf403a",
      "item": {
        "type": "paragraph",
        "id": "ead6fea8beaf403a",
        "text": "We extend the code on the [[Table Lookup and Dispatch]] page to include code that creates a [[Ghost Page]] (see function ghost)."
      },
      "date": 1679853317847
    },
    {
      "type": "edit",
      "id": "ead6fea8beaf403a",
      "item": {
        "type": "paragraph",
        "id": "ead6fea8beaf403a",
        "text": "We extend the code on the [[Table Lookup and Dispatch]] page (see function ghost) to include code that creates a [[Ghost Page]] ."
      },
      "date": 1679853355502
    },
    {
      "type": "edit",
      "id": "ba07b9b71c48e77b",
      "item": {
        "type": "paragraph",
        "id": "ba07b9b71c48e77b",
        "text": "This page picks up a section of the same title on the [[About Frame Integrations]] page:"
      },
      "date": 1679893636031
    },
    {
      "item": {
        "type": "factory",
        "id": "96bf85ed379a5c19"
      },
      "id": "96bf85ed379a5c19",
      "type": "add",
      "after": "96b93836181f10b0",
      "date": 1679893751069
    },
    {
      "type": "edit",
      "id": "96bf85ed379a5c19",
      "item": {
        "type": "reference",
        "id": "96bf85ed379a5c19",
        "site": "wiki.ralfbarkow.ch",
        "slug": "frame-integration",
        "title": "Frame Integration",
        "text": "We wrap the Frame plugin's integrations with a promise-based interface and distribute them as an [[ES6 module]] along with a couple of helpers we've found useful."
      },
      "date": 1679893758704
    },
    {
      "id": "96bf85ed379a5c19",
      "type": "move",
      "order": [
        "ba07b9b71c48e77b",
        "d5c957014e3db5ea",
        "ead6fea8beaf403a",
        "b04e5eac3a001b1e",
        "5465f415c16ea484",
        "c9e5653a0b2f50df",
        "96bf85ed379a5c19",
        "b33e97a6d7ff228f",
        "874a148bb1d3fdc5",
        "aec315d56c9e2a8c",
        "f65ce367f3410a37",
        "b124d78d9f06423d",
        "96b93836181f10b0"
      ],
      "date": 1679893770444
    },
    {
      "id": "96bf85ed379a5c19",
      "type": "move",
      "order": [
        "ba07b9b71c48e77b",
        "d5c957014e3db5ea",
        "ead6fea8beaf403a",
        "b04e5eac3a001b1e",
        "5465f415c16ea484",
        "c9e5653a0b2f50df",
        "b33e97a6d7ff228f",
        "874a148bb1d3fdc5",
        "aec315d56c9e2a8c",
        "f65ce367f3410a37",
        "b124d78d9f06423d",
        "96bf85ed379a5c19",
        "96b93836181f10b0"
      ],
      "date": 1679893808185
    },
    {
      "id": "5465f415c16ea484",
      "type": "move",
      "order": [
        "ba07b9b71c48e77b",
        "d5c957014e3db5ea",
        "ead6fea8beaf403a",
        "b04e5eac3a001b1e",
        "c9e5653a0b2f50df",
        "b33e97a6d7ff228f",
        "874a148bb1d3fdc5",
        "aec315d56c9e2a8c",
        "f65ce367f3410a37",
        "b124d78d9f06423d",
        "96bf85ed379a5c19",
        "5465f415c16ea484",
        "96b93836181f10b0"
      ],
      "date": 1679893816499
    },
    {
      "id": "c9e5653a0b2f50df",
      "type": "move",
      "order": [
        "ba07b9b71c48e77b",
        "d5c957014e3db5ea",
        "ead6fea8beaf403a",
        "b04e5eac3a001b1e",
        "b33e97a6d7ff228f",
        "874a148bb1d3fdc5",
        "aec315d56c9e2a8c",
        "f65ce367f3410a37",
        "b124d78d9f06423d",
        "96bf85ed379a5c19",
        "5465f415c16ea484",
        "c9e5653a0b2f50df",
        "96b93836181f10b0"
      ],
      "date": 1679893822749
    }
  ]
}