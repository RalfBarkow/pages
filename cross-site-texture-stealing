{
  "title": "Cross-Site Texture Stealing",
  "story": [
    {
      "type": "paragraph",
      "id": "4e37aa7c2a6d6c84",
      "text": "An important security requirement for OOPIFs is that even though cross-site frame contents are being composited with the content in the top-level frame, the top-level renderer process must not be able to read the pixels that are drawn within the frame. [https://www.chromium.org/developers/design-documents/oop-iframes/oop-iframes-rendering/#cross-site-texture-stealing page]"
    },
    {
      "type": "paragraph",
      "id": "33ec2965c717340b",
      "text": "The ability to do this would allow a compromised renderer process access to cross-site content, which is contrary to the goals of the site isolation project.\n\nWe don’t believe this to be a feasible goal without the availability of ubercompositor. It would be very difficult, given the performance constraints of compositing, to require that the top-level renderer process be able to composite using a given texture without being able to write that texture to an accessible memory buffer. In the ubercompositor model, compositing is done by the trusted browser process so this constraint no longer .\n\nAccess to the texture from a parent renderer process will be prevented by the GPU process, where a check will be added to the handler of the glConsumeTextureCHROMIUM command buffer API so that a TextureMailbox can be consumed only by the renderer process that initially created the texture, and by the browser process."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Cross-Site Texture Stealing",
        "story": []
      },
      "date": 1655291049974
    },
    {
      "item": {
        "type": "factory",
        "id": "4e37aa7c2a6d6c84"
      },
      "id": "4e37aa7c2a6d6c84",
      "type": "add",
      "date": 1655291070149
    },
    {
      "type": "edit",
      "id": "4e37aa7c2a6d6c84",
      "item": {
        "type": "paragraph",
        "id": "4e37aa7c2a6d6c84",
        "text": "An important security requirement for OOPIFs is that even though cross-site frame contents are being composited with the content in the top-level frame, the top-level renderer process must not be able to read the pixels that are drawn within the frame. The ability to do this would allow a compromised renderer process access to cross-site content, which is contrary to the goals of the site isolation project.\n\nWe don’t believe this to be a feasible goal without the availability of ubercompositor. It would be very difficult, given the performance constraints of compositing, to require that the top-level renderer process be able to composite using a given texture without being able to write that texture to an accessible memory buffer. In the ubercompositor model, compositing is done by the trusted browser process so this constraint no longer .\n\nAccess to the texture from a parent renderer process will be prevented by the GPU process, where a check will be added to the handler of the glConsumeTextureCHROMIUM command buffer API so that a TextureMailbox can be consumed only by the renderer process that initially created the texture, and by the browser process."
      },
      "date": 1655291071709
    },
    {
      "type": "edit",
      "id": "4e37aa7c2a6d6c84",
      "item": {
        "type": "paragraph",
        "id": "4e37aa7c2a6d6c84",
        "text": "An important security requirement for OOPIFs is that even though cross-site frame contents are being composited with the content in the top-level frame, the top-level renderer process must not be able to read the pixels that are drawn within the frame. "
      },
      "date": 1655291127609
    },
    {
      "type": "add",
      "id": "33ec2965c717340b",
      "item": {
        "type": "paragraph",
        "id": "33ec2965c717340b",
        "text": "The ability to do this would allow a compromised renderer process access to cross-site content, which is contrary to the goals of the site isolation project.\n\nWe don’t believe this to be a feasible goal without the availability of ubercompositor. It would be very difficult, given the performance constraints of compositing, to require that the top-level renderer process be able to composite using a given texture without being able to write that texture to an accessible memory buffer. In the ubercompositor model, compositing is done by the trusted browser process so this constraint no longer .\n\nAccess to the texture from a parent renderer process will be prevented by the GPU process, where a check will be added to the handler of the glConsumeTextureCHROMIUM command buffer API so that a TextureMailbox can be consumed only by the renderer process that initially created the texture, and by the browser process."
      },
      "after": "4e37aa7c2a6d6c84",
      "date": 1655291129957
    },
    {
      "type": "edit",
      "id": "4e37aa7c2a6d6c84",
      "item": {
        "type": "paragraph",
        "id": "4e37aa7c2a6d6c84",
        "text": "An important security requirement for OOPIFs is that even though cross-site frame contents are being composited with the content in the top-level frame, the top-level renderer process must not be able to read the pixels that are drawn within the frame. [https://www.chromium.org/developers/design-documents/oop-iframes/oop-iframes-rendering/ page]"
      },
      "date": 1655291134061
    },
    {
      "type": "edit",
      "id": "4e37aa7c2a6d6c84",
      "item": {
        "type": "paragraph",
        "id": "4e37aa7c2a6d6c84",
        "text": "An important security requirement for OOPIFs is that even though cross-site frame contents are being composited with the content in the top-level frame, the top-level renderer process must not be able to read the pixels that are drawn within the frame. [https://www.chromium.org/developers/design-documents/oop-iframes/oop-iframes-rendering/#cross-site-texture-stealing page]"
      },
      "date": 1655291156465
    }
  ]
}