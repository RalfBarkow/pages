{
  "title": "Grappling",
  "story": [
    {
      "type": "markdown",
      "id": "17ec8736c6226e02",
      "text": "> Ward Cunningham: Let me take two steps back. You want to look at risks – what risks you’re assuming and so forth. As a business you want to know where your money is coming from and where you’re spending it and scenario analysis sort of thing – what could go wrong and what could go wrong probably will go wrong – so you want to remove the possibility of things going wrong. That seems to me to be good business. When it comes to talking about a development organization, I like to take two steps closer. I like to actually sit down with people and program at the limits of our abilities together, this pairs-programming, and you can kind of see into each other’s heads and see learning strategies and test strategies and so forth. **I would ask myself the question – in that hour of programming together, how many minutes were we grappling with problems that we could [[explain]] to the customer?** And our customer would say I’m glad you were [[Grappling]] with those. I’m happy to be paying you to think through that kind of decision. And how many minutes of that hour were spent just dealing with foolish, crazy things that just happen using the computer that if you had thought twice you could have prevented? But you didn’t think twice so you just have this nuisance level and it’s so complicated you can never explain to your customer. It isn’t about the customer’s business, it’s about your business and you’re letting your business get in the way of doing the customer’s work. That’s an intuitive ratio but I think that computers and computer programming is filled with those little nuisance things but if you could beat that back to the point where you do a significant amount of grappling with the customer’s problems every hour, then you’re in good shape. If you can do something for the customer every hour, then you’re moving forward."
    },
    {
      "type": "reference",
      "id": "534971e72828a087",
      "site": "wiki.ralfbarkow.ch",
      "slug": "technical-debt",
      "title": "Technical Debt",
      "text": "Ward proposed an incremental development strategy suitable for commercial software development in a competitive environment and explained it metaphorically as technical debt. This name stuck better than the strategy because condemning debt is much easier than exploiting it."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Grappling",
        "story": []
      },
      "date": 1706626793408
    },
    {
      "id": "17ec8736c6226e02",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "17ec8736c6226e02",
        "text": "Ward Cunningham: Let me take two steps back. You want to look at risks – what risks you’re assuming and so forth. As a business you want to know where your money is coming from and where you’re spending it and scenario analysis sort of thing – what could go wrong and what could go wrong probably will go wrong – so you want to remove the possibility of things going wrong. That seems to me to be good business. When it comes to talking about a development organization, I like to take two steps closer. I like to actually sit down with people and program at the limits of our abilities together, this pairs-programming, and you can kind of see into each other’s heads and see learning strategies and test strategies and so forth. I would ask myself the question – in that hour of programming together, how many minutes were we grappling with problems that we could explain to the customer? And our customer would say I’m glad you were [[Grappling]] with those. I’m happy to be paying you to think through that kind of decision. And how many minutes of that hour were spent just dealing with foolish, crazy things that just happen using the computer that if you had thought twice you could have prevented? But you didn’t think twice so you just have this nuisance level and it’s so complicated you can never explain to your customer. It isn’t about the customer’s business, it’s about your business and you’re letting your business get in the way of doing the customer’s work. That’s an intuitive ratio but I think that computers and computer programming is filled with those little nuisance things but if you could beat that back to the point where you do a significant amount of grappling with the customer’s problems every hour, then you’re in good shape. If you can do something for the customer every hour, then you’re moving forward."
      },
      "attribution": {
        "page": "Technical Debt"
      },
      "date": 1706626797751
    },
    {
      "item": {
        "type": "factory",
        "id": "534971e72828a087"
      },
      "id": "534971e72828a087",
      "type": "add",
      "after": "17ec8736c6226e02",
      "date": 1706626800978
    },
    {
      "type": "edit",
      "id": "534971e72828a087",
      "item": {
        "type": "reference",
        "id": "534971e72828a087",
        "site": "wiki.ralfbarkow.ch",
        "slug": "technical-debt",
        "title": "Technical Debt",
        "text": "I proposed an incremental development strategy suitable for commercial software development in a competitive environment and explained it metaphorically as technical debt. This name stuck better than the strategy because condemning debt is much easier than exploiting it."
      },
      "date": 1706626815330
    },
    {
      "type": "edit",
      "id": "17ec8736c6226e02",
      "item": {
        "type": "markdown",
        "id": "17ec8736c6226e02",
        "text": "> Ward Cunningham: Let me take two steps back. You want to look at risks – what risks you’re assuming and so forth. As a business you want to know where your money is coming from and where you’re spending it and scenario analysis sort of thing – what could go wrong and what could go wrong probably will go wrong – so you want to remove the possibility of things going wrong. That seems to me to be good business. When it comes to talking about a development organization, I like to take two steps closer. I like to actually sit down with people and program at the limits of our abilities together, this pairs-programming, and you can kind of see into each other’s heads and see learning strategies and test strategies and so forth. I would ask myself the question – in that hour of programming together, how many minutes were we grappling with problems that we could explain to the customer? And our customer would say I’m glad you were [[Grappling]] with those. I’m happy to be paying you to think through that kind of decision. And how many minutes of that hour were spent just dealing with foolish, crazy things that just happen using the computer that if you had thought twice you could have prevented? But you didn’t think twice so you just have this nuisance level and it’s so complicated you can never explain to your customer. It isn’t about the customer’s business, it’s about your business and you’re letting your business get in the way of doing the customer’s work. That’s an intuitive ratio but I think that computers and computer programming is filled with those little nuisance things but if you could beat that back to the point where you do a significant amount of grappling with the customer’s problems every hour, then you’re in good shape. If you can do something for the customer every hour, then you’re moving forward."
      },
      "date": 1706626826260
    },
    {
      "type": "edit",
      "id": "534971e72828a087",
      "item": {
        "type": "reference",
        "id": "534971e72828a087",
        "site": "wiki.ralfbarkow.ch",
        "slug": "technical-debt",
        "title": "Technical Debt",
        "text": "Ward proposed an incremental development strategy suitable for commercial software development in a competitive environment and explained it metaphorically as technical debt. This name stuck better than the strategy because condemning debt is much easier than exploiting it."
      },
      "date": 1706626846997
    },
    {
      "type": "edit",
      "id": "17ec8736c6226e02",
      "item": {
        "type": "markdown",
        "id": "17ec8736c6226e02",
        "text": "> Ward Cunningham: Let me take two steps back. You want to look at risks – what risks you’re assuming and so forth. As a business you want to know where your money is coming from and where you’re spending it and scenario analysis sort of thing – what could go wrong and what could go wrong probably will go wrong – so you want to remove the possibility of things going wrong. That seems to me to be good business. When it comes to talking about a development organization, I like to take two steps closer. I like to actually sit down with people and program at the limits of our abilities together, this pairs-programming, and you can kind of see into each other’s heads and see learning strategies and test strategies and so forth. **I would ask myself the question – in that hour of programming together, how many minutes were we grappling with problems that we could explain to the customer?** And our customer would say I’m glad you were [[Grappling]] with those. I’m happy to be paying you to think through that kind of decision. And how many minutes of that hour were spent just dealing with foolish, crazy things that just happen using the computer that if you had thought twice you could have prevented? But you didn’t think twice so you just have this nuisance level and it’s so complicated you can never explain to your customer. It isn’t about the customer’s business, it’s about your business and you’re letting your business get in the way of doing the customer’s work. That’s an intuitive ratio but I think that computers and computer programming is filled with those little nuisance things but if you could beat that back to the point where you do a significant amount of grappling with the customer’s problems every hour, then you’re in good shape. If you can do something for the customer every hour, then you’re moving forward."
      },
      "date": 1706632135509
    },
    {
      "type": "edit",
      "id": "17ec8736c6226e02",
      "item": {
        "type": "markdown",
        "id": "17ec8736c6226e02",
        "text": "> Ward Cunningham: Let me take two steps back. You want to look at risks – what risks you’re assuming and so forth. As a business you want to know where your money is coming from and where you’re spending it and scenario analysis sort of thing – what could go wrong and what could go wrong probably will go wrong – so you want to remove the possibility of things going wrong. That seems to me to be good business. When it comes to talking about a development organization, I like to take two steps closer. I like to actually sit down with people and program at the limits of our abilities together, this pairs-programming, and you can kind of see into each other’s heads and see learning strategies and test strategies and so forth. **I would ask myself the question – in that hour of programming together, how many minutes were we grappling with problems that we could [[explain]] to the customer?** And our customer would say I’m glad you were [[Grappling]] with those. I’m happy to be paying you to think through that kind of decision. And how many minutes of that hour were spent just dealing with foolish, crazy things that just happen using the computer that if you had thought twice you could have prevented? But you didn’t think twice so you just have this nuisance level and it’s so complicated you can never explain to your customer. It isn’t about the customer’s business, it’s about your business and you’re letting your business get in the way of doing the customer’s work. That’s an intuitive ratio but I think that computers and computer programming is filled with those little nuisance things but if you could beat that back to the point where you do a significant amount of grappling with the customer’s problems every hour, then you’re in good shape. If you can do something for the customer every hour, then you’re moving forward."
      },
      "date": 1706632162277
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1706632189080
    }
  ]
}