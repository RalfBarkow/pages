{
  "title": "HistoryIterator",
  "story": [
    {
      "type": "markdown",
      "id": "fcda8f8c968e67ec",
      "text": "A [[HistoryIterator]] holds an [[UndoRedoGroup]] in order to store an history of commands with the possibility of undoing and redoing. The iterator cursor is represented by the index inst var. Index always contains the position of the command that can be currently undone. So, undo decrease index and redo increase index. When a new record is stored, then, index contains the newly added record position.\n\nSee [[HistoryIteratorTest]] for examples.\n\nInstance Variables\n\tindex:\t\t<Integer>\n\tmaxSize:\t\t<Integer>\n\tplugged:\t\t<Boolean>\n\trecorder:\t\t<UndoRedoGroup>\n\nindex\n- the iterator cursor\n\nmaxSize\n- the maximum number of records that can be added in the root group.\n\nplugged\n- if false, then adding of command is not allowed. Useful to prevent bad history recording recurssions (record while undoing or redoing).\n\nrecorder\n- The root of the history tree which records undo/redo commands\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "HistoryIterator",
        "story": []
      },
      "date": 1643458869021
    },
    {
      "item": {
        "type": "factory",
        "id": "fcda8f8c968e67ec"
      },
      "id": "fcda8f8c968e67ec",
      "type": "add",
      "date": 1643458870713
    },
    {
      "type": "edit",
      "id": "fcda8f8c968e67ec",
      "item": {
        "type": "markdown",
        "id": "fcda8f8c968e67ec",
        "text": "A HistoryIterator holds an UndoRedoGroup in order to store an history of commands with the possibility of undoing and redoing. The iterator cursor is represented by the index inst var. Index always contains the position of the command that can be currently undone. So, undo decrease index and redo increase index. When a new record is stored, then, index contains the newly added record position.\nSee HistoryIteratorTest for examples.\n\nInstance Variables\n\tindex:\t\t<Integer>\n\tmaxSize:\t\t<Integer>\n\tplugged:\t\t<Boolean>\n\trecorder:\t\t<UndoRedoGroup>\n\nindex\n\t- the iterator cursor\n\nmaxSize\n\t- the maximum number of records that can be added in the root group.\n\nplugged\n\t- if false, then adding of command is not allowed. Useful to prevent bad history recording recurssions (record while undoing or redoing).\n\nrecorder\n\t- The root of the history tree which records undo/redo commands\n"
      },
      "date": 1643458872817
    },
    {
      "type": "edit",
      "id": "fcda8f8c968e67ec",
      "item": {
        "type": "markdown",
        "id": "fcda8f8c968e67ec",
        "text": "A HistoryIterator holds an UndoRedoGroup in order to store an history of commands with the possibility of undoing and redoing. The iterator cursor is represented by the index inst var. Index always contains the position of the command that can be currently undone. So, undo decrease index and redo increase index. When a new record is stored, then, index contains the newly added record position.\nSee HistoryIteratorTest for examples.\n\nInstance Variables\n\tindex:\t\t<Integer>\n\tmaxSize:\t\t<Integer>\n\tplugged:\t\t<Boolean>\n\trecorder:\t\t<UndoRedoGroup>\n\nindex\n- the iterator cursor\n\nmaxSize\n- the maximum number of records that can be added in the root group.\n\nplugged\n- if false, then adding of command is not allowed. Useful to prevent bad history recording recurssions (record while undoing or redoing).\n\nrecorder\n\t- The root of the history tree which records undo/redo commands\n"
      },
      "date": 1643458890403
    },
    {
      "type": "edit",
      "id": "fcda8f8c968e67ec",
      "item": {
        "type": "markdown",
        "id": "fcda8f8c968e67ec",
        "text": "A HistoryIterator holds an UndoRedoGroup in order to store an history of commands with the possibility of undoing and redoing. The iterator cursor is represented by the index inst var. Index always contains the position of the command that can be currently undone. So, undo decrease index and redo increase index. When a new record is stored, then, index contains the newly added record position.\nSee HistoryIteratorTest for examples.\n\nInstance Variables\n\tindex:\t\t<Integer>\n\tmaxSize:\t\t<Integer>\n\tplugged:\t\t<Boolean>\n\trecorder:\t\t<UndoRedoGroup>\n\nindex\n- the iterator cursor\n\nmaxSize\n- the maximum number of records that can be added in the root group.\n\nplugged\n- if false, then adding of command is not allowed. Useful to prevent bad history recording recurssions (record while undoing or redoing).\n\nrecorder\n- The root of the history tree which records undo/redo commands\n"
      },
      "date": 1643458904757
    },
    {
      "type": "edit",
      "id": "fcda8f8c968e67ec",
      "item": {
        "type": "markdown",
        "id": "fcda8f8c968e67ec",
        "text": "A HistoryIterator holds an UndoRedoGroup in order to store an history of commands with the possibility of undoing and redoing. The iterator cursor is represented by the index inst var. Index always contains the position of the command that can be currently undone. So, undo decrease index and redo increase index. When a new record is stored, then, index contains the newly added record position.\n\nSee [[HistoryIteratorTest]] for examples.\n\nInstance Variables\n\tindex:\t\t<Integer>\n\tmaxSize:\t\t<Integer>\n\tplugged:\t\t<Boolean>\n\trecorder:\t\t<UndoRedoGroup>\n\nindex\n- the iterator cursor\n\nmaxSize\n- the maximum number of records that can be added in the root group.\n\nplugged\n- if false, then adding of command is not allowed. Useful to prevent bad history recording recurssions (record while undoing or redoing).\n\nrecorder\n- The root of the history tree which records undo/redo commands\n"
      },
      "date": 1643458924476
    },
    {
      "type": "edit",
      "id": "fcda8f8c968e67ec",
      "item": {
        "type": "markdown",
        "id": "fcda8f8c968e67ec",
        "text": "A [[HistoryIterator]] holds an [[UndoRedoGroup]] in order to store an history of commands with the possibility of undoing and redoing. The iterator cursor is represented by the index inst var. Index always contains the position of the command that can be currently undone. So, undo decrease index and redo increase index. When a new record is stored, then, index contains the newly added record position.\n\nSee [[HistoryIteratorTest]] for examples.\n\nInstance Variables\n\tindex:\t\t<Integer>\n\tmaxSize:\t\t<Integer>\n\tplugged:\t\t<Boolean>\n\trecorder:\t\t<UndoRedoGroup>\n\nindex\n- the iterator cursor\n\nmaxSize\n- the maximum number of records that can be added in the root group.\n\nplugged\n- if false, then adding of command is not allowed. Useful to prevent bad history recording recurssions (record while undoing or redoing).\n\nrecorder\n- The root of the history tree which records undo/redo commands\n"
      },
      "date": 1643458953460
    }
  ]
}