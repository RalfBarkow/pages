{
  "title": "2021-12-15",
  "story": [
    {
      "type": "paragraph",
      "id": "b7342a7ef4863091",
      "text": "edsu via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1639521028311546zoQfj:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=autonomic.zone matrix]"
    },
    {
      "type": "markdown",
      "id": "609b25323bc0a30d",
      "text": "> just wanted to say it's very cool to see you are doing this work in a DH course. I work in a DH center in the US and there should be more people doing what you are doing!"
    },
    {
      "type": "paragraph",
      "id": "9dd7ca54b549eda4",
      "text": "Thompson via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1639531674315760vrdgc:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=autonomic.zone matrix]"
    },
    {
      "type": "markdown",
      "id": "c059c691a79c48d6",
      "text": "> [[Mike Caulfield]] once remarked that a wiki came alive after about 1,000 pages. For many, that individual journey has been too arduous to take. We sense, however, that with intentional guidance and cultivation, it can collectively come alive much faster, even in a moment. We wonder, then, of the potential once sensed by Teilhard and Vernadsky, something they called the 'noosphere' that created new potential for human sapience."
    },
    {
      "type": "paragraph",
      "id": "e033a1c1bd7303e4",
      "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1639532686316069clsMW:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=autonomic.zone matrix] "
    },
    {
      "type": "markdown",
      "id": "8969980765427613",
      "text": "> http://wiki.c2.com/?NooSphere\nExcuse the bizarre capitalization. My instructions to authors was to title pages with phrases like TheNoosphere or NoosphereExplained. Authors don't follow instructions no matter how much benefit they might accrue. "
    },
    {
      "type": "paragraph",
      "id": "7f1292c5db2c5714",
      "prompt": "Unexpected Item\nWe can't make sense of the drop.\nTry something else or see [[About Factory Plugin]].",
      "punt": {
        "url": "https://proxy.c2.com/sig/wiki.gif",
        "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:95.0) Gecko/20100101 Firefox/95.0"
      },
      "text": "[[Noosphere]]"
    },
    {
      "type": "pagefold",
      "id": "2b88c3fe16f48681",
      "text": "log4j"
    },
    {
      "type": "markdown",
      "id": "dc57a7bc693835ce",
      "text": "Comment on log4j: It works as specified\nFrom [[Kristian KÃ¶hntopp]]\nheise online\n"
    },
    {
      "type": "paragraph",
      "id": "125cb9d52f0f429a",
      "text": "Many jokes have been made about the Java slogan \"Write Once, Run Everywhere\". The log4j exploit is now treated by many as a bug - but it is not. "
    },
    {
      "type": "paragraph",
      "id": "25c60cb56fc710cf",
      "text": "A critical gap in the Java library Log4j is currently dominating the headlines. The IT world is declaring \"warning level red\" - because apparently the log4j code can perform JNDI variable expansion.\n\nBut what is JNDI? Jindi al Dap is the name of an ancient Arab philosopher and mathematics pioneer who worked for Sun/Oracle to develop a system of directory lookups in Java. This system somehow reloads code from the Internet. But even if you stare at the system diagram for a longer time, you don't necessarily see immediately at which point the Java CLASSPATH expands to encompass the entire Internet:"
    },
    {
      "type": "html",
      "id": "7466f6f78a943542",
      "text": "<center><img width=100%\" src=\"https://heise.cloudimg.io/v7/_www-heise-de_/imgs/18/3/2/3/2/1/2/3/bild1-c15dbca1707f9c15.png\"></center>"
    },
    {
      "type": "markdown",
      "id": "84498d2584cad1bc",
      "text": "## Nothing is ever simple\n\nThis is because nothing in Java is ever simple. Java code is unstructured dry dust of code fragments in class files that inertly do not interact with each other in any way. Only with the appropriate Factories, Delegates, Generators and ClassLoaders are they instantiated and assembled. The resulting pile of cross-references then just happens to execute actual effective code at some point."
    },
    {
      "type": "paragraph",
      "id": "6b019827300b4d81",
      "text": "One could now get the idea of using an IDE with integrated syntactic code search to get this source code pile into shape and understand it. But this is in vain: even with the whole codebase and an index on it, you can't predict what a given Java codebase will do when you start it. It also needs configuration files. These are another bunch, properties files, written in an antediluvian precursor to YAML: XML."
    },
    {
      "type": "paragraph",
      "id": "e29fc2d4c0008bc8",
      "text": "Or at least that's what we're supposed to think: With the properties and codebase, we can finally try to understand what Java does. And it almost would, but JNDI has stepped up to fix that very problem: Directory Lookups!\n\nSo instead of packaging the application and its configuration and then installing the packages in production, we can now use JNDI to read the configuration from the network. That is, the actual configuration files that tell us what the application does are.... no longer there. Progress!\n\nThis ensures that no one can hack us anymore because no one understands the code anymore: Important information needed to understand the code base is hidden in a directory service, and we don't even know which one. But we can take this one step further: The code that does the directory lookup isn't there either, just a bootstrap: Event and Service Provider Packages."
    },
    {
      "type": "html",
      "id": "dd86d6b92d260aa9",
      "text": "<center><img width=100%\" src=\"https://heise.cloudimg.io/v7/_www-heise-de_/imgs/18/3/2/3/2/1/2/3/bild2-7bc2c6e8ccc457e6.png\"></center>"
    },
    {
      "type": "paragraph",
      "id": "c76118a83019b17c",
      "text": "So thanks to JDNI SPI we can have Java classfiles delivered from an LDAP server that supposedly generate a Printer object when we ask for a printer - but then install Doom instead. Or a cryptominer or encryption Trojan. This is enterprise security.\n\nThe Java slogan is \"Write Once, Run Everywhere\". We used to make a lot of jokes about it because Java crashed so often - most Java applications now ship with the entire execution environment, including the JRE, to make anything work at all. Now, finally, everything works - and people are unhappy again."
    },
    {
      "type": "markdown",
      "id": "9b3c0b10ad49b738",
      "text": "## NOTABUG, WONTFIX "
    },
    {
      "type": "paragraph",
      "id": "b80e9ccfeb57b10d",
      "text": "But seriously: Many treat the log4j exploit like a bug, a programming error, a violation of a specification. However, this is exactly not the case: It finally works - literally - everything as specified and documented: All the modularity and dynamic extensibility of Java has worked together and functioned quite beautifully and exactly as planned. We've been working towards this for decades! \"NOTABUG, WONTFIX\"\n\nAnd that's the real problem here. Many are now calling for \"More control!\", \"More review!\", \"More funding!\", \"More eyes on the code!\". What would really help would be less code, less indirection and boilerplate, and just more... simplicity.\n\nWhy do I need a LogAppenderFactorySingleton that reads XML to get the name of the class it needs to instantiate so I can drop my log line in there to asynchronously append to a LogStream? That's not simple. What is simple? Print JSON to stderr. That's simple. But companies have been hiring people for about a decade who don't know what stdout and stderr are and that's kind of okay because everything is a web service by now anyway."
    },
    {
      "type": "paragraph",
      "id": "a7365ef9a14b5a7f",
      "text": "Software development has become much more modern: We have merge requests with code review, CI/CD pipelines, Infrastructure as Code, and Immutable Infrastructure. This is only of no use if my Java logging library on Mars reloads code from directory servers on Earth and thus completely redefines the \"remote\" in RCE. Dependency analysis only makes sense if the list of these dependencies is finite and just as immutable as the infrastructure.\n\nJava once had the necessary control buttons that allowed us to enforce that this list of dependencies was finite and immutable. If you're into that kind of lifestyle, there's something called SM: Oracle SM.\n\nSM brings the necessary contracts and discipline that a codebase needs. But most users aren't into SM and reject the idea. So in Java 17, the functionality will be marked as deprecated and removed later (JEP 411: Deprecate the Security Manager for Removal)."
    },
    {
      "type": "html",
      "id": "4be58507ee9741d9",
      "text": "<center><img width=\"100%\" src=\"https://heise.cloudimg.io/v7/_www-heise-de_/imgs/18/3/2/3/2/1/2/3/bild3-7e6835068d75e1db.jpg\"></center>"
    },
    {
      "type": "markdown",
      "id": "1668769f201137b9",
      "text": "## Like a three year old\n\nJNDI has also rejected SM and has a promiscuous interface that loads code from somewhere and executes it. Think of it like a three year old popping each class in his mouth to find out how it tastes and if it can be executed.\n\nIn the end, that's exactly the specification: here's an object, deserialize it. In Java, that means that the code for the object's class has to come from somewhere, and its methods are then executed. Of course, no one would think that was a good idea if it was phrased that way. But then again, the person who implemented it eight years ago didn't see it, and neither did the hundreds of thousands who imported log4j into their codebase.\n\nWhat does this tell us about the dependency management process of organizations that develop software? About understanding the codebase, the dependencies, and the processes that plan data flow and releases? Right. \"We use modular architecture and agile methods to increase development velocity.\""
    },
    {
      "type": "mathjax",
      "id": "a97a46998aad790c",
      "text": "E = 1/2m*(v^2)"
    },
    {
      "type": "paragraph",
      "id": "25762f28e5d500e7",
      "text": "More development speed makes bigger craters."
    },
    {
      "type": "markdown",
      "id": "6bc5da2235dbccde",
      "text": "## Code. Is. Not. Your. Friend.\n"
    },
    {
      "type": "markdown",
      "id": "cf5cde3844c3878c",
      "text": "Especially not code dynamically reloaded from the Internet.\n\nCode. Is. Not. Your. Friend.\n\nI know it sounds weird to be a developer and make your living thinking you're friends with code.\n\nBut here's the thing. Less code is better code. Preferably so little code that you can understand it in its entirety and with all its interactions. And also the code that is necessary to run your code."
    },
    {
      "type": "pagefold",
      "id": "bdc408f8d31e93e7",
      "text": "Dynabook"
    },
    {
      "type": "reference",
      "id": "edb24039a4e16ec8",
      "site": "wiki.ralfbarkow.ch",
      "slug": "personal-dynamic-media",
      "title": "Personal Dynamic Media",
      "text": "A term coined by [[Alan Kay]] to describe a way of using computers.  In [[Early History Of Smalltalk]], Alan Kay explains how after seeing Seymour Papert's work with [[Logo Language]] he grew to see personal computing less as a \"personal dynamic vehicle\" and more as a \"personal dynamic medium\".  Instead of the computer being primarily used for its capacity to perform computation, what if it were used as a medium for communication?  Not just as a way for people to send each other text, or pictures, or sound, but as a way to send each other active, \"live\" simulations of their ideas?"
    },
    {
      "type": "pagefold",
      "id": "478e52cf5718c530",
      "text": "seandenigris / Dynabook\n"
    },
    {
      "type": "markdown",
      "id": "895535a9a5a1be09",
      "text": "## Components\n\nThe following projects are my core components:\n\n* [https://github.com/seandenigris/Nature Nature] - A naturalist's companion, focused on identifying and logging plant and mushrooms.\n* [https://github.com/seandenigris/ResourcesLive Resources Live] - Free users to communicate with objects instead of managing files. Files conflate what a thing is with *where* it is. We take care of the boring location part for you. So you can \"play an mp3\" instead of \"opening an mp3 file in a player app\". Nicer, no?\n* [https://github.com/SeanDeNigris/The-Project-Project The Project Project] - Project Management unleashed from an \"application\" stovepipe, running on GToolkit (Smalltalk)\n* Flashcards St - Unleash flashcards from simple text on \"front\" and \"back\". Any object can be material for multiple cards (or card types)\n* Ukulele - TLDR: A companion in learning and playing, in a live system of supporting objects e.g. media library, bookmarking, contact management (e.g. for teachers and peers). Currently manages things related to playing e.g. songs, lessons, tabs.\n* Bookmark Magic - URL bookmarking in a live, dynamic world.\n* Quote Me - Quotation DB freed from an \"application\" stovepipe, in GToolkit (Smalltalk)\n* Ideas - KMS mind-map interface powered by @feenkcom's #GToolkit. Features concepts (like dictionary terms), compound concepts - concepts made up of other concepts, ideas (like dictionary definitions) connect concepts in an interesting/value-added way\n* Living Library - A reimagination of what a library can be once freed from a being a physical building housing (only) physical items\n* Small World - Project catalog akin to Squeak Map. The idea is that, with one click, you can load your favorite projects in the best way for that particular image (dialect, version, etc.) in that context (development, deployment, etc.). Right now I've just been using it myself for a few years.\n* Computer World - Bring to life computing objects like applications, servers, etc.\n* Superuser - An attemple to make Unix commands more sane.\n* My People - Address Book service, minus the usual application stovepipe, running on GT (Smalltalk)\n* Virtual Stash - Picture GnuCash, minus the application stovepipe, running on GToolkit (Smalltalk)\n* Tracking Numbers - Tracking numbers, unleashed from an application stovepipe, on GToolkit (Smalltalk)\n"
    },
    {
      "type": "pagefold",
      "id": "3dfe2d299013a9e3",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "d70c1d7c755c3767",
      "text": "[[Konrad Hinsen]] via [https://discord.com/channels/729445214812504107/834369757452697641/917672150620594187 discord]\n[[Clerk]] is a new notebook variant from the [[Clojure]] universe. Demo (from re:Clojure) at https://youtu.be/3C1QQXEg_F8?t=838. If those customizable views remind you of the GT inspector, that's not a coincidence. There isn't anything revolutionary in Clerk for us who are used to GT magic, but I am envious of those nice HTML/SVG/JS-based data visualizations.\n"
    },
    {
      "type": "video",
      "id": "9cb812f6bed82e8e",
      "text": "YOUTUBE 3C1QQXEg_F8\nre:Clojure Conference 2021 - Day 1"
    },
    {
      "type": "markdown",
      "id": "2d9762b436b3e441",
      "text": "http://www.reclojure.org/ is a free, community-driven conference that brings together knowledgeable speakers to present new and exciting topics on all things Clojure and ClojureScript. "
    },
    {
      "type": "markdown",
      "id": "9d6c5744f7d9f75e",
      "text": "https://github.com/nextjournal/clerk-demo"
    },
    {
      "type": "markdown",
      "id": "aa86496dbdf3926a",
      "text": "Clerk [https://nextjournal.com/mk/clerk-preview site]"
    },
    {
      "type": "paragraph",
      "id": "e1be224612899d6c",
      "text": "Nextjournal\n@usenextjournal"
    },
    {
      "type": "pagefold",
      "id": "6265c5f1bbc36491",
      "text": "Stephen Wolfram"
    },
    {
      "type": "paragraph",
      "id": "86e0022fdf681696",
      "text": "[[Konrad Hinsen]] via [https://discord.com/channels/729445214812504107/834369757452697641/917672150620594187 discord]\nWell, it's [[Stephen Wolfram]]. Who has a well-earned reputation for overselling his work. Last time I checked (a few months ago), the state of his physics project was \"we can see how something like relativity could possibly be the outcome of a hypergraph rewriting system\". It's still a very impressive achievement of course."
    },
    {
      "type": "markdown",
      "id": "2004990beb482e53",
      "text": "https://youtu.be/3C1QQXEg_F8?t=34725"
    },
    {
      "type": "markdown",
      "id": "e0d8fbb2231e76c3",
      "text": "https://youtu.be/3C1QQXEg_F8?t=37991\n"
    },
    {
      "type": "markdown",
      "id": "35350070154f3242",
      "text": "* Rulial Multiway Graph, [https://www.wolframphysics.org/bulletins/2020/06/exploring-rulial-space-the-case-of-turing-machines/ page]"
    },
    {
      "type": "paragraph",
      "id": "833ac3a99a605a24",
      "text": "[[Wolfram Language]] [https://en.wikipedia.org/wiki/Wolfram_Language wikipedia]"
    },
    {
      "type": "reference",
      "id": "58f5cf4f83c4181e",
      "site": "c0de.academy",
      "slug": "wolfram-language",
      "title": "Wolfram Language",
      "text": "The Wolfram Language is a general multi-paradigm programming language developed by Wolfram Research, that serves as the main interfacing language for Mathematica and the Wolfram Programming Cloud - [https://en.wikipedia.org/wiki/Wolfram_Language wikipedia]"
    },
    {
      "type": "pagefold",
      "id": "4e79b16a34794148",
      "text": "~"
    },
    {
      "type": "video",
      "id": "fe1c64a645e15573",
      "text": "YOUTUBE 29MAL8pJImQ\nRailsConf 2015 - Nothing is Something"
    },
    {
      "type": "markdown",
      "id": "2c174ac44e24db44",
      "text": "https://www.quora.com/Why-do-so-many-functional-programmers-admire-Smalltalk"
    },
    {
      "type": "markdown",
      "id": "688ed199f7e988ab",
      "text": "> Smalltalk, on the other hand, is ironically both claimed as an inspiration by more mainstream OOP and is very well-defined. Everything in the language is an object and objects can only communicate with one another by sending messages. Done (if thatâs unclear at all, hereâs a great explanation by the inimitable [[Sandi Metz]]\n). Smalltalk-style OOP is so simple itâs even used as an example fairly early on in SICP."
    },
    {
      "type": "paragraph",
      "id": "8da828d667293ea5",
      "text": "Lisp, Smalltalk, and the Power of Symmetry. [https://medium.com/smalltalk-talk/lisp-smalltalk-and-the-power-of-symmetry-8bd96aaa0c0c post]"
    },
    {
      "type": "markdown",
      "id": "8f55e47641f4f62c",
      "text": "> The only thing that seems to be required for a language to allow this is a pervasive symmetry between programs and data. If a language allows programs and data to be treated as the same thing, then that language becomes easily and infinitely extensibleâa language of the gods. S-expressions, it turns out, are not the only way to do thisâyou can do it with objects as well. I wonder if there are still more ways we havenât yet tried?"
    },
    {
      "type": "markdown",
      "id": "51fa9034850826ec",
      "text": "https://stackoverflow.com/questions/3527753/why-is-smalltalk-not-a-functional-programming-language"
    },
    {
      "type": "markdown",
      "id": "7e787ad34f3ad1c4",
      "text": "> Indeed, Smalltalk is an almost functional language. There are extensions to Smalltalk that provide functional pattern matching, e.g. map.squeak.org/package/3772b420-ba02-4fbd-ae30-8eadfc323b7b. Furthermore, Newspeak (newspeaklanguage.org) is a programming language in the tradition of Self and Smalltalk that supports immutability as one of its core concepts. â \nLukas Renggli\nAug 20 '10 at 11:44\n"
    },
    {
      "type": "paragraph",
      "id": "efcce153eb31c5c0",
      "text": "[[Functional Pattern Matching]]"
    },
    {
      "type": "pagefold",
      "id": "02075712d858c25c",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "6eaa2df470ae0cd9",
      "text": "[[Visualizing the Nix Store]] with Pharo"
    },
    {
      "type": "pagefold",
      "id": "2114db619e5d47a8",
      "text": "Dr Max Liboiron"
    },
    {
      "type": "paragraph",
      "id": "81d9bee03d86f1d1",
      "text": "via [https://twitter.com/MaxLiboiron/status/1470771504145215499 twitter] We aren't allowed to grade for \"participation\" in class here (which is good IMO), but I do have \"colleague points\" that changes the culture of the classroom, creates co-learning, and meets disability accommodations. Students can get one point for: "
    },
    {
      "type": "markdown",
      "id": "68ed01c2c325f903",
      "text": "- Taking class notes: Every class, we have two notetakers who post their notes online.\n- Timekeeping: I put the \"Table of contents\" for a class session up with the timing of each, and they help me stay paced & we always end on time\n- participate in making a class contract for shared expectations for how we all want to be treated (this is facilitated in the first two classes)\n- [[email an author]] of a text and share how it changed their thinking (based on @eatingpolitics assignment)\n"
    },
    {
      "type": "html",
      "id": "8ff7f4954f0b7848",
      "text": "<center><img width=\"100%\" src=\"https://pbs.twimg.com/media/FGkJFC3XsAAe41o?format=jpg&name=900x900\"></center>"
    },
    {
      "type": "markdown",
      "id": "ecb669ed5812ee31",
      "text": "- write a letter to future students: on the last day, they write a letter to next semester's students with tips and tricks for navigating the course (& my teaching/grading style) they wish they knew at the start\n- any form of mutual aid eg proof reading, showing the library, etc\n\nThere are others, too, but this is the gist. Students say it changes the class from competitive to cooperative and they feel better asking for help (or collegiality!). They are graded /10 for the semester (changes with course size). They can get 11/10."
    },
    {
      "type": "paragraph",
      "id": "a9431385b80732bc",
      "text": "You'll notice most of these can be done by introverts w/o having to become extroverts, a core issue I have when participation = talking."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2021-12-15",
        "story": []
      },
      "date": 1639543068865
    },
    {
      "item": {
        "type": "factory",
        "id": "b7342a7ef4863091"
      },
      "id": "b7342a7ef4863091",
      "type": "add",
      "date": 1639543088337
    },
    {
      "type": "edit",
      "id": "b7342a7ef4863091",
      "item": {
        "type": "paragraph",
        "id": "b7342a7ef4863091",
        "text": "just wanted to say it's very cool to see you are doing this work in a DH course. I work in a DH center in the US and there should be more people doing what you are doing!"
      },
      "date": 1639543090248
    },
    {
      "type": "edit",
      "id": "b7342a7ef4863091",
      "item": {
        "type": "paragraph",
        "id": "b7342a7ef4863091",
        "text": "edsu via [matrix]: just wanted to say it's very cool to see you are doing this work in a DH course. I work in a DH center in the US and there should be more people doing what you are doing!"
      },
      "date": 1639543109508
    },
    {
      "type": "edit",
      "id": "b7342a7ef4863091",
      "item": {
        "type": "paragraph",
        "id": "b7342a7ef4863091",
        "text": "edsu via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1639521028311546zoQfj:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=autonomic.zone matrix]: just wanted to say it's very cool to see you are doing this work in a DH course. I work in a DH center in the US and there should be more people doing what you are doing!"
      },
      "date": 1639543121013
    },
    {
      "item": {
        "type": "factory",
        "id": "9dd7ca54b549eda4"
      },
      "id": "9dd7ca54b549eda4",
      "type": "add",
      "after": "b7342a7ef4863091",
      "date": 1639543144241
    },
    {
      "type": "edit",
      "id": "9dd7ca54b549eda4",
      "item": {
        "type": "paragraph",
        "id": "9dd7ca54b549eda4",
        "text": "Thompson\nMike Caulfield once remarked that a wiki came alive after about 1,000 pages. For many, that individual journey has been too arduous to take. We sense, however, that with intentional guidance and cultivation, it can collectively come alive much faster, even in a moment. We wonder, then, of the potential once sensed by Teilhard and Vernadsky, something they called the 'noosphere' that created new potential for human sapience."
      },
      "date": 1639543147358
    },
    {
      "type": "edit",
      "id": "9dd7ca54b549eda4",
      "item": {
        "type": "paragraph",
        "id": "9dd7ca54b549eda4",
        "text": "Thompson via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1639531674315760vrdgc:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=autonomic.zone matrix]\nMike Caulfield once remarked that a wiki came alive after about 1,000 pages. For many, that individual journey has been too arduous to take. We sense, however, that with intentional guidance and cultivation, it can collectively come alive much faster, even in a moment. We wonder, then, of the potential once sensed by Teilhard and Vernadsky, something they called the 'noosphere' that created new potential for human sapience."
      },
      "date": 1639543168266
    },
    {
      "type": "edit",
      "id": "b7342a7ef4863091",
      "item": {
        "type": "paragraph",
        "id": "b7342a7ef4863091",
        "text": "edsu via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1639521028311546zoQfj:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=autonomic.zone matrix]: "
      },
      "date": 1639543187017
    },
    {
      "type": "add",
      "id": "609b25323bc0a30d",
      "item": {
        "type": "paragraph",
        "id": "609b25323bc0a30d",
        "text": "> just wanted to say it's very cool to see you are doing this work in a DH course. I work in a DH center in the US and there should be more people doing what you are doing!"
      },
      "after": "b7342a7ef4863091",
      "date": 1639543188924
    },
    {
      "type": "edit",
      "id": "609b25323bc0a30d",
      "item": {
        "type": "markdown",
        "id": "609b25323bc0a30d",
        "text": "> just wanted to say it's very cool to see you are doing this work in a DH course. I work in a DH center in the US and there should be more people doing what you are doing!"
      },
      "date": 1639543189942
    },
    {
      "type": "edit",
      "id": "b7342a7ef4863091",
      "item": {
        "type": "paragraph",
        "id": "b7342a7ef4863091",
        "text": "edsu via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1639521028311546zoQfj:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=autonomic.zone matrix]"
      },
      "date": 1639543197355
    },
    {
      "type": "edit",
      "id": "9dd7ca54b549eda4",
      "item": {
        "type": "paragraph",
        "id": "9dd7ca54b549eda4",
        "text": "Thompson via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1639531674315760vrdgc:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=autonomic.zone matrix]"
      },
      "date": 1639543204319
    },
    {
      "type": "add",
      "id": "c059c691a79c48d6",
      "item": {
        "type": "paragraph",
        "id": "c059c691a79c48d6",
        "text": "> Mike Caulfield once remarked that a wiki came alive after about 1,000 pages. For many, that individual journey has been too arduous to take. We sense, however, that with intentional guidance and cultivation, it can collectively come alive much faster, even in a moment. We wonder, then, of the potential once sensed by Teilhard and Vernadsky, something they called the 'noosphere' that created new potential for human sapience."
      },
      "after": "9dd7ca54b549eda4",
      "date": 1639543208190
    },
    {
      "type": "edit",
      "id": "c059c691a79c48d6",
      "item": {
        "type": "markdown",
        "id": "c059c691a79c48d6",
        "text": "> Mike Caulfield once remarked that a wiki came alive after about 1,000 pages. For many, that individual journey has been too arduous to take. We sense, however, that with intentional guidance and cultivation, it can collectively come alive much faster, even in a moment. We wonder, then, of the potential once sensed by Teilhard and Vernadsky, something they called the 'noosphere' that created new potential for human sapience."
      },
      "date": 1639543209236
    },
    {
      "type": "edit",
      "id": "c059c691a79c48d6",
      "item": {
        "type": "markdown",
        "id": "c059c691a79c48d6",
        "text": "> [[Mike Caulfield]] once remarked that a wiki came alive after about 1,000 pages. For many, that individual journey has been too arduous to take. We sense, however, that with intentional guidance and cultivation, it can collectively come alive much faster, even in a moment. We wonder, then, of the potential once sensed by Teilhard and Vernadsky, something they called the 'noosphere' that created new potential for human sapience."
      },
      "date": 1639543221988
    },
    {
      "item": {
        "type": "factory",
        "id": "e033a1c1bd7303e4"
      },
      "id": "e033a1c1bd7303e4",
      "type": "add",
      "after": "c059c691a79c48d6",
      "date": 1639543291665
    },
    {
      "type": "edit",
      "id": "e033a1c1bd7303e4",
      "item": {
        "type": "paragraph",
        "id": "e033a1c1bd7303e4",
        "text": "[[Ward]] via [matrix] \nhttp://wiki.c2.com/?NooSphere\nExcuse the bizarre capitalization. My instructions to authors was to title pages with phrases like TheNoosphere or NoosphereExplained. Authors don't follow instructions no matter how much benefit they might accrue. "
      },
      "date": 1639543308670
    },
    {
      "type": "edit",
      "id": "e033a1c1bd7303e4",
      "item": {
        "type": "paragraph",
        "id": "e033a1c1bd7303e4",
        "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1639532686316069clsMW:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=autonomic.zone matrix] \nhttp://wiki.c2.com/?NooSphere\nExcuse the bizarre capitalization. My instructions to authors was to title pages with phrases like TheNoosphere or NoosphereExplained. Authors don't follow instructions no matter how much benefit they might accrue. "
      },
      "date": 1639543320148
    },
    {
      "type": "edit",
      "id": "e033a1c1bd7303e4",
      "item": {
        "type": "paragraph",
        "id": "e033a1c1bd7303e4",
        "text": "[[Ward]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1639532686316069clsMW:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=autonomic.zone matrix] "
      },
      "date": 1639543332513
    },
    {
      "type": "add",
      "id": "8969980765427613",
      "item": {
        "type": "paragraph",
        "id": "8969980765427613",
        "text": "> http://wiki.c2.com/?NooSphere\nExcuse the bizarre capitalization. My instructions to authors was to title pages with phrases like TheNoosphere or NoosphereExplained. Authors don't follow instructions no matter how much benefit they might accrue. "
      },
      "after": "e033a1c1bd7303e4",
      "date": 1639543334493
    },
    {
      "type": "edit",
      "id": "8969980765427613",
      "item": {
        "type": "markdown",
        "id": "8969980765427613",
        "text": "> http://wiki.c2.com/?NooSphere\nExcuse the bizarre capitalization. My instructions to authors was to title pages with phrases like TheNoosphere or NoosphereExplained. Authors don't follow instructions no matter how much benefit they might accrue. "
      },
      "date": 1639543336246
    },
    {
      "item": {
        "type": "factory",
        "id": "7f1292c5db2c5714"
      },
      "id": "7f1292c5db2c5714",
      "type": "add",
      "after": "8969980765427613",
      "date": 1639543360258
    },
    {
      "type": "edit",
      "id": "7f1292c5db2c5714",
      "item": {
        "type": "factory",
        "id": "7f1292c5db2c5714",
        "prompt": "Unexpected Item\nWe can't make sense of the drop.\nTry something else or see [[About Factory Plugin]].",
        "punt": {
          "url": "https://proxy.c2.com/sig/wiki.gif",
          "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:95.0) Gecko/20100101 Firefox/95.0"
        }
      },
      "date": 1639543365487
    },
    {
      "type": "edit",
      "id": "7f1292c5db2c5714",
      "item": {
        "type": "paragraph",
        "id": "7f1292c5db2c5714",
        "prompt": "Unexpected Item\nWe can't make sense of the drop.\nTry something else or see [[About Factory Plugin]].",
        "punt": {
          "url": "https://proxy.c2.com/sig/wiki.gif",
          "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:95.0) Gecko/20100101 Firefox/95.0"
        },
        "text": "[[Noo Sphere]]"
      },
      "date": 1639543388613
    },
    {
      "type": "edit",
      "id": "7f1292c5db2c5714",
      "item": {
        "type": "paragraph",
        "id": "7f1292c5db2c5714",
        "prompt": "Unexpected Item\nWe can't make sense of the drop.\nTry something else or see [[About Factory Plugin]].",
        "punt": {
          "url": "https://proxy.c2.com/sig/wiki.gif",
          "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:95.0) Gecko/20100101 Firefox/95.0"
        },
        "text": "[[Noosphere]]"
      },
      "date": 1639543411520
    },
    {
      "item": {
        "type": "factory",
        "id": "2b88c3fe16f48681"
      },
      "id": "2b88c3fe16f48681",
      "type": "add",
      "after": "7f1292c5db2c5714",
      "date": 1639543674965
    },
    {
      "type": "edit",
      "id": "2b88c3fe16f48681",
      "item": {
        "type": "pagefold",
        "id": "2b88c3fe16f48681",
        "text": "log4j"
      },
      "date": 1639543680197
    },
    {
      "item": {
        "type": "factory",
        "id": "dc57a7bc693835ce"
      },
      "id": "dc57a7bc693835ce",
      "type": "add",
      "after": "2b88c3fe16f48681",
      "date": 1639543682033
    },
    {
      "type": "edit",
      "id": "dc57a7bc693835ce",
      "item": {
        "type": "paragraph",
        "id": "dc57a7bc693835ce",
        "text": "Comment on log4j: It works as specified\nFrom\n[[Kristian KÃ¶hntopp]]\nheise online\n"
      },
      "date": 1639543710453
    },
    {
      "item": {
        "type": "factory",
        "id": "125cb9d52f0f429a"
      },
      "id": "125cb9d52f0f429a",
      "type": "add",
      "after": "dc57a7bc693835ce",
      "date": 1639543750198
    },
    {
      "type": "edit",
      "id": "125cb9d52f0f429a",
      "item": {
        "type": "paragraph",
        "id": "125cb9d52f0f429a",
        "text": "Many jokes have been made about the Java slogan \"Write Once, Run Everywhere\". The log4j exploit is now treated by many as a bug - but it is not. "
      },
      "date": 1639543752085
    },
    {
      "item": {
        "type": "factory",
        "id": "25c60cb56fc710cf"
      },
      "id": "25c60cb56fc710cf",
      "type": "add",
      "after": "125cb9d52f0f429a",
      "date": 1639543783904
    },
    {
      "type": "edit",
      "id": "25c60cb56fc710cf",
      "item": {
        "type": "paragraph",
        "id": "25c60cb56fc710cf",
        "text": "A critical gap in the Java library Log4j is currently dominating the headlines. The IT world is declaring \"warning level red\" - because apparently the log4j code can perform JNDI variable expansion.\n\nBut what is JNDI? Jindi al Dap is the name of an ancient Arab philosopher and mathematics pioneer who worked for Sun/Oracle to develop a system of directory lookups in Java. This system somehow reloads code from the Internet. But even if you stare at the system diagram for a longer time, you don't necessarily see immediately at which point the Java CLASSPATH expands to encompass the entire Internet:"
      },
      "date": 1639543785682
    },
    {
      "item": {
        "type": "factory",
        "id": "7466f6f78a943542"
      },
      "id": "7466f6f78a943542",
      "type": "add",
      "after": "25c60cb56fc710cf",
      "date": 1639543796833
    },
    {
      "type": "edit",
      "id": "7466f6f78a943542",
      "item": {
        "type": "html",
        "id": "7466f6f78a943542",
        "text": "<center><img width=100%\" src=\"https://heise.cloudimg.io/v7/_www-heise-de_/imgs/18/3/2/3/2/1/2/3/bild1-c15dbca1707f9c15.png?q=70&width=1220\"></center>"
      },
      "date": 1639543828775
    },
    {
      "item": {
        "type": "factory",
        "id": "84498d2584cad1bc"
      },
      "id": "84498d2584cad1bc",
      "type": "add",
      "after": "7466f6f78a943542",
      "date": 1639544210949
    },
    {
      "type": "edit",
      "id": "84498d2584cad1bc",
      "item": {
        "type": "paragraph",
        "id": "84498d2584cad1bc",
        "text": "## Nothing is ever simple\n\nThis is because nothing in Java is ever simple. Java code is unstructured dry dust of code fragments in class files that inertly do not interact with each other in any way. Only with the appropriate Factories, Delegates, Generators and ClassLoaders are they instantiated and assembled. The resulting pile of cross-references then just happens to execute actual effective code at some point."
      },
      "date": 1639544218926
    },
    {
      "type": "edit",
      "id": "84498d2584cad1bc",
      "item": {
        "type": "markdown",
        "id": "84498d2584cad1bc",
        "text": "## Nothing is ever simple\n\nThis is because nothing in Java is ever simple. Java code is unstructured dry dust of code fragments in class files that inertly do not interact with each other in any way. Only with the appropriate Factories, Delegates, Generators and ClassLoaders are they instantiated and assembled. The resulting pile of cross-references then just happens to execute actual effective code at some point."
      },
      "date": 1639544220291
    },
    {
      "item": {
        "type": "factory",
        "id": "6b019827300b4d81"
      },
      "id": "6b019827300b4d81",
      "type": "add",
      "after": "84498d2584cad1bc",
      "date": 1639544258523
    },
    {
      "type": "edit",
      "id": "6b019827300b4d81",
      "item": {
        "type": "paragraph",
        "id": "6b019827300b4d81",
        "text": "One could now get the idea of using an IDE with integrated syntactic code search to get this source code pile into shape and understand it. But this is in vain: even with the whole codebase and an index on it, you can't predict what a given Java codebase will do when you start it. It also needs configuration files. These are another bunch, properties files, written in an antediluvian precursor to YAML: XML."
      },
      "date": 1639544260267
    },
    {
      "type": "add",
      "id": "e29fc2d4c0008bc8",
      "item": {
        "type": "paragraph",
        "id": "e29fc2d4c0008bc8",
        "text": "Or at least that's what we're supposed to think: With the properties and codebase, we can finally try to understand what Java does. And it almost would, but JNDI has stepped up to fix that very problem: Directory Lookups!\n\nSo instead of packaging the application and its configuration and then installing the packages in production, we can now use JNDI to read the configuration from the network. That is, the actual configuration files that tell us what the application does are.... no longer there. Progress!\n\nThis ensures that no one can hack us anymore because no one understands the code anymore: Important information needed to understand the code base is hidden in a directory service, and we don't even know which one. But we can take this one step further: The code that does the directory lookup isn't there either, just a bootstrap: Event and Service Provider Packages."
      },
      "after": "6b019827300b4d81",
      "date": 1639544300202
    },
    {
      "item": {
        "type": "factory",
        "id": "dd86d6b92d260aa9"
      },
      "id": "dd86d6b92d260aa9",
      "type": "add",
      "after": "e29fc2d4c0008bc8",
      "date": 1639544370367
    },
    {
      "type": "edit",
      "id": "dd86d6b92d260aa9",
      "item": {
        "type": "html",
        "id": "dd86d6b92d260aa9",
        "text": "<center><img width=100%\" src=\"https://heise.cloudimg.io/v7/_www-heise-de_/imgs/18/3/2/3/2/1/2/3/bild1-c15dbca1707f9c15.png?q=70&width=1220\"></center>"
      },
      "date": 1639544377325
    },
    {
      "type": "edit",
      "id": "dd86d6b92d260aa9",
      "item": {
        "type": "html",
        "id": "dd86d6b92d260aa9",
        "text": "<center><img width=100%\" src=\"https://heise.cloudimg.io/v7/_www-heise-de_/imgs/18/3/2/3/2/1/2/3/bild2-7bc2c6e8ccc457e6.png\"></center>"
      },
      "date": 1639544400408
    },
    {
      "type": "edit",
      "id": "7466f6f78a943542",
      "item": {
        "type": "html",
        "id": "7466f6f78a943542",
        "text": "<center><img width=100%\" src=\"https://heise.cloudimg.io/v7/_www-heise-de_/imgs/18/3/2/3/2/1/2/3/bild1-c15dbca1707f9c15.png\"></center>"
      },
      "date": 1639544412747
    },
    {
      "item": {
        "type": "factory",
        "id": "c76118a83019b17c"
      },
      "id": "c76118a83019b17c",
      "type": "add",
      "after": "dd86d6b92d260aa9",
      "date": 1639544492310
    },
    {
      "type": "edit",
      "id": "c76118a83019b17c",
      "item": {
        "type": "paragraph",
        "id": "c76118a83019b17c",
        "text": "So thanks to JDNI SPI we can have Java classfiles delivered from an LDAP server that supposedly generate a Printer object when we ask for a printer - but then install Doom instead. Or a cryptominer or encryption Trojan. This is enterprise security.\n\nThe Java slogan is \"Write Once, Run Everywhere\". We used to make a lot of jokes about it because Java crashed so often - most Java applications now ship with the entire execution environment, including the JRE, to make anything work at all. Now, finally, everything works - and people are unhappy again."
      },
      "date": 1639544498134
    },
    {
      "type": "add",
      "id": "9b3c0b10ad49b738",
      "item": {
        "type": "paragraph",
        "id": "9b3c0b10ad49b738",
        "text": "## NOTABUG, WONTFIX "
      },
      "after": "c76118a83019b17c",
      "date": 1639544572746
    },
    {
      "type": "edit",
      "id": "9b3c0b10ad49b738",
      "item": {
        "type": "markdown",
        "id": "9b3c0b10ad49b738",
        "text": "## NOTABUG, WONTFIX "
      },
      "date": 1639544591189
    },
    {
      "type": "add",
      "id": "b80e9ccfeb57b10d",
      "item": {
        "type": "paragraph",
        "id": "b80e9ccfeb57b10d",
        "text": "But seriously: Many treat the log4j exploit like a bug, a programming error, a violation of a specification. However, this is exactly not the case: It finally works - literally - everything as specified and documented: All the modularity and dynamic extensibility of Java has worked together and functioned quite beautifully and exactly as planned. We've been working towards this for decades! \"NOTABUG, WONTFIX\"\n\nAnd that's the real problem here. Many are now calling for \"More control!\", \"More review!\", \"More funding!\", \"More eyes on the code!\". What would really help would be less code, less indirection and boilerplate, and just more... simplicity.\n\nWhy do I need a LogAppenderFactorySingleton that reads XML to get the name of the class it needs to instantiate so I can drop my log line in there to asynchronously append to a LogStream? That's not simple. What is simple? Print JSON to stderr. That's simple. But companies have been hiring people for about a decade who don't know what stdout and stderr are and that's kind of okay because everything is a web service by now anyway."
      },
      "after": "9b3c0b10ad49b738",
      "date": 1639544592424
    },
    {
      "type": "add",
      "id": "a7365ef9a14b5a7f",
      "item": {
        "type": "paragraph",
        "id": "a7365ef9a14b5a7f",
        "text": "Softwareentwicklung ist viel moderner geworden: Wir haben Merge Requests mit Code Review, CI/CD-Pipelines, Infrastructure as Code und Immutable Infrastructure. Das nÃ¼tzt nur nix, wenn meine Java Logging Library auf dem Mars Code von Directory-Servern auf der Erde nachlÃ¤dt und so das \"Remote\" in RCE komplett neu definiert. Die Analyse von Dependencies hat nur dann Sinn, wenn die Liste dieser AbhÃ¤ngigkeiten endlich und genau so immutable wie die Infrastruktur ist.\n\nJava hatte einmal die notwendigen KontrollknÃ¶pfe, mit denen wir erzwingen konnten, dass diese Liste von AbhÃ¤ngigkeiten endlich und unverÃ¤nderlich ist. Wenn man auf diese Art von Lebensstil steht, gibt es etwas, das sich SM nennt: Oracle SM.\n\nSM bringt die notwendigen VertrÃ¤ge und die Disziplin, die eine Codebase braucht. Aber die meisten Anwender stehen nicht auf SM und lehnen die Idee ab. Also wird die FunktionalitÃ¤t in Java 17 als deprecated (veraltet) gekennzeichnet und spÃ¤ter entfernt werden (JEP 411: Deprecate the Security Manager for Removal)."
      },
      "after": "b80e9ccfeb57b10d",
      "date": 1639545086196
    },
    {
      "type": "edit",
      "id": "a7365ef9a14b5a7f",
      "item": {
        "type": "paragraph",
        "id": "a7365ef9a14b5a7f",
        "text": "Software development has become much more modern: We have merge requests with code review, CI/CD pipelines, Infrastructure as Code, and Immutable Infrastructure. This is only of no use if my Java logging library on Mars reloads code from directory servers on Earth and thus completely redefines the \"remote\" in RCE. Dependency analysis only makes sense if the list of these dependencies is finite and just as immutable as the infrastructure.\n\nJava once had the necessary control buttons that allowed us to enforce that this list of dependencies was finite and immutable. If you're into that kind of lifestyle, there's something called SM: Oracle SM.\n\nSM brings the necessary contracts and discipline that a codebase needs. But most users aren't into SM and reject the idea. So in Java 17, the functionality will be marked as deprecated and removed later (JEP 411: Deprecate the Security Manager for Removal)."
      },
      "date": 1639545105729
    },
    {
      "item": {
        "type": "factory",
        "id": "4be58507ee9741d9"
      },
      "id": "4be58507ee9741d9",
      "type": "add",
      "after": "a7365ef9a14b5a7f",
      "date": 1639545192469
    },
    {
      "type": "edit",
      "id": "4be58507ee9741d9",
      "item": {
        "type": "html",
        "id": "4be58507ee9741d9",
        "text": "<center><img width=\"100%\" src=\"https://heise.cloudimg.io/v7/_www-heise-de_/imgs/18/3/2/3/2/1/2/3/bild3-7e6835068d75e1db.jpg\"></center>"
      },
      "date": 1639545227940
    },
    {
      "item": {
        "type": "factory",
        "id": "1668769f201137b9"
      },
      "id": "1668769f201137b9",
      "type": "add",
      "after": "4be58507ee9741d9",
      "date": 1639545262690
    },
    {
      "type": "edit",
      "id": "1668769f201137b9",
      "item": {
        "type": "paragraph",
        "id": "1668769f201137b9",
        "text": "## Like a three year old\n\nJNDI has also rejected SM and has a promiscuous interface that loads code from somewhere and executes it. Think of it like a three year old popping each class in his mouth to find out how it tastes and if it can be executed.\n\nIn the end, that's exactly the specification: here's an object, deserialize it. In Java, that means that the code for the object's class has to come from somewhere, and its methods are then executed. Of course, no one would think that was a good idea if it was phrased that way. But then again, the person who implemented it eight years ago didn't see it, and neither did the hundreds of thousands who imported log4j into their codebase.\n\nWhat does this tell us about the dependency management process of organizations that develop software? About understanding the codebase, the dependencies, and the processes that plan data flow and releases? Right. \"We use modular architecture and agile methods to increase development velocity.\""
      },
      "date": 1639545269782
    },
    {
      "type": "edit",
      "id": "1668769f201137b9",
      "item": {
        "type": "markdown",
        "id": "1668769f201137b9",
        "text": "## Like a three year old\n\nJNDI has also rejected SM and has a promiscuous interface that loads code from somewhere and executes it. Think of it like a three year old popping each class in his mouth to find out how it tastes and if it can be executed.\n\nIn the end, that's exactly the specification: here's an object, deserialize it. In Java, that means that the code for the object's class has to come from somewhere, and its methods are then executed. Of course, no one would think that was a good idea if it was phrased that way. But then again, the person who implemented it eight years ago didn't see it, and neither did the hundreds of thousands who imported log4j into their codebase.\n\nWhat does this tell us about the dependency management process of organizations that develop software? About understanding the codebase, the dependencies, and the processes that plan data flow and releases? Right. \"We use modular architecture and agile methods to increase development velocity.\""
      },
      "date": 1639545271708
    },
    {
      "item": {
        "type": "factory",
        "id": "a97a46998aad790c"
      },
      "id": "a97a46998aad790c",
      "type": "add",
      "after": "1668769f201137b9",
      "date": 1639545522811
    },
    {
      "type": "edit",
      "id": "a97a46998aad790c",
      "item": {
        "type": "mathjax",
        "id": "a97a46998aad790c",
        "text": "E = 1/2m*(v^2)"
      },
      "date": 1639545525748
    },
    {
      "item": {
        "type": "factory",
        "id": "25762f28e5d500e7"
      },
      "id": "25762f28e5d500e7",
      "type": "add",
      "after": "a97a46998aad790c",
      "date": 1639545545444
    },
    {
      "type": "edit",
      "id": "25762f28e5d500e7",
      "item": {
        "type": "paragraph",
        "id": "25762f28e5d500e7",
        "text": "Mehr Entwicklungsgeschwindigkeit macht grÃ¶Ãere Krater."
      },
      "date": 1639545550069
    },
    {
      "type": "edit",
      "id": "25762f28e5d500e7",
      "item": {
        "type": "paragraph",
        "id": "25762f28e5d500e7",
        "text": "More development speed makes bigger craters."
      },
      "date": 1639545557726
    },
    {
      "type": "add",
      "id": "6bc5da2235dbccde",
      "item": {
        "type": "paragraph",
        "id": "6bc5da2235dbccde",
        "text": "## Code. Is. Not. Your. Friend."
      },
      "after": "25762f28e5d500e7",
      "date": 1639545577768
    },
    {
      "type": "edit",
      "id": "6bc5da2235dbccde",
      "item": {
        "type": "markdown",
        "id": "6bc5da2235dbccde",
        "text": "## Code. Is. Not. Your. Friend."
      },
      "date": 1639545579301
    },
    {
      "type": "edit",
      "id": "6bc5da2235dbccde",
      "item": {
        "type": "markdown",
        "id": "6bc5da2235dbccde",
        "text": "## Code. Is. Not. Your. Friend.\n"
      },
      "date": 1639545604431
    },
    {
      "type": "add",
      "id": "cf5cde3844c3878c",
      "item": {
        "type": "markdown",
        "id": "cf5cde3844c3878c",
        "text": "Especially not code dynamically reloaded from the Internet.\n\nCode. Is. Not. Your. Friend.\n\nI know it sounds weird to be a developer and make your living thinking you're friends with code.\n\nBut here's the thing. Less code is better code. Preferably so little code that you can understand it in its entirety and with all its interactions. And also the code that is necessary to run your code."
      },
      "after": "6bc5da2235dbccde",
      "date": 1639545605248
    },
    {
      "item": {
        "type": "factory",
        "id": "bdc408f8d31e93e7"
      },
      "id": "bdc408f8d31e93e7",
      "type": "add",
      "after": "cf5cde3844c3878c",
      "date": 1639561640042
    },
    {
      "type": "edit",
      "id": "bdc408f8d31e93e7",
      "item": {
        "type": "pagefold",
        "id": "bdc408f8d31e93e7",
        "text": "Dynabook"
      },
      "date": 1639561645531
    },
    {
      "item": {
        "type": "factory",
        "id": "edb24039a4e16ec8"
      },
      "id": "edb24039a4e16ec8",
      "type": "add",
      "after": "bdc408f8d31e93e7",
      "date": 1639561647447
    },
    {
      "type": "edit",
      "id": "edb24039a4e16ec8",
      "item": {
        "type": "reference",
        "id": "edb24039a4e16ec8",
        "site": "wiki.ralfbarkow.ch",
        "slug": "personal-dynamic-media",
        "title": "Personal Dynamic Media",
        "text": "A term coined by [[Alan Kay]] to describe a way of using computers.  In [[Early History Of Smalltalk]], Alan Kay explains how after seeing Seymour Papert's work with [[Logo Language]] he grew to see personal computing less as a \"personal dynamic vehicle\" and more as a \"personal dynamic medium\".  Instead of the computer being primarily used for its capacity to perform computation, what if it were used as a medium for communication?  Not just as a way for people to send each other text, or pictures, or sound, but as a way to send each other active, \"live\" "
      },
      "date": 1639561649756
    },
    {
      "type": "edit",
      "id": "edb24039a4e16ec8",
      "item": {
        "type": "reference",
        "id": "edb24039a4e16ec8",
        "site": "wiki.ralfbarkow.ch",
        "slug": "personal-dynamic-media",
        "title": "Personal Dynamic Media",
        "text": "A term coined by [[Alan Kay]] to describe a way of using computers.  In [[Early History Of Smalltalk]], Alan Kay explains how after seeing Seymour Papert's work with [[Logo Language]] he grew to see personal computing less as a \"personal dynamic vehicle\" and more as a \"personal dynamic medium\".  Instead of the computer being primarily used for its capacity to perform computation, what if it were used as a medium for communication?  Not just as a way for people to send each other text, or pictures, or sound, but as a way to send each other active, \"live\" simulations of their ideas?"
      },
      "date": 1639561692962
    },
    {
      "type": "edit",
      "id": "dc57a7bc693835ce",
      "item": {
        "type": "paragraph",
        "id": "dc57a7bc693835ce",
        "text": "Comment on log4j: It works as specified\nFrom[[Kristian KÃ¶hntopp]]\nheise online\n"
      },
      "date": 1639569679818
    },
    {
      "type": "edit",
      "id": "dc57a7bc693835ce",
      "item": {
        "type": "markdown",
        "id": "dc57a7bc693835ce",
        "text": "Comment on log4j: It works as specified\nFrom[[Kristian KÃ¶hntopp]]\nheise online\n"
      },
      "date": 1639569680821
    },
    {
      "type": "edit",
      "id": "dc57a7bc693835ce",
      "item": {
        "type": "markdown",
        "id": "dc57a7bc693835ce",
        "text": "Comment on log4j: It works as specified\nFrom [[Kristian KÃ¶hntopp]]\nheise online\n"
      },
      "date": 1639569688558
    },
    {
      "item": {
        "type": "factory",
        "id": "478e52cf5718c530"
      },
      "id": "478e52cf5718c530",
      "type": "add",
      "after": "edb24039a4e16ec8",
      "date": 1639569780842
    },
    {
      "type": "edit",
      "id": "478e52cf5718c530",
      "item": {
        "type": "pagefold",
        "id": "478e52cf5718c530",
        "text": "seandenigris / Dynabook\n"
      },
      "date": 1639569790777
    },
    {
      "item": {
        "type": "factory",
        "id": "895535a9a5a1be09"
      },
      "id": "895535a9a5a1be09",
      "type": "add",
      "after": "478e52cf5718c530",
      "date": 1639569806498
    },
    {
      "type": "edit",
      "id": "895535a9a5a1be09",
      "item": {
        "type": "markdown",
        "id": "895535a9a5a1be09",
        "text": "Components\n\nThe following projects are my core components:\n\n    Nature - A naturalist's companion, focused on identifying and logging plant and mushrooms.\n    Resources Live - Free users to communicate with objects instead of managing files. Files conflate what a thing is with where it is. We take can of the boring location part for you. So you can \"play an mp3\" instead of \"opening an mp3 file in a player app\". Nicer, no?\n    The Project Project - Project Management unleashed from an \"application\" stovepipe, running on GToolkit (Smalltalk)\n    Flashcards St - Unleash flashcards from simple text on \"front\" and \"back\". Any object can be material for multiple cards (or card types)\n    Ukulele - TLDR: A companion in learning and playing, in a live system of supporting objects e.g. media library, bookmarking, contact management (e.g. for teachers and peers). Currently manages things related to playing e.g. songs, lessons, tabs.\n    Bookmark Magic - URL bookmarking in a live, dynamic world.\n    Quote Me - Quotation DB freed from an \"application\" stovepipe, in GToolkit (Smalltalk)\n    Ideas - KMS mind-map interface powered by @feenkcom's #GToolkit. Features concepts (like dictionary terms), compound concepts - concepts made up of other concepts, ideas (like dictionary definitions) connect concepts in an interesting/value-added way\n    Living Library - A reimagination of what a library can be once freed from a being a physical building housing (only) physical items\n    Small World - Project catalog akin to Squeak Map. The idea is that, with one click, you can load your favorite projects in the best way for that particular image (dialect, version, etc.) in that context (development, deployment, etc.). Right now I've just been using it myself for a few years.\n    Computer World - Bring to life computing objects like applications, servers, etc.\n    Superuser - An attemple to make Unix commands more sane.\n    My People - Address Book service, minus the usual application stovepipe, running on GT (Smalltalk)\n    Virtual Stash - Picture GnuCash, minus the application stovepipe, running on GToolkit (Smalltalk)\n    Tracking Numbers - Tracking numbers, unleashed from an application stovepipe, on GToolkit (Smalltalk)\n"
      },
      "date": 1639569809444
    },
    {
      "type": "edit",
      "id": "895535a9a5a1be09",
      "item": {
        "type": "markdown",
        "id": "895535a9a5a1be09",
        "text": "Components\n\nThe following projects are my core components:\n\n* Nature - A naturalist's companion, focused on identifying and logging plant and mushrooms.\n* Resources Live - Free users to communicate with objects instead of managing files. Files conflate what a thing is with where it is. We take can of the boring location part for you. So you can \"play an mp3\" instead of \"opening an mp3 file in a player app\". Nicer, no?\n* The Project Project - Project Management unleashed from an \"application\" stovepipe, running on GToolkit (Smalltalk)\n    Flashcards St - Unleash flashcards from simple text on \"front\" and \"back\". Any object can be material for multiple cards (or card types)\n    Ukulele - TLDR: A companion in learning and playing, in a live system of supporting objects e.g. media library, bookmarking, contact management (e.g. for teachers and peers). Currently manages things related to playing e.g. songs, lessons, tabs.\n    Bookmark Magic - URL bookmarking in a live, dynamic world.\n    Quote Me - Quotation DB freed from an \"application\" stovepipe, in GToolkit (Smalltalk)\n    Ideas - KMS mind-map interface powered by @feenkcom's #GToolkit. Features concepts (like dictionary terms), compound concepts - concepts made up of other concepts, ideas (like dictionary definitions) connect concepts in an interesting/value-added way\n    Living Library - A reimagination of what a library can be once freed from a being a physical building housing (only) physical items\n    Small World - Project catalog akin to Squeak Map. The idea is that, with one click, you can load your favorite projects in the best way for that particular image (dialect, version, etc.) in that context (development, deployment, etc.). Right now I've just been using it myself for a few years.\n    Computer World - Bring to life computing objects like applications, servers, etc.\n    Superuser - An attemple to make Unix commands more sane.\n    My People - Address Book service, minus the usual application stovepipe, running on GT (Smalltalk)\n    Virtual Stash - Picture GnuCash, minus the application stovepipe, running on GToolkit (Smalltalk)\n    Tracking Numbers - Tracking numbers, unleashed from an application stovepipe, on GToolkit (Smalltalk)\n"
      },
      "date": 1639569866414
    },
    {
      "type": "edit",
      "id": "895535a9a5a1be09",
      "item": {
        "type": "markdown",
        "id": "895535a9a5a1be09",
        "text": "Components\n\nThe following projects are my core components:\n\n* Nature - A naturalist's companion, focused on identifying and logging plant and mushrooms.\n* Resources Live - Free users to communicate with objects instead of managing files. Files conflate what a thing is with *where* it is. We take can of the boring location part for you. So you can \"play an mp3\" instead of \"opening an mp3 file in a player app\". Nicer, no?\n* The Project Project - Project Management unleashed from an \"application\" stovepipe, running on GToolkit (Smalltalk)\n* Flashcards St - Unleash flashcards from simple text on \"front\" and \"back\". Any object can be material for multiple cards (or card types)\n* Ukulele - TLDR: A companion in learning and playing, in a live system of supporting objects e.g. media library, bookmarking, contact management (e.g. for teachers and peers). Currently manages things related to playing e.g. songs, lessons, tabs.\n* Bookmark Magic - URL bookmarking in a live, dynamic world.\n* Quote Me - Quotation DB freed from an \"application\" stovepipe, in GToolkit (Smalltalk)\n* Ideas - KMS mind-map interface powered by @feenkcom's #GToolkit. Features concepts (like dictionary terms), compound concepts - concepts made up of other concepts, ideas (like dictionary definitions) connect concepts in an interesting/value-added way\n* Living Library - A reimagination of what a library can be once freed from a being a physical building housing (only) physical items\n* Small World - Project catalog akin to Squeak Map. The idea is that, with one click, you can load your favorite projects in the best way for that particular image (dialect, version, etc.) in that context (development, deployment, etc.). Right now I've just been using it myself for a few years.\n* Computer World - Bring to life computing objects like applications, servers, etc.\n* Superuser - An attemple to make Unix commands more sane.\n* My People - Address Book service, minus the usual application stovepipe, running on GT (Smalltalk)\n* Virtual Stash - Picture GnuCash, minus the application stovepipe, running on GToolkit (Smalltalk)\n* Tracking Numbers - Tracking numbers, unleashed from an application stovepipe, on GToolkit (Smalltalk)\n"
      },
      "date": 1639569969483
    },
    {
      "type": "edit",
      "id": "895535a9a5a1be09",
      "item": {
        "type": "markdown",
        "id": "895535a9a5a1be09",
        "text": "## Components\n\nThe following projects are my core components:\n\n* Nature - A naturalist's companion, focused on identifying and logging plant and mushrooms.\n* Resources Live - Free users to communicate with objects instead of managing files. Files conflate what a thing is with *where* it is. We take can of the boring location part for you. So you can \"play an mp3\" instead of \"opening an mp3 file in a player app\". Nicer, no?\n* The Project Project - Project Management unleashed from an \"application\" stovepipe, running on GToolkit (Smalltalk)\n* Flashcards St - Unleash flashcards from simple text on \"front\" and \"back\". Any object can be material for multiple cards (or card types)\n* Ukulele - TLDR: A companion in learning and playing, in a live system of supporting objects e.g. media library, bookmarking, contact management (e.g. for teachers and peers). Currently manages things related to playing e.g. songs, lessons, tabs.\n* Bookmark Magic - URL bookmarking in a live, dynamic world.\n* Quote Me - Quotation DB freed from an \"application\" stovepipe, in GToolkit (Smalltalk)\n* Ideas - KMS mind-map interface powered by @feenkcom's #GToolkit. Features concepts (like dictionary terms), compound concepts - concepts made up of other concepts, ideas (like dictionary definitions) connect concepts in an interesting/value-added way\n* Living Library - A reimagination of what a library can be once freed from a being a physical building housing (only) physical items\n* Small World - Project catalog akin to Squeak Map. The idea is that, with one click, you can load your favorite projects in the best way for that particular image (dialect, version, etc.) in that context (development, deployment, etc.). Right now I've just been using it myself for a few years.\n* Computer World - Bring to life computing objects like applications, servers, etc.\n* Superuser - An attemple to make Unix commands more sane.\n* My People - Address Book service, minus the usual application stovepipe, running on GT (Smalltalk)\n* Virtual Stash - Picture GnuCash, minus the application stovepipe, running on GToolkit (Smalltalk)\n* Tracking Numbers - Tracking numbers, unleashed from an application stovepipe, on GToolkit (Smalltalk)\n"
      },
      "date": 1639570005714
    },
    {
      "type": "edit",
      "id": "895535a9a5a1be09",
      "item": {
        "type": "markdown",
        "id": "895535a9a5a1be09",
        "text": "## Components\n\nThe following projects are my core components:\n\n* Nature - A naturalist's companion, focused on identifying and logging plant and mushrooms.\n* Resources Live - Free users to communicate with objects instead of managing files. Files conflate what a thing is with *where* it is. We take care of the boring location part for you. So you can \"play an mp3\" instead of \"opening an mp3 file in a player app\". Nicer, no?\n* The Project Project - Project Management unleashed from an \"application\" stovepipe, running on GToolkit (Smalltalk)\n* Flashcards St - Unleash flashcards from simple text on \"front\" and \"back\". Any object can be material for multiple cards (or card types)\n* Ukulele - TLDR: A companion in learning and playing, in a live system of supporting objects e.g. media library, bookmarking, contact management (e.g. for teachers and peers). Currently manages things related to playing e.g. songs, lessons, tabs.\n* Bookmark Magic - URL bookmarking in a live, dynamic world.\n* Quote Me - Quotation DB freed from an \"application\" stovepipe, in GToolkit (Smalltalk)\n* Ideas - KMS mind-map interface powered by @feenkcom's #GToolkit. Features concepts (like dictionary terms), compound concepts - concepts made up of other concepts, ideas (like dictionary definitions) connect concepts in an interesting/value-added way\n* Living Library - A reimagination of what a library can be once freed from a being a physical building housing (only) physical items\n* Small World - Project catalog akin to Squeak Map. The idea is that, with one click, you can load your favorite projects in the best way for that particular image (dialect, version, etc.) in that context (development, deployment, etc.). Right now I've just been using it myself for a few years.\n* Computer World - Bring to life computing objects like applications, servers, etc.\n* Superuser - An attemple to make Unix commands more sane.\n* My People - Address Book service, minus the usual application stovepipe, running on GT (Smalltalk)\n* Virtual Stash - Picture GnuCash, minus the application stovepipe, running on GToolkit (Smalltalk)\n* Tracking Numbers - Tracking numbers, unleashed from an application stovepipe, on GToolkit (Smalltalk)\n"
      },
      "date": 1639572824230
    },
    {
      "type": "edit",
      "id": "895535a9a5a1be09",
      "item": {
        "type": "markdown",
        "id": "895535a9a5a1be09",
        "text": "## Components\n\nThe following projects are my core components:\n\n* [https://github.com/seandenigris/Nature Nature] - A naturalist's companion, focused on identifying and logging plant and mushrooms.\n* Resources Live - Free users to communicate with objects instead of managing files. Files conflate what a thing is with *where* it is. We take care of the boring location part for you. So you can \"play an mp3\" instead of \"opening an mp3 file in a player app\". Nicer, no?\n* The Project Project - Project Management unleashed from an \"application\" stovepipe, running on GToolkit (Smalltalk)\n* Flashcards St - Unleash flashcards from simple text on \"front\" and \"back\". Any object can be material for multiple cards (or card types)\n* Ukulele - TLDR: A companion in learning and playing, in a live system of supporting objects e.g. media library, bookmarking, contact management (e.g. for teachers and peers). Currently manages things related to playing e.g. songs, lessons, tabs.\n* Bookmark Magic - URL bookmarking in a live, dynamic world.\n* Quote Me - Quotation DB freed from an \"application\" stovepipe, in GToolkit (Smalltalk)\n* Ideas - KMS mind-map interface powered by @feenkcom's #GToolkit. Features concepts (like dictionary terms), compound concepts - concepts made up of other concepts, ideas (like dictionary definitions) connect concepts in an interesting/value-added way\n* Living Library - A reimagination of what a library can be once freed from a being a physical building housing (only) physical items\n* Small World - Project catalog akin to Squeak Map. The idea is that, with one click, you can load your favorite projects in the best way for that particular image (dialect, version, etc.) in that context (development, deployment, etc.). Right now I've just been using it myself for a few years.\n* Computer World - Bring to life computing objects like applications, servers, etc.\n* Superuser - An attemple to make Unix commands more sane.\n* My People - Address Book service, minus the usual application stovepipe, running on GT (Smalltalk)\n* Virtual Stash - Picture GnuCash, minus the application stovepipe, running on GToolkit (Smalltalk)\n* Tracking Numbers - Tracking numbers, unleashed from an application stovepipe, on GToolkit (Smalltalk)\n"
      },
      "date": 1639572852996
    },
    {
      "type": "edit",
      "id": "895535a9a5a1be09",
      "item": {
        "type": "markdown",
        "id": "895535a9a5a1be09",
        "text": "## Components\n\nThe following projects are my core components:\n\n* [https://github.com/seandenigris/Nature Nature] - A naturalist's companion, focused on identifying and logging plant and mushrooms.\n* [https://github.com/seandenigris/ResourcesLive Resources Live] - Free users to communicate with objects instead of managing files. Files conflate what a thing is with *where* it is. We take care of the boring location part for you. So you can \"play an mp3\" instead of \"opening an mp3 file in a player app\". Nicer, no?\n* The Project Project - Project Management unleashed from an \"application\" stovepipe, running on GToolkit (Smalltalk)\n* Flashcards St - Unleash flashcards from simple text on \"front\" and \"back\". Any object can be material for multiple cards (or card types)\n* Ukulele - TLDR: A companion in learning and playing, in a live system of supporting objects e.g. media library, bookmarking, contact management (e.g. for teachers and peers). Currently manages things related to playing e.g. songs, lessons, tabs.\n* Bookmark Magic - URL bookmarking in a live, dynamic world.\n* Quote Me - Quotation DB freed from an \"application\" stovepipe, in GToolkit (Smalltalk)\n* Ideas - KMS mind-map interface powered by @feenkcom's #GToolkit. Features concepts (like dictionary terms), compound concepts - concepts made up of other concepts, ideas (like dictionary definitions) connect concepts in an interesting/value-added way\n* Living Library - A reimagination of what a library can be once freed from a being a physical building housing (only) physical items\n* Small World - Project catalog akin to Squeak Map. The idea is that, with one click, you can load your favorite projects in the best way for that particular image (dialect, version, etc.) in that context (development, deployment, etc.). Right now I've just been using it myself for a few years.\n* Computer World - Bring to life computing objects like applications, servers, etc.\n* Superuser - An attemple to make Unix commands more sane.\n* My People - Address Book service, minus the usual application stovepipe, running on GT (Smalltalk)\n* Virtual Stash - Picture GnuCash, minus the application stovepipe, running on GToolkit (Smalltalk)\n* Tracking Numbers - Tracking numbers, unleashed from an application stovepipe, on GToolkit (Smalltalk)\n"
      },
      "date": 1639572887919
    },
    {
      "type": "edit",
      "id": "895535a9a5a1be09",
      "item": {
        "type": "markdown",
        "id": "895535a9a5a1be09",
        "text": "## Components\n\nThe following projects are my core components:\n\n* [https://github.com/seandenigris/Nature Nature] - A naturalist's companion, focused on identifying and logging plant and mushrooms.\n* [https://github.com/seandenigris/ResourcesLive Resources Live] - Free users to communicate with objects instead of managing files. Files conflate what a thing is with *where* it is. We take care of the boring location part for you. So you can \"play an mp3\" instead of \"opening an mp3 file in a player app\". Nicer, no?\n* [https://github.com/SeanDeNigris/The-Project-Project The Project Project] - Project Management unleashed from an \"application\" stovepipe, running on GToolkit (Smalltalk)\n* Flashcards St - Unleash flashcards from simple text on \"front\" and \"back\". Any object can be material for multiple cards (or card types)\n* Ukulele - TLDR: A companion in learning and playing, in a live system of supporting objects e.g. media library, bookmarking, contact management (e.g. for teachers and peers). Currently manages things related to playing e.g. songs, lessons, tabs.\n* Bookmark Magic - URL bookmarking in a live, dynamic world.\n* Quote Me - Quotation DB freed from an \"application\" stovepipe, in GToolkit (Smalltalk)\n* Ideas - KMS mind-map interface powered by @feenkcom's #GToolkit. Features concepts (like dictionary terms), compound concepts - concepts made up of other concepts, ideas (like dictionary definitions) connect concepts in an interesting/value-added way\n* Living Library - A reimagination of what a library can be once freed from a being a physical building housing (only) physical items\n* Small World - Project catalog akin to Squeak Map. The idea is that, with one click, you can load your favorite projects in the best way for that particular image (dialect, version, etc.) in that context (development, deployment, etc.). Right now I've just been using it myself for a few years.\n* Computer World - Bring to life computing objects like applications, servers, etc.\n* Superuser - An attemple to make Unix commands more sane.\n* My People - Address Book service, minus the usual application stovepipe, running on GT (Smalltalk)\n* Virtual Stash - Picture GnuCash, minus the application stovepipe, running on GToolkit (Smalltalk)\n* Tracking Numbers - Tracking numbers, unleashed from an application stovepipe, on GToolkit (Smalltalk)\n"
      },
      "date": 1639573231122
    },
    {
      "item": {
        "type": "factory",
        "id": "3dfe2d299013a9e3"
      },
      "id": "3dfe2d299013a9e3",
      "type": "add",
      "after": "895535a9a5a1be09",
      "date": 1639577285245
    },
    {
      "type": "edit",
      "id": "3dfe2d299013a9e3",
      "item": {
        "type": "pagefold",
        "id": "3dfe2d299013a9e3",
        "text": "~"
      },
      "date": 1639577288398
    },
    {
      "item": {
        "type": "factory",
        "id": "9cb812f6bed82e8e"
      },
      "id": "9cb812f6bed82e8e",
      "type": "add",
      "after": "3dfe2d299013a9e3",
      "date": 1639577289475
    },
    {
      "type": "edit",
      "id": "9cb812f6bed82e8e",
      "item": {
        "type": "video",
        "id": "9cb812f6bed82e8e",
        "text": "YOUTUBE"
      },
      "date": 1639577302181
    },
    {
      "type": "edit",
      "id": "9cb812f6bed82e8e",
      "item": {
        "type": "video",
        "id": "9cb812f6bed82e8e",
        "text": "YOUTUBE 3C1QQXEg_F8"
      },
      "date": 1639577311916
    },
    {
      "type": "edit",
      "id": "9cb812f6bed82e8e",
      "item": {
        "type": "video",
        "id": "9cb812f6bed82e8e",
        "text": "YOUTUBE 3C1QQXEg_F8\nre:Clojure Conference 2021 - Day 1"
      },
      "date": 1639577535007
    },
    {
      "item": {
        "type": "factory",
        "id": "2d9762b436b3e441"
      },
      "id": "2d9762b436b3e441",
      "type": "add",
      "after": "9cb812f6bed82e8e",
      "date": 1639577550073
    },
    {
      "type": "edit",
      "id": "2d9762b436b3e441",
      "item": {
        "type": "paragraph",
        "id": "2d9762b436b3e441",
        "text": "http://www.reclojure.org/ is a free, community-driven conference that brings together knowledgeable speakers to present new and exciting topics on all things Clojure and ClojureScript. "
      },
      "date": 1639577554844
    },
    {
      "type": "edit",
      "id": "2d9762b436b3e441",
      "item": {
        "type": "markdown",
        "id": "2d9762b436b3e441",
        "text": "http://www.reclojure.org/ is a free, community-driven conference that brings together knowledgeable speakers to present new and exciting topics on all things Clojure and ClojureScript. "
      },
      "date": 1639577557590
    },
    {
      "item": {
        "type": "factory",
        "id": "9d6c5744f7d9f75e"
      },
      "id": "9d6c5744f7d9f75e",
      "type": "add",
      "after": "2d9762b436b3e441",
      "date": 1639577639012
    },
    {
      "type": "edit",
      "id": "9d6c5744f7d9f75e",
      "item": {
        "type": "paragraph",
        "id": "9d6c5744f7d9f75e",
        "text": "https://github.com/nextjournal/clerk-demo"
      },
      "date": 1639577644474
    },
    {
      "type": "edit",
      "id": "9d6c5744f7d9f75e",
      "item": {
        "type": "markdown",
        "id": "9d6c5744f7d9f75e",
        "text": "https://github.com/nextjournal/clerk-demo"
      },
      "date": 1639577645525
    },
    {
      "item": {
        "type": "factory",
        "id": "aa86496dbdf3926a"
      },
      "id": "aa86496dbdf3926a",
      "type": "add",
      "after": "9d6c5744f7d9f75e",
      "date": 1639577684781
    },
    {
      "type": "edit",
      "id": "aa86496dbdf3926a",
      "item": {
        "type": "paragraph",
        "id": "aa86496dbdf3926a",
        "text": "https://nextjournal.com/mk/clerk-preview"
      },
      "date": 1639577686667
    },
    {
      "type": "edit",
      "id": "aa86496dbdf3926a",
      "item": {
        "type": "markdown",
        "id": "aa86496dbdf3926a",
        "text": "https://nextjournal.com/mk/clerk-preview"
      },
      "date": 1639577688247
    },
    {
      "type": "edit",
      "id": "aa86496dbdf3926a",
      "item": {
        "type": "markdown",
        "id": "aa86496dbdf3926a",
        "text": "Clerk [https://nextjournal.com/mk/clerk-preview site]"
      },
      "date": 1639577782092
    },
    {
      "item": {
        "type": "factory",
        "id": "e1be224612899d6c"
      },
      "id": "e1be224612899d6c",
      "type": "add",
      "after": "aa86496dbdf3926a",
      "date": 1639577834625
    },
    {
      "type": "edit",
      "id": "e1be224612899d6c",
      "item": {
        "type": "paragraph",
        "id": "e1be224612899d6c",
        "text": "Nextjournal\n@usenextjournal"
      },
      "date": 1639577836352
    },
    {
      "item": {
        "type": "factory",
        "id": "d70c1d7c755c3767"
      },
      "id": "d70c1d7c755c3767",
      "type": "add",
      "after": "e1be224612899d6c",
      "date": 1639577871165
    },
    {
      "type": "edit",
      "id": "d70c1d7c755c3767",
      "item": {
        "type": "paragraph",
        "id": "d70c1d7c755c3767",
        "text": "Konrad Hinsen â 07.12.2021\nClerk is a new notebook variant from the Clojure universe. Demo (from re:Clojure) at https://youtu.be/3C1QQXEg_F8?t=838. If those customizable views remind you of the GT inspector, that's not a coincidence. There isn't anything revolutionary in Clerk for us who are used to GT magic, but I am envious of those nice HTML/SVG/JS-based data visualizations.\n"
      },
      "date": 1639577873992
    },
    {
      "id": "d70c1d7c755c3767",
      "type": "move",
      "order": [
        "b7342a7ef4863091",
        "609b25323bc0a30d",
        "9dd7ca54b549eda4",
        "c059c691a79c48d6",
        "e033a1c1bd7303e4",
        "8969980765427613",
        "7f1292c5db2c5714",
        "2b88c3fe16f48681",
        "dc57a7bc693835ce",
        "125cb9d52f0f429a",
        "25c60cb56fc710cf",
        "7466f6f78a943542",
        "84498d2584cad1bc",
        "6b019827300b4d81",
        "e29fc2d4c0008bc8",
        "dd86d6b92d260aa9",
        "c76118a83019b17c",
        "9b3c0b10ad49b738",
        "b80e9ccfeb57b10d",
        "a7365ef9a14b5a7f",
        "4be58507ee9741d9",
        "1668769f201137b9",
        "a97a46998aad790c",
        "25762f28e5d500e7",
        "6bc5da2235dbccde",
        "cf5cde3844c3878c",
        "bdc408f8d31e93e7",
        "edb24039a4e16ec8",
        "478e52cf5718c530",
        "895535a9a5a1be09",
        "3dfe2d299013a9e3",
        "d70c1d7c755c3767",
        "9cb812f6bed82e8e",
        "2d9762b436b3e441",
        "9d6c5744f7d9f75e",
        "aa86496dbdf3926a",
        "e1be224612899d6c"
      ],
      "date": 1639577876100
    },
    {
      "type": "edit",
      "id": "d70c1d7c755c3767",
      "item": {
        "type": "paragraph",
        "id": "d70c1d7c755c3767",
        "text": "[[Konrad Hinsen]] via â 07.12.2021\nClerk is a new notebook variant from the Clojure universe. Demo (from re:Clojure) at https://youtu.be/3C1QQXEg_F8?t=838. If those customizable views remind you of the GT inspector, that's not a coincidence. There isn't anything revolutionary in Clerk for us who are used to GT magic, but I am envious of those nice HTML/SVG/JS-based data visualizations.\n"
      },
      "date": 1639577893961
    },
    {
      "type": "edit",
      "id": "d70c1d7c755c3767",
      "item": {
        "type": "paragraph",
        "id": "d70c1d7c755c3767",
        "text": "[[Konrad Hinsen]] via [https://discord.com/channels/729445214812504107/834369757452697641/917672150620594187 discord]\nClerk is a new notebook variant from the Clojure universe. Demo (from re:Clojure) at https://youtu.be/3C1QQXEg_F8?t=838. If those customizable views remind you of the GT inspector, that's not a coincidence. There isn't anything revolutionary in Clerk for us who are used to GT magic, but I am envious of those nice HTML/SVG/JS-based data visualizations.\n"
      },
      "date": 1639577920188
    },
    {
      "type": "edit",
      "id": "d70c1d7c755c3767",
      "item": {
        "type": "paragraph",
        "id": "d70c1d7c755c3767",
        "text": "[[Konrad Hinsen]] via [https://discord.com/channels/729445214812504107/834369757452697641/917672150620594187 discord]\n[[Clerk]] is a new notebook variant from the Clojure universe. Demo (from re:Clojure) at https://youtu.be/3C1QQXEg_F8?t=838. If those customizable views remind you of the GT inspector, that's not a coincidence. There isn't anything revolutionary in Clerk for us who are used to GT magic, but I am envious of those nice HTML/SVG/JS-based data visualizations.\n"
      },
      "date": 1639577932083
    },
    {
      "type": "edit",
      "id": "d70c1d7c755c3767",
      "item": {
        "type": "markdown",
        "id": "d70c1d7c755c3767",
        "text": "[[Konrad Hinsen]] via [https://discord.com/channels/729445214812504107/834369757452697641/917672150620594187 discord]\n[[Clerk]] is a new notebook variant from the Clojure universe. Demo (from re:Clojure) at https://youtu.be/3C1QQXEg_F8?t=838. If those customizable views remind you of the GT inspector, that's not a coincidence. There isn't anything revolutionary in Clerk for us who are used to GT magic, but I am envious of those nice HTML/SVG/JS-based data visualizations.\n"
      },
      "date": 1639577944769
    },
    {
      "type": "edit",
      "id": "d70c1d7c755c3767",
      "item": {
        "type": "markdown",
        "id": "d70c1d7c755c3767",
        "text": "[[Konrad Hinsen]] via [https://discord.com/channels/729445214812504107/834369757452697641/917672150620594187 discord]\n[[Clerk]] is a new notebook variant from the [[Clojure]] universe. Demo (from re:Clojure) at https://youtu.be/3C1QQXEg_F8?t=838. If those customizable views remind you of the GT inspector, that's not a coincidence. There isn't anything revolutionary in Clerk for us who are used to GT magic, but I am envious of those nice HTML/SVG/JS-based data visualizations.\n"
      },
      "date": 1639578067867
    },
    {
      "item": {
        "type": "factory",
        "id": "6265c5f1bbc36491"
      },
      "id": "6265c5f1bbc36491",
      "type": "add",
      "after": "e1be224612899d6c",
      "date": 1639578556501
    },
    {
      "type": "edit",
      "id": "6265c5f1bbc36491",
      "item": {
        "type": "pagefold",
        "id": "6265c5f1bbc36491",
        "text": "~"
      },
      "date": 1639578561279
    },
    {
      "item": {
        "type": "factory",
        "id": "2004990beb482e53"
      },
      "id": "2004990beb482e53",
      "type": "add",
      "after": "6265c5f1bbc36491",
      "date": 1639578562700
    },
    {
      "type": "edit",
      "id": "2004990beb482e53",
      "item": {
        "type": "paragraph",
        "id": "2004990beb482e53",
        "text": "https://youtu.be/3C1QQXEg_F8?t=34725"
      },
      "date": 1639578565685
    },
    {
      "type": "edit",
      "id": "6265c5f1bbc36491",
      "item": {
        "type": "pagefold",
        "id": "6265c5f1bbc36491",
        "text": "Stephen Wolfram"
      },
      "date": 1639578592846
    },
    {
      "item": {
        "type": "factory",
        "id": "86e0022fdf681696"
      },
      "id": "86e0022fdf681696",
      "type": "add",
      "after": "2004990beb482e53",
      "date": 1639578597870
    },
    {
      "type": "edit",
      "id": "86e0022fdf681696",
      "item": {
        "type": "paragraph",
        "id": "86e0022fdf681696",
        "text": "Konrad Hinsen â 09.12.2021\nWell, it's Stephen Wolfram. Who has a well-earned reputation for overselling his work. Last time I checked (a few months ago), the state of his physics project was \"we can see how something like relativity could possibly be the outcome of a hypergraph rewriting system\". It's still a very impressive achievement of course."
      },
      "date": 1639578602387
    },
    {
      "type": "edit",
      "id": "86e0022fdf681696",
      "item": {
        "type": "paragraph",
        "id": "86e0022fdf681696",
        "text": "[[Konrad Hinsen]] via [https://discord.com/channels/729445214812504107/834369757452697641/917672150620594187 discord]\nWell, it's Stephen Wolfram. Who has a well-earned reputation for overselling his work. Last time I checked (a few months ago), the state of his physics project was \"we can see how something like relativity could possibly be the outcome of a hypergraph rewriting system\". It's still a very impressive achievement of course."
      },
      "date": 1639578610515
    },
    {
      "type": "edit",
      "id": "86e0022fdf681696",
      "item": {
        "type": "paragraph",
        "id": "86e0022fdf681696",
        "text": "[[Konrad Hinsen]] via [https://discord.com/channels/729445214812504107/834369757452697641/917672150620594187 discord]\nWell, it's [[Stephen Wolfram]]. Who has a well-earned reputation for overselling his work. Last time I checked (a few months ago), the state of his physics project was \"we can see how something like relativity could possibly be the outcome of a hypergraph rewriting system\". It's still a very impressive achievement of course."
      },
      "date": 1639578655240
    },
    {
      "item": {
        "type": "factory",
        "id": "4e79b16a34794148"
      },
      "id": "4e79b16a34794148",
      "type": "add",
      "after": "86e0022fdf681696",
      "date": 1639580636233
    },
    {
      "item": {
        "type": "factory",
        "id": "eaf8d80514f41d30"
      },
      "id": "eaf8d80514f41d30",
      "type": "add",
      "after": "4e79b16a34794148",
      "date": 1639580648201
    },
    {
      "type": "edit",
      "id": "4e79b16a34794148",
      "item": {
        "type": "pagefold",
        "id": "4e79b16a34794148",
        "text": "~"
      },
      "date": 1639580652543
    },
    {
      "item": {
        "type": "factory",
        "id": "fe1c64a645e15573"
      },
      "id": "fe1c64a645e15573",
      "type": "add",
      "after": "eaf8d80514f41d30",
      "date": 1639580661665
    },
    {
      "type": "edit",
      "id": "eaf8d80514f41d30",
      "item": {
        "type": "paragraph",
        "id": "eaf8d80514f41d30",
        "text": "https://youtu.be/"
      },
      "date": 1639580662994
    },
    {
      "type": "edit",
      "id": "fe1c64a645e15573",
      "item": {
        "type": "video",
        "id": "fe1c64a645e15573",
        "text": "YOUTUBE 29MAL8pJImQ"
      },
      "date": 1639580667571
    },
    {
      "type": "remove",
      "id": "eaf8d80514f41d30",
      "date": 1639580670560
    },
    {
      "type": "add",
      "id": "833ac3a99a605a24",
      "item": {
        "type": "paragraph",
        "id": "833ac3a99a605a24",
        "text": "Wolfram Language [https://en.wikipedia.org/wiki/Wolfram_Language wikipedia]"
      },
      "after": "2004990beb482e53",
      "date": 1639580722763
    },
    {
      "type": "edit",
      "id": "833ac3a99a605a24",
      "item": {
        "type": "paragraph",
        "id": "833ac3a99a605a24",
        "text": "[[Wolfram Language]] [https://en.wikipedia.org/wiki/Wolfram_Language wikipedia]"
      },
      "date": 1639580741812
    },
    {
      "item": {
        "type": "factory",
        "id": "58f5cf4f83c4181e"
      },
      "id": "58f5cf4f83c4181e",
      "type": "add",
      "after": "fe1c64a645e15573",
      "date": 1639580763551
    },
    {
      "type": "edit",
      "id": "58f5cf4f83c4181e",
      "item": {
        "type": "reference",
        "id": "58f5cf4f83c4181e",
        "site": "c0de.academy",
        "slug": "wolfram-language",
        "title": "Wolfram Language",
        "text": "The Wolfram Language is a general multi-paradigm programming language developed by Wolfram Research, that serves as the main interfacing language for Mathematica and the Wolfram Programming Cloud - [https://en.wikipedia.org/wiki/Wolfram_Language wikipedia]"
      },
      "date": 1639580779879
    },
    {
      "id": "58f5cf4f83c4181e",
      "type": "move",
      "order": [
        "b7342a7ef4863091",
        "609b25323bc0a30d",
        "9dd7ca54b549eda4",
        "c059c691a79c48d6",
        "e033a1c1bd7303e4",
        "8969980765427613",
        "7f1292c5db2c5714",
        "2b88c3fe16f48681",
        "dc57a7bc693835ce",
        "125cb9d52f0f429a",
        "25c60cb56fc710cf",
        "7466f6f78a943542",
        "84498d2584cad1bc",
        "6b019827300b4d81",
        "e29fc2d4c0008bc8",
        "dd86d6b92d260aa9",
        "c76118a83019b17c",
        "9b3c0b10ad49b738",
        "b80e9ccfeb57b10d",
        "a7365ef9a14b5a7f",
        "4be58507ee9741d9",
        "1668769f201137b9",
        "a97a46998aad790c",
        "25762f28e5d500e7",
        "6bc5da2235dbccde",
        "cf5cde3844c3878c",
        "bdc408f8d31e93e7",
        "edb24039a4e16ec8",
        "478e52cf5718c530",
        "895535a9a5a1be09",
        "3dfe2d299013a9e3",
        "d70c1d7c755c3767",
        "9cb812f6bed82e8e",
        "2d9762b436b3e441",
        "9d6c5744f7d9f75e",
        "aa86496dbdf3926a",
        "e1be224612899d6c",
        "6265c5f1bbc36491",
        "2004990beb482e53",
        "833ac3a99a605a24",
        "58f5cf4f83c4181e",
        "86e0022fdf681696",
        "4e79b16a34794148",
        "fe1c64a645e15573"
      ],
      "date": 1639580784331
    },
    {
      "id": "86e0022fdf681696",
      "type": "move",
      "order": [
        "b7342a7ef4863091",
        "609b25323bc0a30d",
        "9dd7ca54b549eda4",
        "c059c691a79c48d6",
        "e033a1c1bd7303e4",
        "8969980765427613",
        "7f1292c5db2c5714",
        "2b88c3fe16f48681",
        "dc57a7bc693835ce",
        "125cb9d52f0f429a",
        "25c60cb56fc710cf",
        "7466f6f78a943542",
        "84498d2584cad1bc",
        "6b019827300b4d81",
        "e29fc2d4c0008bc8",
        "dd86d6b92d260aa9",
        "c76118a83019b17c",
        "9b3c0b10ad49b738",
        "b80e9ccfeb57b10d",
        "a7365ef9a14b5a7f",
        "4be58507ee9741d9",
        "1668769f201137b9",
        "a97a46998aad790c",
        "25762f28e5d500e7",
        "6bc5da2235dbccde",
        "cf5cde3844c3878c",
        "bdc408f8d31e93e7",
        "edb24039a4e16ec8",
        "478e52cf5718c530",
        "895535a9a5a1be09",
        "3dfe2d299013a9e3",
        "d70c1d7c755c3767",
        "9cb812f6bed82e8e",
        "2d9762b436b3e441",
        "9d6c5744f7d9f75e",
        "aa86496dbdf3926a",
        "e1be224612899d6c",
        "6265c5f1bbc36491",
        "86e0022fdf681696",
        "2004990beb482e53",
        "833ac3a99a605a24",
        "58f5cf4f83c4181e",
        "4e79b16a34794148",
        "fe1c64a645e15573"
      ],
      "date": 1639580792291
    },
    {
      "type": "edit",
      "id": "fe1c64a645e15573",
      "item": {
        "type": "video",
        "id": "fe1c64a645e15573",
        "text": "YOUTUBE 29MAL8pJImQ\nRailsConf 2015 - Nothing is Something"
      },
      "date": 1639580856676
    },
    {
      "item": {
        "type": "factory",
        "id": "2c174ac44e24db44"
      },
      "id": "2c174ac44e24db44",
      "type": "add",
      "after": "fe1c64a645e15573",
      "date": 1639580863220
    },
    {
      "type": "edit",
      "id": "2c174ac44e24db44",
      "item": {
        "type": "paragraph",
        "id": "2c174ac44e24db44",
        "text": "https://www.quora.com/Why-do-so-many-functional-programmers-admire-Smalltalk"
      },
      "date": 1639580864990
    },
    {
      "type": "edit",
      "id": "2c174ac44e24db44",
      "item": {
        "type": "markdown",
        "id": "2c174ac44e24db44",
        "text": "https://www.quora.com/Why-do-so-many-functional-programmers-admire-Smalltalk"
      },
      "date": 1639580865886
    },
    {
      "item": {
        "type": "factory",
        "id": "688ed199f7e988ab"
      },
      "id": "688ed199f7e988ab",
      "type": "add",
      "after": "2c174ac44e24db44",
      "date": 1639580887683
    },
    {
      "type": "edit",
      "id": "688ed199f7e988ab",
      "item": {
        "type": "markdown",
        "id": "688ed199f7e988ab",
        "text": "> Smalltalk, on the other hand, is ironically both claimed as an inspiration by more mainstream OOP and is very well-defined. Everything in the language is an object and objects can only communicate with one another by sending messages. Done (if thatâs unclear at all, hereâs a great explanation by the inimitable Sandi Metz\n). Smalltalk-style OOP is so simple itâs even used as an example fairly early on in SICP."
      },
      "date": 1639580891234
    },
    {
      "type": "edit",
      "id": "688ed199f7e988ab",
      "item": {
        "type": "markdown",
        "id": "688ed199f7e988ab",
        "text": "> Smalltalk, on the other hand, is ironically both claimed as an inspiration by more mainstream OOP and is very well-defined. Everything in the language is an object and objects can only communicate with one another by sending messages. Done (if thatâs unclear at all, hereâs a great explanation by the inimitable [[Sandi Metz]]\n). Smalltalk-style OOP is so simple itâs even used as an example fairly early on in SICP."
      },
      "date": 1639580915646
    },
    {
      "item": {
        "type": "factory",
        "id": "8da828d667293ea5"
      },
      "id": "8da828d667293ea5",
      "type": "add",
      "after": "688ed199f7e988ab",
      "date": 1639581056140
    },
    {
      "type": "edit",
      "id": "8da828d667293ea5",
      "item": {
        "type": "paragraph",
        "id": "8da828d667293ea5",
        "text": "Lisp, Smalltalk, and the Power of Symmetry"
      },
      "date": 1639581059307
    },
    {
      "type": "edit",
      "id": "8da828d667293ea5",
      "item": {
        "type": "paragraph",
        "id": "8da828d667293ea5",
        "text": "Lisp, Smalltalk, and the Power of Symmetry. [https://medium.com/smalltalk-talk/lisp-smalltalk-and-the-power-of-symmetry-8bd96aaa0c0c post]"
      },
      "date": 1639581071772
    },
    {
      "item": {
        "type": "factory",
        "id": "8f55e47641f4f62c"
      },
      "id": "8f55e47641f4f62c",
      "type": "add",
      "after": "8da828d667293ea5",
      "date": 1639581145831
    },
    {
      "type": "edit",
      "id": "8f55e47641f4f62c",
      "item": {
        "type": "markdown",
        "id": "8f55e47641f4f62c",
        "text": "> https://medium.com/smalltalk-talk/lisp-smalltalk-and-the-power-of-symmetry-8bd96aaa0c0c"
      },
      "date": 1639581149217
    },
    {
      "type": "edit",
      "id": "8f55e47641f4f62c",
      "item": {
        "type": "markdown",
        "id": "8f55e47641f4f62c",
        "text": "> The only thing that seems to be required for a language to allow this is a pervasive symmetry between programs and data. If a language allows programs and data to be treated as the same thing, then that language becomes easily and infinitely extensibleâa language of the gods. S-expressions, it turns out, are not the only way to do thisâyou can do it with objects as well. I wonder if there are still more ways we havenât yet tried?"
      },
      "date": 1639581165111
    },
    {
      "type": "add",
      "id": "e0d8fbb2231e76c3",
      "item": {
        "type": "paragraph",
        "id": "e0d8fbb2231e76c3",
        "text": "https://youtu.be/3C1QQXEg_F8?t=37991"
      },
      "after": "2004990beb482e53",
      "date": 1639581420841
    },
    {
      "type": "edit",
      "id": "2004990beb482e53",
      "item": {
        "type": "markdown",
        "id": "2004990beb482e53",
        "text": "https://youtu.be/3C1QQXEg_F8?t=34725"
      },
      "date": 1639581428415
    },
    {
      "type": "edit",
      "id": "e0d8fbb2231e76c3",
      "item": {
        "type": "markdown",
        "id": "e0d8fbb2231e76c3",
        "text": "https://youtu.be/3C1QQXEg_F8?t=37991"
      },
      "date": 1639581429578
    },
    {
      "item": {
        "type": "factory",
        "id": "51fa9034850826ec"
      },
      "id": "51fa9034850826ec",
      "type": "add",
      "after": "8f55e47641f4f62c",
      "date": 1639581552916
    },
    {
      "type": "edit",
      "id": "51fa9034850826ec",
      "item": {
        "type": "paragraph",
        "id": "51fa9034850826ec",
        "text": "\nIndeed, Smalltalk is an almost functional language. There are extensions to Smalltalk that provide functional pattern matching, e.g. map.squeak.org/package/3772b420-ba02-4fbd-ae30-8eadfc323b7b. Furthermore, Newspeak (newspeaklanguage.org) is a programming language in the tradition of Self and Smalltalk that supports immutability as one of its core concepts. â \nLukas Renggli\nAug 20 '10 at 11:44\n"
      },
      "date": 1639581561681
    },
    {
      "type": "edit",
      "id": "51fa9034850826ec",
      "item": {
        "type": "paragraph",
        "id": "51fa9034850826ec",
        "text": "https://stackoverflow.com/questions/3527753/why-is-smalltalk-not-a-functional-programming-language"
      },
      "date": 1639581572426
    },
    {
      "type": "add",
      "id": "7e787ad34f3ad1c4",
      "item": {
        "type": "paragraph",
        "id": "7e787ad34f3ad1c4",
        "text": "> Indeed, Smalltalk is an almost functional language. There are extensions to Smalltalk that provide functional pattern matching, e.g. map.squeak.org/package/3772b420-ba02-4fbd-ae30-8eadfc323b7b. Furthermore, Newspeak (newspeaklanguage.org) is a programming language in the tradition of Self and Smalltalk that supports immutability as one of its core concepts. â \nLukas Renggli\nAug 20 '10 at 11:44\n"
      },
      "after": "51fa9034850826ec",
      "date": 1639581574682
    },
    {
      "type": "edit",
      "id": "7e787ad34f3ad1c4",
      "item": {
        "type": "markdown",
        "id": "7e787ad34f3ad1c4",
        "text": "> Indeed, Smalltalk is an almost functional language. There are extensions to Smalltalk that provide functional pattern matching, e.g. map.squeak.org/package/3772b420-ba02-4fbd-ae30-8eadfc323b7b. Furthermore, Newspeak (newspeaklanguage.org) is a programming language in the tradition of Self and Smalltalk that supports immutability as one of its core concepts. â \nLukas Renggli\nAug 20 '10 at 11:44\n"
      },
      "date": 1639581575598
    },
    {
      "type": "edit",
      "id": "51fa9034850826ec",
      "item": {
        "type": "markdown",
        "id": "51fa9034850826ec",
        "text": "https://stackoverflow.com/questions/3527753/why-is-smalltalk-not-a-functional-programming-language"
      },
      "date": 1639581577625
    },
    {
      "item": {
        "type": "factory",
        "id": "efcce153eb31c5c0"
      },
      "id": "efcce153eb31c5c0",
      "type": "add",
      "after": "7e787ad34f3ad1c4",
      "date": 1639581615229
    },
    {
      "type": "edit",
      "id": "efcce153eb31c5c0",
      "item": {
        "type": "paragraph",
        "id": "efcce153eb31c5c0",
        "text": "[[Functional Pattern Matching]]"
      },
      "date": 1639581619967
    },
    {
      "type": "edit",
      "id": "e0d8fbb2231e76c3",
      "item": {
        "type": "markdown",
        "id": "e0d8fbb2231e76c3",
        "text": "https://youtu.be/3C1QQXEg_F8?t=37991\n"
      },
      "date": 1639582870210
    },
    {
      "type": "add",
      "id": "35350070154f3242",
      "item": {
        "type": "markdown",
        "id": "35350070154f3242",
        "text": "* Rulial Multiway Graph"
      },
      "after": "e0d8fbb2231e76c3",
      "date": 1639582880551
    },
    {
      "type": "edit",
      "id": "35350070154f3242",
      "item": {
        "type": "markdown",
        "id": "35350070154f3242",
        "text": "* Rulial Multiway Graph, [https://www.wolframphysics.org/bulletins/2020/06/exploring-rulial-space-the-case-of-turing-machines/ page]"
      },
      "date": 1639582914409
    },
    {
      "item": {
        "type": "factory",
        "id": "02075712d858c25c"
      },
      "id": "02075712d858c25c",
      "type": "add",
      "after": "efcce153eb31c5c0",
      "date": 1639605193013
    },
    {
      "type": "edit",
      "id": "02075712d858c25c",
      "item": {
        "type": "pagefold",
        "id": "02075712d858c25c",
        "text": "~"
      },
      "date": 1639605196996
    },
    {
      "item": {
        "type": "factory",
        "id": "6eaa2df470ae0cd9"
      },
      "id": "6eaa2df470ae0cd9",
      "type": "add",
      "after": "02075712d858c25c",
      "date": 1639605198509
    },
    {
      "type": "edit",
      "id": "6eaa2df470ae0cd9",
      "item": {
        "type": "paragraph",
        "id": "6eaa2df470ae0cd9",
        "text": "[[Visualizing the Nix Store with Pharo]]"
      },
      "date": 1639605209431
    },
    {
      "type": "edit",
      "id": "6eaa2df470ae0cd9",
      "item": {
        "type": "paragraph",
        "id": "6eaa2df470ae0cd9",
        "text": "[[Visualizing the Nix Store]] with Pharo"
      },
      "date": 1639605224358
    },
    {
      "item": {
        "type": "factory",
        "id": "2114db619e5d47a8"
      },
      "id": "2114db619e5d47a8",
      "type": "add",
      "after": "6eaa2df470ae0cd9",
      "date": 1639605788074
    },
    {
      "type": "edit",
      "id": "2114db619e5d47a8",
      "item": {
        "type": "pagefold",
        "id": "2114db619e5d47a8",
        "text": "Dr Max Liboiron"
      },
      "date": 1639605791277
    },
    {
      "item": {
        "type": "factory",
        "id": "66a030083865550b"
      },
      "id": "66a030083865550b",
      "type": "add",
      "after": "2114db619e5d47a8",
      "date": 1639605800999
    },
    {
      "type": "edit",
      "id": "66a030083865550b",
      "item": {
        "type": "grep",
        "id": "66a030083865550b",
        "text": "We aren't allowed to grade for \"participation\" in class here (which is good IMO), but I do have \"colleague points\" that changes the culture of the classroom, creates co-learning, and meets disability accommodations. Students can get one point for:"
      },
      "date": 1639605804553
    },
    {
      "type": "remove",
      "id": "66a030083865550b",
      "date": 1639605819426
    },
    {
      "item": {
        "type": "factory",
        "id": "81d9bee03d86f1d1"
      },
      "id": "81d9bee03d86f1d1",
      "type": "add",
      "after": "2114db619e5d47a8",
      "date": 1639605820370
    },
    {
      "type": "edit",
      "id": "81d9bee03d86f1d1",
      "item": {
        "type": "paragraph",
        "id": "81d9bee03d86f1d1",
        "text": "We aren't allowed to grade for \"participation\" in class here (which is good IMO), but I do have \"colleague points\" that changes the culture of the classroom, creates co-learning, and meets disability accommodations. Students can get one point for: https://twitter.com/MaxLiboiron/status/1470771504145215499?s=20"
      },
      "date": 1639605822661
    },
    {
      "type": "edit",
      "id": "81d9bee03d86f1d1",
      "item": {
        "type": "paragraph",
        "id": "81d9bee03d86f1d1",
        "text": "We aren't allowed to grade for \"participation\" in class here (which is good IMO), but I do have \"colleague points\" that changes the culture of the classroom, creates co-learning, and meets disability accommodations. Students can get one point for: [https://twitter.com/MaxLiboiron/status/1470771504145215499 twitter]"
      },
      "date": 1639605845580
    },
    {
      "type": "edit",
      "id": "81d9bee03d86f1d1",
      "item": {
        "type": "paragraph",
        "id": "81d9bee03d86f1d1",
        "text": "via [https://twitter.com/MaxLiboiron/status/1470771504145215499 twitter] We aren't allowed to grade for \"participation\" in class here (which is good IMO), but I do have \"colleague points\" that changes the culture of the classroom, creates co-learning, and meets disability accommodations. Students can get one point for: "
      },
      "date": 1639605868594
    },
    {
      "item": {
        "type": "factory",
        "id": "68ed01c2c325f903"
      },
      "id": "68ed01c2c325f903",
      "type": "add",
      "after": "81d9bee03d86f1d1",
      "date": 1639605880961
    },
    {
      "type": "edit",
      "id": "68ed01c2c325f903",
      "item": {
        "type": "markdown",
        "id": "68ed01c2c325f903",
        "text": "- Taking class notes: Every class, we have two notetakers who post their notes online.\n- Timekeeping: I put the \"Table of contents\" for a class session up with the timing of each, and they help me stay paced & we always end on time"
      },
      "date": 1639605883499
    },
    {
      "item": {
        "type": "factory",
        "id": "a9431385b80732bc"
      },
      "id": "a9431385b80732bc",
      "type": "add",
      "after": "68ed01c2c325f903",
      "date": 1639605890576
    },
    {
      "type": "edit",
      "id": "68ed01c2c325f903",
      "item": {
        "type": "markdown",
        "id": "68ed01c2c325f903",
        "text": "- Taking class notes: Every class, we have two notetakers who post their notes online.\n- Timekeeping: I put the \"Table of contents\" for a class session up with the timing of each, and they help me stay paced & we always end on time\n- participate in making a class contract for shared expectations for how we all want to be treated (this is facilitated in the first two classes)\n- email an author of a text and share how it changed their thinking (based on \n@eatingpolitics\n assignment)"
      },
      "date": 1639605894610
    },
    {
      "type": "edit",
      "id": "68ed01c2c325f903",
      "item": {
        "type": "markdown",
        "id": "68ed01c2c325f903",
        "text": "- Taking class notes: Every class, we have two notetakers who post their notes online.\n- Timekeeping: I put the \"Table of contents\" for a class session up with the timing of each, and they help me stay paced & we always end on time\n- participate in making a class contract for shared expectations for how we all want to be treated (this is facilitated in the first two classes)\n- email an author of a text and share how it changed their thinking (based on @eatingpolitics assignment)\n- write a letter to future students: on the last day, they write a letter to next semester's students with tips and tricks for navigating the course (& my teaching/grading style) they wish they knew at the start\n- any form of mutual aid eg proof reading, showing the library, etc"
      },
      "date": 1639605919431
    },
    {
      "type": "edit",
      "id": "68ed01c2c325f903",
      "item": {
        "type": "markdown",
        "id": "68ed01c2c325f903",
        "text": "- Taking class notes: Every class, we have two notetakers who post their notes online.\n- Timekeeping: I put the \"Table of contents\" for a class session up with the timing of each, and they help me stay paced & we always end on time\n- participate in making a class contract for shared expectations for how we all want to be treated (this is facilitated in the first two classes)\n- email an author of a text and share how it changed their thinking (based on @eatingpolitics assignment)\n- write a letter to future students: on the last day, they write a letter to next semester's students with tips and tricks for navigating the course (& my teaching/grading style) they wish they knew at the start\n- any form of mutual aid eg proof reading, showing the library, etc\nThere are others, too, but this is the gist. Students say it changes the class from competitive to cooperative and they feel better asking for help (or collegiality!). They are graded /10 for the semester (changes with course size). They can get 11/10."
      },
      "date": 1639605934509
    },
    {
      "type": "edit",
      "id": "68ed01c2c325f903",
      "item": {
        "type": "markdown",
        "id": "68ed01c2c325f903",
        "text": "- Taking class notes: Every class, we have two notetakers who post their notes online.\n- Timekeeping: I put the \"Table of contents\" for a class session up with the timing of each, and they help me stay paced & we always end on time\n- participate in making a class contract for shared expectations for how we all want to be treated (this is facilitated in the first two classes)\n- email an author of a text and share how it changed their thinking (based on @eatingpolitics assignment)\n- write a letter to future students: on the last day, they write a letter to next semester's students with tips and tricks for navigating the course (& my teaching/grading style) they wish they knew at the start\n- any form of mutual aid eg proof reading, showing the library, etc\n\nThere are others, too, but this is the gist. Students say it changes the class from competitive to cooperative and they feel better asking for help (or collegiality!). They are graded /10 for the semester (changes with course size). They can get 11/10."
      },
      "date": 1639605941389
    },
    {
      "type": "edit",
      "id": "a9431385b80732bc",
      "item": {
        "type": "paragraph",
        "id": "a9431385b80732bc",
        "text": "You'll notice most of these can be done by introverts w/o having to become extroverts, a core issue I have when participation = talking."
      },
      "date": 1639605961512
    },
    {
      "type": "edit",
      "id": "68ed01c2c325f903",
      "item": {
        "type": "markdown",
        "id": "68ed01c2c325f903",
        "text": "- Taking class notes: Every class, we have two notetakers who post their notes online.\n- Timekeeping: I put the \"Table of contents\" for a class session up with the timing of each, and they help me stay paced & we always end on time\n- participate in making a class contract for shared expectations for how we all want to be treated (this is facilitated in the first two classes)\n- email an author of a text and share how it changed their thinking (based on @eatingpolitics assignment)\n"
      },
      "date": 1639606146041
    },
    {
      "type": "add",
      "id": "ecb669ed5812ee31",
      "item": {
        "type": "markdown",
        "id": "ecb669ed5812ee31",
        "text": "- write a letter to future students: on the last day, they write a letter to next semester's students with tips and tricks for navigating the course (& my teaching/grading style) they wish they knew at the start\n- any form of mutual aid eg proof reading, showing the library, etc\n\nThere are others, too, but this is the gist. Students say it changes the class from competitive to cooperative and they feel better asking for help (or collegiality!). They are graded /10 for the semester (changes with course size). They can get 11/10."
      },
      "after": "68ed01c2c325f903",
      "date": 1639606148933
    },
    {
      "item": {
        "type": "factory",
        "id": "8ff7f4954f0b7848"
      },
      "id": "8ff7f4954f0b7848",
      "type": "add",
      "after": "a9431385b80732bc",
      "date": 1639606151114
    },
    {
      "type": "edit",
      "id": "8ff7f4954f0b7848",
      "item": {
        "type": "html",
        "id": "8ff7f4954f0b7848",
        "text": "<img src=\"https://pbs.twimg.com/media/FGkJFC3XsAAe41o?format=jpg&name=900x900\">"
      },
      "date": 1639606162324
    },
    {
      "type": "edit",
      "id": "8ff7f4954f0b7848",
      "item": {
        "type": "html",
        "id": "8ff7f4954f0b7848",
        "text": "<img src=\"https://pbs.twimg.com/media/FGkJFC3XsAAe41o\">"
      },
      "date": 1639606184616
    },
    {
      "type": "edit",
      "id": "8ff7f4954f0b7848",
      "item": {
        "type": "html",
        "id": "8ff7f4954f0b7848",
        "text": "<img src=\"https://pbs.twimg.com/media/FGkJFC3XsAAe41o?format=jpg&name=900x900\">"
      },
      "date": 1639606205900
    },
    {
      "type": "edit",
      "id": "8ff7f4954f0b7848",
      "item": {
        "type": "html",
        "id": "8ff7f4954f0b7848",
        "text": "<center><img width=\"100%\" src=\"https://pbs.twimg.com/media/FGkJFC3XsAAe41o?format=jpg&name=900x900\"></center>"
      },
      "date": 1639606249727
    },
    {
      "id": "8ff7f4954f0b7848",
      "type": "move",
      "order": [
        "b7342a7ef4863091",
        "609b25323bc0a30d",
        "9dd7ca54b549eda4",
        "c059c691a79c48d6",
        "e033a1c1bd7303e4",
        "8969980765427613",
        "7f1292c5db2c5714",
        "2b88c3fe16f48681",
        "dc57a7bc693835ce",
        "125cb9d52f0f429a",
        "25c60cb56fc710cf",
        "7466f6f78a943542",
        "84498d2584cad1bc",
        "6b019827300b4d81",
        "e29fc2d4c0008bc8",
        "dd86d6b92d260aa9",
        "c76118a83019b17c",
        "9b3c0b10ad49b738",
        "b80e9ccfeb57b10d",
        "a7365ef9a14b5a7f",
        "4be58507ee9741d9",
        "1668769f201137b9",
        "a97a46998aad790c",
        "25762f28e5d500e7",
        "6bc5da2235dbccde",
        "cf5cde3844c3878c",
        "bdc408f8d31e93e7",
        "edb24039a4e16ec8",
        "478e52cf5718c530",
        "895535a9a5a1be09",
        "3dfe2d299013a9e3",
        "d70c1d7c755c3767",
        "9cb812f6bed82e8e",
        "2d9762b436b3e441",
        "9d6c5744f7d9f75e",
        "aa86496dbdf3926a",
        "e1be224612899d6c",
        "6265c5f1bbc36491",
        "86e0022fdf681696",
        "2004990beb482e53",
        "e0d8fbb2231e76c3",
        "35350070154f3242",
        "833ac3a99a605a24",
        "58f5cf4f83c4181e",
        "4e79b16a34794148",
        "fe1c64a645e15573",
        "2c174ac44e24db44",
        "688ed199f7e988ab",
        "8da828d667293ea5",
        "8f55e47641f4f62c",
        "51fa9034850826ec",
        "7e787ad34f3ad1c4",
        "efcce153eb31c5c0",
        "02075712d858c25c",
        "6eaa2df470ae0cd9",
        "2114db619e5d47a8",
        "81d9bee03d86f1d1",
        "68ed01c2c325f903",
        "8ff7f4954f0b7848",
        "ecb669ed5812ee31",
        "a9431385b80732bc"
      ],
      "date": 1639606262036
    },
    {
      "type": "edit",
      "id": "68ed01c2c325f903",
      "item": {
        "type": "markdown",
        "id": "68ed01c2c325f903",
        "text": "- Taking class notes: Every class, we have two notetakers who post their notes online.\n- Timekeeping: I put the \"Table of contents\" for a class session up with the timing of each, and they help me stay paced & we always end on time\n- participate in making a class contract for shared expectations for how we all want to be treated (this is facilitated in the first two classes)\n- [[email an author]] of a text and share how it changed their thinking (based on @eatingpolitics assignment)\n"
      },
      "date": 1639606281168
    },
    {
      "type": "add",
      "id": "446653f2934a5382",
      "item": {
        "type": "paragraph",
        "id": "446653f2934a5382",
        "text": "[https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163903563476772wBGfz:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
      },
      "after": "7f1292c5db2c5714",
      "date": 1639607097739
    },
    {
      "type": "edit",
      "id": "446653f2934a5382",
      "item": {
        "type": "paragraph",
        "id": "446653f2934a5382",
        "text": "marcpierson via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$163903563476772wBGfz:matrix.org?via=matrix.org&via=dreyeck.freedombox.rocks&via=matrix.goatpen.co matrix]"
      },
      "date": 1639607111064
    },
    {
      "type": "add",
      "id": "35bc29caaef25d11",
      "item": {
        "type": "paragraph",
        "id": "35bc29caaef25d11",
        "text": "> "
      },
      "after": "446653f2934a5382",
      "date": 1639607120859
    },
    {
      "type": "edit",
      "id": "35bc29caaef25d11",
      "item": {
        "type": "paragraph",
        "id": "35bc29caaef25d11",
        "text": "> Ralf, will your plug in have clickable node and link labels that create ghost pages or open existing pages with that slug?"
      },
      "date": 1639607123961
    },
    {
      "type": "edit",
      "id": "35bc29caaef25d11",
      "item": {
        "type": "markdown",
        "id": "35bc29caaef25d11",
        "text": "> Ralf, will your plug in have clickable node and link labels that create ghost pages or open existing pages with that slug?"
      },
      "date": 1639607125299
    },
    {
      "id": "446653f2934a5382",
      "type": "remove",
      "date": 1639607142277
    },
    {
      "id": "35bc29caaef25d11",
      "type": "remove",
      "date": 1639607144769
    }
  ]
}