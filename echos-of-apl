{
  "title": "Echos of APL",
  "story": [
    {
      "type": "paragraph",
      "id": "3053af99b31581c2",
      "text": "Not only do developers frequently conjure up Ken Iverson ghosts, they also invariably turn into little apostles of array programming that won’t shut up about how cutting down on all those goddamn loops clarifies and simplifies algorithms. How learning to think about operating on entire arrays, versus one dinky number at a time, frees the mind. [https://analyzethedatanotthedrivel.org/2018/03/31/numpy-another-iverson-ghost/ post]"
    },
    {
      "type": "paragraph",
      "id": "65b0548aa6bbec0d",
      "text": "The thesis of Iverson's influential paper is that the advantages of executability and universality found in programming languages can be effectively combined, in a single coherent language, with the advantages offered by mathematical notation. [https://www.jsoftware.com/papers/tot.htm post]"
    },
    {
      "type": "paragraph",
      "id": "8c8a5902685d678a",
      "text": "The Python people fixed Python with NumPy. Pythonistas reluctantly embraced NumPy but quickly went apostolic! Now books like Elegant SciPy and the entire SciPy toolset that been built on NumPy take it for granted."
    },
    {
      "type": "paragraph",
      "id": "e06847b8a5691e53",
      "text": "The NumPy examples in this post are from the SciPy.org NumPy quick start tutorial. For each NumPy statement, I have provided a J equivalent. J is a descendant of APL. It was largely designed by the same man: Ken Iverson."
    },
    {
      "type": "code",
      "id": "ab3331c1f3956873",
      "text": "a = np.arange(15).reshape(3, 5)\na =. 3 5 $ i. 15\n \na = np.array([2,3,4])\na =. 2 3 4\n \nb = np.array([(1.5,2,3), (4,5,6)])\nb =. 1.5 2 3 ,: 4 5 6\n \nc = np.array( [ [1,2], [3,4] ], dtype=complex )\nj. 1 2 ,: 3 4\n \nnp.zeros( (3,4) )\n3 4 $ 0\n \nnp.empty( (2,3) )\n 2 3 $ 0.0001 "
    },
    {
      "type": "pagefold",
      "id": "8597530259e574dd",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "d3f7f0071f298a0e",
      "text": "The author provides many more examples. This would be most interesting to folks who have some J and NumPy experience."
    },
    {
      "type": "paragraph",
      "id": "36d5f98dbb2bc47d",
      "text": "Needless to say, J can be quite cryptic to those who have not learned its basic syntax and idiomatic usage. Conversely, J can be amazingly expressive to those who have. We can get a feeling for its expressiveness without learning J by simply browsing the large collection of J idioms called the J Phrase Book."
    },
    {
      "type": "paragraph",
      "id": "bd35f925a3916c3c",
      "text": "[https://code.jsoftware.com/wiki/JPhrases code.jsoftware.com/wiki/JPhrases]"
    },
    {
      "type": "pagefold",
      "id": "5482f840a286ed25",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "4b97374feb50c184",
      "text": "The secret of APL’s popularity was simple: learning all the alien symbols is a one-time investment, but the leverage you as a programmer gain is for life. APL deserves its renaissance too. [https://wordsandbuttons.online/apl_deserves_its_renaissance_too.html post]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Echos of APL",
        "story": []
      },
      "date": 1630987578637
    },
    {
      "item": {
        "type": "factory",
        "id": "3053af99b31581c2"
      },
      "id": "3053af99b31581c2",
      "type": "add",
      "date": 1630987608944
    },
    {
      "type": "edit",
      "id": "3053af99b31581c2",
      "item": {
        "type": "paragraph",
        "id": "3053af99b31581c2",
        "text": "Not only do developers frequently conjure up Ken Iverson ghosts, they also invariably turn into little apostles of array programming that won’t shut up about how cutting down on all those goddamn loops clarifies and simplifies algorithms. How learning to think about operating on entire arrays, versus one dinky number at a time, frees the mind. Why it’s almost as if array programming is a tool of thought."
      },
      "date": 1630987625940
    },
    {
      "type": "edit",
      "id": "3053af99b31581c2",
      "item": {
        "type": "paragraph",
        "id": "3053af99b31581c2",
        "text": "Not only do developers frequently conjure up Ken Iverson ghosts, they also invariably turn into little apostles of array programming that won’t shut up about how cutting down on all those goddamn loops clarifies and simplifies algorithms. How learning to think about operating on entire arrays, versus one dinky number at a time, frees the mind. It’s as if array programming is a tool of thought."
      },
      "date": 1630987653884
    },
    {
      "type": "edit",
      "id": "3053af99b31581c2",
      "item": {
        "type": "paragraph",
        "id": "3053af99b31581c2",
        "text": "Not only do developers frequently conjure up Ken Iverson ghosts, they also invariably turn into little apostles of array programming that won’t shut up about how cutting down on all those goddamn loops clarifies and simplifies algorithms. How learning to think about operating on entire arrays, versus one dinky number at a time, frees the mind. "
      },
      "date": 1630987677893
    },
    {
      "type": "edit",
      "id": "3053af99b31581c2",
      "item": {
        "type": "paragraph",
        "id": "3053af99b31581c2",
        "text": "Not only do developers frequently conjure up Ken Iverson ghosts, they also invariably turn into little apostles of array programming that won’t shut up about how cutting down on all those goddamn loops clarifies and simplifies algorithms. How learning to think about operating on entire arrays, versus one dinky number at a time, frees the mind. [https://analyzethedatanotthedrivel.org/2018/03/31/numpy-another-iverson-ghost/ post]"
      },
      "date": 1630987789317
    },
    {
      "type": "add",
      "id": "65b0548aa6bbec0d",
      "item": {
        "type": "paragraph",
        "id": "65b0548aa6bbec0d",
        "text": "The thesis of Iverson's influential paper is that the advantages of executability and universality found in programming languages can be effectively combined, in a single coherent language, with the advantages offered by mathematical notation. "
      },
      "after": "3053af99b31581c2",
      "date": 1630987907098
    },
    {
      "type": "edit",
      "id": "65b0548aa6bbec0d",
      "item": {
        "type": "paragraph",
        "id": "65b0548aa6bbec0d",
        "text": "The thesis of Iverson's influential paper is that the advantages of executability and universality found in programming languages can be effectively combined, in a single coherent language, with the advantages offered by mathematical notation. [https://www.jsoftware.com/papers/tot.htm post]"
      },
      "date": 1630987925124
    },
    {
      "type": "add",
      "id": "8c8a5902685d678a",
      "item": {
        "type": "paragraph",
        "id": "8c8a5902685d678a",
        "text": "The Python people fixed Python with NumPy. Pythonistas reluctantly embraced NumPy but quickly went apostolic! Now books like Elegant SciPy and the entire SciPy toolset that been built on NumPy take it for granted."
      },
      "after": "65b0548aa6bbec0d",
      "date": 1630988002100
    },
    {
      "type": "add",
      "id": "e06847b8a5691e53",
      "item": {
        "type": "paragraph",
        "id": "e06847b8a5691e53",
        "text": "The NumPy examples in this post are from the SciPy.org NumPy quick start tutorial. For each NumPy statement, I have provided a J equivalent. J is a descendant of APL. It was largely designed by the same man: Ken Iverson."
      },
      "after": "8c8a5902685d678a",
      "date": 1630988129658
    },
    {
      "item": {
        "type": "factory",
        "id": "ab3331c1f3956873"
      },
      "id": "ab3331c1f3956873",
      "type": "add",
      "after": "e06847b8a5691e53",
      "date": 1630988292478
    },
    {
      "type": "edit",
      "id": "ab3331c1f3956873",
      "item": {
        "type": "code",
        "id": "ab3331c1f3956873",
        "text": "a = np.arange(15).reshape(3, 5)\na =. 3 5 $ i. 15\n \na = np.array([2,3,4])\na =. 2 3 4\n \nb = np.array([(1.5,2,3), (4,5,6)])\nb =. 1.5 2 3 ,: 4 5 6\n \nc = np.array( [ [1,2], [3,4] ], dtype=complex )\nj. 1 2 ,: 3 4\n \nnp.zeros( (3,4) )\n3 4 $ 0\n \nnp.empty( (2,3) )\n 2 3 $ 0.0001 "
      },
      "date": 1630988297634
    },
    {
      "item": {
        "type": "factory",
        "id": "8597530259e574dd"
      },
      "id": "8597530259e574dd",
      "type": "add",
      "after": "ab3331c1f3956873",
      "date": 1630988376761
    },
    {
      "type": "edit",
      "id": "8597530259e574dd",
      "item": {
        "type": "pagefold",
        "id": "8597530259e574dd",
        "text": "."
      },
      "date": 1630988384323
    },
    {
      "item": {
        "type": "factory",
        "id": "d3f7f0071f298a0e"
      },
      "id": "d3f7f0071f298a0e",
      "type": "add",
      "after": "8597530259e574dd",
      "date": 1630988386524
    },
    {
      "type": "edit",
      "id": "d3f7f0071f298a0e",
      "item": {
        "type": "paragraph",
        "id": "d3f7f0071f298a0e",
        "text": "The author provides many more examples. This would be most interesting to folks who have some J and NumPy experience."
      },
      "date": 1630988476560
    },
    {
      "type": "add",
      "id": "36d5f98dbb2bc47d",
      "item": {
        "type": "paragraph",
        "id": "36d5f98dbb2bc47d",
        "text": "Needless to say, J can be quite cryptic to those who have not learned its basic syntax and idiomatic usage. Conversely, J can be amazingly expressive to those who have. We can get a feeling for its expressiveness without learning J by simply browsing the large collection of J idioms called the J Phrase Book. Here is an online version of the book."
      },
      "after": "d3f7f0071f298a0e",
      "date": 1630988614025
    },
    {
      "type": "edit",
      "id": "36d5f98dbb2bc47d",
      "item": {
        "type": "paragraph",
        "id": "36d5f98dbb2bc47d",
        "text": "Needless to say, J can be quite cryptic to those who have not learned its basic syntax and idiomatic usage. Conversely, J can be amazingly expressive to those who have. We can get a feeling for its expressiveness without learning J by simply browsing the large collection of J idioms called the J Phrase Book. Here is an online version of the book. [https://code.jsoftware.com/wiki/JPhrases/Contents phrases]"
      },
      "date": 1630988670748
    },
    {
      "type": "edit",
      "id": "36d5f98dbb2bc47d",
      "item": {
        "type": "paragraph",
        "id": "36d5f98dbb2bc47d",
        "text": "Needless to say, J can be quite cryptic to those who have not learned its basic syntax and idiomatic usage. Conversely, J can be amazingly expressive to those who have. We can get a feeling for its expressiveness without learning J by simply browsing the large collection of J idioms called the J Phrase Book. Here is an online version of the book."
      },
      "date": 1630988797610
    },
    {
      "type": "add",
      "id": "bd35f925a3916c3c",
      "item": {
        "type": "paragraph",
        "id": "bd35f925a3916c3c",
        "text": "[https://code.jsoftware.com/wiki/JPhrases/Contents phrases]"
      },
      "after": "36d5f98dbb2bc47d",
      "date": 1630988820210
    },
    {
      "type": "edit",
      "id": "bd35f925a3916c3c",
      "item": {
        "type": "paragraph",
        "id": "bd35f925a3916c3c",
        "text": "[https://code.jsoftware.com/wiki/JPhrases https://code.jsoftware.com/wiki/JPhrases]"
      },
      "date": 1630988878469
    },
    {
      "type": "edit",
      "id": "bd35f925a3916c3c",
      "item": {
        "type": "paragraph",
        "id": "bd35f925a3916c3c",
        "text": "[https://code.jsoftware.com/wiki/JPhrases code.jsoftware.com/wiki/JPhrases]"
      },
      "date": 1630988887686
    },
    {
      "type": "edit",
      "id": "36d5f98dbb2bc47d",
      "item": {
        "type": "paragraph",
        "id": "36d5f98dbb2bc47d",
        "text": "Needless to say, J can be quite cryptic to those who have not learned its basic syntax and idiomatic usage. Conversely, J can be amazingly expressive to those who have. We can get a feeling for its expressiveness without learning J by simply browsing the large collection of J idioms called the J Phrase Book."
      },
      "date": 1630988901266
    },
    {
      "item": {
        "type": "factory",
        "id": "5482f840a286ed25"
      },
      "id": "5482f840a286ed25",
      "type": "add",
      "after": "bd35f925a3916c3c",
      "date": 1669502195236
    },
    {
      "type": "edit",
      "id": "5482f840a286ed25",
      "item": {
        "type": "pagefold",
        "id": "5482f840a286ed25",
        "text": "."
      },
      "date": 1669502198631
    },
    {
      "item": {
        "type": "factory",
        "id": "4b97374feb50c184"
      },
      "id": "4b97374feb50c184",
      "type": "add",
      "after": "5482f840a286ed25",
      "date": 1669502200361
    },
    {
      "type": "edit",
      "id": "4b97374feb50c184",
      "item": {
        "type": "paragraph",
        "id": "4b97374feb50c184",
        "text": "The secret of APL’s popularity was simple: learning all the alien symbols is a one-time investment, and expressiveness — the leverage you as a programmer gain — is for life."
      },
      "date": 1669502206310
    },
    {
      "type": "edit",
      "id": "4b97374feb50c184",
      "item": {
        "type": "paragraph",
        "id": "4b97374feb50c184",
        "text": "The secret of APL’s popularity was simple: learning all the alien symbols is a one-time investment, but the leverage you as a programmer gain is for life."
      },
      "date": 1669502240001
    },
    {
      "type": "edit",
      "id": "4b97374feb50c184",
      "item": {
        "type": "paragraph",
        "id": "4b97374feb50c184",
        "text": "The secret of APL’s popularity was simple: learning all the alien symbols is a one-time investment, but the leverage you as a programmer gain is for life. APL deserves its renaissance too."
      },
      "date": 1669502260885
    },
    {
      "type": "edit",
      "id": "4b97374feb50c184",
      "item": {
        "type": "paragraph",
        "id": "4b97374feb50c184",
        "text": "The secret of APL’s popularity was simple: learning all the alien symbols is a one-time investment, but the leverage you as a programmer gain is for life. APL deserves its renaissance too. [https://wordsandbuttons.online/apl_deserves_its_renaissance_too.html post]"
      },
      "date": 1669502278476
    },
    {
      "type": "fork",
      "site": "found.ward.bay.wiki.org",
      "date": 1670942588687
    }
  ]
}