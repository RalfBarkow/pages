{
  "title": "Pickle Format",
  "story": [
    {
      "type": "paragraph",
      "id": "11b68cdb905b842f",
      "text": "Pickle formats are efficient formats to support transport, marshaling or serialization of objects [17]. Riggs defines the following: ‘Pickling is the process of creating a serialized representation of objects. Pickling defines the serialized form to include meta information that identifies the type of each object and the relationships between objects within a stream. Values and types are serialized with enough information to insure that the equivalent typed object and the objects to which it refers can be recreated. Unpickling is the complementary process of recreating objects from the serialized representation.’ (extracted from [17])"
    },
    {
      "type": "paragraph",
      "id": "223526a1eea1d18d",
      "text": "[[Fuel]]’s pickle format works this way: during serialization, it first performs an analysis phase, which is a first traversal of the graph. During such traversal, each object is associated to a specific cluster. Then, Fuel first writes the instances (vertexes in the object graph) and after that, the references (edges). While materializing, Fuel first materializes the instances. Because all the objects of a cluster have the same type, Fuel stores and reads that information in the stream only once. The materialization can be done in a bulk way (it can just iterate and instantiate the objects). Finally, Fuel iterates and sets the references for each of the materialized objects. Even if the main goal of Fuel is materialization speed, the benchmarks of Section 6 show that we also have almost the best speed on serialization."
    },
    {
      "type": "paragraph",
      "id": "99d1c0053cc6cd86",
      "text": "⇒ [[Analysis Phase]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Pickle Format",
        "story": []
      },
      "date": 1666643663323
    },
    {
      "item": {
        "type": "factory",
        "id": "11b68cdb905b842f"
      },
      "id": "11b68cdb905b842f",
      "type": "add",
      "date": 1666643677497
    },
    {
      "type": "edit",
      "id": "11b68cdb905b842f",
      "item": {
        "type": "paragraph",
        "id": "11b68cdb905b842f",
        "text": "Pickle formats are efficient formats to support transport, marshaling or serialization of objects [17]. Riggs defines the following: ‘Pickling is the process of creating a serialized representation of objects. Pickling defines the serialized form to include meta information that identifies the type of each object and the relationships between objects within a stream. Values and types are serialized with enough information to insure that the equivalent typed object and the objects to which it refers can be recreated. Unpickling is the complementary process of recreating objects from the serialized representation.’ (extracted from [17])"
      },
      "date": 1666643679139
    },
    {
      "item": {
        "type": "factory",
        "id": "223526a1eea1d18d"
      },
      "id": "223526a1eea1d18d",
      "type": "add",
      "after": "11b68cdb905b842f",
      "date": 1666643720891
    },
    {
      "type": "edit",
      "id": "223526a1eea1d18d",
      "item": {
        "type": "paragraph",
        "id": "223526a1eea1d18d",
        "text": "[[Fuel]]’s pickle format works this way: during serialization, it first performs an analysis phase, which is a first traversal of the graph. During such traversal, each object is associated to a specific cluster. Then, Fuel first writes the instances (vertexes in the object graph) and after that, the references (edges). While materializing, Fuel first materializes the instances. Because all the objects of a cluster have the same type, Fuel stores and reads that information in the stream only once."
      },
      "date": 1666643729804
    },
    {
      "type": "edit",
      "id": "223526a1eea1d18d",
      "item": {
        "type": "paragraph",
        "id": "223526a1eea1d18d",
        "text": "[[Fuel]]’s pickle format works this way: during serialization, it first performs an analysis phase, which is a first traversal of the graph. During such traversal, each object is associated to a specific cluster. Then, Fuel first writes the instances (vertexes in the object graph) and after that, the references (edges). While materializing, Fuel first materializes the instances. Because all the objects of a cluster have the same type, Fuel stores and reads that information in the stream only once. The materialization can be done in a bulk way (it can just iterate and instantiate the objects). Finally, Fuel iterates and sets the references for each of the materialized objects. Even if the main goal of Fuel is materialization speed, the benchmarks of Section 6 show that we also have almost the best speed on serialization."
      },
      "date": 1666643809009
    },
    {
      "item": {
        "type": "factory",
        "id": "99d1c0053cc6cd86"
      },
      "id": "99d1c0053cc6cd86",
      "type": "add",
      "after": "223526a1eea1d18d",
      "date": 1666644403428
    },
    {
      "type": "edit",
      "id": "99d1c0053cc6cd86",
      "item": {
        "type": "paragraph",
        "id": "99d1c0053cc6cd86",
        "text": "[[Analysis phase]]"
      },
      "date": 1666644413060
    },
    {
      "type": "edit",
      "id": "99d1c0053cc6cd86",
      "item": {
        "type": "paragraph",
        "id": "99d1c0053cc6cd86",
        "text": "[[Analysis Phase]]"
      },
      "date": 1666644422063
    },
    {
      "type": "edit",
      "id": "99d1c0053cc6cd86",
      "item": {
        "type": "paragraph",
        "id": "99d1c0053cc6cd86",
        "text": "⇒ [[Analysis Phase]]"
      },
      "date": 1666644428518
    }
  ]
}