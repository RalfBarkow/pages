{
  "title": "2022-06-14",
  "story": [
    {
      "type": "paragraph",
      "id": "fd1c72403ea02faa",
      "text": "⇒ [[Min/Max Envelope Acquisition and Display]] ⇒ [[Electronic Music Production]] ⇒ [[lambeq]]"
    },
    {
      "type": "reference",
      "id": "92866e696a045b0e",
      "site": "code.fed.wiki.org",
      "slug": "minmax-envelope-acquisition-and-display",
      "title": "Min/Max Envelope Acquisition and Display",
      "text": "I had been interested in how slow signals looked better on a meter while fast signals looked better on a scope. On an early visit to Tektronix I suggested to [[Cal Diller]] that a slow scrolling display would make a scope a good meter. This was judged a good idea but too expensive given the cost of memory at the time."
    },
    {
      "type": "markdown",
      "id": "f440b5677a74adeb",
      "text": "> History of [[APL]] including the decade before Tektronix announced its product in 1973. Tektronix then devoted all 16 pages of its marketing communication publication to explaining why the company was all in on APL.\n[https://vintagetek.org/wp-content/uploads/2019/01/APL_TekGraphics_Feb1973.pdf pdf]"
    },
    {
      "type": "reference",
      "id": "cb2ca046b9dd207f",
      "site": "wiki.ralfbarkow.ch",
      "slug": "ward-tudor-and-me",
      "title": "Ward, Tudor and Me",
      "text": "We started a conversation about gt, federated wiki and 'god and the world'."
    },
    {
      "type": "graphviz",
      "id": "8e744ac1c303c4d1",
      "text": "DOT FROM lambda-browsing"
    },
    {
      "type": "paragraph",
      "id": "dc6876a899554e10",
      "text": "How to change sandboxing flags of [[iframe]]. [https://stackoverflow.com/questions/30148251/how-to-change-sandboxing-flags-of-iframe stackoverflow]"
    },
    {
      "type": "paragraph",
      "id": "994955da652aef88",
      "text": "iFrame sandbox permissions tutorial. [https://cloud.google.com/blog/products/data-analytics/iframe-sandbox-tutorial post]"
    },
    {
      "type": "markdown",
      "id": "5325f462ae1f343f",
      "text": "> A typical clickjacking attack will put transparent click boxes over a page and then “hijack” the click to redirect the page to a different url. window.open works the same way."
    },
    {
      "type": "paragraph",
      "id": "6f9aecf7d6fafd99",
      "text": "Clickjacking [https://owasp.org/www-community/attacks/Clickjacking page]"
    },
    {
      "type": "paragraph",
      "id": "194e66067685eab6",
      "text": "How can an iframe remove its own sandboxing? [https://stackoverflow.com/questions/67223608/how-can-an-iframe-remove-its-own-sandboxing stackoverflow]"
    },
    {
      "type": "paragraph",
      "id": "bd37a62fe01f8bfc",
      "text": "How to programatically remove sandbox attribute from an iframe with javascript [https://stackoverflow.com/questions/16135465/how-to-programatically-remove-sandbox-attribute-from-an-iframe-with-javascript stackoverflow], [https://html.spec.whatwg.org/multipage/iframe-embed-object.html#attr-iframe-sandbox spec]"
    },
    {
      "type": "pagefold",
      "id": "6c60e09b54f7c996",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "ca1c4f7573436113",
      "site": "ward.dojo.fed.wiki",
      "slug": "graph-workflow-overview",
      "title": "Graph Workflow Overview",
      "text": "We have created 30 experiments building and using property graphs on wiki pages. We're beginning to see complementary workflows building on the work so far."
    },
    {
      "type": "reference",
      "id": "8e8e00a370b43216",
      "site": "code.fed.wiki.org",
      "slug": "indelible-signatures",
      "title": "Indelible Signatures",
      "text": "I consulted on an intellectual property case where I had access to many copies of suspect code from many computers and backup files. Recognizing that the structure of functions as represented in punctuation was less mutable than any variable name, I extracted and studied only the punctuation."
    },
    {
      "type": "reference",
      "id": "7fa530829619ce6d",
      "site": "code.fed.wiki.org",
      "slug": "cunningham--cunningham",
      "title": "Cunningham & Cunningham",
      "text": "When I wasn't on-site with clients, I worked in my Multnomah Village office usually exploring the emerging web or using it to promote my emerging community."
    },
    {
      "type": "reference",
      "id": "e6bbb2e7dfd6bfda",
      "site": "found.ward.bay.wiki.org",
      "slug": "history-of-mathematics",
      "title": "History of Mathematics",
      "text": "Cracking tales of historical mathematics and its interplay with science, philosophy, and culture. Revisionist history galore. Contrarian takes on received wisdom. Implications for teaching. Informed by current scholarship. By Dr Viktor Blåsjö. [https://intellectualmathematics.com/opinionated-history-of-mathematics/ site] [https://podcasts.apple.com/us/podcast/opinionated-history-of-mathematics/id1444227264 apple]"
    },
    {
      "type": "reference",
      "id": "eedec4668fec7e04",
      "site": "ward.dojo.fed.wiki",
      "slug": "food-web-unbound",
      "title": "Food Web Unbound",
      "text": "We experiment with free-form notations that could be as versatile as a text editor but that somehow takes care of linking without typing integers."
    },
    {
      "type": "paragraph",
      "id": "ebb162f9835a6757",
      "text": "⇒ [[Replicated Computation]] ⇒ [[Computational Irreducibility]] "
    },
    {
      "type": "pagefold",
      "id": "d9c0347a34ab8db5",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "aee895e89e75e2bc",
      "site": "wiki.ralfbarkow.ch",
      "slug": "behavior-tree",
      "title": "Behavior Tree",
      "text": "A behavior tree is a mathematical model of plan execution used in computer science, robotics, control systems and video games. [https://en.wikipedia.org/wiki/Behavior_tree_(artificial_intelligence,_robotics_and_control) wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "ae34591646f122c4",
      "text": "feenk\n@feenkcom\n·\n12. Juni\nWe built an Rust-based infrastructure around the virtual machine of #GToolkit. Essentially, we wrap the Pharo VM in a #Rust app. We also built Rust plugins.\n\nNaturally, we also want tool support for Rust. So, now we have a parser with the associated abstract syntax tree. [https://twitter.com/feenkcom/status/1536048196467798016?s=20&t=oGmyFLT7qNXRjppP4GANvg tweet]"
    },
    {
      "type": "paragraph",
      "id": "58ad8fa5cfa8482f",
      "text": "We have a [[Parser]] with the associated [[Abstract Syntax Tree]]. How do we proceed now?"
    },
    {
      "type": "markdown",
      "id": "0f1ff66171665a2b",
      "text": "> Answer a parser that accepts the receiving string."
    },
    {
      "type": "paragraph",
      "id": "1d3c4802b971a820",
      "text": "[[WhisperingDrink]]"
    },
    {
      "type": "paragraph",
      "id": "94ca467c8b7854c6",
      "text": "tudor girba — 11.06.2022\nIn 2017 i recorded a longer tutorial about steering agile architecture at O’Reilly:"
    },
    {
      "type": "paragraph",
      "id": "e1536d27f6b5e6c9",
      "text": "Steering Agile Architecture Video Training Published by O’Reilly. [http://www.tudorgirba.com/blog/steering-agile-architecture-video-training-oreilly post]"
    },
    {
      "type": "paragraph",
      "id": "813cf1f1561788fa",
      "text": "If you have access to their Safari Books Online you can watch it there (links at the end of the article). This covers the implications of moldable development to architecture both from a theoretical and from a practical one. It frames the problem in a new way, it describes the skills and processes, shows why a moldable technology is essential, and exemplifies all of these through quite a number of case studies. \n\nAt the time, this relied on the first generation of GT/Moose and the method was still called [[Humane Assessment]]. "
    },
    {
      "type": "pagefold",
      "id": "81ccdfa7fea42cb5",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "3a30fef83a5a386b",
      "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522649714174XxeBx:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st discord]\nWhen objects were new to me I dug deeply into both favors (mixin lisp) and smalltalk. Although I found the same delightful idiomatic application code in both, I found flavor's objects a jumble of variables while single-inheritance smalltalk object state was short and sweet."
    },
    {
      "type": "reference",
      "id": "53d2ea7bd1e483c6",
      "site": "wiki.ralfbarkow.ch",
      "slug": "mix-in",
      "title": "Mix In",
      "text": "[[Mix In]] programming is a style of software development where units of functionality are created in a class and then mixed in with other classes."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-06-14",
        "story": []
      },
      "date": 1655183303039
    },
    {
      "item": {
        "type": "factory",
        "id": "b9fda95867cf7707"
      },
      "id": "b9fda95867cf7707",
      "type": "add",
      "date": 1655183311872
    },
    {
      "type": "remove",
      "id": "b9fda95867cf7707",
      "date": 1655183317138
    },
    {
      "item": {
        "type": "factory",
        "id": "dc6876a899554e10"
      },
      "id": "dc6876a899554e10",
      "type": "add",
      "date": 1655183324743
    },
    {
      "type": "edit",
      "id": "dc6876a899554e10",
      "item": {
        "type": "paragraph",
        "id": "dc6876a899554e10",
        "text": "How to change sandboxing flags of iframe"
      },
      "date": 1655183330573
    },
    {
      "type": "edit",
      "id": "dc6876a899554e10",
      "item": {
        "type": "paragraph",
        "id": "dc6876a899554e10",
        "text": "How to change sandboxing flags of iframe. [https://stackoverflow.com/questions/30148251/how-to-change-sandboxing-flags-of-iframe stackoverflow]"
      },
      "date": 1655183345350
    },
    {
      "item": {
        "type": "factory",
        "id": "8e744ac1c303c4d1"
      },
      "id": "8e744ac1c303c4d1",
      "type": "add",
      "after": "dc6876a899554e10",
      "date": 1655183356365
    },
    {
      "type": "edit",
      "id": "dc6876a899554e10",
      "item": {
        "type": "paragraph",
        "id": "dc6876a899554e10",
        "text": "How to change sandboxing flags of [[iframe]]. [https://stackoverflow.com/questions/30148251/how-to-change-sandboxing-flags-of-iframe stackoverflow]"
      },
      "date": 1655183357714
    },
    {
      "type": "edit",
      "id": "8e744ac1c303c4d1",
      "item": {
        "type": "graphviz",
        "id": "8e744ac1c303c4d1",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1655183369237
    },
    {
      "item": {
        "type": "factory",
        "id": "994955da652aef88"
      },
      "id": "994955da652aef88",
      "type": "add",
      "after": "8e744ac1c303c4d1",
      "date": 1655183615636
    },
    {
      "type": "edit",
      "id": "994955da652aef88",
      "item": {
        "type": "paragraph",
        "id": "994955da652aef88",
        "text": "iFrame sandbox permissions tutorial"
      },
      "date": 1655183618347
    },
    {
      "type": "edit",
      "id": "994955da652aef88",
      "item": {
        "type": "paragraph",
        "id": "994955da652aef88",
        "text": "iFrame sandbox permissions tutorial. [https://cloud.google.com/blog/products/data-analytics/iframe-sandbox-tutorial post]"
      },
      "date": 1655183632559
    },
    {
      "item": {
        "type": "factory",
        "id": "6f9aecf7d6fafd99"
      },
      "id": "6f9aecf7d6fafd99",
      "type": "add",
      "after": "994955da652aef88",
      "date": 1655183824224
    },
    {
      "type": "edit",
      "id": "6f9aecf7d6fafd99",
      "item": {
        "type": "paragraph",
        "id": "6f9aecf7d6fafd99",
        "text": "Clickjacking"
      },
      "date": 1655183827325
    },
    {
      "type": "edit",
      "id": "6f9aecf7d6fafd99",
      "item": {
        "type": "paragraph",
        "id": "6f9aecf7d6fafd99",
        "text": "Clickjacking [https://owasp.org/www-community/attacks/Clickjacking page]"
      },
      "date": 1655183842185
    },
    {
      "type": "add",
      "id": "5325f462ae1f343f",
      "item": {
        "type": "paragraph",
        "id": "5325f462ae1f343f",
        "text": "> A typical clickjacking attack will put transparent click boxes over a page and then “hijack” the click to redirect the page to a different url. window.open works the same way."
      },
      "after": "994955da652aef88",
      "date": 1655183881405
    },
    {
      "type": "edit",
      "id": "5325f462ae1f343f",
      "item": {
        "type": "markdown",
        "id": "5325f462ae1f343f",
        "text": "> A typical clickjacking attack will put transparent click boxes over a page and then “hijack” the click to redirect the page to a different url. window.open works the same way."
      },
      "date": 1655183882666
    },
    {
      "item": {
        "type": "factory",
        "id": "6c60e09b54f7c996"
      },
      "id": "6c60e09b54f7c996",
      "type": "add",
      "after": "6f9aecf7d6fafd99",
      "date": 1655184329128
    },
    {
      "type": "edit",
      "id": "6c60e09b54f7c996",
      "item": {
        "type": "pagefold",
        "id": "6c60e09b54f7c996",
        "text": "~"
      },
      "date": 1655184340730
    },
    {
      "item": {
        "type": "factory",
        "id": "8e8e00a370b43216"
      },
      "id": "8e8e00a370b43216",
      "type": "add",
      "after": "6c60e09b54f7c996",
      "date": 1655184348598
    },
    {
      "type": "edit",
      "id": "8e8e00a370b43216",
      "item": {
        "type": "reference",
        "id": "8e8e00a370b43216",
        "site": "code.fed.wiki.org",
        "slug": "indelible-signatures",
        "title": "Indelible Signatures",
        "text": "I consulted on an intellectual property case where I had access to many copies of suspect code from many computers and backup files. Recognizing that the structure of functions as represented in punctuation was less mutable than any variable name, I extracted and studied only the punctuation."
      },
      "date": 1655184358892
    },
    {
      "item": {
        "type": "factory",
        "id": "ca1c4f7573436113"
      },
      "id": "ca1c4f7573436113",
      "type": "add",
      "after": "8e8e00a370b43216",
      "date": 1655184739003
    },
    {
      "type": "edit",
      "id": "ca1c4f7573436113",
      "item": {
        "type": "reference",
        "id": "ca1c4f7573436113",
        "site": "ward.dojo.fed.wiki",
        "slug": "graph-workflow-overview",
        "title": "Graph Workflow Overview",
        "text": "We have created 30 experiments building and using property graphs on wiki pages. We're beginning to see complementary workflows building on the work so far."
      },
      "date": 1655184746786
    },
    {
      "item": {
        "type": "factory",
        "id": "7fa530829619ce6d"
      },
      "id": "7fa530829619ce6d",
      "type": "add",
      "after": "ca1c4f7573436113",
      "date": 1655184930098
    },
    {
      "type": "edit",
      "id": "7fa530829619ce6d",
      "item": {
        "type": "reference",
        "id": "7fa530829619ce6d",
        "site": "code.fed.wiki.org",
        "slug": "cunningham--cunningham",
        "title": "Cunningham & Cunningham",
        "text": "When I wasn't on-site with clients, I worked in my Multnomah Village office usually exploring the emerging web or using it to promote my emerging community."
      },
      "date": 1655184933088
    },
    {
      "item": {
        "type": "factory",
        "id": "e6bbb2e7dfd6bfda"
      },
      "id": "e6bbb2e7dfd6bfda",
      "type": "add",
      "after": "7fa530829619ce6d",
      "date": 1655185186051
    },
    {
      "type": "edit",
      "id": "e6bbb2e7dfd6bfda",
      "item": {
        "type": "reference",
        "id": "e6bbb2e7dfd6bfda",
        "site": "found.ward.bay.wiki.org",
        "slug": "history-of-mathematics",
        "title": "History of Mathematics",
        "text": "Cracking tales of historical mathematics and its interplay with science, philosophy, and culture. Revisionist history galore. Contrarian takes on received wisdom. Implications for teaching. Informed by current scholarship. By Dr Viktor Blåsjö. [https://intellectualmathematics.com/opinionated-history-of-mathematics/ site] [https://podcasts.apple.com/us/podcast/opinionated-history-of-mathematics/id1444227264 apple]"
      },
      "date": 1655185190524
    },
    {
      "item": {
        "type": "factory",
        "id": "eedec4668fec7e04"
      },
      "id": "eedec4668fec7e04",
      "type": "add",
      "after": "e6bbb2e7dfd6bfda",
      "date": 1655185321080
    },
    {
      "type": "edit",
      "id": "eedec4668fec7e04",
      "item": {
        "type": "reference",
        "id": "eedec4668fec7e04",
        "site": "ward.dojo.fed.wiki",
        "slug": "food-web-unbound",
        "title": "Food Web Unbound",
        "text": "We experiment with free-form notations that could be as versatile as a text editor but that somehow takes care of linking without typing integers."
      },
      "date": 1655185324633
    },
    {
      "id": "ebb162f9835a6757",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ebb162f9835a6757",
        "text": "⇒ [[Replicated Computation]] ⇒ [[Computational Irreducibility]] "
      },
      "after": "eedec4668fec7e04",
      "date": 1655187867616
    },
    {
      "type": "add",
      "id": "194e66067685eab6",
      "item": {
        "type": "paragraph",
        "id": "194e66067685eab6",
        "text": "How can an iframe remove its own sandboxing?"
      },
      "after": "6f9aecf7d6fafd99",
      "date": 1655188804321
    },
    {
      "type": "edit",
      "id": "194e66067685eab6",
      "item": {
        "type": "paragraph",
        "id": "194e66067685eab6",
        "text": "How can an iframe remove its own sandboxing? [https://stackoverflow.com/questions/67223608/how-can-an-iframe-remove-its-own-sandboxing stackoverflow]"
      },
      "date": 1655188821243
    },
    {
      "type": "add",
      "id": "bd37a62fe01f8bfc",
      "item": {
        "type": "paragraph",
        "id": "bd37a62fe01f8bfc",
        "text": "How to programatically remove sandbox attribute from an iframe with javascript"
      },
      "after": "194e66067685eab6",
      "date": 1655188842177
    },
    {
      "type": "edit",
      "id": "bd37a62fe01f8bfc",
      "item": {
        "type": "paragraph",
        "id": "bd37a62fe01f8bfc",
        "text": "How to programatically remove sandbox attribute from an iframe with javascript [https://stackoverflow.com/questions/16135465/how-to-programatically-remove-sandbox-attribute-from-an-iframe-with-javascript stackoverflow]"
      },
      "date": 1655188857090
    },
    {
      "type": "edit",
      "id": "bd37a62fe01f8bfc",
      "item": {
        "type": "paragraph",
        "id": "bd37a62fe01f8bfc",
        "text": "How to programatically remove sandbox attribute from an iframe with javascript [https://stackoverflow.com/questions/16135465/how-to-programatically-remove-sandbox-attribute-from-an-iframe-with-javascript stackoverflow], [https://html.spec.whatwg.org/multipage/iframe-embed-object.html#attr-iframe-sandbox spec]"
      },
      "date": 1655188904291
    },
    {
      "item": {
        "type": "factory",
        "id": "92866e696a045b0e"
      },
      "id": "92866e696a045b0e",
      "type": "add",
      "after": "ebb162f9835a6757",
      "date": 1655194676496
    },
    {
      "type": "edit",
      "id": "92866e696a045b0e",
      "item": {
        "type": "reference",
        "id": "92866e696a045b0e",
        "site": "code.fed.wiki.org",
        "slug": "minmax-envelope-acquisition-and-display",
        "title": "Min/Max Envelope Acquisition and Display",
        "text": "I had been interested in how slow signals looked better on a meter while fast signals looked better on a scope. On an early visit to Tektronix I suggested to Cal Diller that a slow scrolling display would make a scope a good meter. This was judged a good idea but too expensive given the cost of memory at the time."
      },
      "date": 1655194680839
    },
    {
      "id": "f440b5677a74adeb",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f440b5677a74adeb",
        "text": "History of APL including the decade before Tektronix announced its product in 1973. Tektronix then devoted all 16 pages of its marketing communication publication to explaining why the company was all in on APL.\n[https://vintagetek.org/wp-content/uploads/2019/01/APL_TekGraphics_Feb1973.pdf pdf]"
      },
      "after": "92866e696a045b0e",
      "date": 1655194707069
    },
    {
      "type": "edit",
      "id": "f440b5677a74adeb",
      "item": {
        "type": "paragraph",
        "id": "f440b5677a74adeb",
        "text": "> History of APL including the decade before Tektronix announced its product in 1973. Tektronix then devoted all 16 pages of its marketing communication publication to explaining why the company was all in on APL.\n[https://vintagetek.org/wp-content/uploads/2019/01/APL_TekGraphics_Feb1973.pdf pdf]"
      },
      "date": 1655194711506
    },
    {
      "type": "edit",
      "id": "f440b5677a74adeb",
      "item": {
        "type": "markdown",
        "id": "f440b5677a74adeb",
        "text": "> History of APL including the decade before Tektronix announced its product in 1973. Tektronix then devoted all 16 pages of its marketing communication publication to explaining why the company was all in on APL.\n[https://vintagetek.org/wp-content/uploads/2019/01/APL_TekGraphics_Feb1973.pdf pdf]"
      },
      "date": 1655194712873
    },
    {
      "type": "edit",
      "id": "f440b5677a74adeb",
      "item": {
        "type": "markdown",
        "id": "f440b5677a74adeb",
        "text": "> History of [[APL]] including the decade before Tektronix announced its product in 1973. Tektronix then devoted all 16 pages of its marketing communication publication to explaining why the company was all in on APL.\n[https://vintagetek.org/wp-content/uploads/2019/01/APL_TekGraphics_Feb1973.pdf pdf]"
      },
      "date": 1655194741829
    },
    {
      "type": "edit",
      "id": "92866e696a045b0e",
      "item": {
        "type": "reference",
        "id": "92866e696a045b0e",
        "site": "code.fed.wiki.org",
        "slug": "minmax-envelope-acquisition-and-display",
        "title": "Min/Max Envelope Acquisition and Display",
        "text": "I had been interested in how slow signals looked better on a meter while fast signals looked better on a scope. On an early visit to Tektronix I suggested to [[Cal Diller]] that a slow scrolling display would make a scope a good meter. This was judged a good idea but too expensive given the cost of memory at the time."
      },
      "date": 1655194765826
    },
    {
      "type": "edit",
      "id": "f440b5677a74adeb",
      "item": {
        "type": "markdown",
        "id": "f440b5677a74adeb",
        "text": "> History of [[APL]] including the decade before [[Tektronix]] announced its product in 1973. Tektronix then devoted all 16 pages of its marketing communication publication to explaining why the company was all in on APL.\n[https://vintagetek.org/wp-content/uploads/2019/01/APL_TekGraphics_Feb1973.pdf pdf]"
      },
      "date": 1655194811373
    },
    {
      "id": "ca1c4f7573436113",
      "type": "move",
      "order": [
        "dc6876a899554e10",
        "8e744ac1c303c4d1",
        "994955da652aef88",
        "5325f462ae1f343f",
        "6f9aecf7d6fafd99",
        "194e66067685eab6",
        "bd37a62fe01f8bfc",
        "6c60e09b54f7c996",
        "ca1c4f7573436113",
        "8e8e00a370b43216",
        "7fa530829619ce6d",
        "e6bbb2e7dfd6bfda",
        "eedec4668fec7e04",
        "ebb162f9835a6757",
        "92866e696a045b0e",
        "f440b5677a74adeb"
      ],
      "date": 1655194897082
    },
    {
      "item": {
        "type": "factory",
        "id": "aee895e89e75e2bc"
      },
      "id": "aee895e89e75e2bc",
      "type": "add",
      "after": "f440b5677a74adeb",
      "date": 1655196043030
    },
    {
      "type": "edit",
      "id": "aee895e89e75e2bc",
      "item": {
        "type": "reference",
        "id": "aee895e89e75e2bc",
        "site": "wiki.ralfbarkow.ch",
        "slug": "behavior-tree",
        "title": "Behavior Tree",
        "text": "A behavior tree is a mathematical model of plan execution used in computer science, robotics, control systems and video games. [https://en.wikipedia.org/wiki/Behavior_tree_(artificial_intelligence,_robotics_and_control) wikipedia]"
      },
      "date": 1655196046034
    },
    {
      "item": {
        "type": "factory",
        "id": "ae34591646f122c4"
      },
      "id": "ae34591646f122c4",
      "type": "add",
      "after": "aee895e89e75e2bc",
      "date": 1655197211706
    },
    {
      "type": "edit",
      "id": "ae34591646f122c4",
      "item": {
        "type": "paragraph",
        "id": "ae34591646f122c4",
        "text": "– [https://twitter.com/feenkcom/status/1536048196467798016?s=20&t=oGmyFLT7qNXRjppP4GANvg tweet]"
      },
      "date": 1655197227331
    },
    {
      "type": "edit",
      "id": "ae34591646f122c4",
      "item": {
        "type": "paragraph",
        "id": "ae34591646f122c4",
        "text": "\n\nfeenk\n@feenkcom\n·\n12. Juni\nWe built an Rust-based infrastructure around the virtual machine of #GToolkit. Essentially, we wrap the Pharo VM in a #Rust app. We also built Rust plugins.\n\nNaturally, we also want tool support for Rust. So, now we have a parser with the associated abstract syntax tree. [https://twitter.com/feenkcom/status/1536048196467798016?s=20&t=oGmyFLT7qNXRjppP4GANvg tweet]"
      },
      "date": 1655197234407
    },
    {
      "type": "edit",
      "id": "ae34591646f122c4",
      "item": {
        "type": "paragraph",
        "id": "ae34591646f122c4",
        "text": "\nfeenk\n@feenkcom\n·\n12. Juni\nWe built an Rust-based infrastructure around the virtual machine of #GToolkit. Essentially, we wrap the Pharo VM in a #Rust app. We also built Rust plugins.\n\nNaturally, we also want tool support for Rust. So, now we have a parser with the associated abstract syntax tree. [https://twitter.com/feenkcom/status/1536048196467798016?s=20&t=oGmyFLT7qNXRjppP4GANvg tweet]"
      },
      "date": 1655197271471
    },
    {
      "type": "edit",
      "id": "ae34591646f122c4",
      "item": {
        "type": "paragraph",
        "id": "ae34591646f122c4",
        "text": "feenk\n@feenkcom\n·\n12. Juni\nWe built an Rust-based infrastructure around the virtual machine of #GToolkit. Essentially, we wrap the Pharo VM in a #Rust app. We also built Rust plugins.\n\nNaturally, we also want tool support for Rust. So, now we have a parser with the associated abstract syntax tree. [https://twitter.com/feenkcom/status/1536048196467798016?s=20&t=oGmyFLT7qNXRjppP4GANvg tweet]"
      },
      "date": 1655197300572
    },
    {
      "type": "add",
      "id": "58ad8fa5cfa8482f",
      "item": {
        "type": "paragraph",
        "id": "58ad8fa5cfa8482f",
        "text": "We have a parser with the associated abstract syntax tree. How do we proceed now?"
      },
      "after": "ae34591646f122c4",
      "date": 1655197301579
    },
    {
      "type": "edit",
      "id": "58ad8fa5cfa8482f",
      "item": {
        "type": "paragraph",
        "id": "58ad8fa5cfa8482f",
        "text": "We have a [[parser]] with the associated abstract syntax tree. How do we proceed now?"
      },
      "date": 1655197310149
    },
    {
      "type": "edit",
      "id": "58ad8fa5cfa8482f",
      "item": {
        "type": "paragraph",
        "id": "58ad8fa5cfa8482f",
        "text": "We have a [[Parser]] with the associated abstract syntax tree. How do we proceed now?"
      },
      "date": 1655197316978
    },
    {
      "id": "0f1ff66171665a2b",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "0f1ff66171665a2b",
        "text": "Answer a parser that accepts the receiving string."
      },
      "after": "58ad8fa5cfa8482f",
      "date": 1655197570610
    },
    {
      "type": "edit",
      "id": "0f1ff66171665a2b",
      "item": {
        "type": "markdown",
        "id": "0f1ff66171665a2b",
        "text": "> Answer a parser that accepts the receiving string."
      },
      "date": 1655197574231
    },
    {
      "type": "edit",
      "id": "58ad8fa5cfa8482f",
      "item": {
        "type": "paragraph",
        "id": "58ad8fa5cfa8482f",
        "text": "We have a [[Parser]] with the associated [[abstract syntax tree]]. How do we proceed now?"
      },
      "date": 1655197588653
    },
    {
      "type": "edit",
      "id": "58ad8fa5cfa8482f",
      "item": {
        "type": "paragraph",
        "id": "58ad8fa5cfa8482f",
        "text": "We have a [[Parser]] with the associated [[Abstract Syntax Tree]]. How do we proceed now?"
      },
      "date": 1655197614218
    },
    {
      "item": {
        "type": "factory",
        "id": "1d3c4802b971a820"
      },
      "id": "1d3c4802b971a820",
      "type": "add",
      "after": "0f1ff66171665a2b",
      "date": 1655198125452
    },
    {
      "type": "edit",
      "id": "1d3c4802b971a820",
      "item": {
        "type": "paragraph",
        "id": "1d3c4802b971a820",
        "text": "[[WhisperingDrink]]"
      },
      "date": 1655198129690
    },
    {
      "item": {
        "type": "factory",
        "id": "e1536d27f6b5e6c9"
      },
      "id": "e1536d27f6b5e6c9",
      "type": "add",
      "after": "1d3c4802b971a820",
      "date": 1655198383114
    },
    {
      "type": "edit",
      "id": "e1536d27f6b5e6c9",
      "item": {
        "type": "paragraph",
        "id": "e1536d27f6b5e6c9",
        "text": "– [http://www.tudorgirba.com/blog/steering-agile-architecture-video-training-oreilly post]"
      },
      "date": 1655198395722
    },
    {
      "item": {
        "type": "factory",
        "id": "94ca467c8b7854c6"
      },
      "id": "94ca467c8b7854c6",
      "type": "add",
      "after": "e1536d27f6b5e6c9",
      "date": 1655198413737
    },
    {
      "type": "edit",
      "id": "94ca467c8b7854c6",
      "item": {
        "type": "paragraph",
        "id": "94ca467c8b7854c6",
        "text": "tudor girba — 11.06.2022\nIn 2017 i recorded a longer tutorial about steering agile architecture at O’Reilly:\n\nhttp://www.tudorgirba.com/blog/steering-agile-architecture-video-training-oreilly\n\nIf you have access to their Safari Books Online you can watch it there (links at the end of the article). This covers the implications of moldable development to architecture both from a theoretical and from a practical one. It frames the problem in a new way, it describes the skills and processes, shows why a moldable technology is essential, and exemplifies all of these through quite a number of case studies. \n\nAt the time, this relied on the first generation of GT/Moose and the method was still called humane assessment. "
      },
      "date": 1655198416064
    },
    {
      "type": "edit",
      "id": "e1536d27f6b5e6c9",
      "item": {
        "type": "paragraph",
        "id": "e1536d27f6b5e6c9",
        "text": "Steering Agile Architecture Video Training Published by O’Reilly. [http://www.tudorgirba.com/blog/steering-agile-architecture-video-training-oreilly post]"
      },
      "date": 1655198447558
    },
    {
      "type": "edit",
      "id": "94ca467c8b7854c6",
      "item": {
        "type": "paragraph",
        "id": "94ca467c8b7854c6",
        "text": "tudor girba — 11.06.2022\nIn 2017 i recorded a longer tutorial about steering agile architecture at O’Reilly:"
      },
      "date": 1655198469163
    },
    {
      "type": "add",
      "id": "379283db80696fcb",
      "item": {
        "type": "paragraph",
        "id": "379283db80696fcb",
        "text": "\nhttp://www.tudorgirba.com/blog/steering-agile-architecture-video-training-oreilly\n\n"
      },
      "after": "94ca467c8b7854c6",
      "date": 1655198471210
    },
    {
      "type": "add",
      "id": "813cf1f1561788fa",
      "item": {
        "type": "paragraph",
        "id": "813cf1f1561788fa",
        "text": "If you have access to their Safari Books Online you can watch it there (links at the end of the article). This covers the implications of moldable development to architecture both from a theoretical and from a practical one. It frames the problem in a new way, it describes the skills and processes, shows why a moldable technology is essential, and exemplifies all of these through quite a number of case studies. \n\nAt the time, this relied on the first generation of GT/Moose and the method was still called humane assessment. "
      },
      "after": "379283db80696fcb",
      "date": 1655198475811
    },
    {
      "type": "remove",
      "id": "379283db80696fcb",
      "date": 1655198478284
    },
    {
      "type": "edit",
      "id": "813cf1f1561788fa",
      "item": {
        "type": "paragraph",
        "id": "813cf1f1561788fa",
        "text": "If you have access to their Safari Books Online you can watch it there (links at the end of the article). This covers the implications of moldable development to architecture both from a theoretical and from a practical one. It frames the problem in a new way, it describes the skills and processes, shows why a moldable technology is essential, and exemplifies all of these through quite a number of case studies. \n\nAt the time, this relied on the first generation of GT/Moose and the method was still called [[humane assessment]]. "
      },
      "date": 1655198507446
    },
    {
      "type": "edit",
      "id": "813cf1f1561788fa",
      "item": {
        "type": "paragraph",
        "id": "813cf1f1561788fa",
        "text": "If you have access to their Safari Books Online you can watch it there (links at the end of the article). This covers the implications of moldable development to architecture both from a theoretical and from a practical one. It frames the problem in a new way, it describes the skills and processes, shows why a moldable technology is essential, and exemplifies all of these through quite a number of case studies. \n\nAt the time, this relied on the first generation of GT/Moose and the method was still called [[Humane Assessment]]. "
      },
      "date": 1655198534289
    },
    {
      "item": {
        "type": "factory",
        "id": "d9c0347a34ab8db5"
      },
      "id": "d9c0347a34ab8db5",
      "type": "add",
      "after": "813cf1f1561788fa",
      "date": 1655198624454
    },
    {
      "type": "edit",
      "id": "d9c0347a34ab8db5",
      "item": {
        "type": "pagefold",
        "id": "d9c0347a34ab8db5",
        "text": "~"
      },
      "date": 1655198627562
    },
    {
      "item": {
        "type": "factory",
        "id": "fd1c72403ea02faa"
      },
      "id": "fd1c72403ea02faa",
      "type": "add",
      "after": "d9c0347a34ab8db5",
      "date": 1655198629041
    },
    {
      "type": "edit",
      "id": "fd1c72403ea02faa",
      "item": {
        "type": "paragraph",
        "id": "fd1c72403ea02faa",
        "text": "Armand Sumo — 10.06.2022\nThanks for pointing out that difference, I believe it is clear to me now.\nMany of the patterns found in music production stem from experiences of processes/patterns found in the real world integrated into the artist's mind. \nDuring music composition, these patterns  often emerge to the surface and the artists then have to fight against the DAW interfaces to catch a snapshot of them. Think of it as a concept popping in your mind and you not finding a word or more generally a symbol to gain power over it. \nTo tackle this problem, you can observe the patterns found in someone's composition and see if they match patterns you've extracted  from real-world data or from other canonical styles. \nExamples:(medium level)\nYou'd have a program parse through a track and identify a sequential structure similar to human speech, or birdsong.\nSo you'd give the user an view that fits this pattern such as a transition graph. The user would then navigate in a space of transition graphs. (low level) you could have a view of a sound based on a simplified rendition of the physical process that could've generated it, again based on real-world data.\nThe premise is that by giving these \"closer to origin\" views of sounds and sequences thereof, you'd usher the user into leveraging their semantic properties. \nThe premise is that a feedback loop, as you say, may affect how they \"code\" their music and they'd start building higher level processes. I can go on further but that's basically where the fun begins. \n"
      },
      "date": 1655198630780
    },
    {
      "type": "edit",
      "id": "fd1c72403ea02faa",
      "item": {
        "type": "paragraph",
        "id": "fd1c72403ea02faa",
        "text": "Armand Sumo — [https://discord.com/channels/729445214812504107/735947900651175998/984850751593512980 discord]\nThanks for pointing out that difference, I believe it is clear to me now.\nMany of the patterns found in music production stem from experiences of processes/patterns found in the real world integrated into the artist's mind. \nDuring music composition, these patterns  often emerge to the surface and the artists then have to fight against the DAW interfaces to catch a snapshot of them. Think of it as a concept popping in your mind and you not finding a word or more generally a symbol to gain power over it. \nTo tackle this problem, you can observe the patterns found in someone's composition and see if they match patterns you've extracted  from real-world data or from other canonical styles. \nExamples:(medium level)\nYou'd have a program parse through a track and identify a sequential structure similar to human speech, or birdsong.\nSo you'd give the user an view that fits this pattern such as a transition graph. The user would then navigate in a space of transition graphs. (low level) you could have a view of a sound based on a simplified rendition of the physical process that could've generated it, again based on real-world data.\nThe premise is that by giving these \"closer to origin\" views of sounds and sequences thereof, you'd usher the user into leveraging their semantic properties. \nThe premise is that a feedback loop, as you say, may affect how they \"code\" their music and they'd start building higher level processes. I can go on further but that's basically where the fun begins. \n"
      },
      "date": 1655198648774
    },
    {
      "type": "edit",
      "id": "fd1c72403ea02faa",
      "item": {
        "type": "paragraph",
        "id": "fd1c72403ea02faa",
        "text": "Armand Sumo — [https://discord.com/channels/729445214812504107/735947900651175998/984850751593512980 discord]\n[…]\nMany of the patterns found in music production stem from experiences of processes/patterns found in the real world integrated into the artist's mind. \nDuring music composition, these patterns  often emerge to the surface and the artists then have to fight against the DAW interfaces to catch a snapshot of them. Think of it as a concept popping in your mind and you not finding a word or more generally a symbol to gain power over it. \nTo tackle this problem, you can observe the patterns found in someone's composition and see if they match patterns you've extracted  from real-world data or from other canonical styles. \nExamples:(medium level)\nYou'd have a program parse through a track and identify a sequential structure similar to human speech, or birdsong.\nSo you'd give the user an view that fits this pattern such as a transition graph. The user would then navigate in a space of transition graphs. (low level) you could have a view of a sound based on a simplified rendition of the physical process that could've generated it, again based on real-world data.\nThe premise is that by giving these \"closer to origin\" views of sounds and sequences thereof, you'd usher the user into leveraging their semantic properties. \nThe premise is that a feedback loop, as you say, may affect how they \"code\" their music and they'd start building higher level processes. I can go on further but that's basically where the fun begins. \n"
      },
      "date": 1655198664764
    },
    {
      "id": "d9c0347a34ab8db5",
      "type": "move",
      "order": [
        "dc6876a899554e10",
        "8e744ac1c303c4d1",
        "994955da652aef88",
        "5325f462ae1f343f",
        "6f9aecf7d6fafd99",
        "194e66067685eab6",
        "bd37a62fe01f8bfc",
        "6c60e09b54f7c996",
        "ca1c4f7573436113",
        "8e8e00a370b43216",
        "7fa530829619ce6d",
        "e6bbb2e7dfd6bfda",
        "eedec4668fec7e04",
        "ebb162f9835a6757",
        "d9c0347a34ab8db5",
        "92866e696a045b0e",
        "f440b5677a74adeb",
        "aee895e89e75e2bc",
        "ae34591646f122c4",
        "58ad8fa5cfa8482f",
        "0f1ff66171665a2b",
        "1d3c4802b971a820",
        "94ca467c8b7854c6",
        "e1536d27f6b5e6c9",
        "813cf1f1561788fa",
        "fd1c72403ea02faa"
      ],
      "date": 1655198782885
    },
    {
      "id": "fd1c72403ea02faa",
      "type": "move",
      "order": [
        "dc6876a899554e10",
        "8e744ac1c303c4d1",
        "994955da652aef88",
        "5325f462ae1f343f",
        "6f9aecf7d6fafd99",
        "194e66067685eab6",
        "bd37a62fe01f8bfc",
        "6c60e09b54f7c996",
        "ca1c4f7573436113",
        "8e8e00a370b43216",
        "7fa530829619ce6d",
        "e6bbb2e7dfd6bfda",
        "eedec4668fec7e04",
        "ebb162f9835a6757",
        "d9c0347a34ab8db5",
        "fd1c72403ea02faa",
        "92866e696a045b0e",
        "f440b5677a74adeb",
        "aee895e89e75e2bc",
        "ae34591646f122c4",
        "58ad8fa5cfa8482f",
        "0f1ff66171665a2b",
        "1d3c4802b971a820",
        "94ca467c8b7854c6",
        "e1536d27f6b5e6c9",
        "813cf1f1561788fa"
      ],
      "date": 1655198792501
    },
    {
      "type": "edit",
      "id": "fd1c72403ea02faa",
      "item": {
        "type": "paragraph",
        "id": "fd1c72403ea02faa",
        "text": "[[Min/Max Envelope Acquisition and Display]]"
      },
      "date": 1655198811089
    },
    {
      "type": "add",
      "id": "a7cdf244e4c6c72b",
      "item": {
        "type": "paragraph",
        "id": "a7cdf244e4c6c72b",
        "text": "Armand Sumo — [https://discord.com/channels/729445214812504107/735947900651175998/984850751593512980 discord]\n[…]\nMany of the patterns found in music production stem from experiences of processes/patterns found in the real world integrated into the artist's mind. \nDuring music composition, these patterns  often emerge to the surface and the artists then have to fight against the DAW interfaces to catch a snapshot of them. Think of it as a concept popping in your mind and you not finding a word or more generally a symbol to gain power over it. \nTo tackle this problem, you can observe the patterns found in someone's composition and see if they match patterns you've extracted  from real-world data or from other canonical styles. \nExamples:(medium level)\nYou'd have a program parse through a track and identify a sequential structure similar to human speech, or birdsong.\nSo you'd give the user an view that fits this pattern such as a transition graph. The user would then navigate in a space of transition graphs. (low level) you could have a view of a sound based on a simplified rendition of the physical process that could've generated it, again based on real-world data.\nThe premise is that by giving these \"closer to origin\" views of sounds and sequences thereof, you'd usher the user into leveraging their semantic properties. \nThe premise is that a feedback loop, as you say, may affect how they \"code\" their music and they'd start building higher level processes. I can go on further but that's basically where the fun begins. \n"
      },
      "after": "fd1c72403ea02faa",
      "date": 1655198813297
    },
    {
      "type": "edit",
      "id": "fd1c72403ea02faa",
      "item": {
        "type": "paragraph",
        "id": "fd1c72403ea02faa",
        "text": "⇒ [[Min/Max Envelope Acquisition and Display]]"
      },
      "date": 1655198823330
    },
    {
      "type": "edit",
      "id": "f440b5677a74adeb",
      "item": {
        "type": "markdown",
        "id": "f440b5677a74adeb",
        "text": "> History of [[APL]] including the decade before Tektronix announced its product in 1973. Tektronix then devoted all 16 pages of its marketing communication publication to explaining why the company was all in on APL.\n[https://vintagetek.org/wp-content/uploads/2019/01/APL_TekGraphics_Feb1973.pdf pdf]"
      },
      "date": 1655198838600
    },
    {
      "id": "fd1c72403ea02faa",
      "type": "move",
      "order": [
        "fd1c72403ea02faa",
        "dc6876a899554e10",
        "8e744ac1c303c4d1",
        "994955da652aef88",
        "5325f462ae1f343f",
        "6f9aecf7d6fafd99",
        "194e66067685eab6",
        "bd37a62fe01f8bfc",
        "6c60e09b54f7c996",
        "ca1c4f7573436113",
        "8e8e00a370b43216",
        "7fa530829619ce6d",
        "e6bbb2e7dfd6bfda",
        "eedec4668fec7e04",
        "ebb162f9835a6757",
        "d9c0347a34ab8db5",
        "a7cdf244e4c6c72b",
        "92866e696a045b0e",
        "f440b5677a74adeb",
        "aee895e89e75e2bc",
        "ae34591646f122c4",
        "58ad8fa5cfa8482f",
        "0f1ff66171665a2b",
        "1d3c4802b971a820",
        "94ca467c8b7854c6",
        "e1536d27f6b5e6c9",
        "813cf1f1561788fa"
      ],
      "date": 1655198867741
    },
    {
      "id": "a7cdf244e4c6c72b",
      "type": "move",
      "order": [
        "fd1c72403ea02faa",
        "a7cdf244e4c6c72b",
        "dc6876a899554e10",
        "8e744ac1c303c4d1",
        "994955da652aef88",
        "5325f462ae1f343f",
        "6f9aecf7d6fafd99",
        "194e66067685eab6",
        "bd37a62fe01f8bfc",
        "6c60e09b54f7c996",
        "ca1c4f7573436113",
        "8e8e00a370b43216",
        "7fa530829619ce6d",
        "e6bbb2e7dfd6bfda",
        "eedec4668fec7e04",
        "ebb162f9835a6757",
        "d9c0347a34ab8db5",
        "92866e696a045b0e",
        "f440b5677a74adeb",
        "aee895e89e75e2bc",
        "ae34591646f122c4",
        "58ad8fa5cfa8482f",
        "0f1ff66171665a2b",
        "1d3c4802b971a820",
        "94ca467c8b7854c6",
        "e1536d27f6b5e6c9",
        "813cf1f1561788fa"
      ],
      "date": 1655198875594
    },
    {
      "id": "92866e696a045b0e",
      "type": "move",
      "order": [
        "fd1c72403ea02faa",
        "a7cdf244e4c6c72b",
        "92866e696a045b0e",
        "dc6876a899554e10",
        "8e744ac1c303c4d1",
        "994955da652aef88",
        "5325f462ae1f343f",
        "6f9aecf7d6fafd99",
        "194e66067685eab6",
        "bd37a62fe01f8bfc",
        "6c60e09b54f7c996",
        "ca1c4f7573436113",
        "8e8e00a370b43216",
        "7fa530829619ce6d",
        "e6bbb2e7dfd6bfda",
        "eedec4668fec7e04",
        "ebb162f9835a6757",
        "d9c0347a34ab8db5",
        "f440b5677a74adeb",
        "aee895e89e75e2bc",
        "ae34591646f122c4",
        "58ad8fa5cfa8482f",
        "0f1ff66171665a2b",
        "1d3c4802b971a820",
        "94ca467c8b7854c6",
        "e1536d27f6b5e6c9",
        "813cf1f1561788fa"
      ],
      "date": 1655198883603
    },
    {
      "id": "f440b5677a74adeb",
      "type": "move",
      "order": [
        "fd1c72403ea02faa",
        "a7cdf244e4c6c72b",
        "92866e696a045b0e",
        "f440b5677a74adeb",
        "dc6876a899554e10",
        "8e744ac1c303c4d1",
        "994955da652aef88",
        "5325f462ae1f343f",
        "6f9aecf7d6fafd99",
        "194e66067685eab6",
        "bd37a62fe01f8bfc",
        "6c60e09b54f7c996",
        "ca1c4f7573436113",
        "8e8e00a370b43216",
        "7fa530829619ce6d",
        "e6bbb2e7dfd6bfda",
        "eedec4668fec7e04",
        "ebb162f9835a6757",
        "d9c0347a34ab8db5",
        "aee895e89e75e2bc",
        "ae34591646f122c4",
        "58ad8fa5cfa8482f",
        "0f1ff66171665a2b",
        "1d3c4802b971a820",
        "94ca467c8b7854c6",
        "e1536d27f6b5e6c9",
        "813cf1f1561788fa"
      ],
      "date": 1655198891725
    },
    {
      "id": "dc6876a899554e10",
      "type": "move",
      "order": [
        "fd1c72403ea02faa",
        "a7cdf244e4c6c72b",
        "92866e696a045b0e",
        "f440b5677a74adeb",
        "8e744ac1c303c4d1",
        "dc6876a899554e10",
        "994955da652aef88",
        "5325f462ae1f343f",
        "6f9aecf7d6fafd99",
        "194e66067685eab6",
        "bd37a62fe01f8bfc",
        "6c60e09b54f7c996",
        "ca1c4f7573436113",
        "8e8e00a370b43216",
        "7fa530829619ce6d",
        "e6bbb2e7dfd6bfda",
        "eedec4668fec7e04",
        "ebb162f9835a6757",
        "d9c0347a34ab8db5",
        "aee895e89e75e2bc",
        "ae34591646f122c4",
        "58ad8fa5cfa8482f",
        "0f1ff66171665a2b",
        "1d3c4802b971a820",
        "94ca467c8b7854c6",
        "e1536d27f6b5e6c9",
        "813cf1f1561788fa"
      ],
      "date": 1655198895853
    },
    {
      "type": "edit",
      "id": "fd1c72403ea02faa",
      "item": {
        "type": "paragraph",
        "id": "fd1c72403ea02faa",
        "text": "⇒ [[Min/Max Envelope Acquisition and Display]] ⇒ [[electronic music production]]"
      },
      "date": 1655198995671
    },
    {
      "type": "edit",
      "id": "fd1c72403ea02faa",
      "item": {
        "type": "paragraph",
        "id": "fd1c72403ea02faa",
        "text": "⇒ [[Min/Max Envelope Acquisition and Display]] ⇒ [[Electronic Music Production]]"
      },
      "date": 1655199038028
    },
    {
      "id": "a7cdf244e4c6c72b",
      "type": "remove",
      "date": 1655199052183
    },
    {
      "type": "edit",
      "id": "fd1c72403ea02faa",
      "item": {
        "type": "paragraph",
        "id": "fd1c72403ea02faa",
        "text": "⇒ [[Min/Max Envelope Acquisition and Display]] ⇒ [[Electronic Music Production]] – "
      },
      "date": 1655199097810
    },
    {
      "type": "edit",
      "id": "fd1c72403ea02faa",
      "item": {
        "type": "paragraph",
        "id": "fd1c72403ea02faa",
        "text": "⇒ [[Min/Max Envelope Acquisition and Display]] ⇒ [[Electronic Music Production]] ⇒ [[lambeq]]"
      },
      "date": 1655199113921
    },
    {
      "item": {
        "type": "factory",
        "id": "cb2ca046b9dd207f"
      },
      "id": "cb2ca046b9dd207f",
      "type": "add",
      "after": "813cf1f1561788fa",
      "date": 1655200358142
    },
    {
      "id": "cb2ca046b9dd207f",
      "type": "move",
      "order": [
        "fd1c72403ea02faa",
        "92866e696a045b0e",
        "f440b5677a74adeb",
        "cb2ca046b9dd207f",
        "8e744ac1c303c4d1",
        "dc6876a899554e10",
        "994955da652aef88",
        "5325f462ae1f343f",
        "6f9aecf7d6fafd99",
        "194e66067685eab6",
        "bd37a62fe01f8bfc",
        "6c60e09b54f7c996",
        "ca1c4f7573436113",
        "8e8e00a370b43216",
        "7fa530829619ce6d",
        "e6bbb2e7dfd6bfda",
        "eedec4668fec7e04",
        "ebb162f9835a6757",
        "d9c0347a34ab8db5",
        "aee895e89e75e2bc",
        "ae34591646f122c4",
        "58ad8fa5cfa8482f",
        "0f1ff66171665a2b",
        "1d3c4802b971a820",
        "94ca467c8b7854c6",
        "e1536d27f6b5e6c9",
        "813cf1f1561788fa"
      ],
      "date": 1655200364626
    },
    {
      "type": "edit",
      "id": "cb2ca046b9dd207f",
      "item": {
        "type": "reference",
        "id": "cb2ca046b9dd207f",
        "site": "wiki.ralfbarkow.ch",
        "slug": "ward-tudor-and-me",
        "title": "Ward, Tudor and Me",
        "text": "We started a conversation about gt, federated wiki and 'god and the world'."
      },
      "date": 1655200368114
    },
    {
      "item": {
        "type": "factory",
        "id": "81ccdfa7fea42cb5"
      },
      "id": "81ccdfa7fea42cb5",
      "type": "add",
      "after": "813cf1f1561788fa",
      "date": 1655230257581
    },
    {
      "type": "edit",
      "id": "81ccdfa7fea42cb5",
      "item": {
        "type": "pagefold",
        "id": "81ccdfa7fea42cb5",
        "text": "~"
      },
      "date": 1655230261230
    },
    {
      "item": {
        "type": "factory",
        "id": "3a30fef83a5a386b"
      },
      "id": "3a30fef83a5a386b",
      "type": "add",
      "after": "81ccdfa7fea42cb5",
      "date": 1655230263926
    },
    {
      "type": "edit",
      "id": "3a30fef83a5a386b",
      "item": {
        "type": "paragraph",
        "id": "3a30fef83a5a386b",
        "text": "Ward via [discord]\nWhen objects were new to me I dug deeply into both favors (mixin lisp) and smalltalk. Although I found the same delightful idiomatic application code in both, I found flavor's objects a jumble of variables while single-inheritance smalltalk object state was short and sweet."
      },
      "date": 1655230281389
    },
    {
      "type": "edit",
      "id": "3a30fef83a5a386b",
      "item": {
        "type": "paragraph",
        "id": "3a30fef83a5a386b",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522649714174XxeBx:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st discord]\nWhen objects were new to me I dug deeply into both favors (mixin lisp) and smalltalk. Although I found the same delightful idiomatic application code in both, I found flavor's objects a jumble of variables while single-inheritance smalltalk object state was short and sweet."
      },
      "date": 1655230293478
    },
    {
      "item": {
        "type": "factory",
        "id": "53d2ea7bd1e483c6"
      },
      "id": "53d2ea7bd1e483c6",
      "type": "add",
      "after": "3a30fef83a5a386b",
      "date": 1655230340074
    },
    {
      "type": "edit",
      "id": "53d2ea7bd1e483c6",
      "item": {
        "type": "reference",
        "id": "53d2ea7bd1e483c6",
        "site": "wiki.ralfbarkow.ch",
        "slug": "mix-in",
        "title": "Mix In",
        "text": "[[Mix In]] programming is a style of software development where units of functionality are created in a class and then mixed in with other classes."
      },
      "date": 1655230343454
    }
  ]
}