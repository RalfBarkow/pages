{
  "title": "SQLite and WAL",
  "story": [
    {
      "type": "paragraph",
      "id": "b33106313f1ed3cd",
      "text": "Typically, [[SQLite]] save each database to a single file which consists of fixed-size pages which can be B-tree page, B+tree page, free page or overflow page. For database in auto-vacuum mode, there is another significant page called pointer bitmap page. One SQLite database file consists of multiple Btrees. Indexes are stored in B-trees and data is stored in B+tree. Each page is a node of Btree and the first page is called root page. All page numbers of table and index are stored in system table which is named sqlite_master and places its root page on the first page."
    },
    {
      "type": "paragraph",
      "id": "dfe275507c9e1d80",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "01f2f4df21e9579e",
      "text": "WAL (write-ahead log) is a kind of log for SQLite introduced from version 1.7. WAL consist of a file header and some frames which can be ranged from 0 to a lot. Each frame records one page of data from database. When checkpoint (is)triggered, data stored in WAL would be transferred into database. WAL can be reused with new frames overwriting old frames after checkpoint. WAL always grows from the beginning to the end of the sequence. The checksum and counter appended to each frame indicate that whether the frame is effective or not."
    },
    {
      "type": "paragraph",
      "id": "ca1a73148822af82",
      "text": "[…]"
    },
    {
      "type": "pagefold",
      "id": "ea5f12f3e872a14e",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "40e5013536011998",
      "text": "LI, Qian, HU, Xueli and WU, Hao, 2014. Database management strategy and recovery methods of Android. In: 2014 IEEE 5th International Conference on Software Engineering and Service Science. June 2014. p. 727–730. DOI 10.1109/ICSESS.2014.6933670. Database analysis and the recovery of deleted record are two of the most important parts in digital forensics. This paper focuses on the management mechanism of Android SMS database, involving the analyses of write-in rules of database and log files during the data updating process. Based on the research results, a recovery method for database operating records from WAL file is proposed. To solve the problem that the log file is emptied, this paper presents a recovery method for the deleted log file for ext4 file system, thus constructing a database operating record timeline. Finally, an experiment based on images generated in different time and conditions is carried out to validate the effectiveness of the proposed method, discussion on its limitations is conducted.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "SQLite and WAL",
        "story": []
      },
      "date": 1693481430277
    },
    {
      "item": {
        "type": "factory",
        "id": "40e5013536011998"
      },
      "id": "40e5013536011998",
      "type": "add",
      "date": 1693481437886
    },
    {
      "type": "edit",
      "id": "40e5013536011998",
      "item": {
        "type": "paragraph",
        "id": "40e5013536011998",
        "text": "\nLI, Qian, HU, Xueli and WU, Hao, 2014. Database management strategy and recovery methods of Android. In: 2014 IEEE 5th International Conference on Software Engineering and Service Science. June 2014. p. 727–730. DOI 10.1109/ICSESS.2014.6933670. Database analysis and the recovery of deleted record are two of the most important parts in digital forensics. This paper focuses on the management mechanism of Android S MS database, involving the analyses of write-in rules of database and log files during the data updating process. Based on the research results, a recovery method for database operating records from WAL file is proposed. To solve the problem that the log file is emptied, this paper presents a recovery method for the deleted log file for ext4 file system, thus constructing a database operating record timeline. Finally, an experiment based on images generated in different time and conditions is carried out to validate the effectiveness of the proposed method, discussion on its limitations is conducted.\n"
      },
      "date": 1693481439053
    },
    {
      "type": "edit",
      "id": "40e5013536011998",
      "item": {
        "type": "paragraph",
        "id": "40e5013536011998",
        "text": "LI, Qian, HU, Xueli and WU, Hao, 2014. Database management strategy and recovery methods of Android. In: 2014 IEEE 5th International Conference on Software Engineering and Service Science. June 2014. p. 727–730. DOI 10.1109/ICSESS.2014.6933670. Database analysis and the recovery of deleted record are two of the most important parts in digital forensics. This paper focuses on the management mechanism of Android S MS database, involving the analyses of write-in rules of database and log files during the data updating process. Based on the research results, a recovery method for database operating records from WAL file is proposed. To solve the problem that the log file is emptied, this paper presents a recovery method for the deleted log file for ext4 file system, thus constructing a database operating record timeline. Finally, an experiment based on images generated in different time and conditions is carried out to validate the effectiveness of the proposed method, discussion on its limitations is conducted.\n"
      },
      "date": 1693481442700
    },
    {
      "type": "edit",
      "id": "40e5013536011998",
      "item": {
        "type": "paragraph",
        "id": "40e5013536011998",
        "text": "LI, Qian, HU, Xueli and WU, Hao, 2014. Database management strategy and recovery methods of Android. In: 2014 IEEE 5th International Conference on Software Engineering and Service Science. June 2014. p. 727–730. DOI 10.1109/ICSESS.2014.6933670. Database analysis and the recovery of deleted record are two of the most important parts in digital forensics. This paper focuses on the management mechanism of Android SMS database, involving the analyses of write-in rules of database and log files during the data updating process. Based on the research results, a recovery method for database operating records from WAL file is proposed. To solve the problem that the log file is emptied, this paper presents a recovery method for the deleted log file for ext4 file system, thus constructing a database operating record timeline. Finally, an experiment based on images generated in different time and conditions is carried out to validate the effectiveness of the proposed method, discussion on its limitations is conducted.\n"
      },
      "date": 1693481465987
    },
    {
      "item": {
        "type": "factory",
        "id": "b33106313f1ed3cd"
      },
      "id": "b33106313f1ed3cd",
      "type": "add",
      "after": "40e5013536011998",
      "date": 1693481512883
    },
    {
      "type": "edit",
      "id": "b33106313f1ed3cd",
      "item": {
        "type": "paragraph",
        "id": "b33106313f1ed3cd",
        "text": "Typically, SQLite save each database to a single file which consists of fixed-size pages which can be B-tree page, B+tree page, free page or overflow page. For database in auto-vacuum mode, there is another significant page called pointer bitmap page. One SQLite database file consists of multiple Btrees. Indexes are stored in B-trees and data is stored in B+tree. Each page is a node of Btree and the first page is called root page. All page numbers of table and index are stored in system table which is named sqlite_master and places its root page on the first page."
      },
      "date": 1693481514413
    },
    {
      "id": "b33106313f1ed3cd",
      "type": "move",
      "order": [
        "b33106313f1ed3cd",
        "40e5013536011998"
      ],
      "date": 1693481516566
    },
    {
      "item": {
        "type": "factory",
        "id": "ea5f12f3e872a14e"
      },
      "id": "ea5f12f3e872a14e",
      "type": "add",
      "after": "40e5013536011998",
      "date": 1693481518564
    },
    {
      "id": "ea5f12f3e872a14e",
      "type": "move",
      "order": [
        "b33106313f1ed3cd",
        "ea5f12f3e872a14e",
        "40e5013536011998"
      ],
      "date": 1693481520950
    },
    {
      "type": "edit",
      "id": "ea5f12f3e872a14e",
      "item": {
        "type": "pagefold",
        "id": "ea5f12f3e872a14e",
        "text": "~"
      },
      "date": 1693481523518
    },
    {
      "type": "edit",
      "id": "b33106313f1ed3cd",
      "item": {
        "type": "paragraph",
        "id": "b33106313f1ed3cd",
        "text": "Typically, [[SQLite]] save each database to a single file which consists of fixed-size pages which can be B-tree page, B+tree page, free page or overflow page. For database in auto-vacuum mode, there is another significant page called pointer bitmap page. One SQLite database file consists of multiple Btrees. Indexes are stored in B-trees and data is stored in B+tree. Each page is a node of Btree and the first page is called root page. All page numbers of table and index are stored in system table which is named sqlite_master and places its root page on the first page."
      },
      "date": 1693481533161
    },
    {
      "type": "add",
      "id": "dfe275507c9e1d80",
      "item": {
        "type": "paragraph",
        "id": "dfe275507c9e1d80",
        "text": "[…]"
      },
      "after": "b33106313f1ed3cd",
      "date": 1693481602593
    },
    {
      "type": "add",
      "id": "01f2f4df21e9579e",
      "item": {
        "type": "paragraph",
        "id": "01f2f4df21e9579e",
        "text": "WAL (write-ahead log) is a kind of log for SQLite introduced from version 1.7. WAL consist of a file header and some fra mes which can be ranged from 0 to a lot. Each fra me records one page of data from database. When checkpoint (is)triggered, data stored in WAL would be transferred into database. WAL can be reused with new frames overwriting old frames after checkpoint. WAL always grows from the beginning to the end of the sequence. The checksum and counter appended to each frame indicate that whether the frame is effective or not."
      },
      "after": "dfe275507c9e1d80",
      "date": 1693481603137
    },
    {
      "type": "edit",
      "id": "01f2f4df21e9579e",
      "item": {
        "type": "paragraph",
        "id": "01f2f4df21e9579e",
        "text": "WAL (write-ahead log) is a kind of log for SQLite introduced from version 1.7. WAL consist of a file header and some frames which can be ranged from 0 to a lot. Each fra me records one page of data from database. When checkpoint (is)triggered, data stored in WAL would be transferred into database. WAL can be reused with new frames overwriting old frames after checkpoint. WAL always grows from the beginning to the end of the sequence. The checksum and counter appended to each frame indicate that whether the frame is effective or not."
      },
      "date": 1693481620732
    },
    {
      "type": "add",
      "id": "ca1a73148822af82",
      "item": {
        "type": "paragraph",
        "id": "ca1a73148822af82",
        "text": "[…]"
      },
      "after": "01f2f4df21e9579e",
      "date": 1693481657960
    },
    {
      "type": "edit",
      "id": "01f2f4df21e9579e",
      "item": {
        "type": "paragraph",
        "id": "01f2f4df21e9579e",
        "text": "WAL (write-ahead log) is a kind of log for SQLite introduced from version 1.7. WAL consist of a file header and some frames which can be ranged from 0 to a lot. Each frame records one page of data from database. When checkpoint (is)triggered, data stored in WAL would be transferred into database. WAL can be reused with new frames overwriting old frames after checkpoint. WAL always grows from the beginning to the end of the sequence. The checksum and counter appended to each frame indicate that whether the frame is effective or not."
      },
      "date": 1693481673044
    }
  ]
}