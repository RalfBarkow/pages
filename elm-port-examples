{
  "title": "Elm Port Examples",
  "story": [
    {
      "type": "paragraph",
      "id": "a695e43791cc1d89",
      "text": "Interfacing with JavaScript via ports in Elm can be challenging. Building systems in the actor-model style is an unfamiliar task for many developers. Additionally, it can be hard to find examples of nice port implementations for any given task. [https://github.com/MattCheely/elm-port-examples#elm-port-examples github] -- [[Matthew Cheely]]"
    },
    {
      "type": "paragraph",
      "id": "1e73cace086f1b36",
      "text": "Albert Dahlin explains an approach to breaking up apps into components that exchange messages with each other: [https://www.elmweekly.nl/issues/elm-weekly-issue-125-270325 elmweekly]"
    },
    {
      "type": "video",
      "id": "17b30478a432ff31",
      "text": "YOUTUBE YV_qrjN8bRA\n[[Albert Dahlin]] Moving to the Actor Model in Elm, Elm Europe 2019"
    },
    {
      "type": "markdown",
      "id": "a2f0afbf3de0d05d",
      "text": "Component based development https://youtu.be/YV_qrjN8bRA?t=556"
    },
    {
      "type": "markdown",
      "id": "80d2f15f4f1158d9",
      "text": "Pattern: `List msgOut` (list of out messages) \n"
    },
    {
      "type": "markdown",
      "id": "5ce2a39a46b86ee9",
      "text": "Actor Model Example [https://github.com/webbhuset/realworld-actor-model#actor-model-example github]"
    },
    {
      "type": "paragraph",
      "id": "cb5a0d2c6051bad3",
      "text": "2 Comments on the video:"
    },
    {
      "type": "paragraph",
      "id": "f9fae9cdc6f0b29a",
      "text": "[[Henk Poley]]: Bummer that they broke some of the promises in Elm, such as no runtime exceptions. A misdirected message is of course strictly not an exception, but it is a runtime problem. "
    },
    {
      "type": "pagefold",
      "id": "1d7fc6f05a2a7ffb",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "ba74c559e56ec49c",
      "text": "Maybe Henk is refering to https://youtu.be/YV_qrjN8bRA?t=1351"
    },
    {
      "type": "pagefold",
      "id": "20e72fa6320bc1d5",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "e8a6aa32c812b8f8",
      "text": "\nAlso I wonder how this would interact with Lambdera. "
    },
    {
      "type": "paragraph",
      "id": "ee7d02adb68c542c",
      "text": "[[Benjamin Scherrey]]: Interesting as a component model system but I don't see how any of this is relevant to the Actor model at all. Afraid the title is quite misleading. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Elm Port Examples",
        "story": []
      },
      "date": 1638016386843
    },
    {
      "item": {
        "type": "factory",
        "id": "a695e43791cc1d89"
      },
      "id": "a695e43791cc1d89",
      "type": "add",
      "date": 1638016394371
    },
    {
      "type": "edit",
      "id": "a695e43791cc1d89",
      "item": {
        "type": "paragraph",
        "id": "a695e43791cc1d89",
        "text": "Interfacing with JavaScript via ports in Elm can be challenging. Building systems in the actor-model style is an unfamiliar task for many developers. Additionally, it can be hard to find examples of nice port implementations for any given task."
      },
      "date": 1638016397724
    },
    {
      "item": {
        "type": "factory",
        "id": "085141500d68519c"
      },
      "id": "085141500d68519c",
      "type": "add",
      "after": "a695e43791cc1d89",
      "date": 1638016403541
    },
    {
      "type": "edit",
      "id": "a695e43791cc1d89",
      "item": {
        "type": "paragraph",
        "id": "a695e43791cc1d89",
        "text": "Interfacing with JavaScript via ports in Elm can be challenging. Building systems in the actor-model style is an unfamiliar task for many developers. Additionally, it can be hard to find examples of nice port implementations for any given task. [https://github.com/MattCheely/elm-port-examples#elm-port-examples] -- "
      },
      "date": 1638016415743
    },
    {
      "type": "remove",
      "id": "085141500d68519c",
      "date": 1638016427064
    },
    {
      "type": "edit",
      "id": "a695e43791cc1d89",
      "item": {
        "type": "paragraph",
        "id": "a695e43791cc1d89",
        "text": "Interfacing with JavaScript via ports in Elm can be challenging. Building systems in the actor-model style is an unfamiliar task for many developers. Additionally, it can be hard to find examples of nice port implementations for any given task. [https://github.com/MattCheely/elm-port-examples#elm-port-examples] -- [[Matthew Cheely]]"
      },
      "date": 1638016433686
    },
    {
      "type": "edit",
      "id": "a695e43791cc1d89",
      "item": {
        "type": "paragraph",
        "id": "a695e43791cc1d89",
        "text": "Interfacing with JavaScript via ports in Elm can be challenging. Building systems in the actor-model style is an unfamiliar task for many developers. Additionally, it can be hard to find examples of nice port implementations for any given task. [https://github.com/MattCheely/elm-port-examples#elm-port-examples github] -- [[Matthew Cheely]]"
      },
      "date": 1638016442337
    },
    {
      "item": {
        "type": "factory",
        "id": "17b30478a432ff31"
      },
      "id": "17b30478a432ff31",
      "type": "add",
      "after": "a695e43791cc1d89",
      "date": 1638946754604
    },
    {
      "type": "edit",
      "id": "17b30478a432ff31",
      "item": {
        "type": "video",
        "id": "17b30478a432ff31",
        "text": "YOUTUBE YV_qrjN8bRA"
      },
      "date": 1638946766615
    },
    {
      "type": "edit",
      "id": "17b30478a432ff31",
      "item": {
        "type": "video",
        "id": "17b30478a432ff31",
        "text": "YOUTUBE YV_qrjN8bRA\n[[Albert Dahlin]] Moving to the Actor Model in Elm Elm Europe 2019"
      },
      "date": 1638946790132
    },
    {
      "item": {
        "type": "factory",
        "id": "0a0683632e7cb734"
      },
      "id": "0a0683632e7cb734",
      "type": "add",
      "after": "17b30478a432ff31",
      "date": 1638947017573
    },
    {
      "type": "remove",
      "id": "0a0683632e7cb734",
      "date": 1638947019798
    },
    {
      "item": {
        "type": "factory",
        "id": "a2f0afbf3de0d05d"
      },
      "id": "a2f0afbf3de0d05d",
      "type": "add",
      "after": "17b30478a432ff31",
      "date": 1638947021374
    },
    {
      "type": "edit",
      "id": "a2f0afbf3de0d05d",
      "item": {
        "type": "paragraph",
        "id": "a2f0afbf3de0d05d",
        "text": "Component based development"
      },
      "date": 1638947022806
    },
    {
      "type": "edit",
      "id": "a2f0afbf3de0d05d",
      "item": {
        "type": "paragraph",
        "id": "a2f0afbf3de0d05d",
        "text": "Component based development https://youtu.be/YV_qrjN8bRA?t=556"
      },
      "date": 1638947076080
    },
    {
      "type": "edit",
      "id": "a2f0afbf3de0d05d",
      "item": {
        "type": "markdown",
        "id": "a2f0afbf3de0d05d",
        "text": "Component based development https://youtu.be/YV_qrjN8bRA?t=556"
      },
      "date": 1638947077090
    },
    {
      "item": {
        "type": "factory",
        "id": "80d2f15f4f1158d9"
      },
      "id": "80d2f15f4f1158d9",
      "type": "add",
      "after": "a2f0afbf3de0d05d",
      "date": 1638947178320
    },
    {
      "type": "edit",
      "id": "80d2f15f4f1158d9",
      "item": {
        "type": "paragraph",
        "id": "80d2f15f4f1158d9",
        "text": "Pattern: List of "
      },
      "date": 1638947186931
    },
    {
      "type": "edit",
      "id": "80d2f15f4f1158d9",
      "item": {
        "type": "paragraph",
        "id": "80d2f15f4f1158d9",
        "text": "Pattern: List msgOut (list of out messages) "
      },
      "date": 1638947209920
    },
    {
      "type": "edit",
      "id": "80d2f15f4f1158d9",
      "item": {
        "type": "paragraph",
        "id": "80d2f15f4f1158d9",
        "text": "Pattern: `List msgOut` (list of out messages) "
      },
      "date": 1638947217825
    },
    {
      "type": "edit",
      "id": "80d2f15f4f1158d9",
      "item": {
        "type": "markdown",
        "id": "80d2f15f4f1158d9",
        "text": "Pattern: `List msgOut` (list of out messages) "
      },
      "date": 1638947219957
    },
    {
      "type": "edit",
      "id": "80d2f15f4f1158d9",
      "item": {
        "type": "markdown",
        "id": "80d2f15f4f1158d9",
        "text": "Pattern: `List msgOut` (list of out messages) \n"
      },
      "date": 1638947388710
    },
    {
      "type": "add",
      "id": "5ce2a39a46b86ee9",
      "item": {
        "type": "markdown",
        "id": "5ce2a39a46b86ee9",
        "text": "[https://github.com/webbhuset/realworld-actor-model#actor-model-example github]"
      },
      "after": "80d2f15f4f1158d9",
      "date": 1638947400481
    },
    {
      "type": "edit",
      "id": "5ce2a39a46b86ee9",
      "item": {
        "type": "markdown",
        "id": "5ce2a39a46b86ee9",
        "text": "Actor Model Example [https://github.com/webbhuset/realworld-actor-model#actor-model-example github]"
      },
      "date": 1638947412450
    },
    {
      "type": "edit",
      "id": "17b30478a432ff31",
      "item": {
        "type": "video",
        "id": "17b30478a432ff31",
        "text": "YOUTUBE YV_qrjN8bRA\n[[Albert Dahlin]] Moving to the Actor Model in Elm, Elm Europe 2019"
      },
      "date": 1638950194469
    },
    {
      "item": {
        "type": "factory",
        "id": "cb5a0d2c6051bad3"
      },
      "id": "cb5a0d2c6051bad3",
      "type": "add",
      "after": "5ce2a39a46b86ee9",
      "date": 1639004479161
    },
    {
      "type": "edit",
      "id": "cb5a0d2c6051bad3",
      "item": {
        "type": "paragraph",
        "id": "cb5a0d2c6051bad3",
        "text": "2 Comments on the video"
      },
      "date": 1639004500843
    },
    {
      "type": "edit",
      "id": "cb5a0d2c6051bad3",
      "item": {
        "type": "paragraph",
        "id": "cb5a0d2c6051bad3",
        "text": "2 Comments on the video:"
      },
      "date": 1639004512021
    },
    {
      "type": "add",
      "id": "f9fae9cdc6f0b29a",
      "item": {
        "type": "paragraph",
        "id": "f9fae9cdc6f0b29a",
        "text": "\nHenk Poley\nvor 2 Jahren\nBummer that they broke some of the promises in Elm, such as no runtime exceptions. A misdirected message is of course strictly not an exception, but it is a runtime problem. \n\nAlso I wonder how this would interact with Lambdera. "
      },
      "after": "cb5a0d2c6051bad3",
      "date": 1639004513000
    },
    {
      "type": "edit",
      "id": "f9fae9cdc6f0b29a",
      "item": {
        "type": "paragraph",
        "id": "f9fae9cdc6f0b29a",
        "text": "[[Henk Poley]]: Bummer that they broke some of the promises in Elm, such as no runtime exceptions. A misdirected message is of course strictly not an exception, but it is a runtime problem. \n\nAlso I wonder how this would interact with Lambdera. "
      },
      "date": 1639004532288
    },
    {
      "item": {
        "type": "factory",
        "id": "ee7d02adb68c542c"
      },
      "id": "ee7d02adb68c542c",
      "type": "add",
      "after": "f9fae9cdc6f0b29a",
      "date": 1639004581594
    },
    {
      "type": "edit",
      "id": "ee7d02adb68c542c",
      "item": {
        "type": "paragraph",
        "id": "ee7d02adb68c542c",
        "text": "[[Benjamin Scherrey]]: Interesting as a component model system but I don't see how any of this is relevant to the Actor model at all. Afraid the title is quite misleading. "
      },
      "date": 1639004597033
    },
    {
      "type": "fork",
      "date": 1639004982545
    },
    {
      "item": {
        "type": "factory",
        "id": "1d7fc6f05a2a7ffb"
      },
      "id": "1d7fc6f05a2a7ffb",
      "type": "add",
      "after": "ee7d02adb68c542c",
      "date": 1639004985095
    },
    {
      "type": "edit",
      "id": "1d7fc6f05a2a7ffb",
      "item": {
        "type": "pagefold",
        "id": "1d7fc6f05a2a7ffb",
        "text": "~"
      },
      "date": 1639004990649
    },
    {
      "id": "1d7fc6f05a2a7ffb",
      "type": "move",
      "order": [
        "a695e43791cc1d89",
        "17b30478a432ff31",
        "a2f0afbf3de0d05d",
        "80d2f15f4f1158d9",
        "5ce2a39a46b86ee9",
        "cb5a0d2c6051bad3",
        "f9fae9cdc6f0b29a",
        "1d7fc6f05a2a7ffb",
        "ee7d02adb68c542c"
      ],
      "date": 1639004996967
    },
    {
      "type": "edit",
      "id": "f9fae9cdc6f0b29a",
      "item": {
        "type": "paragraph",
        "id": "f9fae9cdc6f0b29a",
        "text": "[[Henk Poley]]: Bummer that they broke some of the promises in Elm, such as no runtime exceptions. A misdirected message is of course strictly not an exception, but it is a runtime problem. "
      },
      "date": 1639005000272
    },
    {
      "type": "add",
      "id": "e8a6aa32c812b8f8",
      "item": {
        "type": "paragraph",
        "id": "e8a6aa32c812b8f8",
        "text": "\nAlso I wonder how this would interact with Lambdera. "
      },
      "after": "f9fae9cdc6f0b29a",
      "date": 1639005001316
    },
    {
      "id": "1d7fc6f05a2a7ffb",
      "type": "move",
      "order": [
        "a695e43791cc1d89",
        "17b30478a432ff31",
        "a2f0afbf3de0d05d",
        "80d2f15f4f1158d9",
        "5ce2a39a46b86ee9",
        "cb5a0d2c6051bad3",
        "f9fae9cdc6f0b29a",
        "1d7fc6f05a2a7ffb",
        "e8a6aa32c812b8f8",
        "ee7d02adb68c542c"
      ],
      "date": 1639005003567
    },
    {
      "item": {
        "type": "factory",
        "id": "20e72fa6320bc1d5"
      },
      "id": "20e72fa6320bc1d5",
      "type": "add",
      "after": "ee7d02adb68c542c",
      "date": 1639005005262
    },
    {
      "type": "edit",
      "id": "20e72fa6320bc1d5",
      "item": {
        "type": "pagefold",
        "id": "20e72fa6320bc1d5",
        "text": "~"
      },
      "date": 1639005010018
    },
    {
      "item": {
        "type": "factory",
        "id": "ba74c559e56ec49c"
      },
      "id": "ba74c559e56ec49c",
      "type": "add",
      "after": "20e72fa6320bc1d5",
      "date": 1639005013554
    },
    {
      "type": "edit",
      "id": "ba74c559e56ec49c",
      "item": {
        "type": "paragraph",
        "id": "ba74c559e56ec49c",
        "text": "Maybe Henk is refering to "
      },
      "date": 1639005024900
    },
    {
      "id": "ba74c559e56ec49c",
      "type": "move",
      "order": [
        "a695e43791cc1d89",
        "17b30478a432ff31",
        "a2f0afbf3de0d05d",
        "80d2f15f4f1158d9",
        "5ce2a39a46b86ee9",
        "cb5a0d2c6051bad3",
        "f9fae9cdc6f0b29a",
        "1d7fc6f05a2a7ffb",
        "ba74c559e56ec49c",
        "e8a6aa32c812b8f8",
        "ee7d02adb68c542c",
        "20e72fa6320bc1d5"
      ],
      "date": 1639005027714
    },
    {
      "id": "20e72fa6320bc1d5",
      "type": "move",
      "order": [
        "a695e43791cc1d89",
        "17b30478a432ff31",
        "a2f0afbf3de0d05d",
        "80d2f15f4f1158d9",
        "5ce2a39a46b86ee9",
        "cb5a0d2c6051bad3",
        "f9fae9cdc6f0b29a",
        "1d7fc6f05a2a7ffb",
        "ba74c559e56ec49c",
        "20e72fa6320bc1d5",
        "e8a6aa32c812b8f8",
        "ee7d02adb68c542c"
      ],
      "date": 1639005029932
    },
    {
      "type": "edit",
      "id": "ba74c559e56ec49c",
      "item": {
        "type": "paragraph",
        "id": "ba74c559e56ec49c",
        "text": "Maybe Henk is refering to https://youtu.be/YV_qrjN8bRA?t=1351"
      },
      "date": 1639005034699
    },
    {
      "type": "edit",
      "id": "ba74c559e56ec49c",
      "item": {
        "type": "markdown",
        "id": "ba74c559e56ec49c",
        "text": "Maybe Henk is refering to https://youtu.be/YV_qrjN8bRA?t=1351"
      },
      "date": 1639005035503
    },
    {
      "type": "add",
      "id": "1e73cace086f1b36",
      "item": {
        "type": "paragraph",
        "id": "1e73cace086f1b36",
        "text": "Albert Dahlin explains an approach to breaking up apps into components that exchange messages with each other: "
      },
      "after": "a695e43791cc1d89",
      "date": 1639006714268
    },
    {
      "type": "edit",
      "id": "1e73cace086f1b36",
      "item": {
        "type": "paragraph",
        "id": "1e73cace086f1b36",
        "text": "Albert Dahlin explains an approach to breaking up apps into components that exchange messages with each other: [https://www.elmweekly.nl/issues/elm-weekly-issue-125-270325 elmweekly]"
      },
      "date": 1639006761295
    }
  ]
}