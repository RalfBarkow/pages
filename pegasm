{
  "title": "Pegasm",
  "story": [
    {
      "type": "paragraph",
      "id": "1b0affa638465998",
      "text": "I was unfamiliar with the Java 1.5 instrumentation interface when I joined [[New Relic]]. I studied it and the ASM library that supports the manipulation of bytecode that the interface enables. This was a learning exercise."
    },
    {
      "type": "html",
      "id": "d54a83b7718eb4fc",
      "text": "<h3> Strategy"
    },
    {
      "type": "video",
      "id": "546c62c9c60e38b0",
      "text": "VIMEO 57515597\nChris Hansen explains the ASM capabilities in his PJUG talk in the fall of 2012. [http://asm.ow2.org/ api] [http://vimeo.com/57515597 video]"
    },
    {
      "type": "paragraph",
      "id": "1b084a1f39c75887",
      "text": "I adopted the methodology Chris suggested: write java, read the bytecode, hack the bytecode to handle your variation."
    },
    {
      "type": "paragraph",
      "id": "f4dbe080d64e9b20",
      "text": "Transcribed the published PEG grammar producing one or two line Java methods for each production. Ford 2004. [http://pdos.csail.mit.edu/~baford/packrat/popl04/peg-popl04.pdf pdf]"
    },
    {
      "type": "paragraph",
      "id": "d261f74463dd560b",
      "text": "I included an abstract class that provided input buffering and parse position tracking utilities."
    },
    {
      "type": "paragraph",
      "id": "a691cd3979fcddb9",
      "text": "The hand coded parser could read a text version of the published grammar. It's result was simply pass or fail."
    },
    {
      "type": "paragraph",
      "id": "bffae110ceec18b6",
      "text": "I wrote an instrumentation jar that would amend each production method of the parser with trace calls that would report, step by step, the production rules that were accepted. [https://github.com/WardCunningham/pegasm github]"
    },
    {
      "type": "html",
      "id": "dfcb8c018d344c98",
      "text": "<h3> Limitations"
    },
    {
      "type": "paragraph",
      "id": "f9cac7d1cbd48bb6",
      "text": "Chris' methodology suggested that I would then write instrumentation that could generate the parser that I had written by hand from the text file itself. I haven't yet succeeded at this for several reasons."
    },
    {
      "type": "paragraph",
      "id": "a738a782374d06e2",
      "text": "I chose to use the \"sax\" style ASM API which seems best for annotating existing code. This worked for tracing, but not so much for translation. The \"dom\" version of the ASM API would seem preferred."
    },
    {
      "type": "paragraph",
      "id": "a8a0ec3c0c7493cf",
      "text": "I found that I could not write Java code for some productions directly. I wish I could include a while loop as a term in an expression. This isn't possible in Java because a while loop is a statement, not a term. Instead I replaced while loops with calls to methods that contained the while loops. A work-around that will not be required when generating the while loop code in bytecode myself."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Pegasm"
      },
      "date": 1378170193951
    },
    {
      "item": {
        "type": "factory",
        "id": "1b0affa638465998"
      },
      "id": "1b0affa638465998",
      "type": "add",
      "date": 1378170195787
    },
    {
      "type": "edit",
      "id": "1b0affa638465998",
      "item": {
        "type": "paragraph",
        "id": "1b0affa638465998",
        "text": "I was unfamiliar with the Java 1.5 instrumentation interface when I joined [[New Relic]]. I studied it and the ASM library that supports the manipulation of bytecode that instrumentation enables."
      },
      "date": 1378170294747
    },
    {
      "item": {
        "type": "paragraph",
        "id": "10daecaa6f3a0723",
        "text": ""
      },
      "id": "10daecaa6f3a0723",
      "type": "add",
      "after": "1b0affa638465998",
      "date": 1378170295254
    },
    {
      "type": "remove",
      "id": "10daecaa6f3a0723",
      "date": 1378170306659
    },
    {
      "type": "edit",
      "id": "1b0affa638465998",
      "item": {
        "type": "paragraph",
        "id": "1b0affa638465998",
        "text": "I was unfamiliar with the Java 1.5 instrumentation interface when I joined [[New Relic]]. I studied it and the ASM library that supports the manipulation of bytecode that instrumentation enables. This was my first learning exercise."
      },
      "date": 1378170326842
    },
    {
      "item": {
        "type": "paragraph",
        "id": "d31a747889d96719",
        "text": ""
      },
      "id": "d31a747889d96719",
      "type": "add",
      "after": "1b0affa638465998",
      "date": 1378170327347
    },
    {
      "type": "remove",
      "id": "d31a747889d96719",
      "date": 1378170329701
    },
    {
      "type": "edit",
      "id": "1b0affa638465998",
      "item": {
        "type": "paragraph",
        "id": "1b0affa638465998",
        "text": "I was unfamiliar with the Java 1.5 instrumentation interface when I joined [[New Relic]]. I studied it and the ASM library that supports the manipulation of bytecode that instrumentation enables. This was my learning exercise."
      },
      "date": 1378170333834
    },
    {
      "type": "edit",
      "id": "1b0affa638465998",
      "item": {
        "type": "paragraph",
        "id": "1b0affa638465998",
        "text": "I was unfamiliar with the Java 1.5 instrumentation interface when I joined [[New Relic]]. I studied it and the ASM library that supports the manipulation of bytecode that instrumentation enables. This was a learning exercise."
      },
      "date": 1378170351898
    },
    {
      "type": "edit",
      "id": "1b0affa638465998",
      "item": {
        "type": "paragraph",
        "id": "1b0affa638465998",
        "text": "I was unfamiliar with the Java 1.5 instrumentation interface when I joined [[New Relic]]. I studied it and the ASM library that supports the manipulation of bytecode that the interface enables. This was a learning exercise."
      },
      "date": 1378170370785
    },
    {
      "item": {
        "type": "factory",
        "id": "3eddaf06d5173cd0"
      },
      "id": "3eddaf06d5173cd0",
      "type": "add",
      "after": "1b0affa638465998",
      "date": 1378170384659
    },
    {
      "type": "edit",
      "id": "3eddaf06d5173cd0",
      "item": {
        "type": "paragraph",
        "id": "3eddaf06d5173cd0",
        "text": "Chris Hansen explains the ASM capabilities in his PJUG talk in the fall of 2012."
      },
      "date": 1378170441638
    },
    {
      "type": "edit",
      "id": "3eddaf06d5173cd0",
      "item": {
        "type": "paragraph",
        "id": "3eddaf06d5173cd0",
        "text": "Chris Hansen explains the ASM capabilities in his PJUG talk in the fall of 2012. [http://vimeo.com/57515597 video]"
      },
      "date": 1378170479545
    },
    {
      "item": {
        "type": "factory",
        "id": "1b084a1f39c75887"
      },
      "id": "1b084a1f39c75887",
      "type": "add",
      "after": "3eddaf06d5173cd0",
      "date": 1378170492643
    },
    {
      "type": "edit",
      "id": "1b084a1f39c75887",
      "item": {
        "type": "paragraph",
        "id": "1b084a1f39c75887",
        "text": "I adopted the methodology Chris suggested: write java, read the bytecode, hack the bytecode to handle your variation."
      },
      "date": 1378170537648
    },
    {
      "item": {
        "type": "paragraph",
        "id": "f4dbe080d64e9b20",
        "text": ""
      },
      "id": "f4dbe080d64e9b20",
      "type": "add",
      "after": "1b084a1f39c75887",
      "date": 1378170538158
    },
    {
      "type": "edit",
      "id": "f4dbe080d64e9b20",
      "item": {
        "type": "paragraph",
        "id": "f4dbe080d64e9b20",
        "text": "Transcribed the published PEG grammar producing one or two line Java methods for each production. "
      },
      "date": 1378170632177
    },
    {
      "type": "edit",
      "id": "f4dbe080d64e9b20",
      "item": {
        "type": "paragraph",
        "id": "f4dbe080d64e9b20",
        "text": "Transcribed the published PEG grammar producing one or two line Java methods for each production. Ford 2004. [http://pdos.csail.mit.edu/~baford/packrat/popl04/peg-popl04.pdf pdf]"
      },
      "date": 1378170677576
    },
    {
      "item": {
        "type": "factory",
        "id": "d261f74463dd560b"
      },
      "id": "d261f74463dd560b",
      "type": "add",
      "after": "f4dbe080d64e9b20",
      "date": 1378170703921
    },
    {
      "type": "edit",
      "id": "d261f74463dd560b",
      "item": {
        "type": "paragraph",
        "id": "d261f74463dd560b",
        "text": "I included an abstract class that provided input buffering and parse position tracking utilities."
      },
      "date": 1378170783639
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a691cd3979fcddb9",
        "text": ""
      },
      "id": "a691cd3979fcddb9",
      "type": "add",
      "after": "d261f74463dd560b",
      "date": 1378170784146
    },
    {
      "type": "edit",
      "id": "a691cd3979fcddb9",
      "item": {
        "type": "paragraph",
        "id": "a691cd3979fcddb9",
        "text": "The hand coded parser could read a text version of the published grammar. It's result was simply pass or fail."
      },
      "date": 1378170844978
    },
    {
      "item": {
        "type": "paragraph",
        "id": "bffae110ceec18b6",
        "text": ""
      },
      "id": "bffae110ceec18b6",
      "type": "add",
      "after": "a691cd3979fcddb9",
      "date": 1378170845484
    },
    {
      "type": "edit",
      "id": "bffae110ceec18b6",
      "item": {
        "type": "paragraph",
        "id": "bffae110ceec18b6",
        "text": "I wrote an instrumentation jar that would amend each production method of the parser with trace calls that would report, step by step, the production rules that were accepted."
      },
      "date": 1378170928601
    },
    {
      "item": {
        "type": "paragraph",
        "id": "f9cac7d1cbd48bb6",
        "text": ""
      },
      "id": "f9cac7d1cbd48bb6",
      "type": "add",
      "after": "bffae110ceec18b6",
      "date": 1378170929107
    },
    {
      "type": "edit",
      "id": "f9cac7d1cbd48bb6",
      "item": {
        "type": "paragraph",
        "id": "f9cac7d1cbd48bb6",
        "text": "Chris' methodology suggested that I would then write instrumentation that could generate the parser that I had written by hand from the text file itself. I haven't yet succeeded at this for several reasons."
      },
      "date": 1378171019456
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a738a782374d06e2",
        "text": ""
      },
      "id": "a738a782374d06e2",
      "type": "add",
      "after": "f9cac7d1cbd48bb6",
      "date": 1378171019963
    },
    {
      "type": "edit",
      "id": "a738a782374d06e2",
      "item": {
        "type": "paragraph",
        "id": "a738a782374d06e2",
        "text": "I chose to use the \"sax\" style ASM API which seems best for annotating existing code. This worked for tracing, but not so much for translation. The \"dom\" version of the ASM API would seem preferred."
      },
      "date": 1378171102592
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a8a0ec3c0c7493cf",
        "text": ""
      },
      "id": "a8a0ec3c0c7493cf",
      "type": "add",
      "after": "a738a782374d06e2",
      "date": 1378171103098
    },
    {
      "type": "edit",
      "id": "a8a0ec3c0c7493cf",
      "item": {
        "type": "paragraph",
        "id": "a8a0ec3c0c7493cf",
        "text": "I found that I could not write Java code for some productions directly. I wish I could include a while loop as a term in an expression. This isn't possible in Java because a while loop is a statement, not a term. Instead I replaced while loops with calls to methods that contained the while loops. A work-around that will not be required when generating the while loop code in bytecode myself."
      },
      "date": 1378171255954
    },
    {
      "item": {
        "type": "paragraph",
        "id": "d54a83b7718eb4fc",
        "text": ""
      },
      "id": "d54a83b7718eb4fc",
      "type": "add",
      "after": "1b0affa638465998",
      "date": 1378171289913
    },
    {
      "type": "edit",
      "id": "d54a83b7718eb4fc",
      "item": {
        "type": "paragraph",
        "id": "d54a83b7718eb4fc",
        "text": "<h3> Strategy"
      },
      "date": 1378171296392
    },
    {
      "item": {
        "type": "paragraph",
        "id": "dfcb8c018d344c98",
        "text": ""
      },
      "id": "dfcb8c018d344c98",
      "type": "add",
      "after": "bffae110ceec18b6",
      "date": 1378171313011
    },
    {
      "type": "edit",
      "id": "dfcb8c018d344c98",
      "item": {
        "type": "paragraph",
        "id": "dfcb8c018d344c98",
        "text": "<h3> Limitations"
      },
      "date": 1378171319280
    },
    {
      "type": "edit",
      "id": "bffae110ceec18b6",
      "item": {
        "type": "paragraph",
        "id": "bffae110ceec18b6",
        "text": "I wrote an instrumentation jar that would amend each production method of the parser with trace calls that would report, step by step, the production rules that were accepted. [https://github.com/WardCunningham/pegasm github]"
      },
      "date": 1378171405073
    },
    {
      "type": "edit",
      "id": "3eddaf06d5173cd0",
      "item": {
        "type": "paragraph",
        "id": "3eddaf06d5173cd0",
        "text": "Chris Hansen explains the ASM capabilities in his PJUG talk in the fall of 2012. [http://asm.ow2.org/ api] [http://vimeo.com/57515597 video]"
      },
      "date": 1378172696955
    },
    {
      "type": "edit",
      "id": "d54a83b7718eb4fc",
      "item": {
        "type": "html",
        "id": "d54a83b7718eb4fc",
        "text": "<h3> Strategy"
      },
      "date": 1420390075796
    },
    {
      "type": "edit",
      "id": "dfcb8c018d344c98",
      "item": {
        "type": "html",
        "id": "dfcb8c018d344c98",
        "text": "<h3> Limitations"
      },
      "date": 1420390079074
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org",
      "date": 1627474481263
    },
    {
      "item": {
        "type": "factory",
        "id": "546c62c9c60e38b0"
      },
      "id": "546c62c9c60e38b0",
      "type": "add",
      "after": "a8a0ec3c0c7493cf",
      "date": 1627474591864
    },
    {
      "type": "edit",
      "id": "546c62c9c60e38b0",
      "item": {
        "type": "video",
        "id": "546c62c9c60e38b0",
        "text": "VIDEMO 57515597"
      },
      "date": 1627474599441
    },
    {
      "id": "546c62c9c60e38b0",
      "type": "move",
      "order": [
        "1b0affa638465998",
        "d54a83b7718eb4fc",
        "3eddaf06d5173cd0",
        "546c62c9c60e38b0",
        "1b084a1f39c75887",
        "f4dbe080d64e9b20",
        "d261f74463dd560b",
        "a691cd3979fcddb9",
        "bffae110ceec18b6",
        "dfcb8c018d344c98",
        "f9cac7d1cbd48bb6",
        "a738a782374d06e2",
        "a8a0ec3c0c7493cf"
      ],
      "date": 1627474611629
    },
    {
      "type": "edit",
      "id": "546c62c9c60e38b0",
      "item": {
        "type": "video",
        "id": "546c62c9c60e38b0",
        "text": "VIMEO 57515597"
      },
      "date": 1627474623629
    },
    {
      "type": "edit",
      "id": "546c62c9c60e38b0",
      "item": {
        "type": "video",
        "id": "546c62c9c60e38b0",
        "text": "VIMEO 57515597\nChris Hansen explains the ASM capabilities in his PJUG talk in the fall of 2012. [http://asm.ow2.org/ api] [http://vimeo.com/57515597 video]"
      },
      "date": 1627474650967
    },
    {
      "type": "remove",
      "id": "3eddaf06d5173cd0",
      "date": 1627474658954
    }
  ]
}