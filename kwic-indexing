{
  "title": "KWIC Indexing",
  "story": [
    {
      "type": "paragraph",
      "id": "f4859ca4767a6e27",
      "text": "The idea of [[Keyword-in-Context]] (KWIC) indexing is due to H. P. Luhn, Amer. Documentation 11 (1960), 288–295."
    },
    {
      "type": "paragraph",
      "id": "7cb3becffa53f086",
      "text": "See W. W. Youden, JACM 10 (1963), 583–646, where the full KWIC index appears. [https://books.google.ch/books?id=F1vRE-zp0LEC page]"
    },
    {
      "type": "pagefold",
      "id": "3cebad850d80f616",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "59e308544ee5bdc9",
      "text": "KNUTH, Donald Ervin, 1997. The art of computer programming. v. 3. Sorting and Searching. 2nd ed. Reading, Mass: Addison-Wesley. ISBN 0-201-89685-0, p. 439–442."
    },
    {
      "type": "paragraph",
      "id": "5d14d19de929cb4e",
      "text": "KWIC index, 439–442, 446, 494."
    },
    {
      "type": "paragraph",
      "id": "66898f0d869b25c9",
      "text": "Fig. 15. An optimum binary search tree for a KWIC indexing application. (p. 440)"
    },
    {
      "type": "paragraph",
      "id": "331277cf00ce68d6",
      "text": "When preparing a KWIC index file for sorting, we might want to use a binary search tree in order to test whether or not each particular word is to be indexed. The other words fall between two of the unindexed words, with the frequencies shown in the external nodes of Fig. 15; thus, exactly 277 words that are alphabetically between “PROBLEMS” and “SOLUTION” appeared in the JACM titles during 1954–1963."
    },
    {
      "type": "reference",
      "id": "4ef729929c44162f",
      "site": "wiki.ralfbarkow.ch",
      "slug": "track-in-reverse-order",
      "title": "Track in Reverse Order",
      "text": "If we consider the KWIC Indexing application of Fig. 15 instead of the 31 commonest English words, the [[Trie]] loses its advantage because of the nature of the data. For example, a trie requires 12 iterations to distinguish between COMPUTATION and COMPUTATIONS. In this case it would be better to build the trie so that words are scanned from right to left instead of from left to right. (TAOCP, v. 3, p. 494)"
    },
    {
      "type": "paragraph",
      "id": "f6d918ca38ad1205",
      "text": "p. 446: Construct a binary tree with n + 1 leaves, in such a way that σk corresponds to the path from the root to [k] for 0 ≤ k ≤n, where ‘0’ denotes a left branch and ‘1’ denotes a right branch. Also, if σk−1 has the form αk0βk and σk has the form αk1γk for some αk, βk, and γk, let the internal node (k) correspond to the [[Path]] αk. Thus we would have"
    },
    {
      "type": "image",
      "id": "3582b509a07acf44",
      "text": "TAOCP, v. 3, p. 446",
      "size": "wide",
      "width": 430,
      "height": 600,
      "url": "/assets/plugins/image/b4cf2d21daba7c4371e3a612fb54bf36.jpg"
    },
    {
      "type": "paragraph",
      "id": "c1766c3df4431e18",
      "text": "in the example above."
    },
    {
      "type": "paragraph",
      "id": "99701ac8b2374b5c",
      "text": "Note: (3) is a (k); [3] is a [k]. The circles and squares are not shown in the font."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "KWIC Indexing",
        "story": []
      },
      "date": 1694790402557
    },
    {
      "id": "f4859ca4767a6e27",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f4859ca4767a6e27",
        "text": "The idea of [[KWIC Indexing]] is due to H. P. Luhn, Amer. Documentation 11 (1960), 288–295. (See W. W. Youden, JACM 10 (1963), 583–646, where the full KWIC index appears.)"
      },
      "attribution": {
        "page": "Keyword-in-Context"
      },
      "date": 1694790410113
    },
    {
      "type": "edit",
      "id": "f4859ca4767a6e27",
      "item": {
        "type": "paragraph",
        "id": "f4859ca4767a6e27",
        "text": "The idea of KWIC indexing is due to H. P. Luhn, Amer. Documentation 11 (1960), 288–295. (See W. W. Youden, JACM 10 (1963), 583–646, where the full KWIC index appears.)"
      },
      "date": 1694790447486
    },
    {
      "id": "3cebad850d80f616",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "3cebad850d80f616",
        "text": "~"
      },
      "after": "f4859ca4767a6e27",
      "attribution": {
        "page": "Keyword-in-Context"
      },
      "date": 1694790450955
    },
    {
      "id": "59e308544ee5bdc9",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "59e308544ee5bdc9",
        "text": "KNUTH, Donald Ervin, 1997. The art of computer programming. v. 3. Sorting and Searching. 2nd ed. Reading, Mass: Addison-Wesley. ISBN 0-201-89685-0, p. 439–442.\n"
      },
      "after": "3cebad850d80f616",
      "attribution": {
        "page": "Keyword-in-Context"
      },
      "date": 1694790454433
    },
    {
      "item": {
        "type": "factory",
        "id": "ff2415132ff43186"
      },
      "id": "ff2415132ff43186",
      "type": "add",
      "after": "59e308544ee5bdc9",
      "date": 1694791320018
    },
    {
      "type": "edit",
      "id": "ff2415132ff43186",
      "item": {
        "type": "reference",
        "id": "ff2415132ff43186",
        "site": "wiki.ralfbarkow.ch",
        "slug": "keyword-in-context",
        "title": "Keyword-in-Context",
        "text": "The titles of all articles in the first ten volumes of the Journal of the ACM were sorted to prepare a concordance in which there was one line for every word of every title. However, certain words like “THE” and “EQUATION” were felt to be sufficiently uninformative that they were left out of the index. These special words and their frequency of occurrence are shown in the internal nodes of Fig. 15."
      },
      "date": 1694791323340
    },
    {
      "type": "edit",
      "id": "f4859ca4767a6e27",
      "item": {
        "type": "paragraph",
        "id": "f4859ca4767a6e27",
        "text": "The idea of KWIC indexing is due to H. P. Luhn, Amer. Documentation 11 (1960), 288–295. (See W. W. Youden, JACM 10 (1963), 583–646, where the full KWIC index appears. [https://books.google.ch/books?id=F1vRE-zp0LEC page])"
      },
      "date": 1694791496139
    },
    {
      "type": "edit",
      "id": "ff2415132ff43186",
      "item": {
        "type": "reference",
        "id": "ff2415132ff43186",
        "site": "wiki.ralfbarkow.ch",
        "slug": "keyword-in-context",
        "title": "Keyword-in-Context",
        "text": "The titles of all articles in the first ten volumes of the Journal of the ACM were sorted to prepare a concordance in which there was one line for every word of every title."
      },
      "date": 1694791877353
    },
    {
      "type": "edit",
      "id": "59e308544ee5bdc9",
      "item": {
        "type": "paragraph",
        "id": "59e308544ee5bdc9",
        "text": "KNUTH, Donald Ervin, 1997. The art of computer programming. v. 3. Sorting and Searching. 2nd ed. Reading, Mass: Addison-Wesley. ISBN 0-201-89685-0, p. 439–442."
      },
      "date": 1695025263580
    },
    {
      "type": "add",
      "id": "5d14d19de929cb4e",
      "item": {
        "type": "paragraph",
        "id": "5d14d19de929cb4e",
        "text": "KWIC index, 439–442, 446, 494."
      },
      "after": "59e308544ee5bdc9",
      "date": 1695025264412
    },
    {
      "type": "edit",
      "id": "f4859ca4767a6e27",
      "item": {
        "type": "paragraph",
        "id": "f4859ca4767a6e27",
        "text": "The idea of KWIC ([[Keyword-in-Context]]) indexing is due to H. P. Luhn, Amer. Documentation 11 (1960), 288–295. (See W. W. Youden, JACM 10 (1963), 583–646, where the full KWIC index appears. [https://books.google.ch/books?id=F1vRE-zp0LEC page])"
      },
      "date": 1695025375250
    },
    {
      "type": "edit",
      "id": "f4859ca4767a6e27",
      "item": {
        "type": "paragraph",
        "id": "f4859ca4767a6e27",
        "text": "The idea of [[Keyword-in-Context]] (KWIC) indexing is due to H. P. Luhn, Amer. Documentation 11 (1960), 288–295. (See W. W. Youden, JACM 10 (1963), 583–646, where the full KWIC index appears. [https://books.google.ch/books?id=F1vRE-zp0LEC page])"
      },
      "date": 1695025407881
    },
    {
      "type": "remove",
      "id": "ff2415132ff43186",
      "date": 1695025440798
    },
    {
      "type": "edit",
      "id": "f4859ca4767a6e27",
      "item": {
        "type": "paragraph",
        "id": "f4859ca4767a6e27",
        "text": "The idea of [[Keyword-in-Context]] (KWIC) indexing is due to H. P. Luhn, Amer. Documentation 11 (1960), 288–295."
      },
      "date": 1695025470275
    },
    {
      "type": "add",
      "id": "7cb3becffa53f086",
      "item": {
        "type": "paragraph",
        "id": "7cb3becffa53f086",
        "text": "See W. W. Youden, JACM 10 (1963), 583–646, where the full KWIC index appears. [https://books.google.ch/books?id=F1vRE-zp0LEC page]"
      },
      "after": "f4859ca4767a6e27",
      "date": 1695025473677
    },
    {
      "item": {
        "type": "factory",
        "id": "4ef729929c44162f"
      },
      "id": "4ef729929c44162f",
      "type": "add",
      "after": "5d14d19de929cb4e",
      "date": 1695025525011
    },
    {
      "type": "edit",
      "id": "4ef729929c44162f",
      "item": {
        "type": "reference",
        "id": "4ef729929c44162f",
        "site": "wiki.ralfbarkow.ch",
        "slug": "track-in-reverse-order",
        "title": "Track in Reverse Order",
        "text": "Notice that the statements are tracked in reverse as we [[Loop]], and we reorder them only once we are Done. This is a very common pattern with loop! [https://package.elm-lang.org/packages/elm/parser/latest/Parser#loop page]"
      },
      "date": 1695025528711
    },
    {
      "type": "edit",
      "id": "4ef729929c44162f",
      "item": {
        "type": "reference",
        "id": "4ef729929c44162f",
        "site": "wiki.ralfbarkow.ch",
        "slug": "track-in-reverse-order",
        "title": "Track in Reverse Order",
        "text": "If we consider the [[KWIC Indexing]] application of Fig. 15 instead of the 31 commonest English words, the [[Trie]] loses its advantage because of the nature of the data. For example, a trie requires 12 iterations to distinguish between COMPUTATION and COMPUTATIONS. In this case it would be better to build the trie so that words are scanned from right to left instead of from left to right. (TAOCP, v. 3, p. 494)"
      },
      "date": 1695025542912
    },
    {
      "type": "edit",
      "id": "4ef729929c44162f",
      "item": {
        "type": "reference",
        "id": "4ef729929c44162f",
        "site": "wiki.ralfbarkow.ch",
        "slug": "track-in-reverse-order",
        "title": "Track in Reverse Order",
        "text": "If we consider the KWIC Indexing application of Fig. 15 instead of the 31 commonest English words, the [[Trie]] loses its advantage because of the nature of the data. For example, a trie requires 12 iterations to distinguish between COMPUTATION and COMPUTATIONS. In this case it would be better to build the trie so that words are scanned from right to left instead of from left to right. (TAOCP, v. 3, p. 494)"
      },
      "date": 1695025560225
    },
    {
      "item": {
        "type": "factory",
        "id": "f6d918ca38ad1205"
      },
      "id": "f6d918ca38ad1205",
      "type": "add",
      "after": "4ef729929c44162f",
      "date": 1695025698158
    },
    {
      "type": "edit",
      "id": "f6d918ca38ad1205",
      "item": {
        "type": "paragraph",
        "id": "f6d918ca38ad1205",
        "text": "p. 446"
      },
      "date": 1695025709121
    },
    {
      "type": "add",
      "id": "66898f0d869b25c9",
      "item": {
        "type": "paragraph",
        "id": "66898f0d869b25c9",
        "text": "Fig. 15. An optimum binary search tree for a KWIC indexing application."
      },
      "after": "5d14d19de929cb4e",
      "date": 1695025748085
    },
    {
      "type": "edit",
      "id": "f6d918ca38ad1205",
      "item": {
        "type": "paragraph",
        "id": "f6d918ca38ad1205",
        "text": "p. 446: Construct a binary tree …"
      },
      "date": 1695025817756
    },
    {
      "type": "edit",
      "id": "66898f0d869b25c9",
      "item": {
        "type": "paragraph",
        "id": "66898f0d869b25c9",
        "text": "Fig. 15. An optimum binary search tree for a KWIC indexing application. (p. 440)"
      },
      "date": 1695025919404
    },
    {
      "id": "331277cf00ce68d6",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "331277cf00ce68d6",
        "text": "When preparing a KWIC index file for sorting, we might want to use a binary search tree in order to test whether or not each particular word is to be indexed. The other words fall between two of the unindexed words, with the frequencies shown in the external nodes of Fig. 15; thus, exactly 277 words that are alphabetically between “PROBLEMS” and “SOLUTION” appeared in the JACM titles during 1954–1963."
      },
      "after": "66898f0d869b25c9",
      "attribution": {
        "page": "Keyword-in-Context"
      },
      "date": 1695025957406
    },
    {
      "type": "edit",
      "id": "f6d918ca38ad1205",
      "item": {
        "type": "paragraph",
        "id": "f6d918ca38ad1205",
        "text": "p. 446: Construct a binary tree with n + 1 leaves, in such a way that σk corresponds to the path from the root to for 0 ≤ k ≤n, where ‘0’ denotes a left branch and ‘1’ denotes a right branch. Also, if σk−1 has the form αk0βk and σk has the form αk1γk for some αk, βk, and γk, let the internal node correspond to the path αk. Thus we would have"
      },
      "date": 1695026029165
    },
    {
      "type": "edit",
      "id": "f6d918ca38ad1205",
      "item": {
        "type": "paragraph",
        "id": "f6d918ca38ad1205",
        "text": "p. 446: Construct a binary tree with n + 1 leaves, in such a way that σk corresponds to the path from the root to [k] for 0 ≤ k ≤n, where ‘0’ denotes a left branch and ‘1’ denotes a right branch. Also, if σk−1 has the form αk0βk and σk has the form αk1γk for some αk, βk, and γk, let the internal node correspond to the path αk. Thus we would have"
      },
      "date": 1695026074404
    },
    {
      "type": "edit",
      "id": "f6d918ca38ad1205",
      "item": {
        "type": "paragraph",
        "id": "f6d918ca38ad1205",
        "text": "p. 446: Construct a binary tree with n + 1 leaves, in such a way that σk corresponds to the path from the root to [k] for 0 ≤ k ≤n, where ‘0’ denotes a left branch and ‘1’ denotes a right branch. Also, if σk−1 has the form αk0βk and σk has the form αk1γk for some αk, βk, and γk, let the internal node (k) correspond to the path αk. Thus we would have"
      },
      "date": 1695026118491
    },
    {
      "type": "edit",
      "id": "f6d918ca38ad1205",
      "item": {
        "type": "paragraph",
        "id": "f6d918ca38ad1205",
        "text": "p. 446: Construct a binary tree with n + 1 leaves, in such a way that σk corresponds to the path from the root to [k] for 0 ≤ k ≤n, where ‘0’ denotes a left branch and ‘1’ denotes a right branch. Also, if σk−1 has the form αk0βk and σk has the form αk1γk for some αk, βk, and γk, let the internal node (k) correspond to the [[Path]] αk. Thus we would have"
      },
      "date": 1695026132901
    },
    {
      "item": {
        "type": "factory",
        "id": "3582b509a07acf44"
      },
      "id": "3582b509a07acf44",
      "type": "add",
      "after": "f6d918ca38ad1205",
      "date": 1695026561590
    },
    {
      "type": "edit",
      "id": "3582b509a07acf44",
      "item": {
        "type": "image",
        "id": "3582b509a07acf44",
        "text": "TAOCP, v. 3, p. 446",
        "size": "wide",
        "width": 430,
        "height": 600,
        "url": "/assets/plugins/image/b4cf2d21daba7c4371e3a612fb54bf36.jpg"
      },
      "date": 1695026612268
    },
    {
      "item": {
        "type": "factory",
        "id": "c1766c3df4431e18"
      },
      "id": "c1766c3df4431e18",
      "type": "add",
      "after": "3582b509a07acf44",
      "date": 1695026682264
    },
    {
      "type": "edit",
      "id": "c1766c3df4431e18",
      "item": {
        "type": "paragraph",
        "id": "c1766c3df4431e18",
        "text": "in the example above."
      },
      "date": 1695026699096
    },
    {
      "type": "add",
      "id": "99701ac8b2374b5c",
      "item": {
        "type": "paragraph",
        "id": "99701ac8b2374b5c",
        "text": "Note: (3) is (k); [3] is a [k]."
      },
      "after": "c1766c3df4431e18",
      "date": 1695026756163
    },
    {
      "type": "edit",
      "id": "99701ac8b2374b5c",
      "item": {
        "type": "paragraph",
        "id": "99701ac8b2374b5c",
        "text": "Note: (3) is a (k); [3] is a [k]."
      },
      "date": 1695026762223
    },
    {
      "type": "edit",
      "id": "99701ac8b2374b5c",
      "item": {
        "type": "paragraph",
        "id": "99701ac8b2374b5c",
        "text": "Note: (3) is a (k); [3] is a [k]. The circles and squares are not shown in the font."
      },
      "date": 1695026827691
    }
  ]
}