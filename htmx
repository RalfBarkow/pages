{
  "title": "htmx",
  "story": [
    {
      "type": "paragraph",
      "id": "b30b86b457f7a979",
      "text": "gives you access to AJAX, CSS Transitions, WebSockets and Server Sent Events directly in HTML, using attributes, so you can build modern user interfaces with the simplicity and power of hypertext [https://htmx.org/ site]"
    },
    {
      "type": "paragraph",
      "id": "8ca63e6cd5ef918c",
      "text": "htmx is small (~14k min.gz’d), dependency-free, extendable, IE11 compatible & has reduced code base sizes by 67% when compared with react"
    },
    {
      "type": "pagefold",
      "id": "04343249bcd7a136",
      "text": "Elm Slack Thread"
    },
    {
      "type": "markdown",
      "id": "2faa10c7ec2b167b",
      "text": "jhbrown [https://elmlang.slack.com/archives/C0CJ671HU/p1697498629487339 post]\n\n(a)  What do people think of htmx?  https://htmx.org/\n(b) What would it look like with Elm? :slightly_smiling_face:\n49 replies\n\n\nErik\n\n(a) grug brain think probably good. Grug should try.\n(b) grug no think good match.\n\n\n\nWolfgang Schuster (wolfadex)\n\n(a) easy for grug to write, hard for grug to remember how it works"
    },
    {
      "type": "markdown",
      "id": "6cbb6620728c4e3d",
      "text": "Axelerator\n\nI think there is a ceiling in application complexity this can handle is nice to manage with htmx. Feelsmlike it's perative vs declarative all over again. Of course you can build TEA on top of htmx, but much of the appeal to it's proponents is how easy it is to \"just switch out this part of the html\".\nSo I have the feeling Elm and htmx have opposing philosophies. What experience do you expect when you say \"What would it look like with Elm?\"\n\n\njhbrown\n\nA couple of different ideas, at least, but here’s one:\nSuppose that your Elm was running server-side to render the initial HTML, which shipped across the wire.  Then when things happened, Elm would again run server-side, the vdom diff would happen there, and only the changed bits would ship to the browser, again as HTML."
    },
    {
      "type": "markdown",
      "id": "4182caed06d363e0",
      "text": "hayleigh\n\nSo phoenix liveview?\n\n\nsebbes\n  17 hours ago\nI think the most difficult thing to manage with HTMX is: on / server generates a full HTML page withe \"blocks\" A, B, C. After that, htmx will reload some fragment of the page, say A with a call to /a.html. How do we ensure that the function running behind /a.html is the same* that the one used to render A under / .\n*I mean, the same function but with some distinct arguments\n\n\nktosiek\n  13 hours ago\nOne approach would be: just call / again instead of a dedicated endpoint, and extract the part you want to replace. It will still be more interactive then a full reload.\n:100:\n1\n\n\n\nktosiek\n  13 hours ago\nYou can add hints for the backend to skip rendering some heavier parts, if it's worth it\n\n\nRobin\n  13 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n:+1:\n1\n\n\n\nRobin\n  13 hours ago\nMost of the SPA's I've worked on, have no business being SPA's.\n\n\nRobin\n  13 hours ago\nExcept, maybe, for a few sections of the app\n\n\nRobin\n  13 hours ago\nWhich means that most of what was an SPA, could've been regular backend rendered html.\n\n\nRobin\n  13 hours ago\nSo I'm in the \"Htmx is great\" camp. It makes it easier to continue using \"regular\" html if you don't need the full powers of SPAs, with all the additional complexity that entails.\nAlso sent to the channel\n\n\nAxelerator\n  10 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n100% agreed and this immediately triggers the question for me:\nWhat are the factors to determine when to go with an SPA from the start.\nBecause I would argue the migration between the two paradigms is either a full rewrite or a multi-person-year page-by-page endeavour from my experience (i.e. Shopify went from plain Rails to React).\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI did a full app rewrite at Northwestern Mutual. If you can afford a dedicated team it can be done in a year.\n\n\nRobin\n  10 hours ago\nI would argue that your frontend doesn’t have to be entirely written as a SPA.\nStart with backend rendered html. Add htmx if you need a little bit more dynamism (not on every page, but where it matters) then use SPA where it really pays off.\nAs a result, the SPAs you do have might end up less complex (maybe you don’t need routing, or form validation, for instance) (edited) \n:arrow_up:\n1\n\n\n\nAxelerator\n  10 hours ago\nI think this only applies to a certain category of applications. I have a feeling a lot of things that make an app feel \"nice\" move an app from one category to the other. I.e. being able to drag&drop items across the whole page or global effects like counters that update in one section of the page when another gets modified.\nThese are things that are often not part of the MVP. The most efficient approach of building the MVP is now HTML + \"a bit of JS\".\nBut adding these overarching features becomes now a lot more expensive because there is no concept of tracking \"the whole Model\" (unless we go full Phoenix as mentioned before).\nTldr: I feel the Htmx approach is creating a lower ceiling for UX that only becomes apparent until it's too late."
    },
    {
      "type": "markdown",
      "id": "1f3380a0424027c8",
      "text": "Wolfgang Schuster (wolfadex)\n\nThis topic of tacit programming comes up in https://www.youtube.com/watch?v=NcUJnmBqHTY towards the end."
    },
    {
      "type": "video",
      "id": "6881c96ec42e614d",
      "text": "YOUTUBE NcUJnmBqHTY"
    },
    {
      "type": "markdown",
      "id": "7140bbe8c0f666c2",
      "text": "Tldr: Pokey suggests that tacit languages are great for short lived things like quick bash commands or Cursorless, but not great for long lived code like a script that's saved and re-used/modified or an app. I kinda feel like htmx falls into the tacit category where it's great for something short lived but not as great for something long lived.\n\n\n\n\nRobin\n  10 hours ago\nSure. But it’s rare for your entire frontend to be «long lived»\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI think «long lived» in the context of the talk, though he doesn't give a timeframe, is roughly more than a moment. I'd guess anything older than 1 day. I think if you're working on something by yourself this could be stretched to weeks/months, but if you're on a team the 1 day feels more accurate\n\n\nRobin\n  10 hours ago\nAhh. I disagree :sweat_smile:\nLike. Would we really need code splitting, backend rendering and reconciliation of frontend code and the like if we only used SPAs for the dynamic parts of our frontends?\nI also feel that we spend so much time revuildi g what the browser allready provides, like loading indicators, date pickers, autocomplete etc\n\n\nRobin\n  10 hours ago\nOf course, I don’t know what ya’ll are making, but the stuff that I make… so much of it would’ve been simpler if it was plain Html\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nOh, I absolutely agree with doing too much rebuilding of what the browser does well. I'm also not arguing against server rendering. I'm arguing for code that's easy to maintain and I feel like htmx compared to Elm doesn't lean as well into easy maintenance, leans more into quick scaffolding."
    },
    {
      "type": "markdown",
      "id": "f42209cc21bfd52d",
      "text": "jhbrown\n\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI"
    },
    {
      "type": "video",
      "id": "34115e772ad38c92",
      "text": "YOUTUBE 3GObi93tjZI"
    },
    {
      "type": "markdown",
      "id": "400ca126d8b74fb6",
      "text": "jhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in [[Gren]] at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can."
    },
    {
      "type": "markdown",
      "id": "36cc41737a15ef67",
      "text": "Robin\n\nActually, I prefer Elm anyway. That’s why I’m making [[Gren]], to have a shot at enjoying writing backend code \n\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated [[partials]].\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement"
    },
    {
      "type": "markdown",
      "id": "d8e2d1b1d42aa614",
      "text": "rmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o"
    },
    {
      "type": "video",
      "id": "4ab8b47afa79b4d3",
      "text": "YOUTUBE 860d8usGC0o"
    },
    {
      "type": "markdown",
      "id": "d5f59308b69a57fd",
      "text": "erlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "htmx",
        "story": []
      },
      "date": 1697588941259
    },
    {
      "item": {
        "type": "factory",
        "id": "2faa10c7ec2b167b"
      },
      "id": "2faa10c7ec2b167b",
      "type": "add",
      "date": 1697588943382
    },
    {
      "type": "edit",
      "id": "2faa10c7ec2b167b",
      "item": {
        "type": "markdown",
        "id": "2faa10c7ec2b167b",
        "text": "\nSaved for later\n\n\njhbrown\n  1 day ago\n(a)  What do people think of htmx?  https://htmx.org/\n(b) What would it look like with Elm? :slightly_smiling_face:\n49 replies\n\n\nErik\n:coffee:  1 day ago\n(a) grug brain think probably good. Grug should try.\n(b) grug no think good match.\n:purple_heart:\n1\n\n\n\nWolfgang Schuster (wolfadex)\n  1 day ago\n(a) easy for grug to write, hard for grug to remember how it works\n\n\nAxelerator\n  22 hours ago\nI think there is a ceiling in application complexity this can handle is nice to manage with htmx. Feelsmlike it's perative vs declarative all over again. Of course you can build TEA on top of htmx, but much of the appeal to it's proponents is how easy it is to \"just switch out this part of the html\".\nSo I have the feeling Elm and htmx have opposing philosophies. What experience do you expect when you say \"What would it look like with Elm?\"\n\n\njhbrown\n  22 hours ago\nA couple of different ideas, at least, but here’s one:\nSuppose that your Elm was running server-side to render the initial HTML, which shipped across the wire.  Then when things happened, Elm would again run server-side, the vdom diff would happen there, and only the changed bits would ship to the browser, again as HTML.\n\n\nhayleigh\n  19 hours ago\nSo phoenix liveview?\n\n\nsebbes\n  17 hours ago\nI think the most difficult thing to manage with HTMX is: on / server generates a full HTML page withe \"blocks\" A, B, C. After that, htmx will reload some fragment of the page, say A with a call to /a.html. How do we ensure that the function running behind /a.html is the same* that the one used to render A under / .\n*I mean, the same function but with some distinct arguments\n\n\nktosiek\n  13 hours ago\nOne approach would be: just call / again instead of a dedicated endpoint, and extract the part you want to replace. It will still be more interactive then a full reload.\n:100:\n1\n\n\n\nktosiek\n  13 hours ago\nYou can add hints for the backend to skip rendering some heavier parts, if it's worth it\n\n\nRobin\n  13 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n:+1:\n1\n\n\n\nRobin\n  13 hours ago\nMost of the SPA's I've worked on, have no business being SPA's.\n\n\nRobin\n  13 hours ago\nExcept, maybe, for a few sections of the app\n\n\nRobin\n  13 hours ago\nWhich means that most of what was an SPA, could've been regular backend rendered html.\n\n\nRobin\n  13 hours ago\nSo I'm in the \"Htmx is great\" camp. It makes it easier to continue using \"regular\" html if you don't need the full powers of SPAs, with all the additional complexity that entails.\nAlso sent to the channel\n\n\nAxelerator\n  10 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n100% agreed and this immediately triggers the question for me:\nWhat are the factors to determine when to go with an SPA from the start.\nBecause I would argue the migration between the two paradigms is either a full rewrite or a multi-person-year page-by-page endeavour from my experience (i.e. Shopify went from plain Rails to React).\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI did a full app rewrite at Northwestern Mutual. If you can afford a dedicated team it can be done in a year.\n\n\nRobin\n  10 hours ago\nI would argue that your frontend doesn’t have to be entirely written as a SPA.\nStart with backend rendered html. Add htmx if you need a little bit more dynamism (not on every page, but where it matters) then use SPA where it really pays off.\nAs a result, the SPAs you do have might end up less complex (maybe you don’t need routing, or form validation, for instance) (edited) \n:arrow_up:\n1\n\n\n\nAxelerator\n  10 hours ago\nI think this only applies to a certain category of applications. I have a feeling a lot of things that make an app feel \"nice\" move an app from one category to the other. I.e. being able to drag&drop items across the whole page or global effects like counters that update in one section of the page when another gets modified.\nThese are things that are often not part of the MVP. The most efficient approach of building the MVP is now HTML + \"a bit of JS\".\nBut adding these overarching features becomes now a lot more expensive because there is no concept of tracking \"the whole Model\" (unless we go full Phoenix as mentioned before).\nTldr: I feel the Htmx approach is creating a lower ceiling for UX that only becomes apparent until it's too late.\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nThis topic of tacit programming comes up in https://www.youtube.com/watch?v=NcUJnmBqHTY towards the end. Tldr: Pokey suggests that tacit languages are great for short lived things like quick bash commands or Cursorless, but not great for long lived code like a script that's saved and re-used/modified or an app. I kinda feel like htmx falls into the tacit category where it's great for something short lived but not as great for something long lived.\n:heart_eyes_cat:\n1\n\n\n\nRobin\n  10 hours ago\nSure. But it’s rare for your entire frontend to be «long lived»\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI think «long lived» in the context of the talk, though he doesn't give a timeframe, is roughly more than a moment. I'd guess anything older than 1 day. I think if you're working on something by yourself this could be stretched to weeks/months, but if you're on a team the 1 day feels more accurate\n\n\nRobin\n  10 hours ago\nAhh. I disagree :sweat_smile:\nLike. Would we really need code splitting, backend rendering and reconciliation of frontend code and the like if we only used SPAs for the dynamic parts of our frontends?\nI also feel that we spend so much time revuildi g what the browser allready provides, like loading indicators, date pickers, autocomplete etc\n\n\nRobin\n  10 hours ago\nOf course, I don’t know what ya’ll are making, but the stuff that I make… so much of it would’ve been simpler if it was plain Html\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nOh, I absolutely agree with doing too much rebuilding of what the browser does well. I'm also not arguing against server rendering. I'm arguing for code that's easy to maintain and I feel like htmx compared to Elm doesn't lean as well into easy maintenance, leans more into quick scaffolding.\n\n\njhbrown\n  10 hours ago\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI\n\n\njhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "date": 1697588946153
    },
    {
      "id": "b30b86b457f7a979",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b30b86b457f7a979",
        "text": "gives you access to AJAX, CSS Transitions, WebSockets and Server Sent Events directly in HTML, using attributes, so you can build modern user interfaces with the simplicity and power of hypertext"
      },
      "attribution": {
        "page": "2023-10-18"
      },
      "date": 1697588970859
    },
    {
      "type": "edit",
      "id": "b30b86b457f7a979",
      "item": {
        "type": "paragraph",
        "id": "b30b86b457f7a979",
        "text": "gives you access to AJAX, CSS Transitions, WebSockets and Server Sent Events directly in HTML, using attributes, so you can build modern user interfaces with the simplicity and power of hypertext [https://htmx.org/ site]"
      },
      "date": 1697588996292
    },
    {
      "type": "add",
      "id": "8ca63e6cd5ef918c",
      "item": {
        "type": "paragraph",
        "id": "8ca63e6cd5ef918c",
        "text": "htmx is small (~14k min.gz’d), dependency-free, extendable, IE11 compatible & has reduced code base sizes by 67% when compared with react"
      },
      "after": "b30b86b457f7a979",
      "date": 1697589030436
    },
    {
      "id": "04343249bcd7a136",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "04343249bcd7a136",
        "text": "Elm Slack Thread"
      },
      "after": "8ca63e6cd5ef918c",
      "attribution": {
        "page": "2023-10-18"
      },
      "date": 1697589069862
    },
    {
      "type": "edit",
      "id": "2faa10c7ec2b167b",
      "item": {
        "type": "markdown",
        "id": "2faa10c7ec2b167b",
        "text": "jhbrown\n  1 day ago\n(a)  What do people think of htmx?  https://htmx.org/\n(b) What would it look like with Elm? :slightly_smiling_face:\n49 replies\n\n\nErik\n:coffee:  1 day ago\n(a) grug brain think probably good. Grug should try.\n(b) grug no think good match.\n:purple_heart:\n1\n\n\n\nWolfgang Schuster (wolfadex)\n  1 day ago\n(a) easy for grug to write, hard for grug to remember how it works\n\n\nAxelerator\n  22 hours ago\nI think there is a ceiling in application complexity this can handle is nice to manage with htmx. Feelsmlike it's perative vs declarative all over again. Of course you can build TEA on top of htmx, but much of the appeal to it's proponents is how easy it is to \"just switch out this part of the html\".\nSo I have the feeling Elm and htmx have opposing philosophies. What experience do you expect when you say \"What would it look like with Elm?\"\n\n\njhbrown\n  22 hours ago\nA couple of different ideas, at least, but here’s one:\nSuppose that your Elm was running server-side to render the initial HTML, which shipped across the wire.  Then when things happened, Elm would again run server-side, the vdom diff would happen there, and only the changed bits would ship to the browser, again as HTML.\n\n\nhayleigh\n  19 hours ago\nSo phoenix liveview?\n\n\nsebbes\n  17 hours ago\nI think the most difficult thing to manage with HTMX is: on / server generates a full HTML page withe \"blocks\" A, B, C. After that, htmx will reload some fragment of the page, say A with a call to /a.html. How do we ensure that the function running behind /a.html is the same* that the one used to render A under / .\n*I mean, the same function but with some distinct arguments\n\n\nktosiek\n  13 hours ago\nOne approach would be: just call / again instead of a dedicated endpoint, and extract the part you want to replace. It will still be more interactive then a full reload.\n:100:\n1\n\n\n\nktosiek\n  13 hours ago\nYou can add hints for the backend to skip rendering some heavier parts, if it's worth it\n\n\nRobin\n  13 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n:+1:\n1\n\n\n\nRobin\n  13 hours ago\nMost of the SPA's I've worked on, have no business being SPA's.\n\n\nRobin\n  13 hours ago\nExcept, maybe, for a few sections of the app\n\n\nRobin\n  13 hours ago\nWhich means that most of what was an SPA, could've been regular backend rendered html.\n\n\nRobin\n  13 hours ago\nSo I'm in the \"Htmx is great\" camp. It makes it easier to continue using \"regular\" html if you don't need the full powers of SPAs, with all the additional complexity that entails.\nAlso sent to the channel\n\n\nAxelerator\n  10 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n100% agreed and this immediately triggers the question for me:\nWhat are the factors to determine when to go with an SPA from the start.\nBecause I would argue the migration between the two paradigms is either a full rewrite or a multi-person-year page-by-page endeavour from my experience (i.e. Shopify went from plain Rails to React).\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI did a full app rewrite at Northwestern Mutual. If you can afford a dedicated team it can be done in a year.\n\n\nRobin\n  10 hours ago\nI would argue that your frontend doesn’t have to be entirely written as a SPA.\nStart with backend rendered html. Add htmx if you need a little bit more dynamism (not on every page, but where it matters) then use SPA where it really pays off.\nAs a result, the SPAs you do have might end up less complex (maybe you don’t need routing, or form validation, for instance) (edited) \n:arrow_up:\n1\n\n\n\nAxelerator\n  10 hours ago\nI think this only applies to a certain category of applications. I have a feeling a lot of things that make an app feel \"nice\" move an app from one category to the other. I.e. being able to drag&drop items across the whole page or global effects like counters that update in one section of the page when another gets modified.\nThese are things that are often not part of the MVP. The most efficient approach of building the MVP is now HTML + \"a bit of JS\".\nBut adding these overarching features becomes now a lot more expensive because there is no concept of tracking \"the whole Model\" (unless we go full Phoenix as mentioned before).\nTldr: I feel the Htmx approach is creating a lower ceiling for UX that only becomes apparent until it's too late.\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nThis topic of tacit programming comes up in https://www.youtube.com/watch?v=NcUJnmBqHTY towards the end. Tldr: Pokey suggests that tacit languages are great for short lived things like quick bash commands or Cursorless, but not great for long lived code like a script that's saved and re-used/modified or an app. I kinda feel like htmx falls into the tacit category where it's great for something short lived but not as great for something long lived.\n:heart_eyes_cat:\n1\n\n\n\nRobin\n  10 hours ago\nSure. But it’s rare for your entire frontend to be «long lived»\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI think «long lived» in the context of the talk, though he doesn't give a timeframe, is roughly more than a moment. I'd guess anything older than 1 day. I think if you're working on something by yourself this could be stretched to weeks/months, but if you're on a team the 1 day feels more accurate\n\n\nRobin\n  10 hours ago\nAhh. I disagree :sweat_smile:\nLike. Would we really need code splitting, backend rendering and reconciliation of frontend code and the like if we only used SPAs for the dynamic parts of our frontends?\nI also feel that we spend so much time revuildi g what the browser allready provides, like loading indicators, date pickers, autocomplete etc\n\n\nRobin\n  10 hours ago\nOf course, I don’t know what ya’ll are making, but the stuff that I make… so much of it would’ve been simpler if it was plain Html\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nOh, I absolutely agree with doing too much rebuilding of what the browser does well. I'm also not arguing against server rendering. I'm arguing for code that's easy to maintain and I feel like htmx compared to Elm doesn't lean as well into easy maintenance, leans more into quick scaffolding.\n\n\njhbrown\n  10 hours ago\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI\n\n\njhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "date": 1697589078246
    },
    {
      "type": "edit",
      "id": "2faa10c7ec2b167b",
      "item": {
        "type": "markdown",
        "id": "2faa10c7ec2b167b",
        "text": "jhbrown [https://elmlang.slack.com/archives/C0CJ671HU/p1697498629487339 post]\n  1 day ago\n(a)  What do people think of htmx?  https://htmx.org/\n(b) What would it look like with Elm? :slightly_smiling_face:\n49 replies\n\n\nErik\n:coffee:  1 day ago\n(a) grug brain think probably good. Grug should try.\n(b) grug no think good match.\n:purple_heart:\n1\n\n\n\nWolfgang Schuster (wolfadex)\n  1 day ago\n(a) easy for grug to write, hard for grug to remember how it works\n\n\nAxelerator\n  22 hours ago\nI think there is a ceiling in application complexity this can handle is nice to manage with htmx. Feelsmlike it's perative vs declarative all over again. Of course you can build TEA on top of htmx, but much of the appeal to it's proponents is how easy it is to \"just switch out this part of the html\".\nSo I have the feeling Elm and htmx have opposing philosophies. What experience do you expect when you say \"What would it look like with Elm?\"\n\n\njhbrown\n  22 hours ago\nA couple of different ideas, at least, but here’s one:\nSuppose that your Elm was running server-side to render the initial HTML, which shipped across the wire.  Then when things happened, Elm would again run server-side, the vdom diff would happen there, and only the changed bits would ship to the browser, again as HTML.\n\n\nhayleigh\n  19 hours ago\nSo phoenix liveview?\n\n\nsebbes\n  17 hours ago\nI think the most difficult thing to manage with HTMX is: on / server generates a full HTML page withe \"blocks\" A, B, C. After that, htmx will reload some fragment of the page, say A with a call to /a.html. How do we ensure that the function running behind /a.html is the same* that the one used to render A under / .\n*I mean, the same function but with some distinct arguments\n\n\nktosiek\n  13 hours ago\nOne approach would be: just call / again instead of a dedicated endpoint, and extract the part you want to replace. It will still be more interactive then a full reload.\n:100:\n1\n\n\n\nktosiek\n  13 hours ago\nYou can add hints for the backend to skip rendering some heavier parts, if it's worth it\n\n\nRobin\n  13 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n:+1:\n1\n\n\n\nRobin\n  13 hours ago\nMost of the SPA's I've worked on, have no business being SPA's.\n\n\nRobin\n  13 hours ago\nExcept, maybe, for a few sections of the app\n\n\nRobin\n  13 hours ago\nWhich means that most of what was an SPA, could've been regular backend rendered html.\n\n\nRobin\n  13 hours ago\nSo I'm in the \"Htmx is great\" camp. It makes it easier to continue using \"regular\" html if you don't need the full powers of SPAs, with all the additional complexity that entails.\nAlso sent to the channel\n\n\nAxelerator\n  10 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n100% agreed and this immediately triggers the question for me:\nWhat are the factors to determine when to go with an SPA from the start.\nBecause I would argue the migration between the two paradigms is either a full rewrite or a multi-person-year page-by-page endeavour from my experience (i.e. Shopify went from plain Rails to React).\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI did a full app rewrite at Northwestern Mutual. If you can afford a dedicated team it can be done in a year.\n\n\nRobin\n  10 hours ago\nI would argue that your frontend doesn’t have to be entirely written as a SPA.\nStart with backend rendered html. Add htmx if you need a little bit more dynamism (not on every page, but where it matters) then use SPA where it really pays off.\nAs a result, the SPAs you do have might end up less complex (maybe you don’t need routing, or form validation, for instance) (edited) \n:arrow_up:\n1\n\n\n\nAxelerator\n  10 hours ago\nI think this only applies to a certain category of applications. I have a feeling a lot of things that make an app feel \"nice\" move an app from one category to the other. I.e. being able to drag&drop items across the whole page or global effects like counters that update in one section of the page when another gets modified.\nThese are things that are often not part of the MVP. The most efficient approach of building the MVP is now HTML + \"a bit of JS\".\nBut adding these overarching features becomes now a lot more expensive because there is no concept of tracking \"the whole Model\" (unless we go full Phoenix as mentioned before).\nTldr: I feel the Htmx approach is creating a lower ceiling for UX that only becomes apparent until it's too late.\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nThis topic of tacit programming comes up in https://www.youtube.com/watch?v=NcUJnmBqHTY towards the end. Tldr: Pokey suggests that tacit languages are great for short lived things like quick bash commands or Cursorless, but not great for long lived code like a script that's saved and re-used/modified or an app. I kinda feel like htmx falls into the tacit category where it's great for something short lived but not as great for something long lived.\n:heart_eyes_cat:\n1\n\n\n\nRobin\n  10 hours ago\nSure. But it’s rare for your entire frontend to be «long lived»\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI think «long lived» in the context of the talk, though he doesn't give a timeframe, is roughly more than a moment. I'd guess anything older than 1 day. I think if you're working on something by yourself this could be stretched to weeks/months, but if you're on a team the 1 day feels more accurate\n\n\nRobin\n  10 hours ago\nAhh. I disagree :sweat_smile:\nLike. Would we really need code splitting, backend rendering and reconciliation of frontend code and the like if we only used SPAs for the dynamic parts of our frontends?\nI also feel that we spend so much time revuildi g what the browser allready provides, like loading indicators, date pickers, autocomplete etc\n\n\nRobin\n  10 hours ago\nOf course, I don’t know what ya’ll are making, but the stuff that I make… so much of it would’ve been simpler if it was plain Html\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nOh, I absolutely agree with doing too much rebuilding of what the browser does well. I'm also not arguing against server rendering. I'm arguing for code that's easy to maintain and I feel like htmx compared to Elm doesn't lean as well into easy maintenance, leans more into quick scaffolding.\n\n\njhbrown\n  10 hours ago\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI\n\n\njhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "date": 1697589103985
    },
    {
      "type": "edit",
      "id": "2faa10c7ec2b167b",
      "item": {
        "type": "markdown",
        "id": "2faa10c7ec2b167b",
        "text": "jhbrown [https://elmlang.slack.com/archives/C0CJ671HU/p1697498629487339 post]\n\n(a)  What do people think of htmx?  https://htmx.org/\n(b) What would it look like with Elm? :slightly_smiling_face:\n49 replies\n\n\nErik\n\n(a) grug brain think probably good. Grug should try.\n(b) grug no think good match.\n:purple_heart:\n1\n\n\n\nWolfgang Schuster (wolfadex)\n  1 day ago\n(a) easy for grug to write, hard for grug to remember how it works\n\n\nAxelerator\n  22 hours ago\nI think there is a ceiling in application complexity this can handle is nice to manage with htmx. Feelsmlike it's perative vs declarative all over again. Of course you can build TEA on top of htmx, but much of the appeal to it's proponents is how easy it is to \"just switch out this part of the html\".\nSo I have the feeling Elm and htmx have opposing philosophies. What experience do you expect when you say \"What would it look like with Elm?\"\n\n\njhbrown\n  22 hours ago\nA couple of different ideas, at least, but here’s one:\nSuppose that your Elm was running server-side to render the initial HTML, which shipped across the wire.  Then when things happened, Elm would again run server-side, the vdom diff would happen there, and only the changed bits would ship to the browser, again as HTML.\n\n\nhayleigh\n  19 hours ago\nSo phoenix liveview?\n\n\nsebbes\n  17 hours ago\nI think the most difficult thing to manage with HTMX is: on / server generates a full HTML page withe \"blocks\" A, B, C. After that, htmx will reload some fragment of the page, say A with a call to /a.html. How do we ensure that the function running behind /a.html is the same* that the one used to render A under / .\n*I mean, the same function but with some distinct arguments\n\n\nktosiek\n  13 hours ago\nOne approach would be: just call / again instead of a dedicated endpoint, and extract the part you want to replace. It will still be more interactive then a full reload.\n:100:\n1\n\n\n\nktosiek\n  13 hours ago\nYou can add hints for the backend to skip rendering some heavier parts, if it's worth it\n\n\nRobin\n  13 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n:+1:\n1\n\n\n\nRobin\n  13 hours ago\nMost of the SPA's I've worked on, have no business being SPA's.\n\n\nRobin\n  13 hours ago\nExcept, maybe, for a few sections of the app\n\n\nRobin\n  13 hours ago\nWhich means that most of what was an SPA, could've been regular backend rendered html.\n\n\nRobin\n  13 hours ago\nSo I'm in the \"Htmx is great\" camp. It makes it easier to continue using \"regular\" html if you don't need the full powers of SPAs, with all the additional complexity that entails.\nAlso sent to the channel\n\n\nAxelerator\n  10 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n100% agreed and this immediately triggers the question for me:\nWhat are the factors to determine when to go with an SPA from the start.\nBecause I would argue the migration between the two paradigms is either a full rewrite or a multi-person-year page-by-page endeavour from my experience (i.e. Shopify went from plain Rails to React).\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI did a full app rewrite at Northwestern Mutual. If you can afford a dedicated team it can be done in a year.\n\n\nRobin\n  10 hours ago\nI would argue that your frontend doesn’t have to be entirely written as a SPA.\nStart with backend rendered html. Add htmx if you need a little bit more dynamism (not on every page, but where it matters) then use SPA where it really pays off.\nAs a result, the SPAs you do have might end up less complex (maybe you don’t need routing, or form validation, for instance) (edited) \n:arrow_up:\n1\n\n\n\nAxelerator\n  10 hours ago\nI think this only applies to a certain category of applications. I have a feeling a lot of things that make an app feel \"nice\" move an app from one category to the other. I.e. being able to drag&drop items across the whole page or global effects like counters that update in one section of the page when another gets modified.\nThese are things that are often not part of the MVP. The most efficient approach of building the MVP is now HTML + \"a bit of JS\".\nBut adding these overarching features becomes now a lot more expensive because there is no concept of tracking \"the whole Model\" (unless we go full Phoenix as mentioned before).\nTldr: I feel the Htmx approach is creating a lower ceiling for UX that only becomes apparent until it's too late.\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nThis topic of tacit programming comes up in https://www.youtube.com/watch?v=NcUJnmBqHTY towards the end. Tldr: Pokey suggests that tacit languages are great for short lived things like quick bash commands or Cursorless, but not great for long lived code like a script that's saved and re-used/modified or an app. I kinda feel like htmx falls into the tacit category where it's great for something short lived but not as great for something long lived.\n:heart_eyes_cat:\n1\n\n\n\nRobin\n  10 hours ago\nSure. But it’s rare for your entire frontend to be «long lived»\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI think «long lived» in the context of the talk, though he doesn't give a timeframe, is roughly more than a moment. I'd guess anything older than 1 day. I think if you're working on something by yourself this could be stretched to weeks/months, but if you're on a team the 1 day feels more accurate\n\n\nRobin\n  10 hours ago\nAhh. I disagree :sweat_smile:\nLike. Would we really need code splitting, backend rendering and reconciliation of frontend code and the like if we only used SPAs for the dynamic parts of our frontends?\nI also feel that we spend so much time revuildi g what the browser allready provides, like loading indicators, date pickers, autocomplete etc\n\n\nRobin\n  10 hours ago\nOf course, I don’t know what ya’ll are making, but the stuff that I make… so much of it would’ve been simpler if it was plain Html\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nOh, I absolutely agree with doing too much rebuilding of what the browser does well. I'm also not arguing against server rendering. I'm arguing for code that's easy to maintain and I feel like htmx compared to Elm doesn't lean as well into easy maintenance, leans more into quick scaffolding.\n\n\njhbrown\n  10 hours ago\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI\n\n\njhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "date": 1697591028719
    },
    {
      "type": "edit",
      "id": "2faa10c7ec2b167b",
      "item": {
        "type": "markdown",
        "id": "2faa10c7ec2b167b",
        "text": "jhbrown [https://elmlang.slack.com/archives/C0CJ671HU/p1697498629487339 post]\n\n(a)  What do people think of htmx?  https://htmx.org/\n(b) What would it look like with Elm? :slightly_smiling_face:\n49 replies\n\n\nErik\n\n(a) grug brain think probably good. Grug should try.\n(b) grug no think good match.\n\n\n\nWolfgang Schuster (wolfadex)\n\n(a) easy for grug to write, hard for grug to remember how it works\n\n\nAxelerator\n  22 hours ago\nI think there is a ceiling in application complexity this can handle is nice to manage with htmx. Feelsmlike it's perative vs declarative all over again. Of course you can build TEA on top of htmx, but much of the appeal to it's proponents is how easy it is to \"just switch out this part of the html\".\nSo I have the feeling Elm and htmx have opposing philosophies. What experience do you expect when you say \"What would it look like with Elm?\"\n\n\njhbrown\n  22 hours ago\nA couple of different ideas, at least, but here’s one:\nSuppose that your Elm was running server-side to render the initial HTML, which shipped across the wire.  Then when things happened, Elm would again run server-side, the vdom diff would happen there, and only the changed bits would ship to the browser, again as HTML.\n\n\nhayleigh\n  19 hours ago\nSo phoenix liveview?\n\n\nsebbes\n  17 hours ago\nI think the most difficult thing to manage with HTMX is: on / server generates a full HTML page withe \"blocks\" A, B, C. After that, htmx will reload some fragment of the page, say A with a call to /a.html. How do we ensure that the function running behind /a.html is the same* that the one used to render A under / .\n*I mean, the same function but with some distinct arguments\n\n\nktosiek\n  13 hours ago\nOne approach would be: just call / again instead of a dedicated endpoint, and extract the part you want to replace. It will still be more interactive then a full reload.\n:100:\n1\n\n\n\nktosiek\n  13 hours ago\nYou can add hints for the backend to skip rendering some heavier parts, if it's worth it\n\n\nRobin\n  13 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n:+1:\n1\n\n\n\nRobin\n  13 hours ago\nMost of the SPA's I've worked on, have no business being SPA's.\n\n\nRobin\n  13 hours ago\nExcept, maybe, for a few sections of the app\n\n\nRobin\n  13 hours ago\nWhich means that most of what was an SPA, could've been regular backend rendered html.\n\n\nRobin\n  13 hours ago\nSo I'm in the \"Htmx is great\" camp. It makes it easier to continue using \"regular\" html if you don't need the full powers of SPAs, with all the additional complexity that entails.\nAlso sent to the channel\n\n\nAxelerator\n  10 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n100% agreed and this immediately triggers the question for me:\nWhat are the factors to determine when to go with an SPA from the start.\nBecause I would argue the migration between the two paradigms is either a full rewrite or a multi-person-year page-by-page endeavour from my experience (i.e. Shopify went from plain Rails to React).\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI did a full app rewrite at Northwestern Mutual. If you can afford a dedicated team it can be done in a year.\n\n\nRobin\n  10 hours ago\nI would argue that your frontend doesn’t have to be entirely written as a SPA.\nStart with backend rendered html. Add htmx if you need a little bit more dynamism (not on every page, but where it matters) then use SPA where it really pays off.\nAs a result, the SPAs you do have might end up less complex (maybe you don’t need routing, or form validation, for instance) (edited) \n:arrow_up:\n1\n\n\n\nAxelerator\n  10 hours ago\nI think this only applies to a certain category of applications. I have a feeling a lot of things that make an app feel \"nice\" move an app from one category to the other. I.e. being able to drag&drop items across the whole page or global effects like counters that update in one section of the page when another gets modified.\nThese are things that are often not part of the MVP. The most efficient approach of building the MVP is now HTML + \"a bit of JS\".\nBut adding these overarching features becomes now a lot more expensive because there is no concept of tracking \"the whole Model\" (unless we go full Phoenix as mentioned before).\nTldr: I feel the Htmx approach is creating a lower ceiling for UX that only becomes apparent until it's too late.\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nThis topic of tacit programming comes up in https://www.youtube.com/watch?v=NcUJnmBqHTY towards the end. Tldr: Pokey suggests that tacit languages are great for short lived things like quick bash commands or Cursorless, but not great for long lived code like a script that's saved and re-used/modified or an app. I kinda feel like htmx falls into the tacit category where it's great for something short lived but not as great for something long lived.\n:heart_eyes_cat:\n1\n\n\n\nRobin\n  10 hours ago\nSure. But it’s rare for your entire frontend to be «long lived»\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI think «long lived» in the context of the talk, though he doesn't give a timeframe, is roughly more than a moment. I'd guess anything older than 1 day. I think if you're working on something by yourself this could be stretched to weeks/months, but if you're on a team the 1 day feels more accurate\n\n\nRobin\n  10 hours ago\nAhh. I disagree :sweat_smile:\nLike. Would we really need code splitting, backend rendering and reconciliation of frontend code and the like if we only used SPAs for the dynamic parts of our frontends?\nI also feel that we spend so much time revuildi g what the browser allready provides, like loading indicators, date pickers, autocomplete etc\n\n\nRobin\n  10 hours ago\nOf course, I don’t know what ya’ll are making, but the stuff that I make… so much of it would’ve been simpler if it was plain Html\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nOh, I absolutely agree with doing too much rebuilding of what the browser does well. I'm also not arguing against server rendering. I'm arguing for code that's easy to maintain and I feel like htmx compared to Elm doesn't lean as well into easy maintenance, leans more into quick scaffolding.\n\n\njhbrown\n  10 hours ago\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI\n\n\njhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "date": 1697591049469
    },
    {
      "type": "edit",
      "id": "2faa10c7ec2b167b",
      "item": {
        "type": "markdown",
        "id": "2faa10c7ec2b167b",
        "text": "jhbrown [https://elmlang.slack.com/archives/C0CJ671HU/p1697498629487339 post]\n\n(a)  What do people think of htmx?  https://htmx.org/\n(b) What would it look like with Elm? :slightly_smiling_face:\n49 replies\n\n\nErik\n\n(a) grug brain think probably good. Grug should try.\n(b) grug no think good match.\n\n\n\nWolfgang Schuster (wolfadex)\n\n(a) easy for grug to write, hard for grug to remember how it works"
      },
      "date": 1697591095593
    },
    {
      "type": "add",
      "id": "6cbb6620728c4e3d",
      "item": {
        "type": "markdown",
        "id": "6cbb6620728c4e3d",
        "text": "Axelerator\n\nI think there is a ceiling in application complexity this can handle is nice to manage with htmx. Feelsmlike it's perative vs declarative all over again. Of course you can build TEA on top of htmx, but much of the appeal to it's proponents is how easy it is to \"just switch out this part of the html\".\nSo I have the feeling Elm and htmx have opposing philosophies. What experience do you expect when you say \"What would it look like with Elm?\"\n\n\njhbrown\n  22 hours ago\nA couple of different ideas, at least, but here’s one:\nSuppose that your Elm was running server-side to render the initial HTML, which shipped across the wire.  Then when things happened, Elm would again run server-side, the vdom diff would happen there, and only the changed bits would ship to the browser, again as HTML.\n\n\nhayleigh\n  19 hours ago\nSo phoenix liveview?\n\n\nsebbes\n  17 hours ago\nI think the most difficult thing to manage with HTMX is: on / server generates a full HTML page withe \"blocks\" A, B, C. After that, htmx will reload some fragment of the page, say A with a call to /a.html. How do we ensure that the function running behind /a.html is the same* that the one used to render A under / .\n*I mean, the same function but with some distinct arguments\n\n\nktosiek\n  13 hours ago\nOne approach would be: just call / again instead of a dedicated endpoint, and extract the part you want to replace. It will still be more interactive then a full reload.\n:100:\n1\n\n\n\nktosiek\n  13 hours ago\nYou can add hints for the backend to skip rendering some heavier parts, if it's worth it\n\n\nRobin\n  13 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n:+1:\n1\n\n\n\nRobin\n  13 hours ago\nMost of the SPA's I've worked on, have no business being SPA's.\n\n\nRobin\n  13 hours ago\nExcept, maybe, for a few sections of the app\n\n\nRobin\n  13 hours ago\nWhich means that most of what was an SPA, could've been regular backend rendered html.\n\n\nRobin\n  13 hours ago\nSo I'm in the \"Htmx is great\" camp. It makes it easier to continue using \"regular\" html if you don't need the full powers of SPAs, with all the additional complexity that entails.\nAlso sent to the channel\n\n\nAxelerator\n  10 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n100% agreed and this immediately triggers the question for me:\nWhat are the factors to determine when to go with an SPA from the start.\nBecause I would argue the migration between the two paradigms is either a full rewrite or a multi-person-year page-by-page endeavour from my experience (i.e. Shopify went from plain Rails to React).\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI did a full app rewrite at Northwestern Mutual. If you can afford a dedicated team it can be done in a year.\n\n\nRobin\n  10 hours ago\nI would argue that your frontend doesn’t have to be entirely written as a SPA.\nStart with backend rendered html. Add htmx if you need a little bit more dynamism (not on every page, but where it matters) then use SPA where it really pays off.\nAs a result, the SPAs you do have might end up less complex (maybe you don’t need routing, or form validation, for instance) (edited) \n:arrow_up:\n1\n\n\n\nAxelerator\n  10 hours ago\nI think this only applies to a certain category of applications. I have a feeling a lot of things that make an app feel \"nice\" move an app from one category to the other. I.e. being able to drag&drop items across the whole page or global effects like counters that update in one section of the page when another gets modified.\nThese are things that are often not part of the MVP. The most efficient approach of building the MVP is now HTML + \"a bit of JS\".\nBut adding these overarching features becomes now a lot more expensive because there is no concept of tracking \"the whole Model\" (unless we go full Phoenix as mentioned before).\nTldr: I feel the Htmx approach is creating a lower ceiling for UX that only becomes apparent until it's too late.\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nThis topic of tacit programming comes up in https://www.youtube.com/watch?v=NcUJnmBqHTY towards the end. Tldr: Pokey suggests that tacit languages are great for short lived things like quick bash commands or Cursorless, but not great for long lived code like a script that's saved and re-used/modified or an app. I kinda feel like htmx falls into the tacit category where it's great for something short lived but not as great for something long lived.\n:heart_eyes_cat:\n1\n\n\n\nRobin\n  10 hours ago\nSure. But it’s rare for your entire frontend to be «long lived»\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI think «long lived» in the context of the talk, though he doesn't give a timeframe, is roughly more than a moment. I'd guess anything older than 1 day. I think if you're working on something by yourself this could be stretched to weeks/months, but if you're on a team the 1 day feels more accurate\n\n\nRobin\n  10 hours ago\nAhh. I disagree :sweat_smile:\nLike. Would we really need code splitting, backend rendering and reconciliation of frontend code and the like if we only used SPAs for the dynamic parts of our frontends?\nI also feel that we spend so much time revuildi g what the browser allready provides, like loading indicators, date pickers, autocomplete etc\n\n\nRobin\n  10 hours ago\nOf course, I don’t know what ya’ll are making, but the stuff that I make… so much of it would’ve been simpler if it was plain Html\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nOh, I absolutely agree with doing too much rebuilding of what the browser does well. I'm also not arguing against server rendering. I'm arguing for code that's easy to maintain and I feel like htmx compared to Elm doesn't lean as well into easy maintenance, leans more into quick scaffolding.\n\n\njhbrown\n  10 hours ago\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI\n\n\njhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "after": "2faa10c7ec2b167b",
      "date": 1697591104318
    },
    {
      "type": "edit",
      "id": "6cbb6620728c4e3d",
      "item": {
        "type": "markdown",
        "id": "6cbb6620728c4e3d",
        "text": "Axelerator\n\nI think there is a ceiling in application complexity this can handle is nice to manage with htmx. Feelsmlike it's perative vs declarative all over again. Of course you can build TEA on top of htmx, but much of the appeal to it's proponents is how easy it is to \"just switch out this part of the html\".\nSo I have the feeling Elm and htmx have opposing philosophies. What experience do you expect when you say \"What would it look like with Elm?\"\n\n\njhbrown\n\nA couple of different ideas, at least, but here’s one:\nSuppose that your Elm was running server-side to render the initial HTML, which shipped across the wire.  Then when things happened, Elm would again run server-side, the vdom diff would happen there, and only the changed bits would ship to the browser, again as HTML.\n\n\nhayleigh\n  19 hours ago\nSo phoenix liveview?\n\n\nsebbes\n  17 hours ago\nI think the most difficult thing to manage with HTMX is: on / server generates a full HTML page withe \"blocks\" A, B, C. After that, htmx will reload some fragment of the page, say A with a call to /a.html. How do we ensure that the function running behind /a.html is the same* that the one used to render A under / .\n*I mean, the same function but with some distinct arguments\n\n\nktosiek\n  13 hours ago\nOne approach would be: just call / again instead of a dedicated endpoint, and extract the part you want to replace. It will still be more interactive then a full reload.\n:100:\n1\n\n\n\nktosiek\n  13 hours ago\nYou can add hints for the backend to skip rendering some heavier parts, if it's worth it\n\n\nRobin\n  13 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n:+1:\n1\n\n\n\nRobin\n  13 hours ago\nMost of the SPA's I've worked on, have no business being SPA's.\n\n\nRobin\n  13 hours ago\nExcept, maybe, for a few sections of the app\n\n\nRobin\n  13 hours ago\nWhich means that most of what was an SPA, could've been regular backend rendered html.\n\n\nRobin\n  13 hours ago\nSo I'm in the \"Htmx is great\" camp. It makes it easier to continue using \"regular\" html if you don't need the full powers of SPAs, with all the additional complexity that entails.\nAlso sent to the channel\n\n\nAxelerator\n  10 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n100% agreed and this immediately triggers the question for me:\nWhat are the factors to determine when to go with an SPA from the start.\nBecause I would argue the migration between the two paradigms is either a full rewrite or a multi-person-year page-by-page endeavour from my experience (i.e. Shopify went from plain Rails to React).\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI did a full app rewrite at Northwestern Mutual. If you can afford a dedicated team it can be done in a year.\n\n\nRobin\n  10 hours ago\nI would argue that your frontend doesn’t have to be entirely written as a SPA.\nStart with backend rendered html. Add htmx if you need a little bit more dynamism (not on every page, but where it matters) then use SPA where it really pays off.\nAs a result, the SPAs you do have might end up less complex (maybe you don’t need routing, or form validation, for instance) (edited) \n:arrow_up:\n1\n\n\n\nAxelerator\n  10 hours ago\nI think this only applies to a certain category of applications. I have a feeling a lot of things that make an app feel \"nice\" move an app from one category to the other. I.e. being able to drag&drop items across the whole page or global effects like counters that update in one section of the page when another gets modified.\nThese are things that are often not part of the MVP. The most efficient approach of building the MVP is now HTML + \"a bit of JS\".\nBut adding these overarching features becomes now a lot more expensive because there is no concept of tracking \"the whole Model\" (unless we go full Phoenix as mentioned before).\nTldr: I feel the Htmx approach is creating a lower ceiling for UX that only becomes apparent until it's too late.\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nThis topic of tacit programming comes up in https://www.youtube.com/watch?v=NcUJnmBqHTY towards the end. Tldr: Pokey suggests that tacit languages are great for short lived things like quick bash commands or Cursorless, but not great for long lived code like a script that's saved and re-used/modified or an app. I kinda feel like htmx falls into the tacit category where it's great for something short lived but not as great for something long lived.\n:heart_eyes_cat:\n1\n\n\n\nRobin\n  10 hours ago\nSure. But it’s rare for your entire frontend to be «long lived»\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI think «long lived» in the context of the talk, though he doesn't give a timeframe, is roughly more than a moment. I'd guess anything older than 1 day. I think if you're working on something by yourself this could be stretched to weeks/months, but if you're on a team the 1 day feels more accurate\n\n\nRobin\n  10 hours ago\nAhh. I disagree :sweat_smile:\nLike. Would we really need code splitting, backend rendering and reconciliation of frontend code and the like if we only used SPAs for the dynamic parts of our frontends?\nI also feel that we spend so much time revuildi g what the browser allready provides, like loading indicators, date pickers, autocomplete etc\n\n\nRobin\n  10 hours ago\nOf course, I don’t know what ya’ll are making, but the stuff that I make… so much of it would’ve been simpler if it was plain Html\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nOh, I absolutely agree with doing too much rebuilding of what the browser does well. I'm also not arguing against server rendering. I'm arguing for code that's easy to maintain and I feel like htmx compared to Elm doesn't lean as well into easy maintenance, leans more into quick scaffolding.\n\n\njhbrown\n  10 hours ago\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI\n\n\njhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "date": 1697591143382
    },
    {
      "type": "edit",
      "id": "6cbb6620728c4e3d",
      "item": {
        "type": "markdown",
        "id": "6cbb6620728c4e3d",
        "text": "Axelerator\n\nI think there is a ceiling in application complexity this can handle is nice to manage with htmx. Feelsmlike it's perative vs declarative all over again. Of course you can build TEA on top of htmx, but much of the appeal to it's proponents is how easy it is to \"just switch out this part of the html\".\nSo I have the feeling Elm and htmx have opposing philosophies. What experience do you expect when you say \"What would it look like with Elm?\"\n\n\njhbrown\n\nA couple of different ideas, at least, but here’s one:\nSuppose that your Elm was running server-side to render the initial HTML, which shipped across the wire.  Then when things happened, Elm would again run server-side, the vdom diff would happen there, and only the changed bits would ship to the browser, again as HTML."
      },
      "date": 1697591178237
    },
    {
      "type": "add",
      "id": "4182caed06d363e0",
      "item": {
        "type": "markdown",
        "id": "4182caed06d363e0",
        "text": "hayleigh\n\nSo phoenix liveview?\n\n\nsebbes\n  17 hours ago\nI think the most difficult thing to manage with HTMX is: on / server generates a full HTML page withe \"blocks\" A, B, C. After that, htmx will reload some fragment of the page, say A with a call to /a.html. How do we ensure that the function running behind /a.html is the same* that the one used to render A under / .\n*I mean, the same function but with some distinct arguments\n\n\nktosiek\n  13 hours ago\nOne approach would be: just call / again instead of a dedicated endpoint, and extract the part you want to replace. It will still be more interactive then a full reload.\n:100:\n1\n\n\n\nktosiek\n  13 hours ago\nYou can add hints for the backend to skip rendering some heavier parts, if it's worth it\n\n\nRobin\n  13 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n:+1:\n1\n\n\n\nRobin\n  13 hours ago\nMost of the SPA's I've worked on, have no business being SPA's.\n\n\nRobin\n  13 hours ago\nExcept, maybe, for a few sections of the app\n\n\nRobin\n  13 hours ago\nWhich means that most of what was an SPA, could've been regular backend rendered html.\n\n\nRobin\n  13 hours ago\nSo I'm in the \"Htmx is great\" camp. It makes it easier to continue using \"regular\" html if you don't need the full powers of SPAs, with all the additional complexity that entails.\nAlso sent to the channel\n\n\nAxelerator\n  10 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n100% agreed and this immediately triggers the question for me:\nWhat are the factors to determine when to go with an SPA from the start.\nBecause I would argue the migration between the two paradigms is either a full rewrite or a multi-person-year page-by-page endeavour from my experience (i.e. Shopify went from plain Rails to React).\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI did a full app rewrite at Northwestern Mutual. If you can afford a dedicated team it can be done in a year.\n\n\nRobin\n  10 hours ago\nI would argue that your frontend doesn’t have to be entirely written as a SPA.\nStart with backend rendered html. Add htmx if you need a little bit more dynamism (not on every page, but where it matters) then use SPA where it really pays off.\nAs a result, the SPAs you do have might end up less complex (maybe you don’t need routing, or form validation, for instance) (edited) \n:arrow_up:\n1\n\n\n\nAxelerator\n  10 hours ago\nI think this only applies to a certain category of applications. I have a feeling a lot of things that make an app feel \"nice\" move an app from one category to the other. I.e. being able to drag&drop items across the whole page or global effects like counters that update in one section of the page when another gets modified.\nThese are things that are often not part of the MVP. The most efficient approach of building the MVP is now HTML + \"a bit of JS\".\nBut adding these overarching features becomes now a lot more expensive because there is no concept of tracking \"the whole Model\" (unless we go full Phoenix as mentioned before).\nTldr: I feel the Htmx approach is creating a lower ceiling for UX that only becomes apparent until it's too late.\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nThis topic of tacit programming comes up in https://www.youtube.com/watch?v=NcUJnmBqHTY towards the end. Tldr: Pokey suggests that tacit languages are great for short lived things like quick bash commands or Cursorless, but not great for long lived code like a script that's saved and re-used/modified or an app. I kinda feel like htmx falls into the tacit category where it's great for something short lived but not as great for something long lived.\n:heart_eyes_cat:\n1\n\n\n\nRobin\n  10 hours ago\nSure. But it’s rare for your entire frontend to be «long lived»\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI think «long lived» in the context of the talk, though he doesn't give a timeframe, is roughly more than a moment. I'd guess anything older than 1 day. I think if you're working on something by yourself this could be stretched to weeks/months, but if you're on a team the 1 day feels more accurate\n\n\nRobin\n  10 hours ago\nAhh. I disagree :sweat_smile:\nLike. Would we really need code splitting, backend rendering and reconciliation of frontend code and the like if we only used SPAs for the dynamic parts of our frontends?\nI also feel that we spend so much time revuildi g what the browser allready provides, like loading indicators, date pickers, autocomplete etc\n\n\nRobin\n  10 hours ago\nOf course, I don’t know what ya’ll are making, but the stuff that I make… so much of it would’ve been simpler if it was plain Html\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nOh, I absolutely agree with doing too much rebuilding of what the browser does well. I'm also not arguing against server rendering. I'm arguing for code that's easy to maintain and I feel like htmx compared to Elm doesn't lean as well into easy maintenance, leans more into quick scaffolding.\n\n\njhbrown\n  10 hours ago\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI\n\n\njhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "after": "6cbb6620728c4e3d",
      "date": 1697591184764
    },
    {
      "type": "edit",
      "id": "4182caed06d363e0",
      "item": {
        "type": "markdown",
        "id": "4182caed06d363e0",
        "text": "hayleigh\n\nSo phoenix liveview?\n\n\nsebbes\n  17 hours ago\nI think the most difficult thing to manage with HTMX is: on / server generates a full HTML page withe \"blocks\" A, B, C. After that, htmx will reload some fragment of the page, say A with a call to /a.html. How do we ensure that the function running behind /a.html is the same* that the one used to render A under / .\n*I mean, the same function but with some distinct arguments\n\n\nktosiek\n  13 hours ago\nOne approach would be: just call / again instead of a dedicated endpoint, and extract the part you want to replace. It will still be more interactive then a full reload.\n:100:\n1\n\n\n\nktosiek\n  13 hours ago\nYou can add hints for the backend to skip rendering some heavier parts, if it's worth it\n\n\nRobin\n  13 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n:+1:\n1\n\n\n\nRobin\n  13 hours ago\nMost of the SPA's I've worked on, have no business being SPA's.\n\n\nRobin\n  13 hours ago\nExcept, maybe, for a few sections of the app\n\n\nRobin\n  13 hours ago\nWhich means that most of what was an SPA, could've been regular backend rendered html.\n\n\nRobin\n  13 hours ago\nSo I'm in the \"Htmx is great\" camp. It makes it easier to continue using \"regular\" html if you don't need the full powers of SPAs, with all the additional complexity that entails.\nAlso sent to the channel\n\n\nAxelerator\n  10 hours ago\nGiven the sort of applications I've written the past couple of years. I believe old-school \"multi-page apps\" drissled with some htmx would result in vastly simpler applications, as well as faster and better results\n100% agreed and this immediately triggers the question for me:\nWhat are the factors to determine when to go with an SPA from the start.\nBecause I would argue the migration between the two paradigms is either a full rewrite or a multi-person-year page-by-page endeavour from my experience (i.e. Shopify went from plain Rails to React).\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI did a full app rewrite at Northwestern Mutual. If you can afford a dedicated team it can be done in a year.\n\n\nRobin\n  10 hours ago\nI would argue that your frontend doesn’t have to be entirely written as a SPA.\nStart with backend rendered html. Add htmx if you need a little bit more dynamism (not on every page, but where it matters) then use SPA where it really pays off.\nAs a result, the SPAs you do have might end up less complex (maybe you don’t need routing, or form validation, for instance) (edited) \n:arrow_up:\n1\n\n\n\nAxelerator\n  10 hours ago\nI think this only applies to a certain category of applications. I have a feeling a lot of things that make an app feel \"nice\" move an app from one category to the other. I.e. being able to drag&drop items across the whole page or global effects like counters that update in one section of the page when another gets modified.\nThese are things that are often not part of the MVP. The most efficient approach of building the MVP is now HTML + \"a bit of JS\".\nBut adding these overarching features becomes now a lot more expensive because there is no concept of tracking \"the whole Model\" (unless we go full Phoenix as mentioned before).\nTldr: I feel the Htmx approach is creating a lower ceiling for UX that only becomes apparent until it's too late."
      },
      "date": 1697591499165
    },
    {
      "type": "add",
      "id": "1f3380a0424027c8",
      "item": {
        "type": "markdown",
        "id": "1f3380a0424027c8",
        "text": "Wolfgang Schuster (wolfadex)\n\nThis topic of tacit programming comes up in https://www.youtube.com/watch?v=NcUJnmBqHTY towards the end."
      },
      "after": "4182caed06d363e0",
      "date": 1697591510746
    },
    {
      "type": "add",
      "id": "7140bbe8c0f666c2",
      "item": {
        "type": "markdown",
        "id": "7140bbe8c0f666c2",
        "text": "Tldr: Pokey suggests that tacit languages are great for short lived things like quick bash commands or Cursorless, but not great for long lived code like a script that's saved and re-used/modified or an app. I kinda feel like htmx falls into the tacit category where it's great for something short lived but not as great for something long lived.\n:heart_eyes_cat:\n1\n\n\n\nRobin\n  10 hours ago\nSure. But it’s rare for your entire frontend to be «long lived»\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI think «long lived» in the context of the talk, though he doesn't give a timeframe, is roughly more than a moment. I'd guess anything older than 1 day. I think if you're working on something by yourself this could be stretched to weeks/months, but if you're on a team the 1 day feels more accurate\n\n\nRobin\n  10 hours ago\nAhh. I disagree :sweat_smile:\nLike. Would we really need code splitting, backend rendering and reconciliation of frontend code and the like if we only used SPAs for the dynamic parts of our frontends?\nI also feel that we spend so much time revuildi g what the browser allready provides, like loading indicators, date pickers, autocomplete etc\n\n\nRobin\n  10 hours ago\nOf course, I don’t know what ya’ll are making, but the stuff that I make… so much of it would’ve been simpler if it was plain Html\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nOh, I absolutely agree with doing too much rebuilding of what the browser does well. I'm also not arguing against server rendering. I'm arguing for code that's easy to maintain and I feel like htmx compared to Elm doesn't lean as well into easy maintenance, leans more into quick scaffolding.\n\n\njhbrown\n  10 hours ago\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI\n\n\njhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "after": "1f3380a0424027c8",
      "date": 1697591515612
    },
    {
      "id": "6881c96ec42e614d",
      "type": "add",
      "item": {
        "type": "video",
        "id": "6881c96ec42e614d",
        "text": "YOUTUBE NcUJnmBqHTY"
      },
      "after": "1f3380a0424027c8",
      "attribution": {
        "page": "2023-10-18"
      },
      "date": 1697591531032
    },
    {
      "type": "edit",
      "id": "7140bbe8c0f666c2",
      "item": {
        "type": "markdown",
        "id": "7140bbe8c0f666c2",
        "text": "Tldr: Pokey suggests that tacit languages are great for short lived things like quick bash commands or Cursorless, but not great for long lived code like a script that's saved and re-used/modified or an app. I kinda feel like htmx falls into the tacit category where it's great for something short lived but not as great for something long lived.\n\n\n\n\nRobin\n  10 hours ago\nSure. But it’s rare for your entire frontend to be «long lived»\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI think «long lived» in the context of the talk, though he doesn't give a timeframe, is roughly more than a moment. I'd guess anything older than 1 day. I think if you're working on something by yourself this could be stretched to weeks/months, but if you're on a team the 1 day feels more accurate\n\n\nRobin\n  10 hours ago\nAhh. I disagree :sweat_smile:\nLike. Would we really need code splitting, backend rendering and reconciliation of frontend code and the like if we only used SPAs for the dynamic parts of our frontends?\nI also feel that we spend so much time revuildi g what the browser allready provides, like loading indicators, date pickers, autocomplete etc\n\n\nRobin\n  10 hours ago\nOf course, I don’t know what ya’ll are making, but the stuff that I make… so much of it would’ve been simpler if it was plain Html\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nOh, I absolutely agree with doing too much rebuilding of what the browser does well. I'm also not arguing against server rendering. I'm arguing for code that's easy to maintain and I feel like htmx compared to Elm doesn't lean as well into easy maintenance, leans more into quick scaffolding.\n\n\njhbrown\n  10 hours ago\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI\n\n\njhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "date": 1697591559578
    },
    {
      "type": "edit",
      "id": "7140bbe8c0f666c2",
      "item": {
        "type": "markdown",
        "id": "7140bbe8c0f666c2",
        "text": "Tldr: Pokey suggests that tacit languages are great for short lived things like quick bash commands or Cursorless, but not great for long lived code like a script that's saved and re-used/modified or an app. I kinda feel like htmx falls into the tacit category where it's great for something short lived but not as great for something long lived.\n\n\n\n\nRobin\n  10 hours ago\nSure. But it’s rare for your entire frontend to be «long lived»\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI think «long lived» in the context of the talk, though he doesn't give a timeframe, is roughly more than a moment. I'd guess anything older than 1 day. I think if you're working on something by yourself this could be stretched to weeks/months, but if you're on a team the 1 day feels more accurate\n\n\nRobin\n  10 hours ago\nAhh. I disagree :sweat_smile:\nLike. Would we really need code splitting, backend rendering and reconciliation of frontend code and the like if we only used SPAs for the dynamic parts of our frontends?\nI also feel that we spend so much time revuildi g what the browser allready provides, like loading indicators, date pickers, autocomplete etc\n\n\nRobin\n  10 hours ago\nOf course, I don’t know what ya’ll are making, but the stuff that I make… so much of it would’ve been simpler if it was plain Html\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nOh, I absolutely agree with doing too much rebuilding of what the browser does well. I'm also not arguing against server rendering. I'm arguing for code that's easy to maintain and I feel like htmx compared to Elm doesn't lean as well into easy maintenance, leans more into quick scaffolding."
      },
      "date": 1697591633542
    },
    {
      "type": "add",
      "id": "f42209cc21bfd52d",
      "item": {
        "type": "markdown",
        "id": "f42209cc21bfd52d",
        "text": "jhbrown\n  10 hours ago\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI\n\n\njhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "after": "7140bbe8c0f666c2",
      "date": 1697591636410
    },
    {
      "type": "edit",
      "id": "f42209cc21bfd52d",
      "item": {
        "type": "markdown",
        "id": "f42209cc21bfd52d",
        "text": "jhbrown\n\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI\n\n\njhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "date": 1697591642626
    },
    {
      "id": "34115e772ad38c92",
      "type": "add",
      "item": {
        "type": "video",
        "id": "34115e772ad38c92",
        "text": "YOUTUBE 3GObi93tjZI"
      },
      "after": "7140bbe8c0f666c2",
      "attribution": {
        "page": "2023-10-18"
      },
      "date": 1697591662730
    },
    {
      "type": "edit",
      "id": "f42209cc21bfd52d",
      "item": {
        "type": "markdown",
        "id": "f42209cc21bfd52d",
        "text": "jhbrown\n\nThe person at work who called htmx to my attention also has called this video to attention: https://www.youtube.com/watch?v=3GObi93tjZI"
      },
      "date": 1697591668343
    },
    {
      "type": "add",
      "id": "400ca126d8b74fb6",
      "item": {
        "type": "markdown",
        "id": "400ca126d8b74fb6",
        "text": "jhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in Gren at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can.\n\n\nRobin\n  9 hours ago\nActually, I prefer Elm anyway. That’s why I’m making Gren, to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "after": "f42209cc21bfd52d",
      "date": 1697591671457
    },
    {
      "id": "f42209cc21bfd52d",
      "type": "move",
      "order": [
        "b30b86b457f7a979",
        "8ca63e6cd5ef918c",
        "04343249bcd7a136",
        "2faa10c7ec2b167b",
        "6cbb6620728c4e3d",
        "4182caed06d363e0",
        "1f3380a0424027c8",
        "6881c96ec42e614d",
        "7140bbe8c0f666c2",
        "f42209cc21bfd52d",
        "34115e772ad38c92",
        "400ca126d8b74fb6"
      ],
      "date": 1697591673991
    },
    {
      "type": "edit",
      "id": "400ca126d8b74fb6",
      "item": {
        "type": "markdown",
        "id": "400ca126d8b74fb6",
        "text": "jhbrown\n  10 hours ago\n(My immediate reaction is \"yuck, Python and Django\", but I'm trying to look past that for the good bits.)\n\n\nWolfgang Schuster (wolfadex)\n  10 hours ago\nI'm definitely biased towards most of my career being large \"apps\" that are entirely hidden behind auth.\n:heavy_plus_sign:\n1\n\n\n\nAxelerator\n  10 hours ago\nIt is \"Single Page Applications\" and not \"Single Page Websites\" after all :sweat_smile:\nAnd I think we all agree there are use cases for both approaches. But the people who yell \"X is always better\" are too loud to have a productive discourse about when to choose which I feel.\n\n\nRobin\n  10 hours ago\nAt my last gig I implemented 6 or so forms using Elm. TEA did not determine the success of that implementation :joy:\n\n\nRobin\n  10 hours ago\nBut also: the gren package site is a classic backend rendered html site. I’ll probably re-write it in [[Gren]] at some point, but not as an SPA.\nThere are portions of it that could be improved (like the import dashboard), but htmx would be the least complicated way to go.\n\n\njhbrown\n  9 hours ago\nI'll confess:  I make SPAs in Elm so that I don't have to write as much code in other languages.  And I work in Elm so I can use Elm-UI and not have to write anything involving CSS most times.  My personal preferences lead to objectively irrational decisions -- which is fine as long as I contain that to hobby projects :slightly_smiling_face:\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\n@Robin\n I think we're talking about 2 different things maybe. You keep mentioning implementation and I keep talking about maintenance. I agree that something like htmx would be great for implementation in something like a dozen or so web forms or a large (mostly) static site.\n\n\nRobin\n  9 hours ago\nI also mention complexity. In my mind, less complex == more maintainable\n\n\njhbrown\n  9 hours ago\nI think broadly, if I don't have to have an API to the backend, that's simpler, less code, more maintainable, etc.\n\n\njhbrown\n  9 hours ago\nBut also I don't have hooks for a native ios/android client.\n\n\njhbrown\n  9 hours ago\nFor many internal biz apps, that's probably a 100% excellent tradeoff.\n\n\nRobin\n  9 hours ago\nAre people here doing full stack development, btw?\n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI do wonder if there's cultural influence at all here. The only companies I've worked for are US based and there's a common thread of \"grow, grow, grow!\" Lots of adding more features all of the time, and little to no time to tidy up. This is largely why I enjoy Elm because it makes tidying up very easy even when you aren't given the time. Maybe others here have a different expereience?\n:heavy_plus_sign:\n3\n:sweat_smile:\n1\n\n\n\njhbrown\n  9 hours ago\nI'm doing full-stack for side-projects, and managing projects doing full-stack (with an entirely different set of tech choices) for day-job.\n:+1:\n1\n\n\n\nRobin\n  9 hours ago\nI do full stack, so for me, htmx represents a way to reduce the amount of frontend code I need to write\n\n\nRobin\n  9 hours ago\nIf I need frontend code, I def prefer Elm, but I’d rather not write frontend code if I can."
      },
      "date": 1697591957829
    },
    {
      "type": "add",
      "id": "36cc41737a15ef67",
      "item": {
        "type": "markdown",
        "id": "36cc41737a15ef67",
        "text": "Robin\n\nActually, I prefer Elm anyway. That’s why I’m making [[Gren]], to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated partials.\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "after": "400ca126d8b74fb6",
      "date": 1697591961388
    },
    {
      "type": "edit",
      "id": "36cc41737a15ef67",
      "item": {
        "type": "markdown",
        "id": "36cc41737a15ef67",
        "text": "Robin\n\nActually, I prefer Elm anyway. That’s why I’m making [[Gren]], to have a shot at enjoying writing backend code :joy:\n:heart:\n3\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated [[partials]].\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "date": 1697592097658
    },
    {
      "type": "edit",
      "id": "36cc41737a15ef67",
      "item": {
        "type": "markdown",
        "id": "36cc41737a15ef67",
        "text": "Robin\n\nActually, I prefer Elm anyway. That’s why I’m making [[Gren]], to have a shot at enjoying writing backend code \n\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated [[partials]].\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement :see_no_evil:\n:+1:\n1\n\n\n\nrmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "date": 1697592121256
    },
    {
      "type": "edit",
      "id": "36cc41737a15ef67",
      "item": {
        "type": "markdown",
        "id": "36cc41737a15ef67",
        "text": "Robin\n\nActually, I prefer Elm anyway. That’s why I’m making [[Gren]], to have a shot at enjoying writing backend code \n\n\n\n\njhbrown\n  9 hours ago\nI would love to hear how htmx works for you! (edited) \n\n\nWolfgang Schuster (wolfadex)\n  9 hours ago\nI've been mostly frontend focused for the past decade but always write a bit of backend here and there. I've not had to be responsible for both at a company\n\n\nRobin\n  9 hours ago\n@jhbrown\n i’ll keep that in mind for when JavaZone CfP opens :)\n\n\nRobin\n  9 hours ago\n@Wolfgang Schuster (wolfadex)\n that makes sense, then :)\n\n\nRobin\n  9 hours ago\nI only started caring about this stuff when I was charged with writing both ends of the application :sweat_smile:\n\n\nAxelerator\n  9 hours ago\nI'm also full stack (mostly Rails, love CSS). I think there is a different sweet spot where all my \"HTML\" juggling is written in Elm and the backend only cares about business logic. I do agree that the \"building forms\" XP in Elm is not great. I feel Htmx is a local maximum (that is 100% enough for a lot of use cases).\nThe argument can be reduced to \"the cost of building SPA\" is to high for the benefits. So there are two ends of the equation that have to be considered.\nThere are clearly no benefits from an SPA if you only submit forms. However I do believe SPA do unlock UX that are a hard to build/maintain with server side generated [[partials]].\nThe other side of the equation is the \"the cost of building SPA\" and I there is still def room for improvement"
      },
      "date": 1697592133357
    },
    {
      "type": "add",
      "id": "d8e2d1b1d42aa614",
      "item": {
        "type": "markdown",
        "id": "d8e2d1b1d42aa614",
        "text": "rmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o\n\n\nerlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "after": "36cc41737a15ef67",
      "date": 1697592137683
    },
    {
      "type": "edit",
      "id": "d8e2d1b1d42aa614",
      "item": {
        "type": "markdown",
        "id": "d8e2d1b1d42aa614",
        "text": "rmacklin\n  5 hours ago\nI resonate with the simplicity of htmx, but I also remember resonating with a lot of points from this talk https://m.youtube.com/watch?v=860d8usGC0o"
      },
      "date": 1697592161373
    },
    {
      "type": "add",
      "id": "d5f59308b69a57fd",
      "item": {
        "type": "markdown",
        "id": "d5f59308b69a57fd",
        "text": "erlandsona\n  3 hours ago\nI've got a few data grid / forms / lists in prod with Servant & Htmx & Tailwind at this point. It's def \"simpler\" but there's weird complexity tradeoffs where you end up wanting for the simplicity of tracking state client side. Like flipping a checkbox to \"select all\" from a list is weirdly awkward. But where it's cumbersome for things that are natural client side it shines for things that are unnatural client side like http calls. :shrug:"
      },
      "after": "d8e2d1b1d42aa614",
      "date": 1697592163066
    },
    {
      "id": "4ab8b47afa79b4d3",
      "type": "add",
      "item": {
        "type": "video",
        "id": "4ab8b47afa79b4d3",
        "text": "YOUTUBE 860d8usGC0o"
      },
      "after": "d8e2d1b1d42aa614",
      "attribution": {
        "page": "2023-10-18"
      },
      "date": 1697592177603
    }
  ]
}