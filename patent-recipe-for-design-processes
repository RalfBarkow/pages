{
  "title": "Patent Recipe for Design Processes",
  "story": [
    {
      "type": "markdown",
      "id": "7ba9d8e0c35edc60",
      "text": " Musk sees the following five rules as the core of his engineering success. Here, as we will see, the order is crucial.\n\nFirst, make the requirement less idiotic. Second, delete as many steps of the process as possible. Third, simplify and optimize. Fourth, reduce the cycle time. Fifth, automate. Let's look at this in detail. "
    },
    {
      "type": "markdown",
      "id": "8a38709328daa2ea",
      "text": "# Dumbing down\n\nWe often make the mistake of taking requirements as absolute. We try to implement the \"how\" optimally according to some standard, while we do not question the \"what\".\n\nExample: The standard wants to enforce regular password changes without any reason? Actually, it is about protection against brute force. The protocol should be \"encrypted\"? What is really needed is integrity protection; this is done much more quickly and easily by an HMAC (hash-based message authentication code).\n\nAccording to Musk, by the way, requirements are especially dangerous when they come from smart people. Because then we may not question them enough. "
    },
    {
      "type": "markdown",
      "id": "10f5172e380695be",
      "text": "# Cleaning out\n\nThe next cardinal mistake is to start with optimization at this point. [[Donald Knuth]] already knew that premature optimization is the root of all evil. So first, mercilessly eliminate it, otherwise you'll never get a secure system to take off. Before we put in a web application firewall, let's first consider whether there's a need for a web application at all. And the most secure password is one you don't need at all. "
    },
    {
      "type": "markdown",
      "id": "1ec5c53ebef94b08",
      "text": "# Keep it simple, sweetie!\n\nOnly then may we optimize - but only by simplifying. More complexity is not an improvement! Leaving the choice between AES256 and a dozen other symmetric encryption methods only creates room for attack surface and implementation errors. "
    },
    {
      "type": "markdown",
      "id": "fa94b412f30cd3e9",
      "text": "# Off with the mail\n\nNow - and really only now! - we are allowed, no, we have to pick up the pace. It's all about shortening cycle time to learn from more cycles. A UPS or other redundancy that is never tested is worth nothing - better to pull the plug twice a year. And if attackers come along so infrequently that we can't learn from their tricks, we need to hire attackers (pentest, red teaming) or practice attacks elsewhere (simulation games).\n\nIn the case of the Space Shuttle, the problem was that the constant manned flights meant that there was no room for improvement: Any small change to the system could have triggered a catastrophe, and so, for security reasons, known errors and old problems were retained instead of being cleaned up. For security, however, we rather need systems like SpaceX's Starship, which, due to a lack of crew, is also allowed to fly into the air (a little corny joke ...).\n\nThe principle has also been described as chaos engineering for IT, but so far it has been applied rather homeopathically. Honeypots could also be included in this: Systems that are attacked as often as possible so that we can learn from them. Or containers with \"self-healing powers. "
    },
    {
      "type": "markdown",
      "id": "c4b9b0846495ae08",
      "text": "# Automatic\n\n\"Sure, Security Automation!\", one would like to exclaim now - finally! And thereby miss the obvious point: If we have dutifully followed the previous four steps and designed a potentially secure system, we must now automate production. How much is gained - in efficiency and security! - if all VMs are always created from the same two or three carefully hardened images. And how much error-prone work can a clever CI/CD or build pipeline take away from me, so that I don't have to fire up the linter for a code analysis every time (or forget to do so).\n\nAnother tip from engineer Musk is at least worth considering: only if everyone is \"chief engineer\" will everyone understand the overall system and be able to judge what are good optimizations - or bad ones, like the web browsers that have tried to delete cross-site scripting code from web pages, tearing even bigger holes in the process.\n\nWhat's clear is that if our IT systems want to go to Mars with confidence, we'll have to do some experimenting. (ur@ix.de) "
    },
    {
      "type": "markdown",
      "id": "dbd68e60a60a2c50",
      "text": "**Note**: This is a translation of an article of David Fuhr in iX 9/2021, p. 8\n"
    },
    {
      "type": "pagefold",
      "id": "36aa7c1d21d2443c",
      "text": "~"
    },
    {
      "type": "video",
      "id": "ce6c38147728a6b2",
      "text": "YOUTUBE cIQ36Kt7UVg\nA conversation with Elon Musk about Starship, 2019"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Patent Recipe for Design Processes",
        "story": []
      },
      "date": 1630392451752
    },
    {
      "item": {
        "type": "factory",
        "id": "7ba9d8e0c35edc60"
      },
      "id": "7ba9d8e0c35edc60",
      "type": "add",
      "date": 1630392466013
    },
    {
      "type": "edit",
      "id": "7ba9d8e0c35edc60",
      "item": {
        "type": "markdown",
        "id": "7ba9d8e0c35edc60",
        "text": " Musk sees the following five rules as the core of his engineering success. Here, as we will see, the order is crucial.\n\nFirst, make the requirement less idiotic. Second, delete as many steps of the process as possible. Third, simplify and optimize. Fourth, reduce the cycle time. Fifth, automate. Let's look at this in detail. "
      },
      "date": 1630392468665
    },
    {
      "item": {
        "type": "factory",
        "id": "8a38709328daa2ea"
      },
      "id": "8a38709328daa2ea",
      "type": "add",
      "after": "7ba9d8e0c35edc60",
      "date": 1630392486517
    },
    {
      "type": "edit",
      "id": "8a38709328daa2ea",
      "item": {
        "type": "markdown",
        "id": "8a38709328daa2ea",
        "text": "# Dumbing down\n\nWe often make the mistake of taking requirements as absolute. We try to implement the \"how\" optimally according to some standard, while we do not question the \"what\".\n\nExample: The standard wants to enforce regular password changes without any reason? Actually, it is about protection against brute force. The protocol should be \"encrypted\"? What is really needed is integrity protection; this is done much more quickly and easily by an HMAC (hash-based message authentication code).\n\nAccording to Musk, by the way, requirements are especially dangerous when they come from smart people. Because then we may not question them enough. "
      },
      "date": 1630392494679
    },
    {
      "item": {
        "type": "factory",
        "id": "10f5172e380695be"
      },
      "id": "10f5172e380695be",
      "type": "add",
      "after": "8a38709328daa2ea",
      "date": 1630392531398
    },
    {
      "type": "edit",
      "id": "10f5172e380695be",
      "item": {
        "type": "markdown",
        "id": "10f5172e380695be",
        "text": "# Cleaning out\n\nThe next cardinal mistake is to start with optimization at this point. Donald Knuth already knew that premature optimization is the root of all evil. So first, mercilessly eliminate it, otherwise you'll never get a secure system to take off. Before we put in a web application firewall, let's first consider whether there's a need for a web application at all. And the most secure password is one you don't need at all. "
      },
      "date": 1630392537619
    },
    {
      "item": {
        "type": "factory",
        "id": "1ec5c53ebef94b08"
      },
      "id": "1ec5c53ebef94b08",
      "type": "add",
      "after": "10f5172e380695be",
      "date": 1630392548950
    },
    {
      "type": "edit",
      "id": "1ec5c53ebef94b08",
      "item": {
        "type": "markdown",
        "id": "1ec5c53ebef94b08",
        "text": "# Keep it simple, sweetie!\n\nOnly then may we optimize - but only by simplifying. More complexity is not an improvement! Leaving the choice between AES256 and a dozen other symmetric encryption methods only creates room for attack surface and implementation errors. "
      },
      "date": 1630392554583
    },
    {
      "item": {
        "type": "factory",
        "id": "fa94b412f30cd3e9"
      },
      "id": "fa94b412f30cd3e9",
      "type": "add",
      "after": "1ec5c53ebef94b08",
      "date": 1630392567118
    },
    {
      "type": "edit",
      "id": "fa94b412f30cd3e9",
      "item": {
        "type": "markdown",
        "id": "fa94b412f30cd3e9",
        "text": "# Off with the mail\n\nNow - and really only now! - we are allowed, no, we have to pick up the pace. It's all about shortening cycle time to learn from more cycles. A UPS or other redundancy that is never tested is worth nothing - better to pull the plug twice a year. And if attackers come along so infrequently that we can't learn from their tricks, we need to hire attackers (pentest, red teaming) or practice attacks elsewhere (simulation games).\n\nIn the case of the Space Shuttle, the problem was that the constant manned flights meant that there was no room for improvement: Any small change to the system could have triggered a catastrophe, and so, for security reasons, known errors and old problems were retained instead of being cleaned up. For security, however, we rather need systems like SpaceX's Starship, which, due to a lack of crew, is also allowed to fly into the air (a little corny joke ...).\n\nThe principle has also been described as chaos engineering for IT, but so far it has been applied rather homeopathically. Honeypots could also be included in this: Systems that are attacked as often as possible so that we can learn from them. Or containers with \"self-healing powers. "
      },
      "date": 1630392574584
    },
    {
      "item": {
        "type": "factory",
        "id": "c4b9b0846495ae08"
      },
      "id": "c4b9b0846495ae08",
      "type": "add",
      "after": "fa94b412f30cd3e9",
      "date": 1630392590437
    },
    {
      "type": "edit",
      "id": "c4b9b0846495ae08",
      "item": {
        "type": "markdown",
        "id": "c4b9b0846495ae08",
        "text": "# Automatic\n\n\"Sure, Security Automation!\", one would like to exclaim now - finally! And thereby miss the obvious point: If we have dutifully followed the previous four steps and designed a potentially secure system, we must now automate production. How much is gained - in efficiency and security! - if all VMs are always created from the same two or three carefully hardened images. And how much error-prone work can a clever CI/CD or build pipeline take away from me, so that I don't have to fire up the linter for a code analysis every time (or forget to do so).\n\nAnother tip from engineer Musk is at least worth considering: only if everyone is \"chief engineer\" will everyone understand the overall system and be able to judge what are good optimizations - or bad ones, like the web browsers that have tried to delete cross-site scripting code from web pages, tearing even bigger holes in the process.\n\nWhat's clear is that if our IT systems want to go to Mars with confidence, we'll have to do some experimenting. (ur@ix.de) "
      },
      "date": 1630392598066
    },
    {
      "item": {
        "type": "factory",
        "id": "dbd68e60a60a2c50"
      },
      "id": "dbd68e60a60a2c50",
      "type": "add",
      "after": "c4b9b0846495ae08",
      "date": 1630392633154
    },
    {
      "type": "edit",
      "id": "dbd68e60a60a2c50",
      "item": {
        "type": "markdown",
        "id": "dbd68e60a60a2c50",
        "text": "This is a translation of an article of David Fuhr "
      },
      "date": 1630392647929
    },
    {
      "type": "edit",
      "id": "dbd68e60a60a2c50",
      "item": {
        "type": "markdown",
        "id": "dbd68e60a60a2c50",
        "text": "**Note**: This is a translation of an article of David Fuhr in iX 9/2021\nS. 8\n"
      },
      "date": 1630392673498
    },
    {
      "type": "edit",
      "id": "dbd68e60a60a2c50",
      "item": {
        "type": "markdown",
        "id": "dbd68e60a60a2c50",
        "text": "**Note**: This is a translation of an article of David Fuhr in iX 9/2021, p. 8\n"
      },
      "date": 1630392696697
    },
    {
      "type": "edit",
      "id": "10f5172e380695be",
      "item": {
        "type": "markdown",
        "id": "10f5172e380695be",
        "text": "# Cleaning out\n\nThe next cardinal mistake is to start with optimization at this point. [[Donald Knuth]] already knew that premature optimization is the root of all evil. So first, mercilessly eliminate it, otherwise you'll never get a secure system to take off. Before we put in a web application firewall, let's first consider whether there's a need for a web application at all. And the most secure password is one you don't need at all. "
      },
      "date": 1630392760824
    },
    {
      "item": {
        "type": "factory",
        "id": "36aa7c1d21d2443c"
      },
      "id": "36aa7c1d21d2443c",
      "type": "add",
      "after": "dbd68e60a60a2c50",
      "date": 1630394432667
    },
    {
      "type": "edit",
      "id": "36aa7c1d21d2443c",
      "item": {
        "type": "pagefold",
        "id": "36aa7c1d21d2443c",
        "text": "~"
      },
      "date": 1630394439483
    },
    {
      "item": {
        "type": "factory",
        "id": "ce6c38147728a6b2"
      },
      "id": "ce6c38147728a6b2",
      "type": "add",
      "after": "36aa7c1d21d2443c",
      "date": 1630394441135
    },
    {
      "type": "edit",
      "id": "ce6c38147728a6b2",
      "item": {
        "type": "video",
        "id": "ce6c38147728a6b2",
        "text": "YOUTUBE https://youtu.be/cIQ36Kt7UVg"
      },
      "date": 1630394448476
    },
    {
      "type": "edit",
      "id": "ce6c38147728a6b2",
      "item": {
        "type": "video",
        "id": "ce6c38147728a6b2",
        "text": "YOUTUBE cIQ36Kt7UVg"
      },
      "date": 1630394458915
    },
    {
      "type": "edit",
      "id": "ce6c38147728a6b2",
      "item": {
        "type": "video",
        "id": "ce6c38147728a6b2",
        "text": "YOUTUBE cIQ36Kt7UVg\nA conversation with Elon Musk about Starship"
      },
      "date": 1630394491162
    },
    {
      "type": "edit",
      "id": "ce6c38147728a6b2",
      "item": {
        "type": "video",
        "id": "ce6c38147728a6b2",
        "text": "YOUTUBE cIQ36Kt7UVg\nA conversation with Elon Musk about Starship, 2019"
      },
      "date": 1630394498629
    }
  ]
}