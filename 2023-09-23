{
  "title": "2023-09-23",
  "story": [
    {
      "type": "paragraph",
      "id": "34fdef5ae95779ec",
      "text": "⇒ [[Entropy on a Data Stream]]"
    },
    {
      "type": "paragraph",
      "id": "a0504d5b711ef85d",
      "text": "In streaming algorithms, a pass on an input x ∈ Σn means that x is given as an input stream x1, x2, . . . , xn, which arrives sequentially, i.e., letter by letter in this order. For simplicity, we assume throughout this article that the length n of the input is always given to the algorithm in advance. Nonetheless, all our algorithms can be adapted to the case in which n is unknown until the end of a pass. See [16] for an introduction to streaming algorithms."
    },
    {
      "type": "paragraph",
      "id": "201caed4142f4ea8",
      "text": "[16] S. Muthukrishnan. Data Streams: Algorithms and Applications. Now Publishers Inc., 2005."
    },
    {
      "type": "paragraph",
      "id": "b4f4dcdfbc5e0952",
      "text": "\nMUTHUKRISHNAN, S., 2005. Data Streams: Algorithms and Applications. Foundations and Trends® in Theoretical Computer Science. 2005. Vol. 1, no. 2, p. 117–236. DOI 10.1561/0400000002. \n"
    },
    {
      "type": "paragraph",
      "id": "59beba824ce17794",
      "text": "In the data stream scenario, input arrives very rapidly and there is limited memory to store the input. Algorithms have to work with one or few passes over the data, space less than linear in the input size or time significantly less than the input size. In the past few years, a new theory has emerged for reasoning about algorithms that work within these constraints on space, time, and number of passes. Some of the methods rely on metric embeddings, pseudo-random computations, sparse approximation theory and communication complexity. The applications for this scenario include IP network traffic analysis, mining text message streams and processing massive data sets in general. Researchers in Theoretical Computer Science, Databases, IP Networking and Computer Systems are working on the data stream challenges. This article is an overview and survey of data stream algorithmics and is an updated version of [175]."
    },
    {
      "type": "paragraph",
      "id": "bf2ef73faf091d83",
      "text": "[175] S. Muthukrishnan, “Data streams: Algorithms and applications,” http://www.cs.rutgers.edu/~muthu/stream-1-1.ps."
    },
    {
      "type": "pagefold",
      "id": "e6c2837c252c429c",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "cc271b361ea6ff83",
      "text": "~/.nixpkgs"
    },
    {
      "type": "paragraph",
      "id": "5896178884f7e97c",
      "text": "mastodon advanced web interface ?"
    },
    {
      "type": "pagefold",
      "id": "6e4c8541197401e9",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "f4dc65d82d77927b",
      "site": "wiki.ralfbarkow.ch",
      "slug": "index-generator",
      "title": "Index Generator",
      "text": "This [https://aplwiki.com/wiki/Index_Generator page] is about generating indices for an array of a given size. See Indexing, Indices, Index of, and Interval Index for other operations named after indices."
    },
    {
      "type": "markdown",
      "id": "83068d7175c8a073",
      "text": "> The iota function generates an array of consecutive integers, starting at a specified value, and with a specified length. This array of integers can then be used as indices to access or manipulate elements in another array."
    },
    {
      "type": "paragraph",
      "id": "fa089aaefda7bd01",
      "text": "⇒ [[Generator]] ⇐ [[PEG]] ⇐ Expression and cut parser"
    },
    {
      "type": "paragraph",
      "id": "b9e0e585a844d6be",
      "text": "Printing a call-stack [https://discourse.elm-lang.org/t/printing-a-call-stack/1648/1 page]"
    },
    {
      "type": "paragraph",
      "id": "2ac625e5e53b59d4",
      "text": "[[Elm-Time]], [[Michael Rätzel]], Elm Editor [https://elm-editor.com/?project-state-deflate-base64=rRpbl5pI87%2F4%2BiU7gLcx5%2ByDEEV04o44opIzZ49cBoigHq%2BjOfnvXzVNI5hiALMPvWNqu6rrXtXV%2FKwc7e3OW6%2F%2BFTiB%2F5fjK19%2BVozFzq58qbj7%2FWb35eHB8fbuwfjLXAcP65XvrWxnEdjBYmlvH%2BC%2F3sr5TMGfCXz3sN%2Fa9gNXe2s82pbB1ayWYVYbjTe%2B%2BdbgharBP7YWjbd6s7kwjEbzIcT5vNmune0i%2BGyuLaCw84KNb3%2FereCMyqeK5b292Vt7Zdrd7ToQQ%2BZ%2BVrZ2sD7aQ4JQ%2BfL99VPFdBcrxxb9tUEA379XdlsTsL8tvNVfth9UXj99%2F1lRQyzxvA%2BxhMfXX59%2BVtqWxSDwjx05oVEDBRjT1tKavvtKh3cX05qjz9yTUR1ujMB0Bl3RNQPtYMmubwr%2BZSDVDoPxyVnMhh17OtwORuu%2FK79C8qp92MVH8hEoyQbPCyE0i4%2FFlIdz%2B5zS6Z%2BNqnXRZ8ogop2P4nLG9JRmnbB6Za8gicNopnJm4HvWTPXNs%2BjbPfEIkh%2F0c3ttyu%2FuXNDWhvC%2BBO52Sk93jZ7m33GMOtN9Y6VeFFmrmXLrspjWV4rkHo2lfzB7GpcgmavYxwYCrEawHFyBQ4A8dZg0sN6KgL9RzJL5acw5L5Nu%2F8UpLksVO5pvIkAhU8Isfoxpd2N47YbSFc%2BGYJ3nUw68ZOm8QADo4D0vs%2BFKcv5mvOaQaRXYqkhtJ%2BHOB1PoHnS5f7QlsanI%2FmExGznPYxH81eeeJJE3ZdW15AmBsd%2FEyTb6zCQwYTHVqkqPY2GByH6jI8y6zI5JWBSaN0CMZAxMHI0hx%2BZJATF%2BqoxiEkhdOkuv1LNaHXVyQnWBMoQB%2BVo2MOtwq%2Bef9LHoGrLvQoYYGoLqG1Jxf%2BjtHIj2kwW2%2F8cTX6xeH%2BxvMjk%2BRJVOjlHVOJIglK9rZ1JVz0CqiNMydLOqQgrbkZO%2FQRLnIBZSCV6RuL3S6S51SeQWMvxbfgfuJoy7lJbRUMW8q4rFbxX1hXoIzJIChN1YEkRwhz%2FqsrYrIHiEco91nsdtT7nmrg%2FRQLVXy3CO4uXWLobGLALxbczG7f3TWBR1eeSARTbgXjvgxk8wn2uBGhZ4mAHQCEXzb5z6k0DUfmimrlOj3gCxqEd34oGL8YmKXqXRnAbyjPmEMilDWeYiKUfTxM5IU7tZ5qAU0icJmEg8CoyZSkKrmO5pdkTOzuI%2ByllDUyiWaMCFJ3L3bApa31iJvCX9lqeQw9M8NjG9VzFbCpiIaFXAgRhN1DtRV8CBTMNJIIP9JniWKq2ZuJxDH0lyNWkuILn%2Bj6Wu5O%2BEP%2BWSkvmLfhb3ZYuOPHRNYeIYhAu5FRRFC5c4ms%2F6F31CO1PSt4R%2FQYBSZOgyZI27Ay1cvb5vVrVdmXSOLmi4iFO349SO2DRt%2BiYWsDXM8ZqYM6NVMedaRlm9Wb0hN4drF8Qni8NS6OESN7onbkxOrZOyM%2Bi8b8zq6ABd7Qm8ZA2mnhj8bVPgsvAHWIs2DpEbDMZLUqp8o2ihzF4v0G9YUn0%2Fn7Xh4vn%2BRjxM6bRO%2BrQumUH3x0Igx7XXrO15WqlHihMZVFoyreQaFM0kPIvwJBDNJJHpy0sq%2BkZvmKzn5UnQNeVjF0gLi3lqi0pb9Cw7TjDiI7MzuBxrjHaQQXirRxTebl2DMtXKXCwZDHYWk4Ga4pMqMM1mo3D9xnsCbGdkvizR54Lrmr56JNUO%2FAx6Xu2ymH0j%2FfHXBcBCH7zpkRMilSUbwkvcHaO0TdHEo14qyFYDyXSeXmrMTwqghOulCl667MP9eLjVZyOGnjIfdai0qtHwiYp7gbNXg%2FFd7I6Ed5jQaHGKSOj2PpZzXIacSZcYpqjEefkodN2tYay9jjScQsbCo8b2pYDYTlqY0jA04qLYzBKb9MxjmYw8YLoot0gUnMGlSY1x51WYr62%2BQU6ZO0ag%2BdAHLQtokpDUln5XO8WRkBIc01qsoCQwvpPmIWM5qfGxh1iB71vn6zWVeEk0%2BAv7wAJyUhIsDZdIGOrG8uAieR0ffrg9XKKhyM5Z6e4tpbuDYq7VILF7as8nCXyiQ7E3z4pTimQbxlYqzE5VkjhdQtYQ6uwqkWonYex1MqBW6FMYfsrgEx4cDRkTxmXhOBfwL5B0j4Z3nbdCExzq9SmgNJQul6yHhdhjioJbN2V1BLPA%2Fhik5Y3eqKFIijM4A9t0Nnhgl3sy%2FNZlXyAijXvq3pDqotUj%2FUifB81dgKWlIvXPER0vYq209hh7pdDCNT2LoDwX%2BvP%2BS1iEL2un8BTjusAuPNR%2FUFB7TZusuDHbgKD70KdhOHTjNjAjT1a8IfSS4D5gJ7i0hHiDsWjBihy7HvUJceNWlL1SihGtRPjkRnycGZLAOlYoUGDcheQcgyaWFkPOBUbHZAlPW7H9NJwYk%2BtnaMIw9Mi7wxr8E6ZL7f2zJyqWzO8gVV30a04tRLbkZaQHiZA4i%2BSGF4ingHdNSSTOAo8p%2FT5xDkayzOsHOlOusxKWg1zDgNG4K0sYyEhQ0bTzGK7jxhiy%2FE17GEZGuWxP0K8kaaAUVeudMZjgKldLqKviwzasS8DrLwYUWEDlMcT25QMxhiIus9Sarb4MY3ej%2F18gfjJJi6cwNMvfDSjJGhTYeSF%2FCZf4bMraYbSCPkzY%2B%2BAz%2B%2BfyJULxHC%2FBbL7VaMpKA6MWMg2sUVPmMyJ%2BNeDxVJ%2FErfQ9FwjFW5aSA%2B%2FCsTSEttxR85gGRhKngWiMNKnz3gAxllDVNrGD0PkUGuA8h0GrGBCVE%2BMTjdEWRrJGSWYZNmHErC3RIDxdB%2FPjNnQTmIBkXNw%2BROudPrqiZqH%2BN1sicdlbJWkIOX1cPMfAaxgt%2BdkvhkVJwXwI0Kfz6ftGD5%2Fw%2BkdDwJ9vWfFOmr6J%2BUM0Qk0DMdhHrzBZXEO7f1kQTm8EZik%2FHMcnfhdQBCUpeswPwn4HUMG1mCKyUEMdRuaAzwKcN4nN2GAGJ8ce6fzzY832HMhfYrq3Mu0UBqyzTJKHjEVyhJwlGHz9ciIdKkx1CdMkgbPfeToJUUuqkFVNekKsonLVk9yK7qmY5DQ4lZ2Uq886ps9HmgTTQJ7DMiuD5vMHo6yv6wYd5t5VRGFmTPwRsgvMjIlNwB%2FBJg5EDrl4JDNOrtioD8YJ4B5ktM%2BvYZkCfemJngOzdMEe5yK3JakyXWDoRYtl3%2Bvva1wWJT2PWzam7uLJHKZwiTevD7eGSzzoM4syWuKUxJoL3Qv4wzXdlX15TKybdyCSeO8lFS4RXjKG69%2FIEs8FdSdI3%2BdwkRuV4qsz3MHHi%2F6fduXxEn%2FMZ0OfifS0gr8kKP%2FACIlFhlp3pAl0pcvaxuRhzCfDHA3Shxp0dyRfJ0pY1lH%2FgVAzuOFB8JLp3Z97WGKRb0hZwF4FSXkWTdRpJ4oqZxrYwGoCmso%2BTlohYx3Vn6%2B01VPwfoTbrfcSwFgnamcULxH%2FV6azyBVQVYEt0CGG3xVDMfpoZCUZQqvIVxMxuesjZiGHLZ0p4Wnc51iOfs7XFkW7rqh60m4OpjkFZCNoyQUD21TkaL0%2BX8BuBDW5CgQa2UY0WpTJ0tokqri35lCvqQfkG214Mo0%2Bo9WoG8NoLWmo6D27mEsUlzf6ogKcr2vMRM6mr%2BFwOpt2t4O%2BF8NioyXIpzIDtHuvr6%2B%2Ffv36Pw%3D%3D&project-state-hash=196752c22842aa6f104b91e9b850910281d7f2e8960b93e2d16542640e8e50e4&file-path-to-open=src%2FMain.elm page]"
    },
    {
      "type": "paragraph",
      "id": "ae06672486c517cc",
      "text": "BMP Image File Decoding In Elm\n[https://michaelrätzel.com/blog/bmp-image-file-decoding-in-elm post] (2019)"
    },
    {
      "type": "paragraph",
      "id": "c9d7f5d7ddaafaa6",
      "text": "To learn about the role of the update function as used here, have a look at [[The Elm Architecture]] (TEA) animation by lucamug."
    },
    {
      "type": "paragraph",
      "id": "dea16c60d77c21b4",
      "text": "Note: In Elm 0.19, view may return a Document msg instead of Html msg, but the concept is the same"
    },
    {
      "type": "paragraph",
      "id": "2dd154489cb9dcd1",
      "text": "document vs window"
    },
    {
      "type": "paragraph",
      "id": "9969018b5acd9481",
      "text": "Document is a type provided by the elm/browser [https://package.elm-lang.org/packages/elm/browser/latest/Browser#document package]. It represents a web page document."
    },
    {
      "type": "markdown",
      "id": "b0a502e774b996cf",
      "text": "> Create an HTML document managed by Elm. This expands upon what element can do in that view now gives you control over the title and body."
    },
    {
      "type": "paragraph",
      "id": "ec63662e92667ba8",
      "text": "⇒ [[Try the Interactive Stack]]"
    },
    {
      "type": "markdown",
      "id": "98c44ff53c0dc250",
      "text": "> You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on. Here you need to know calculate a value and then use that value in the next calculation."
    },
    {
      "type": "reference",
      "id": "8069b949d49a76e6",
      "site": "wiki.ralfbarkow.ch",
      "slug": "depth-value-notation",
      "title": "Depth-Value Notation",
      "text": "The order of magnitude of a digit within a conventional number identifies how many times that digit is multiplied by ten. Instead of increasing the power of a digit by moving to the next position on the left (thousands, hundreds, tens, units), depth-value increases power by depth of nesting. Crossing a boundary outward changes the order of magnitude by one power-of-ten, more generally by one power of an arbitrary base."
    },
    {
      "type": "markdown",
      "id": "4be49c99b4af4f47",
      "text": "> Each [[Operation]] would be pushed onto the stack, meaning that the ( 1 + 2 ) operation would be on the top of the stack. Then each item is popped off of the stack, evaluated and then the next item is popped off."
    },
    {
      "type": "paragraph",
      "id": "2cb6ee147ba7b286",
      "text": "push takes an element and a stack, and returns a new stack with the element added on top"
    },
    {
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "arrangement",
      "title": "Arrangement",
      "text": "To complete an operational description of round- and [[square-brackets]], we will need an axiom that specifies how the two boundaries interact in configurations more complex than the double nesting of [[Inversion]]. Here is the James axiom of Arrangement. The axiom specifies an invariant structure across frames."
    },
    {
      "type": "markdown",
      "id": "fa2a6ac2624c6fd8",
      "text": "**We [[pop]] [[Frame Type]]s off of the [[Stack]] and evaluate it.** "
    },
    {
      "type": "markdown",
      "id": "99ee4a3842cfd506",
      "text": "[…] If you're working with a [[Stack]] [[Data Structure]] in [[Elm]] and you need to [[pop]] [[Frame Type]]s off the stack, you can implement a `pop` function in your code. Here's an example of how you might do it:\n\n```elm\ntype FrameType\n    = TypeA\n    | TypeB\n    | TypeC\n\ntype alias State =\n    { stack : List FrameType\n    , isValid : Bool\n    }\n\npop : State -> ( FrameType, State )\npop state =\n    case state.stack of\n        [] ->\n            ( TypeA, state ) -- Default return value when stack is empty (you can choose any value)\n\n        top :: rest ->\n            ( top, { state | stack = rest } )\n```\n\nIn this example, we have a `FrameType` union type representing different types of frames. The `State` type contains a stack of `FrameType` elements and a boolean indicating whether the state is valid.\n\nThe `pop` function takes a `State` as input and returns a tuple containing the popped `FrameType` and the updated `State`. If the stack is empty, it returns a default value (in this case, `TypeA`), but you can choose any appropriate value.\n\nYou can use this `pop` function in your update logic to handle popping frame types off the stack. For example:\n\n```elm\nupdate : Msg -> State -> State\nupdate msg state =\n    case msg of\n        PopFrame ->\n            let\n                ( poppedFrame, newState ) = pop state\n            in\n            -- Do something with poppedFrame and newState\n```\n\nReplace `Msg` and `PopFrame` with your actual message type and message constructor.\n\nRemember to adapt the code to fit your specific application and use case. If you have more specific requirements or questions, feel free to let me know! (ChatGPT)"
    },
    {
      "type": "reference",
      "id": "3e0dec7c3a31ed33",
      "site": "wiki.ralfbarkow.ch",
      "slug": "background",
      "title": "Background",
      "text": "Void-equivalent forms are background potentia. They can be freely created and deleted. ⇒ [[James Form]]"
    },
    {
      "type": "markdown",
      "id": "35fd8f4fbe0d5343",
      "text": "**TypeA seems to be void-equivalent.**"
    },
    {
      "type": "markdown",
      "id": "8a14092c492cd1bb",
      "text": "If `TypeA` is meant to represent a void-equivalent, you can choose to return `Nothing` when the stack is empty. Here's the updated code:\n\n```elm\ntype FrameType\n    = TypeB\n    | TypeC\n\ntype alias State =\n    { stack : List FrameType\n    , isValid : Bool\n    }\n\npop : State -> ( Maybe FrameType, State )\npop state =\n    case state.stack of\n        [] ->\n            ( Nothing, state ) -- Return Nothing when stack is empty\n\n        top :: rest ->\n            ( Just top, { state | stack = rest } )\n```\n\nIn this code, we've removed `TypeA` from the `FrameType` union type. Now, `pop` returns a `Maybe FrameType` where `Nothing` represents an empty stack.\n\nYou can use this `pop` function in your update logic:\n\n```elm\nupdate : Msg -> State -> State\nupdate msg state =\n    case msg of\n        PopFrame ->\n            let\n                ( poppedFrame, newState ) = pop state\n            in\n            case poppedFrame of\n                Just frameType ->\n                    -- Do something with the popped frameType and newState\n\n                Nothing ->\n                    -- Handle case where stack was empty\n```\n\nThis way, you can handle the case where the stack is empty separately from when there is a valid popped frame. Adjust the update logic to fit your specific application. (ChatGPT)"
    },
    {
      "type": "markdown",
      "id": "1b161f423e82cd01",
      "text": "**You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on.** [⇒ [[Try the Interactive Stack]]]"
    },
    {
      "type": "markdown",
      "id": "bc2bafff6d45b3f7",
      "text": "If you want to evaluate nested brackets, you can use a recursive approach. Here's an example:\n\n```elm\ntype Bracket\n    = OpenBracket\n    | CloseBracket\n\ntype alias State =\n    { stack : List Bracket\n    , isValid : Bool\n    }\n\npop : State -> ( Maybe Bracket, State )\npop state =\n    case state.stack of\n        [] ->\n            ( Nothing, state )\n\n        top :: rest ->\n            ( Just top, { state | stack = rest } )\n\nevaluateBracket : Bracket -> State -> State\nevaluateBracket bracket state =\n    case bracket of\n        OpenBracket ->\n            state\n\n        CloseBracket ->\n            let\n                ( maybeTop, newState ) = pop state\n            in\n            case maybeTop of\n                Just OpenBracket ->\n                    { newState | isValid = True } -- Matching brackets found\n\n                _ ->\n                    { newState | isValid = False } -- Mismatched brackets\n\nupdate : Msg -> State -> State\nupdate msg state =\n    case msg of\n        ProcessNextBracket ->\n            let\n                ( maybeBracket, newState ) = pop state\n            in\n            case maybeBracket of\n                Just bracket ->\n                    let\n                        updatedState = evaluateBracket bracket newState\n                    in\n                    update ProcessNextBracket updatedState\n\n                Nothing ->\n                    newState -- Stack was empty, no more brackets to process\n```\n\nIn this example, we have a `Bracket` type with `OpenBracket` and `CloseBracket` variants. The `State` record contains a stack of brackets and a boolean flag `isValid`.\n\nThe `pop` function returns a `Maybe Bracket` representing the bracket that was popped off the stack. If the stack is empty, it returns `Nothing`.\n\nThe `evaluateBracket` function takes a bracket and the current state. If it's an `OpenBracket`, we leave the state unchanged. If it's a `CloseBracket`, we pop the top of the stack and check if it matches. If it matches, we set `isValid` to `True`, otherwise, we set it to `False`.\n\nThe `update` function processes the next bracket. If there's a bracket on the stack, it evaluates it and continues processing. If the stack is empty, it means we've processed all brackets. (ChatGPT)"
    },
    {
      "type": "markdown",
      "id": "8ca32679e627c52e",
      "text": "# DOM Event [⇐ [[The Elm Architecture]]]"
    },
    {
      "type": "paragraph",
      "id": "657b03b0e41512f7",
      "text": "onClick Types.Push [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L66-L67 code], [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L116-L122 code]"
    },
    {
      "type": "paragraph",
      "id": "52baf5452e49933e",
      "text": "onClick Types.Pop [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L74-L75 code] [⇒ [[Elm Stack]] ⇒ [[Try the Interactive Stack]]]"
    },
    {
      "type": "paragraph",
      "id": "46bb56bfc4b33761",
      "text": "Note: Effects Msg, see section \"document vs window (again) below."
    },
    {
      "type": "code",
      "id": "dc7a206fa8fc342d",
      "text": "update : Types.Msg -> Model -> ( Model, Cmd Types.Msg )\nupdate msg model =\n    case msg of\n        Types.Pop ->\n            let\n                returnStack =\n                    Stack.pop model.stack\n            in\n                ( { model | stack = Tuple.second returnStack, popped = Tuple.first returnStack, temp = \"\" }, Cmd.none )\n\n        Types.Push ->\n            let\n                returnStack =\n                    Stack.push model.temp model.stack\n            in\n                ( { model | stack = returnStack, temp = \"\" }, Cmd.none )\n\n        Types.Temp item ->\n            ( { model | temp = item }, Cmd.none )\n"
    },
    {
      "type": "paragraph",
      "id": "501c43427b31a888",
      "text": "Compare with the following hallucination:"
    },
    {
      "type": "code",
      "id": "a662a1663012513f",
      "text": "update : Types.Msg -> Model -> (Model, Cmd Types.Msg)\nupdate msg model =\n    case msg of\n        Types.Pop ->\n            let\n                (maybeBracket, newState) = pop model.stack\n            in\n                case maybeBracket of\n                    Just bracket ->\n                        ({ model | stack = newState, popped = bracket, temp = \"\" }, Cmd.none)\n\n                    Nothing ->\n                        (model, Cmd.none)\n\n        Types.Push ->\n            let\n                newStack = push model.temp model.stack\n            in\n                ({ model | stack = newStack, temp = \"\" }, Cmd.none)\n\n        Types.Temp item ->\n            ({ model | temp = item }, Cmd.none)\n\npop : Stack -> (Maybe Parenthesis, Stack)\npop stack =\n    -- Implementation of pop function\n    -- It returns a Maybe Parenthesis and the updated Stack\n\npush : Parenthesis -> Stack -> Stack\npush bracket stack =\n    -- Implementation of push function\n    -- It returns the updated Stack\n"
    },
    {
      "type": "markdown",
      "id": "b46cef5ff829ec58",
      "text": "# document vs window (again)"
    },
    {
      "type": "paragraph",
      "id": "16f3e75037e7f40f",
      "text": "http://blog.dreyeck.ch/view/welcome-visitors ⇒ Inspect ⇒ Watch expressions"
    },
    {
      "type": "paragraph",
      "id": "df184ab71514e6bf",
      "text": "document: HTMLDocument …"
    },
    {
      "type": "paragraph",
      "id": "ca1c5e837c2c387b",
      "text": "window: Window > Elm: {…} > Main: {…}"
    },
    {
      "type": "code",
      "id": "a02a13064be6b0a6",
      "text": "view :\n    App Data ActionData RouteParams\n    -> Shared.Model\n    -> Model\n    -> View (PagesMsg Msg)\nview app shared model =\n    { title = \"View.Slug_.SPLAT__\"\n    , body =\n        [ Html.h2 [] [ Html.text app.data.title ]\n        , Html.div [] (List.map Wiki.renderStory app.data.story)\n        ]\n    }\n"
    },
    {
      "type": "paragraph",
      "id": "4e43cc1b72197c1a",
      "text": "Note: renderStory [https://github.com/dreyeck/blog/blob/61baff126d0000f6b7d868838f5f1d1d646a8262/elm-pages-starter-express/src/Wiki.elm#L60-L100 code]"
    },
    {
      "type": "code",
      "id": "3b73be2cb80bdc87",
      "text": "                        renderedText =\n                            paragraph.text\n                                |> parse"
    },
    {
      "type": "markdown",
      "id": "0fca9450de36893a",
      "text": "**parse paragraph.text and then render the [[ ]] wiki link as HTML anchor**"
    },
    {
      "type": "markdown",
      "id": "0005cd26938747d0",
      "text": "To achieve this in [[Elm]], you can first define a parser function to identify and extract the wiki links from a text. Then, you can render them as HTML anchors in your view function. Here's an example implementation:\n\n1. Define Types:\n\n```elm\ntype Msg\n    = NoOp\n\ntype alias Model =\n    { text : String\n    , links : List String\n    }\n\ninit : Model\ninit =\n    { text = \"Your initial text with [[wiki links]] here.\"\n    , links = []\n    }\n```\n\n2. Parse Function:\n\n```elm\nparseLinks : String -> List String\nparseLinks text =\n    let\n        prefix = \"[[\"\n        suffix = \"]]\"\n        findLinks = String.split prefix >> List.tail >> List.map (String.split suffix >> List.head)\n    in\n    text\n        |> findLinks\n        |> List.filterMap identity\n```\n\n3. Update Function (if necessary):\n\n```elm\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n    case msg of\n        NoOp ->\n            (model, Cmd.none)\n```\n\n4. View Function:\n\n```elm\nview : Model -> Html Msg\nview model =\n    div []\n        [ text \"Parsed Text: \"\n        , ul []\n            (List.map (\\link -> li [Html.Attributes.class \"wiki-link\"] [text link]) model.links)\n        ]\n```\n\n5. Main Program:\n\n```elm\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = init\n        , view = view\n        , update = update\n        }\n```\n\nIn this example, the `parseLinks` function looks for substrings enclosed in `[[`"
    },
    {
      "type": "markdown",
      "id": "d4c0a2c32872727b",
      "text": "and `]]`, extracting them as wiki links. The `update` function is a placeholder that doesn't perform any specific actions for this example. Finally, the `view` function renders the parsed links as an unordered list.\n\nRemember to adjust the code according to your specific needs and integrate it into your Elm application. (ChatGPT)"
    },
    {
      "type": "markdown",
      "id": "bc658f3eea220ec0",
      "text": "**Explain the parseLinks function.**"
    },
    {
      "type": "markdown",
      "id": "41a2aabe38bc7e64",
      "text": "Certainly! The `parseLinks` function is responsible for extracting wiki links from a given text. Here's a breakdown of how it works:\n\n```elm\nparseLinks : String -> List String\nparseLinks text =\n    let\n        prefix = \"[[\"\n        suffix = \"]]\"\n        findLinks = String.split prefix >> List.tail >> List.map (String.split suffix >> List.head)\n    in\n    text\n        |> findLinks\n        |> List.filterMap identity\n```\n\n1. **Function Signature**:\n   - `parseLinks : String -> List String` declares a function named `parseLinks` that takes a string as input and returns a list of strings.\n\n2. **Local Definitions**:\n   - `prefix` and `suffix` are variables storing the opening and closing brackets of a wiki link, respectively. This allows us to identify the start and end of a link.\n\n   - `findLinks` is a function that finds occurrences of `[[`"
    },
    {
      "type": "markdown",
      "id": "9f1b0dd7bf254fde",
      "text": "in a string, splits the string at those points, and then extracts the first part of the split (which should be the content between `[[`"
    },
    {
      "type": "markdown",
      "id": "14d73442bde70f80",
      "text": "and `]]`).\n\n3. **Function Body**:\n   - `in` indicates the beginning of the function body.\n\n   - `text |> findLinks |> List.filterMap identity`:\n     - `text` is the input string that we're processing.\n     - `findLinks` is applied to the text, which extracts potential links.\n     - `List.filterMap identity` is used to remove any `Nothing` values and extract the `Just` values from the list.\n\n4. **Explanation of `findLinks`**:\n   - `String.split prefix` splits the text at occurrences of `[[`."
    },
    {
      "type": "markdown",
      "id": "86857f634162de4d",
      "text": "This results in a list of substrings where each element starts with the content of a potential wiki link.\n\n   - `List.tail` discards the first element of the list (since it may be empty or contain non-link content before the first `[[`)."
    },
    {
      "type": "markdown",
      "id": "9a96980ecdeac210",
      "text": "- `List.map (String.split suffix >> List.head)` processes each substring:\n     - `String.split suffix` splits the substring at occurrences of `]]`. This may result in a list with two parts: the link content and any text after the `]]`.\n\n     - `List.head` extracts the first part, which should be the content of the link.\n\n5. **Result**:\n   - The function returns a list of strings, where each string is a potential wiki link extracted from the input text.\n\nOverall, `parseLinks` aims to identify and extract content enclosed in `[[`"
    },
    {
      "type": "markdown",
      "id": "13578829a18a1687",
      "text": "and `]]` from a given string, effectively finding potential wiki links. (ChatGPT)"
    },
    {
      "type": "paragraph",
      "id": "49a9dcae4d4a9245",
      "text": "[…]     -> View (PagesMsg Msg)"
    },
    {
      "type": "paragraph",
      "id": "adeeb4e3703e1545",
      "text": "Journal.Msg ? – Journal as Stack ?"
    },
    {
      "type": "paragraph",
      "id": "2ab6942544d489c1",
      "text": "journal 0 type create … journal 204 type edit"
    },
    {
      "type": "paragraph",
      "id": "03a04cffc421e180",
      "text": "Note: journal 201 type move error type response: \"Server Ignoring move. Try reload.\""
    },
    {
      "type": "pagefold",
      "id": "5596793e9b3c58d4",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "a59d46da53b84aa8",
      "text": "Elm Cheat Sheet [https://lucamug.medium.com/elm-cheat-sheet-5fddcd7ee4f post], [https://lucamug.github.io/elm-cheat-sheet/ page], [https://lucamug.github.io/elm-cheat-sheet/elm-cheat-sheet.color.pdf pdf]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-09-23",
        "story": []
      },
      "date": 1695447441901
    },
    {
      "item": {
        "type": "factory",
        "id": "a0504d5b711ef85d"
      },
      "id": "a0504d5b711ef85d",
      "type": "add",
      "date": 1695447443398
    },
    {
      "type": "edit",
      "id": "a0504d5b711ef85d",
      "item": {
        "type": "paragraph",
        "id": "a0504d5b711ef85d",
        "text": "Expression and cut parser"
      },
      "date": 1695447444926
    },
    {
      "type": "edit",
      "id": "a0504d5b711ef85d",
      "item": {
        "type": "paragraph",
        "id": "a0504d5b711ef85d",
        "text": "In streaming algorithms, a pass on an input x ∈ Σn means that x is given as an input stream x1, x2, . . . , xn, which arrives sequentially, i.e., letter by letter in this order. For simplicity, we assume throughout this article that the length n of the input is always given to the algorithm in advance. Nonetheless, all our algorithms can be adapted to the case in which n is unknown until the end of a pass. See [16] for an introduction to streaming algorithms."
      },
      "date": 1695447459108
    },
    {
      "item": {
        "type": "factory",
        "id": "201caed4142f4ea8"
      },
      "id": "201caed4142f4ea8",
      "type": "add",
      "after": "a0504d5b711ef85d",
      "date": 1695447565433
    },
    {
      "type": "edit",
      "id": "201caed4142f4ea8",
      "item": {
        "type": "paragraph",
        "id": "201caed4142f4ea8",
        "text": "[16] S. Muthukrishnan. Data Streams: Algorithms and Applications. Now Publishers Inc., 2005."
      },
      "date": 1695447567731
    },
    {
      "item": {
        "type": "factory",
        "id": "b4f4dcdfbc5e0952"
      },
      "id": "b4f4dcdfbc5e0952",
      "type": "add",
      "after": "201caed4142f4ea8",
      "date": 1695447789143
    },
    {
      "type": "edit",
      "id": "b4f4dcdfbc5e0952",
      "item": {
        "type": "paragraph",
        "id": "b4f4dcdfbc5e0952",
        "text": "\nMUTHUKRISHNAN, S., 2005. Data Streams: Algorithms and Applications. Foundations and Trends® in Theoretical Computer Science. 2005. Vol. 1, no. 2, p. 117–236. DOI 10.1561/0400000002. \n"
      },
      "date": 1695447790686
    },
    {
      "item": {
        "type": "factory",
        "id": "59beba824ce17794"
      },
      "id": "59beba824ce17794",
      "type": "add",
      "after": "b4f4dcdfbc5e0952",
      "date": 1695447825705
    },
    {
      "type": "edit",
      "id": "59beba824ce17794",
      "item": {
        "type": "paragraph",
        "id": "59beba824ce17794",
        "text": "In the data stream scenario, input arrives very rapidly and there is limited memory to store the input. Algorithms have to work with one or few passes over the data, space less than linear in the input size or time significantly less than the input size. In the past few years, a new theory has emerged for reasoning about algorithms that work within these constraints on space, time, and number of passes. Some of the methods rely on metric embeddings, pseudo-random computations, sparse approximation theory and communication complexity. The applications for this scenario include IP network traffic analysis, mining text message streams and processing massive data sets in general. Researchers in Theoretical Computer Science, Databases, IP Networking and Computer Systems are working on the data stream challenges. This article is an overview and survey of data stream algorithmics and is an updated version of [175]."
      },
      "date": 1695447827420
    },
    {
      "item": {
        "type": "factory",
        "id": "bf2ef73faf091d83"
      },
      "id": "bf2ef73faf091d83",
      "type": "add",
      "after": "59beba824ce17794",
      "date": 1695447928962
    },
    {
      "type": "edit",
      "id": "bf2ef73faf091d83",
      "item": {
        "type": "paragraph",
        "id": "bf2ef73faf091d83",
        "text": "[175] S. Muthukrishnan, “Data streams: Algorithms and applications,” http://www.cs.rutgers.edu/ ̃muthu/stream-1-1.ps."
      },
      "date": 1695447930823
    },
    {
      "type": "edit",
      "id": "bf2ef73faf091d83",
      "item": {
        "type": "paragraph",
        "id": "bf2ef73faf091d83",
        "text": "[175] S. Muthukrishnan, “Data streams: Algorithms and applications,” http://www.cs.rutgers.edu/muthu/stream-1-1.ps."
      },
      "date": 1695447949351
    },
    {
      "type": "edit",
      "id": "bf2ef73faf091d83",
      "item": {
        "type": "paragraph",
        "id": "bf2ef73faf091d83",
        "text": "[175] S. Muthukrishnan, “Data streams: Algorithms and applications,” http://www.cs.rutgers.edu/~muthu/stream-1-1.ps."
      },
      "date": 1695448055922
    },
    {
      "item": {
        "type": "factory",
        "id": "be29b320fc5493f4"
      },
      "id": "be29b320fc5493f4",
      "type": "add",
      "after": "bf2ef73faf091d83",
      "date": 1695448263301
    },
    {
      "type": "edit",
      "id": "be29b320fc5493f4",
      "item": {
        "type": "paragraph",
        "id": "be29b320fc5493f4",
        "text": "Estimating Entropy and Entropy Norm on Data Streams"
      },
      "date": 1695448265027
    },
    {
      "type": "add",
      "id": "85cf27606e8baffa",
      "item": {
        "type": "paragraph",
        "id": "85cf27606e8baffa",
        "text": "in"
      },
      "after": "be29b320fc5493f4",
      "date": 1695448284437
    },
    {
      "type": "add",
      "id": "1b9f8b66ba8e5b5a",
      "item": {
        "type": "paragraph",
        "id": "1b9f8b66ba8e5b5a",
        "text": "\nDURAND, Bruno and THOMAS, Wolfgang (eds.), 2006. STACS 2006: 23rd annual symposium on Theoretical Aspects of Computer Science, Marseille, France, February 23-25, 2006: proceedings. . Berlin ; New York: Springer. Lecture notes in computer science, 3884. ISBN 978-3-540-32301-3. MLCM 2006/40161 (Q)\n"
      },
      "after": "85cf27606e8baffa",
      "date": 1695448285328
    },
    {
      "item": {
        "type": "factory",
        "id": "3cbe2179d8505331"
      },
      "id": "3cbe2179d8505331",
      "type": "add",
      "after": "1b9f8b66ba8e5b5a",
      "date": 1695448300723
    },
    {
      "type": "edit",
      "id": "3cbe2179d8505331",
      "item": {
        "type": "paragraph",
        "id": "3cbe2179d8505331",
        "text": "We consider the problem of computing information theoretic functions such as entropy on a data stream, using sublinear space. Our first result deals with a measure we call the “entropy norm” of an input stream: it is closely related to entropy but is structurally similar to the well-studied notion of frequency moments. We give a polylogarithmic space one-pass algorithm for estimating this norm under certain conditions on the input stream. We also prove a lower bound that rules out such an algorithm if these conditions do not hold. Our second group of results are for estimating the empirical entropy of an input stream. We first present a sublinear space one-pass algorithm for this problem. For a stream of m items and a given real parameter α, our algorithm uses space O(m2α) and provides an approximation of 1/α in the worst case and (1 + ε)in“most”cases.Wethenpresenta two-pass polylogarithmic space (1 + ε)-approximation algorithm. All our algorithms are quite simple."
      },
      "date": 1695448302186
    },
    {
      "type": "edit",
      "id": "1b9f8b66ba8e5b5a",
      "item": {
        "type": "paragraph",
        "id": "1b9f8b66ba8e5b5a",
        "text": "DURAND, Bruno and THOMAS, Wolfgang (eds.), 2006. STACS 2006: 23rd annual symposium on Theoretical Aspects of Computer Science, Marseille, France, February 23-25, 2006: proceedings. . Berlin ; New York: Springer. Lecture notes in computer science, 3884. ISBN 978-3-540-32301-3. MLCM 2006/40161 (Q)"
      },
      "date": 1695448407543
    },
    {
      "type": "add",
      "id": "34fdef5ae95779ec",
      "item": {
        "type": "paragraph",
        "id": "34fdef5ae95779ec",
        "text": "[[Entropy on a Data Stream]]"
      },
      "after": "1b9f8b66ba8e5b5a",
      "date": 1695448416920
    },
    {
      "id": "3cbe2179d8505331",
      "type": "remove",
      "removedTo": {
        "page": "Entropy on a Data Stream"
      },
      "date": 1695448421779
    },
    {
      "id": "be29b320fc5493f4",
      "type": "remove",
      "removedTo": {
        "page": "Entropy on a Data Stream"
      },
      "date": 1695448434020
    },
    {
      "id": "85cf27606e8baffa",
      "type": "remove",
      "removedTo": {
        "page": "Entropy on a Data Stream"
      },
      "date": 1695448437194
    },
    {
      "id": "1b9f8b66ba8e5b5a",
      "type": "remove",
      "removedTo": {
        "page": "Entropy on a Data Stream"
      },
      "date": 1695448441248
    },
    {
      "id": "34fdef5ae95779ec",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83"
      ],
      "date": 1695452003046
    },
    {
      "type": "edit",
      "id": "34fdef5ae95779ec",
      "item": {
        "type": "paragraph",
        "id": "34fdef5ae95779ec",
        "text": "⇒ [[Entropy on a Data Stream]]"
      },
      "date": 1695452011278
    },
    {
      "item": {
        "type": "factory",
        "id": "e6c2837c252c429c"
      },
      "id": "e6c2837c252c429c",
      "type": "add",
      "after": "bf2ef73faf091d83",
      "date": 1695452233907
    },
    {
      "type": "edit",
      "id": "e6c2837c252c429c",
      "item": {
        "type": "pagefold",
        "id": "e6c2837c252c429c",
        "text": "~"
      },
      "date": 1695452238633
    },
    {
      "item": {
        "type": "factory",
        "id": "cc271b361ea6ff83"
      },
      "id": "cc271b361ea6ff83",
      "type": "add",
      "after": "e6c2837c252c429c",
      "date": 1695452240095
    },
    {
      "type": "edit",
      "id": "cc271b361ea6ff83",
      "item": {
        "type": "paragraph",
        "id": "cc271b361ea6ff83",
        "text": "~/.nixpkgs"
      },
      "date": 1695452251355
    },
    {
      "item": {
        "type": "factory",
        "id": "6e4c8541197401e9"
      },
      "id": "6e4c8541197401e9",
      "type": "add",
      "after": "cc271b361ea6ff83",
      "date": 1695454768486
    },
    {
      "type": "edit",
      "id": "6e4c8541197401e9",
      "item": {
        "type": "pagefold",
        "id": "6e4c8541197401e9",
        "text": "~"
      },
      "date": 1695454770753
    },
    {
      "item": {
        "type": "factory",
        "id": "f4dc65d82d77927b"
      },
      "id": "f4dc65d82d77927b",
      "type": "add",
      "after": "6e4c8541197401e9",
      "date": 1695454772829
    },
    {
      "type": "edit",
      "id": "f4dc65d82d77927b",
      "item": {
        "type": "reference",
        "id": "f4dc65d82d77927b",
        "site": "wiki.ralfbarkow.ch",
        "slug": "index-generator",
        "title": "Index Generator",
        "text": "This [https://aplwiki.com/wiki/Index_Generator page] is about generating indices for an array of a given size. See Indexing, Indices, Index of, and Interval Index for other operations named after indices."
      },
      "date": 1695454774910
    },
    {
      "item": {
        "type": "factory",
        "id": "fa089aaefda7bd01"
      },
      "id": "fa089aaefda7bd01",
      "type": "add",
      "after": "f4dc65d82d77927b",
      "date": 1695454782289
    },
    {
      "type": "edit",
      "id": "fa089aaefda7bd01",
      "item": {
        "type": "paragraph",
        "id": "fa089aaefda7bd01",
        "text": "⇒ [[Generator]]"
      },
      "date": 1695454791979
    },
    {
      "type": "edit",
      "id": "fa089aaefda7bd01",
      "item": {
        "type": "paragraph",
        "id": "fa089aaefda7bd01",
        "text": "⇒ [[Generator]] ⇐ [[PEG]] ⇐ Expression and cut parser"
      },
      "date": 1695454844824
    },
    {
      "id": "83068d7175c8a073",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "83068d7175c8a073",
        "text": "I apologize for any confusion, you are correct that the iota function in APL is primarily used for generating indices for an array of a given size. The iota function generates an array of consecutive integers, starting at a specified value, and with a specified length. This array of integers can then be used as indices to access or manipulate elements in another array.\n\nFor example, in the following APL code, the iota function is used to generate indices for an array of 10 elements:"
      },
      "after": "f4dc65d82d77927b",
      "attribution": {
        "page": "Index Generator"
      },
      "date": 1695455211296
    },
    {
      "type": "edit",
      "id": "83068d7175c8a073",
      "item": {
        "type": "paragraph",
        "id": "83068d7175c8a073",
        "text": "> The iota function generates an array of consecutive integers, starting at a specified value, and with a specified length. This array of integers can then be used as indices to access or manipulate elements in another array."
      },
      "date": 1695455225328
    },
    {
      "type": "edit",
      "id": "83068d7175c8a073",
      "item": {
        "type": "markdown",
        "id": "83068d7175c8a073",
        "text": "> The iota function generates an array of consecutive integers, starting at a specified value, and with a specified length. This array of integers can then be used as indices to access or manipulate elements in another array."
      },
      "date": 1695455226698
    },
    {
      "item": {
        "type": "factory",
        "id": "b9e0e585a844d6be"
      },
      "id": "b9e0e585a844d6be",
      "type": "add",
      "after": "fa089aaefda7bd01",
      "date": 1695460567069
    },
    {
      "type": "edit",
      "id": "b9e0e585a844d6be",
      "item": {
        "type": "paragraph",
        "id": "b9e0e585a844d6be",
        "text": "Printing a call-stack"
      },
      "date": 1695460569550
    },
    {
      "type": "edit",
      "id": "b9e0e585a844d6be",
      "item": {
        "type": "paragraph",
        "id": "b9e0e585a844d6be",
        "text": "Printing a call-stack [https://discourse.elm-lang.org/t/printing-a-call-stack/1648/1 page]"
      },
      "date": 1695460579532
    },
    {
      "item": {
        "type": "factory",
        "id": "35b4e7148e625229"
      },
      "id": "35b4e7148e625229",
      "type": "add",
      "after": "b9e0e585a844d6be",
      "date": 1695460935701
    },
    {
      "type": "edit",
      "id": "35b4e7148e625229",
      "item": {
        "type": "paragraph",
        "id": "35b4e7148e625229",
        "text": "[[Elm-Time]]"
      },
      "date": 1695460939835
    },
    {
      "type": "remove",
      "id": "35b4e7148e625229",
      "date": 1695461033479
    },
    {
      "type": "add",
      "id": "2ac625e5e53b59d4",
      "item": {
        "type": "paragraph",
        "id": "2ac625e5e53b59d4",
        "text": "[[Elm-Time]], [[Michael Rätzel]]"
      },
      "after": "b9e0e585a844d6be",
      "date": 1695461046039
    },
    {
      "item": {
        "type": "factory",
        "id": "5896178884f7e97c"
      },
      "id": "5896178884f7e97c",
      "type": "add",
      "after": "2ac625e5e53b59d4",
      "date": 1695461371903
    },
    {
      "type": "edit",
      "id": "5896178884f7e97c",
      "item": {
        "type": "paragraph",
        "id": "5896178884f7e97c",
        "text": "mastodon advanced web interface ?"
      },
      "date": 1695461373636
    },
    {
      "id": "5896178884f7e97c",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4"
      ],
      "date": 1695461623830
    },
    {
      "item": {
        "type": "factory",
        "id": "9de59cef9266835c"
      },
      "id": "9de59cef9266835c",
      "type": "add",
      "after": "2ac625e5e53b59d4",
      "date": 1695461625757
    },
    {
      "type": "edit",
      "id": "9de59cef9266835c",
      "item": {
        "type": "html",
        "id": "9de59cef9266835c",
        "text": "<img alt=\"\" class=\"bg lk ll c\" width=\"700\" height=\"315\" loading=\"eager\" role=\"presentation\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*dZFJ9fnMH-2c3B8byqrDmw.gif\">"
      },
      "date": 1695461718250
    },
    {
      "type": "edit",
      "id": "9de59cef9266835c",
      "item": {
        "type": "html",
        "id": "9de59cef9266835c",
        "text": "<img alt=\"\" class=\"bg lk ll c\" width=\"100%\"  loading=\"eager\" role=\"presentation\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*dZFJ9fnMH-2c3B8byqrDmw.gif\">"
      },
      "date": 1695461769556
    },
    {
      "type": "add",
      "id": "c9d7f5d7ddaafaa6",
      "item": {
        "type": "paragraph",
        "id": "c9d7f5d7ddaafaa6",
        "text": "To learn about the role of the update function as used here, have a look at The Elm Architecture (TEA) animation by lucamug. "
      },
      "after": "2ac625e5e53b59d4",
      "date": 1695461845403
    },
    {
      "type": "edit",
      "id": "c9d7f5d7ddaafaa6",
      "item": {
        "type": "paragraph",
        "id": "c9d7f5d7ddaafaa6",
        "text": "To learn about the role of the update function as used here, have a look at [[The Elm Architecture]] (TEA) animation by lucamug. "
      },
      "date": 1695461989645
    },
    {
      "type": "edit",
      "id": "2ac625e5e53b59d4",
      "item": {
        "type": "paragraph",
        "id": "2ac625e5e53b59d4",
        "text": "[[Elm-Time]], [[Michael Rätzel]], [https://elm-editor.com/?project-state-deflate-base64=rRpbl5pI87%2F4%2BiU7gLcx5%2ByDEEV04o44opIzZ49cBoigHq%2BjOfnvXzVNI5hiALMPvWNqu6rrXtXV%2FKwc7e3OW6%2F%2BFTiB%2F5fjK19%2BVozFzq58qbj7%2FWb35eHB8fbuwfjLXAcP65XvrWxnEdjBYmlvH%2BC%2F3sr5TMGfCXz3sN%2Fa9gNXe2s82pbB1ayWYVYbjTe%2B%2BdbgharBP7YWjbd6s7kwjEbzIcT5vNmune0i%2BGyuLaCw84KNb3%2FereCMyqeK5b292Vt7Zdrd7ToQQ%2BZ%2BVrZ2sD7aQ4JQ%2BfL99VPFdBcrxxb9tUEA379XdlsTsL8tvNVfth9UXj99%2F1lRQyzxvA%2BxhMfXX59%2BVtqWxSDwjx05oVEDBRjT1tKavvtKh3cX05qjz9yTUR1ujMB0Bl3RNQPtYMmubwr%2BZSDVDoPxyVnMhh17OtwORuu%2FK79C8qp92MVH8hEoyQbPCyE0i4%2FFlIdz%2B5zS6Z%2BNqnXRZ8ogop2P4nLG9JRmnbB6Za8gicNopnJm4HvWTPXNs%2BjbPfEIkh%2F0c3ttyu%2FuXNDWhvC%2BBO52Sk93jZ7m33GMOtN9Y6VeFFmrmXLrspjWV4rkHo2lfzB7GpcgmavYxwYCrEawHFyBQ4A8dZg0sN6KgL9RzJL5acw5L5Nu%2F8UpLksVO5pvIkAhU8Isfoxpd2N47YbSFc%2BGYJ3nUw68ZOm8QADo4D0vs%2BFKcv5mvOaQaRXYqkhtJ%2BHOB1PoHnS5f7QlsanI%2FmExGznPYxH81eeeJJE3ZdW15AmBsd%2FEyTb6zCQwYTHVqkqPY2GByH6jI8y6zI5JWBSaN0CMZAxMHI0hx%2BZJATF%2BqoxiEkhdOkuv1LNaHXVyQnWBMoQB%2BVo2MOtwq%2Bef9LHoGrLvQoYYGoLqG1Jxf%2BjtHIj2kwW2%2F8cTX6xeH%2BxvMjk%2BRJVOjlHVOJIglK9rZ1JVz0CqiNMydLOqQgrbkZO%2FQRLnIBZSCV6RuL3S6S51SeQWMvxbfgfuJoy7lJbRUMW8q4rFbxX1hXoIzJIChN1YEkRwhz%2FqsrYrIHiEco91nsdtT7nmrg%2FRQLVXy3CO4uXWLobGLALxbczG7f3TWBR1eeSARTbgXjvgxk8wn2uBGhZ4mAHQCEXzb5z6k0DUfmimrlOj3gCxqEd34oGL8YmKXqXRnAbyjPmEMilDWeYiKUfTxM5IU7tZ5qAU0icJmEg8CoyZSkKrmO5pdkTOzuI%2ByllDUyiWaMCFJ3L3bApa31iJvCX9lqeQw9M8NjG9VzFbCpiIaFXAgRhN1DtRV8CBTMNJIIP9JniWKq2ZuJxDH0lyNWkuILn%2Bj6Wu5O%2BEP%2BWSkvmLfhb3ZYuOPHRNYeIYhAu5FRRFC5c4ms%2F6F31CO1PSt4R%2FQYBSZOgyZI27Ay1cvb5vVrVdmXSOLmi4iFO349SO2DRt%2BiYWsDXM8ZqYM6NVMedaRlm9Wb0hN4drF8Qni8NS6OESN7onbkxOrZOyM%2Bi8b8zq6ABd7Qm8ZA2mnhj8bVPgsvAHWIs2DpEbDMZLUqp8o2ihzF4v0G9YUn0%2Fn7Xh4vn%2BRjxM6bRO%2BrQumUH3x0Igx7XXrO15WqlHihMZVFoyreQaFM0kPIvwJBDNJJHpy0sq%2BkZvmKzn5UnQNeVjF0gLi3lqi0pb9Cw7TjDiI7MzuBxrjHaQQXirRxTebl2DMtXKXCwZDHYWk4Ga4pMqMM1mo3D9xnsCbGdkvizR54Lrmr56JNUO%2FAx6Xu2ymH0j%2FfHXBcBCH7zpkRMilSUbwkvcHaO0TdHEo14qyFYDyXSeXmrMTwqghOulCl667MP9eLjVZyOGnjIfdai0qtHwiYp7gbNXg%2FFd7I6Ed5jQaHGKSOj2PpZzXIacSZcYpqjEefkodN2tYay9jjScQsbCo8b2pYDYTlqY0jA04qLYzBKb9MxjmYw8YLoot0gUnMGlSY1x51WYr62%2BQU6ZO0ag%2BdAHLQtokpDUln5XO8WRkBIc01qsoCQwvpPmIWM5qfGxh1iB71vn6zWVeEk0%2BAv7wAJyUhIsDZdIGOrG8uAieR0ffrg9XKKhyM5Z6e4tpbuDYq7VILF7as8nCXyiQ7E3z4pTimQbxlYqzE5VkjhdQtYQ6uwqkWonYex1MqBW6FMYfsrgEx4cDRkTxmXhOBfwL5B0j4Z3nbdCExzq9SmgNJQul6yHhdhjioJbN2V1BLPA%2Fhik5Y3eqKFIijM4A9t0Nnhgl3sy%2FNZlXyAijXvq3pDqotUj%2FUifB81dgKWlIvXPER0vYq209hh7pdDCNT2LoDwX%2BvP%2BS1iEL2un8BTjusAuPNR%2FUFB7TZusuDHbgKD70KdhOHTjNjAjT1a8IfSS4D5gJ7i0hHiDsWjBihy7HvUJceNWlL1SihGtRPjkRnycGZLAOlYoUGDcheQcgyaWFkPOBUbHZAlPW7H9NJwYk%2BtnaMIw9Mi7wxr8E6ZL7f2zJyqWzO8gVV30a04tRLbkZaQHiZA4i%2BSGF4ingHdNSSTOAo8p%2FT5xDkayzOsHOlOusxKWg1zDgNG4K0sYyEhQ0bTzGK7jxhiy%2FE17GEZGuWxP0K8kaaAUVeudMZjgKldLqKviwzasS8DrLwYUWEDlMcT25QMxhiIus9Sarb4MY3ej%2F18gfjJJi6cwNMvfDSjJGhTYeSF%2FCZf4bMraYbSCPkzY%2B%2BAz%2B%2BfyJULxHC%2FBbL7VaMpKA6MWMg2sUVPmMyJ%2BNeDxVJ%2FErfQ9FwjFW5aSA%2B%2FCsTSEttxR85gGRhKngWiMNKnz3gAxllDVNrGD0PkUGuA8h0GrGBCVE%2BMTjdEWRrJGSWYZNmHErC3RIDxdB%2FPjNnQTmIBkXNw%2BROudPrqiZqH%2BN1sicdlbJWkIOX1cPMfAaxgt%2BdkvhkVJwXwI0Kfz6ftGD5%2Fw%2BkdDwJ9vWfFOmr6J%2BUM0Qk0DMdhHrzBZXEO7f1kQTm8EZik%2FHMcnfhdQBCUpeswPwn4HUMG1mCKyUEMdRuaAzwKcN4nN2GAGJ8ce6fzzY832HMhfYrq3Mu0UBqyzTJKHjEVyhJwlGHz9ciIdKkx1CdMkgbPfeToJUUuqkFVNekKsonLVk9yK7qmY5DQ4lZ2Uq886ps9HmgTTQJ7DMiuD5vMHo6yv6wYd5t5VRGFmTPwRsgvMjIlNwB%2FBJg5EDrl4JDNOrtioD8YJ4B5ktM%2BvYZkCfemJngOzdMEe5yK3JakyXWDoRYtl3%2Bvva1wWJT2PWzam7uLJHKZwiTevD7eGSzzoM4syWuKUxJoL3Qv4wzXdlX15TKybdyCSeO8lFS4RXjKG69%2FIEs8FdSdI3%2BdwkRuV4qsz3MHHi%2F6fduXxEn%2FMZ0OfifS0gr8kKP%2FACIlFhlp3pAl0pcvaxuRhzCfDHA3Shxp0dyRfJ0pY1lH%2FgVAzuOFB8JLp3Z97WGKRb0hZwF4FSXkWTdRpJ4oqZxrYwGoCmso%2BTlohYx3Vn6%2B01VPwfoTbrfcSwFgnamcULxH%2FV6azyBVQVYEt0CGG3xVDMfpoZCUZQqvIVxMxuesjZiGHLZ0p4Wnc51iOfs7XFkW7rqh60m4OpjkFZCNoyQUD21TkaL0%2BX8BuBDW5CgQa2UY0WpTJ0tokqri35lCvqQfkG214Mo0%2Bo9WoG8NoLWmo6D27mEsUlzf6ogKcr2vMRM6mr%2BFwOpt2t4O%2BF8NioyXIpzIDtHuvr6%2B%2Ffv36Pw%3D%3D&project-state-hash=196752c22842aa6f104b91e9b850910281d7f2e8960b93e2d16542640e8e50e4&file-path-to-open=src%2FMain.elm page]"
      },
      "date": 1695462628110
    },
    {
      "type": "edit",
      "id": "2ac625e5e53b59d4",
      "item": {
        "type": "paragraph",
        "id": "2ac625e5e53b59d4",
        "text": "[[Elm-Time]], [[Michael Rätzel]], Elm Editor [https://elm-editor.com/?project-state-deflate-base64=rRpbl5pI87%2F4%2BiU7gLcx5%2ByDEEV04o44opIzZ49cBoigHq%2BjOfnvXzVNI5hiALMPvWNqu6rrXtXV%2FKwc7e3OW6%2F%2BFTiB%2F5fjK19%2BVozFzq58qbj7%2FWb35eHB8fbuwfjLXAcP65XvrWxnEdjBYmlvH%2BC%2F3sr5TMGfCXz3sN%2Fa9gNXe2s82pbB1ayWYVYbjTe%2B%2BdbgharBP7YWjbd6s7kwjEbzIcT5vNmune0i%2BGyuLaCw84KNb3%2FereCMyqeK5b292Vt7Zdrd7ToQQ%2BZ%2BVrZ2sD7aQ4JQ%2BfL99VPFdBcrxxb9tUEA379XdlsTsL8tvNVfth9UXj99%2F1lRQyzxvA%2BxhMfXX59%2BVtqWxSDwjx05oVEDBRjT1tKavvtKh3cX05qjz9yTUR1ujMB0Bl3RNQPtYMmubwr%2BZSDVDoPxyVnMhh17OtwORuu%2FK79C8qp92MVH8hEoyQbPCyE0i4%2FFlIdz%2B5zS6Z%2BNqnXRZ8ogop2P4nLG9JRmnbB6Za8gicNopnJm4HvWTPXNs%2BjbPfEIkh%2F0c3ttyu%2FuXNDWhvC%2BBO52Sk93jZ7m33GMOtN9Y6VeFFmrmXLrspjWV4rkHo2lfzB7GpcgmavYxwYCrEawHFyBQ4A8dZg0sN6KgL9RzJL5acw5L5Nu%2F8UpLksVO5pvIkAhU8Isfoxpd2N47YbSFc%2BGYJ3nUw68ZOm8QADo4D0vs%2BFKcv5mvOaQaRXYqkhtJ%2BHOB1PoHnS5f7QlsanI%2FmExGznPYxH81eeeJJE3ZdW15AmBsd%2FEyTb6zCQwYTHVqkqPY2GByH6jI8y6zI5JWBSaN0CMZAxMHI0hx%2BZJATF%2BqoxiEkhdOkuv1LNaHXVyQnWBMoQB%2BVo2MOtwq%2Bef9LHoGrLvQoYYGoLqG1Jxf%2BjtHIj2kwW2%2F8cTX6xeH%2BxvMjk%2BRJVOjlHVOJIglK9rZ1JVz0CqiNMydLOqQgrbkZO%2FQRLnIBZSCV6RuL3S6S51SeQWMvxbfgfuJoy7lJbRUMW8q4rFbxX1hXoIzJIChN1YEkRwhz%2FqsrYrIHiEco91nsdtT7nmrg%2FRQLVXy3CO4uXWLobGLALxbczG7f3TWBR1eeSARTbgXjvgxk8wn2uBGhZ4mAHQCEXzb5z6k0DUfmimrlOj3gCxqEd34oGL8YmKXqXRnAbyjPmEMilDWeYiKUfTxM5IU7tZ5qAU0icJmEg8CoyZSkKrmO5pdkTOzuI%2ByllDUyiWaMCFJ3L3bApa31iJvCX9lqeQw9M8NjG9VzFbCpiIaFXAgRhN1DtRV8CBTMNJIIP9JniWKq2ZuJxDH0lyNWkuILn%2Bj6Wu5O%2BEP%2BWSkvmLfhb3ZYuOPHRNYeIYhAu5FRRFC5c4ms%2F6F31CO1PSt4R%2FQYBSZOgyZI27Ay1cvb5vVrVdmXSOLmi4iFO349SO2DRt%2BiYWsDXM8ZqYM6NVMedaRlm9Wb0hN4drF8Qni8NS6OESN7onbkxOrZOyM%2Bi8b8zq6ABd7Qm8ZA2mnhj8bVPgsvAHWIs2DpEbDMZLUqp8o2ihzF4v0G9YUn0%2Fn7Xh4vn%2BRjxM6bRO%2BrQumUH3x0Igx7XXrO15WqlHihMZVFoyreQaFM0kPIvwJBDNJJHpy0sq%2BkZvmKzn5UnQNeVjF0gLi3lqi0pb9Cw7TjDiI7MzuBxrjHaQQXirRxTebl2DMtXKXCwZDHYWk4Ga4pMqMM1mo3D9xnsCbGdkvizR54Lrmr56JNUO%2FAx6Xu2ymH0j%2FfHXBcBCH7zpkRMilSUbwkvcHaO0TdHEo14qyFYDyXSeXmrMTwqghOulCl667MP9eLjVZyOGnjIfdai0qtHwiYp7gbNXg%2FFd7I6Ed5jQaHGKSOj2PpZzXIacSZcYpqjEefkodN2tYay9jjScQsbCo8b2pYDYTlqY0jA04qLYzBKb9MxjmYw8YLoot0gUnMGlSY1x51WYr62%2BQU6ZO0ag%2BdAHLQtokpDUln5XO8WRkBIc01qsoCQwvpPmIWM5qfGxh1iB71vn6zWVeEk0%2BAv7wAJyUhIsDZdIGOrG8uAieR0ffrg9XKKhyM5Z6e4tpbuDYq7VILF7as8nCXyiQ7E3z4pTimQbxlYqzE5VkjhdQtYQ6uwqkWonYex1MqBW6FMYfsrgEx4cDRkTxmXhOBfwL5B0j4Z3nbdCExzq9SmgNJQul6yHhdhjioJbN2V1BLPA%2Fhik5Y3eqKFIijM4A9t0Nnhgl3sy%2FNZlXyAijXvq3pDqotUj%2FUifB81dgKWlIvXPER0vYq209hh7pdDCNT2LoDwX%2BvP%2BS1iEL2un8BTjusAuPNR%2FUFB7TZusuDHbgKD70KdhOHTjNjAjT1a8IfSS4D5gJ7i0hHiDsWjBihy7HvUJceNWlL1SihGtRPjkRnycGZLAOlYoUGDcheQcgyaWFkPOBUbHZAlPW7H9NJwYk%2BtnaMIw9Mi7wxr8E6ZL7f2zJyqWzO8gVV30a04tRLbkZaQHiZA4i%2BSGF4ingHdNSSTOAo8p%2FT5xDkayzOsHOlOusxKWg1zDgNG4K0sYyEhQ0bTzGK7jxhiy%2FE17GEZGuWxP0K8kaaAUVeudMZjgKldLqKviwzasS8DrLwYUWEDlMcT25QMxhiIus9Sarb4MY3ej%2F18gfjJJi6cwNMvfDSjJGhTYeSF%2FCZf4bMraYbSCPkzY%2B%2BAz%2B%2BfyJULxHC%2FBbL7VaMpKA6MWMg2sUVPmMyJ%2BNeDxVJ%2FErfQ9FwjFW5aSA%2B%2FCsTSEttxR85gGRhKngWiMNKnz3gAxllDVNrGD0PkUGuA8h0GrGBCVE%2BMTjdEWRrJGSWYZNmHErC3RIDxdB%2FPjNnQTmIBkXNw%2BROudPrqiZqH%2BN1sicdlbJWkIOX1cPMfAaxgt%2BdkvhkVJwXwI0Kfz6ftGD5%2Fw%2BkdDwJ9vWfFOmr6J%2BUM0Qk0DMdhHrzBZXEO7f1kQTm8EZik%2FHMcnfhdQBCUpeswPwn4HUMG1mCKyUEMdRuaAzwKcN4nN2GAGJ8ce6fzzY832HMhfYrq3Mu0UBqyzTJKHjEVyhJwlGHz9ciIdKkx1CdMkgbPfeToJUUuqkFVNekKsonLVk9yK7qmY5DQ4lZ2Uq886ps9HmgTTQJ7DMiuD5vMHo6yv6wYd5t5VRGFmTPwRsgvMjIlNwB%2FBJg5EDrl4JDNOrtioD8YJ4B5ktM%2BvYZkCfemJngOzdMEe5yK3JakyXWDoRYtl3%2Bvva1wWJT2PWzam7uLJHKZwiTevD7eGSzzoM4syWuKUxJoL3Qv4wzXdlX15TKybdyCSeO8lFS4RXjKG69%2FIEs8FdSdI3%2BdwkRuV4qsz3MHHi%2F6fduXxEn%2FMZ0OfifS0gr8kKP%2FACIlFhlp3pAl0pcvaxuRhzCfDHA3Shxp0dyRfJ0pY1lH%2FgVAzuOFB8JLp3Z97WGKRb0hZwF4FSXkWTdRpJ4oqZxrYwGoCmso%2BTlohYx3Vn6%2B01VPwfoTbrfcSwFgnamcULxH%2FV6azyBVQVYEt0CGG3xVDMfpoZCUZQqvIVxMxuesjZiGHLZ0p4Wnc51iOfs7XFkW7rqh60m4OpjkFZCNoyQUD21TkaL0%2BX8BuBDW5CgQa2UY0WpTJ0tokqri35lCvqQfkG214Mo0%2Bo9WoG8NoLWmo6D27mEsUlzf6ogKcr2vMRM6mr%2BFwOpt2t4O%2BF8NioyXIpzIDtHuvr6%2B%2Ffv36Pw%3D%3D&project-state-hash=196752c22842aa6f104b91e9b850910281d7f2e8960b93e2d16542640e8e50e4&file-path-to-open=src%2FMain.elm page]"
      },
      "date": 1695462660096
    },
    {
      "item": {
        "type": "factory",
        "id": "ae06672486c517cc"
      },
      "id": "ae06672486c517cc",
      "type": "add",
      "after": "9de59cef9266835c",
      "date": 1695462948968
    },
    {
      "type": "edit",
      "id": "ae06672486c517cc",
      "item": {
        "type": "paragraph",
        "id": "ae06672486c517cc",
        "text": "BMP Image File Decoding In Elm\n2019-09-19 "
      },
      "date": 1695462955612
    },
    {
      "type": "edit",
      "id": "ae06672486c517cc",
      "item": {
        "type": "paragraph",
        "id": "ae06672486c517cc",
        "text": "BMP Image File Decoding In Elm\n2019-09-19 [https://michaelrätzel.com/blog/bmp-image-file-decoding-in-elm post]"
      },
      "date": 1695462974019
    },
    {
      "type": "remove",
      "id": "9de59cef9266835c",
      "date": 1695462981550
    },
    {
      "type": "edit",
      "id": "ae06672486c517cc",
      "item": {
        "type": "paragraph",
        "id": "ae06672486c517cc",
        "text": "BMP Image File Decoding In Elm\n[https://michaelrätzel.com/blog/bmp-image-file-decoding-in-elm post] (2019)"
      },
      "date": 1695463010693
    },
    {
      "item": {
        "type": "factory",
        "id": "b658569c8cb74733"
      },
      "id": "b658569c8cb74733",
      "type": "add",
      "after": "ae06672486c517cc",
      "date": 1695463996192
    },
    {
      "type": "edit",
      "id": "b658569c8cb74733",
      "item": {
        "type": "reference",
        "id": "b658569c8cb74733",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-stack",
        "title": "Elm Stack",
        "text": "is an implementation of the stack data structure for the elm language. [https://github.com/mhoare/elm-stack/tree/3.1.2 github], [https://elm-stack.surge.sh/ site]"
      },
      "date": 1695463998770
    },
    {
      "item": {
        "type": "factory",
        "id": "2cb6ee147ba7b286"
      },
      "id": "2cb6ee147ba7b286",
      "type": "add",
      "after": "b658569c8cb74733",
      "date": 1695464000059
    },
    {
      "type": "edit",
      "id": "2cb6ee147ba7b286",
      "item": {
        "type": "paragraph",
        "id": "2cb6ee147ba7b286",
        "text": "push takes an element and a stack, and returns a new stack with the element added on top"
      },
      "date": 1695464006307
    },
    {
      "item": {
        "type": "factory",
        "id": "bec19bb8091ce2f0"
      },
      "id": "bec19bb8091ce2f0",
      "type": "add",
      "after": "2cb6ee147ba7b286",
      "date": 1695464152022
    },
    {
      "type": "edit",
      "id": "bec19bb8091ce2f0",
      "item": {
        "type": "paragraph",
        "id": "bec19bb8091ce2f0",
        "text": "https://elm-stack.surge.sh/#interactivestack page"
      },
      "date": 1695464157096
    },
    {
      "type": "edit",
      "id": "bec19bb8091ce2f0",
      "item": {
        "type": "paragraph",
        "id": "bec19bb8091ce2f0",
        "text": "Try the interactive Stack [https://elm-stack.surge.sh/#interactivestack page]"
      },
      "date": 1695464172940
    },
    {
      "type": "edit",
      "id": "bec19bb8091ce2f0",
      "item": {
        "type": "paragraph",
        "id": "bec19bb8091ce2f0",
        "text": "Try the interactive Stack [https://elm-stack.surge.sh/#interactivestack page], [https://package.elm-lang.org/packages/mhoare/elm-stack/latest package]"
      },
      "date": 1695464194686
    },
    {
      "type": "edit",
      "id": "bec19bb8091ce2f0",
      "item": {
        "type": "paragraph",
        "id": "bec19bb8091ce2f0",
        "text": "Try the interactive Stack [https://elm-stack.surge.sh/#interactivestack page], [https://package.elm-lang.org/packages/mhoare/elm-stack/latest package], [https://github.com/mhoare/elm-stack/tree/3.1.2 github]"
      },
      "date": 1695464215481
    },
    {
      "type": "add",
      "id": "ec63662e92667ba8",
      "item": {
        "type": "paragraph",
        "id": "ec63662e92667ba8",
        "text": "⇒ [[Try the Interactive Stack]]"
      },
      "after": "2cb6ee147ba7b286",
      "date": 1695464250115
    },
    {
      "id": "b658569c8cb74733",
      "type": "remove",
      "removedTo": {
        "page": "Try the Interactive Stack"
      },
      "date": 1695464259125
    },
    {
      "id": "bec19bb8091ce2f0",
      "type": "remove",
      "removedTo": {
        "page": "Try the Interactive Stack"
      },
      "date": 1695464263100
    },
    {
      "item": {
        "type": "factory",
        "id": "dc7a206fa8fc342d"
      },
      "id": "dc7a206fa8fc342d",
      "type": "add",
      "after": "ec63662e92667ba8",
      "date": 1695465177110
    },
    {
      "type": "edit",
      "id": "dc7a206fa8fc342d",
      "item": {
        "type": "code",
        "id": "dc7a206fa8fc342d",
        "text": "view : Model -> Html Types.Msg\nview model =\n    div []\n        [ introView\n        , div [ id \"interactivestack\", class \"row\" ]\n            [ div [ class \"container\" ]\n                [ div [ class \"col-sm-12\" ]\n                    [ h2 [ class \"center\" ]\n                        [ text \"Try the interactive Stack\" ]\n                    , div\n                        [ id \"content\" ]\n                        [ stackView (Stack.toList model.stack)\n                        , br [] []\n                        ]\n                    , div [ class \"row col-md-6 col-sm-12 col-md-offset-3\" ]\n                        [ div [ attribute \"role\" \"form\" ]\n                            [ input [ id \"input\", type_ \"text\", value model.temp, onEnter Types.Push, onInput (\\str -> Types.Temp str) ] []\n                            , button [ buttonEnabled model.temp, class \"push btn btn-default\", onClick Types.Push ] [ text \"Push\" ]\n                            ]\n                        ]\n                    , div [ style [ ( \"margin-top\", \"7%\" ) ], class \"row\" ]\n                        [ div [ style [ ( \"text-align\", \"center\" ) ], class \"col-md-6 col-md-offset-3 col-sm-12\" ]\n                            [ span [ class \"h3\", style [ ( \"padding\", \"0.5em\" ) ] ] [ text (\"Popped: \" ++ (Maybe.withDefault \"\" model.popped)) ]\n                            , br [] []\n                            , button\n                                [ class \"btn btn-default\", onClick Types.Pop ]\n                                [ text \"Pop\" ]\n                            ]\n                        ]\n                    , div [ style [ ( \"text-align\", \"center\" ), ( \"margin-bottom\", \"2%\" ) ] ] [ a [ href \"http://package.elm-lang.org/packages/mhoare/elm-stack/latest\" ] [ text \"View the elm-stack package\" ] ]\n                    ]\n                ]\n            ]\n        , div [ class \"container\" ] [ div [ class \"row\" ] [ Markdown.toHtml [ class \"col-sm-12\" ] ViewHelpers.secondPara ] ]\n        , div [ class \"container\" ] [ div [ class \"row\" ] [ Markdown.toHtml [ class \"col-sm-12\" ] ViewHelpers.stackOperationsPara ] ]\n        , ViewHelpers.footer\n        ]\n\n"
      },
      "date": 1695465179374
    },
    {
      "item": {
        "type": "factory",
        "id": "00f31205b56e2e21"
      },
      "id": "00f31205b56e2e21",
      "type": "add",
      "after": "dc7a206fa8fc342d",
      "date": 1695465246766
    },
    {
      "type": "edit",
      "id": "00f31205b56e2e21",
      "item": {
        "type": "paragraph",
        "id": "00f31205b56e2e21",
        "text": "depth-value]]"
      },
      "date": 1695465260969
    },
    {
      "item": {
        "type": "factory",
        "id": "8069b949d49a76e6"
      },
      "id": "8069b949d49a76e6",
      "type": "add",
      "after": "00f31205b56e2e21",
      "date": 1695465271968
    },
    {
      "type": "edit",
      "id": "8069b949d49a76e6",
      "item": {
        "type": "reference",
        "id": "8069b949d49a76e6",
        "site": "wiki.ralfbarkow.ch",
        "slug": "depth-value-notation",
        "title": "Depth-Value Notation",
        "text": "The order of magnitude of a digit within a conventional number identifies how many times that digit is multiplied by ten. Instead of increasing the power of a digit by moving to the next position on the left (thousands, hundreds, tens, units), depth-value increases power by depth of nesting. Crossing a boundary outward changes the order of magnitude by one power-of-ten, more generally by one power of an arbitrary base."
      },
      "date": 1695465274528
    },
    {
      "type": "remove",
      "id": "00f31205b56e2e21",
      "date": 1695465276417
    },
    {
      "id": "8069b949d49a76e6",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "c9d7f5d7ddaafaa6",
        "ae06672486c517cc",
        "2cb6ee147ba7b286",
        "ec63662e92667ba8",
        "8069b949d49a76e6",
        "dc7a206fa8fc342d"
      ],
      "date": 1695465304616
    },
    {
      "id": "e37ba173abe4f642",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e37ba173abe4f642",
        "text": "Stacks... Why?\n\nYou may be thinking - why would we want only want to access the last item we added?\n\nWell, think about what happens when you use brackets in this calculation:\n\n( ( ( 1 + 2 ) + 3 ) + 4 )\n\nYou first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on. Here you need to know calculate a value and then use that value in the next calculation.\n\nThis is exactly where a stack would be used in computing. Each operation would be pushed onto the stack, meaning that the ( 1 + 2 ) operation would be on the top of the stack. Then each item is popped off of the stack, evaluated and then the next item is popped off.\n\nStacks are also used when calling procedures in programs and when reversing array items.\n"
      },
      "after": "ec63662e92667ba8",
      "attribution": {
        "page": "Try the Interactive Stack"
      },
      "date": 1695465308128
    },
    {
      "type": "edit",
      "id": "e37ba173abe4f642",
      "item": {
        "type": "paragraph",
        "id": "e37ba173abe4f642",
        "text": "> You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on. Here you need to know calculate a value and then use that value in the next calculation."
      },
      "date": 1695465321615
    },
    {
      "type": "edit",
      "id": "e37ba173abe4f642",
      "item": {
        "type": "markdown",
        "id": "e37ba173abe4f642",
        "text": "> You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on. Here you need to know calculate a value and then use that value in the next calculation."
      },
      "date": 1695465322948
    },
    {
      "type": "edit",
      "id": "c9d7f5d7ddaafaa6",
      "item": {
        "type": "paragraph",
        "id": "c9d7f5d7ddaafaa6",
        "text": "To learn about the role of the update function as used here, have a look at [[The Elm Architecture]] (TEA) animation by lucamug."
      },
      "date": 1695465644371
    },
    {
      "type": "add",
      "id": "dea16c60d77c21b4",
      "item": {
        "type": "paragraph",
        "id": "dea16c60d77c21b4",
        "text": "Note: In Elm 0.19, view may return a Document msg instead of Html msg, but the concept is the same"
      },
      "after": "c9d7f5d7ddaafaa6",
      "date": 1695465661696
    },
    {
      "item": {
        "type": "factory",
        "id": "2dd154489cb9dcd1"
      },
      "id": "2dd154489cb9dcd1",
      "type": "add",
      "after": "dc7a206fa8fc342d",
      "date": 1695465962921
    },
    {
      "type": "edit",
      "id": "2dd154489cb9dcd1",
      "item": {
        "type": "paragraph",
        "id": "2dd154489cb9dcd1",
        "text": "document vs window"
      },
      "date": 1695465969727
    },
    {
      "item": {
        "type": "factory",
        "id": "76fa7a8c926b2fc0"
      },
      "id": "76fa7a8c926b2fc0",
      "type": "add",
      "after": "2dd154489cb9dcd1",
      "date": 1695465979682
    },
    {
      "type": "edit",
      "id": "76fa7a8c926b2fc0",
      "item": {
        "type": "markdown",
        "id": "76fa7a8c926b2fc0",
        "text": "Document is a type provided by the elm/browser package. It represents a web page document."
      },
      "date": 1695465981631
    },
    {
      "type": "remove",
      "id": "76fa7a8c926b2fc0",
      "date": 1695465985837
    },
    {
      "type": "add",
      "id": "9969018b5acd9481",
      "item": {
        "type": "paragraph",
        "id": "9969018b5acd9481",
        "text": "Document is a type provided by the elm/browser package. It represents a web page document."
      },
      "after": "2dd154489cb9dcd1",
      "date": 1695466000341
    },
    {
      "type": "edit",
      "id": "9969018b5acd9481",
      "item": {
        "type": "paragraph",
        "id": "9969018b5acd9481",
        "text": "Document is a type provided by the elm/browser [https://package.elm-lang.org/packages/elm/browser/latest/Browser#document package]. It represents a web page document."
      },
      "date": 1695466038716
    },
    {
      "type": "add",
      "id": "b0a502e774b996cf",
      "item": {
        "type": "paragraph",
        "id": "b0a502e774b996cf",
        "text": "> Create an HTML document managed by Elm. This expands upon what element can do in that view now gives you control over the <title> and <body>."
      },
      "after": "9969018b5acd9481",
      "date": 1695466143419
    },
    {
      "type": "edit",
      "id": "b0a502e774b996cf",
      "item": {
        "type": "markdown",
        "id": "b0a502e774b996cf",
        "text": "> Create an HTML document managed by Elm. This expands upon what element can do in that view now gives you control over the <title> and <body>."
      },
      "date": 1695466144926
    },
    {
      "id": "2dd154489cb9dcd1",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "ae06672486c517cc",
        "2cb6ee147ba7b286",
        "ec63662e92667ba8",
        "e37ba173abe4f642",
        "8069b949d49a76e6",
        "dc7a206fa8fc342d",
        "9969018b5acd9481",
        "b0a502e774b996cf"
      ],
      "date": 1695466165008
    },
    {
      "id": "9969018b5acd9481",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "ae06672486c517cc",
        "2cb6ee147ba7b286",
        "ec63662e92667ba8",
        "e37ba173abe4f642",
        "8069b949d49a76e6",
        "dc7a206fa8fc342d",
        "b0a502e774b996cf"
      ],
      "date": 1695466173004
    },
    {
      "id": "b0a502e774b996cf",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "b0a502e774b996cf",
        "ae06672486c517cc",
        "2cb6ee147ba7b286",
        "ec63662e92667ba8",
        "e37ba173abe4f642",
        "8069b949d49a76e6",
        "dc7a206fa8fc342d"
      ],
      "date": 1695466181173
    },
    {
      "id": "ae06672486c517cc",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "ae06672486c517cc",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "b0a502e774b996cf",
        "2cb6ee147ba7b286",
        "ec63662e92667ba8",
        "e37ba173abe4f642",
        "8069b949d49a76e6",
        "dc7a206fa8fc342d"
      ],
      "date": 1695466193389
    },
    {
      "id": "2cb6ee147ba7b286",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "ae06672486c517cc",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "b0a502e774b996cf",
        "ec63662e92667ba8",
        "e37ba173abe4f642",
        "2cb6ee147ba7b286",
        "8069b949d49a76e6",
        "dc7a206fa8fc342d"
      ],
      "date": 1695466207883
    },
    {
      "type": "edit",
      "id": "b0a502e774b996cf",
      "item": {
        "type": "markdown",
        "id": "b0a502e774b996cf",
        "text": "> Create an HTML document managed by Elm. This expands upon what element can do in that view now gives you control over the title and body."
      },
      "date": 1695466259024
    },
    {
      "type": "remove",
      "id": "e37ba173abe4f642",
      "date": 1695466318109
    },
    {
      "id": "98c44ff53c0dc250",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "98c44ff53c0dc250",
        "text": "You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on. Here you need to know calculate a value and then use that value in the next calculation."
      },
      "after": "ec63662e92667ba8",
      "attribution": {
        "page": "Try the Interactive Stack"
      },
      "date": 1695466320808
    },
    {
      "type": "edit",
      "id": "98c44ff53c0dc250",
      "item": {
        "type": "paragraph",
        "id": "98c44ff53c0dc250",
        "text": "> You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on. Here you need to know calculate a value and then use that value in the next calculation."
      },
      "date": 1695466324281
    },
    {
      "type": "edit",
      "id": "98c44ff53c0dc250",
      "item": {
        "type": "markdown",
        "id": "98c44ff53c0dc250",
        "text": "> You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on. Here you need to know calculate a value and then use that value in the next calculation."
      },
      "date": 1695466325692
    },
    {
      "id": "8069b949d49a76e6",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "ae06672486c517cc",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "b0a502e774b996cf",
        "ec63662e92667ba8",
        "98c44ff53c0dc250",
        "8069b949d49a76e6",
        "2cb6ee147ba7b286",
        "dc7a206fa8fc342d"
      ],
      "date": 1695466352698
    },
    {
      "id": "4be49c99b4af4f47",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4be49c99b4af4f47",
        "text": "This is exactly where a stack would be used in computing. Each operation would be pushed onto the stack, meaning that the ( 1 + 2 ) operation would be on the top of the stack. Then each item is popped off of the stack, evaluated and then the next item is popped off."
      },
      "after": "8069b949d49a76e6",
      "attribution": {
        "page": "Try the Interactive Stack"
      },
      "date": 1695466366989
    },
    {
      "type": "edit",
      "id": "4be49c99b4af4f47",
      "item": {
        "type": "paragraph",
        "id": "4be49c99b4af4f47",
        "text": "> Each operation would be pushed onto the stack, meaning that the ( 1 + 2 ) operation would be on the top of the stack. Then each item is popped off of the stack, evaluated and then the next item is popped off."
      },
      "date": 1695466373901
    },
    {
      "type": "edit",
      "id": "4be49c99b4af4f47",
      "item": {
        "type": "markdown",
        "id": "4be49c99b4af4f47",
        "text": "> Each operation would be pushed onto the stack, meaning that the ( 1 + 2 ) operation would be on the top of the stack. Then each item is popped off of the stack, evaluated and then the next item is popped off."
      },
      "date": 1695466374769
    },
    {
      "type": "edit",
      "id": "4be49c99b4af4f47",
      "item": {
        "type": "markdown",
        "id": "4be49c99b4af4f47",
        "text": "> Each [[Operation]] would be pushed onto the stack, meaning that the ( 1 + 2 ) operation would be on the top of the stack. Then each item is popped off of the stack, evaluated and then the next item is popped off."
      },
      "date": 1695466398770
    },
    {
      "id": "dc7a206fa8fc342d",
      "type": "remove",
      "removedTo": {
        "page": "Try the Interactive Stack"
      },
      "date": 1695466902818
    },
    {
      "type": "add",
      "item": {
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "arrangement",
        "title": "Arrangement",
        "text": "To complete an operational description of round- and [[square-brackets]], we will need an axiom that specifies how the two boundaries interact in configurations more complex than the double nesting of [[Inversion]]. Here is the James axiom of Arrangement. The axiom specifies an invariant structure across frames."
      },
      "after": "2cb6ee147ba7b286",
      "attribution": {
        "page": "Square-Brackets"
      },
      "date": 1695466931428
    },
    {
      "item": {
        "type": "factory",
        "id": "c4d1f42859cf5ad1"
      },
      "id": "c4d1f42859cf5ad1",
      "type": "add",
      "date": 1695467914828
    },
    {
      "type": "edit",
      "id": "c4d1f42859cf5ad1",
      "item": {
        "type": "paragraph",
        "id": "c4d1f42859cf5ad1",
        "text": "We [[pop]] … off of the [[Stack]]."
      },
      "date": 1695467955863
    },
    {
      "type": "edit",
      "id": "c4d1f42859cf5ad1",
      "item": {
        "type": "paragraph",
        "id": "c4d1f42859cf5ad1",
        "text": "We [[pop]] [[Frame Type]]s off of the [[Stack]]."
      },
      "date": 1695467984831
    },
    {
      "item": {
        "type": "factory",
        "id": "99ee4a3842cfd506"
      },
      "id": "99ee4a3842cfd506",
      "type": "add",
      "after": "c4d1f42859cf5ad1",
      "date": 1695468040366
    },
    {
      "type": "edit",
      "id": "99ee4a3842cfd506",
      "item": {
        "type": "markdown",
        "id": "99ee4a3842cfd506",
        "text": "Got it. If you're working with a stack data structure in Elm and you need to pop frame types off the stack, you can implement a `pop` function in your code. Here's an example of how you might do it:\n\n```elm\ntype FrameType\n    = TypeA\n    | TypeB\n    | TypeC\n\ntype alias State =\n    { stack : List FrameType\n    , isValid : Bool\n    }\n\npop : State -> ( FrameType, State )\npop state =\n    case state.stack of\n        [] ->\n            ( TypeA, state ) -- Default return value when stack is empty (you can choose any value)\n\n        top :: rest ->\n            ( top, { state | stack = rest } )\n```\n\nIn this example, we have a `FrameType` union type representing different types of frames. The `State` type contains a stack of `FrameType` elements and a boolean indicating whether the state is valid.\n\nThe `pop` function takes a `State` as input and returns a tuple containing the popped `FrameType` and the updated `State`. If the stack is empty, it returns a default value (in this case, `TypeA`), but you can choose any appropriate value.\n\nYou can use this `pop` function in your update logic to handle popping frame types off the stack. For example:\n\n```elm\nupdate : Msg -> State -> State\nupdate msg state =\n    case msg of\n        PopFrame ->\n            let\n                ( poppedFrame, newState ) = pop state\n            in\n            -- Do something with poppedFrame and newState\n```\n\nReplace `Msg` and `PopFrame` with your actual message type and message constructor.\n\nRemember to adapt the code to fit your specific application and use case. If you have more specific requirements or questions, feel free to let me know!"
      },
      "date": 1695468042605
    },
    {
      "type": "edit",
      "id": "99ee4a3842cfd506",
      "item": {
        "type": "markdown",
        "id": "99ee4a3842cfd506",
        "text": "Got it. If you're working with a stack data structure in Elm and you need to pop frame types off the stack, you can implement a `pop` function in your code. Here's an example of how you might do it:\n\n```elm\ntype FrameType\n    = TypeA\n    | TypeB\n    | TypeC\n\ntype alias State =\n    { stack : List FrameType\n    , isValid : Bool\n    }\n\npop : State -> ( FrameType, State )\npop state =\n    case state.stack of\n        [] ->\n            ( TypeA, state ) -- Default return value when stack is empty (you can choose any value)\n\n        top :: rest ->\n            ( top, { state | stack = rest } )\n```\n\nIn this example, we have a `FrameType` union type representing different types of frames. The `State` type contains a stack of `FrameType` elements and a boolean indicating whether the state is valid.\n\nThe `pop` function takes a `State` as input and returns a tuple containing the popped `FrameType` and the updated `State`. If the stack is empty, it returns a default value (in this case, `TypeA`), but you can choose any appropriate value.\n\nYou can use this `pop` function in your update logic to handle popping frame types off the stack. For example:\n\n```elm\nupdate : Msg -> State -> State\nupdate msg state =\n    case msg of\n        PopFrame ->\n            let\n                ( poppedFrame, newState ) = pop state\n            in\n            -- Do something with poppedFrame and newState\n```\n\nReplace `Msg` and `PopFrame` with your actual message type and message constructor.\n\nRemember to adapt the code to fit your specific application and use case. If you have more specific requirements or questions, feel free to let me know! (ChatGPT)"
      },
      "date": 1695468057556
    },
    {
      "type": "edit",
      "id": "99ee4a3842cfd506",
      "item": {
        "type": "markdown",
        "id": "99ee4a3842cfd506",
        "text": "[…] If you're working with a stack data structure in Elm and you need to pop frame types off the stack, you can implement a `pop` function in your code. Here's an example of how you might do it:\n\n```elm\ntype FrameType\n    = TypeA\n    | TypeB\n    | TypeC\n\ntype alias State =\n    { stack : List FrameType\n    , isValid : Bool\n    }\n\npop : State -> ( FrameType, State )\npop state =\n    case state.stack of\n        [] ->\n            ( TypeA, state ) -- Default return value when stack is empty (you can choose any value)\n\n        top :: rest ->\n            ( top, { state | stack = rest } )\n```\n\nIn this example, we have a `FrameType` union type representing different types of frames. The `State` type contains a stack of `FrameType` elements and a boolean indicating whether the state is valid.\n\nThe `pop` function takes a `State` as input and returns a tuple containing the popped `FrameType` and the updated `State`. If the stack is empty, it returns a default value (in this case, `TypeA`), but you can choose any appropriate value.\n\nYou can use this `pop` function in your update logic to handle popping frame types off the stack. For example:\n\n```elm\nupdate : Msg -> State -> State\nupdate msg state =\n    case msg of\n        PopFrame ->\n            let\n                ( poppedFrame, newState ) = pop state\n            in\n            -- Do something with poppedFrame and newState\n```\n\nReplace `Msg` and `PopFrame` with your actual message type and message constructor.\n\nRemember to adapt the code to fit your specific application and use case. If you have more specific requirements or questions, feel free to let me know! (ChatGPT)"
      },
      "date": 1695468069625
    },
    {
      "item": {
        "type": "factory",
        "id": "3e0dec7c3a31ed33"
      },
      "id": "3e0dec7c3a31ed33",
      "type": "add",
      "after": "99ee4a3842cfd506",
      "date": 1695468151445
    },
    {
      "type": "edit",
      "id": "3e0dec7c3a31ed33",
      "item": {
        "type": "reference",
        "id": "3e0dec7c3a31ed33",
        "site": "wiki.ralfbarkow.ch",
        "slug": "background",
        "title": "Background",
        "text": "Void-equivalent forms are background potentia. They can be freely created and deleted. ⇒ [[James Form]]"
      },
      "date": 1695468154310
    },
    {
      "item": {
        "type": "factory",
        "id": "35fd8f4fbe0d5343"
      },
      "id": "35fd8f4fbe0d5343",
      "type": "add",
      "after": "3e0dec7c3a31ed33",
      "date": 1695468187914
    },
    {
      "type": "edit",
      "id": "35fd8f4fbe0d5343",
      "item": {
        "type": "paragraph",
        "id": "35fd8f4fbe0d5343",
        "text": "TypeA seems to be void-equivalent."
      },
      "date": 1695468189506
    },
    {
      "item": {
        "type": "factory",
        "id": "8a14092c492cd1bb"
      },
      "id": "8a14092c492cd1bb",
      "type": "add",
      "after": "35fd8f4fbe0d5343",
      "date": 1695468195584
    },
    {
      "type": "edit",
      "id": "8a14092c492cd1bb",
      "item": {
        "type": "markdown",
        "id": "8a14092c492cd1bb",
        "text": "If `TypeA` is meant to represent a void-equivalent, you can choose to return `Nothing` when the stack is empty. Here's the updated code:\n\n```elm\ntype FrameType\n    = TypeB\n    | TypeC\n\ntype alias State =\n    { stack : List FrameType\n    , isValid : Bool\n    }\n\npop : State -> ( Maybe FrameType, State )\npop state =\n    case state.stack of\n        [] ->\n            ( Nothing, state ) -- Return Nothing when stack is empty\n\n        top :: rest ->\n            ( Just top, { state | stack = rest } )\n```\n\nIn this code, we've removed `TypeA` from the `FrameType` union type. Now, `pop` returns a `Maybe FrameType` where `Nothing` represents an empty stack.\n\nYou can use this `pop` function in your update logic:\n\n```elm\nupdate : Msg -> State -> State\nupdate msg state =\n    case msg of\n        PopFrame ->\n            let\n                ( poppedFrame, newState ) = pop state\n            in\n            case poppedFrame of\n                Just frameType ->\n                    -- Do something with the popped frameType and newState\n\n                Nothing ->\n                    -- Handle case where stack was empty\n```\n\nThis way, you can handle the case where the stack is empty separately from when there is a valid popped frame. Adjust the update logic to fit your specific application. (ChatGPT)"
      },
      "date": 1695468205034
    },
    {
      "type": "edit",
      "id": "99ee4a3842cfd506",
      "item": {
        "type": "markdown",
        "id": "99ee4a3842cfd506",
        "text": "[…] If you're working with a [[Stack]] [[Data Structure]] in [[Elm]] and you need to [[pop]] [[Frame Type]]s off the stack, you can implement a `pop` function in your code. Here's an example of how you might do it:\n\n```elm\ntype FrameType\n    = TypeA\n    | TypeB\n    | TypeC\n\ntype alias State =\n    { stack : List FrameType\n    , isValid : Bool\n    }\n\npop : State -> ( FrameType, State )\npop state =\n    case state.stack of\n        [] ->\n            ( TypeA, state ) -- Default return value when stack is empty (you can choose any value)\n\n        top :: rest ->\n            ( top, { state | stack = rest } )\n```\n\nIn this example, we have a `FrameType` union type representing different types of frames. The `State` type contains a stack of `FrameType` elements and a boolean indicating whether the state is valid.\n\nThe `pop` function takes a `State` as input and returns a tuple containing the popped `FrameType` and the updated `State`. If the stack is empty, it returns a default value (in this case, `TypeA`), but you can choose any appropriate value.\n\nYou can use this `pop` function in your update logic to handle popping frame types off the stack. For example:\n\n```elm\nupdate : Msg -> State -> State\nupdate msg state =\n    case msg of\n        PopFrame ->\n            let\n                ( poppedFrame, newState ) = pop state\n            in\n            -- Do something with poppedFrame and newState\n```\n\nReplace `Msg` and `PopFrame` with your actual message type and message constructor.\n\nRemember to adapt the code to fit your specific application and use case. If you have more specific requirements or questions, feel free to let me know! (ChatGPT)"
      },
      "date": 1695468339211
    },
    {
      "id": "fa2a6ac2624c6fd8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "fa2a6ac2624c6fd8",
        "text": "Now we are going to pop 1 + 2 off of the stack and evaluate it. Now the stack looks like this:"
      },
      "after": "c4d1f42859cf5ad1",
      "attribution": {
        "page": "Try the Interactive Stack"
      },
      "date": 1695468394867
    },
    {
      "type": "remove",
      "id": "c4d1f42859cf5ad1",
      "date": 1695468397025
    },
    {
      "type": "edit",
      "id": "fa2a6ac2624c6fd8",
      "item": {
        "type": "paragraph",
        "id": "fa2a6ac2624c6fd8",
        "text": "We [[pop]] [[Frame Type]]s off of the [[Stack]]."
      },
      "date": 1695468401849
    },
    {
      "type": "edit",
      "id": "fa2a6ac2624c6fd8",
      "item": {
        "type": "paragraph",
        "id": "fa2a6ac2624c6fd8",
        "text": "We [[pop]] [[Frame Type]]s off of the [[Stack]] and evaluate it. "
      },
      "date": 1695468429758
    },
    {
      "item": {
        "type": "factory",
        "id": "1b161f423e82cd01"
      },
      "id": "1b161f423e82cd01",
      "type": "add",
      "after": "8a14092c492cd1bb",
      "date": 1695468597235
    },
    {
      "type": "edit",
      "id": "1b161f423e82cd01",
      "item": {
        "type": "paragraph",
        "id": "1b161f423e82cd01",
        "text": "You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on. "
      },
      "date": 1695468599807
    },
    {
      "item": {
        "type": "factory",
        "id": "bc2bafff6d45b3f7"
      },
      "id": "bc2bafff6d45b3f7",
      "type": "add",
      "after": "1b161f423e82cd01",
      "date": 1695468604916
    },
    {
      "type": "edit",
      "id": "bc2bafff6d45b3f7",
      "item": {
        "type": "markdown",
        "id": "bc2bafff6d45b3f7",
        "text": "If you want to evaluate nested brackets, you can use a recursive approach. Here's an example:\n\n```elm\ntype Bracket\n    = OpenBracket\n    | CloseBracket\n\ntype alias State =\n    { stack : List Bracket\n    , isValid : Bool\n    }\n\npop : State -> ( Maybe Bracket, State )\npop state =\n    case state.stack of\n        [] ->\n            ( Nothing, state )\n\n        top :: rest ->\n            ( Just top, { state | stack = rest } )\n\nevaluateBracket : Bracket -> State -> State\nevaluateBracket bracket state =\n    case bracket of\n        OpenBracket ->\n            state\n\n        CloseBracket ->\n            let\n                ( maybeTop, newState ) = pop state\n            in\n            case maybeTop of\n                Just OpenBracket ->\n                    { newState | isValid = True } -- Matching brackets found\n\n                _ ->\n                    { newState | isValid = False } -- Mismatched brackets\n\nupdate : Msg -> State -> State\nupdate msg state =\n    case msg of\n        ProcessNextBracket ->\n            let\n                ( maybeBracket, newState ) = pop state\n            in\n            case maybeBracket of\n                Just bracket ->\n                    let\n                        updatedState = evaluateBracket bracket newState\n                    in\n                    update ProcessNextBracket updatedState\n\n                Nothing ->\n                    newState -- Stack was empty, no more brackets to process\n```\n\nIn this example, we have a `Bracket` type with `OpenBracket` and `CloseBracket` variants. The `State` record contains a stack of brackets and a boolean flag `isValid`.\n\nThe `pop` function returns a `Maybe Bracket` representing the bracket that was popped off the stack. If the stack is empty, it returns `Nothing`.\n\nThe `evaluateBracket` function takes a bracket and the current state. If it's an `OpenBracket`, we leave the state unchanged. If it's a `CloseBracket`, we pop the top of the stack and check if it matches. If it matches, we set `isValid` to `True`, otherwise, we set it to `False`.\n\nThe `update` function processes the next bracket. If there's a bracket on the stack, it evaluates it and continues processing. If the stack is empty, it means we've processed all brackets. (ChatGPT)"
      },
      "date": 1695468612284
    },
    {
      "type": "edit",
      "id": "1b161f423e82cd01",
      "item": {
        "type": "paragraph",
        "id": "1b161f423e82cd01",
        "text": "**You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on.**"
      },
      "date": 1695468748280
    },
    {
      "type": "edit",
      "id": "1b161f423e82cd01",
      "item": {
        "type": "markdown",
        "id": "1b161f423e82cd01",
        "text": "**You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on.**"
      },
      "date": 1695468749418
    },
    {
      "type": "edit",
      "id": "1b161f423e82cd01",
      "item": {
        "type": "markdown",
        "id": "1b161f423e82cd01",
        "text": "**You first evalute the deepest brackets and then use that value when evaluating the brackets in which it was nested in and so on.** [⇒ [[Try the Interactive Stack]]]"
      },
      "date": 1695468771755
    },
    {
      "item": {
        "type": "factory",
        "id": "8ca32679e627c52e"
      },
      "id": "8ca32679e627c52e",
      "type": "add",
      "after": "bc2bafff6d45b3f7",
      "date": 1695469026350
    },
    {
      "type": "edit",
      "id": "8ca32679e627c52e",
      "item": {
        "type": "paragraph",
        "id": "8ca32679e627c52e",
        "text": "DOM Event "
      },
      "date": 1695469035128
    },
    {
      "type": "edit",
      "id": "8ca32679e627c52e",
      "item": {
        "type": "paragraph",
        "id": "8ca32679e627c52e",
        "text": "DOM Event"
      },
      "date": 1695469485939
    },
    {
      "type": "add",
      "id": "52baf5452e49933e",
      "item": {
        "type": "paragraph",
        "id": "52baf5452e49933e",
        "text": "onClick Types.Pop [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L74-L75 code]"
      },
      "after": "8ca32679e627c52e",
      "date": 1695469499974
    },
    {
      "id": "dc7a206fa8fc342d",
      "type": "add",
      "item": {
        "type": "code",
        "id": "dc7a206fa8fc342d",
        "text": "update : Types.Msg -> Model -> ( Model, Cmd Types.Msg )\nupdate msg model =\n    case msg of\n        Types.Pop ->\n            let\n                returnStack =\n                    Stack.pop model.stack\n            in\n                ( { model | stack = Tuple.second returnStack, popped = Tuple.first returnStack, temp = \"\" }, Cmd.none )\n\n        Types.Push ->\n            let\n                returnStack =\n                    Stack.push model.temp model.stack\n            in\n                ( { model | stack = returnStack, temp = \"\" }, Cmd.none )\n\n        Types.Temp item ->\n            ( { model | temp = item }, Cmd.none )\n"
      },
      "after": "52baf5452e49933e",
      "attribution": {
        "page": "Try the Interactive Stack"
      },
      "date": 1695469514338
    },
    {
      "type": "edit",
      "id": "35fd8f4fbe0d5343",
      "item": {
        "type": "markdown",
        "id": "35fd8f4fbe0d5343",
        "text": "**TypeA seems to be void-equivalent.**"
      },
      "date": 1695469540432
    },
    {
      "type": "edit",
      "id": "35fd8f4fbe0d5343",
      "item": {
        "type": "markdown",
        "id": "35fd8f4fbe0d5343",
        "text": "**TypeA seems to be void-equivalent.**"
      },
      "date": 1695469541781
    },
    {
      "type": "edit",
      "id": "fa2a6ac2624c6fd8",
      "item": {
        "type": "markdown",
        "id": "fa2a6ac2624c6fd8",
        "text": "**We [[pop]] [[Frame Type]]s off of the [[Stack]] and evaluate it.** "
      },
      "date": 1695469564151
    },
    {
      "type": "edit",
      "id": "fa2a6ac2624c6fd8",
      "item": {
        "type": "markdown",
        "id": "fa2a6ac2624c6fd8",
        "text": "**We [[pop]] [[Frame Type]]s off of the [[Stack]] and evaluate it.** "
      },
      "date": 1695469573349
    },
    {
      "type": "edit",
      "id": "52baf5452e49933e",
      "item": {
        "type": "paragraph",
        "id": "52baf5452e49933e",
        "text": "onClick Types.Pop [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L74-L75 code]"
      },
      "date": 1695469654378
    },
    {
      "type": "edit",
      "id": "dc7a206fa8fc342d",
      "item": {
        "type": "code",
        "id": "dc7a206fa8fc342d",
        "text": "update : Types.Msg -> Model -> ( Model, Cmd Types.Msg )\nupdate msg model =\n    case msg of\n        Types.Pop ->\n            let\n                returnStack =\n                    Stack.pop model.stack\n            in\n                ( { model | stack = Tuple.second returnStack, popped = Tuple.first returnStack, temp = \"\" }, Cmd.none )\n\n        Types.Push ->\n            let\n                returnStack =\n                    Stack.push model.temp model.stack\n            in\n                ( { model | stack = returnStack, temp = \"\" }, Cmd.none )\n\n        Types.Temp item ->\n            ( { model | temp = item }, Cmd.none )\n"
      },
      "date": 1695469742223
    },
    {
      "item": {
        "type": "code",
        "id": "a662a1663012513f",
        "text": "update : Types.Msg -> Model -> (Model, Cmd Types.Msg)\nupdate msg model =\n    case msg of\n        Types.Pop ->\n            let\n                (maybeBracket, newState) = pop model.stack\n            in\n                case maybeBracket of\n                    Just bracket ->\n                        ({ model | stack = newState, popped = bracket, temp = \"\" }, Cmd.none)\n\n                    Nothing ->\n                        (model, Cmd.none)\n\n        Types.Push ->\n            let\n                newStack = push model.temp model.stack\n            in\n                ({ model | stack = newStack, temp = \"\" }, Cmd.none)\n\n        Types.Temp item ->\n            ({ model | temp = item }, Cmd.none)\n\npop : Stack -> (Maybe Parenthesis, Stack)\npop stack =\n    -- Implementation of pop function\n    -- It returns a Maybe Parenthesis and the updated Stack\n\npush : Parenthesis -> Stack -> Stack\npush bracket stack =\n    -- Implementation of push function\n    -- It returns the updated Stack\n"
      },
      "id": "a662a1663012513f",
      "type": "add",
      "after": "dc7a206fa8fc342d",
      "date": 1695469819231
    },
    {
      "type": "edit",
      "id": "a662a1663012513f",
      "item": {
        "type": "code",
        "id": "a662a1663012513f",
        "text": "update : Types.Msg -> Model -> (Model, Cmd Types.Msg)\nupdate msg model =\n    case msg of\n        Types.Pop ->\n            let\n                (maybeBracket, newState) = pop model.stack\n            in\n                case maybeBracket of\n                    Just bracket ->\n                        ({ model | stack = newState, popped = bracket, temp = \"\" }, Cmd.none)\n\n                    Nothing ->\n                        (model, Cmd.none)\n\n        Types.Push ->\n            let\n                newStack = push model.temp model.stack\n            in\n                ({ model | stack = newStack, temp = \"\" }, Cmd.none)\n\n        Types.Temp item ->\n            ({ model | temp = item }, Cmd.none)\n\npop : Stack -> (Maybe Parenthesis, Stack)\npop stack =\n    -- Implementation of pop function\n    -- It returns a Maybe Parenthesis and the updated Stack\n\npush : Parenthesis -> Stack -> Stack\npush bracket stack =\n    -- Implementation of push function\n    -- It returns the updated Stack\n"
      },
      "date": 1695469821827
    },
    {
      "item": {
        "type": "paragraph",
        "id": "501c43427b31a888",
        "text": "Compare with the following halluzination:"
      },
      "id": "501c43427b31a888",
      "type": "add",
      "after": "a662a1663012513f",
      "date": 1695469847617
    },
    {
      "id": "501c43427b31a888",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "ae06672486c517cc",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "b0a502e774b996cf",
        "ec63662e92667ba8",
        "98c44ff53c0dc250",
        "8069b949d49a76e6",
        "4be49c99b4af4f47",
        "2cb6ee147ba7b286",
        "undefined",
        "fa2a6ac2624c6fd8",
        "99ee4a3842cfd506",
        "3e0dec7c3a31ed33",
        "35fd8f4fbe0d5343",
        "8a14092c492cd1bb",
        "1b161f423e82cd01",
        "bc2bafff6d45b3f7",
        "8ca32679e627c52e",
        "52baf5452e49933e",
        "dc7a206fa8fc342d",
        "501c43427b31a888",
        "a662a1663012513f"
      ],
      "date": 1695469851612,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "edit",
      "id": "501c43427b31a888",
      "item": {
        "type": "paragraph",
        "id": "501c43427b31a888",
        "text": "Compare with the following halluzination:"
      },
      "date": 1695469865172
    },
    {
      "type": "fork",
      "date": 1695469867605
    },
    {
      "type": "edit",
      "id": "501c43427b31a888",
      "item": {
        "type": "paragraph",
        "id": "501c43427b31a888",
        "text": "Compare with the following hallucination:"
      },
      "date": 1695469919187
    },
    {
      "type": "edit",
      "id": "8ca32679e627c52e",
      "item": {
        "type": "markdown",
        "id": "8ca32679e627c52e",
        "text": "# DOM Event [⇐ [[The Elm Architecture]]]"
      },
      "date": 1695470078645
    },
    {
      "type": "edit",
      "id": "52baf5452e49933e",
      "item": {
        "type": "paragraph",
        "id": "52baf5452e49933e",
        "text": "onClick Types.Pop [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L74-L75 code] [⇒ [[Elm Stack]] ⇒ [[Try the Interactive Stack]]]"
      },
      "date": 1695470106965
    },
    {
      "type": "edit",
      "id": "52baf5452e49933e",
      "item": {
        "type": "paragraph",
        "id": "52baf5452e49933e",
        "text": "onClick Types.Pop [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L74-L75 code] [⇒ [[Elm Stack]] ⇒ [[Try the Interactive Stack]]]"
      },
      "date": 1695470122294
    },
    {
      "type": "edit",
      "id": "52baf5452e49933e",
      "item": {
        "type": "paragraph",
        "id": "52baf5452e49933e",
        "text": "onClick Types.Pop [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L74-L75 code] [⇒ [[Elm Stack]] ⇒ [[Try the Interactive Stack]]]"
      },
      "date": 1695470145592
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a59d46da53b84aa8",
        "text": "Elm Cheat Sheet [https://lucamug.medium.com/elm-cheat-sheet-5fddcd7ee4f post], [https://lucamug.github.io/elm-cheat-sheet/ page], [https://lucamug.github.io/elm-cheat-sheet/elm-cheat-sheet.color.pdf pdf]"
      },
      "id": "a59d46da53b84aa8",
      "type": "add",
      "after": "a662a1663012513f",
      "date": 1695470278622
    },
    {
      "type": "edit",
      "id": "a59d46da53b84aa8",
      "item": {
        "type": "paragraph",
        "id": "a59d46da53b84aa8",
        "text": "Elm Cheat Sheet [https://lucamug.medium.com/elm-cheat-sheet-5fddcd7ee4f post], [https://lucamug.github.io/elm-cheat-sheet/ page], [https://lucamug.github.io/elm-cheat-sheet/elm-cheat-sheet.color.pdf pdf]"
      },
      "date": 1695470281710
    },
    {
      "type": "edit",
      "id": "a59d46da53b84aa8",
      "item": {
        "type": "paragraph",
        "id": "a59d46da53b84aa8",
        "text": "Elm Cheat Sheet [https://lucamug.medium.com/elm-cheat-sheet-5fddcd7ee4f post], [https://lucamug.github.io/elm-cheat-sheet/ page], [https://lucamug.github.io/elm-cheat-sheet/elm-cheat-sheet.color.pdf pdf]"
      },
      "date": 1695470292634
    },
    {
      "type": "edit",
      "id": "a59d46da53b84aa8",
      "item": {
        "type": "paragraph",
        "id": "a59d46da53b84aa8",
        "text": "Elm Cheat Sheet [https://lucamug.medium.com/elm-cheat-sheet-5fddcd7ee4f post], [https://lucamug.github.io/elm-cheat-sheet/ page], [https://lucamug.github.io/elm-cheat-sheet/elm-cheat-sheet.color.pdf pdf]"
      },
      "date": 1695470309005
    },
    {
      "type": "edit",
      "id": "a59d46da53b84aa8",
      "item": {
        "type": "paragraph",
        "id": "a59d46da53b84aa8",
        "text": "Elm Cheat Sheet [https://lucamug.medium.com/elm-cheat-sheet-5fddcd7ee4f post], [https://lucamug.github.io/elm-cheat-sheet/ page], [https://lucamug.github.io/elm-cheat-sheet/elm-cheat-sheet.color.pdf pdf]"
      },
      "date": 1695470310818
    },
    {
      "type": "edit",
      "id": "a59d46da53b84aa8",
      "item": {
        "type": "paragraph",
        "id": "a59d46da53b84aa8",
        "text": "Elm Cheat Sheet [https://lucamug.medium.com/elm-cheat-sheet-5fddcd7ee4f post], [https://lucamug.github.io/elm-cheat-sheet/ page], [https://lucamug.github.io/elm-cheat-sheet/elm-cheat-sheet.color.pdf pdf]"
      },
      "date": 1695470325905
    },
    {
      "type": "add",
      "id": "657b03b0e41512f7",
      "item": {
        "type": "paragraph",
        "id": "657b03b0e41512f7",
        "text": "onClick Types.Push [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L66-L67 code], [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L116-L122 code]"
      },
      "after": "8ca32679e627c52e",
      "date": 1695470797014
    },
    {
      "type": "edit",
      "id": "657b03b0e41512f7",
      "item": {
        "type": "paragraph",
        "id": "657b03b0e41512f7",
        "text": "onClick Types.Push [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L66-L67 code], [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L116-L122 code]"
      },
      "date": 1695470827622
    },
    {
      "type": "edit",
      "id": "657b03b0e41512f7",
      "item": {
        "type": "paragraph",
        "id": "657b03b0e41512f7",
        "text": "onClick Types.Push [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L66-L67 code], [https://github.com/mhoare/elm-stack-demo/blob/6bf4c64f7df86acecba704ad1fdffba7cd6fa3df/src/App.elm#L116-L122 code]"
      },
      "date": 1695470843591
    },
    {
      "type": "edit",
      "id": "8ca32679e627c52e",
      "item": {
        "type": "markdown",
        "id": "8ca32679e627c52e",
        "text": "# DOM Event [⇐ [[The Elm Architecture]]]"
      },
      "date": 1695470897293
    },
    {
      "type": "edit",
      "id": "8ca32679e627c52e",
      "item": {
        "type": "markdown",
        "id": "8ca32679e627c52e",
        "text": "# DOM Event [⇐ [[The Elm Architecture]]]"
      },
      "date": 1695470899107
    },
    {
      "type": "add",
      "id": "46bb56bfc4b33761",
      "item": {
        "type": "paragraph",
        "id": "46bb56bfc4b33761",
        "text": "Note: Effects Msg"
      },
      "after": "52baf5452e49933e",
      "date": 1695470958606
    },
    {
      "item": {
        "type": "pagefold",
        "id": "5596793e9b3c58d4",
        "text": "~"
      },
      "id": "5596793e9b3c58d4",
      "type": "add",
      "after": "a59d46da53b84aa8",
      "date": 1695471086951
    },
    {
      "type": "edit",
      "id": "5596793e9b3c58d4",
      "item": {
        "type": "pagefold",
        "id": "5596793e9b3c58d4",
        "text": "~"
      },
      "date": 1695471091831
    },
    {
      "id": "5596793e9b3c58d4",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "ae06672486c517cc",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "b0a502e774b996cf",
        "ec63662e92667ba8",
        "98c44ff53c0dc250",
        "8069b949d49a76e6",
        "4be49c99b4af4f47",
        "2cb6ee147ba7b286",
        "undefined",
        "fa2a6ac2624c6fd8",
        "99ee4a3842cfd506",
        "3e0dec7c3a31ed33",
        "35fd8f4fbe0d5343",
        "8a14092c492cd1bb",
        "1b161f423e82cd01",
        "bc2bafff6d45b3f7",
        "8ca32679e627c52e",
        "657b03b0e41512f7",
        "52baf5452e49933e",
        "46bb56bfc4b33761",
        "dc7a206fa8fc342d",
        "501c43427b31a888",
        "a662a1663012513f",
        "5596793e9b3c58d4",
        "a59d46da53b84aa8"
      ],
      "date": 1695471093662,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "item": {
        "type": "paragraph",
        "id": "b46cef5ff829ec58",
        "text": "document vs windows"
      },
      "id": "b46cef5ff829ec58",
      "type": "add",
      "after": "a59d46da53b84aa8",
      "date": 1695471095899
    },
    {
      "type": "edit",
      "id": "b46cef5ff829ec58",
      "item": {
        "type": "paragraph",
        "id": "b46cef5ff829ec58",
        "text": "document vs windows"
      },
      "date": 1695471098996
    },
    {
      "type": "fork",
      "date": 1695471101633
    },
    {
      "id": "b46cef5ff829ec58",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "ae06672486c517cc",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "b0a502e774b996cf",
        "ec63662e92667ba8",
        "98c44ff53c0dc250",
        "8069b949d49a76e6",
        "4be49c99b4af4f47",
        "2cb6ee147ba7b286",
        "undefined",
        "fa2a6ac2624c6fd8",
        "99ee4a3842cfd506",
        "3e0dec7c3a31ed33",
        "35fd8f4fbe0d5343",
        "8a14092c492cd1bb",
        "1b161f423e82cd01",
        "bc2bafff6d45b3f7",
        "8ca32679e627c52e",
        "657b03b0e41512f7",
        "52baf5452e49933e",
        "46bb56bfc4b33761",
        "dc7a206fa8fc342d",
        "501c43427b31a888",
        "a662a1663012513f",
        "b46cef5ff829ec58",
        "5596793e9b3c58d4",
        "a59d46da53b84aa8"
      ],
      "date": 1695471122913,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1695471132707
    },
    {
      "type": "edit",
      "id": "b46cef5ff829ec58",
      "item": {
        "type": "markdown",
        "id": "b46cef5ff829ec58",
        "text": "# document vs windows (again)"
      },
      "date": 1695471153651
    },
    {
      "type": "edit",
      "id": "b46cef5ff829ec58",
      "item": {
        "type": "markdown",
        "id": "b46cef5ff829ec58",
        "text": "# document vs windows (again)"
      },
      "date": 1695471164684
    },
    {
      "type": "add",
      "id": "16f3e75037e7f40f",
      "item": {
        "type": "paragraph",
        "id": "16f3e75037e7f40f",
        "text": "http://blog.dreyeck.ch/view/welcome-visitors ⇒ Inspect ⇒ Watch expressions"
      },
      "after": "b46cef5ff829ec58",
      "date": 1695471168587
    },
    {
      "type": "edit",
      "id": "b46cef5ff829ec58",
      "item": {
        "type": "markdown",
        "id": "b46cef5ff829ec58",
        "text": "# document vs window (again)"
      },
      "date": 1695471170721
    },
    {
      "type": "edit",
      "id": "b46cef5ff829ec58",
      "item": {
        "type": "markdown",
        "id": "b46cef5ff829ec58",
        "text": "# document vs window (again)"
      },
      "date": 1695471181832
    },
    {
      "type": "edit",
      "id": "46bb56bfc4b33761",
      "item": {
        "type": "paragraph",
        "id": "46bb56bfc4b33761",
        "text": "Note: Effects Msg, see section \"document vs window (again) below."
      },
      "date": 1695471228742
    },
    {
      "type": "edit",
      "id": "16f3e75037e7f40f",
      "item": {
        "type": "paragraph",
        "id": "16f3e75037e7f40f",
        "text": "http://blog.dreyeck.ch/view/welcome-visitors ⇒ Inspect ⇒ Watch expressions"
      },
      "date": 1695471275633
    },
    {
      "type": "add",
      "id": "df184ab71514e6bf",
      "item": {
        "type": "paragraph",
        "id": "df184ab71514e6bf",
        "text": "document: HTMLDocument …"
      },
      "after": "16f3e75037e7f40f",
      "date": 1695471291401
    },
    {
      "type": "add",
      "id": "ca1c5e837c2c387b",
      "item": {
        "type": "paragraph",
        "id": "ca1c5e837c2c387b",
        "text": "window: Window > Elm: {…} > Main: {…}"
      },
      "after": "df184ab71514e6bf",
      "date": 1695471347702
    },
    {
      "item": {
        "type": "paragraph",
        "id": "22194b89763aca59",
        "text": ""
      },
      "id": "22194b89763aca59",
      "type": "add",
      "after": "a59d46da53b84aa8",
      "date": 1695471354672
    },
    {
      "id": "22194b89763aca59",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "ae06672486c517cc",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "b0a502e774b996cf",
        "ec63662e92667ba8",
        "98c44ff53c0dc250",
        "8069b949d49a76e6",
        "4be49c99b4af4f47",
        "2cb6ee147ba7b286",
        "undefined",
        "fa2a6ac2624c6fd8",
        "99ee4a3842cfd506",
        "3e0dec7c3a31ed33",
        "35fd8f4fbe0d5343",
        "8a14092c492cd1bb",
        "1b161f423e82cd01",
        "bc2bafff6d45b3f7",
        "8ca32679e627c52e",
        "657b03b0e41512f7",
        "52baf5452e49933e",
        "46bb56bfc4b33761",
        "dc7a206fa8fc342d",
        "501c43427b31a888",
        "a662a1663012513f",
        "b46cef5ff829ec58",
        "16f3e75037e7f40f",
        "df184ab71514e6bf",
        "ca1c5e837c2c387b",
        "22194b89763aca59",
        "5596793e9b3c58d4",
        "a59d46da53b84aa8"
      ],
      "date": 1695471357308,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "edit",
      "id": "22194b89763aca59",
      "item": {
        "type": "paragraph",
        "id": "22194b89763aca59",
        "text": ""
      },
      "date": 1695471365531
    },
    {
      "type": "fork",
      "date": 1695471367575
    },
    {
      "item": {
        "type": "code",
        "id": "a02a13064be6b0a6",
        "text": "view :\n    App Data ActionData RouteParams\n    -> Shared.Model\n    -> Model\n    -> View (PagesMsg Msg)\nview app shared model =\n    { title = \"View.Slug_.SPLAT__\"\n    , body =\n        [ Html.h2 [] [ Html.text app.data.title ]\n        , Html.div [] (List.map Wiki.renderStory app.data.story)\n        ]\n    }\n"
      },
      "id": "a02a13064be6b0a6",
      "type": "add",
      "after": "a59d46da53b84aa8",
      "date": 1695471370427
    },
    {
      "id": "a02a13064be6b0a6",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "ae06672486c517cc",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "b0a502e774b996cf",
        "ec63662e92667ba8",
        "98c44ff53c0dc250",
        "8069b949d49a76e6",
        "4be49c99b4af4f47",
        "2cb6ee147ba7b286",
        "undefined",
        "fa2a6ac2624c6fd8",
        "99ee4a3842cfd506",
        "3e0dec7c3a31ed33",
        "35fd8f4fbe0d5343",
        "8a14092c492cd1bb",
        "1b161f423e82cd01",
        "bc2bafff6d45b3f7",
        "8ca32679e627c52e",
        "657b03b0e41512f7",
        "52baf5452e49933e",
        "46bb56bfc4b33761",
        "dc7a206fa8fc342d",
        "501c43427b31a888",
        "a662a1663012513f",
        "b46cef5ff829ec58",
        "16f3e75037e7f40f",
        "df184ab71514e6bf",
        "ca1c5e837c2c387b",
        "22194b89763aca59",
        "a02a13064be6b0a6",
        "5596793e9b3c58d4",
        "a59d46da53b84aa8"
      ],
      "date": 1695471372047,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "remove",
      "id": "22194b89763aca59",
      "date": 1695471380090
    },
    {
      "type": "edit",
      "id": "a02a13064be6b0a6",
      "item": {
        "type": "code",
        "id": "a02a13064be6b0a6",
        "text": "view :\n    App Data ActionData RouteParams\n    -> Shared.Model\n    -> Model\n    -> View (PagesMsg Msg)\nview app shared model =\n    { title = \"View.Slug_.SPLAT__\"\n    , body =\n        [ Html.h2 [] [ Html.text app.data.title ]\n        , Html.div [] (List.map Wiki.renderStory app.data.story)\n        ]\n    }\n"
      },
      "date": 1695471380962
    },
    {
      "type": "fork",
      "date": 1695471382903
    },
    {
      "type": "add",
      "id": "4e43cc1b72197c1a",
      "item": {
        "type": "paragraph",
        "id": "4e43cc1b72197c1a",
        "text": "Journal.Msg ?"
      },
      "after": "ca1c5e837c2c387b",
      "date": 1695471453060
    },
    {
      "id": "4e43cc1b72197c1a",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "ae06672486c517cc",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "b0a502e774b996cf",
        "ec63662e92667ba8",
        "98c44ff53c0dc250",
        "8069b949d49a76e6",
        "4be49c99b4af4f47",
        "2cb6ee147ba7b286",
        "undefined",
        "fa2a6ac2624c6fd8",
        "99ee4a3842cfd506",
        "3e0dec7c3a31ed33",
        "35fd8f4fbe0d5343",
        "8a14092c492cd1bb",
        "1b161f423e82cd01",
        "bc2bafff6d45b3f7",
        "8ca32679e627c52e",
        "657b03b0e41512f7",
        "52baf5452e49933e",
        "46bb56bfc4b33761",
        "dc7a206fa8fc342d",
        "501c43427b31a888",
        "a662a1663012513f",
        "b46cef5ff829ec58",
        "16f3e75037e7f40f",
        "df184ab71514e6bf",
        "ca1c5e837c2c387b",
        "a02a13064be6b0a6",
        "4e43cc1b72197c1a",
        "5596793e9b3c58d4",
        "a59d46da53b84aa8"
      ],
      "date": 1695471455737,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "edit",
      "id": "4e43cc1b72197c1a",
      "item": {
        "type": "paragraph",
        "id": "4e43cc1b72197c1a",
        "text": "Journal.Msg ?"
      },
      "date": 1695471478423
    },
    {
      "type": "fork",
      "date": 1695471479978
    },
    {
      "type": "edit",
      "id": "4e43cc1b72197c1a",
      "item": {
        "type": "paragraph",
        "id": "4e43cc1b72197c1a",
        "text": "Note: renderStory [https://github.com/dreyeck/blog/blob/61baff126d0000f6b7d868838f5f1d1d646a8262/elm-pages-starter-express/src/Wiki.elm#L60-L100 code]"
      },
      "date": 1695471518162
    },
    {
      "type": "add",
      "id": "2ab6942544d489c1",
      "item": {
        "type": "paragraph",
        "id": "2ab6942544d489c1",
        "text": "journal 0 type create … journal 204 type edit"
      },
      "after": "4e43cc1b72197c1a",
      "date": 1695471719610
    },
    {
      "type": "edit",
      "id": "2ab6942544d489c1",
      "item": {
        "type": "paragraph",
        "id": "2ab6942544d489c1",
        "text": "journal 0 type create … journal 204 type edit"
      },
      "date": 1695471820223
    },
    {
      "type": "add",
      "id": "03a04cffc421e180",
      "item": {
        "type": "paragraph",
        "id": "03a04cffc421e180",
        "text": "Note: journal 201 type move error type response: \"Server Ignoring move. Try reload.\""
      },
      "after": "2ab6942544d489c1",
      "date": 1695471870018
    },
    {
      "type": "edit",
      "id": "4e43cc1b72197c1a",
      "item": {
        "type": "paragraph",
        "id": "4e43cc1b72197c1a",
        "text": "Note: renderStory [https://github.com/dreyeck/blog/blob/61baff126d0000f6b7d868838f5f1d1d646a8262/elm-pages-starter-express/src/Wiki.elm#L60-L100 code]"
      },
      "date": 1695471962136
    },
    {
      "type": "add",
      "id": "0fca9450de36893a",
      "item": {
        "type": "paragraph",
        "id": "0fca9450de36893a",
        "text": "Journal.Msg ? – Journal as Stack ?"
      },
      "after": "4e43cc1b72197c1a",
      "date": 1695471963516
    },
    {
      "type": "edit",
      "id": "4e43cc1b72197c1a",
      "item": {
        "type": "paragraph",
        "id": "4e43cc1b72197c1a",
        "text": "Note: renderStory [https://github.com/dreyeck/blog/blob/61baff126d0000f6b7d868838f5f1d1d646a8262/elm-pages-starter-express/src/Wiki.elm#L60-L100 code]"
      },
      "date": 1695471975825
    },
    {
      "item": {
        "type": "code",
        "id": "3b73be2cb80bdc87",
        "text": "                        renderedText =\n                            paragraph.text\n                                |> parse"
      },
      "id": "3b73be2cb80bdc87",
      "type": "add",
      "after": "a59d46da53b84aa8",
      "date": 1695472021876
    },
    {
      "type": "edit",
      "id": "3b73be2cb80bdc87",
      "item": {
        "type": "code",
        "id": "3b73be2cb80bdc87",
        "text": "                        renderedText =\n                            paragraph.text\n                                |> parse"
      },
      "date": 1695472024114
    },
    {
      "id": "3b73be2cb80bdc87",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "ae06672486c517cc",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "b0a502e774b996cf",
        "ec63662e92667ba8",
        "98c44ff53c0dc250",
        "8069b949d49a76e6",
        "4be49c99b4af4f47",
        "2cb6ee147ba7b286",
        "undefined",
        "fa2a6ac2624c6fd8",
        "99ee4a3842cfd506",
        "3e0dec7c3a31ed33",
        "35fd8f4fbe0d5343",
        "8a14092c492cd1bb",
        "1b161f423e82cd01",
        "bc2bafff6d45b3f7",
        "8ca32679e627c52e",
        "657b03b0e41512f7",
        "52baf5452e49933e",
        "46bb56bfc4b33761",
        "dc7a206fa8fc342d",
        "501c43427b31a888",
        "a662a1663012513f",
        "b46cef5ff829ec58",
        "16f3e75037e7f40f",
        "df184ab71514e6bf",
        "ca1c5e837c2c387b",
        "a02a13064be6b0a6",
        "4e43cc1b72197c1a",
        "3b73be2cb80bdc87",
        "0fca9450de36893a",
        "2ab6942544d489c1",
        "03a04cffc421e180",
        "5596793e9b3c58d4",
        "a59d46da53b84aa8"
      ],
      "date": 1695472028853,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1695472034848
    },
    {
      "type": "edit",
      "id": "0fca9450de36893a",
      "item": {
        "type": "markdown",
        "id": "0fca9450de36893a",
        "text": "**parse paragraph.text and then render the [[ ]] wiki link as HTML anchor**"
      },
      "date": 1695472077306
    },
    {
      "type": "add",
      "id": "adeeb4e3703e1545",
      "item": {
        "type": "paragraph",
        "id": "adeeb4e3703e1545",
        "text": "Journal.Msg ? – Journal as Stack ?"
      },
      "after": "0fca9450de36893a",
      "date": 1695472077806
    },
    {
      "type": "edit",
      "id": "0fca9450de36893a",
      "item": {
        "type": "markdown",
        "id": "0fca9450de36893a",
        "text": "**parse paragraph.text and then render the [[ ]] wiki link as HTML anchor**"
      },
      "date": 1695472168621
    },
    {
      "type": "add",
      "id": "bc658f3eea220ec0",
      "item": {
        "type": "paragraph",
        "id": "bc658f3eea220ec0",
        "text": "[…]     -> View (PagesMsg Msg)"
      },
      "after": "0fca9450de36893a",
      "date": 1695472170920
    },
    {
      "type": "edit",
      "id": "0fca9450de36893a",
      "item": {
        "type": "markdown",
        "id": "0fca9450de36893a",
        "text": "**parse paragraph.text and then render the [[ ]] wiki link as HTML anchor**"
      },
      "date": 1695472206950
    },
    {
      "type": "edit",
      "id": "0fca9450de36893a",
      "item": {
        "type": "markdown",
        "id": "0fca9450de36893a",
        "text": "**parse paragraph.text and then render the [[ ]] wiki link as HTML anchor**"
      },
      "date": 1695472266773
    },
    {
      "type": "edit",
      "id": "0fca9450de36893a",
      "item": {
        "type": "markdown",
        "id": "0fca9450de36893a",
        "text": "**parse paragraph.text and then render the [[ ]] wiki link as HTML anchor**"
      },
      "date": 1695472268932
    },
    {
      "item": {
        "type": "markdown",
        "id": "0005cd26938747d0",
        "text": "To achieve this in Elm, you can first define a parser function to identify and extract the wiki links from a text. Then, you can render them as HTML anchors in your view function. Here's an example implementation:\n\n1. Define Types:\n\n```elm\ntype Msg\n    = NoOp\n\ntype alias Model =\n    { text : String\n    , links : List String\n    }\n\ninit : Model\ninit =\n    { text = \"Your initial text with [[wiki links]] here.\"\n    , links = []\n    }\n```\n\n2. Parse Function:\n\n```elm\nparseLinks : String -> List String\nparseLinks text =\n    let\n        prefix = \"[[\"\n        suffix = \"]]\"\n        findLinks = String.split prefix >> List.tail >> List.map (String.split suffix >> List.head)\n    in\n    text\n        |> findLinks\n        |> List.filterMap identity\n```\n\n3. Update Function (if necessary):\n\n```elm\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n    case msg of\n        NoOp ->\n            (model, Cmd.none)\n```\n\n4. View Function:\n\n```elm\nview : Model -> Html Msg\nview model =\n    div []\n        [ text \"Parsed Text: \"\n        , ul []\n            (List.map (\\link -> li [Html.Attributes.class \"wiki-link\"] [text link]) model.links)\n        ]\n```\n\n5. Main Program:\n\n```elm\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = init\n        , view = view\n        , update = update\n        }\n```\n\nIn this example, the `parseLinks` function looks for substrings enclosed in `[[` and `]]`, extracting them as wiki links. The `update` function is a placeholder that doesn't perform any specific actions for this example. Finally, the `view` function renders the parsed links as an unordered list.\n\nRemember to adjust the code according to your specific needs and integrate it into your Elm application."
      },
      "id": "0005cd26938747d0",
      "type": "add",
      "after": "a59d46da53b84aa8",
      "date": 1695472278705
    },
    {
      "type": "edit",
      "id": "0005cd26938747d0",
      "item": {
        "type": "markdown",
        "id": "0005cd26938747d0",
        "text": "To achieve this in Elm, you can first define a parser function to identify and extract the wiki links from a text. Then, you can render them as HTML anchors in your view function. Here's an example implementation:\n\n1. Define Types:\n\n```elm\ntype Msg\n    = NoOp\n\ntype alias Model =\n    { text : String\n    , links : List String\n    }\n\ninit : Model\ninit =\n    { text = \"Your initial text with [[wiki links]] here.\"\n    , links = []\n    }\n```\n\n2. Parse Function:\n\n```elm\nparseLinks : String -> List String\nparseLinks text =\n    let\n        prefix = \"[[\"\n        suffix = \"]]\"\n        findLinks = String.split prefix >> List.tail >> List.map (String.split suffix >> List.head)\n    in\n    text\n        |> findLinks\n        |> List.filterMap identity\n```\n\n3. Update Function (if necessary):\n\n```elm\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n    case msg of\n        NoOp ->\n            (model, Cmd.none)\n```\n\n4. View Function:\n\n```elm\nview : Model -> Html Msg\nview model =\n    div []\n        [ text \"Parsed Text: \"\n        , ul []\n            (List.map (\\link -> li [Html.Attributes.class \"wiki-link\"] [text link]) model.links)\n        ]\n```\n\n5. Main Program:\n\n```elm\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = init\n        , view = view\n        , update = update\n        }\n```\n\nIn this example, the `parseLinks` function looks for substrings enclosed in `[[` and `]]`, extracting them as wiki links. The `update` function is a placeholder that doesn't perform any specific actions for this example. Finally, the `view` function renders the parsed links as an unordered list.\n\nRemember to adjust the code according to your specific needs and integrate it into your Elm application."
      },
      "date": 1695472281458
    },
    {
      "id": "0005cd26938747d0",
      "type": "move",
      "order": [
        "34fdef5ae95779ec",
        "a0504d5b711ef85d",
        "201caed4142f4ea8",
        "b4f4dcdfbc5e0952",
        "59beba824ce17794",
        "bf2ef73faf091d83",
        "e6c2837c252c429c",
        "cc271b361ea6ff83",
        "5896178884f7e97c",
        "6e4c8541197401e9",
        "f4dc65d82d77927b",
        "83068d7175c8a073",
        "fa089aaefda7bd01",
        "b9e0e585a844d6be",
        "2ac625e5e53b59d4",
        "ae06672486c517cc",
        "c9d7f5d7ddaafaa6",
        "dea16c60d77c21b4",
        "2dd154489cb9dcd1",
        "9969018b5acd9481",
        "b0a502e774b996cf",
        "ec63662e92667ba8",
        "98c44ff53c0dc250",
        "8069b949d49a76e6",
        "4be49c99b4af4f47",
        "2cb6ee147ba7b286",
        "undefined",
        "fa2a6ac2624c6fd8",
        "99ee4a3842cfd506",
        "3e0dec7c3a31ed33",
        "35fd8f4fbe0d5343",
        "8a14092c492cd1bb",
        "1b161f423e82cd01",
        "bc2bafff6d45b3f7",
        "8ca32679e627c52e",
        "657b03b0e41512f7",
        "52baf5452e49933e",
        "46bb56bfc4b33761",
        "dc7a206fa8fc342d",
        "501c43427b31a888",
        "a662a1663012513f",
        "b46cef5ff829ec58",
        "16f3e75037e7f40f",
        "df184ab71514e6bf",
        "ca1c5e837c2c387b",
        "a02a13064be6b0a6",
        "4e43cc1b72197c1a",
        "3b73be2cb80bdc87",
        "0fca9450de36893a",
        "0005cd26938747d0",
        "bc658f3eea220ec0",
        "adeeb4e3703e1545",
        "2ab6942544d489c1",
        "03a04cffc421e180",
        "5596793e9b3c58d4",
        "a59d46da53b84aa8"
      ],
      "date": 1695472285009,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1695472290149
    },
    {
      "type": "edit",
      "id": "0005cd26938747d0",
      "item": {
        "type": "markdown",
        "id": "0005cd26938747d0",
        "text": "To achieve this in [[Elm], you can first define a parser function to identify and extract the wiki links from a text. Then, you can render them as HTML anchors in your view function. Here's an example implementation:\n\n1. Define Types:\n\n```elm\ntype Msg\n    = NoOp\n\ntype alias Model =\n    { text : String\n    , links : List String\n    }\n\ninit : Model\ninit =\n    { text = \"Your initial text with [[wiki links]] here.\"\n    , links = []\n    }\n```\n\n2. Parse Function:\n\n```elm\nparseLinks : String -> List String\nparseLinks text =\n    let\n        prefix = \"[[\"\n        suffix = \"]]\"\n        findLinks = String.split prefix >> List.tail >> List.map (String.split suffix >> List.head)\n    in\n    text\n        |> findLinks\n        |> List.filterMap identity\n```\n\n3. Update Function (if necessary):\n\n```elm\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n    case msg of\n        NoOp ->\n            (model, Cmd.none)\n```\n\n4. View Function:\n\n```elm\nview : Model -> Html Msg\nview model =\n    div []\n        [ text \"Parsed Text: \"\n        , ul []\n            (List.map (\\link -> li [Html.Attributes.class \"wiki-link\"] [text link]) model.links)\n        ]\n```\n\n5. Main Program:\n\n```elm\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = init\n        , view = view\n        , update = update\n        }\n```\n\nIn this example, the `parseLinks` function looks for substrings enclosed in `[[` and `]]`, extracting them as wiki links. The `update` function is a placeholder that doesn't perform any specific actions for this example. Finally, the `view` function renders the parsed links as an unordered list.\n\nRemember to adjust the code according to your specific needs and integrate it into your Elm application. (ChatGPT)"
      },
      "date": 1695472316663
    },
    {
      "type": "edit",
      "id": "0005cd26938747d0",
      "item": {
        "type": "markdown",
        "id": "0005cd26938747d0",
        "text": "To achieve this in [[Elm]], you can first define a parser function to identify and extract the wiki links from a text. Then, you can render them as HTML anchors in your view function. Here's an example implementation:\n\n1. Define Types:\n\n```elm\ntype Msg\n    = NoOp\n\ntype alias Model =\n    { text : String\n    , links : List String\n    }\n\ninit : Model\ninit =\n    { text = \"Your initial text with [[wiki links]] here.\"\n    , links = []\n    }\n```\n\n2. Parse Function:\n\n```elm\nparseLinks : String -> List String\nparseLinks text =\n    let\n        prefix = \"[[\"\n        suffix = \"]]\"\n        findLinks = String.split prefix >> List.tail >> List.map (String.split suffix >> List.head)\n    in\n    text\n        |> findLinks\n        |> List.filterMap identity\n```\n\n3. Update Function (if necessary):\n\n```elm\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n    case msg of\n        NoOp ->\n            (model, Cmd.none)\n```\n\n4. View Function:\n\n```elm\nview : Model -> Html Msg\nview model =\n    div []\n        [ text \"Parsed Text: \"\n        , ul []\n            (List.map (\\link -> li [Html.Attributes.class \"wiki-link\"] [text link]) model.links)\n        ]\n```\n\n5. Main Program:\n\n```elm\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = init\n        , view = view\n        , update = update\n        }\n```\n\nIn this example, the `parseLinks` function looks for substrings enclosed in `[[` and `]]`, extracting them as wiki links. The `update` function is a placeholder that doesn't perform any specific actions for this example. Finally, the `view` function renders the parsed links as an unordered list.\n\nRemember to adjust the code according to your specific needs and integrate it into your Elm application. (ChatGPT)"
      },
      "date": 1695472334641
    },
    {
      "type": "edit",
      "id": "0005cd26938747d0",
      "item": {
        "type": "markdown",
        "id": "0005cd26938747d0",
        "text": "To achieve this in [[Elm]], you can first define a parser function to identify and extract the wiki links from a text. Then, you can render them as HTML anchors in your view function. Here's an example implementation:\n\n1. Define Types:\n\n```elm\ntype Msg\n    = NoOp\n\ntype alias Model =\n    { text : String\n    , links : List String\n    }\n\ninit : Model\ninit =\n    { text = \"Your initial text with [[wiki links]] here.\"\n    , links = []\n    }\n```\n\n2. Parse Function:\n\n```elm\nparseLinks : String -> List String\nparseLinks text =\n    let\n        prefix = \"[[\"\n        suffix = \"]]\"\n        findLinks = String.split prefix >> List.tail >> List.map (String.split suffix >> List.head)\n    in\n    text\n        |> findLinks\n        |> List.filterMap identity\n```\n\n3. Update Function (if necessary):\n\n```elm\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n    case msg of\n        NoOp ->\n            (model, Cmd.none)\n```\n\n4. View Function:\n\n```elm\nview : Model -> Html Msg\nview model =\n    div []\n        [ text \"Parsed Text: \"\n        , ul []\n            (List.map (\\link -> li [Html.Attributes.class \"wiki-link\"] [text link]) model.links)\n        ]\n```\n\n5. Main Program:\n\n```elm\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = init\n        , view = view\n        , update = update\n        }\n```\n\nIn this example, the `parseLinks` function looks for substrings enclosed in `[[` \n\nand `]]`, extracting them as wiki links. The `update` function is a placeholder that doesn't perform any specific actions for this example. Finally, the `view` function renders the parsed links as an unordered list.\n\nRemember to adjust the code according to your specific needs and integrate it into your Elm application. (ChatGPT)"
      },
      "date": 1695472402795
    },
    {
      "type": "edit",
      "id": "0005cd26938747d0",
      "item": {
        "type": "markdown",
        "id": "0005cd26938747d0",
        "text": "To achieve this in [[Elm]], you can first define a parser function to identify and extract the wiki links from a text. Then, you can render them as HTML anchors in your view function. Here's an example implementation:\n\n1. Define Types:\n\n```elm\ntype Msg\n    = NoOp\n\ntype alias Model =\n    { text : String\n    , links : List String\n    }\n\ninit : Model\ninit =\n    { text = \"Your initial text with [[wiki links]] here.\"\n    , links = []\n    }\n```\n\n2. Parse Function:\n\n```elm\nparseLinks : String -> List String\nparseLinks text =\n    let\n        prefix = \"[[\"\n        suffix = \"]]\"\n        findLinks = String.split prefix >> List.tail >> List.map (String.split suffix >> List.head)\n    in\n    text\n        |> findLinks\n        |> List.filterMap identity\n```\n\n3. Update Function (if necessary):\n\n```elm\nupdate : Msg -> Model -> (Model, Cmd Msg)\nupdate msg model =\n    case msg of\n        NoOp ->\n            (model, Cmd.none)\n```\n\n4. View Function:\n\n```elm\nview : Model -> Html Msg\nview model =\n    div []\n        [ text \"Parsed Text: \"\n        , ul []\n            (List.map (\\link -> li [Html.Attributes.class \"wiki-link\"] [text link]) model.links)\n        ]\n```\n\n5. Main Program:\n\n```elm\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = init\n        , view = view\n        , update = update\n        }\n```\n\nIn this example, the `parseLinks` function looks for substrings enclosed in `[[`"
      },
      "date": 1695472414944
    },
    {
      "type": "add",
      "id": "d4c0a2c32872727b",
      "item": {
        "type": "markdown",
        "id": "d4c0a2c32872727b",
        "text": "and `]]`, extracting them as wiki links. The `update` function is a placeholder that doesn't perform any specific actions for this example. Finally, the `view` function renders the parsed links as an unordered list.\n\nRemember to adjust the code according to your specific needs and integrate it into your Elm application. (ChatGPT)"
      },
      "after": "0005cd26938747d0",
      "date": 1695472416560
    },
    {
      "type": "edit",
      "id": "bc658f3eea220ec0",
      "item": {
        "type": "paragraph",
        "id": "bc658f3eea220ec0",
        "text": "Explain the parseLinks function."
      },
      "date": 1695472558142
    },
    {
      "type": "add",
      "id": "49a9dcae4d4a9245",
      "item": {
        "type": "paragraph",
        "id": "49a9dcae4d4a9245",
        "text": "[…]     -> View (PagesMsg Msg)"
      },
      "after": "bc658f3eea220ec0",
      "date": 1695472561344
    },
    {
      "type": "edit",
      "id": "bc658f3eea220ec0",
      "item": {
        "type": "paragraph",
        "id": "bc658f3eea220ec0",
        "text": "**Explain the parseLinks function.**"
      },
      "date": 1695472565643
    },
    {
      "type": "edit",
      "id": "bc658f3eea220ec0",
      "item": {
        "type": "markdown",
        "id": "bc658f3eea220ec0",
        "text": "**Explain the parseLinks function.**"
      },
      "date": 1695472567206
    },
    {
      "type": "add",
      "id": "41a2aabe38bc7e64",
      "item": {
        "type": "markdown",
        "id": "41a2aabe38bc7e64",
        "text": "Certainly! The `parseLinks` function is responsible for extracting wiki links from a given text. Here's a breakdown of how it works:\n\n```elm\nparseLinks : String -> List String\nparseLinks text =\n    let\n        prefix = \"[[\"\n        suffix = \"]]\"\n        findLinks = String.split prefix >> List.tail >> List.map (String.split suffix >> List.head)\n    in\n    text\n        |> findLinks\n        |> List.filterMap identity\n```\n\n1. **Function Signature**:\n   - `parseLinks : String -> List String` declares a function named `parseLinks` that takes a string as input and returns a list of strings.\n\n2. **Local Definitions**:\n   - `prefix` and `suffix` are variables storing the opening and closing brackets of a wiki link, respectively. This allows us to identify the start and end of a link.\n\n   - `findLinks` is a function that finds occurrences of `[[` in a string, splits the string at those points, and then extracts the first part of the split (which should be the content between `[[` and `]]`).\n\n3. **Function Body**:\n   - `in` indicates the beginning of the function body.\n\n   - `text |> findLinks |> List.filterMap identity`:\n     - `text` is the input string that we're processing.\n     - `findLinks` is applied to the text, which extracts potential links.\n     - `List.filterMap identity` is used to remove any `Nothing` values and extract the `Just` values from the list.\n\n4. **Explanation of `findLinks`**:\n   - `String.split prefix` splits the text at occurrences of `[[`. This results in a list of substrings where each element starts with the content of a potential wiki link.\n\n   - `List.tail` discards the first element of the list (since it may be empty or contain non-link content before the first `[[`).\n\n   - `List.map (String.split suffix >> List.head)` processes each substring:\n     - `String.split suffix` splits the substring at occurrences of `]]`. This may result in a list with two parts: the link content and any text after the `]]`.\n\n     - `List.head` extracts the first part, which should be the content of the link.\n\n5. **Result**:\n   - The function returns a list of strings, where each string is a potential wiki link extracted from the input text.\n\nOverall, `parseLinks` aims to identify and extract content enclosed in `[[` and `]]` from a given string, effectively finding potential wiki links."
      },
      "after": "bc658f3eea220ec0",
      "date": 1695472581341
    },
    {
      "type": "edit",
      "id": "41a2aabe38bc7e64",
      "item": {
        "type": "markdown",
        "id": "41a2aabe38bc7e64",
        "text": "Certainly! The `parseLinks` function is responsible for extracting wiki links from a given text. Here's a breakdown of how it works:\n\n```elm\nparseLinks : String -> List String\nparseLinks text =\n    let\n        prefix = \"[[\"\n        suffix = \"]]\"\n        findLinks = String.split prefix >> List.tail >> List.map (String.split suffix >> List.head)\n    in\n    text\n        |> findLinks\n        |> List.filterMap identity\n```\n\n1. **Function Signature**:\n   - `parseLinks : String -> List String` declares a function named `parseLinks` that takes a string as input and returns a list of strings.\n\n2. **Local Definitions**:\n   - `prefix` and `suffix` are variables storing the opening and closing brackets of a wiki link, respectively. This allows us to identify the start and end of a link.\n\n   - `findLinks` is a function that finds occurrences of `[[` in a string, splits the string at those points, and then extracts the first part of the split (which should be the content between `[[` and `]]`).\n\n3. **Function Body**:\n   - `in` indicates the beginning of the function body.\n\n   - `text |> findLinks |> List.filterMap identity`:\n     - `text` is the input string that we're processing.\n     - `findLinks` is applied to the text, which extracts potential links.\n     - `List.filterMap identity` is used to remove any `Nothing` values and extract the `Just` values from the list.\n\n4. **Explanation of `findLinks`**:\n   - `String.split prefix` splits the text at occurrences of `[[`. This results in a list of substrings where each element starts with the content of a potential wiki link.\n\n   - `List.tail` discards the first element of the list (since it may be empty or contain non-link content before the first `[[`).\n\n   - `List.map (String.split suffix >> List.head)` processes each substring:\n     - `String.split suffix` splits the substring at occurrences of `]]`. This may result in a list with two parts: the link content and any text after the `]]`.\n\n     - `List.head` extracts the first part, which should be the content of the link.\n\n5. **Result**:\n   - The function returns a list of strings, where each string is a potential wiki link extracted from the input text.\n\nOverall, `parseLinks` aims to identify and extract content enclosed in `[[`"
      },
      "date": 1695472595612
    },
    {
      "type": "add",
      "id": "13578829a18a1687",
      "item": {
        "type": "markdown",
        "id": "13578829a18a1687",
        "text": "and `]]` from a given string, effectively finding potential wiki links. (ChatGPT)"
      },
      "after": "41a2aabe38bc7e64",
      "date": 1695472609098
    },
    {
      "type": "edit",
      "id": "41a2aabe38bc7e64",
      "item": {
        "type": "markdown",
        "id": "41a2aabe38bc7e64",
        "text": "Certainly! The `parseLinks` function is responsible for extracting wiki links from a given text. Here's a breakdown of how it works:\n\n```elm\nparseLinks : String -> List String\nparseLinks text =\n    let\n        prefix = \"[[\"\n        suffix = \"]]\"\n        findLinks = String.split prefix >> List.tail >> List.map (String.split suffix >> List.head)\n    in\n    text\n        |> findLinks\n        |> List.filterMap identity\n```\n\n1. **Function Signature**:\n   - `parseLinks : String -> List String` declares a function named `parseLinks` that takes a string as input and returns a list of strings.\n\n2. **Local Definitions**:\n   - `prefix` and `suffix` are variables storing the opening and closing brackets of a wiki link, respectively. This allows us to identify the start and end of a link.\n\n   - `findLinks` is a function that finds occurrences of `[[`"
      },
      "date": 1695472631384
    },
    {
      "type": "add",
      "id": "9f1b0dd7bf254fde",
      "item": {
        "type": "markdown",
        "id": "9f1b0dd7bf254fde",
        "text": "in a string, splits the string at those points, and then extracts the first part of the split (which should be the content between `[[` and `]]`).\n\n3. **Function Body**:\n   - `in` indicates the beginning of the function body.\n\n   - `text |> findLinks |> List.filterMap identity`:\n     - `text` is the input string that we're processing.\n     - `findLinks` is applied to the text, which extracts potential links.\n     - `List.filterMap identity` is used to remove any `Nothing` values and extract the `Just` values from the list.\n\n4. **Explanation of `findLinks`**:\n   - `String.split prefix` splits the text at occurrences of `[[`. This results in a list of substrings where each element starts with the content of a potential wiki link.\n\n   - `List.tail` discards the first element of the list (since it may be empty or contain non-link content before the first `[[`).\n\n   - `List.map (String.split suffix >> List.head)` processes each substring:\n     - `String.split suffix` splits the substring at occurrences of `]]`. This may result in a list with two parts: the link content and any text after the `]]`.\n\n     - `List.head` extracts the first part, which should be the content of the link.\n\n5. **Result**:\n   - The function returns a list of strings, where each string is a potential wiki link extracted from the input text.\n\nOverall, `parseLinks` aims to identify and extract content enclosed in `[[`"
      },
      "after": "41a2aabe38bc7e64",
      "date": 1695472631826
    },
    {
      "type": "edit",
      "id": "9f1b0dd7bf254fde",
      "item": {
        "type": "markdown",
        "id": "9f1b0dd7bf254fde",
        "text": "in a string, splits the string at those points, and then extracts the first part of the split (which should be the content between `[[`"
      },
      "date": 1695472643870
    },
    {
      "type": "add",
      "id": "14d73442bde70f80",
      "item": {
        "type": "markdown",
        "id": "14d73442bde70f80",
        "text": "and `]]`).\n\n3. **Function Body**:\n   - `in` indicates the beginning of the function body.\n\n   - `text |> findLinks |> List.filterMap identity`:\n     - `text` is the input string that we're processing.\n     - `findLinks` is applied to the text, which extracts potential links.\n     - `List.filterMap identity` is used to remove any `Nothing` values and extract the `Just` values from the list.\n\n4. **Explanation of `findLinks`**:\n   - `String.split prefix` splits the text at occurrences of `[[`. This results in a list of substrings where each element starts with the content of a potential wiki link.\n\n   - `List.tail` discards the first element of the list (since it may be empty or contain non-link content before the first `[[`).\n\n   - `List.map (String.split suffix >> List.head)` processes each substring:\n     - `String.split suffix` splits the substring at occurrences of `]]`. This may result in a list with two parts: the link content and any text after the `]]`.\n\n     - `List.head` extracts the first part, which should be the content of the link.\n\n5. **Result**:\n   - The function returns a list of strings, where each string is a potential wiki link extracted from the input text.\n\nOverall, `parseLinks` aims to identify and extract content enclosed in `[[`"
      },
      "after": "9f1b0dd7bf254fde",
      "date": 1695472644914
    },
    {
      "type": "edit",
      "id": "14d73442bde70f80",
      "item": {
        "type": "markdown",
        "id": "14d73442bde70f80",
        "text": "and `]]`).\n\n3. **Function Body**:\n   - `in` indicates the beginning of the function body.\n\n   - `text |> findLinks |> List.filterMap identity`:\n     - `text` is the input string that we're processing.\n     - `findLinks` is applied to the text, which extracts potential links.\n     - `List.filterMap identity` is used to remove any `Nothing` values and extract the `Just` values from the list.\n\n4. **Explanation of `findLinks`**:\n   - `String.split prefix` splits the text at occurrences of `[[`."
      },
      "date": 1695472715897
    },
    {
      "type": "add",
      "id": "86857f634162de4d",
      "item": {
        "type": "markdown",
        "id": "86857f634162de4d",
        "text": "This results in a list of substrings where each element starts with the content of a potential wiki link.\n\n   - `List.tail` discards the first element of the list (since it may be empty or contain non-link content before the first `[[`).\n\n   - `List.map (String.split suffix >> List.head)` processes each substring:\n     - `String.split suffix` splits the substring at occurrences of `]]`. This may result in a list with two parts: the link content and any text after the `]]`.\n\n     - `List.head` extracts the first part, which should be the content of the link.\n\n5. **Result**:\n   - The function returns a list of strings, where each string is a potential wiki link extracted from the input text.\n\nOverall, `parseLinks` aims to identify and extract content enclosed in `[[`"
      },
      "after": "14d73442bde70f80",
      "date": 1695472717381
    },
    {
      "type": "edit",
      "id": "86857f634162de4d",
      "item": {
        "type": "markdown",
        "id": "86857f634162de4d",
        "text": "This results in a list of substrings where each element starts with the content of a potential wiki link.\n\n   - `List.tail` discards the first element of the list (since it may be empty or contain non-link content before the first `[[`)."
      },
      "date": 1695472732995
    },
    {
      "type": "add",
      "id": "9a96980ecdeac210",
      "item": {
        "type": "markdown",
        "id": "9a96980ecdeac210",
        "text": "- `List.map (String.split suffix >> List.head)` processes each substring:\n     - `String.split suffix` splits the substring at occurrences of `]]`. This may result in a list with two parts: the link content and any text after the `]]`.\n\n     - `List.head` extracts the first part, which should be the content of the link.\n\n5. **Result**:\n   - The function returns a list of strings, where each string is a potential wiki link extracted from the input text.\n\nOverall, `parseLinks` aims to identify and extract content enclosed in `[[`"
      },
      "after": "86857f634162de4d",
      "date": 1695472733931
    }
  ]
}