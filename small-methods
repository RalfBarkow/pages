{
  "title": "Small Methods",
  "story": [
    {
      "type": "paragraph",
      "id": "484a253c69021d55",
      "text": "Long methods are usually a concatenation of several shorter pieces of code that accomplish something in a blow-by-blow fashion. Sometimes, there are comments […]"
    },
    {
      "type": "markdown",
      "id": "be8bb3f06abae767",
      "text": "> A visitor to an Irish castle asked the groundskeeper the secret of the beautiful lawn. The answer was: *just mow the lawn every third day for one hundred years*."
    },
    {
      "type": "paragraph",
      "id": "2026866bdcb87166",
      "text": "Roger Whitney comments in college course material that spending a little time frequently is much less work than big concentrated efforts, and that it produces better results in the long run. Therefore, he concludes that it is wise to frequently spend time cleaning up your code. I could not agree more."
    },
    {
      "type": "paragraph",
      "id": "57fa46f9352adbcb",
      "text": "[[Refactoring]] in this continous and merciless manner is connected with software quality as well. Here are some definitions. […]"
    },
    {
      "type": "paragraph",
      "id": "9df59f7533439d35",
      "text": "Quality is producing things of value to some people. Real quality improvement starts with knowing what your customers want. What is the quality of the programs you are working on, right now?"
    },
    {
      "type": "paragraph",
      "id": "bbeb462a4c670249",
      "text": "p. 11: or blank lines in between the pieces as well. These separations are strong hints of where distinctions should have been more explicitly drawn."
    },
    {
      "type": "paragraph",
      "id": "c9e4da8f5759d000",
      "text": "The point of separating the pieces and putting them in methods is simply that of distinguishing the parts and applying labels. This allows smaller parts to interact, which leads to [[behavior networks]] which are easier to change and improve."
    },
    {
      "type": "paragraph",
      "id": "9bdfcf070e515999",
      "text": "While large sections of at first sight cohesive code may be acceptable when written in a workspace or an inspector where one may want to accomplish a one time goal, they really do not belong in methods because typically one creates classes to manage functionality that will be around for longer than a workspace."
    },
    {
      "type": "paragraph",
      "id": "02955e562257d371",
      "text": "To maximize the benefit of using small methods to implement behavior, the written expression of a method should consist of the following two parts:"
    },
    {
      "type": "markdown",
      "id": "d0c47ecb1c78e483",
      "text": "1. An external interface definition, consisting of the name of the selector and the internal names of any supplied arguments. Comments may be added if absolutely necessary. \n1. A small amount of source code that implements the behavior described by the external interface definition above."
    },
    {
      "type": "paragraph",
      "id": "e3b1d2a3227fc8a9",
      "text": "Note the strong contrast between the two."
    },
    {
      "type": "paragraph",
      "id": "3b9185a51fef8f22",
      "text": "You could think of the selector as the cell membrane receptor, and the method being the implemented response to the receptor recognizing a message."
    },
    {
      "type": "paragraph",
      "id": "eae85f2f3e47bc70",
      "text": "The external interface is made known to any potential sender, while the implementation is kept private to the receiver."
    },
    {
      "type": "paragraph",
      "id": "520da99fea1d81bb",
      "text": "This means that a definition consisting of selector pattern and subsequent code sits on both sides of the fence at the same time: the selector sits on the outside of the object, while the method lives inside the object. Note that all of this is left unsaid, and that the accomplished brevity allows for an exquisitely concise way to take advantage of the structure of it all. "
    },
    {
      "type": "paragraph",
      "id": "a23086aa688acc75",
      "text": "The distinction between the two should always be explicitly illustrated by means of an obvious visual cue such as a blank line. In addition, no well-factored method should be interlaced with blank lines or comments since these hint at distinctions which are not being made explicit for everyone to see."
    },
    {
      "type": "paragraph",
      "id": "d93220723fb115e0",
      "text": "Selectors should be used to clearly reveal the intention behind relatively small methods. When this is done, comments display a strong tendency to become redundant."
    },
    {
      "type": "paragraph",
      "id": "de17ba1f1eb47e9c",
      "text": "– [[Elimination of Conditional Logic]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Small Methods",
        "story": []
      },
      "date": 1660204895151
    },
    {
      "item": {
        "type": "factory",
        "id": "484a253c69021d55"
      },
      "id": "484a253c69021d55",
      "type": "add",
      "date": 1660204904365
    },
    {
      "type": "edit",
      "id": "484a253c69021d55",
      "item": {
        "type": "paragraph",
        "id": "484a253c69021d55",
        "text": "Long methods are usually a concatenation of several shorter pieces of code that accomplish something in a blow-by-blow fashion. Sometimes, there are comments"
      },
      "date": 1660204906269
    },
    {
      "type": "edit",
      "id": "484a253c69021d55",
      "item": {
        "type": "paragraph",
        "id": "484a253c69021d55",
        "text": "Long methods are usually a concatenation of several shorter pieces of code that accomplish something in a blow-by-blow fashion. Sometimes, there are comments […]"
      },
      "date": 1660204927184
    },
    {
      "item": {
        "type": "factory",
        "id": "be8bb3f06abae767"
      },
      "id": "be8bb3f06abae767",
      "type": "add",
      "after": "484a253c69021d55",
      "date": 1660205023673
    },
    {
      "type": "edit",
      "id": "be8bb3f06abae767",
      "item": {
        "type": "markdown",
        "id": "be8bb3f06abae767",
        "text": "> A visitor to an Irish castle asked the groundskeeper the secret of the beautiful lawn. The answer was: just mow the lawn every third day for one hundred years."
      },
      "date": 1660205029050
    },
    {
      "type": "edit",
      "id": "be8bb3f06abae767",
      "item": {
        "type": "markdown",
        "id": "be8bb3f06abae767",
        "text": "> A visitor to an Irish castle asked the groundskeeper the secret of the beautiful lawn. The answer was: *just mow the lawn every third day for one hundred years*."
      },
      "date": 1660205045134
    },
    {
      "item": {
        "type": "factory",
        "id": "2026866bdcb87166"
      },
      "id": "2026866bdcb87166",
      "type": "add",
      "after": "be8bb3f06abae767",
      "date": 1660205067334
    },
    {
      "type": "edit",
      "id": "2026866bdcb87166",
      "item": {
        "type": "paragraph",
        "id": "2026866bdcb87166",
        "text": "Roger Whitney comments in college course material that spending a little time frequently is much less work than big concentrated efforts, and that it produces better results in the long run. Therefore, he concludes that it is wise to frequently spend time cleaning up your code. I could not agree more."
      },
      "date": 1660205070090
    },
    {
      "item": {
        "type": "factory",
        "id": "57fa46f9352adbcb"
      },
      "id": "57fa46f9352adbcb",
      "type": "add",
      "after": "2026866bdcb87166",
      "date": 1660205077027
    },
    {
      "type": "edit",
      "id": "57fa46f9352adbcb",
      "item": {
        "type": "paragraph",
        "id": "57fa46f9352adbcb",
        "text": "Refactoring in this continous and merciless manner is connected with software quality as well. Here are some definitions. […]"
      },
      "date": 1660205084104
    },
    {
      "type": "edit",
      "id": "57fa46f9352adbcb",
      "item": {
        "type": "paragraph",
        "id": "57fa46f9352adbcb",
        "text": "[[Refactoring]] in this continous and merciless manner is connected with software quality as well. Here are some definitions. […]"
      },
      "date": 1660205097054
    },
    {
      "item": {
        "type": "factory",
        "id": "9df59f7533439d35"
      },
      "id": "9df59f7533439d35",
      "type": "add",
      "after": "57fa46f9352adbcb",
      "date": 1660205114708
    },
    {
      "type": "edit",
      "id": "9df59f7533439d35",
      "item": {
        "type": "paragraph",
        "id": "9df59f7533439d35",
        "text": "Quality is producing things of value to some people. Real quality improvement starts with knowing what your customers want. What is the quality of the programs you are working on, right now?"
      },
      "date": 1660205118129
    },
    {
      "item": {
        "type": "factory",
        "id": "bbeb462a4c670249"
      },
      "id": "bbeb462a4c670249",
      "type": "add",
      "after": "9df59f7533439d35",
      "date": 1660205159127
    },
    {
      "type": "edit",
      "id": "bbeb462a4c670249",
      "item": {
        "type": "paragraph",
        "id": "bbeb462a4c670249",
        "text": "p. 11: "
      },
      "date": 1660205166231
    },
    {
      "type": "edit",
      "id": "bbeb462a4c670249",
      "item": {
        "type": "paragraph",
        "id": "bbeb462a4c670249",
        "text": "p. 11: or blank lines in between the pieces as well. These separations are strong hints of where distinctions should have been more explicitly drawn."
      },
      "date": 1660205177621
    },
    {
      "item": {
        "type": "factory",
        "id": "c9e4da8f5759d000"
      },
      "id": "c9e4da8f5759d000",
      "type": "add",
      "after": "bbeb462a4c670249",
      "date": 1660205207880
    },
    {
      "type": "edit",
      "id": "c9e4da8f5759d000",
      "item": {
        "type": "paragraph",
        "id": "c9e4da8f5759d000",
        "text": "The point of separating the pieces and putting them in methods is simply that of distinguishing the parts and applying labels. This allows smaller parts to interact, which leads to behavior networks which are easier to change and improve."
      },
      "date": 1660205209790
    },
    {
      "type": "edit",
      "id": "c9e4da8f5759d000",
      "item": {
        "type": "paragraph",
        "id": "c9e4da8f5759d000",
        "text": "The point of separating the pieces and putting them in methods is simply that of distinguishing the parts and applying labels. This allows smaller parts to interact, which leads to [[behavior networks]] which are easier to change and improve."
      },
      "date": 1660205227383
    },
    {
      "item": {
        "type": "factory",
        "id": "9bdfcf070e515999"
      },
      "id": "9bdfcf070e515999",
      "type": "add",
      "after": "c9e4da8f5759d000",
      "date": 1660205251166
    },
    {
      "type": "edit",
      "id": "9bdfcf070e515999",
      "item": {
        "type": "paragraph",
        "id": "9bdfcf070e515999",
        "text": "While large sections of at first sight cohesive code may be acceptable when written in a workspace or an inspector where one may want to accomplish a one time goal, they really do not belong in methods because typically one creates classes to manage functionality that will be around for longer than a workspace."
      },
      "date": 1660205254679
    },
    {
      "item": {
        "type": "factory",
        "id": "02955e562257d371"
      },
      "id": "02955e562257d371",
      "type": "add",
      "after": "9bdfcf070e515999",
      "date": 1660205424143
    },
    {
      "type": "edit",
      "id": "02955e562257d371",
      "item": {
        "type": "paragraph",
        "id": "02955e562257d371",
        "text": "To maximize the benefit of using small methods to implement behavior, the written expression of a method should consist of the following two parts:"
      },
      "date": 1660205432325
    },
    {
      "item": {
        "type": "factory",
        "id": "d0c47ecb1c78e483"
      },
      "id": "d0c47ecb1c78e483",
      "type": "add",
      "after": "02955e562257d371",
      "date": 1660205438317
    },
    {
      "type": "edit",
      "id": "d0c47ecb1c78e483",
      "item": {
        "type": "markdown",
        "id": "d0c47ecb1c78e483",
        "text": "1. An external interface definition, consisting of the name of the selector and the internal names of any supplied arguments. Comments may be added if absolutely necessary. \n1. A small amount of source code that implements the behavior described by the external interface definition above."
      },
      "date": 1660205445248
    },
    {
      "item": {
        "type": "factory",
        "id": "e3b1d2a3227fc8a9"
      },
      "id": "e3b1d2a3227fc8a9",
      "type": "add",
      "after": "d0c47ecb1c78e483",
      "date": 1660205470886
    },
    {
      "type": "edit",
      "id": "e3b1d2a3227fc8a9",
      "item": {
        "type": "paragraph",
        "id": "e3b1d2a3227fc8a9",
        "text": "Note the strong contrast between the two."
      },
      "date": 1660205477092
    },
    {
      "item": {
        "type": "factory",
        "id": "3b9185a51fef8f22"
      },
      "id": "3b9185a51fef8f22",
      "type": "add",
      "after": "e3b1d2a3227fc8a9",
      "date": 1660205484967
    },
    {
      "type": "edit",
      "id": "3b9185a51fef8f22",
      "item": {
        "type": "paragraph",
        "id": "3b9185a51fef8f22",
        "text": "You could think of the selector as the cell membrane receptor, and the method being the implemented response to the receptor recognizing a message."
      },
      "date": 1660205491680
    },
    {
      "item": {
        "type": "factory",
        "id": "eae85f2f3e47bc70"
      },
      "id": "eae85f2f3e47bc70",
      "type": "add",
      "after": "3b9185a51fef8f22",
      "date": 1660205508979
    },
    {
      "type": "edit",
      "id": "eae85f2f3e47bc70",
      "item": {
        "type": "paragraph",
        "id": "eae85f2f3e47bc70",
        "text": "The external interface is made known to any potential sender, while the implementation is kept private to the receiver6. The distinction between the two should always be explicitly illustrated by means of an obvious visual cue such as a blank line. In addition, no well-factored method should be interlaced with blank lines or comments since these hint at distinctions which are not being made explicit for everyone to see."
      },
      "date": 1660205510636
    },
    {
      "type": "edit",
      "id": "eae85f2f3e47bc70",
      "item": {
        "type": "paragraph",
        "id": "eae85f2f3e47bc70",
        "text": "The external interface is made known to any potential sender, while the implementation is kept private to the receiver6. "
      },
      "date": 1660205523752
    },
    {
      "type": "add",
      "id": "a23086aa688acc75",
      "item": {
        "type": "paragraph",
        "id": "a23086aa688acc75",
        "text": "The distinction between the two should always be explicitly illustrated by means of an obvious visual cue such as a blank line. In addition, no well-factored method should be interlaced with blank lines or comments since these hint at distinctions which are not being made explicit for everyone to see."
      },
      "after": "eae85f2f3e47bc70",
      "date": 1660205527626
    },
    {
      "type": "edit",
      "id": "eae85f2f3e47bc70",
      "item": {
        "type": "paragraph",
        "id": "eae85f2f3e47bc70",
        "text": "The external interface is made known to any potential sender, while the implementation is kept private to the receiver."
      },
      "date": 1660205542646
    },
    {
      "type": "add",
      "id": "520da99fea1d81bb",
      "item": {
        "type": "paragraph",
        "id": "520da99fea1d81bb",
        "text": "This means that a definition consisting of selector pattern and subsequent code sits on both sides of the fence at the same time: the selector sits on the outside of the object, while the method lives inside the object. Note that all of this is left unsaid, and that the accomplished brevity allows for an exquisitely concise way to take advantage of the structure of it all. "
      },
      "after": "eae85f2f3e47bc70",
      "date": 1660205544818
    },
    {
      "item": {
        "type": "factory",
        "id": "d93220723fb115e0"
      },
      "id": "d93220723fb115e0",
      "type": "add",
      "after": "a23086aa688acc75",
      "date": 1660205588633
    },
    {
      "type": "edit",
      "id": "d93220723fb115e0",
      "item": {
        "type": "paragraph",
        "id": "d93220723fb115e0",
        "text": "Selectors should be used to clearly reveal the intention behind relatively small methods. When this is done, comments display a strong tendency to become redundant."
      },
      "date": 1660205591085
    },
    {
      "item": {
        "type": "factory",
        "id": "de17ba1f1eb47e9c"
      },
      "id": "de17ba1f1eb47e9c",
      "type": "add",
      "after": "d93220723fb115e0",
      "date": 1660205609957
    },
    {
      "type": "edit",
      "id": "de17ba1f1eb47e9c",
      "item": {
        "type": "paragraph",
        "id": "de17ba1f1eb47e9c",
        "text": "– [[Elimination of Conditional Logic]]"
      },
      "date": 1660205614179
    }
  ]
}