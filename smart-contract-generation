{
  "title": "Smart Contract Generation",
  "story": [
    {
      "type": "markdown",
      "id": "cee276dd0298c322",
      "text": "Protocol-based [[Smart Contract]] Generation [https://arxiv.org/pdf/2108.02672.pdf pdf]"
    },
    {
      "type": "markdown",
      "id": "05699feeb3123bda",
      "text": "> **Abstract**. The popularity of smart contracts is on the rise, yet breaches in reliability and security linger. Among the many facets of smart contract reliability, we concentrate on faults rooted in out-of-order interactions with contract endpoints. We propose [[SmartScribble]], a protocol\nlanguage to describe valid patterns of interaction between users and endpoints. SmartScribble not only ensures correct interactive behaviour but also simplifies smart contract coding. From a protocol description, our compiler generates a smart contract that can then be completed by\nthe programmer with the relevant business logic. The generated contracts rely on finite state machines to control endpoint invocations. As a proof of concept, we target [[Plutus]], the contract programming language for the [[Cardano]] blockchain. Preliminary evaluation points to a 75% decrease in the size of the code that developers must write, coupled with an increase of reliability by enforcing the specified patterns of interaction."
    },
    {
      "type": "paragraph",
      "id": "ba4bc641600ec7cd",
      "text": "Smart contracts usually operate over user owned [[assets]], thus, vulnerabilities in programs and in the underlying programming languages can lead to\nconsiderable losses. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Smart Contract Generation",
        "story": []
      },
      "date": 1637830291741
    },
    {
      "item": {
        "type": "factory",
        "id": "cfc819966f1d8ac9"
      },
      "id": "cfc819966f1d8ac9",
      "type": "add",
      "date": 1637830293095
    },
    {
      "type": "edit",
      "id": "cfc819966f1d8ac9",
      "item": {
        "type": "paragraph",
        "id": "cfc819966f1d8ac9",
        "text": "# Protocol-based Smart Contract Generation"
      },
      "date": 1637830298163
    },
    {
      "type": "remove",
      "id": "cfc819966f1d8ac9",
      "date": 1637830302495
    },
    {
      "item": {
        "type": "factory",
        "id": "cee276dd0298c322"
      },
      "id": "cee276dd0298c322",
      "type": "add",
      "date": 1637830304570
    },
    {
      "type": "edit",
      "id": "cee276dd0298c322",
      "item": {
        "type": "markdown",
        "id": "cee276dd0298c322",
        "text": "Protocol-based Smart Contract Generation"
      },
      "date": 1637830320663
    },
    {
      "type": "edit",
      "id": "cee276dd0298c322",
      "item": {
        "type": "markdown",
        "id": "cee276dd0298c322",
        "text": "Protocol-based Smart Contract Generation [https://arxiv.org/pdf/2108.02672.pdf pdf]"
      },
      "date": 1637830337459
    },
    {
      "item": {
        "type": "factory",
        "id": "05699feeb3123bda"
      },
      "id": "05699feeb3123bda",
      "type": "add",
      "after": "cee276dd0298c322",
      "date": 1637830348742
    },
    {
      "type": "edit",
      "id": "05699feeb3123bda",
      "item": {
        "type": "markdown",
        "id": "05699feeb3123bda",
        "text": "> **Abstract**. The popularity of smart contracts is on the rise, yet breaches\nin reliability and security linger. Among the many facets of smart contract reliability, we concentrate on faults rooted in out-of-order interactions with contract endpoints. We propose SmartScribble, a protocol\nlanguage to describe valid patterns of interaction between users and endpoints. SmartScribble not only ensures correct interactive behaviour\nbut also simplifies smart contract coding. From a protocol description,\nour compiler generates a smart contract that can then be completed by\nthe programmer with the relevant business logic. The generated contracts\nrely on finite state machines to control endpoint invocations. As a proof\nof concept, we target Plutus, the contract programming language for the\nCardano blockchain. Preliminary evaluation points to a 75% decrease in\nthe size of the code that developers must write, coupled with an increase\nof reliability by enforcing the specified patterns of interaction."
      },
      "date": 1637830379537
    },
    {
      "type": "edit",
      "id": "cee276dd0298c322",
      "item": {
        "type": "markdown",
        "id": "cee276dd0298c322",
        "text": "Protocol-based [[Smart Contract]] Generation [https://arxiv.org/pdf/2108.02672.pdf pdf]"
      },
      "date": 1637830405347
    },
    {
      "type": "edit",
      "id": "05699feeb3123bda",
      "item": {
        "type": "markdown",
        "id": "05699feeb3123bda",
        "text": "> **Abstract**. The popularity of smart contracts is on the rise, yet breaches in reliability and security linger. Among the many facets of smart contract reliability, we concentrate on faults rooted in out-of-order interactions with contract endpoints. We propose SmartScribble, a protocol\nlanguage to describe valid patterns of interaction between users and endpoints. SmartScribble not only ensures correct interactive behaviour but also simplifies smart contract coding. From a protocol description, our compiler generates a smart contract that can then be completed by\nthe programmer with the relevant business logic. The generated contracts rely on finite state machines to control endpoint invocations. As a proof of concept, we target Plutus, the contract programming language for the Cardano blockchain. Preliminary evaluation points to a 75% decrease in\nthe size of the code that developers must write, coupled with an increase of reliability by enforcing the specified patterns of interaction."
      },
      "date": 1637830448929
    },
    {
      "type": "edit",
      "id": "05699feeb3123bda",
      "item": {
        "type": "markdown",
        "id": "05699feeb3123bda",
        "text": "> **Abstract**. The popularity of smart contracts is on the rise, yet breaches in reliability and security linger. Among the many facets of smart contract reliability, we concentrate on faults rooted in out-of-order interactions with contract endpoints. We propose SmartScribble, a protocol\nlanguage to describe valid patterns of interaction between users and endpoints. SmartScribble not only ensures correct interactive behaviour but also simplifies smart contract coding. From a protocol description, our compiler generates a smart contract that can then be completed by\nthe programmer with the relevant business logic. The generated contracts rely on finite state machines to control endpoint invocations. As a proof of concept, we target Plutus, the contract programming language for the Cardano blockchain. Preliminary evaluation points to a 75% decrease in the size of the code that developers must write, coupled with an increase of reliability by enforcing the specified patterns of interaction."
      },
      "date": 1637830459996
    },
    {
      "type": "edit",
      "id": "05699feeb3123bda",
      "item": {
        "type": "markdown",
        "id": "05699feeb3123bda",
        "text": "> **Abstract**. The popularity of smart contracts is on the rise, yet breaches in reliability and security linger. Among the many facets of smart contract reliability, we concentrate on faults rooted in out-of-order interactions with contract endpoints. We propose [[SmartScribble]], a protocol\nlanguage to describe valid patterns of interaction between users and endpoints. SmartScribble not only ensures correct interactive behaviour but also simplifies smart contract coding. From a protocol description, our compiler generates a smart contract that can then be completed by\nthe programmer with the relevant business logic. The generated contracts rely on finite state machines to control endpoint invocations. As a proof of concept, we target Plutus, the contract programming language for the Cardano blockchain. Preliminary evaluation points to a 75% decrease in the size of the code that developers must write, coupled with an increase of reliability by enforcing the specified patterns of interaction."
      },
      "date": 1637830483744
    },
    {
      "type": "edit",
      "id": "05699feeb3123bda",
      "item": {
        "type": "markdown",
        "id": "05699feeb3123bda",
        "text": "> **Abstract**. The popularity of smart contracts is on the rise, yet breaches in reliability and security linger. Among the many facets of smart contract reliability, we concentrate on faults rooted in out-of-order interactions with contract endpoints. We propose [[SmartScribble]], a protocol\nlanguage to describe valid patterns of interaction between users and endpoints. SmartScribble not only ensures correct interactive behaviour but also simplifies smart contract coding. From a protocol description, our compiler generates a smart contract that can then be completed by\nthe programmer with the relevant business logic. The generated contracts rely on finite state machines to control endpoint invocations. As a proof of concept, we target [[Plutus]], the contract programming language for the [[Cardano]] blockchain. Preliminary evaluation points to a 75% decrease in the size of the code that developers must write, coupled with an increase of reliability by enforcing the specified patterns of interaction."
      },
      "date": 1637830526249
    },
    {
      "item": {
        "type": "factory",
        "id": "ba4bc641600ec7cd"
      },
      "id": "ba4bc641600ec7cd",
      "type": "add",
      "after": "05699feeb3123bda",
      "date": 1637830587203
    },
    {
      "type": "edit",
      "id": "ba4bc641600ec7cd",
      "item": {
        "type": "paragraph",
        "id": "ba4bc641600ec7cd",
        "text": "Smart contracts usually operate over user owned assets, thus, vulnerabil-\nities in programs and in the underlying programming languages can lead to\nconsiderable losses. "
      },
      "date": 1637830588777
    },
    {
      "type": "edit",
      "id": "ba4bc641600ec7cd",
      "item": {
        "type": "paragraph",
        "id": "ba4bc641600ec7cd",
        "text": "Smart contracts usually operate over user owned [[assets]], thus, vulnerabilities in programs and in the underlying programming languages can lead to\nconsiderable losses. "
      },
      "date": 1637830600981
    }
  ]
}