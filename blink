{
  "title": "blink",
  "story": [
    {
      "type": "paragraph",
      "id": "cbed38ad098da04f",
      "text": "is an x86-64 interpreter for POSIX platforms that's written in ANSI C11 that's compatible with C++ compilers. Instruction decoding is done using our trimmed-down version of Intel's disassembler Xed. [https://github.com/jart/blink#technical-details github]"
    },
    {
      "type": "paragraph",
      "id": "babcf551d4e8ed7d",
      "text": "The prime directive of this project is to act as a [[Virtual Machine]] for userspace binaries compiled by Cosmopolitan Libc. However we've also had success virtualizing programs compiled with Glibc and Musl Libc, such as GCC and Qemu. Blink supports 500+ instructions and 150+ Linux syscalls, including fork() and clone(). Linux system calls may only be used by long mode programs via the SYSCALL instruction, as it is written in the System V ABI."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "blink",
        "story": []
      },
      "date": 1676129120892
    },
    {
      "item": {
        "type": "factory",
        "id": "cbed38ad098da04f"
      },
      "id": "cbed38ad098da04f",
      "type": "add",
      "date": 1676129132010
    },
    {
      "type": "edit",
      "id": "cbed38ad098da04f",
      "item": {
        "type": "paragraph",
        "id": "cbed38ad098da04f",
        "text": "is an x86-64 interpreter for POSIX platforms that's written in ANSI C11 that's compatible with C++ compilers. Instruction decoding is done using our trimmed-down version of Intel's disassembler Xed."
      },
      "date": 1676129134348
    },
    {
      "type": "edit",
      "id": "cbed38ad098da04f",
      "item": {
        "type": "paragraph",
        "id": "cbed38ad098da04f",
        "text": "is an x86-64 interpreter for POSIX platforms that's written in ANSI C11 that's compatible with C++ compilers. Instruction decoding is done using our trimmed-down version of Intel's disassembler Xed. [https://github.com/jart/blink#technical-details github]"
      },
      "date": 1676129174210
    },
    {
      "item": {
        "type": "factory",
        "id": "babcf551d4e8ed7d"
      },
      "id": "babcf551d4e8ed7d",
      "type": "add",
      "after": "cbed38ad098da04f",
      "date": 1676129199486
    },
    {
      "type": "edit",
      "id": "babcf551d4e8ed7d",
      "item": {
        "type": "paragraph",
        "id": "babcf551d4e8ed7d",
        "text": "The prime directive of this project is to act as a virtual machine for userspace binaries compiled by Cosmopolitan Libc. However we've also had success virtualizing programs compiled with Glibc and Musl Libc, such as GCC and Qemu. Blink supports 500+ instructions and 150+ Linux syscalls, including fork() and clone(). Linux system calls may only be used by long mode programs via the SYSCALL instruction, as it is written in the System V ABI."
      },
      "date": 1676129200807
    },
    {
      "type": "edit",
      "id": "babcf551d4e8ed7d",
      "item": {
        "type": "paragraph",
        "id": "babcf551d4e8ed7d",
        "text": "The prime directive of this project is to act as a [[virtual machine]] for userspace binaries compiled by Cosmopolitan Libc. However we've also had success virtualizing programs compiled with Glibc and Musl Libc, such as GCC and Qemu. Blink supports 500+ instructions and 150+ Linux syscalls, including fork() and clone(). Linux system calls may only be used by long mode programs via the SYSCALL instruction, as it is written in the System V ABI."
      },
      "date": 1676129214389
    },
    {
      "type": "edit",
      "id": "babcf551d4e8ed7d",
      "item": {
        "type": "paragraph",
        "id": "babcf551d4e8ed7d",
        "text": "The prime directive of this project is to act as a [[Virtual Machine]] for userspace binaries compiled by Cosmopolitan Libc. However we've also had success virtualizing programs compiled with Glibc and Musl Libc, such as GCC and Qemu. Blink supports 500+ instructions and 150+ Linux syscalls, including fork() and clone(). Linux system calls may only be used by long mode programs via the SYSCALL instruction, as it is written in the System V ABI."
      },
      "date": 1676129225968
    }
  ]
}