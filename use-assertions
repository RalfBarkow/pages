{
  "title": "Use Assertions",
  "story": [
    {
      "type": "html",
      "text": "<i>Understand [[What Are Assertions]] and what they're good for, and then use them.</i>",
      "id": "eb03a85024740d208b4374b806dc4ecc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e2b08a1ad0d22a9902640aa3951ad72d"
    },
    {
      "type": "html",
      "text": "The logic in \"[[Do Not Use Assertions]]\" is faulty.",
      "id": "f06e9eda5cea408b7c7d47ae82f5a029"
    },
    {
      "type": "html",
      "text": "\nWhen an assertion fails, the program halts, and a programmer figures out what's wrong, and fixes it. Then the assertion doesn't fail anymore. It's important to understand that the code is not supposed to handle the error - a person is.",
      "id": "bfde2a08a9d15a846fdcdc3a62fad08a"
    },
    {
      "type": "html",
      "text": "It is also important to remember that standard operating procedure for assertions is to turn them off before doing a build that will be sent to real customers; In this case I'd argue that [[Bairs Law]] does apply, but the conclusion that assertions should not be used by the programmer does not follow.",
      "id": "2b7179c253b5c91506706e703cba139d"
    },
    {
      "type": "html",
      "text": "\nI should also mention not everybody uses [[Unit Test]]s, and they are not required to ship good software. In a development process that relies heavily on human testing, assertions might well increase the rigor of the testing.",
      "id": "2cef5f0806a53899d81cab3be5e66690"
    },
    {
      "type": "html",
      "text": "-- [[Curtis Bartley]]",
      "id": "c2d668201e38bfd771a30c9ab4f6983a"
    },
    {
      "type": "html",
      "text": "<i>Can't we view assertions as merely an early attempt to have [[Unit Test]]s that are embedded in the code? Assertions provide a simple way to insert a stub test for the calling function(s).</i>",
      "id": "318491a3de96f89c00040e7ea4220f70"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e2b08a1ad0d22a9902640aa3951ad72d"
    },
    {
      "type": "html",
      "text": "Logical assertions can easily be used to check the sanity of parameter values, but they're good for more than that: Use logical assertions to verify that all variables are initialized properly for your algorithm to operate correctly. After the algorithm runs, use assertions to verify that it ran correctly.",
      "id": "0c440c807e6c193faacb1a4d246dbecf"
    },
    {
      "type": "html",
      "text": "<b>Example</b>: In a function, I've built a linked list of results that correspond to an input array of requests. Now I'll apply some algorithm that does something to the request and result pairs. The algorithm is simple, but would fail in subtle or disastrous ways if the list and array were not the same length. But I know they're the same length; I just wrote the code that builds them. But how do I know I didn't make a silly coding mistake? How do I know that the next \"N\" entry-level maintenance programmers won't make similarly silly coding mistakes? Simple: Right before the loop, I <b>assert</b> that the two sets have equal length. Then, silly little coding errors and logical errors in thinking will become immediately obvious during [[Unit Test]]ing. Better yet, if the assertion fails, it will be dramatically easier (and hence less time consuming and expensive) to determine what went wrong, and fix it. Without the assertion, the subtle or disastrous errors would exhibit symptoms in other parts of the code, requiring substantially greater effort to track down the actual cause.",
      "id": "92ad0cb47c643d691928024ba0260834"
    },
    {
      "type": "html",
      "text": "<b>Example (continued)</b>: After looping through the array and list simultaneously, and terminating when (say) the next pointer is NULL, I know that I'm also at the end of the array. If I weren't at the end of the array, then I'd know that my code was written incorrectly. So I <b>assert</b> that my array index is at the end. (I could terminate the loop based on the array index, but then I'd want to be sure the next pointer was NULL - by asserting so. I could be excessively paranoid, and check both in the while condition of my loop, but then I'd have to check both in an assert after the end, or risk loss of data.)",
      "id": "6fccb6111acd08e5d14b54cbd13e3116"
    },
    {
      "type": "html",
      "text": "\nThere is no way that [[Unit Test]]s could \"test\" the conditions I'm asserting: There is no combination of inputs that would produce the erroneous state; only an error in coding can produce it. So, during development testing, I use asserts to catch common coding errors and to help debug them. In production, I drop the overhead of all the extra \"can never happen\" testing. (If it could reasonably happen, then I shouldn't use an assert; I should check the condition with an \"if\" and then throw an exception.)",
      "id": "e157694953d6dd9250844e3125a677d5"
    },
    {
      "type": "html",
      "text": "-- [[Jeff Grigg]]",
      "id": "cf2bb66b90bb3600e32f4afaed46d2d4"
    },
    {
      "type": "html",
      "text": "<i>How about refactoring your code so that you are using one data structure, rather than a list and an array? The error couldn't occur if you do that.</i>",
      "id": "04c8717ed833dafc7405adca1394c0dc"
    },
    {
      "type": "html",
      "text": "\nTrue, it's generally better to have an array of objects than artificially synchronized arrays of attributes. But there are also situations for keeping them separate. If the input is a set of commands or SQL queries to execute, and the output is the set of results to return, then mixing the input with the output may mean that you'll have to rework all the data again to get the desired output. And all this processing does nothing but create more opportunities for useful assertions: Like, after copying the input statements/queries to the new list of objects for more convenient processing, you'd want to assert that you still have the same number of objects as you had queries, wouldn't you? If you had lost some, then something must have gone dreadfully wrong. -- [[Jeff Grigg]]",
      "id": "84e3da24a95b350798cf79329158fe8d"
    },
    {
      "type": "html",
      "text": "\nTo some extent, [[Once And Only Once]] by reducing redundancy tends to fix automatically problems you might otherwise catch by assertions. However, there's still plenty of room for checks. -- [[Martin Pool]]",
      "id": "60b660dbc47f0b38031c8033c3a2c8aa"
    },
    {
      "type": "html",
      "text": "\nI find assertions particularly valuable to test pre-conditions. Note: this is not the same as checking parameters. All of the arguments may well be just fine, but if the object is not ready to have you call a particular method, you have a coding error (in the caller). -- [[Russell Gold]]",
      "id": "b8531f1df1a1053965692414a31b518d"
    },
    {
      "type": "html",
      "text": "\nAssertions are related to type checking. Both assertions and type checking are [[Seat Belts]] you can wear to protect yourself from bugs. If you don't want them you don't have to [[Use Assertions]] and you can use a dynamically typed language like [[Python Language]]. -- [[Oren Tirosh]]",
      "id": "358ee561e245a4d4e329283290ad341d"
    },
    {
      "type": "html",
      "text": "\nAssertions aren't [[Seat Belts]] - they're [[Crash Test Dummies]]. [[Seat Belts]] are [[Defensive Programming]]. -- [[Zygo Blaxell]]",
      "id": "b19c040ad0a35705a800693be555aaf5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e2b08a1ad0d22a9902640aa3951ad72d"
    },
    {
      "type": "html",
      "text": "I habitually assert False in a \"Case Else\". On more than one occasion this has caught people passing in data that the routine wasn't intended to handle. -- [[Dominic Cronin]]",
      "id": "4db2c4ffb54ce2a252f258ef00b1874a"
    },
    {
      "type": "html",
      "text": "<i>I habitually use polymorphism and [[Law Of Demeter]]. I don't have to worry about \"case else\" ;)</i>",
      "id": "6f98c880740524817dbfa21e64f15e45"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e2b08a1ad0d22a9902640aa3951ad72d"
    },
    {
      "type": "html",
      "text": "Unless you are saying your testing is perfect you need asserts to catch runtime problems. [[Unit Test]]s are not system tests and lots of problems are found at system test time. They would not be found without [[Design By Contract]]/asserts.",
      "id": "406bbddf681a43cd8b768a8e45f9679c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e2b08a1ad0d22a9902640aa3951ad72d"
    },
    {
      "type": "html",
      "text": "There is no way that [[Unit Test]]s could \"test\" the conditions I'm asserting.",
      "id": "81f81640851cc3ea56943c6e9a31f5db"
    },
    {
      "type": "html",
      "text": "\nThe point being the [[Unit Test]]s almost always test to make something works. They don't catch programmer error or system level effects not reproducible in a [[Unit Test]].",
      "id": "3e75413ec06be42ac0fd15d185dac427"
    },
    {
      "type": "html",
      "text": "<i>(Damn that was quick - now I have to completely re-write what I said, because what I said was not what I meant but I lost it in your save)</i>",
      "id": "df3b4fdb117370dcf53dc79fb256a226"
    },
    {
      "type": "html",
      "text": "<i>Is this a fair summary of your situation:</i>",
      "id": "c9a9b189a6c8d3a8d5a581ffc0de12e5"
    },
    {
      "type": "html",
      "text": " <i>Your code works, the [[Unit Test]]s prove that</i>",
      "id": "3a43798782e03b27b068c0419b606ce1"
    },
    {
      "type": "html",
      "text": " <i>There a known consistency conditions that only fail when some other part of the system screws up</i>",
      "id": "9b838a84a2f75b8511b0fbfa0ab2f45b"
    },
    {
      "type": "html",
      "text": " <i>You put assertion to check the consistency conditions, thus ensuring that if someone else does screw up the system fails early and loudly</i>",
      "id": "2aef5e9355b6b0581dfc71f0c3ec713b"
    },
    {
      "type": "html",
      "text": "<i>Is that what you're trying to say?</i>",
      "id": "10a1fceea78da99d9c2810b5e2392659"
    },
    {
      "type": "html",
      "text": "\nSort of. Unit tests show that what you tested works in the environment in which you\ntested it. The system doesn't have to screw up necessarily. Extreme load, likely\nin good acceptance/unit tests, changes everything. I work in large distributed embedded\nsystems where this is very true. Not so true in other areas. ",
      "id": "d85193ce1ed78142ed25483491d7b304"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e2b08a1ad0d22a9902640aa3951ad72d"
    },
    {
      "type": "html",
      "text": "I may be fighting city hall here, but you should [[Ship With Assertions On]] (and discuss it there).",
      "id": "f511d412870448bddc4586782586b22e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e2b08a1ad0d22a9902640aa3951ad72d"
    },
    {
      "type": "html",
      "text": "[[Category Assertions]]",
      "id": "f022656e5b856acba8f2962ec93cff47"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?UseAssertions c2.com]",
      "id": "c06a590c223fbe3a52272f4b86ecc66a"
    }
  ],
  "journal": [
    {
      "date": 1146376009000,
      "id": "de55349120860a0179e4546b25936e50",
      "type": "create",
      "item": {
        "title": "Use Assertions",
        "story": [
          {
            "type": "html",
            "text": "<i>Understand [[What Are Assertions]] and what they're good for, and then use them.</i>",
            "id": "eb03a85024740d208b4374b806dc4ecc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e2b08a1ad0d22a9902640aa3951ad72d"
          },
          {
            "type": "html",
            "text": "The logic in \"[[Do Not Use Assertions]]\" is faulty.",
            "id": "f06e9eda5cea408b7c7d47ae82f5a029"
          },
          {
            "type": "html",
            "text": "\nWhen an assertion fails, the program halts, and a programmer figures out what's wrong, and fixes it. Then the assertion doesn't fail anymore. It's important to understand that the code is not supposed to handle the error - a person is.",
            "id": "bfde2a08a9d15a846fdcdc3a62fad08a"
          },
          {
            "type": "html",
            "text": "\nIt is also important to remember that standard operating procedure for assertions is to turn them off before doing a build that will be sent to real customers; In this case I'd argue that [[Bairs Law]] does apply, but the conclusion that assertions should not be used by the programmer does not follow.",
            "id": "2b7179c253b5c91506706e703cba139d"
          },
          {
            "type": "html",
            "text": "\nI should also mention not everybody uses [[Unit Test]]s, and they are not required to ship good software. In a development process that relies heavily on human testing, assertions might well increase the rigor of the testing.",
            "id": "2cef5f0806a53899d81cab3be5e66690"
          },
          {
            "type": "html",
            "text": "-- [[Curtis Bartley]]",
            "id": "c2d668201e38bfd771a30c9ab4f6983a"
          },
          {
            "type": "html",
            "text": "<i>Can't we view assertions as merely an early attempt to have [[Unit Test]]s that are embedded in the code? Assertions provide a simple way to insert a stub test for the calling function(s).</i>",
            "id": "318491a3de96f89c00040e7ea4220f70"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e2b08a1ad0d22a9902640aa3951ad72d"
          },
          {
            "type": "html",
            "text": "Logical assertions can easily be used to check the sanity of parameter values, but they're good for more than that: Use logical assertions to verify that all variables are initialized properly for your algorithm to operate correctly. After the algorithm runs, use assertions to verify that it ran correctly.",
            "id": "0c440c807e6c193faacb1a4d246dbecf"
          },
          {
            "type": "html",
            "text": "<b>Example</b>: In a function, I've built a linked list of results that correspond to an input array of requests. Now I'll apply some algorithm that does something to the request and result pairs. The algorithm is simple, but would fail in subtle or disastrous ways if the list and array were not the same length. But I know they're the same length; I just wrote the code that builds them. But how do I know I didn't make a silly coding mistake? How do I know that the next \"N\" entry-level maintenance programmers won't make similarly silly coding mistakes? Simple: Right before the loop, I <b>assert</b> that the two sets have equal length. Then, silly little coding errors and logical errors in thinking will become immediately obvious during [[Unit Test]]ing. Better yet, if the assertion fails, it will be dramatically easier (and hence less time consuming and expensive) to determine what went wrong, and fix it. Without the assertion, the subtle or disastrous errors would exhibit symptoms in other parts of the code, requiring substantially greater effort to track down the actual cause.",
            "id": "92ad0cb47c643d691928024ba0260834"
          },
          {
            "type": "html",
            "text": "<b>Example (continued)</b>: After looping through the array and list simultaneously, and terminating when (say) the next pointer is NULL, I know that I'm also at the end of the array. If I weren't at the end of the array, then I'd know that my code was written incorrectly. So I <b>assert</b> that my array index is at the end. (I could terminate the loop based on the array index, but then I'd want to be sure the next pointer was NULL - by asserting so. I could be excessively paranoid, and check both in the while condition of my loop, but then I'd have to check both in an assert after the end, or risk loss of data.)",
            "id": "6fccb6111acd08e5d14b54cbd13e3116"
          },
          {
            "type": "html",
            "text": "\nThere is no way that [[Unit Test]]s could \"test\" the conditions I'm asserting: There is no combination of inputs that would produce the erroneous state; only an error in coding can produce it. So, during development testing, I use asserts to catch common coding errors and to help debug them. In production, I drop the overhead of all the extra \"can never happen\" testing. (If it could reasonably happen, then I shouldn't use an assert; I should check the condition with an \"if\" and then throw an exception.)",
            "id": "e157694953d6dd9250844e3125a677d5"
          },
          {
            "type": "html",
            "text": "-- [[Jeff Grigg]]",
            "id": "cf2bb66b90bb3600e32f4afaed46d2d4"
          },
          {
            "type": "html",
            "text": "<i>How about refactoring your code so that you are using one data structure, rather than a list and an array? The error couldn't occur if you do that.</i>",
            "id": "04c8717ed833dafc7405adca1394c0dc"
          },
          {
            "type": "html",
            "text": "\nTrue, it's generally better to have an array of objects than artificially synchronized arrays of attributes. But there are also situations for keeping them separate. If the input is a set of commands or SQL queries to execute, and the output is the set of results to return, then mixing the input with the output may mean that you'll have to rework all the data again to get the desired output. And all this processing does nothing but create more opportunities for useful assertions: Like, after copying the input statements/queries to the new list of objects for more convenient processing, you'd want to assert that you still have the same number of objects as you had queries, wouldn't you? If you had lost some, then something must have gone dreadfully wrong. -- [[Jeff Grigg]]",
            "id": "84e3da24a95b350798cf79329158fe8d"
          },
          {
            "type": "html",
            "text": "\nTo some extent, [[Once And Only Once]] by reducing redundancy tends to fix automatically problems you might otherwise catch by assertions. However, there's still plenty of room for checks. -- [[Martin Pool]]",
            "id": "60b660dbc47f0b38031c8033c3a2c8aa"
          },
          {
            "type": "html",
            "text": "\nI find assertions particularly valuable to test pre-conditions. Note: this is not the same as checking parameters. All of the arguments may well be just fine, but if the object is not ready to have you call a particular method, you have a coding error (in the caller). -- [[Russell Gold]]",
            "id": "b8531f1df1a1053965692414a31b518d"
          },
          {
            "type": "html",
            "text": "\nAssertions are related to type checking. Both assertions and type checking are [[Seat Belts]] you can wear to protect yourself from bugs. If you don't want them you don't have to [[Use Assertions]] and you can use a dynamically typed language like [[Python Language]]. -- [[Oren Tirosh]]",
            "id": "358ee561e245a4d4e329283290ad341d"
          },
          {
            "type": "html",
            "text": "\nAssertions aren't [[Seat Belts]] - they're [[Crash Test Dummies]]. [[Seat Belts]] are [[Defensive Programming]]. -- [[Zygo Blaxell]]",
            "id": "b19c040ad0a35705a800693be555aaf5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e2b08a1ad0d22a9902640aa3951ad72d"
          },
          {
            "type": "html",
            "text": "I habitually assert False in a \"Case Else\". On more than one occasion this has caught people passing in data that the routine wasn't intended to handle. -- [[Dominic Cronin]]",
            "id": "4db2c4ffb54ce2a252f258ef00b1874a"
          },
          {
            "type": "html",
            "text": "<i>I habitually use polymorphism and [[Law Of Demeter]]. I don't have to worry about \"case else\" ;)</i>",
            "id": "6f98c880740524817dbfa21e64f15e45"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e2b08a1ad0d22a9902640aa3951ad72d"
          },
          {
            "type": "html",
            "text": "Unless you are saying your testing is perfect you need asserts to catch runtime problems. [[Unit Test]]s are not system tests and lots of problems are found at system test time. They would not be found without [[Design By Contract]]/asserts.",
            "id": "406bbddf681a43cd8b768a8e45f9679c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e2b08a1ad0d22a9902640aa3951ad72d"
          },
          {
            "type": "html",
            "text": "There is no way that [[Unit Test]]s could \"test\" the conditions I'm asserting.",
            "id": "81f81640851cc3ea56943c6e9a31f5db"
          },
          {
            "type": "html",
            "text": "\nThe point being the [[Unit Test]]s almost always test to make something works. They don't catch programmer error or system level effects not reproducible in a [[Unit Test]].",
            "id": "3e75413ec06be42ac0fd15d185dac427"
          },
          {
            "type": "html",
            "text": "<i>(Damn that was quick - now I have to completely re-write what I said, because what I said was not what I meant but I lost it in your save)</i>",
            "id": "df3b4fdb117370dcf53dc79fb256a226"
          },
          {
            "type": "html",
            "text": "<i>Is this a fair summary of your situation:</i>",
            "id": "c9a9b189a6c8d3a8d5a581ffc0de12e5"
          },
          {
            "type": "html",
            "text": " <i>Your code works, the [[Unit Test]]s prove that</i>",
            "id": "3a43798782e03b27b068c0419b606ce1"
          },
          {
            "type": "html",
            "text": " <i>There a known consistency conditions that only fail when some other part of the system screws up</i>",
            "id": "9b838a84a2f75b8511b0fbfa0ab2f45b"
          },
          {
            "type": "html",
            "text": " <i>You put assertion to check the consistency conditions, thus ensuring that if someone else does screw up the system fails early and loudly</i>",
            "id": "2aef5e9355b6b0581dfc71f0c3ec713b"
          },
          {
            "type": "html",
            "text": "<i>Is that what you're trying to say?</i>",
            "id": "10a1fceea78da99d9c2810b5e2392659"
          },
          {
            "type": "html",
            "text": "\nSort of. Unit tests show that what you tested works in the environment in which you\ntested it. The system doesn't have to screw up necessarily. Extreme load, likely\nin good acceptance/unit tests, changes everything. I work in large distributed embedded\nsystems where this is very true. Not so true in other areas. ",
            "id": "d85193ce1ed78142ed25483491d7b304"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e2b08a1ad0d22a9902640aa3951ad72d"
          },
          {
            "type": "html",
            "text": "I may be fighting city hall here, but you should [[Ship With Assertions On]] (and discuss it there).",
            "id": "f511d412870448bddc4586782586b22e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e2b08a1ad0d22a9902640aa3951ad72d"
          },
          {
            "type": "html",
            "text": "[[Category Assertions]]",
            "id": "f022656e5b856acba8f2962ec93cff47"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?UseAssertions c2.com]",
            "id": "c06a590c223fbe3a52272f4b86ecc66a"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1705935884162
    },
    {
      "type": "edit",
      "id": "2b7179c253b5c91506706e703cba139d",
      "item": {
        "type": "html",
        "text": "It is also important to remember that standard operating procedure for assertions is to turn them off before doing a build that will be sent to real customers; In this case I'd argue that [[Bairs Law]] does apply, but the conclusion that assertions should not be used by the programmer does not follow.",
        "id": "2b7179c253b5c91506706e703cba139d"
      },
      "date": 1705935919814
    },
    {
      "type": "fork",
      "site": "mold.dreyeck.ch",
      "date": 1706292497937
    }
  ]
}