{
  "title": "Inventors Paradox",
  "story": [
    {
      "type": "html",
      "text": "One of the five patterns used to describe adaptive programming in the Demeter group at [[Northeastern University]].",
      "id": "6e494cec77eb4236c9d70c51528b769b"
    },
    {
      "type": "html",
      "text": "<b>Name </b>",
      "id": "aa38fecb4d37cf557a57ae47187a2fbe"
    },
    {
      "type": "html",
      "text": "\nInventor's Paradox (IP)",
      "id": "f9f6d0414a1ea7629c581bef69295a35"
    },
    {
      "type": "html",
      "text": "<b>Purpose </b>",
      "id": "6cdd3d1bddc6e3b75bb08a7a609b9a4a"
    },
    {
      "type": "html",
      "text": "\nSimplify by solving a more general problem. Applied to programming this means to simplify by writing a more general program [ Adaptive Programming Book ]. Split the program into several loosely-coupled building blocks or aspects. Avoid unnecessary spreading or duplication of information in program building blocks to improve understandability and to reduce size of programs. Use appropriate filters to select what is relevant to one building block from other building blocks. (This pattern is not about any kind of abstraction mechanism in programming but it focusses on those abstraction mechanisms which significantly simplify the solution by solving a much more general problem.)",
      "id": "1bacacb2fd9c820e03bdcc2a1c560305"
    },
    {
      "type": "html",
      "text": "...",
      "id": "e683a23537fef324816454a8a9dca6a2"
    },
    {
      "type": "html",
      "text": "\nSee [http://www.ccs.neu.edu/research/demeter/adaptive-patterns/AOP/IP.html www.ccs.neu.edu]",
      "id": "45c362671ac4d06ffcc44ad0e853080a"
    },
    {
      "type": "html",
      "text": "\nSee also [[Problem Frame]]",
      "id": "941388c4fb24d1c19639ccd5a4a3a813"
    },
    {
      "type": "html",
      "text": "-vs- [[You Arent Gonna Need It]] -- XP's idea, which is nearly the opposite.",
      "id": "bd88db2bf2283e072b3a5d18e8715723"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "42dc9c28a6cfdf94d896205e06c4b43e"
    },
    {
      "type": "html",
      "text": "\nExample: You have a [[Mutually Recursive]] data structure (A->B, B->A) and must process it (alls A and B). Maybe it is simpler to have A and B both be a C and simplify your recursion to just C->C with some special cases in.",
      "id": "de18ad47b57979f502136bc98fd7f242"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "42dc9c28a6cfdf94d896205e06c4b43e"
    },
    {
      "type": "html",
      "text": "\nWidely credited to G. Polya's book [[How To Solve It]].  At [http://www.cut-the-knot.com/Generalization/epairs.shtml www.cut-the-knot.com] he is quoted:",
      "id": "06c076635474b93394282c19a0e3f9f0"
    },
    {
      "type": "html",
      "text": "The more ambitious plan may have more chances of success ... provided it is not based on a mere pretension but on some vision of the things beyond those immediately present.",
      "id": "b94f64b0dce2d6a6f57ca3aacf316589"
    },
    {
      "type": "html",
      "text": "\nThat definitely places it in stark contrast to [[You Arent Gonna Need It]], which seems to explicitly oppose any sort of \"vision of the things beyond those immediately present\".",
      "id": "3f852f78c0f7f8d8d3fdb475f088a9a1"
    },
    {
      "type": "html",
      "text": "\nSee also: [http://www.nous.org.uk/inventorparadox.html www.nous.org.uk]",
      "id": "58d6baa47a55078ed28641ca471b30f0"
    },
    {
      "type": "html",
      "text": "-- [[Jason Bucata]]",
      "id": "0674a18d4adfdabbddc9b8ac9d5684b0"
    },
    {
      "type": "html",
      "text": "\nBut [[You Arent Gonna Need It]] is accompanied by [[The Simplest Thing That Could Possibly Work]].  If the simplest thing is the general case, in XP you would write the general case.",
      "id": "2b8ea21a132a15e261e663646ea9586a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "42dc9c28a6cfdf94d896205e06c4b43e"
    },
    {
      "type": "html",
      "text": "\nIn the first example I ever saw of solving a problem by generalising, the general case could be solved recursively.  You had to solve the general case to solve the special case, at least by the simplest method.",
      "id": "65d79a2c2831c8724f82e808d055f72d"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?InventorsParadox c2.com]",
      "id": "62d0f6204fc219ccccf8d0fcbd40b40b"
    }
  ],
  "journal": [
    {
      "date": 1417196337000,
      "id": "b98f0b51ef5c21523581ef0cba5bc0ba",
      "type": "create",
      "item": {
        "title": "Inventors Paradox",
        "story": [
          {
            "type": "html",
            "text": "One of the five patterns used to describe adaptive programming in the Demeter group at [[Northeastern University]].",
            "id": "6e494cec77eb4236c9d70c51528b769b"
          },
          {
            "type": "html",
            "text": "<b>Name </b>",
            "id": "aa38fecb4d37cf557a57ae47187a2fbe"
          },
          {
            "type": "html",
            "text": "\nInventor's Paradox (IP)",
            "id": "f9f6d0414a1ea7629c581bef69295a35"
          },
          {
            "type": "html",
            "text": "<b>Purpose </b>",
            "id": "6cdd3d1bddc6e3b75bb08a7a609b9a4a"
          },
          {
            "type": "html",
            "text": "\nSimplify by solving a more general problem. Applied to programming this means to simplify by writing a more general program [ Adaptive Programming Book ]. Split the program into several loosely-coupled building blocks or aspects. Avoid unnecessary spreading or duplication of information in program building blocks to improve understandability and to reduce size of programs. Use appropriate filters to select what is relevant to one building block from other building blocks. (This pattern is not about any kind of abstraction mechanism in programming but it focusses on those abstraction mechanisms which significantly simplify the solution by solving a much more general problem.)",
            "id": "1bacacb2fd9c820e03bdcc2a1c560305"
          },
          {
            "type": "html",
            "text": "...",
            "id": "e683a23537fef324816454a8a9dca6a2"
          },
          {
            "type": "html",
            "text": "\nSee [http://www.ccs.neu.edu/research/demeter/adaptive-patterns/AOP/IP.html www.ccs.neu.edu]",
            "id": "45c362671ac4d06ffcc44ad0e853080a"
          },
          {
            "type": "html",
            "text": "\nSee also [[Problem Frame]]",
            "id": "941388c4fb24d1c19639ccd5a4a3a813"
          },
          {
            "type": "html",
            "text": "-vs- [[You Arent Gonna Need It]] -- XP's idea, which is nearly the opposite.",
            "id": "bd88db2bf2283e072b3a5d18e8715723"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "42dc9c28a6cfdf94d896205e06c4b43e"
          },
          {
            "type": "html",
            "text": "\nExample: You have a [[Mutually Recursive]] data structure (A->B, B->A) and must process it (alls A and B). Maybe it is simpler to have A and B both be a C and simplify your recursion to just C->C with some special cases in.",
            "id": "de18ad47b57979f502136bc98fd7f242"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "42dc9c28a6cfdf94d896205e06c4b43e"
          },
          {
            "type": "html",
            "text": "\nWidely credited to G. Polya's book [[How To Solve It]].  At [http://www.cut-the-knot.com/Generalization/epairs.shtml www.cut-the-knot.com] he is quoted:",
            "id": "06c076635474b93394282c19a0e3f9f0"
          },
          {
            "type": "html",
            "text": "The more ambitious plan may have more chances of success ... provided it is not based on a mere pretension but on some vision of the things beyond those immediately present.",
            "id": "b94f64b0dce2d6a6f57ca3aacf316589"
          },
          {
            "type": "html",
            "text": "\nThat definitely places it in stark contrast to [[You Arent Gonna Need It]], which seems to explicitly oppose any sort of \"vision of the things beyond those immediately present\".",
            "id": "3f852f78c0f7f8d8d3fdb475f088a9a1"
          },
          {
            "type": "html",
            "text": "\nSee also: [http://www.nous.org.uk/inventorparadox.html www.nous.org.uk]",
            "id": "58d6baa47a55078ed28641ca471b30f0"
          },
          {
            "type": "html",
            "text": "-- [[Jason Bucata]]",
            "id": "0674a18d4adfdabbddc9b8ac9d5684b0"
          },
          {
            "type": "html",
            "text": "\nBut [[You Arent Gonna Need It]] is accompanied by [[The Simplest Thing That Could Possibly Work]].  If the simplest thing is the general case, in XP you would write the general case.",
            "id": "2b8ea21a132a15e261e663646ea9586a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "42dc9c28a6cfdf94d896205e06c4b43e"
          },
          {
            "type": "html",
            "text": "\nIn the first example I ever saw of solving a problem by generalising, the general case could be solved recursively.  You had to solve the general case to solve the special case, at least by the simplest method.",
            "id": "65d79a2c2831c8724f82e808d055f72d"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?InventorsParadox c2.com]",
            "id": "62d0f6204fc219ccccf8d0fcbd40b40b"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "wiki.sfw.c2.com",
      "date": 1651831585260
    }
  ]
}