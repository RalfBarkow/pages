{
  "title": "Bootstrapping minimal reflective language kernels",
  "story": [
    {
      "type": "video",
      "id": "ffa1ae6f4704831a",
      "text": "YOUTUBE 6F86ogKejhU\nBootstrapping minimal reflective language kernels\nby Pablo Tesone with Carolina Hernandez\n\nat FOSDEM 2020"
    },
    {
      "type": "paragraph",
      "id": "4dfa9e9f4080ca66",
      "text": "In this talk, we present a series of tools to bootstrapping smaller crafted kernel languages."
    },
    {
      "type": "paragraph",
      "id": "bc8671711caf013a",
      "text": "[https://youtu.be/6F86ogKejhU?t=354 5:54] â€“  [[Carolina Hernandez]]"
    },
    {
      "type": "paragraph",
      "id": "2e7e299a5575594e",
      "text": "Smaller kernels allow us to run applications in resources limited environments (IoT).\nAlso, it allows us to modify and study language modifications and extensions easing the evolution of new and existing languages.\nThese experiments are performed in a fully debuggable simulated environment, allowing us to overcome common mistakes and problems.\nThis is not only an experimental environment as it allows us to generate production-ready language kernels.\n\n\nWe use Pharo to generate language kernels that are intended to run on top of the Pharo VM.\nThese tools are also used to bootstrap bigger systems as Pharo itself.\nThe current explosion of embedded systems (i.e., IoT, Edge Computing) implies the need for generating tailored and customized software for them. Different approaches have been taken for building, deploying, updating and debugging these systems, although there is still no standard way to do this.\nThe goal of this talk is to present the tools and techniques necessary for building, debugging, and deploying custom small language kernels.\n\n\nKernel languages are generated from a combination of language definition and the description of the elements and processes to generate the runtime.\nKernel languages must be consistent internally and in relation with the environment where they run (e.g. the VM, the OS)\nLanguages that are bootstrapped from their source code are not new.\nHowever, correctly defining a working consistent language kernel is a complex manual task without support from tools to debug or test before the generation of the language and its deployment.\nThis complexity limits the study of new languages, the creation of prototypes and the evolution of existing ones.\n\n\nWe present a set of tools to overcome the different difficulties that bootstrapping a reflective language kernel presents. Allowing us to simulate the kernel, debug it, validate it and generate it.\nMoreover, our proposed approach offers tools to detect many common mistakes and causes of error.\n\n\nWe center our solution in reflective object-oriented languages that run on top of a VM.\nOur tool uses Pharo and generates languages to run on top of its VM.\n\nRoom: AW1.125\nScheduled start: 2020-02-02 10:10:00\nLizenz\nCreative Commons-Lizenz mit Quellenangabe (Wiederverwendung erlaubt)"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Bootstrapping minimal reflective language kernels",
        "story": []
      },
      "date": 1627632608624
    },
    {
      "item": {
        "type": "factory",
        "id": "72f95b3c4a4ef69c"
      },
      "id": "72f95b3c4a4ef69c",
      "type": "add",
      "date": 1627632617185
    },
    {
      "type": "remove",
      "id": "72f95b3c4a4ef69c",
      "date": 1627632618654
    },
    {
      "item": {
        "type": "factory",
        "id": "ffa1ae6f4704831a"
      },
      "id": "ffa1ae6f4704831a",
      "type": "add",
      "date": 1627632620084
    },
    {
      "type": "edit",
      "id": "ffa1ae6f4704831a",
      "item": {
        "type": "video",
        "id": "ffa1ae6f4704831a",
        "text": "YOUTUBE 6F86ogKejhU"
      },
      "date": 1627632635179
    },
    {
      "type": "edit",
      "id": "ffa1ae6f4704831a",
      "item": {
        "type": "video",
        "id": "ffa1ae6f4704831a",
        "text": "YOUTUBE 6F86ogKejhU\nBootstrapping minimal reflective language kernels\n"
      },
      "date": 1627632653691
    },
    {
      "type": "edit",
      "id": "ffa1ae6f4704831a",
      "item": {
        "type": "video",
        "id": "ffa1ae6f4704831a",
        "text": "YOUTUBE 6F86ogKejhU\nBootstrapping minimal reflective language kernels\nby Pablo Tesone\n\nAt: FOSDEM 2020\nhttps://video.fosdem.org/2020/AW1.125..."
      },
      "date": 1627632664540
    },
    {
      "item": {
        "type": "factory",
        "id": "4dfa9e9f4080ca66"
      },
      "id": "4dfa9e9f4080ca66",
      "type": "add",
      "after": "ffa1ae6f4704831a",
      "date": 1627632691805
    },
    {
      "type": "edit",
      "id": "4dfa9e9f4080ca66",
      "item": {
        "type": "paragraph",
        "id": "4dfa9e9f4080ca66",
        "text": "n this talk, we present a series of tools to bootstrapping smaller crafted kernel languages.\nSmaller kernels allow us to run applications in resources limited environments (IoT).\nAlso, it allows us to modify and study language modifications and extensions easing the evolution of new and existing languages.\nThese experiments are performed in a fully debuggable simulated environment, allowing us to overcome common mistakes and problems.\nThis is not only an experimental environment as it allows us to generate production-ready language kernels.\n\n\nWe use Pharo to generate language kernels that are intended to run on top of the Pharo VM.\nThese tools are also used to bootstrap bigger systems as Pharo itself.\nThe current explosion of embedded systems (i.e., IoT, Edge Computing) implies the need for generating tailored and customized software for them. Different approaches have been taken for building, deploying, updating and debugging these systems, although there is still no standard way to do this.\nThe goal of this talk is to present the tools and techniques necessary for building, debugging, and deploying custom small language kernels.\n\n\nKernel languages are generated from a combination of language definition and the description of the elements and processes to generate the runtime.\nKernel languages must be consistent internally and in relation with the environment where they run (e.g. the VM, the OS)\nLanguages that are bootstrapped from their source code are not new.\nHowever, correctly defining a working consistent language kernel is a complex manual task without support from tools to debug or test before the generation of the language and its deployment.\nThis complexity limits the study of new languages, the creation of prototypes and the evolution of existing ones.\n\n\nWe present a set of tools to overcome the different difficulties that bootstrapping a reflective language kernel presents. Allowing us to simulate the kernel, debug it, validate it and generate it.\nMoreover, our proposed approach offers tools to detect many common mistakes and causes of error.\n\n\nWe center our solution in reflective object-oriented languages that run on top of a VM.\nOur tool uses Pharo and generates languages to run on top of its VM.\n\nRoom: AW1.125\nScheduled start: 2020-02-02 10:10:00\nLizenz\nCreative Commons-Lizenz mit Quellenangabe (Wiederverwendung erlaubt)"
      },
      "date": 1627632693960
    },
    {
      "type": "edit",
      "id": "4dfa9e9f4080ca66",
      "item": {
        "type": "paragraph",
        "id": "4dfa9e9f4080ca66",
        "text": "In this talk, we present a series of tools to bootstrapping smaller crafted kernel languages.\nSmaller kernels allow us to run applications in resources limited environments (IoT).\nAlso, it allows us to modify and study language modifications and extensions easing the evolution of new and existing languages.\nThese experiments are performed in a fully debuggable simulated environment, allowing us to overcome common mistakes and problems.\nThis is not only an experimental environment as it allows us to generate production-ready language kernels.\n\n\nWe use Pharo to generate language kernels that are intended to run on top of the Pharo VM.\nThese tools are also used to bootstrap bigger systems as Pharo itself.\nThe current explosion of embedded systems (i.e., IoT, Edge Computing) implies the need for generating tailored and customized software for them. Different approaches have been taken for building, deploying, updating and debugging these systems, although there is still no standard way to do this.\nThe goal of this talk is to present the tools and techniques necessary for building, debugging, and deploying custom small language kernels.\n\n\nKernel languages are generated from a combination of language definition and the description of the elements and processes to generate the runtime.\nKernel languages must be consistent internally and in relation with the environment where they run (e.g. the VM, the OS)\nLanguages that are bootstrapped from their source code are not new.\nHowever, correctly defining a working consistent language kernel is a complex manual task without support from tools to debug or test before the generation of the language and its deployment.\nThis complexity limits the study of new languages, the creation of prototypes and the evolution of existing ones.\n\n\nWe present a set of tools to overcome the different difficulties that bootstrapping a reflective language kernel presents. Allowing us to simulate the kernel, debug it, validate it and generate it.\nMoreover, our proposed approach offers tools to detect many common mistakes and causes of error.\n\n\nWe center our solution in reflective object-oriented languages that run on top of a VM.\nOur tool uses Pharo and generates languages to run on top of its VM.\n\nRoom: AW1.125\nScheduled start: 2020-02-02 10:10:00\nLizenz\nCreative Commons-Lizenz mit Quellenangabe (Wiederverwendung erlaubt)"
      },
      "date": 1627632701801
    },
    {
      "type": "edit",
      "id": "ffa1ae6f4704831a",
      "item": {
        "type": "video",
        "id": "ffa1ae6f4704831a",
        "text": "YOUTUBE 6F86ogKejhU\nBootstrapping minimal reflective language kernels\nby Pablo Tesone with Carolina Hernandez\n\nAt: FOSDEM 2020\nhttps://video.fosdem.org/2020/AW1.125..."
      },
      "date": 1627632879389
    },
    {
      "type": "edit",
      "id": "ffa1ae6f4704831a",
      "item": {
        "type": "video",
        "id": "ffa1ae6f4704831a",
        "text": "YOUTUBE 6F86ogKejhU\nBootstrapping minimal reflective language kernels\nby Pablo Tesone with Carolina Hernandez\n\nat FOSDEM 2020\nhttps://video.fosdem.org/2020/AW1.125..."
      },
      "date": 1627632892508
    },
    {
      "type": "edit",
      "id": "ffa1ae6f4704831a",
      "item": {
        "type": "video",
        "id": "ffa1ae6f4704831a",
        "text": "YOUTUBE 6F86ogKejhU\nBootstrapping minimal reflective language kernels\nby Pablo Tesone with Carolina Hernandez\n\nat FOSDEM 2020"
      },
      "date": 1627632904744
    },
    {
      "type": "edit",
      "id": "4dfa9e9f4080ca66",
      "item": {
        "type": "paragraph",
        "id": "4dfa9e9f4080ca66",
        "text": "In this talk, we present a series of tools to bootstrapping smaller crafted kernel languages."
      },
      "date": 1627633079018
    },
    {
      "type": "add",
      "id": "bc8671711caf013a",
      "item": {
        "type": "paragraph",
        "id": "bc8671711caf013a",
        "text": "5:54 "
      },
      "after": "4dfa9e9f4080ca66",
      "date": 1627633093890
    },
    {
      "type": "add",
      "id": "2e7e299a5575594e",
      "item": {
        "type": "paragraph",
        "id": "2e7e299a5575594e",
        "text": "Smaller kernels allow us to run applications in resources limited environments (IoT).\nAlso, it allows us to modify and study language modifications and extensions easing the evolution of new and existing languages.\nThese experiments are performed in a fully debuggable simulated environment, allowing us to overcome common mistakes and problems.\nThis is not only an experimental environment as it allows us to generate production-ready language kernels.\n\n\nWe use Pharo to generate language kernels that are intended to run on top of the Pharo VM.\nThese tools are also used to bootstrap bigger systems as Pharo itself.\nThe current explosion of embedded systems (i.e., IoT, Edge Computing) implies the need for generating tailored and customized software for them. Different approaches have been taken for building, deploying, updating and debugging these systems, although there is still no standard way to do this.\nThe goal of this talk is to present the tools and techniques necessary for building, debugging, and deploying custom small language kernels.\n\n\nKernel languages are generated from a combination of language definition and the description of the elements and processes to generate the runtime.\nKernel languages must be consistent internally and in relation with the environment where they run (e.g. the VM, the OS)\nLanguages that are bootstrapped from their source code are not new.\nHowever, correctly defining a working consistent language kernel is a complex manual task without support from tools to debug or test before the generation of the language and its deployment.\nThis complexity limits the study of new languages, the creation of prototypes and the evolution of existing ones.\n\n\nWe present a set of tools to overcome the different difficulties that bootstrapping a reflective language kernel presents. Allowing us to simulate the kernel, debug it, validate it and generate it.\nMoreover, our proposed approach offers tools to detect many common mistakes and causes of error.\n\n\nWe center our solution in reflective object-oriented languages that run on top of a VM.\nOur tool uses Pharo and generates languages to run on top of its VM.\n\nRoom: AW1.125\nScheduled start: 2020-02-02 10:10:00\nLizenz\nCreative Commons-Lizenz mit Quellenangabe (Wiederverwendung erlaubt)"
      },
      "after": "bc8671711caf013a",
      "date": 1627633095933
    },
    {
      "type": "edit",
      "id": "bc8671711caf013a",
      "item": {
        "type": "paragraph",
        "id": "bc8671711caf013a",
        "text": "[https://youtu.be/6F86ogKejhU?t=354 5:54] â€“  "
      },
      "date": 1627633115275
    },
    {
      "type": "edit",
      "id": "bc8671711caf013a",
      "item": {
        "type": "paragraph",
        "id": "bc8671711caf013a",
        "text": "[https://youtu.be/6F86ogKejhU?t=354 5:54] â€“  Carolina Hernandez"
      },
      "date": 1627633122782
    },
    {
      "type": "edit",
      "id": "bc8671711caf013a",
      "item": {
        "type": "paragraph",
        "id": "bc8671711caf013a",
        "text": "[https://youtu.be/6F86ogKejhU?t=354 5:54] â€“  [[Carolina Hernandez]]"
      },
      "date": 1627633175994
    }
  ]
}