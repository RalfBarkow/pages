{
  "title": "BrAptitude",
  "story": [
    {
      "type": "markdown",
      "id": "71a761dd33133f25",
      "text": "I define how widgets look. In addition to the BrViewModel I listen to UI events and update decoration (non meaningful) elements of the widgets.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "db2e2f227a6d2854",
      "text": "Looks install themselves on [[Brick]] graphical widgets, and are able to modify the [[Bloc]] element tree of the widget.  As such, they are very powerful, but should not be used as a hammer for all situations, in particular:\n\n- They should never affect the API of the widget.\n- They should not be used to add or remove content in the widget.  Element composition is a better solution for this."
    },
    {
      "type": "paragraph",
      "id": "01cc8901cfdc3104",
      "text": "See also [[Composition]]."
    },
    {
      "type": "pagefold",
      "id": "028b9652d8f0de00",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "cfd7f90a1a2dba23",
      "text": "⇒ [[Sideways Composition]]"
    },
    {
      "type": "markdown",
      "id": "fce1fa6b92549200",
      "text": "> This notion of sideways composition also goes back to PARC. Back then in the '70s, it was called \"aspects,\" but that word means something somewhat different now. So when you look at these various things, you can see \"oh, the thing is a collection,\" it's got stuff about its colors and borders and other kinds of things here. And here's one that says \"as object.\" Now, in an inheritance system, the object would be way up at the end of the inheritance system, but in the Sideways Composition object system, it's going to be one of the Traits we're looking at. It's a view of the object as object, and we tried to think about what would be an interesting way of showing this **idea of \"meta,\"** so here's one where what I'm going to do is suppress all the costumes on all of the objects, and I think this will help you see that everything is sort of abstractly the same here."
    },
    {
      "type": "paragraph",
      "id": "fe0b2101bb2c1706",
      "text": "-- [https://discord.com/channels/729445214812504107/1015167308521549864/1015715056014598145 discord]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "BrAptitude",
        "story": []
      },
      "date": 1667434654376
    },
    {
      "item": {
        "type": "factory",
        "id": "71a761dd33133f25"
      },
      "id": "71a761dd33133f25",
      "type": "add",
      "date": 1667434659697
    },
    {
      "type": "edit",
      "id": "71a761dd33133f25",
      "item": {
        "type": "markdown",
        "id": "71a761dd33133f25",
        "text": "I define how widgets look. In addition to the BrViewModel I listen to UI events and update decoration (non meaningful) elements of the widgets.\n\nLooks install themselves on Brick graphical widgets, and are able to modify the Bloc element tree of the widget.  As such, they are very powerful, but should not be used as a hammer for all situations, in particular:\n\n- They should never affect the API of the widget.\n- They should not be used to add or remove content in the widget.  Element composition is a better solution for this."
      },
      "date": 1667434662452
    },
    {
      "type": "edit",
      "id": "71a761dd33133f25",
      "item": {
        "type": "markdown",
        "id": "71a761dd33133f25",
        "text": "I define how widgets look. In addition to the BrViewModel I listen to UI events and update decoration (non meaningful) elements of the widgets.\n\n\n"
      },
      "date": 1667434724839
    },
    {
      "type": "add",
      "id": "db2e2f227a6d2854",
      "item": {
        "type": "markdown",
        "id": "db2e2f227a6d2854",
        "text": "Looks install themselves on Brick graphical widgets, and are able to modify the Bloc element tree of the widget.  As such, they are very powerful, but should not be used as a hammer for all situations, in particular:\n\n- They should never affect the API of the widget.\n- They should not be used to add or remove content in the widget.  Element composition is a better solution for this."
      },
      "after": "71a761dd33133f25",
      "date": 1667434734639
    },
    {
      "item": {
        "type": "factory",
        "id": "01cc8901cfdc3104"
      },
      "id": "01cc8901cfdc3104",
      "type": "add",
      "after": "db2e2f227a6d2854",
      "date": 1667434811687
    },
    {
      "type": "edit",
      "id": "01cc8901cfdc3104",
      "item": {
        "type": "paragraph",
        "id": "01cc8901cfdc3104",
        "text": "See also [[Composition]]."
      },
      "date": 1667434821305
    },
    {
      "id": "028b9652d8f0de00",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "028b9652d8f0de00",
        "text": "~"
      },
      "after": "01cc8901cfdc3104",
      "date": 1667435190856
    },
    {
      "id": "cfd7f90a1a2dba23",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "cfd7f90a1a2dba23",
        "text": "⇒ [[Sideways Composition]]"
      },
      "after": "028b9652d8f0de00",
      "date": 1667435195373
    },
    {
      "id": "fce1fa6b92549200",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "fce1fa6b92549200",
        "text": "> This notion of sideways composition also goes back to PARC. Back then in the '70s, it was called \"aspects,\" but that word means something somewhat different now. So when you look at these various things, you can see \"oh, the thing is a collection,\" it's got stuff about its colors and borders and other kinds of things here. And here's one that says \"as object.\" Now, in an inheritance system, the object would be way up at the end of the inheritance system, but in the Sideways Composition object system, it's going to be one of the Traits we're looking at. It's a view of the object as object, and we tried to think about what would be an interesting way of showing this **idea of \"meta,\"** so here's one where what I'm going to do is suppress all the costumes on all of the objects, and I think this will help you see that everything is sort of abstractly the same here."
      },
      "after": "cfd7f90a1a2dba23",
      "date": 1667435197720
    },
    {
      "item": {
        "type": "factory",
        "id": "fe0b2101bb2c1706"
      },
      "id": "fe0b2101bb2c1706",
      "type": "add",
      "after": "fce1fa6b92549200",
      "date": 1667435285638
    },
    {
      "type": "edit",
      "id": "fe0b2101bb2c1706",
      "item": {
        "type": "paragraph",
        "id": "fe0b2101bb2c1706",
        "text": "-- [https://discord.com/channels/729445214812504107/1015167308521549864/1015715056014598145 discord]"
      },
      "date": 1667435307046
    },
    {
      "type": "edit",
      "id": "db2e2f227a6d2854",
      "item": {
        "type": "markdown",
        "id": "db2e2f227a6d2854",
        "text": "Looks install themselves on [[Brick]] graphical widgets, and are able to modify the Bloc element tree of the widget.  As such, they are very powerful, but should not be used as a hammer for all situations, in particular:\n\n- They should never affect the API of the widget.\n- They should not be used to add or remove content in the widget.  Element composition is a better solution for this."
      },
      "date": 1667435352141
    },
    {
      "type": "edit",
      "id": "db2e2f227a6d2854",
      "item": {
        "type": "markdown",
        "id": "db2e2f227a6d2854",
        "text": "Looks install themselves on [[Brick]] graphical widgets, and are able to modify the [[Bloc]] element tree of the widget.  As such, they are very powerful, but should not be used as a hammer for all situations, in particular:\n\n- They should never affect the API of the widget.\n- They should not be used to add or remove content in the widget.  Element composition is a better solution for this."
      },
      "date": 1667435371130
    }
  ]
}