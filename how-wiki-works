{
  "title": "How Wiki Works",
  "story": [
    {
      "type": "paragraph",
      "id": "2ebceb910eb506ab",
      "text": "When federated wiki started in 2011 it used jquery-ajar to POST to ruby-sinatra on the server. JSON format was already popular in 2011 so we went with the flow. "
    },
    {
      "type": "paragraph",
      "id": "ae9d183b82bb3396",
      "text": "Within a year the ruby-sinatra was cloned as node-express which worked very much like ruby-sinatra and was easier to install because node was young then without so many variations. I still run some ol ruby-express sites just to prove they are interoperable.\n\n"
    },
    {
      "type": "paragraph",
      "id": "69f602527f4c2a93",
      "text": "We only ever write to the “origin” server though the client will read from many “remote” sites one page at a time. We POST a page to the server when it has been forked from somewhere else. "
    },
    {
      "type": "paragraph",
      "id": "3ec48f687725f04c",
      "text": "A page consists of a title, an array of items called the story and an array of edit actions called the journal. The client side editor will POST actions to change one item at a time which will update an item in the story and add an action to the journal. When this server turn-around completes the clients copy of the journal is extended similarly.\n\n"
    },
    {
      "type": "paragraph",
      "id": "15e1185d772e5e71",
      "text": "Items and actions have a type field. For items the type indicates what kind of markup it is expected to hold. Type paragraph is the simplest being plain text and hyperlinks alone. Type markdown is popular and offers italic, bold, bullets and headings. We extend markdown with our specific conventions for links. "
    },
    {
      "type": "paragraph",
      "id": "d4010b799ddef2d8",
      "text": "Most items use a standard text editor if they support editing at all. Type fivestar has its own click handling for selecting one to five star ratings. A click on a star POSTS and edit action to the server to record the selection. We have 40 or so different types tho not all are installed on every server. \n\n"
    },
    {
      "type": "paragraph",
      "id": "86374050da2d773d",
      "text": "Action types are limited and unchanging because they must be understood everywhere to recover the version history of a page. Actions are create, add, remove and move. "
    },
    {
      "type": "paragraph",
      "id": "7af76cf4533a7bed",
      "text": "Move is exceptional because our record understands that items can move around. Source code control systems that don’t include an editor just guess what happened when things are moved, and they usually guess wrong."
    },
    {
      "type": "pagefold",
      "id": "2c7277dbe77e832f",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "513ff92c515e23b4",
      "text": "[[JSON Schema]] in more detail with examples."
    },
    {
      "type": "paragraph",
      "id": "4cb4de1ff078e377",
      "text": "[[Where Pages Live]] and how they get there."
    },
    {
      "type": "paragraph",
      "id": "213a2826d80e4269",
      "text": "[[History of the Lineup]] as creative space."
    },
    {
      "type": "paragraph",
      "id": "8648b66179c107eb",
      "text": "[[Federating Foreign Servers]] as read-only participants."
    },
    {
      "type": "paragraph",
      "id": "d48b9e1d96a8e76f",
      "text": "[[Computational Plasticity]] provides a vision for the future."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "How Wiki Works",
        "story": []
      },
      "date": 1607617382911
    },
    {
      "item": {
        "type": "factory",
        "id": "2ebceb910eb506ab"
      },
      "id": "2ebceb910eb506ab",
      "type": "add",
      "date": 1607617400438
    },
    {
      "type": "edit",
      "id": "2ebceb910eb506ab",
      "item": {
        "type": "paragraph",
        "id": "2ebceb910eb506ab",
        "text": "When federated wiki started in 2011 it used jquery-ajar to POST to ruby-sinatra on the server. JSON format was already popular in 2011 so we went with the flow. Within a year the ruby-sinatra was cloned as node-express which worked very much like ruby-sinatra and was easier to install because node was young then without so many variations. I still run some ol ruby-express sites just to prove they are interoperable.\n\n"
      },
      "date": 1607617413897
    },
    {
      "type": "add",
      "id": "69f602527f4c2a93",
      "item": {
        "type": "paragraph",
        "id": "69f602527f4c2a93",
        "text": "We only ever write to the “origin” server though the client will read from many “remote” sites one page at a time. We POST a page to the server when it has been forked from somewhere else. A page consists of a title, an array of items called the story and an array of edit actions called the journal. The client side editor will POST actions to change one item at a time which will update an item in the story and add an action to the journal. When this server turn-around completes the clients copy of the journal is extended similarly.\n\n"
      },
      "after": "2ebceb910eb506ab",
      "date": 1607617418654
    },
    {
      "type": "add",
      "id": "15e1185d772e5e71",
      "item": {
        "type": "paragraph",
        "id": "15e1185d772e5e71",
        "text": "Items and actions have a type field. For items the type indicates what kind of markup it is expected to hold. Type paragraph is the simplest being plain text and hyperlinks alone. Type markdown is popular and offers italic, bold, bullets and headings. We extend markdown with our specific conventions for links. Most items use a standard text editor if they support editing at all. Type fivestar has its own click handling for selecting one to five star ratings. A click on a star POSTS and edit action to the server to record the selection. We have 40 or so different types tho not all are installed on every server. \n\n"
      },
      "after": "69f602527f4c2a93",
      "date": 1607617423156
    },
    {
      "type": "add",
      "id": "86374050da2d773d",
      "item": {
        "type": "paragraph",
        "id": "86374050da2d773d",
        "text": "Action types are limited and unchanging because they must be understood everywhere to recover the version history of a page. Actions are create, add, remove and move. Move is exceptional because our record understands that items can move around. Source code control systems that don’t include an editor just guess what happened when things are moved, and they usually guess wrong."
      },
      "after": "15e1185d772e5e71",
      "date": 1607617426756
    },
    {
      "type": "edit",
      "id": "2ebceb910eb506ab",
      "item": {
        "type": "paragraph",
        "id": "2ebceb910eb506ab",
        "text": "When federated wiki started in 2011 it used jquery-ajar to POST to ruby-sinatra on the server. JSON format was already popular in 2011 so we went with the flow. "
      },
      "date": 1607617478968
    },
    {
      "type": "add",
      "id": "ae9d183b82bb3396",
      "item": {
        "type": "paragraph",
        "id": "ae9d183b82bb3396",
        "text": "Within a year the ruby-sinatra was cloned as node-express which worked very much like ruby-sinatra and was easier to install because node was young then without so many variations. I still run some ol ruby-express sites just to prove they are interoperable.\n\n"
      },
      "after": "2ebceb910eb506ab",
      "date": 1607617480940
    },
    {
      "type": "edit",
      "id": "69f602527f4c2a93",
      "item": {
        "type": "paragraph",
        "id": "69f602527f4c2a93",
        "text": "We only ever write to the “origin” server though the client will read from many “remote” sites one page at a time. We POST a page to the server when it has been forked from somewhere else. "
      },
      "date": 1607617497316
    },
    {
      "type": "add",
      "id": "3ec48f687725f04c",
      "item": {
        "type": "paragraph",
        "id": "3ec48f687725f04c",
        "text": "A page consists of a title, an array of items called the story and an array of edit actions called the journal. The client side editor will POST actions to change one item at a time which will update an item in the story and add an action to the journal. When this server turn-around completes the clients copy of the journal is extended similarly.\n\n"
      },
      "after": "69f602527f4c2a93",
      "date": 1607617498980
    },
    {
      "type": "edit",
      "id": "15e1185d772e5e71",
      "item": {
        "type": "paragraph",
        "id": "15e1185d772e5e71",
        "text": "Items and actions have a type field. For items the type indicates what kind of markup it is expected to hold. Type paragraph is the simplest being plain text and hyperlinks alone. Type markdown is popular and offers italic, bold, bullets and headings. We extend markdown with our specific conventions for links. "
      },
      "date": 1607617527316
    },
    {
      "type": "add",
      "id": "d4010b799ddef2d8",
      "item": {
        "type": "paragraph",
        "id": "d4010b799ddef2d8",
        "text": "Most items use a standard text editor if they support editing at all. Type fivestar has its own click handling for selecting one to five star ratings. A click on a star POSTS and edit action to the server to record the selection. We have 40 or so different types tho not all are installed on every server. \n\n"
      },
      "after": "15e1185d772e5e71",
      "date": 1607617528900
    },
    {
      "type": "edit",
      "id": "86374050da2d773d",
      "item": {
        "type": "paragraph",
        "id": "86374050da2d773d",
        "text": "Action types are limited and unchanging because they must be understood everywhere to recover the version history of a page. Actions are create, add, remove and move. "
      },
      "date": 1607617541360
    },
    {
      "type": "add",
      "id": "7af76cf4533a7bed",
      "item": {
        "type": "paragraph",
        "id": "7af76cf4533a7bed",
        "text": "Move is exceptional because our record understands that items can move around. Source code control systems that don’t include an editor just guess what happened when things are moved, and they usually guess wrong."
      },
      "after": "86374050da2d773d",
      "date": 1607617542541
    },
    {
      "item": {
        "type": "factory",
        "id": "2c7277dbe77e832f"
      },
      "id": "2c7277dbe77e832f",
      "type": "add",
      "after": "7af76cf4533a7bed",
      "date": 1607618737152
    },
    {
      "type": "edit",
      "id": "2c7277dbe77e832f",
      "item": {
        "type": "pagefold",
        "id": "2c7277dbe77e832f",
        "text": "."
      },
      "date": 1607618742680
    },
    {
      "item": {
        "type": "factory",
        "id": "513ff92c515e23b4"
      },
      "id": "513ff92c515e23b4",
      "type": "add",
      "after": "2c7277dbe77e832f",
      "date": 1607618792504
    },
    {
      "type": "edit",
      "id": "513ff92c515e23b4",
      "item": {
        "type": "paragraph",
        "id": "513ff92c515e23b4",
        "text": "[[JSON Schema]] in more detail with examples."
      },
      "date": 1607618806697
    },
    {
      "type": "add",
      "id": "8648b66179c107eb",
      "item": {
        "type": "paragraph",
        "id": "8648b66179c107eb",
        "text": "[[Federating Foreign Servers]] as read-only participants."
      },
      "after": "513ff92c515e23b4",
      "date": 1607618885396
    },
    {
      "type": "add",
      "id": "4cb4de1ff078e377",
      "item": {
        "type": "paragraph",
        "id": "4cb4de1ff078e377",
        "text": "[[Where Pages Live]] and how they get there."
      },
      "after": "513ff92c515e23b4",
      "date": 1607619037488
    },
    {
      "type": "add",
      "id": "213a2826d80e4269",
      "item": {
        "type": "paragraph",
        "id": "213a2826d80e4269",
        "text": "[[History of the Lineup]] as creative space."
      },
      "after": "4cb4de1ff078e377",
      "date": 1607619168335
    },
    {
      "type": "add",
      "id": "d48b9e1d96a8e76f",
      "item": {
        "type": "paragraph",
        "id": "d48b9e1d96a8e76f",
        "text": "[[Computational Plasticity]] provides a vision for the future."
      },
      "after": "8648b66179c107eb",
      "date": 1607619315547
    },
    {
      "type": "fork",
      "site": "ward.asia.wiki.org",
      "date": 1700226580080
    }
  ]
}