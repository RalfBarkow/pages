{
  "title": "ZTimestamp",
  "story": [
    {
      "type": "markdown",
      "id": "474cd1b05c513cf8",
      "text": "I am ZTimestamp. [https://github.com/svenvc/ztimestamp github]\nI am a Magnitude.\nI represent a point in time, a combination of a date and a time.\n\nI am an alternative for DateAndTime and TimeStamp.\nI have nanosecond precision and live in the UTC/GMT/Zulu timezone.\nI use ISO/International conventions and protocols only. \nI support some essential arithmetic.\n\nI have an efficient internal representation:\n\n\tjnd - the julian day number <SmallInteger>\n\tns - the number of nanoseconds since midnight, the beginning of the day <SmallInteger>\n\nExamples:\n\n\tZTimestamp now.\n\tZTimestamp fromString: '1969-07-20T20:17:40Z'.\n\tZTimestamp fromString: '2021-11-17T09:05:12.94603Z'.\n\nThere is some compatibility with existing, standard Chronology objects.\nI correctly parse representations with a timezone designator\nand can print a representation in arbitrary timezone offsets. \n\nThe key idea of ZTimestamp is to store and work with timestamps in UTC internally, \nwhile converting to and from specific local representations when needed interfacing with the user or other systems.\n\nZTimestampFormat, working with ZTimezone, is the tool to do these conversions.\n\nZCurrentTimezone\n\tvalue: (ZTimezone id: #'Europe/Brussels')\n\tduring: [ ZTimestampFormat isoTZ useCurrentTimezone format: ZTimestamp now ].\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "ZTimestamp",
        "story": []
      },
      "date": 1659433748495
    },
    {
      "item": {
        "type": "factory",
        "id": "474cd1b05c513cf8"
      },
      "id": "474cd1b05c513cf8",
      "type": "add",
      "date": 1659433753037
    },
    {
      "type": "edit",
      "id": "474cd1b05c513cf8",
      "item": {
        "type": "markdown",
        "id": "474cd1b05c513cf8",
        "text": "I am ZTimestamp.\nI am a Magnitude.\nI represent a point in time, a combination of a date and a time.\n\nI am an alternative for DateAndTime and TimeStamp.\nI have nanosecond precision and live in the UTC/GMT/Zulu timezone.\nI use ISO/International conventions and protocols only. \nI support some essential arithmetic.\n\nI have an efficient internal representation:\n\n\tjnd - the julian day number <SmallInteger>\n\tns - the number of nanoseconds since midnight, the beginning of the day <SmallInteger>\n\nExamples:\n\n\tZTimestamp now.\n\tZTimestamp fromString: '1969-07-20T20:17:40Z'.\n\tZTimestamp fromString: '2021-11-17T09:05:12.94603Z'.\n\nThere is some compatibility with existing, standard Chronology objects.\nI correctly parse representations with a timezone designator\nand can print a representation in arbitrary timezone offsets. \n\nThe key idea of ZTimestamp is to store and work with timestamps in UTC internally, \nwhile converting to and from specific local representations when needed interfacing with the user or other systems.\n\nZTimestampFormat, working with ZTimezone, is the tool to do these conversions.\n\nZCurrentTimezone\n\tvalue: (ZTimezone id: #'Europe/Brussels')\n\tduring: [ ZTimestampFormat isoTZ useCurrentTimezone format: ZTimestamp now ].\n"
      },
      "date": 1659433754931
    },
    {
      "type": "edit",
      "id": "474cd1b05c513cf8",
      "item": {
        "type": "markdown",
        "id": "474cd1b05c513cf8",
        "text": "I am ZTimestamp. [https://github.com/svenvc/ztimestamp github]\nI am a Magnitude.\nI represent a point in time, a combination of a date and a time.\n\nI am an alternative for DateAndTime and TimeStamp.\nI have nanosecond precision and live in the UTC/GMT/Zulu timezone.\nI use ISO/International conventions and protocols only. \nI support some essential arithmetic.\n\nI have an efficient internal representation:\n\n\tjnd - the julian day number <SmallInteger>\n\tns - the number of nanoseconds since midnight, the beginning of the day <SmallInteger>\n\nExamples:\n\n\tZTimestamp now.\n\tZTimestamp fromString: '1969-07-20T20:17:40Z'.\n\tZTimestamp fromString: '2021-11-17T09:05:12.94603Z'.\n\nThere is some compatibility with existing, standard Chronology objects.\nI correctly parse representations with a timezone designator\nand can print a representation in arbitrary timezone offsets. \n\nThe key idea of ZTimestamp is to store and work with timestamps in UTC internally, \nwhile converting to and from specific local representations when needed interfacing with the user or other systems.\n\nZTimestampFormat, working with ZTimezone, is the tool to do these conversions.\n\nZCurrentTimezone\n\tvalue: (ZTimezone id: #'Europe/Brussels')\n\tduring: [ ZTimestampFormat isoTZ useCurrentTimezone format: ZTimestamp now ].\n"
      },
      "date": 1659433817191
    }
  ]
}