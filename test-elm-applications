{
  "title": "Test Elm Applications",
  "story": [
    {
      "type": "paragraph",
      "id": "e0de7f7739fadaf3",
      "text": "Until now, you have focused on building [[Elm]] applications. "
    },
    {
      "type": "paragraph",
      "id": "1162023bb3b9b4f0",
      "text": "You can create your own applications with the Elm Architecture, scale applications with powerful patterns, debug and deploy applications rapidly, and integrate Elm with existing JavaScript projects. Elm’s type safety makes most of this possible with no bugs. But, bugs in your application’s business logic can still appear."
    },
    {
      "type": "paragraph",
      "id": "11a608551cec31b9",
      "text": "In this  [https://medium.com/@pragprog/chapter-9-test-elm-applications-b8bb271672ea chapter], you will address this dilemma by testing Elm code. Testing ensures your code behaves as expected and keeps bugs from creeping in. You will use test-driven development and the elm-test package to create and test a date library. Next, you will test certain properties of the library without worrying about specific test cases via fuzz testing. Finally, you will test an Elm application that depends on the date library. Once you finish this chapter, you will be ready to test drive your own Elm code and applications to prevent bugs."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Test Elm Applications",
        "story": []
      },
      "date": 1696426988695
    },
    {
      "item": {
        "type": "factory",
        "id": "e0de7f7739fadaf3"
      },
      "id": "e0de7f7739fadaf3",
      "type": "add",
      "date": 1696426990016
    },
    {
      "type": "edit",
      "id": "e0de7f7739fadaf3",
      "item": {
        "type": "paragraph",
        "id": "e0de7f7739fadaf3",
        "text": "Until now, you have focused on building Elm applications. You can create your own applications with the Elm Architecture, scale applications with powerful patterns, debug and deploy applications rapidly, and integrate Elm with existing JavaScript projects. Elm’s type safety makes most of this possible with no bugs. But, bugs in your application’s business logic can still appear."
      },
      "date": 1696426991271
    },
    {
      "type": "edit",
      "id": "e0de7f7739fadaf3",
      "item": {
        "type": "paragraph",
        "id": "e0de7f7739fadaf3",
        "text": "Until now, you have focused on building Elm applications. [https://medium.com/@pragprog/chapter-9-test-elm-applications-b8bb271672ea page]"
      },
      "date": 1696427169441
    },
    {
      "type": "add",
      "id": "1162023bb3b9b4f0",
      "item": {
        "type": "paragraph",
        "id": "1162023bb3b9b4f0",
        "text": "You can create your own applications with the Elm Architecture, scale applications with powerful patterns, debug and deploy applications rapidly, and integrate Elm with existing JavaScript projects. Elm’s type safety makes most of this possible with no bugs. But, bugs in your application’s business logic can still appear."
      },
      "after": "e0de7f7739fadaf3",
      "date": 1696427170192
    },
    {
      "item": {
        "type": "factory",
        "id": "11a608551cec31b9"
      },
      "id": "11a608551cec31b9",
      "type": "add",
      "after": "1162023bb3b9b4f0",
      "date": 1696427216852
    },
    {
      "type": "edit",
      "id": "11a608551cec31b9",
      "item": {
        "type": "paragraph",
        "id": "11a608551cec31b9",
        "text": "In this chapter, you will address this dilemma by testing Elm code. Testing ensures your code behaves as expected and keeps bugs from creeping in. You will use test-driven development and the elm-test package to create and test a date library. Next, you will test certain properties of the library without worrying about specific test cases via fuzz testing. Finally, you will test an Elm application that depends on the date library. Once you finish this chapter, you will be ready to test drive your own Elm code and applications to prevent bugs."
      },
      "date": 1696427218370
    },
    {
      "type": "edit",
      "id": "e0de7f7739fadaf3",
      "item": {
        "type": "paragraph",
        "id": "e0de7f7739fadaf3",
        "text": "Until now, you have focused on building Elm applications. "
      },
      "date": 1696427228994
    },
    {
      "type": "edit",
      "id": "11a608551cec31b9",
      "item": {
        "type": "paragraph",
        "id": "11a608551cec31b9",
        "text": "In this  [https://medium.com/@pragprog/chapter-9-test-elm-applications-b8bb271672ea chapter], you will address this dilemma by testing Elm code. Testing ensures your code behaves as expected and keeps bugs from creeping in. You will use test-driven development and the elm-test package to create and test a date library. Next, you will test certain properties of the library without worrying about specific test cases via fuzz testing. Finally, you will test an Elm application that depends on the date library. Once you finish this chapter, you will be ready to test drive your own Elm code and applications to prevent bugs."
      },
      "date": 1696427240882
    },
    {
      "type": "edit",
      "id": "e0de7f7739fadaf3",
      "item": {
        "type": "paragraph",
        "id": "e0de7f7739fadaf3",
        "text": "Until now, you have focused on building [[Elm]] applications. "
      },
      "date": 1696431304824
    }
  ]
}