{
  "title": "More Motivation for new Markup",
  "story": [
    {
      "type": "paragraph",
      "id": "0f11a6f40918b4a3",
      "text": "I (Ward) find I have written a lot of scripts that fetch content from wiki, transform that content usually by cross-referencing things in some application specific way, then emitting something like a summary on the page or sometimes opening a new page with lots of details."
    },
    {
      "type": "paragraph",
      "id": "06faffa57faa5a52",
      "text": "See [[New Computational Markup]]"
    },
    {
      "type": "paragraph",
      "id": "1b22e73347a7e97c",
      "text": "I launched into this project by summarizing my intentions and then translating a couple of recently coded scripts into what I could imagine as a pretty handy \"markup\" for a new plugin that could replace these scripts. There are a few things a plugin can do that we don't allow of scripts. This is because javascript is too powerful to be trusted without community examination."
    },
    {
      "type": "paragraph",
      "id": "495bed32ef6a8b64",
      "text": "We don't worry about plugin markup because plugins interpret the markup step by step and won't do steps considered dangerous. I'm thinking a new plugin with markup sufficiently powerful to do the translating I've been doing but safe enough to be trusted solve some usability problems we currently have."
    },
    {
      "type": "paragraph",
      "id": "1fa249a888664813",
      "text": "Here is a current problem: It is hard for the Solo plugin to know when the transformation scripts have finished their work. We ask folks to run the scripts, wait until they are done, then open the Solo Lineup Browser which does everything except open the Solo pop-up window. One has to click a second button, the \"Open in Solo\" button on the Solo Lineup Browser page."
    },
    {
      "type": "paragraph",
      "id": "34c1b1245ae6a641",
      "text": "I'm thinking, why not just have the script offer the \"Open in Solo\" button when it is good and ready. But I can't do that now. We can't trust html scripts loaded from random pages to be opening the pop-up window. But we could trust a new plugin that carefully runs transformations step by step and offers the pop-up when it is good and ready."
    },
    {
      "type": "pagefold",
      "id": "555a386ede39a85a",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "5c813f7d8b140015",
      "text": "There are a couple of words we use that have many interpretations but one in particular is cast as a plugin. That would be \"transporter\". We borrowed the word from Star Trek. It was the tech that moved people between alien environments."
    },
    {
      "type": "paragraph",
      "id": "24b771005ab155b8",
      "text": "Our use case was David Bovill who wanted to write plugins using his HyperTalk style language but have it work within our Javascript environment. If you dropped a page on the transporter it would send it to David's server where he would compose a page in response. This worked because the page json was well defined and not specific to any particular language."
    },
    {
      "type": "reference",
      "id": "03e4e129d65eb09c",
      "site": "plugins.dojo.fed.wiki",
      "slug": "about-transport-plugin",
      "title": "About Transport Plugin",
      "text": "This plugin provides interactive access to remote services that can read content you drop and create from it useful pages that appear ready to be saved or used at one's discretion."
    },
    {
      "type": "paragraph",
      "id": "f675d0b76462cf60",
      "text": "In my brief search for prior art I found the kind of thing I wanted to write was sometimes called a \"transformer\". The distinction that I see between the two ideas is that the transporter moves a page to an alien environment and another related page comes back."
    },
    {
      "type": "paragraph",
      "id": "41ef042d3aa80df5",
      "text": "For the transformer I want to read a half-dozen well defined formats and produce right in the transformer new content in some other well defined format. The advantage of making this a plugin is that they have a lot of input and output formats to choose from."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "More Motivation for new Markup",
        "story": []
      },
      "date": 1716432174108
    },
    {
      "item": {
        "type": "factory",
        "id": "0f11a6f40918b4a3"
      },
      "id": "0f11a6f40918b4a3",
      "type": "add",
      "date": 1716432176042
    },
    {
      "type": "edit",
      "id": "0f11a6f40918b4a3",
      "item": {
        "type": "paragraph",
        "id": "0f11a6f40918b4a3",
        "text": "I find I have written a lot of scripts that fetch content from wiki, transform that content usually by cross-referencing things in some application specific way, then emitting something like a summary on the page or sometimes opening a new page with lots of details."
      },
      "date": 1716432184307
    },
    {
      "type": "add",
      "id": "1b22e73347a7e97c",
      "item": {
        "type": "paragraph",
        "id": "1b22e73347a7e97c",
        "text": "I launched into this project by summarizing my intentions and then translating a couple of recently coded scripts into what I could imagine as a pretty handy \"markup\" for a new plugin that could replace these scripts. There are a few things a plugin can do that we don't allow of scripts. This is because javascript is too powerful to be trusted without community examination. We don't worry about plugin markup because plugins interpret the markup step by step and won't do steps considered dangerous. I'm thinking a new plugin with markup sufficiently powerful to do the translating I've been doing but safe enough to be trusted solve some usability problems we currently have."
      },
      "after": "0f11a6f40918b4a3",
      "date": 1716432197623
    },
    {
      "type": "add",
      "id": "1fa249a888664813",
      "item": {
        "type": "paragraph",
        "id": "1fa249a888664813",
        "text": "Here is a current problem: It is hard for the Solo plugin to know when the transformation scripts have finished their work. We ask folks to run the scripts, wait until they are done, then open the Solo Lineup Browser which does everything except open the Solo pop-up window. One has to click a second button, the \"Open in Solo\" button on the Solo Lineup Browser page. I'm thinking, why not just have the script offer the \"Open in Solo\" button when it is good and ready. But I can't do that now. We can't trust html scripts loaded from random pages to be opening the pop-up window. But we could trust a new plugin that carefully runs transformations step by step and offers the pop-up when it is good and ready."
      },
      "after": "1b22e73347a7e97c",
      "date": 1716432205700
    },
    {
      "type": "add",
      "id": "06faffa57faa5a52",
      "item": {
        "type": "paragraph",
        "id": "06faffa57faa5a52",
        "text": "See [[New Computational Markup]]"
      },
      "after": "0f11a6f40918b4a3",
      "date": 1716432242242
    },
    {
      "type": "edit",
      "id": "1b22e73347a7e97c",
      "item": {
        "type": "paragraph",
        "id": "1b22e73347a7e97c",
        "text": "I launched into this project by summarizing my intentions and then translating a couple of recently coded scripts into what I could imagine as a pretty handy \"markup\" for a new plugin that could replace these scripts. There are a few things a plugin can do that we don't allow of scripts. This is because javascript is too powerful to be trusted without community examination."
      },
      "date": 1716432257295
    },
    {
      "type": "add",
      "id": "495bed32ef6a8b64",
      "item": {
        "type": "paragraph",
        "id": "495bed32ef6a8b64",
        "text": "We don't worry about plugin markup because plugins interpret the markup step by step and won't do steps considered dangerous. I'm thinking a new plugin with markup sufficiently powerful to do the translating I've been doing but safe enough to be trusted solve some usability problems we currently have."
      },
      "after": "1b22e73347a7e97c",
      "date": 1716432261572
    },
    {
      "type": "edit",
      "id": "1fa249a888664813",
      "item": {
        "type": "paragraph",
        "id": "1fa249a888664813",
        "text": "Here is a current problem: It is hard for the Solo plugin to know when the transformation scripts have finished their work. We ask folks to run the scripts, wait until they are done, then open the Solo Lineup Browser which does everything except open the Solo pop-up window. One has to click a second button, the \"Open in Solo\" button on the Solo Lineup Browser page."
      },
      "date": 1716432292302
    },
    {
      "type": "add",
      "id": "34c1b1245ae6a641",
      "item": {
        "type": "paragraph",
        "id": "34c1b1245ae6a641",
        "text": "I'm thinking, why not just have the script offer the \"Open in Solo\" button when it is good and ready. But I can't do that now. We can't trust html scripts loaded from random pages to be opening the pop-up window. But we could trust a new plugin that carefully runs transformations step by step and offers the pop-up when it is good and ready."
      },
      "after": "1fa249a888664813",
      "date": 1716432295328
    },
    {
      "item": {
        "type": "factory",
        "id": "555a386ede39a85a"
      },
      "id": "555a386ede39a85a",
      "type": "add",
      "after": "34c1b1245ae6a641",
      "date": 1716439581315
    },
    {
      "type": "edit",
      "id": "555a386ede39a85a",
      "item": {
        "type": "pagefold",
        "id": "555a386ede39a85a",
        "text": "."
      },
      "date": 1716439584430
    },
    {
      "item": {
        "type": "factory",
        "id": "5c813f7d8b140015"
      },
      "id": "5c813f7d8b140015",
      "type": "add",
      "after": "555a386ede39a85a",
      "date": 1716439587411
    },
    {
      "type": "edit",
      "id": "5c813f7d8b140015",
      "item": {
        "type": "paragraph",
        "id": "5c813f7d8b140015",
        "text": "\nThere are a couple of words we use that have many interpretations but one in particular is cast as a plugin. That would be \"transporter\". We borrowed the word from Star Trek. It was the tech that moved people between alien environments. Our use case was David Bovill who wanted to write plugins using his HyperTalk style language but have it work within our Javascript environment. If you dropped a page on the transporter it would send it to David's server where he would compose a page in response. This worked because the page json was well defined and not specific to any particular language.\nIn my brief search for prior art I found the kind of thing I wanted to write was sometimes called a \"transformer\". The distinction that I see between the two ideas is that the transporter moves a page to an alien environment and another related page comes back. For the transformer I want to read a half-dozen well defined formats and produce right in the transformer new content in some other well defined format. The advantage of making this a plugin is that they have a lot of input and output formats to choose from."
      },
      "date": 1716439591364
    },
    {
      "type": "edit",
      "id": "5c813f7d8b140015",
      "item": {
        "type": "paragraph",
        "id": "5c813f7d8b140015",
        "text": "There are a couple of words we use that have many interpretations but one in particular is cast as a plugin. That would be \"transporter\". We borrowed the word from Star Trek. It was the tech that moved people between alien environments."
      },
      "date": 1716439621319
    },
    {
      "type": "add",
      "id": "24b771005ab155b8",
      "item": {
        "type": "paragraph",
        "id": "24b771005ab155b8",
        "text": "Our use case was David Bovill who wanted to write plugins using his HyperTalk style language but have it work within our Javascript environment. If you dropped a page on the transporter it would send it to David's server where he would compose a page in response. This worked because the page json was well defined and not specific to any particular language."
      },
      "after": "5c813f7d8b140015",
      "date": 1716439630974
    },
    {
      "type": "add",
      "id": "f675d0b76462cf60",
      "item": {
        "type": "paragraph",
        "id": "f675d0b76462cf60",
        "text": "In my brief search for prior art I found the kind of thing I wanted to write was sometimes called a \"transformer\". The distinction that I see between the two ideas is that the transporter moves a page to an alien environment and another related page comes back."
      },
      "after": "24b771005ab155b8",
      "date": 1716439649693
    },
    {
      "type": "add",
      "id": "41ef042d3aa80df5",
      "item": {
        "type": "paragraph",
        "id": "41ef042d3aa80df5",
        "text": "For the transformer I want to read a half-dozen well defined formats and produce right in the transformer new content in some other well defined format. The advantage of making this a plugin is that they have a lot of input and output formats to choose from."
      },
      "after": "f675d0b76462cf60",
      "date": 1716439651279
    },
    {
      "item": {
        "type": "factory",
        "id": "03e4e129d65eb09c"
      },
      "id": "03e4e129d65eb09c",
      "type": "add",
      "after": "41ef042d3aa80df5",
      "date": 1716439741509
    },
    {
      "type": "edit",
      "id": "03e4e129d65eb09c",
      "item": {
        "type": "reference",
        "id": "03e4e129d65eb09c",
        "site": "plugins.dojo.fed.wiki",
        "slug": "about-transport-plugin",
        "title": "About Transport Plugin",
        "text": "This plugin provides interactive access to remote services that can read content you drop and create from it useful pages that appear ready to be saved or used at one's discretion. [https://github.com/WardCunningham/wiki-plugin-transport github]"
      },
      "date": 1716439751086
    },
    {
      "id": "03e4e129d65eb09c",
      "type": "move",
      "order": [
        "0f11a6f40918b4a3",
        "06faffa57faa5a52",
        "1b22e73347a7e97c",
        "495bed32ef6a8b64",
        "1fa249a888664813",
        "34c1b1245ae6a641",
        "555a386ede39a85a",
        "5c813f7d8b140015",
        "24b771005ab155b8",
        "03e4e129d65eb09c",
        "f675d0b76462cf60",
        "41ef042d3aa80df5"
      ],
      "date": 1716439763033
    },
    {
      "type": "edit",
      "id": "03e4e129d65eb09c",
      "item": {
        "type": "reference",
        "id": "03e4e129d65eb09c",
        "site": "plugins.dojo.fed.wiki",
        "slug": "about-transport-plugin",
        "title": "About Transport Plugin",
        "text": "This plugin provides interactive access to remote services that can read content you drop and create from it useful pages that appear ready to be saved or used at one's discretion."
      },
      "date": 1716439849411
    },
    {
      "type": "fork",
      "site": "found.ward.fed.wiki",
      "date": 1716471278399
    },
    {
      "type": "edit",
      "id": "0f11a6f40918b4a3",
      "item": {
        "type": "paragraph",
        "id": "0f11a6f40918b4a3",
        "text": "I (Ward) find I have written a lot of scripts that fetch content from wiki, transform that content usually by cross-referencing things in some application specific way, then emitting something like a summary on the page or sometimes opening a new page with lots of details."
      },
      "date": 1716477719368
    }
  ]
}