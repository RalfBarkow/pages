{
  "title": "2023-05-23",
  "story": [
    {
      "type": "paragraph",
      "id": "e557b191abb59761",
      "text": "⇒ [[Tiny House]]: Small House Movement [https://de.wikipedia.org/wiki/Tiny_House_Movement de.wikipedia], Sie wohnen zu zweit auf 25 Quadratmetern [https://www.bazonline.ch/sie-wohnen-zu-zweit-auf-25-quadratmetern-617714105246 bazonline.ch]"
    },
    {
      "type": "markdown",
      "id": "1bbeadf80e33042d",
      "text": "> Kleinsthäuser werden in der Schweiz immer beliebter. Der Schweizer Verein «[[Kleinwohnformen]]» zählt inzwischen 1500 bis 1800 Mitglieder. Co-Präsident Alesch Wenger sagt: «Unsere Umfrage 2023 zeigt: Je länger die Mitglieder bei uns sind, desto mehr werden sie von Träumern zu Bewohnern einer Kleinwohnform.» Genaue Zahlen zu den Bewohnern kennt der Verein nicht. Ein Tiny House kann man in der Schweiz für 180’000 Franken kaufen. Der Betrag kann sich aber je nach Grösse und Ausbaustandard verdoppeln."
    },
    {
      "type": "paragraph",
      "id": "8424086e9c778978",
      "text": "Stammtisch Basel [https://kleinwohnformen.ch/netzwerk/stammtisch-basel/ kleinwohnformen.ch]"
    },
    {
      "type": "pagefold",
      "id": "c9adc83e5a8a7992",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "f9f0aa82b4ff4d10",
      "text": "⇒ [[Duell]] um das US-Schuldenlimit ein rituelles Pokerspiel. ⇒ [[Peter Burghardt]] [https://www.sueddeutsche.de/politik/usa-schulden-yellen-republikaner-1.5875130 sueddeutsche.de], [https://theworldnews.net/ch-news/janet-yellens-kampf-im-us-budgetstreit-die-verwalterin-von-31-381-000-000-000-dollar-schulden page] ⇒ [[Tödliche Konflikte]] ⇒ [[Duel]] "
    },
    {
      "type": "paragraph",
      "id": "a484ac14f99ad7c0",
      "text": "⇒ [[Trond Hjorteland]] ⇒ [[Open Systems Theory]], [https://www.linkedin.com/posts/ralfbarkow_open-systems-theory-activity-7066656385572245504-D_aV?utm_source=share&utm_medium=member_desktop post]"
    },
    {
      "type": "markdown",
      "id": "5cc5d40721269cad",
      "text": "> Trond is a consultant, and – going forward – hopes to make his living helping organizations succeed at OST transformations. I think he’s going to need to be the popularizer that OST hasn’t had. In particular, he’s going to have to write a book. He’s also going to have to write shorter descriptions of technologies like the “search workshop” (described later). I’m encouraging him to do that, and have offered to be an editor. I encourage you to also encourage him."
    },
    {
      "type": "paragraph",
      "id": "ce6c6537dc776fd9",
      "text": "The Action Variational Principle in [[Cosmology]] [https://gitlab.com/trondhjort/the-action-variational-principle-in-cosmology#the-action-variational-principle-in-cosmology page]"
    },
    {
      "type": "paragraph",
      "id": "04da392d92511766",
      "text": "⇒ [[Alexander Soto]]"
    },
    {
      "type": "paragraph",
      "id": "b98edaeeeeba97da",
      "text": "⇒ [[Nikolai Suslov]] — [[2023-05-09]] 15:56 [https://discord.com/channels/694586717247635488/984210689503662140/1105493613590356058 discord]\n"
    },
    {
      "type": "markdown",
      "id": "cbe841665da7f724",
      "text": "> VM is distributed in a network-transparent single Electric application as a streaming DAG.\n[https://github.com/NikolaySuslov/krestianstvo-electric github]"
    },
    {
      "type": "paragraph",
      "id": "483424083439ced3",
      "text": "[[Krestianstvo]] | [[Electric]] - [[Clojure]]. Implementing a scalable Croquet VM. [https://github.com/NikolaySuslov/krestianstvo-electric github], [https://e.krestianstvo.org/ site]"
    },
    {
      "type": "paragraph",
      "id": "9e146af81557f708",
      "text": "⇒ [[Dustin Getz]]: UIs are streaming DAGs [https://hyperfiddle.notion.site/UIs-are-streaming-DAGs-e181461681a8452bb9c7a9f10f507991 post]"
    },
    {
      "type": "markdown",
      "id": "1be7f60886c60589",
      "text": "* [[electric-starter-app]]\n* [[krestianstvo-electric]]: ERROR hyperfiddle.electric-jetty-adapter: Websocket handler failure\nclojure.lang.ExceptionInfo: Unable to resolve symbol: datascript.core/transact!"
    },
    {
      "type": "paragraph",
      "id": "72e7dd1a90e326a1",
      "text": "FREUDENBERG, Vanessa, 2021. Frontend-only Multi-Player. Unlimited Bandwidth. Or: What is Croquet.io, really? [https://blog.codefrau.net/2021/08/what-is-croquet-anyways.html page] A multi-player web app needs a backend, right? What if I told you, it doesn’t? Read on for how [[Croquet]] gets rid of servers. No, really .   I..."
    },
    {
      "type": "paragraph",
      "id": "09282a61ea85db21",
      "text": "Tutorial – Electric Clojure [https://electric.hyperfiddle.net/user.demo-toggle!%54oggle page]"
    },
    {
      "type": "paragraph",
      "id": "08d7738e69476057",
      "text": "⇒ [[Calva]]"
    },
    {
      "type": "paragraph",
      "id": "8f8813fccf95438b",
      "text": "⇒ [[Dillon Kearns]] ⇒ [[elm-pages]]: There are API routes for data in your app/Api.elm file. If you want to consume data outside of elm-pages, then you could use Api.elm. If you want to consume data in your Route Modules in elm-pages then don't use Api.elm to communicate data to elm-pages, just use the Route's data. [https://elmlang.slack.com/archives/CNSNETV37/p1683072222560699?thread_ts=1682671301.861339&cid=CNSNETV37 slack]"
    },
    {
      "type": "paragraph",
      "id": "b79b14cb0e770e4b",
      "text": "BANCK, Daniel, 2017. Live Visualization and Editing of User Behavior in iObserve.  Online. batchelor. Kiel University. [Accessed 23 May 2023]. Available from: https://oceanrep.geomar.de/id/eprint/37711/ The [[iObserve]] project collects user behavior information and derives from that information user behavior models. The visualization of these models supports operators to understand better how users are using an application, how performance bottlenecks can occur, and how the deployment of the system changes.\n\nIn this thesis, we present an approach and implementation for a behavior model visualization service. The service provides a live visualization of user behavior graphs for operators to inspect. Furthermore, operators can create and modify user behavior graphs to reflect potential changes in user behavior and take future marketing campaigns into account. In an evaluation, we compare different Javascript libraries for their technical fit for the visualization and editor service.\n"
    },
    {
      "type": "paragraph",
      "id": "e489e328ac60bb54",
      "text": "Javascript allows building applications which do not need to reload the page on every update. All necessary code is retrieved with a single page load, and additional resources are loaded dynamically. There are frameworks like Angular, React, and Elm which support building a single page application. In this thesis, we investigate the two more modern libraries Elm and React which support reactive programming patterns (see Chapter 4)."
    },
    {
      "type": "paragraph",
      "id": "5b24f9e64c81aa65",
      "text": "[[Elm]] [17] is an open source programming language which compiles to Javascript. It uses a functional programming paradigm and addresses many weaknesses of Javascript, like confusing equality operators and implicit type conversion. All data structures in Elm are immutable by default; everything is typed,"
    },
    {
      "type": "paragraph",
      "id": "09db204e40554beb",
      "text": "[17] Elm. A delightful language for reliable webapps. url: [http://elm-lang.org/ http://elm-lang.org/] (visited on 12/03/2016) (cited on page 6)."
    },
    {
      "type": "pagefold",
      "id": "cf209b0164c85cfc",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "b855f9801dbabce4",
      "text": "⇒ [[Rafal Dittwald]]: Transkript of [[Solving Problems the Clojure Way]]\n[https://youtu.be/vK1DazRK_a0?t=337 5:37] – … we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in [[Haskell]] and what about the experience of Haskell is functional programming and what is wrestling with the type system? So we'll talk about ... ⇒ [[Data-Driven Programming]]: [https://youtu.be/vK1DazRK_a0?t=3334 55:34] – … is our data where do we need to move it how do we transform it so it's this kind of like data first thinking approach but it's kind of like very high level the second definition or way of thinking about it is the fact that [[Closure]] just uses plain data structures when you write closure code you don't type … [use of \"plain data\" (vs. typed structs, objects)]"
    },
    {
      "type": "paragraph",
      "id": "ffd742c1ef3f8b7d",
      "text": "Programs as Data Flows"
    },
    {
      "type": "paragraph",
      "id": "a556c4e4495fb6f0",
      "text": "Elm suggests a simple pattern for web application architectures, called [[The Elm Architecture]]. Each application can be separated into three parts. A model which holds the state of the application (model), a collection of functions which update the state (update) and a collection of functions which render the state as HTML (view)."
    },
    {
      "type": "paragraph",
      "id": "57209e707cde79be",
      "text": "⇒ [[Richard Feldman]] ⇒ rtfeldman / elm-spa-example [https://github.com/rtfeldman/elm-spa-example github] ⇒ [[Make Data Structures]] "
    },
    {
      "type": "paragraph",
      "id": "031eb0df154e0720",
      "text": "Forms in Elm —Validation, Tutorial and Examples — Part 1 [https://lucamug.medium.com/forms-in-elm-validation-tutorial-and-examples-2339830055da post]"
    },
    {
      "type": "pagefold",
      "id": "2d5465da0a27030a",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "bde49785f2bd4c68",
      "text": "⇒ [[Joe Marini]], [https://www.linkedin.com/in/joemarini/ linkedin] ⇒ [[JavaScript]]: Web Form Programming > What you should know [https://www.linkedin.com/learning/javascript-web-form-programming/what-you-should-know page]\n"
    },
    {
      "type": "paragraph",
      "id": "ecaa33a41ef08cfc",
      "text": "There are a few concepts that you're going to need to be familiar with before starting this course. I'm going to assume that you already know how to use common web development tools like text editors and integrated development environments or IDEs. We're going to be focusing on forms programming in this course. So I'm also going to assume that you already know how to build basic webpages using [[HTML]] and [[CSS]]. "
    },
    {
      "type": "paragraph",
      "id": "848dfa301adfb7f4",
      "text": "Now you don't need to be an expert, but if you're not already familiar with HTML, then this course is not really the best place to start. If you need to brush up on the basics of creating forms with HTML, then I would suggest watching HTML and CSS: Creating Forms or HTML Essential Training, specifically the section on building forms. "
    },
    {
      "type": "paragraph",
      "id": "1aa0732f56a10c2c",
      "text": "It doesn't really matter which editor you want to use for this course. So if you already have a favorite text editor, then you should be all set. I'm going to be using visual studio code for this course. It's a free IDE from Microsoft and it runs on Mac, Windows, and Linux, and it has great support for developing web applications. You can download it for free from code.visualstudio.com and if you want to learn more about using it to build web apps, I suggest watching the Visual Studio for Web Developers course. I'm also going to assume that you are already familiar with using JavaScript. In this course, we're going to be using JavaScript to give our forms interactivity and perform data validation. We won't be getting particularly advanced or fancy with JavaScript, but if you need to brush up on your skills in that area, I'd suggest watching the JavaScript Essential Training course. Once you feel comfortable with these subjects, you are ready to start the course. "
    },
    {
      "type": "pagefold",
      "id": "e8418519131afea9",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "a05d9834e06e694e",
      "text": "How can we increase the likelihood that course participants will have the necessary [[Prerequisite]]s?"
    },
    {
      "type": "video",
      "id": "f71daad5ab33f6a8",
      "text": "YOUTUBE X4-Y9oUlpkE\nIs SAFe REALLY Safe?"
    },
    {
      "type": "paragraph",
      "id": "41d1b5973b9d583c",
      "text": "[https://youtu.be/X4-Y9oUlpkE?t=1025 17:06] – […] a very different kind of approach and a significantly more agile one: instead of defining a specific solution, which I think is what\n[[SAFe]] is trying to do here, in [[Continuous Delivery]] we define the [[Fitness Function]],\nthe goals that you are that you should\nbe aiming to iterate towards after each\nsmall change. Are you now closer or further from your goal of maintaining your software in a permanently releasable state? That tells you whether the change is a good one or not."
    },
    {
      "type": "image",
      "id": "4272e0022a474727",
      "text": "Iterating Toward a [[Goal]]",
      "size": "wide",
      "width": 416,
      "height": 260,
      "url": "/assets/plugins/image/5dcb6a8d92f610d5631c015227e8056f.jpg"
    },
    {
      "type": "reference",
      "id": "c2f3e64028cbeda5",
      "site": "wiki.ralfbarkow.ch",
      "slug": "compass",
      "title": "Compass",
      "text": "⇒ [[The Idea Compass]] ⇒ [[Chinese Story Structure]]"
    },
    {
      "type": "pagefold",
      "id": "5e5502966da189d9",
      "text": "~"
    },
    {
      "type": "video",
      "id": "983ee41ceff62dc4",
      "text": "YOUTUBE Rqv9UUqYS4s\nTrans-Gender Identity: Contrapoints."
    },
    {
      "type": "pagefold",
      "id": "dca68d42861ec763",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "3bb255801e7406a1",
      "text": "⇒ [[Forms]]: [https://guide.elm-lang.org/architecture/forms.html elm-lang]"
    },
    {
      "type": "paragraph",
      "id": "ce4dede5ae47970c",
      "text": "Now we will make a rudimentary form. It has a field for your name, a field for your password, and a field to verify that password. We will also do some very simple validation to check if the passwords match. [https://guide.elm-lang.org/architecture/forms.html elm-lang]"
    },
    {
      "type": "pagefold",
      "id": "015c955697e0a850",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "f06251044c53b47d",
      "text": "KEARNS, Dillon, 2023. Realworld app (elm-spa-example) in elm-pages v3. Elm. Online. 7 March 2023. [Accessed 25 April 2023]. Available from: https://discourse.elm-lang.org/t/realworld-app-elm-spa-example-in-elm-pages-v3/8992 Hello everyone!  As I’m nearing the elm-pages v3 release, I’m building a few examples to showcase some of the new features. Since elm-spa-example is the canonical Elm app, I went ahead and created a version of that with elm-pages.  I started with the code from GitHub - ryannhg/elm-spa-realworld: The RealWorld example app built with elm-spa! since elm-pages and elm-spa both have [[File-Based Routing]], so that was a more similar starting point to fork from.  Here’s the live demo (runs on Netlify with...\n"
    },
    {
      "type": "pagefold",
      "id": "e517bd43e6a7a219",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "f566e4729e292b33",
      "text": "⇒ [[Elm]] provides a mechanism to send ⇒ [[HTTP]] requests to a server and handle the responses. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-05-23",
        "story": []
      },
      "date": 1684818158644
    },
    {
      "item": {
        "type": "factory",
        "id": "e557b191abb59761"
      },
      "id": "e557b191abb59761",
      "type": "add",
      "date": 1684818160377
    },
    {
      "type": "edit",
      "id": "e557b191abb59761",
      "item": {
        "type": "paragraph",
        "id": "e557b191abb59761",
        "text": "⇒ [["
      },
      "date": 1684818173256
    },
    {
      "type": "edit",
      "id": "e557b191abb59761",
      "item": {
        "type": "paragraph",
        "id": "e557b191abb59761",
        "text": "⇒ [[Tiny House]]"
      },
      "date": 1684818182873
    },
    {
      "type": "edit",
      "id": "e557b191abb59761",
      "item": {
        "type": "paragraph",
        "id": "e557b191abb59761",
        "text": "⇒ [[Tiny House]]: [https://de.wikipedia.org/wiki/Tiny_House_Movement de.wikipedia] "
      },
      "date": 1684818210440
    },
    {
      "type": "edit",
      "id": "e557b191abb59761",
      "item": {
        "type": "paragraph",
        "id": "e557b191abb59761",
        "text": "⇒ [[Tiny House]]: Small House Movement [https://de.wikipedia.org/wiki/Tiny_House_Movement de.wikipedia] "
      },
      "date": 1684818339164
    },
    {
      "type": "edit",
      "id": "e557b191abb59761",
      "item": {
        "type": "paragraph",
        "id": "e557b191abb59761",
        "text": "⇒ [[Tiny House]]: Small House Movement [https://de.wikipedia.org/wiki/Tiny_House_Movement de.wikipedia], Sie wohnen zu zweit auf 25 Quadratmetern"
      },
      "date": 1684818602343
    },
    {
      "type": "edit",
      "id": "e557b191abb59761",
      "item": {
        "type": "paragraph",
        "id": "e557b191abb59761",
        "text": "⇒ [[Tiny House]]: Small House Movement [https://de.wikipedia.org/wiki/Tiny_House_Movement de.wikipedia], Sie wohnen zu zweit auf 25 Quadratmetern [https://www.bazonline.ch/sie-wohnen-zu-zweit-auf-25-quadratmetern-617714105246 bazonline.ch]"
      },
      "date": 1684818622708
    },
    {
      "item": {
        "type": "factory",
        "id": "1bbeadf80e33042d"
      },
      "id": "1bbeadf80e33042d",
      "type": "add",
      "after": "e557b191abb59761",
      "date": 1684818711652
    },
    {
      "type": "edit",
      "id": "1bbeadf80e33042d",
      "item": {
        "type": "markdown",
        "id": "1bbeadf80e33042d",
        "text": "> Kleinsthäuser werden in der Schweiz immer beliebter. Der Schweizer Verein «Kleinwohnformen» zählt inzwischen 1500 bis 1800 Mitglieder. Co-Präsident Alesch Wenger sagt: «Unsere Umfrage 2023 zeigt: Je länger die Mitglieder bei uns sind, desto mehr werden sie von Träumern zu Bewohnern einer Kleinwohnform.» Genaue Zahlen zu den Bewohnern kennt der Verein nicht. Ein Tiny House kann man in der Schweiz für 180’000 Franken kaufen. Der Betrag kann sich aber je nach Grösse und Ausbaustandard verdoppeln."
      },
      "date": 1684818715599
    },
    {
      "item": {
        "type": "factory",
        "id": "8424086e9c778978"
      },
      "id": "8424086e9c778978",
      "type": "add",
      "after": "1bbeadf80e33042d",
      "date": 1684818841406
    },
    {
      "type": "edit",
      "id": "8424086e9c778978",
      "item": {
        "type": "paragraph",
        "id": "8424086e9c778978",
        "text": "[https://kleinwohnformen.ch/netzwerk/stammtisch-basel/ kleinwohnformen.ch]"
      },
      "date": 1684818862288
    },
    {
      "type": "edit",
      "id": "8424086e9c778978",
      "item": {
        "type": "paragraph",
        "id": "8424086e9c778978",
        "text": "Stammtisch Basel [https://kleinwohnformen.ch/netzwerk/stammtisch-basel/ kleinwohnformen.ch]"
      },
      "date": 1684818905516
    },
    {
      "type": "edit",
      "id": "1bbeadf80e33042d",
      "item": {
        "type": "markdown",
        "id": "1bbeadf80e33042d",
        "text": "> Kleinsthäuser werden in der Schweiz immer beliebter. Der Schweizer Verein «[[Kleinwohnformen]]» zählt inzwischen 1500 bis 1800 Mitglieder. Co-Präsident Alesch Wenger sagt: «Unsere Umfrage 2023 zeigt: Je länger die Mitglieder bei uns sind, desto mehr werden sie von Träumern zu Bewohnern einer Kleinwohnform.» Genaue Zahlen zu den Bewohnern kennt der Verein nicht. Ein Tiny House kann man in der Schweiz für 180’000 Franken kaufen. Der Betrag kann sich aber je nach Grösse und Ausbaustandard verdoppeln."
      },
      "date": 1684818976879
    },
    {
      "item": {
        "type": "factory",
        "id": "c9adc83e5a8a7992"
      },
      "id": "c9adc83e5a8a7992",
      "type": "add",
      "after": "8424086e9c778978",
      "date": 1684819241180
    },
    {
      "type": "edit",
      "id": "c9adc83e5a8a7992",
      "item": {
        "type": "pagefold",
        "id": "c9adc83e5a8a7992",
        "text": "~"
      },
      "date": 1684819245181
    },
    {
      "item": {
        "type": "factory",
        "id": "f9f0aa82b4ff4d10"
      },
      "id": "f9f0aa82b4ff4d10",
      "type": "add",
      "after": "c9adc83e5a8a7992",
      "date": 1684819246957
    },
    {
      "type": "edit",
      "id": "f9f0aa82b4ff4d10",
      "item": {
        "type": "paragraph",
        "id": "f9f0aa82b4ff4d10",
        "text": "⇒ [[Duell]] um das US-Schuldenlimit ein rituel- les Pokerspiel. "
      },
      "date": 1684819259830
    },
    {
      "type": "edit",
      "id": "f9f0aa82b4ff4d10",
      "item": {
        "type": "paragraph",
        "id": "f9f0aa82b4ff4d10",
        "text": "⇒ [[Duell]] um das US-Schuldenlimit ein rituelles Pokerspiel. "
      },
      "date": 1684819285231
    },
    {
      "type": "edit",
      "id": "f9f0aa82b4ff4d10",
      "item": {
        "type": "paragraph",
        "id": "f9f0aa82b4ff4d10",
        "text": "⇒ [[Duell]] um das US-Schuldenlimit ein rituelles Pokerspiel. ⇒ [[Peter Burghardt]] "
      },
      "date": 1684819337086
    },
    {
      "type": "edit",
      "id": "f9f0aa82b4ff4d10",
      "item": {
        "type": "paragraph",
        "id": "f9f0aa82b4ff4d10",
        "text": "⇒ [[Duell]] um das US-Schuldenlimit ein rituelles Pokerspiel. ⇒ [[Peter Burghardt]] [https://www.sueddeutsche.de/politik/usa-schulden-yellen-republikaner-1.5875130 sueddeutsche.de]"
      },
      "date": 1684819354762
    },
    {
      "type": "edit",
      "id": "f9f0aa82b4ff4d10",
      "item": {
        "type": "paragraph",
        "id": "f9f0aa82b4ff4d10",
        "text": "⇒ [[Duell]] um das US-Schuldenlimit ein rituelles Pokerspiel. ⇒ [[Peter Burghardt]] [https://www.sueddeutsche.de/politik/usa-schulden-yellen-republikaner-1.5875130 sueddeutsche.de], [https://theworldnews.net/ch-news/janet-yellens-kampf-im-us-budgetstreit-die-verwalterin-von-31-381-000-000-000-dollar-schulden page]"
      },
      "date": 1684819555841
    },
    {
      "type": "edit",
      "id": "f9f0aa82b4ff4d10",
      "item": {
        "type": "paragraph",
        "id": "f9f0aa82b4ff4d10",
        "text": "⇒ [[Duell]] um das US-Schuldenlimit ein rituelles Pokerspiel. ⇒ [[Peter Burghardt]] [https://www.sueddeutsche.de/politik/usa-schulden-yellen-republikaner-1.5875130 sueddeutsche.de], [https://theworldnews.net/ch-news/janet-yellens-kampf-im-us-budgetstreit-die-verwalterin-von-31-381-000-000-000-dollar-schulden page] ⇒ [[Duell]]"
      },
      "date": 1684820523819
    },
    {
      "type": "edit",
      "id": "f9f0aa82b4ff4d10",
      "item": {
        "type": "paragraph",
        "id": "f9f0aa82b4ff4d10",
        "text": "⇒ [[Duell]] um das US-Schuldenlimit ein rituelles Pokerspiel. ⇒ [[Peter Burghardt]] [https://www.sueddeutsche.de/politik/usa-schulden-yellen-republikaner-1.5875130 sueddeutsche.de], [https://theworldnews.net/ch-news/janet-yellens-kampf-im-us-budgetstreit-die-verwalterin-von-31-381-000-000-000-dollar-schulden page] ⇒ [[Tödliche Konflikte]]"
      },
      "date": 1684820530318
    },
    {
      "type": "edit",
      "id": "f9f0aa82b4ff4d10",
      "item": {
        "type": "paragraph",
        "id": "f9f0aa82b4ff4d10",
        "text": "⇒ [[Duell]] um das US-Schuldenlimit ein rituelles Pokerspiel. ⇒ [[Peter Burghardt]] [https://www.sueddeutsche.de/politik/usa-schulden-yellen-republikaner-1.5875130 sueddeutsche.de], [https://theworldnews.net/ch-news/janet-yellens-kampf-im-us-budgetstreit-die-verwalterin-von-31-381-000-000-000-dollar-schulden page] ⇒ [[Tödliche Konflikte]] ⇒ [[Duel]] "
      },
      "date": 1684820630728
    },
    {
      "item": {
        "type": "factory",
        "id": "a484ac14f99ad7c0"
      },
      "id": "a484ac14f99ad7c0",
      "type": "add",
      "after": "f9f0aa82b4ff4d10",
      "date": 1684820948315
    },
    {
      "type": "edit",
      "id": "a484ac14f99ad7c0",
      "item": {
        "type": "paragraph",
        "id": "a484ac14f99ad7c0",
        "text": "⇒ [[Trond Hjorteland]]"
      },
      "date": 1684820973449
    },
    {
      "type": "edit",
      "id": "a484ac14f99ad7c0",
      "item": {
        "type": "paragraph",
        "id": "a484ac14f99ad7c0",
        "text": "⇒ [[Trond Hjorteland]] ⇒ [[Open Systems Theory]]"
      },
      "date": 1684821003234
    },
    {
      "item": {
        "type": "factory",
        "id": "5cc5d40721269cad"
      },
      "id": "5cc5d40721269cad",
      "type": "add",
      "after": "a484ac14f99ad7c0",
      "date": 1684821034133
    },
    {
      "type": "edit",
      "id": "5cc5d40721269cad",
      "item": {
        "type": "markdown",
        "id": "5cc5d40721269cad",
        "text": "> Trond is a consultant, and – going forward – hopes to make his living helping organizations succeed at OST transformations. I think he’s going to need to be the popularizer that OST hasn’t had. In particular, he’s going to have to write a book. He’s also going to have to write shorter descriptions of technologies like the “search workshop” (described later). I’m encouraging him to do that, and have offered to be an editor. I encourage you to also encourage him."
      },
      "date": 1684821040065
    },
    {
      "item": {
        "type": "factory",
        "id": "04da392d92511766"
      },
      "id": "04da392d92511766",
      "type": "add",
      "after": "5cc5d40721269cad",
      "date": 1684821529659
    },
    {
      "type": "edit",
      "id": "04da392d92511766",
      "item": {
        "type": "paragraph",
        "id": "04da392d92511766",
        "text": "⇒ [[Alexander Soto]]"
      },
      "date": 1684821554853
    },
    {
      "type": "edit",
      "id": "a484ac14f99ad7c0",
      "item": {
        "type": "paragraph",
        "id": "a484ac14f99ad7c0",
        "text": "⇒ [[Trond Hjorteland]] ⇒ [[Open Systems Theory]] [https://www.linkedin.com/posts/ralfbarkow_open-systems-theory-activity-7066656385572245504-D_aV?utm_source=share&utm_medium=member_desktop post]"
      },
      "date": 1684822197702
    },
    {
      "type": "edit",
      "id": "a484ac14f99ad7c0",
      "item": {
        "type": "paragraph",
        "id": "a484ac14f99ad7c0",
        "text": "⇒ [[Trond Hjorteland]] ⇒ [[Open Systems Theory]], [https://www.linkedin.com/posts/ralfbarkow_open-systems-theory-activity-7066656385572245504-D_aV?utm_source=share&utm_medium=member_desktop post]"
      },
      "date": 1684822203894
    },
    {
      "item": {
        "type": "factory",
        "id": "ce6c6537dc776fd9"
      },
      "id": "ce6c6537dc776fd9",
      "type": "add",
      "after": "04da392d92511766",
      "date": 1684823638281
    },
    {
      "id": "ce6c6537dc776fd9",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766"
      ],
      "date": 1684823640122
    },
    {
      "type": "edit",
      "id": "ce6c6537dc776fd9",
      "item": {
        "type": "paragraph",
        "id": "ce6c6537dc776fd9",
        "text": "The Action Variational Principle in Cosmology"
      },
      "date": 1684823643108
    },
    {
      "type": "edit",
      "id": "ce6c6537dc776fd9",
      "item": {
        "type": "paragraph",
        "id": "ce6c6537dc776fd9",
        "text": "The Action Variational Principle in Cosmology [https://gitlab.com/trondhjort/the-action-variational-principle-in-cosmology#the-action-variational-principle-in-cosmology page]"
      },
      "date": 1684823718397
    },
    {
      "type": "edit",
      "id": "ce6c6537dc776fd9",
      "item": {
        "type": "paragraph",
        "id": "ce6c6537dc776fd9",
        "text": "The Action Variational Principle in [[Cosmology]] [https://gitlab.com/trondhjort/the-action-variational-principle-in-cosmology#the-action-variational-principle-in-cosmology page]"
      },
      "date": 1684823880715
    },
    {
      "item": {
        "type": "factory",
        "id": "72e7dd1a90e326a1"
      },
      "id": "72e7dd1a90e326a1",
      "type": "add",
      "after": "04da392d92511766",
      "date": 1684828866744
    },
    {
      "type": "edit",
      "id": "72e7dd1a90e326a1",
      "item": {
        "type": "paragraph",
        "id": "72e7dd1a90e326a1",
        "text": "\nFREUDENBERG, Vanessa, 2021. Frontend-only Multi-Player. Unlimited Bandwidth. Or: What is Croquet.io, really? Online. 30 August 2021. [Accessed 23 May 2023]. Available from: https://blog.codefrau.net/2021/08/what-is-croquet-anyways.htmlA multi-player web app needs a backend, right? What if I told you, it doesn’t? Read on for how Croquet gets rid of servers. No, really .   I...\n"
      },
      "date": 1684828870222
    },
    {
      "item": {
        "type": "factory",
        "id": "30df37a0371c4ec9"
      },
      "id": "30df37a0371c4ec9",
      "type": "add",
      "after": "72e7dd1a90e326a1",
      "date": 1684828898085
    },
    {
      "id": "30df37a0371c4ec9",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "30df37a0371c4ec9",
        "72e7dd1a90e326a1"
      ],
      "date": 1684828900129
    },
    {
      "type": "edit",
      "id": "30df37a0371c4ec9",
      "item": {
        "type": "paragraph",
        "id": "30df37a0371c4ec9",
        "text": "⇒ [[Nikolai Suslov]]"
      },
      "date": 1684828914099
    },
    {
      "id": "9e146af81557f708",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9e146af81557f708",
        "text": "⇒ [[Dustin Getz]]: UIs are streaming DAGs [https://hyperfiddle.notion.site/UIs-are-streaming-DAGs-e181461681a8452bb9c7a9f10f507991 post]"
      },
      "after": "72e7dd1a90e326a1",
      "attribution": {
        "page": "2023-05-22"
      },
      "date": 1684829024406
    },
    {
      "type": "edit",
      "id": "30df37a0371c4ec9",
      "item": {
        "type": "paragraph",
        "id": "30df37a0371c4ec9",
        "text": "⇒ [[Nikolai Suslov]] ⇒ [[2023-05-09]]"
      },
      "date": 1684829065776
    },
    {
      "id": "b98edaeeeeba97da",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b98edaeeeeba97da",
        "text": "⇒ [[NikolaiSuslov]] — [[2023-05-09]] 15:56 [https://discord.com/channels/694586717247635488/984210689503662140/1105493613590356058 discord]\nHello all Croquet lovers! Want to share an early prototype of implementing the Croquet VM in the novel reactive DSL Electric - Clojure programming language. What is already intriguing, that in <200 LoC mostly all parts of the classic Croquet VM (VWF reference implementation) are working, including Reflector server, Virtual Time, Future message sending etc. VM is distributed in a network-transparent single Electric application as a streaming DAG.\n[https://github.com/NikolaySuslov/krestianstvo-electric github]"
      },
      "after": "30df37a0371c4ec9",
      "attribution": {
        "page": "2023-05-09"
      },
      "date": 1684829104226
    },
    {
      "type": "remove",
      "id": "30df37a0371c4ec9",
      "date": 1684829118325
    },
    {
      "type": "edit",
      "id": "b98edaeeeeba97da",
      "item": {
        "type": "paragraph",
        "id": "b98edaeeeeba97da",
        "text": "⇒ [[NikolaiSuslov]] — [[2023-05-09]] 15:56 [https://discord.com/channels/694586717247635488/984210689503662140/1105493613590356058 discord]\n> VM is distributed in a network-transparent single Electric application as a streaming DAG.\n[https://github.com/NikolaySuslov/krestianstvo-electric github]"
      },
      "date": 1684829127485
    },
    {
      "type": "edit",
      "id": "b98edaeeeeba97da",
      "item": {
        "type": "paragraph",
        "id": "b98edaeeeeba97da",
        "text": "⇒ [[NikolaiSuslov]] — [[2023-05-09]] 15:56 [https://discord.com/channels/694586717247635488/984210689503662140/1105493613590356058 discord]\n"
      },
      "date": 1684829132988
    },
    {
      "type": "add",
      "id": "cbe841665da7f724",
      "item": {
        "type": "paragraph",
        "id": "cbe841665da7f724",
        "text": "> VM is distributed in a network-transparent single Electric application as a streaming DAG.\n[https://github.com/NikolaySuslov/krestianstvo-electric github]"
      },
      "after": "b98edaeeeeba97da",
      "date": 1684829133684
    },
    {
      "type": "edit",
      "id": "cbe841665da7f724",
      "item": {
        "type": "markdown",
        "id": "cbe841665da7f724",
        "text": "> VM is distributed in a network-transparent single Electric application as a streaming DAG.\n[https://github.com/NikolaySuslov/krestianstvo-electric github]"
      },
      "date": 1684829134963
    },
    {
      "item": {
        "type": "factory",
        "id": "483424083439ced3"
      },
      "id": "483424083439ced3",
      "type": "add",
      "after": "9e146af81557f708",
      "date": 1684829149310
    },
    {
      "id": "483424083439ced3",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "72e7dd1a90e326a1",
        "9e146af81557f708"
      ],
      "date": 1684829150710
    },
    {
      "type": "edit",
      "id": "483424083439ced3",
      "item": {
        "type": "paragraph",
        "id": "483424083439ced3",
        "text": "Krestianstvo | Electric - Clojure. Implementing a scalable Croquet VM. "
      },
      "date": 1684829152326
    },
    {
      "type": "edit",
      "id": "483424083439ced3",
      "item": {
        "type": "paragraph",
        "id": "483424083439ced3",
        "text": "[[Krestianstvo]] | [[Electric]] - [[Clojure]]. Implementing a scalable Croquet VM. "
      },
      "date": 1684829176355
    },
    {
      "type": "edit",
      "id": "483424083439ced3",
      "item": {
        "type": "paragraph",
        "id": "483424083439ced3",
        "text": "[[Krestianstvo]] | [[Electric]] - [[Clojure]]. Implementing a scalable Croquet VM. [https://github.com/NikolaySuslov/krestianstvo-electric github]"
      },
      "date": 1684829195645
    },
    {
      "type": "edit",
      "id": "483424083439ced3",
      "item": {
        "type": "paragraph",
        "id": "483424083439ced3",
        "text": "[[Krestianstvo]] | [[Electric]] - [[Clojure]]. Implementing a scalable Croquet VM. [https://github.com/NikolaySuslov/krestianstvo-electric github], [https://e.krestianstvo.org/ site]"
      },
      "date": 1684829218080
    },
    {
      "id": "9e146af81557f708",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "72e7dd1a90e326a1"
      ],
      "date": 1684829352465
    },
    {
      "type": "edit",
      "id": "72e7dd1a90e326a1",
      "item": {
        "type": "paragraph",
        "id": "72e7dd1a90e326a1",
        "text": "FREUDENBERG, Vanessa, 2021. Frontend-only Multi-Player. Unlimited Bandwidth. Or: What is Croquet.io, really? Online. 30 August 2021. [Accessed 23 May 2023]. Available from: https://blog.codefrau.net/2021/08/what-is-croquet-anyways.html A multi-player web app needs a backend, right? What if I told you, it doesn’t? Read on for how Croquet gets rid of servers. No, really .   I...\n"
      },
      "date": 1684829361702
    },
    {
      "type": "edit",
      "id": "72e7dd1a90e326a1",
      "item": {
        "type": "paragraph",
        "id": "72e7dd1a90e326a1",
        "text": "FREUDENBERG, Vanessa, 2021. Frontend-only Multi-Player. Unlimited Bandwidth. Or: What is Croquet.io, really? Online. 30 August 2021. [Accessed 23 May 2023]. Available from: https://blog.codefrau.net/2021/08/what-is-croquet-anyways.html A multi-player web app needs a backend, right? What if I told you, it doesn’t? Read on for how [[Croquet]] gets rid of servers. No, really .   I...\n"
      },
      "date": 1684829376348
    },
    {
      "type": "add",
      "id": "1be7f60886c60589",
      "item": {
        "type": "paragraph",
        "id": "1be7f60886c60589",
        "text": "[[electric-starter-app]]"
      },
      "after": "9e146af81557f708",
      "date": 1684829439461
    },
    {
      "type": "edit",
      "id": "1be7f60886c60589",
      "item": {
        "type": "paragraph",
        "id": "1be7f60886c60589",
        "text": "* [[electric-starter-app]]"
      },
      "date": 1684829445745
    },
    {
      "type": "edit",
      "id": "1be7f60886c60589",
      "item": {
        "type": "markdown",
        "id": "1be7f60886c60589",
        "text": "* [[electric-starter-app]]"
      },
      "date": 1684829447147
    },
    {
      "item": {
        "type": "factory",
        "id": "2d5465da0a27030a"
      },
      "id": "2d5465da0a27030a",
      "type": "add",
      "after": "72e7dd1a90e326a1",
      "date": 1684838133509
    },
    {
      "type": "edit",
      "id": "2d5465da0a27030a",
      "item": {
        "type": "pagefold",
        "id": "2d5465da0a27030a",
        "text": "~"
      },
      "date": 1684838136448
    },
    {
      "item": {
        "type": "factory",
        "id": "bde49785f2bd4c68"
      },
      "id": "bde49785f2bd4c68",
      "type": "add",
      "after": "2d5465da0a27030a",
      "date": 1684838137939
    },
    {
      "type": "edit",
      "id": "bde49785f2bd4c68",
      "item": {
        "type": "paragraph",
        "id": "bde49785f2bd4c68",
        "text": "What you should know\n\nSelecting transcript lines in this section will navigate to timestamp in the video\n- There are a few concepts that you're going to need to be familiar with before starting this course. I'm going to assume that you already know how to use common web development tools like text editors and integrated development environments or IDEs. We're going to be focusing on forms programming in this course. So I'm also going to assume that you already know how to build basic webpages using HTML and CSS. Now you don't need to be an expert, but if you're not already familiar with HTML, then this course is not really the best place to start. If you need to brush up on the basics of creating forms with HTML, then I would suggest watching HTML and CSS: Creating Forms or HTML Essential Training, specifically the section on building forms. It doesn't really matter which editor you want to use for this course. So if you already have a favorite text editor, then you should be all set. I'm going to be using visual studio code for this course. It's a free IDE from Microsoft and it runs on Mac, Windows, and Linux, and it has great support for developing web applications. You can download it for free from code.visualstudio.com and if you want to learn more about using it to build web apps, I suggest watching the Visual Studio for Web Developers course. I'm also going to assume that you are already familiar with using JavaScript. In this course, we're going to be using JavaScript to give our forms interactivity and perform data validation. We won't be getting particularly advanced or fancy with JavaScript, but if you need to brush up on your skills in that area, I'd suggest watching the JavaScript Essential Training course. Once you feel comfortable with these subjects, you are ready to start the course. "
      },
      "date": 1684838140793
    },
    {
      "type": "edit",
      "id": "bde49785f2bd4c68",
      "item": {
        "type": "paragraph",
        "id": "bde49785f2bd4c68",
        "text": "What you should know [https://www.linkedin.com/learning/javascript-web-form-programming/what-you-should-know page]\n\nSelecting transcript lines in this section will navigate to timestamp in the video\n- There are a few concepts that you're going to need to be familiar with before starting this course. I'm going to assume that you already know how to use common web development tools like text editors and integrated development environments or IDEs. We're going to be focusing on forms programming in this course. So I'm also going to assume that you already know how to build basic webpages using HTML and CSS. Now you don't need to be an expert, but if you're not already familiar with HTML, then this course is not really the best place to start. If you need to brush up on the basics of creating forms with HTML, then I would suggest watching HTML and CSS: Creating Forms or HTML Essential Training, specifically the section on building forms. It doesn't really matter which editor you want to use for this course. So if you already have a favorite text editor, then you should be all set. I'm going to be using visual studio code for this course. It's a free IDE from Microsoft and it runs on Mac, Windows, and Linux, and it has great support for developing web applications. You can download it for free from code.visualstudio.com and if you want to learn more about using it to build web apps, I suggest watching the Visual Studio for Web Developers course. I'm also going to assume that you are already familiar with using JavaScript. In this course, we're going to be using JavaScript to give our forms interactivity and perform data validation. We won't be getting particularly advanced or fancy with JavaScript, but if you need to brush up on your skills in that area, I'd suggest watching the JavaScript Essential Training course. Once you feel comfortable with these subjects, you are ready to start the course. "
      },
      "date": 1684838170954
    },
    {
      "type": "edit",
      "id": "bde49785f2bd4c68",
      "item": {
        "type": "paragraph",
        "id": "bde49785f2bd4c68",
        "text": "[[JavaScript]]: Web Form Programming > What you should know [https://www.linkedin.com/learning/javascript-web-form-programming/what-you-should-know page]\n\nSelecting transcript lines in this section will navigate to timestamp in the video\n- There are a few concepts that you're going to need to be familiar with before starting this course. I'm going to assume that you already know how to use common web development tools like text editors and integrated development environments or IDEs. We're going to be focusing on forms programming in this course. So I'm also going to assume that you already know how to build basic webpages using HTML and CSS. Now you don't need to be an expert, but if you're not already familiar with HTML, then this course is not really the best place to start. If you need to brush up on the basics of creating forms with HTML, then I would suggest watching HTML and CSS: Creating Forms or HTML Essential Training, specifically the section on building forms. It doesn't really matter which editor you want to use for this course. So if you already have a favorite text editor, then you should be all set. I'm going to be using visual studio code for this course. It's a free IDE from Microsoft and it runs on Mac, Windows, and Linux, and it has great support for developing web applications. You can download it for free from code.visualstudio.com and if you want to learn more about using it to build web apps, I suggest watching the Visual Studio for Web Developers course. I'm also going to assume that you are already familiar with using JavaScript. In this course, we're going to be using JavaScript to give our forms interactivity and perform data validation. We won't be getting particularly advanced or fancy with JavaScript, but if you need to brush up on your skills in that area, I'd suggest watching the JavaScript Essential Training course. Once you feel comfortable with these subjects, you are ready to start the course. "
      },
      "date": 1684838206959
    },
    {
      "type": "edit",
      "id": "bde49785f2bd4c68",
      "item": {
        "type": "paragraph",
        "id": "bde49785f2bd4c68",
        "text": "⇒ [[JavaScript]]: Web Form Programming > What you should know [https://www.linkedin.com/learning/javascript-web-form-programming/what-you-should-know page]\n\nSelecting transcript lines in this section will navigate to timestamp in the video\n- There are a few concepts that you're going to need to be familiar with before starting this course. I'm going to assume that you already know how to use common web development tools like text editors and integrated development environments or IDEs. We're going to be focusing on forms programming in this course. So I'm also going to assume that you already know how to build basic webpages using HTML and CSS. Now you don't need to be an expert, but if you're not already familiar with HTML, then this course is not really the best place to start. If you need to brush up on the basics of creating forms with HTML, then I would suggest watching HTML and CSS: Creating Forms or HTML Essential Training, specifically the section on building forms. It doesn't really matter which editor you want to use for this course. So if you already have a favorite text editor, then you should be all set. I'm going to be using visual studio code for this course. It's a free IDE from Microsoft and it runs on Mac, Windows, and Linux, and it has great support for developing web applications. You can download it for free from code.visualstudio.com and if you want to learn more about using it to build web apps, I suggest watching the Visual Studio for Web Developers course. I'm also going to assume that you are already familiar with using JavaScript. In this course, we're going to be using JavaScript to give our forms interactivity and perform data validation. We won't be getting particularly advanced or fancy with JavaScript, but if you need to brush up on your skills in that area, I'd suggest watching the JavaScript Essential Training course. Once you feel comfortable with these subjects, you are ready to start the course. "
      },
      "date": 1684838230309
    },
    {
      "type": "edit",
      "id": "bde49785f2bd4c68",
      "item": {
        "type": "paragraph",
        "id": "bde49785f2bd4c68",
        "text": "⇒ [[JavaScript]]: Web Form Programming > What you should know [https://www.linkedin.com/learning/javascript-web-form-programming/what-you-should-know page]\n\nSelecting transcript lines in this section will navigate to timestamp in the video\n- There are a few concepts that you're going to need to be familiar with before starting this course. I'm going to assume that you already know how to use common web development tools like text editors and integrated development environments or IDEs. We're going to be focusing on forms programming in this course. So I'm also going to assume that you already know how to build basic webpages using [[HTML]] and [[CSS]]. Now you don't need to be an expert, but if you're not already familiar with HTML, then this course is not really the best place to start. If you need to brush up on the basics of creating forms with HTML, then I would suggest watching HTML and CSS: Creating Forms or HTML Essential Training, specifically the section on building forms. It doesn't really matter which editor you want to use for this course. So if you already have a favorite text editor, then you should be all set. I'm going to be using visual studio code for this course. It's a free IDE from Microsoft and it runs on Mac, Windows, and Linux, and it has great support for developing web applications. You can download it for free from code.visualstudio.com and if you want to learn more about using it to build web apps, I suggest watching the Visual Studio for Web Developers course. I'm also going to assume that you are already familiar with using JavaScript. In this course, we're going to be using JavaScript to give our forms interactivity and perform data validation. We won't be getting particularly advanced or fancy with JavaScript, but if you need to brush up on your skills in that area, I'd suggest watching the JavaScript Essential Training course. Once you feel comfortable with these subjects, you are ready to start the course. "
      },
      "date": 1684838283189
    },
    {
      "type": "edit",
      "id": "bde49785f2bd4c68",
      "item": {
        "type": "paragraph",
        "id": "bde49785f2bd4c68",
        "text": "⇒ [[JavaScript]]: Web Form Programming > What you should know [https://www.linkedin.com/learning/javascript-web-form-programming/what-you-should-know page]\n\nSelecting transcript lines in this section will navigate to timestamp in the video\n- There are a few concepts that you're going to need to be familiar with before starting this course. I'm going to assume that you already know how to use common web development tools like text editors and integrated development environments or IDEs. We're going to be focusing on forms programming in this course. So I'm also going to assume that you already know how to build basic webpages using [[HTML]] and [[CSS]]. "
      },
      "date": 1684838340274
    },
    {
      "type": "add",
      "id": "848dfa301adfb7f4",
      "item": {
        "type": "paragraph",
        "id": "848dfa301adfb7f4",
        "text": "Now you don't need to be an expert, but if you're not already familiar with HTML, then this course is not really the best place to start. If you need to brush up on the basics of creating forms with HTML, then I would suggest watching HTML and CSS: Creating Forms or HTML Essential Training, specifically the section on building forms. It doesn't really matter which editor you want to use for this course. So if you already have a favorite text editor, then you should be all set. I'm going to be using visual studio code for this course. It's a free IDE from Microsoft and it runs on Mac, Windows, and Linux, and it has great support for developing web applications. You can download it for free from code.visualstudio.com and if you want to learn more about using it to build web apps, I suggest watching the Visual Studio for Web Developers course. I'm also going to assume that you are already familiar with using JavaScript. In this course, we're going to be using JavaScript to give our forms interactivity and perform data validation. We won't be getting particularly advanced or fancy with JavaScript, but if you need to brush up on your skills in that area, I'd suggest watching the JavaScript Essential Training course. Once you feel comfortable with these subjects, you are ready to start the course. "
      },
      "after": "bde49785f2bd4c68",
      "date": 1684838340946
    },
    {
      "type": "edit",
      "id": "848dfa301adfb7f4",
      "item": {
        "type": "paragraph",
        "id": "848dfa301adfb7f4",
        "text": "Now you don't need to be an expert, but if you're not already familiar with HTML, then this course is not really the best place to start. If you need to brush up on the basics of creating forms with HTML, then I would suggest watching HTML and CSS: Creating Forms or HTML Essential Training, specifically the section on building forms. "
      },
      "date": 1684838369407
    },
    {
      "type": "add",
      "id": "1aa0732f56a10c2c",
      "item": {
        "type": "paragraph",
        "id": "1aa0732f56a10c2c",
        "text": "It doesn't really matter which editor you want to use for this course. So if you already have a favorite text editor, then you should be all set. I'm going to be using visual studio code for this course. It's a free IDE from Microsoft and it runs on Mac, Windows, and Linux, and it has great support for developing web applications. You can download it for free from code.visualstudio.com and if you want to learn more about using it to build web apps, I suggest watching the Visual Studio for Web Developers course. I'm also going to assume that you are already familiar with using JavaScript. In this course, we're going to be using JavaScript to give our forms interactivity and perform data validation. We won't be getting particularly advanced or fancy with JavaScript, but if you need to brush up on your skills in that area, I'd suggest watching the JavaScript Essential Training course. Once you feel comfortable with these subjects, you are ready to start the course. "
      },
      "after": "848dfa301adfb7f4",
      "date": 1684838369931
    },
    {
      "type": "edit",
      "id": "bde49785f2bd4c68",
      "item": {
        "type": "paragraph",
        "id": "bde49785f2bd4c68",
        "text": "⇒ [[Joe Marini]] ⇒ [[JavaScript]]: Web Form Programming > What you should know [https://www.linkedin.com/learning/javascript-web-form-programming/what-you-should-know page]\n\nSelecting transcript lines in this section will navigate to timestamp in the video\n- There are a few concepts that you're going to need to be familiar with before starting this course. I'm going to assume that you already know how to use common web development tools like text editors and integrated development environments or IDEs. We're going to be focusing on forms programming in this course. So I'm also going to assume that you already know how to build basic webpages using [[HTML]] and [[CSS]]. "
      },
      "date": 1684838528498
    },
    {
      "type": "edit",
      "id": "bde49785f2bd4c68",
      "item": {
        "type": "paragraph",
        "id": "bde49785f2bd4c68",
        "text": "⇒ [[Joe Marini]], [https://www.linkedin.com/in/joemarini/ linkedin] ⇒ [[JavaScript]]: Web Form Programming > What you should know [https://www.linkedin.com/learning/javascript-web-form-programming/what-you-should-know page]\n\nSelecting transcript lines in this section will navigate to timestamp in the video\n- There are a few concepts that you're going to need to be familiar with before starting this course. I'm going to assume that you already know how to use common web development tools like text editors and integrated development environments or IDEs. We're going to be focusing on forms programming in this course. So I'm also going to assume that you already know how to build basic webpages using [[HTML]] and [[CSS]]. "
      },
      "date": 1684838558706
    },
    {
      "type": "edit",
      "id": "1be7f60886c60589",
      "item": {
        "type": "markdown",
        "id": "1be7f60886c60589",
        "text": "* [[electric-starter-app]]\n* ERROR hyperfiddle.electric-jetty-adapter: Websocket handler failure\nclojure.lang.ExceptionInfo: Unable to resolve symbol: datascript.core/transact!"
      },
      "date": 1684839038491
    },
    {
      "type": "edit",
      "id": "1be7f60886c60589",
      "item": {
        "type": "markdown",
        "id": "1be7f60886c60589",
        "text": "* [[electric-starter-app]]\n* [[krestianstvo-electric]]: ERROR hyperfiddle.electric-jetty-adapter: Websocket handler failure\nclojure.lang.ExceptionInfo: Unable to resolve symbol: datascript.core/transact!"
      },
      "date": 1684839062730
    },
    {
      "type": "edit",
      "id": "b98edaeeeeba97da",
      "item": {
        "type": "paragraph",
        "id": "b98edaeeeeba97da",
        "text": "⇒ [[Nikolai Suslov]] — [[2023-05-09]] 15:56 [https://discord.com/channels/694586717247635488/984210689503662140/1105493613590356058 discord]\n"
      },
      "date": 1684839302385
    },
    {
      "type": "edit",
      "id": "bde49785f2bd4c68",
      "item": {
        "type": "paragraph",
        "id": "bde49785f2bd4c68",
        "text": "⇒ [[Joe Marini]], [https://www.linkedin.com/in/joemarini/ linkedin] ⇒ [[JavaScript]]: Web Form Programming > What you should know [https://www.linkedin.com/learning/javascript-web-form-programming/what-you-should-know page]\n\n"
      },
      "date": 1684841384707
    },
    {
      "type": "add",
      "id": "ecaa33a41ef08cfc",
      "item": {
        "type": "paragraph",
        "id": "ecaa33a41ef08cfc",
        "text": "There are a few concepts that you're going to need to be familiar with before starting this course. I'm going to assume that you already know how to use common web development tools like text editors and integrated development environments or IDEs. We're going to be focusing on forms programming in this course. So I'm also going to assume that you already know how to build basic webpages using [[HTML]] and [[CSS]]. "
      },
      "after": "bde49785f2bd4c68",
      "date": 1684841387047
    },
    {
      "type": "edit",
      "id": "bde49785f2bd4c68",
      "item": {
        "type": "paragraph",
        "id": "bde49785f2bd4c68",
        "text": "⇒ [[Joe Marini]], [https://www.linkedin.com/in/joemarini/ linkedin] ⇒ [[JavaScript]]: Web Form Programming > What you should know [https://www.linkedin.com/learning/javascript-web-form-programming/what-you-should-know page]\n"
      },
      "date": 1684841390994
    },
    {
      "item": {
        "type": "factory",
        "id": "e8418519131afea9"
      },
      "id": "e8418519131afea9",
      "type": "add",
      "after": "1aa0732f56a10c2c",
      "date": 1684841474790
    },
    {
      "type": "edit",
      "id": "e8418519131afea9",
      "item": {
        "type": "pagefold",
        "id": "e8418519131afea9",
        "text": "~"
      },
      "date": 1684841480169
    },
    {
      "item": {
        "type": "factory",
        "id": "a05d9834e06e694e"
      },
      "id": "a05d9834e06e694e",
      "type": "add",
      "after": "e8418519131afea9",
      "date": 1684841570523
    },
    {
      "type": "edit",
      "id": "a05d9834e06e694e",
      "item": {
        "type": "paragraph",
        "id": "a05d9834e06e694e",
        "text": "How can we increase the likelihood that course participants will have the necessary prerequisites?"
      },
      "date": 1684841579248
    },
    {
      "type": "edit",
      "id": "a05d9834e06e694e",
      "item": {
        "type": "paragraph",
        "id": "a05d9834e06e694e",
        "text": "How can we increase the likelihood that course participants will have the necessary [[Prerequisite]]s?"
      },
      "date": 1684841593466
    },
    {
      "item": {
        "type": "factory",
        "id": "5e5502966da189d9"
      },
      "id": "5e5502966da189d9",
      "type": "add",
      "after": "a05d9834e06e694e",
      "date": 1684842184137
    },
    {
      "type": "edit",
      "id": "5e5502966da189d9",
      "item": {
        "type": "pagefold",
        "id": "5e5502966da189d9",
        "text": "~"
      },
      "date": 1684842187935
    },
    {
      "item": {
        "type": "factory",
        "id": "983ee41ceff62dc4"
      },
      "id": "983ee41ceff62dc4",
      "type": "add",
      "after": "5e5502966da189d9",
      "date": 1684842189225
    },
    {
      "type": "edit",
      "id": "983ee41ceff62dc4",
      "item": {
        "type": "video",
        "id": "983ee41ceff62dc4",
        "text": "YOUTUBE Rqv9UUqYS4s"
      },
      "date": 1684842197812
    },
    {
      "type": "edit",
      "id": "983ee41ceff62dc4",
      "item": {
        "type": "video",
        "id": "983ee41ceff62dc4",
        "text": "YOUTUBE Rqv9UUqYS4s\nTrans-Gender Identity: Contrapoints."
      },
      "date": 1684842211971
    },
    {
      "item": {
        "type": "factory",
        "id": "f71daad5ab33f6a8"
      },
      "id": "f71daad5ab33f6a8",
      "type": "add",
      "after": "983ee41ceff62dc4",
      "date": 1684842277600
    },
    {
      "id": "f71daad5ab33f6a8",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "5e5502966da189d9",
        "f71daad5ab33f6a8",
        "983ee41ceff62dc4"
      ],
      "date": 1684842281992
    },
    {
      "type": "edit",
      "id": "f71daad5ab33f6a8",
      "item": {
        "type": "video",
        "id": "f71daad5ab33f6a8",
        "text": "YOUTUBE X4-Y9oUlpkE"
      },
      "date": 1684842301355
    },
    {
      "item": {
        "type": "factory",
        "id": "41d1b5973b9d583c"
      },
      "id": "41d1b5973b9d583c",
      "type": "add",
      "after": "983ee41ceff62dc4",
      "date": 1684842407570
    },
    {
      "id": "41d1b5973b9d583c",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "41d1b5973b9d583c",
        "5e5502966da189d9",
        "f71daad5ab33f6a8",
        "983ee41ceff62dc4"
      ],
      "date": 1684842411746
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "https://youtu.be/X4-Y9oUlpkE?t=1025"
      },
      "date": 1684842422233
    },
    {
      "id": "f71daad5ab33f6a8",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "5e5502966da189d9",
        "983ee41ceff62dc4"
      ],
      "date": 1684842428117
    },
    {
      "type": "edit",
      "id": "f71daad5ab33f6a8",
      "item": {
        "type": "video",
        "id": "f71daad5ab33f6a8",
        "text": "YOUTUBE X4-Y9oUlpkE\nIs SAFe REALLY Safe?"
      },
      "date": 1684842439646
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "https://youtu.be/X4-Y9oUlpkE?t=1025 – I think that this is a very different\nkind of approach and a significantly\n17:09\nmore agile one instead of defining a\n17:12\nspecific solution which I think is what\n17:14\nsafe is trying to do here in continuous\n17:17\ndelivery we Define the fitness function\n17:18\nthe goals that you are that you should\n17:21\nbe aiming to iterate towards after each\n17:24\nSmall Change are you now closer or\n17:27\nfurther from your goal of maintaining\n17:29\nyour software in a permanently\n17:30\nreleasable state that tells you whether\n17:33\nthe change is a good one or not "
      },
      "date": 1684843124292
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "[https://youtu.be/X4-Y9oUlpkE?t=1025 ] – I think that this is a very different\nkind of approach and a significantly\n17:09\nmore agile one instead of defining a\n17:12\nspecific solution which I think is what\n17:14\nsafe is trying to do here in continuous\n17:17\ndelivery we Define the fitness function\n17:18\nthe goals that you are that you should\n17:21\nbe aiming to iterate towards after each\n17:24\nSmall Change are you now closer or\n17:27\nfurther from your goal of maintaining\n17:29\nyour software in a permanently\n17:30\nreleasable state that tells you whether\n17:33\nthe change is a good one or not "
      },
      "date": 1684843134449
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "[https://youtu.be/X4-Y9oUlpkE?t=1025 17:06] – I think that this is a very different\nkind of approach and a significantly\nmore agile one instead of defining a\nspecific solution which I think is what\nsafe is trying to do here in continuous\ndelivery we Define the fitness function\nthe goals that you are that you should\nbe aiming to iterate towards after each\nSmall Change are you now closer or\nfurther from your goal of maintaining\nyour software in a permanently\nreleasable state that tells you whether\nthe change is a good one or not "
      },
      "date": 1684843194468
    },
    {
      "item": {
        "type": "factory",
        "id": "4272e0022a474727"
      },
      "id": "4272e0022a474727",
      "type": "add",
      "after": "983ee41ceff62dc4",
      "date": 1684843283532
    },
    {
      "id": "4272e0022a474727",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "5e5502966da189d9",
        "983ee41ceff62dc4"
      ],
      "date": 1684843286716
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "[https://youtu.be/X4-Y9oUlpkE?t=1025 17:06] – […] a very different\nkind of approach and a significantly\nmore agile one instead of defining a\nspecific solution which I think is what\nsafe is trying to do here in continuous\ndelivery we Define the fitness function\nthe goals that you are that you should\nbe aiming to iterate towards after each\nSmall Change are you now closer or\nfurther from your goal of maintaining\nyour software in a permanently\nreleasable state that tells you whether\nthe change is a good one or not "
      },
      "date": 1684843322951
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "[https://youtu.be/X4-Y9oUlpkE?t=1025 17:06] – […] a very different\nkind of approach and a significantly\nmore agile one instead of defining a\nspecific solution which I think is what\nsafe is trying to do here in continuous\ndelivery we define the fitness function\nthe goals that you are that you should\nbe aiming to iterate towards after each\nSmall Change are you now closer or\nfurther from your goal of maintaining\nyour software in a permanently\nreleasable state that tells you whether\nthe change is a good one or not "
      },
      "date": 1684843335125
    },
    {
      "type": "edit",
      "id": "4272e0022a474727",
      "item": {
        "type": "image",
        "id": "4272e0022a474727",
        "text": "Iterating Toward a [[Goal]]",
        "size": "wide",
        "width": 416,
        "height": 260,
        "url": "/assets/plugins/image/5dcb6a8d92f610d5631c015227e8056f.jpg"
      },
      "date": 1684843414324
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "[https://youtu.be/X4-Y9oUlpkE?t=1025 17:06] – […] a very different\nkind of approach and a significantly\nmore agile one instead of defining a\nspecific solution which I think is what\n[[SAFe]] is trying to do here in continuous\ndelivery we define the fitness function\nthe goals that you are that you should\nbe aiming to iterate towards after each\nSmall Change are you now closer or\nfurther from your goal of maintaining\nyour software in a permanently\nreleasable state that tells you whether\nthe change is a good one or not "
      },
      "date": 1684843541687
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "[https://youtu.be/X4-Y9oUlpkE?t=1025 17:06] – […] a very different kind of approach and a significantlymore agile one: instead of defining a specific solution, which I think is what\n[[SAFe]] is trying to do here, in continuous\ndelivery we define the fitness function,\nthe goals that you are that you should\nbe aiming to iterate towards after each\nsmall change are you now closer or\nfurther from your goal of maintaining\nyour software in a permanently\nreleasable state that tells you whether\nthe change is a good one or not "
      },
      "date": 1684843639706
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "[https://youtu.be/X4-Y9oUlpkE?t=1025 17:06] – […] a very different kind of approach and a significantly more agile one: instead of defining a specific solution, which I think is what\n[[SAFe]] is trying to do here, in continuous\ndelivery we define the fitness function,\nthe goals that you are that you should\nbe aiming to iterate towards after each\nsmall change are you now closer or\nfurther from your goal of maintaining\nyour software in a permanently\nreleasable state that tells you whether\nthe change is a good one or not "
      },
      "date": 1684843647459
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "[https://youtu.be/X4-Y9oUlpkE?t=1025 17:06] – […] a very different kind of approach and a significantly more agile one: instead of defining a specific solution, which I think is what\n[[SAFe]] is trying to do here, in Continuous Delivery we define the fitness function,\nthe goals that you are that you should\nbe aiming to iterate towards after each\nsmall change are you now closer or\nfurther from your goal of maintaining\nyour software in a permanently\nreleasable state that tells you whether\nthe change is a good one or not "
      },
      "date": 1684843687587
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "[https://youtu.be/X4-Y9oUlpkE?t=1025 17:06] – […] a very different kind of approach and a significantly more agile one: instead of defining a specific solution, which I think is what\n[[SAFe]] is trying to do here, in [[Continuous Delivery]] we define the fitness function,\nthe goals that you are that you should\nbe aiming to iterate towards after each\nsmall change are you now closer or\nfurther from your goal of maintaining\nyour software in a permanently\nreleasable state that tells you whether\nthe change is a good one or not "
      },
      "date": 1684843697635
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "[https://youtu.be/X4-Y9oUlpkE?t=1025 17:06] – […] a very different kind of approach and a significantly more agile one: instead of defining a specific solution, which I think is what\n[[SAFe]] is trying to do here, in [[Continuous Delivery]] we define the fitness function,\nthe goals that you are that you should\nbe aiming to iterate towards after each\nsmall change. Are you now closer or further from your goal of maintaining your software in a permanently releasable state? That tells you whether the change is a good one or not."
      },
      "date": 1684843748478
    },
    {
      "item": {
        "type": "factory",
        "id": "c2f3e64028cbeda5"
      },
      "id": "c2f3e64028cbeda5",
      "type": "add",
      "after": "983ee41ceff62dc4",
      "date": 1684843760377
    },
    {
      "type": "edit",
      "id": "c2f3e64028cbeda5",
      "item": {
        "type": "reference",
        "id": "c2f3e64028cbeda5",
        "site": "wiki.ralfbarkow.ch",
        "slug": "compass",
        "title": "Compass",
        "text": "⇒ [[The Idea Compass]] ⇒ [[Chinese Story Structure]]"
      },
      "date": 1684843777919
    },
    {
      "id": "c2f3e64028cbeda5",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4"
      ],
      "date": 1684843781935
    },
    {
      "type": "edit",
      "id": "41d1b5973b9d583c",
      "item": {
        "type": "paragraph",
        "id": "41d1b5973b9d583c",
        "text": "[https://youtu.be/X4-Y9oUlpkE?t=1025 17:06] – […] a very different kind of approach and a significantly more agile one: instead of defining a specific solution, which I think is what\n[[SAFe]] is trying to do here, in [[Continuous Delivery]] we define the [[Fitness Function]],\nthe goals that you are that you should\nbe aiming to iterate towards after each\nsmall change. Are you now closer or further from your goal of maintaining your software in a permanently releasable state? That tells you whether the change is a good one or not."
      },
      "date": 1684843961045
    },
    {
      "type": "edit",
      "id": "72e7dd1a90e326a1",
      "item": {
        "type": "paragraph",
        "id": "72e7dd1a90e326a1",
        "text": "FREUDENBERG, Vanessa, 2021. Frontend-only Multi-Player. Unlimited Bandwidth. Or: What is Croquet.io, really? Online. 30 August 2021. [Accessed 23 May 2023]. Available from: https://blog.codefrau.net/2021/08/what-is-croquet-anyways.html A multi-player web app needs a backend, right? What if I told you, it doesn’t? Read on for how [[Croquet]] gets rid of servers. No, really .   I..."
      },
      "date": 1684850171585
    },
    {
      "type": "add",
      "id": "09282a61ea85db21",
      "item": {
        "type": "paragraph",
        "id": "09282a61ea85db21",
        "text": "Tutorial – Electric Clojure"
      },
      "after": "72e7dd1a90e326a1",
      "date": 1684850174794
    },
    {
      "type": "edit",
      "id": "09282a61ea85db21",
      "item": {
        "type": "paragraph",
        "id": "09282a61ea85db21",
        "text": "Tutorial – Electric Clojure [https://electric.hyperfiddle.net/user.demo-toggle!%54oggle page]"
      },
      "date": 1684850218153
    },
    {
      "type": "add",
      "id": "08d7738e69476057",
      "item": {
        "type": "paragraph",
        "id": "08d7738e69476057",
        "text": "[[Calva]]"
      },
      "after": "09282a61ea85db21",
      "date": 1684851831222
    },
    {
      "type": "edit",
      "id": "08d7738e69476057",
      "item": {
        "type": "paragraph",
        "id": "08d7738e69476057",
        "text": "⇒ [[Calva]]"
      },
      "date": 1684851840016
    },
    {
      "type": "add",
      "id": "4e960bab468504bd",
      "item": {
        "type": "paragraph",
        "id": "4e960bab468504bd",
        "text": "The Clojure Style Guide"
      },
      "after": "08d7738e69476057",
      "date": 1684855256343
    },
    {
      "type": "edit",
      "id": "4e960bab468504bd",
      "item": {
        "type": "paragraph",
        "id": "4e960bab468504bd",
        "text": "The Clojure Style Guide [https://guide.clojure.style/ site]"
      },
      "date": 1684855269451
    },
    {
      "id": "4e960bab468504bd",
      "type": "remove",
      "removedTo": {
        "page": "Clojure"
      },
      "date": 1684855278004
    },
    {
      "type": "add",
      "id": "8f8813fccf95438b",
      "item": {
        "type": "paragraph",
        "id": "8f8813fccf95438b",
        "text": "[[elm-pages||"
      },
      "after": "08d7738e69476057",
      "date": 1684855453903
    },
    {
      "type": "edit",
      "id": "8f8813fccf95438b",
      "item": {
        "type": "paragraph",
        "id": "8f8813fccf95438b",
        "text": "⇒ [[elm-pages]]: "
      },
      "date": 1684855464010
    },
    {
      "type": "edit",
      "id": "8f8813fccf95438b",
      "item": {
        "type": "paragraph",
        "id": "8f8813fccf95438b",
        "text": "⇒ [[Dillon Kearns]] ⇒ [[elm-pages]]: \n\nThere are API routes for data in your app/Api.elm file. If you want to consume data outside of elm-pages, then you could use Api.elm. If you want to consume data in your Route Modules in elm-pages then don't use Api.elm to communicate data to elm-pages, just use the Route's data.\n"
      },
      "date": 1684855493249
    },
    {
      "type": "edit",
      "id": "8f8813fccf95438b",
      "item": {
        "type": "paragraph",
        "id": "8f8813fccf95438b",
        "text": "⇒ [[Dillon Kearns]] ⇒ [[elm-pages]]: \n\nThere are API routes for data in your app/Api.elm file. If you want to consume data outside of elm-pages, then you could use Api.elm. If you want to consume data in your Route Modules in elm-pages then don't use Api.elm to communicate data to elm-pages, just use the Route's data. [https://elmlang.slack.com/archives/CNSNETV37/p1683072222560699?thread_ts=1682671301.861339&cid=CNSNETV37 slack]\n"
      },
      "date": 1684855510494
    },
    {
      "type": "edit",
      "id": "8f8813fccf95438b",
      "item": {
        "type": "paragraph",
        "id": "8f8813fccf95438b",
        "text": "⇒ [[Dillon Kearns]] ⇒ [[elm-pages]]: There are API routes for data in your app/Api.elm file. If you want to consume data outside of elm-pages, then you could use Api.elm. If you want to consume data in your Route Modules in elm-pages then don't use Api.elm to communicate data to elm-pages, just use the Route's data. [https://elmlang.slack.com/archives/CNSNETV37/p1683072222560699?thread_ts=1682671301.861339&cid=CNSNETV37 slack]\n"
      },
      "date": 1684855553177
    },
    {
      "type": "edit",
      "id": "8f8813fccf95438b",
      "item": {
        "type": "paragraph",
        "id": "8f8813fccf95438b",
        "text": "⇒ [[Dillon Kearns]] ⇒ [[elm-pages]]: There are API routes for data in your app/Api.elm file. If you want to consume data outside of elm-pages, then you could use Api.elm. If you want to consume data in your Route Modules in elm-pages then don't use Api.elm to communicate data to elm-pages, just use the Route's data. [https://elmlang.slack.com/archives/CNSNETV37/p1683072222560699?thread_ts=1682671301.861339&cid=CNSNETV37 slack]"
      },
      "date": 1684859139232
    },
    {
      "type": "add",
      "id": "e489e328ac60bb54",
      "item": {
        "type": "paragraph",
        "id": "e489e328ac60bb54",
        "text": "Javascript allows building applications which do not need to reload the page on every update. All necessary code is retrieved with a single page load, and additional resources are loaded dynamically. There are frameworks like Angular, React, and Elm which support building a single page application. In this thesis, we investigate the two more modern libraries Elm and React which support reactive programming patterns (see Chapter 4)."
      },
      "after": "8f8813fccf95438b",
      "date": 1684859141289
    },
    {
      "type": "add",
      "id": "b79b14cb0e770e4b",
      "item": {
        "type": "paragraph",
        "id": "b79b14cb0e770e4b",
        "text": "\nBANCK, Daniel, 2017. Live Visualization and Editing of User Behavior in iObserve.  Online. batchelor. Kiel University. [Accessed 23 May 2023]. Available from: https://oceanrep.geomar.de/id/eprint/37711/The iObserve project collects user behavior information and derives from that information user behavior models. The visualization of these models supports operators to understand better how users are using an application, how performance bottlenecks can occur, and how the deployment of the system changes.\n\nIn this thesis, we present an approach and implementation for a behavior model visualization service. The service provides a live visualization of user behavior graphs for operators to inspect. Furthermore, operators can create and modify user behavior graphs to reflect potential changes in user behavior and take future marketing campaigns into account. In an evaluation, we compare different Javascript libraries for their technical fit for the visualization and editor service.\n"
      },
      "after": "8f8813fccf95438b",
      "date": 1684859159608
    },
    {
      "type": "edit",
      "id": "b79b14cb0e770e4b",
      "item": {
        "type": "paragraph",
        "id": "b79b14cb0e770e4b",
        "text": "BANCK, Daniel, 2017. Live Visualization and Editing of User Behavior in iObserve.  Online. batchelor. Kiel University. [Accessed 23 May 2023]. Available from: https://oceanrep.geomar.de/id/eprint/37711/ The [[iObserve]] project collects user behavior information and derives from that information user behavior models. The visualization of these models supports operators to understand better how users are using an application, how performance bottlenecks can occur, and how the deployment of the system changes.\n\nIn this thesis, we present an approach and implementation for a behavior model visualization service. The service provides a live visualization of user behavior graphs for operators to inspect. Furthermore, operators can create and modify user behavior graphs to reflect potential changes in user behavior and take future marketing campaigns into account. In an evaluation, we compare different Javascript libraries for their technical fit for the visualization and editor service.\n"
      },
      "date": 1684859236911
    },
    {
      "type": "add",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]"
      },
      "after": "e489e328ac60bb54",
      "date": 1684859663514
    },
    {
      "type": "edit",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]: Transkript\n5:37\n… we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in haskell and what about the experience of haskell is functional programming and what is wrestling with the type system so we'll talk about ..."
      },
      "date": 1684859709966
    },
    {
      "type": "edit",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]: Transkript of [[Solving Problems the Clojure Way]]\n5:37\n… we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in haskell and what about the experience of haskell is functional programming and what is wrestling with the type system so we'll talk about ..."
      },
      "date": 1684859740050
    },
    {
      "type": "edit",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]: Transkript of [[Solving Problems the Clojure Way]]\n[https://youtu.be/vK1DazRK_a0?t=337 5:37] – … we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in haskell and what about the experience of haskell is functional programming and what is wrestling with the type system so we'll talk about ..."
      },
      "date": 1684859811431
    },
    {
      "type": "edit",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]: Transkript of [[Solving Problems the Clojure Way]]\n[https://youtu.be/vK1DazRK_a0?t=337 5:37] – … we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in haskell and what about the experience of haskell is functional programming and what is wrestling with the type system so we'll talk about ... "
      },
      "date": 1684859995608
    },
    {
      "type": "edit",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]: Transkript of [[Solving Problems the Clojure Way]]\n[https://youtu.be/vK1DazRK_a0?t=337 5:37] – … we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in haskell and what about the experience of haskell is functional programming and what is wrestling with the type system so we'll talk about ... ⇒ [[ Data-Driven Programming]]"
      },
      "date": 1684860016516
    },
    {
      "type": "edit",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]: Transkript of [[Solving Problems the Clojure Way]]\n[https://youtu.be/vK1DazRK_a0?t=337 5:37] – … we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in haskell and what about the experience of haskell is functional programming and what is wrestling with the type system so we'll talk about ... ⇒ [[Data-Driven Programming]]"
      },
      "date": 1684860026481
    },
    {
      "type": "edit",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]: Transkript of [[Solving Problems the Clojure Way]]\n[https://youtu.be/vK1DazRK_a0?t=337 5:37] – … we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in haskell and what about the experience of haskell is functional programming and what is wrestling with the type system so we'll talk about ... ⇒ [[Data-Driven Programming]]: \n55:34\n... is our data where do we need to move it how do we transform it so it's this kind of like data first thinking approach but it's kind of like very high level the second definition or way of thinking about it is the fact that closure just uses plain data structures when you write closure code you don't type "
      },
      "date": 1684860083583
    },
    {
      "type": "edit",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]: Transkript of [[Solving Problems the Clojure Way]]\n[https://youtu.be/vK1DazRK_a0?t=337 5:37] – … we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in haskell and what about the experience of haskell is functional programming and what is wrestling with the type system so we'll talk about ... ⇒ [[Data-Driven Programming]]: [https://youtu.be/vK1DazRK_a0?t=3334 55:34] – … is our data where do we need to move it how do we transform it so it's this kind of like data first thinking approach but it's kind of like very high level the second definition or way of thinking about it is the fact that closure just uses plain data structures when you write closure code you don't type "
      },
      "date": 1684860110979
    },
    {
      "type": "edit",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]: Transkript of [[Solving Problems the Clojure Way]]\n[https://youtu.be/vK1DazRK_a0?t=337 5:37] – … we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in haskell and what about the experience of haskell is functional programming and what is wrestling with the type system so we'll talk about ... ⇒ [[Data-Driven Programming]]: [https://youtu.be/vK1DazRK_a0?t=3334 55:34] – … is our data where do we need to move it how do we transform it so it's this kind of like data first thinking approach but it's kind of like very high level the second definition or way of thinking about it is the fact that closure just uses plain data structures when you write closure code you don't type … [use of \"plain data\" (vs. typed structs, objects)]"
      },
      "date": 1684860189328
    },
    {
      "type": "add",
      "id": "ffd742c1ef3f8b7d",
      "item": {
        "type": "paragraph",
        "id": "ffd742c1ef3f8b7d",
        "text": "Programs as Data Flows"
      },
      "after": "b855f9801dbabce4",
      "date": 1684860264424
    },
    {
      "type": "edit",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]: Transkript of [[Solving Problems the Clojure Way]]\n[https://youtu.be/vK1DazRK_a0?t=337 5:37] – … we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in [[Haskell]] and what about the experience of Haskell is functional programming and what is wrestling with the type system so we'll talk about ... ⇒ [[Data-Driven Programming]]: [https://youtu.be/vK1DazRK_a0?t=3334 55:34] – … is our data where do we need to move it how do we transform it so it's this kind of like data first thinking approach but it's kind of like very high level the second definition or way of thinking about it is the fact that closure just uses plain data structures when you write closure code you don't type … [use of \"plain data\" (vs. typed structs, objects)]"
      },
      "date": 1684860308272
    },
    {
      "type": "edit",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]: Transkript of [[Solving Problems the Clojure Way]]\n[https://youtu.be/vK1DazRK_a0?t=337 5:37] – … we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in [[Haskell]] and what about the experience of Haskell is functional programming and what is wrestling with the type system? So we'll talk about ... ⇒ [[Data-Driven Programming]]: [https://youtu.be/vK1DazRK_a0?t=3334 55:34] – … is our data where do we need to move it how do we transform it so it's this kind of like data first thinking approach but it's kind of like very high level the second definition or way of thinking about it is the fact that closure just uses plain data structures when you write closure code you don't type … [use of \"plain data\" (vs. typed structs, objects)]"
      },
      "date": 1684860340292
    },
    {
      "type": "edit",
      "id": "b855f9801dbabce4",
      "item": {
        "type": "paragraph",
        "id": "b855f9801dbabce4",
        "text": "⇒ [[Rafal Dittwald]]: Transkript of [[Solving Problems the Clojure Way]]\n[https://youtu.be/vK1DazRK_a0?t=337 5:37] – … we don't really think about types almost at all and it's a very very different experience so it's sometimes hard to extract you know what in [[Haskell]] and what about the experience of Haskell is functional programming and what is wrestling with the type system? So we'll talk about ... ⇒ [[Data-Driven Programming]]: [https://youtu.be/vK1DazRK_a0?t=3334 55:34] – … is our data where do we need to move it how do we transform it so it's this kind of like data first thinking approach but it's kind of like very high level the second definition or way of thinking about it is the fact that [[Closure]] just uses plain data structures when you write closure code you don't type … [use of \"plain data\" (vs. typed structs, objects)]"
      },
      "date": 1684860373803
    },
    {
      "item": {
        "type": "factory",
        "id": "cf209b0164c85cfc"
      },
      "id": "cf209b0164c85cfc",
      "type": "add",
      "after": "983ee41ceff62dc4",
      "date": 1684860568409
    },
    {
      "id": "cf209b0164c85cfc",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4"
      ],
      "date": 1684860577906
    },
    {
      "type": "edit",
      "id": "cf209b0164c85cfc",
      "item": {
        "type": "pagefold",
        "id": "cf209b0164c85cfc",
        "text": "~"
      },
      "date": 1684860581778
    },
    {
      "type": "add",
      "id": "5b24f9e64c81aa65",
      "item": {
        "type": "paragraph",
        "id": "5b24f9e64c81aa65",
        "text": "[[Elm]] [17] is an open source programming language which compiles to Javascript. It uses a functional programming paradigm and addresses many weaknesses of Javascript, like confusing equality operators and implicit type conversion. All data structures in Elm are immutable by default; everything is typed,"
      },
      "after": "e489e328ac60bb54",
      "date": 1684860594968
    },
    {
      "type": "add",
      "id": "09db204e40554beb",
      "item": {
        "type": "paragraph",
        "id": "09db204e40554beb",
        "text": "[17] Elm. A delightful language for reliable webapps. url: http://elm-lang.org/ (visited on 12/03/2016) (cited on page 6)."
      },
      "after": "5b24f9e64c81aa65",
      "date": 1684860650176
    },
    {
      "type": "edit",
      "id": "09db204e40554beb",
      "item": {
        "type": "paragraph",
        "id": "09db204e40554beb",
        "text": "[17] Elm. A delightful language for reliable webapps. url: [http://elm-lang.org/ http://elm-lang.org/] (visited on 12/03/2016) (cited on page 6)."
      },
      "date": 1684860696849
    },
    {
      "type": "add",
      "id": "a556c4e4495fb6f0",
      "item": {
        "type": "paragraph",
        "id": "a556c4e4495fb6f0",
        "text": "Elm suggests a simple pattern for web application architectures, called the Elm Architecture. Each application can be separated into three parts. A model which holds the state of the application (model), a collection of functions which update the state (update) and a collection of functions which render the state as HTML (view)."
      },
      "after": "ffd742c1ef3f8b7d",
      "date": 1684860834588
    },
    {
      "type": "edit",
      "id": "a556c4e4495fb6f0",
      "item": {
        "type": "paragraph",
        "id": "a556c4e4495fb6f0",
        "text": "Elm suggests a simple pattern for web application architectures, called [[The Elm Architecture]]. Each application can be separated into three parts. A model which holds the state of the application (model), a collection of functions which update the state (update) and a collection of functions which render the state as HTML (view)."
      },
      "date": 1684860859070
    },
    {
      "type": "add",
      "id": "57209e707cde79be",
      "item": {
        "type": "paragraph",
        "id": "57209e707cde79be",
        "text": "[[Make Data Structures]]"
      },
      "after": "a556c4e4495fb6f0",
      "date": 1684862434133
    },
    {
      "type": "edit",
      "id": "57209e707cde79be",
      "item": {
        "type": "paragraph",
        "id": "57209e707cde79be",
        "text": "⇒  [[Make Data Structures]]"
      },
      "date": 1684862450663
    },
    {
      "type": "edit",
      "id": "57209e707cde79be",
      "item": {
        "type": "paragraph",
        "id": "57209e707cde79be",
        "text": "⇒ [[Richard Feldman]] ⇒ [[Make Data Structures]]"
      },
      "date": 1684862485268
    },
    {
      "type": "edit",
      "id": "57209e707cde79be",
      "item": {
        "type": "paragraph",
        "id": "57209e707cde79be",
        "text": "⇒ [[Richard Feldman]] ⇒ [[Make Data Structures]] "
      },
      "date": 1684862776988
    },
    {
      "type": "add",
      "id": "b6823f34c373cb32",
      "item": {
        "type": "paragraph",
        "id": "b6823f34c373cb32",
        "text": " rtfeldman /\nelm-spa-example "
      },
      "after": "57209e707cde79be",
      "date": 1684862780437
    },
    {
      "type": "edit",
      "id": "b6823f34c373cb32",
      "item": {
        "type": "paragraph",
        "id": "b6823f34c373cb32",
        "text": "rtfeldman / elm-spa-example [https://github.com/rtfeldman/elm-spa-example github]"
      },
      "date": 1684862802522
    },
    {
      "type": "remove",
      "id": "b6823f34c373cb32",
      "date": 1684862814937
    },
    {
      "type": "edit",
      "id": "57209e707cde79be",
      "item": {
        "type": "paragraph",
        "id": "57209e707cde79be",
        "text": "⇒ [[Richard Feldman]] ⇒ rtfeldman / elm-spa-example [https://github.com/rtfeldman/elm-spa-example github] ⇒ [[Make Data Structures]] "
      },
      "date": 1684862823908
    },
    {
      "type": "add",
      "id": "031eb0df154e0720",
      "item": {
        "type": "paragraph",
        "id": "031eb0df154e0720",
        "text": "Forms in Elm —Validation, Tutorial and Examples — Part 1"
      },
      "after": "57209e707cde79be",
      "date": 1684863418279
    },
    {
      "type": "edit",
      "id": "031eb0df154e0720",
      "item": {
        "type": "paragraph",
        "id": "031eb0df154e0720",
        "text": "Forms in Elm —Validation, Tutorial and Examples — Part 1 [https://lucamug.medium.com/forms-in-elm-validation-tutorial-and-examples-2339830055da post]"
      },
      "date": 1684863428376
    },
    {
      "item": {
        "type": "factory",
        "id": "dca68d42861ec763"
      },
      "id": "dca68d42861ec763",
      "type": "add",
      "after": "983ee41ceff62dc4",
      "date": 1684872060629
    },
    {
      "type": "edit",
      "id": "dca68d42861ec763",
      "item": {
        "type": "pagefold",
        "id": "dca68d42861ec763",
        "text": "~"
      },
      "date": 1684872065665
    },
    {
      "item": {
        "type": "factory",
        "id": "3bb255801e7406a1"
      },
      "id": "3bb255801e7406a1",
      "type": "add",
      "after": "dca68d42861ec763",
      "date": 1684872068539
    },
    {
      "type": "edit",
      "id": "3bb255801e7406a1",
      "item": {
        "type": "paragraph",
        "id": "3bb255801e7406a1",
        "text": "⇒ [[Forms]]"
      },
      "date": 1684872086992
    },
    {
      "item": {
        "type": "factory",
        "id": "ce4dede5ae47970c"
      },
      "id": "ce4dede5ae47970c",
      "type": "add",
      "after": "3bb255801e7406a1",
      "date": 1684872204326
    },
    {
      "type": "edit",
      "id": "ce4dede5ae47970c",
      "item": {
        "type": "paragraph",
        "id": "ce4dede5ae47970c",
        "text": "Now we will make a rudimentary form. It has a field for your name, a field for your password, and a field to verify that password. We will also do some very simple validation to check if the passwords match."
      },
      "date": 1684872206426
    },
    {
      "type": "edit",
      "id": "3bb255801e7406a1",
      "item": {
        "type": "paragraph",
        "id": "3bb255801e7406a1",
        "text": "⇒ [[Forms]]: https://guide.elm-lang.org/architecture/forms.html [elm-lang]"
      },
      "date": 1684872333184
    },
    {
      "type": "edit",
      "id": "3bb255801e7406a1",
      "item": {
        "type": "paragraph",
        "id": "3bb255801e7406a1",
        "text": "⇒ [[Forms]]: [https://guide.elm-lang.org/architecture/forms.html elm-lang]"
      },
      "date": 1684872369180
    },
    {
      "item": {
        "type": "factory",
        "id": "2381d24dac6fae09"
      },
      "id": "2381d24dac6fae09",
      "type": "add",
      "after": "ce4dede5ae47970c",
      "date": 1684872458237
    },
    {
      "type": "edit",
      "id": "2381d24dac6fae09",
      "item": {
        "type": "code",
        "id": "2381d24dac6fae09",
        "text": "module Main exposing (main)\n-- Input a user name and password. Make sure the password matches.\n--\n-- Read how it works:\n--   https://guide.elm-lang.org/architecture/forms.html\n--\n\nimport Browser\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (onInput)\n\n\n\n-- MAIN\n\n\nmain =\n  Browser.sandbox { init = init, update = update, view = view }\n\n\n\n-- MODEL\n\n\ntype alias Model =\n  { name : String\n  , password : String\n  , passwordAgain : String\n  }\n\n\ninit : Model\ninit =\n  Model \"\" \"\" \"\"\n\n\n\n-- UPDATE\n\n\ntype Msg\n  = Name String\n  | Password String\n  | PasswordAgain String\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n  case msg of\n    Name name ->\n      { model | name = name }\n\n    Password password ->\n      { model | password = password }\n\n    PasswordAgain password ->\n      { model | passwordAgain = password }\n\n\n\n-- VIEW\n\n\nview : Model -> Html Msg\nview model =\n  div []\n    [ viewInput \"text\" \"Name\" model.name Name\n    , viewInput \"password\" \"Password\" model.password Password\n    , viewInput \"password\" \"Re-enter Password\" model.passwordAgain PasswordAgain\n    , viewValidation model\n    ]\n\n\nviewInput : String -> String -> String -> (String -> msg) -> Html msg\nviewInput t p v toMsg =\n  input [ type_ t, placeholder p, value v, onInput toMsg ] []\n\n\nviewValidation : Model -> Html msg\nviewValidation model =\n  if model.password == model.passwordAgain then\n    div [ style \"color\" \"green\" ] [ text \"OK\" ]\n  else\n    div [ style \"color\" \"red\" ] [ text \"Passwords do not match!\" ]"
      },
      "date": 1684872462667
    },
    {
      "type": "edit",
      "id": "2381d24dac6fae09",
      "item": {
        "type": "code",
        "id": "2381d24dac6fae09",
        "text": "module Main exposing (main)\n\n-- Input a user name and password. Make sure the password matches.\n--\n-- Read how it works:\n--   https://guide.elm-lang.org/architecture/forms.html\n--\n\nimport Browser\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (onInput)\n\n\n\n-- MAIN\n\n\nmain =\n    Browser.sandbox { init = init, update = update, view = view }\n\n\n\n-- MODEL\n\n\ntype alias Model =\n    { name : String\n    , password : String\n    , passwordAgain : String\n    }\n\n\ninit : Model\ninit =\n    Model \"\" \"\" \"\"\n\n\n\n-- UPDATE\n\n\ntype Msg\n    = Name String\n    | Password String\n    | PasswordAgain String\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        Name name ->\n            { model | name = name }\n\n        Password password ->\n            { model | password = password }\n\n        PasswordAgain password ->\n            { model | passwordAgain = password }\n\n\n\n-- VIEW\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ viewInput \"text\" \"Name\" model.name Name\n        , viewInput \"password\" \"Password\" model.password Password\n        , viewInput \"password\" \"Re-enter Password\" model.passwordAgain PasswordAgain\n        , viewValidation model\n        ]\n\n\nviewInput : String -> String -> String -> (String -> msg) -> Html msg\nviewInput t p v toMsg =\n    input [ type_ t, placeholder p, value v, onInput toMsg ] []\n\n\nviewValidation : Model -> Html msg\nviewValidation model =\n    if model.password == model.passwordAgain then\n        div [ style \"color\" \"green\" ] [ text \"OK\" ]\n\n    else\n        div [ style \"color\" \"red\" ] [ text \"Passwords do not match!\" ]\n"
      },
      "date": 1684872582504
    },
    {
      "item": {
        "type": "factory",
        "id": "f06251044c53b47d"
      },
      "id": "f06251044c53b47d",
      "type": "add",
      "after": "2381d24dac6fae09",
      "date": 1684873315581
    },
    {
      "type": "edit",
      "id": "f06251044c53b47d",
      "item": {
        "type": "paragraph",
        "id": "f06251044c53b47d",
        "text": "\nKEARNS, Dillon, 2023. Realworld app (elm-spa-example) in elm-pages v3. Elm. Online. 7 March 2023. [Accessed 25 April 2023]. Available from: https://discourse.elm-lang.org/t/realworld-app-elm-spa-example-in-elm-pages-v3/8992Hello everyone!  As I’m nearing the elm-pages v3 release, I’m building a few examples to showcase some of the new features. Since elm-spa-example is the canonical Elm app, I went ahead and created a version of that with elm-pages.  I started with the code from GitHub - ryannhg/elm-spa-realworld: The RealWorld example app built with elm-spa! since elm-pages and elm-spa both have file-based routing, so that was a more similar starting point to fork from.  Here’s the live demo (runs on Netlify with...\n"
      },
      "date": 1684873318204
    },
    {
      "type": "edit",
      "id": "f06251044c53b47d",
      "item": {
        "type": "paragraph",
        "id": "f06251044c53b47d",
        "text": "KEARNS, Dillon, 2023. Realworld app (elm-spa-example) in elm-pages v3. Elm. Online. 7 March 2023. [Accessed 25 April 2023]. Available from: https://discourse.elm-lang.org/t/realworld-app-elm-spa-example-in-elm-pages-v3/8992 Hello everyone!  As I’m nearing the elm-pages v3 release, I’m building a few examples to showcase some of the new features. Since elm-spa-example is the canonical Elm app, I went ahead and created a version of that with elm-pages.  I started with the code from GitHub - ryannhg/elm-spa-realworld: The RealWorld example app built with elm-spa! since elm-pages and elm-spa both have file-based routing, so that was a more similar starting point to fork from.  Here’s the live demo (runs on Netlify with...\n"
      },
      "date": 1684873324806
    },
    {
      "type": "edit",
      "id": "f06251044c53b47d",
      "item": {
        "type": "paragraph",
        "id": "f06251044c53b47d",
        "text": "KEARNS, Dillon, 2023. Realworld app (elm-spa-example) in elm-pages v3. Elm. Online. 7 March 2023. [Accessed 25 April 2023]. Available from: https://discourse.elm-lang.org/t/realworld-app-elm-spa-example-in-elm-pages-v3/8992 Hello everyone!  As I’m nearing the elm-pages v3 release, I’m building a few examples to showcase some of the new features. Since elm-spa-example is the canonical Elm app, I went ahead and created a version of that with elm-pages.  I started with the code from GitHub - ryannhg/elm-spa-realworld: The RealWorld example app built with elm-spa! since elm-pages and elm-spa both have [[File-Based Routing]], so that was a more similar starting point to fork from.  Here’s the live demo (runs on Netlify with...\n"
      },
      "date": 1684873393036
    },
    {
      "item": {
        "type": "factory",
        "id": "4983ce1445b3fb75"
      },
      "id": "4983ce1445b3fb75",
      "type": "add",
      "after": "f06251044c53b47d",
      "date": 1684874045538
    },
    {
      "id": "4983ce1445b3fb75",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "f06251044c53b47d"
      ],
      "date": 1684874051914
    },
    {
      "type": "edit",
      "id": "4983ce1445b3fb75",
      "item": {
        "type": "paragraph",
        "id": "4983ce1445b3fb75",
        "text": "The provided code is written in the Elm programming language and defines an update function. The update function takes a Msg (message) and a Model as input and returns a new Model.\n\nLet's break down the code step by step:"
      },
      "date": 1684874082905
    },
    {
      "item": {
        "type": "factory",
        "id": "75710e1f95dc3a51"
      },
      "id": "75710e1f95dc3a51",
      "type": "add",
      "after": "f06251044c53b47d",
      "date": 1684874089378
    },
    {
      "item": {
        "type": "factory",
        "id": "015c955697e0a850"
      },
      "id": "015c955697e0a850",
      "type": "add",
      "after": "75710e1f95dc3a51",
      "date": 1684874089823
    },
    {
      "id": "75710e1f95dc3a51",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "75710e1f95dc3a51",
        "4983ce1445b3fb75",
        "f06251044c53b47d",
        "015c955697e0a850"
      ],
      "date": 1684874097950
    },
    {
      "id": "015c955697e0a850",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "75710e1f95dc3a51",
        "4983ce1445b3fb75",
        "015c955697e0a850",
        "f06251044c53b47d"
      ],
      "date": 1684874102273
    },
    {
      "type": "edit",
      "id": "015c955697e0a850",
      "item": {
        "type": "pagefold",
        "id": "015c955697e0a850",
        "text": "~"
      },
      "date": 1684874105317
    },
    {
      "id": "4983ce1445b3fb75",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "015c955697e0a850",
        "f06251044c53b47d"
      ],
      "date": 1684874114539
    },
    {
      "type": "add",
      "id": "a2ef76650ed0e86f",
      "item": {
        "type": "paragraph",
        "id": "a2ef76650ed0e86f",
        "text": "This line declares the type signature of the update function. It states that the function takes a Msg and a Model as arguments and returns a Model."
      },
      "after": "4983ce1445b3fb75",
      "date": 1684874129895
    },
    {
      "id": "75710e1f95dc3a51",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "015c955697e0a850",
        "f06251044c53b47d"
      ],
      "date": 1684874131819
    },
    {
      "type": "edit",
      "id": "75710e1f95dc3a51",
      "item": {
        "type": "code",
        "id": "75710e1f95dc3a51",
        "text": "update : Msg -> Model -> Model\n"
      },
      "date": 1684874136193
    },
    {
      "type": "add",
      "id": "36a619c8c2687f36",
      "item": {
        "type": "paragraph",
        "id": "36a619c8c2687f36",
        "text": "The Msg type represents different messages or events that can occur in the application. It is a custom type defined elsewhere in the codebase and will typically have several constructors representing various actions or events that can happen in the application."
      },
      "after": "a2ef76650ed0e86f",
      "date": 1684874174930
    },
    {
      "type": "add",
      "id": "bc049aae6d1cfd5c",
      "item": {
        "type": "paragraph",
        "id": "bc049aae6d1cfd5c",
        "text": "The Model type represents the application state. It contains different fields that store the current state of the application."
      },
      "after": "36a619c8c2687f36",
      "date": 1684874201122
    },
    {
      "item": {
        "type": "factory",
        "id": "80836bf103c03c39"
      },
      "id": "80836bf103c03c39",
      "type": "add",
      "after": "f06251044c53b47d",
      "date": 1684874211900
    },
    {
      "id": "80836bf103c03c39",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "015c955697e0a850",
        "f06251044c53b47d"
      ],
      "date": 1684874216242
    },
    {
      "type": "edit",
      "id": "80836bf103c03c39",
      "item": {
        "type": "code",
        "id": "80836bf103c03c39",
        "text": "The Model type represents the application state. It contains different fields that store the current state of the application."
      },
      "date": 1684874220185
    },
    {
      "type": "edit",
      "id": "80836bf103c03c39",
      "item": {
        "type": "code",
        "id": "80836bf103c03c39",
        "text": "update msg model =\n"
      },
      "date": 1684874224219
    },
    {
      "type": "add",
      "id": "dd4ecb848988d8ac",
      "item": {
        "type": "paragraph",
        "id": "dd4ecb848988d8ac",
        "text": "This line defines the update function with two parameters: msg and model."
      },
      "after": "bc049aae6d1cfd5c",
      "date": 1684874248916
    },
    {
      "id": "80836bf103c03c39",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "dd4ecb848988d8ac",
        "015c955697e0a850",
        "f06251044c53b47d"
      ],
      "date": 1684874250821
    },
    {
      "item": {
        "type": "factory",
        "id": "0f19b8ee9d4f44e3"
      },
      "id": "0f19b8ee9d4f44e3",
      "type": "add",
      "after": "f06251044c53b47d",
      "date": 1684874282176
    },
    {
      "id": "0f19b8ee9d4f44e3",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "dd4ecb848988d8ac",
        "0f19b8ee9d4f44e3",
        "015c955697e0a850",
        "f06251044c53b47d"
      ],
      "date": 1684874287045
    },
    {
      "type": "edit",
      "id": "0f19b8ee9d4f44e3",
      "item": {
        "type": "code",
        "id": "0f19b8ee9d4f44e3",
        "text": "case msg of\n"
      },
      "date": 1684874288956
    },
    {
      "type": "add",
      "id": "9c69d5fad817fd85",
      "item": {
        "type": "paragraph",
        "id": "9c69d5fad817fd85",
        "text": "This line starts a pattern matching expression based on the value of msg. It matches the different constructors of the Msg type."
      },
      "after": "dd4ecb848988d8ac",
      "date": 1684874302120
    },
    {
      "id": "0f19b8ee9d4f44e3",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "dd4ecb848988d8ac",
        "0f19b8ee9d4f44e3",
        "9c69d5fad817fd85",
        "015c955697e0a850",
        "f06251044c53b47d"
      ],
      "date": 1684874304441
    },
    {
      "item": {
        "type": "factory",
        "id": "a60e315a8ee58709"
      },
      "id": "a60e315a8ee58709",
      "type": "add",
      "after": "f06251044c53b47d",
      "date": 1684874311783
    },
    {
      "id": "a60e315a8ee58709",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "dd4ecb848988d8ac",
        "0f19b8ee9d4f44e3",
        "9c69d5fad817fd85",
        "a60e315a8ee58709",
        "015c955697e0a850",
        "f06251044c53b47d"
      ],
      "date": 1684874315503
    },
    {
      "type": "edit",
      "id": "a60e315a8ee58709",
      "item": {
        "type": "code",
        "id": "a60e315a8ee58709",
        "text": "Name name ->\n  { model | name = name }\n"
      },
      "date": 1684874317169
    },
    {
      "type": "add",
      "id": "ba4930b94b1c4a57",
      "item": {
        "type": "paragraph",
        "id": "ba4930b94b1c4a57",
        "text": "If the msg matches the Name constructor, it means that the message is related to updating the name field of the model. In this case, a new model is created using record update syntax ({ model | name = name }). It copies the existing model and updates the name field with the provided name value."
      },
      "after": "9c69d5fad817fd85",
      "date": 1684874444171
    },
    {
      "id": "a60e315a8ee58709",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "dd4ecb848988d8ac",
        "0f19b8ee9d4f44e3",
        "9c69d5fad817fd85",
        "a60e315a8ee58709",
        "ba4930b94b1c4a57",
        "015c955697e0a850",
        "f06251044c53b47d"
      ],
      "date": 1684874445956
    },
    {
      "item": {
        "type": "factory",
        "id": "ae5341462cb8db0a"
      },
      "id": "ae5341462cb8db0a",
      "type": "add",
      "after": "f06251044c53b47d",
      "date": 1684874702972
    },
    {
      "type": "edit",
      "id": "ae5341462cb8db0a",
      "item": {
        "type": "code",
        "id": "ae5341462cb8db0a",
        "text": "Password password ->\n  { model | password = password }\n"
      },
      "date": 1684874705143
    },
    {
      "id": "ae5341462cb8db0a",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "dd4ecb848988d8ac",
        "0f19b8ee9d4f44e3",
        "9c69d5fad817fd85",
        "a60e315a8ee58709",
        "ba4930b94b1c4a57",
        "ae5341462cb8db0a",
        "015c955697e0a850",
        "f06251044c53b47d"
      ],
      "date": 1684874709818
    },
    {
      "item": {
        "type": "factory",
        "id": "c698073c899f7a02"
      },
      "id": "c698073c899f7a02",
      "type": "add",
      "after": "f06251044c53b47d",
      "date": 1684874723219
    },
    {
      "id": "c698073c899f7a02",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "dd4ecb848988d8ac",
        "0f19b8ee9d4f44e3",
        "9c69d5fad817fd85",
        "a60e315a8ee58709",
        "ba4930b94b1c4a57",
        "ae5341462cb8db0a",
        "c698073c899f7a02",
        "015c955697e0a850",
        "f06251044c53b47d"
      ],
      "date": 1684874727463
    },
    {
      "type": "edit",
      "id": "c698073c899f7a02",
      "item": {
        "type": "paragraph",
        "id": "c698073c899f7a02",
        "text": "If the msg matches the Password constructor, it means that the message is related to updating the password field of the model. Similar to the previous case, a new model is created by copying the existing model and updating the password field with the provided password value."
      },
      "date": 1684874729349
    },
    {
      "type": "add",
      "id": "023950b01ebfae0f",
      "item": {
        "type": "paragraph",
        "id": "023950b01ebfae0f",
        "text": "If the msg matches the PasswordAgain constructor, it means that the message is related to updating the passwordAgain field of the model. Again, a new model is created by copying the existing model and updating the passwordAgain field with the provided password value."
      },
      "after": "c698073c899f7a02",
      "date": 1684874761882
    },
    {
      "item": {
        "type": "factory",
        "id": "049e7a1a3349b589"
      },
      "id": "049e7a1a3349b589",
      "type": "add",
      "after": "f06251044c53b47d",
      "date": 1684874768836
    },
    {
      "type": "edit",
      "id": "049e7a1a3349b589",
      "item": {
        "type": "code",
        "id": "049e7a1a3349b589",
        "text": "PasswordAgain password ->\n  { model | passwordAgain = password }\n"
      },
      "date": 1684874773233
    },
    {
      "id": "049e7a1a3349b589",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "dd4ecb848988d8ac",
        "0f19b8ee9d4f44e3",
        "9c69d5fad817fd85",
        "a60e315a8ee58709",
        "ba4930b94b1c4a57",
        "ae5341462cb8db0a",
        "c698073c899f7a02",
        "049e7a1a3349b589",
        "023950b01ebfae0f",
        "015c955697e0a850",
        "f06251044c53b47d"
      ],
      "date": 1684874776793
    },
    {
      "type": "add",
      "id": "42c4f54b3a6a3da8",
      "item": {
        "type": "paragraph",
        "id": "42c4f54b3a6a3da8",
        "text": "Overall, this code defines an update function that handles different messages and updates specific fields of the model accordingly. Depending on the constructor of the Msg, it creates a new model with the corresponding field updated and returns that updated model."
      },
      "after": "023950b01ebfae0f",
      "date": 1684874825457
    },
    {
      "item": {
        "type": "factory",
        "id": "e517bd43e6a7a219"
      },
      "id": "e517bd43e6a7a219",
      "type": "add",
      "after": "f06251044c53b47d",
      "date": 1684876187869
    },
    {
      "type": "edit",
      "id": "e517bd43e6a7a219",
      "item": {
        "type": "pagefold",
        "id": "e517bd43e6a7a219",
        "text": "~"
      },
      "date": 1684876191934
    },
    {
      "item": {
        "type": "factory",
        "id": "fc50ce5416480bf1"
      },
      "id": "fc50ce5416480bf1",
      "type": "add",
      "after": "e517bd43e6a7a219",
      "date": 1684876203022
    },
    {
      "type": "edit",
      "id": "fc50ce5416480bf1",
      "item": {
        "type": "paragraph",
        "id": "fc50ce5416480bf1",
        "text": "\nMILLER, John F., 2017. Using Elm to Submit a form without tracking the field values. Stack Overflow. Online. 5 October 2017. [Accessed 23 May 2023]. Available from: https://stackoverflow.com/q/46580703\n"
      },
      "date": 1684876205680
    },
    {
      "type": "edit",
      "id": "fc50ce5416480bf1",
      "item": {
        "type": "paragraph",
        "id": "fc50ce5416480bf1",
        "text": "MILLER, John F., 2017. Using Elm to Submit a form without tracking the field values. Stack Overflow. Online. 5 October 2017. [Accessed 23 May 2023]. Available from: https://stackoverflow.com/q/46580703\n"
      },
      "date": 1684876228959
    },
    {
      "type": "add",
      "id": "f566e4729e292b33",
      "item": {
        "type": "paragraph",
        "id": "f566e4729e292b33",
        "text": "Elm provides a mechanism to send HTTP requests to a server and handle the responses. Here's an example of how you can send a POST request with the login form data and check for a 200 response:"
      },
      "after": "fc50ce5416480bf1",
      "date": 1684876229901
    },
    {
      "item": {
        "type": "factory",
        "id": "c8a3c48728221061"
      },
      "id": "c8a3c48728221061",
      "type": "add",
      "after": "f566e4729e292b33",
      "date": 1684876274208
    },
    {
      "type": "edit",
      "id": "c8a3c48728221061",
      "item": {
        "type": "code",
        "id": "c8a3c48728221061",
        "text": "import Html exposing (form, input, button, text)\nimport Html.Attributes exposing (placeholder, type_)\nimport Html.Events exposing (onClick)\nimport Http\nimport Json.Decode as Json\n\n-- Define the model\n\ntype alias Model =\n    { username : String\n    , password : String\n    , response : String\n    }\n\ninitialModel : Model\ninitialModel =\n    { username = \"\"\n    , password = \"\"\n    , response = \"\"\n    }\n\n-- Define the Msg type\n\ntype Msg\n    = UsernameChanged String\n    | PasswordChanged String\n    | SubmitClicked\n\n-- Define the update function\n\nupdate : Msg -> Model -> ( Model, Cmd Msg )\nupdate msg model =\n    case msg of\n        UsernameChanged newUsername ->\n            ( { model | username = newUsername }, Cmd.none )\n\n        PasswordChanged newPassword ->\n            ( { model | password = newPassword }, Cmd.none )\n\n        SubmitClicked ->\n            let\n                request =\n                    { method = \"POST\"\n                    , headers = []\n                    , url = \"https://your-server.com/login\" -- Replace with your server URL\n                    , body =\n                        Http.jsonBody <| Json.object\n                            [ ( \"username\", Json.string model.username )\n                            , ( \"password\", Json.string model.password )\n                            ]\n                    , expect = Http.expectString handleResponse\n                    }\n            in\n            ( { model | response = \"Sending request...\" }, Http.send handleHttpError request )\n\nhandleResponse : Result Http.Error String -> Msg\nhandleResponse result =\n    case result of\n        Ok response ->\n            if response == \"200\"\n                then ShowSuccess\n                else ShowError response\n\n        Err error ->\n            ShowError (Http.errorToString error)\n\nhandleHttpError : Http.Error -> Msg\nhandleHttpError error =\n    ShowError (Http.errorToString error)\n\n-- Define the view function\n\nview : Model -> Html Msg\nview model =\n    form []\n        [ input [ placeholder \"Username\", type_ \"text\", onInput UsernameChanged ] []\n        , input [ placeholder \"Password\", type_ \"password\", onInput PasswordChanged ] []\n        , button [ onClick SubmitClicked ] [ text \"Submit\" ]\n        , text model.response\n        ]\n\n-- Start the Elm application\n\nmain : Program () Model Msg\nmain =\n    Html.program\n        { init = ( initialModel, Cmd.none )\n        , view = view\n        , update = update\n        , subscriptions = \\_ -> Sub.none\n        }\n"
      },
      "date": 1684876277397
    },
    {
      "item": {
        "type": "factory",
        "id": "fe62ab30ca4045d2"
      },
      "id": "fe62ab30ca4045d2",
      "type": "add",
      "after": "c8a3c48728221061",
      "date": 1684889960135
    },
    {
      "type": "edit",
      "id": "fe62ab30ca4045d2",
      "item": {
        "type": "pagefold",
        "id": "fe62ab30ca4045d2",
        "text": "~"
      },
      "date": 1684889965694
    },
    {
      "item": {
        "type": "factory",
        "id": "267bf9eef7bb15a4"
      },
      "id": "267bf9eef7bb15a4",
      "type": "add",
      "after": "fe62ab30ca4045d2",
      "date": 1684890057900
    },
    {
      "type": "edit",
      "id": "267bf9eef7bb15a4",
      "item": {
        "type": "paragraph",
        "id": "267bf9eef7bb15a4",
        "text": "Unused pattern variable request ElmLS "
      },
      "date": 1684890062199
    },
    {
      "type": "edit",
      "id": "267bf9eef7bb15a4",
      "item": {
        "type": "paragraph",
        "id": "267bf9eef7bb15a4",
        "text": "Unused pattern variable request [https://github.com/RalfBarkow/vite-elm-app/commit/231e55301dbfc18a60d9436f0aac757ab5eb10e2 github] "
      },
      "date": 1684890094863
    },
    {
      "type": "add",
      "id": "3fa7f59ac5a88624",
      "item": {
        "type": "paragraph",
        "id": "3fa7f59ac5a88624",
        "text": "⇒ [[HTTP]]"
      },
      "after": "267bf9eef7bb15a4",
      "date": 1684890196428
    },
    {
      "type": "edit",
      "id": "3fa7f59ac5a88624",
      "item": {
        "type": "paragraph",
        "id": "3fa7f59ac5a88624",
        "text": "⇒ [[HTTP]]: Make HTTP requests in [[Elm]]. Talk to servers."
      },
      "date": 1684890210551
    },
    {
      "type": "edit",
      "id": "3fa7f59ac5a88624",
      "item": {
        "type": "paragraph",
        "id": "3fa7f59ac5a88624",
        "text": "⇒ [[HTTP]]: Make HTTP requests in [[Elm]]. Talk to servers. [https://package.elm-lang.org/packages/elm/http/2.0.0/ elm-lang]"
      },
      "date": 1684890226867
    },
    {
      "type": "edit",
      "id": "3fa7f59ac5a88624",
      "item": {
        "type": "paragraph",
        "id": "3fa7f59ac5a88624",
        "text": "⇒ [[HTTP]]: Make HTTP requests in [[Elm]]. Talk to servers. [https://package.elm-lang.org/packages/elm/http/2.0.0/ elm-lang], [https://guide.elm-lang.org/effects/http.html page]"
      },
      "date": 1684890311979
    },
    {
      "type": "edit",
      "id": "fc50ce5416480bf1",
      "item": {
        "type": "paragraph",
        "id": "fc50ce5416480bf1",
        "text": "MILLER, John F., 2017. Using Elm to Submit a form without tracking the field values. Stack Overflow. Online. 5 October 2017. [Accessed 23 May 2023]. Available from: [https://stackoverflow.com/q/46580703 stackoverflow]\n"
      },
      "date": 1684906247054
    },
    {
      "type": "edit",
      "id": "fc50ce5416480bf1",
      "item": {
        "type": "paragraph",
        "id": "fc50ce5416480bf1",
        "text": "⇒ [[John F. Miller]]: MILLER, John F., 2017. Using Elm to Submit a form without tracking the field values. Stack Overflow. Online. 5 October 2017. [Accessed 23 May 2023]. Available from: [https://stackoverflow.com/q/46580703 stackoverflow]\n"
      },
      "date": 1684906366926
    },
    {
      "type": "edit",
      "id": "f566e4729e292b33",
      "item": {
        "type": "paragraph",
        "id": "f566e4729e292b33",
        "text": "[[Elm]] provides a mechanism to send HTTP requests to a server and handle the responses. Here's an example of how you can send a POST request with the login form data and check for a 200 response:"
      },
      "date": 1684906426176
    },
    {
      "type": "edit",
      "id": "f566e4729e292b33",
      "item": {
        "type": "paragraph",
        "id": "f566e4729e292b33",
        "text": "⇒ [[Elm]] provides a mechanism to send HTTP requests to a server and handle the responses. Here's an example of how you can send a POST request with the login form data and check for a 200 response:"
      },
      "date": 1684906431295
    },
    {
      "type": "edit",
      "id": "267bf9eef7bb15a4",
      "item": {
        "type": "paragraph",
        "id": "267bf9eef7bb15a4",
        "text": "Unused pattern variable request [https://github.com/RalfBarkow/vite-elm-app/commit/231e55301dbfc18a60d9436f0aac757ab5eb10e2 commit] "
      },
      "date": 1684906491995
    },
    {
      "id": "fe62ab30ca4045d2",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "dd4ecb848988d8ac",
        "0f19b8ee9d4f44e3",
        "9c69d5fad817fd85",
        "a60e315a8ee58709",
        "ba4930b94b1c4a57",
        "ae5341462cb8db0a",
        "c698073c899f7a02",
        "049e7a1a3349b589",
        "023950b01ebfae0f",
        "42c4f54b3a6a3da8",
        "015c955697e0a850",
        "f06251044c53b47d",
        "e517bd43e6a7a219",
        "fc50ce5416480bf1",
        "f566e4729e292b33",
        "c8a3c48728221061",
        "267bf9eef7bb15a4",
        "fe62ab30ca4045d2",
        "3fa7f59ac5a88624"
      ],
      "date": 1684906540250
    },
    {
      "type": "add",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note: Re: [[Form]]"
      },
      "after": "ce4dede5ae47970c",
      "date": 1684922160251
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]"
      },
      "date": 1684922199854
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: "
      },
      "date": 1684922207646
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here you should distinguish between a general form and forms. "
      },
      "date": 1684922349233
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here you should distinguish between a general form and forms. Forms in the meaning of filling in the forms."
      },
      "date": 1684922409259
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here you should distinguish between a general form and forms. [[Forms]] in the meaning of filling in the forms."
      },
      "date": 1684922418892
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here you should distinguish between a general form and forms. [[Forms]] in the meaning of filling in the forms.Since there is already a forms page, but it was created after reading Fritz B. Simon's German book \" Formen\", we rename this page to \"Forms\" and use it for the concept of forms in the meaning of filling out the forms."
      },
      "date": 1684922628913
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here you should distinguish between a general form and forms. [[Forms]] in the meaning of filling in the forms. Since there is already a forms page, but it was created after reading Fritz B. Simon's German book \" Formen\", we rename this page to \"Forms\" and use it for the concept of forms in the meaning of filling out the forms."
      },
      "date": 1684922653011
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here you should distinguish between a general form and forms. [[Forms]] in the meaning of filling in the forms. Since there is already a forms page, but it was created after reading Fritz B. Simon's German book \" Formen\", we rename this page to \"Forms\" and use it for the concept of forms in the meaning of filling in the forms."
      },
      "date": 1684922692191
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here we should distinguish between a general form and forms. [[Forms]] in the meaning of filling in the forms. Since there is already a forms page, but it was created after reading Fritz B. Simon's German book \" Formen\", we rename this page to \"Forms\" and use it for the concept of forms in the meaning of filling in the forms."
      },
      "date": 1684922703849
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here we should distinguish between a general form and forms. [[Forms]] in the meaning of filling in the forms. Since there is already a forms page, but it was created after reading Fritz B. Simon's German book \"[[Formen\", we rename this page to \"Forms\" and use it for the concept of forms in the meaning of filling in the forms."
      },
      "date": 1684922732181
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here we should distinguish between a general form and forms. [[Forms]] in the meaning of filling in the forms. Since there is already a forms page, but it was created after reading Fritz B. Simon's German book \"[[Formen]]\", we rename this page to \"Forms\" and use it for the concept of forms in the meaning of filling in the forms."
      },
      "date": 1684922758839
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here we should distinguish between a general form and forms. [[Forms]] in the meaning of filling in the forms. Since there is already a forms page, but it was created after reading Fritz B. Simon's German book \"Formen\", we rename this page to [[Formen]] and use it for the concept of forms in the meaning of filling in the forms."
      },
      "date": 1684922791906
    },
    {
      "id": "2f5854fcf0362a6e",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "2f5854fcf0362a6e",
        "3bb255801e7406a1",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "dd4ecb848988d8ac",
        "0f19b8ee9d4f44e3",
        "9c69d5fad817fd85",
        "a60e315a8ee58709",
        "ba4930b94b1c4a57",
        "ae5341462cb8db0a",
        "c698073c899f7a02",
        "049e7a1a3349b589",
        "023950b01ebfae0f",
        "42c4f54b3a6a3da8",
        "015c955697e0a850",
        "f06251044c53b47d",
        "e517bd43e6a7a219",
        "fc50ce5416480bf1",
        "f566e4729e292b33",
        "c8a3c48728221061",
        "267bf9eef7bb15a4",
        "fe62ab30ca4045d2",
        "3fa7f59ac5a88624"
      ],
      "date": 1684923595059
    },
    {
      "id": "3bb255801e7406a1",
      "type": "move",
      "order": [
        "e557b191abb59761",
        "1bbeadf80e33042d",
        "8424086e9c778978",
        "c9adc83e5a8a7992",
        "f9f0aa82b4ff4d10",
        "a484ac14f99ad7c0",
        "5cc5d40721269cad",
        "ce6c6537dc776fd9",
        "04da392d92511766",
        "b98edaeeeeba97da",
        "cbe841665da7f724",
        "483424083439ced3",
        "9e146af81557f708",
        "1be7f60886c60589",
        "72e7dd1a90e326a1",
        "09282a61ea85db21",
        "08d7738e69476057",
        "8f8813fccf95438b",
        "b79b14cb0e770e4b",
        "e489e328ac60bb54",
        "5b24f9e64c81aa65",
        "09db204e40554beb",
        "cf209b0164c85cfc",
        "b855f9801dbabce4",
        "ffd742c1ef3f8b7d",
        "a556c4e4495fb6f0",
        "57209e707cde79be",
        "031eb0df154e0720",
        "2d5465da0a27030a",
        "bde49785f2bd4c68",
        "ecaa33a41ef08cfc",
        "848dfa301adfb7f4",
        "1aa0732f56a10c2c",
        "e8418519131afea9",
        "a05d9834e06e694e",
        "f71daad5ab33f6a8",
        "41d1b5973b9d583c",
        "4272e0022a474727",
        "c2f3e64028cbeda5",
        "5e5502966da189d9",
        "983ee41ceff62dc4",
        "dca68d42861ec763",
        "3bb255801e7406a1",
        "2f5854fcf0362a6e",
        "ce4dede5ae47970c",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "dd4ecb848988d8ac",
        "0f19b8ee9d4f44e3",
        "9c69d5fad817fd85",
        "a60e315a8ee58709",
        "ba4930b94b1c4a57",
        "ae5341462cb8db0a",
        "c698073c899f7a02",
        "049e7a1a3349b589",
        "023950b01ebfae0f",
        "42c4f54b3a6a3da8",
        "015c955697e0a850",
        "f06251044c53b47d",
        "e517bd43e6a7a219",
        "fc50ce5416480bf1",
        "f566e4729e292b33",
        "c8a3c48728221061",
        "267bf9eef7bb15a4",
        "fe62ab30ca4045d2",
        "3fa7f59ac5a88624"
      ],
      "date": 1684923607176
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here we should distinguish between a general form and forms. [[Forms]] in the meaning of filling in the forms. Since there is already a forms page, but it was created after reading Fritz B. Simon's German book \"Formen\", we rename this page to [[Formen]] and use the [[Forms]] page for the concept of forms in the meaning of filling in the forms."
      },
      "date": 1684923695649
    },
    {
      "type": "edit",
      "id": "2f5854fcf0362a6e",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here we should distinguish between a general form and forms. [[Forms]] in the meaning of filling in the forms. Since there is already a forms page, but it was created after reading Fritz B. Simon's German book \"Formen\", we move that content to a new [[Formen]] page and use the [[Forms]] page for the concept of forms in the meaning of filling in the forms."
      },
      "date": 1684923740138
    },
    {
      "type": "edit",
      "id": "72e7dd1a90e326a1",
      "item": {
        "type": "paragraph",
        "id": "72e7dd1a90e326a1",
        "text": "FREUDENBERG, Vanessa, 2021. Frontend-only Multi-Player. Unlimited Bandwidth. Or: What is Croquet.io, really? [https://blog.codefrau.net/2021/08/what-is-croquet-anyways.html page] A multi-player web app needs a backend, right? What if I told you, it doesn’t? Read on for how [[Croquet]] gets rid of servers. No, really .   I..."
      },
      "date": 1685104566924
    },
    {
      "type": "edit",
      "id": "f566e4729e292b33",
      "item": {
        "type": "paragraph",
        "id": "f566e4729e292b33",
        "text": "⇒ [[Elm]] provides a mechanism to send ⇒ [[HTTP]] requests to a server and handle the responses. "
      },
      "date": 1685104709636
    },
    {
      "id": "c8a3c48728221061",
      "type": "remove",
      "removedTo": {
        "page": "HTTP"
      },
      "date": 1685104718752
    },
    {
      "id": "267bf9eef7bb15a4",
      "type": "remove",
      "removedTo": {
        "page": "HTTP"
      },
      "date": 1685104734550
    },
    {
      "id": "fe62ab30ca4045d2",
      "type": "remove",
      "removedTo": {
        "page": "HTTP"
      },
      "date": 1685104740532
    },
    {
      "id": "3fa7f59ac5a88624",
      "type": "remove",
      "removedTo": {
        "page": "HTTP"
      },
      "date": 1685104744971
    },
    {
      "id": "fc50ce5416480bf1",
      "type": "remove",
      "removedTo": {
        "page": "HTTP"
      },
      "date": 1685104752784
    },
    {
      "id": "2f5854fcf0362a6e",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685104822638
    },
    {
      "id": "b8f0735a43ebd7c0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b8f0735a43ebd7c0",
        "text": "Now we will make a rudimentary form. It has a field for your name, a field for your password, and a field to verify that password. We will also do some very simple validation to check if the passwords match. [https://guide.elm-lang.org/architecture/forms.html elm-lang]",
        "alias": "ce4dede5ae47970c"
      },
      "after": "3bb255801e7406a1",
      "attribution": {
        "page": "Forms"
      },
      "date": 1685104841684
    },
    {
      "type": "remove",
      "id": "ce4dede5ae47970c",
      "date": 1685104845952
    },
    {
      "id": "ce4dede5ae47970c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ce4dede5ae47970c",
        "text": "Now we will make a rudimentary form. It has a field for your name, a field for your password, and a field to verify that password. We will also do some very simple validation to check if the passwords match. [https://guide.elm-lang.org/architecture/forms.html elm-lang]"
      },
      "after": "3bb255801e7406a1",
      "attribution": {
        "page": "Forms"
      },
      "date": 1685104907791
    },
    {
      "type": "remove",
      "id": "b8f0735a43ebd7c0",
      "date": 1685104917850
    },
    {
      "id": "2381d24dac6fae09",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685104990177
    },
    {
      "id": "4983ce1445b3fb75",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105000935
    },
    {
      "id": "a2ef76650ed0e86f",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105076006
    },
    {
      "id": "75710e1f95dc3a51",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105080584
    },
    {
      "id": "36a619c8c2687f36",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105088266
    },
    {
      "id": "bc049aae6d1cfd5c",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105096098
    },
    {
      "id": "80836bf103c03c39",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105098746
    },
    {
      "id": "dd4ecb848988d8ac",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105106414
    },
    {
      "id": "0f19b8ee9d4f44e3",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105110034
    },
    {
      "id": "9c69d5fad817fd85",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105113123
    },
    {
      "id": "a60e315a8ee58709",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105116613
    },
    {
      "id": "ba4930b94b1c4a57",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105125152
    },
    {
      "id": "ae5341462cb8db0a",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105131316
    },
    {
      "id": "c698073c899f7a02",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105134900
    },
    {
      "id": "049e7a1a3349b589",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105138538
    },
    {
      "id": "023950b01ebfae0f",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105145370
    },
    {
      "id": "42c4f54b3a6a3da8",
      "type": "remove",
      "removedTo": {
        "page": "Forms"
      },
      "date": 1685105148811
    }
  ]
}