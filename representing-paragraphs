{
  "title": "Representing Paragraphs",
  "story": [
    {
      "type": "paragraph",
      "id": "81cd98233915b114",
      "text": "Define a JavaScript object where keys represent paragraph IDs or titles, and values represent the content of each paragraph."
    },
    {
      "type": "paragraph",
      "id": "594f625704390001",
      "text": "Optionally, we can preprocess the paragraphs by tokenizing them into words or using more advanced techniques like word embeddings to represent each paragraph as a vector."
    },
    {
      "type": "paragraph",
      "id": "ff57960339b3b753",
      "text": "See [[Paragraph Vector]]"
    },
    {
      "type": "paragraph",
      "id": "5d80dc4cd63e0110",
      "text": "Instead of treating each paragraph as a bag-of-words model where the ordering and semantics are lost, we can represent each paragraph as a fixed-length feature vector using techniques like [[Word2Vec]] or [[Doc2Vec]]."
    },
    {
      "type": "paragraph",
      "id": "162eb2db85540c4f",
      "text": "In the JavaScript implementation, we can create an object where each paragraph is represented by a fixed-length vector."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Representing Paragraphs",
        "story": []
      },
      "date": 1710944809678
    },
    {
      "item": {
        "type": "factory",
        "id": "81cd98233915b114"
      },
      "id": "81cd98233915b114",
      "type": "add",
      "date": 1710944818321
    },
    {
      "type": "edit",
      "id": "81cd98233915b114",
      "item": {
        "type": "paragraph",
        "id": "81cd98233915b114",
        "text": "Define a JavaScript object where keys represent paragraph IDs or titles, and values represent the content of each paragraph."
      },
      "date": 1710944819789
    },
    {
      "item": {
        "type": "factory",
        "id": "594f625704390001"
      },
      "id": "594f625704390001",
      "type": "add",
      "after": "81cd98233915b114",
      "date": 1710944835844
    },
    {
      "type": "edit",
      "id": "594f625704390001",
      "item": {
        "type": "paragraph",
        "id": "594f625704390001",
        "text": "Optionally, you can preprocess the paragraphs by tokenizing them into words or using more advanced techniques like word embeddings to represent each paragraph as a vector."
      },
      "date": 1710944837132
    },
    {
      "type": "edit",
      "id": "594f625704390001",
      "item": {
        "type": "paragraph",
        "id": "594f625704390001",
        "text": "Optionally, we can preprocess the paragraphs by tokenizing them into words or using more advanced techniques like word embeddings to represent each paragraph as a vector."
      },
      "date": 1710944847114
    },
    {
      "type": "add",
      "id": "ff57960339b3b753",
      "item": {
        "type": "paragraph",
        "id": "ff57960339b3b753",
        "text": "See [[Paragraph Vector]]"
      },
      "after": "594f625704390001",
      "date": 1710945059507
    },
    {
      "item": {
        "type": "factory",
        "id": "5d80dc4cd63e0110"
      },
      "id": "5d80dc4cd63e0110",
      "type": "add",
      "after": "ff57960339b3b753",
      "date": 1710945070117
    },
    {
      "type": "edit",
      "id": "5d80dc4cd63e0110",
      "item": {
        "type": "paragraph",
        "id": "5d80dc4cd63e0110",
        "text": "Instead of treating each paragraph as a bag-of-words model where the ordering and semantics are lost, we can represent each paragraph as a fixed-length feature vector using techniques like Word2Vec or Doc2Vec."
      },
      "date": 1710945081970
    },
    {
      "item": {
        "type": "factory",
        "id": "162eb2db85540c4f"
      },
      "id": "162eb2db85540c4f",
      "type": "add",
      "after": "5d80dc4cd63e0110",
      "date": 1710945091581
    },
    {
      "type": "edit",
      "id": "162eb2db85540c4f",
      "item": {
        "type": "paragraph",
        "id": "162eb2db85540c4f",
        "text": "n the JavaScript implementation, we can create an object where each paragraph is represented by a fixed-length vector."
      },
      "date": 1710945097270
    },
    {
      "type": "edit",
      "id": "162eb2db85540c4f",
      "item": {
        "type": "paragraph",
        "id": "162eb2db85540c4f",
        "text": "In the JavaScript implementation, we can create an object where each paragraph is represented by a fixed-length vector."
      },
      "date": 1710945102293
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1710946510765
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1711030790612
    },
    {
      "type": "edit",
      "id": "5d80dc4cd63e0110",
      "item": {
        "type": "paragraph",
        "id": "5d80dc4cd63e0110",
        "text": "Instead of treating each paragraph as a bag-of-words model where the ordering and semantics are lost, we can represent each paragraph as a fixed-length feature vector using techniques like [[Word2Vec]] or [[Doc2Vec]]."
      },
      "date": 1711030826220
    }
  ]
}