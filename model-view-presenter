{
  "title": "Model-View-Presenter",
  "story": [
    {
      "id": "751100a54c2f372d",
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "randy-kramer",
      "title": "Randy Kramer",
      "text": "I am evaluating [[Wiki Engines]] and [[Wiki Farms]] prior to choosing one for my own personal use and for various public uses.  To get additional input from experienced wiki users, and help others, I am putting the review on this wiki."
    },
    {
      "type": "markdown",
      "id": "35887423f52d6484",
      "text": "* [[Squeak Smalltalk]] does not yet support [[Model View Presenter]] \n* [[Model View Presenter]] was a good change to [[Model View Controller]]"
    },
    {
      "id": "3f640389857a2250",
      "type": "reference",
      "site": "wiki.ralfbarkow.ch",
      "slug": "model-view-controller",
      "title": "Model View Controller",
      "text": "An easy way to understand MVC: the model is the data, the view is the window on the screen, and the controller is the glue between the two. -- [[Connelly Barnes]]"
    },
    {
      "type": "markdown",
      "id": "f3bc88528405c694",
      "text": "In **MVP**, the Presenter contains the UI business logic for the View. All invocations from the View delegate directly to the Presenter. The Presenter is also decoupled directly from the View and talks to it through an interface. This is to allow mocking of the View in a unit test. One common attribute of MVP is that there has to be a lot of two-way dispatching. For example, when someone clicks the \"Save\" button, the event handler delegates to the Presenter's \"OnSave\" method. Once the save is completed, the Presenter will then call back the View through its interface so that the View can display that the save has completed. [https://stackoverflow.com/questions/2056/what-are-mvp-and-mvc-and-what-is-the-difference/101561#101561 stackoverflow]"
    },
    {
      "type": "markdown",
      "id": "8c611a7c46f35069",
      "text": "## Two primary variations\n"
    },
    {
      "type": "markdown",
      "id": "4c6318cb40deba73",
      "text": "**Passive View**: The View is as dumb as possible and contains almost zero logic. A Presenter is a middle man that talks to the View and the Model. The View and Model are completely shielded from one another. The Model may raise events, but the Presenter subscribes to them for updating the View. In Passive View there is no direct data binding, instead, the View exposes setter properties that the Presenter uses to set the data. All state is managed in the Presenter and not the View.\n\n* Pro: maximum testability surface; clean separation of the View and Model\n* Con: more work (for example all the setter properties) as you are doing all the data binding yourself.\n\n"
    },
    {
      "type": "markdown",
      "id": "c04116ca99ecfe88",
      "text": "**Supervising Controller**: The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case, it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc.\n\n* Pro: by leveraging data binding the amount of code is reduced.\n* Con: there's a less testable surface (because of data binding), and there's less encapsulation in the View since it talks directly to the Model.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Model-View-Presenter",
        "story": []
      },
      "date": 1636017143040
    },
    {
      "id": "3f640389857a2250",
      "type": "add",
      "item": {
        "id": "3f640389857a2250",
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "model-view-controller",
        "title": "Model View Controller",
        "text": "An easy way to understand MVC: the model is the data, the view is the window on the screen, and the controller is the glue between the two. -- [[Connelly Barnes]]"
      },
      "date": 1636017151704
    },
    {
      "id": "8bbfe2f19cadf67b",
      "type": "add",
      "item": {
        "id": "8bbfe2f19cadf67b",
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "modelviewcontroller",
        "title": "Model–view–controller",
        "text": "__Model–view–controller__ (usually known as __MVC__) is a [[software design pattern]] commonly used for developing [[user interface]]s that divide the related program logic into three interconnected elements. This is done to separate internal representations of information from the ways information is presented to and accepted from the user- [https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller wikipedia]"
      },
      "after": "3f640389857a2250",
      "date": 1636017154513
    },
    {
      "id": "973f97540f41aa10",
      "type": "add",
      "item": {
        "id": "973f97540f41aa10",
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "model-view-presenter",
        "title": "Model-View-Presenter",
        "text": "A page with 0 items."
      },
      "date": 1636017165275
    },
    {
      "type": "remove",
      "id": "973f97540f41aa10",
      "date": 1636017171607
    },
    {
      "id": "751100a54c2f372d",
      "type": "add",
      "item": {
        "id": "751100a54c2f372d",
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "randy-kramer",
        "title": "Randy Kramer",
        "text": "Updated 12/20/00"
      },
      "date": 1636017189570
    },
    {
      "type": "edit",
      "id": "751100a54c2f372d",
      "item": {
        "id": "751100a54c2f372d",
        "type": "reference",
        "site": "wiki.ralfbarkow.ch",
        "slug": "randy-kramer",
        "title": "Randy Kramer",
        "text": "I am evaluating [[Wiki Engines]] and [[Wiki Farms]] prior to choosing one for my own personal use and for various public uses.  To get additional input from experienced wiki users, and help others, I am putting the review on this wiki."
      },
      "date": 1636017226707
    },
    {
      "id": "1da840e74857b4b29113c5c45c17531f",
      "type": "add",
      "item": {
        "type": "html",
        "text": " [[Squeak Smalltalk]] does not yet support [[Model View Presenter]] ",
        "id": "1da840e74857b4b29113c5c45c17531f"
      },
      "after": "751100a54c2f372d",
      "date": 1636017265021
    },
    {
      "id": "60af271a2a25187b185e8f0c748f4608",
      "type": "add",
      "item": {
        "type": "html",
        "text": " [[Model View Presenter]] was a good change to [[Model View Controller]]",
        "id": "60af271a2a25187b185e8f0c748f4608"
      },
      "after": "1da840e74857b4b29113c5c45c17531f",
      "date": 1636017275351
    },
    {
      "type": "remove",
      "id": "973f97540f41aa10",
      "date": 1636017284704
    },
    {
      "type": "remove",
      "id": "8bbfe2f19cadf67b",
      "date": 1636017490863
    },
    {
      "type": "edit",
      "id": "1da840e74857b4b29113c5c45c17531f",
      "item": {
        "type": "html",
        "text": "* [[Squeak Smalltalk]] does not yet support [[Model View Presenter]] ",
        "id": "1da840e74857b4b29113c5c45c17531f"
      },
      "date": 1636017507389
    },
    {
      "item": {
        "type": "factory",
        "id": "35887423f52d6484"
      },
      "id": "35887423f52d6484",
      "type": "add",
      "after": "3f640389857a2250",
      "date": 1636017509960
    },
    {
      "type": "edit",
      "id": "1da840e74857b4b29113c5c45c17531f",
      "item": {
        "type": "html",
        "text": "\n* [[Squeak Smalltalk]] does not yet support [[Model View Presenter]] ",
        "id": "1da840e74857b4b29113c5c45c17531f"
      },
      "date": 1636017515425
    },
    {
      "type": "edit",
      "id": "35887423f52d6484",
      "item": {
        "type": "markdown",
        "id": "35887423f52d6484",
        "text": "* S"
      },
      "date": 1636017521361
    },
    {
      "id": "35887423f52d6484",
      "type": "move",
      "order": [
        "751100a54c2f372d",
        "35887423f52d6484",
        "1da840e74857b4b29113c5c45c17531f",
        "60af271a2a25187b185e8f0c748f4608",
        "3f640389857a2250"
      ],
      "date": 1636017523996
    },
    {
      "type": "remove",
      "id": "1da840e74857b4b29113c5c45c17531f",
      "date": 1636017526885
    },
    {
      "type": "edit",
      "id": "35887423f52d6484",
      "item": {
        "type": "markdown",
        "id": "35887423f52d6484",
        "text": "* [[Squeak Smalltalk]] does not yet support [[Model View Presenter]] "
      },
      "date": 1636017529115
    },
    {
      "type": "remove",
      "id": "60af271a2a25187b185e8f0c748f4608",
      "date": 1636017532110
    },
    {
      "type": "edit",
      "id": "35887423f52d6484",
      "item": {
        "type": "markdown",
        "id": "35887423f52d6484",
        "text": "* [[Squeak Smalltalk]] does not yet support [[Model View Presenter]] \n* [[Model View Presenter]] was a good change to [[Model View Controller]]"
      },
      "date": 1636017534991
    },
    {
      "item": {
        "type": "factory",
        "id": "f3bc88528405c694"
      },
      "id": "f3bc88528405c694",
      "type": "add",
      "after": "3f640389857a2250",
      "date": 1636017633640
    },
    {
      "type": "edit",
      "id": "f3bc88528405c694",
      "item": {
        "type": "markdown",
        "id": "f3bc88528405c694",
        "text": "In MVP, the Presenter contains the UI business logic for the View. All invocations from the View delegate directly to the Presenter. The Presenter is also decoupled directly from the View and talks to it through an interface. This is to allow mocking of the View in a unit test. One common attribute of MVP is that there has to be a lot of two-way dispatching. For example, when someone clicks the \"Save\" button, the event handler delegates to the Presenter's \"OnSave\" method. Once the save is completed, the Presenter will then call back the View through its interface so that the View can display that the save has completed."
      },
      "date": 1636017637194
    },
    {
      "type": "edit",
      "id": "f3bc88528405c694",
      "item": {
        "type": "markdown",
        "id": "f3bc88528405c694",
        "text": "In **MVP**, the Presenter contains the UI business logic for the View. All invocations from the View delegate directly to the Presenter. The Presenter is also decoupled directly from the View and talks to it through an interface. This is to allow mocking of the View in a unit test. One common attribute of MVP is that there has to be a lot of two-way dispatching. For example, when someone clicks the \"Save\" button, the event handler delegates to the Presenter's \"OnSave\" method. Once the save is completed, the Presenter will then call back the View through its interface so that the View can display that the save has completed."
      },
      "date": 1636017649188
    },
    {
      "type": "edit",
      "id": "f3bc88528405c694",
      "item": {
        "type": "markdown",
        "id": "f3bc88528405c694",
        "text": "In **MVP**, the Presenter contains the UI business logic for the View. All invocations from the View delegate directly to the Presenter. The Presenter is also decoupled directly from the View and talks to it through an interface. This is to allow mocking of the View in a unit test. One common attribute of MVP is that there has to be a lot of two-way dispatching. For example, when someone clicks the \"Save\" button, the event handler delegates to the Presenter's \"OnSave\" method. Once the save is completed, the Presenter will then call back the View through its interface so that the View can display that the save has completed. [https://stackoverflow.com/questions/2056/what-are-mvp-and-mvc-and-what-is-the-difference/101561#101561 stackoverflow]"
      },
      "date": 1636017663423
    },
    {
      "item": {
        "type": "factory",
        "id": "8c611a7c46f35069"
      },
      "id": "8c611a7c46f35069",
      "type": "add",
      "after": "f3bc88528405c694",
      "date": 1636017701860
    },
    {
      "type": "edit",
      "id": "8c611a7c46f35069",
      "item": {
        "type": "markdown",
        "id": "8c611a7c46f35069",
        "text": "## Two primary variations"
      },
      "date": 1636017707687
    },
    {
      "type": "edit",
      "id": "8c611a7c46f35069",
      "item": {
        "type": "markdown",
        "id": "8c611a7c46f35069",
        "text": "## Two primary variations\n"
      },
      "date": 1636017714364
    },
    {
      "type": "add",
      "id": "4c6318cb40deba73",
      "item": {
        "type": "markdown",
        "id": "4c6318cb40deba73",
        "text": "**Passive View**: The View is as dumb as possible and contains almost zero logic. A Presenter is a middle man that talks to the View and the Model. The View and Model are completely shielded from one another. The Model may raise events, but the Presenter subscribes to them for updating the View. In Passive View there is no direct data binding, instead, the View exposes setter properties that the Presenter uses to set the data. All state is managed in the Presenter and not the View.\n\n* Pro: maximum testability surface; clean separation of the View and Model\n* Con: more work (for example all the setter properties) as you are doing all the data binding yourself.\n"
      },
      "after": "8c611a7c46f35069",
      "date": 1636017737115
    },
    {
      "type": "edit",
      "id": "4c6318cb40deba73",
      "item": {
        "type": "markdown",
        "id": "4c6318cb40deba73",
        "text": "**Passive View**: The View is as dumb as possible and contains almost zero logic. A Presenter is a middle man that talks to the View and the Model. The View and Model are completely shielded from one another. The Model may raise events, but the Presenter subscribes to them for updating the View. In Passive View there is no direct data binding, instead, the View exposes setter properties that the Presenter uses to set the data. All state is managed in the Presenter and not the View.\n\n* Pro: maximum testability surface; clean separation of the View and Model\n* Con: more work (for example all the setter properties) as you are doing all the data binding yourself.\n\n"
      },
      "date": 1636017783447
    },
    {
      "type": "add",
      "id": "c04116ca99ecfe88",
      "item": {
        "type": "markdown",
        "id": "c04116ca99ecfe88",
        "text": "**Supervising Controller: The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case, it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc.\n\n* Pro: by leveraging data binding the amount of code is reduced.\n* Con: there's a less testable surface (because of data binding), and there's less encapsulation in the View since it talks directly to the Model.\n"
      },
      "after": "4c6318cb40deba73",
      "date": 1636017797933
    },
    {
      "type": "edit",
      "id": "c04116ca99ecfe88",
      "item": {
        "type": "markdown",
        "id": "c04116ca99ecfe88",
        "text": "**Supervising Controller**: The Presenter handles user gestures. The View binds to the Model directly through data binding. In this case, it's the Presenter's job to pass off the Model to the View so that it can bind to it. The Presenter will also contain logic for gestures like pressing a button, navigation, etc.\n\n* Pro: by leveraging data binding the amount of code is reduced.\n* Con: there's a less testable surface (because of data binding), and there's less encapsulation in the View since it talks directly to the Model.\n"
      },
      "date": 1636017805663
    }
  ]
}