{
  "title": "Syntactic Variety in Boundary Logic",
  "story": [
    {
      "type": "markdown",
      "id": "4f72b80ef95106bb",
      "text": "[[Boundary Logic]] is a formal diagrammatic system that combines Peirce’s Entitative Graphs with Spencer Brown’s [[Laws of Form]]. \n"
    },
    {
      "type": "markdown",
      "id": "75eb458866910007",
      "text": "Its conceptual basis includes boundary forms composed of non-intersecting closed curves, void-substitution (deletion of irrelevant structure) as the primary mechanism of reduction, and spatial pattern-equations that define valid transformations. \n"
    },
    {
      "type": "markdown",
      "id": "d965f4b4ccfc76e6",
      "text": "Pure boundary algebra, free of interpretation, is first briefly described, followed by a description of boundary logic. Then several new diagrammatic notations for logic derived from geometrical and topological transformation of boundary forms are presented. The algebra and an example proof of modus ponens is provided for textual, enclosure, graph, map, path and block based forms. These new diagrammatic languages for logic convert connectives into configurations of [[Containment]], connectivity, contact, conveyance, and concreteness."
    },
    {
      "type": "paragraph",
      "id": "b599b2c9fd777b3f",
      "text": "\nBRICKEN, William, 2006. Syntactic Variety in Boundary Logic. In: BARKER-PLUMMER, Dave, COX, Richard and SWOBODA, Nik (eds.), Diagrammatic Representation and Inference. Online. Berlin, Heidelberg: Springer Berlin Heidelberg. p. 73–87. Lecture Notes in Computer Science. [Accessed 31 July 2022]. ISBN 978-3-540-35623-3. \n"
    },
    {
      "type": "markdown",
      "id": "094cdafbb17c2b49",
      "text": "\n* [[Axiomitization of Boundary Logic]]\n* [[Boundary Algebra]] ⇒ [[Boundaries]]"
    },
    {
      "type": "graphviz",
      "id": "b5f1b28cb6983975",
      "text": "DOT FROM lambda-browsing"
    },
    {
      "type": "markdown",
      "id": "77d1e8a0a06ebff5",
      "text": "# Introduction"
    },
    {
      "type": "markdown",
      "id": "31d3193cc9346eb4",
      "text": "Since antiquity, logical connectives have been presumed to be abstract; they are the *[[Syncategoremata]]*, words that refer to nothing but themselves yet function to connect words that do have referents [1, p233]. Since logical connectives have no explicit form, they are represented by meaningless tokens. Peirce's Alpha Existential Graphs (AEG) [2 (1896)] introduces a radical re-conceptualization: the connectives of formal logic can take the form of diagrammatic structures consisting of closed nonintersecting curves, or boundaries. Composition of boundaries sharing the same space, and nested within each other, creates a spatial pattern language that is sufficient to express the sentences of propositional calculus. Traditionally, propositional rules of inference permit new sentences to be added to the collection of valid sentences, a strategy of accumulation. The diagrammatic reasoning in AEG follows a fundamentally different strategy: boundary patterns are transformed by rules that add and delete boundary structure. Peirce shows that inference can be achieved by creation and destruction, rather than by accumulation."
    },
    {
      "type": "markdown",
      "id": "8e611d57ba69c7c1",
      "text": "The *[[Boundary Logic]]* presented herein was introduced by G. Spencer Brown in [[Laws of Form]] (LoF). The mathematics is equational rather than inferential; like Boolean algebra, valid transformations are specified by equations. Boundary logic uses the boundary pattern language introduced by Peirce, but the add-and-delete rules of AEG are incorporated into pattern-equations that permit deduction to proceed solely though rewrite rules that delete structure. Pattern-equations define equivalence sets on boundary forms; the algebraic formulation replaces one-directional inference with the familiar bidirectional algebraic rules of substitution and replacement of equals."
    },
    {
      "type": "markdown",
      "id": "e757b8debca247b1",
      "text": "The pure algebraic mathematics of boundaries [4] is based on the concept of *[[Distinction]]*, or difference. It is constructed de novo, without reference to logical, set theoretic, relational, numeric, or categoric objects. Boundaries are strictly structural, representing only the abstract concept of difference, without requiring identification of the type of object being differentiated. Thus, boundary mathematics differs substantively from the conventional mathematics of strings."
    },
    {
      "type": "paragraph",
      "id": "d08df14da6794118",
      "text": "The abstract structure of boundary algebra is described first in Section 2, including the basic concepts of spatial operators with arbitrary numbers of arguments, spatial pattern-equations, and permeable boundaries. Boundary logic, the application of boundary algebra to logic, is then described in Section 3. Two new tools for deduction are introduced: void-substitution and boundary transparency. Section 4 shows a sequence of geometrical and topological transformations of boundary forms that generate over two dozen new diagrammatic notations for logic. Each of these notations provides potential new tools for Cognitive Science and for Computer Science. The structure of each notation suggests unexplored models of how we might read, analyze, manipulate, compute with, and think about deductive logic. The notations also suggest a wide diversity of data structures and algorithms for both hardware and software implementation of logic. Other than Peirce's original concept of a diagrammatic logic expressed as boundaries, and Spencer Brown's equational axiomatization of the same logic, Sections 2 and 4 are new. The axiomatization in Section 3 is the author's"
    },
    {
      "type": "paragraph",
      "id": "5df3790ed0abcdf7",
      "text": "⇒ [[Boundary Algebra]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Syntactic Variety in Boundary Logic",
        "story": []
      },
      "date": 1659264089319
    },
    {
      "item": {
        "type": "factory",
        "id": "b599b2c9fd777b3f"
      },
      "id": "b599b2c9fd777b3f",
      "type": "add",
      "date": 1659264091170
    },
    {
      "type": "edit",
      "id": "b599b2c9fd777b3f",
      "item": {
        "type": "paragraph",
        "id": "b599b2c9fd777b3f",
        "text": "\nBRICKEN, William, 2006. Syntactic Variety in Boundary Logic. In: BARKER-PLUMMER, Dave, COX, Richard and SWOBODA, Nik (eds.), Diagrammatic Representation and Inference. Online. Berlin, Heidelberg: Springer Berlin Heidelberg. p. 73–87. Lecture Notes in Computer Science. [Accessed 31 July 2022]. ISBN 978-3-540-35623-3. \n"
      },
      "date": 1659264092712
    },
    {
      "item": {
        "type": "factory",
        "id": "4f72b80ef95106bb"
      },
      "id": "4f72b80ef95106bb",
      "type": "add",
      "after": "b599b2c9fd777b3f",
      "date": 1659264125366
    },
    {
      "type": "edit",
      "id": "4f72b80ef95106bb",
      "item": {
        "type": "markdown",
        "id": "4f72b80ef95106bb",
        "text": "> Boundary logic is a formal diagrammatic system that combines Peirce’s Entitative Graphs with Spencer Brown’s Laws of Form. Its conceptual basis includes boundary forms composed of non-intersecting closed curves, void-substitution (deletion of irrelevant structure) as the primary mechanism of reduction, and spatial pattern-equations that define valid transformations. Pure boundary algebra, free of interpretation, is first briefly described, followed by a description of boundary logic. Then several new diagrammatic notations for logic derived from geometrical and topological transformation of boundary forms are presented. The algebra and an example proof of modus ponens is provided for textual, enclosure, graph, map, path and block based forms. These new diagrammatic languages for logic convert connectives into configurations of containment, connectivity, contact, conveyance, and concreteness."
      },
      "date": 1659264128562
    },
    {
      "item": {
        "type": "factory",
        "id": "094cdafbb17c2b49"
      },
      "id": "094cdafbb17c2b49",
      "type": "add",
      "after": "4f72b80ef95106bb",
      "date": 1659264215032
    },
    {
      "type": "edit",
      "id": "094cdafbb17c2b49",
      "item": {
        "type": "markdown",
        "id": "094cdafbb17c2b49",
        "text": "* [[Boundary Algebra]] "
      },
      "date": 1659264221674
    },
    {
      "type": "edit",
      "id": "094cdafbb17c2b49",
      "item": {
        "type": "markdown",
        "id": "094cdafbb17c2b49",
        "text": "* [[Boundary Algebra]] – [[Boundaries]]"
      },
      "date": 1659264234892
    },
    {
      "item": {
        "type": "factory",
        "id": "b5f1b28cb6983975"
      },
      "id": "b5f1b28cb6983975",
      "type": "add",
      "after": "094cdafbb17c2b49",
      "date": 1659264243791
    },
    {
      "type": "edit",
      "id": "094cdafbb17c2b49",
      "item": {
        "type": "markdown",
        "id": "094cdafbb17c2b49",
        "text": "* [[Boundary Algebra]] ⇒ [[Boundaries]]"
      },
      "date": 1659264246086
    },
    {
      "type": "edit",
      "id": "b5f1b28cb6983975",
      "item": {
        "type": "graphviz",
        "id": "b5f1b28cb6983975",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1659264265869
    },
    {
      "type": "edit",
      "id": "094cdafbb17c2b49",
      "item": {
        "type": "markdown",
        "id": "094cdafbb17c2b49",
        "text": "* [[Axiomitization of Boundary Logic]]\n* [[Boundary Algebra]] ⇒ [[Boundaries]]"
      },
      "date": 1659264333174
    },
    {
      "item": {
        "type": "factory",
        "id": "77d1e8a0a06ebff5"
      },
      "id": "77d1e8a0a06ebff5",
      "type": "add",
      "after": "b5f1b28cb6983975",
      "date": 1659351012213
    },
    {
      "type": "edit",
      "id": "77d1e8a0a06ebff5",
      "item": {
        "type": "paragraph",
        "id": "77d1e8a0a06ebff5",
        "text": "# Introduction"
      },
      "date": 1659351020188
    },
    {
      "type": "edit",
      "id": "77d1e8a0a06ebff5",
      "item": {
        "type": "markdown",
        "id": "77d1e8a0a06ebff5",
        "text": "# Introduction"
      },
      "date": 1659351021931
    },
    {
      "item": {
        "type": "factory",
        "id": "31d3193cc9346eb4"
      },
      "id": "31d3193cc9346eb4",
      "type": "add",
      "after": "77d1e8a0a06ebff5",
      "date": 1659351023747
    },
    {
      "type": "edit",
      "id": "31d3193cc9346eb4",
      "item": {
        "type": "paragraph",
        "id": "31d3193cc9346eb4",
        "text": "Since antiquity, logical connectives have been presumed to be abstract; they are the syncategoremata, words that refer to nothing but themselves yet function to connect words that do have referents [1, p233]. Since logical connectives have no explicit form, they are represented by meaningless tokens. Peirce's Alpha Existential Graphs (AEG) [2 (1896)] introduces a radical re-conceptualization: the connectives of formal logic can take the form of diagrammatic structures consisting of closed nonintersecting curves, or boundaries. Composition of boundaries sharing the same space, and nested within each other, creates a spatial pattern language that is sufficient to express the sentences of propositional calculus. Traditionally, propositional rules of inference permit new sentences to be added to the collection of valid sentences, a strategy of accumulation. The diagrammatic reasoning in AEG follows a fundamentally different strategy: boundary patterns are transformed by rules that add and delete boundary structure. Peirce shows that inference can be achieved by creation and destruction, rather than by accumulation."
      },
      "date": 1659351025946
    },
    {
      "type": "edit",
      "id": "31d3193cc9346eb4",
      "item": {
        "type": "paragraph",
        "id": "31d3193cc9346eb4",
        "text": "Since antiquity, logical connectives have been presumed to be abstract; they are the *[[syncategoremata]]*, words that refer to nothing but themselves yet function to connect words that do have referents [1, p233]. Since logical connectives have no explicit form, they are represented by meaningless tokens. Peirce's Alpha Existential Graphs (AEG) [2 (1896)] introduces a radical re-conceptualization: the connectives of formal logic can take the form of diagrammatic structures consisting of closed nonintersecting curves, or boundaries. Composition of boundaries sharing the same space, and nested within each other, creates a spatial pattern language that is sufficient to express the sentences of propositional calculus. Traditionally, propositional rules of inference permit new sentences to be added to the collection of valid sentences, a strategy of accumulation. The diagrammatic reasoning in AEG follows a fundamentally different strategy: boundary patterns are transformed by rules that add and delete boundary structure. Peirce shows that inference can be achieved by creation and destruction, rather than by accumulation."
      },
      "date": 1659351056452
    },
    {
      "type": "edit",
      "id": "31d3193cc9346eb4",
      "item": {
        "type": "markdown",
        "id": "31d3193cc9346eb4",
        "text": "Since antiquity, logical connectives have been presumed to be abstract; they are the *[[syncategoremata]]*, words that refer to nothing but themselves yet function to connect words that do have referents [1, p233]. Since logical connectives have no explicit form, they are represented by meaningless tokens. Peirce's Alpha Existential Graphs (AEG) [2 (1896)] introduces a radical re-conceptualization: the connectives of formal logic can take the form of diagrammatic structures consisting of closed nonintersecting curves, or boundaries. Composition of boundaries sharing the same space, and nested within each other, creates a spatial pattern language that is sufficient to express the sentences of propositional calculus. Traditionally, propositional rules of inference permit new sentences to be added to the collection of valid sentences, a strategy of accumulation. The diagrammatic reasoning in AEG follows a fundamentally different strategy: boundary patterns are transformed by rules that add and delete boundary structure. Peirce shows that inference can be achieved by creation and destruction, rather than by accumulation."
      },
      "date": 1659351058266
    },
    {
      "item": {
        "type": "factory",
        "id": "8e611d57ba69c7c1"
      },
      "id": "8e611d57ba69c7c1",
      "type": "add",
      "after": "31d3193cc9346eb4",
      "date": 1659351484149
    },
    {
      "type": "edit",
      "id": "8e611d57ba69c7c1",
      "item": {
        "type": "paragraph",
        "id": "8e611d57ba69c7c1",
        "text": "The boundary logic presented herein was introduced by G. Spencer Brown in Laws of Form (LoF) [3]. The mathematics is equational rather than inferential; like Boolean algebra, valid transformations are specified by equations. Boundary logic uses the boundary pattern language introduced by Peirce, but the add-and-delete rules of AEG are incorporated into pattern-equations that permit deduction to proceed solely though rewrite rules that delete structure. Pattern-equations define equivalence sets on boundary forms; the algebraic formulation replaces one-directional inference with the familiar bidirectional algebraic rules of substitution and replacement of equals."
      },
      "date": 1659351487286
    },
    {
      "type": "edit",
      "id": "8e611d57ba69c7c1",
      "item": {
        "type": "paragraph",
        "id": "8e611d57ba69c7c1",
        "text": "The *[[boundary logic]]* presented herein was introduced by G. Spencer Brown in Laws of Form (LoF) [3]. The mathematics is equational rather than inferential; like Boolean algebra, valid transformations are specified by equations. Boundary logic uses the boundary pattern language introduced by Peirce, but the add-and-delete rules of AEG are incorporated into pattern-equations that permit deduction to proceed solely though rewrite rules that delete structure. Pattern-equations define equivalence sets on boundary forms; the algebraic formulation replaces one-directional inference with the familiar bidirectional algebraic rules of substitution and replacement of equals."
      },
      "date": 1659351502831
    },
    {
      "type": "edit",
      "id": "8e611d57ba69c7c1",
      "item": {
        "type": "markdown",
        "id": "8e611d57ba69c7c1",
        "text": "The *[[boundary logic]]* presented herein was introduced by G. Spencer Brown in Laws of Form (LoF) [3]. The mathematics is equational rather than inferential; like Boolean algebra, valid transformations are specified by equations. Boundary logic uses the boundary pattern language introduced by Peirce, but the add-and-delete rules of AEG are incorporated into pattern-equations that permit deduction to proceed solely though rewrite rules that delete structure. Pattern-equations define equivalence sets on boundary forms; the algebraic formulation replaces one-directional inference with the familiar bidirectional algebraic rules of substitution and replacement of equals."
      },
      "date": 1659351505151
    },
    {
      "type": "edit",
      "id": "8e611d57ba69c7c1",
      "item": {
        "type": "markdown",
        "id": "8e611d57ba69c7c1",
        "text": "The *[[boundary logic]]* presented herein was introduced by G. Spencer Brown in [[Laws of Form]] (LoF) [3]. The mathematics is equational rather than inferential; like Boolean algebra, valid transformations are specified by equations. Boundary logic uses the boundary pattern language introduced by Peirce, but the add-and-delete rules of AEG are incorporated into pattern-equations that permit deduction to proceed solely though rewrite rules that delete structure. Pattern-equations define equivalence sets on boundary forms; the algebraic formulation replaces one-directional inference with the familiar bidirectional algebraic rules of substitution and replacement of equals."
      },
      "date": 1659351522460
    },
    {
      "type": "edit",
      "id": "8e611d57ba69c7c1",
      "item": {
        "type": "markdown",
        "id": "8e611d57ba69c7c1",
        "text": "The *[[boundary logic]]* presented herein was introduced by G. Spencer Brown in [[Laws of Form]] (LoF). The mathematics is equational rather than inferential; like Boolean algebra, valid transformations are specified by equations. Boundary logic uses the boundary pattern language introduced by Peirce, but the add-and-delete rules of AEG are incorporated into pattern-equations that permit deduction to proceed solely though rewrite rules that delete structure. Pattern-equations define equivalence sets on boundary forms; the algebraic formulation replaces one-directional inference with the familiar bidirectional algebraic rules of substitution and replacement of equals."
      },
      "date": 1659351529888
    },
    {
      "item": {
        "type": "factory",
        "id": "e757b8debca247b1"
      },
      "id": "e757b8debca247b1",
      "type": "add",
      "after": "8e611d57ba69c7c1",
      "date": 1659351745236
    },
    {
      "type": "edit",
      "id": "e757b8debca247b1",
      "item": {
        "type": "paragraph",
        "id": "e757b8debca247b1",
        "text": "The pure algebraic mathematics of boundaries [4] is based on the concept of distinction, or difference. It is constructed de novo, without reference to logical, set theoretic, relational, numeric, or categoric objects. Boundaries are strictly structural,"
      },
      "date": 1659351747146
    },
    {
      "type": "edit",
      "id": "e757b8debca247b1",
      "item": {
        "type": "paragraph",
        "id": "e757b8debca247b1",
        "text": "The pure algebraic mathematics of boundaries [4] is based on the concept of distinction, or difference. It is constructed de novo, without reference to logical, set theoretic, relational, numeric, or categoric objects. Boundaries are strictly structural, representing only the abstract concept of difference, without requiring identification of the type of object being differentiated. Thus, boundary mathematics differs substantively from the conventional mathematics of strings."
      },
      "date": 1659351756087
    },
    {
      "type": "edit",
      "id": "e757b8debca247b1",
      "item": {
        "type": "paragraph",
        "id": "e757b8debca247b1",
        "text": "The pure algebraic mathematics of boundaries [4] is based on the concept of *[[distinction]]*, or difference. It is constructed de novo, without reference to logical, set theoretic, relational, numeric, or categoric objects. Boundaries are strictly structural, representing only the abstract concept of difference, without requiring identification of the type of object being differentiated. Thus, boundary mathematics differs substantively from the conventional mathematics of strings."
      },
      "date": 1659351771750
    },
    {
      "type": "edit",
      "id": "e757b8debca247b1",
      "item": {
        "type": "markdown",
        "id": "e757b8debca247b1",
        "text": "The pure algebraic mathematics of boundaries [4] is based on the concept of *[[distinction]]*, or difference. It is constructed de novo, without reference to logical, set theoretic, relational, numeric, or categoric objects. Boundaries are strictly structural, representing only the abstract concept of difference, without requiring identification of the type of object being differentiated. Thus, boundary mathematics differs substantively from the conventional mathematics of strings."
      },
      "date": 1659351773122
    },
    {
      "item": {
        "type": "factory",
        "id": "d08df14da6794118"
      },
      "id": "d08df14da6794118",
      "type": "add",
      "after": "e757b8debca247b1",
      "date": 1659351789749
    },
    {
      "type": "edit",
      "id": "d08df14da6794118",
      "item": {
        "type": "paragraph",
        "id": "d08df14da6794118",
        "text": "The abstract structure of boundary algebra is described first in Section 2, including the basic concepts of spatial operators with arbitrary numbers of arguments, spatial pattern-equations, and permeable boundaries. Boundary logic, the application of boundary algebra to logic, is then described in Section 3. Two new tools for deduction are introduced: void-substitution and boundary transparency. Section 4 shows a sequence of geometrical and topological transformations of boundary forms that generate over two dozen new diagrammatic notations for logic. Each of these notations provides potential new tools for Cognitive Science and for Computer Science. The structure of each notation suggests unexplored models of how we might read, analyze, manipulate, compute with, and think about deductive logic. The notations also suggest a wide diversity of data structures and algorithms for both hardware and software implementation of logic. Other than Peirce's original concept of a diagrammatic logic expressed as boundaries, and Spencer Brown's equational axiomatization of the same logic, Sections 2 and 4 are new. The axiomatization in Section 3 is the author's"
      },
      "date": 1659351791349
    },
    {
      "item": {
        "type": "factory",
        "id": "5df3790ed0abcdf7"
      },
      "id": "5df3790ed0abcdf7",
      "type": "add",
      "after": "d08df14da6794118",
      "date": 1659351800529
    },
    {
      "type": "edit",
      "id": "5df3790ed0abcdf7",
      "item": {
        "type": "paragraph",
        "id": "5df3790ed0abcdf7",
        "text": "– [[Boundary Algebra]]"
      },
      "date": 1659351807348
    },
    {
      "type": "edit",
      "id": "5df3790ed0abcdf7",
      "item": {
        "type": "paragraph",
        "id": "5df3790ed0abcdf7",
        "text": "⇒ [[Boundary Algebra]]"
      },
      "date": 1659351812071
    },
    {
      "type": "edit",
      "id": "094cdafbb17c2b49",
      "item": {
        "type": "markdown",
        "id": "094cdafbb17c2b49",
        "text": "* [[Boundary Algebra]]\n* [[Axiomitization of Boundary Logic]]\n* [[Boundary Algebra]] ⇒ [[Boundaries]]"
      },
      "date": 1659370852998
    },
    {
      "type": "edit",
      "id": "31d3193cc9346eb4",
      "item": {
        "type": "markdown",
        "id": "31d3193cc9346eb4",
        "text": "Since antiquity, logical connectives have been presumed to be abstract; they are the *[[Syncategoremata]]*, words that refer to nothing but themselves yet function to connect words that do have referents [1, p233]. Since logical connectives have no explicit form, they are represented by meaningless tokens. Peirce's Alpha Existential Graphs (AEG) [2 (1896)] introduces a radical re-conceptualization: the connectives of formal logic can take the form of diagrammatic structures consisting of closed nonintersecting curves, or boundaries. Composition of boundaries sharing the same space, and nested within each other, creates a spatial pattern language that is sufficient to express the sentences of propositional calculus. Traditionally, propositional rules of inference permit new sentences to be added to the collection of valid sentences, a strategy of accumulation. The diagrammatic reasoning in AEG follows a fundamentally different strategy: boundary patterns are transformed by rules that add and delete boundary structure. Peirce shows that inference can be achieved by creation and destruction, rather than by accumulation."
      },
      "date": 1664164050929
    },
    {
      "type": "edit",
      "id": "8e611d57ba69c7c1",
      "item": {
        "type": "markdown",
        "id": "8e611d57ba69c7c1",
        "text": "The *[[Boundary Logic]]* presented herein was introduced by G. Spencer Brown in [[Laws of Form]] (LoF). The mathematics is equational rather than inferential; like Boolean algebra, valid transformations are specified by equations. Boundary logic uses the boundary pattern language introduced by Peirce, but the add-and-delete rules of AEG are incorporated into pattern-equations that permit deduction to proceed solely though rewrite rules that delete structure. Pattern-equations define equivalence sets on boundary forms; the algebraic formulation replaces one-directional inference with the familiar bidirectional algebraic rules of substitution and replacement of equals."
      },
      "date": 1664164086610
    },
    {
      "type": "edit",
      "id": "e757b8debca247b1",
      "item": {
        "type": "markdown",
        "id": "e757b8debca247b1",
        "text": "The pure algebraic mathematics of boundaries [4] is based on the concept of *[[Distinction]]*, or difference. It is constructed de novo, without reference to logical, set theoretic, relational, numeric, or categoric objects. Boundaries are strictly structural, representing only the abstract concept of difference, without requiring identification of the type of object being differentiated. Thus, boundary mathematics differs substantively from the conventional mathematics of strings."
      },
      "date": 1664164236065
    },
    {
      "id": "4f72b80ef95106bb",
      "type": "move",
      "order": [
        "4f72b80ef95106bb",
        "b599b2c9fd777b3f",
        "094cdafbb17c2b49",
        "b5f1b28cb6983975",
        "77d1e8a0a06ebff5",
        "31d3193cc9346eb4",
        "8e611d57ba69c7c1",
        "e757b8debca247b1",
        "d08df14da6794118",
        "5df3790ed0abcdf7"
      ],
      "date": 1664179063338
    },
    {
      "type": "edit",
      "id": "4f72b80ef95106bb",
      "item": {
        "type": "markdown",
        "id": "4f72b80ef95106bb",
        "text": "Boundary logic is a formal diagrammatic system that combines Peirce’s Entitative Graphs with Spencer Brown’s Laws of Form. Its conceptual basis includes boundary forms composed of non-intersecting closed curves, void-substitution (deletion of irrelevant structure) as the primary mechanism of reduction, and spatial pattern-equations that define valid transformations. Pure boundary algebra, free of interpretation, is first briefly described, followed by a description of boundary logic. Then several new diagrammatic notations for logic derived from geometrical and topological transformation of boundary forms are presented. The algebra and an example proof of modus ponens is provided for textual, enclosure, graph, map, path and block based forms. These new diagrammatic languages for logic convert connectives into configurations of containment, connectivity, contact, conveyance, and concreteness."
      },
      "date": 1664179067611
    },
    {
      "type": "edit",
      "id": "4f72b80ef95106bb",
      "item": {
        "type": "markdown",
        "id": "4f72b80ef95106bb",
        "text": "Boundary logic is a formal diagrammatic system that combines Peirce’s Entitative Graphs with Spencer Brown’s [[Laws of Form]]. Its conceptual basis includes boundary forms composed of non-intersecting closed curves, void-substitution (deletion of irrelevant structure) as the primary mechanism of reduction, and spatial pattern-equations that define valid transformations. Pure boundary algebra, free of interpretation, is first briefly described, followed by a description of boundary logic. Then several new diagrammatic notations for logic derived from geometrical and topological transformation of boundary forms are presented. The algebra and an example proof of modus ponens is provided for textual, enclosure, graph, map, path and block based forms. These new diagrammatic languages for logic convert connectives into configurations of containment, connectivity, contact, conveyance, and concreteness."
      },
      "date": 1664179093860
    },
    {
      "type": "edit",
      "id": "094cdafbb17c2b49",
      "item": {
        "type": "markdown",
        "id": "094cdafbb17c2b49",
        "text": "\n* [[Axiomitization of Boundary Logic]]\n* [[Boundary Algebra]] ⇒ [[Boundaries]]"
      },
      "date": 1664179298299
    },
    {
      "type": "edit",
      "id": "4f72b80ef95106bb",
      "item": {
        "type": "markdown",
        "id": "4f72b80ef95106bb",
        "text": "[[Boundary Logic]] is a formal diagrammatic system that combines Peirce’s Entitative Graphs with Spencer Brown’s [[Laws of Form]]. Its conceptual basis includes boundary forms composed of non-intersecting closed curves, void-substitution (deletion of irrelevant structure) as the primary mechanism of reduction, and spatial pattern-equations that define valid transformations. Pure boundary algebra, free of interpretation, is first briefly described, followed by a description of boundary logic. Then several new diagrammatic notations for logic derived from geometrical and topological transformation of boundary forms are presented. The algebra and an example proof of modus ponens is provided for textual, enclosure, graph, map, path and block based forms. These new diagrammatic languages for logic convert connectives into configurations of containment, connectivity, contact, conveyance, and concreteness."
      },
      "date": 1673348878618
    },
    {
      "type": "edit",
      "id": "4f72b80ef95106bb",
      "item": {
        "type": "markdown",
        "id": "4f72b80ef95106bb",
        "text": "[[Boundary Logic]] is a formal diagrammatic system that combines Peirce’s Entitative Graphs with Spencer Brown’s [[Laws of Form]]. \n"
      },
      "date": 1673348974378
    },
    {
      "type": "add",
      "id": "75eb458866910007",
      "item": {
        "type": "markdown",
        "id": "75eb458866910007",
        "text": "Its conceptual basis includes boundary forms composed of non-intersecting closed curves, void-substitution (deletion of irrelevant structure) as the primary mechanism of reduction, and spatial pattern-equations that define valid transformations. Pure boundary algebra, free of interpretation, is first briefly described, followed by a description of boundary logic. Then several new diagrammatic notations for logic derived from geometrical and topological transformation of boundary forms are presented. The algebra and an example proof of modus ponens is provided for textual, enclosure, graph, map, path and block based forms. These new diagrammatic languages for logic convert connectives into configurations of containment, connectivity, contact, conveyance, and concreteness."
      },
      "after": "4f72b80ef95106bb",
      "date": 1673348974782
    },
    {
      "type": "edit",
      "id": "75eb458866910007",
      "item": {
        "type": "markdown",
        "id": "75eb458866910007",
        "text": "Its conceptual basis includes boundary forms composed of non-intersecting closed curves, void-substitution (deletion of irrelevant structure) as the primary mechanism of reduction, and spatial pattern-equations that define valid transformations. \n"
      },
      "date": 1673348997342
    },
    {
      "type": "add",
      "id": "d965f4b4ccfc76e6",
      "item": {
        "type": "markdown",
        "id": "d965f4b4ccfc76e6",
        "text": "Pure boundary algebra, free of interpretation, is first briefly described, followed by a description of boundary logic. Then several new diagrammatic notations for logic derived from geometrical and topological transformation of boundary forms are presented. The algebra and an example proof of modus ponens is provided for textual, enclosure, graph, map, path and block based forms. These new diagrammatic languages for logic convert connectives into configurations of containment, connectivity, contact, conveyance, and concreteness."
      },
      "after": "75eb458866910007",
      "date": 1673348998286
    },
    {
      "type": "edit",
      "id": "d965f4b4ccfc76e6",
      "item": {
        "type": "markdown",
        "id": "d965f4b4ccfc76e6",
        "text": "Pure boundary algebra, free of interpretation, is first briefly described, followed by a description of boundary logic. Then several new diagrammatic notations for logic derived from geometrical and topological transformation of boundary forms are presented. The algebra and an example proof of modus ponens is provided for textual, enclosure, graph, map, path and block based forms. These new diagrammatic languages for logic convert connectives into configurations of [[Containment]], connectivity, contact, conveyance, and concreteness."
      },
      "date": 1673349037387
    }
  ]
}