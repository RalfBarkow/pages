{
  "title": "put",
  "story": [
    {
      "type": "reference",
      "id": "1d3abf571d3a2753",
      "site": "wiki.ralfbarkow.ch",
      "slug": "-2d",
      "title": "λ-2D",
      "text": "An Exploration of Drawing as Programming Language, Featuring Ideas from [[Lambda Calculus]]. [https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/ post] by [[Lingdong Huang]]"
    },
    {
      "type": "markdown",
      "id": "10d7efd4534fe18d",
      "text": "> […] a \"cup\" [[Shape]] for the function application (for the silly intuition that applying the function is like **put**ting the argument into the \"[[Cup]]\"), […]. "
    },
    {
      "type": "reference",
      "id": "5cf3e8e4387995b2",
      "site": "wiki.ralfbarkow.ch",
      "slug": "arrangement",
      "title": "Arrangement",
      "text": "The Arrangement axiom gives permission to take multiple forms out of the interior [[Content]] of a [[Frame]] and put them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "put",
        "story": []
      },
      "date": 1696355894650
    },
    {
      "item": {
        "type": "factory",
        "id": "1d3abf571d3a2753"
      },
      "id": "1d3abf571d3a2753",
      "type": "add",
      "date": 1696355896728
    },
    {
      "type": "edit",
      "id": "1d3abf571d3a2753",
      "item": {
        "type": "reference",
        "id": "1d3abf571d3a2753",
        "site": "wiki.ralfbarkow.ch",
        "slug": "-2d",
        "title": "λ-2D",
        "text": "An Exploration of Drawing as Programming Language, Featuring Ideas from [[Lambda Calculus]]. [https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/ post] by [[Lingdong Huang]], [https://twitter.com/rsms/status/1512180025142902786?s=20&t=QzaIuX4jbb6MEKnFgKviyQ tweet] by [[Rasmus Andersson]]"
      },
      "date": 1696355900333
    },
    {
      "type": "edit",
      "id": "1d3abf571d3a2753",
      "item": {
        "type": "reference",
        "id": "1d3abf571d3a2753",
        "site": "wiki.ralfbarkow.ch",
        "slug": "-2d",
        "title": "λ-2D",
        "text": "An Exploration of Drawing as Programming Language, Featuring Ideas from [[Lambda Calculus]]. [https://www.media.mit.edu/projects/2d-an-exploration-of-drawing-as-programming-language-featuring-ideas-from-lambda-calculus/overview/ post] by [[Lingdong Huang]]"
      },
      "date": 1696355914788
    },
    {
      "id": "10d7efd4534fe18d",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "10d7efd4534fe18d",
        "text": "Lambda calculus is such a concise language that it only has two instructions: that of function application and that of function definition. I ([[Lingdong Huang]]) quickly came up with working symbols for each: a \"cup\" shape for the former (for the silly intuition that applying the function is like [[put]]ting the argument into the \"cup\"), and the eponymous greek letter for the latter (which is a bit unimaginative and arguably overused, but at least it's clear). Just like vanilla lambda calculus, functions always take one argument and produce one output; to get more, you can chain multiple functions together, known as \"currying\". "
      },
      "after": "1d3abf571d3a2753",
      "attribution": {
        "page": "λ-2D"
      },
      "date": 1696356243371
    },
    {
      "type": "edit",
      "id": "10d7efd4534fe18d",
      "item": {
        "type": "paragraph",
        "id": "10d7efd4534fe18d",
        "text": "> […] a \"cup\" shape for the former (for the silly intuition that applying the function is like [[put]]ting the argument into the \"cup\"), and the eponymous greek letter for the latter (which is a bit unimaginative and arguably overused, but at least it's clear). Just like vanilla lambda calculus, functions always take one argument and produce one output; to get more, you can chain multiple functions together, known as \"currying\". "
      },
      "date": 1696356263021
    },
    {
      "type": "edit",
      "id": "10d7efd4534fe18d",
      "item": {
        "type": "paragraph",
        "id": "10d7efd4534fe18d",
        "text": "> […] a \"cup\" shape for the function application (for the silly intuition that applying the function is like [[put]]ting the argument into the \"cup\"), and the eponymous greek letter for the latter (which is a bit unimaginative and arguably overused, but at least it's clear). Just like vanilla lambda calculus, functions always take one argument and produce one output; to get more, you can chain multiple functions together, known as \"currying\". "
      },
      "date": 1696356273911
    },
    {
      "type": "edit",
      "id": "10d7efd4534fe18d",
      "item": {
        "type": "paragraph",
        "id": "10d7efd4534fe18d",
        "text": "> […] a \"cup\" shape for the function application (for the silly intuition that applying the function is like [[put]]ting the argument into the \"cup\"), […]. "
      },
      "date": 1696356287721
    },
    {
      "type": "edit",
      "id": "10d7efd4534fe18d",
      "item": {
        "type": "markdown",
        "id": "10d7efd4534fe18d",
        "text": "> […] a \"cup\" shape for the function application (for the silly intuition that applying the function is like [[put]]ting the argument into the \"cup\"), […]. "
      },
      "date": 1696356292272
    },
    {
      "item": {
        "type": "factory",
        "id": "3b77e2354050816d"
      },
      "id": "3b77e2354050816d",
      "type": "add",
      "after": "10d7efd4534fe18d",
      "date": 1696356342503
    },
    {
      "id": "5cf3e8e4387995b2",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "5cf3e8e4387995b2",
        "site": "wiki.ralfbarkow.ch",
        "slug": "arrangement",
        "title": "Arrangement",
        "text": "The Arrangement axiom gives permission to take multiple forms out of the interior [[Content]] of a [[Frame]] and [[put]] them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
      },
      "after": "3b77e2354050816d",
      "attribution": {
        "page": "Context"
      },
      "date": 1696356405329
    },
    {
      "type": "remove",
      "id": "3b77e2354050816d",
      "date": 1696356408377
    },
    {
      "type": "edit",
      "id": "5cf3e8e4387995b2",
      "item": {
        "type": "reference",
        "id": "5cf3e8e4387995b2",
        "site": "wiki.ralfbarkow.ch",
        "slug": "arrangement",
        "title": "Arrangement",
        "text": "The Arrangement axiom gives permission to take multiple forms out of the interior [[Content]] of a [[Frame]] and put them into separate frames, so long as we carry their Context — i.e. their [[Frame Type]], (A [...]) — along with them."
      },
      "date": 1696356430593
    },
    {
      "type": "edit",
      "id": "10d7efd4534fe18d",
      "item": {
        "type": "markdown",
        "id": "10d7efd4534fe18d",
        "text": "> […] a \"cup\" shape for the function application (for the silly intuition that applying the function is like **put**ting the argument into the \"cup\"), […]. "
      },
      "date": 1707121657187
    },
    {
      "type": "edit",
      "id": "10d7efd4534fe18d",
      "item": {
        "type": "markdown",
        "id": "10d7efd4534fe18d",
        "text": "> […] a \"cup\" [[Shape]] for the function application (for the silly intuition that applying the function is like **put**ting the argument into the \"cup\"), […]. "
      },
      "date": 1707121670618
    },
    {
      "type": "edit",
      "id": "10d7efd4534fe18d",
      "item": {
        "type": "markdown",
        "id": "10d7efd4534fe18d",
        "text": "> […] a \"cup\" [[Shape]] for the function application (for the silly intuition that applying the function is like **put**ting the argument into the \"[[Cup]]\"), […]. "
      },
      "date": 1707121696888
    }
  ]
}