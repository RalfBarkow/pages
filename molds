{
  "title": "Molds",
  "story": [
    {
      "type": "paragraph",
      "id": "0bdce46e0a70f032",
      "text": "See [[Mold]]."
    },
    {
      "type": "paragraph",
      "id": "4179576ca7b38ed2",
      "text": "Molds can be challenging to use. Let's use tests to document them then! Let me show you how moldable-emacs is self documenting. And that one can generate useful documentation from source code. [https://ag91.github.io/blog/2021/10/02/moldable-emacs-molds-need-examples-too/ post]"
    },
    {
      "type": "paragraph",
      "id": "922422d107f07f58",
      "text": "a [[pattern]] in [[moldable-emacs]].\n\n\n\n"
    },
    {
      "type": "code",
      "id": "bff169bec627f25f",
      "text": ":given (:fn (and\n             (executable-find \"graph\")\n              (me/require 'esxml)\n              report))"
    },
    {
      "type": "paragraph",
      "id": "e4fc5a3fac5aa5e3",
      "text": "Actually there is more than one here. First we have the :given which tells there is a precondition. Then we have :fn that I have recently introduced. [https://ag91.github.io/blog/2021/09/19/moldable-emacs-making-molds-a-little-easier-to-write/ post] And finally we have (executable-find \"graph\") and (me/require 'esxml)!\n\nThis last ones are the stars of the show today. I have been evolving a pattern: any time I use an external Emacs package or an external software, I use these functions. We need to get the most from the little we got, remember? Indeed, I find these functions useful as precondition of a mold. If these return false, the mold is unusable. So the first benefit is mold selection. And you can see that this pattern hints that we can collect dependencies easily. Do you see where I am going?\n\nNow moldable-emacs is about molds that help you understand software in the way you need it. In this case, I would like to know what molds I can use and what I can't. And if I can't, what am I missing. "
    },
    {
      "type": "paragraph",
      "id": "ea211b8dcf56e793",
      "text": "This is how it works. Video showing WhatMoldsCanIUse dependency and demo [https://ag91.github.io/assets/blog/2021/10/02/moldable-emacs-molds-need-examples-too/moldableExamples.mp4 mp4]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Molds",
        "story": []
      },
      "date": 1638510031184
    },
    {
      "item": {
        "type": "factory",
        "id": "4179576ca7b38ed2"
      },
      "id": "4179576ca7b38ed2",
      "type": "add",
      "date": 1638510044871
    },
    {
      "type": "edit",
      "id": "4179576ca7b38ed2",
      "item": {
        "type": "paragraph",
        "id": "4179576ca7b38ed2",
        "text": "Molds can be challenging to use. Let's use tests to document them then! Let me show you how moldable-emacs is self documenting. And that one can generate useful documentation from source code. "
      },
      "date": 1638510047199
    },
    {
      "type": "edit",
      "id": "4179576ca7b38ed2",
      "item": {
        "type": "paragraph",
        "id": "4179576ca7b38ed2",
        "text": "Molds can be challenging to use. Let's use tests to document them then! Let me show you how moldable-emacs is self documenting. And that one can generate useful documentation from source code. [https://ag91.github.io/blog/2021/10/02/moldable-emacs-molds-need-examples-too/ post]"
      },
      "date": 1638510056798
    },
    {
      "item": {
        "type": "factory",
        "id": "ea211b8dcf56e793"
      },
      "id": "ea211b8dcf56e793",
      "type": "add",
      "after": "4179576ca7b38ed2",
      "date": 1638510297859
    },
    {
      "type": "edit",
      "id": "ea211b8dcf56e793",
      "item": {
        "type": "paragraph",
        "id": "ea211b8dcf56e793",
        "text": "[https://ag91.github.io/assets/blog/2021/10/02/moldable-emacs-molds-need-examples-too/moldableExamples.mp4 mp4]"
      },
      "date": 1638510317367
    },
    {
      "type": "edit",
      "id": "ea211b8dcf56e793",
      "item": {
        "type": "paragraph",
        "id": "ea211b8dcf56e793",
        "text": "Video showing WhatMoldsCanIUse dependency and demo [https://ag91.github.io/assets/blog/2021/10/02/moldable-emacs-molds-need-examples-too/moldableExamples.mp4 mp4]"
      },
      "date": 1638510363475
    },
    {
      "item": {
        "type": "factory",
        "id": "0bdce46e0a70f032"
      },
      "id": "0bdce46e0a70f032",
      "type": "add",
      "after": "ea211b8dcf56e793",
      "date": 1638656369654
    },
    {
      "type": "edit",
      "id": "0bdce46e0a70f032",
      "item": {
        "type": "paragraph",
        "id": "0bdce46e0a70f032",
        "text": "See [[Mold]]."
      },
      "date": 1638656378351
    },
    {
      "id": "0bdce46e0a70f032",
      "type": "move",
      "order": [
        "0bdce46e0a70f032",
        "4179576ca7b38ed2",
        "ea211b8dcf56e793"
      ],
      "date": 1638656381040
    },
    {
      "item": {
        "type": "factory",
        "id": "922422d107f07f58"
      },
      "id": "922422d107f07f58",
      "type": "add",
      "after": "ea211b8dcf56e793",
      "date": 1638656472185
    },
    {
      "type": "edit",
      "id": "922422d107f07f58",
      "item": {
        "type": "paragraph",
        "id": "922422d107f07f58",
        "text": "a pattern in moldable-emacs.\n\n:given (:fn (and\n             (executable-find \"graph\")\n              (me/require 'esxml)\n              report))\n\n"
      },
      "date": 1638656488785
    },
    {
      "item": {
        "type": "factory",
        "id": "bff169bec627f25f"
      },
      "id": "bff169bec627f25f",
      "type": "add",
      "after": "922422d107f07f58",
      "date": 1638656497155
    },
    {
      "type": "edit",
      "id": "922422d107f07f58",
      "item": {
        "type": "paragraph",
        "id": "922422d107f07f58",
        "text": "a pattern in moldable-emacs.\n\n\n\n"
      },
      "date": 1638656499065
    },
    {
      "type": "edit",
      "id": "bff169bec627f25f",
      "item": {
        "type": "code",
        "id": "bff169bec627f25f",
        "text": ":given (:fn (and\n             (executable-find \"graph\")\n              (me/require 'esxml)\n              report))"
      },
      "date": 1638656500241
    },
    {
      "item": {
        "type": "factory",
        "id": "e4fc5a3fac5aa5e3"
      },
      "id": "e4fc5a3fac5aa5e3",
      "type": "add",
      "after": "bff169bec627f25f",
      "date": 1638656560873
    },
    {
      "type": "edit",
      "id": "e4fc5a3fac5aa5e3",
      "item": {
        "type": "paragraph",
        "id": "e4fc5a3fac5aa5e3",
        "text": " Actually there is more than one here. First we have the :given which tells there is a precondition. Then we have :fn that I have recently introduced. And finally we have (executable-find \"graph\") and (me/require 'esxml)!\n\nThis last ones are the stars of the show today. I have been evolving a pattern: any time I use an external Emacs package or an external software, I use these functions. We need to get the most from the little we got, remember? Indeed, I find these functions useful as precondition of a mold. If these return false, the mold is unusable. So the first benefit is mold selection. And you can see that this pattern hints that we can collect dependencies easily. Do you see where I am going?\n\nNow moldable-emacs is about molds that help you understand software in the way you need it. In this case, I would like to know what molds I can use and what I can't. And if I can't, what am I missing. "
      },
      "date": 1638656562865
    },
    {
      "type": "edit",
      "id": "e4fc5a3fac5aa5e3",
      "item": {
        "type": "paragraph",
        "id": "e4fc5a3fac5aa5e3",
        "text": "Actually there is more than one here. First we have the :given which tells there is a precondition. Then we have :fn that I have recently introduced. [https://ag91.github.io/blog/2021/09/19/moldable-emacs-making-molds-a-little-easier-to-write/ post] And finally we have (executable-find \"graph\") and (me/require 'esxml)!\n\nThis last ones are the stars of the show today. I have been evolving a pattern: any time I use an external Emacs package or an external software, I use these functions. We need to get the most from the little we got, remember? Indeed, I find these functions useful as precondition of a mold. If these return false, the mold is unusable. So the first benefit is mold selection. And you can see that this pattern hints that we can collect dependencies easily. Do you see where I am going?\n\nNow moldable-emacs is about molds that help you understand software in the way you need it. In this case, I would like to know what molds I can use and what I can't. And if I can't, what am I missing. "
      },
      "date": 1638656610849
    },
    {
      "id": "ea211b8dcf56e793",
      "type": "move",
      "order": [
        "0bdce46e0a70f032",
        "4179576ca7b38ed2",
        "922422d107f07f58",
        "bff169bec627f25f",
        "e4fc5a3fac5aa5e3",
        "ea211b8dcf56e793"
      ],
      "date": 1638656690795
    },
    {
      "type": "edit",
      "id": "ea211b8dcf56e793",
      "item": {
        "type": "paragraph",
        "id": "ea211b8dcf56e793",
        "text": "This is how it works. Video showing WhatMoldsCanIUse dependency and demo [https://ag91.github.io/assets/blog/2021/10/02/moldable-emacs-molds-need-examples-too/moldableExamples.mp4 mp4]"
      },
      "date": 1638656713012
    },
    {
      "type": "edit",
      "id": "922422d107f07f58",
      "item": {
        "type": "paragraph",
        "id": "922422d107f07f58",
        "text": "a [[pattern]] in [[moldable-emacs]].\n\n\n\n"
      },
      "date": 1638656753188
    }
  ]
}