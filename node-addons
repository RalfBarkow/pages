{
  "journal": [
    {
      "date": 1427925935235,
      "item": {
        "story": "",
        "title": "Node Addons"
      },
      "type": "create"
    },
    {
      "date": 1427925936878,
      "id": "93ccbf557ba54cb6",
      "item": {
        "id": "93ccbf557ba54cb6",
        "type": "factory"
      },
      "type": "add"
    },
    {
      "date": 1427925960241,
      "id": "93ccbf557ba54cb6",
      "item": {
        "id": "93ccbf557ba54cb6",
        "text": "Addons are dynamically linked shared objects. They can provide glue to C and C++ libraries. ",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "after": "93ccbf557ba54cb6",
      "date": 1427926028166,
      "id": "74101f518a81399f",
      "item": {
        "id": "74101f518a81399f",
        "text": "The API (at the moment) is rather complex, involving knowledge of several libraries:\n<UL><LI>\n    V8 JavaScript, a C++ library. Used for interfacing with JavaScript: creating objects, calling functions, etc. Documented mostly in the v8.h header file (deps/v8/include/v8.h in the Node source tree), which is also available online.</LI><LI>\n    libuv, C event loop library. Anytime one needs to wait for a file descriptor to become readable, wait for a timer, or wait for a signal to be received one will need to interface with libuv. That is, if you perform any I/O, libuv will need to be used.</LI><LI>\n    Internal Node libraries. Most importantly is the node::ObjectWrap class which you will likely want to derive from.</LI><LI>\n    Others. Look in deps/ for what else is available.\n</LI></UL>",
        "type": "paragraph"
      },
      "type": "add"
    },
    {
      "date": 1427926030341,
      "id": "74101f518a81399f",
      "item": {
        "id": "74101f518a81399f",
        "text": "The API (at the moment) is rather complex, involving knowledge of several libraries:\n<UL><LI>\n    V8 JavaScript, a C++ library. Used for interfacing with JavaScript: creating objects, calling functions, etc. Documented mostly in the v8.h header file (deps/v8/include/v8.h in the Node source tree), which is also available online.</LI><LI>\n    libuv, C event loop library. Anytime one needs to wait for a file descriptor to become readable, wait for a timer, or wait for a signal to be received one will need to interface with libuv. That is, if you perform any I/O, libuv will need to be used.</LI><LI>\n    Internal Node libraries. Most importantly is the node::ObjectWrap class which you will likely want to derive from.</LI><LI>\n    Others. Look in deps/ for what else is available.\n</LI></UL>",
        "type": "html"
      },
      "type": "edit"
    },
    {
      "after": "74101f518a81399f",
      "date": 1427926038675,
      "id": "ebe6fb0a55d33b89",
      "item": {
        "id": "ebe6fb0a55d33b89",
        "text": "Node statically compiles all its dependencies into the executable. When compiling your module, you don't need to worry about linking to any of these libraries.\n\nAll of the following examples are available for download and may be used as a starting-point for your own Addon. ",
        "type": "paragraph"
      },
      "type": "add"
    },
    {
      "date": 1427926097012,
      "id": "74101f518a81399f",
      "item": {
        "id": "74101f518a81399f",
        "text": "The API (at the moment) is rather complex, involving knowledge of several libraries:\n<UL><LI>\n    V8 JavaScript, a C++ library. Used for interfacing with JavaScript</LI><LI>\n    libuv, C event loop library. Anytime one needs to wait for a file descriptor to become readable, wait for a timer, or wait for a signal to be received one will need to interface with libuv. That is, if you perform any I/O, libuv will need to be used.</LI><LI>\n    Internal Node libraries.</LI><LI>\n    Others. Look in deps/ for what else is available.\n</LI></UL>",
        "type": "html"
      },
      "type": "edit"
    },
    {
      "date": 1427926115869,
      "id": "74101f518a81399f",
      "item": {
        "id": "74101f518a81399f",
        "text": "The API (at the moment) is rather complex, involving knowledge of several libraries:\n<UL><LI>\n    V8 JavaScript, a C++ library. Used for interfacing with JavaScript</LI><LI>\n    libuv, C event loop library. That is, if you perform any I/O, libuv will need to be used.</LI><LI>\n    Internal Node libraries.</LI><LI>\n    Others. Look in deps/ for what else is available.\n</LI></UL>",
        "type": "html"
      },
      "type": "edit"
    },
    {
      "date": 1427926182472,
      "id": "ebe6fb0a55d33b89",
      "item": {
        "id": "ebe6fb0a55d33b89",
        "text": "Node statically compiles all its dependencies into the executable. When compiling your module, you don't need to worry about linking to any of these libraries.",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "date": 1427926206116,
      "id": "93ccbf557ba54cb6",
      "item": {
        "id": "93ccbf557ba54cb6",
        "text": "Addons are dynamically linked shared objects. They can provide glue to C and C++ libraries - [https://nodejs.org/api/addons.html nodejs.org]",
        "type": "paragraph"
      },
      "type": "edit"
    },
    {
      "type": "fork",
      "site": "c0de.academy",
      "date": 1627303245102
    }
  ],
  "story": [
    {
      "id": "93ccbf557ba54cb6",
      "text": "Addons are dynamically linked shared objects. They can provide glue to C and C++ libraries - [https://nodejs.org/api/addons.html nodejs.org]",
      "type": "paragraph"
    },
    {
      "id": "74101f518a81399f",
      "text": "The API (at the moment) is rather complex, involving knowledge of several libraries:\n<UL><LI>\n    V8 JavaScript, a C++ library. Used for interfacing with JavaScript</LI><LI>\n    libuv, C event loop library. That is, if you perform any I/O, libuv will need to be used.</LI><LI>\n    Internal Node libraries.</LI><LI>\n    Others. Look in deps/ for what else is available.\n</LI></UL>",
      "type": "html"
    },
    {
      "id": "ebe6fb0a55d33b89",
      "text": "Node statically compiles all its dependencies into the executable. When compiling your module, you don't need to worry about linking to any of these libraries.",
      "type": "paragraph"
    }
  ],
  "title": "Node Addons"
}