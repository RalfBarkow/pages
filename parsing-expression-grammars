{
  "title": "Parsing Expression Grammars",
  "story": [
    {
      "type": "paragraph",
      "id": "90677852df9d598f",
      "text": "For decades we have been using Chomsky’s generative system of grammars, particularly context-free grammars (CFGs) and regular expressions (REs), to express the syntax of programming languages and protocols. The power of generative grammars to express ambiguity is crucial to their original purpose of modelling natural languages, but this very power makes it unnecessarily difficult both to express and to parse machine-oriented languages using CFGs. Parsing Expression Grammars (PEGs) provide an alternative, recognition-based formal foundation for describing machine-oriented syntax, which solves the ambiguity problem by not introducing ambiguity in the first place. Where CFGs express nondeterministic choice between alternatives, PEGs instead use prioritized choice. PEGs address frequently felt expressiveness limitations of CFGs and REs, simplifying syntax definitions and making it unnecessary to separate their lexical and hierarchical components. A linear-time parser can be built for any PEG, avoiding both the complexity and fickleness of LR parsers and the inefficiency of generalized CFG parsing. While PEGs provide a rich set of operators for constructing grammars, they are reducible to two minimal recognition schemas developed around 1970, TS/TDPL and gTS/GTDPL, which are here proven equivalent in effective recognition power."
    },
    {
      "type": "pagefold",
      "id": "455576a3ef7fb688",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "24d124d834926d63",
      "text": "Ford, B.: Parsing Expression Grammars: A Recognition-Based Syntactic Foundation, Proceedings of the 31st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2004 (N. D. Jones, X. Leroy, Eds.), ACM, Venice, Italy, 14–16 January 2004."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Parsing Expression Grammars",
        "story": []
      },
      "date": 1695362043436
    },
    {
      "id": "24d124d834926d63",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "24d124d834926d63",
        "text": "[3] Ford, B.: [[Parsing Expression Grammars]]: A Recognition-Based Syntactic Foundation, Proceedings of the 31st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2004 (N. D. Jones, X. Leroy, Eds.), ACM, Venice, Italy, 14–16 January 2004."
      },
      "attribution": {
        "page": "2023-09-22"
      },
      "date": 1695362046172
    },
    {
      "type": "edit",
      "id": "24d124d834926d63",
      "item": {
        "type": "paragraph",
        "id": "24d124d834926d63",
        "text": "Ford, B.: Parsing Expression Grammars: A Recognition-Based Syntactic Foundation, Proceedings of the 31st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2004 (N. D. Jones, X. Leroy, Eds.), ACM, Venice, Italy, 14–16 January 2004."
      },
      "date": 1695362058461
    },
    {
      "item": {
        "type": "factory",
        "id": "90677852df9d598f"
      },
      "id": "90677852df9d598f",
      "type": "add",
      "after": "24d124d834926d63",
      "date": 1696440022417
    },
    {
      "id": "90677852df9d598f",
      "type": "move",
      "order": [
        "90677852df9d598f",
        "24d124d834926d63"
      ],
      "date": 1696440025783
    },
    {
      "type": "edit",
      "id": "90677852df9d598f",
      "item": {
        "type": "paragraph",
        "id": "90677852df9d598f",
        "text": "For decades we havebeen using Chomsky’sgenerati vesystem of grammars, particularly context-free grammars (CFGs) and regular expressions (REs), to express the syntax of programming languages and protocols. The power of generativegrammars to express ambiguity is crucial to their original purpose of modelling natural languages, but this very power makes itunnecessarily difficult both to express and to parse machine-oriented languages using CFGs. Parsing Expression Grammars (PEGs) provide an alternative, recognition-based formal foundation for describing machineoriented syntax, which solves the ambiguity problem by not introducing ambiguity in the first place. Where CFGs express nondeterministic choice between alternatives, PEGs instead use prioritized choice.PEGs address frequently felt expressiveness limitations of CFGs and REs, simplifying syntax definitions and making itunnecessary to separate their lexical and hierarchical components. A linear-time parser can be built for anyPEG, avoiding both the complexity and fickleness of LR parsers and the inefficiencyof generalized CFG parsing. While PEGs provide arich set of operators for constructing grammars, theyare reducible to twominimal recognition schemas developed around 1970, TS/TDPL and gTS/GTDPL, which are here proven equivalent in effectiverecognition power."
      },
      "date": 1696440027456
    },
    {
      "type": "edit",
      "id": "90677852df9d598f",
      "item": {
        "type": "paragraph",
        "id": "90677852df9d598f",
        "text": "For decades we have been using Chomsky’s generative system of grammars, particularly context-free grammars (CFGs) and regular expressions (REs), to express the syntax of programming languages and protocols. The power of generative grammars to express ambiguity is crucial to their original purpose of modelling natural languages, but this very power makes it unnecessarily difficult both to express and to parse machine-oriented languages using CFGs. Parsing Expression Grammars (PEGs) provide an alternative, recognition-based formal foundation for describing machine-oriented syntax, which solves the ambiguity problem by not introducing ambiguity in the first place. Where CFGs express nondeterministic choice between alternatives, PEGs instead use prioritized choice. PEGs address frequently felt expressiveness limitations of CFGs and REs, simplifying syntax definitions and making it unnecessary to separate their lexical and hierarchical components. A linear-time parser can be built for any PEG, avoiding both the complexity and fickleness of LR parsers and the inefficiency of generalized CFG parsing. While PEGs provide a rich set of operators for constructing grammars, they are reducible to two minimal recognition schemas developed around 1970, TS/TDPL and gTS/GTDPL, which are here proven equivalent in effective recognition power."
      },
      "date": 1696440125655
    },
    {
      "item": {
        "type": "factory",
        "id": "455576a3ef7fb688"
      },
      "id": "455576a3ef7fb688",
      "type": "add",
      "after": "24d124d834926d63",
      "date": 1696440127768
    },
    {
      "id": "455576a3ef7fb688",
      "type": "move",
      "order": [
        "90677852df9d598f",
        "455576a3ef7fb688",
        "24d124d834926d63"
      ],
      "date": 1696440129532
    },
    {
      "type": "edit",
      "id": "455576a3ef7fb688",
      "item": {
        "type": "pagefold",
        "id": "455576a3ef7fb688",
        "text": "~"
      },
      "date": 1696440133002
    }
  ]
}