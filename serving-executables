{
  "title": "Serving Executables",
  "story": [
    {
      "type": "paragraph",
      "id": "b7c0fd57123594d2",
      "text": "We've taken a step back from the increasing complexity driven by our early experiments in [[Outpost Thinking]]. We set the client aside for a moment and ask if we can hack an existing deno server to run executable helpers as if they were CGI scripts. [https://github.com/joshuabenuck/seran-sudoku github]"
    },
    {
      "type": "paragraph",
      "id": "7f27e6cb7e0b3ef2",
      "text": "We took deno's std/http/server.ts and added the simple logic: if a file to be served is executable, execute it and serve the result. Content type will be inferred from the suffix so we discard usual language conventions and rely on the #! interpreter convention to launch the right engine."
    },
    {
      "type": "paragraph",
      "id": "3914e6882ee6af7e",
      "text": "[[Sudoku Helper]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Serving Executables",
        "story": []
      },
      "date": 1593205558852
    },
    {
      "item": {
        "type": "factory",
        "id": "3914e6882ee6af7e"
      },
      "id": "3914e6882ee6af7e",
      "type": "add",
      "date": 1593205572898
    },
    {
      "id": "b7c0fd57123594d2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b7c0fd57123594d2",
        "text": "We've taken a step back from the increasing complexity driven by our early experiments in [[Outpost Thinking]]. We set the client aside for a moment and ask if we can hack an existing deno server to run executable helpers as if they were CGI scripts. [https://github.com/joshuabenuck/seran-sudoku github]"
      },
      "date": 1593205605653
    },
    {
      "id": "7f27e6cb7e0b3ef2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7f27e6cb7e0b3ef2",
        "text": "We took deno's std/http/server.ts and added the simple logic: if a file to be served is executable, execute it and serve the result. Content type will be inferred from the suffix so we discard usual language conventions and rely on the #! interpreter convention to launch the right engine."
      },
      "after": "b7c0fd57123594d2",
      "date": 1593205611577
    },
    {
      "type": "edit",
      "id": "3914e6882ee6af7e",
      "item": {
        "type": "paragraph",
        "id": "3914e6882ee6af7e",
        "text": "[[Sudoku Helper]]"
      },
      "date": 1593205623721
    },
    {
      "type": "fork",
      "site": "ward.asia.wiki.org",
      "date": 1651833097359
    }
  ]
}