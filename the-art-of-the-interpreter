{
  "title": "The Art of the Interpreter",
  "story": [
    {
      "type": "markdown",
      "id": "8e588a4f6b28ad1c",
      "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522690614487aUvCE:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] […] also studied *The Art of the Interpreter* which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible. (Context: [[Mixins]])\n"
    },
    {
      "type": "markdown",
      "id": "d90957e56d769780",
      "text": "STEELE, Guy Lewis and SUSSMAN, Gerald Jay, 1978. **The Art of the Interpreter** or the Modularity Complex (Parts Zero, One, and Two). Online. MASSACHUSETTS INST OF TECH CAMBRIDGE ARTIFICIAL INTELLIGENCE LAB. [Accessed 15 June 2022]. Available from: https://apps.dtic.mil/sti/citations/ADA062925 , [https://apps.dtic.mil/sti/pdfs/ADA062925.pdf pdf]\n"
    },
    {
      "type": "markdown",
      "id": "312502f2f69bcbb5",
      "text": "> We examine the effects of various language design decisions on the programming styles available to a user of the language, with particular emphasis on the ability to incrementally construct modular systems. At each step we exhibit an interactive meta-circular interpreter for the language under consideration. Each new interpreter is the result of an incremental change to a previous interpreter. We explore the consequences of various variable binding disciplines and the introduction of side effects. We find that dynamic scoping is unsuitable for constructing procedural abstractions, but has another role as an agent of modularity, being a structured form of side effect. More general side effects are also found to be necessary to promote modular style. We find that the notion of side effect and the notion of equality object identity are mutually constraining to define one is to define the other. The interpreters we exhibit are all written in a simple dialect of LISP, and all implement LISP-like languages. A subset of these interpreters constitute a partial historical reconstruction of the actual evolution of LISP. \n"
    },
    {
      "type": "paragraph",
      "id": "678b5d13ebe31826",
      "text": "⇒ [[Modularity]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "The Art of the Interpreter",
        "story": []
      },
      "date": 1655282586415
    },
    {
      "id": "8e588a4f6b28ad1c",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "8e588a4f6b28ad1c",
        "text": "– https://apps.dtic.mil/sti/citations/ADA062925\n\nSTEELE, Guy Lewis and SUSSMAN, Gerald Jay, 1978. [[The Art of the Interpreter]] or the Modularity Complex (Parts Zero, One, and Two). Online. MASSACHUSETTS INST OF TECH CAMBRIDGE ARTIFICIAL INTELLIGENCE LAB. [Accessed 15 June 2022]. Available from: https://apps.dtic.mil/sti/citations/ADA062925\n> We examine the effects of various language design decisions on the programming styles available to a user of the language, with particular emphasis on the ability to incrementally construct modular systems. At each step we exhibit an interactive meta-circular interpreter for the language under consideration. Each new interpreter is the result of an incremental change to a previous interpreter. We explore the consequences of various variable binding disciplines and the introduction of side effects. We find that dynamic scoping is unsuitable for constructing procedural abstractions, but has another role as an agent of modularity, being a structured form of side effect. More general side effects are also found to be necessary to promote modular style. We find that the notion of side effect and the notion of equality object identity are mutually constraining to define one is to define the other. The interpreters we exhibit are all written in a simple dialect of LISP, and all implement LISP-like languages. A subset of these interpreters constitute a partial historical reconstruction of the actual evolution of LISP. \n"
      },
      "date": 1655282589516
    },
    {
      "type": "edit",
      "id": "8e588a4f6b28ad1c",
      "item": {
        "type": "markdown",
        "id": "8e588a4f6b28ad1c",
        "text": "Ward via [[matrix]] […] also studied The Art of the Interpreter which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible.\n\nSTEELE, Guy Lewis and SUSSMAN, Gerald Jay, 1978. [[The Art of the Interpreter]] or the Modularity Complex (Parts Zero, One, and Two). Online. MASSACHUSETTS INST OF TECH CAMBRIDGE ARTIFICIAL INTELLIGENCE LAB. [Accessed 15 June 2022]. Available from: https://apps.dtic.mil/sti/citations/ADA062925\n> We examine the effects of various language design decisions on the programming styles available to a user of the language, with particular emphasis on the ability to incrementally construct modular systems. At each step we exhibit an interactive meta-circular interpreter for the language under consideration. Each new interpreter is the result of an incremental change to a previous interpreter. We explore the consequences of various variable binding disciplines and the introduction of side effects. We find that dynamic scoping is unsuitable for constructing procedural abstractions, but has another role as an agent of modularity, being a structured form of side effect. More general side effects are also found to be necessary to promote modular style. We find that the notion of side effect and the notion of equality object identity are mutually constraining to define one is to define the other. The interpreters we exhibit are all written in a simple dialect of LISP, and all implement LISP-like languages. A subset of these interpreters constitute a partial historical reconstruction of the actual evolution of LISP. \n"
      },
      "date": 1655282669732
    },
    {
      "type": "edit",
      "id": "8e588a4f6b28ad1c",
      "item": {
        "type": "markdown",
        "id": "8e588a4f6b28ad1c",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522690614487aUvCE:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] […] also studied The Art of the Interpreter which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible.\n\nSTEELE, Guy Lewis and SUSSMAN, Gerald Jay, 1978. [[The Art of the Interpreter]] or the Modularity Complex (Parts Zero, One, and Two). Online. MASSACHUSETTS INST OF TECH CAMBRIDGE ARTIFICIAL INTELLIGENCE LAB. [Accessed 15 June 2022]. Available from: https://apps.dtic.mil/sti/citations/ADA062925\n> We examine the effects of various language design decisions on the programming styles available to a user of the language, with particular emphasis on the ability to incrementally construct modular systems. At each step we exhibit an interactive meta-circular interpreter for the language under consideration. Each new interpreter is the result of an incremental change to a previous interpreter. We explore the consequences of various variable binding disciplines and the introduction of side effects. We find that dynamic scoping is unsuitable for constructing procedural abstractions, but has another role as an agent of modularity, being a structured form of side effect. More general side effects are also found to be necessary to promote modular style. We find that the notion of side effect and the notion of equality object identity are mutually constraining to define one is to define the other. The interpreters we exhibit are all written in a simple dialect of LISP, and all implement LISP-like languages. A subset of these interpreters constitute a partial historical reconstruction of the actual evolution of LISP. \n"
      },
      "date": 1655282705650
    },
    {
      "type": "edit",
      "id": "8e588a4f6b28ad1c",
      "item": {
        "type": "markdown",
        "id": "8e588a4f6b28ad1c",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522690614487aUvCE:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] […] also studied *The Art of the Interpreter* which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible.\n\nSTEELE, Guy Lewis and SUSSMAN, Gerald Jay, 1978. [[The Art of the Interpreter]] or the Modularity Complex (Parts Zero, One, and Two). Online. MASSACHUSETTS INST OF TECH CAMBRIDGE ARTIFICIAL INTELLIGENCE LAB. [Accessed 15 June 2022]. Available from: https://apps.dtic.mil/sti/citations/ADA062925\n> We examine the effects of various language design decisions on the programming styles available to a user of the language, with particular emphasis on the ability to incrementally construct modular systems. At each step we exhibit an interactive meta-circular interpreter for the language under consideration. Each new interpreter is the result of an incremental change to a previous interpreter. We explore the consequences of various variable binding disciplines and the introduction of side effects. We find that dynamic scoping is unsuitable for constructing procedural abstractions, but has another role as an agent of modularity, being a structured form of side effect. More general side effects are also found to be necessary to promote modular style. We find that the notion of side effect and the notion of equality object identity are mutually constraining to define one is to define the other. The interpreters we exhibit are all written in a simple dialect of LISP, and all implement LISP-like languages. A subset of these interpreters constitute a partial historical reconstruction of the actual evolution of LISP. \n"
      },
      "date": 1655282725756
    },
    {
      "type": "edit",
      "id": "8e588a4f6b28ad1c",
      "item": {
        "type": "markdown",
        "id": "8e588a4f6b28ad1c",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522690614487aUvCE:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] […] also studied *The Art of the Interpreter* which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible.\n"
      },
      "date": 1655282823160
    },
    {
      "type": "add",
      "id": "d90957e56d769780",
      "item": {
        "type": "markdown",
        "id": "d90957e56d769780",
        "text": "\nSTEELE, Guy Lewis and SUSSMAN, Gerald Jay, 1978. [[The Art of the Interpreter]] or the Modularity Complex (Parts Zero, One, and Two). Online. MASSACHUSETTS INST OF TECH CAMBRIDGE ARTIFICIAL INTELLIGENCE LAB. [Accessed 15 June 2022]. Available from: https://apps.dtic.mil/sti/citations/ADA062925\n"
      },
      "after": "8e588a4f6b28ad1c",
      "date": 1655282828738
    },
    {
      "type": "add",
      "id": "312502f2f69bcbb5",
      "item": {
        "type": "markdown",
        "id": "312502f2f69bcbb5",
        "text": "> We examine the effects of various language design decisions on the programming styles available to a user of the language, with particular emphasis on the ability to incrementally construct modular systems. At each step we exhibit an interactive meta-circular interpreter for the language under consideration. Each new interpreter is the result of an incremental change to a previous interpreter. We explore the consequences of various variable binding disciplines and the introduction of side effects. We find that dynamic scoping is unsuitable for constructing procedural abstractions, but has another role as an agent of modularity, being a structured form of side effect. More general side effects are also found to be necessary to promote modular style. We find that the notion of side effect and the notion of equality object identity are mutually constraining to define one is to define the other. The interpreters we exhibit are all written in a simple dialect of LISP, and all implement LISP-like languages. A subset of these interpreters constitute a partial historical reconstruction of the actual evolution of LISP. \n"
      },
      "after": "d90957e56d769780",
      "date": 1655282830535
    },
    {
      "type": "edit",
      "id": "d90957e56d769780",
      "item": {
        "type": "markdown",
        "id": "d90957e56d769780",
        "text": "STEELE, Guy Lewis and SUSSMAN, Gerald Jay, 1978. [[The Art of the Interpreter]] or the Modularity Complex (Parts Zero, One, and Two). Online. MASSACHUSETTS INST OF TECH CAMBRIDGE ARTIFICIAL INTELLIGENCE LAB. [Accessed 15 June 2022]. Available from: https://apps.dtic.mil/sti/citations/ADA062925 , [https://apps.dtic.mil/sti/pdfs/ADA062925.pdf pdf]\n"
      },
      "date": 1655282842912
    },
    {
      "type": "edit",
      "id": "8e588a4f6b28ad1c",
      "item": {
        "type": "markdown",
        "id": "8e588a4f6b28ad1c",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522690614487aUvCE:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] […] also studied *The Art of the Interpreter* which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible. (Context: [[Mixins]])\n"
      },
      "date": 1655282975452
    },
    {
      "item": {
        "type": "factory",
        "id": "678b5d13ebe31826"
      },
      "id": "678b5d13ebe31826",
      "type": "add",
      "after": "312502f2f69bcbb5",
      "date": 1655288062969
    },
    {
      "type": "edit",
      "id": "678b5d13ebe31826",
      "item": {
        "type": "paragraph",
        "id": "678b5d13ebe31826",
        "text": "⇒ [[Modularity]]"
      },
      "date": 1655288078981
    },
    {
      "type": "edit",
      "id": "d90957e56d769780",
      "item": {
        "type": "markdown",
        "id": "d90957e56d769780",
        "text": "STEELE, Guy Lewis and SUSSMAN, Gerald Jay, 1978. **The Art of the Interpreter** or the Modularity Complex (Parts Zero, One, and Two). Online. MASSACHUSETTS INST OF TECH CAMBRIDGE ARTIFICIAL INTELLIGENCE LAB. [Accessed 15 June 2022]. Available from: https://apps.dtic.mil/sti/citations/ADA062925 , [https://apps.dtic.mil/sti/pdfs/ADA062925.pdf pdf]\n"
      },
      "date": 1662263104449
    }
  ]
}