{
  "title": "2022-10-22",
  "story": [
    {
      "type": "reference",
      "id": "3e516cac4dc43226",
      "site": "wellspring.fed.wiki",
      "slug": "monadic-consciousness",
      "title": "Monadic Consciousness",
      "text": "Rule number one of complex systems: systems are built by mindsets – patterns of thoughts. In Donella Meadows's book, [https://wtf.tw/ref/meadows.pdf Thinking in Systems] she starts with this quote from Robert Pirsig:"
    },
    {
      "type": "pagefold",
      "id": "06253673dcd46043",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "c4ddedc413e949b5",
      "text": "guille — 2022-05-24 via [https://discord.com/channels/694586717247635488/965416739779248158/978761427227643975 discord]\nThe other day I tried nested several cubes, and make a sort of \"linked list\" so to say. And by moving the head, I was trying to update the nested objects. It ended up being tricky. What I wanted to do, when one element moved, the next one should replace it original position, and so forth. First thing I learned: second element can't just occupy the first one position, because second one use relative coordinates to the parent, not global ones. So, I started passing deltas instead. But then the more I passed the delta to nested object, the faster they moved. And I couldn't figure out why. Same delta applied to each object position, but different velocities.\nAnd I already asked this, but wouldn't make sense to be able to convert \"local\" coords to global coords and viceversa? So if you want to position nested objects in global coordinates that would be possible. Not sure if that's possible right now.\n"
    },
    {
      "type": "paragraph",
      "id": "f5a2314fe278a91a",
      "text": "yoshiki — 25.05.2022\nIs it like the snake game kind of thing? and the movement would be over time, or it is okay to do it in one shot? For the model/actor, there is global and local accessors and you can use them to convert points, for example, but it needs some work. 3D is certainly hard enough already, and not introducing parent/child relationship may help sometimes. Perhaps you can have one \"object\" type card, and you attach a behavior module that does not create a Three.js object but creates a few more cards in the global space (and keep the array of the translations and cards.) Let us call that card \"head\". When head \"moves\", the method would traverse the cards, and assign a new values into those body cards' _translation. From what you described, it sounds like it is nesting each segment of body into its previous segment? That probably is not going to work well.\nyoshiki — 26.05.2022\n@guille Come to think of it, the live map example I posted on show-n-tell has some elements to this. It has basically an invisible card located at 0, 0, 0, and on its pawn side, it creates Three.js spheres and moves them at a regular time interval based on the value it queried from the model state. \n"
    },
    {
      "type": "pagefold",
      "id": "a5c96962f3270621",
      "text": "~"
    },
    {
      "type": "roster",
      "id": "ca29aae68ba7d9bc",
      "text": "found.ward.bay.wiki.org"
    },
    {
      "type": "reference",
      "id": "3f8a788d2467ec7d",
      "site": "found.ward.bay.wiki.org",
      "slug": "cross-game-avatars",
      "title": "Cross-Game Avatars",
      "text": "Ready Player Me is a cross-game avatar platform for the builders, creators and residents of the metaverse. We're on a mission to break down the virtual walls to build a more open and connected metaverse. [https://readyplayer.me/about site]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-10-22",
        "story": []
      },
      "date": 1666451087449
    },
    {
      "item": {
        "type": "factory",
        "id": "6063b66e51e86624"
      },
      "id": "6063b66e51e86624",
      "type": "add",
      "date": 1666451090307
    },
    {
      "type": "edit",
      "id": "6063b66e51e86624",
      "item": {
        "type": "factory",
        "id": "6063b66e51e86624",
        "prompt": "Unexpected Item\nWe can't make sense of the drop.\nTry something else or see [[About Factory Plugin]].",
        "punt": {
          "url": "http://wellspring.fed.wiki/",
          "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:105.0) Gecko/20100101 Firefox/105.0"
        }
      },
      "date": 1666451093938
    },
    {
      "type": "edit",
      "id": "6063b66e51e86624",
      "item": {
        "type": "factory",
        "id": "6063b66e51e86624",
        "prompt": "Unexpected Item\nWe can't make sense of the drop.\nTry something else or see [[About Factory Plugin]].",
        "punt": {
          "url": "http://wellspring.fed.wiki/",
          "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:105.0) Gecko/20100101 Firefox/105.0"
        }
      },
      "date": 1666451123724
    },
    {
      "item": {
        "type": "factory",
        "id": "4e0c8a175f459eaa"
      },
      "id": "4e0c8a175f459eaa",
      "type": "add",
      "after": "6063b66e51e86624",
      "date": 1666451132971
    },
    {
      "type": "edit",
      "id": "4e0c8a175f459eaa",
      "item": {
        "type": "factory",
        "id": "4e0c8a175f459eaa",
        "prompt": "Unexpected Item\nWe can't make sense of the drop.\nTry something else or see [[About Factory Plugin]].",
        "punt": {
          "url": "http://wellspring.fed.wiki/",
          "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:105.0) Gecko/20100101 Firefox/105.0"
        }
      },
      "date": 1666451140617
    },
    {
      "type": "remove",
      "id": "4e0c8a175f459eaa",
      "date": 1666451185550
    },
    {
      "type": "remove",
      "id": "6063b66e51e86624",
      "date": 1666451186936
    },
    {
      "item": {
        "type": "factory",
        "id": "3e516cac4dc43226"
      },
      "id": "3e516cac4dc43226",
      "type": "add",
      "date": 1666451188736
    },
    {
      "type": "edit",
      "id": "3e516cac4dc43226",
      "item": {
        "type": "reference",
        "id": "3e516cac4dc43226",
        "site": "wellspring.fed.wiki",
        "slug": "monadic-consciousness",
        "title": "Monadic Consciousness",
        "text": "Rule number one of complex systems: systems are built by mindsets – patterns of thoughts. In Donella Meadows's book, [https://wtf.tw/ref/meadows.pdf Thinking in Systems] she starts with this quote from Robert Pirsig:"
      },
      "date": 1666451194586
    },
    {
      "item": {
        "type": "factory",
        "id": "c4ddedc413e949b5"
      },
      "id": "c4ddedc413e949b5",
      "type": "add",
      "after": "3e516cac4dc43226",
      "date": 1666456206393
    },
    {
      "type": "edit",
      "id": "c4ddedc413e949b5",
      "item": {
        "type": "paragraph",
        "id": "c4ddedc413e949b5",
        "text": "guille — 24.05.2022\nThe other day I tried nested several cubes, and make a sort of \"linked list\" so to say. And by moving the head, I was trying to update the nested objects. It ended up being tricky. What I wanted to do, when one element moved, the next one should replace it original position, and so forth. First thing I learned: second element can't just occupy the first one position, because second one use relative coordinates to the parent, not global ones. So, I started passing deltas instead. But then the more I passed the delta to nested object, the faster they moved. And I couldn't figure out why. Same delta applied to each object position, but different velocities.\nAnd I already asked this, but wouldn't make sense to be able to convert \"local\" coords to global coords and viceversa? So if you want to position nested objects in global coordinates that would be possible. Not sure if that's possible right now.\n"
      },
      "date": 1666456217692
    },
    {
      "type": "add",
      "id": "f5a2314fe278a91a",
      "item": {
        "type": "paragraph",
        "id": "f5a2314fe278a91a",
        "text": "yoshiki — 25.05.2022\nIs it like the snake game kind of thing? and the movement would be over time, or it is okay to do it in one shot? For the model/actor, there is global and local accessors and you can use them to convert points, for example, but it needs some work. 3D is certainly hard enough already, and not introducing parent/child relationship may help sometimes. Perhaps you can have one \"object\" type card, and you attach a behavior module that does not create a Three.js object but creates a few more cards in the global space (and keep the array of the translations and cards.) Let us call that card \"head\". When head \"moves\", the method would traverse the cards, and assign a new values into those body cards' _translation. From what you described, it sounds like it is nesting each segment of body into its previous segment? That probably is not going to work well.\nyoshiki — 26.05.2022\n@guille Come to think of it, the live map example I posted on show-n-tell has some elements to this. It has basically an invisible card located at 0, 0, 0, and on its pawn side, it creates Three.js spheres and moves them at a regular time interval based on the value it queried from the model state. \n"
      },
      "after": "c4ddedc413e949b5",
      "date": 1666456220882
    },
    {
      "type": "edit",
      "id": "c4ddedc413e949b5",
      "item": {
        "type": "paragraph",
        "id": "c4ddedc413e949b5",
        "text": "guille — 2022-05-24 via [https://discord.com/channels/694586717247635488/965416739779248158/978761427227643975 discord]\nThe other day I tried nested several cubes, and make a sort of \"linked list\" so to say. And by moving the head, I was trying to update the nested objects. It ended up being tricky. What I wanted to do, when one element moved, the next one should replace it original position, and so forth. First thing I learned: second element can't just occupy the first one position, because second one use relative coordinates to the parent, not global ones. So, I started passing deltas instead. But then the more I passed the delta to nested object, the faster they moved. And I couldn't figure out why. Same delta applied to each object position, but different velocities.\nAnd I already asked this, but wouldn't make sense to be able to convert \"local\" coords to global coords and viceversa? So if you want to position nested objects in global coordinates that would be possible. Not sure if that's possible right now.\n"
      },
      "date": 1666456264819
    },
    {
      "item": {
        "type": "factory",
        "id": "06253673dcd46043"
      },
      "id": "06253673dcd46043",
      "type": "add",
      "after": "f5a2314fe278a91a",
      "date": 1666456304721
    },
    {
      "id": "06253673dcd46043",
      "type": "move",
      "order": [
        "3e516cac4dc43226",
        "06253673dcd46043",
        "c4ddedc413e949b5",
        "f5a2314fe278a91a"
      ],
      "date": 1666456308604
    },
    {
      "type": "edit",
      "id": "06253673dcd46043",
      "item": {
        "type": "pagefold",
        "id": "06253673dcd46043",
        "text": "~"
      },
      "date": 1666456311880
    },
    {
      "item": {
        "type": "factory",
        "id": "a5c96962f3270621"
      },
      "id": "a5c96962f3270621",
      "type": "add",
      "after": "f5a2314fe278a91a",
      "date": 1666474761640
    },
    {
      "type": "edit",
      "id": "a5c96962f3270621",
      "item": {
        "type": "pagefold",
        "id": "a5c96962f3270621",
        "text": "~"
      },
      "date": 1666474767155
    },
    {
      "item": {
        "type": "factory",
        "id": "ca29aae68ba7d9bc"
      },
      "id": "ca29aae68ba7d9bc",
      "type": "add",
      "after": "a5c96962f3270621",
      "date": 1666474769839
    },
    {
      "type": "edit",
      "id": "ca29aae68ba7d9bc",
      "item": {
        "type": "roster",
        "id": "ca29aae68ba7d9bc",
        "text": "found.ward.bay.wiki.org"
      },
      "date": 1666475095859
    },
    {
      "item": {
        "type": "factory",
        "id": "3f8a788d2467ec7d"
      },
      "id": "3f8a788d2467ec7d",
      "type": "add",
      "after": "ca29aae68ba7d9bc",
      "date": 1666475135193
    },
    {
      "type": "edit",
      "id": "3f8a788d2467ec7d",
      "item": {
        "type": "reference",
        "id": "3f8a788d2467ec7d",
        "site": "found.ward.bay.wiki.org",
        "slug": "cross-game-avatars",
        "title": "Cross-Game Avatars",
        "text": "Ready Player Me is a cross-game avatar platform for the builders, creators and residents of the metaverse. We're on a mission to break down the virtual walls to build a more open and connected metaverse. [https://readyplayer.me/about site]"
      },
      "date": 1666475138530
    }
  ]
}