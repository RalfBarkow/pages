{
  "title": "Side Effect",
  "story": [
    {
      "type": "html",
      "text": "A [[Side Effect]] is when a computer function causes a non-local change to something other than its inputs and declared output. A benign example would be, say, logging. But according to the proponents of [[Functional Programming]], because side effects are not explicit, they lead to many bugs; for instance, we all know how fragile are programs that rely on particular sequences of function calls to manipulate state. [[Aspect Oriented Programming]], though, embraces the possibility of side effects that \"crosscut\" system concerns (again, logging may be a good example). ",
      "id": "d2be38577540cbf3c4dc061c097841aa"
    },
    {
      "type": "html",
      "text": "\nOne example of this is noted in the [[Mythical Man Month]] ( pg.63 original edition, pg.65 anniversary edition). [[Fred Brooks]] called one type \"curios\" -- side effects of supposedly invalid operations. They ended up considering them as part of the definition when emulating that system.",
      "id": "7cf56f06a83e4c0c88b582f3363731dc"
    },
    {
      "type": "html",
      "text": "\nThere is some pressure to use the more apt terminology '[[Intentional Effect]]' or [[Programming Effect]] to describe results intended by the programmer (such as logging or maintenance of data state).  The meaning of '[[Side Effect]]' is then limited to effects that are unintentional and undesirable.  This would better match the term's use in the general public (e.g. with regards to drugs).",
      "id": "efa6120728b113c62aa1196b09aa05cf"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "13b86ee47316c1464820df80de7cf74a"
    },
    {
      "type": "html",
      "text": "\nHeavy usage of databases could be considered relying on side-effects. This is because databases tend to model real-world nouns one-to-one. If you change the attribute for a person's weight, you are updating the one-to-one model to reflect the person's \"state\". This is a very effective technique and seems to end up being emulated to some extent in most non-trivial applications (see [[Database Not More Global Than Classes]]). Even FP will violate side-effect purity at certain points in practice to serve this idea. It is hard to model the real world if everything is always local. --top",
      "id": "36b058590379c4e760e53185c04efc74"
    },
    {
      "type": "html",
      "text": "<i>Yes, database tables are side effects galore. They are like variables which store different states. This is why they came up with the term [[Rel Var]] since a database table is really like variable that changes over time. FP will violate side effect purity through [[Functional Loop Hole]]s. I've always found the whole functional dogma to be extremely strange... because the whole point of using computers is to have all sorts of side effects. If Functional programmers could get their shit together and actually market functional programming to mean something useful, more people would try it out.  Telling people that state is bad and that side effects are bad, is like telling a person riding a bicycle to stop peddling because peddling causes you to actually go places and do things.. it's the WRONG way to market a product - a bike is supposed to get you places, so you should peddle it. A computer is for storing data, modifying data, retrieving data, writing data - it's full of <b>wonderful</b> side effects. FP purity envy is worse than [[Discipline Envy]].</i>",
      "id": "367e20afa5e2cad7a6ed9790d59a7ca6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "13b86ee47316c1464820df80de7cf74a"
    },
    {
      "type": "html",
      "text": "\nSpyware and things that can get installed while surfing the internet in an insecure browser are a Side Effect. Limiting or making side effects transparent to the user should help solve a number of security issues.",
      "id": "e28aed7c2475f63f8da7090e4c5b419f"
    },
    {
      "type": "html",
      "text": "\nExample: This program wishes to install components X, Y, and Z that will run every time you start your computer, do you wish to allow this?",
      "id": "4296f68ee3a7d0777c32e8bc7530879c"
    },
    {
      "type": "html",
      "text": "\nExample2: This program wishes to email the contents of \"bookmarks.html\" to spambot@xyz.ru, do you wish to allow this?",
      "id": "f780e395b5ecbae70a651b5c9b114151"
    },
    {
      "type": "html",
      "text": "<i>Example3: This program wishes to perform (this perfectly legitimate operation), do you wish to allow this?</i>",
      "id": "731de8ded65111ee17487a00f3532c6b"
    },
    {
      "type": "html",
      "text": "<i>Problem: Frequency of legitimate operations >> Frequency of illegitimate operations, making for a difficult problem; e.g. even if 99.9% of all ops were classified correctly, and 0.01% of all ops are illegitimate, one would be queried for about 10x as many false positives as real positives.  This will cause great frustration (akin to [[Windows Vista]]) and ingrain in many users the habit of allowing operations without reading them (as has been observed in the field).</i>",
      "id": "eb6dc003c4b98d46980466df3b51ef2a"
    },
    {
      "type": "html",
      "text": "\nWhat if we were to allow some form of \"run this carefully\"? kinda option to try things out?",
      "id": "fe0345a68966b949db6bebf544c5bce5"
    },
    {
      "type": "html",
      "text": "<i>You mean to audit software?  That can help, though it still will encounter the same problems seen here.  Also, you'll need to be sure that the spyware can't detect the mode and \"play nice while the cops are watching\".  Some of these problems are handled in the [[Capability Security Model]], in any case - the typical behavior in such cases is to simply reject ALL operations for which capabilities don't exist, but with an [[Power Box]] mechanism, one could call back to the user or appropriate user-agent when permissions are required in order to tweak security policy at runtime.</i>",
      "id": "911598cb117ed2b97ade8d1f728b19e9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "13b86ee47316c1464820df80de7cf74a"
    },
    {
      "type": "html",
      "text": " [[Lava Code]]",
      "id": "d0b2a4787375215f795ccbb718a9fab4"
    },
    {
      "type": "html",
      "text": " [[Errors Become Features]]",
      "id": "e0886ee797689b79641958cd437ff2c2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "13b86ee47316c1464820df80de7cf74a"
    },
    {
      "type": "html",
      "text": "Events that may look like [[Side Effects]] at first might be caused intentionally with technology such as [[Integrated Circuit Transducers]]\n[[Category Jargon]]",
      "id": "2411a748bd293e624534c8b161594f83"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?SideEffect c2.com]",
      "id": "fa8b3fe4bd97a62014f22bec2ed20f97"
    }
  ],
  "journal": [
    {
      "date": 1415881156000,
      "id": "eb032a4aa421d268c4647cd26d935c52",
      "type": "create",
      "item": {
        "title": "Side Effect",
        "story": [
          {
            "type": "html",
            "text": "A [[Side Effect]] is when a computer function causes a non-local change to something other than its inputs and declared output. A benign example would be, say, logging. But according to the proponents of [[Functional Programming]], because side effects are not explicit, they lead to many bugs; for instance, we all know how fragile are programs that rely on particular sequences of function calls to manipulate state. [[Aspect Oriented Programming]], though, embraces the possibility of side effects that \"crosscut\" system concerns (again, logging may be a good example). ",
            "id": "d2be38577540cbf3c4dc061c097841aa"
          },
          {
            "type": "html",
            "text": "\nOne example of this is noted in the [[Mythical Man Month]] ( pg.63 original edition, pg.65 anniversary edition). [[Fred Brooks]] called one type \"curios\" -- side effects of supposedly invalid operations. They ended up considering them as part of the definition when emulating that system.",
            "id": "7cf56f06a83e4c0c88b582f3363731dc"
          },
          {
            "type": "html",
            "text": "\nThere is some pressure to use the more apt terminology '[[Intentional Effect]]' or [[Programming Effect]] to describe results intended by the programmer (such as logging or maintenance of data state).  The meaning of '[[Side Effect]]' is then limited to effects that are unintentional and undesirable.  This would better match the term's use in the general public (e.g. with regards to drugs).",
            "id": "efa6120728b113c62aa1196b09aa05cf"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "13b86ee47316c1464820df80de7cf74a"
          },
          {
            "type": "html",
            "text": "\nHeavy usage of databases could be considered relying on side-effects. This is because databases tend to model real-world nouns one-to-one. If you change the attribute for a person's weight, you are updating the one-to-one model to reflect the person's \"state\". This is a very effective technique and seems to end up being emulated to some extent in most non-trivial applications (see [[Database Not More Global Than Classes]]). Even FP will violate side-effect purity at certain points in practice to serve this idea. It is hard to model the real world if everything is always local. --top",
            "id": "36b058590379c4e760e53185c04efc74"
          },
          {
            "type": "html",
            "text": "<i>Yes, database tables are side effects galore. They are like variables which store different states. This is why they came up with the term [[Rel Var]] since a database table is really like variable that changes over time. FP will violate side effect purity through [[Functional Loop Hole]]s. I've always found the whole functional dogma to be extremely strange... because the whole point of using computers is to have all sorts of side effects. If Functional programmers could get their shit together and actually market functional programming to mean something useful, more people would try it out.  Telling people that state is bad and that side effects are bad, is like telling a person riding a bicycle to stop peddling because peddling causes you to actually go places and do things.. it's the WRONG way to market a product - a bike is supposed to get you places, so you should peddle it. A computer is for storing data, modifying data, retrieving data, writing data - it's full of <b>wonderful</b> side effects. FP purity envy is worse than [[Discipline Envy]].</i>",
            "id": "367e20afa5e2cad7a6ed9790d59a7ca6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "13b86ee47316c1464820df80de7cf74a"
          },
          {
            "type": "html",
            "text": "\nSpyware and things that can get installed while surfing the internet in an insecure browser are a Side Effect. Limiting or making side effects transparent to the user should help solve a number of security issues.",
            "id": "e28aed7c2475f63f8da7090e4c5b419f"
          },
          {
            "type": "html",
            "text": "\nExample: This program wishes to install components X, Y, and Z that will run every time you start your computer, do you wish to allow this?",
            "id": "4296f68ee3a7d0777c32e8bc7530879c"
          },
          {
            "type": "html",
            "text": "\nExample2: This program wishes to email the contents of \"bookmarks.html\" to spambot@xyz.ru, do you wish to allow this?",
            "id": "f780e395b5ecbae70a651b5c9b114151"
          },
          {
            "type": "html",
            "text": "<i>Example3: This program wishes to perform (this perfectly legitimate operation), do you wish to allow this?</i>",
            "id": "731de8ded65111ee17487a00f3532c6b"
          },
          {
            "type": "html",
            "text": "<i>Problem: Frequency of legitimate operations >> Frequency of illegitimate operations, making for a difficult problem; e.g. even if 99.9% of all ops were classified correctly, and 0.01% of all ops are illegitimate, one would be queried for about 10x as many false positives as real positives.  This will cause great frustration (akin to [[Windows Vista]]) and ingrain in many users the habit of allowing operations without reading them (as has been observed in the field).</i>",
            "id": "eb6dc003c4b98d46980466df3b51ef2a"
          },
          {
            "type": "html",
            "text": "\nWhat if we were to allow some form of \"run this carefully\"? kinda option to try things out?",
            "id": "fe0345a68966b949db6bebf544c5bce5"
          },
          {
            "type": "html",
            "text": "<i>You mean to audit software?  That can help, though it still will encounter the same problems seen here.  Also, you'll need to be sure that the spyware can't detect the mode and \"play nice while the cops are watching\".  Some of these problems are handled in the [[Capability Security Model]], in any case - the typical behavior in such cases is to simply reject ALL operations for which capabilities don't exist, but with an [[Power Box]] mechanism, one could call back to the user or appropriate user-agent when permissions are required in order to tweak security policy at runtime.</i>",
            "id": "911598cb117ed2b97ade8d1f728b19e9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "13b86ee47316c1464820df80de7cf74a"
          },
          {
            "type": "html",
            "text": " [[Lava Code]]",
            "id": "d0b2a4787375215f795ccbb718a9fab4"
          },
          {
            "type": "html",
            "text": " [[Errors Become Features]]",
            "id": "e0886ee797689b79641958cd437ff2c2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "13b86ee47316c1464820df80de7cf74a"
          },
          {
            "type": "html",
            "text": "Events that may look like [[Side Effects]] at first might be caused intentionally with technology such as [[Integrated Circuit Transducers]]\n[[Category Jargon]]",
            "id": "2411a748bd293e624534c8b161594f83"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?SideEffect c2.com]",
            "id": "fa8b3fe4bd97a62014f22bec2ed20f97"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707907633965
    }
  ]
}