{
  "title": "Quildreen Motta",
  "story": [
    {
      "type": "reference",
      "id": "d2be10567a5a402d",
      "site": "localhost:3000",
      "slug": "objects-as-behaviour",
      "title": "Objects as Behaviour",
      "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see [[Objects as Behaviour]]."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Quildreen Motta",
        "story": []
      },
      "date": 1703855316474
    },
    {
      "item": {
        "type": "factory",
        "id": "d2be10567a5a402d"
      },
      "id": "d2be10567a5a402d",
      "type": "add",
      "date": 1703855318024
    },
    {
      "type": "edit",
      "id": "d2be10567a5a402d",
      "item": {
        "type": "reference",
        "id": "d2be10567a5a402d",
        "site": "localhost:3000",
        "slug": "objects-as-behaviour",
        "title": "Objects as Behaviour",
        "text": "The other simplification that type systems use is “[[Structure]]”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see [[Objects as Behaviour]]."
      },
      "date": 1703855320964
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703855752849
    }
  ]
}