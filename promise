{
  "title": "Promise",
  "story": [
    {
      "type": "reference",
      "id": "b1cd5873ffb2494a",
      "site": "ward.asia.wiki.org",
      "slug": "promise-pages-for-links",
      "title": "Promise Pages for Links",
      "text": "Browsing works as well as it does because the browser overlaps many requests. This turns out to be especially true for the dynamic diagrams recently added via algorithmic markup in Graphviz plugin. Our goal has always been to explore a region of the wiki by following all of the links on a page at once. We've now enabled this mechanism with a deceptively small code change."
    },
    {
      "type": "paragraph",
      "id": "28c64b96b52e7f7f",
      "text": "The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value. [https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise page]"
    },
    {
      "type": "paragraph",
      "id": "3b01c1f8650cc22a",
      "text": "Web Workers API"
    },
    {
      "type": "paragraph",
      "id": "96f87be493ee6aa2",
      "text": "Graceful asynchronous programming with Promises [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises page]"
    },
    {
      "type": "markdown",
      "id": "b6c3e98c3b90c582",
      "text": "> Promises are a comparatively new feature of the JavaScript language that allow you to defer further actions until after a previous action has completed, or respond to its failure. This is useful for setting up a sequence of async operations to work correctly. This article shows you how promises work, how you'll see them in use with web APIs, and how to write your own."
    },
    {
      "type": "paragraph",
      "id": "6b6c6ba1c6b63388",
      "text": "Working with async UI state in an Elm like architecture. [https://medium.com/@webPapaya/working-with-async-ui-state-in-an-elm-like-architecture-b473af493d6 page]"
    },
    {
      "type": "markdown",
      "id": "525fdace43123a89",
      "text": "> As actions could trigger a UI change (eg. show a loading spinner) we decided that all actions return promises. Synchronous actions also return promises as we want to keep a consistent interface."
    },
    {
      "type": "reference",
      "id": "e1dbd92b5984c017",
      "site": "wiki.ralfbarkow.ch",
      "slug": "15-ps",
      "title": "15 Ps",
      "text": "From sensation to sale and lifecycle, there is a latent yet immutable process or system for creating products and services."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Promise",
        "story": []
      },
      "date": 1638303876906
    },
    {
      "item": {
        "type": "factory",
        "id": "e1dbd92b5984c017"
      },
      "id": "e1dbd92b5984c017",
      "type": "add",
      "date": 1638303906045
    },
    {
      "type": "edit",
      "id": "e1dbd92b5984c017",
      "item": {
        "type": "reference",
        "id": "e1dbd92b5984c017",
        "site": "wiki.ralfbarkow.ch",
        "slug": "15-ps",
        "title": "15 Ps",
        "text": "From sensation to sale and lifecycle, there is a latent yet immutable process or system for creating products and services."
      },
      "date": 1638303912830
    },
    {
      "item": {
        "type": "factory",
        "id": "6b6c6ba1c6b63388"
      },
      "id": "6b6c6ba1c6b63388",
      "type": "add",
      "after": "e1dbd92b5984c017",
      "date": 1638303968497
    },
    {
      "type": "edit",
      "id": "6b6c6ba1c6b63388",
      "item": {
        "type": "paragraph",
        "id": "6b6c6ba1c6b63388",
        "text": "Working with async UI state in an Elm like architecture"
      },
      "date": 1638303971661
    },
    {
      "id": "6b6c6ba1c6b63388",
      "type": "move",
      "order": [
        "6b6c6ba1c6b63388",
        "e1dbd92b5984c017"
      ],
      "date": 1638303974169
    },
    {
      "type": "edit",
      "id": "6b6c6ba1c6b63388",
      "item": {
        "type": "paragraph",
        "id": "6b6c6ba1c6b63388",
        "text": "Working with async UI state in an Elm like architecture [https://medium.com/@webPapaya/working-with-async-ui-state-in-an-elm-like-architecture-b473af493d6 page]"
      },
      "date": 1638303993483
    },
    {
      "type": "edit",
      "id": "6b6c6ba1c6b63388",
      "item": {
        "type": "paragraph",
        "id": "6b6c6ba1c6b63388",
        "text": "Working with async UI state in an Elm like architecture: \" [https://medium.com/@webPapaya/working-with-async-ui-state-in-an-elm-like-architecture-b473af493d6 page]"
      },
      "date": 1638304038519
    },
    {
      "type": "edit",
      "id": "6b6c6ba1c6b63388",
      "item": {
        "type": "paragraph",
        "id": "6b6c6ba1c6b63388",
        "text": "Working with async UI state in an Elm like architecture [https://medium.com/@webPapaya/working-with-async-ui-state-in-an-elm-like-architecture-b473af493d6 page]"
      },
      "date": 1638304236162
    },
    {
      "type": "edit",
      "id": "6b6c6ba1c6b63388",
      "item": {
        "type": "paragraph",
        "id": "6b6c6ba1c6b63388",
        "text": "Working with async UI state in an Elm like architecture. [https://medium.com/@webPapaya/working-with-async-ui-state-in-an-elm-like-architecture-b473af493d6 page]"
      },
      "date": 1638304242805
    },
    {
      "type": "add",
      "id": "525fdace43123a89",
      "item": {
        "type": "paragraph",
        "id": "525fdace43123a89",
        "text": "> As actions could trigger a UI change (eg. show a loading spinner) we decided that all actions return promises."
      },
      "after": "6b6c6ba1c6b63388",
      "date": 1638306938876
    },
    {
      "type": "edit",
      "id": "525fdace43123a89",
      "item": {
        "type": "markdown",
        "id": "525fdace43123a89",
        "text": "> As actions could trigger a UI change (eg. show a loading spinner) we decided that all actions return promises."
      },
      "date": 1638306941061
    },
    {
      "type": "edit",
      "id": "525fdace43123a89",
      "item": {
        "type": "markdown",
        "id": "525fdace43123a89",
        "text": "> As actions could trigger a UI change (eg. show a loading spinner) we decided that all actions return promises. Synchronous actions also return promises as we want to keep a consistent interface."
      },
      "date": 1638306978958
    },
    {
      "item": {
        "type": "factory",
        "id": "28c64b96b52e7f7f"
      },
      "id": "28c64b96b52e7f7f",
      "type": "add",
      "after": "e1dbd92b5984c017",
      "date": 1638307553839
    },
    {
      "type": "edit",
      "id": "28c64b96b52e7f7f",
      "item": {
        "type": "paragraph",
        "id": "28c64b96b52e7f7f",
        "text": "Graceful asynchronous programming with Promises"
      },
      "date": 1638307556807
    },
    {
      "id": "28c64b96b52e7f7f",
      "type": "move",
      "order": [
        "28c64b96b52e7f7f",
        "6b6c6ba1c6b63388",
        "525fdace43123a89",
        "e1dbd92b5984c017"
      ],
      "date": 1638307559216
    },
    {
      "type": "edit",
      "id": "28c64b96b52e7f7f",
      "item": {
        "type": "paragraph",
        "id": "28c64b96b52e7f7f",
        "text": "Graceful asynchronous programming with Promises [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises page]"
      },
      "date": 1638307592639
    },
    {
      "type": "add",
      "id": "b6c3e98c3b90c582",
      "item": {
        "type": "paragraph",
        "id": "b6c3e98c3b90c582",
        "text": "> Promises are a comparatively new feature of the JavaScript language that allow you to defer further actions until after a previous action has completed, or respond to its failure. This is useful for setting up a sequence of async operations to work correctly. This article shows you how promises work, how you'll see them in use with web APIs, and how to write your own."
      },
      "after": "28c64b96b52e7f7f",
      "date": 1638307607642
    },
    {
      "type": "edit",
      "id": "b6c3e98c3b90c582",
      "item": {
        "type": "markdown",
        "id": "b6c3e98c3b90c582",
        "text": "> Promises are a comparatively new feature of the JavaScript language that allow you to defer further actions until after a previous action has completed, or respond to its failure. This is useful for setting up a sequence of async operations to work correctly. This article shows you how promises work, how you'll see them in use with web APIs, and how to write your own."
      },
      "date": 1638307609241
    },
    {
      "type": "edit",
      "id": "28c64b96b52e7f7f",
      "item": {
        "type": "paragraph",
        "id": "28c64b96b52e7f7f",
        "text": "https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise"
      },
      "date": 1638308746661
    },
    {
      "type": "add",
      "id": "96f87be493ee6aa2",
      "item": {
        "type": "paragraph",
        "id": "96f87be493ee6aa2",
        "text": "Graceful asynchronous programming with Promises [https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises page]"
      },
      "after": "28c64b96b52e7f7f",
      "date": 1638308749742
    },
    {
      "type": "edit",
      "id": "28c64b96b52e7f7f",
      "item": {
        "type": "paragraph",
        "id": "28c64b96b52e7f7f",
        "text": "[https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise page]"
      },
      "date": 1638308758717
    },
    {
      "type": "edit",
      "id": "28c64b96b52e7f7f",
      "item": {
        "type": "paragraph",
        "id": "28c64b96b52e7f7f",
        "text": "The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value. [https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Promise page]"
      },
      "date": 1638308795553
    },
    {
      "type": "add",
      "id": "3b01c1f8650cc22a",
      "item": {
        "type": "paragraph",
        "id": "3b01c1f8650cc22a",
        "text": "Web Workers API"
      },
      "after": "28c64b96b52e7f7f",
      "date": 1638308838872
    },
    {
      "item": {
        "type": "factory",
        "id": "b1cd5873ffb2494a"
      },
      "id": "b1cd5873ffb2494a",
      "type": "add",
      "after": "e1dbd92b5984c017",
      "date": 1638309024725
    },
    {
      "type": "edit",
      "id": "b1cd5873ffb2494a",
      "item": {
        "type": "reference",
        "id": "b1cd5873ffb2494a",
        "site": "ward.asia.wiki.org",
        "slug": "promise-pages-for-links",
        "title": "Promise Pages for Links",
        "text": "Browsing works as well as it does because the browser overlaps many requests. This turns out to be especially true for the dynamic diagrams recently added via algorithmic markup in Graphviz plugin. Our goal has always been to explore a region of the wiki by following all of the links on a page at once. We've now enabled this mechanism with a deceptively small code change."
      },
      "date": 1638309028378
    },
    {
      "id": "b1cd5873ffb2494a",
      "type": "move",
      "order": [
        "b1cd5873ffb2494a",
        "28c64b96b52e7f7f",
        "3b01c1f8650cc22a",
        "96f87be493ee6aa2",
        "b6c3e98c3b90c582",
        "6b6c6ba1c6b63388",
        "525fdace43123a89",
        "e1dbd92b5984c017"
      ],
      "date": 1638309034746
    }
  ]
}