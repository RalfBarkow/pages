{
  "title": "Dynamic Object Model",
  "story": [
    {
      "type": "html",
      "text": "[[Dynamic Object Model]] is an architectural style \"discovered\" by [[Ralph Johnson]] around 1997. The application of this approach to [[Systems Development]] is more commonly known by the name of [[Adaptive Object Model]]. ",
      "id": "b2e636aa96888408cdb0d11062553c22"
    },
    {
      "type": "html",
      "text": "\nThe word \"discovered\" is used because in his paper, \"Dynamic Object Model\" at [http://st-www.cs.uiuc.edu/users/johnson/papers/dom/DynamicObjectModel.pdf st-www.cs.uiuc.edu], Ralph referred to an earlier instance where another person named related work as a \"Type Instance Pattern\". Ralph himself had referred to this style as \"User Defined Product architecture\" before he published the above paper.",
      "id": "9e18ce6fb34b90180bdef36ddf2c8414"
    },
    {
      "type": "html",
      "text": "\nSome of the other points made in the paper include:",
      "id": "43d0efb7c6ddc5f41c178be8912b4a3f"
    },
    {
      "type": "html",
      "text": " An implementation based on [[Dynamic Object Model]] is interpreted and this is one of the costs of flexibility of \"dynamic objects\". Dynamic objects provide a way of defining new types without additional programming. In a typical implementation \"type defintions\" are stored in databases so new types can be deployed by adding to this database.",
      "id": "7ac7c97e823b104569238ff0ee00498f"
    },
    {
      "type": "html",
      "text": " The use of this architectural style has other costs such as the need to build \"support facilities\" for users of the resulting application. He suggests this is particularly important if the system is to be maintained by end-users and not system/application architects.",
      "id": "e1b987fe3e2a0c345ffda8a21cbb01ea"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "879ff9049759f864a7537cb7da80608d"
    },
    {
      "type": "html",
      "text": "<b>Other notes</b>",
      "id": "7a8abc15dd19dafd029175b545f6d10c"
    },
    {
      "type": "html",
      "text": "\nI have located a [[Semantic Web]] reference to this at [http://www.w3.org/2001/sw/BestPractices/SE/ODSD/20051017/#ref-RTJ-2004 www.w3.org]",
      "id": "f51ca8075cecc74d35f69fda93b6eb21"
    },
    {
      "type": "html",
      "text": "\nSo I am hoping other [[Wiki Reader]]s may find this [[Gang Of Four]] paper of interest.",
      "id": "be2a5e6409a335dfd5c1643a9486ece3"
    },
    {
      "type": "html",
      "text": "-- [[David Liu]] Nov05",
      "id": "de91d38c9df788a9032393c35f8e84b2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "879ff9049759f864a7537cb7da80608d"
    },
    {
      "type": "html",
      "text": "<i>Does this material merit its own entry in the [[Programming Paradigm]] list? Or is it a category within [[Reflective Programming]]? </i>",
      "id": "b8f4d8ea2b926d18ea72d10e2b41edf7"
    },
    {
      "type": "html",
      "text": "<i>Any relationship to [[Table Oriented Programming]]</i>? The paper mentioned a component called \"[[Strategy Pattern]]\" that look like code / algorithm persisted in tables, in manners ?similar to [[Table Oriented Programming]]",
      "id": "12fdac861ecc3b3865755e304ce40447"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "879ff9049759f864a7537cb7da80608d"
    },
    {
      "type": "html",
      "text": "I have this pattern. I used it in 1994 to build an investor demo for Riverton Software, where the client needed to create and then instantiate new kinds of business objects and activities at runtime. Infinium Software, then known as \"Software 2000\", used this pattern to build \"Infinium\", a UI generation tool for their AS400 HR, GL, and other db products. I hadn't looked at it from the perspective Ralph describes - I always thought of it as turning the Smalltalk meta-structure crank one more time around. The use of a separate \"Properties\" object (generally a dictionary) has some very appealing characteristics, especially in a production environment. Dynamically-generated \"member accessors\" can, at least in Smalltalk, turn out to be much faster than you might think. As it turns out, these dictionaries can often be replaced by dynamically-generated Smalltalk classes <b>without</b> using the compiler. The trick is to recognize that ALL of their functionality will be accessor methods, and the resulting [[Compiled Method]]s can be copied from a single template; the required literals can be written in the literal frame by the generation method based on inspection of the slot name. As in many things, once you know what you want to do, and make it work, the performance optimization can then follow. -- [[Tom Stambaugh]]",
      "id": "96a863b839208444b2007e2545168f12"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "879ff9049759f864a7537cb7da80608d"
    },
    {
      "type": "html",
      "text": "\nNot to be confused with modern web browsers' [[Document Object Model]].",
      "id": "ecf8583ad6c3283be4deb5f18bfdf7e9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "879ff9049759f864a7537cb7da80608d"
    },
    {
      "type": "html",
      "text": "[[Category Pattern]]",
      "id": "aabfeae89e85e9e58871c85c11ab97dc"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?DynamicObjectModel c2.com]",
      "id": "f03dddd47a278488724c34b532b26f19"
    }
  ],
  "journal": [
    {
      "date": 1151977100000,
      "id": "d5181403524c8477c77a94d4374608c9",
      "type": "create",
      "item": {
        "title": "Dynamic Object Model",
        "story": [
          {
            "type": "html",
            "text": "[[Dynamic Object Model]] is an architectural style \"discovered\" by [[Ralph Johnson]] around 1997. The application of this approach to [[Systems Development]] is more commonly known by the name of [[Adaptive Object Model]]. ",
            "id": "b2e636aa96888408cdb0d11062553c22"
          },
          {
            "type": "html",
            "text": "\nThe word \"discovered\" is used because in his paper, \"Dynamic Object Model\" at [http://st-www.cs.uiuc.edu/users/johnson/papers/dom/DynamicObjectModel.pdf st-www.cs.uiuc.edu], Ralph referred to an earlier instance where another person named related work as a \"Type Instance Pattern\". Ralph himself had referred to this style as \"User Defined Product architecture\" before he published the above paper.",
            "id": "9e18ce6fb34b90180bdef36ddf2c8414"
          },
          {
            "type": "html",
            "text": "\nSome of the other points made in the paper include:",
            "id": "43d0efb7c6ddc5f41c178be8912b4a3f"
          },
          {
            "type": "html",
            "text": " An implementation based on [[Dynamic Object Model]] is interpreted and this is one of the costs of flexibility of \"dynamic objects\". Dynamic objects provide a way of defining new types without additional programming. In a typical implementation \"type defintions\" are stored in databases so new types can be deployed by adding to this database.",
            "id": "7ac7c97e823b104569238ff0ee00498f"
          },
          {
            "type": "html",
            "text": " The use of this architectural style has other costs such as the need to build \"support facilities\" for users of the resulting application. He suggests this is particularly important if the system is to be maintained by end-users and not system/application architects.",
            "id": "e1b987fe3e2a0c345ffda8a21cbb01ea"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "879ff9049759f864a7537cb7da80608d"
          },
          {
            "type": "html",
            "text": "<b>Other notes</b>",
            "id": "7a8abc15dd19dafd029175b545f6d10c"
          },
          {
            "type": "html",
            "text": "\nI have located a [[Semantic Web]] reference to this at [http://www.w3.org/2001/sw/BestPractices/SE/ODSD/20051017/#ref-RTJ-2004 www.w3.org]",
            "id": "f51ca8075cecc74d35f69fda93b6eb21"
          },
          {
            "type": "html",
            "text": "\nSo I am hoping other [[Wiki Reader]]s may find this [[Gang Of Four]] paper of interest.",
            "id": "be2a5e6409a335dfd5c1643a9486ece3"
          },
          {
            "type": "html",
            "text": "-- [[David Liu]] Nov05",
            "id": "de91d38c9df788a9032393c35f8e84b2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "879ff9049759f864a7537cb7da80608d"
          },
          {
            "type": "html",
            "text": "<i>Does this material merit its own entry in the [[Programming Paradigm]] list? Or is it a category within [[Reflective Programming]]? </i>",
            "id": "b8f4d8ea2b926d18ea72d10e2b41edf7"
          },
          {
            "type": "html",
            "text": "<i>Any relationship to [[Table Oriented Programming]]</i>? The paper mentioned a component called \"[[Strategy Pattern]]\" that look like code / algorithm persisted in tables, in manners ?similar to [[Table Oriented Programming]]",
            "id": "12fdac861ecc3b3865755e304ce40447"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "879ff9049759f864a7537cb7da80608d"
          },
          {
            "type": "html",
            "text": "I have this pattern. I used it in 1994 to build an investor demo for Riverton Software, where the client needed to create and then instantiate new kinds of business objects and activities at runtime. Infinium Software, then known as \"Software 2000\", used this pattern to build \"Infinium\", a UI generation tool for their AS400 HR, GL, and other db products. I hadn't looked at it from the perspective Ralph describes - I always thought of it as turning the Smalltalk meta-structure crank one more time around. The use of a separate \"Properties\" object (generally a dictionary) has some very appealing characteristics, especially in a production environment. Dynamically-generated \"member accessors\" can, at least in Smalltalk, turn out to be much faster than you might think. As it turns out, these dictionaries can often be replaced by dynamically-generated Smalltalk classes <b>without</b> using the compiler. The trick is to recognize that ALL of their functionality will be accessor methods, and the resulting [[Compiled Method]]s can be copied from a single template; the required literals can be written in the literal frame by the generation method based on inspection of the slot name. As in many things, once you know what you want to do, and make it work, the performance optimization can then follow. -- [[Tom Stambaugh]]",
            "id": "96a863b839208444b2007e2545168f12"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "879ff9049759f864a7537cb7da80608d"
          },
          {
            "type": "html",
            "text": "\nNot to be confused with modern web browsers' [[Document Object Model]].",
            "id": "ecf8583ad6c3283be4deb5f18bfdf7e9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "879ff9049759f864a7537cb7da80608d"
          },
          {
            "type": "html",
            "text": "[[Category Pattern]]",
            "id": "aabfeae89e85e9e58871c85c11ab97dc"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?DynamicObjectModel c2.com]",
            "id": "f03dddd47a278488724c34b532b26f19"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1627081123563
    }
  ]
}