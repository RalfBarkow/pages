{
  "title": "Exception",
  "story": [
    {
      "type": "paragraph",
      "id": "8aa1d6a31a7bea50",
      "text": "This is the main class used to implement the exception handling system (EHS).  It plays two distinct roles:  that of the exception, and that of the exception handler.  More specifically, it implements the bulk of the protocols laid out in the ANSI specification - those protocol names are reflected in the message categories.\n\nException is an abstract class.  Instances should neither be created nor trapped.  In most cases, subclasses should inherit from Error or Notification rather than directly from Exception.\n\nExceptions have an optional #messageText that can be set when they are signaled.\nExceptions also have the concept of #signaler, the object that is the subject of the exception.\nThis will be set automatically (to the #receiver), but can be set when the exception is signaled. \n\nIn implementing this EHS, The Fourth Estate Inc. incorporated some ideas and code from [[Craig Latta]]'s EHS.  His insights were crucial in allowing us to implement Context>>valueUninterruptably (and by extension, #ensure: and #ifCurtailed:), and we imported the following methods with little or no modification:\n\nContext>>terminateTo:\nContext>>terminate\nContext>>receiver:\nContext>>answer:\n\nThanks, Craig!"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Exception",
        "story": []
      },
      "date": 1644054065908
    },
    {
      "item": {
        "type": "factory",
        "id": "35b93309035a87f2"
      },
      "id": "35b93309035a87f2",
      "type": "add",
      "date": 1644054068206
    },
    {
      "type": "remove",
      "id": "35b93309035a87f2",
      "date": 1644054070981
    },
    {
      "item": {
        "type": "factory",
        "id": "8aa1d6a31a7bea50"
      },
      "id": "8aa1d6a31a7bea50",
      "type": "add",
      "date": 1644054075056
    },
    {
      "type": "edit",
      "id": "8aa1d6a31a7bea50",
      "item": {
        "type": "paragraph",
        "id": "8aa1d6a31a7bea50",
        "text": "This is the main class used to implement the exception handling system (EHS).  It plays two distinct roles:  that of the exception, and that of the exception handler.  More specifically, it implements the bulk of the protocols laid out in the ANSI specification - those protocol names are reflected in the message categories.\n\nException is an abstract class.  Instances should neither be created nor trapped.  In most cases, subclasses should inherit from Error or Notification rather than directly from Exception.\n\nExceptions have an optional #messageText that can be set when they are signaled.\nExceptions also have the concept of #signaler, the object that is the subject of the exception.\nThis will be set automatically (to the #receiver), but can be set when the exception is signaled. \n\nIn implementing this EHS, The Fourth Estate Inc. incorporated some ideas and code from Craig Latta's EHS.  His insights were crucial in allowing us to implement Context>>valueUninterruptably (and by extension, #ensure: and #ifCurtailed:), and we imported the following methods with little or no modification:\n\nContext>>terminateTo:\nContext>>terminate\nContext>>receiver:\nContext>>answer:\n\nThanks, Craig!"
      },
      "date": 1644054076437
    },
    {
      "type": "edit",
      "id": "8aa1d6a31a7bea50",
      "item": {
        "type": "paragraph",
        "id": "8aa1d6a31a7bea50",
        "text": "This is the main class used to implement the exception handling system (EHS).  It plays two distinct roles:  that of the exception, and that of the exception handler.  More specifically, it implements the bulk of the protocols laid out in the ANSI specification - those protocol names are reflected in the message categories.\n\nException is an abstract class.  Instances should neither be created nor trapped.  In most cases, subclasses should inherit from Error or Notification rather than directly from Exception.\n\nExceptions have an optional #messageText that can be set when they are signaled.\nExceptions also have the concept of #signaler, the object that is the subject of the exception.\nThis will be set automatically (to the #receiver), but can be set when the exception is signaled. \n\nIn implementing this EHS, The Fourth Estate Inc. incorporated some ideas and code from [[Craig Latta]]'s EHS.  His insights were crucial in allowing us to implement Context>>valueUninterruptably (and by extension, #ensure: and #ifCurtailed:), and we imported the following methods with little or no modification:\n\nContext>>terminateTo:\nContext>>terminate\nContext>>receiver:\nContext>>answer:\n\nThanks, Craig!"
      },
      "date": 1644054135421
    }
  ]
}