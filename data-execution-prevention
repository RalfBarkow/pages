{
  "title": "Data Execution Prevention",
  "story": [
    {
      "type": "html",
      "text": "Is a security feature included in modern Microsoft Windows and Unix operating systems that is intended to prevent an application or service from executing code from a non-executable memory region. As a 'security' measure, it mostly hinders [[Smashing The Stack For Fun And Profit]] - i.e. overriding the return-address to jump into code that was injected into the stack.",
      "id": "c6a8d77b9cb6af32127194ee46f78d75"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a00beef7a43ede34f20183eabb4f6296"
    },
    {
      "type": "html",
      "text": "<i>I wonder, since for Lisp code is data and data is code... would it be impossible to implement something like [[Data Execution Prevention]] for Lisp based systems?</i>",
      "id": "0462c41fd65b02621d6a09e0e676205e"
    },
    {
      "type": "html",
      "text": "\nI'd certainly hesitate to call it impossible, and I can think of various approaches (like region-based allocations, or simple tagging) that could be used to 'taint' remote code so that it is given to a higher-security evaluator or rejected by evaluator. ",
      "id": "10f1646fabf6fb90034a96fa881e4ac6"
    },
    {
      "type": "html",
      "text": "\nBut the real question is whether it would be useful.",
      "id": "825c21bbc32ecf7a02817d192c2a5137"
    },
    {
      "type": "html",
      "text": "\nLisp like many languages uses certain \"ambient\" capabilities quite heavily - i.e. code executed on a certain machine gains \"rights\" to the local machine resources (like the filesystem) by virtue of where it is executing rather than where the code came from. That's the real security issue.",
      "id": "4a2a9421f0387a53c14d59d465b653e1"
    },
    {
      "type": "html",
      "text": "\nA reasonable, far more secure alternative would be to control the \"environment\" of evaluation to a greater degree, and to provide stronger encapsulation than Lisp usually provides, in order to confine the rights of 'injected' code. By controlling the environment, the Lisp code could provide exactly the set of \"local\" capabilities the remote code is allowed to have (i.e. perhaps rights to read from certain local hardware, or interact via certain interfaces with other objects).",
      "id": "a74e2acd9edb3544812758452dd10c46"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a00beef7a43ede34f20183eabb4f6296"
    },
    {
      "type": "html",
      "text": "See also [[Lisp Injection]]",
      "id": "1f46c953915fba730b72bc6c7b18d21c"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?DataExecutionPrevention c2.com]",
      "id": "6039427f6456f02d0288729eddbed176"
    }
  ],
  "journal": [
    {
      "date": 1246383678000,
      "id": "023ce7a64dca1c9c84d07feff3f8c37d",
      "type": "create",
      "item": {
        "title": "Data Execution Prevention",
        "story": [
          {
            "type": "html",
            "text": "Is a security feature included in modern Microsoft Windows and Unix operating systems that is intended to prevent an application or service from executing code from a non-executable memory region. As a 'security' measure, it mostly hinders [[Smashing The Stack For Fun And Profit]] - i.e. overriding the return-address to jump into code that was injected into the stack.",
            "id": "c6a8d77b9cb6af32127194ee46f78d75"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a00beef7a43ede34f20183eabb4f6296"
          },
          {
            "type": "html",
            "text": "<i>I wonder, since for Lisp code is data and data is code... would it be impossible to implement something like [[Data Execution Prevention]] for Lisp based systems?</i>",
            "id": "0462c41fd65b02621d6a09e0e676205e"
          },
          {
            "type": "html",
            "text": "\nI'd certainly hesitate to call it impossible, and I can think of various approaches (like region-based allocations, or simple tagging) that could be used to 'taint' remote code so that it is given to a higher-security evaluator or rejected by evaluator. ",
            "id": "10f1646fabf6fb90034a96fa881e4ac6"
          },
          {
            "type": "html",
            "text": "\nBut the real question is whether it would be useful.",
            "id": "825c21bbc32ecf7a02817d192c2a5137"
          },
          {
            "type": "html",
            "text": "\nLisp like many languages uses certain \"ambient\" capabilities quite heavily - i.e. code executed on a certain machine gains \"rights\" to the local machine resources (like the filesystem) by virtue of where it is executing rather than where the code came from. That's the real security issue.",
            "id": "4a2a9421f0387a53c14d59d465b653e1"
          },
          {
            "type": "html",
            "text": "\nA reasonable, far more secure alternative would be to control the \"environment\" of evaluation to a greater degree, and to provide stronger encapsulation than Lisp usually provides, in order to confine the rights of 'injected' code. By controlling the environment, the Lisp code could provide exactly the set of \"local\" capabilities the remote code is allowed to have (i.e. perhaps rights to read from certain local hardware, or interact via certain interfaces with other objects).",
            "id": "a74e2acd9edb3544812758452dd10c46"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a00beef7a43ede34f20183eabb4f6296"
          },
          {
            "type": "html",
            "text": "See also [[Lisp Injection]]",
            "id": "1f46c953915fba730b72bc6c7b18d21c"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?DataExecutionPrevention c2.com]",
            "id": "6039427f6456f02d0288729eddbed176"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "data.sfw.c2.com",
      "date": 1631263516093
    }
  ]
}