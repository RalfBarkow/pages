{
  "title": "Abstraction Chop",
  "story": [
    {
      "type": "html",
      "text": "See also [[Binary Chop]]. ",
      "id": "d9b07337816d7f5edbedd3fefb4558ea"
    },
    {
      "type": "html",
      "text": "\nRegardless of the method (macros, inline code, or [[Query Method]]s), an [[Abstraction Chop]] is a technique for separating conditional logic from the associated code blocks, allowing you to test if [[The Problem]] is in the conditions themselves, or in the code blocks.",
      "id": "8cb84ad2187f29e8590688eeaa0daf27"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b3e69984e93bffcf635258b17e1c17e5"
    },
    {
      "type": "html",
      "text": "\nIn some environments, I've created macros that let me replace complicated conditionals with known good (syntactically) template equivalents, but leaving the inside of the blocks unchanged. For example:",
      "id": "aa633be7affeaee2cc160ace8915e32f"
    },
    {
      "type": "html",
      "text": "\nReplace:",
      "id": "6d00a746b577f263787c8052fae27b29"
    },
    {
      "type": "code",
      "text": " /* pre-example */\n if (a really complicated expression)\n   {\n   /* some code */\n   }\n else\n   {\n   /* some more code */\n   }\n /* post-example */",
      "id": "0fcf09739eebfb3890f8a8c007f471b1"
    },
    {
      "type": "html",
      "text": "\nwith: ",
      "id": "e1e252aae2dad81ddb92dbbdaacb8945"
    },
    {
      "type": "code",
      "text": " /* pre-example */\n if (testA)\n   {\n   /* some code */\n   }\n else\n   {\n   /* some more code */\n   }\n /* post-example */",
      "id": "6ccb0868406af81721169d20b145933c"
    },
    {
      "type": "html",
      "text": "\nPlaying games like this helps to discover whether problems are in the conditional logic or inside the blocks.",
      "id": "76813464a0a599350fbb15d67a7e4929"
    },
    {
      "type": "html",
      "text": "-- [[Tom Stambaugh]]",
      "id": "e5e7a1903a7ecd278fd8509a757b7c25"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b3e69984e93bffcf635258b17e1c17e5"
    },
    {
      "type": "html",
      "text": "I use a very similar (but apparently simpler) approach.  Given Tom's first example code, I might temporarily rewrite it as:",
      "id": "8a4030be9ead351da191a715cc5ad9c7"
    },
    {
      "type": "code",
      "text": " /* pre-example */\n if (   true ||    a really complicated expression)\n   {\n   /* some code */\n   }\n else\n   {\n   /* some more code */\n   }\n /* post-example */",
      "id": "dba197742ff39e8ecc2334d3de3fc59a"
    },
    {
      "type": "html",
      "text": "\nIf I wanted the else clause to execute, of course I'd use \"if( false && ...\".  This kind of stuff works best if you have really fast turn around times. -- [[Curtis Bartley]]",
      "id": "9bbc3b52eeaba457fe9ecf3a15b3979f"
    },
    {
      "type": "html",
      "text": "\nIf compiling is a problem, using an online debugger set the program counter to the appropriate block when stepping through, thus sidestepping the conditional expression. If your conditional expression has side effects, you will naturally have to manually recreate the side effects. Check first that you aren't inlining too aggressively.",
      "id": "5da31a0c09e1f794a7d5a9cdeee7545d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b3e69984e93bffcf635258b17e1c17e5"
    },
    {
      "type": "html",
      "text": "Tom's approach sounds like [[Kent Beck]]'s [[Query Method]] done with \nmacros. The advantage of [[Query Method]] really comes out if \nyou follow a test-driven approach. --[[Kiel Hodges]]",
      "id": "ebba575ad05f13732f8c88768fe3e710"
    },
    {
      "type": "html",
      "text": "\nYou can use [[Query Method]] in C++ and Java. I don't see where creating your own control structures comes in. A [[Query Method]] is essentially a method which returns a boolean for use in other control structures; it's not, say, a method which accepts a block and executes it conditionally somehow. -- [[Dave Harris]]",
      "id": "a80dc0896ff60c3e1582d86f1cff321d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b3e69984e93bffcf635258b17e1c17e5"
    },
    {
      "type": "html",
      "text": "\nA vaguely related coding trick I've sometimes used in C/C++ is...",
      "id": "978153f75c82cf7b4df07cd499cfbab9"
    },
    {
      "type": "code",
      "text": "  static bool bFlag = false;   // set 'true' in debugger\n  if (bFlag)\n     // interesting stuff here...",
      "id": "2cd487368d27963d7938ed96d67ed017"
    },
    {
      "type": "html",
      "text": "\nThen I can \"comment/uncomment\" code during runtime",
      "id": "d2317bd4ec1304e9201f60ef8f4c7250"
    },
    {
      "type": "html",
      "text": "<i>(even in \"fascist\" development frameworks ;-)</i>\nby setting a breakpoint and changing the static value by hand.",
      "id": "624dc24f91c0131976ce379813fc1648"
    },
    {
      "type": "html",
      "text": "-- [[Jeff Grigg]]",
      "id": "a487231847fe2804c7e0f30de2d6da41"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b3e69984e93bffcf635258b17e1c17e5"
    },
    {
      "type": "html",
      "text": "\nMicrosoft's Visual C++ has that pattern in its memory allocator. There's a variable called _crtBreakAlloc, and a counter called _lRequestCurr which is incremented on every call to malloc(). When the two are equal, the allocator breaks into the debugger. You have to use the debugger to set the value of crtBreakAlloc you want it to break on. -- [[Dave Harris]]",
      "id": "1386111706d83f88789cf8c491eeceb7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b3e69984e93bffcf635258b17e1c17e5"
    },
    {
      "type": "html",
      "text": "I encountered a case where I made enough memory allocations to cause _lRequestCurr to wrap around to -1; since _crtBreakAlloc is -1 by default my program halted (it was running in the debugger at the time). So if you see an odd debug break at ",
      "id": "1327715cb5242ed317065ecd2c456934"
    },
    {
      "type": "code",
      "text": "  if (lRequest_ == _crtBreakAlloc)\n      _CrtDebugBreak();",
      "id": "a704ef3155285a6c49ffbe69477ff7fa"
    },
    {
      "type": "html",
      "text": "then this could be why.",
      "id": "7476920b24a0d116ba4e9ae06556582b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b3e69984e93bffcf635258b17e1c17e5"
    },
    {
      "type": "html",
      "text": "[[Category Abstraction]]",
      "id": "9b507c7040b247fce55c0855d35daf0e"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?AbstractionChop c2.com]",
      "id": "06b7ed69cbda8138747c903807d90ff6"
    }
  ],
  "journal": [
    {
      "date": 1160604490000,
      "id": "fe2aa8fcb40f03974e02e34bd099afbc",
      "type": "create",
      "item": {
        "title": "Abstraction Chop",
        "story": [
          {
            "type": "html",
            "text": "See also [[Binary Chop]]. ",
            "id": "d9b07337816d7f5edbedd3fefb4558ea"
          },
          {
            "type": "html",
            "text": "\nRegardless of the method (macros, inline code, or [[Query Method]]s), an [[Abstraction Chop]] is a technique for separating conditional logic from the associated code blocks, allowing you to test if [[The Problem]] is in the conditions themselves, or in the code blocks.",
            "id": "8cb84ad2187f29e8590688eeaa0daf27"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b3e69984e93bffcf635258b17e1c17e5"
          },
          {
            "type": "html",
            "text": "\nIn some environments, I've created macros that let me replace complicated conditionals with known good (syntactically) template equivalents, but leaving the inside of the blocks unchanged. For example:",
            "id": "aa633be7affeaee2cc160ace8915e32f"
          },
          {
            "type": "html",
            "text": "\nReplace:",
            "id": "6d00a746b577f263787c8052fae27b29"
          },
          {
            "type": "code",
            "text": " /* pre-example */\n if (a really complicated expression)\n   {\n   /* some code */\n   }\n else\n   {\n   /* some more code */\n   }\n /* post-example */",
            "id": "0fcf09739eebfb3890f8a8c007f471b1"
          },
          {
            "type": "html",
            "text": "\nwith: ",
            "id": "e1e252aae2dad81ddb92dbbdaacb8945"
          },
          {
            "type": "code",
            "text": " /* pre-example */\n if (testA)\n   {\n   /* some code */\n   }\n else\n   {\n   /* some more code */\n   }\n /* post-example */",
            "id": "6ccb0868406af81721169d20b145933c"
          },
          {
            "type": "html",
            "text": "\nPlaying games like this helps to discover whether problems are in the conditional logic or inside the blocks.",
            "id": "76813464a0a599350fbb15d67a7e4929"
          },
          {
            "type": "html",
            "text": "-- [[Tom Stambaugh]]",
            "id": "e5e7a1903a7ecd278fd8509a757b7c25"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b3e69984e93bffcf635258b17e1c17e5"
          },
          {
            "type": "html",
            "text": "I use a very similar (but apparently simpler) approach.  Given Tom's first example code, I might temporarily rewrite it as:",
            "id": "8a4030be9ead351da191a715cc5ad9c7"
          },
          {
            "type": "code",
            "text": " /* pre-example */\n if (   true ||    a really complicated expression)\n   {\n   /* some code */\n   }\n else\n   {\n   /* some more code */\n   }\n /* post-example */",
            "id": "dba197742ff39e8ecc2334d3de3fc59a"
          },
          {
            "type": "html",
            "text": "\nIf I wanted the else clause to execute, of course I'd use \"if( false && ...\".  This kind of stuff works best if you have really fast turn around times. -- [[Curtis Bartley]]",
            "id": "9bbc3b52eeaba457fe9ecf3a15b3979f"
          },
          {
            "type": "html",
            "text": "\nIf compiling is a problem, using an online debugger set the program counter to the appropriate block when stepping through, thus sidestepping the conditional expression. If your conditional expression has side effects, you will naturally have to manually recreate the side effects. Check first that you aren't inlining too aggressively.",
            "id": "5da31a0c09e1f794a7d5a9cdeee7545d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b3e69984e93bffcf635258b17e1c17e5"
          },
          {
            "type": "html",
            "text": "Tom's approach sounds like [[Kent Beck]]'s [[Query Method]] done with \nmacros. The advantage of [[Query Method]] really comes out if \nyou follow a test-driven approach. --[[Kiel Hodges]]",
            "id": "ebba575ad05f13732f8c88768fe3e710"
          },
          {
            "type": "html",
            "text": "\nYou can use [[Query Method]] in C++ and Java. I don't see where creating your own control structures comes in. A [[Query Method]] is essentially a method which returns a boolean for use in other control structures; it's not, say, a method which accepts a block and executes it conditionally somehow. -- [[Dave Harris]]",
            "id": "a80dc0896ff60c3e1582d86f1cff321d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b3e69984e93bffcf635258b17e1c17e5"
          },
          {
            "type": "html",
            "text": "\nA vaguely related coding trick I've sometimes used in C/C++ is...",
            "id": "978153f75c82cf7b4df07cd499cfbab9"
          },
          {
            "type": "code",
            "text": "  static bool bFlag = false;   // set 'true' in debugger\n  if (bFlag)\n     // interesting stuff here...",
            "id": "2cd487368d27963d7938ed96d67ed017"
          },
          {
            "type": "html",
            "text": "\nThen I can \"comment/uncomment\" code during runtime",
            "id": "d2317bd4ec1304e9201f60ef8f4c7250"
          },
          {
            "type": "html",
            "text": "<i>(even in \"fascist\" development frameworks ;-)</i>\nby setting a breakpoint and changing the static value by hand.",
            "id": "624dc24f91c0131976ce379813fc1648"
          },
          {
            "type": "html",
            "text": "-- [[Jeff Grigg]]",
            "id": "a487231847fe2804c7e0f30de2d6da41"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b3e69984e93bffcf635258b17e1c17e5"
          },
          {
            "type": "html",
            "text": "\nMicrosoft's Visual C++ has that pattern in its memory allocator. There's a variable called _crtBreakAlloc, and a counter called _lRequestCurr which is incremented on every call to malloc(). When the two are equal, the allocator breaks into the debugger. You have to use the debugger to set the value of crtBreakAlloc you want it to break on. -- [[Dave Harris]]",
            "id": "1386111706d83f88789cf8c491eeceb7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b3e69984e93bffcf635258b17e1c17e5"
          },
          {
            "type": "html",
            "text": "I encountered a case where I made enough memory allocations to cause _lRequestCurr to wrap around to -1; since _crtBreakAlloc is -1 by default my program halted (it was running in the debugger at the time). So if you see an odd debug break at ",
            "id": "1327715cb5242ed317065ecd2c456934"
          },
          {
            "type": "code",
            "text": "  if (lRequest_ == _crtBreakAlloc)\n      _CrtDebugBreak();",
            "id": "a704ef3155285a6c49ffbe69477ff7fa"
          },
          {
            "type": "html",
            "text": "then this could be why.",
            "id": "7476920b24a0d116ba4e9ae06556582b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b3e69984e93bffcf635258b17e1c17e5"
          },
          {
            "type": "html",
            "text": "[[Category Abstraction]]",
            "id": "9b507c7040b247fce55c0855d35daf0e"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?AbstractionChop c2.com]",
            "id": "06b7ed69cbda8138747c903807d90ff6"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1705840149127
    }
  ]
}