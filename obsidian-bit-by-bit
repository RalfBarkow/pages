{
  "title": "Obsidian Bit by Bit",
  "story": [
    {
      "type": "paragraph",
      "id": "c4dcf7459f280efb",
      "text": "Robert collected notes as assets with the belief that they could be integrated into wiki workflows with an ad-hoc html script."
    },
    {
      "type": "paragraph",
      "id": "6c468f6d0c88eff3",
      "text": "See [[Integrating Obsidian]]"
    },
    {
      "type": "paragraph",
      "id": "339ceaedf83f6c9c",
      "text": "I offered a list of operations that such a script would need based on my own experience and offered to help with any one in any order."
    },
    {
      "type": "paragraph",
      "id": "7ee8b3d7e7e7325b",
      "text": "I composed the list by imagining the incremental coding which allows each step to be tested as one progressed. I now return to that list to suggest what I would probably try at each step and what I might learn."
    },
    {
      "type": "pagefold",
      "id": "2ce7bc35f360bd41",
      "text": "tips"
    },
    {
      "type": "markdown",
      "id": "11a6c8423d149379",
      "text": "> html <div> that will show the list of files."
    },
    {
      "type": "paragraph",
      "id": "af1c07339743a38a",
      "text": "Most projects start by printing \"Hello World\" to show that some code runs. Start with \"working\" which will reassure some success throughout the life of the script."
    },
    {
      "type": "markdown",
      "id": "25a22bc1eeb5097a",
      "text": "> script that would do the rest."
    },
    {
      "type": "paragraph",
      "id": "709821d06a41c3ab",
      "text": "Watch the frame.js module load in the inspector's network tab. The script tag must say module and be paired with the closing </script> before import works."
    },
    {
      "type": "markdown",
      "id": "051dc6bfde9bbb27",
      "text": "> script gets the list of assets and filters .md files."
    },
    {
      "type": "paragraph",
      "id": "adcbc6da44c0e99e",
      "text": "Console.log(assets) to confirm that we can see our inputs and what fields we will have to work with. The filtering is a nice touch that can be added later."
    },
    {
      "type": "code",
      "id": "4eec07eea6f325fa",
      "text": "const assets = await frame.assets()\n  .filter(asset => asset.file.endsWith('.md')"
    },
    {
      "type": "markdown",
      "id": "30135234a3462df9",
      "text": "> script formats the list as <li> items to click."
    },
    {
      "type": "paragraph",
      "id": "6f9478df36e16dfa",
      "text": "Perfect this formatting as the script progresses. Start simple, maybe just show assets as json."
    },
    {
      "type": "code",
      "id": "8262ba38bd3bc548",
      "text": "window.result.innerTEXT = JSON.stringify(assets)"
    },
    {
      "type": "markdown",
      "id": "b9398e8f85c27bb0",
      "text": "> script click handler reads the asset file."
    },
    {
      "type": "paragraph",
      "id": "b9e4272af838f6e2",
      "text": "Interpret the click based on what is already known of the assets. There are many ways to bind click handlers and many ways to pass information to one. Here we expect all of our choices will inherit the same handler named above and now inserted into the window to be found upon click."
    },
    {
      "type": "code",
      "id": "80fcda74143d6be2",
      "text": "window.doclick = event => {\n  ...\n}"
    },
    {
      "type": "markdown",
      "id": "aa3b096d9d318e4d",
      "text": "> script click handler formats page title and story."
    },
    {
      "type": "paragraph",
      "id": "fee82a304709ba59",
      "text": "Make title and story, the two parts of a new page to be opened in the lineup. Look at the JSON of any page you like to get ideas. The item ids and journal details can be specified if they matter otherwise the next step will create good defaults."
    },
    {
      "type": "markdown",
      "id": "2c74cb17f88b8477",
      "text": "> script click handler opens ghost pages."
    },
    {
      "type": "paragraph",
      "id": "119fbda0f672e29a",
      "text": "Code this to use while perfecting the story and title. The shiftKey allows us to lineup ghost pages as we are making formatting choices."
    },
    {
      "type": "pagefold",
      "id": "0cb3c619bfd289c4",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "29f618e9b7f29e94",
      "text": "Shift-hover over quotes above to scroll to the corresponding code in the original page. This and the cmnd-m hack helped me write this page in order."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Obsidian Bit by Bit",
        "story": []
      },
      "date": 1668351456305
    },
    {
      "item": {
        "type": "factory",
        "id": "c4dcf7459f280efb"
      },
      "id": "c4dcf7459f280efb",
      "type": "add",
      "date": 1668351638499
    },
    {
      "type": "edit",
      "id": "c4dcf7459f280efb",
      "item": {
        "type": "paragraph",
        "id": "c4dcf7459f280efb",
        "text": "Robert collected notes as assets with the belief that they could be integrated into wiki workflows with an ad-hoc html script."
      },
      "date": 1668351899287
    },
    {
      "type": "add",
      "id": "6c468f6d0c88eff3",
      "item": {
        "type": "paragraph",
        "id": "6c468f6d0c88eff3",
        "text": "See [[Integrating Obsidian]]"
      },
      "after": "c4dcf7459f280efb",
      "date": 1668351910693
    },
    {
      "type": "add",
      "id": "339ceaedf83f6c9c",
      "item": {
        "type": "paragraph",
        "id": "339ceaedf83f6c9c",
        "text": "I offered a list of operations that such a script would need based on my own experience and offered to help with any one in any order. I composed the list by imagining the incremental coding which allows each step to be tested as one progressed."
      },
      "after": "6c468f6d0c88eff3",
      "date": 1668352299204
    },
    {
      "type": "edit",
      "id": "339ceaedf83f6c9c",
      "item": {
        "type": "paragraph",
        "id": "339ceaedf83f6c9c",
        "text": "I offered a list of operations that such a script would need based on my own experience and offered to help with any one in any order."
      },
      "date": 1668352314053
    },
    {
      "type": "add",
      "id": "7ee8b3d7e7e7325b",
      "item": {
        "type": "paragraph",
        "id": "7ee8b3d7e7e7325b",
        "text": "I composed the list by imagining the incremental coding which allows each step to be tested as one progressed. I now return to that list to suggest what I would probably try at each step and what I might learn."
      },
      "after": "339ceaedf83f6c9c",
      "date": 1668352375316
    },
    {
      "item": {
        "type": "factory",
        "id": "2ce7bc35f360bd41"
      },
      "id": "2ce7bc35f360bd41",
      "type": "add",
      "after": "7ee8b3d7e7e7325b",
      "date": 1668352667446
    },
    {
      "type": "edit",
      "id": "2ce7bc35f360bd41",
      "item": {
        "type": "pagefold",
        "id": "2ce7bc35f360bd41",
        "text": "tips"
      },
      "date": 1668352674942
    },
    {
      "item": {
        "type": "factory",
        "id": "72e0ddf166866936"
      },
      "id": "72e0ddf166866936",
      "type": "add",
      "after": "2ce7bc35f360bd41",
      "date": 1668352705786
    },
    {
      "type": "edit",
      "id": "72e0ddf166866936",
      "item": {
        "type": "paragraph",
        "id": "72e0ddf166866936",
        "text": "html <div> that will show the list of files.\nscript that would do the rest\nscript gets the list of assets and filters only .md files\nscript formats the list as <li> items that can be clicked\nscript click handler reads the corresponding asset file\nscript click handler formats file contents as title and story\nscript click handler opens the ghost page with title and story"
      },
      "date": 1668352755224
    },
    {
      "type": "remove",
      "id": "72e0ddf166866936",
      "date": 1668352763109
    },
    {
      "id": "11a6c8423d149379",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "11a6c8423d149379",
        "text": "html <div> that will show the list of files."
      },
      "after": "2ce7bc35f360bd41",
      "attribution": {
        "page": "Integrating Obsidian"
      },
      "date": 1668352814230
    },
    {
      "type": "edit",
      "id": "11a6c8423d149379",
      "item": {
        "type": "markdown",
        "id": "11a6c8423d149379",
        "text": "> html <div> that will show the list of files."
      },
      "date": 1668352825402
    },
    {
      "item": {
        "type": "factory",
        "id": "af1c07339743a38a"
      },
      "id": "af1c07339743a38a",
      "type": "add",
      "after": "11a6c8423d149379",
      "date": 1668352862414
    },
    {
      "type": "edit",
      "id": "af1c07339743a38a",
      "item": {
        "type": "paragraph",
        "id": "af1c07339743a38a",
        "text": "Most projects start by printing \"Hello World\" to show that some code runs. When we start with \"working\" which reassures throughout the life of the script."
      },
      "date": 1668353432096
    },
    {
      "id": "25a22bc1eeb5097a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "25a22bc1eeb5097a",
        "text": "script that would do the rest."
      },
      "after": "af1c07339743a38a",
      "attribution": {
        "page": "Integrating Obsidian"
      },
      "date": 1668353456781
    },
    {
      "type": "add",
      "id": "709821d06a41c3ab",
      "item": {
        "type": "paragraph",
        "id": "709821d06a41c3ab",
        "text": "We can watch the frame.js module load in the inspector's network tab. The script tag must say module and be paired with the closing </script> before import works."
      },
      "after": "25a22bc1eeb5097a",
      "date": 1668353773750
    },
    {
      "type": "edit",
      "id": "25a22bc1eeb5097a",
      "item": {
        "type": "markdown",
        "id": "25a22bc1eeb5097a",
        "text": "> script that would do the rest."
      },
      "date": 1668353787630
    },
    {
      "type": "edit",
      "id": "709821d06a41c3ab",
      "item": {
        "type": "paragraph",
        "id": "709821d06a41c3ab",
        "text": "We watch the frame.js module load in the inspector's network tab. The script tag must say module and be paired with the closing </script> before import works."
      },
      "date": 1668353848350
    },
    {
      "type": "edit",
      "id": "af1c07339743a38a",
      "item": {
        "type": "paragraph",
        "id": "af1c07339743a38a",
        "text": "Most projects start by printing \"Hello World\" to show that some code runs. We start with \"working\" which will reassure some success throughout the life of the script."
      },
      "date": 1668353892241
    },
    {
      "type": "edit",
      "id": "af1c07339743a38a",
      "item": {
        "type": "paragraph",
        "id": "af1c07339743a38a",
        "text": "Most projects start by printing \"Hello World\" to show that some code runs. Start with \"working\" which will reassure some success throughout the life of the script."
      },
      "date": 1668353908934
    },
    {
      "type": "edit",
      "id": "709821d06a41c3ab",
      "item": {
        "type": "paragraph",
        "id": "709821d06a41c3ab",
        "text": "Watch the frame.js module load in the inspector's network tab. The script tag must say module and be paired with the closing </script> before import works."
      },
      "date": 1668353920443
    },
    {
      "id": "051dc6bfde9bbb27",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "051dc6bfde9bbb27",
        "text": "script gets the list of assets and filters only .md files."
      },
      "after": "709821d06a41c3ab",
      "attribution": {
        "page": "Integrating Obsidian"
      },
      "date": 1668353937732
    },
    {
      "type": "add",
      "id": "adcbc6da44c0e99e",
      "item": {
        "type": "paragraph",
        "id": "adcbc6da44c0e99e",
        "text": "Console.log(assets) to confirm that we can see our inputs and what fields we will have to work with."
      },
      "after": "051dc6bfde9bbb27",
      "date": 1668354159842
    },
    {
      "type": "edit",
      "id": "051dc6bfde9bbb27",
      "item": {
        "type": "markdown",
        "id": "051dc6bfde9bbb27",
        "text": "> script gets the list of assets and filters only .md files."
      },
      "date": 1668354171390
    },
    {
      "type": "edit",
      "id": "051dc6bfde9bbb27",
      "item": {
        "type": "markdown",
        "id": "051dc6bfde9bbb27",
        "text": "> script gets the list of assets and filters .md files."
      },
      "date": 1668354193379
    },
    {
      "type": "edit",
      "id": "adcbc6da44c0e99e",
      "item": {
        "type": "paragraph",
        "id": "adcbc6da44c0e99e",
        "text": "Console.log(assets) to confirm that we can see our inputs and what fields we will have to work with. The filtering is a nice touch that can be added later."
      },
      "date": 1668354377558
    },
    {
      "id": "4eec07eea6f325fa",
      "type": "add",
      "item": {
        "type": "code",
        "id": "4eec07eea6f325fa",
        "text": "const assets = await frame.assets() "
      },
      "after": "adcbc6da44c0e99e",
      "attribution": {
        "page": "Integrating Obsidian"
      },
      "date": 1668354390764
    },
    {
      "type": "edit",
      "id": "4eec07eea6f325fa",
      "item": {
        "type": "code",
        "id": "4eec07eea6f325fa",
        "text": "const assets = await frame.assets()\n  .filter(asset => asset.file.endsWith('.md')"
      },
      "date": 1668354434273
    },
    {
      "id": "30135234a3462df9",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "30135234a3462df9",
        "text": "script formats the list as <li> items that can be clicked."
      },
      "after": "4eec07eea6f325fa",
      "attribution": {
        "page": "Integrating Obsidian"
      },
      "date": 1668354493776
    },
    {
      "type": "add",
      "id": "6f9478df36e16dfa",
      "item": {
        "type": "paragraph",
        "id": "6f9478df36e16dfa",
        "text": "Perfect this formatting as the script progresses. Start simple, maybe just dump the contents as json."
      },
      "after": "30135234a3462df9",
      "date": 1668354692596
    },
    {
      "id": "8262ba38bd3bc548",
      "type": "add",
      "item": {
        "type": "code",
        "id": "8262ba38bd3bc548",
        "text": "window.result.innerHTML = assets.map(asset =>\n  `<li data-url=\"${asset.url}\">${asset.file}</li>`)"
      },
      "after": "6f9478df36e16dfa",
      "attribution": {
        "page": "Integrating Obsidian"
      },
      "date": 1668354704244
    },
    {
      "type": "edit",
      "id": "8262ba38bd3bc548",
      "item": {
        "type": "code",
        "id": "8262ba38bd3bc548",
        "text": "window.result.innerTEXT = JSON.stringify(assets)"
      },
      "date": 1668354761647
    },
    {
      "type": "edit",
      "id": "6f9478df36e16dfa",
      "item": {
        "type": "paragraph",
        "id": "6f9478df36e16dfa",
        "text": "Perfect this formatting as the script progresses. Start simple, maybe just show assets as json."
      },
      "date": 1668354792135
    },
    {
      "type": "edit",
      "id": "30135234a3462df9",
      "item": {
        "type": "markdown",
        "id": "30135234a3462df9",
        "text": "> script formats the list as <li> items that can be clicked."
      },
      "date": 1668354852059
    },
    {
      "type": "edit",
      "id": "30135234a3462df9",
      "item": {
        "type": "markdown",
        "id": "30135234a3462df9",
        "text": "> script formats the list as <li> items to click."
      },
      "date": 1668354877632
    },
    {
      "id": "b9398e8f85c27bb0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b9398e8f85c27bb0",
        "text": "script click handler reads the corresponding asset file."
      },
      "after": "8262ba38bd3bc548",
      "attribution": {
        "page": "Integrating Obsidian"
      },
      "date": 1668354974009
    },
    {
      "type": "add",
      "id": "b9e4272af838f6e2",
      "item": {
        "type": "paragraph",
        "id": "b9e4272af838f6e2",
        "text": "Interpret the click based on what is already known of the assets. There are many ways to bind click handlers and many ways to pass information to one. Here we expect all of our choices will inherit the same handler named in step one above."
      },
      "after": "b9398e8f85c27bb0",
      "date": 1668355562440
    },
    {
      "id": "80fcda74143d6be2",
      "type": "add",
      "item": {
        "type": "code",
        "id": "80fcda74143d6be2",
        "text": "const text = await fetch(event.target.dataset.url)\n  .then(res => res.text())"
      },
      "after": "b9e4272af838f6e2",
      "attribution": {
        "page": "Integrating Obsidian"
      },
      "date": 1668355611613
    },
    {
      "type": "edit",
      "id": "80fcda74143d6be2",
      "item": {
        "type": "code",
        "id": "80fcda74143d6be2",
        "text": "window.doclick = event => {\n  ...\n}"
      },
      "date": 1668355736478
    },
    {
      "type": "edit",
      "id": "b9e4272af838f6e2",
      "item": {
        "type": "paragraph",
        "id": "b9e4272af838f6e2",
        "text": "Interpret the click based on what is already known of the assets. There are many ways to bind click handlers and many ways to pass information to one. Here we expect all of our choices will inherit the same handler named above and now inserted into the window to be found upon click."
      },
      "date": 1668355810465
    },
    {
      "type": "edit",
      "id": "b9398e8f85c27bb0",
      "item": {
        "type": "markdown",
        "id": "b9398e8f85c27bb0",
        "text": "> script click handler reads the corresponding asset file."
      },
      "date": 1668355838854
    },
    {
      "type": "edit",
      "id": "b9398e8f85c27bb0",
      "item": {
        "type": "markdown",
        "id": "b9398e8f85c27bb0",
        "text": "> script click handler reads the asset file."
      },
      "date": 1668355855998
    },
    {
      "id": "aa3b096d9d318e4d",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "aa3b096d9d318e4d",
        "text": "script click handler formats file contents as title and story."
      },
      "after": "80fcda74143d6be2",
      "attribution": {
        "page": "Integrating Obsidian"
      },
      "date": 1668357504340
    },
    {
      "type": "add",
      "id": "fee82a304709ba59",
      "item": {
        "type": "paragraph",
        "id": "fee82a304709ba59",
        "text": "Make title and story, the two parts of a new page to be opened in the lineup. Look at the JSON of any page you like to get ideas. The item ids and journal details can be specified if they matter otherwise the next step will create good defaults."
      },
      "after": "aa3b096d9d318e4d",
      "date": 1668357915083
    },
    {
      "type": "edit",
      "id": "aa3b096d9d318e4d",
      "item": {
        "type": "markdown",
        "id": "aa3b096d9d318e4d",
        "text": "> script click handler formats file contents as title and story."
      },
      "date": 1668357931182
    },
    {
      "type": "edit",
      "id": "aa3b096d9d318e4d",
      "item": {
        "type": "markdown",
        "id": "aa3b096d9d318e4d",
        "text": "> script click handler formats page title and story."
      },
      "date": 1668357964670
    },
    {
      "id": "2c74cb17f88b8477",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2c74cb17f88b8477",
        "text": "script click handler opens the ghost page with story."
      },
      "after": "fee82a304709ba59",
      "attribution": {
        "page": "Integrating Obsidian"
      },
      "date": 1668357990816
    },
    {
      "type": "add",
      "id": "119fbda0f672e29a",
      "item": {
        "type": "paragraph",
        "id": "119fbda0f672e29a",
        "text": "Code this to use while perfecting the story and title. The shiftKey allows us to lineup ghost pages as we are making formatting choices."
      },
      "after": "2c74cb17f88b8477",
      "date": 1668358185214
    },
    {
      "type": "edit",
      "id": "2c74cb17f88b8477",
      "item": {
        "type": "markdown",
        "id": "2c74cb17f88b8477",
        "text": "script click handler opens the ghost page with story."
      },
      "date": 1668358190759
    },
    {
      "type": "edit",
      "id": "2c74cb17f88b8477",
      "item": {
        "type": "markdown",
        "id": "2c74cb17f88b8477",
        "text": "> script click handler opens the ghost page with story."
      },
      "date": 1668358203157
    },
    {
      "type": "edit",
      "id": "2c74cb17f88b8477",
      "item": {
        "type": "markdown",
        "id": "2c74cb17f88b8477",
        "text": "> script click handler opens ghost pages."
      },
      "date": 1668358231261
    },
    {
      "item": {
        "type": "factory",
        "id": "0cb3c619bfd289c4"
      },
      "id": "0cb3c619bfd289c4",
      "type": "add",
      "after": "119fbda0f672e29a",
      "date": 1668358245091
    },
    {
      "type": "edit",
      "id": "0cb3c619bfd289c4",
      "item": {
        "type": "pagefold",
        "id": "0cb3c619bfd289c4",
        "text": "."
      },
      "date": 1668358252954
    },
    {
      "item": {
        "type": "factory",
        "id": "29f618e9b7f29e94"
      },
      "id": "29f618e9b7f29e94",
      "type": "add",
      "after": "0cb3c619bfd289c4",
      "date": 1668358289973
    },
    {
      "type": "edit",
      "id": "29f618e9b7f29e94",
      "item": {
        "type": "paragraph",
        "id": "29f618e9b7f29e94",
        "text": "Shift-hover over quotes above to scroll to the corresponding code in the original page. This and the cmnd-m hack helped me write this page in order."
      },
      "date": 1668358623498
    },
    {
      "type": "fork",
      "site": "ward.dojo.fed.wiki",
      "date": 1668899031893
    }
  ]
}