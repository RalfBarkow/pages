{
  "title": "Graph Algorithms With Tables",
  "story": [
    {
      "type": "html",
      "text": "If tables are general purpose data structures could someone show me how you'd represent a graph as a table. Then show an implementation of [[Dijkstras Algorithm]] using tables. Then compare it to this page: [http://www.python.org/doc/essays/graphs.html www.python.org] or any other implementation using the standard [[Edge List]] or [[Adjacency Matrix]] representations.",
      "id": "fa976e1584d10c06214f1cca56b61ffb"
    },
    {
      "type": "html",
      "text": "<i>Most graph-like arrangements are done using many-to-many tables. If all the nodes are in the same table, then we only need two columns in our many-to-many table: fromID and toID. Referential integrity and/or triggers can be used to avoid duplicate links.</i>",
      "id": "4370a60172a1905cdf068457a5994904"
    },
    {
      "type": "html",
      "text": "\nThis is beautiful. It perfectly illustrates why people get really angry at top. I asked him to show a solution to a fundamental programming problem: representation of graphs and graph traversal algorithms. I even gave a pointer to a trivial implementation in Python. Instead he hand-waves an answer about many-to-many tables.",
      "id": "be10e5db4348d35bc0b0b6e5dd8db097"
    },
    {
      "type": "html",
      "text": "<i>{{It seems to me that top has answered the question that was asked (\"how would you represent a graph as a table?\"). The mathematical definition of a graph is <b>already</b> expressed as a pair of tables (V, E), since sets and relations are special cases of tables. The (fromID, toID) table mentioned above is E (V is only needed if the graph can have isolated vertices with no edges). The list and matrix representations are two possible representations of tables; they're not specific to graphs (more generally, you can use an n-cube to represent an n-ary relation, which corresponds to a hypergraph).}}</i>",
      "id": "91e3a5c2b1072e66187a372d3206d0cd"
    },
    {
      "type": "html",
      "text": "\nMaybe I'm not communicating well but I'd like to see",
      "id": "b87c47a57608dd341a39cf81f36d5ccd"
    },
    {
      "type": "html",
      "text": " an sql scheme that represents a graph and",
      "id": "711d077104fe1b05c5efe0180a06a51e"
    },
    {
      "type": "html",
      "text": " an sql select statement that retrieves the shortest path between arbitrary nodes using Dijkstra's algorithm.",
      "id": "c6efa2aff7faa706eac884c5cf6b5da9"
    },
    {
      "type": "html",
      "text": "<i>{{SQL is a toy language. You need a more expressive language for this. The Python implementation referenced above is not table-oriented because it depends on a specific edge-list representation for E. It can be made table-oriented by accessing E only using table operations (which is no less efficient, and merges the edge list and adjacency matrix versions of the program).</i>",
      "id": "6f3f06dea1a46fb0fb24762c5d6920a6"
    },
    {
      "type": "html",
      "text": "<i>For example, here's the find_path function so modified, in a hypothetical table-oriented variant of Python:</i>",
      "id": "90ad8eea56aa8b229f7de1cafd3c3215"
    },
    {
      "type": "code",
      "text": "   def find_path(graph, start, end, path=[]):\n      path = path + [start]\n      if start == end:\n          return path\n      if not (start '''in dom'''(graph)):\n          return None\n      for node '''where''' graph(start, node):\n          if node not in path:\n              newpath = find_path(graph, node, end, path)\n              if newpath: return newpath\n      return None",
      "id": "82229d9cb3298546dfd74671b4f19586"
    },
    {
      "type": "html",
      "text": "<i>Here \"a <b>in dom</b>(R)\" tests whether a is in the domain of a relation R, and \"for x <b>where</b> R(a, x)\" loops through the values x such that R(a, x) is true. These are both primitive relational operations. Below I'll use \"R.hintIndexBy(n)\" to declare a hint that a table should be indexed by the n'th field of each tuple.</i>",
      "id": "72f8a8baa1fe858d2de6586a98e52629"
    },
    {
      "type": "html",
      "text": "<i>You may note that the code still uses array syntax. In this hypothetical Python variant, an array would be equivalent to a relation between array indices and values, and the array syntax would be syntactic sugar. -- David Hopwood }}</i>",
      "id": "6fb7a6d63723ecc95347c7f7f383f6f9"
    },
    {
      "type": "html",
      "text": "\nIf tables are general purpose data structures (that are as good as hashmaps/dictionaries) then this should be trivial. Of course past experience suggests that top will not write any SQL in response.",
      "id": "b8b4b9f0af9c1b4f27bbeedef0380745"
    },
    {
      "type": "html",
      "text": "<i>I never claimed that SQL could completely solve/implement the entirety of ALL algorithms. You seem to have some misconceptions about my viewpoints. In actual work (as I encounter it), SQL is often used to \"pre-process\" the information, reducing the workload/amount of procedural code. In some algorithms it may be 90+ percent, in others 10. Whether it can do large amounts with your suggested algorithm, I don't know yet. A possible failure to use it significantly for one particular algorithm does not flatten my claims, for there are jillions of other algorithms. This topic is not really about SQL anyhow.</i>",
      "id": "a542d5320707533c9fa9376b36a794e2"
    },
    {
      "type": "html",
      "text": "\nMy point is that this is an entire branch of fundamental knowledge that is very easy to represent using associative arrays and lists.",
      "id": "056e0e1882c58fea033c7c5cee435e77"
    },
    {
      "type": "html",
      "text": "<i>Same with tables.</i>",
      "id": "5f31795a47dd7f3eadaa20c713ad9fc1"
    },
    {
      "type": "html",
      "text": "\nIt happens to be both a very important branch of knowledge and something that is <i>very</i> hard to represent with tables. The point I'm making is that tables/relational is a nice data structure whereas lists, associative arrays, trees, graphs, stacks, queues are truly <i>general</i> purpose structures that can be used to represent <i>anything</i>. Tables <i>aren't general</i> purpose because they only work for some niches. Lists, associative arrays, etc <i>are general</i> because they work for all niches. ",
      "id": "2b53e613a16d4638c3e6a068f82ff1fa"
    },
    {
      "type": "html",
      "text": "<i>If that is the case, then why is Oracle such a huge company? I don't think any structure is the \"ideal\" for 100% of all niches, and I doubt you do either. Tables can represent anything that the dedicated structures can, and bend better to new requirements.</i>",
      "id": "5aa7dcdee28682c4e86953db23126a41"
    },
    {
      "type": "html",
      "text": "\nSince I suspect you won't be convinced my argument I suggest you try to implement graphs. In the python link I provided above they show that an edge-list representation of a graph is as simple as g = {'nodeKey':['otherNodeA', 'otherNodeB']}.",
      "id": "ed1dd9697bd7dc6f38397232882341f2"
    },
    {
      "type": "html",
      "text": "<i>{{And the corresponding table-oriented code could be as simple as \"g = {'nodeKey' <b>-></b> 'otherNodeA', 'nodeKey' <b>-></b> 'otherNodeB'}\" and \"g.hintIndexBy(1);\" The advantage here is that you can add other indices, or fields, or change to a matrix representation, or add transaction support, or whatever, without changing existing code that uses the graph. A smart implementation could even guess based on usage patterns what the best representation is.}}</i>",
      "id": "998faaa932ef88e7f79211284c766336"
    },
    {
      "type": "html",
      "text": "<i>I don't see link weights in that. Adding link weights to a many-to-many table is trivial.</i>",
      "id": "7470d1127a26166d2d9ee765bfdc3dfe"
    },
    {
      "type": "html",
      "text": "\nAlgorithms to process that are fairly easy. Any equivalent sql schema would be far more complex and awkward.",
      "id": "c9efdd3fbc1ecb1f0c761db0e21a2942"
    },
    {
      "type": "html",
      "text": "<i>{{Why the assumption that using a table-oriented programming model necessarily has anything to do with SQL?}}</i>",
      "id": "177589bfe2f8fec75ca5ce215391afc4"
    },
    {
      "type": "html",
      "text": "\nIn closing: please try to implement this so you'll immediately <i>see</i> the difference.",
      "id": "2afff36872bbeb7fcd9a85110bdbdf25"
    },
    {
      "type": "html",
      "text": "<i>Why not just replace the array references with function calls that use SQL or whatever internally? (Array calls don't allow one to change to a different data container anyhow.) The data can then remain the in tables, where it probably sits anyhow already in practice. Whether SQL can be used to shorten the algorithm, I don't know yet. I don't specialize in shortest-path algorithms; I'll have to study the problem more. This is more like a computer science term paper project rather than the kind of stuff I encounter in the real world. It would be interesting to see you guys use stacks, arrays, etc. to nicely implement this: [http://www.geocities.com/tablizer/chal06.htm www.geocities.com] </i>",
      "id": "84ad45112b6b2751626cfd9dba3755a6"
    },
    {
      "type": "html",
      "text": "\nAaaargh! I can't believe you just did it again. You've hand-waved about link-weights, challenged people to write code (which is here by the way: [http://www.python.org/doc/essays/graphs.html www.python.org]), made an appeal to authority and still didn't answer the question. This is increasingly aggravating but I shall try one more time.",
      "id": "d5f772173ac0e67b8399d33a913f9901"
    },
    {
      "type": "html",
      "text": " Graph theory underlies huge amounts of business applications from Amazon to DHL to genetic sequencing.",
      "id": "6149d480d02cb95ac8efb176a8364276"
    },
    {
      "type": "html",
      "text": " Implementing a graph and traversing it is so trivial that it can be done in a handful of lines of Python.",
      "id": "27e25378b04a338becb53d8a50e0d111"
    },
    {
      "type": "html",
      "text": "Therefore <i>prove</i> that tables are general purpose by showing an SQL schema and some sql that does the equivalent of the Python code linked to. You don't have to be an expert in graph theory. This is first year undergraduate computer science. If the problem can easily be solved using tables then show me how. I'm not asking for miracles just for you to implement trivial functionality. If you can't or won't then say why. Is it because you don't know how to implement algorithms in SQL? Or because you need an English description of the shortest path algorithm? The [[Dijkstras Algorithm]] page now has links to introductory pages that explain it but I'm quite willing to write out the pseudo code if first year comp-sci is too advanced for you.",
      "id": "56a4949e54d47b4e1b0209b87b1b405c"
    },
    {
      "type": "html",
      "text": "[Bad example, because graphs are fairly easily to represent with relational tables. Easier, IMHO, than the python example. Since [[Top Mind]] won't provide code, I will. I won't use SQL because [[Sql Sucks]], but here's the Python example in pseudocode-ish relational model:",
      "id": "0d8a1a0a6f18d722aafccb9a7290beac"
    },
    {
      "type": "html",
      "text": "Table:<br>vertices",
      "id": "9dbc6e1a552a28acb74bc2b877ac9020"
    },
    {
      "type": "code",
      "text": "  node\n  -----\n  A\n  B\n  C\n  D\n  E\n  F",
      "id": "dbcab96d9e863682726c78fefeff7f03"
    },
    {
      "type": "html",
      "text": "Table:<br>edges",
      "id": "603ff96cec2c9144456ad5f3284a5566"
    },
    {
      "type": "code",
      "text": "  from   to   cost\n  ----------------\n  A      B    1\n  A      C    1\n  B      C    1\n  B      D    1\n  C      D    1\n  D      C    1\n  E      F    1\n  F      C    1",
      "id": "b9abfaf5e692cdb5b096682239a30f32"
    },
    {
      "type": "html",
      "text": "Table:<br>current_costs",
      "id": "48500e9868f3eb31b01a4f91fe0b8062"
    },
    {
      "type": "code",
      "text": "  node   cost\n  -----------\n  A      0\n  (initialize all the rest to some variable representing infinity.\n   SUM(edges.cost) should work)",
      "id": "3299b3ca7a1b6c2fe6aeda7ce4ca812e"
    },
    {
      "type": "html",
      "text": "Table:<br>predecessors",
      "id": "6b7a9fe6ac61e4158236e16d6556035a"
    },
    {
      "type": "code",
      "text": "  node    pred\n  ------------\n  (empty to start)",
      "id": "c92e5e2e7c722e413fd47aec04d020fb"
    },
    {
      "type": "html",
      "text": "Table:<br>visited",
      "id": "f16df30c39928b877f40727183fc0dab"
    },
    {
      "type": "code",
      "text": "  node\n  -----\n  (empty to start)",
      "id": "6573307b908718e22c05ee2c61146630"
    },
    {
      "type": "code",
      "text": "  def shortest_paths\n    while count(difference(vertices; visited)) != 0\n      current_cheapest = min(cost; difference(visited; current_costs))\n      insert(visited, current_cheapest)\n      relax(current_cheapest; project(name; select(edges.from = current_cheapest.node;\n                                                   cross-product(edges; current_cheapest))))",
      "id": "7e5bb00d5be5d8f648a5b065a72358f0"
    },
    {
      "type": "code",
      "text": "  def relax(cheapest_node; adjacency_set)\n    adjacent_costs = select(current_costs.node = adjacency_set.node; \n                            cross-product(adjacency_set; current_costs))\n    link_costs = select(cheapest_node.node = edges.from && adjacent_costs.node = edges.to;\n                        cross-product(adjacent_costs; edges; cheapest_node)\n    update(adjacent_costs;\n           adjacent_costs.node = min(adjacent_costs.cost, cheapest_node.cost + link_costs.cost))\n    merge(predecessors; cross-product(rename(cheapest_node.node; pred); \n                                      project(node; select(adjacent_costs.cost \n                                                         < cheapest_node.cost + link_costs.cost))))",
      "id": "1274d55f18227b624d3af8da59288138"
    },
    {
      "type": "html",
      "text": "The start node has to be placed in current_costs with a cost of 0, and then the shortest path to a given node is obtained by following the predecessors table back to the start node. This (most likely) requires a recursive query:",
      "id": "ec7f2b83ea8108ddf2f70fa633fe4aeb"
    },
    {
      "type": "code",
      "text": "  while current_node != start\n    current_node = project(pred; select(node = current_node; predecessors))",
      "id": "c6c0c5736af905d6ce88ce6de84c82f3"
    },
    {
      "type": "html",
      "text": "But we're talking about tables here, not databases, and there's no inherent reason why a recursive query on an in-process table structure would be slower than the equivalent list or map.",
      "id": "27e287405369a191429fc33f22d5e415"
    },
    {
      "type": "html",
      "text": "''Do you have any idea how slow select(edges.from = current_cheapest.node; cross-product(edges; current_cheapest) is going to be in the absence of a query optimizer like a RDBMS has? You assume some magic compiler for python is going to do that...",
      "id": "782ef9e9767bbd506f1e9c8ff18e2a89"
    },
    {
      "type": "html",
      "text": "\nNote that this does <i>more</i> than the Python example, because the Python example neglects the cost of each edge (one of the fundamental parts of Dijkstras algorithm). I included it here to show that the relational model could handle it. It would be good to extend the Python example to include costs, just to see how much code it would take then.",
      "id": "24ad89a6281c320d1afca305b9a8235f"
    },
    {
      "type": "html",
      "text": "\nI've taken a few liberties with the relational operators in the interests of clarity. Min and count, for example, aren't really operators, but everybody knows what they do, and if you need a real equivalent you can see how to do min at [http://www.cs.sfu.ca/CC/354/zaiane/material/notes/Chapter3/node8.html www.cs.sfu.ca]. Also, the relational algebra doesn't have insert and update as operators; I define insert to take a relation and a tuple and insert the tuple into that relation, and update to take a relation and an expression and apply that expression to all fields of that relation. And I use an operation I've termed \"merge\" which updates a tuple if it already exists (setting all fields) and creating it if not. The semantics of these are probably not as clean or well-defined as they should be, but we're trying to express a graph traversal, not extend the relational algebra here.",
      "id": "d6afa13d2c09a850dfbf0a20c422e1a0"
    },
    {
      "type": "html",
      "text": "-- [[Jonathan Tang]]]",
      "id": "03979e137f7a06c4155817b8dba79490"
    },
    {
      "type": "html",
      "text": "[This isn't an academic exercise. I have examples above of multi-billion pound companies that have to solve variations of the above in order to stay in business. This is how Amazon and various logisitics companies work out how to get parcels and other items to recipients in the quickest and cheapest way. Google for Amazon's research department if you're interested in the business applications of graph theory.]",
      "id": "5f0e31f7b7b831790710ecb248160897"
    },
    {
      "type": "html",
      "text": "\nIn my decade-and-a-half in biz apps, I have <b>never encountered</b> a single implementation. I thought such algorithms fall into a category by themselves such that there are dedicated specialists. If I was put in charge of implementing one, I would survey existing algorithms and use what I find. It appears most existing algorithms for such are procedural in nature and not relational. But that does not mean that a relational version cannot or does not exist. More on this below.",
      "id": "ae26cbc600a911cf94f8e0aa7acaa4ea"
    },
    {
      "type": "html",
      "text": "<i>But you must admit that those implementation are neatly sitting somewhere, patiently waiting to impress us all with a timely worldwide Fedex pre-order of an XBOX360 title. I for one think that only the pure of heart are rewarded with having this kind of algorithm implementation as their critical path milestone, while the rest of us mortals battle with some stupid compiler oddities and pointy haired managers.</i> -- [[Leo Bighetti]]",
      "id": "a231b60a70448602a4306d415a476505"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "Jonathan you've illustrated my point. Doing what you did using what is the de facto language for real work with databases is so painful you've had to make up your own notation instead. I also wanted to avoid link weights and stick to the simplest possible type of graph so that we can see just how much work it takes to just to represent a graph using SQL/tables. This way topmind wouldn't be able to weasel out of writing code by claiming that the maths was too hard for him. I suppose I should have learned my lesson by now. He's never provided a working program to anyone ever but he always sounds like he will if you just jump through one more hoop for him.",
      "id": "6965bb9139242e839c026b826cc51b3a"
    },
    {
      "type": "html",
      "text": "\nI think I'll save myself any future aggravation by ignoring him and focusing on Mr Tang's interesting question about the difficulty of adding link-weights to the Python solution (which currently is the only <i>executable</i> implementation anyone has provided).",
      "id": "26dd898a8e0c28c6c654dadd1a576483"
    },
    {
      "type": "html",
      "text": "[\nCode will go here: [http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/119466 aspn.activestate.com]",
      "id": "88a4a6c7aa113652d271375adf6dbfe1"
    },
    {
      "type": "html",
      "text": "\nYou'll note that this solution which someone else already derived from Guido's original implementation requires several different kinds of dedicated data structures. These would all have to be re-implemented using SQL if you were going from the simple version to the complex version. If you had built the simple version in SQl (which you didn't because it was too hard) you would now have to re-write the whole lot again in SQl (which would be even harder). Thus the claim that tables, sql and databases make it easier to change things is shown to be bogus for any domains that require complex algorithms.",
      "id": "5ac7fdf80a48b216406cfe1c629f9ad4"
    },
    {
      "type": "html",
      "text": "]",
      "id": "6da8d3a7a0429a111c7f5c5f534b2713"
    },
    {
      "type": "html",
      "text": "<i>{{ Here is that code modified to be table-oriented, using the same variant of Python as before:</i>",
      "id": "47c572e69bc1e27c032fcd39ca52d494"
    },
    {
      "type": "code",
      "text": "   def Dijkstra(G,start,end=None):\n      \"\"\"\n      Find shortest paths from the start vertex to all\n      vertices nearer than or equal to the end.",
      "id": "7f7fe6f5a6eb9b184d565c8edfb6e8b0"
    },
    {
      "type": "code",
      "text": "      The input graph G is assumed to be modelled as a ternary\n      relation Vertex x Vertex x Length, where (v, w, x) models\n      an edge v -> w with length x.",
      "id": "f988b00ffc2e1f801c2f8848b68c4d6f"
    },
    {
      "type": "code",
      "text": "      Length must be an arithmetic type that can be added to 0\n      and itself. Vertex can be any type.\n      \"\"\"",
      "id": "4c0ec0b568608bbde3c3764518377966"
    },
    {
      "type": "code",
      "text": "      D = {}         # table of final distances\n      P = {}         # table of predecessors\n      Q = {}         # est.dist. of non-final vert.\n      Q.hintIndexBy(1)\n      Q.sortedBy(2)  # Q must remain sorted by the estimated distances\n      Q[start] = 0",
      "id": "bc1670838869e6e8c7d7699b6e9311ba"
    },
    {
      "type": "code",
      "text": "      for v in Q:\n         D[v] = Q[v]\n         if v == end: break",
      "id": "01d65851b7c43a700bc9646b98c09f35"
    },
    {
      "type": "code",
      "text": "         for w, x '''where''' G(v, w, x):\n            vwLength = D[v] + x\n            if w in D:\n               if vwLength < D[w]:\n                  raise ValueError, \"Dijkstra: found better path to already-final vertex\"\n               elif w not in Q or vwLength < Q[w]:\n                  Q[w] = vwLength\n                  P[w] = v",
      "id": "f3c95d8b3e4f503f33e0aa975e4d0b9d"
    },
    {
      "type": "code",
      "text": "      return (D,P)",
      "id": "bc47be93505d5251c4d70198fd058e3f"
    },
    {
      "type": "html",
      "text": "[code for shortestPath unchanged]",
      "id": "efd480350546412715f79127da5cb203"
    },
    {
      "type": "html",
      "text": "<i>Why is this so similar to the original code? Simple: the algorithm is already in an (iterative) table-oriented style; it just needs to be abstracted away from any particular representation of the relation G. Note that the only \"dedicated data structure\" in the original code, a priority dictionary (see [http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/117228 aspn.activestate.com]), has become just a table sorted by its second column and indexed by its first. -- David Hopwood }}</i>",
      "id": "ff3487b76c1bc1f36b030678670a5398"
    },
    {
      "type": "html",
      "text": "[\"Thus the claim that tables, sql and databases make it easier to change things is shown to be bogus for any domains that require complex algorithms.\" I'm not sure about that. Adding link weights involved 2 new tables, and an additional column to edges. It did require that the code itself be rewritten, but that was the case with the Python version too. And if I'd properly factored the code (which is possible in relational algebra, because of algebraic closure, but not in SQL), then large segments of it could probably have been reused.",
      "id": "8c9c309dc92e9cac5c1446ba2540dac2"
    },
    {
      "type": "html",
      "text": "\nRegardless, it's probably best not to argue further until we have a decent (i.e. non-SQL) relational language. Not having executable code allows one to get away with a great deal of fuzzy thinking (as I'm sure you've noticed), so the discussion has a way of going around in circles. The Python version works, which is basically all that matters for an algorithm like this. -- [[Jonathan Tang]]]",
      "id": "5ae6981cdc0a4f308a17ff633732ac48"
    },
    {
      "type": "html",
      "text": "<i>Doing what you did using what is the de facto language for real work with databases is so painful you've had to make up your own notation instead.</i>",
      "id": "d4aa38258efbb7fe679705817edfc3d6"
    },
    {
      "type": "html",
      "text": "\nWould you be more open to relational techniques if it had better implemented languages? Extendable relational languages tend to resemble functional programming I would note. -- top",
      "id": "c0f1ccc0adbfa0b6ea359afe0ab03646"
    },
    {
      "type": "html",
      "text": "<i>Yes. People claim that relational techniques are very expressive but all the actual mainstream implementations as opposed to theoretical papers are hilariously bad. Although I rather like SchemeQL.</i>",
      "id": "7bfded8bdbf237fd17b1b06bb4f998dc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "\nI think we need to divide this up into two issues:",
      "id": "d47f3c11bd3627071ee7003327e7fa37"
    },
    {
      "type": "html",
      "text": " Data Structure: Competing with arrays and lists to do basic storage and retrieval of data.",
      "id": "6309e4163c55494a9bb639b19fd78e89"
    },
    {
      "type": "html",
      "text": " Behavior: Using relational languages to do some or all of the processing.",
      "id": "bf13a846835a4b59e105243da04bd6cb"
    },
    {
      "type": "html",
      "text": "\nI think the first has been clearly established. Tables can easily store graphs. Agreed?",
      "id": "797201fc91c4ea2550803918d9bebe1c"
    },
    {
      "type": "html",
      "text": "\nThe second point I already made, but it has been tossed asided for some reason. I never claimed that SQL or relational languages solve all processing all the time (I am not sure they even should). A possible failure of it to help significantly with this particular algorithm means very little. In actual work, the percentage of the behavior part that SQL solves varies widely. If SQL can't provide significant pre-processing, I simply write procedural code around simple Select statements. To get a better picture of what SQL can solve and can't solve we need more data points. Your example is only one point at best. (Note that I agree with Jonathan that SQL is far from the pinnacle of relational languages.) -- top",
      "id": "9d771271b6a43ebd6be7bc8aeac3bd02"
    },
    {
      "type": "html",
      "text": "[I agree that tables can store graphs. I've done it myself when building content management systems. My point is that if one stays <i>only</i> in the relational/sql model then it becomes very, very, very difficult to express the algorithms that provide useful behaviour (after all data without behaviour is worthless.). Therefore relational isn't sufficient or general purpose because it must always be supplemented by something else. Just like OO isn't sufficient or general purpose because it must always be supplemented by something else. Namely imperative or functional paradigms.]",
      "id": "08f11ef834e3c989fcecbb6d025aa2cd"
    },
    {
      "type": "html",
      "text": "<i>{{ Hear, hear. [[Multiparadigm Language]]s and systems are clearly the right thing. However, if you ignore the bias against OO, I've found some of [[Top Mind]]'s stuff to be helpful in clarifying my understanding of how the [[Relational Model]] fits into multi-paradigm systems. }}</i>",
      "id": "3dd16646ec8f0e2c1f90d9c5bfe6e0a8"
    },
    {
      "type": "html",
      "text": "<i>He's never provided a working program to anyone ever but he always sounds like he will if you just jump through one more hoop for him. </i>",
      "id": "6aa33eee5aa0a8dfff35bf3197dde903"
    },
    {
      "type": "html",
      "text": "\nYou are being a hypocrite. I have been listing examples such as [http://www.geocities.com/tablizer/chal06.htm www.geocities.com] for more than year. Yet you <b>ignore</b> them and then go ahead and make your own. Then when I don't give instant turn-around to your academic-ish example, you accused me of \"ignoring code challenges\". In \"playground-speak\", you ignored my example before I ignored yours. I gave you code to compare first. You finish mine, and <i>then</i> I'll finish yours. Otherwise, I will be tempted to accuse you of creating a different example to distract from the fact that you are afraid of the first one.",
      "id": "7c5983ea325eda5439698e711809898b"
    },
    {
      "type": "html",
      "text": "[This is the first time you've mentioned challenge 6 in this conversation. This discussion emanated from the claim that tables were sufficient and general purpose data structures. My point has always been that tables are not enough. That you need the vast corpus of computer science to do anything useful and that automatically reaching for a relational solution to problems is unwise because no paradigm is always the best solution.]",
      "id": "ba6f96f2d3238f9551693dac1ab16111"
    },
    {
      "type": "html",
      "text": "<b>\"General purpose\" and \"always best solution\" are not necessarily the same thing</b>. General purpose may not even be possible in an absolute sense. See [[General Purpose Programming Language]]. If you take the absolutist version, then if dedicated structures were general purpose, people would not need RDBMS, ever! {That's not what general purpose means. It means that it can be used to solve any problem. Sometimes that means we can always, the computer science community, use dedicated data structures to build a tool (like an RDBMs) to solve pretty much any problem. We use bricks to build walls and use walls to build houses. We don't use walls to build bricks because that kind of [[Abstraction Inversion]] is silly. Remember general purpose is only a starting point. Everything can be built out 1s and 0s but we don't use them directly.}",
      "id": "25ba08c3de248695643bf288ad3f86b3"
    },
    {
      "type": "html",
      "text": "[That's why I created [[When Not To Use Table Oriented Programming]]. That's why [[Jeff Panici]] created [[The Top Challenge]] (which you still haven't replied to).]",
      "id": "16f1e37b29ea2ebdacdfe63a3c852f44"
    },
    {
      "type": "html",
      "text": "\nHave too.",
      "id": "35b62b261f8c655fae2c3838a9f1981e"
    },
    {
      "type": "html",
      "text": "[As for challenge 6. It's a reporting system. I would build it using the reporting tools provided by my database vendor because that's one situation where that's the best solution. I might even consider using RPG.]",
      "id": "9d73b5d3cd42542bcf50b17fadba0a22"
    },
    {
      "type": "html",
      "text": "\nIn practice firms don't use off-the-shelf tools for such because they can't customize them enough, and also because such tools have not provided convenient and flexible web interface yet. Plus, they are expensive. I agree that such example as-is is too limiting. But a company could build on it to get what they want. You can't do that with proprietary code.",
      "id": "b1491f808db9efbc964629cd1defca19"
    },
    {
      "type": "html",
      "text": "[Thing is there's all these different kinds of software out there that aren't reporting systems. The kind of work I and lots of programmers do require sophisticated algorithms and data structures. In short it involves computer <i>science</i>. If you'd ever done any work with data mining, financial analytics or even e-commerce web-apps]",
      "id": "e628cb281fc7a0c6a0423f8b5c2006dd"
    },
    {
      "type": "html",
      "text": "\nI have too. Why not an e-commerce example instead of university lab games?",
      "id": "80b3758940b700d2aa475e94de0136a1"
    },
    {
      "type": "html",
      "text": "[ you'd realize that paradigms, data structures, etc are all necessary because you never know what may come up next. The <i>narrowness</i> of your experience is why you believe so firmly in your particular [[Golden Hammer]].]",
      "id": "c91e48015de3cf43976aa4eb909a4d57"
    },
    {
      "type": "html",
      "text": "\nI have admitted that my experience is limited to a specific niche. \"General purpose\" topic was to explore them under other niches.",
      "id": "4b5f65e1c9de4a4f9ac57fc71879998b"
    },
    {
      "type": "html",
      "text": "[I've looked at your website over the years and you keep proposing the same sorts of problems. I keep finding myself saying: with those criteria I'd use a database. But when people propose problems that would require you to broaden yourself you start name-calling and various other negative behaviours.]",
      "id": "70535b4dda314bcfe8ef1800283624dc"
    },
    {
      "type": "html",
      "text": "\nI have avoided responding to [[Flame Bait]] on many many many occasions here. You guys are no angels. Do I need to document and log your anti-social behavior to convince you? {You mean the way various people have logged your behaviour in the past? Don't you think that might be tempting fate just a little?}",
      "id": "afe8c0fbc637aa8ffb61b2c555343119"
    },
    {
      "type": "html",
      "text": "[How exactly does your MSAccess based db front-end show that tables are general purpose/fundamental/sufficient data-structures? Or that graphs are best represented using tables?]",
      "id": "0db193ba2e02cd7d155985e316da9c1c"
    },
    {
      "type": "html",
      "text": "\nDijkstra was pretty good at such algorithms. It may require a relational-version of Dijkstra's mind to produce an acceptable relational version. I probably could not fathiom a procedural solution either without lots of past experience on such problems. YOU did not come up with the Dijkstra algorithm, so why do you expect me to come up with a relational version? Your \"challenge\" is rigged. <b>Dijkstra did the hard work for you</b>. I don't claim to be as smart as Dijkstra on graph problems, relational nor procedural. A nice relational version is still a possibility, but not likely from me. That does not mean that relational stinks because <b>I couldn't do a procedural (dedicated struc) one quickly either. It is the nature of the problem, not a failing of relational</b>. This appears to be an intimidation ploy. You are comparing smart apples to dumb oranges (WRT graph algs). ",
      "id": "b91d7d7b33980c320f6dfc7f34c35a96"
    },
    {
      "type": "html",
      "text": "{This is exactly my point. I can build software _today_ using existing data structures. You can't.}",
      "id": "cc496507eb4cbf99ba80d8f709f9eaf3"
    },
    {
      "type": "html",
      "text": "\nIt is due to where past research has been, not an <b>in-born fault</b> of relational.",
      "id": "88f2f40bd3a1d4aa167ae52a767f7950"
    },
    {
      "type": "html",
      "text": "{ Instead you have to wait for the 'relational Dijkstra'. Moreover this shows your ignorance of the _nature_ of algorithms. You don't need to invent a new algorithm. All you need to do is _implement_ an algorithm. Do you understand the difference between these things?}",
      "id": "01f4054df90561b5aff954e3d4d8cee8"
    },
    {
      "type": "html",
      "text": "\nYou did not say which form would satisfy you because you seemed to focus more on SQL than the data container. Anyhow, the biggest problem I encounter in implementing that algorithm is figuring out how to read Python (if I mirror that version), and then finding a way to use recursion with tables. Most languages don't support pass-by-value tables. It can be emulated with a stack-like setup, but that gets kind of messy.",
      "id": "bc6e2201df380b9f8dfa75c2223f4fb6"
    },
    {
      "type": "html",
      "text": "[It's tail-recursive. Convert it to a loop. Or look at the pseudocode on the first link on [[Dijkstras Algorithm]], which has an iterative version with external data storage anyway. -jt]",
      "id": "f8f8ce211803651dddd37a4e29c58884"
    },
    {
      "type": "html",
      "text": "[If you were to join an open source project or two and try to build useful non-relational applications you'd learn that whilst databases are often useful they only solve a tiny sliver of the set of problems working programmers have to deal with.]",
      "id": "b23854ce43aa25d58a9838cd546d3513"
    },
    {
      "type": "html",
      "text": "\nI started out in this biz without relational. It sucked. Linked lists, arrays. Yuck! I have found hash maps are useful for quick interface stuff, but I don't store structures with them. {I'm not proposing the replacement of the databases with persistent hashmaps.}",
      "id": "90f14f6a4acf3223e4f4c74126cabdae"
    },
    {
      "type": "html",
      "text": "[You actually have valid ideas about the limitations of OO, hierarchies and the benefits of databases but it all gets clouded by your negative behaviours. I'll sign off by reminding you of Winston Churchill's quip that \"a fanatic is someone who can't change their mind and won't shut up\".]",
      "id": "977b2aa36e84795e0049ac5482b01c9b"
    },
    {
      "type": "html",
      "text": "\nI don't see a lot of open minds around here. This wiki is awash in argument by authority and argument by voting. ",
      "id": "61d2ea92b154bbaa32983d13ffae21e8"
    },
    {
      "type": "html",
      "text": "<i>{{ Voting is pretty uncommon, AFAICS. Anyway no-one takes it seriously. }}</i>",
      "id": "a5082975f1a988addf617937dd02f838"
    },
    {
      "type": "html",
      "text": "<i>You don't see open minds, because the things you suggest are typically ignorant. You ignore established research </i>",
      "id": "0c35f943ce71d006e612e939454ffe2c"
    },
    {
      "type": "html",
      "text": "\nThere is a lot of research on \"how to do X\", but very little objective on how \"why X is better than Y\". FP, OO, and P/R can pretty much solve most problems with the same amount of code and same amount of change-points per change scenarios. None has a clear monopoly. If there is such research, <b>please link to it!</b>",
      "id": "6994d724010644d195fa8997fab7371d"
    },
    {
      "type": "html",
      "text": "<i>If you think all those methodologies are equal, then you really are inexperienced.</i>",
      "id": "d4e1896cec2ee00142067910c5e9dc91"
    },
    {
      "type": "html",
      "text": "<i> and then promote you're own ideas as if you're some kind of ignored unsung genius. You want people to pay attention, then learn how things are done before trying to change them. No scientist would be accepted without following established protocol,  just as no one will listen to a programmer who completely ignores established practices without offering up anything better.</i>",
      "id": "74ebdcd982896b905bec217a8bfb95f2"
    },
    {
      "type": "html",
      "text": "\nProtocol my ass, software engineering is a messy art. See [[Discipline Envy]]. The \"discipline\" is full of fads and argument-by-authority.",
      "id": "8fdcd0485fa852860e8c359e4ff28684"
    },
    {
      "type": "html",
      "text": "<i>Learn to read there genius, that was a metaphor. Established protocol was referring to science, not programming.</i>",
      "id": "0a2af72efb4885838dcfe08a37c6106d"
    },
    {
      "type": "html",
      "text": "<i>You see, even if tables were in process and lightning fast, they would still be horrible for general purpose use in algorithms. The fact that you think tables sprinkled with sql is better than an object specifically built for a task, does nothing but show your inexperience in real programming. I know, I know, that's outside your domain experience, which is my whole point, you don't really know what you're doing.</i>",
      "id": "3842df61b9eed6dad6eeca1132b3597a"
    },
    {
      "type": "html",
      "text": "{Nobody knows everything. One should spend at least about 7 years in a given domain to get a reasonable feel for it and watch changes come and go in it. If a person lives 70 years, working 40 of those, then they can cover only about 5 or 6 domains under ideal timing, and probably 3 under more realistic conditions. Thus, nobody can know everything about every domain.}",
      "id": "586181167c8b910e2de929d1c946bc6f"
    },
    {
      "type": "html",
      "text": "<i>Of course not, which is why you need to listen to what other people who are much better than you tell you. You are  admittedly limited to a small domain, thus you should learn to pay attention to real programmers who are far more experienced than you. Far more experienced programmers constantly tell you that you are wrong, yet you constantly argue with them, and you wonder why no one listens.</i>",
      "id": "3a12e10f968496016e057cff8e163a27"
    },
    {
      "type": "html",
      "text": "\nI will agree that \"general purpose\" is perhaps too wide, if you agree that this example only shows that one person is crappy at graph algorithms (in any paradigm). Deal? -- top",
      "id": "15b6725b51e8afaee7cb3e59ff063bd4"
    },
    {
      "type": "html",
      "text": "\nBut, I still believe in the <b>potential</b> of tables. The world is just not ready for them yet. Your arguments appear to be a form of [[Querty Syndrome]]. -- top",
      "id": "b0adc016a45d2c0c66ff716cd2a63801"
    },
    {
      "type": "html",
      "text": "\nNo, you just think you are smarter than the world, which is why no one listens. Tables are an inferior solution to most problems, that's why they aren't used. ",
      "id": "2c179a3fdad8f044d43ae46746f822cc"
    },
    {
      "type": "html",
      "text": "<i>You have not demonstrated it for \"most problems\". Only one, and it is mostly [[Qwerty Syndrome]], not an in-born fault of tables. And, it is not me that is \"smarter than everybody else\", it is [[Dr Codd]] that is.</i>",
      "id": "a0d5dec31c0fd0673e6c8abf9d57c166"
    },
    {
      "type": "html",
      "text": "\nTables are great for one thing, ad hoc queries of data. That's it, and that's what they are build for, and they do that better than anything else. But that is a very limited area, most problems don't require ad hoc queries, and are much better solved by other structures. Yes yes, we all know you don't agree with this, we can't help it you aren't educated in writing software.",
      "id": "59e0cf4eb9909540ba6af881dc437e45"
    },
    {
      "type": "html",
      "text": "<i>In my domain as I have encountered it so far, I am quite competent. Perhaps you are one of those people who wish real life was like university classes and keeps looking for that lost feeling by digging it out of any corner you can.</i>",
      "id": "0bd1bf29c8dad75d4f4b5d59704d492b"
    },
    {
      "type": "html",
      "text": "{No I'm what's called a programmer. I see you've decided to start the name-calling again. Pity it almost seemed like you were finally learning something.}",
      "id": "c5582ba5813a533a1d8594ce16532499"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "1-I wanted to see an attempt to query a graph using sql just so we could all agree on how painful it is to express complex logic/algorithms using _only_ SQL. I think we've all agreed that doing complex logic in SQL is far too painful for it to become then norm. Other programming languages are better for expressing logic.",
      "id": "301bed842afd6b89a0beb767d89062da"
    },
    {
      "type": "html",
      "text": "<i>Nobody ever suggested doing *entire* algorithms with SQL. At least not me. Like I said twice before, sometimes it will solve 90+ percent of a problem, and sometimes zilch. The net benefits for an entire application are positive in my experience.</i> {You have been advocating exactly that for half a decade. It's all in google groups for those who care enough to search.}",
      "id": "86ae8565de09da74900122cfaf02a25c"
    },
    {
      "type": "html",
      "text": "\n2- Maybe I'm a Python bigot but I'm shocked that you can't read the Python code linked to at the top. That's a deeply disturbing admission that makes me question your programming background. Perhaps you're suffering from [[Anti Experience]]? In which case there's no point trying to have a conversation with you because you won't have the foggiest notion what I'm on about.",
      "id": "dd5c6b49e05f3a619db67d41e5e50a0e"
    },
    {
      "type": "html",
      "text": "\nOh well at least the shallowness of this page: [http://www.geocities.com/tablizer/langopts.htm www.geocities.com] makes sense now.",
      "id": "bda6124238aefbe55a2587e7e944c70a"
    },
    {
      "type": "html",
      "text": "<i>If you use instant-Python-readabily as a litmus test for general IT intelligence, then I guess I flunk. I studied Python a bit a few years ago, but found some of its syntax and conventions odd.</i> {I just found that it indicates that you can't read code. Which suggests you can't write code which suggests that there's no point in trying to talk to you about code. It's especially damning given that you claim to have studied the language. It wouldn't have been so bad if you'd been living on a desert island and had never seen Python before.}",
      "id": "56a8ba18a6c9fbb9aa9e8019fc43067a"
    },
    {
      "type": "html",
      "text": "<b>Handling Change in Requirements</b>",
      "id": "864ad1a964664bb0dc4880ce6fd32bcc"
    },
    {
      "type": "html",
      "text": "\nRe: <i>[[Anti Experience]]: refers to people who have been doing things wrong for so long that it is actually worse to have them on your team than it is to have inexperienced people.</i>{Just about sums you up.}",
      "id": "c167a854d14ab99d0617862790547d2e"
    },
    {
      "type": "html",
      "text": "\nFor my domain as I experience it, tables are a Godsend. You can perhaps accuse me of over-extrapolating my experience in one niche to other niches, but inside is another thing. I *have* used dedicated structures multiple times where table engines were unavailable, poorly implemented, or not permitted. I see no magic in them. They are not change-friendly. I think the problem you encountered <b>adding weights to your structure is indicative if this problem</b>. If requirements rarely changed, dedicated structures (DS) may be indeed the way to go. But I see change left and right. That is the world I live in. If your world is different, I apologize for over-extrapolating into it and bothering you. There have been 3 demonstrations of change problems with DS here. I made a decent case WRT change-handling.\nIf requirements don't change, perhaps tables are a little more code and a little slower. However, when requirements do change, they handle it better overall. (At least in my domain.{Which consists of building reports on top of databases. And for people whose domain consists only of building static web pages then html is the perfect language. Most of those at least have the sense not to advocate using HTML for everything.})",
      "id": "65cad2c6a5a81b8e54eab8eee2fe4c08"
    },
    {
      "type": "html",
      "text": " Speed",
      "id": "2c33559632172e74d9b15f43d2df3ccd"
    },
    {
      "type": "html",
      "text": " Initial simplicity",
      "id": "30cb4c57ae198fbdfbe4df97c349914c"
    },
    {
      "type": "html",
      "text": " Change-friendly",
      "id": "940bd6c99bb53e3da22a88544cfdace8"
    },
    {
      "type": "html",
      "text": " Consistency",
      "id": "af67c0b2cbbfbdaa34f108855528abe8"
    },
    {
      "type": "html",
      "text": "\nI will for the sake of argument give you the first two. But you have not demonstrated the 3rd nor 4th.",
      "id": "fe6576511b2c4e76111941534da47f50"
    },
    {
      "type": "html",
      "text": "\nSee [[Are Business Apps Boring]]",
      "id": "caad8488982931ca6fa7694f2580c8d6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "<b>Summary Lessons Learned</b>",
      "id": "203533ad49101c9b4dff0754d59eb03a"
    },
    {
      "type": "html",
      "text": "{Somebody greatly altered this, and I disagree with the changes. Perhaps we should re-org it into a pro-con list since there is no agreement with the summary. See the formatting near the bottom of [[Are Tables General Purpose Structures]].}",
      "id": "1564b5d4ab16ad588f04b03bfa6059d0"
    },
    {
      "type": "html",
      "text": " SQL requires the usage of other languages to express algorithms, but may simplify the calculations involved.",
      "id": "ed829cde2bb16957f5748f12c3a68bd9"
    },
    {
      "type": "html",
      "text": " The \"permanent\" data table seems to have weathered the addition of a weighting factor better than a map of lists. The map of lists had to be changed to a map of maps.[That's because it never had weights. Show an example of a real table built using SQL both with and without weights. Then you can say this. Otherwise this is just scurrilous lie.]",
      "id": "86868da36a21fdda554f3a848fefc343"
    },
    {
      "type": "html",
      "text": " There is a disagreement about how widespread the need for formal graph algorithms is.[The disagreement has top on one side and Dijkstra, Euler and the rest of the world on the other side.]",
      "id": "0fb1e1009c8d8890c07a495f875e5fe8"
    },
    {
      "type": "html",
      "text": " Some feel that tables structure-wise better absorbed the addition of weights. (Whether this translates to behavioral advantages or not is unclear.)[Only top feels this way and that's because he didn't implement anything. Imaginary code is always so much more flexible than real code.]",
      "id": "0e7c371864dc4e2093eb1c921e48a785"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "<b>Summary of Arguments</b>",
      "id": "47fc47401bee7851c7e773464cd9a347"
    },
    {
      "type": "html",
      "text": " Claim: SQL could not be found that implements the algorithm",
      "id": "4a1a528e1713bdc4bd2b799dd4c2b3f4"
    },
    {
      "type": "html",
      "text": " Pro-Table: SQL is not the only nor best relational language",
      "id": "dcc4e39d51b456bcb3adb680c105871e"
    },
    {
      "type": "html",
      "text": " Anti-Table: It has not be done in another run-able relational language so far, only pseudo-code.",
      "id": "55b3ff11cbfca1906df1e419e6688fa8"
    },
    {
      "type": "html",
      "text": " Claim: Past algorithms are biased toward dedicated structures rather than relational techniques because relational is newer.",
      "id": "75700514bf2b8d3a7e7d6ae4044072c4"
    },
    {
      "type": "html",
      "text": " Anti-Table: Well, they have been demonstrated to work in run-able languages",
      "id": "8f997d2e8a5647e401a3cf6f5f79a4af"
    },
    {
      "type": "html",
      "text": " Pro-Table: Because Dijkstra did the hard work for you",
      "id": "006ff387ff910e676679315791c4dde0"
    },
    {
      "type": "html",
      "text": " Anti-Table: Well, at least he finished",
      "id": "7e311990c39b6aed6d477a0a44844cf2"
    },
    {
      "type": "html",
      "text": " Pro-Table: That does not speak to what relational is potentially capable at the hand of a relational graph-whiz.",
      "id": "e0b3c361c3e716756f55cf99932b605d"
    },
    {
      "type": "html",
      "text": " Anti-Table: To date that is a fictitious being.",
      "id": "f4df41aa547d511dfdb26050507f9bf6"
    },
    {
      "type": "html",
      "text": " Claim: The \"permanent\" data table seems to have weathered the addition of a weighting factor better than a map of lists, which had to become a map of maps.",
      "id": "26c7beb393bae88da65a790b33eb7ea2"
    },
    {
      "type": "html",
      "text": " Anti-Table: That is moot because you never showed an algorithm for it.",
      "id": "a3f28e5e5c6706a19f0131621a4410c1"
    },
    {
      "type": "html",
      "text": " Pro-Table: At least it could store the extra information without changing containers.",
      "id": "07899f396654d423127d18eac5333aa8"
    },
    {
      "type": "html",
      "text": " Anti-Table: Not good enough until you show execution too.",
      "id": "e42f3e4f8027a8540bd9df9098f6fc6b"
    },
    {
      "type": "html",
      "text": " Anti-Table: The change impact could have been reduced by putting an OO wrapper around it.",
      "id": "e31e19adb7c04b879b1401cb3cb9a3ef"
    },
    {
      "type": "html",
      "text": " Pro-Table: You have not shown such a wrapper. A wrapper that allows open-ended column numbers will probably start to look relational.",
      "id": "924a6538b53b09ec379fc9fedacf7240"
    },
    {
      "type": "html",
      "text": " Anti-Table: And you have not shown run-able relational code",
      "id": "86833d46391e0add3fef326ac6217637"
    },
    {
      "type": "html",
      "text": " Neutral: Both sides are missing a demonstration {new listings since added below}",
      "id": "a26e123140626a44293bf42b4d4a005f"
    },
    {
      "type": "html",
      "text": " Claim: The need for graph algorithms are not very widespread in practice",
      "id": "dab3c8c11844b2f3f50b0d7f525d68b2"
    },
    {
      "type": "html",
      "text": " Anti-Table: I see them all the time",
      "id": "603b424768ae8f7a2b4bbd4efed79f07"
    },
    {
      "type": "html",
      "text": " Pro-Table: I have never seen the need for them in production",
      "id": "fb54c6e2446dab74f2305869feb1c22d"
    },
    {
      "type": "html",
      "text": "(Note: the indentation level has exceeded browser capabilities)",
      "id": "5ce800e28ed1afb3a63ae85dc9e8974c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "\nRe: <i>Some feel that tables structure-wise better absorbed the addition of weights.</i>",
      "id": "8e50fcc94119893ead2905e808a3ff99"
    },
    {
      "type": "html",
      "text": "\nI disagree. One relational 'implementation' was provided using a pseudo-language. In other words it wasn't real code. ",
      "id": "d73c48689675641d9b9b6ef20c56c22a"
    },
    {
      "type": "html",
      "text": "<i>I was referring to the \"container\", the structure without consideration of the algorithm. In theory relational divorces table design from usage (other than adding or deleting attributes or tables if not used). One should not have to alter tables just because an algorithm changes. (Work tables may still be needed, but that does not affect existing data.)</i>",
      "id": "17d55df9f7f6b61d275476c94da8b481"
    },
    {
      "type": "html",
      "text": "[The container is worthless without the algorithm. This discussion is about implementing an algorithm, which the [[Relational Weenie]] hasn't even offered up and implementation yet. You just lost this argument.]",
      "id": "752201c3630b98489c3eba4e95fc294a"
    },
    {
      "type": "html",
      "text": "{I lost interest. Maybe I will come back to it another day.}[Is this your cute little way of admitting you're wrong?] {Believe what you want to. Honest, I have no interest in this. It does not relate to actual stuff I see at work.}",
      "id": "cf95a0fe8a73acdfb16b0b0c93c1496e"
    },
    {
      "type": "html",
      "text": "\nSecondly that implementation used weights from the beginning so it did not <b>adapt</b> to weights. It had weights already. ",
      "id": "320b8951d7c4c48e6f10c73853b1f0fa"
    },
    {
      "type": "html",
      "text": "<i>I did not mean it that way. If it started out without weights, one only has to add a column to an existing table. This is compared to changing the container altogether (from list to map). The first approach does not require a change to existing data nor any existing algorithm that uses that data (assuming it won't need weights).</i>",
      "id": "90da25dce03ca1e33e7a8a775045c1c7"
    },
    {
      "type": "html",
      "text": "\nThirdly the actual working code that was provided adapted pretty well to the addition of weighting. The only thing missing was some kind of layer that provided encapsulation of the underlying data structure behind an interface. Hmm doesn't that sound like an object?",
      "id": "4f831afabf129e97ca7845060f8c8e16"
    },
    {
      "type": "html",
      "text": "<i>Or a database. A database should be considered an interface, not an implementation.</i>",
      "id": "baaadb5a4a73086a064268a673aea4f4"
    },
    {
      "type": "html",
      "text": "\nReally? Is it Oracle? Is it MySQL? Is it MS-SQL? DB2? Postgres? Jet? A tab-delimited flat file? XML? An interface is typically used to hide this. This kind of algorithm shouldn't concern itself with explicit storage details, like which flavor of SQL syntax will work with the chosen tool, or what the magic incantation is to produce a connection to a data source.",
      "id": "d2f14f8833070b7db6dd366640edeafe"
    },
    {
      "type": "html",
      "text": "<i>It is not always possible to map and wrap divergent interfaces one-to-one. Wrapping has limits. For one, interface A may assume a feature that implementation X simply does not support. It would be interesting to see your dedicated structure wrappers, by the way. I bet the more generic they become, the more they will resemble a table interface.</i>",
      "id": "7f507294926b88edba1b13d3e70ac4a0"
    },
    {
      "type": "html",
      "text": "\nTrue, not every implementation provides every feature. It's a question of priorities: for an app, what's more important, the feature or the flexibility? You can either code to the [[Lowest Common Denominator]], or add [[Capability Querys]] to the code, and hopefully, degrade gracefully.",
      "id": "e06dc0d2bd7e0665419761d8c71914ad"
    },
    {
      "type": "html",
      "text": "\nHow do you define 'table interface'? If table interface == SQL, then the answer is no. If table interface == associative array of records, well, that's pretty generic, isn't it?",
      "id": "7e828ce9f3f725f1ab169c55990d4c48"
    },
    {
      "type": "html",
      "text": "\nWhat do you need for the algorithm? SQL's main strengths are aggregate queries (summations), relational queries (joins), and interesting subsets (complex WHERE). If the algorithm doesn't need those, then those features don't need to be in the interface. Specifically, these kinds of queries aren't likely to be needed by typical graph algorithms. SQL can't do a topological sort.",
      "id": "15ac4133d0b0f8f61820ea90f0f3ea6d"
    },
    {
      "type": "html",
      "text": "<i>Perhaps not, but perhaps there are algorithms were it can do a large part of the work. Like I said many times, SQL and/or relational rarely do the entire job in applications I work on, but rather help out a lot with \"pre-processing\" kinds of stuff. How to do with with graph algorithms, I don't know at this point. I haven't done any since long ago in school, and am thus rusty.</i>",
      "id": "ba49a0aeb3fdaaf2292a1f14debc08f1"
    },
    {
      "type": "html",
      "text": "(please take a look at this topological sort: [http://www.danbala.com/python/tsort.py.html www.danbala.com] and see if there are ways SQL could help.)",
      "id": "1f3418ef1b7fb12e49aa4883170ad04a"
    },
    {
      "type": "html",
      "text": "<i>{{This is another example of code that would benefit from manipulating graphs via a relational interface. Currently it will only work with a specific representation, using a <b>list</b> of edges [(from, to) pairs], even though there is no reason for the edges to be ordered.}}</i>",
      "id": "34ec3373d69c9c695b4afa73bae43074"
    },
    {
      "type": "html",
      "text": "\nThe point about putting storage behind an interface is that this is <i>something that is likely to change.</i> Putting it behind an interface keeps this change from cascading through your code. For any particular app, if you're _certain_ it's not going to change, you can go ahead and code to a specific implementation - but in the long run, <i>you're probably wrong</i>.",
      "id": "2b0b53e4c4c4bb268d056548c71d30b1"
    },
    {
      "type": "html",
      "text": "\n[[Databases Are More Than Just Storage]]. Besides, even with inter-vendor differences, databases are still often better future-proofing than dedicated structures.",
      "id": "9e608969da31c2a3e9f578eed8145d98"
    },
    {
      "type": "html",
      "text": "<i>Why are databases often better future-proofing than dedicated structures?</i>",
      "id": "beb02557bae728ac9b85d4820940290c"
    },
    {
      "type": "html",
      "text": "<i>How do the additional features of databases apply to graph algorithms?</i>",
      "id": "c3f9a561d512644577d9fc319470afd7"
    },
    {
      "type": "html",
      "text": "\nRelational thinking generally assumes that any given piece of information may be used by different tasks, people, departments, etc. in the future. Thus, it tries not to build data layouts that are coupled to any particular usage. In my domain this has been a smart assumption to make. (I won't speak for other domains, however; it gets me into trouble.) Future uses of a given piece of information may have nothing to do with graph algorithms. For a few hundred nodes I see no real problem with copying some info into maps and lists for processing, but this may not extrapolate to hundreds of millions of nodes.",
      "id": "0bb13582c34946bf8c7b51f041502fd5"
    },
    {
      "type": "html",
      "text": "<i>Database Views can be used to decouple layouts from usage. This point seems to me to be mixing levels of abstraction.</i>",
      "id": "0c189924d5e992284d66ae943f8bf30c"
    },
    {
      "type": "html",
      "text": "\nPerhaps \"layout\" was not the best word to describe what I was trying to say.",
      "id": "e4474edcbf8316b79a43ab729d7646a4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "[\nYou do realize that we're talking about encapsulating <i>behaviour</i> behind an interface. Not encapsulating data storage. Graphs can be stored in a large number of ways but the relational model/SQL are not sufficiently expressive to implement the majority of the standard algorithms. The lesson to draw from this is that whilst relational is a good way to store data it's a poor way to express behaviour. Therefore in algorithmically sophisticated applications (i.e anything that requires recursion, graphs, deep maths, etc) databases are relegated to mere data storage.",
      "id": "48e6123229e8b03c788e94d073ee310e"
    },
    {
      "type": "html",
      "text": "\nI'd also like to point out that your usage of the word \"interface\" is unique. That's not what the rest of the world considers an interface. Please define how a database can be an interface? The rest of the world considers a database to be an implementation. Communicating with people who have unique and idiosyncratic definitions of common words is...challenging. Either they're ignorant of the standard definitions or they're iconoclasts who wish to obscure the shallowness of their ideas behind proprietary jargon.",
      "id": "125fa4ee4022c444fced5e0c383a38d2"
    },
    {
      "type": "html",
      "text": "]",
      "id": "6da8d3a7a0429a111c7f5c5f534b2713"
    },
    {
      "type": "html",
      "text": "\nRather than calling somebody stupid or odd, or general [[Argument From Authority]] or [[Argument From Votes]]; why not establish some clear criteria for the difference between an interface and an implementation. That would be a more sociable and scientific approach.",
      "id": "94d57ea825c18249fc3d02a0d08ee4b6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "\nRe: <i>but the relational model/SQL are not sufficiently expressive to implement the majority of the standard [graph] algorithms.</i>",
      "id": "f8ffa9ff414e84de4fcf425e34a66ac5"
    },
    {
      "type": "html",
      "text": "<i>{{SQL: not interested. The relational model: yes, of course it's sufficiently expressive.}}</i>",
      "id": "b71682ca416a71f350063cc0ac4bb385"
    },
    {
      "type": "html",
      "text": "\"Standard\" by who's measure or proclamation? I agree that the existing algorithms in the literature are not very relational-friendly, but that does not mean that such is not possible.",
      "id": "b98eeddfcea7aac04bda4a42589f85da"
    },
    {
      "type": "html",
      "text": "<i>{{The existing algorithms in the literature are <b>defined</b> in terms of relations (or multirelations, a.k.a. tables). A faithful implementation of the [[Relational Model]] would just allow you to express the mathematics more directly, separating the choice of table representation from the expression of the algorithms.}}</i>",
      "id": "272a6ceaddcbe3a412e2d002246f2a3b"
    },
    {
      "type": "html",
      "text": "\nI will be happier if you replace \"standard\" with \"existing\" or \"known\".",
      "id": "144427c353dcc44971e6c223ab1c1a8c"
    },
    {
      "type": "html",
      "text": "[You're not seriously claiming that there are algorithms out there that will be better with relational but we don't know them yet? When something is described as lacking [[Turing Complete]]ness they're not just expressing an opinion they're describing a fundamental limitation. That means there are things you just cannot and will not ''ever' be able to express with that thing. Don't blame me that's just life.]",
      "id": "961b98703a6c0cb05e04b64cc90ca9fc"
    },
    {
      "type": "html",
      "text": "\nI did not mean the <i>entire</i> algorithm, but rather some kind of pre-processing to simplify the sequential part of the code. I don't know if such exists or not. I have no interest in playing with this problem, for I consider it mostly an academic toy. If you disagree, then so be it.",
      "id": "f0161ae9c1f6d29f305cb76bd2dea635"
    },
    {
      "type": "html",
      "text": "<i>Mathematical algorithms are already wonders of simplicity, that's what math is all about. Tables don't simplify algorithms, because they can't do anything, Sql doesn't simplify algorithms because it's not capable of expressing them, code however is quite easily capable of directly implementing the algorithm, and thus nothing else is needed and anything else would only complicate the algorithm. Sql is good for getting the necessary data into memory, nothing more.</i>",
      "id": "7e3864e0a4e6f22c717fc8da1e135eb0"
    },
    {
      "type": "html",
      "text": "\nI disagree. The amount it helps varies widely from algorithm-to-algorithm, but it is quite often helpful.",
      "id": "616f1957abb6a19088f8dffa1506547d"
    },
    {
      "type": "html",
      "text": "[If it is <i>often</i> quite helpful as you claim then give examples of algorithms where this 'pre-processing' takes place and where it was helpful.]",
      "id": "4e3942b2b77876cd9f029d41fb8cf610"
    },
    {
      "type": "html",
      "text": "\nSee how simple the SQL is in [[Dot Product In Many Programming Languages]].",
      "id": "766b4dc1bcd40c9e97befeaba54031f5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "\nRe: <i>If table interface == associative array of records, well, that's pretty generic, isn't it?</i>",
      "id": "b3b73920683a096c6d8f322f98ba5c2f"
    },
    {
      "type": "html",
      "text": "\nThat would not be sufficient because it has only one key or \"look-up\" criteria. ",
      "id": "8e6ae3deb8bfd19d30fdf69fe5dfae65"
    },
    {
      "type": "html",
      "text": "<i>A set of records could have multiple associative arrays for lookup, and the key for an array could be multiple fields.</i>",
      "id": "af75ab23379ce08bfc45a0af3b596bd9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "I did once see an implementation of trees in Relational technology, it was quite impressive how he managed to get node insertion and searches implemented without a recursive query. As I recall, he put two numbers by each node. He counted depth-first, incrementing the count going both down and up, and put by each node both the down and up numbers. Thus he could tell with a simple query whether a needed node was below any given node (target node number between the query node numbers), and could insert using a collect and iterate rather than a recurse. Of course, this is a TREE not a GRAPH, but it was still interesting. -- [[Alistair Cockburn]]",
      "id": "369c0a44117ba4835bad5d98b9dc3b34"
    },
    {
      "type": "html",
      "text": "\nSome dialects of SQL have built-in tree-oriented operations. As far as I know, relational rules do not rule out the addition of tree operations, such as traversals starting from a given node.",
      "id": "2fbe5570db0cbd2a5fb9cabfc0cfe28c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "By the way, I have a question and don't know whether the answer exists or not, but I'm not in this branch of algorithms.... [[Shortest Path With Time Decay]] is where I moved the question to. -- [[Alistair Cockburn]]",
      "id": "37490b1dbdf7693d1f570ab4313508e3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "\nHere is a [[Cold Fusion Language]] version of the algorithm that uses RAM tables and lists. I noticed that the Python version does not change the structure that stores the node info, so passing table copies repeatedly as variable/object parameters is not necessary to use essentially the same algorithm. The Python version essentially just queries a \"global\" (pass by ref) navigational structure, which can just as well be a relational table. (Note that Cold Fusion's internal table engine is a bit buggy because they hastily tried to strap a static-typed addon into a dynamically typed language, but the problems do not show here.)",
      "id": "aa33ae78d83d434a26e7bbea4e2686b8"
    },
    {
      "type": "html",
      "text": "\nThe indentation is a little messed up because tabs and spaces got mixed.",
      "id": "dae787018a0bd16159eb224586c931c8"
    },
    {
      "type": "code",
      "text": " <!--- Cold''''''Fusion Path-finder version --->",
      "id": "37e5c7ec9c8f7b1b92ce2a80e5dce966"
    },
    {
      "type": "code",
      "text": " <cfset graph = queryNew(\"fromID,toID\")>   <!--- create a temp table --->\n <cfset myAddRow('A','B')>\n <cfset myAddRow('A','C')>\n <cfset myAddRow('B','C')>\n <cfset myAddRow('B','D')>\n <cfset myAddRow('C','D')>\n <cfset myAddRow('D','C')> \n <cfset myAddRow('E','F')>\n <cfset myAddRow('F','C')>  ",
      "id": "9ed980017ec24352f670697ef3f52012"
    },
    {
      "type": "code",
      "text": " <cfdump var=\"#graph#\">  <!--- to inspect the table --->",
      "id": "c3fecf42d0229b435541c83a27f24ae7"
    },
    {
      "type": "html",
      "text": "Results:<br>",
      "id": "06a9190da8c7701c76e2d455c7421b6c"
    },
    {
      "type": "html",
      "text": "<cfoutput><br>A-to-D:<br>#find_path('A', 'D')#</cfoutput> ",
      "id": "b4646c54b85e06a05e3041f79003d794"
    },
    {
      "type": "html",
      "text": "<cfoutput><br>D-to-A:<br>#find_path('D', 'A')#</cfoutput> (should be empty)",
      "id": "47edda2663dca4c5a060e05ceba2fad8"
    },
    {
      "type": "html",
      "text": "<cfoutput><br>B-to-C:<br>#find_path('B', 'C')#</cfoutput> ",
      "id": "1b4ef14b2ed3b1c95f74110c02afcb14"
    },
    {
      "type": "html",
      "text": "<cfoutput><br>E-to-A:<br>#find_path('E', 'A')#</cfoutput> (should be empty)",
      "id": "ff82fb1f1459f045e004825724489159"
    },
    {
      "type": "html",
      "text": "<cfoutput><br>E-to-D:<br>#find_path('E', 'D')#</cfoutput> ",
      "id": "c3769f53ba07769007de5815ab74273c"
    },
    {
      "type": "code",
      "text": " <!--- --------- ---> \n <cffunction name=\"find_path\">\n   <cfargument name=\"startNode\">\n   <cfargument name=\"endNode\">\n   <cfargument name=\"pathList\" default=\"\">\n   \n   <cfset var usePathList = listAppend(pathList, startNode)>\n   <cfif startNode is endNode>\n      <cfreturn usePathList>\n   </cfif>\n   <cfquery name=\"finder\" dbtype=\"query\">\n      SELECT * FROM graph WHERE fromID = '#startNode#'\n   </cfquery>\n   <!--- make list of toID's so that we don't have to keep the query \"open\" --->\n   <cfset endList = valueList(finder.toID)>    \n   <cfloop list=\"#endList#\" index=\"iTo\">\n       <cfif Not listFind(usePathList, iTo)>\n     <cfset newPath = find_path(iTo, endNode, usePathList)>\n     <cfif listLen(newPath)>\n               <cfreturn newPath>\n     </cfif>\n       </cfif>\n   </cfloop>\n   <cfreturn ''>\n </cffunction>\n <!--- ----- --->\n <cffunction name=\"myAddRow\">      <!--- add a row --->\n <cfargument name=\"p_from\">\n <cfargument name=\"p_to\">\n   <cfset queryAddRow(graph)>\n   <cfset querySetCell(graph,'fromID',p_from)>\n   <cfset querySetCell(graph,'toID',  p_to)>   \n </cffunction>",
      "id": "2b6360bac2088889b1e688a772fb2864"
    },
    {
      "type": "html",
      "text": "\nOutput",
      "id": "60628bf24ae625121b918d55a57b4921"
    },
    {
      "type": "html",
      "text": "Results:<br>",
      "id": "06a9190da8c7701c76e2d455c7421b6c"
    },
    {
      "type": "html",
      "text": "A-to-D:<br>A,B,C,D ",
      "id": "31b9099ce426faf30d3c0e771344f12b"
    },
    {
      "type": "html",
      "text": "D-to-A:<br>(should be empty) ",
      "id": "57aba7e9bdccd6f545a6a9834ae5bc52"
    },
    {
      "type": "html",
      "text": "B-to-C:<br>B,C ",
      "id": "0f7fbba0e3fa2d45a0f2d19d17d5cd1a"
    },
    {
      "type": "html",
      "text": "E-to-A:<br>(should be empty) ",
      "id": "307f3401409901e066154898e55d0033"
    },
    {
      "type": "html",
      "text": "E-to-D:<br>E,F,C,D ",
      "id": "92f5bb0f6c24c7613dd13b55a286b843"
    },
    {
      "type": "html",
      "text": "\nHere is an experimental <b>non-recursive</b>, non-list cursor-based [[Fox Pro]] approach. I used to use similar techniques to traverse trees. Such a technique can be useful if a recursive search would fill up RAM so that one wants to use disk instead. (Note that RAM caching is normally used, so it is not \"pure\" disk.) Besides, it is easier to stop and re-start such a thing if using tables. This algorithm incrementally fills a work table with path segments, and uses the prior set of segment matches to find the next set and marks them to avoid revisiting them. In a way it emulates a recursive call stack. It does not currently work for invalid paths because it will get stuck in an infinite loop, but could probably be fixed by adding a \"unique\" check before copying in records from the data table. I couldn't find a way to do that in less than about 12 lines, so skipped it for now. The output could be made cleaner also.",
      "id": "a1dc6f1dc35f4d260e5a05f263a8ae1a"
    },
    {
      "type": "html",
      "text": "",
      "id": "3df80b4388b3de00a00bce0ee549c93c"
    },
    {
      "type": "code",
      "text": " set exact on        && typical context settings\n set deleted on\n set talk off\n close data\n set safety off",
      "id": "d63ad4d595d9f52865812517d131cf5e"
    },
    {
      "type": "code",
      "text": " do find_path with 'A', 'D'\n do find_path with 'B', 'C'\n do find_path with 'E', 'D'",
      "id": "0c52034337074536174c2e62fe596394"
    },
    {
      "type": "html",
      "text": "",
      "id": "3df80b4388b3de00a00bce0ee549c93c"
    },
    {
      "type": "code",
      "text": " procedure find_path\n parameters startNode, endNode",
      "id": "e0b25a673a88cdd94c29c68b029cb17b"
    },
    {
      "type": "code",
      "text": " ? \"Looking from \" + startNode + \" to \" + endNode",
      "id": "c770e4fde54b56d01acdffa7656177f1"
    },
    {
      "type": "code",
      "text": " select B\n use wrkGraph.dbf alias work\n zap",
      "id": "fd7768022e842cc23c808025e35ebbbe"
    },
    {
      "type": "code",
      "text": " curNode = startNode\n reloop = .t.\n foundIt = .f.\n curRec = 0",
      "id": "8f782b8df4afb27c439f6005b1c567d8"
    },
    {
      "type": "code",
      "text": " select work\n do while reloop\n  append from graph.dbf for fromID = curNode  \n  if .not. eof() .and. curRec <> 0\n    temp = curRec + 1\n    goto &temp\n  endif\n  if eof()\n    goto top\n  endif\n  if eof()\n    reloop = .f.\n  else\n    if toID = endNode       && found target\n      reloop = .f.\n      foundIt = .t.\n    else \n      if mark <> 'X' \n        curNode = toID\n        replace mark with 'X'\n      endif\n    endif\n  endif\n enddo",
      "id": "9e8343d82029ffd559dc4b762640849f"
    },
    {
      "type": "html",
      "text": "--- Mark Nodes for Display ",
      "id": "409ea0e5ad6c46be698bed5a6720051a"
    },
    {
      "type": "code",
      "text": " if foundIt\n  goto bottom\n  replace mark with 'P'  && mark nodes on Path\n  curNode = fromId\n  skip -1\n  do while .not. bof()       && loop backward\n    if toID = curNode\n       replace mark with 'P'\n       curNode = fromID\n    endif\n    skip -1\n  enddo\n else\n  ? \"Not Found\"\n endif",
      "id": "50496eedae7bbda15bdc0f7bd27d31a4"
    },
    {
      "type": "html",
      "text": "--- Display the result nodes",
      "id": "fe6b22a5e8923c34c76aa7f668146403"
    },
    {
      "type": "code",
      "text": " list fields fromID, toID for mark='P' off ",
      "id": "510a56d6f6e49b20866c8cf11db6bae7"
    },
    {
      "type": "code",
      "text": " return",
      "id": "4e7bd113f1a9e14089da38fda7875e5d"
    },
    {
      "type": "html",
      "text": "end****************",
      "id": "f71b74a8c4eb61e53a6dc8af47dceb60"
    },
    {
      "type": "html",
      "text": "(Table columns for both tables are fromID, toID, mark. But the original data table does not really need the \"mark\" column.)",
      "id": "9d54816bb05277566ee6c7c7301e2abb"
    },
    {
      "type": "html",
      "text": "\nOutput:",
      "id": "e5ac7879814cb74f7cb8782bf5d316c6"
    },
    {
      "type": "code",
      "text": " Looking from A to D",
      "id": "bbc0b9fe03a12a118bad8e3cccc0f84c"
    },
    {
      "type": "code",
      "text": "  FROMID            TOID            \n  A                 C               \n  C                 D               ",
      "id": "bf74a31b896a73b9ff0827e4ae2c08e8"
    },
    {
      "type": "code",
      "text": " Looking from B to C",
      "id": "e62c65e83529c8b93ad022c72915dbbe"
    },
    {
      "type": "code",
      "text": "  FROMID            TOID            \n  B                 D               \n  D                 C               ",
      "id": "ae29550e7c23c5cf76cbdfcfdf2e8260"
    },
    {
      "type": "code",
      "text": " Looking from E to D",
      "id": "d094032ef2dd0bd1ec8ea87432f1865b"
    },
    {
      "type": "code",
      "text": "  FROMID            TOID            \n  E                 F               \n  F                 C               \n  C                 D               ",
      "id": "84b33abca77da51e47316da86e0e86a0"
    },
    {
      "type": "html",
      "text": "- Top",
      "id": "89f9b0da00d1fdf7dc77627c187fbdeb"
    },
    {
      "type": "html",
      "text": "(Formatting note: Due to a wiki bug, Mozilla displays a single blank line as 2)",
      "id": "9bb56155aa4bd6fd8a049763f29d8fb5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "\nFor those interested in seeing other \"relational\" solutions to graph algorithm problems check out:\n[http://www.cs.ucla.edu/classes/winter06/cs240A/solutions/cities.txt www.cs.ucla.edu]",
      "id": "5c57b648c84e20b5b90762ec358d6a7b"
    },
    {
      "type": "html",
      "text": "\nClosest cities in SQL(99):",
      "id": "ecc8727dee6a0b4fa7890658039c0bb4"
    },
    {
      "type": "html",
      "text": "\nWITH  ALLD(city1, city2, Miles)",
      "id": "eb23d64d8eaf7654b9b911a5811a08c1"
    },
    {
      "type": "code",
      "text": "    SELECT * FROM distance\n         UNION\n    SELECT D.city1, ALLD.city2, D.Miles + ALLD.Miles\n    FROM distance as D, ALLD\n    WHERE D.city2=ALLD.City1",
      "id": "e119ef5f5ac965edf7167b203441706c"
    },
    {
      "type": "html",
      "text": "SELECT city1, city2, min(Miles)\nFROM ALLD\nGROUP BY city1, city2",
      "id": "609c6056377e37de41b600f54344d38d"
    },
    {
      "type": "html",
      "text": "\nFrom the discussions above it seems that relational/set theories are formalized and proven methods that haven't or at least hadn't been fully implemented.  Whereas Object-Oriented techniques/heuristics don't seem to be based on any formal/proven (or even provable theories), but are being fully implemented.  Go figure.",
      "id": "288cdf0250598b38d26269616ad1b457"
    },
    {
      "type": "html",
      "text": "\nAll the solutions presented here exceed in computational complexity Dijkstra's algorithm. None use a heap to extract the min (sorry a table is not a heap). Some do heinous cross products to get an adjacency list.\nThe SQL given above will not terminate if there are cycles in the graph. See [http://www.thescripts.com/forum/thread184469.html www.thescripts.com]",
      "id": "ebe6fd547d5e3c97da3626da9d987e16"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "876b24be8f434e81fa4fbd449157089c"
    },
    {
      "type": "html",
      "text": "[[Category Example]], [[Category Data Structure]], [[Query Traversal Versus Recursion]]",
      "id": "98365a07a270781fe160e577f15ce140"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?GraphAlgorithmsWithTables c2.com]",
      "id": "21306196861c0ea408c6ebad765ea97e"
    }
  ],
  "journal": [
    {
      "date": 1186158278000,
      "id": "007165e0bb5aaf5085c1dece090a06cc",
      "type": "create",
      "item": {
        "title": "Graph Algorithms With Tables",
        "story": [
          {
            "type": "html",
            "text": "If tables are general purpose data structures could someone show me how you'd represent a graph as a table. Then show an implementation of [[Dijkstras Algorithm]] using tables. Then compare it to this page: [http://www.python.org/doc/essays/graphs.html www.python.org] or any other implementation using the standard [[Edge List]] or [[Adjacency Matrix]] representations.",
            "id": "fa976e1584d10c06214f1cca56b61ffb"
          },
          {
            "type": "html",
            "text": "<i>Most graph-like arrangements are done using many-to-many tables. If all the nodes are in the same table, then we only need two columns in our many-to-many table: fromID and toID. Referential integrity and/or triggers can be used to avoid duplicate links.</i>",
            "id": "4370a60172a1905cdf068457a5994904"
          },
          {
            "type": "html",
            "text": "\nThis is beautiful. It perfectly illustrates why people get really angry at top. I asked him to show a solution to a fundamental programming problem: representation of graphs and graph traversal algorithms. I even gave a pointer to a trivial implementation in Python. Instead he hand-waves an answer about many-to-many tables.",
            "id": "be10e5db4348d35bc0b0b6e5dd8db097"
          },
          {
            "type": "html",
            "text": "<i>{{It seems to me that top has answered the question that was asked (\"how would you represent a graph as a table?\"). The mathematical definition of a graph is <b>already</b> expressed as a pair of tables (V, E), since sets and relations are special cases of tables. The (fromID, toID) table mentioned above is E (V is only needed if the graph can have isolated vertices with no edges). The list and matrix representations are two possible representations of tables; they're not specific to graphs (more generally, you can use an n-cube to represent an n-ary relation, which corresponds to a hypergraph).}}</i>",
            "id": "91e3a5c2b1072e66187a372d3206d0cd"
          },
          {
            "type": "html",
            "text": "\nMaybe I'm not communicating well but I'd like to see",
            "id": "b87c47a57608dd341a39cf81f36d5ccd"
          },
          {
            "type": "html",
            "text": " an sql scheme that represents a graph and",
            "id": "711d077104fe1b05c5efe0180a06a51e"
          },
          {
            "type": "html",
            "text": " an sql select statement that retrieves the shortest path between arbitrary nodes using Dijkstra's algorithm.",
            "id": "c6efa2aff7faa706eac884c5cf6b5da9"
          },
          {
            "type": "html",
            "text": "<i>{{SQL is a toy language. You need a more expressive language for this. The Python implementation referenced above is not table-oriented because it depends on a specific edge-list representation for E. It can be made table-oriented by accessing E only using table operations (which is no less efficient, and merges the edge list and adjacency matrix versions of the program).</i>",
            "id": "6f3f06dea1a46fb0fb24762c5d6920a6"
          },
          {
            "type": "html",
            "text": "<i>For example, here's the find_path function so modified, in a hypothetical table-oriented variant of Python:</i>",
            "id": "90ad8eea56aa8b229f7de1cafd3c3215"
          },
          {
            "type": "code",
            "text": "   def find_path(graph, start, end, path=[]):\n      path = path + [start]\n      if start == end:\n          return path\n      if not (start '''in dom'''(graph)):\n          return None\n      for node '''where''' graph(start, node):\n          if node not in path:\n              newpath = find_path(graph, node, end, path)\n              if newpath: return newpath\n      return None",
            "id": "82229d9cb3298546dfd74671b4f19586"
          },
          {
            "type": "html",
            "text": "<i>Here \"a <b>in dom</b>(R)\" tests whether a is in the domain of a relation R, and \"for x <b>where</b> R(a, x)\" loops through the values x such that R(a, x) is true. These are both primitive relational operations. Below I'll use \"R.hintIndexBy(n)\" to declare a hint that a table should be indexed by the n'th field of each tuple.</i>",
            "id": "72f8a8baa1fe858d2de6586a98e52629"
          },
          {
            "type": "html",
            "text": "<i>You may note that the code still uses array syntax. In this hypothetical Python variant, an array would be equivalent to a relation between array indices and values, and the array syntax would be syntactic sugar. -- David Hopwood }}</i>",
            "id": "6fb7a6d63723ecc95347c7f7f383f6f9"
          },
          {
            "type": "html",
            "text": "\nIf tables are general purpose data structures (that are as good as hashmaps/dictionaries) then this should be trivial. Of course past experience suggests that top will not write any SQL in response.",
            "id": "b8b4b9f0af9c1b4f27bbeedef0380745"
          },
          {
            "type": "html",
            "text": "<i>I never claimed that SQL could completely solve/implement the entirety of ALL algorithms. You seem to have some misconceptions about my viewpoints. In actual work (as I encounter it), SQL is often used to \"pre-process\" the information, reducing the workload/amount of procedural code. In some algorithms it may be 90+ percent, in others 10. Whether it can do large amounts with your suggested algorithm, I don't know yet. A possible failure to use it significantly for one particular algorithm does not flatten my claims, for there are jillions of other algorithms. This topic is not really about SQL anyhow.</i>",
            "id": "a542d5320707533c9fa9376b36a794e2"
          },
          {
            "type": "html",
            "text": "\nMy point is that this is an entire branch of fundamental knowledge that is very easy to represent using associative arrays and lists.",
            "id": "056e0e1882c58fea033c7c5cee435e77"
          },
          {
            "type": "html",
            "text": "<i>Same with tables.</i>",
            "id": "5f31795a47dd7f3eadaa20c713ad9fc1"
          },
          {
            "type": "html",
            "text": "\nIt happens to be both a very important branch of knowledge and something that is <i>very</i> hard to represent with tables. The point I'm making is that tables/relational is a nice data structure whereas lists, associative arrays, trees, graphs, stacks, queues are truly <i>general</i> purpose structures that can be used to represent <i>anything</i>. Tables <i>aren't general</i> purpose because they only work for some niches. Lists, associative arrays, etc <i>are general</i> because they work for all niches. ",
            "id": "2b53e613a16d4638c3e6a068f82ff1fa"
          },
          {
            "type": "html",
            "text": "<i>If that is the case, then why is Oracle such a huge company? I don't think any structure is the \"ideal\" for 100% of all niches, and I doubt you do either. Tables can represent anything that the dedicated structures can, and bend better to new requirements.</i>",
            "id": "5aa7dcdee28682c4e86953db23126a41"
          },
          {
            "type": "html",
            "text": "\nSince I suspect you won't be convinced my argument I suggest you try to implement graphs. In the python link I provided above they show that an edge-list representation of a graph is as simple as g = {'nodeKey':['otherNodeA', 'otherNodeB']}.",
            "id": "ed1dd9697bd7dc6f38397232882341f2"
          },
          {
            "type": "html",
            "text": "<i>{{And the corresponding table-oriented code could be as simple as \"g = {'nodeKey' <b>-></b> 'otherNodeA', 'nodeKey' <b>-></b> 'otherNodeB'}\" and \"g.hintIndexBy(1);\" The advantage here is that you can add other indices, or fields, or change to a matrix representation, or add transaction support, or whatever, without changing existing code that uses the graph. A smart implementation could even guess based on usage patterns what the best representation is.}}</i>",
            "id": "998faaa932ef88e7f79211284c766336"
          },
          {
            "type": "html",
            "text": "<i>I don't see link weights in that. Adding link weights to a many-to-many table is trivial.</i>",
            "id": "7470d1127a26166d2d9ee765bfdc3dfe"
          },
          {
            "type": "html",
            "text": "\nAlgorithms to process that are fairly easy. Any equivalent sql schema would be far more complex and awkward.",
            "id": "c9efdd3fbc1ecb1f0c761db0e21a2942"
          },
          {
            "type": "html",
            "text": "<i>{{Why the assumption that using a table-oriented programming model necessarily has anything to do with SQL?}}</i>",
            "id": "177589bfe2f8fec75ca5ce215391afc4"
          },
          {
            "type": "html",
            "text": "\nIn closing: please try to implement this so you'll immediately <i>see</i> the difference.",
            "id": "2afff36872bbeb7fcd9a85110bdbdf25"
          },
          {
            "type": "html",
            "text": "<i>Why not just replace the array references with function calls that use SQL or whatever internally? (Array calls don't allow one to change to a different data container anyhow.) The data can then remain the in tables, where it probably sits anyhow already in practice. Whether SQL can be used to shorten the algorithm, I don't know yet. I don't specialize in shortest-path algorithms; I'll have to study the problem more. This is more like a computer science term paper project rather than the kind of stuff I encounter in the real world. It would be interesting to see you guys use stacks, arrays, etc. to nicely implement this: [http://www.geocities.com/tablizer/chal06.htm www.geocities.com] </i>",
            "id": "84ad45112b6b2751626cfd9dba3755a6"
          },
          {
            "type": "html",
            "text": "\nAaaargh! I can't believe you just did it again. You've hand-waved about link-weights, challenged people to write code (which is here by the way: [http://www.python.org/doc/essays/graphs.html www.python.org]), made an appeal to authority and still didn't answer the question. This is increasingly aggravating but I shall try one more time.",
            "id": "d5f772173ac0e67b8399d33a913f9901"
          },
          {
            "type": "html",
            "text": " Graph theory underlies huge amounts of business applications from Amazon to DHL to genetic sequencing.",
            "id": "6149d480d02cb95ac8efb176a8364276"
          },
          {
            "type": "html",
            "text": " Implementing a graph and traversing it is so trivial that it can be done in a handful of lines of Python.",
            "id": "27e25378b04a338becb53d8a50e0d111"
          },
          {
            "type": "html",
            "text": "Therefore <i>prove</i> that tables are general purpose by showing an SQL schema and some sql that does the equivalent of the Python code linked to. You don't have to be an expert in graph theory. This is first year undergraduate computer science. If the problem can easily be solved using tables then show me how. I'm not asking for miracles just for you to implement trivial functionality. If you can't or won't then say why. Is it because you don't know how to implement algorithms in SQL? Or because you need an English description of the shortest path algorithm? The [[Dijkstras Algorithm]] page now has links to introductory pages that explain it but I'm quite willing to write out the pseudo code if first year comp-sci is too advanced for you.",
            "id": "56a4949e54d47b4e1b0209b87b1b405c"
          },
          {
            "type": "html",
            "text": "[Bad example, because graphs are fairly easily to represent with relational tables. Easier, IMHO, than the python example. Since [[Top Mind]] won't provide code, I will. I won't use SQL because [[Sql Sucks]], but here's the Python example in pseudocode-ish relational model:",
            "id": "0d8a1a0a6f18d722aafccb9a7290beac"
          },
          {
            "type": "html",
            "text": "Table:<br>vertices",
            "id": "9dbc6e1a552a28acb74bc2b877ac9020"
          },
          {
            "type": "code",
            "text": "  node\n  -----\n  A\n  B\n  C\n  D\n  E\n  F",
            "id": "dbcab96d9e863682726c78fefeff7f03"
          },
          {
            "type": "html",
            "text": "Table:<br>edges",
            "id": "603ff96cec2c9144456ad5f3284a5566"
          },
          {
            "type": "code",
            "text": "  from   to   cost\n  ----------------\n  A      B    1\n  A      C    1\n  B      C    1\n  B      D    1\n  C      D    1\n  D      C    1\n  E      F    1\n  F      C    1",
            "id": "b9abfaf5e692cdb5b096682239a30f32"
          },
          {
            "type": "html",
            "text": "Table:<br>current_costs",
            "id": "48500e9868f3eb31b01a4f91fe0b8062"
          },
          {
            "type": "code",
            "text": "  node   cost\n  -----------\n  A      0\n  (initialize all the rest to some variable representing infinity.\n   SUM(edges.cost) should work)",
            "id": "3299b3ca7a1b6c2fe6aeda7ce4ca812e"
          },
          {
            "type": "html",
            "text": "Table:<br>predecessors",
            "id": "6b7a9fe6ac61e4158236e16d6556035a"
          },
          {
            "type": "code",
            "text": "  node    pred\n  ------------\n  (empty to start)",
            "id": "c92e5e2e7c722e413fd47aec04d020fb"
          },
          {
            "type": "html",
            "text": "Table:<br>visited",
            "id": "f16df30c39928b877f40727183fc0dab"
          },
          {
            "type": "code",
            "text": "  node\n  -----\n  (empty to start)",
            "id": "6573307b908718e22c05ee2c61146630"
          },
          {
            "type": "code",
            "text": "  def shortest_paths\n    while count(difference(vertices; visited)) != 0\n      current_cheapest = min(cost; difference(visited; current_costs))\n      insert(visited, current_cheapest)\n      relax(current_cheapest; project(name; select(edges.from = current_cheapest.node;\n                                                   cross-product(edges; current_cheapest))))",
            "id": "7e5bb00d5be5d8f648a5b065a72358f0"
          },
          {
            "type": "code",
            "text": "  def relax(cheapest_node; adjacency_set)\n    adjacent_costs = select(current_costs.node = adjacency_set.node; \n                            cross-product(adjacency_set; current_costs))\n    link_costs = select(cheapest_node.node = edges.from && adjacent_costs.node = edges.to;\n                        cross-product(adjacent_costs; edges; cheapest_node)\n    update(adjacent_costs;\n           adjacent_costs.node = min(adjacent_costs.cost, cheapest_node.cost + link_costs.cost))\n    merge(predecessors; cross-product(rename(cheapest_node.node; pred); \n                                      project(node; select(adjacent_costs.cost \n                                                         < cheapest_node.cost + link_costs.cost))))",
            "id": "1274d55f18227b624d3af8da59288138"
          },
          {
            "type": "html",
            "text": "The start node has to be placed in current_costs with a cost of 0, and then the shortest path to a given node is obtained by following the predecessors table back to the start node. This (most likely) requires a recursive query:",
            "id": "ec7f2b83ea8108ddf2f70fa633fe4aeb"
          },
          {
            "type": "code",
            "text": "  while current_node != start\n    current_node = project(pred; select(node = current_node; predecessors))",
            "id": "c6c0c5736af905d6ce88ce6de84c82f3"
          },
          {
            "type": "html",
            "text": "But we're talking about tables here, not databases, and there's no inherent reason why a recursive query on an in-process table structure would be slower than the equivalent list or map.",
            "id": "27e287405369a191429fc33f22d5e415"
          },
          {
            "type": "html",
            "text": "''Do you have any idea how slow select(edges.from = current_cheapest.node; cross-product(edges; current_cheapest) is going to be in the absence of a query optimizer like a RDBMS has? You assume some magic compiler for python is going to do that...",
            "id": "782ef9e9767bbd506f1e9c8ff18e2a89"
          },
          {
            "type": "html",
            "text": "\nNote that this does <i>more</i> than the Python example, because the Python example neglects the cost of each edge (one of the fundamental parts of Dijkstras algorithm). I included it here to show that the relational model could handle it. It would be good to extend the Python example to include costs, just to see how much code it would take then.",
            "id": "24ad89a6281c320d1afca305b9a8235f"
          },
          {
            "type": "html",
            "text": "\nI've taken a few liberties with the relational operators in the interests of clarity. Min and count, for example, aren't really operators, but everybody knows what they do, and if you need a real equivalent you can see how to do min at [http://www.cs.sfu.ca/CC/354/zaiane/material/notes/Chapter3/node8.html www.cs.sfu.ca]. Also, the relational algebra doesn't have insert and update as operators; I define insert to take a relation and a tuple and insert the tuple into that relation, and update to take a relation and an expression and apply that expression to all fields of that relation. And I use an operation I've termed \"merge\" which updates a tuple if it already exists (setting all fields) and creating it if not. The semantics of these are probably not as clean or well-defined as they should be, but we're trying to express a graph traversal, not extend the relational algebra here.",
            "id": "d6afa13d2c09a850dfbf0a20c422e1a0"
          },
          {
            "type": "html",
            "text": "-- [[Jonathan Tang]]]",
            "id": "03979e137f7a06c4155817b8dba79490"
          },
          {
            "type": "html",
            "text": "[This isn't an academic exercise. I have examples above of multi-billion pound companies that have to solve variations of the above in order to stay in business. This is how Amazon and various logisitics companies work out how to get parcels and other items to recipients in the quickest and cheapest way. Google for Amazon's research department if you're interested in the business applications of graph theory.]",
            "id": "5f0e31f7b7b831790710ecb248160897"
          },
          {
            "type": "html",
            "text": "\nIn my decade-and-a-half in biz apps, I have <b>never encountered</b> a single implementation. I thought such algorithms fall into a category by themselves such that there are dedicated specialists. If I was put in charge of implementing one, I would survey existing algorithms and use what I find. It appears most existing algorithms for such are procedural in nature and not relational. But that does not mean that a relational version cannot or does not exist. More on this below.",
            "id": "ae26cbc600a911cf94f8e0aa7acaa4ea"
          },
          {
            "type": "html",
            "text": "<i>But you must admit that those implementation are neatly sitting somewhere, patiently waiting to impress us all with a timely worldwide Fedex pre-order of an XBOX360 title. I for one think that only the pure of heart are rewarded with having this kind of algorithm implementation as their critical path milestone, while the rest of us mortals battle with some stupid compiler oddities and pointy haired managers.</i> -- [[Leo Bighetti]]",
            "id": "a231b60a70448602a4306d415a476505"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "Jonathan you've illustrated my point. Doing what you did using what is the de facto language for real work with databases is so painful you've had to make up your own notation instead. I also wanted to avoid link weights and stick to the simplest possible type of graph so that we can see just how much work it takes to just to represent a graph using SQL/tables. This way topmind wouldn't be able to weasel out of writing code by claiming that the maths was too hard for him. I suppose I should have learned my lesson by now. He's never provided a working program to anyone ever but he always sounds like he will if you just jump through one more hoop for him.",
            "id": "6965bb9139242e839c026b826cc51b3a"
          },
          {
            "type": "html",
            "text": "\nI think I'll save myself any future aggravation by ignoring him and focusing on Mr Tang's interesting question about the difficulty of adding link-weights to the Python solution (which currently is the only <i>executable</i> implementation anyone has provided).",
            "id": "26dd898a8e0c28c6c654dadd1a576483"
          },
          {
            "type": "html",
            "text": "[\nCode will go here: [http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/119466 aspn.activestate.com]",
            "id": "88a4a6c7aa113652d271375adf6dbfe1"
          },
          {
            "type": "html",
            "text": "\nYou'll note that this solution which someone else already derived from Guido's original implementation requires several different kinds of dedicated data structures. These would all have to be re-implemented using SQL if you were going from the simple version to the complex version. If you had built the simple version in SQl (which you didn't because it was too hard) you would now have to re-write the whole lot again in SQl (which would be even harder). Thus the claim that tables, sql and databases make it easier to change things is shown to be bogus for any domains that require complex algorithms.",
            "id": "5ac7fdf80a48b216406cfe1c629f9ad4"
          },
          {
            "type": "html",
            "text": "]",
            "id": "6da8d3a7a0429a111c7f5c5f534b2713"
          },
          {
            "type": "html",
            "text": "<i>{{ Here is that code modified to be table-oriented, using the same variant of Python as before:</i>",
            "id": "47c572e69bc1e27c032fcd39ca52d494"
          },
          {
            "type": "code",
            "text": "   def Dijkstra(G,start,end=None):\n      \"\"\"\n      Find shortest paths from the start vertex to all\n      vertices nearer than or equal to the end.",
            "id": "7f7fe6f5a6eb9b184d565c8edfb6e8b0"
          },
          {
            "type": "code",
            "text": "      The input graph G is assumed to be modelled as a ternary\n      relation Vertex x Vertex x Length, where (v, w, x) models\n      an edge v -> w with length x.",
            "id": "f988b00ffc2e1f801c2f8848b68c4d6f"
          },
          {
            "type": "code",
            "text": "      Length must be an arithmetic type that can be added to 0\n      and itself. Vertex can be any type.\n      \"\"\"",
            "id": "4c0ec0b568608bbde3c3764518377966"
          },
          {
            "type": "code",
            "text": "      D = {}         # table of final distances\n      P = {}         # table of predecessors\n      Q = {}         # est.dist. of non-final vert.\n      Q.hintIndexBy(1)\n      Q.sortedBy(2)  # Q must remain sorted by the estimated distances\n      Q[start] = 0",
            "id": "bc1670838869e6e8c7d7699b6e9311ba"
          },
          {
            "type": "code",
            "text": "      for v in Q:\n         D[v] = Q[v]\n         if v == end: break",
            "id": "01d65851b7c43a700bc9646b98c09f35"
          },
          {
            "type": "code",
            "text": "         for w, x '''where''' G(v, w, x):\n            vwLength = D[v] + x\n            if w in D:\n               if vwLength < D[w]:\n                  raise ValueError, \"Dijkstra: found better path to already-final vertex\"\n               elif w not in Q or vwLength < Q[w]:\n                  Q[w] = vwLength\n                  P[w] = v",
            "id": "f3c95d8b3e4f503f33e0aa975e4d0b9d"
          },
          {
            "type": "code",
            "text": "      return (D,P)",
            "id": "bc47be93505d5251c4d70198fd058e3f"
          },
          {
            "type": "html",
            "text": "[code for shortestPath unchanged]",
            "id": "efd480350546412715f79127da5cb203"
          },
          {
            "type": "html",
            "text": "<i>Why is this so similar to the original code? Simple: the algorithm is already in an (iterative) table-oriented style; it just needs to be abstracted away from any particular representation of the relation G. Note that the only \"dedicated data structure\" in the original code, a priority dictionary (see [http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/117228 aspn.activestate.com]), has become just a table sorted by its second column and indexed by its first. -- David Hopwood }}</i>",
            "id": "ff3487b76c1bc1f36b030678670a5398"
          },
          {
            "type": "html",
            "text": "[\"Thus the claim that tables, sql and databases make it easier to change things is shown to be bogus for any domains that require complex algorithms.\" I'm not sure about that. Adding link weights involved 2 new tables, and an additional column to edges. It did require that the code itself be rewritten, but that was the case with the Python version too. And if I'd properly factored the code (which is possible in relational algebra, because of algebraic closure, but not in SQL), then large segments of it could probably have been reused.",
            "id": "8c9c309dc92e9cac5c1446ba2540dac2"
          },
          {
            "type": "html",
            "text": "\nRegardless, it's probably best not to argue further until we have a decent (i.e. non-SQL) relational language. Not having executable code allows one to get away with a great deal of fuzzy thinking (as I'm sure you've noticed), so the discussion has a way of going around in circles. The Python version works, which is basically all that matters for an algorithm like this. -- [[Jonathan Tang]]]",
            "id": "5ae6981cdc0a4f308a17ff633732ac48"
          },
          {
            "type": "html",
            "text": "<i>Doing what you did using what is the de facto language for real work with databases is so painful you've had to make up your own notation instead.</i>",
            "id": "d4aa38258efbb7fe679705817edfc3d6"
          },
          {
            "type": "html",
            "text": "\nWould you be more open to relational techniques if it had better implemented languages? Extendable relational languages tend to resemble functional programming I would note. -- top",
            "id": "c0f1ccc0adbfa0b6ea359afe0ab03646"
          },
          {
            "type": "html",
            "text": "<i>Yes. People claim that relational techniques are very expressive but all the actual mainstream implementations as opposed to theoretical papers are hilariously bad. Although I rather like SchemeQL.</i>",
            "id": "7bfded8bdbf237fd17b1b06bb4f998dc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "\nI think we need to divide this up into two issues:",
            "id": "d47f3c11bd3627071ee7003327e7fa37"
          },
          {
            "type": "html",
            "text": " Data Structure: Competing with arrays and lists to do basic storage and retrieval of data.",
            "id": "6309e4163c55494a9bb639b19fd78e89"
          },
          {
            "type": "html",
            "text": " Behavior: Using relational languages to do some or all of the processing.",
            "id": "bf13a846835a4b59e105243da04bd6cb"
          },
          {
            "type": "html",
            "text": "\nI think the first has been clearly established. Tables can easily store graphs. Agreed?",
            "id": "797201fc91c4ea2550803918d9bebe1c"
          },
          {
            "type": "html",
            "text": "\nThe second point I already made, but it has been tossed asided for some reason. I never claimed that SQL or relational languages solve all processing all the time (I am not sure they even should). A possible failure of it to help significantly with this particular algorithm means very little. In actual work, the percentage of the behavior part that SQL solves varies widely. If SQL can't provide significant pre-processing, I simply write procedural code around simple Select statements. To get a better picture of what SQL can solve and can't solve we need more data points. Your example is only one point at best. (Note that I agree with Jonathan that SQL is far from the pinnacle of relational languages.) -- top",
            "id": "9d771271b6a43ebd6be7bc8aeac3bd02"
          },
          {
            "type": "html",
            "text": "[I agree that tables can store graphs. I've done it myself when building content management systems. My point is that if one stays <i>only</i> in the relational/sql model then it becomes very, very, very difficult to express the algorithms that provide useful behaviour (after all data without behaviour is worthless.). Therefore relational isn't sufficient or general purpose because it must always be supplemented by something else. Just like OO isn't sufficient or general purpose because it must always be supplemented by something else. Namely imperative or functional paradigms.]",
            "id": "08f11ef834e3c989fcecbb6d025aa2cd"
          },
          {
            "type": "html",
            "text": "<i>{{ Hear, hear. [[Multiparadigm Language]]s and systems are clearly the right thing. However, if you ignore the bias against OO, I've found some of [[Top Mind]]'s stuff to be helpful in clarifying my understanding of how the [[Relational Model]] fits into multi-paradigm systems. }}</i>",
            "id": "3dd16646ec8f0e2c1f90d9c5bfe6e0a8"
          },
          {
            "type": "html",
            "text": "<i>He's never provided a working program to anyone ever but he always sounds like he will if you just jump through one more hoop for him. </i>",
            "id": "6aa33eee5aa0a8dfff35bf3197dde903"
          },
          {
            "type": "html",
            "text": "\nYou are being a hypocrite. I have been listing examples such as [http://www.geocities.com/tablizer/chal06.htm www.geocities.com] for more than year. Yet you <b>ignore</b> them and then go ahead and make your own. Then when I don't give instant turn-around to your academic-ish example, you accused me of \"ignoring code challenges\". In \"playground-speak\", you ignored my example before I ignored yours. I gave you code to compare first. You finish mine, and <i>then</i> I'll finish yours. Otherwise, I will be tempted to accuse you of creating a different example to distract from the fact that you are afraid of the first one.",
            "id": "7c5983ea325eda5439698e711809898b"
          },
          {
            "type": "html",
            "text": "[This is the first time you've mentioned challenge 6 in this conversation. This discussion emanated from the claim that tables were sufficient and general purpose data structures. My point has always been that tables are not enough. That you need the vast corpus of computer science to do anything useful and that automatically reaching for a relational solution to problems is unwise because no paradigm is always the best solution.]",
            "id": "ba6f96f2d3238f9551693dac1ab16111"
          },
          {
            "type": "html",
            "text": "<b>\"General purpose\" and \"always best solution\" are not necessarily the same thing</b>. General purpose may not even be possible in an absolute sense. See [[General Purpose Programming Language]]. If you take the absolutist version, then if dedicated structures were general purpose, people would not need RDBMS, ever! {That's not what general purpose means. It means that it can be used to solve any problem. Sometimes that means we can always, the computer science community, use dedicated data structures to build a tool (like an RDBMs) to solve pretty much any problem. We use bricks to build walls and use walls to build houses. We don't use walls to build bricks because that kind of [[Abstraction Inversion]] is silly. Remember general purpose is only a starting point. Everything can be built out 1s and 0s but we don't use them directly.}",
            "id": "25ba08c3de248695643bf288ad3f86b3"
          },
          {
            "type": "html",
            "text": "[That's why I created [[When Not To Use Table Oriented Programming]]. That's why [[Jeff Panici]] created [[The Top Challenge]] (which you still haven't replied to).]",
            "id": "16f1e37b29ea2ebdacdfe63a3c852f44"
          },
          {
            "type": "html",
            "text": "\nHave too.",
            "id": "35b62b261f8c655fae2c3838a9f1981e"
          },
          {
            "type": "html",
            "text": "[As for challenge 6. It's a reporting system. I would build it using the reporting tools provided by my database vendor because that's one situation where that's the best solution. I might even consider using RPG.]",
            "id": "9d73b5d3cd42542bcf50b17fadba0a22"
          },
          {
            "type": "html",
            "text": "\nIn practice firms don't use off-the-shelf tools for such because they can't customize them enough, and also because such tools have not provided convenient and flexible web interface yet. Plus, they are expensive. I agree that such example as-is is too limiting. But a company could build on it to get what they want. You can't do that with proprietary code.",
            "id": "b1491f808db9efbc964629cd1defca19"
          },
          {
            "type": "html",
            "text": "[Thing is there's all these different kinds of software out there that aren't reporting systems. The kind of work I and lots of programmers do require sophisticated algorithms and data structures. In short it involves computer <i>science</i>. If you'd ever done any work with data mining, financial analytics or even e-commerce web-apps]",
            "id": "e628cb281fc7a0c6a0423f8b5c2006dd"
          },
          {
            "type": "html",
            "text": "\nI have too. Why not an e-commerce example instead of university lab games?",
            "id": "80b3758940b700d2aa475e94de0136a1"
          },
          {
            "type": "html",
            "text": "[ you'd realize that paradigms, data structures, etc are all necessary because you never know what may come up next. The <i>narrowness</i> of your experience is why you believe so firmly in your particular [[Golden Hammer]].]",
            "id": "c91e48015de3cf43976aa4eb909a4d57"
          },
          {
            "type": "html",
            "text": "\nI have admitted that my experience is limited to a specific niche. \"General purpose\" topic was to explore them under other niches.",
            "id": "4b5f65e1c9de4a4f9ac57fc71879998b"
          },
          {
            "type": "html",
            "text": "[I've looked at your website over the years and you keep proposing the same sorts of problems. I keep finding myself saying: with those criteria I'd use a database. But when people propose problems that would require you to broaden yourself you start name-calling and various other negative behaviours.]",
            "id": "70535b4dda314bcfe8ef1800283624dc"
          },
          {
            "type": "html",
            "text": "\nI have avoided responding to [[Flame Bait]] on many many many occasions here. You guys are no angels. Do I need to document and log your anti-social behavior to convince you? {You mean the way various people have logged your behaviour in the past? Don't you think that might be tempting fate just a little?}",
            "id": "afe8c0fbc637aa8ffb61b2c555343119"
          },
          {
            "type": "html",
            "text": "[How exactly does your MSAccess based db front-end show that tables are general purpose/fundamental/sufficient data-structures? Or that graphs are best represented using tables?]",
            "id": "0db193ba2e02cd7d155985e316da9c1c"
          },
          {
            "type": "html",
            "text": "\nDijkstra was pretty good at such algorithms. It may require a relational-version of Dijkstra's mind to produce an acceptable relational version. I probably could not fathiom a procedural solution either without lots of past experience on such problems. YOU did not come up with the Dijkstra algorithm, so why do you expect me to come up with a relational version? Your \"challenge\" is rigged. <b>Dijkstra did the hard work for you</b>. I don't claim to be as smart as Dijkstra on graph problems, relational nor procedural. A nice relational version is still a possibility, but not likely from me. That does not mean that relational stinks because <b>I couldn't do a procedural (dedicated struc) one quickly either. It is the nature of the problem, not a failing of relational</b>. This appears to be an intimidation ploy. You are comparing smart apples to dumb oranges (WRT graph algs). ",
            "id": "b91d7d7b33980c320f6dfc7f34c35a96"
          },
          {
            "type": "html",
            "text": "{This is exactly my point. I can build software _today_ using existing data structures. You can't.}",
            "id": "cc496507eb4cbf99ba80d8f709f9eaf3"
          },
          {
            "type": "html",
            "text": "\nIt is due to where past research has been, not an <b>in-born fault</b> of relational.",
            "id": "88f2f40bd3a1d4aa167ae52a767f7950"
          },
          {
            "type": "html",
            "text": "{ Instead you have to wait for the 'relational Dijkstra'. Moreover this shows your ignorance of the _nature_ of algorithms. You don't need to invent a new algorithm. All you need to do is _implement_ an algorithm. Do you understand the difference between these things?}",
            "id": "01f4054df90561b5aff954e3d4d8cee8"
          },
          {
            "type": "html",
            "text": "\nYou did not say which form would satisfy you because you seemed to focus more on SQL than the data container. Anyhow, the biggest problem I encounter in implementing that algorithm is figuring out how to read Python (if I mirror that version), and then finding a way to use recursion with tables. Most languages don't support pass-by-value tables. It can be emulated with a stack-like setup, but that gets kind of messy.",
            "id": "bc6e2201df380b9f8dfa75c2223f4fb6"
          },
          {
            "type": "html",
            "text": "[It's tail-recursive. Convert it to a loop. Or look at the pseudocode on the first link on [[Dijkstras Algorithm]], which has an iterative version with external data storage anyway. -jt]",
            "id": "f8f8ce211803651dddd37a4e29c58884"
          },
          {
            "type": "html",
            "text": "[If you were to join an open source project or two and try to build useful non-relational applications you'd learn that whilst databases are often useful they only solve a tiny sliver of the set of problems working programmers have to deal with.]",
            "id": "b23854ce43aa25d58a9838cd546d3513"
          },
          {
            "type": "html",
            "text": "\nI started out in this biz without relational. It sucked. Linked lists, arrays. Yuck! I have found hash maps are useful for quick interface stuff, but I don't store structures with them. {I'm not proposing the replacement of the databases with persistent hashmaps.}",
            "id": "90f14f6a4acf3223e4f4c74126cabdae"
          },
          {
            "type": "html",
            "text": "[You actually have valid ideas about the limitations of OO, hierarchies and the benefits of databases but it all gets clouded by your negative behaviours. I'll sign off by reminding you of Winston Churchill's quip that \"a fanatic is someone who can't change their mind and won't shut up\".]",
            "id": "977b2aa36e84795e0049ac5482b01c9b"
          },
          {
            "type": "html",
            "text": "\nI don't see a lot of open minds around here. This wiki is awash in argument by authority and argument by voting. ",
            "id": "61d2ea92b154bbaa32983d13ffae21e8"
          },
          {
            "type": "html",
            "text": "<i>{{ Voting is pretty uncommon, AFAICS. Anyway no-one takes it seriously. }}</i>",
            "id": "a5082975f1a988addf617937dd02f838"
          },
          {
            "type": "html",
            "text": "<i>You don't see open minds, because the things you suggest are typically ignorant. You ignore established research </i>",
            "id": "0c35f943ce71d006e612e939454ffe2c"
          },
          {
            "type": "html",
            "text": "\nThere is a lot of research on \"how to do X\", but very little objective on how \"why X is better than Y\". FP, OO, and P/R can pretty much solve most problems with the same amount of code and same amount of change-points per change scenarios. None has a clear monopoly. If there is such research, <b>please link to it!</b>",
            "id": "6994d724010644d195fa8997fab7371d"
          },
          {
            "type": "html",
            "text": "<i>If you think all those methodologies are equal, then you really are inexperienced.</i>",
            "id": "d4e1896cec2ee00142067910c5e9dc91"
          },
          {
            "type": "html",
            "text": "<i> and then promote you're own ideas as if you're some kind of ignored unsung genius. You want people to pay attention, then learn how things are done before trying to change them. No scientist would be accepted without following established protocol,  just as no one will listen to a programmer who completely ignores established practices without offering up anything better.</i>",
            "id": "74ebdcd982896b905bec217a8bfb95f2"
          },
          {
            "type": "html",
            "text": "\nProtocol my ass, software engineering is a messy art. See [[Discipline Envy]]. The \"discipline\" is full of fads and argument-by-authority.",
            "id": "8fdcd0485fa852860e8c359e4ff28684"
          },
          {
            "type": "html",
            "text": "<i>Learn to read there genius, that was a metaphor. Established protocol was referring to science, not programming.</i>",
            "id": "0a2af72efb4885838dcfe08a37c6106d"
          },
          {
            "type": "html",
            "text": "<i>You see, even if tables were in process and lightning fast, they would still be horrible for general purpose use in algorithms. The fact that you think tables sprinkled with sql is better than an object specifically built for a task, does nothing but show your inexperience in real programming. I know, I know, that's outside your domain experience, which is my whole point, you don't really know what you're doing.</i>",
            "id": "3842df61b9eed6dad6eeca1132b3597a"
          },
          {
            "type": "html",
            "text": "{Nobody knows everything. One should spend at least about 7 years in a given domain to get a reasonable feel for it and watch changes come and go in it. If a person lives 70 years, working 40 of those, then they can cover only about 5 or 6 domains under ideal timing, and probably 3 under more realistic conditions. Thus, nobody can know everything about every domain.}",
            "id": "586181167c8b910e2de929d1c946bc6f"
          },
          {
            "type": "html",
            "text": "<i>Of course not, which is why you need to listen to what other people who are much better than you tell you. You are  admittedly limited to a small domain, thus you should learn to pay attention to real programmers who are far more experienced than you. Far more experienced programmers constantly tell you that you are wrong, yet you constantly argue with them, and you wonder why no one listens.</i>",
            "id": "3a12e10f968496016e057cff8e163a27"
          },
          {
            "type": "html",
            "text": "\nI will agree that \"general purpose\" is perhaps too wide, if you agree that this example only shows that one person is crappy at graph algorithms (in any paradigm). Deal? -- top",
            "id": "15b6725b51e8afaee7cb3e59ff063bd4"
          },
          {
            "type": "html",
            "text": "\nBut, I still believe in the <b>potential</b> of tables. The world is just not ready for them yet. Your arguments appear to be a form of [[Querty Syndrome]]. -- top",
            "id": "b0adc016a45d2c0c66ff716cd2a63801"
          },
          {
            "type": "html",
            "text": "\nNo, you just think you are smarter than the world, which is why no one listens. Tables are an inferior solution to most problems, that's why they aren't used. ",
            "id": "2c179a3fdad8f044d43ae46746f822cc"
          },
          {
            "type": "html",
            "text": "<i>You have not demonstrated it for \"most problems\". Only one, and it is mostly [[Qwerty Syndrome]], not an in-born fault of tables. And, it is not me that is \"smarter than everybody else\", it is [[Dr Codd]] that is.</i>",
            "id": "a0d5dec31c0fd0673e6c8abf9d57c166"
          },
          {
            "type": "html",
            "text": "\nTables are great for one thing, ad hoc queries of data. That's it, and that's what they are build for, and they do that better than anything else. But that is a very limited area, most problems don't require ad hoc queries, and are much better solved by other structures. Yes yes, we all know you don't agree with this, we can't help it you aren't educated in writing software.",
            "id": "59e0cf4eb9909540ba6af881dc437e45"
          },
          {
            "type": "html",
            "text": "<i>In my domain as I have encountered it so far, I am quite competent. Perhaps you are one of those people who wish real life was like university classes and keeps looking for that lost feeling by digging it out of any corner you can.</i>",
            "id": "0bd1bf29c8dad75d4f4b5d59704d492b"
          },
          {
            "type": "html",
            "text": "{No I'm what's called a programmer. I see you've decided to start the name-calling again. Pity it almost seemed like you were finally learning something.}",
            "id": "c5582ba5813a533a1d8594ce16532499"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "1-I wanted to see an attempt to query a graph using sql just so we could all agree on how painful it is to express complex logic/algorithms using _only_ SQL. I think we've all agreed that doing complex logic in SQL is far too painful for it to become then norm. Other programming languages are better for expressing logic.",
            "id": "301bed842afd6b89a0beb767d89062da"
          },
          {
            "type": "html",
            "text": "<i>Nobody ever suggested doing *entire* algorithms with SQL. At least not me. Like I said twice before, sometimes it will solve 90+ percent of a problem, and sometimes zilch. The net benefits for an entire application are positive in my experience.</i> {You have been advocating exactly that for half a decade. It's all in google groups for those who care enough to search.}",
            "id": "86ae8565de09da74900122cfaf02a25c"
          },
          {
            "type": "html",
            "text": "\n2- Maybe I'm a Python bigot but I'm shocked that you can't read the Python code linked to at the top. That's a deeply disturbing admission that makes me question your programming background. Perhaps you're suffering from [[Anti Experience]]? In which case there's no point trying to have a conversation with you because you won't have the foggiest notion what I'm on about.",
            "id": "dd5c6b49e05f3a619db67d41e5e50a0e"
          },
          {
            "type": "html",
            "text": "\nOh well at least the shallowness of this page: [http://www.geocities.com/tablizer/langopts.htm www.geocities.com] makes sense now.",
            "id": "bda6124238aefbe55a2587e7e944c70a"
          },
          {
            "type": "html",
            "text": "<i>If you use instant-Python-readabily as a litmus test for general IT intelligence, then I guess I flunk. I studied Python a bit a few years ago, but found some of its syntax and conventions odd.</i> {I just found that it indicates that you can't read code. Which suggests you can't write code which suggests that there's no point in trying to talk to you about code. It's especially damning given that you claim to have studied the language. It wouldn't have been so bad if you'd been living on a desert island and had never seen Python before.}",
            "id": "56a8ba18a6c9fbb9aa9e8019fc43067a"
          },
          {
            "type": "html",
            "text": "<b>Handling Change in Requirements</b>",
            "id": "864ad1a964664bb0dc4880ce6fd32bcc"
          },
          {
            "type": "html",
            "text": "\nRe: <i>[[Anti Experience]]: refers to people who have been doing things wrong for so long that it is actually worse to have them on your team than it is to have inexperienced people.</i>{Just about sums you up.}",
            "id": "c167a854d14ab99d0617862790547d2e"
          },
          {
            "type": "html",
            "text": "\nFor my domain as I experience it, tables are a Godsend. You can perhaps accuse me of over-extrapolating my experience in one niche to other niches, but inside is another thing. I *have* used dedicated structures multiple times where table engines were unavailable, poorly implemented, or not permitted. I see no magic in them. They are not change-friendly. I think the problem you encountered <b>adding weights to your structure is indicative if this problem</b>. If requirements rarely changed, dedicated structures (DS) may be indeed the way to go. But I see change left and right. That is the world I live in. If your world is different, I apologize for over-extrapolating into it and bothering you. There have been 3 demonstrations of change problems with DS here. I made a decent case WRT change-handling.\nIf requirements don't change, perhaps tables are a little more code and a little slower. However, when requirements do change, they handle it better overall. (At least in my domain.{Which consists of building reports on top of databases. And for people whose domain consists only of building static web pages then html is the perfect language. Most of those at least have the sense not to advocate using HTML for everything.})",
            "id": "65cad2c6a5a81b8e54eab8eee2fe4c08"
          },
          {
            "type": "html",
            "text": " Speed",
            "id": "2c33559632172e74d9b15f43d2df3ccd"
          },
          {
            "type": "html",
            "text": " Initial simplicity",
            "id": "30cb4c57ae198fbdfbe4df97c349914c"
          },
          {
            "type": "html",
            "text": " Change-friendly",
            "id": "940bd6c99bb53e3da22a88544cfdace8"
          },
          {
            "type": "html",
            "text": " Consistency",
            "id": "af67c0b2cbbfbdaa34f108855528abe8"
          },
          {
            "type": "html",
            "text": "\nI will for the sake of argument give you the first two. But you have not demonstrated the 3rd nor 4th.",
            "id": "fe6576511b2c4e76111941534da47f50"
          },
          {
            "type": "html",
            "text": "\nSee [[Are Business Apps Boring]]",
            "id": "caad8488982931ca6fa7694f2580c8d6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "<b>Summary Lessons Learned</b>",
            "id": "203533ad49101c9b4dff0754d59eb03a"
          },
          {
            "type": "html",
            "text": "{Somebody greatly altered this, and I disagree with the changes. Perhaps we should re-org it into a pro-con list since there is no agreement with the summary. See the formatting near the bottom of [[Are Tables General Purpose Structures]].}",
            "id": "1564b5d4ab16ad588f04b03bfa6059d0"
          },
          {
            "type": "html",
            "text": " SQL requires the usage of other languages to express algorithms, but may simplify the calculations involved.",
            "id": "ed829cde2bb16957f5748f12c3a68bd9"
          },
          {
            "type": "html",
            "text": " The \"permanent\" data table seems to have weathered the addition of a weighting factor better than a map of lists. The map of lists had to be changed to a map of maps.[That's because it never had weights. Show an example of a real table built using SQL both with and without weights. Then you can say this. Otherwise this is just scurrilous lie.]",
            "id": "86868da36a21fdda554f3a848fefc343"
          },
          {
            "type": "html",
            "text": " There is a disagreement about how widespread the need for formal graph algorithms is.[The disagreement has top on one side and Dijkstra, Euler and the rest of the world on the other side.]",
            "id": "0fb1e1009c8d8890c07a495f875e5fe8"
          },
          {
            "type": "html",
            "text": " Some feel that tables structure-wise better absorbed the addition of weights. (Whether this translates to behavioral advantages or not is unclear.)[Only top feels this way and that's because he didn't implement anything. Imaginary code is always so much more flexible than real code.]",
            "id": "0e7c371864dc4e2093eb1c921e48a785"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "<b>Summary of Arguments</b>",
            "id": "47fc47401bee7851c7e773464cd9a347"
          },
          {
            "type": "html",
            "text": " Claim: SQL could not be found that implements the algorithm",
            "id": "4a1a528e1713bdc4bd2b799dd4c2b3f4"
          },
          {
            "type": "html",
            "text": " Pro-Table: SQL is not the only nor best relational language",
            "id": "dcc4e39d51b456bcb3adb680c105871e"
          },
          {
            "type": "html",
            "text": " Anti-Table: It has not be done in another run-able relational language so far, only pseudo-code.",
            "id": "55b3ff11cbfca1906df1e419e6688fa8"
          },
          {
            "type": "html",
            "text": " Claim: Past algorithms are biased toward dedicated structures rather than relational techniques because relational is newer.",
            "id": "75700514bf2b8d3a7e7d6ae4044072c4"
          },
          {
            "type": "html",
            "text": " Anti-Table: Well, they have been demonstrated to work in run-able languages",
            "id": "8f997d2e8a5647e401a3cf6f5f79a4af"
          },
          {
            "type": "html",
            "text": " Pro-Table: Because Dijkstra did the hard work for you",
            "id": "006ff387ff910e676679315791c4dde0"
          },
          {
            "type": "html",
            "text": " Anti-Table: Well, at least he finished",
            "id": "7e311990c39b6aed6d477a0a44844cf2"
          },
          {
            "type": "html",
            "text": " Pro-Table: That does not speak to what relational is potentially capable at the hand of a relational graph-whiz.",
            "id": "e0b3c361c3e716756f55cf99932b605d"
          },
          {
            "type": "html",
            "text": " Anti-Table: To date that is a fictitious being.",
            "id": "f4df41aa547d511dfdb26050507f9bf6"
          },
          {
            "type": "html",
            "text": " Claim: The \"permanent\" data table seems to have weathered the addition of a weighting factor better than a map of lists, which had to become a map of maps.",
            "id": "26c7beb393bae88da65a790b33eb7ea2"
          },
          {
            "type": "html",
            "text": " Anti-Table: That is moot because you never showed an algorithm for it.",
            "id": "a3f28e5e5c6706a19f0131621a4410c1"
          },
          {
            "type": "html",
            "text": " Pro-Table: At least it could store the extra information without changing containers.",
            "id": "07899f396654d423127d18eac5333aa8"
          },
          {
            "type": "html",
            "text": " Anti-Table: Not good enough until you show execution too.",
            "id": "e42f3e4f8027a8540bd9df9098f6fc6b"
          },
          {
            "type": "html",
            "text": " Anti-Table: The change impact could have been reduced by putting an OO wrapper around it.",
            "id": "e31e19adb7c04b879b1401cb3cb9a3ef"
          },
          {
            "type": "html",
            "text": " Pro-Table: You have not shown such a wrapper. A wrapper that allows open-ended column numbers will probably start to look relational.",
            "id": "924a6538b53b09ec379fc9fedacf7240"
          },
          {
            "type": "html",
            "text": " Anti-Table: And you have not shown run-able relational code",
            "id": "86833d46391e0add3fef326ac6217637"
          },
          {
            "type": "html",
            "text": " Neutral: Both sides are missing a demonstration {new listings since added below}",
            "id": "a26e123140626a44293bf42b4d4a005f"
          },
          {
            "type": "html",
            "text": " Claim: The need for graph algorithms are not very widespread in practice",
            "id": "dab3c8c11844b2f3f50b0d7f525d68b2"
          },
          {
            "type": "html",
            "text": " Anti-Table: I see them all the time",
            "id": "603b424768ae8f7a2b4bbd4efed79f07"
          },
          {
            "type": "html",
            "text": " Pro-Table: I have never seen the need for them in production",
            "id": "fb54c6e2446dab74f2305869feb1c22d"
          },
          {
            "type": "html",
            "text": "(Note: the indentation level has exceeded browser capabilities)",
            "id": "5ce800e28ed1afb3a63ae85dc9e8974c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "\nRe: <i>Some feel that tables structure-wise better absorbed the addition of weights.</i>",
            "id": "8e50fcc94119893ead2905e808a3ff99"
          },
          {
            "type": "html",
            "text": "\nI disagree. One relational 'implementation' was provided using a pseudo-language. In other words it wasn't real code. ",
            "id": "d73c48689675641d9b9b6ef20c56c22a"
          },
          {
            "type": "html",
            "text": "<i>I was referring to the \"container\", the structure without consideration of the algorithm. In theory relational divorces table design from usage (other than adding or deleting attributes or tables if not used). One should not have to alter tables just because an algorithm changes. (Work tables may still be needed, but that does not affect existing data.)</i>",
            "id": "17d55df9f7f6b61d275476c94da8b481"
          },
          {
            "type": "html",
            "text": "[The container is worthless without the algorithm. This discussion is about implementing an algorithm, which the [[Relational Weenie]] hasn't even offered up and implementation yet. You just lost this argument.]",
            "id": "752201c3630b98489c3eba4e95fc294a"
          },
          {
            "type": "html",
            "text": "{I lost interest. Maybe I will come back to it another day.}[Is this your cute little way of admitting you're wrong?] {Believe what you want to. Honest, I have no interest in this. It does not relate to actual stuff I see at work.}",
            "id": "cf95a0fe8a73acdfb16b0b0c93c1496e"
          },
          {
            "type": "html",
            "text": "\nSecondly that implementation used weights from the beginning so it did not <b>adapt</b> to weights. It had weights already. ",
            "id": "320b8951d7c4c48e6f10c73853b1f0fa"
          },
          {
            "type": "html",
            "text": "<i>I did not mean it that way. If it started out without weights, one only has to add a column to an existing table. This is compared to changing the container altogether (from list to map). The first approach does not require a change to existing data nor any existing algorithm that uses that data (assuming it won't need weights).</i>",
            "id": "90da25dce03ca1e33e7a8a775045c1c7"
          },
          {
            "type": "html",
            "text": "\nThirdly the actual working code that was provided adapted pretty well to the addition of weighting. The only thing missing was some kind of layer that provided encapsulation of the underlying data structure behind an interface. Hmm doesn't that sound like an object?",
            "id": "4f831afabf129e97ca7845060f8c8e16"
          },
          {
            "type": "html",
            "text": "<i>Or a database. A database should be considered an interface, not an implementation.</i>",
            "id": "baaadb5a4a73086a064268a673aea4f4"
          },
          {
            "type": "html",
            "text": "\nReally? Is it Oracle? Is it MySQL? Is it MS-SQL? DB2? Postgres? Jet? A tab-delimited flat file? XML? An interface is typically used to hide this. This kind of algorithm shouldn't concern itself with explicit storage details, like which flavor of SQL syntax will work with the chosen tool, or what the magic incantation is to produce a connection to a data source.",
            "id": "d2f14f8833070b7db6dd366640edeafe"
          },
          {
            "type": "html",
            "text": "<i>It is not always possible to map and wrap divergent interfaces one-to-one. Wrapping has limits. For one, interface A may assume a feature that implementation X simply does not support. It would be interesting to see your dedicated structure wrappers, by the way. I bet the more generic they become, the more they will resemble a table interface.</i>",
            "id": "7f507294926b88edba1b13d3e70ac4a0"
          },
          {
            "type": "html",
            "text": "\nTrue, not every implementation provides every feature. It's a question of priorities: for an app, what's more important, the feature or the flexibility? You can either code to the [[Lowest Common Denominator]], or add [[Capability Querys]] to the code, and hopefully, degrade gracefully.",
            "id": "e06dc0d2bd7e0665419761d8c71914ad"
          },
          {
            "type": "html",
            "text": "\nHow do you define 'table interface'? If table interface == SQL, then the answer is no. If table interface == associative array of records, well, that's pretty generic, isn't it?",
            "id": "7e828ce9f3f725f1ab169c55990d4c48"
          },
          {
            "type": "html",
            "text": "\nWhat do you need for the algorithm? SQL's main strengths are aggregate queries (summations), relational queries (joins), and interesting subsets (complex WHERE). If the algorithm doesn't need those, then those features don't need to be in the interface. Specifically, these kinds of queries aren't likely to be needed by typical graph algorithms. SQL can't do a topological sort.",
            "id": "15ac4133d0b0f8f61820ea90f0f3ea6d"
          },
          {
            "type": "html",
            "text": "<i>Perhaps not, but perhaps there are algorithms were it can do a large part of the work. Like I said many times, SQL and/or relational rarely do the entire job in applications I work on, but rather help out a lot with \"pre-processing\" kinds of stuff. How to do with with graph algorithms, I don't know at this point. I haven't done any since long ago in school, and am thus rusty.</i>",
            "id": "ba49a0aeb3fdaaf2292a1f14debc08f1"
          },
          {
            "type": "html",
            "text": "(please take a look at this topological sort: [http://www.danbala.com/python/tsort.py.html www.danbala.com] and see if there are ways SQL could help.)",
            "id": "1f3418ef1b7fb12e49aa4883170ad04a"
          },
          {
            "type": "html",
            "text": "<i>{{This is another example of code that would benefit from manipulating graphs via a relational interface. Currently it will only work with a specific representation, using a <b>list</b> of edges [(from, to) pairs], even though there is no reason for the edges to be ordered.}}</i>",
            "id": "34ec3373d69c9c695b4afa73bae43074"
          },
          {
            "type": "html",
            "text": "\nThe point about putting storage behind an interface is that this is <i>something that is likely to change.</i> Putting it behind an interface keeps this change from cascading through your code. For any particular app, if you're _certain_ it's not going to change, you can go ahead and code to a specific implementation - but in the long run, <i>you're probably wrong</i>.",
            "id": "2b0b53e4c4c4bb268d056548c71d30b1"
          },
          {
            "type": "html",
            "text": "\n[[Databases Are More Than Just Storage]]. Besides, even with inter-vendor differences, databases are still often better future-proofing than dedicated structures.",
            "id": "9e608969da31c2a3e9f578eed8145d98"
          },
          {
            "type": "html",
            "text": "<i>Why are databases often better future-proofing than dedicated structures?</i>",
            "id": "beb02557bae728ac9b85d4820940290c"
          },
          {
            "type": "html",
            "text": "<i>How do the additional features of databases apply to graph algorithms?</i>",
            "id": "c3f9a561d512644577d9fc319470afd7"
          },
          {
            "type": "html",
            "text": "\nRelational thinking generally assumes that any given piece of information may be used by different tasks, people, departments, etc. in the future. Thus, it tries not to build data layouts that are coupled to any particular usage. In my domain this has been a smart assumption to make. (I won't speak for other domains, however; it gets me into trouble.) Future uses of a given piece of information may have nothing to do with graph algorithms. For a few hundred nodes I see no real problem with copying some info into maps and lists for processing, but this may not extrapolate to hundreds of millions of nodes.",
            "id": "0bb13582c34946bf8c7b51f041502fd5"
          },
          {
            "type": "html",
            "text": "<i>Database Views can be used to decouple layouts from usage. This point seems to me to be mixing levels of abstraction.</i>",
            "id": "0c189924d5e992284d66ae943f8bf30c"
          },
          {
            "type": "html",
            "text": "\nPerhaps \"layout\" was not the best word to describe what I was trying to say.",
            "id": "e4474edcbf8316b79a43ab729d7646a4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "[\nYou do realize that we're talking about encapsulating <i>behaviour</i> behind an interface. Not encapsulating data storage. Graphs can be stored in a large number of ways but the relational model/SQL are not sufficiently expressive to implement the majority of the standard algorithms. The lesson to draw from this is that whilst relational is a good way to store data it's a poor way to express behaviour. Therefore in algorithmically sophisticated applications (i.e anything that requires recursion, graphs, deep maths, etc) databases are relegated to mere data storage.",
            "id": "48e6123229e8b03c788e94d073ee310e"
          },
          {
            "type": "html",
            "text": "\nI'd also like to point out that your usage of the word \"interface\" is unique. That's not what the rest of the world considers an interface. Please define how a database can be an interface? The rest of the world considers a database to be an implementation. Communicating with people who have unique and idiosyncratic definitions of common words is...challenging. Either they're ignorant of the standard definitions or they're iconoclasts who wish to obscure the shallowness of their ideas behind proprietary jargon.",
            "id": "125fa4ee4022c444fced5e0c383a38d2"
          },
          {
            "type": "html",
            "text": "]",
            "id": "6da8d3a7a0429a111c7f5c5f534b2713"
          },
          {
            "type": "html",
            "text": "\nRather than calling somebody stupid or odd, or general [[Argument From Authority]] or [[Argument From Votes]]; why not establish some clear criteria for the difference between an interface and an implementation. That would be a more sociable and scientific approach.",
            "id": "94d57ea825c18249fc3d02a0d08ee4b6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "\nRe: <i>but the relational model/SQL are not sufficiently expressive to implement the majority of the standard [graph] algorithms.</i>",
            "id": "f8ffa9ff414e84de4fcf425e34a66ac5"
          },
          {
            "type": "html",
            "text": "<i>{{SQL: not interested. The relational model: yes, of course it's sufficiently expressive.}}</i>",
            "id": "b71682ca416a71f350063cc0ac4bb385"
          },
          {
            "type": "html",
            "text": "\"Standard\" by who's measure or proclamation? I agree that the existing algorithms in the literature are not very relational-friendly, but that does not mean that such is not possible.",
            "id": "b98eeddfcea7aac04bda4a42589f85da"
          },
          {
            "type": "html",
            "text": "<i>{{The existing algorithms in the literature are <b>defined</b> in terms of relations (or multirelations, a.k.a. tables). A faithful implementation of the [[Relational Model]] would just allow you to express the mathematics more directly, separating the choice of table representation from the expression of the algorithms.}}</i>",
            "id": "272a6ceaddcbe3a412e2d002246f2a3b"
          },
          {
            "type": "html",
            "text": "\nI will be happier if you replace \"standard\" with \"existing\" or \"known\".",
            "id": "144427c353dcc44971e6c223ab1c1a8c"
          },
          {
            "type": "html",
            "text": "[You're not seriously claiming that there are algorithms out there that will be better with relational but we don't know them yet? When something is described as lacking [[Turing Complete]]ness they're not just expressing an opinion they're describing a fundamental limitation. That means there are things you just cannot and will not ''ever' be able to express with that thing. Don't blame me that's just life.]",
            "id": "961b98703a6c0cb05e04b64cc90ca9fc"
          },
          {
            "type": "html",
            "text": "\nI did not mean the <i>entire</i> algorithm, but rather some kind of pre-processing to simplify the sequential part of the code. I don't know if such exists or not. I have no interest in playing with this problem, for I consider it mostly an academic toy. If you disagree, then so be it.",
            "id": "f0161ae9c1f6d29f305cb76bd2dea635"
          },
          {
            "type": "html",
            "text": "<i>Mathematical algorithms are already wonders of simplicity, that's what math is all about. Tables don't simplify algorithms, because they can't do anything, Sql doesn't simplify algorithms because it's not capable of expressing them, code however is quite easily capable of directly implementing the algorithm, and thus nothing else is needed and anything else would only complicate the algorithm. Sql is good for getting the necessary data into memory, nothing more.</i>",
            "id": "7e3864e0a4e6f22c717fc8da1e135eb0"
          },
          {
            "type": "html",
            "text": "\nI disagree. The amount it helps varies widely from algorithm-to-algorithm, but it is quite often helpful.",
            "id": "616f1957abb6a19088f8dffa1506547d"
          },
          {
            "type": "html",
            "text": "[If it is <i>often</i> quite helpful as you claim then give examples of algorithms where this 'pre-processing' takes place and where it was helpful.]",
            "id": "4e3942b2b77876cd9f029d41fb8cf610"
          },
          {
            "type": "html",
            "text": "\nSee how simple the SQL is in [[Dot Product In Many Programming Languages]].",
            "id": "766b4dc1bcd40c9e97befeaba54031f5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "\nRe: <i>If table interface == associative array of records, well, that's pretty generic, isn't it?</i>",
            "id": "b3b73920683a096c6d8f322f98ba5c2f"
          },
          {
            "type": "html",
            "text": "\nThat would not be sufficient because it has only one key or \"look-up\" criteria. ",
            "id": "8e6ae3deb8bfd19d30fdf69fe5dfae65"
          },
          {
            "type": "html",
            "text": "<i>A set of records could have multiple associative arrays for lookup, and the key for an array could be multiple fields.</i>",
            "id": "af75ab23379ce08bfc45a0af3b596bd9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "I did once see an implementation of trees in Relational technology, it was quite impressive how he managed to get node insertion and searches implemented without a recursive query. As I recall, he put two numbers by each node. He counted depth-first, incrementing the count going both down and up, and put by each node both the down and up numbers. Thus he could tell with a simple query whether a needed node was below any given node (target node number between the query node numbers), and could insert using a collect and iterate rather than a recurse. Of course, this is a TREE not a GRAPH, but it was still interesting. -- [[Alistair Cockburn]]",
            "id": "369c0a44117ba4835bad5d98b9dc3b34"
          },
          {
            "type": "html",
            "text": "\nSome dialects of SQL have built-in tree-oriented operations. As far as I know, relational rules do not rule out the addition of tree operations, such as traversals starting from a given node.",
            "id": "2fbe5570db0cbd2a5fb9cabfc0cfe28c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "By the way, I have a question and don't know whether the answer exists or not, but I'm not in this branch of algorithms.... [[Shortest Path With Time Decay]] is where I moved the question to. -- [[Alistair Cockburn]]",
            "id": "37490b1dbdf7693d1f570ab4313508e3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "\nHere is a [[Cold Fusion Language]] version of the algorithm that uses RAM tables and lists. I noticed that the Python version does not change the structure that stores the node info, so passing table copies repeatedly as variable/object parameters is not necessary to use essentially the same algorithm. The Python version essentially just queries a \"global\" (pass by ref) navigational structure, which can just as well be a relational table. (Note that Cold Fusion's internal table engine is a bit buggy because they hastily tried to strap a static-typed addon into a dynamically typed language, but the problems do not show here.)",
            "id": "aa33ae78d83d434a26e7bbea4e2686b8"
          },
          {
            "type": "html",
            "text": "\nThe indentation is a little messed up because tabs and spaces got mixed.",
            "id": "dae787018a0bd16159eb224586c931c8"
          },
          {
            "type": "code",
            "text": " <!--- Cold''''''Fusion Path-finder version --->",
            "id": "37e5c7ec9c8f7b1b92ce2a80e5dce966"
          },
          {
            "type": "code",
            "text": " <cfset graph = queryNew(\"fromID,toID\")>   <!--- create a temp table --->\n <cfset myAddRow('A','B')>\n <cfset myAddRow('A','C')>\n <cfset myAddRow('B','C')>\n <cfset myAddRow('B','D')>\n <cfset myAddRow('C','D')>\n <cfset myAddRow('D','C')> \n <cfset myAddRow('E','F')>\n <cfset myAddRow('F','C')>  ",
            "id": "9ed980017ec24352f670697ef3f52012"
          },
          {
            "type": "code",
            "text": " <cfdump var=\"#graph#\">  <!--- to inspect the table --->",
            "id": "c3fecf42d0229b435541c83a27f24ae7"
          },
          {
            "type": "html",
            "text": "Results:<br>",
            "id": "06a9190da8c7701c76e2d455c7421b6c"
          },
          {
            "type": "html",
            "text": "<cfoutput><br>A-to-D:<br>#find_path('A', 'D')#</cfoutput> ",
            "id": "b4646c54b85e06a05e3041f79003d794"
          },
          {
            "type": "html",
            "text": "<cfoutput><br>D-to-A:<br>#find_path('D', 'A')#</cfoutput> (should be empty)",
            "id": "47edda2663dca4c5a060e05ceba2fad8"
          },
          {
            "type": "html",
            "text": "<cfoutput><br>B-to-C:<br>#find_path('B', 'C')#</cfoutput> ",
            "id": "1b4ef14b2ed3b1c95f74110c02afcb14"
          },
          {
            "type": "html",
            "text": "<cfoutput><br>E-to-A:<br>#find_path('E', 'A')#</cfoutput> (should be empty)",
            "id": "ff82fb1f1459f045e004825724489159"
          },
          {
            "type": "html",
            "text": "<cfoutput><br>E-to-D:<br>#find_path('E', 'D')#</cfoutput> ",
            "id": "c3769f53ba07769007de5815ab74273c"
          },
          {
            "type": "code",
            "text": " <!--- --------- ---> \n <cffunction name=\"find_path\">\n   <cfargument name=\"startNode\">\n   <cfargument name=\"endNode\">\n   <cfargument name=\"pathList\" default=\"\">\n   \n   <cfset var usePathList = listAppend(pathList, startNode)>\n   <cfif startNode is endNode>\n      <cfreturn usePathList>\n   </cfif>\n   <cfquery name=\"finder\" dbtype=\"query\">\n      SELECT * FROM graph WHERE fromID = '#startNode#'\n   </cfquery>\n   <!--- make list of toID's so that we don't have to keep the query \"open\" --->\n   <cfset endList = valueList(finder.toID)>    \n   <cfloop list=\"#endList#\" index=\"iTo\">\n       <cfif Not listFind(usePathList, iTo)>\n     <cfset newPath = find_path(iTo, endNode, usePathList)>\n     <cfif listLen(newPath)>\n               <cfreturn newPath>\n     </cfif>\n       </cfif>\n   </cfloop>\n   <cfreturn ''>\n </cffunction>\n <!--- ----- --->\n <cffunction name=\"myAddRow\">      <!--- add a row --->\n <cfargument name=\"p_from\">\n <cfargument name=\"p_to\">\n   <cfset queryAddRow(graph)>\n   <cfset querySetCell(graph,'fromID',p_from)>\n   <cfset querySetCell(graph,'toID',  p_to)>   \n </cffunction>",
            "id": "2b6360bac2088889b1e688a772fb2864"
          },
          {
            "type": "html",
            "text": "\nOutput",
            "id": "60628bf24ae625121b918d55a57b4921"
          },
          {
            "type": "html",
            "text": "Results:<br>",
            "id": "06a9190da8c7701c76e2d455c7421b6c"
          },
          {
            "type": "html",
            "text": "A-to-D:<br>A,B,C,D ",
            "id": "31b9099ce426faf30d3c0e771344f12b"
          },
          {
            "type": "html",
            "text": "D-to-A:<br>(should be empty) ",
            "id": "57aba7e9bdccd6f545a6a9834ae5bc52"
          },
          {
            "type": "html",
            "text": "B-to-C:<br>B,C ",
            "id": "0f7fbba0e3fa2d45a0f2d19d17d5cd1a"
          },
          {
            "type": "html",
            "text": "E-to-A:<br>(should be empty) ",
            "id": "307f3401409901e066154898e55d0033"
          },
          {
            "type": "html",
            "text": "E-to-D:<br>E,F,C,D ",
            "id": "92f5bb0f6c24c7613dd13b55a286b843"
          },
          {
            "type": "html",
            "text": "\nHere is an experimental <b>non-recursive</b>, non-list cursor-based [[Fox Pro]] approach. I used to use similar techniques to traverse trees. Such a technique can be useful if a recursive search would fill up RAM so that one wants to use disk instead. (Note that RAM caching is normally used, so it is not \"pure\" disk.) Besides, it is easier to stop and re-start such a thing if using tables. This algorithm incrementally fills a work table with path segments, and uses the prior set of segment matches to find the next set and marks them to avoid revisiting them. In a way it emulates a recursive call stack. It does not currently work for invalid paths because it will get stuck in an infinite loop, but could probably be fixed by adding a \"unique\" check before copying in records from the data table. I couldn't find a way to do that in less than about 12 lines, so skipped it for now. The output could be made cleaner also.",
            "id": "a1dc6f1dc35f4d260e5a05f263a8ae1a"
          },
          {
            "type": "html",
            "text": "",
            "id": "3df80b4388b3de00a00bce0ee549c93c"
          },
          {
            "type": "code",
            "text": " set exact on        && typical context settings\n set deleted on\n set talk off\n close data\n set safety off",
            "id": "d63ad4d595d9f52865812517d131cf5e"
          },
          {
            "type": "code",
            "text": " do find_path with 'A', 'D'\n do find_path with 'B', 'C'\n do find_path with 'E', 'D'",
            "id": "0c52034337074536174c2e62fe596394"
          },
          {
            "type": "html",
            "text": "",
            "id": "3df80b4388b3de00a00bce0ee549c93c"
          },
          {
            "type": "code",
            "text": " procedure find_path\n parameters startNode, endNode",
            "id": "e0b25a673a88cdd94c29c68b029cb17b"
          },
          {
            "type": "code",
            "text": " ? \"Looking from \" + startNode + \" to \" + endNode",
            "id": "c770e4fde54b56d01acdffa7656177f1"
          },
          {
            "type": "code",
            "text": " select B\n use wrkGraph.dbf alias work\n zap",
            "id": "fd7768022e842cc23c808025e35ebbbe"
          },
          {
            "type": "code",
            "text": " curNode = startNode\n reloop = .t.\n foundIt = .f.\n curRec = 0",
            "id": "8f782b8df4afb27c439f6005b1c567d8"
          },
          {
            "type": "code",
            "text": " select work\n do while reloop\n  append from graph.dbf for fromID = curNode  \n  if .not. eof() .and. curRec <> 0\n    temp = curRec + 1\n    goto &temp\n  endif\n  if eof()\n    goto top\n  endif\n  if eof()\n    reloop = .f.\n  else\n    if toID = endNode       && found target\n      reloop = .f.\n      foundIt = .t.\n    else \n      if mark <> 'X' \n        curNode = toID\n        replace mark with 'X'\n      endif\n    endif\n  endif\n enddo",
            "id": "9e8343d82029ffd559dc4b762640849f"
          },
          {
            "type": "html",
            "text": "--- Mark Nodes for Display ",
            "id": "409ea0e5ad6c46be698bed5a6720051a"
          },
          {
            "type": "code",
            "text": " if foundIt\n  goto bottom\n  replace mark with 'P'  && mark nodes on Path\n  curNode = fromId\n  skip -1\n  do while .not. bof()       && loop backward\n    if toID = curNode\n       replace mark with 'P'\n       curNode = fromID\n    endif\n    skip -1\n  enddo\n else\n  ? \"Not Found\"\n endif",
            "id": "50496eedae7bbda15bdc0f7bd27d31a4"
          },
          {
            "type": "html",
            "text": "--- Display the result nodes",
            "id": "fe6b22a5e8923c34c76aa7f668146403"
          },
          {
            "type": "code",
            "text": " list fields fromID, toID for mark='P' off ",
            "id": "510a56d6f6e49b20866c8cf11db6bae7"
          },
          {
            "type": "code",
            "text": " return",
            "id": "4e7bd113f1a9e14089da38fda7875e5d"
          },
          {
            "type": "html",
            "text": "end****************",
            "id": "f71b74a8c4eb61e53a6dc8af47dceb60"
          },
          {
            "type": "html",
            "text": "(Table columns for both tables are fromID, toID, mark. But the original data table does not really need the \"mark\" column.)",
            "id": "9d54816bb05277566ee6c7c7301e2abb"
          },
          {
            "type": "html",
            "text": "\nOutput:",
            "id": "e5ac7879814cb74f7cb8782bf5d316c6"
          },
          {
            "type": "code",
            "text": " Looking from A to D",
            "id": "bbc0b9fe03a12a118bad8e3cccc0f84c"
          },
          {
            "type": "code",
            "text": "  FROMID            TOID            \n  A                 C               \n  C                 D               ",
            "id": "bf74a31b896a73b9ff0827e4ae2c08e8"
          },
          {
            "type": "code",
            "text": " Looking from B to C",
            "id": "e62c65e83529c8b93ad022c72915dbbe"
          },
          {
            "type": "code",
            "text": "  FROMID            TOID            \n  B                 D               \n  D                 C               ",
            "id": "ae29550e7c23c5cf76cbdfcfdf2e8260"
          },
          {
            "type": "code",
            "text": " Looking from E to D",
            "id": "d094032ef2dd0bd1ec8ea87432f1865b"
          },
          {
            "type": "code",
            "text": "  FROMID            TOID            \n  E                 F               \n  F                 C               \n  C                 D               ",
            "id": "84b33abca77da51e47316da86e0e86a0"
          },
          {
            "type": "html",
            "text": "- Top",
            "id": "89f9b0da00d1fdf7dc77627c187fbdeb"
          },
          {
            "type": "html",
            "text": "(Formatting note: Due to a wiki bug, Mozilla displays a single blank line as 2)",
            "id": "9bb56155aa4bd6fd8a049763f29d8fb5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "\nFor those interested in seeing other \"relational\" solutions to graph algorithm problems check out:\n[http://www.cs.ucla.edu/classes/winter06/cs240A/solutions/cities.txt www.cs.ucla.edu]",
            "id": "5c57b648c84e20b5b90762ec358d6a7b"
          },
          {
            "type": "html",
            "text": "\nClosest cities in SQL(99):",
            "id": "ecc8727dee6a0b4fa7890658039c0bb4"
          },
          {
            "type": "html",
            "text": "\nWITH  ALLD(city1, city2, Miles)",
            "id": "eb23d64d8eaf7654b9b911a5811a08c1"
          },
          {
            "type": "code",
            "text": "    SELECT * FROM distance\n         UNION\n    SELECT D.city1, ALLD.city2, D.Miles + ALLD.Miles\n    FROM distance as D, ALLD\n    WHERE D.city2=ALLD.City1",
            "id": "e119ef5f5ac965edf7167b203441706c"
          },
          {
            "type": "html",
            "text": "SELECT city1, city2, min(Miles)\nFROM ALLD\nGROUP BY city1, city2",
            "id": "609c6056377e37de41b600f54344d38d"
          },
          {
            "type": "html",
            "text": "\nFrom the discussions above it seems that relational/set theories are formalized and proven methods that haven't or at least hadn't been fully implemented.  Whereas Object-Oriented techniques/heuristics don't seem to be based on any formal/proven (or even provable theories), but are being fully implemented.  Go figure.",
            "id": "288cdf0250598b38d26269616ad1b457"
          },
          {
            "type": "html",
            "text": "\nAll the solutions presented here exceed in computational complexity Dijkstra's algorithm. None use a heap to extract the min (sorry a table is not a heap). Some do heinous cross products to get an adjacency list.\nThe SQL given above will not terminate if there are cycles in the graph. See [http://www.thescripts.com/forum/thread184469.html www.thescripts.com]",
            "id": "ebe6fd547d5e3c97da3626da9d987e16"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "876b24be8f434e81fa4fbd449157089c"
          },
          {
            "type": "html",
            "text": "[[Category Example]], [[Category Data Structure]], [[Query Traversal Versus Recursion]]",
            "id": "98365a07a270781fe160e577f15ce140"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?GraphAlgorithmsWithTables c2.com]",
            "id": "21306196861c0ea408c6ebad765ea97e"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707719888155
    }
  ]
}