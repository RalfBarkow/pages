{
  "title": "Language Pissing Match",
  "story": [
    {
      "type": "html",
      "text": "\"My language can beat up your language\"",
      "id": "c6a66f9575bfc273b1eebf336c98c6ae"
    },
    {
      "type": "html",
      "text": "\nChoose your language. Fight to the death.",
      "id": "43fd83eb9984c75ab70735ff61c65c4f"
    },
    {
      "type": "html",
      "text": "\nSee also:",
      "id": "b591946f41481dc81e79bb1079a8237b"
    },
    {
      "type": "html",
      "text": " [[Csharp Vs Java]]",
      "id": "a3459e9717d533222a6ccff58c117f75"
    },
    {
      "type": "html",
      "text": " [[Csharp Vs Cpp]]",
      "id": "9f8ca936f7fb5a809236901a273e124a"
    },
    {
      "type": "html",
      "text": " [[Forth Vs Lisp]]",
      "id": "f3564a5074878b824619163770f22667"
    },
    {
      "type": "html",
      "text": " [[Java Discussion]] (should be called [[Java Considered Harmful]])",
      "id": "2187f6d6129e7eaed752e9fc6ddf6cd0"
    },
    {
      "type": "html",
      "text": " [[Java Vs Cpp]]",
      "id": "7aca3e7b3d6f9a097b2ccfbe23521624"
    },
    {
      "type": "html",
      "text": " [[Java Vs Smalltalk]]",
      "id": "ac8812a85ee4c56f366824905c5bb6da"
    },
    {
      "type": "html",
      "text": " [[Ruby Vs Smalltalk]]",
      "id": "6bc20eb8e6c3c6b03ae95e545f8cc457"
    },
    {
      "type": "html",
      "text": " [[Ruby Instead Of Smalltalk]]",
      "id": "c3f86e4cebad3f34093c49f8d25b06fa"
    },
    {
      "type": "html",
      "text": " [[Language Requirements For Programmer Productivity]]",
      "id": "b2c7c8ee0dc6decdfb6eda35b7d937d1"
    },
    {
      "type": "html",
      "text": " [[Python Vs Perl]]",
      "id": "7a98dc84f25a42f9535055ccd771d04a"
    },
    {
      "type": "html",
      "text": " [[Python Vs Ruby]]",
      "id": "405ff4c5a2a62de7a2661ed7c271515f"
    },
    {
      "type": "html",
      "text": " [[Self Dot Syndrome]]",
      "id": "c7f73ce7061664afbfb0be5d14f342db"
    },
    {
      "type": "html",
      "text": " [[Semi Colon]]",
      "id": "6111dfb1b4c08a249ffb77569826e51a"
    },
    {
      "type": "html",
      "text": " [[Smalltalk Instead Of Python]]",
      "id": "c2955f9fa1fd8a3e49b3999ca989a38c"
    },
    {
      "type": "html",
      "text": " [[Smalltalk Vs Eiffel]]",
      "id": "c06bf9cd46aea84e36c5659fcffdeaab"
    },
    {
      "type": "html",
      "text": " [[Syntactically Significant Whitespace Considered Harmful]]",
      "id": "cf51502118e8c92bb79a7bff951bfb61"
    },
    {
      "type": "html",
      "text": " [[Wiki Polarization]]",
      "id": "e2d1f474973e16eb19f97c406d8e699e"
    },
    {
      "type": "html",
      "text": " (Lot of topics on dynamic vs static typing)\nAlso note:",
      "id": "9f86ad3d6033fe1c062082cafd95e1b5"
    },
    {
      "type": "html",
      "text": " [[Programming Language Popularity]]",
      "id": "41469d2edae4438e09171abc4a3a0cd8"
    },
    {
      "type": "html",
      "text": " [[Paradigm Pissing Match]]",
      "id": "fc8a7494cfd9446037d9bf0d3378d6eb"
    },
    {
      "type": "html",
      "text": " [[Horses Vs Cows]]",
      "id": "270e2eb31fcbccd5f1460db16cd1a289"
    },
    {
      "type": "html",
      "text": " [http://www.deftcode.com/archives/every_language_war_ever.html www.deftcode.com]",
      "id": "f17aaff7f7082d6e90b95e03237f5f9f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "<i>Is anyone else sick and tired of seeing this term everywhere, especially on this Wiki? It seems like \"Language Pissing Match\" gets used to describe almost </i>any<i> comparison of programming languages, regardless of the tone the discussion takes or the facts presented in it.</i>",
      "id": "1f94df229821f1ee4b3f2f8a4e3e0b10"
    },
    {
      "type": "html",
      "text": "\nI think it's rather humorous, actually.",
      "id": "d97e122c1851c75ab4818b330662685d"
    },
    {
      "type": "html",
      "text": "<i>It's like calling someone an anti-Semite or comparing somebody to Hitler; a tool used to stifle serious debate and discussion.</i>",
      "id": "6f4015b0c1f787bcfe30717223dc9ee5"
    },
    {
      "type": "html",
      "text": "<i>Some of the pages linked to above contain very interesting discussions and novel ideas, yet some smartass still condemned them all as \"pissing matches.\" Apparently making an analogy to urination proves how mature you have become and how superior you are to everyone else.</i>",
      "id": "b1856cf425552a0e70f8cc013ea53c00"
    },
    {
      "type": "html",
      "text": "<i>The truth is that some languages </i>are<i> better at certain tasks than others, and some are just plain better period. If you don't believe that, then try writing desktop applications in straight C or anything at all in COBOL.</i>",
      "id": "b990bf8566a8fc937ac5c1dcdd0ac02d"
    },
    {
      "type": "html",
      "text": "<i>The state of programming languages will never advance unless we are able to objectively compare existing languages with one another and identify and isolate their failings. If you are somebody who feels the need to chime in during one of these discussion and accuse everyone from atop your high horse of being involved in a \"pissing match,\" please consider keeping it to yourself.</i> -- Steve",
      "id": "c810bd3c932e680a9f3d1ace3a83a31f"
    },
    {
      "type": "html",
      "text": "\nI agree that the term should perhaps be scrapped for something more presentable. It is generally meant to convey a sense of never-ending emotional debates among proponents of various languages or tools. But, I don't think objectivity will ever play a big part in solving or preventing such battles, because [[Most Holy Wars Tied To Psychology]]. That is just the nature of the beast. -- top",
      "id": "402380436ae9b34ad7e6325c9645f780"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "<i>Don't worry. It'll be great. We'll [[Start From Scratch]] in Smalltalk rather than COBOL.</i>",
      "id": "2a929bb460cfcc77fc454b333c097400"
    },
    {
      "type": "html",
      "text": "<i>...if the apps matter that much, maybe Eiffel would be a better bet.</i>",
      "id": "5ff150cf855b7da3abffccebe9fa95d6"
    },
    {
      "type": "html",
      "text": "\nSerious question:  Why would Eiffel be better than Smalltalk?",
      "id": "30d75f8cee953b8562f2d7af8a250170"
    },
    {
      "type": "html",
      "text": "...depends on what \"better\" means. The comment about Eiffel comes from the fact that Y2K problems at least partly stem from undocumented assumptions that change in the medium to long term (decades). Smalltalk excels by being flexible and relatively easy to refactor, but it doesn't focus on type checking and [[Design By Contract]]; Eiffel does. Y2K is about implicit assumptions that change;\n[[Design By Contract]] addresses this directly, and Eiffel supports [[Design By Contract]] from the ground up.",
      "id": "9214f540c5ba86f6160599a33314e4f6"
    },
    {
      "type": "html",
      "text": "<i>I don't think that [[Design By Contract]] would have helped with Y2K. To write your contracts you have to think there will be a problem. Nobody thought there would be a problem. They would have made explicit assumptions rather than implicit ones. Yeah, DBC would be very good at showing you were your software fails... after the Y2K date rollover.</i>",
      "id": "a1d357c1ae6b219baa022a68af1001ee"
    },
    {
      "type": "html",
      "text": "<i>I can't answer why one would use Eiffel. I'd use Smalltalk because it's more productive, for me, than C++ or Java. And yes, I've used all three. --[[Ron Jeffries]]</i>",
      "id": "a65a426dae9971868563ed8814b7f573"
    },
    {
      "type": "html",
      "text": "\nBertrand Meyer's account of who's using (his version of) Eiffel can be found at: [http://eiffel.com/eiffel/projects/list.html eiffel.com]",
      "id": "91b1c0428c400c6934d30ba8b66fc0e9"
    },
    {
      "type": "html",
      "text": "<i>Dunno whether Eiffel is theoretical or practical. But isn't Chrysler paying people with a Smalltalk program? Aren't there very large and significant Smalltalk trading programs running on Wall Street? Doesn't TI have a semiconductor fab running in Smalltalk? Aren't those fairly practical?</i>",
      "id": "0be44dd3faa4cb7de4223d0192840da7"
    },
    {
      "type": "html",
      "text": "\nDoes the distinction between whether a language is <i>theoretical</i> or ",
      "id": "f35f9eaa0187717027f13ec5da0017c5"
    },
    {
      "type": "html",
      "text": "<i>practical</i> really matter? <i>(In theory, no. In practice, yes. -- SH)</i> So long as the language is usable for real projects, does it matter where it comes from? (After all, Smalltalk came from Xerox Parc - not really a \"practical\" environment when compared with the origin of C++.) ",
      "id": "f588a8e646412e9f43b60239db822bc9"
    },
    {
      "type": "html",
      "text": "\nThere's definitely a trade-off between short-term productivity, functionality, and the sort of effort that has to be made with assertions and [[Design By Contract]]. At one extreme you prove every little thing, and at the other extreme you speculatively hack. You have to decide where to pitch your development according to the forces at play: time to market, longevity of the application, complexity of the app domain, criticality of the application...  There's no harm with C++ or Java if you make an informed choice. (Written with no intention of stirring up a [[Language Pissing Match]] ... honest.) ",
      "id": "77efe64e3fd0222731bd87c3bc12af91"
    },
    {
      "type": "html",
      "text": "\nAh, you're all full of baloney. The future belongs to Perl, which has everything all them other languages has and a whole lot more. You can always write it faster, better and freer in Perl - no tradeoffs, no compromises, no bulldust. -- [[Peter Merel]]",
      "id": "8c1848d96ab97b852728465a176c354b"
    },
    {
      "type": "html",
      "text": "\nPerl <i>is</i> a compromise.",
      "id": "7faa0b7baa3eabbf0d5a1941852ca5c3"
    },
    {
      "type": "html",
      "text": "\nThat's because [[Larry Wall]] is a linguist first and scientist second (er, third maybe). As with natural language, his <i>intention</i> was to roll all the best words (in Unix) into one hairball (he would say <i>snowball</i>). I love it; and it almost worked.",
      "id": "6b9c8e062b36b883a3fa996405270652"
    },
    {
      "type": "html",
      "text": "<i>But missing values are not zero, Larry!</i>",
      "id": "3045db62fcfa28072be2430232e6486e"
    },
    {
      "type": "html",
      "text": "<i>The road to hell is paved with melting snowballs.</i> -- [[Larry Wall]] (quoted by [[Paul Taney]])",
      "id": "54830463799fd3cd35c429b2da1548e5"
    },
    {
      "type": "html",
      "text": "\nThe future <i>did</i> belong to Perl, but PHP came along and stole it away ;)",
      "id": "29f32f5e852baf272f66ef6b828f5be0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "I couldn't just let this one fly, sorry. [[Php Language]] is okay to get the job done, but it's far from \"complete\" as an OO language. Now that the new [[Zend Engine]] is out, there's a little hope. Version 2 has support for namespaces (inner classes, actually), private members, cloning, exceptions ... a bunch of good stuff all in all. But it's only available in PHP v4.3, which hasn't been released as I write this. Also, if you want to compare it to Perl, you probably don't want to compare CPAN to PEAR, unless you're a masochist. PHP has its place under the sun, under a rock :) -- [[Robin Millette]]",
      "id": "aed1c5bab9c94f511a0c3914f904e70e"
    },
    {
      "type": "html",
      "text": "<i>Sorry, old boy (or gal), but PHP is here to stay. It is supported all over the world and doesn't even need a shebang line. Therefore, one script can supply multiple hosts - just like Javascript. Oh, well.</i>",
      "id": "3dfecea6124e9fe136f9dd1df00696f6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "I'm curious where Ada95 fits it the above Smalltalk/Eiffel comparison. I know its much more ... conservative ... than C++. -- [[Wayne Carson]]",
      "id": "69c0cf64ea627e8aeebd963223ddf2b8"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "<i>\"why didn't Smalltalk ever take off in the mainstream of OO languages?\"</i> I don't know. When you realize OO itself was more or less invented in 1967 and didn't seem to take off until the 1990s, the specific failure of Smalltalk isn't so surprising. You might also ask why Lisp didn't take off. This is a very conservative industry. I expect Smalltalk demanded too much power for the time. Having been rejected, it never got reconsidered.",
      "id": "f0c0b937d15287c33d0c70032b2ff8f9"
    },
    {
      "type": "html",
      "text": "\nC++ took quite a while to catch on, too. On the PC, the only compilers were two-step things that generated C, which had to be compiled in turn. I personally date its success from Zortech's single-step compiler, whose sales shocked everyone (much as Borland's Pascal did earlier). It was a while before Borland caught up with a compiler of their own. Microsoft were years behind that, and their compiler has lagged in features for most of its history - this shows up in the design of Microsoft's class libraries. Nowadays Microsoft is almost synonymous with C++, which is ironic given how slow they were to embrace it.",
      "id": "6fa7c603753fd3bbdbeca752936ee279"
    },
    {
      "type": "html",
      "text": "<i>\"Why did someone have to invent a Java?\"</i> C++ succeeded partly because it was close to C. Java learned that lesson. In my opinion it offers no improvement over other contemporary languages, especially Sather and Eiffel, but the hordes of C/C++ programmers would not accept anything that looked so different. So Java was necessary to move the C/C++ world onto garbage collection and so forth.",
      "id": "ee6e933bcc56ff28f7dc7dc881248f58"
    },
    {
      "type": "html",
      "text": "\nThe [[Java Byte Code]] is another matter. Arguably the Internet needs an efficient, secure, portable bytecode. The timing was just right to exploit web browsers and anti-Microsoft feeling. The big shame about the bytecode is that it be so tied to Java. <i>Although [[http://www.adahome.com/Resources/Ada_Java.html www.adahome.com] Ada can be compiled to Java bytecode]</i> Now it has crowded out other, more general virtual machines.",
      "id": "99d9efa536c0a3969a67165b103d2630"
    },
    {
      "type": "html",
      "text": "\nIf you're asking about Java specifically in the context of Smalltalk, then the main difference is the static type checking. A big section of the industry believes static, manifest types are desirable for software engineering.",
      "id": "5473eb11c72774530393221ff86564c5"
    },
    {
      "type": "html",
      "text": "-- [[Dave Harris]]",
      "id": "beec456606a3ad8059a3bddeb15f39f2"
    },
    {
      "type": "html",
      "text": "<i>This has been my experience also. Any theories as to [[When Is Manifest Typing Considereda Good Thing]]?</i>",
      "id": "5b8f573c77d2df58e128a77555dfeae9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "If so many people think static, manifest types are so important, then why is [[Visual Basic]] so popular?",
      "id": "9ae2c87b212191dc10b178c517219eac"
    },
    {
      "type": "html",
      "text": "[I've heard it said that VB was the <i>real</i> competition for Smalltalk, prior to Java. -- [[Paul Chisholm]]]",
      "id": "052f3c17088eea2bd2df5820b206fa34"
    },
    {
      "type": "html",
      "text": "<i>You can code VB programs using (mostly) static, manifest types.</i>",
      "id": "6052d528ef5421e3251a8c1c12ce6a39"
    },
    {
      "type": "html",
      "text": "<i>Set \"Option Explicit\" in every form, code module, and class module.</i>",
      "id": "6a144e84cb5809039263bb3a95cb65c9"
    },
    {
      "type": "html",
      "text": "<i>Avoid using the \"Variant\" data type.</i>",
      "id": "199151d56b3a047b686d40bd69dfa155"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "I just have to say that I am totally entranced with Smalltalk right now, despite never having programmed in it. I've worked in C++ for years and years and years, but through conversations here and elsewhere the ramifications of garbage collection and late binding have finally sunk in for me. In C++ we go through a lot of grief to make subclassing the same as subtyping. In Smalltalk it seems that they do not have to be tied at all. I really look forward to learning it. It just seems that the typed languages are, for lack of a better word, \"diluted\" OO.",
      "id": "3e9f211bb7bab87a7eb57de511d54876"
    },
    {
      "type": "html",
      "text": "\nSide note on the [[Language Pissing Match]] and Y2K: I remember reading that one reason why so many financial folk are into Smalltalk these days is because the integers do not overflow. Crystal clear. One less way to lose money. Also, it occurs to me that in languages as dynamic as Smalltalk, you are less inclined to paint yourself in a box with the the fixed length problem: \"Oops, I only allocated enough space for two digit years.\" Further, as [[Ron Jeffries]] has pointed out, if objects know how to save themselves, then that decision is localized.",
      "id": "ca430eebc3b8c716d2a317d6eb34f2a0"
    },
    {
      "type": "html",
      "text": "\nI think I'll have to get one of the [[Definitive Smalltalk Books]].",
      "id": "dd3551ebe8d294b38b384615418bd726"
    },
    {
      "type": "html",
      "text": "-- [[Michael Feathers]]",
      "id": "5de27ead02f6bcefbf65a0bfd055eb00"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "Smalltalk is more dynamic. This shows up in its more powerful reflection mechanisms (which few programmers use, or need to use) and in its more reactive programming environment (though Java ones are improving). It has a more mature (and complicated) class library. It is easy to create new control structures with blocks. The Smalltalk environment is more customizable and open (not entirely good) and Smalltalk programs are easier to change. Last I heard, the best Smalltalk VMs were still faster than the best Java VMs, though that will certainly change before long if it hasn't already.",
      "id": "b4127b20e5f2e42a7e3fa295327fbd72"
    },
    {
      "type": "html",
      "text": "\nJava looks more like languages people have used before. This means that a C programmer can start playing around and get a Java program working the first day. Smalltalk has a steeper initial learning curve. Java libraries are designed for multithreading, and distributed programming and the web have been part of Java from the beginning.",
      "id": "1177d7d3205c060b176f0d0c97622c02"
    },
    {
      "type": "html",
      "text": "\nThe biggest difference is that Java has had fabulous marketing, leading to mindshare. There are more books, more web pages, more consultants who claim to know Java, more CEOs who have heard of Java and are willing to let their\nemployees learn it, more companies starting Java projects, and more companies trying to supply the Java market. Java proves that engineers who want to change the world should understand marketing. -- [[Ralph Johnson]]",
      "id": "b5d28f4a392496669094727a3549b1c2"
    },
    {
      "type": "html",
      "text": "<i>Doesn't Microsoft prove the same thing? -- [[Brett Neumeier]]</i>",
      "id": "dd89025452d9fb09ee6462b9686015a9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "Two comments: one quick, one longer. The first is about ",
      "id": "baa1e89f6be45b862c31d1f84115e779"
    },
    {
      "type": "html",
      "text": "<i>Java looks more like languages people have used before.</i>",
      "id": "552586557db1587fbaf3b4de6afd12fa"
    },
    {
      "type": "html",
      "text": "\nThis is, to me, the biggest advantage Java has over Smalltalk. And it's an absolutely huge advantage. For example, I have gone to talks by Bertrand Meyer. And I have thought \"Hmmmm. Interesting.\" I've even, during the Q&A parts, harangued him on minor points of the Eiffel language. But, despite the fact that I view Eiffel as a well-designed language, I have never actually written code in it. And I probably never will. ",
      "id": "75ccd989c7652bcd73b2c2494a6df32e"
    },
    {
      "type": "html",
      "text": "\nI don't ever ever ever want to spend time learning syntax again. Learning syntax is a waste of time, a waste of effort, a waste of valuable brain cells that could otherwise be [[Watching Gilligans Island]]. Far too much programmer time is already spent absorbing and reabsorbing the same things over and over and over again. ",
      "id": "751bb79033cc65a7dcb3ee662065f29f"
    },
    {
      "type": "html",
      "text": "\nThe dream is, of course, to separate syntax from semantics. Change the programming language semantics, but keep the syntax everyone knows. Which is, roughly, what the [[Meta Object Protocol]] does, and what the designers of Java \ntried to do. ",
      "id": "f1bec357c4a13d07fb5d20c56c1a97e5"
    },
    {
      "type": "html",
      "text": "(Side note: I have downloaded VW3.0 [it's free] because the idea of a [[Refactoring Browser]] may just be one of those things that will convince me to learn a new syntax.) ",
      "id": "ed05de973fdeb11b0a969e10dbb1aeee"
    },
    {
      "type": "html",
      "text": "\nThe second comment is about <i>late-binding</i>. It's not entirely obvious to me that Java and Smalltalk have the same notion of \"late binding.\" ",
      "id": "1afa7f990b8e4addca211c6beb552db9"
    },
    {
      "type": "html",
      "text": "<i>Question moved to [[Smalltalk Late Binding]].</i>",
      "id": "bc1f09c59c5674efa705782586377ae9"
    },
    {
      "type": "html",
      "text": "-- [[William Grosso]]",
      "id": "75952ff8a635698069dbeed9c43854ab"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "Another major reason that Java took off (exploded, actually) while Smalltalk never seemed to make much of a ripple: availability of development tools. When I decided to learn Smalltalk ten years ago, there were only two environments available for the Mac (Smalltalk/V from [[Digi Talk]], and Smalltalk 80 from [[Parc Place]]). Other platforms had only one option; none were all that cheap for an individual not working on a corporate budget. This was all due to [[Parc Place]]'s licensing restrictions. Even today, there are not all that many environments available, although I have seen a free version of Smalltalk/V for Windows.",
      "id": "fef4fb9506b839d90cec59c11769f278"
    },
    {
      "type": "html",
      "text": "\nJava, on the other hand, was free. Anyone could download a fully functional compiler and debugger from Javasoft and start coding. There are quite a few decent IDEs priced under $200, and Javasoft has been licensing many, many companies to make Java tools.",
      "id": "a06e057f8efbbe8fac5700ca943a07b8"
    },
    {
      "type": "html",
      "text": "\nThis is much the same reason that Eiffel and Objective-C never went anywhere. They were never really given much of a chance in the market because of licensing restrictions.",
      "id": "6561c63ecf73b4c78e26478ed252c6ad"
    },
    {
      "type": "html",
      "text": "-- [[Russell Gold]]",
      "id": "06656eba87cfdc3a1ca5f561b5958a74"
    },
    {
      "type": "html",
      "text": "$200? Kawa, an IDE certainly good enough for learning Java, is shareware, and registration is $50, for students $25 ([http://www.tek-tools.com www.tek-tools.com]). What's more, you don't even have to buy any book to get started - several tutorials can be downloaded for free. -- [[Falk Bruegmann]]",
      "id": "5a30c1fb1bee4e5f003eb5bcadcf4b5a"
    },
    {
      "type": "html",
      "text": "\nWill the choice of language for enterprise applications be affected by whether the IDE is $25 or $250? Will the decision which language a student fools around with be affected by how much compiler, IDE and tutorials cost him? Remember, Java probably was downloaded by tens of thousands of individuals before it was used for the first enterprise projects! -- [[Falk Bruegmann]]",
      "id": "916d9d4a0ff157dcc33632a24fb4b3d6"
    },
    {
      "type": "html",
      "text": "<i>I'm not sure I see the connection between your first two sentences (which I take as rhetorical) and your last. I do believe that student costs are significant (most students don't have a lot of money to spend on software). -- [[Russell Gold]]</i>",
      "id": "3565fa3d93af7410bb632eaaaeeafbb9"
    },
    {
      "type": "html",
      "text": "\nExactly. The ease of availability increases the number of developers who know the language (learning on their own), which increases the market awareness, which increases enterprise adoption. Smalltalk is a hacker's dream language, and had it been free, would probably have taken off. -- [[Russell Gold]]",
      "id": "18f380deebed057dba4ea818020a5e48"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "Hmmm, what would it take for Smalltalk to be Internet-enabled? The capability to generate Java bytecode? As this is available now, is there more to it?",
      "id": "7a8c16ca8c97dde9cd6aba5a20f71897"
    },
    {
      "type": "html",
      "text": "-- [[Kiel Hodges]]",
      "id": "00ff2823235d5d9cd7b65228e57c2ace"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "The original article that prompted the article mentioned above:",
      "id": "4e1e555d464769c7d05f9101e202b81f"
    },
    {
      "type": "html",
      "text": "\n[http://www.onemind.com/smalltalk.html www.onemind.com] [<i>[[Broken Link]]</i>]",
      "id": "8f8d7f5bc77c00e3aa4253e205954570"
    },
    {
      "type": "html",
      "text": "\nanswers that question.",
      "id": "a11bf4c89d018bb5d03859516858079e"
    },
    {
      "type": "html",
      "text": "\nOn the other hand, its author, Jeff Sutherland, apparently a Smalltalk supporter, says: \"I estimate that the Smalltalk community has about one year to respond to this problem.\" (regarding competition from Java) and said this in June 1996!",
      "id": "c6ae01f8f2c90033b66a754a28bf1c31"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "Here's a cynical action plan for Smalltalkers who what to gain ground:",
      "id": "e8fa7514408b122edb6ca67868531c4d"
    },
    {
      "type": "html",
      "text": " Write a web-browser in Smalltalk which has a \"talklet\" tag - which loads and runs classes from a URL connection. (A talklet should have some well-known file extension, say .tlk) Call it \"[[Hot Talk]]\". The browser can double as an IDE for [[Hot Talk]] classes.",
      "id": "7da8684524b0acee31045b2bc01de7fd"
    },
    {
      "type": "html",
      "text": " Write plugins for Netscape and Internet Explorer which will handle .tlk files. The plugins are mostly the Smalltalk virtual machine with glue code. (This idea from [[Bertrand Meyer]]'s approach to plugging in Eiffel bytecode.)",
      "id": "965946473ba59aebbdc164ee43b42581"
    },
    {
      "type": "html",
      "text": " Investigate some kind of \"compatibility bridge\" with Java bytecodes. (Could use [[Fall Back On Reflection]].)",
      "id": "45d46a71e65c850b58bb6ac405195082"
    },
    {
      "type": "html",
      "text": "(Something would need to be done to approximate the java [[Security Manager]] class - I don't know enough Smalltalk to decide if this could be done effectively.)",
      "id": "ef888fcae9cb18e98ef495750b311c14"
    },
    {
      "type": "html",
      "text": "\nAs for giving it away, why not use Squeak - it's already out there...",
      "id": "3c399a1a42d8d8333e39c1275e5c217f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "I don't think Smalltalk will ever die, and some of its features live on in Java. The question Smalltalkers seem to want answered is, \"Why do C++ and VB (and now Java) dominate, instead of Smalltalk?\"",
      "id": "0877e8f56f51829ffb8d023b089ca629"
    },
    {
      "type": "html",
      "text": "\nIMHO, Smalltalk had no unsolvable problems, but had many issues that needed to be solved simultaneously:",
      "id": "593c07a2cd0278d2c4cf59c8fd55459a"
    },
    {
      "type": "html",
      "text": " Free/cheap versions? Digitalk had $100 implementations for years. GNU Smalltalk has been around for a while. Squeak has been available since at least October 1997. IBM's [[Visual Age]] has had a \"demo\" version.",
      "id": "e1ac85334c591ae6395920a38e67b06d"
    },
    {
      "type": "html",
      "text": " Source control? Built-in, little, or none (not even \"backup to floppy\" unless you really knew what you were doing); best in the industry available (a bargain for corporations, too expensive for hackers).",
      "id": "6594bc6326248fda9d1ef09faca2407f"
    },
    {
      "type": "html",
      "text": " Ability to create standalone executables? Available, but only for the expensive commercial implementations.",
      "id": "4d743af44767aeeb4726d93ce280c1bd"
    },
    {
      "type": "html",
      "text": " Lack of a standard? How badly has that hindered Turbo Pascal, and its successor, Delphi?",
      "id": "b363a4299f41b067df1d540ee0a846d6"
    },
    {
      "type": "html",
      "text": " Hunger for resources? It used to hurt that Smalltalk required four whole megabytes to run well. It's hardly an issue today.",
      "id": "ffd9029b40062a86b9e4d42e593641ec"
    },
    {
      "type": "html",
      "text": "\nWhat may have also hurt is Smalltalk's <i>very</i> limited exposure to university students ([[Ralph Johnson]]'s efforts notwithstanding). AT&T gave C++ to schools for almost nothing (like C and Unix earlier), professors taught classes with it, and graduates tried to apply it to the jobs they found.",
      "id": "8d7e45a865197e88632eb47b9a64e005"
    },
    {
      "type": "html",
      "text": "\nI enjoyed Smalltalk the one time my job allowed its use. I doubt I'll ever have another commercial opportunity to work with it. -- [[Paul Chisholm]]",
      "id": "29df6de27261630ff0107297e12c9f7d"
    },
    {
      "type": "html",
      "text": "\nThe only time I've run across Smalltalk in use in a commercial product setting was at Cybertek (Dallas, TX) who used it for their Life Insurance admin system's GUI.",
      "id": "f1ebce347e3c11cbfd7153de7b09a63a"
    },
    {
      "type": "html",
      "text": "-- [[Chuck Mc Corvey]]",
      "id": "2020f590b6e47723863b69bf7da2cee5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "I am always frustrated by debates about programming languages. Everyone sees their language as ultimately more powerful, <i>eloquent</i>, expressive or generally better than the others. ",
      "id": "e0a1e8cad79339bfe0cd58e1e299c28f"
    },
    {
      "type": "html",
      "text": "\nIs Smalltalk a better language than Java? Is Eiffel the best language around (perhaps we should all be doing DBC)? Is Python better than Perl because it is simpler and easier to grasp?\nI dunno. Most of the surviving programming languages out there all have features that best fit some application domain better than others. ",
      "id": "b0186ffb03ee1108814bc85f27d354b2"
    },
    {
      "type": "html",
      "text": "\nSome languages just feel right. If you grew up loving Pascal/Modula[123]/C/C++/Java, will Smalltalk ever <i>feel right</i>? If you cut your teeth on Smalltalk or Lisp, can you ever get used to C-like languages? If you can speak Perl fluently and eloquently, will (and should) you be won over by Python? And, if Java or C++ gets the job done, and (this is important) <b>solves</b> the user's problem, then isn't it the appropriate language to use?",
      "id": "34c432a8691a3c87741f67e80660a835"
    },
    {
      "type": "html",
      "text": "\nWith every product/project I approach, I look into my toolbox of languages (C, C++, Perl, Python, Java and perhaps one day Eiffel or Squeak) and see which one fits best. Once I choose that language, I become fanatical about it until the next project. Then again, maybe I am just a bit weird.",
      "id": "2ae69923bccf80ea7476267ba9a31710"
    },
    {
      "type": "html",
      "text": "-- [[Todd Coram]]",
      "id": "18f1d425950df80e2dbe0c1ba022fa6e"
    },
    {
      "type": "html",
      "text": "\nWhile I agree that having a full barnyard of languages is important to ensure that a wide variety of tools are available, it is <b>not</b> sufficient that any given language merely \"solves the user's problem.\" Really, the goal is to maximize the user's return on investment, whatever that investment may be. ",
      "id": "e8f7d74335cf287e497aafffb74ed167"
    },
    {
      "type": "html",
      "text": "\nIt is not as efficient to write a word processor in assembler/C as it is to write it in Smalltalk, and it is not as efficient to write a blit operation in Smalltalk as it is in assembler/C, although you could do either task in both.",
      "id": "9298b477a0658df56a38be0bcf6adba0"
    },
    {
      "type": "html",
      "text": "\nSome languages are better suited to a large set of problem classes than others; these are generic programming languages like C, C++, Java, Lisp and Smalltalk. Other languages are better at specific problems like Perl for text parsing (although Perl is becoming more and more generic every day) or [[Java Script]] for DHTML (although I've managed to hack [[Java Script]] into a real object-oriented language, it just isn't useful).",
      "id": "c1c3e077bb9e0150ba6b804b146fc8ea"
    },
    {
      "type": "html",
      "text": "\nAn old-timer programmer once said to me that he doesn't have the time or patience to learn new languages every week. My reaction was that, fine, don't learn the language, but if I do I can provide a higher return on investment than he could. Thus, I'll stand a better chance of getting the job. Never toss out a tool. -- [[Sunir Shah]]",
      "id": "16ae0711c80e428dd04ab6da4cdb9a7a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "<i>\"Why would anyone even use Eiffel or Smalltalk? Interesting theoretical languages, but practical in real world applications?\"</i>",
      "id": "ccca055a137cad416c32f34f9e27c865"
    },
    {
      "type": "html",
      "text": "<i>\"I have been in the Software industry since 1985 and have <b>never</b> encountered a commercial use of Smalltalk by anybody until coming here and hearing about the Chrysler project.\"</i>",
      "id": "15897b7348fca4e9d103df393971d8ae"
    },
    {
      "type": "html",
      "text": "\nSmalltalk may have originated in a research lab as a theoretical approach to teaching about programming, but by the time Xerox spun off [[Parc Place]] in 1987, Smalltalk was already in use in \"real world applications\". One of the earliest ones with which I'm personally familiar was [[The Analyst]] from [[Xerox Special Information Systems]]. This product, which was like Microsoft Office and the Windows desktop, with hypertext capabilities, in Smalltalk-80 way back in 1987, was in fairly wide use within certain US Government circles in the late 80s and early 90s. [[Texas Instrument]]'s [[Control Works]] debuted in [[Knowledge Systems Corporation]]'s booth at OOPSLA/ECOOP '90 in Ottawa, Canada. Perhaps [[Ward Cunningham]] could provide insight into Wall Street's use of Smalltalk (surely there must be a [[Wiki Page On Smalltalk Projects]] - each [[Gemstone Project]] is probably also a Smalltalk project).",
      "id": "2dea0317d9d4f4ace9f32a5e6b8802aa"
    },
    {
      "type": "html",
      "text": "\nAt [[Martin Marietta]] in the early 1990s we built a discrete-event simulation -based process analysis tool (before [[Business Process Reengineering]] and [[Work Flow]] were even buzzwords) with Smalltalk, [[Gem Stone]], [[The Analyst]], and some class libraries from [[Knowledge Systems Corporation]]. We used this tool to study launch vehicle manufacturing and launch operations processes for the Titan IV launch vehicle (as well as other processes), always trying to find ways to increase throughput and reduce cost or time-in-process per unit. This work is described in the proceedings of the Society for Computer Simulation's 1992 Object-Oriented Simulation Conference.",
      "id": "897c9aa01a33d7674ca90abad9d14ddf"
    },
    {
      "type": "html",
      "text": "\nFrom interviews, brief engagements, and knowledge of vendors' customers I'm aware of other industry uses (chemical, manufacturing, finance, transportation, telecommunications, utilities, pharmaceuticals), but I'll stick to uses that I can describe best from personal experience.",
      "id": "6252fde8753258d8be56859cdc7033bd"
    },
    {
      "type": "html",
      "text": "\nFrom personal experience again, I know that a very large western US cellular company deployed a customer service application with a Smalltalk user interface into multiple call centers housing a couple hundred customer service representatives (I'm also aware that very large, market leading package shipping company was working on a customer service app in Smalltalk, but don't know the details). And I've worked with an east-coast RBOC that uses Smalltalk in a billing application.",
      "id": "096818fcb96d42a980cbb846d3ef4d16"
    },
    {
      "type": "html",
      "text": "\nI'm also familiar with four commercial CASE tools and one product configurator written in Smalltalk. OOATool from [[Coad International]], circa 1991 (contemporary with [[Peter Coad]]'s Object-Oriented Analysis book), was written in SmalltalkV from [[Digi Talk]]. [[Ascent Logic Corporation]], founded in 1987 and still in business today, (www.alc.com), made its business on a Smalltalk-80 implementation of an upper-CASE / systems engineering tool called RDD-100 purchased by large government and commercial projects in the US and abroad. Ascent's competition, [[Vi Tech Corporation]], has a similar tool also written in Smalltalk and [[Gem Stone]]. And I think there was a company vending a requirements management tool with a SmalltalkV user interface, that was acquired by Rational. The product configurator, Classys, was sold by a company called Antalys that sold itself to Baan.",
      "id": "3a243b691fb58d1d098719128a2f9e15"
    },
    {
      "type": "html",
      "text": "\nIMHO these examples are typical of the types of applications at which Smalltalk excels: i) multi-tier business applications (customer service, billing) in which Smalltalk is used at minimum to implement a modern GUI; and ii) essentially shrink-wrap applications like Analyst, RDD-100, and Classys - although of tremendous complexity in the domain model or the UI (diagram editors, etc.) - that need to run on multiple platforms to maximize market penetration.",
      "id": "8e84e9d5ce0b68d5d5b6250de31e9be3"
    },
    {
      "type": "html",
      "text": "\nBoth types of application development effort benefit from an integrated development environment unmatched by anything in Java space, and from unparalleled application evolvability due not only to the development environment but also due precisely to Smalltalk's approach to typing and binding, and syntax (specifically in the exception-handling area). For an experienced Smalltalker these benefits translate to a productivity level that to date has been unattainable in Java. FWIW, I've been programming in Smalltalk since 1988 and in Java since 1997, and have worked on multi-tier applications, and applications with Web browser user interfaces, in both technologies.",
      "id": "d6ba9035ff86616f4ba5a482276cd558"
    },
    {
      "type": "html",
      "text": "\nWith respect to the latter type of application, everyone is always making such a big deal about Java being platform-independent. So what? [[Parc Place]] Smalltalk was cross-platform across Windows, MacOS, and several flavors of Unix for years and years. How much of Java's market penetration is due to platforms other than these?",
      "id": "b43247746d39923d1660fde5243d314a"
    },
    {
      "type": "html",
      "text": "<i>\"Why did someone have to invent a Java?\"</i>",
      "id": "cf2fbd8eed019e5bc8a42b0f607eb9ba"
    },
    {
      "type": "html",
      "text": "\nI hope nobody is suggesting that Java was invented specifically because \"Smalltalk didn't ever take off in the mainstream of OO languages.\" My understanding is that the original Oak language was invented to run microprocessors in toasters, etc. - not Smalltalk's target market. IMHO Java's success is a function of Sun's marketing (as [[Ralph Johnson]] observed) as much as any inherent technological superiority, and I concur with the above assertion that the market they reached was the vast market of folks who wouldn't have much cognitive dissonance with Java's syntax.",
      "id": "eefa784b1353eed82565fdb3a56749c2"
    },
    {
      "type": "html",
      "text": "\nI also concur with the assertions that as a presentation-layer technology, Smalltalk lost market share because of its price differences, footprint differences, and publicity differences in comparison with the competing technologies: yes, [[Visual Basic]], but also HTML and Java. However I'm not sure I'd agree with the assertion that Java is any easier to learn or use than Smalltalk. The ease-of-learning challenge in both cases comes more from gaining familiarity with class libraries, and good object-oriented design, than from gaining familiarity with syntax (and IMHO Smalltalk's is simpler and more uniform). The ease-of-use challenge in both cases comes from development environment support - and IMHO Java generally trails Smalltalk in this area, with the possible exception of [[Visual Age]] for Java, which has its own host of issues (isn't VAJ actually written in Smalltalk, forming another \"commercial use\"?)",
      "id": "126781ea489ac15953ac0dffd7b3e7d5"
    },
    {
      "type": "html",
      "text": "\nLate in the game the Smalltalk vendors began emphasizing Smalltalk's viability as a server-side technology (products like [[Visual Wave]] come to mind), but Java has much more standardization to offer in application server space than the Smalltalk community ever did, with things like the Servlet spec, the EJB component model, and a more viable selection of ORB vendors. I don't think the absence of a Smalltalk VM plug-in for Web browsers is a major factor - how many serious, \"real-world\" applications have sufficiently overcome the inherent issues to use applets for the presentation layer?",
      "id": "17d0b4aa1f43b895fc6bb665116c90c4"
    },
    {
      "type": "html",
      "text": "\nThe marginalization of Smalltalk in the mainstream market has been a gloomy thing to watch for old Smalltalkers, given everything Smalltalk has contributed to the world (go rent [[Pirates Of Silicon Valley]] sometime). Market dynamics caused the switch of horses several years ago. But there are worse alternatives than Java. Java is enough like Smalltalk that much of the design experience transfers, and I actually like the [[Separation Of Interface From Implementation]]. Java promises a level of standardization unachieved by the dialect-fractured Smalltalk community which, coupled with the ongoing amount of Java development and energy around Java, could help enable the [[Component Based Development]] approach described nicely by [[Clemens Szyperski]] in [[Component Software]]. My main gripe is the difference in productivity level.",
      "id": "5dc26a09d580b2f461e8deea2cac955d"
    },
    {
      "type": "html",
      "text": "\nAnd I don't think this discussion should be cast as a frustrating or regretted [[Language Pissing Match]] - what we're really chewing on here are the forces that drive the dynamics in the market of software development technology.",
      "id": "ecaec1a5b951d2b110d8dc674dc62bc6"
    },
    {
      "type": "html",
      "text": "-- [[Randy Stafford]]",
      "id": "874aed70d209c28cf6b1ceef2d0bbad4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "The comments people are making about Smalltalk's failure to compete effectively with Java remind me of this 1993 essay on Lisp's failure to compete with C:",
      "id": "9ee45c636d90025aa9294697d0827b33"
    },
    {
      "type": "html",
      "text": "\n[http://www.ai.mit.edu/docs/articles/good-news/good-news.html www.ai.mit.edu]",
      "id": "8b5c98ca9fb26f0ae212f5a136ee7a89"
    },
    {
      "type": "html",
      "text": "\nIf you don't have time to read this whole essay, at least check out the \"[[Worse Is Better]]\" section: [http://www.ai.mit.edu/docs/articles/good-news/subsection3.2.1.html www.ai.mit.edu]",
      "id": "ffca9970ffbb6285c1b0cac32c9ab6ad"
    },
    {
      "type": "html",
      "text": "-- [[Seth Gordon]]",
      "id": "e0790f99b34f814a2c5c8e88e35d2bec"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "While I see a number of excellent arguments, I think there is a [[Human Factors]] angle that I haven't yet seen addressed.",
      "id": "4830f5c60fc68699277355c7d38598b5"
    },
    {
      "type": "html",
      "text": "\nBackground: Almost four years ago, after programming in C and a little C++ for 10 years, I ran into a Smalltalker who, upset about the client's mandate to use Java instead of Smalltalk, decided to port the [[Visual Works]] framework to Java. So while I haven't written a line of Smalltalk, I have a little familiarity with how the framework was built (without the benefit of Smalltalk tools! Arg!)",
      "id": "c5119bc9b6e866784ff87c8230d31e31"
    },
    {
      "type": "html",
      "text": "\nI learned a lot, especially about OO, but about eight months later I ran off screaming and hollering. Why?",
      "id": "14fa5beb204b26b0e0867013e828f597"
    },
    {
      "type": "html",
      "text": "\nIt was the first time I'd ever seen tons of little methods, each one to two lines long. Smalltalkers love to maximize reuse and flexibility, which is great, but at what price? People with good memories might not think twice about this, but I have a horrendous short term memory, and I found myself spending most of my time spinning my wheels searching for the right method, instead of getting work done. Even with tools, I suspect there would be a daunting learning curve.",
      "id": "cd333e603f13e0b2561d7af0a3937f42"
    },
    {
      "type": "html",
      "text": "\nBut back to the point I'm trying to make: I suspect becoming familiar and productive within a Smalltalk environment requires not only time and effort, but also an innate intellectual capability that developers across the board may or may not have. This means you bifurcate your development community into those who can and those who can't, and as soon as you do that you're dead, you'll never hit critical mass because there will always be someone left out in the cold. And technologies that don't hit critical mass are forever doomed to defend their turf against those that do.",
      "id": "e0e04f1239e1894fc577008e6a4c1881"
    },
    {
      "type": "html",
      "text": "-- [[Eileen Sauer]]",
      "id": "abec8ba1b9e84fb2d137ccc4b2ce3a9a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "Thanks for an interesting new perspective, Eileen. But what implications might this have for refactoring? Does this mean that programs with longer (therefore fewer) methods are better, because it is easier to remember where their logic is? How to define better?",
      "id": "90b5d65b2b3506d3e472785384fd2b8f"
    },
    {
      "type": "html",
      "text": "<i>\"you'll never hit critical mass because there will always be someone left out in the cold\"</i>",
      "id": "6050753cd97c482179ce8a8b90bb6da5"
    },
    {
      "type": "html",
      "text": "\nTo achieve critical mass, IMHO, you don't have to avoid leaving someone out in the cold - you just have to attract *enough* people into the warmth. I don't think that Smalltalk failed to achieve critical mass because Smalltalkers like [[Composed Method]]. I think it failed to achieve critical mass for other reasons having to do with business decisions and market dynamics.",
      "id": "c7b24312a8fdbb69b090e4d59a51ed3a"
    },
    {
      "type": "html",
      "text": "-- [[Randy Stafford]]",
      "id": "874aed70d209c28cf6b1ceef2d0bbad4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "Hi, Randy, sorry it took a while; I was trying to keep this short but it's just not working.",
      "id": "02c6d2923fd10ce0af5ba48ee58bfdc3"
    },
    {
      "type": "html",
      "text": "<i>\"But what implications might this have for refactoring?\"</i>",
      "id": "705ac904d5f4b3266c9a670a20cd834a"
    },
    {
      "type": "html",
      "text": "\nFear not, I'm not one of those Blob goddesses. :) I Love refactoring, and I laughed when [[Martin Fowler]]'s book came out because I'd already been doing a lot of it on other peoples' code, often from say 800 lines down to 150 or 100 lines. It's the only method I know of to help non-OO people to see the light. I also agree with much of what I read in [[Composed Method]]; I think my methods tend to run 5 - 40 lines, with a healthy number of one-liners nowadays (it took a couple years). I cringe when I see long methods nested 7 levels deep.",
      "id": "fd661a956db151ab51ff1ddeeea9038c"
    },
    {
      "type": "html",
      "text": "\nWhen I think back and try to pinpoint what caused me to feel overwhelmed at the time, I suspect it was the layers upon layers of delegation. I remember at one point griping: \"Pass the buck, pass the buck, pass the buck... Who's doing the work???\" And again, while it may not bother a lot of people, I found it distressing because, having a bad short term memory, I'd finally get to where something was being done and by then I've totally forgotten what I was trying to do!",
      "id": "0ff71ad32b28d08387513403e0d85386"
    },
    {
      "type": "html",
      "text": "<i>\"How to define better?\"</i>",
      "id": "78777a3152ae1412a1977230a7fb7dd9"
    },
    {
      "type": "html",
      "text": "\nWe all know that Blob methods don't work. Unmaintainable; no flexibility or reuse. At the other extreme, I don't think tons of one-line methods with layers upon layers of delegation works either. Loss of comprehension, prohibitive learning curve for a non-trivial number of developers (unfortunately, [[Frank Sauer]] disagrees. He's also the Smalltalker who sent several of us screaming and hollering the first time around). Between those two is a bewildering spectrum of options, complicated by the fact that we all have our personal preferences and can't always distinguish between a right/wrong argument vs. opinion. :) So what is better? I'll recap what I think is fairly accepted at this point:",
      "id": "1fb81230c424527295a5e0fd5c515f3d"
    },
    {
      "type": "html",
      "text": " Decouple logically unrelated functionality.",
      "id": "4d307cb6fe5456a16d2f7084c5e30102"
    },
    {
      "type": "html",
      "text": " Design and refactor such that when you have to change something, you have to change it only in one place.",
      "id": "705e021c98368bf79b92f65013952c80"
    },
    {
      "type": "html",
      "text": " Try and avoid more than about 7-8 levels of indirection.",
      "id": "23a48ce7b29380c5f828289298dcc563"
    },
    {
      "type": "html",
      "text": "I read somewhere that people can generally handle a train of thought that includes up to 7 or 8 items, but beyond that they start dropping things. You can nest more, but you do so at the risk of losing comprehension.",
      "id": "1eb19cab00f33440b058ae076a5ade5d"
    },
    {
      "type": "html",
      "text": "<i>\"you just have to attract *enough* people into the warmth.\"</i>",
      "id": "43b71af08d55e21fa1cd2bca50d8385d"
    },
    {
      "type": "html",
      "text": "\nI fully agree. But what is *enough*? I think that's where Smalltalkers like Frank may have a problem. They're inherently an intelligent bunch with good short term memories and an ability to think outside of the box. They don't always see the limitations others have in getting to where they are. That's what happened on this particular project. What I saw was phenomenal - a small island of sanity in a room full of people running around like chickens with their heads cut off. Management would run up to Frank and say \"Help! Another change in the requirements! How long is it going to take?\" and Frank would say anywhere from 5 minutes to two days, and 90% of the time it was 5 minutes. He spoiled the client, and the system was successfully deployed on thousands of desktops. But, I also remember a time when Frank was scratching his head because a method was firing 10 times instead of once. When he finally traced a convoluted path and realized his events were propagating back, I realized, this is great but, this\nclient will have to keep him on call because there's always a chance that some bug will crop up that only he can fix. And sure enough, two years later, the client decided to switch to VB, because even with Frank training the client's IT staff, I don't think he was able to get them to a point where they could maintain it. So was the project a success or failure? It opened my eyes to better programming practices, so in that respect it was a success because he managed to get one convert. As to the others who left - you're not solving the problem of getting more non-OO people on the bandwagon, you're merely shuffling the problem around, and sooner or later you're refactoring their code again. The operation was successful but the patient died.",
      "id": "9ac27e7fc2846f3a502b9b19b3996eac"
    },
    {
      "type": "html",
      "text": "\nLet's change gears and look at cars as an example. What makes a successful car? One that accommodates a variety of people. That's difficult. You have people who are tall, short, fat, skinny, wear contacts, are handicapped, have long legs, short arms, short legs, long arms, etc. If you don't wear contacts, you wouldn't be sensitive to the fact that badly designed airflow systems will dry their eyes out more quickly. But a good car manufacturer will make sure it's test driven by as broad a spectrum of people as possible. Similarly, if you want to turn this into a Smalltalk world, you have to be sensitive to where it operates counter to natural human nature, and account for it. But Smalltalk by its very nature has been used by a fairly small and homogenous group of people, so they may not be as aware of human factor issues as, for example, I am. Frank gripes that this is the \"world according to Eileen\". I suspect if you talk to a lot of people who tried to learn Smalltalk and gave up in frustration, you may\nhear a similar theme.",
      "id": "d502ccf49a2ebb8f0a1b347c2e052b72"
    },
    {
      "type": "html",
      "text": "<i>\"I think it failed to achieve critical mass for other reasons having to do with business decisions and market dynamics.\"</i>",
      "id": "6bf78e6872e9f8435b550a8f9d035abb"
    },
    {
      "type": "html",
      "text": "\nFrom what I understand of Smalltalk's history, I agree that the reasons you mention are the main reasons why Smalltalk didn't achieve critical mass. As well as the fact that it was well before its time. BUT, as with all things in our wonderfully complex world, when events occur and we ask why, we often can't pinpoint it to a single or even a couple of reasons, but rather a sometimes large number of different reasons with complex interactions. And while I agreed with much that was said thus far, I feel that even in a perfect world - if Smalltalk had been taught in our universities, marketed differently, etc., there is a chance this <i>still</i> wouldn't be a Smalltalk world today. Why?",
      "id": "b99cac51d338a309d42df8bec74983ff"
    },
    {
      "type": "html",
      "text": "\nBack to your statement <i>\"you just have to attract *enough* people into the warmth.\"</i> Let's turn that around and ask what happens when you attract \"not enough\" people into the warmth. That means a non-trivial number of people are left out, and I don't just mean cold numbers and percentages. I'm talking about the increasing risk that one of those people is going to say \"hmph! What is this nonsense? I don't understand it!\" and he goes out and writes something like Java.",
      "id": "7116751c212409f0e07298c734ef37f2"
    },
    {
      "type": "html",
      "text": "\nJust one last thing before this poor page explodes. Rational and Together/J allow you to take code and reverse engineer it into a model. I wish sometimes that there were a way to take a fully refactored (and sometimes hard to comprehend) OO system and de-factor it into a more procedural style in some browser so that you could more easily see what's going on. Refactoring is wonderful but I feel it solves only half the problem. That's for another day.",
      "id": "8f19edfe41a6b8a9e942bb670c7e6138"
    },
    {
      "type": "html",
      "text": "-- [[Eileen Sauer]]",
      "id": "abec8ba1b9e84fb2d137ccc4b2ce3a9a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "<i>When I think back and try to pinpoint what caused me to feel overwhelmed at the time, I suspect it was the layers upon layers of delegation. I remember at one point griping: \"Pass the buck, pass the buck, pass the buck... Who's doing the work???\"</i>",
      "id": "2c815736ee87034f010b6f88a16f4bd9"
    },
    {
      "type": "html",
      "text": "\nThat's exactly what some of my coworkers said about Java/Swing and some of my code. The cure is, IMHO, to accept that you don't need to know. You need to rely on the layers. And of course this has to be possible. If the abstraction does break down there's only one tool to help you find out what's <i>really</i> happening: a decent debugger.",
      "id": "1ba748adb71535e4ff35d04c3aa1ba26"
    },
    {
      "type": "html",
      "text": "-- [[Michael Schuerig]]",
      "id": "f5b00871b63668e58a4f635de66fcc31"
    },
    {
      "type": "html",
      "text": "<i>I've found that when I refactor coworkers' code, much of the \"work\" ends up being done by collections ... hash lookups instead of switch staments, iterations over loops instead of gobs of ifs, etc.</i>",
      "id": "0d90b73b040145f7e0831d3342a6ab2f"
    },
    {
      "type": "html",
      "text": "\nThen there is the guy I share a cubicle with. He learned RPG back in 1968 and has been using it almost exclusively ever since.",
      "id": "b49569a7e18c26788386f90c263aab83"
    },
    {
      "type": "html",
      "text": "-- [[Andrew Semprebon]]",
      "id": "6556b783790755500108c3541dbe6a01"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "I guess I've never really understood why people get so passionate about discussing the syntax idiosyncracies of languages and seem so uninterested in program structure. It's like arguing whether English, Russian, or Japanese is best suited for writing novels. I tend to find good programming relies a lot more on good structure than picking the <i>right</i> language. -- [[Wayne Mack]]",
      "id": "392a4759971889b3d9ef8af889d80dc1"
    },
    {
      "type": "html",
      "text": "\nI think that is because, in small scale, choice of language has an immediate impact on how long it takes to solve certain kinds of tasks. Consider Ward's example for the [[Linear Shuffle]] in [[Icon Language]]:",
      "id": "7d48a4be64d0060d72c327fa7c168b8c"
    },
    {
      "type": "html",
      "text": "\nevery !deck :=: ?deck",
      "id": "54a3df94f269930089da0587b73425de"
    },
    {
      "type": "html",
      "text": "...and contrast to the complexity of the same task expressed in most other languages.",
      "id": "aaf50995b8671b2c0130e9a43e4a8ae5"
    },
    {
      "type": "html",
      "text": "<i>But it's not an implementation of a linear shuffle, as is clearly explained on the [[Linear Shuffle]] page. It's beautiful, but it fails to meet the task!</i>",
      "id": "c99faebd2eea484a4d2bfbcf16493249"
    },
    {
      "type": "html",
      "text": "\nHowever, we must add two important observations: first, what holds true at small scales should not be extrapolated to larger scales. Thus, language choice might be a less important factor in most programming projects, because as overall project size increases, the effects of architecture become more important relative to the effects of language. Second, it's easy to overlook this argument of scale, and to mistakenly extrapolate the importance of language choice in the small to larger scales; because we tend to think of language choice as important, and thus relevant to doing our jobs well, we tend to have highly polarized opinions as to the 'intrinsic value of language X', when most languages will let you do most everything mostly well.",
      "id": "69fe27114dd6afaa54cbbdae63a44f15"
    },
    {
      "type": "html",
      "text": "-- [[Laurent Bossavit]]",
      "id": "c33151df16c1e5f02b2aa1aa3a68b2a5"
    },
    {
      "type": "html",
      "text": "<i>And despite the changes in English over the decades, with more and more concepts being encapsulated in smaller and smaller terms, novels are <b>still</b> about the same size they were a century and a half ago. The scale of a novel is <b>qualitatively</b> different from the scale of the language it's written in.</i>",
      "id": "9d5214337ec90ed3edbb63284a4aa184"
    },
    {
      "type": "html",
      "text": "\nThe language question is still important in the large scale, because some languages don't scale well.",
      "id": "bcf5754d2ddc175a25b9f5dfe868760f"
    },
    {
      "type": "html",
      "text": "-- [[Dirck Blaskey]]",
      "id": "4e8008b2317991dc185c67380031a6cd"
    },
    {
      "type": "html",
      "text": "\nThat depends on how you scale it. Some languages might not be very good at making single giant EXE's, but may work just fine if split up into events and tasks under an [[Event Driven Programming]] framework. Related: [[System Size Metrics]]",
      "id": "11a64e1b14200fdb2346b9a5176ca193"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "There is <i>intrinsic value</i> in being able to write",
      "id": "6d6e77bdd0137634b379644798a455a1"
    },
    {
      "type": "code",
      "text": " fun = anInstance.method # python\n fun(3, \"guido\")",
      "id": "8e1fd7cea4a940beb41f5e024de3c215"
    },
    {
      "type": "html",
      "text": "rather than",
      "id": "c14731f83396a04bf209ee0b0279a8c0"
    },
    {
      "type": "code",
      "text": " import java.lang.reflect.*;\n Class aClass = anInstance.getClass();\n Method fun = aClass.getMethod(\"method\", new Class[] {Integer, String)); // arf\n fun.invoke(anInstance, new Object[] {new Integer(3), \"billjoy\"});",
      "id": "6ecd46705e1618edf8ff1d4c6dbb9966"
    },
    {
      "type": "html",
      "text": "-- [[Paul Taney]]",
      "id": "8d3fb1f562498ab136d43d25c372fbc5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "[[Carson Reynolds]] list sites for further comparisons at [http://lambda-the-ultimate.org/classic/message5975.html lambda-the-ultimate.org]",
      "id": "fb904ce7eb496a5442338ea5ec873571"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "See: [[Whatsa Pissing Match]], [[Holy War]], [[Wiki Warrior]]",
      "id": "c7ff1a6dda5d4c9527ce2943db952ca9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5a2ac00873cf4044641d01a2681a4afe"
    },
    {
      "type": "html",
      "text": "[[Category Comparisons]]",
      "id": "e865cbb3db002adc4bbf4f7b40c3c21d"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?LanguagePissingMatch c2.com]",
      "id": "fdb6a895dbabd10c4607d7eab112707d"
    }
  ],
  "journal": [
    {
      "date": 1334104125000,
      "id": "d1276f1e31a8bf659f1736070add3bb0",
      "type": "create",
      "item": {
        "title": "Language Pissing Match",
        "story": [
          {
            "type": "html",
            "text": "\"My language can beat up your language\"",
            "id": "c6a66f9575bfc273b1eebf336c98c6ae"
          },
          {
            "type": "html",
            "text": "\nChoose your language. Fight to the death.",
            "id": "43fd83eb9984c75ab70735ff61c65c4f"
          },
          {
            "type": "html",
            "text": "\nSee also:",
            "id": "b591946f41481dc81e79bb1079a8237b"
          },
          {
            "type": "html",
            "text": " [[Csharp Vs Java]]",
            "id": "a3459e9717d533222a6ccff58c117f75"
          },
          {
            "type": "html",
            "text": " [[Csharp Vs Cpp]]",
            "id": "9f8ca936f7fb5a809236901a273e124a"
          },
          {
            "type": "html",
            "text": " [[Forth Vs Lisp]]",
            "id": "f3564a5074878b824619163770f22667"
          },
          {
            "type": "html",
            "text": " [[Java Discussion]] (should be called [[Java Considered Harmful]])",
            "id": "2187f6d6129e7eaed752e9fc6ddf6cd0"
          },
          {
            "type": "html",
            "text": " [[Java Vs Cpp]]",
            "id": "7aca3e7b3d6f9a097b2ccfbe23521624"
          },
          {
            "type": "html",
            "text": " [[Java Vs Smalltalk]]",
            "id": "ac8812a85ee4c56f366824905c5bb6da"
          },
          {
            "type": "html",
            "text": " [[Ruby Vs Smalltalk]]",
            "id": "6bc20eb8e6c3c6b03ae95e545f8cc457"
          },
          {
            "type": "html",
            "text": " [[Ruby Instead Of Smalltalk]]",
            "id": "c3f86e4cebad3f34093c49f8d25b06fa"
          },
          {
            "type": "html",
            "text": " [[Language Requirements For Programmer Productivity]]",
            "id": "b2c7c8ee0dc6decdfb6eda35b7d937d1"
          },
          {
            "type": "html",
            "text": " [[Python Vs Perl]]",
            "id": "7a98dc84f25a42f9535055ccd771d04a"
          },
          {
            "type": "html",
            "text": " [[Python Vs Ruby]]",
            "id": "405ff4c5a2a62de7a2661ed7c271515f"
          },
          {
            "type": "html",
            "text": " [[Self Dot Syndrome]]",
            "id": "c7f73ce7061664afbfb0be5d14f342db"
          },
          {
            "type": "html",
            "text": " [[Semi Colon]]",
            "id": "6111dfb1b4c08a249ffb77569826e51a"
          },
          {
            "type": "html",
            "text": " [[Smalltalk Instead Of Python]]",
            "id": "c2955f9fa1fd8a3e49b3999ca989a38c"
          },
          {
            "type": "html",
            "text": " [[Smalltalk Vs Eiffel]]",
            "id": "c06bf9cd46aea84e36c5659fcffdeaab"
          },
          {
            "type": "html",
            "text": " [[Syntactically Significant Whitespace Considered Harmful]]",
            "id": "cf51502118e8c92bb79a7bff951bfb61"
          },
          {
            "type": "html",
            "text": " [[Wiki Polarization]]",
            "id": "e2d1f474973e16eb19f97c406d8e699e"
          },
          {
            "type": "html",
            "text": " (Lot of topics on dynamic vs static typing)\nAlso note:",
            "id": "9f86ad3d6033fe1c062082cafd95e1b5"
          },
          {
            "type": "html",
            "text": " [[Programming Language Popularity]]",
            "id": "41469d2edae4438e09171abc4a3a0cd8"
          },
          {
            "type": "html",
            "text": " [[Paradigm Pissing Match]]",
            "id": "fc8a7494cfd9446037d9bf0d3378d6eb"
          },
          {
            "type": "html",
            "text": " [[Horses Vs Cows]]",
            "id": "270e2eb31fcbccd5f1460db16cd1a289"
          },
          {
            "type": "html",
            "text": " [http://www.deftcode.com/archives/every_language_war_ever.html www.deftcode.com]",
            "id": "f17aaff7f7082d6e90b95e03237f5f9f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "<i>Is anyone else sick and tired of seeing this term everywhere, especially on this Wiki? It seems like \"Language Pissing Match\" gets used to describe almost </i>any<i> comparison of programming languages, regardless of the tone the discussion takes or the facts presented in it.</i>",
            "id": "1f94df229821f1ee4b3f2f8a4e3e0b10"
          },
          {
            "type": "html",
            "text": "\nI think it's rather humorous, actually.",
            "id": "d97e122c1851c75ab4818b330662685d"
          },
          {
            "type": "html",
            "text": "<i>It's like calling someone an anti-Semite or comparing somebody to Hitler; a tool used to stifle serious debate and discussion.</i>",
            "id": "6f4015b0c1f787bcfe30717223dc9ee5"
          },
          {
            "type": "html",
            "text": "<i>Some of the pages linked to above contain very interesting discussions and novel ideas, yet some smartass still condemned them all as \"pissing matches.\" Apparently making an analogy to urination proves how mature you have become and how superior you are to everyone else.</i>",
            "id": "b1856cf425552a0e70f8cc013ea53c00"
          },
          {
            "type": "html",
            "text": "<i>The truth is that some languages </i>are<i> better at certain tasks than others, and some are just plain better period. If you don't believe that, then try writing desktop applications in straight C or anything at all in COBOL.</i>",
            "id": "b990bf8566a8fc937ac5c1dcdd0ac02d"
          },
          {
            "type": "html",
            "text": "<i>The state of programming languages will never advance unless we are able to objectively compare existing languages with one another and identify and isolate their failings. If you are somebody who feels the need to chime in during one of these discussion and accuse everyone from atop your high horse of being involved in a \"pissing match,\" please consider keeping it to yourself.</i> -- Steve",
            "id": "c810bd3c932e680a9f3d1ace3a83a31f"
          },
          {
            "type": "html",
            "text": "\nI agree that the term should perhaps be scrapped for something more presentable. It is generally meant to convey a sense of never-ending emotional debates among proponents of various languages or tools. But, I don't think objectivity will ever play a big part in solving or preventing such battles, because [[Most Holy Wars Tied To Psychology]]. That is just the nature of the beast. -- top",
            "id": "402380436ae9b34ad7e6325c9645f780"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "<i>Don't worry. It'll be great. We'll [[Start From Scratch]] in Smalltalk rather than COBOL.</i>",
            "id": "2a929bb460cfcc77fc454b333c097400"
          },
          {
            "type": "html",
            "text": "<i>...if the apps matter that much, maybe Eiffel would be a better bet.</i>",
            "id": "5ff150cf855b7da3abffccebe9fa95d6"
          },
          {
            "type": "html",
            "text": "\nSerious question:  Why would Eiffel be better than Smalltalk?",
            "id": "30d75f8cee953b8562f2d7af8a250170"
          },
          {
            "type": "html",
            "text": "...depends on what \"better\" means. The comment about Eiffel comes from the fact that Y2K problems at least partly stem from undocumented assumptions that change in the medium to long term (decades). Smalltalk excels by being flexible and relatively easy to refactor, but it doesn't focus on type checking and [[Design By Contract]]; Eiffel does. Y2K is about implicit assumptions that change;\n[[Design By Contract]] addresses this directly, and Eiffel supports [[Design By Contract]] from the ground up.",
            "id": "9214f540c5ba86f6160599a33314e4f6"
          },
          {
            "type": "html",
            "text": "<i>I don't think that [[Design By Contract]] would have helped with Y2K. To write your contracts you have to think there will be a problem. Nobody thought there would be a problem. They would have made explicit assumptions rather than implicit ones. Yeah, DBC would be very good at showing you were your software fails... after the Y2K date rollover.</i>",
            "id": "a1d357c1ae6b219baa022a68af1001ee"
          },
          {
            "type": "html",
            "text": "<i>I can't answer why one would use Eiffel. I'd use Smalltalk because it's more productive, for me, than C++ or Java. And yes, I've used all three. --[[Ron Jeffries]]</i>",
            "id": "a65a426dae9971868563ed8814b7f573"
          },
          {
            "type": "html",
            "text": "\nBertrand Meyer's account of who's using (his version of) Eiffel can be found at: [http://eiffel.com/eiffel/projects/list.html eiffel.com]",
            "id": "91b1c0428c400c6934d30ba8b66fc0e9"
          },
          {
            "type": "html",
            "text": "<i>Dunno whether Eiffel is theoretical or practical. But isn't Chrysler paying people with a Smalltalk program? Aren't there very large and significant Smalltalk trading programs running on Wall Street? Doesn't TI have a semiconductor fab running in Smalltalk? Aren't those fairly practical?</i>",
            "id": "0be44dd3faa4cb7de4223d0192840da7"
          },
          {
            "type": "html",
            "text": "\nDoes the distinction between whether a language is <i>theoretical</i> or ",
            "id": "f35f9eaa0187717027f13ec5da0017c5"
          },
          {
            "type": "html",
            "text": "<i>practical</i> really matter? <i>(In theory, no. In practice, yes. -- SH)</i> So long as the language is usable for real projects, does it matter where it comes from? (After all, Smalltalk came from Xerox Parc - not really a \"practical\" environment when compared with the origin of C++.) ",
            "id": "f588a8e646412e9f43b60239db822bc9"
          },
          {
            "type": "html",
            "text": "\nThere's definitely a trade-off between short-term productivity, functionality, and the sort of effort that has to be made with assertions and [[Design By Contract]]. At one extreme you prove every little thing, and at the other extreme you speculatively hack. You have to decide where to pitch your development according to the forces at play: time to market, longevity of the application, complexity of the app domain, criticality of the application...  There's no harm with C++ or Java if you make an informed choice. (Written with no intention of stirring up a [[Language Pissing Match]] ... honest.) ",
            "id": "77efe64e3fd0222731bd87c3bc12af91"
          },
          {
            "type": "html",
            "text": "\nAh, you're all full of baloney. The future belongs to Perl, which has everything all them other languages has and a whole lot more. You can always write it faster, better and freer in Perl - no tradeoffs, no compromises, no bulldust. -- [[Peter Merel]]",
            "id": "8c1848d96ab97b852728465a176c354b"
          },
          {
            "type": "html",
            "text": "\nPerl <i>is</i> a compromise.",
            "id": "7faa0b7baa3eabbf0d5a1941852ca5c3"
          },
          {
            "type": "html",
            "text": "\nThat's because [[Larry Wall]] is a linguist first and scientist second (er, third maybe). As with natural language, his <i>intention</i> was to roll all the best words (in Unix) into one hairball (he would say <i>snowball</i>). I love it; and it almost worked.",
            "id": "6b9c8e062b36b883a3fa996405270652"
          },
          {
            "type": "html",
            "text": "<i>But missing values are not zero, Larry!</i>",
            "id": "3045db62fcfa28072be2430232e6486e"
          },
          {
            "type": "html",
            "text": "<i>The road to hell is paved with melting snowballs.</i> -- [[Larry Wall]] (quoted by [[Paul Taney]])",
            "id": "54830463799fd3cd35c429b2da1548e5"
          },
          {
            "type": "html",
            "text": "\nThe future <i>did</i> belong to Perl, but PHP came along and stole it away ;)",
            "id": "29f32f5e852baf272f66ef6b828f5be0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "I couldn't just let this one fly, sorry. [[Php Language]] is okay to get the job done, but it's far from \"complete\" as an OO language. Now that the new [[Zend Engine]] is out, there's a little hope. Version 2 has support for namespaces (inner classes, actually), private members, cloning, exceptions ... a bunch of good stuff all in all. But it's only available in PHP v4.3, which hasn't been released as I write this. Also, if you want to compare it to Perl, you probably don't want to compare CPAN to PEAR, unless you're a masochist. PHP has its place under the sun, under a rock :) -- [[Robin Millette]]",
            "id": "aed1c5bab9c94f511a0c3914f904e70e"
          },
          {
            "type": "html",
            "text": "<i>Sorry, old boy (or gal), but PHP is here to stay. It is supported all over the world and doesn't even need a shebang line. Therefore, one script can supply multiple hosts - just like Javascript. Oh, well.</i>",
            "id": "3dfecea6124e9fe136f9dd1df00696f6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "I'm curious where Ada95 fits it the above Smalltalk/Eiffel comparison. I know its much more ... conservative ... than C++. -- [[Wayne Carson]]",
            "id": "69c0cf64ea627e8aeebd963223ddf2b8"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "<i>\"why didn't Smalltalk ever take off in the mainstream of OO languages?\"</i> I don't know. When you realize OO itself was more or less invented in 1967 and didn't seem to take off until the 1990s, the specific failure of Smalltalk isn't so surprising. You might also ask why Lisp didn't take off. This is a very conservative industry. I expect Smalltalk demanded too much power for the time. Having been rejected, it never got reconsidered.",
            "id": "f0c0b937d15287c33d0c70032b2ff8f9"
          },
          {
            "type": "html",
            "text": "\nC++ took quite a while to catch on, too. On the PC, the only compilers were two-step things that generated C, which had to be compiled in turn. I personally date its success from Zortech's single-step compiler, whose sales shocked everyone (much as Borland's Pascal did earlier). It was a while before Borland caught up with a compiler of their own. Microsoft were years behind that, and their compiler has lagged in features for most of its history - this shows up in the design of Microsoft's class libraries. Nowadays Microsoft is almost synonymous with C++, which is ironic given how slow they were to embrace it.",
            "id": "6fa7c603753fd3bbdbeca752936ee279"
          },
          {
            "type": "html",
            "text": "<i>\"Why did someone have to invent a Java?\"</i> C++ succeeded partly because it was close to C. Java learned that lesson. In my opinion it offers no improvement over other contemporary languages, especially Sather and Eiffel, but the hordes of C/C++ programmers would not accept anything that looked so different. So Java was necessary to move the C/C++ world onto garbage collection and so forth.",
            "id": "ee6e933bcc56ff28f7dc7dc881248f58"
          },
          {
            "type": "html",
            "text": "\nThe [[Java Byte Code]] is another matter. Arguably the Internet needs an efficient, secure, portable bytecode. The timing was just right to exploit web browsers and anti-Microsoft feeling. The big shame about the bytecode is that it be so tied to Java. <i>Although [[http://www.adahome.com/Resources/Ada_Java.html www.adahome.com] Ada can be compiled to Java bytecode]</i> Now it has crowded out other, more general virtual machines.",
            "id": "99d9efa536c0a3969a67165b103d2630"
          },
          {
            "type": "html",
            "text": "\nIf you're asking about Java specifically in the context of Smalltalk, then the main difference is the static type checking. A big section of the industry believes static, manifest types are desirable for software engineering.",
            "id": "5473eb11c72774530393221ff86564c5"
          },
          {
            "type": "html",
            "text": "-- [[Dave Harris]]",
            "id": "beec456606a3ad8059a3bddeb15f39f2"
          },
          {
            "type": "html",
            "text": "<i>This has been my experience also. Any theories as to [[When Is Manifest Typing Considereda Good Thing]]?</i>",
            "id": "5b8f573c77d2df58e128a77555dfeae9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "If so many people think static, manifest types are so important, then why is [[Visual Basic]] so popular?",
            "id": "9ae2c87b212191dc10b178c517219eac"
          },
          {
            "type": "html",
            "text": "[I've heard it said that VB was the <i>real</i> competition for Smalltalk, prior to Java. -- [[Paul Chisholm]]]",
            "id": "052f3c17088eea2bd2df5820b206fa34"
          },
          {
            "type": "html",
            "text": "<i>You can code VB programs using (mostly) static, manifest types.</i>",
            "id": "6052d528ef5421e3251a8c1c12ce6a39"
          },
          {
            "type": "html",
            "text": "<i>Set \"Option Explicit\" in every form, code module, and class module.</i>",
            "id": "6a144e84cb5809039263bb3a95cb65c9"
          },
          {
            "type": "html",
            "text": "<i>Avoid using the \"Variant\" data type.</i>",
            "id": "199151d56b3a047b686d40bd69dfa155"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "I just have to say that I am totally entranced with Smalltalk right now, despite never having programmed in it. I've worked in C++ for years and years and years, but through conversations here and elsewhere the ramifications of garbage collection and late binding have finally sunk in for me. In C++ we go through a lot of grief to make subclassing the same as subtyping. In Smalltalk it seems that they do not have to be tied at all. I really look forward to learning it. It just seems that the typed languages are, for lack of a better word, \"diluted\" OO.",
            "id": "3e9f211bb7bab87a7eb57de511d54876"
          },
          {
            "type": "html",
            "text": "\nSide note on the [[Language Pissing Match]] and Y2K: I remember reading that one reason why so many financial folk are into Smalltalk these days is because the integers do not overflow. Crystal clear. One less way to lose money. Also, it occurs to me that in languages as dynamic as Smalltalk, you are less inclined to paint yourself in a box with the the fixed length problem: \"Oops, I only allocated enough space for two digit years.\" Further, as [[Ron Jeffries]] has pointed out, if objects know how to save themselves, then that decision is localized.",
            "id": "ca430eebc3b8c716d2a317d6eb34f2a0"
          },
          {
            "type": "html",
            "text": "\nI think I'll have to get one of the [[Definitive Smalltalk Books]].",
            "id": "dd3551ebe8d294b38b384615418bd726"
          },
          {
            "type": "html",
            "text": "-- [[Michael Feathers]]",
            "id": "5de27ead02f6bcefbf65a0bfd055eb00"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "Smalltalk is more dynamic. This shows up in its more powerful reflection mechanisms (which few programmers use, or need to use) and in its more reactive programming environment (though Java ones are improving). It has a more mature (and complicated) class library. It is easy to create new control structures with blocks. The Smalltalk environment is more customizable and open (not entirely good) and Smalltalk programs are easier to change. Last I heard, the best Smalltalk VMs were still faster than the best Java VMs, though that will certainly change before long if it hasn't already.",
            "id": "b4127b20e5f2e42a7e3fa295327fbd72"
          },
          {
            "type": "html",
            "text": "\nJava looks more like languages people have used before. This means that a C programmer can start playing around and get a Java program working the first day. Smalltalk has a steeper initial learning curve. Java libraries are designed for multithreading, and distributed programming and the web have been part of Java from the beginning.",
            "id": "1177d7d3205c060b176f0d0c97622c02"
          },
          {
            "type": "html",
            "text": "\nThe biggest difference is that Java has had fabulous marketing, leading to mindshare. There are more books, more web pages, more consultants who claim to know Java, more CEOs who have heard of Java and are willing to let their\nemployees learn it, more companies starting Java projects, and more companies trying to supply the Java market. Java proves that engineers who want to change the world should understand marketing. -- [[Ralph Johnson]]",
            "id": "b5d28f4a392496669094727a3549b1c2"
          },
          {
            "type": "html",
            "text": "<i>Doesn't Microsoft prove the same thing? -- [[Brett Neumeier]]</i>",
            "id": "dd89025452d9fb09ee6462b9686015a9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "Two comments: one quick, one longer. The first is about ",
            "id": "baa1e89f6be45b862c31d1f84115e779"
          },
          {
            "type": "html",
            "text": "<i>Java looks more like languages people have used before.</i>",
            "id": "552586557db1587fbaf3b4de6afd12fa"
          },
          {
            "type": "html",
            "text": "\nThis is, to me, the biggest advantage Java has over Smalltalk. And it's an absolutely huge advantage. For example, I have gone to talks by Bertrand Meyer. And I have thought \"Hmmmm. Interesting.\" I've even, during the Q&A parts, harangued him on minor points of the Eiffel language. But, despite the fact that I view Eiffel as a well-designed language, I have never actually written code in it. And I probably never will. ",
            "id": "75ccd989c7652bcd73b2c2494a6df32e"
          },
          {
            "type": "html",
            "text": "\nI don't ever ever ever want to spend time learning syntax again. Learning syntax is a waste of time, a waste of effort, a waste of valuable brain cells that could otherwise be [[Watching Gilligans Island]]. Far too much programmer time is already spent absorbing and reabsorbing the same things over and over and over again. ",
            "id": "751bb79033cc65a7dcb3ee662065f29f"
          },
          {
            "type": "html",
            "text": "\nThe dream is, of course, to separate syntax from semantics. Change the programming language semantics, but keep the syntax everyone knows. Which is, roughly, what the [[Meta Object Protocol]] does, and what the designers of Java \ntried to do. ",
            "id": "f1bec357c4a13d07fb5d20c56c1a97e5"
          },
          {
            "type": "html",
            "text": "(Side note: I have downloaded VW3.0 [it's free] because the idea of a [[Refactoring Browser]] may just be one of those things that will convince me to learn a new syntax.) ",
            "id": "ed05de973fdeb11b0a969e10dbb1aeee"
          },
          {
            "type": "html",
            "text": "\nThe second comment is about <i>late-binding</i>. It's not entirely obvious to me that Java and Smalltalk have the same notion of \"late binding.\" ",
            "id": "1afa7f990b8e4addca211c6beb552db9"
          },
          {
            "type": "html",
            "text": "<i>Question moved to [[Smalltalk Late Binding]].</i>",
            "id": "bc1f09c59c5674efa705782586377ae9"
          },
          {
            "type": "html",
            "text": "-- [[William Grosso]]",
            "id": "75952ff8a635698069dbeed9c43854ab"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "Another major reason that Java took off (exploded, actually) while Smalltalk never seemed to make much of a ripple: availability of development tools. When I decided to learn Smalltalk ten years ago, there were only two environments available for the Mac (Smalltalk/V from [[Digi Talk]], and Smalltalk 80 from [[Parc Place]]). Other platforms had only one option; none were all that cheap for an individual not working on a corporate budget. This was all due to [[Parc Place]]'s licensing restrictions. Even today, there are not all that many environments available, although I have seen a free version of Smalltalk/V for Windows.",
            "id": "fef4fb9506b839d90cec59c11769f278"
          },
          {
            "type": "html",
            "text": "\nJava, on the other hand, was free. Anyone could download a fully functional compiler and debugger from Javasoft and start coding. There are quite a few decent IDEs priced under $200, and Javasoft has been licensing many, many companies to make Java tools.",
            "id": "a06e057f8efbbe8fac5700ca943a07b8"
          },
          {
            "type": "html",
            "text": "\nThis is much the same reason that Eiffel and Objective-C never went anywhere. They were never really given much of a chance in the market because of licensing restrictions.",
            "id": "6561c63ecf73b4c78e26478ed252c6ad"
          },
          {
            "type": "html",
            "text": "-- [[Russell Gold]]",
            "id": "06656eba87cfdc3a1ca5f561b5958a74"
          },
          {
            "type": "html",
            "text": "$200? Kawa, an IDE certainly good enough for learning Java, is shareware, and registration is $50, for students $25 ([http://www.tek-tools.com www.tek-tools.com]). What's more, you don't even have to buy any book to get started - several tutorials can be downloaded for free. -- [[Falk Bruegmann]]",
            "id": "5a30c1fb1bee4e5f003eb5bcadcf4b5a"
          },
          {
            "type": "html",
            "text": "\nWill the choice of language for enterprise applications be affected by whether the IDE is $25 or $250? Will the decision which language a student fools around with be affected by how much compiler, IDE and tutorials cost him? Remember, Java probably was downloaded by tens of thousands of individuals before it was used for the first enterprise projects! -- [[Falk Bruegmann]]",
            "id": "916d9d4a0ff157dcc33632a24fb4b3d6"
          },
          {
            "type": "html",
            "text": "<i>I'm not sure I see the connection between your first two sentences (which I take as rhetorical) and your last. I do believe that student costs are significant (most students don't have a lot of money to spend on software). -- [[Russell Gold]]</i>",
            "id": "3565fa3d93af7410bb632eaaaeeafbb9"
          },
          {
            "type": "html",
            "text": "\nExactly. The ease of availability increases the number of developers who know the language (learning on their own), which increases the market awareness, which increases enterprise adoption. Smalltalk is a hacker's dream language, and had it been free, would probably have taken off. -- [[Russell Gold]]",
            "id": "18f380deebed057dba4ea818020a5e48"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "Hmmm, what would it take for Smalltalk to be Internet-enabled? The capability to generate Java bytecode? As this is available now, is there more to it?",
            "id": "7a8c16ca8c97dde9cd6aba5a20f71897"
          },
          {
            "type": "html",
            "text": "-- [[Kiel Hodges]]",
            "id": "00ff2823235d5d9cd7b65228e57c2ace"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "The original article that prompted the article mentioned above:",
            "id": "4e1e555d464769c7d05f9101e202b81f"
          },
          {
            "type": "html",
            "text": "\n[http://www.onemind.com/smalltalk.html www.onemind.com] [<i>[[Broken Link]]</i>]",
            "id": "8f8d7f5bc77c00e3aa4253e205954570"
          },
          {
            "type": "html",
            "text": "\nanswers that question.",
            "id": "a11bf4c89d018bb5d03859516858079e"
          },
          {
            "type": "html",
            "text": "\nOn the other hand, its author, Jeff Sutherland, apparently a Smalltalk supporter, says: \"I estimate that the Smalltalk community has about one year to respond to this problem.\" (regarding competition from Java) and said this in June 1996!",
            "id": "c6ae01f8f2c90033b66a754a28bf1c31"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "Here's a cynical action plan for Smalltalkers who what to gain ground:",
            "id": "e8fa7514408b122edb6ca67868531c4d"
          },
          {
            "type": "html",
            "text": " Write a web-browser in Smalltalk which has a \"talklet\" tag - which loads and runs classes from a URL connection. (A talklet should have some well-known file extension, say .tlk) Call it \"[[Hot Talk]]\". The browser can double as an IDE for [[Hot Talk]] classes.",
            "id": "7da8684524b0acee31045b2bc01de7fd"
          },
          {
            "type": "html",
            "text": " Write plugins for Netscape and Internet Explorer which will handle .tlk files. The plugins are mostly the Smalltalk virtual machine with glue code. (This idea from [[Bertrand Meyer]]'s approach to plugging in Eiffel bytecode.)",
            "id": "965946473ba59aebbdc164ee43b42581"
          },
          {
            "type": "html",
            "text": " Investigate some kind of \"compatibility bridge\" with Java bytecodes. (Could use [[Fall Back On Reflection]].)",
            "id": "45d46a71e65c850b58bb6ac405195082"
          },
          {
            "type": "html",
            "text": "(Something would need to be done to approximate the java [[Security Manager]] class - I don't know enough Smalltalk to decide if this could be done effectively.)",
            "id": "ef888fcae9cb18e98ef495750b311c14"
          },
          {
            "type": "html",
            "text": "\nAs for giving it away, why not use Squeak - it's already out there...",
            "id": "3c399a1a42d8d8333e39c1275e5c217f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "I don't think Smalltalk will ever die, and some of its features live on in Java. The question Smalltalkers seem to want answered is, \"Why do C++ and VB (and now Java) dominate, instead of Smalltalk?\"",
            "id": "0877e8f56f51829ffb8d023b089ca629"
          },
          {
            "type": "html",
            "text": "\nIMHO, Smalltalk had no unsolvable problems, but had many issues that needed to be solved simultaneously:",
            "id": "593c07a2cd0278d2c4cf59c8fd55459a"
          },
          {
            "type": "html",
            "text": " Free/cheap versions? Digitalk had $100 implementations for years. GNU Smalltalk has been around for a while. Squeak has been available since at least October 1997. IBM's [[Visual Age]] has had a \"demo\" version.",
            "id": "e1ac85334c591ae6395920a38e67b06d"
          },
          {
            "type": "html",
            "text": " Source control? Built-in, little, or none (not even \"backup to floppy\" unless you really knew what you were doing); best in the industry available (a bargain for corporations, too expensive for hackers).",
            "id": "6594bc6326248fda9d1ef09faca2407f"
          },
          {
            "type": "html",
            "text": " Ability to create standalone executables? Available, but only for the expensive commercial implementations.",
            "id": "4d743af44767aeeb4726d93ce280c1bd"
          },
          {
            "type": "html",
            "text": " Lack of a standard? How badly has that hindered Turbo Pascal, and its successor, Delphi?",
            "id": "b363a4299f41b067df1d540ee0a846d6"
          },
          {
            "type": "html",
            "text": " Hunger for resources? It used to hurt that Smalltalk required four whole megabytes to run well. It's hardly an issue today.",
            "id": "ffd9029b40062a86b9e4d42e593641ec"
          },
          {
            "type": "html",
            "text": "\nWhat may have also hurt is Smalltalk's <i>very</i> limited exposure to university students ([[Ralph Johnson]]'s efforts notwithstanding). AT&T gave C++ to schools for almost nothing (like C and Unix earlier), professors taught classes with it, and graduates tried to apply it to the jobs they found.",
            "id": "8d7e45a865197e88632eb47b9a64e005"
          },
          {
            "type": "html",
            "text": "\nI enjoyed Smalltalk the one time my job allowed its use. I doubt I'll ever have another commercial opportunity to work with it. -- [[Paul Chisholm]]",
            "id": "29df6de27261630ff0107297e12c9f7d"
          },
          {
            "type": "html",
            "text": "\nThe only time I've run across Smalltalk in use in a commercial product setting was at Cybertek (Dallas, TX) who used it for their Life Insurance admin system's GUI.",
            "id": "f1ebce347e3c11cbfd7153de7b09a63a"
          },
          {
            "type": "html",
            "text": "-- [[Chuck Mc Corvey]]",
            "id": "2020f590b6e47723863b69bf7da2cee5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "I am always frustrated by debates about programming languages. Everyone sees their language as ultimately more powerful, <i>eloquent</i>, expressive or generally better than the others. ",
            "id": "e0a1e8cad79339bfe0cd58e1e299c28f"
          },
          {
            "type": "html",
            "text": "\nIs Smalltalk a better language than Java? Is Eiffel the best language around (perhaps we should all be doing DBC)? Is Python better than Perl because it is simpler and easier to grasp?\nI dunno. Most of the surviving programming languages out there all have features that best fit some application domain better than others. ",
            "id": "b0186ffb03ee1108814bc85f27d354b2"
          },
          {
            "type": "html",
            "text": "\nSome languages just feel right. If you grew up loving Pascal/Modula[123]/C/C++/Java, will Smalltalk ever <i>feel right</i>? If you cut your teeth on Smalltalk or Lisp, can you ever get used to C-like languages? If you can speak Perl fluently and eloquently, will (and should) you be won over by Python? And, if Java or C++ gets the job done, and (this is important) <b>solves</b> the user's problem, then isn't it the appropriate language to use?",
            "id": "34c432a8691a3c87741f67e80660a835"
          },
          {
            "type": "html",
            "text": "\nWith every product/project I approach, I look into my toolbox of languages (C, C++, Perl, Python, Java and perhaps one day Eiffel or Squeak) and see which one fits best. Once I choose that language, I become fanatical about it until the next project. Then again, maybe I am just a bit weird.",
            "id": "2ae69923bccf80ea7476267ba9a31710"
          },
          {
            "type": "html",
            "text": "-- [[Todd Coram]]",
            "id": "18f1d425950df80e2dbe0c1ba022fa6e"
          },
          {
            "type": "html",
            "text": "\nWhile I agree that having a full barnyard of languages is important to ensure that a wide variety of tools are available, it is <b>not</b> sufficient that any given language merely \"solves the user's problem.\" Really, the goal is to maximize the user's return on investment, whatever that investment may be. ",
            "id": "e8f7d74335cf287e497aafffb74ed167"
          },
          {
            "type": "html",
            "text": "\nIt is not as efficient to write a word processor in assembler/C as it is to write it in Smalltalk, and it is not as efficient to write a blit operation in Smalltalk as it is in assembler/C, although you could do either task in both.",
            "id": "9298b477a0658df56a38be0bcf6adba0"
          },
          {
            "type": "html",
            "text": "\nSome languages are better suited to a large set of problem classes than others; these are generic programming languages like C, C++, Java, Lisp and Smalltalk. Other languages are better at specific problems like Perl for text parsing (although Perl is becoming more and more generic every day) or [[Java Script]] for DHTML (although I've managed to hack [[Java Script]] into a real object-oriented language, it just isn't useful).",
            "id": "c1c3e077bb9e0150ba6b804b146fc8ea"
          },
          {
            "type": "html",
            "text": "\nAn old-timer programmer once said to me that he doesn't have the time or patience to learn new languages every week. My reaction was that, fine, don't learn the language, but if I do I can provide a higher return on investment than he could. Thus, I'll stand a better chance of getting the job. Never toss out a tool. -- [[Sunir Shah]]",
            "id": "16ae0711c80e428dd04ab6da4cdb9a7a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "<i>\"Why would anyone even use Eiffel or Smalltalk? Interesting theoretical languages, but practical in real world applications?\"</i>",
            "id": "ccca055a137cad416c32f34f9e27c865"
          },
          {
            "type": "html",
            "text": "<i>\"I have been in the Software industry since 1985 and have <b>never</b> encountered a commercial use of Smalltalk by anybody until coming here and hearing about the Chrysler project.\"</i>",
            "id": "15897b7348fca4e9d103df393971d8ae"
          },
          {
            "type": "html",
            "text": "\nSmalltalk may have originated in a research lab as a theoretical approach to teaching about programming, but by the time Xerox spun off [[Parc Place]] in 1987, Smalltalk was already in use in \"real world applications\". One of the earliest ones with which I'm personally familiar was [[The Analyst]] from [[Xerox Special Information Systems]]. This product, which was like Microsoft Office and the Windows desktop, with hypertext capabilities, in Smalltalk-80 way back in 1987, was in fairly wide use within certain US Government circles in the late 80s and early 90s. [[Texas Instrument]]'s [[Control Works]] debuted in [[Knowledge Systems Corporation]]'s booth at OOPSLA/ECOOP '90 in Ottawa, Canada. Perhaps [[Ward Cunningham]] could provide insight into Wall Street's use of Smalltalk (surely there must be a [[Wiki Page On Smalltalk Projects]] - each [[Gemstone Project]] is probably also a Smalltalk project).",
            "id": "2dea0317d9d4f4ace9f32a5e6b8802aa"
          },
          {
            "type": "html",
            "text": "\nAt [[Martin Marietta]] in the early 1990s we built a discrete-event simulation -based process analysis tool (before [[Business Process Reengineering]] and [[Work Flow]] were even buzzwords) with Smalltalk, [[Gem Stone]], [[The Analyst]], and some class libraries from [[Knowledge Systems Corporation]]. We used this tool to study launch vehicle manufacturing and launch operations processes for the Titan IV launch vehicle (as well as other processes), always trying to find ways to increase throughput and reduce cost or time-in-process per unit. This work is described in the proceedings of the Society for Computer Simulation's 1992 Object-Oriented Simulation Conference.",
            "id": "897c9aa01a33d7674ca90abad9d14ddf"
          },
          {
            "type": "html",
            "text": "\nFrom interviews, brief engagements, and knowledge of vendors' customers I'm aware of other industry uses (chemical, manufacturing, finance, transportation, telecommunications, utilities, pharmaceuticals), but I'll stick to uses that I can describe best from personal experience.",
            "id": "6252fde8753258d8be56859cdc7033bd"
          },
          {
            "type": "html",
            "text": "\nFrom personal experience again, I know that a very large western US cellular company deployed a customer service application with a Smalltalk user interface into multiple call centers housing a couple hundred customer service representatives (I'm also aware that very large, market leading package shipping company was working on a customer service app in Smalltalk, but don't know the details). And I've worked with an east-coast RBOC that uses Smalltalk in a billing application.",
            "id": "096818fcb96d42a980cbb846d3ef4d16"
          },
          {
            "type": "html",
            "text": "\nI'm also familiar with four commercial CASE tools and one product configurator written in Smalltalk. OOATool from [[Coad International]], circa 1991 (contemporary with [[Peter Coad]]'s Object-Oriented Analysis book), was written in SmalltalkV from [[Digi Talk]]. [[Ascent Logic Corporation]], founded in 1987 and still in business today, (www.alc.com), made its business on a Smalltalk-80 implementation of an upper-CASE / systems engineering tool called RDD-100 purchased by large government and commercial projects in the US and abroad. Ascent's competition, [[Vi Tech Corporation]], has a similar tool also written in Smalltalk and [[Gem Stone]]. And I think there was a company vending a requirements management tool with a SmalltalkV user interface, that was acquired by Rational. The product configurator, Classys, was sold by a company called Antalys that sold itself to Baan.",
            "id": "3a243b691fb58d1d098719128a2f9e15"
          },
          {
            "type": "html",
            "text": "\nIMHO these examples are typical of the types of applications at which Smalltalk excels: i) multi-tier business applications (customer service, billing) in which Smalltalk is used at minimum to implement a modern GUI; and ii) essentially shrink-wrap applications like Analyst, RDD-100, and Classys - although of tremendous complexity in the domain model or the UI (diagram editors, etc.) - that need to run on multiple platforms to maximize market penetration.",
            "id": "8e84e9d5ce0b68d5d5b6250de31e9be3"
          },
          {
            "type": "html",
            "text": "\nBoth types of application development effort benefit from an integrated development environment unmatched by anything in Java space, and from unparalleled application evolvability due not only to the development environment but also due precisely to Smalltalk's approach to typing and binding, and syntax (specifically in the exception-handling area). For an experienced Smalltalker these benefits translate to a productivity level that to date has been unattainable in Java. FWIW, I've been programming in Smalltalk since 1988 and in Java since 1997, and have worked on multi-tier applications, and applications with Web browser user interfaces, in both technologies.",
            "id": "d6ba9035ff86616f4ba5a482276cd558"
          },
          {
            "type": "html",
            "text": "\nWith respect to the latter type of application, everyone is always making such a big deal about Java being platform-independent. So what? [[Parc Place]] Smalltalk was cross-platform across Windows, MacOS, and several flavors of Unix for years and years. How much of Java's market penetration is due to platforms other than these?",
            "id": "b43247746d39923d1660fde5243d314a"
          },
          {
            "type": "html",
            "text": "<i>\"Why did someone have to invent a Java?\"</i>",
            "id": "cf2fbd8eed019e5bc8a42b0f607eb9ba"
          },
          {
            "type": "html",
            "text": "\nI hope nobody is suggesting that Java was invented specifically because \"Smalltalk didn't ever take off in the mainstream of OO languages.\" My understanding is that the original Oak language was invented to run microprocessors in toasters, etc. - not Smalltalk's target market. IMHO Java's success is a function of Sun's marketing (as [[Ralph Johnson]] observed) as much as any inherent technological superiority, and I concur with the above assertion that the market they reached was the vast market of folks who wouldn't have much cognitive dissonance with Java's syntax.",
            "id": "eefa784b1353eed82565fdb3a56749c2"
          },
          {
            "type": "html",
            "text": "\nI also concur with the assertions that as a presentation-layer technology, Smalltalk lost market share because of its price differences, footprint differences, and publicity differences in comparison with the competing technologies: yes, [[Visual Basic]], but also HTML and Java. However I'm not sure I'd agree with the assertion that Java is any easier to learn or use than Smalltalk. The ease-of-learning challenge in both cases comes more from gaining familiarity with class libraries, and good object-oriented design, than from gaining familiarity with syntax (and IMHO Smalltalk's is simpler and more uniform). The ease-of-use challenge in both cases comes from development environment support - and IMHO Java generally trails Smalltalk in this area, with the possible exception of [[Visual Age]] for Java, which has its own host of issues (isn't VAJ actually written in Smalltalk, forming another \"commercial use\"?)",
            "id": "126781ea489ac15953ac0dffd7b3e7d5"
          },
          {
            "type": "html",
            "text": "\nLate in the game the Smalltalk vendors began emphasizing Smalltalk's viability as a server-side technology (products like [[Visual Wave]] come to mind), but Java has much more standardization to offer in application server space than the Smalltalk community ever did, with things like the Servlet spec, the EJB component model, and a more viable selection of ORB vendors. I don't think the absence of a Smalltalk VM plug-in for Web browsers is a major factor - how many serious, \"real-world\" applications have sufficiently overcome the inherent issues to use applets for the presentation layer?",
            "id": "17d0b4aa1f43b895fc6bb665116c90c4"
          },
          {
            "type": "html",
            "text": "\nThe marginalization of Smalltalk in the mainstream market has been a gloomy thing to watch for old Smalltalkers, given everything Smalltalk has contributed to the world (go rent [[Pirates Of Silicon Valley]] sometime). Market dynamics caused the switch of horses several years ago. But there are worse alternatives than Java. Java is enough like Smalltalk that much of the design experience transfers, and I actually like the [[Separation Of Interface From Implementation]]. Java promises a level of standardization unachieved by the dialect-fractured Smalltalk community which, coupled with the ongoing amount of Java development and energy around Java, could help enable the [[Component Based Development]] approach described nicely by [[Clemens Szyperski]] in [[Component Software]]. My main gripe is the difference in productivity level.",
            "id": "5dc26a09d580b2f461e8deea2cac955d"
          },
          {
            "type": "html",
            "text": "\nAnd I don't think this discussion should be cast as a frustrating or regretted [[Language Pissing Match]] - what we're really chewing on here are the forces that drive the dynamics in the market of software development technology.",
            "id": "ecaec1a5b951d2b110d8dc674dc62bc6"
          },
          {
            "type": "html",
            "text": "-- [[Randy Stafford]]",
            "id": "874aed70d209c28cf6b1ceef2d0bbad4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "The comments people are making about Smalltalk's failure to compete effectively with Java remind me of this 1993 essay on Lisp's failure to compete with C:",
            "id": "9ee45c636d90025aa9294697d0827b33"
          },
          {
            "type": "html",
            "text": "\n[http://www.ai.mit.edu/docs/articles/good-news/good-news.html www.ai.mit.edu]",
            "id": "8b5c98ca9fb26f0ae212f5a136ee7a89"
          },
          {
            "type": "html",
            "text": "\nIf you don't have time to read this whole essay, at least check out the \"[[Worse Is Better]]\" section: [http://www.ai.mit.edu/docs/articles/good-news/subsection3.2.1.html www.ai.mit.edu]",
            "id": "ffca9970ffbb6285c1b0cac32c9ab6ad"
          },
          {
            "type": "html",
            "text": "-- [[Seth Gordon]]",
            "id": "e0790f99b34f814a2c5c8e88e35d2bec"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "While I see a number of excellent arguments, I think there is a [[Human Factors]] angle that I haven't yet seen addressed.",
            "id": "4830f5c60fc68699277355c7d38598b5"
          },
          {
            "type": "html",
            "text": "\nBackground: Almost four years ago, after programming in C and a little C++ for 10 years, I ran into a Smalltalker who, upset about the client's mandate to use Java instead of Smalltalk, decided to port the [[Visual Works]] framework to Java. So while I haven't written a line of Smalltalk, I have a little familiarity with how the framework was built (without the benefit of Smalltalk tools! Arg!)",
            "id": "c5119bc9b6e866784ff87c8230d31e31"
          },
          {
            "type": "html",
            "text": "\nI learned a lot, especially about OO, but about eight months later I ran off screaming and hollering. Why?",
            "id": "14fa5beb204b26b0e0867013e828f597"
          },
          {
            "type": "html",
            "text": "\nIt was the first time I'd ever seen tons of little methods, each one to two lines long. Smalltalkers love to maximize reuse and flexibility, which is great, but at what price? People with good memories might not think twice about this, but I have a horrendous short term memory, and I found myself spending most of my time spinning my wheels searching for the right method, instead of getting work done. Even with tools, I suspect there would be a daunting learning curve.",
            "id": "cd333e603f13e0b2561d7af0a3937f42"
          },
          {
            "type": "html",
            "text": "\nBut back to the point I'm trying to make: I suspect becoming familiar and productive within a Smalltalk environment requires not only time and effort, but also an innate intellectual capability that developers across the board may or may not have. This means you bifurcate your development community into those who can and those who can't, and as soon as you do that you're dead, you'll never hit critical mass because there will always be someone left out in the cold. And technologies that don't hit critical mass are forever doomed to defend their turf against those that do.",
            "id": "e0e04f1239e1894fc577008e6a4c1881"
          },
          {
            "type": "html",
            "text": "-- [[Eileen Sauer]]",
            "id": "abec8ba1b9e84fb2d137ccc4b2ce3a9a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "Thanks for an interesting new perspective, Eileen. But what implications might this have for refactoring? Does this mean that programs with longer (therefore fewer) methods are better, because it is easier to remember where their logic is? How to define better?",
            "id": "90b5d65b2b3506d3e472785384fd2b8f"
          },
          {
            "type": "html",
            "text": "<i>\"you'll never hit critical mass because there will always be someone left out in the cold\"</i>",
            "id": "6050753cd97c482179ce8a8b90bb6da5"
          },
          {
            "type": "html",
            "text": "\nTo achieve critical mass, IMHO, you don't have to avoid leaving someone out in the cold - you just have to attract *enough* people into the warmth. I don't think that Smalltalk failed to achieve critical mass because Smalltalkers like [[Composed Method]]. I think it failed to achieve critical mass for other reasons having to do with business decisions and market dynamics.",
            "id": "c7b24312a8fdbb69b090e4d59a51ed3a"
          },
          {
            "type": "html",
            "text": "-- [[Randy Stafford]]",
            "id": "874aed70d209c28cf6b1ceef2d0bbad4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "Hi, Randy, sorry it took a while; I was trying to keep this short but it's just not working.",
            "id": "02c6d2923fd10ce0af5ba48ee58bfdc3"
          },
          {
            "type": "html",
            "text": "<i>\"But what implications might this have for refactoring?\"</i>",
            "id": "705ac904d5f4b3266c9a670a20cd834a"
          },
          {
            "type": "html",
            "text": "\nFear not, I'm not one of those Blob goddesses. :) I Love refactoring, and I laughed when [[Martin Fowler]]'s book came out because I'd already been doing a lot of it on other peoples' code, often from say 800 lines down to 150 or 100 lines. It's the only method I know of to help non-OO people to see the light. I also agree with much of what I read in [[Composed Method]]; I think my methods tend to run 5 - 40 lines, with a healthy number of one-liners nowadays (it took a couple years). I cringe when I see long methods nested 7 levels deep.",
            "id": "fd661a956db151ab51ff1ddeeea9038c"
          },
          {
            "type": "html",
            "text": "\nWhen I think back and try to pinpoint what caused me to feel overwhelmed at the time, I suspect it was the layers upon layers of delegation. I remember at one point griping: \"Pass the buck, pass the buck, pass the buck... Who's doing the work???\" And again, while it may not bother a lot of people, I found it distressing because, having a bad short term memory, I'd finally get to where something was being done and by then I've totally forgotten what I was trying to do!",
            "id": "0ff71ad32b28d08387513403e0d85386"
          },
          {
            "type": "html",
            "text": "<i>\"How to define better?\"</i>",
            "id": "78777a3152ae1412a1977230a7fb7dd9"
          },
          {
            "type": "html",
            "text": "\nWe all know that Blob methods don't work. Unmaintainable; no flexibility or reuse. At the other extreme, I don't think tons of one-line methods with layers upon layers of delegation works either. Loss of comprehension, prohibitive learning curve for a non-trivial number of developers (unfortunately, [[Frank Sauer]] disagrees. He's also the Smalltalker who sent several of us screaming and hollering the first time around). Between those two is a bewildering spectrum of options, complicated by the fact that we all have our personal preferences and can't always distinguish between a right/wrong argument vs. opinion. :) So what is better? I'll recap what I think is fairly accepted at this point:",
            "id": "1fb81230c424527295a5e0fd5c515f3d"
          },
          {
            "type": "html",
            "text": " Decouple logically unrelated functionality.",
            "id": "4d307cb6fe5456a16d2f7084c5e30102"
          },
          {
            "type": "html",
            "text": " Design and refactor such that when you have to change something, you have to change it only in one place.",
            "id": "705e021c98368bf79b92f65013952c80"
          },
          {
            "type": "html",
            "text": " Try and avoid more than about 7-8 levels of indirection.",
            "id": "23a48ce7b29380c5f828289298dcc563"
          },
          {
            "type": "html",
            "text": "I read somewhere that people can generally handle a train of thought that includes up to 7 or 8 items, but beyond that they start dropping things. You can nest more, but you do so at the risk of losing comprehension.",
            "id": "1eb19cab00f33440b058ae076a5ade5d"
          },
          {
            "type": "html",
            "text": "<i>\"you just have to attract *enough* people into the warmth.\"</i>",
            "id": "43b71af08d55e21fa1cd2bca50d8385d"
          },
          {
            "type": "html",
            "text": "\nI fully agree. But what is *enough*? I think that's where Smalltalkers like Frank may have a problem. They're inherently an intelligent bunch with good short term memories and an ability to think outside of the box. They don't always see the limitations others have in getting to where they are. That's what happened on this particular project. What I saw was phenomenal - a small island of sanity in a room full of people running around like chickens with their heads cut off. Management would run up to Frank and say \"Help! Another change in the requirements! How long is it going to take?\" and Frank would say anywhere from 5 minutes to two days, and 90% of the time it was 5 minutes. He spoiled the client, and the system was successfully deployed on thousands of desktops. But, I also remember a time when Frank was scratching his head because a method was firing 10 times instead of once. When he finally traced a convoluted path and realized his events were propagating back, I realized, this is great but, this\nclient will have to keep him on call because there's always a chance that some bug will crop up that only he can fix. And sure enough, two years later, the client decided to switch to VB, because even with Frank training the client's IT staff, I don't think he was able to get them to a point where they could maintain it. So was the project a success or failure? It opened my eyes to better programming practices, so in that respect it was a success because he managed to get one convert. As to the others who left - you're not solving the problem of getting more non-OO people on the bandwagon, you're merely shuffling the problem around, and sooner or later you're refactoring their code again. The operation was successful but the patient died.",
            "id": "9ac27e7fc2846f3a502b9b19b3996eac"
          },
          {
            "type": "html",
            "text": "\nLet's change gears and look at cars as an example. What makes a successful car? One that accommodates a variety of people. That's difficult. You have people who are tall, short, fat, skinny, wear contacts, are handicapped, have long legs, short arms, short legs, long arms, etc. If you don't wear contacts, you wouldn't be sensitive to the fact that badly designed airflow systems will dry their eyes out more quickly. But a good car manufacturer will make sure it's test driven by as broad a spectrum of people as possible. Similarly, if you want to turn this into a Smalltalk world, you have to be sensitive to where it operates counter to natural human nature, and account for it. But Smalltalk by its very nature has been used by a fairly small and homogenous group of people, so they may not be as aware of human factor issues as, for example, I am. Frank gripes that this is the \"world according to Eileen\". I suspect if you talk to a lot of people who tried to learn Smalltalk and gave up in frustration, you may\nhear a similar theme.",
            "id": "d502ccf49a2ebb8f0a1b347c2e052b72"
          },
          {
            "type": "html",
            "text": "<i>\"I think it failed to achieve critical mass for other reasons having to do with business decisions and market dynamics.\"</i>",
            "id": "6bf78e6872e9f8435b550a8f9d035abb"
          },
          {
            "type": "html",
            "text": "\nFrom what I understand of Smalltalk's history, I agree that the reasons you mention are the main reasons why Smalltalk didn't achieve critical mass. As well as the fact that it was well before its time. BUT, as with all things in our wonderfully complex world, when events occur and we ask why, we often can't pinpoint it to a single or even a couple of reasons, but rather a sometimes large number of different reasons with complex interactions. And while I agreed with much that was said thus far, I feel that even in a perfect world - if Smalltalk had been taught in our universities, marketed differently, etc., there is a chance this <i>still</i> wouldn't be a Smalltalk world today. Why?",
            "id": "b99cac51d338a309d42df8bec74983ff"
          },
          {
            "type": "html",
            "text": "\nBack to your statement <i>\"you just have to attract *enough* people into the warmth.\"</i> Let's turn that around and ask what happens when you attract \"not enough\" people into the warmth. That means a non-trivial number of people are left out, and I don't just mean cold numbers and percentages. I'm talking about the increasing risk that one of those people is going to say \"hmph! What is this nonsense? I don't understand it!\" and he goes out and writes something like Java.",
            "id": "7116751c212409f0e07298c734ef37f2"
          },
          {
            "type": "html",
            "text": "\nJust one last thing before this poor page explodes. Rational and Together/J allow you to take code and reverse engineer it into a model. I wish sometimes that there were a way to take a fully refactored (and sometimes hard to comprehend) OO system and de-factor it into a more procedural style in some browser so that you could more easily see what's going on. Refactoring is wonderful but I feel it solves only half the problem. That's for another day.",
            "id": "8f19edfe41a6b8a9e942bb670c7e6138"
          },
          {
            "type": "html",
            "text": "-- [[Eileen Sauer]]",
            "id": "abec8ba1b9e84fb2d137ccc4b2ce3a9a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "<i>When I think back and try to pinpoint what caused me to feel overwhelmed at the time, I suspect it was the layers upon layers of delegation. I remember at one point griping: \"Pass the buck, pass the buck, pass the buck... Who's doing the work???\"</i>",
            "id": "2c815736ee87034f010b6f88a16f4bd9"
          },
          {
            "type": "html",
            "text": "\nThat's exactly what some of my coworkers said about Java/Swing and some of my code. The cure is, IMHO, to accept that you don't need to know. You need to rely on the layers. And of course this has to be possible. If the abstraction does break down there's only one tool to help you find out what's <i>really</i> happening: a decent debugger.",
            "id": "1ba748adb71535e4ff35d04c3aa1ba26"
          },
          {
            "type": "html",
            "text": "-- [[Michael Schuerig]]",
            "id": "f5b00871b63668e58a4f635de66fcc31"
          },
          {
            "type": "html",
            "text": "<i>I've found that when I refactor coworkers' code, much of the \"work\" ends up being done by collections ... hash lookups instead of switch staments, iterations over loops instead of gobs of ifs, etc.</i>",
            "id": "0d90b73b040145f7e0831d3342a6ab2f"
          },
          {
            "type": "html",
            "text": "\nThen there is the guy I share a cubicle with. He learned RPG back in 1968 and has been using it almost exclusively ever since.",
            "id": "b49569a7e18c26788386f90c263aab83"
          },
          {
            "type": "html",
            "text": "-- [[Andrew Semprebon]]",
            "id": "6556b783790755500108c3541dbe6a01"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "I guess I've never really understood why people get so passionate about discussing the syntax idiosyncracies of languages and seem so uninterested in program structure. It's like arguing whether English, Russian, or Japanese is best suited for writing novels. I tend to find good programming relies a lot more on good structure than picking the <i>right</i> language. -- [[Wayne Mack]]",
            "id": "392a4759971889b3d9ef8af889d80dc1"
          },
          {
            "type": "html",
            "text": "\nI think that is because, in small scale, choice of language has an immediate impact on how long it takes to solve certain kinds of tasks. Consider Ward's example for the [[Linear Shuffle]] in [[Icon Language]]:",
            "id": "7d48a4be64d0060d72c327fa7c168b8c"
          },
          {
            "type": "html",
            "text": "\nevery !deck :=: ?deck",
            "id": "54a3df94f269930089da0587b73425de"
          },
          {
            "type": "html",
            "text": "...and contrast to the complexity of the same task expressed in most other languages.",
            "id": "aaf50995b8671b2c0130e9a43e4a8ae5"
          },
          {
            "type": "html",
            "text": "<i>But it's not an implementation of a linear shuffle, as is clearly explained on the [[Linear Shuffle]] page. It's beautiful, but it fails to meet the task!</i>",
            "id": "c99faebd2eea484a4d2bfbcf16493249"
          },
          {
            "type": "html",
            "text": "\nHowever, we must add two important observations: first, what holds true at small scales should not be extrapolated to larger scales. Thus, language choice might be a less important factor in most programming projects, because as overall project size increases, the effects of architecture become more important relative to the effects of language. Second, it's easy to overlook this argument of scale, and to mistakenly extrapolate the importance of language choice in the small to larger scales; because we tend to think of language choice as important, and thus relevant to doing our jobs well, we tend to have highly polarized opinions as to the 'intrinsic value of language X', when most languages will let you do most everything mostly well.",
            "id": "69fe27114dd6afaa54cbbdae63a44f15"
          },
          {
            "type": "html",
            "text": "-- [[Laurent Bossavit]]",
            "id": "c33151df16c1e5f02b2aa1aa3a68b2a5"
          },
          {
            "type": "html",
            "text": "<i>And despite the changes in English over the decades, with more and more concepts being encapsulated in smaller and smaller terms, novels are <b>still</b> about the same size they were a century and a half ago. The scale of a novel is <b>qualitatively</b> different from the scale of the language it's written in.</i>",
            "id": "9d5214337ec90ed3edbb63284a4aa184"
          },
          {
            "type": "html",
            "text": "\nThe language question is still important in the large scale, because some languages don't scale well.",
            "id": "bcf5754d2ddc175a25b9f5dfe868760f"
          },
          {
            "type": "html",
            "text": "-- [[Dirck Blaskey]]",
            "id": "4e8008b2317991dc185c67380031a6cd"
          },
          {
            "type": "html",
            "text": "\nThat depends on how you scale it. Some languages might not be very good at making single giant EXE's, but may work just fine if split up into events and tasks under an [[Event Driven Programming]] framework. Related: [[System Size Metrics]]",
            "id": "11a64e1b14200fdb2346b9a5176ca193"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "There is <i>intrinsic value</i> in being able to write",
            "id": "6d6e77bdd0137634b379644798a455a1"
          },
          {
            "type": "code",
            "text": " fun = anInstance.method # python\n fun(3, \"guido\")",
            "id": "8e1fd7cea4a940beb41f5e024de3c215"
          },
          {
            "type": "html",
            "text": "rather than",
            "id": "c14731f83396a04bf209ee0b0279a8c0"
          },
          {
            "type": "code",
            "text": " import java.lang.reflect.*;\n Class aClass = anInstance.getClass();\n Method fun = aClass.getMethod(\"method\", new Class[] {Integer, String)); // arf\n fun.invoke(anInstance, new Object[] {new Integer(3), \"billjoy\"});",
            "id": "6ecd46705e1618edf8ff1d4c6dbb9966"
          },
          {
            "type": "html",
            "text": "-- [[Paul Taney]]",
            "id": "8d3fb1f562498ab136d43d25c372fbc5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "[[Carson Reynolds]] list sites for further comparisons at [http://lambda-the-ultimate.org/classic/message5975.html lambda-the-ultimate.org]",
            "id": "fb904ce7eb496a5442338ea5ec873571"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "See: [[Whatsa Pissing Match]], [[Holy War]], [[Wiki Warrior]]",
            "id": "c7ff1a6dda5d4c9527ce2943db952ca9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5a2ac00873cf4044641d01a2681a4afe"
          },
          {
            "type": "html",
            "text": "[[Category Comparisons]]",
            "id": "e865cbb3db002adc4bbf4f7b40c3c21d"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?LanguagePissingMatch c2.com]",
            "id": "fdb6a895dbabd10c4607d7eab112707d"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1707798333835
    }
  ]
}