{
  "title": "2023-09-18",
  "story": [
    {
      "type": "paragraph",
      "id": "7750d50b343ba981",
      "text": "‚áí [[Elm Parser]] ‚áí [[Loop]] ‚áí [[Track in Reverse Order]] ‚áí [[KWIC Indexing]] ‚áí [[Trie]] ‚áí [[Patricia]] ‚áí [[Pile]]"
    },
    {
      "type": "markdown",
      "id": "311ab87d5994cda1",
      "text": "## Parsers"
    },
    {
      "type": "markdown",
      "id": "7789a11c797694e5",
      "text": "## Building Blocks"
    },
    {
      "type": "markdown",
      "id": "f199d5cf13beead8",
      "text": "## Pipelines"
    },
    {
      "type": "paragraph",
      "id": "865a630b21dfd333",
      "text": "‚áí [[Parser Pipelines]]"
    },
    {
      "type": "markdown",
      "id": "f8ca51da0f12927b",
      "text": "## Branches"
    },
    {
      "type": "markdown",
      "id": "c8b32a60f5bc2bc4",
      "text": "## Loops"
    },
    {
      "type": "paragraph",
      "id": "8c2733d497f18fcf",
      "text": "‚áí [[Loop]] [https://package.elm-lang.org/packages/elm/parser/latest/Parser#loop page], statementsHelp,  ParserHelpers [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/ParserHelpers.elm#L6-L7 code]"
    },
    {
      "type": "paragraph",
      "id": "f60f58d21e281fff",
      "text": "Notice that the statements are tracked in reverse as we [[Loop]], and we reorder them only once we are Done. This is a very common pattern with loop! [‚áí [[Track in Reverse Order]]]"
    },
    {
      "type": "reference",
      "id": "c60d5902fbe50c6d",
      "site": "wiki.ralfbarkow.ch",
      "slug": "patricia",
      "title": "Patricia",
      "text": "Practical Algorithm To Retrieve Information Coded In Alphanumeric‚Äôs basic idea is to build a binary [[Trie]], but to avoid one-way branching by including in each node the number of bits to skip over before making the next test. "
    },
    {
      "type": "paragraph",
      "id": "270e588cf5088d99",
      "text": "A search in Patricia's tree is carried out as follows: ‚Ä¶, see TAOCP, v. 3, p. 499 ff."
    },
    {
      "type": "paragraph",
      "id": "954792dd39570dd5",
      "text": "Compare with [[Pile Systems]], which add an associative manner. See \"Beyond WinFS ‚Äì Let associations rule! ‚Äì or: An introduction to [[Pile]] for mere mortals\" [https://weblogs.asp.net/ralfw/433714 post]"
    },
    {
      "type": "image",
      "id": "58cbec929cb159a5",
      "text": "Relations in Pile ",
      "size": "wide",
      "width": 430,
      "height": 166,
      "url": "/assets/plugins/image/0d7e49536cb9099e71dc248e6f56ac3e.jpg"
    },
    {
      "type": "markdown",
      "id": "3205f13f74100b96",
      "text": "> The parent-child relationship between two relations can be in so called normative manner or in associative manner. The Normative parent (Np) of a relation is the origin of it, the Associative parent (Ap) is the destination. So you could read a relation from left to right: A to B or A before B or whatever. (Erez even sees time encoded in Pile relations ‚Äì but that¬¥s a part I don¬¥t understand yet. He probably alludes to a reading of relations like \"A causing B\".)"
    },
    {
      "type": "paragraph",
      "id": "7076ade87e0252ed",
      "text": "‚áí [[Patricia‚Äôs Tree]] ‚áí [[Search in Patricia‚Äôs Tree]] ‚áí [[Header]]"
    },
    {
      "type": "paragraph",
      "id": "323a400f7fe792cb",
      "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
    },
    {
      "type": "paragraph",
      "id": "57a7fcf35a23695f",
      "text": "Note: [[Relations in Pile]] seem to combine such a search in Patricia's tree with a move/jump into the [[Associative Manner]] ‚Ä¶, see the Related function of dmx."
    },
    {
      "type": "markdown",
      "id": "c2958a7cb83bd9b3",
      "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (nonexistent) 12th bit of the 10-bit argument. At this point we compare the argument to the TEXT at the point specified in the current node (in this case node ùõæ). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node ùõæ and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
    },
    {
      "type": "paragraph",
      "id": "82a3eaeafa095916",
      "text": "Note: In the Pile/dmx context, the agrument as \"the beginning of every key represented by dotted links ‚Ä¶\" leads to all related topics of a node and its descendants."
    },
    {
      "type": "paragraph",
      "id": "3edb2adf89e6de38",
      "text": "See \"[[The Original Pile Engine Demystified]]\" [https://weblogs.asp.net/ralfw/441384 post]"
    },
    {
      "type": "markdown",
      "id": "79f33ff17b93a0e7",
      "text": "## Whitespace"
    },
    {
      "type": "markdown",
      "id": "17c753d506136654",
      "text": "## Chompers"
    },
    {
      "type": "markdown",
      "id": "b8a909d9b5160408",
      "text": "## Errors"
    },
    {
      "type": "markdown",
      "id": "1886193722f2adc8",
      "text": "## Indentation"
    },
    {
      "type": "markdown",
      "id": "780d3584b92ca7cc",
      "text": "## Positions"
    },
    {
      "type": "pagefold",
      "id": "defa47f0eb89a11e",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "abca32f09f3a7fac",
      "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$169501534521303IhkkF:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n[https://www.youtube.com/watch?v=zBpWkTETwD8&t=1041s video]\n[[Gordon Bell]] and [[Carver Mead]] explain how things work when you are given permission to imagine outside of expectations. "
    },
    {
      "type": "video",
      "id": "7257737bd1d36335",
      "text": "YOUTUBE zBpWkTETwD8\n[https://www.youtube.com/watch?v=zBpWkTETwD8&t=1041s Frustration]"
    },
    {
      "type": "paragraph",
      "id": "8b437cca002e7d5b",
      "text": "[[Sense of the Potential]] vs [[Focus On User Needs]]"
    },
    {
      "type": "paragraph",
      "id": "fa27c492ea43a3a4",
      "text": "[https://youtu.be/zBpWkTETwD8?t=1332 22:11] ‚Äì it was not really a need it was a sense of the potential and a determination and that and this sort of sense of the the possibilities and the intrigue of wanting it to happen and then the people that could be users getting excited at it"
    },
    {
      "type": "paragraph",
      "id": "3bbeba1bed88957b",
      "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$169504313327805MmHMe:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWhen Kent Beck and I were pair-programming every day we only needed one of our two internally made Smalltalk workstations. I lent my own machine to Carver so that a graduate student could finish his thesis. In return I got an excellent tour of his lab and fully dosed in his philosophy."
    },
    {
      "type": "paragraph",
      "id": "3d63acaa4f36a5f7",
      "text": "My lab director had already told Carver we had no available machines. He was just walking Carver around our lab as a courtesy. I'm sure he didn't understand why my offer was so easy and of such potential but he trusted my judgement and made the shipping arrangements. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$169504451124317xZjhr:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-09-18",
        "story": []
      },
      "date": 1695015927235
    },
    {
      "item": {
        "type": "factory",
        "id": "7750d50b343ba981"
      },
      "id": "7750d50b343ba981",
      "type": "add",
      "date": 1695015928807
    },
    {
      "type": "edit",
      "id": "7750d50b343ba981",
      "item": {
        "type": "paragraph",
        "id": "7750d50b343ba981",
        "text": "‚áí [[Elm Parser]] "
      },
      "date": 1695015930681
    },
    {
      "item": {
        "type": "factory",
        "id": "311ab87d5994cda1"
      },
      "id": "311ab87d5994cda1",
      "type": "add",
      "after": "7750d50b343ba981",
      "date": 1695015955393
    },
    {
      "type": "edit",
      "id": "311ab87d5994cda1",
      "item": {
        "type": "paragraph",
        "id": "311ab87d5994cda1",
        "text": "Parsers"
      },
      "date": 1695015957938
    },
    {
      "type": "add",
      "id": "7789a11c797694e5",
      "item": {
        "type": "paragraph",
        "id": "7789a11c797694e5",
        "text": "Building Blocks"
      },
      "after": "311ab87d5994cda1",
      "date": 1695015967525
    },
    {
      "item": {
        "type": "factory",
        "id": "f199d5cf13beead8"
      },
      "id": "f199d5cf13beead8",
      "type": "add",
      "after": "7789a11c797694e5",
      "date": 1695015977000
    },
    {
      "type": "edit",
      "id": "f199d5cf13beead8",
      "item": {
        "type": "paragraph",
        "id": "f199d5cf13beead8",
        "text": "Pipelines"
      },
      "date": 1695015979306
    },
    {
      "type": "add",
      "id": "f8ca51da0f12927b",
      "item": {
        "type": "paragraph",
        "id": "f8ca51da0f12927b",
        "text": "Branches"
      },
      "after": "f199d5cf13beead8",
      "date": 1695015990320
    },
    {
      "type": "add",
      "id": "c8b32a60f5bc2bc4",
      "item": {
        "type": "paragraph",
        "id": "c8b32a60f5bc2bc4",
        "text": "Loops"
      },
      "after": "f8ca51da0f12927b",
      "date": 1695016000602
    },
    {
      "type": "add",
      "id": "79f33ff17b93a0e7",
      "item": {
        "type": "paragraph",
        "id": "79f33ff17b93a0e7",
        "text": "Whitespace"
      },
      "after": "c8b32a60f5bc2bc4",
      "date": 1695016011826
    },
    {
      "type": "add",
      "id": "17c753d506136654",
      "item": {
        "type": "paragraph",
        "id": "17c753d506136654",
        "text": "Chompers"
      },
      "after": "79f33ff17b93a0e7",
      "date": 1695016022763
    },
    {
      "type": "add",
      "id": "b8a909d9b5160408",
      "item": {
        "type": "paragraph",
        "id": "b8a909d9b5160408",
        "text": "Errors"
      },
      "after": "17c753d506136654",
      "date": 1695016032442
    },
    {
      "type": "add",
      "id": "1886193722f2adc8",
      "item": {
        "type": "paragraph",
        "id": "1886193722f2adc8",
        "text": "Indentation"
      },
      "after": "b8a909d9b5160408",
      "date": 1695016042436
    },
    {
      "type": "add",
      "id": "780d3584b92ca7cc",
      "item": {
        "type": "paragraph",
        "id": "780d3584b92ca7cc",
        "text": "Positions"
      },
      "after": "1886193722f2adc8",
      "date": 1695016051257
    },
    {
      "item": {
        "type": "factory",
        "id": "defa47f0eb89a11e"
      },
      "id": "defa47f0eb89a11e",
      "type": "add",
      "after": "780d3584b92ca7cc",
      "date": 1695016464742
    },
    {
      "type": "edit",
      "id": "defa47f0eb89a11e",
      "item": {
        "type": "pagefold",
        "id": "defa47f0eb89a11e",
        "text": "~"
      },
      "date": 1695016470364
    },
    {
      "item": {
        "type": "factory",
        "id": "abca32f09f3a7fac"
      },
      "id": "abca32f09f3a7fac",
      "type": "add",
      "after": "defa47f0eb89a11e",
      "date": 1695016471785
    },
    {
      "type": "edit",
      "id": "abca32f09f3a7fac",
      "item": {
        "type": "paragraph",
        "id": "abca32f09f3a7fac",
        "text": "Ward via [matrix]\nhttps://www.youtube.com/watch?v=zBpWkTETwD8&t=1041s\nGordon Bell and Carver Mead explain how things work when you are given permission to imagine outside of expectations. "
      },
      "date": 1695016490252
    },
    {
      "item": {
        "type": "factory",
        "id": "7257737bd1d36335"
      },
      "id": "7257737bd1d36335",
      "type": "add",
      "after": "abca32f09f3a7fac",
      "date": 1695016491584
    },
    {
      "type": "edit",
      "id": "7257737bd1d36335",
      "item": {
        "type": "video",
        "id": "7257737bd1d36335",
        "text": "YOUTUBE zBpWkTETwD8&t=1041s"
      },
      "date": 1695016500015
    },
    {
      "type": "fork",
      "date": 1695016587369
    },
    {
      "type": "edit",
      "id": "7257737bd1d36335",
      "item": {
        "type": "video",
        "id": "7257737bd1d36335",
        "text": "YOUTUBE zBpWkTETwD8"
      },
      "date": 1695016593953
    },
    {
      "type": "add",
      "id": "9d1a33b183c142b8",
      "item": {
        "type": "paragraph",
        "id": "9d1a33b183c142b8",
        "text": "ParserHelpers [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/ParserHelpers.elm#L6-L7 code]"
      },
      "after": "c8b32a60f5bc2bc4",
      "date": 1695016671493
    },
    {
      "id": "865a630b21dfd333",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "865a630b21dfd333",
        "text": "‚áí [[Parser Pipelines]]"
      },
      "after": "f199d5cf13beead8",
      "attribution": {
        "page": "Elm Parser"
      },
      "date": 1695016720620
    },
    {
      "type": "add",
      "id": "8c2733d497f18fcf",
      "item": {
        "type": "paragraph",
        "id": "8c2733d497f18fcf",
        "text": "loop [https://package.elm-lang.org/packages/elm/parser/latest/Parser#loop page]"
      },
      "after": "c8b32a60f5bc2bc4",
      "date": 1695016781822
    },
    {
      "type": "edit",
      "id": "311ab87d5994cda1",
      "item": {
        "type": "paragraph",
        "id": "311ab87d5994cda1",
        "text": "## Parsers"
      },
      "date": 1695016795757
    },
    {
      "type": "edit",
      "id": "311ab87d5994cda1",
      "item": {
        "type": "markdown",
        "id": "311ab87d5994cda1",
        "text": "## Parsers"
      },
      "date": 1695016799107
    },
    {
      "type": "edit",
      "id": "7789a11c797694e5",
      "item": {
        "type": "paragraph",
        "id": "7789a11c797694e5",
        "text": "## Building Blocks"
      },
      "date": 1695016802884
    },
    {
      "type": "edit",
      "id": "7789a11c797694e5",
      "item": {
        "type": "markdown",
        "id": "7789a11c797694e5",
        "text": "## Building Blocks"
      },
      "date": 1695016804059
    },
    {
      "type": "edit",
      "id": "f199d5cf13beead8",
      "item": {
        "type": "paragraph",
        "id": "f199d5cf13beead8",
        "text": "## Pipelines"
      },
      "date": 1695016807698
    },
    {
      "type": "edit",
      "id": "f199d5cf13beead8",
      "item": {
        "type": "markdown",
        "id": "f199d5cf13beead8",
        "text": "## Pipelines"
      },
      "date": 1695016808686
    },
    {
      "type": "edit",
      "id": "f8ca51da0f12927b",
      "item": {
        "type": "paragraph",
        "id": "f8ca51da0f12927b",
        "text": "## Branches"
      },
      "date": 1695016811967
    },
    {
      "type": "edit",
      "id": "f8ca51da0f12927b",
      "item": {
        "type": "markdown",
        "id": "f8ca51da0f12927b",
        "text": "## Branches"
      },
      "date": 1695016812996
    },
    {
      "type": "edit",
      "id": "c8b32a60f5bc2bc4",
      "item": {
        "type": "paragraph",
        "id": "c8b32a60f5bc2bc4",
        "text": "## Loops"
      },
      "date": 1695016816172
    },
    {
      "type": "edit",
      "id": "c8b32a60f5bc2bc4",
      "item": {
        "type": "markdown",
        "id": "c8b32a60f5bc2bc4",
        "text": "## Loops"
      },
      "date": 1695016817531
    },
    {
      "type": "edit",
      "id": "79f33ff17b93a0e7",
      "item": {
        "type": "paragraph",
        "id": "79f33ff17b93a0e7",
        "text": "## Whitespace"
      },
      "date": 1695016822359
    },
    {
      "type": "edit",
      "id": "79f33ff17b93a0e7",
      "item": {
        "type": "markdown",
        "id": "79f33ff17b93a0e7",
        "text": "## Whitespace"
      },
      "date": 1695016823825
    },
    {
      "type": "edit",
      "id": "17c753d506136654",
      "item": {
        "type": "paragraph",
        "id": "17c753d506136654",
        "text": "## Chompers"
      },
      "date": 1695016827276
    },
    {
      "type": "edit",
      "id": "17c753d506136654",
      "item": {
        "type": "markdown",
        "id": "17c753d506136654",
        "text": "## Chompers"
      },
      "date": 1695016828242
    },
    {
      "type": "edit",
      "id": "b8a909d9b5160408",
      "item": {
        "type": "paragraph",
        "id": "b8a909d9b5160408",
        "text": "## Errors"
      },
      "date": 1695016832587
    },
    {
      "type": "edit",
      "id": "b8a909d9b5160408",
      "item": {
        "type": "markdown",
        "id": "b8a909d9b5160408",
        "text": "## Errors"
      },
      "date": 1695016833546
    },
    {
      "type": "edit",
      "id": "1886193722f2adc8",
      "item": {
        "type": "paragraph",
        "id": "1886193722f2adc8",
        "text": "## Indentation"
      },
      "date": 1695016837098
    },
    {
      "type": "edit",
      "id": "1886193722f2adc8",
      "item": {
        "type": "markdown",
        "id": "1886193722f2adc8",
        "text": "## Indentation"
      },
      "date": 1695016838036
    },
    {
      "type": "edit",
      "id": "780d3584b92ca7cc",
      "item": {
        "type": "paragraph",
        "id": "780d3584b92ca7cc",
        "text": "## Positions"
      },
      "date": 1695016841152
    },
    {
      "type": "edit",
      "id": "780d3584b92ca7cc",
      "item": {
        "type": "markdown",
        "id": "780d3584b92ca7cc",
        "text": "## Positions"
      },
      "date": 1695016842230
    },
    {
      "type": "edit",
      "id": "8c2733d497f18fcf",
      "item": {
        "type": "paragraph",
        "id": "8c2733d497f18fcf",
        "text": "loop [https://package.elm-lang.org/packages/elm/parser/latest/Parser#loop page], statementsHelp, "
      },
      "date": 1695016867436
    },
    {
      "type": "remove",
      "id": "9d1a33b183c142b8",
      "date": 1695016871561
    },
    {
      "type": "edit",
      "id": "8c2733d497f18fcf",
      "item": {
        "type": "paragraph",
        "id": "8c2733d497f18fcf",
        "text": "loop [https://package.elm-lang.org/packages/elm/parser/latest/Parser#loop page], statementsHelp,  ParserHelpers [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/ParserHelpers.elm#L6-L7 code]"
      },
      "date": 1695016873811
    },
    {
      "type": "add",
      "id": "097128d65eddb346",
      "item": {
        "type": "paragraph",
        "id": "097128d65eddb346",
        "text": "> Check out examples/DoubleQuoteString.elm for another example."
      },
      "after": "8c2733d497f18fcf",
      "date": 1695016940301
    },
    {
      "type": "edit",
      "id": "097128d65eddb346",
      "item": {
        "type": "markdown",
        "id": "097128d65eddb346",
        "text": "> Check out examples/DoubleQuoteString.elm for another example."
      },
      "date": 1695016942713
    },
    {
      "type": "edit",
      "id": "097128d65eddb346",
      "item": {
        "type": "markdown",
        "id": "097128d65eddb346",
        "text": "> Check out examples/DoubleQuoteString.elm [https://github.com/elm/parser/blob/master/examples/DoubleQuoteString.elm code] for another example."
      },
      "date": 1695016965109
    },
    {
      "type": "edit",
      "id": "097128d65eddb346",
      "item": {
        "type": "markdown",
        "id": "097128d65eddb346",
        "text": "> Check out [‚Ä¶]/DoubleQuoteString.elm [https://github.com/elm/parser/blob/master/examples/DoubleQuoteString.elm code] for another example."
      },
      "date": 1695017060196
    },
    {
      "type": "edit",
      "id": "097128d65eddb346",
      "item": {
        "type": "markdown",
        "id": "097128d65eddb346",
        "text": "> Check out DoubleQuoteString.elm [https://github.com/elm/parser/blob/master/examples/DoubleQuoteString.elm code] for another example."
      },
      "date": 1695017076520
    },
    {
      "type": "edit",
      "id": "abca32f09f3a7fac",
      "item": {
        "type": "paragraph",
        "id": "abca32f09f3a7fac",
        "text": "Ward via https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$169501534521303IhkkF:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st [matrix]\nhttps://www.youtube.com/watch?v=zBpWkTETwD8&t=1041s\nGordon Bell and Carver Mead explain how things work when you are given permission to imagine outside of expectations. "
      },
      "date": 1695017258491
    },
    {
      "type": "edit",
      "id": "abca32f09f3a7fac",
      "item": {
        "type": "paragraph",
        "id": "abca32f09f3a7fac",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$169501534521303IhkkF:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st [matrix]\nhttps://www.youtube.com/watch?v=zBpWkTETwD8&t=1041s\nGordon Bell and Carver Mead explain how things work when you are given permission to imagine outside of expectations. "
      },
      "date": 1695017263177
    },
    {
      "type": "edit",
      "id": "abca32f09f3a7fac",
      "item": {
        "type": "paragraph",
        "id": "abca32f09f3a7fac",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$169501534521303IhkkF:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nhttps://www.youtube.com/watch?v=zBpWkTETwD8&t=1041s\nGordon Bell and Carver Mead explain how things work when you are given permission to imagine outside of expectations. "
      },
      "date": 1695017276467
    },
    {
      "type": "edit",
      "id": "abca32f09f3a7fac",
      "item": {
        "type": "paragraph",
        "id": "abca32f09f3a7fac",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$169501534521303IhkkF:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n[https://www.youtube.com/watch?v=zBpWkTETwD8&t=1041s video]\nGordon Bell and Carver Mead explain how things work when you are given permission to imagine outside of expectations. "
      },
      "date": 1695017323142
    },
    {
      "type": "edit",
      "id": "7257737bd1d36335",
      "item": {
        "type": "video",
        "id": "7257737bd1d36335",
        "text": "YOUTUBE zBpWkTETwD8\n[https://www.youtube.com/watch?v=zBpWkTETwD8&t=1041s video]"
      },
      "date": 1695017457247
    },
    {
      "type": "edit",
      "id": "7257737bd1d36335",
      "item": {
        "type": "video",
        "id": "7257737bd1d36335",
        "text": "YOUTUBE zBpWkTETwD8\n[https://www.youtube.com/watch?v=zBpWkTETwD8&t=1041s Frustration]"
      },
      "date": 1695017481407
    },
    {
      "item": {
        "type": "factory",
        "id": "8b437cca002e7d5b"
      },
      "id": "8b437cca002e7d5b",
      "type": "add",
      "after": "7257737bd1d36335",
      "date": 1695018329311
    },
    {
      "type": "edit",
      "id": "8b437cca002e7d5b",
      "item": {
        "type": "paragraph",
        "id": "8b437cca002e7d5b",
        "text": "it was not really a need it was a sense of the potential and a determination and that and this sort of sense of the the possibilities and the intrigue of wanting it to happen and then the people that could be users getting excited at it very interesting but if you look down through the same thing happened with with radio there was a period of about 15 20 years when all of what we don't have in radio up until the time of spread spectrum stuff all came into place all the inventions everything and by the way television happened over a period of about ten years "
      },
      "date": 1695018332434
    },
    {
      "type": "edit",
      "id": "8b437cca002e7d5b",
      "item": {
        "type": "paragraph",
        "id": "8b437cca002e7d5b",
        "text": "[[Sense of the Potential]]"
      },
      "date": 1695018361287
    },
    {
      "type": "add",
      "id": "fa27c492ea43a3a4",
      "item": {
        "type": "paragraph",
        "id": "fa27c492ea43a3a4",
        "text": "it was not really a need it was a sense of the potential and a determination and that and this sort of sense of the the possibilities and the intrigue of wanting it to happen and then the people that could be users getting excited at it very interesting but if you look down through the same thing happened with with radio there was a period of about 15 20 years when all of what we don't have in radio up until the time of spread spectrum stuff all came into place all the inventions everything and by the way television happened over a period of about ten years"
      },
      "after": "8b437cca002e7d5b",
      "date": 1695018362340
    },
    {
      "type": "edit",
      "id": "8b437cca002e7d5b",
      "item": {
        "type": "paragraph",
        "id": "8b437cca002e7d5b",
        "text": "[[Sense of the Potential]] vs [[Focus On User Needs]]"
      },
      "date": 1695018405882
    },
    {
      "type": "edit",
      "id": "fa27c492ea43a3a4",
      "item": {
        "type": "paragraph",
        "id": "fa27c492ea43a3a4",
        "text": "[https://youtu.be/zBpWkTETwD8?t=1331 22:11] ‚Äì it was not really a need it was a sense of the potential and a determination and that and this sort of sense of the the possibilities and the intrigue of wanting it to happen and then the people that could be users getting excited at it very interesting but if you look down through the same thing happened with with radio there was a period of about 15 20 years when all of what we don't have in radio up until the time of spread spectrum stuff all came into place all the inventions everything and by the way television happened over a period of about ten years"
      },
      "date": 1695018631290
    },
    {
      "type": "edit",
      "id": "fa27c492ea43a3a4",
      "item": {
        "type": "paragraph",
        "id": "fa27c492ea43a3a4",
        "text": "[https://youtu.be/zBpWkTETwD8?t=1331 22:11] ‚Äì it was not really a need it was a sense of the potential and a determination and that and this sort of sense of the the possibilities and the intrigue of wanting it to happen and then the people that could be users getting excited at it very interesting "
      },
      "date": 1695018697827
    },
    {
      "type": "edit",
      "id": "fa27c492ea43a3a4",
      "item": {
        "type": "paragraph",
        "id": "fa27c492ea43a3a4",
        "text": "[https://youtu.be/zBpWkTETwD8?t=1331 22:11] ‚Äì it was not really a need it was a sense of the potential and a determination and that and this sort of sense of the the possibilities and the intrigue of wanting it to happen and then the people that could be users getting excited at it "
      },
      "date": 1695018781673
    },
    {
      "type": "edit",
      "id": "fa27c492ea43a3a4",
      "item": {
        "type": "paragraph",
        "id": "fa27c492ea43a3a4",
        "text": "[https://youtu.be/zBpWkTETwD8?t=1331 22:11] ‚Äì it was not really a need it was a sense of the potential and a determination and that and this sort of sense of the the possibilities and the intrigue of wanting it to happen and then the people that could be users getting excited at "
      },
      "date": 1695018831837
    },
    {
      "type": "edit",
      "id": "fa27c492ea43a3a4",
      "item": {
        "type": "paragraph",
        "id": "fa27c492ea43a3a4",
        "text": "[https://youtu.be/zBpWkTETwD8?t=1331 22:11] ‚Äì it was not really a need it was a sense of the potential and a determination and that and this sort of sense of the the possibilities and the intrigue of wanting it to happen and then the people that could be users getting excited at it"
      },
      "date": 1695018854939
    },
    {
      "type": "edit",
      "id": "fa27c492ea43a3a4",
      "item": {
        "type": "paragraph",
        "id": "fa27c492ea43a3a4",
        "text": "[https://youtu.be/zBpWkTETwD8?t=1332 22:11] ‚Äì it was not really a need it was a sense of the potential and a determination and that and this sort of sense of the the possibilities and the intrigue of wanting it to happen and then the people that could be users getting excited at it"
      },
      "date": 1695018897276
    },
    {
      "type": "add",
      "id": "f60f58d21e281fff",
      "item": {
        "type": "paragraph",
        "id": "f60f58d21e281fff",
        "text": "Notice that the statements are tracked in reverse as we Loop, and we reorder them only once we are Done. This is a very common pattern with loop!"
      },
      "after": "8c2733d497f18fcf",
      "date": 1695021420187
    },
    {
      "id": "c60d5902fbe50c6d",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "c60d5902fbe50c6d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "patricia",
        "title": "Patricia",
        "text": "Practical Algorithm To Retrieve Information Coded In Alphanumeric‚Äôs basic idea is to build a binary [[Trie]], but to avoid one-way branching by including in each node the number of bits to skip over before making the next test. "
      },
      "after": "097128d65eddb346",
      "attribution": {
        "page": "Trie"
      },
      "date": 1695021461111
    },
    {
      "type": "add",
      "id": "270e588cf5088d99",
      "item": {
        "type": "paragraph",
        "id": "270e588cf5088d99",
        "text": "A search "
      },
      "after": "f60f58d21e281fff",
      "date": 1695022115205
    },
    {
      "id": "270e588cf5088d99",
      "type": "move",
      "order": [
        "7750d50b343ba981",
        "311ab87d5994cda1",
        "7789a11c797694e5",
        "f199d5cf13beead8",
        "865a630b21dfd333",
        "f8ca51da0f12927b",
        "c8b32a60f5bc2bc4",
        "8c2733d497f18fcf",
        "f60f58d21e281fff",
        "097128d65eddb346",
        "c60d5902fbe50c6d",
        "270e588cf5088d99",
        "79f33ff17b93a0e7",
        "17c753d506136654",
        "b8a909d9b5160408",
        "1886193722f2adc8",
        "780d3584b92ca7cc",
        "defa47f0eb89a11e",
        "abca32f09f3a7fac",
        "7257737bd1d36335",
        "8b437cca002e7d5b",
        "fa27c492ea43a3a4"
      ],
      "date": 1695022117280
    },
    {
      "type": "edit",
      "id": "270e588cf5088d99",
      "item": {
        "type": "paragraph",
        "id": "270e588cf5088d99",
        "text": "A search in Patricia's tree is carried out as follows: ‚Ä¶, see TAOCP, v. 3, p. 499 ff."
      },
      "date": 1695022271880
    },
    {
      "type": "add",
      "id": "954792dd39570dd5",
      "item": {
        "type": "paragraph",
        "id": "954792dd39570dd5",
        "text": "Compare with [[Pile Systems], which add an associative manner."
      },
      "after": "270e588cf5088d99",
      "date": 1695022289847
    },
    {
      "type": "edit",
      "id": "954792dd39570dd5",
      "item": {
        "type": "paragraph",
        "id": "954792dd39570dd5",
        "text": "Compare with [[Pile Systems]], which add an associative manner."
      },
      "date": 1695022294172
    },
    {
      "type": "add",
      "id": "8c5329a918c06762",
      "item": {
        "type": "paragraph",
        "id": "8c5329a918c06762",
        "text": "Beyond WinFS - Let associations rule! - or: An introduction to Pile for mere mortals"
      },
      "after": "954792dd39570dd5",
      "date": 1695022563008
    },
    {
      "type": "edit",
      "id": "8c5329a918c06762",
      "item": {
        "type": "paragraph",
        "id": "8c5329a918c06762",
        "text": "Beyond WinFS - Let associations rule! - or: An introduction to Pile for mere mortals [https://weblogs.asp.net/ralfw/433714 post]"
      },
      "date": 1695022576829
    },
    {
      "type": "add",
      "id": "3205f13f74100b96",
      "item": {
        "type": "paragraph",
        "id": "3205f13f74100b96",
        "text": "> \n\nThe parent-child relationship between two relations can be in so called normative manner or in associative manner. The Normative parent (Np) of a relation is the origin of it, the Associative parent (Ap) is the destination. So you could read a relation from left to right: A to B or A before B or whatever. (Erez even sees time encoded in Pile relations - but that¬¥s a part I don¬¥t understand yet. He probably alludes to a reading of relations like \"A causing B\".)"
      },
      "after": "8c5329a918c06762",
      "date": 1695022769961
    },
    {
      "type": "edit",
      "id": "3205f13f74100b96",
      "item": {
        "type": "markdown",
        "id": "3205f13f74100b96",
        "text": "> \n\nThe parent-child relationship between two relations can be in so called normative manner or in associative manner. The Normative parent (Np) of a relation is the origin of it, the Associative parent (Ap) is the destination. So you could read a relation from left to right: A to B or A before B or whatever. (Erez even sees time encoded in Pile relations - but that¬¥s a part I don¬¥t understand yet. He probably alludes to a reading of relations like \"A causing B\".)"
      },
      "date": 1695022772263
    },
    {
      "type": "edit",
      "id": "3205f13f74100b96",
      "item": {
        "type": "markdown",
        "id": "3205f13f74100b96",
        "text": "> The parent-child relationship between two relations can be in so called normative manner or in associative manner. The Normative parent (Np) of a relation is the origin of it, the Associative parent (Ap) is the destination. So you could read a relation from left to right: A to B or A before B or whatever. (Erez even sees time encoded in Pile relations - but that¬¥s a part I don¬¥t understand yet. He probably alludes to a reading of relations like \"A causing B\".)"
      },
      "date": 1695022776984
    },
    {
      "type": "remove",
      "id": "8c5329a918c06762",
      "date": 1695022833854
    },
    {
      "type": "edit",
      "id": "954792dd39570dd5",
      "item": {
        "type": "paragraph",
        "id": "954792dd39570dd5",
        "text": "Compare with [[Pile Systems]], which add an associative manner. See \"Beyond WinFS - Let associations rule! - or: An introduction to Pile for mere mortals\" [https://weblogs.asp.net/ralfw/433714 post]"
      },
      "date": 1695022840096
    },
    {
      "item": {
        "type": "factory",
        "id": "58cbec929cb159a5"
      },
      "id": "58cbec929cb159a5",
      "type": "add",
      "after": "fa27c492ea43a3a4",
      "date": 1695022906998
    },
    {
      "id": "58cbec929cb159a5",
      "type": "move",
      "order": [
        "7750d50b343ba981",
        "311ab87d5994cda1",
        "7789a11c797694e5",
        "f199d5cf13beead8",
        "865a630b21dfd333",
        "f8ca51da0f12927b",
        "c8b32a60f5bc2bc4",
        "8c2733d497f18fcf",
        "f60f58d21e281fff",
        "097128d65eddb346",
        "c60d5902fbe50c6d",
        "270e588cf5088d99",
        "954792dd39570dd5",
        "3205f13f74100b96",
        "58cbec929cb159a5",
        "79f33ff17b93a0e7",
        "17c753d506136654",
        "b8a909d9b5160408",
        "1886193722f2adc8",
        "780d3584b92ca7cc",
        "defa47f0eb89a11e",
        "abca32f09f3a7fac",
        "7257737bd1d36335",
        "8b437cca002e7d5b",
        "fa27c492ea43a3a4"
      ],
      "date": 1695022915494
    },
    {
      "type": "edit",
      "id": "58cbec929cb159a5",
      "item": {
        "type": "image",
        "id": "58cbec929cb159a5",
        "text": "Pile",
        "size": "wide",
        "width": 430,
        "height": 166,
        "url": "/assets/plugins/image/0d7e49536cb9099e71dc248e6f56ac3e.jpg"
      },
      "date": 1695022940038
    },
    {
      "type": "edit",
      "id": "58cbec929cb159a5",
      "item": {
        "type": "image",
        "id": "58cbec929cb159a5",
        "text": "Relations in Pile ",
        "size": "wide",
        "width": 430,
        "height": 166,
        "url": "/assets/plugins/image/0d7e49536cb9099e71dc248e6f56ac3e.jpg"
      },
      "date": 1695023015217
    },
    {
      "type": "add",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "A search in Patricia‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). We start by looking at the SKIP field of the root node a, which tells us to examine bit 1 of the argument. That bit is 1, so we move to the right. The SKIP field in the next node, 7, tells us to look at the 14-11 = 12th bit of the argument. It is 0, so we move to the left. The SKIP field of the next node, e, tells us to look at the (12 + l)st bit, which is 1; now we find RTAG = 1, so we go back to node 7, which refers us to the TEXT. The search path we have taken would occur for any argument whose bit pattern is Ixxxx xxxxx xOl..., and we must check to see if it matches the unique key beginning with that pattern, namely THE."
      },
      "after": "954792dd39570dd5",
      "date": 1695023198864
    },
    {
      "id": "7076ade87e0252ed",
      "type": "move",
      "order": [
        "7750d50b343ba981",
        "311ab87d5994cda1",
        "7789a11c797694e5",
        "f199d5cf13beead8",
        "865a630b21dfd333",
        "f8ca51da0f12927b",
        "c8b32a60f5bc2bc4",
        "8c2733d497f18fcf",
        "f60f58d21e281fff",
        "097128d65eddb346",
        "c60d5902fbe50c6d",
        "270e588cf5088d99",
        "954792dd39570dd5",
        "3205f13f74100b96",
        "58cbec929cb159a5",
        "7076ade87e0252ed",
        "79f33ff17b93a0e7",
        "17c753d506136654",
        "b8a909d9b5160408",
        "1886193722f2adc8",
        "780d3584b92ca7cc",
        "defa47f0eb89a11e",
        "abca32f09f3a7fac",
        "7257737bd1d36335",
        "8b437cca002e7d5b",
        "fa27c492ea43a3a4"
      ],
      "date": 1695023204313
    },
    {
      "type": "edit",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). We start by looking at the SKIP field of the root node a, which tells us to examine bit 1 of the argument. That bit is 1, so we move to the right. The SKIP field in the next node, 7, tells us to look at the 14-11 = 12th bit of the argument. It is 0, so we move to the left. The SKIP field of the next node, e, tells us to look at the (12 + l)st bit, which is 1; now we find RTAG = 1, so we go back to node 7, which refers us to the TEXT. The search path we have taken would occur for any argument whose bit pattern is Ixxxx xxxxx xOl..., and we must check to see if it matches the unique key beginning with that pattern, namely THE."
      },
      "date": 1695023213724
    },
    {
      "type": "edit",
      "id": "f60f58d21e281fff",
      "item": {
        "type": "paragraph",
        "id": "f60f58d21e281fff",
        "text": "Notice that the statements are tracked in reverse as we Loop, and we reorder them only once we are Done. This is a very common pattern with loop! [‚áí [[Track in Reverse Order]]]"
      },
      "date": 1695023367499
    },
    {
      "type": "add",
      "id": "57a7fcf35a23695f",
      "item": {
        "type": "paragraph",
        "id": "57a7fcf35a23695f",
        "text": "Note: Relations in Pile seem to combine such a search in Patricia's tree with a jump into the "
      },
      "after": "7076ade87e0252ed",
      "date": 1695026264644
    },
    {
      "type": "edit",
      "id": "57a7fcf35a23695f",
      "item": {
        "type": "paragraph",
        "id": "57a7fcf35a23695f",
        "text": "Note: Relations in Pile seem to combine such a search in Patricia's tree with a jump into the associative manner"
      },
      "date": 1695026277878
    },
    {
      "type": "edit",
      "id": "57a7fcf35a23695f",
      "item": {
        "type": "paragraph",
        "id": "57a7fcf35a23695f",
        "text": "Note: Relations in Pile seem to combine such a search in Patricia's tree with a jump into the [[Associative Manner]]"
      },
      "date": 1695026289875
    },
    {
      "type": "edit",
      "id": "57a7fcf35a23695f",
      "item": {
        "type": "paragraph",
        "id": "57a7fcf35a23695f",
        "text": "Note: Relations in Pile seem to combine such a search in Patricia's tree with a jump into the [[Associative Manner]] ‚Ä¶"
      },
      "date": 1695026322598
    },
    {
      "type": "add",
      "id": "c2958a7cb83bd9b3",
      "item": {
        "type": "paragraph",
        "id": "c2958a7cb83bd9b3",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (nonexistent) 12th bit of the 10-bit argument. At this point we compare the argument to the TEXT at the point specified in the current node (in this case node 7). If it does not match, the argument is not the beginning of any key; but if it does match, the argument is the beginning of every key represented by dotted links in node 7 and its descendants (namely THIS, THAT, THE)."
      },
      "after": "57a7fcf35a23695f",
      "date": 1695026323573
    },
    {
      "type": "edit",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). We start by looking at the SKIP field of the root node a, which tells us to examine bit 1 of the argument. That bit is 1, so we move to the right. The SKIP field in the next node, 7, tells us to look at the 14-11 = 12th bit of the argument. It is 0, so we move to the left. The SKIP field of the next node, e, tells us to look at the (12 + l)st bit, which is 1; now we find RTAG = 1, so we go back to node 7, which refers us to the TEXT. The search path we have taken would occur for any argument whose bit pattern is Ixxxx xxxxx xOl..., and we must check to see if it matches the unique key beginning with that pattern, namely THE. (TAOCP, v. 3, p. 499)"
      },
      "date": 1695026437306
    },
    {
      "type": "edit",
      "id": "c2958a7cb83bd9b3",
      "item": {
        "type": "paragraph",
        "id": "c2958a7cb83bd9b3",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (nonexistent) 12th bit of the 10-bit argument. At this point we compare the argument to the TEXT at the point specified in the current node (in this case node 7). If it does not match, the argument is not the beginning of any key; but if it does match, the argument is the beginning of every key represented by dotted links in node 7 and its descendants (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695026867992
    },
    {
      "type": "edit",
      "id": "57a7fcf35a23695f",
      "item": {
        "type": "paragraph",
        "id": "57a7fcf35a23695f",
        "text": "Note: Relations in Pile seem to combine such a search in Patricia's tree with a move/jump into the [[Associative Manner]] ‚Ä¶"
      },
      "date": 1695026940087
    },
    {
      "type": "edit",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). We start by looking at the SKIP field of the root node a, which tells us to examine bit 1 of the argument. That bit is 1, so we move to the right. The SKIP field in the next node, ùõæ, tells us to look at the 14-11 = 12th bit of the argument. It is 0, so we move to the left. The SKIP field of the next node, e, tells us to look at the (12 + l)st bit, which is 1; now we find RTAG = 1, so we go back to node ùõæ, which refers us to the TEXT. The search path we have taken would occur for any argument whose bit pattern is Ixxxx xxxxx xOl..., and we must check to see if it matches the unique key beginning with that pattern, namely THE. (TAOCP, v. 3, p. 499)"
      },
      "date": 1695027109146
    },
    {
      "type": "edit",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). We start by looking at the SKIP field of the root node ùõº, which tells us to examine bit 1 of the argument. That bit is 1, so we move to the right. The SKIP field in the next node, ùõæ, tells us to look at the 14-11 = 12th bit of the argument. It is 0, so we move to the left. The SKIP field of the next node, e, tells us to look at the (12 + l)st bit, which is 1; now we find RTAG = 1, so we go back to node ùõæ, which refers us to the TEXT. The search path we have taken would occur for any argument whose bit pattern is Ixxxx xxxxx xOl..., and we must check to see if it matches the unique key beginning with that pattern, namely THE. (TAOCP, v. 3, p. 499)"
      },
      "date": 1695027166854
    },
    {
      "type": "edit",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). We start by looking at the SKIP field of the root node ùõº, which tells us to examine bit 1 of the argument. That bit is 1, so we move to the right. The SKIP field in the next node, ùõæ, tells us to look at the 1 + 11 = 12th bit of the argument. It is 0, so we move to the left. The SKIP field of the next node, e, tells us to look at the (12 + l)st bit, which is 1; now we find RTAG = 1, so we go back to node ùõæ, which refers us to the TEXT. The search path we have taken would occur for any argument whose bit pattern is Ixxxx xxxxx xOl..., and we must check to see if it matches the unique key beginning with that pattern, namely THE. (TAOCP, v. 3, p. 499)"
      },
      "date": 1695027225151
    },
    {
      "type": "edit",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). We start by looking at the SKIP field of the root node ùõº, which tells us to examine bit 1 of the argument. That bit is 1, so we move to the right. The SKIP field in the next node, ùõæ, tells us to look at the 1 + 11 = 12th bit of the argument. It is 0, so we move to the left. The SKIP field of the next node, ùúÄ, tells us to look at the (12 + 1)st bit, which is 1; now we find RTAG = 1, so we go back to node ùõæ, which refers us to the TEXT. The search path we have taken would occur for any argument whose bit pattern is Ixxxx xxxxx xOl..., and we must check to see if it matches the unique key beginning with that pattern, namely THE. (TAOCP, v. 3, p. 499)"
      },
      "date": 1695027341255
    },
    {
      "type": "edit",
      "id": "c2958a7cb83bd9b3",
      "item": {
        "type": "paragraph",
        "id": "c2958a7cb83bd9b3",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (nonexistent) 12th bit of the 10-bit argument. At this point we compare the argument to the TEXT at the point specified in the current node (in this case node ùõæ). If it does not match, the argument is not the beginning of any key; but if it does match, the argument is the beginning of every key represented by dotted links in node ùõæ and its descendants (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695027548200
    },
    {
      "type": "edit",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101)."
      },
      "date": 1695027659903
    },
    {
      "type": "add",
      "id": "3e5e76b4ea986c96",
      "item": {
        "type": "paragraph",
        "id": "3e5e76b4ea986c96",
        "text": "We start by looking at the SKIP field of the root node ùõº, which tells us to examine bit 1 of the argument. That bit is 1, so we move to the right. The SKIP field in the next node, ùõæ, tells us to look at the 1 + 11 = 12th bit of the argument. It is 0, so we move to the left. The SKIP field of the next node, ùúÄ, tells us to look at the (12 + 1)st bit, which is 1; now we find RTAG = 1, so we go back to node ùõæ, which refers us to the TEXT. The search path we have taken would occur for any argument whose bit pattern is Ixxxx xxxxx xOl..., and we must check to see if it matches the unique key beginning with that pattern, namely THE. (TAOCP, v. 3, p. 499)"
      },
      "after": "7076ade87e0252ed",
      "date": 1695027660801
    },
    {
      "id": "ff15fbf8b579c57f",
      "type": "add",
      "item": {
        "type": "image",
        "id": "ff15fbf8b579c57f",
        "text": "Fig. 33. An example of Patricia's tree and TEXT.",
        "size": "wide",
        "width": 430,
        "height": 344,
        "url": "/assets/plugins/image/7415af4b0b7b316f81c001ebe222e33c.jpg"
      },
      "after": "7076ade87e0252ed",
      "attribution": {
        "page": "Patricia"
      },
      "date": 1695027669067
    },
    {
      "type": "edit",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695027680014
    },
    {
      "type": "edit",
      "id": "f60f58d21e281fff",
      "item": {
        "type": "paragraph",
        "id": "f60f58d21e281fff",
        "text": "Notice that the statements are tracked in reverse as we [[Loop]], and we reorder them only once we are Done. This is a very common pattern with loop! [‚áí [[Track in Reverse Order]]]"
      },
      "date": 1695027763429
    },
    {
      "type": "edit",
      "id": "8c2733d497f18fcf",
      "item": {
        "type": "paragraph",
        "id": "8c2733d497f18fcf",
        "text": "‚áí [[Loop]] [https://package.elm-lang.org/packages/elm/parser/latest/Parser#loop page], statementsHelp,  ParserHelpers [https://github.com/jxxcarlson/minilatex/blob/e2c33ca3eaba942950759331d1a148843adf0910/src/MiniLatex/ParserHelpers.elm#L6-L7 code]"
      },
      "date": 1695027914656
    },
    {
      "type": "edit",
      "id": "954792dd39570dd5",
      "item": {
        "type": "paragraph",
        "id": "954792dd39570dd5",
        "text": "Compare with [[Pile Systems]], which add an associative manner. See \"Beyond WinFS ‚Äì Let associations rule! ‚Äì or: An introduction to Pile for mere mortals\" [https://weblogs.asp.net/ralfw/433714 post]"
      },
      "date": 1695027969081
    },
    {
      "type": "edit",
      "id": "954792dd39570dd5",
      "item": {
        "type": "paragraph",
        "id": "954792dd39570dd5",
        "text": "Compare with [[Pile Systems]], which add an associative manner. See \"Beyond WinFS ‚Äì Let associations rule! ‚Äì or: An introduction to [[Pile]] for mere mortals\" [https://weblogs.asp.net/ralfw/433714 post]"
      },
      "date": 1695027980770
    },
    {
      "type": "edit",
      "id": "3205f13f74100b96",
      "item": {
        "type": "markdown",
        "id": "3205f13f74100b96",
        "text": "> The parent-child relationship between two relations can be in so called normative manner or in associative manner. The Normative parent (Np) of a relation is the origin of it, the Associative parent (Ap) is the destination. So you could read a relation from left to right: A to B or A before B or whatever. (Erez even sees time encoded in Pile relations ‚Äì but that¬¥s a part I don¬¥t understand yet. He probably alludes to a reading of relations like \"A causing B\".)"
      },
      "date": 1695028037984
    },
    {
      "type": "edit",
      "id": "57a7fcf35a23695f",
      "item": {
        "type": "paragraph",
        "id": "57a7fcf35a23695f",
        "text": "Note: Relations in Pile seem to combine such a search in Patricia's tree with a move/jump into the [[Associative Manner]] ‚Ä¶, see Related function of dmx."
      },
      "date": 1695028230875
    },
    {
      "type": "add",
      "id": "82a3eaeafa095916",
      "item": {
        "type": "paragraph",
        "id": "82a3eaeafa095916",
        "text": "Note: In the Pile/dmx context, \"the agrument as the beginning of every key ‚Ä¶\" "
      },
      "after": "c2958a7cb83bd9b3",
      "date": 1695028356688
    },
    {
      "type": "edit",
      "id": "82a3eaeafa095916",
      "item": {
        "type": "paragraph",
        "id": "82a3eaeafa095916",
        "text": "Note: In the Pile/dmx context, the agrument as \"the beginning of every key ‚Ä¶\" leads to all related topics of a node and its descendants."
      },
      "date": 1695028491233
    },
    {
      "type": "edit",
      "id": "57a7fcf35a23695f",
      "item": {
        "type": "paragraph",
        "id": "57a7fcf35a23695f",
        "text": "Note: Relations in Pile seem to combine such a search in Patricia's tree with a move/jump into the [[Associative Manner]] ‚Ä¶, see the Related function of dmx."
      },
      "date": 1695028555333
    },
    {
      "type": "edit",
      "id": "ff15fbf8b579c57f",
      "item": {
        "type": "image",
        "id": "ff15fbf8b579c57f",
        "text": "Fig. 33. An example of Patricia's tree and TEXT. (TAOCP, v. 3, p. 498)",
        "size": "wide",
        "width": 430,
        "height": 344,
        "url": "/assets/plugins/image/7415af4b0b7b316f81c001ebe222e33c.jpg"
      },
      "date": 1695028761490
    },
    {
      "type": "add",
      "id": "9240534064719218",
      "item": {
        "type": "paragraph",
        "id": "9240534064719218",
        "text": "The bit pattern `10111 01000 00101` represents a sequence of bits, but without specific context or information about the encoding scheme being used, it's not possible to determine its meaning. In different contexts and encoding schemes, the same sequence of bits could represent entirely different things.\n\nFor example:\n\n- In ASCII encoding, a sequence of bits like this would typically represent characters. However, without knowing the encoding (ASCII, UTF-8, etc.), we can't determine the characters it represents.\n- In a custom binary protocol, these bits might represent various fields or commands, but we would need knowledge of that protocol to interpret it.\n- In a numerical context, it might represent an integer or some other numerical value.\n\nWithout further information about the context and encoding being used, I can't provide a specific meaning for this bit pattern. If you have additional details about where this bit pattern comes from or how it's intended to be interpreted, I'd be happy to try to help further."
      },
      "after": "7076ade87e0252ed",
      "date": 1695029735003
    },
    {
      "type": "edit",
      "id": "9240534064719218",
      "item": {
        "type": "paragraph",
        "id": "9240534064719218",
        "text": "The bit pattern `10111 01000 00101` represents a sequence of bits, but without specific context or information about the encoding scheme being used, it's not possible to determine its meaning. In different contexts and encoding schemes, the same sequence of bits could represent entirely different things.\n\nFor example:\n\n- In ASCII encoding, a sequence of bits like this would typically represent characters. However, without knowing the encoding (ASCII, UTF-8, etc.), we can't determine the characters it represents.\n- In a custom binary protocol, these bits might represent various fields or commands, but we would need knowledge of that protocol to interpret it.\n- In a numerical context, it might represent an integer or some other numerical value.\n\nWithout further information about the context and encoding being used, I (ChatGPT) can't provide a specific meaning for this bit pattern. If you have additional details about where this bit pattern comes from or how it's intended to be interpreted, I'd be happy to try to help further."
      },
      "date": 1695029779487
    },
    {
      "type": "edit",
      "id": "9240534064719218",
      "item": {
        "type": "paragraph",
        "id": "9240534064719218",
        "text": "The bit pattern `10111 01000 00101` represents a sequence of bits, but without specific context or information about the encoding scheme being used, it's not possible to determine its meaning. In different contexts and encoding schemes, the same sequence of bits could represent entirely different things.\n\nFor example:\n\n- In ASCII encoding, a sequence of bits like this would typically represent characters. However, without knowing the encoding (ASCII, UTF-8, etc.), we can't determine the characters it represents."
      },
      "date": 1695030373541
    },
    {
      "type": "add",
      "id": "0fbcc5b6b658b189",
      "item": {
        "type": "paragraph",
        "id": "0fbcc5b6b658b189",
        "text": "- In a custom binary protocol, these bits might represent various fields or commands, but we would need knowledge of that protocol to interpret it."
      },
      "after": "9240534064719218",
      "date": 1695030377670
    },
    {
      "type": "add",
      "id": "dbf9ceee7f19033f",
      "item": {
        "type": "paragraph",
        "id": "dbf9ceee7f19033f",
        "text": "- In a numerical context, it might represent an integer or some other numerical value.\n\nWithout further information about the context and encoding being used, I (ChatGPT) can't provide a specific meaning for this bit pattern. If you have additional details about where this bit pattern comes from or how it's intended to be interpreted, I'd be happy to try to help further."
      },
      "after": "0fbcc5b6b658b189",
      "date": 1695030378840
    },
    {
      "type": "edit",
      "id": "7750d50b343ba981",
      "item": {
        "type": "paragraph",
        "id": "7750d50b343ba981",
        "text": "‚áí [[Elm Parser]] [[KWIC Indexing]]"
      },
      "date": 1695030733551
    },
    {
      "type": "edit",
      "id": "7750d50b343ba981",
      "item": {
        "type": "paragraph",
        "id": "7750d50b343ba981",
        "text": "‚áí [[Elm Parser]] ‚áí [[KWIC Indexing]]"
      },
      "date": 1695030745663
    },
    {
      "type": "add",
      "id": "cccda01fcad789b0",
      "item": {
        "type": "paragraph",
        "id": "cccda01fcad789b0",
        "text": "In order to provide binary data for this illustration, the words have been expressed in MIX character code, and the codes have been converted into binary numbers with 5 bits per byte. Thus, the word WHICH is represented as the bit sequence 11010 01000 01001 00011 01000."
      },
      "after": "dbf9ceee7f19033f",
      "date": 1695030844673
    },
    {
      "type": "edit",
      "id": "cccda01fcad789b0",
      "item": {
        "type": "paragraph",
        "id": "cccda01fcad789b0",
        "text": "In order to provide binary data for this illustration, the words have been expressed in MIX character code, and the codes have been converted into binary numbers with 5 bits per byte. Thus, the word WHICH is represented as the bit sequence 11010 01000 01001 00011 01000. (TAOCP, v. 3, p. 496)"
      },
      "date": 1695030856189
    },
    {
      "type": "add",
      "id": "39583247f77ee477",
      "item": {
        "type": "paragraph",
        "id": "39583247f77ee477",
        "text": "Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
      },
      "after": "cccda01fcad789b0",
      "date": 1695031225048
    },
    {
      "type": "edit",
      "id": "c2958a7cb83bd9b3",
      "item": {
        "type": "paragraph",
        "id": "c2958a7cb83bd9b3",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (nonexistent) 12th bit of the 10-bit argument. At this point we compare the argument to the TEXT at the point specified in the current node (in this case node ùõæ). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node ùõæ and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695031325401
    },
    {
      "type": "edit",
      "id": "c2958a7cb83bd9b3",
      "item": {
        "type": "markdown",
        "id": "c2958a7cb83bd9b3",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (nonexistent) 12th bit of the 10-bit argument. At this point we compare the argument to the TEXT at the point specified in the current node (in this case node ùõæ). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node ùõæ and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695031327017
    },
    {
      "type": "edit",
      "id": "cccda01fcad789b0",
      "item": {
        "type": "paragraph",
        "id": "cccda01fcad789b0",
        "text": "In order to provide binary data for this illustration, the words have been expressed in [[MIX]] character code, and the codes have been converted into binary numbers with 5 bits per byte. Thus, the word WHICH is represented as the bit sequence 11010 01000 01001 00011 01000. (TAOCP, v. 3, p. 496)"
      },
      "date": 1695031528377
    },
    {
      "type": "edit",
      "id": "57a7fcf35a23695f",
      "item": {
        "type": "paragraph",
        "id": "57a7fcf35a23695f",
        "text": "Note: [[Relations in Pile]] seem to combine such a search in Patricia's tree with a move/jump into the [[Associative Manner]] ‚Ä¶, see the Related function of dmx."
      },
      "date": 1695031839559
    },
    {
      "id": "58cbec929cb159a5",
      "type": "move",
      "order": [
        "7750d50b343ba981",
        "311ab87d5994cda1",
        "7789a11c797694e5",
        "f199d5cf13beead8",
        "865a630b21dfd333",
        "f8ca51da0f12927b",
        "c8b32a60f5bc2bc4",
        "8c2733d497f18fcf",
        "f60f58d21e281fff",
        "097128d65eddb346",
        "c60d5902fbe50c6d",
        "270e588cf5088d99",
        "954792dd39570dd5",
        "58cbec929cb159a5",
        "3205f13f74100b96",
        "7076ade87e0252ed",
        "9240534064719218",
        "0fbcc5b6b658b189",
        "dbf9ceee7f19033f",
        "cccda01fcad789b0",
        "39583247f77ee477",
        "ff15fbf8b579c57f",
        "3e5e76b4ea986c96",
        "57a7fcf35a23695f",
        "c2958a7cb83bd9b3",
        "82a3eaeafa095916",
        "79f33ff17b93a0e7",
        "17c753d506136654",
        "b8a909d9b5160408",
        "1886193722f2adc8",
        "780d3584b92ca7cc",
        "defa47f0eb89a11e",
        "abca32f09f3a7fac",
        "7257737bd1d36335",
        "8b437cca002e7d5b",
        "fa27c492ea43a3a4"
      ],
      "date": 1695031910273
    },
    {
      "type": "edit",
      "id": "82a3eaeafa095916",
      "item": {
        "type": "paragraph",
        "id": "82a3eaeafa095916",
        "text": "Note: In the Pile/dmx context, the agrument as \"the beginning of every key represented by dotted links ‚Ä¶\" leads to all related topics of a node and its descendants."
      },
      "date": 1695032541545
    },
    {
      "item": {
        "type": "factory",
        "id": "d1867df4931a57d0"
      },
      "id": "d1867df4931a57d0",
      "type": "add",
      "after": "fa27c492ea43a3a4",
      "date": 1695048103737
    },
    {
      "id": "d1867df4931a57d0",
      "type": "move",
      "order": [
        "7750d50b343ba981",
        "311ab87d5994cda1",
        "7789a11c797694e5",
        "f199d5cf13beead8",
        "865a630b21dfd333",
        "f8ca51da0f12927b",
        "c8b32a60f5bc2bc4",
        "8c2733d497f18fcf",
        "f60f58d21e281fff",
        "097128d65eddb346",
        "c60d5902fbe50c6d",
        "270e588cf5088d99",
        "954792dd39570dd5",
        "58cbec929cb159a5",
        "3205f13f74100b96",
        "7076ade87e0252ed",
        "9240534064719218",
        "0fbcc5b6b658b189",
        "dbf9ceee7f19033f",
        "cccda01fcad789b0",
        "39583247f77ee477",
        "ff15fbf8b579c57f",
        "d1867df4931a57d0",
        "3e5e76b4ea986c96",
        "57a7fcf35a23695f",
        "c2958a7cb83bd9b3",
        "82a3eaeafa095916",
        "79f33ff17b93a0e7",
        "17c753d506136654",
        "b8a909d9b5160408",
        "1886193722f2adc8",
        "780d3584b92ca7cc",
        "defa47f0eb89a11e",
        "abca32f09f3a7fac",
        "7257737bd1d36335",
        "8b437cca002e7d5b",
        "fa27c492ea43a3a4"
      ],
      "date": 1695048115602
    },
    {
      "type": "edit",
      "id": "d1867df4931a57d0",
      "item": {
        "type": "paragraph",
        "id": "d1867df4931a57d0",
        "text": "The tree that Patricia uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. It consists of a header and N ‚àí1 nodes, where the nodes contain several fields:"
      },
      "date": 1695048121198
    },
    {
      "type": "add",
      "id": "323a400f7fe792cb",
      "item": {
        "type": "paragraph",
        "id": "323a400f7fe792cb",
        "text": "[‚Ä¶]"
      },
      "after": "d1867df4931a57d0",
      "date": 1695048122978
    },
    {
      "type": "add",
      "id": "36a9b6917261a24a",
      "item": {
        "type": "paragraph",
        "id": "36a9b6917261a24a",
        "text": "KEY, a pointer to the text. This field must be at least lg C bits long, if the text contains C characters. In Fig. 33 the words shown within each node would really be represented by pointers to the text; for example, instead of ‚Äú(JACK)‚Äù the"
      },
      "after": "d1867df4931a57d0",
      "date": 1695048181493
    },
    {
      "type": "edit",
      "id": "36a9b6917261a24a",
      "item": {
        "type": "paragraph",
        "id": "36a9b6917261a24a",
        "text": "KEY, a pointer to the text. This field must be at least lg C bits long, if the text contains C characters. In Fig. 33 the words shown within each node would really be represented by pointers to the text; for example, instead of ‚Äú(JACK)‚Äù the node would contain the number 24 (which indicates the starting place of ‚ÄúJACK BUILT?‚Äù in the text string)."
      },
      "date": 1695048200683
    },
    {
      "type": "add",
      "id": "26afba64ec0ae49e",
      "item": {
        "type": "paragraph",
        "id": "26afba64ec0ae49e",
        "text": "LLINK and RLINK, pointers within the tree. These fields must be at least lg N bits long."
      },
      "after": "36a9b6917261a24a",
      "date": 1695048310713
    },
    {
      "type": "add",
      "id": "b4d1d9260a0732f5",
      "item": {
        "type": "paragraph",
        "id": "b4d1d9260a0732f5",
        "text": "LTAG and RTAG, one-bit fields that tell whether or not LLINK and RLINK, respectively, are pointers to children or to ancestors of the node. The dotted lines in Fig. 33 correspond to pointers whose TAG bit is 1."
      },
      "after": "26afba64ec0ae49e",
      "date": 1695048334444
    },
    {
      "type": "add",
      "id": "c2587b0bf89bda78",
      "item": {
        "type": "paragraph",
        "id": "c2587b0bf89bda78",
        "text": "SKIP, a number that tells how many bits to skip when searching, as explained below. This field should be large enough to hold the largest number k such that all keys with prefix œÉagree in the next k bits following œÉ, for some string œÉ that is a prefix of at least two different keys; in practice, we may usually assume that k isn‚Äôt too large, and an error indication can be given if the size of the SKIP field is exceeded. The SKIP fields are shown as numbers within each non-header node of Fig. 33."
      },
      "after": "b4d1d9260a0732f5",
      "date": 1695048369426
    },
    {
      "type": "edit",
      "id": "c2587b0bf89bda78",
      "item": {
        "type": "paragraph",
        "id": "c2587b0bf89bda78",
        "text": "SKIP, a number that tells how many bits to skip when searching, as explained below. This field should be large enough to hold the largest number k such that all keys with prefix œÉ agree in the next k bits following œÉ, for some string œÉ that is a prefix of at least two different keys; in practice, we may usually assume that k isn‚Äôt too large, and an error indication can be given if the size of the SKIP field is exceeded. The SKIP fields are shown as numbers within each non-header node of Fig. 33."
      },
      "date": 1695048405087
    },
    {
      "type": "add",
      "id": "32e859c2f38cd4c1",
      "item": {
        "type": "paragraph",
        "id": "32e859c2f38cd4c1",
        "text": "The header contains only KEY, LLINK, and LTAG fields."
      },
      "after": "c2587b0bf89bda78",
      "date": 1695048426425
    },
    {
      "type": "edit",
      "id": "323a400f7fe792cb",
      "item": {
        "type": "paragraph",
        "id": "323a400f7fe792cb",
        "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695048494407
    },
    {
      "type": "edit",
      "id": "3e5e76b4ea986c96",
      "item": {
        "type": "paragraph",
        "id": "3e5e76b4ea986c96",
        "text": "We start by looking at the SKIP field of the root node ùõº, which tells us to examine bit 1 of the argument. That bit is 1, so we move to the right. The SKIP field in the next node, ùõæ, tells us to look at the 1 + 11 = 12th bit of the argument. It is 0, so we move to the left. The SKIP field of the next node, ùúÄ, tells us to look at the (12 + 1)st bit, which is 1; now we find RTAG = 1, so we go back to node ùõæ, which refers us to the TEXT. The search path we have taken would occur for any argument whose bit pattern is 1xxxx xxxxx x01..., and we must check to see if it matches the unique key beginning with that pattern, namely THE. (TAOCP, v. 3, p. 499)"
      },
      "date": 1695048546487
    },
    {
      "type": "add",
      "id": "3edb2adf89e6de38",
      "item": {
        "type": "paragraph",
        "id": "3edb2adf89e6de38",
        "text": "See \"The Original Pile Engine Demystified\" [post]"
      },
      "after": "82a3eaeafa095916",
      "date": 1695048866594
    },
    {
      "type": "edit",
      "id": "3edb2adf89e6de38",
      "item": {
        "type": "paragraph",
        "id": "3edb2adf89e6de38",
        "text": "See \"The Original Pile Engine Demystified\" [ https://weblogs.asp.net/ralfw/441384post]"
      },
      "date": 1695048875850
    },
    {
      "type": "edit",
      "id": "3edb2adf89e6de38",
      "item": {
        "type": "paragraph",
        "id": "3edb2adf89e6de38",
        "text": "See \"The Original Pile Engine Demystified\" [https://weblogs.asp.net/ralfw/441384post]"
      },
      "date": 1695048880998
    },
    {
      "type": "edit",
      "id": "3edb2adf89e6de38",
      "item": {
        "type": "paragraph",
        "id": "3edb2adf89e6de38",
        "text": "See \"The Original Pile Engine Demystified\" [https://weblogs.asp.net/ralfw/441384 post]"
      },
      "date": 1695048892785
    },
    {
      "type": "edit",
      "id": "3edb2adf89e6de38",
      "item": {
        "type": "paragraph",
        "id": "3edb2adf89e6de38",
        "text": "See \"[[The Original Pile Engine Demystified]]\" [https://weblogs.asp.net/ralfw/441384 post]"
      },
      "date": 1695048931450
    },
    {
      "type": "edit",
      "id": "d1867df4931a57d0",
      "item": {
        "type": "paragraph",
        "id": "d1867df4931a57d0",
        "text": "The tree that [[Patricia]] uses for searching should be contained in random-access memory, or it should be arranged on pages as suggested in Section 6.2.4. It consists of a header and N ‚àí1 nodes, where the nodes contain several fields:"
      },
      "date": 1695051509974
    },
    {
      "type": "edit",
      "id": "7750d50b343ba981",
      "item": {
        "type": "paragraph",
        "id": "7750d50b343ba981",
        "text": "‚áí [[Elm Parser]] ‚áí [[KWIC Indexing]] ‚áí [[Patricia]]"
      },
      "date": 1695094883213
    },
    {
      "type": "edit",
      "id": "7750d50b343ba981",
      "item": {
        "type": "paragraph",
        "id": "7750d50b343ba981",
        "text": "‚áí [[Elm Parser]] ‚áí [[Loop]] ‚áí [[KWIC Indexing]] ‚áí [[Patricia]]"
      },
      "date": 1695094905952
    },
    {
      "type": "edit",
      "id": "7750d50b343ba981",
      "item": {
        "type": "paragraph",
        "id": "7750d50b343ba981",
        "text": "‚áí [[Elm Parser]] ‚áí [[Loop]] ‚áí [[Track in Reverse Order]] ‚áí [[KWIC Indexing]] ‚áí [[Patricia]]"
      },
      "date": 1695094939750
    },
    {
      "type": "edit",
      "id": "7750d50b343ba981",
      "item": {
        "type": "paragraph",
        "id": "7750d50b343ba981",
        "text": "‚áí [[Elm Parser]] ‚áí [[Loop]] ‚áí [[Track in Reverse Order]] ‚áí [[Patricia]] ‚áí [[Trie]] ‚áí [[KWIC Indexing]] ‚áí [[Pile]]"
      },
      "date": 1695095057678
    },
    {
      "type": "edit",
      "id": "7750d50b343ba981",
      "item": {
        "type": "paragraph",
        "id": "7750d50b343ba981",
        "text": "‚áí [[Elm Parser]] ‚áí [[Loop]] ‚áí [[Track in Reverse Order]] ‚áí [[KWIC Indexing]] ‚áí [[Trie]] ‚áí [[Patricia]]   ‚áí [[Pile]]"
      },
      "date": 1695095110522
    },
    {
      "type": "edit",
      "id": "7750d50b343ba981",
      "item": {
        "type": "paragraph",
        "id": "7750d50b343ba981",
        "text": "‚áí [[Elm Parser]] ‚áí [[Loop]] ‚áí [[Track in Reverse Order]] ‚áí [[KWIC Indexing]] ‚áí [[Trie]] ‚áí [[Patricia]] ‚áí [[Pile]]"
      },
      "date": 1695095119268
    },
    {
      "type": "edit",
      "id": "cccda01fcad789b0",
      "item": {
        "type": "paragraph",
        "id": "cccda01fcad789b0",
        "text": "In order to provide binary data for this illustration, the words have been expressed in [[MIX Character Code]], and the codes have been converted into binary numbers with 5 bits per byte. Thus, the word WHICH is represented as the bit sequence 11010 01000 01001 00011 01000. (TAOCP, v. 3, p. 496)"
      },
      "date": 1695095223619
    },
    {
      "item": {
        "type": "factory",
        "id": "663f22f5b2177a44"
      },
      "id": "663f22f5b2177a44",
      "type": "add",
      "after": "fa27c492ea43a3a4",
      "date": 1695106580406
    },
    {
      "type": "remove",
      "id": "663f22f5b2177a44",
      "date": 1695106591288
    },
    {
      "item": {
        "type": "factory",
        "id": "3bbeba1bed88957b"
      },
      "id": "3bbeba1bed88957b",
      "type": "add",
      "after": "fa27c492ea43a3a4",
      "date": 1695109481158
    },
    {
      "type": "edit",
      "id": "3bbeba1bed88957b",
      "item": {
        "type": "paragraph",
        "id": "3bbeba1bed88957b",
        "text": "WardW\n15:18\nWhen Kent Beck and I were pair-programming every day we only needed one of our two internally made Smalltalk workstations. I lent my own machine to Carver so that a graduate student could finish his thesis. In return I got an excellent tour of his lab and fully dosed in his philosophy."
      },
      "date": 1695109483871
    },
    {
      "type": "edit",
      "id": "3bbeba1bed88957b",
      "item": {
        "type": "paragraph",
        "id": "3bbeba1bed88957b",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$169504313327805MmHMe:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWhen Kent Beck and I were pair-programming every day we only needed one of our two internally made Smalltalk workstations. I lent my own machine to Carver so that a graduate student could finish his thesis. In return I got an excellent tour of his lab and fully dosed in his philosophy."
      },
      "date": 1695109517925
    },
    {
      "type": "add",
      "id": "3d63acaa4f36a5f7",
      "item": {
        "type": "paragraph",
        "id": "3d63acaa4f36a5f7",
        "text": "My lab director had already told Carver we had no available machines. He was just walking Carver around our lab as a courtesy. I'm sure he didn't understand why my offer was so easy and of such potential but he trusted my judgement and made the shipping arrangements."
      },
      "after": "3bbeba1bed88957b",
      "date": 1695109570046
    },
    {
      "type": "edit",
      "id": "3d63acaa4f36a5f7",
      "item": {
        "type": "paragraph",
        "id": "3d63acaa4f36a5f7",
        "text": "My lab director had already told Carver we had no available machines. He was just walking Carver around our lab as a courtesy. I'm sure he didn't understand why my offer was so easy and of such potential but he trusted my judgement and made the shipping arrangements. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$169504451124317xZjhr:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "date": 1695109583879
    },
    {
      "type": "edit",
      "id": "abca32f09f3a7fac",
      "item": {
        "type": "paragraph",
        "id": "abca32f09f3a7fac",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$169501534521303IhkkF:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n[https://www.youtube.com/watch?v=zBpWkTETwD8&t=1041s video]\nGordon Bell and [[Carver Mead]] explain how things work when you are given permission to imagine outside of expectations. "
      },
      "date": 1695109658299
    },
    {
      "type": "edit",
      "id": "abca32f09f3a7fac",
      "item": {
        "type": "paragraph",
        "id": "abca32f09f3a7fac",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$169501534521303IhkkF:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n[https://www.youtube.com/watch?v=zBpWkTETwD8&t=1041s video]\n[[Gordon Bell]] and [[Carver Mead]] explain how things work when you are given permission to imagine outside of expectations. "
      },
      "date": 1695109668408
    },
    {
      "id": "097128d65eddb346",
      "type": "remove",
      "removedTo": {
        "page": "2023-09-19"
      },
      "date": 1695118154662
    },
    {
      "type": "edit",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "‚áí [[Patricia‚Äôs Tree]]"
      },
      "date": 1695193909964
    },
    {
      "type": "add",
      "id": "948f55a82d1ec596",
      "item": {
        "type": "paragraph",
        "id": "948f55a82d1ec596",
        "text": "A search in [[Patricia]]‚Äôs tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
      },
      "after": "7076ade87e0252ed",
      "date": 1695193912811
    },
    {
      "id": "948f55a82d1ec596",
      "type": "remove",
      "removedTo": {
        "page": "Patricia‚Äôs Tree"
      },
      "date": 1695193921143
    },
    {
      "id": "9240534064719218",
      "type": "remove",
      "removedTo": {
        "page": "Patricia‚Äôs Tree"
      },
      "date": 1695193923236
    },
    {
      "type": "edit",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "‚áí [[Patricia‚Äôs Tree]] ‚áí [[Search in Patricia‚Äôs Tree]]"
      },
      "date": 1695193991063
    },
    {
      "id": "0fbcc5b6b658b189",
      "type": "remove",
      "removedTo": {
        "page": "Search in Patricia‚Äôs Tree"
      },
      "date": 1695194023730
    },
    {
      "id": "dbf9ceee7f19033f",
      "type": "remove",
      "removedTo": {
        "page": "Search in Patricia‚Äôs Tree"
      },
      "date": 1695194026949
    },
    {
      "id": "cccda01fcad789b0",
      "type": "remove",
      "removedTo": {
        "page": "Search in Patricia‚Äôs Tree"
      },
      "date": 1695194033015
    },
    {
      "id": "39583247f77ee477",
      "type": "remove",
      "removedTo": {
        "page": "Search in Patricia‚Äôs Tree"
      },
      "date": 1695194035151
    },
    {
      "id": "ff15fbf8b579c57f",
      "type": "remove",
      "removedTo": {
        "page": "Search in Patricia‚Äôs Tree"
      },
      "date": 1695194038535
    },
    {
      "id": "d1867df4931a57d0",
      "type": "remove",
      "removedTo": {
        "page": "Patricia‚Äôs Tree"
      },
      "date": 1695194058002
    },
    {
      "id": "36a9b6917261a24a",
      "type": "remove",
      "removedTo": {
        "page": "Patricia‚Äôs Tree"
      },
      "date": 1695194064019
    },
    {
      "id": "26afba64ec0ae49e",
      "type": "remove",
      "removedTo": {
        "page": "Patricia‚Äôs Tree"
      },
      "date": 1695194068576
    },
    {
      "id": "b4d1d9260a0732f5",
      "type": "remove",
      "removedTo": {
        "page": "Patricia‚Äôs Tree"
      },
      "date": 1695194072288
    },
    {
      "id": "c2587b0bf89bda78",
      "type": "remove",
      "removedTo": {
        "page": "Patricia‚Äôs Tree"
      },
      "date": 1695194076023
    },
    {
      "id": "32e859c2f38cd4c1",
      "type": "remove",
      "removedTo": {
        "page": "Patricia‚Äôs Tree"
      },
      "date": 1695194091632
    },
    {
      "id": "3e5e76b4ea986c96",
      "type": "remove",
      "removedTo": {
        "page": "Search in Patricia‚Äôs Tree"
      },
      "date": 1695194128394
    },
    {
      "type": "edit",
      "id": "7076ade87e0252ed",
      "item": {
        "type": "paragraph",
        "id": "7076ade87e0252ed",
        "text": "‚áí [[Patricia‚Äôs Tree]] ‚áí [[Search in Patricia‚Äôs Tree]] ‚áí [[Header]]"
      },
      "date": 1695194299932
    }
  ]
}