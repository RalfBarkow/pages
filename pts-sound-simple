{
  "title": "Pts Sound Simple",
  "story": [
    {
      "type": "paragraph",
      "id": "dc26025037693f04",
      "text": "Pts.guides Sound [https://ptsjs.org/guide/sound-0800 page], [https://github.com/williamngan/pts/blob/f89b7f36a26f97e554c8f309de64a8a7e230763b/demo/guide.sound_simple.js github]"
    },
    {
      "type": "code",
      "id": "3e9f30f4d48c6409",
      "text": "//// Demo code starts (anonymous function wrapper is optional) ---\n\n(function() {\n\n  Pts.quickStart( \"#pt\", \"#e2e6ef\" );\n\n  // Note: use Sound.loadAsBuffer instead if you need support for Safari/iOS browser. (as of Apr 2019)\n  // See this example: http://ptsjs.org/demo/edit/?name=sound.analyze\n  \n  var sound;\n  var bins = 256;\n  var colors = [\"#f06\", \"#62e\", \"#fff\", \"#fe3\", \"#0c9\"];\n\n  // Load sound\n  Sound.load( \"/assets/pages/pts-demos/spacetravel.mp3\" ).then( s => {\n    sound = s.analyze(bins);\n  }).catch( e => console.error(e) );\n\n\n  // Draw play button\n  function playButton() {\n    if (!sound || !sound.playing) {\n      form.fillOnly(\"#f06\").rect( [[0,0], [50,50]] );\n      form.fillOnly('#fff').polygon( Triangle.fromCenter( [25,25], 10 ).rotate2D( Const.half_pi, [25,25] ) );\n    } else {\n      form.fillOnly(\"rgba(0,0,0,.2)\").rect( [[0,0], [50,50]] );\n      form.fillOnly(\"#fff\").rect( [[18, 18], [32,32]] );\n    }\n  }\n\n\n  // animation\n  space.add({\n    animate: (time, ftime) => {\n      if (sound && sound.playable) {\n        sound.freqDomainTo(space.size).forEach( (t, i) => {\n          form.fillOnly( colors[i%5] ).point( t, 30 );\n        });\n      }\n      playButton();\n    },\n\n    action: (type, x, y) => {\n      if (type === \"up\" &&  Geom.withinBound( [x,y], [0,0], [50,50] )) { // clicked button\n        sound.toggle();\n      }\n    }\n  });\n  \n  //// ----\n  \n  space.bindMouse().bindTouch().play();\n\n})();"
    },
    {
      "type": "frame",
      "id": "304de7b1862b1cb1",
      "text": "//wiki.ralfbarkow.ch/assets/pages/pts-demos/run-pts.html\nHEIGHT 160"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Pts Sound Simple",
        "story": []
      },
      "date": 1652627617886
    },
    {
      "item": {
        "type": "factory",
        "id": "e798b546f713eb55"
      },
      "id": "e798b546f713eb55",
      "type": "add",
      "date": 1652627619397
    },
    {
      "type": "remove",
      "id": "e798b546f713eb55",
      "date": 1652627621856
    },
    {
      "item": {
        "type": "factory",
        "id": "3e9f30f4d48c6409"
      },
      "id": "3e9f30f4d48c6409",
      "type": "add",
      "date": 1652627666707
    },
    {
      "type": "edit",
      "id": "3e9f30f4d48c6409",
      "item": {
        "type": "code",
        "id": "3e9f30f4d48c6409",
        "text": "//// Demo code starts (anonymous function wrapper is optional) ---\n\n(function() {\n\n  Pts.quickStart( \"#pt\", \"#e2e6ef\" );\n\n  // Note: use Sound.loadAsBuffer instead if you need support for Safari/iOS browser. (as of Apr 2019)\n  // See this example: http://ptsjs.org/demo/edit/?name=sound.analyze\n  \n  var sound;\n  var bins = 256;\n  var colors = [\"#f06\", \"#62e\", \"#fff\", \"#fe3\", \"#0c9\"];\n\n  // Load sound\n  Sound.load( \"/assets/spacetravel.mp3\" ).then( s => {\n    sound = s.analyze(bins);\n  }).catch( e => console.error(e) );\n\n\n  // Draw play button\n  function playButton() {\n    if (!sound || !sound.playing) {\n      form.fillOnly(\"#f06\").rect( [[0,0], [50,50]] );\n      form.fillOnly('#fff').polygon( Triangle.fromCenter( [25,25], 10 ).rotate2D( Const.half_pi, [25,25] ) );\n    } else {\n      form.fillOnly(\"rgba(0,0,0,.2)\").rect( [[0,0], [50,50]] );\n      form.fillOnly(\"#fff\").rect( [[18, 18], [32,32]] );\n    }\n  }\n\n\n  // animation\n  space.add({\n    animate: (time, ftime) => {\n      if (sound && sound.playable) {\n        sound.freqDomainTo(space.size).forEach( (t, i) => {\n          form.fillOnly( colors[i%5] ).point( t, 30 );\n        });\n      }\n      playButton();\n    },\n\n    action: (type, x, y) => {\n      if (type === \"up\" &&  Geom.withinBound( [x,y], [0,0], [50,50] )) { // clicked button\n        sound.toggle();\n      }\n    }\n  });\n  \n  //// ----"
      },
      "date": 1652627671151
    },
    {
      "item": {
        "type": "factory",
        "id": "304de7b1862b1cb1"
      },
      "id": "304de7b1862b1cb1",
      "type": "add",
      "after": "3e9f30f4d48c6409",
      "date": 1652627678542
    },
    {
      "type": "edit",
      "id": "304de7b1862b1cb1",
      "item": {
        "type": "frame",
        "id": "304de7b1862b1cb1",
        "text": "//wiki.ralfbarkow.ch/assets/pages/pts-demos/run-pts.html\nHEIGHT 160"
      },
      "date": 1652627682971
    },
    {
      "type": "edit",
      "id": "3e9f30f4d48c6409",
      "item": {
        "type": "code",
        "id": "3e9f30f4d48c6409",
        "text": "//// Demo code starts (anonymous function wrapper is optional) ---\n\n\n\n  Pts.quickStart( \"#pt\", \"#e2e6ef\" );\n\n  // Note: use Sound.loadAsBuffer instead if you need support for Safari/iOS browser. (as of Apr 2019)\n  // See this example: http://ptsjs.org/demo/edit/?name=sound.analyze\n  \n  var sound;\n  var bins = 256;\n  var colors = [\"#f06\", \"#62e\", \"#fff\", \"#fe3\", \"#0c9\"];\n\n  // Load sound\n  Sound.load( \"/assets/spacetravel.mp3\" ).then( s => {\n    sound = s.analyze(bins);\n  }).catch( e => console.error(e) );\n\n\n  // Draw play button\n  function playButton() {\n    if (!sound || !sound.playing) {\n      form.fillOnly(\"#f06\").rect( [[0,0], [50,50]] );\n      form.fillOnly('#fff').polygon( Triangle.fromCenter( [25,25], 10 ).rotate2D( Const.half_pi, [25,25] ) );\n    } else {\n      form.fillOnly(\"rgba(0,0,0,.2)\").rect( [[0,0], [50,50]] );\n      form.fillOnly(\"#fff\").rect( [[18, 18], [32,32]] );\n    }\n  }\n\n\n  // animation\n  space.add({\n    animate: (time, ftime) => {\n      if (sound && sound.playable) {\n        sound.freqDomainTo(space.size).forEach( (t, i) => {\n          form.fillOnly( colors[i%5] ).point( t, 30 );\n        });\n      }\n      playButton();\n    },\n\n    action: (type, x, y) => {\n      if (type === \"up\" &&  Geom.withinBound( [x,y], [0,0], [50,50] )) { // clicked button\n        sound.toggle();\n      }\n    }\n  });\n  \n  //// ----"
      },
      "date": 1652627720052
    },
    {
      "type": "edit",
      "id": "3e9f30f4d48c6409",
      "item": {
        "type": "code",
        "id": "3e9f30f4d48c6409",
        "text": "//// Demo code starts (anonymous function wrapper is optional) ---\n\n\n\n  Pts.quickStart( \"#pt\", \"#e2e6ef\" );\n\n  // Note: use Sound.loadAsBuffer instead if you need support for Safari/iOS browser. (as of Apr 2019)\n  // See this example: http://ptsjs.org/demo/edit/?name=sound.analyze\n  \n  var sound;\n  var bins = 256;\n  var colors = [\"#f06\", \"#62e\", \"#fff\", \"#fe3\", \"#0c9\"];\n\n  // Load sound\n  Sound.load( \"/assets/spacetravel.mp3\" ).then( s => {\n    sound = s.analyze(bins);\n  }).catch( e => console.error(e) );\n\n\n  // Draw play button\n  function playButton() {\n    if (!sound || !sound.playing) {\n      form.fillOnly(\"#f06\").rect( [[0,0], [50,50]] );\n      form.fillOnly('#fff').polygon( Triangle.fromCenter( [25,25], 10 ).rotate2D( Const.half_pi, [25,25] ) );\n    } else {\n      form.fillOnly(\"rgba(0,0,0,.2)\").rect( [[0,0], [50,50]] );\n      form.fillOnly(\"#fff\").rect( [[18, 18], [32,32]] );\n    }\n  }\n\n\n  // animation\n  space.add({\n    animate: (time, ftime) => {\n      if (sound && sound.playable) {\n        sound.freqDomainTo(space.size).forEach( (t, i) => {\n          form.fillOnly( colors[i%5] ).point( t, 30 );\n        });\n      }\n      playButton();\n    },\n\n    action: (type, x, y) => {\n      if (type === \"up\" &&  Geom.withinBound( [x,y], [0,0], [50,50] )) { // clicked button\n        sound.toggle();\n      }\n    }\n  }\n  \n  //// ----"
      },
      "date": 1652627750135
    },
    {
      "type": "edit",
      "id": "3e9f30f4d48c6409",
      "item": {
        "type": "code",
        "id": "3e9f30f4d48c6409",
        "text": "//// Demo code starts (anonymous function wrapper is optional) ---\n\n(function() {\n\n  Pts.quickStart( \"#pt\", \"#e2e6ef\" );\n\n  // Note: use Sound.loadAsBuffer instead if you need support for Safari/iOS browser. (as of Apr 2019)\n  // See this example: http://ptsjs.org/demo/edit/?name=sound.analyze\n  \n  var sound;\n  var bins = 256;\n  var colors = [\"#f06\", \"#62e\", \"#fff\", \"#fe3\", \"#0c9\"];\n\n  // Load sound\n  Sound.load( \"/assets/spacetravel.mp3\" ).then( s => {\n    sound = s.analyze(bins);\n  }).catch( e => console.error(e) );\n\n\n  // Draw play button\n  function playButton() {\n    if (!sound || !sound.playing) {\n      form.fillOnly(\"#f06\").rect( [[0,0], [50,50]] );\n      form.fillOnly('#fff').polygon( Triangle.fromCenter( [25,25], 10 ).rotate2D( Const.half_pi, [25,25] ) );\n    } else {\n      form.fillOnly(\"rgba(0,0,0,.2)\").rect( [[0,0], [50,50]] );\n      form.fillOnly(\"#fff\").rect( [[18, 18], [32,32]] );\n    }\n  }\n\n\n  // animation\n  space.add({\n    animate: (time, ftime) => {\n      if (sound && sound.playable) {\n        sound.freqDomainTo(space.size).forEach( (t, i) => {\n          form.fillOnly( colors[i%5] ).point( t, 30 );\n        });\n      }\n      playButton();\n    },\n\n    action: (type, x, y) => {\n      if (type === \"up\" &&  Geom.withinBound( [x,y], [0,0], [50,50] )) { // clicked button\n        sound.toggle();\n      }\n    }\n  });\n  \n  //// ----\n  \n  space.bindMouse().bindTouch().play();\n\n})();"
      },
      "date": 1652628186557
    },
    {
      "item": {
        "type": "factory",
        "id": "dc26025037693f04"
      },
      "id": "dc26025037693f04",
      "type": "add",
      "after": "304de7b1862b1cb1",
      "date": 1652628284375
    },
    {
      "id": "dc26025037693f04",
      "type": "move",
      "order": [
        "dc26025037693f04",
        "3e9f30f4d48c6409",
        "304de7b1862b1cb1"
      ],
      "date": 1652628288822
    },
    {
      "type": "edit",
      "id": "dc26025037693f04",
      "item": {
        "type": "paragraph",
        "id": "dc26025037693f04",
        "text": "– [https://github.com/williamngan/pts/blob/f89b7f36a26f97e554c8f309de64a8a7e230763b/demo/guide.sound_simple.js github]"
      },
      "date": 1652628298374
    },
    {
      "type": "edit",
      "id": "3e9f30f4d48c6409",
      "item": {
        "type": "code",
        "id": "3e9f30f4d48c6409",
        "text": "//// Demo code starts (anonymous function wrapper is optional) ---\n\n(function() {\n\n  Pts.quickStart( \"#pt\", \"#e2e6ef\" );\n\n  // Note: use Sound.loadAsBuffer instead if you need support for Safari/iOS browser. (as of Apr 2019)\n  // See this example: http://ptsjs.org/demo/edit/?name=sound.analyze\n  \n  var sound;\n  var bins = 256;\n  var colors = [\"#f06\", \"#62e\", \"#fff\", \"#fe3\", \"#0c9\"];\n\n  // Load sound\n  Sound.load( \"/assets/pages/pts-demos/spacetravel.mp3\" ).then( s => {\n    sound = s.analyze(bins);\n  }).catch( e => console.error(e) );\n\n\n  // Draw play button\n  function playButton() {\n    if (!sound || !sound.playing) {\n      form.fillOnly(\"#f06\").rect( [[0,0], [50,50]] );\n      form.fillOnly('#fff').polygon( Triangle.fromCenter( [25,25], 10 ).rotate2D( Const.half_pi, [25,25] ) );\n    } else {\n      form.fillOnly(\"rgba(0,0,0,.2)\").rect( [[0,0], [50,50]] );\n      form.fillOnly(\"#fff\").rect( [[18, 18], [32,32]] );\n    }\n  }\n\n\n  // animation\n  space.add({\n    animate: (time, ftime) => {\n      if (sound && sound.playable) {\n        sound.freqDomainTo(space.size).forEach( (t, i) => {\n          form.fillOnly( colors[i%5] ).point( t, 30 );\n        });\n      }\n      playButton();\n    },\n\n    action: (type, x, y) => {\n      if (type === \"up\" &&  Geom.withinBound( [x,y], [0,0], [50,50] )) { // clicked button\n        sound.toggle();\n      }\n    }\n  });\n  \n  //// ----\n  \n  space.bindMouse().bindTouch().play();\n\n})();"
      },
      "date": 1652628355551
    },
    {
      "type": "edit",
      "id": "dc26025037693f04",
      "item": {
        "type": "paragraph",
        "id": "dc26025037693f04",
        "text": "Pts.guides – [https://github.com/williamngan/pts/blob/f89b7f36a26f97e554c8f309de64a8a7e230763b/demo/guide.sound_simple.js github]"
      },
      "date": 1652628500082
    },
    {
      "type": "edit",
      "id": "dc26025037693f04",
      "item": {
        "type": "paragraph",
        "id": "dc26025037693f04",
        "text": "Pts.guides Sound [https://ptsjs.org/guide/sound-0800 page], [https://github.com/williamngan/pts/blob/f89b7f36a26f97e554c8f309de64a8a7e230763b/demo/guide.sound_simple.js github]"
      },
      "date": 1652628534961
    }
  ]
}