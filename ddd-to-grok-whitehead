{
  "title": "DDD To Grok Whitehead",
  "story": [
    {
      "type": "paragraph",
      "id": "b822ed89cabfd450",
      "text": "John Bywater has been sharing his journey to understanding Whitehead. In particular, John seems to see in Whitehead a definitive argument supporting the belief that domain-driven design's understanding of event sourcing does provide a general purpose architecture for even the most complex software problems. [https://app.element.io/#/room/!ORfrUEFeWFcHAMLFLr:matrix.org/$1583190242840150kHOVU:matrix.org matrix]"
    },
    {
      "type": "paragraph",
      "id": "e1dfe0a791e366bf",
      "text": "One thing that I haven't paid enough attention to (pulled together very well) is the correspondence between Whiteheads's system and software. There's the match with event sourced DDD that I've mentioned: \"domain model -> event-sourced aggregate -> domain event\" is an example of \"corpuscular society (nexus with many strands of personal order) -> enduring object (nexus with personal order) -> actual occasion\". That's really the fish hook I have in my mouth, that's why I got caught on this stuff. It's like DDD is a single room I was living in, and I then I realised there's a whole mansion house to explore.\n\nAs I've said before, there are four stages of an actual occasion, which just seems to correspond with the structure of the Alexandrian pattern. And then Alexander's statements in Timeless Way of Building: (a) that he is looking for patterns of events; and (b) that in the end (when you go through the \"gate\" and pass through a pattern language, the patterns don't matter any longer, because they have taught you to be receptive to what is real. That just seems to tie beautifully back to Whitehead's statement that there is no going behind the actual occasions to find anything more real.\n\nBut there are a few other things that I haven't quite pulled into the centre of my attention, and perhaps more if I were to pay more careful attention. And perhaps now I can pay more attention to this. So firstly there is the structure of the book: which is quite definitely iterative (he talks of \"recurring\" to the topics): and incremental.(he talks of adding something to them with each recursion). Secondly, there is the notion of \"concerns\" that he says is addressing, which seems to be the same thing as we separate in software, when we work towards a \"separation of concerns\".\n\nI already mentioned the \"atomic\" aspect of recording which makes a set of model changes into a \"thing\": an actual occasion indivisible on the level of its logical unity (the statements in the transaction either all happen or none of them happen), but divisible in its physical actuality (resulting records can be updated or deleted individually). And the way that allows the processing of domain events to be considered atomically, as \"process events\". Also (bearing in mind Whitehead's proposition that each actual occasion has both a physical and a mental pole) that this \"indivisible logical unity\" corresponds to the settlement that takes place on the mental pole of an actual occasions, and that the \"divisible records\" corresponds to the physical pole. \n\nThere's also the different ways a team can form together. In the end, the HEAD or a tag on some branch is built into a distribution, or directly deployed. But whichever is the latest changeset, and however many other branches there are, there's a single line of changes going back from the point that is released to the initial empty state of the repository. So that's a set of changes with serial ordering, an enduring object with personal order. And by comparison, a team of developers (and other roles) is a corpuscular society. So there are different ways in which the experience of the members of the team (as a corpuscular society) combine to make the working software (an enduring object, with a single strand of personal order). There are the sole or pairs of programmers with feature branches and continuous integration; solo or pairs of programmers doing trunk based development perhaps with feature toggles but with their local branches; and then mob programming with no branches so that their corpuscularity is merged into a personal order whilst the code is being written."
    },
    {
      "type": "pagefold",
      "id": "fe4e01adbe78ad7e",
      "text": "."
    },
    {
      "type": "reference",
      "id": "2eaaa32808f4e887",
      "site": "found.ward.bay.wiki.org",
      "slug": "episodes-in-context",
      "title": "Episodes in Context",
      "text": "Several authors have returned to my 1994 pattern language dubbed Episodes. This has been recognized as a founding work in the history of Agile. So an inquiry into roots of the now accepted and consequently diluted practices might want to know more about how Episodes came to be."
    },
    {
      "type": "reference",
      "id": "3aed65b0aaec57a2",
      "site": "found.ward.bay.wiki.org",
      "slug": "ward-whitehead-coincidence",
      "title": "Ward-Whitehead Coincidence",
      "text": "We spent some time this morning discussing congruence between things I had written and the speculative philosophy of Whitehead. This was in the context of Thompson Morrison's observations which were explored by viewing his Journal. [https://riot.im/app/#/room/#fedwiki:matrix.org/$1581379877115593ufDJC:matrix.org riot]"
    },
    {
      "type": "paragraph",
      "id": "43f01cb7cac0523e",
      "text": "See [[Event Sourcing]] and [[Capturing the World]]"
    },
    {
      "type": "paragraph",
      "id": "dd43f3be7f2e16f2",
      "text": "I haven't quite understood event sourced aggregate, but this article describing creation of such a thing in Rust seems to have helped [https://medium.com/capital-one-tech/event-sourcing-with-aggregates-in-rust-4022af41cf67 medium]"
    },
    {
      "type": "paragraph",
      "id": "d5ba3505cf09f1f1",
      "text": "This answer at stackoverflow also feels informative for thinking about aggregates [https://stackoverflow.com/a/49986434/1074208 stackoverflow]"
    },
    {
      "type": "paragraph",
      "id": "2beb44e23ef9387e",
      "text": "John has written a python library or framework for building event-sourced things. A key and differentiating feature seems to be an application of atomic transactions at The Right Point in a sequence of events. This is a point I still do not completely understand, but leaving a note here for my future self to study more closely until I do understand. [https://github.com/johnbywater/eventsourcing github]"
    },
    {
      "type": "reference",
      "id": "3f9c4c350bd0626b",
      "site": "found.ward.bay.wiki.org",
      "slug": "occasion-aka-dual-writing",
      "title": "Occasion, aka \"Dual Writing\"",
      "text": "The \"atomic\" aspect of ACID DB transactions which makes writing records be an actual occasion (rather than an event that isn't an actual occasion, aka \"dual writing\"), situated within processing command and events in system."
    },
    {
      "type": "paragraph",
      "id": "184fba8b5204589e",
      "text": "Why am I so interested? First, understanding event-oriented UI in GUIs and its effect on the code—as I learned from hypercard—was a defining transition in my early programming experience. Second, it was a DDD conference that brought Ward Cunningham to Denver where I could meet him in person. That meeting drew me fully into deep participation in federated wiki development. [[Explore DDD 2017]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "DDD To Grok Whitehead",
        "story": []
      },
      "date": 1583424138903
    },
    {
      "item": {
        "type": "factory",
        "id": "b822ed89cabfd450"
      },
      "id": "b822ed89cabfd450",
      "type": "add",
      "date": 1583424141840
    },
    {
      "type": "edit",
      "id": "b822ed89cabfd450",
      "item": {
        "type": "paragraph",
        "id": "b822ed89cabfd450",
        "text": "John Bywater has been sharing his journey to understanding Whitehead. In particular, John seems to see in Whitehead a definitive argument supporting the belief that domain-driven design's understanding of event sourcing does provide a general purpose architecture for even the most complex software problems. [http://link riot]"
      },
      "date": 1583424338261
    },
    {
      "type": "edit",
      "id": "b822ed89cabfd450",
      "item": {
        "type": "paragraph",
        "id": "b822ed89cabfd450",
        "text": "John Bywater has been sharing his journey to understanding Whitehead. In particular, John seems to see in Whitehead a definitive argument supporting the belief that domain-driven design's understanding of event sourcing does provide a general purpose architecture for even the most complex software problems. [https://riot.im/app/#/room/!ORfrUEFeWFcHAMLFLr:matrix.org/$1583190242840150kHOVU:matrix.org?via=matrix.org&via=matrix.allmende.io&via=diasp.in riot]"
      },
      "date": 1583424387667
    },
    {
      "item": {
        "type": "factory",
        "id": "e1dfe0a791e366bf"
      },
      "id": "e1dfe0a791e366bf",
      "type": "add",
      "after": "b822ed89cabfd450",
      "date": 1583424624578
    },
    {
      "type": "edit",
      "id": "e1dfe0a791e366bf",
      "item": {
        "type": "paragraph",
        "id": "e1dfe0a791e366bf",
        "text": "One thing that I haven't paid enough attention to (pulled together very well) is the correspondence between Whiteheads's system and software. There's the match with event sourced DDD that I've mentioned: \"domain model -> event-sourced aggregate -> domain event\" is an example of \"corpuscular society (nexus with many strands of personal order) -> enduring object (nexus with personal order) -> actual occasion\". That's really the fish hook I have in my mouth, that's why I got caught on this stuff. It's like DDD is a single room I was living in, and I then I realised there's a whole mansion house to explore.\n\nAs I've said before, there are four stages of an actual occasion, which just seems to correspond with the structure of the Alexandrian pattern. And then Alexander's statements in Timeless Way of Building: (a) that he is looking for patterns of events; and (b) that in the end (when you go through the \"gate\" and pass through a pattern language, the patterns don't matter any longer, because they have taught you to be receptive to what is real. That just seems to tie beautifully back to Whitehead's statement that there is no going behind the actual occasions to find anything more real.\n\nBut there are a few other things that I haven't quite pulled into the centre of my attention, and perhaps more if I were to pay more careful attention. And perhaps now I can pay more attention to this. So firstly there is the structure of the book: which is quite definitely iterative (he talks of \"recurring\" to the topics): and incremental.(he talks of adding something to them with each recursion). Secondly, there is the notion of \"concerns\" that he says is addressing, which seems to be the same thing as we separate in software, when we work towards a \"separation of concerns\".\n\nI already mentioned the \"atomic\" aspect of recording which makes a set of model changes into a \"thing\": an actual occasion indivisible on the level of its logical unity (the statements in the transaction either all happen or none of them happen), but divisible in its physical actuality (resulting records can be updated or deleted individually). And the way that allows the processing of domain events to be considered atomically, as \"process events\". Also (bearing in mind Whitehead's proposition that each actual occasion has both a physical and a mental pole) that this \"indivisible logical unity\" corresponds to the settlement that takes place on the mental pole of an actual occasions, and that the \"divisible records\" corresponds to the physical pole. \n\nThere's also the different ways a team can form together. In the end, the HEAD or a tag on some branch is built into a distribution, or directly deployed. But whichever is the latest changeset, and however many other branches there are, there's a single line of changes going back from the point that is released to the initial empty state of the repository. So that's a set of changes with serial ordering, an enduring object with personal order. And by comparison, a team of developers (and other roles) is a corpuscular society. So there are different ways in which the experience of the members of the team (as a corpuscular society) combine to make the working software (an enduring object, with a single strand of personal order). There are the sole or pairs of programmers with feature branches and continuous integration; solo or pairs of programmers doing trunk based development perhaps with feature toggles but with their local branches; and then mob programming with no branches so that their corpuscularity is merged into a personal order whilst the code is being written."
      },
      "date": 1583424626795
    },
    {
      "item": {
        "type": "factory",
        "id": "fe4e01adbe78ad7e"
      },
      "id": "fe4e01adbe78ad7e",
      "type": "add",
      "after": "e1dfe0a791e366bf",
      "date": 1583424639841
    },
    {
      "type": "edit",
      "id": "fe4e01adbe78ad7e",
      "item": {
        "type": "pagefold",
        "id": "fe4e01adbe78ad7e",
        "text": "."
      },
      "date": 1583424642763
    },
    {
      "item": {
        "type": "factory",
        "id": "77edbe676842826b"
      },
      "id": "77edbe676842826b",
      "type": "add",
      "after": "fe4e01adbe78ad7e",
      "date": 1583424728963
    },
    {
      "type": "edit",
      "id": "77edbe676842826b",
      "item": {
        "type": "paragraph",
        "id": "77edbe676842826b",
        "text": "See [[Ward-Whitehead Coincidence]]"
      },
      "date": 1583424736926
    },
    {
      "item": {
        "type": "factory",
        "id": "3aed65b0aaec57a2"
      },
      "id": "3aed65b0aaec57a2",
      "type": "add",
      "after": "77edbe676842826b",
      "date": 1583424759946
    },
    {
      "type": "edit",
      "id": "3aed65b0aaec57a2",
      "item": {
        "type": "reference",
        "id": "3aed65b0aaec57a2",
        "site": "found.ward.bay.wiki.org",
        "slug": "ward-whitehead-coincidence",
        "title": "Ward-Whitehead Coincidence",
        "text": "We spent some time this morning discussing congruence between things I had written and the speculative philosophy of Whitehead. This was in the context of Thompson Morrison's observations which were explored by viewing his Journal. [https://riot.im/app/#/room/#fedwiki:matrix.org/$1581379877115593ufDJC:matrix.org riot]"
      },
      "date": 1583424762765
    },
    {
      "type": "remove",
      "id": "77edbe676842826b",
      "date": 1583424770641
    },
    {
      "item": {
        "type": "factory",
        "id": "9256efb87a0a1cd7"
      },
      "id": "9256efb87a0a1cd7",
      "type": "add",
      "after": "3aed65b0aaec57a2",
      "date": 1583424784877
    },
    {
      "type": "remove",
      "id": "9256efb87a0a1cd7",
      "date": 1583424791991
    },
    {
      "item": {
        "type": "factory",
        "id": "2eaaa32808f4e887"
      },
      "id": "2eaaa32808f4e887",
      "type": "add",
      "after": "3aed65b0aaec57a2",
      "date": 1583424793544
    },
    {
      "type": "edit",
      "id": "2eaaa32808f4e887",
      "item": {
        "type": "reference",
        "id": "2eaaa32808f4e887",
        "site": "found.ward.bay.wiki.org",
        "slug": "episodes-in-context",
        "title": "Episodes in Context",
        "text": "Several authors have returned to my 1994 pattern language dubbed Episodes. This has been recognized as a founding work in the history of Agile. So an inquiry into roots of the now accepted and consequently diluted practices might want to know more about how Episodes came to be."
      },
      "date": 1583424796468
    },
    {
      "id": "2eaaa32808f4e887",
      "type": "move",
      "order": [
        "b822ed89cabfd450",
        "e1dfe0a791e366bf",
        "fe4e01adbe78ad7e",
        "2eaaa32808f4e887",
        "3aed65b0aaec57a2"
      ],
      "date": 1583424798530
    },
    {
      "item": {
        "type": "factory",
        "id": "43f01cb7cac0523e"
      },
      "id": "43f01cb7cac0523e",
      "type": "add",
      "after": "3aed65b0aaec57a2",
      "date": 1583425046877
    },
    {
      "type": "edit",
      "id": "43f01cb7cac0523e",
      "item": {
        "type": "paragraph",
        "id": "43f01cb7cac0523e",
        "text": "See [[Event Sourcing]] and [[Capturing the World]]"
      },
      "date": 1583425070107
    },
    {
      "item": {
        "type": "factory",
        "id": "dd43f3be7f2e16f2"
      },
      "id": "dd43f3be7f2e16f2",
      "type": "add",
      "after": "43f01cb7cac0523e",
      "date": 1583425090784
    },
    {
      "type": "edit",
      "id": "dd43f3be7f2e16f2",
      "item": {
        "type": "paragraph",
        "id": "dd43f3be7f2e16f2",
        "text": "I haven't quite understood event sourced aggregate, but this article describing creation of such a thing in Rust seems to have helped [https://link medium]"
      },
      "date": 1583425174551
    },
    {
      "type": "edit",
      "id": "dd43f3be7f2e16f2",
      "item": {
        "type": "paragraph",
        "id": "dd43f3be7f2e16f2",
        "text": "I haven't quite understood event sourced aggregate, but this article describing creation of such a thing in Rust seems to have helped [https://medium.com/capital-one-tech/event-sourcing-with-aggregates-in-rust-4022af41cf67 medium]"
      },
      "date": 1583425195378
    },
    {
      "type": "add",
      "id": "2beb44e23ef9387e",
      "item": {
        "type": "paragraph",
        "id": "2beb44e23ef9387e",
        "text": "John has written a python library or framework for building event-sourced things. A key and differentiating feature seems to be an application of atomic transactions at The Right Point in a sequence of events. This is a point I still do not completely understand, but leaving a note here for my future self to study more closely until I do understand. [https://github.com/johnbywater/eventsourcing github]"
      },
      "after": "dd43f3be7f2e16f2",
      "date": 1583425356807
    },
    {
      "type": "add",
      "id": "d5ba3505cf09f1f1",
      "item": {
        "type": "paragraph",
        "id": "d5ba3505cf09f1f1",
        "text": "This answer at stackoverflow also feels informative for thinking about aggregates [https://stackoverflow.com/a/49986434/1074208 stackoverflow]"
      },
      "after": "dd43f3be7f2e16f2",
      "date": 1583425660941
    },
    {
      "type": "add",
      "id": "184fba8b5204589e",
      "item": {
        "type": "paragraph",
        "id": "184fba8b5204589e",
        "text": "Why am I so interested? First, understanding event-oriented UI in GUIs and its effect on the code—as I learned from hypercard—was a defining transition in my early programming experience. Second, it was a DDD conference that brought Ward Cunningham to Denver where I could meet him in person. That meeting drew me fully into deep participation in federated wiki development. [[Explore DDD 2017]]"
      },
      "after": "2beb44e23ef9387e",
      "date": 1583425939010
    },
    {
      "item": {
        "type": "factory",
        "id": "3f9c4c350bd0626b"
      },
      "id": "3f9c4c350bd0626b",
      "type": "add",
      "after": "184fba8b5204589e",
      "date": 1583427009432
    },
    {
      "id": "3f9c4c350bd0626b",
      "type": "move",
      "order": [
        "b822ed89cabfd450",
        "e1dfe0a791e366bf",
        "fe4e01adbe78ad7e",
        "2eaaa32808f4e887",
        "3aed65b0aaec57a2",
        "43f01cb7cac0523e",
        "dd43f3be7f2e16f2",
        "d5ba3505cf09f1f1",
        "2beb44e23ef9387e",
        "3f9c4c350bd0626b",
        "184fba8b5204589e"
      ],
      "date": 1583427011501
    },
    {
      "type": "edit",
      "id": "3f9c4c350bd0626b",
      "item": {
        "type": "reference",
        "id": "3f9c4c350bd0626b",
        "site": "found.ward.bay.wiki.org",
        "slug": "occasion-aka-dual-writing",
        "title": "Occasion, aka \"Dual Writing\"",
        "text": "The \"atomic\" aspect of ACID DB transactions which makes writing records be an actual occasion (rather than an event that isn't an actual occasion, aka \"dual writing\"), situated within processing command and events in system."
      },
      "date": 1583427015114
    },
    {
      "type": "edit",
      "id": "b822ed89cabfd450",
      "item": {
        "type": "paragraph",
        "id": "b822ed89cabfd450",
        "text": "John Bywater has been sharing his journey to understanding Whitehead. In particular, John seems to see in Whitehead a definitive argument supporting the belief that domain-driven design's understanding of event sourcing does provide a general purpose architecture for even the most complex software problems. [https://riot.im/app/#/room/!ORfrUEFeWFcHAMLFLr:matrix.org/$1583190242840150kHOVU:matrix.org?via=matrix.org&via=matrix.allmende.io&via=diasp.in matrix]"
      },
      "date": 1615654627827
    },
    {
      "type": "edit",
      "id": "b822ed89cabfd450",
      "item": {
        "type": "paragraph",
        "id": "b822ed89cabfd450",
        "text": "John Bywater has been sharing his journey to understanding Whitehead. In particular, John seems to see in Whitehead a definitive argument supporting the belief that domain-driven design's understanding of event sourcing does provide a general purpose architecture for even the most complex software problems. [https://app.element.io/#/room/!ORfrUEFeWFcHAMLFLr:matrix.org/$1583190242840150kHOVU:matrix.org matrix]"
      },
      "date": 1615654806027
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1628866451678
    }
  ]
}