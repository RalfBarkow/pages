{
  "title": "CRMondrian",
  "story": [
    {
      "type": "markdown",
      "id": "72c73e4f0b5eff28",
      "text": "CRMondrian is a simle API to [[build]]  â‡’[[Polymetric Views]]. [https://github.com/cjrohrbach/BA-GT-Roassal github]\n"
    },
    {
      "type": "markdown",
      "id": "3a4b84e409371d50",
      "text": "It is simmilar to  {{gtClass:[[GtMondrian]]}} but with some key differences: \n- Easier to choose the shape of the nodes\n- Support for normalized nodes\n- Offers methods for easily creating a ClassBlueprint and MindMap\n- Add actions\nand many more\n\n## How does it work?\nA CRMondrian consists of theses main parts:\n- {{gtClass:CRCanvas}}: The canvas is parent to all elements contained in the visualization. \n- {{gtClass:CRShapeBuilder}} : There are different shapeBuilders for different node shapes. Their job is to collect the shape specification and when required build the nodes.  (a mondrian instance can have multiple shapeBuilders)\n- {{gtClass:CRNode}}: CRNode wraps the node shape in a element that changes the color to add highlights to the node when needed. Furthermore is it the element that addes drag functionallity and tooltips to the node.\n- {{gtClass:CREdgeBuilder}}  together with {{gtClass:CREdge}} and its subclasses: Provides the ability to add edges to the visualization. (a mondrian instance can have mulitple edgeBuilders)\n- CRLayout: The diffent layouts are used to layout the nodes. They are applied on the canvas.\n\n\n## How do I use it?\n\nFollowing some basic examples on how to use CRMondrian. \nYou can find many more examples in {{gtClass:CRMondrianExamples}}\n\n### Create Nodes:\n\nCreate simple collection of nodes like this:\n{{gtExample:CRMondrianExamples>>#someNumbers|codeExpanded=true|previewExpanded=true}}\n\nChange the shape to the following predefined shapes: \n- Circle \n- Box\n- Point\n- Label\n\n{{gtExample:CRMondrianExamples>>#someCircles|codeExpanded=true|previewExpanded=false}}\n\nOr define your own shape like this: \n{{gtExample:CRMondrianExamples>>#customShape|codeExpanded=true|previewExpanded=false}}\n\n### Edges and Layout\n\nAdd edges and a layout like this: \n{{gtExample:CRMondrianExamples>>#someConnectedPointsTree|codeExpanded=true|previewExpanded=false}}\n\n\n### Normalizer\nAdd a normalizer like this: \n{{gtExample:CRMondrianExamples>>#normalizeColor|codeExpanded=true|previewExpanded=false}}\n\n### Actions\nAdd a action (Eventhandler) to each node like this: \n{{gtExample:CRMondrianExamples>>#customAction|codeExpanded=true|previewExpanded=false}}\n\n\n\n### Nested nodes\n\n{{gtExample:CRMondrianExamples>>#mondrianAsNode|codeExpanded=true|previewExpanded=false}}\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "CRMondrian",
        "story": []
      },
      "date": 1662115082100
    },
    {
      "item": {
        "type": "factory",
        "id": "72c73e4f0b5eff28"
      },
      "id": "72c73e4f0b5eff28",
      "type": "add",
      "date": 1662115086778
    },
    {
      "type": "edit",
      "id": "72c73e4f0b5eff28",
      "item": {
        "type": "markdown",
        "id": "72c73e4f0b5eff28",
        "text": "# CRMondrian\nCRMondrian is a simle API to build polymetric views.\n\nIt is simmilar to  {{gtClass:GtMondrian}} but with some key differences: \n- Easier to choose the shape of the nodes\n- Support for normalized nodes\n- Offers methods for easily creating a ClassBlueprint and MindMap\n- Add actions\nand many more\n\n## How does it work?\nA CRMondrian consists of theses main parts:\n- {{gtClass:CRCanvas}}: The canvas is parent to all elements contained in the visualization. \n- {{gtClass:CRShapeBuilder}} : There are different shapeBuilders for different node shapes. Their job is to collect the shape specification and when required build the nodes.  (a mondrian instance can have multiple shapeBuilders)\n- {{gtClass:CRNode}}: CRNode wraps the node shape in a element that changes the color to add highlights to the node when needed. Furthermore is it the element that addes drag functionallity and tooltips to the node.\n- {{gtClass:CREdgeBuilder}}  together with {{gtClass:CREdge}} and its subclasses: Provides the ability to add edges to the visualization. (a mondrian instance can have mulitple edgeBuilders)\n- CRLayout: The diffent layouts are used to layout the nodes. They are applied on the canvas.\n\n\n## How do I use it?\n\nFollowing some basic examples on how to use CRMondrian. \nYou can find many more examples in {{gtClass:CRMondrianExamples}}\n\n### Create Nodes:\n\nCreate simple collection of nodes like this:\n{{gtExample:CRMondrianExamples>>#someNumbers|codeExpanded=true|previewExpanded=true}}\n\nChange the shape to the following predefined shapes: \n- Circle \n- Box\n- Point\n- Label\n\n{{gtExample:CRMondrianExamples>>#someCircles|codeExpanded=true|previewExpanded=false}}\n\nOr define your own shape like this: \n{{gtExample:CRMondrianExamples>>#customShape|codeExpanded=true|previewExpanded=false}}\n\n### Edges and Layout\n\nAdd edges and a layout like this: \n{{gtExample:CRMondrianExamples>>#someConnectedPointsTree|codeExpanded=true|previewExpanded=false}}\n\n\n### Normalizer\nAdd a normalizer like this: \n{{gtExample:CRMondrianExamples>>#normalizeColor|codeExpanded=true|previewExpanded=false}}\n\n### Actions\nAdd a action (Eventhandler) to each node like this: \n{{gtExample:CRMondrianExamples>>#customAction|codeExpanded=true|previewExpanded=false}}\n\n\n\n### Nested nodes\n\n{{gtExample:CRMondrianExamples>>#mondrianAsNode|codeExpanded=true|previewExpanded=false}}\n"
      },
      "date": 1662115089394
    },
    {
      "type": "edit",
      "id": "72c73e4f0b5eff28",
      "item": {
        "type": "markdown",
        "id": "72c73e4f0b5eff28",
        "text": "# CRMondrian\nCRMondrian is a simle API to [[build]] [[polymetric views]].\n\nIt is simmilar to  {{gtClass:GtMondrian}} but with some key differences: \n- Easier to choose the shape of the nodes\n- Support for normalized nodes\n- Offers methods for easily creating a ClassBlueprint and MindMap\n- Add actions\nand many more\n\n## How does it work?\nA CRMondrian consists of theses main parts:\n- {{gtClass:CRCanvas}}: The canvas is parent to all elements contained in the visualization. \n- {{gtClass:CRShapeBuilder}} : There are different shapeBuilders for different node shapes. Their job is to collect the shape specification and when required build the nodes.  (a mondrian instance can have multiple shapeBuilders)\n- {{gtClass:CRNode}}: CRNode wraps the node shape in a element that changes the color to add highlights to the node when needed. Furthermore is it the element that addes drag functionallity and tooltips to the node.\n- {{gtClass:CREdgeBuilder}}  together with {{gtClass:CREdge}} and its subclasses: Provides the ability to add edges to the visualization. (a mondrian instance can have mulitple edgeBuilders)\n- CRLayout: The diffent layouts are used to layout the nodes. They are applied on the canvas.\n\n\n## How do I use it?\n\nFollowing some basic examples on how to use CRMondrian. \nYou can find many more examples in {{gtClass:CRMondrianExamples}}\n\n### Create Nodes:\n\nCreate simple collection of nodes like this:\n{{gtExample:CRMondrianExamples>>#someNumbers|codeExpanded=true|previewExpanded=true}}\n\nChange the shape to the following predefined shapes: \n- Circle \n- Box\n- Point\n- Label\n\n{{gtExample:CRMondrianExamples>>#someCircles|codeExpanded=true|previewExpanded=false}}\n\nOr define your own shape like this: \n{{gtExample:CRMondrianExamples>>#customShape|codeExpanded=true|previewExpanded=false}}\n\n### Edges and Layout\n\nAdd edges and a layout like this: \n{{gtExample:CRMondrianExamples>>#someConnectedPointsTree|codeExpanded=true|previewExpanded=false}}\n\n\n### Normalizer\nAdd a normalizer like this: \n{{gtExample:CRMondrianExamples>>#normalizeColor|codeExpanded=true|previewExpanded=false}}\n\n### Actions\nAdd a action (Eventhandler) to each node like this: \n{{gtExample:CRMondrianExamples>>#customAction|codeExpanded=true|previewExpanded=false}}\n\n\n\n### Nested nodes\n\n{{gtExample:CRMondrianExamples>>#mondrianAsNode|codeExpanded=true|previewExpanded=false}}\n"
      },
      "date": 1662115108564
    },
    {
      "type": "edit",
      "id": "72c73e4f0b5eff28",
      "item": {
        "type": "markdown",
        "id": "72c73e4f0b5eff28",
        "text": "# CRMondrian\nCRMondrian is a simle API to [[build]] [[polymetric views]].\n"
      },
      "date": 1662115130628
    },
    {
      "type": "add",
      "id": "3a4b84e409371d50",
      "item": {
        "type": "markdown",
        "id": "3a4b84e409371d50",
        "text": "\nIt is simmilar to  {{gtClass:GtMondrian}} but with some key differences: \n- Easier to choose the shape of the nodes\n- Support for normalized nodes\n- Offers methods for easily creating a ClassBlueprint and MindMap\n- Add actions\nand many more\n\n## How does it work?\nA CRMondrian consists of theses main parts:\n- {{gtClass:CRCanvas}}: The canvas is parent to all elements contained in the visualization. \n- {{gtClass:CRShapeBuilder}} : There are different shapeBuilders for different node shapes. Their job is to collect the shape specification and when required build the nodes.  (a mondrian instance can have multiple shapeBuilders)\n- {{gtClass:CRNode}}: CRNode wraps the node shape in a element that changes the color to add highlights to the node when needed. Furthermore is it the element that addes drag functionallity and tooltips to the node.\n- {{gtClass:CREdgeBuilder}}  together with {{gtClass:CREdge}} and its subclasses: Provides the ability to add edges to the visualization. (a mondrian instance can have mulitple edgeBuilders)\n- CRLayout: The diffent layouts are used to layout the nodes. They are applied on the canvas.\n\n\n## How do I use it?\n\nFollowing some basic examples on how to use CRMondrian. \nYou can find many more examples in {{gtClass:CRMondrianExamples}}\n\n### Create Nodes:\n\nCreate simple collection of nodes like this:\n{{gtExample:CRMondrianExamples>>#someNumbers|codeExpanded=true|previewExpanded=true}}\n\nChange the shape to the following predefined shapes: \n- Circle \n- Box\n- Point\n- Label\n\n{{gtExample:CRMondrianExamples>>#someCircles|codeExpanded=true|previewExpanded=false}}\n\nOr define your own shape like this: \n{{gtExample:CRMondrianExamples>>#customShape|codeExpanded=true|previewExpanded=false}}\n\n### Edges and Layout\n\nAdd edges and a layout like this: \n{{gtExample:CRMondrianExamples>>#someConnectedPointsTree|codeExpanded=true|previewExpanded=false}}\n\n\n### Normalizer\nAdd a normalizer like this: \n{{gtExample:CRMondrianExamples>>#normalizeColor|codeExpanded=true|previewExpanded=false}}\n\n### Actions\nAdd a action (Eventhandler) to each node like this: \n{{gtExample:CRMondrianExamples>>#customAction|codeExpanded=true|previewExpanded=false}}\n\n\n\n### Nested nodes\n\n{{gtExample:CRMondrianExamples>>#mondrianAsNode|codeExpanded=true|previewExpanded=false}}\n"
      },
      "after": "72c73e4f0b5eff28",
      "date": 1662115133330
    },
    {
      "type": "edit",
      "id": "72c73e4f0b5eff28",
      "item": {
        "type": "markdown",
        "id": "72c73e4f0b5eff28",
        "text": "CRMondrian is a simle API to [[build]] [[polymetric views]].\n"
      },
      "date": 1662115136926
    },
    {
      "type": "edit",
      "id": "72c73e4f0b5eff28",
      "item": {
        "type": "markdown",
        "id": "72c73e4f0b5eff28",
        "text": "CRMondrian is a simle API to [[build]] [[Polymetric Views]].\n"
      },
      "date": 1662116533492
    },
    {
      "type": "edit",
      "id": "72c73e4f0b5eff28",
      "item": {
        "type": "markdown",
        "id": "72c73e4f0b5eff28",
        "text": "CRMondrian is a simle API to [[build]]  [[Polymetric Views]].\n"
      },
      "date": 1662116567081
    },
    {
      "type": "edit",
      "id": "72c73e4f0b5eff28",
      "item": {
        "type": "markdown",
        "id": "72c73e4f0b5eff28",
        "text": "CRMondrian is a simle API to [[build]]  â‡’[[Polymetric Views]].\n"
      },
      "date": 1662116575645
    },
    {
      "type": "edit",
      "id": "3a4b84e409371d50",
      "item": {
        "type": "markdown",
        "id": "3a4b84e409371d50",
        "text": "It is simmilar to  {{gtClass:[[GtMondrian]]}} but with some key differences: \n- Easier to choose the shape of the nodes\n- Support for normalized nodes\n- Offers methods for easily creating a ClassBlueprint and MindMap\n- Add actions\nand many more\n\n## How does it work?\nA CRMondrian consists of theses main parts:\n- {{gtClass:CRCanvas}}: The canvas is parent to all elements contained in the visualization. \n- {{gtClass:CRShapeBuilder}} : There are different shapeBuilders for different node shapes. Their job is to collect the shape specification and when required build the nodes.  (a mondrian instance can have multiple shapeBuilders)\n- {{gtClass:CRNode}}: CRNode wraps the node shape in a element that changes the color to add highlights to the node when needed. Furthermore is it the element that addes drag functionallity and tooltips to the node.\n- {{gtClass:CREdgeBuilder}}  together with {{gtClass:CREdge}} and its subclasses: Provides the ability to add edges to the visualization. (a mondrian instance can have mulitple edgeBuilders)\n- CRLayout: The diffent layouts are used to layout the nodes. They are applied on the canvas.\n\n\n## How do I use it?\n\nFollowing some basic examples on how to use CRMondrian. \nYou can find many more examples in {{gtClass:CRMondrianExamples}}\n\n### Create Nodes:\n\nCreate simple collection of nodes like this:\n{{gtExample:CRMondrianExamples>>#someNumbers|codeExpanded=true|previewExpanded=true}}\n\nChange the shape to the following predefined shapes: \n- Circle \n- Box\n- Point\n- Label\n\n{{gtExample:CRMondrianExamples>>#someCircles|codeExpanded=true|previewExpanded=false}}\n\nOr define your own shape like this: \n{{gtExample:CRMondrianExamples>>#customShape|codeExpanded=true|previewExpanded=false}}\n\n### Edges and Layout\n\nAdd edges and a layout like this: \n{{gtExample:CRMondrianExamples>>#someConnectedPointsTree|codeExpanded=true|previewExpanded=false}}\n\n\n### Normalizer\nAdd a normalizer like this: \n{{gtExample:CRMondrianExamples>>#normalizeColor|codeExpanded=true|previewExpanded=false}}\n\n### Actions\nAdd a action (Eventhandler) to each node like this: \n{{gtExample:CRMondrianExamples>>#customAction|codeExpanded=true|previewExpanded=false}}\n\n\n\n### Nested nodes\n\n{{gtExample:CRMondrianExamples>>#mondrianAsNode|codeExpanded=true|previewExpanded=false}}\n"
      },
      "date": 1662116597679
    },
    {
      "type": "edit",
      "id": "72c73e4f0b5eff28",
      "item": {
        "type": "markdown",
        "id": "72c73e4f0b5eff28",
        "text": "CRMondrian is a simle API to [[build]]  â‡’[[Polymetric Views]]. [https://github.com/cjrohrbach/BA-GT-Roassal github]\n"
      },
      "date": 1662116677602
    }
  ]
}