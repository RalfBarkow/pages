{
  "title": "Trait Composition",
  "story": [
    {
      "type": "markdown",
      "id": "e4ee771a4eec2e31",
      "text": "The [[Trait]] composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance."
    },
    {
      "type": "markdown",
      "id": "f0b04685440ff5e9",
      "text": "⇒ [[Mix In]]"
    },
    {
      "type": "pagefold",
      "id": "b744fbd99bd942d1",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "830faa53cc47da1d",
      "text": "TLEYE, Sebastián, [no date]. Improving the implementation of traits in Pharo. . P. 70. Traits are a new concept in Object-Oriented Programming, they were included in programming languages such as PHP, Perl and Pharo/Smalltalk. Traits are pure units of behavior that can be composed to form classes or other traits. The trait composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. The result enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. Pharo is a new open-source Smalltalk-inspired programming language and environment. It provides a platform for innovative development both in industry and research. Traits are integrated in Pharo but barely used due to a lack of support in the development environment. For this reason, it is necessary to create more support to programmers when using traits. Making classes and traits polymorphic is a good start. All the tools that know how to handle classes will also know how to handle traits. Achieve the maximum possible polymorphism between classes and traits is one of the goals of this work. Fix bugs in Pharo is also part of this work. There are bugs in Pharo presents since the ﬁrst implementations of traits. We will ﬁx these bugs and we will explain why they are important. Finally, we will think a new way to visualize traits, and with this, open doors to future programmers to implement it.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Trait Composition",
        "story": []
      },
      "date": 1631859987428
    },
    {
      "item": {
        "type": "factory",
        "id": "022e99d64c50d602"
      },
      "id": "022e99d64c50d602",
      "type": "add",
      "date": 1631859989780
    },
    {
      "type": "remove",
      "id": "022e99d64c50d602",
      "date": 1631859992020
    },
    {
      "item": {
        "type": "factory",
        "id": "e4ee771a4eec2e31"
      },
      "id": "e4ee771a4eec2e31",
      "type": "add",
      "date": 1631860002819
    },
    {
      "type": "edit",
      "id": "e4ee771a4eec2e31",
      "item": {
        "type": "markdown",
        "id": "e4ee771a4eec2e31",
        "text": "The trait composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance."
      },
      "date": 1631860007008
    },
    {
      "item": {
        "type": "factory",
        "id": "f0b04685440ff5e9"
      },
      "id": "f0b04685440ff5e9",
      "type": "add",
      "after": "e4ee771a4eec2e31",
      "date": 1631860114231
    },
    {
      "type": "edit",
      "id": "f0b04685440ff5e9",
      "item": {
        "type": "markdown",
        "id": "f0b04685440ff5e9",
        "text": "See [[Mix In]]"
      },
      "date": 1631860120952
    },
    {
      "type": "edit",
      "id": "e4ee771a4eec2e31",
      "item": {
        "type": "markdown",
        "id": "e4ee771a4eec2e31",
        "text": "The [[trait]] composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance."
      },
      "date": 1640586803141
    },
    {
      "type": "edit",
      "id": "e4ee771a4eec2e31",
      "item": {
        "type": "markdown",
        "id": "e4ee771a4eec2e31",
        "text": "The [[Trait]] composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance."
      },
      "date": 1670073537955
    },
    {
      "type": "edit",
      "id": "f0b04685440ff5e9",
      "item": {
        "type": "markdown",
        "id": "f0b04685440ff5e9",
        "text": "⇒ [[Mix In]]"
      },
      "date": 1670505144303
    },
    {
      "item": {
        "type": "factory",
        "id": "b744fbd99bd942d1"
      },
      "id": "b744fbd99bd942d1",
      "type": "add",
      "after": "f0b04685440ff5e9",
      "date": 1697475794034
    },
    {
      "type": "edit",
      "id": "b744fbd99bd942d1",
      "item": {
        "type": "pagefold",
        "id": "b744fbd99bd942d1",
        "text": "~"
      },
      "date": 1697475798321
    },
    {
      "item": {
        "type": "factory",
        "id": "830faa53cc47da1d"
      },
      "id": "830faa53cc47da1d",
      "type": "add",
      "after": "b744fbd99bd942d1",
      "date": 1697475799724
    },
    {
      "type": "edit",
      "id": "830faa53cc47da1d",
      "item": {
        "type": "paragraph",
        "id": "830faa53cc47da1d",
        "text": "TLEYE, Sebastián, [no date]. Improving the implementation of traits in Pharo. . P. 70. Traits are a new concept in Object-Oriented Programming, they were included in programming languages such as PHP, Perl and Pharo/Smalltalk. Traits are pure units of behavior that can be composed to form classes or other traits. The trait composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. The result enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. Pharo is a new open-source Smalltalk-inspired programming language and environment. It provides a platform for innovative development both in industry and research. Traits are integrated in Pharo but barely used due to a lack of support in the development environment. For this reason, it is necessary to create more support to programmers when using traits. Making classes and traits polymorphic is a good start. All the tools that know how to handle classes will also know how to handle traits. Achieve the maximum possible polymorphism between classes and traits is one of the goals of this work. Fix bugs in Pharo is also part of this work. There are bugs in Pharo presents since the ﬁrst implementations of traits. We will ﬁx these bugs and we will explain why they are important. Finally, we will think a new way to visualize traits, and with this, open doors to future programmers to implement it.\n"
      },
      "date": 1697475808677
    }
  ]
}