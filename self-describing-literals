{
  "title": "Self-Describing Literals",
  "story": [
    {
      "type": "paragraph",
      "id": "89694284c6628dc4",
      "text": "Some [[Literals]] directly refer to the data that they hold. For example, the Booleans (true and false), the empty pointer (nil or null), the empty string, and in [[Smalltalk]] the empty arrays (#() and {}). Those literals are acceptable because the semantics is obvious upon reading."
    },
    {
      "type": "pagefold",
      "id": "73c194fe934b7565",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "be682eeb4bd10946",
      "text": "[[What do developers consider magic literals?]] A Smalltalk perspective. [https://www.sciencedirect.com/science/article/pii/S0950584922000908?casa_token=8PLOCyM4bbwAAAAA:KzeWOrHiEjM3KU2dvCFTXGnYcWRe-gjyRuWY0OdPQTOLasi7kqWDJwTaVCioRVhWDjFtQv7Ar1A page]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Self-Describing Literals",
        "story": []
      },
      "date": 1660543945325
    },
    {
      "id": "89694284c6628dc4",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "89694284c6628dc4",
        "text": "Some literals directly refer to the data that they hold. For example, the Booleans (true and false), the empty pointer (nil or null), the empty string, and in Smalltalk the empty arrays (#() and {}). Those literals are acceptable because the semantics is obvious upon reading."
      },
      "date": 1660543957798
    },
    {
      "item": {
        "type": "factory",
        "id": "dbc74ba41e0c3bce"
      },
      "id": "dbc74ba41e0c3bce",
      "type": "add",
      "after": "89694284c6628dc4",
      "date": 1660543984746
    },
    {
      "type": "remove",
      "id": "dbc74ba41e0c3bce",
      "date": 1660543986806
    },
    {
      "item": {
        "type": "factory",
        "id": "73c194fe934b7565"
      },
      "id": "73c194fe934b7565",
      "type": "add",
      "after": "89694284c6628dc4",
      "date": 1660544002272
    },
    {
      "type": "edit",
      "id": "73c194fe934b7565",
      "item": {
        "type": "pagefold",
        "id": "73c194fe934b7565",
        "text": "~"
      },
      "date": 1660544006535
    },
    {
      "item": {
        "type": "factory",
        "id": "15edddf5bd29cd98"
      },
      "id": "15edddf5bd29cd98",
      "type": "add",
      "after": "73c194fe934b7565",
      "date": 1660544007921
    },
    {
      "type": "edit",
      "id": "15edddf5bd29cd98",
      "item": {
        "type": "paragraph",
        "id": "15edddf5bd29cd98",
        "text": "\nANQUETIL, N., DELPLANQUE, J., DUCASSE, S., ZAITSEV, O., FUHRMAN, C. and GUÉHÉNEUC, Y. -G., 2022. What do developers consider magic literals? A smalltalk perspective. Information and Software Technology. Online. 1 September 2022. Vol. 149, p. 106942. [Accessed 15 August 2022]. DOI 10.1016/j.infsof.2022.106942. "
      },
      "date": 1660544019416
    },
    {
      "type": "add",
      "id": "55f87c1fc159de72",
      "item": {
        "type": "paragraph",
        "id": "55f87c1fc159de72",
        "text": "Context:\nLiterals are constant values (numbers, strings, etc.) used in the source code. Magic literals are such values used without an explicit explanation of their meaning. Such undocumented values may hinder source-code comprehension, negatively impacting maintenance. Relatively little literature can be found on the subject beyond the usual (and very old) recommendation of avoiding literals and preferring named constants. Yet, magic literals are still routinely found in source code.\nObjective:\nWe studied literal values in source code to understand when they should be considered magic or not (i.e., acceptable).\nMethods:\nFirst, we perform a qualitative study of magic literals, to establish why and under which conditions they are considered harmful. We formalize hypotheses about the reasoning behind how literals are considered magic. Second, we perform a quantitative study on seven real systems ranging from small (a few classes) to large (thousands of classes). We report the literals’ types (number, string, Boolean, …), their grammatical function (e.g., argument in a call, operand in an expression, value assigned, …), or the purpose of the code in which they appear (test methods, regular code). Third, we report on another study involving 26 programmers who analyzed about 24,000 literals, to understand which ones they consider magic. Finally, we evaluate the hypotheses defining specific conditions under which literals are acceptable.\nResults:\nWe show that (1) literals still exist and are relatively frequent (found in close to 50% of the methods considered); (2) they are more frequent in test methods (in 80% of test methods); (3) to a large extent, they were considered acceptable (only 25% considered magic); and (4) the hypotheses concerning acceptable literals are valid to various degrees.\nConclusion:\nWe thus pave the way to future research on magic literals, for example, with tools that could help developers deciding if a literal is acceptable.\n"
      },
      "after": "15edddf5bd29cd98",
      "date": 1660544021699
    },
    {
      "type": "edit",
      "id": "55f87c1fc159de72",
      "item": {
        "type": "paragraph",
        "id": "55f87c1fc159de72",
        "text": "Context:\nLiterals are constant values (numbers, strings, etc.) used in the source code. Magic literals are such values used without an explicit explanation of their meaning. Such undocumented values may hinder source-code comprehension, negatively impacting maintenance. Relatively little literature can be found on the subject beyond the usual (and very old) recommendation of avoiding literals and preferring named constants. Yet, magic literals are still routinely found in source code.\nObjective:\nWe studied literal values in source code to understand when they should be considered magic or not (i.e., acceptable).\nMethods:\nFirst, we perform a qualitative study of magic literals, to establish why and under which conditions they are considered harmful. We formalize hypotheses about the reasoning behind how literals are considered magic. Second, we perform a quantitative study on seven real systems ranging from small (a few classes) to large (thousands of classes). We report the literals’ types (number, string, Boolean, …), their grammatical function (e.g., argument in a call, operand in an expression, value assigned, …), or the purpose of the code in which they appear (test methods, regular code). Third, we report on another study involving 26 programmers who analyzed about 24,000 literals, to understand which ones they consider magic. Finally, we evaluate the hypotheses defining specific conditions under which literals are acceptable.\nResults:\nWe show that (1) literals still exist and are relatively frequent (found in close to 50% of the methods considered); (2) they are more frequent in test methods (in 80% of test methods); (3) to a large extent, they were considered acceptable (only 25% considered magic); and (4) the hypotheses concerning acceptable literals are valid to various degrees.\n"
      },
      "date": 1660544191651
    },
    {
      "type": "add",
      "id": "1163981670bbe3aa",
      "item": {
        "type": "paragraph",
        "id": "1163981670bbe3aa",
        "text": "Conclusion:\nWe thus pave the way to future research on magic literals, for example, with tools that could help developers deciding if a literal is acceptable.\n"
      },
      "after": "55f87c1fc159de72",
      "date": 1660544194070
    },
    {
      "type": "edit",
      "id": "55f87c1fc159de72",
      "item": {
        "type": "paragraph",
        "id": "55f87c1fc159de72",
        "text": "Context:\nLiterals are constant values (numbers, strings, etc.) used in the source code. Magic literals are such values used without an explicit explanation of their meaning. Such undocumented values may hinder source-code comprehension, negatively impacting maintenance. Relatively little literature can be found on the subject beyond the usual (and very old) recommendation of avoiding literals and preferring named constants. Yet, magic literals are still routinely found in source code.\nObjective:\nWe studied literal values in source code to understand when they should be considered magic or not (i.e., acceptable).\nMethods:\nFirst, we perform a qualitative study of magic literals, to establish why and under which conditions they are considered harmful. We formalize hypotheses about the reasoning behind how literals are considered magic. Second, we perform a quantitative study on seven real systems ranging from small (a few classes) to large (thousands of classes). We report the literals’ types (number, string, Boolean, …), their grammatical function (e.g., argument in a call, operand in an expression, value assigned, …), or the purpose of the code in which they appear (test methods, regular code). Third, we report on another study involving 26 programmers who analyzed about 24,000 literals, to understand which ones they consider magic. Finally, we evaluate the hypotheses defining specific conditions under which literals are acceptable.\n"
      },
      "date": 1660544197792
    },
    {
      "type": "add",
      "id": "f026fe6378945933",
      "item": {
        "type": "paragraph",
        "id": "f026fe6378945933",
        "text": "Results:\nWe show that (1) literals still exist and are relatively frequent (found in close to 50% of the methods considered); (2) they are more frequent in test methods (in 80% of test methods); (3) to a large extent, they were considered acceptable (only 25% considered magic); and (4) the hypotheses concerning acceptable literals are valid to various degrees.\n"
      },
      "after": "55f87c1fc159de72",
      "date": 1660544200148
    },
    {
      "type": "edit",
      "id": "55f87c1fc159de72",
      "item": {
        "type": "paragraph",
        "id": "55f87c1fc159de72",
        "text": "Context:\nLiterals are constant values (numbers, strings, etc.) used in the source code. Magic literals are such values used without an explicit explanation of their meaning. Such undocumented values may hinder source-code comprehension, negatively impacting maintenance. Relatively little literature can be found on the subject beyond the usual (and very old) recommendation of avoiding literals and preferring named constants. Yet, magic literals are still routinely found in source code.\n"
      },
      "date": 1660544207979
    },
    {
      "type": "add",
      "id": "6161048b6088627a",
      "item": {
        "type": "paragraph",
        "id": "6161048b6088627a",
        "text": "Objective:\nWe studied literal values in source code to understand when they should be considered magic or not (i.e., acceptable).\n"
      },
      "after": "55f87c1fc159de72",
      "date": 1660544211335
    },
    {
      "type": "add",
      "id": "5c5f14a5c52fe544",
      "item": {
        "type": "paragraph",
        "id": "5c5f14a5c52fe544",
        "text": "Methods:\nFirst, we perform a qualitative study of magic literals, to establish why and under which conditions they are considered harmful. We formalize hypotheses about the reasoning behind how literals are considered magic. Second, we perform a quantitative study on seven real systems ranging from small (a few classes) to large (thousands of classes). We report the literals’ types (number, string, Boolean, …), their grammatical function (e.g., argument in a call, operand in an expression, value assigned, …), or the purpose of the code in which they appear (test methods, regular code). Third, we report on another study involving 26 programmers who analyzed about 24,000 literals, to understand which ones they consider magic. Finally, we evaluate the hypotheses defining specific conditions under which literals are acceptable.\n"
      },
      "after": "6161048b6088627a",
      "date": 1660544215103
    },
    {
      "type": "edit",
      "id": "89694284c6628dc4",
      "item": {
        "type": "paragraph",
        "id": "89694284c6628dc4",
        "text": "Some literals directly refer to the data that they hold. For example, the Booleans (true and false), the empty pointer (nil or null), the empty string, and in [[Smalltalk]] the empty arrays (#() and {}). Those literals are acceptable because the semantics is obvious upon reading."
      },
      "date": 1660544327073
    },
    {
      "type": "edit",
      "id": "89694284c6628dc4",
      "item": {
        "type": "paragraph",
        "id": "89694284c6628dc4",
        "text": "Some [[literals]] directly refer to the data that they hold. For example, the Booleans (true and false), the empty pointer (nil or null), the empty string, and in [[Smalltalk]] the empty arrays (#() and {}). Those literals are acceptable because the semantics is obvious upon reading."
      },
      "date": 1660544561514
    },
    {
      "type": "edit",
      "id": "89694284c6628dc4",
      "item": {
        "type": "paragraph",
        "id": "89694284c6628dc4",
        "text": "Some [[Literals]] directly refer to the data that they hold. For example, the Booleans (true and false), the empty pointer (nil or null), the empty string, and in [[Smalltalk]] the empty arrays (#() and {}). Those literals are acceptable because the semantics is obvious upon reading."
      },
      "date": 1660544574924
    },
    {
      "type": "fork",
      "date": 1660544708577
    },
    {
      "id": "15edddf5bd29cd98",
      "type": "remove",
      "date": 1660544782862
    },
    {
      "id": "55f87c1fc159de72",
      "type": "remove",
      "date": 1660544784987
    },
    {
      "id": "6161048b6088627a",
      "type": "remove",
      "date": 1660544787440
    },
    {
      "id": "5c5f14a5c52fe544",
      "type": "remove",
      "date": 1660544789634
    },
    {
      "id": "f026fe6378945933",
      "type": "remove",
      "date": 1660544883032
    },
    {
      "id": "1163981670bbe3aa",
      "type": "remove",
      "date": 1660544885879
    },
    {
      "item": {
        "type": "factory",
        "id": "be682eeb4bd10946"
      },
      "id": "be682eeb4bd10946",
      "type": "add",
      "after": "73c194fe934b7565",
      "date": 1660544924346
    },
    {
      "type": "edit",
      "id": "be682eeb4bd10946",
      "item": {
        "type": "paragraph",
        "id": "be682eeb4bd10946",
        "text": "[[What do developers consider magic literals?]] A smalltalk perspective. [https://www.sciencedirect.com/science/article/pii/S0950584922000908?casa_token=8PLOCyM4bbwAAAAA:KzeWOrHiEjM3KU2dvCFTXGnYcWRe-gjyRuWY0OdPQTOLasi7kqWDJwTaVCioRVhWDjFtQv7Ar1A page]"
      },
      "date": 1660544925857
    },
    {
      "type": "edit",
      "id": "be682eeb4bd10946",
      "item": {
        "type": "paragraph",
        "id": "be682eeb4bd10946",
        "text": "[[What do developers consider magic literals?]] A Smalltalk perspective. [https://www.sciencedirect.com/science/article/pii/S0950584922000908?casa_token=8PLOCyM4bbwAAAAA:KzeWOrHiEjM3KU2dvCFTXGnYcWRe-gjyRuWY0OdPQTOLasi7kqWDJwTaVCioRVhWDjFtQv7Ar1A page]"
      },
      "date": 1660544935310
    },
    {
      "type": "fork",
      "date": 1660545001178
    }
  ]
}