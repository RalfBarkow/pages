{
  "title": "Perform PDF Malware Analysis",
  "story": [
    {
      "type": "paragraph",
      "id": "e0b860dc45d9e860",
      "text": "https://security.stackexchange.com/questions/2896/how-to-scan-a-pdf-for-malware"
    },
    {
      "type": "markdown",
      "id": "31842204b4989bff",
      "text": "[[Didier Stevens]] has provided two open-source, Python-based scripts to perform PDF malware analysis. There are a few others that I will also highlight.\n\nThe primary ones you want to run first are PDFiD (available another with Didier's other PDF Tools) and Pyew.\n\nHere is an article on how to run pdfid.py and see the expected results; Here is another for pyew.\n\nFinally, after identifying possible JS, Javascript, AA, OpenAction, and AcroForms -- you will want to dump those objects, filter the Javascript, and produce a raw output. This is possible with pdf-parser.py.\n\nAdditionally, Brandon Dixon maintains some extremely elite blog posts on his research with PDF malware, including a post about scoring PDFs based on malicious filters just like you describe."
    },
    {
      "type": "pagefold",
      "id": "c1119f38432e3985",
      "text": "Analyzing a Malicious PDF File"
    },
    {
      "type": "video",
      "id": "0a1179d9196bf993",
      "text": "YOUTUBE tHVi2wKCkTc"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Perform PDF Malware Analysis",
        "story": []
      },
      "date": 1635919661721
    },
    {
      "item": {
        "type": "factory",
        "id": "e0b860dc45d9e860"
      },
      "id": "e0b860dc45d9e860",
      "type": "add",
      "date": 1635919668113
    },
    {
      "type": "edit",
      "id": "e0b860dc45d9e860",
      "item": {
        "type": "paragraph",
        "id": "e0b860dc45d9e860",
        "text": "https://security.stackexchange.com/questions/2896/how-to-scan-a-pdf-for-malware"
      },
      "date": 1635919671860
    },
    {
      "item": {
        "type": "factory",
        "id": "2794675d6967c031"
      },
      "id": "2794675d6967c031",
      "type": "add",
      "after": "e0b860dc45d9e860",
      "date": 1635919693467
    },
    {
      "type": "remove",
      "id": "2794675d6967c031",
      "date": 1635919694582
    },
    {
      "item": {
        "type": "factory",
        "id": "31842204b4989bff"
      },
      "id": "31842204b4989bff",
      "type": "add",
      "after": "e0b860dc45d9e860",
      "date": 1635919695339
    },
    {
      "type": "edit",
      "id": "31842204b4989bff",
      "item": {
        "type": "markdown",
        "id": "31842204b4989bff",
        "text": "Didier Stevens has provided two open-source, Python-based scripts to perform PDF malware analysis. There are a few others that I will also highlight.\n\nThe primary ones you want to run first are PDFiD (available another with Didier's other PDF Tools) and Pyew.\n\nHere is an article on how to run pdfid.py and see the expected results; Here is another for pyew.\n\nFinally, after identifying possible JS, Javascript, AA, OpenAction, and AcroForms -- you will want to dump those objects, filter the Javascript, and produce a raw output. This is possible with pdf-parser.py.\n\nAdditionally, Brandon Dixon maintains some extremely elite blog posts on his research with PDF malware, including a post about scoring PDFs based on malicious filters just like you describe."
      },
      "date": 1635919697241
    },
    {
      "type": "edit",
      "id": "31842204b4989bff",
      "item": {
        "type": "markdown",
        "id": "31842204b4989bff",
        "text": "[[Didier Stevens]] has provided two open-source, Python-based scripts to perform PDF malware analysis. There are a few others that I will also highlight.\n\nThe primary ones you want to run first are PDFiD (available another with Didier's other PDF Tools) and Pyew.\n\nHere is an article on how to run pdfid.py and see the expected results; Here is another for pyew.\n\nFinally, after identifying possible JS, Javascript, AA, OpenAction, and AcroForms -- you will want to dump those objects, filter the Javascript, and produce a raw output. This is possible with pdf-parser.py.\n\nAdditionally, Brandon Dixon maintains some extremely elite blog posts on his research with PDF malware, including a post about scoring PDFs based on malicious filters just like you describe."
      },
      "date": 1635919707103
    },
    {
      "item": {
        "type": "factory",
        "id": "c1119f38432e3985"
      },
      "id": "c1119f38432e3985",
      "type": "add",
      "after": "31842204b4989bff",
      "date": 1635919922300
    },
    {
      "item": {
        "type": "factory",
        "id": "0a1179d9196bf993"
      },
      "id": "0a1179d9196bf993",
      "type": "add",
      "after": "c1119f38432e3985",
      "date": 1635919942178
    },
    {
      "type": "edit",
      "id": "c1119f38432e3985",
      "item": {
        "type": "pagefold",
        "id": "c1119f38432e3985",
        "text": "Analyzing a Malicious PDF File"
      },
      "date": 1635919944838
    },
    {
      "type": "edit",
      "id": "0a1179d9196bf993",
      "item": {
        "type": "video",
        "id": "0a1179d9196bf993",
        "text": "YOUTUBE tHVi2wKCkTc"
      },
      "date": 1635919953758
    }
  ]
}