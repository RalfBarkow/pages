{
  "title": "Stepwise Refinement",
  "story": [
    {
      "type": "html",
      "text": "Shame on you all that I had to add this page on 7th March 2003!",
      "id": "958695558b90c2d76fd9794f9c5ae690"
    },
    {
      "type": "html",
      "text": " <i>The [[Wiki Is Nota Dictionary]] crowd probably prevented it earlier.</i>",
      "id": "51e30c4595abe4dc154eb0cd3d8c6d6e"
    },
    {
      "type": "html",
      "text": "\n[[Stepwise Refinement]] is a relatively old technique of [[Software Design]] that has been successfully used in a wide range of [[Structured Programming]] and [[Modular Programming]] environments and languages. It is the procedural (step-by-step) form of [[Separation Of Concerns]] and has what some may call a fractal nature of task division.",
      "id": "822c70797be164b796b4f9bd72146035"
    },
    {
      "type": "html",
      "text": "\nThe principle of [[Stepwise Refinement]] kind of tries to roll-up [[You Arent Gonna Need It]] and [[Keep It Simple]] in one and most programmers (at least the [[Good Programmer]]s I've encountered) tend to use [[Stepwise Refinement]] intuitively.",
      "id": "01ccf98e0f53686de7059234bae77253"
    },
    {
      "type": "html",
      "text": "\nThe software design is approached as being a series of layers of modules of decreasing abstraction with call flows typically forming hierarchies through the modules. You start by identifying the top of the hierarchy (essentially main() or do_stuff()) and then apply [[Top Down]] design to work out the next set of modules that need to be built/written.",
      "id": "8a7d452c50934d264aaa4011602e9ea8"
    },
    {
      "type": "html",
      "text": "\n[[Stepwise Refinement]] can (and often is) also applied even down to the function level in languages such as [[Cee Language]].",
      "id": "c5acbb8e460b092f2d2b31eba1ab0b28"
    },
    {
      "type": "html",
      "text": "\nFor example, the top level might be the function main(). The [[Software Engineer]] decides that main needs to call foo() and bar(), so she writes the function main() to call foo() and bar() but leaves foo() and bar() stubbed out with printf's. She then runs her [[Unit Test]]s and confirms that foo() and bar() are called correctly i.e. we get printfs coming out where expected, so main() works. She then implements foo() which is straightforward, and runs the [[Unit Test]]s once more to verify that both main() and foo() operate together correctly. She then goes back to look at bar() but realizes that bar() needs another lower level function, baz() to work. So, she implements bar() to call baz() but again just leaves baz() stubbed out. Once more the [[Unit Test]]s are run to confirm that the software works correctly. The final stage is then to implement baz() and finished checking the software with the [[Unit Test]]s.",
      "id": "9ab2343fb05fac2868b8241690e2a3fb"
    },
    {
      "type": "html",
      "text": "\nThe advantage of [[Stepwise Refinement]] is that it allows for [[Incremental Development]] but on a much finer level of granularity. A little bit like [[Barry Boehm]]<b></b>'s [[Spiral Model]]. It also uses [[Unit Test]]s as an integral feature of the development process. The software is also rapidly built as [[Stepwise Refinement]] lends itself naturally to producing working (and tested) prototypes of the software as it develops, and it is often possible to build prototypes in remarkably short periods of time as you can apply YAGNI pretty much down to the function level. [[Stepwise Refinement]] is highly scalable, as large systems can be developed in a structured and predictable fashion from it. ",
      "id": "a11ca8347b743da994c166399ab4e2a7"
    },
    {
      "type": "html",
      "text": "\nThe downside is that [[Stepwise Refinement]] is open to interpretation of precisely what abstraction functions are required at the higher levels. This generates a tendency towards an architecture that has one larger high-level module with several smaller \"worker\" modules below it. That is, the hierarchy tends to grow across rather than down (which is the intention). ",
      "id": "a49e844343f1aad02690ac04784e6e1b"
    },
    {
      "type": "html",
      "text": "\nI'd be interested to hear anyone else's thoughts on this. Having been programming [[Cee Language]] for a few years now (after being a [[Java Language]] and [[Object Oriented]] person for 2 years) I have become quite fond of [[Stepwise Refinement]] and really do wonder how people program without it, especially when using [[Structured Programming]] languages.",
      "id": "ebf02c3a087588ec6d9a95ecd2d22b78"
    },
    {
      "type": "html",
      "text": "\nIf you feel the need, [[Please Comment]].",
      "id": "9d98f69ba506813e21164917061d110f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7beafce0bc843488a00de4a6453c9093"
    },
    {
      "type": "html",
      "text": "Example:",
      "id": "adb9d9ed30737c1a3b257115a900d9bc"
    },
    {
      "type": "html",
      "text": " Brush Teeth",
      "id": "90ad5fd847f8d8b5f55884401d45b87d"
    },
    {
      "type": "html",
      "text": " find toothbrush",
      "id": "bcde3cde010646fc175b02aac99f91c8"
    },
    {
      "type": "html",
      "text": " find toothpaste tube",
      "id": "bdf87bd5f18aaaf4ef8baf6b4493d7bb"
    },
    {
      "type": "html",
      "text": " open toothpaste tube",
      "id": "60c342eae1c5c61ba14cac16fbb7ba36"
    },
    {
      "type": "html",
      "text": " Put thumb and pointer finger on cap ",
      "id": "146d5a4b939678b9336fba09f0f375ff"
    },
    {
      "type": "html",
      "text": " turn fingers counter-clockwise",
      "id": "c74dcf2a8c5433b4f428f88abd17f34c"
    },
    {
      "type": "html",
      "text": " repeat prior step until cap falls off",
      "id": "8c8f3f7bef12babd013485cade677f8d"
    },
    {
      "type": "html",
      "text": " squeeze tube onto toothbrush",
      "id": "3d6a117d62bf060ab774c6e60ced3998"
    },
    {
      "type": "html",
      "text": " (details omitted)",
      "id": "c2acc3a7ee6e1f8f72b2fc11560e12c1"
    },
    {
      "type": "html",
      "text": " clean teeth ",
      "id": "649b81b139fc96dd21d7005c0af85fc3"
    },
    {
      "type": "html",
      "text": " put brush on teeth",
      "id": "a5ea9aa687593e2fb653fc6ef31376ac"
    },
    {
      "type": "html",
      "text": " move back and fourth vigorously",
      "id": "bc5cc05dfd8da1f60f399030388f9483"
    },
    {
      "type": "html",
      "text": " repeat above step 100 times",
      "id": "1cd435abfdbfcb6d344b41ba93529ab7"
    },
    {
      "type": "html",
      "text": " clean up",
      "id": "c0ebc4b6fa0904cb5f75d56481a251c3"
    },
    {
      "type": "html",
      "text": " rinse brush",
      "id": "dfff626e5efce666c371ca36ccb37641"
    },
    {
      "type": "html",
      "text": " turn on water",
      "id": "83bd2ce573fe004b9aa63684133fc6e5"
    },
    {
      "type": "html",
      "text": " put head of brush under running water for 30 seconds",
      "id": "a236bbe18e530dfc26c9694a4033d7cb"
    },
    {
      "type": "html",
      "text": " turn off water",
      "id": "bc8f7555080b911c32c45aa8a8d04446"
    },
    {
      "type": "html",
      "text": " put cap back on toothpaste",
      "id": "4abf1f655d9759cdeaebe476166bba4f"
    },
    {
      "type": "html",
      "text": " put all items back in cabinet",
      "id": "26ff3f95f165fb8315a476c219969713"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7beafce0bc843488a00de4a6453c9093"
    },
    {
      "type": "html",
      "text": "\nUnfortunately, [[Stepwise Refinement]] often leads to a solution where each module represents one part of the task in chronological terms, which can lead to multiple modules knowing the details of some data structures. See [[David Parnas]]' wonderful paper [[On Decomposing Systems]] for examples of different ways to decompose a system, some of which are more robust against changes in data representation.",
      "id": "71d448c6c1bc83e4b5bdb553e5f72609"
    },
    {
      "type": "html",
      "text": "<i>I don't see wrapping data structures and [[Stepwise Refinement]] to be mutually exclusive. [[David Parnas]] paper is flawed in some ways.</i>",
      "id": "2ad84c2d281810a7d8a063dc3a6b21de"
    },
    {
      "type": "html",
      "text": "\nThey aren't, but it takes care to do both at the same time. The point is that it's very easy to think of the \"steps\" in [[Stepwise Refinement]] as being \"steps to solve the problem\", which tend to be chronological. For example, if the above \"brushing your teeth\" system were implemented naively, it would be natural to have subroutines for each line, called by the next higher level and calling the ones at the next lower level, all of which have knowledge of the \"toothbrush\" and \"toothpaste\" data structures.",
      "id": "63772a1502173b0ca2fae4100c751cb4"
    },
    {
      "type": "html",
      "text": "<i>Please explain \"which have knowledge\"? Perhaps this is related to [[Database Not More Global Than Classes]].</i>",
      "id": "51528a92cb6dd9b17347bc9192c3b087"
    },
    {
      "type": "html",
      "text": "<i>As far as <b>subroutines</b>, yes in practice one often does such. The above illustrates the design dividing process, not the coding and repetition factoring.</i>",
      "id": "be6d14eedc8695c8a16c24bb643242b4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7beafce0bc843488a00de4a6453c9093"
    },
    {
      "type": "html",
      "text": "<b>Stepwise Refinement and Deviation Management</b>",
      "id": "b7db510d84753feec78bd1b44935e618"
    },
    {
      "type": "html",
      "text": "\"Dealing with Deviations from Framework\" under [[Helpers Instead Of Wrappers]] illustrates how to use the levels to go lower into the [[Stepwise Refinement]] tree to \"override\" behavior for custom exceptions-to-the-rule, but still potentially use some of the existing branches. -t",
      "id": "078ae2011c1e3b0ad246c32e415153d6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7beafce0bc843488a00de4a6453c9093"
    },
    {
      "type": "html",
      "text": "See also: [[Procedural Methodologies]], [[Abstract Syntax Tree]], [[Western Reductionism]]. [[Second Effort]]",
      "id": "50bc5e404bb121f3841fb5cb2a0f52f9"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?StepwiseRefinement c2.com]",
      "id": "32ddd55ed13c8a8ab5b61f882441000c"
    }
  ],
  "journal": [
    {
      "date": 1416848332000,
      "id": "c8f18d5821acd9863f3cee17711d5c5f",
      "type": "create",
      "item": {
        "title": "Stepwise Refinement",
        "story": [
          {
            "type": "html",
            "text": "Shame on you all that I had to add this page on 7th March 2003!",
            "id": "958695558b90c2d76fd9794f9c5ae690"
          },
          {
            "type": "html",
            "text": " <i>The [[Wiki Is Nota Dictionary]] crowd probably prevented it earlier.</i>",
            "id": "51e30c4595abe4dc154eb0cd3d8c6d6e"
          },
          {
            "type": "html",
            "text": "\n[[Stepwise Refinement]] is a relatively old technique of [[Software Design]] that has been successfully used in a wide range of [[Structured Programming]] and [[Modular Programming]] environments and languages. It is the procedural (step-by-step) form of [[Separation Of Concerns]] and has what some may call a fractal nature of task division.",
            "id": "822c70797be164b796b4f9bd72146035"
          },
          {
            "type": "html",
            "text": "\nThe principle of [[Stepwise Refinement]] kind of tries to roll-up [[You Arent Gonna Need It]] and [[Keep It Simple]] in one and most programmers (at least the [[Good Programmer]]s I've encountered) tend to use [[Stepwise Refinement]] intuitively.",
            "id": "01ccf98e0f53686de7059234bae77253"
          },
          {
            "type": "html",
            "text": "\nThe software design is approached as being a series of layers of modules of decreasing abstraction with call flows typically forming hierarchies through the modules. You start by identifying the top of the hierarchy (essentially main() or do_stuff()) and then apply [[Top Down]] design to work out the next set of modules that need to be built/written.",
            "id": "8a7d452c50934d264aaa4011602e9ea8"
          },
          {
            "type": "html",
            "text": "\n[[Stepwise Refinement]] can (and often is) also applied even down to the function level in languages such as [[Cee Language]].",
            "id": "c5acbb8e460b092f2d2b31eba1ab0b28"
          },
          {
            "type": "html",
            "text": "\nFor example, the top level might be the function main(). The [[Software Engineer]] decides that main needs to call foo() and bar(), so she writes the function main() to call foo() and bar() but leaves foo() and bar() stubbed out with printf's. She then runs her [[Unit Test]]s and confirms that foo() and bar() are called correctly i.e. we get printfs coming out where expected, so main() works. She then implements foo() which is straightforward, and runs the [[Unit Test]]s once more to verify that both main() and foo() operate together correctly. She then goes back to look at bar() but realizes that bar() needs another lower level function, baz() to work. So, she implements bar() to call baz() but again just leaves baz() stubbed out. Once more the [[Unit Test]]s are run to confirm that the software works correctly. The final stage is then to implement baz() and finished checking the software with the [[Unit Test]]s.",
            "id": "9ab2343fb05fac2868b8241690e2a3fb"
          },
          {
            "type": "html",
            "text": "\nThe advantage of [[Stepwise Refinement]] is that it allows for [[Incremental Development]] but on a much finer level of granularity. A little bit like [[Barry Boehm]]<b></b>'s [[Spiral Model]]. It also uses [[Unit Test]]s as an integral feature of the development process. The software is also rapidly built as [[Stepwise Refinement]] lends itself naturally to producing working (and tested) prototypes of the software as it develops, and it is often possible to build prototypes in remarkably short periods of time as you can apply YAGNI pretty much down to the function level. [[Stepwise Refinement]] is highly scalable, as large systems can be developed in a structured and predictable fashion from it. ",
            "id": "a11ca8347b743da994c166399ab4e2a7"
          },
          {
            "type": "html",
            "text": "\nThe downside is that [[Stepwise Refinement]] is open to interpretation of precisely what abstraction functions are required at the higher levels. This generates a tendency towards an architecture that has one larger high-level module with several smaller \"worker\" modules below it. That is, the hierarchy tends to grow across rather than down (which is the intention). ",
            "id": "a49e844343f1aad02690ac04784e6e1b"
          },
          {
            "type": "html",
            "text": "\nI'd be interested to hear anyone else's thoughts on this. Having been programming [[Cee Language]] for a few years now (after being a [[Java Language]] and [[Object Oriented]] person for 2 years) I have become quite fond of [[Stepwise Refinement]] and really do wonder how people program without it, especially when using [[Structured Programming]] languages.",
            "id": "ebf02c3a087588ec6d9a95ecd2d22b78"
          },
          {
            "type": "html",
            "text": "\nIf you feel the need, [[Please Comment]].",
            "id": "9d98f69ba506813e21164917061d110f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7beafce0bc843488a00de4a6453c9093"
          },
          {
            "type": "html",
            "text": "Example:",
            "id": "adb9d9ed30737c1a3b257115a900d9bc"
          },
          {
            "type": "html",
            "text": " Brush Teeth",
            "id": "90ad5fd847f8d8b5f55884401d45b87d"
          },
          {
            "type": "html",
            "text": " find toothbrush",
            "id": "bcde3cde010646fc175b02aac99f91c8"
          },
          {
            "type": "html",
            "text": " find toothpaste tube",
            "id": "bdf87bd5f18aaaf4ef8baf6b4493d7bb"
          },
          {
            "type": "html",
            "text": " open toothpaste tube",
            "id": "60c342eae1c5c61ba14cac16fbb7ba36"
          },
          {
            "type": "html",
            "text": " Put thumb and pointer finger on cap ",
            "id": "146d5a4b939678b9336fba09f0f375ff"
          },
          {
            "type": "html",
            "text": " turn fingers counter-clockwise",
            "id": "c74dcf2a8c5433b4f428f88abd17f34c"
          },
          {
            "type": "html",
            "text": " repeat prior step until cap falls off",
            "id": "8c8f3f7bef12babd013485cade677f8d"
          },
          {
            "type": "html",
            "text": " squeeze tube onto toothbrush",
            "id": "3d6a117d62bf060ab774c6e60ced3998"
          },
          {
            "type": "html",
            "text": " (details omitted)",
            "id": "c2acc3a7ee6e1f8f72b2fc11560e12c1"
          },
          {
            "type": "html",
            "text": " clean teeth ",
            "id": "649b81b139fc96dd21d7005c0af85fc3"
          },
          {
            "type": "html",
            "text": " put brush on teeth",
            "id": "a5ea9aa687593e2fb653fc6ef31376ac"
          },
          {
            "type": "html",
            "text": " move back and fourth vigorously",
            "id": "bc5cc05dfd8da1f60f399030388f9483"
          },
          {
            "type": "html",
            "text": " repeat above step 100 times",
            "id": "1cd435abfdbfcb6d344b41ba93529ab7"
          },
          {
            "type": "html",
            "text": " clean up",
            "id": "c0ebc4b6fa0904cb5f75d56481a251c3"
          },
          {
            "type": "html",
            "text": " rinse brush",
            "id": "dfff626e5efce666c371ca36ccb37641"
          },
          {
            "type": "html",
            "text": " turn on water",
            "id": "83bd2ce573fe004b9aa63684133fc6e5"
          },
          {
            "type": "html",
            "text": " put head of brush under running water for 30 seconds",
            "id": "a236bbe18e530dfc26c9694a4033d7cb"
          },
          {
            "type": "html",
            "text": " turn off water",
            "id": "bc8f7555080b911c32c45aa8a8d04446"
          },
          {
            "type": "html",
            "text": " put cap back on toothpaste",
            "id": "4abf1f655d9759cdeaebe476166bba4f"
          },
          {
            "type": "html",
            "text": " put all items back in cabinet",
            "id": "26ff3f95f165fb8315a476c219969713"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7beafce0bc843488a00de4a6453c9093"
          },
          {
            "type": "html",
            "text": "\nUnfortunately, [[Stepwise Refinement]] often leads to a solution where each module represents one part of the task in chronological terms, which can lead to multiple modules knowing the details of some data structures. See [[David Parnas]]' wonderful paper [[On Decomposing Systems]] for examples of different ways to decompose a system, some of which are more robust against changes in data representation.",
            "id": "71d448c6c1bc83e4b5bdb553e5f72609"
          },
          {
            "type": "html",
            "text": "<i>I don't see wrapping data structures and [[Stepwise Refinement]] to be mutually exclusive. [[David Parnas]] paper is flawed in some ways.</i>",
            "id": "2ad84c2d281810a7d8a063dc3a6b21de"
          },
          {
            "type": "html",
            "text": "\nThey aren't, but it takes care to do both at the same time. The point is that it's very easy to think of the \"steps\" in [[Stepwise Refinement]] as being \"steps to solve the problem\", which tend to be chronological. For example, if the above \"brushing your teeth\" system were implemented naively, it would be natural to have subroutines for each line, called by the next higher level and calling the ones at the next lower level, all of which have knowledge of the \"toothbrush\" and \"toothpaste\" data structures.",
            "id": "63772a1502173b0ca2fae4100c751cb4"
          },
          {
            "type": "html",
            "text": "<i>Please explain \"which have knowledge\"? Perhaps this is related to [[Database Not More Global Than Classes]].</i>",
            "id": "51528a92cb6dd9b17347bc9192c3b087"
          },
          {
            "type": "html",
            "text": "<i>As far as <b>subroutines</b>, yes in practice one often does such. The above illustrates the design dividing process, not the coding and repetition factoring.</i>",
            "id": "be6d14eedc8695c8a16c24bb643242b4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7beafce0bc843488a00de4a6453c9093"
          },
          {
            "type": "html",
            "text": "<b>Stepwise Refinement and Deviation Management</b>",
            "id": "b7db510d84753feec78bd1b44935e618"
          },
          {
            "type": "html",
            "text": "\"Dealing with Deviations from Framework\" under [[Helpers Instead Of Wrappers]] illustrates how to use the levels to go lower into the [[Stepwise Refinement]] tree to \"override\" behavior for custom exceptions-to-the-rule, but still potentially use some of the existing branches. -t",
            "id": "078ae2011c1e3b0ad246c32e415153d6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7beafce0bc843488a00de4a6453c9093"
          },
          {
            "type": "html",
            "text": "See also: [[Procedural Methodologies]], [[Abstract Syntax Tree]], [[Western Reductionism]]. [[Second Effort]]",
            "id": "50bc5e404bb121f3841fb5cb2a0f52f9"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?StepwiseRefinement c2.com]",
            "id": "32ddd55ed13c8a8ab5b61f882441000c"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1699871174634
    }
  ]
}