{
  "title": "2023-03-03",
  "story": [
    {
      "type": "paragraph",
      "id": "13f44f2e81dfbcc7",
      "text": "⇒ [[No Final Page]] ⇒ [[Second-Order Observation]] ⇒ [[You and Your Profile]] ⇒ [[Murmurations]]"
    },
    {
      "type": "graphviz",
      "id": "a1f6c6a56e46490b",
      "text": "DOT FROM lambda-browsing"
    },
    {
      "type": "paragraph",
      "id": "e145ea19139c2276",
      "text": "⇒ [[Formal Structure]] ⇒ [[Episodes]] ⇒ [[Episodes Pattern Language]] ⇒ [[Multi-Computational Paradigm]]"
    },
    {
      "type": "paragraph",
      "id": "b4f93c59fe664bfb",
      "text": "⇒ [[Xiaoyao You]]"
    },
    {
      "type": "paragraph",
      "id": "17178ebb1ce893df",
      "text": "XiaoYaoYou (using Pinyin romanization) 逍遥游 "
    },
    {
      "type": "paragraph",
      "id": "f632a216504ec02b",
      "text": "《莊子·逍遙遊》"
    },
    {
      "type": "paragraph",
      "id": "14411a383ca70b04",
      "text": "⇒ [[Graph of Causal Relationships]]"
    },
    {
      "type": "paragraph",
      "id": "cda3d212b941dd14",
      "text": "Updating Process for String Substitution Systems"
    },
    {
      "type": "paragraph",
      "id": "ac983393b2177cae",
      "text": "Wolfram Multiway Systems implemented in JavaScript"
    },
    {
      "type": "pagefold",
      "id": "56e3f2557d09035d",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "1314e5f68f5b2a7b",
      "text": "There are a few resources available for implementing Wolfram Multiway Systems in JavaScript. Here are some options:\n\n"
    },
    {
      "type": "paragraph",
      "id": "0ecf5ec4c21704d0",
      "text": "The Wolfram Language includes built-in functionality for multiway systems, and it can be used in the Wolfram Cloud or the desktop version of Mathematica. You can create and manipulate multiway systems using the Wolfram Language and then export them to JavaScript using the \"CloudExport\" function. Here's an example of how to do this:\ncss\nCopy code\nsystem = MultiwaySystem[{0, 1, 0, 1}, 2];\nCloudExport[system, \"JavaScript\"]\nThis will generate JavaScript code that you can embed in your website or run in a browser console.\n"
    },
    {
      "type": "paragraph",
      "id": "e0ef4c8093325cc3",
      "text": "Another option is to use the NKS.js library, which is a JavaScript implementation of the Wolfram Language's NKS (New Kind of Science) features. This library includes functionality for creating and visualizing multiway systems, as well as other types of cellular automata and computational systems. You can find the library and documentation here: https://github.com/inconvergent/nksjs\n"
    },
    {
      "type": "paragraph",
      "id": "78f3f2c3a2436c20",
      "text": "If you want to implement multiway systems from scratch, you can use basic JavaScript and canvas or SVG graphics to create a visualization. Multiway systems are based on rewriting rules, so you'll need to define the rules and apply them to an initial state of the system. Here's an example of how to create a simple multiway system in JavaScript: […]"
    },
    {
      "type": "paragraph",
      "id": "392aa4e9fd00e923",
      "text": "This code creates a simple multiway system with 8 possible states (0 or 1 for each of the 3 cells), and generates the next state by applying the rules defined in the \"rules\" object. It then draws the first 100 states on a canvas. You can modify the rules and initial state to create different types of systems."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-03-03",
        "story": []
      },
      "date": 1677841523172
    },
    {
      "item": {
        "type": "factory",
        "id": "13f44f2e81dfbcc7"
      },
      "id": "13f44f2e81dfbcc7",
      "type": "add",
      "date": 1677841545832
    },
    {
      "type": "edit",
      "id": "13f44f2e81dfbcc7",
      "item": {
        "type": "paragraph",
        "id": "13f44f2e81dfbcc7",
        "text": "⇒ [[No Final Page]]"
      },
      "date": 1677841556813
    },
    {
      "type": "edit",
      "id": "13f44f2e81dfbcc7",
      "item": {
        "type": "paragraph",
        "id": "13f44f2e81dfbcc7",
        "text": "⇒ [[No Final Page]] ⇒ [[Second-Order Observation]]"
      },
      "date": 1677841574801
    },
    {
      "type": "edit",
      "id": "13f44f2e81dfbcc7",
      "item": {
        "type": "paragraph",
        "id": "13f44f2e81dfbcc7",
        "text": "⇒ [[No Final Page]] ⇒ [[Second-Order Observation]] ⇒ [[You and Your Profile]]"
      },
      "date": 1677841594672
    },
    {
      "type": "edit",
      "id": "13f44f2e81dfbcc7",
      "item": {
        "type": "paragraph",
        "id": "13f44f2e81dfbcc7",
        "text": "⇒ [[No Final Page]] ⇒ [[Second-Order Observation]] ⇒ [[You and Your Profile]] ⇒ [[Murmurations]]"
      },
      "date": 1677841624180
    },
    {
      "item": {
        "type": "factory",
        "id": "a1f6c6a56e46490b"
      },
      "id": "a1f6c6a56e46490b",
      "type": "add",
      "after": "13f44f2e81dfbcc7",
      "date": 1677841629805
    },
    {
      "type": "edit",
      "id": "a1f6c6a56e46490b",
      "item": {
        "type": "graphviz",
        "id": "a1f6c6a56e46490b",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1677841636276
    },
    {
      "item": {
        "type": "factory",
        "id": "e145ea19139c2276"
      },
      "id": "e145ea19139c2276",
      "type": "add",
      "after": "a1f6c6a56e46490b",
      "date": 1677841652267
    },
    {
      "type": "edit",
      "id": "e145ea19139c2276",
      "item": {
        "type": "paragraph",
        "id": "e145ea19139c2276",
        "text": "⇒ [[Formal Structure]] ⇒ [[Episodes]]"
      },
      "date": 1677841674575
    },
    {
      "type": "edit",
      "id": "e145ea19139c2276",
      "item": {
        "type": "paragraph",
        "id": "e145ea19139c2276",
        "text": "⇒ [[Formal Structure]] ⇒ [[Episodes]] ⇒ [[Episodes Pattern Language]]"
      },
      "date": 1677841704464
    },
    {
      "type": "edit",
      "id": "e145ea19139c2276",
      "item": {
        "type": "paragraph",
        "id": "e145ea19139c2276",
        "text": "⇒ [[Formal Structure]] ⇒ [[Episodes]] ⇒ [[Episodes Pattern Language]] multi-computational paradigm"
      },
      "date": 1677841821579
    },
    {
      "type": "edit",
      "id": "e145ea19139c2276",
      "item": {
        "type": "paragraph",
        "id": "e145ea19139c2276",
        "text": "⇒ [[Formal Structure]] ⇒ [[Episodes]] ⇒ [[Episodes Pattern Language]] ⇒ [[Multi-Computational Paradigm]]"
      },
      "date": 1677841861730
    },
    {
      "item": {
        "type": "factory",
        "id": "4becb74e74028b7e"
      },
      "id": "4becb74e74028b7e",
      "type": "add",
      "after": "e145ea19139c2276",
      "date": 1677844298733
    },
    {
      "type": "remove",
      "id": "4becb74e74028b7e",
      "date": 1677844304525
    },
    {
      "type": "add",
      "id": "905d17bb0f0a4a73",
      "item": {
        "type": "paragraph",
        "id": "905d17bb0f0a4a73",
        "text": "you ⑨"
      },
      "after": "e145ea19139c2276",
      "date": 1677844317448
    },
    {
      "type": "edit",
      "id": "905d17bb0f0a4a73",
      "item": {
        "type": "paragraph",
        "id": "905d17bb0f0a4a73",
        "text": "Daoist term for social and psychological ease is you ⑨ (pronounced “yo”"
      },
      "date": 1677844334643
    },
    {
      "type": "add",
      "id": "f632a216504ec02b",
      "item": {
        "type": "paragraph",
        "id": "f632a216504ec02b",
        "text": "《莊子·逍遙遊》"
      },
      "after": "905d17bb0f0a4a73",
      "date": 1677844507488
    },
    {
      "item": {
        "type": "factory",
        "id": "cda3d212b941dd14"
      },
      "id": "cda3d212b941dd14",
      "type": "add",
      "after": "f632a216504ec02b",
      "date": 1677855726470
    },
    {
      "type": "edit",
      "id": "cda3d212b941dd14",
      "item": {
        "type": "paragraph",
        "id": "cda3d212b941dd14",
        "text": "Updating Process for String Substitution Systems"
      },
      "date": 1677855732565
    },
    {
      "item": {
        "type": "factory",
        "id": "14411a383ca70b04"
      },
      "id": "14411a383ca70b04",
      "type": "add",
      "after": "cda3d212b941dd14",
      "date": 1677855758577
    },
    {
      "type": "edit",
      "id": "14411a383ca70b04",
      "item": {
        "type": "paragraph",
        "id": "14411a383ca70b04",
        "text": "Graph of Causal Relationships"
      },
      "date": 1677855760287
    },
    {
      "id": "14411a383ca70b04",
      "type": "move",
      "order": [
        "13f44f2e81dfbcc7",
        "a1f6c6a56e46490b",
        "e145ea19139c2276",
        "905d17bb0f0a4a73",
        "f632a216504ec02b",
        "14411a383ca70b04",
        "cda3d212b941dd14"
      ],
      "date": 1677855762257
    },
    {
      "type": "edit",
      "id": "14411a383ca70b04",
      "item": {
        "type": "paragraph",
        "id": "14411a383ca70b04",
        "text": "⇒ [[Graph of Causal Relationships]]"
      },
      "date": 1677855781294
    },
    {
      "item": {
        "type": "factory",
        "id": "ac983393b2177cae"
      },
      "id": "ac983393b2177cae",
      "type": "add",
      "after": "cda3d212b941dd14",
      "date": 1677858530848
    },
    {
      "item": {
        "type": "factory",
        "id": "56e3f2557d09035d"
      },
      "id": "56e3f2557d09035d",
      "type": "add",
      "after": "ac983393b2177cae",
      "date": 1677858535272
    },
    {
      "type": "edit",
      "id": "ac983393b2177cae",
      "item": {
        "type": "paragraph",
        "id": "ac983393b2177cae",
        "text": "Wolfram Multiway Systems implemented in JavaScript"
      },
      "date": 1677858536998
    },
    {
      "type": "edit",
      "id": "56e3f2557d09035d",
      "item": {
        "type": "pagefold",
        "id": "56e3f2557d09035d",
        "text": "chat.openai"
      },
      "date": 1677858541876
    },
    {
      "item": {
        "type": "factory",
        "id": "1314e5f68f5b2a7b"
      },
      "id": "1314e5f68f5b2a7b",
      "type": "add",
      "after": "56e3f2557d09035d",
      "date": 1677858561353
    },
    {
      "type": "edit",
      "id": "1314e5f68f5b2a7b",
      "item": {
        "type": "paragraph",
        "id": "1314e5f68f5b2a7b",
        "text": "There are a few resources available for implementing Wolfram Multiway Systems in JavaScript. Here are some options:\n\nThe Wolfram Language includes built-in functionality for multiway systems, and it can be used in the Wolfram Cloud or the desktop version of Mathematica. You can create and manipulate multiway systems using the Wolfram Language and then export them to JavaScript using the \"CloudExport\" function. Here's an example of how to do this:\ncss\nCopy code\nsystem = MultiwaySystem[{0, 1, 0, 1}, 2];\nCloudExport[system, \"JavaScript\"]\nThis will generate JavaScript code that you can embed in your website or run in a browser console.\nAnother option is to use the NKS.js library, which is a JavaScript implementation of the Wolfram Language's NKS (New Kind of Science) features. This library includes functionality for creating and visualizing multiway systems, as well as other types of cellular automata and computational systems. You can find the library and documentation here: https://github.com/inconvergent/nksjs\nIf you want to implement multiway systems from scratch, you can use basic JavaScript and canvas or SVG graphics to create a visualization. Multiway systems are based on rewriting rules, so you'll need to define the rules and apply them to an initial state of the system. Here's an example of how to create a simple multiway system in JavaScript:\njavascript\nCopy code\n// Define the rules\nconst rules = {\n  \"000\": \"0\",\n  \"001\": \"1\",\n  \"010\": \"1\",\n  \"011\": \"0\",\n  \"100\": \"1\",\n  \"101\": \"0\",\n  \"110\": \"0\",\n  \"111\": \"1\",\n};\n\n// Create an initial state\nlet state = \"00000000\";\n\n// Apply the rules to generate the next state\nfunction next(state) {\n  let next = \"\";\n  for (let i = 0; i < state.length - 2; i++) {\n    let pattern = state.slice(i, i + 3);\n    next += rules[pattern];\n  }\n  return next;\n}\n\n// Create a canvas and draw the states\nconst canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.fillStyle = \"black\";\nctx.fillRect(0, 0, canvas.width, canvas.height);\nctx.fillStyle = \"white\";\nctx.font = \"16px monospace\";\nfor (let i = 0; i < 100; i++) {\n  ctx.fillText(state, 10, (i + 1) * 20);\n  state = next(state);\n}\nThis code creates a simple multiway system with 8 possible states (0 or 1 for each of the 3 cells), and generates the next state by applying the rules defined in the \"rules\" object. It then draws the first 100 states on a canvas. You can modify the rules and initial state to create different types of systems."
      },
      "date": 1677858563607
    },
    {
      "type": "edit",
      "id": "1314e5f68f5b2a7b",
      "item": {
        "type": "paragraph",
        "id": "1314e5f68f5b2a7b",
        "text": "There are a few resources available for implementing Wolfram Multiway Systems in JavaScript. Here are some options:\n\nThe Wolfram Language includes built-in functionality for multiway systems, and it can be used in the Wolfram Cloud or the desktop version of Mathematica. You can create and manipulate multiway systems using the Wolfram Language and then export them to JavaScript using the \"CloudExport\" function. Here's an example of how to do this:\ncss\nCopy code\nsystem = MultiwaySystem[{0, 1, 0, 1}, 2];\nCloudExport[system, \"JavaScript\"]\nThis will generate JavaScript code that you can embed in your website or run in a browser console.\nAnother option is to use the NKS.js library, which is a JavaScript implementation of the Wolfram Language's NKS (New Kind of Science) features. This library includes functionality for creating and visualizing multiway systems, as well as other types of cellular automata and computational systems. You can find the library and documentation here: https://github.com/inconvergent/nksjs\nIf you want to implement multiway systems from scratch, you can use basic JavaScript and canvas or SVG graphics to create a visualization. Multiway systems are based on rewriting rules, so you'll need to define the rules and apply them to an initial state of the system. Here's an example of how to create a simple multiway system in JavaScript:\njavascript\nCopy code\n// Define the rules\nconst rules = {\n  \"000\": \"0\",\n  \"001\": \"1\",\n  \"010\": \"1\",\n  \"011\": \"0\",\n  \"100\": \"1\",\n  \"101\": \"0\",\n  \"110\": \"0\",\n  \"111\": \"1\",\n};\n\n// Create an initial state\nlet state = \"00000000\";\n\n// Apply the rules to generate the next state\nfunction next(state) {\n  let next = \"\";\n  for (let i = 0; i < state.length - 2; i++) {\n    let pattern = state.slice(i, i + 3);\n    next += rules[pattern];\n  }\n  return next;\n}\n\n// Create a canvas and draw the states\nconst canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.fillStyle = \"black\";\nctx.fillRect(0, 0, canvas.width, canvas.height);\nctx.fillStyle = \"white\";\nctx.font = \"16px monospace\";\nfor (let i = 0; i < 100; i++) {\n  ctx.fillText(state, 10, (i + 1) * 20);\n  state = next(state);\n}\n"
      },
      "date": 1677858586847
    },
    {
      "type": "add",
      "id": "392aa4e9fd00e923",
      "item": {
        "type": "paragraph",
        "id": "392aa4e9fd00e923",
        "text": "This code creates a simple multiway system with 8 possible states (0 or 1 for each of the 3 cells), and generates the next state by applying the rules defined in the \"rules\" object. It then draws the first 100 states on a canvas. You can modify the rules and initial state to create different types of systems."
      },
      "after": "1314e5f68f5b2a7b",
      "date": 1677858589825
    },
    {
      "type": "edit",
      "id": "1314e5f68f5b2a7b",
      "item": {
        "type": "paragraph",
        "id": "1314e5f68f5b2a7b",
        "text": "There are a few resources available for implementing Wolfram Multiway Systems in JavaScript. Here are some options:\n\nThe Wolfram Language includes built-in functionality for multiway systems, and it can be used in the Wolfram Cloud or the desktop version of Mathematica. You can create and manipulate multiway systems using the Wolfram Language and then export them to JavaScript using the \"CloudExport\" function. Here's an example of how to do this:\ncss\nCopy code\nsystem = MultiwaySystem[{0, 1, 0, 1}, 2];\nCloudExport[system, \"JavaScript\"]\nThis will generate JavaScript code that you can embed in your website or run in a browser console.\nAnother option is to use the NKS.js library, which is a JavaScript implementation of the Wolfram Language's NKS (New Kind of Science) features. This library includes functionality for creating and visualizing multiway systems, as well as other types of cellular automata and computational systems. You can find the library and documentation here: https://github.com/inconvergent/nksjs\nIf you want to implement multiway systems from scratch, you can use basic JavaScript and canvas or SVG graphics to create a visualization. Multiway systems are based on rewriting rules, so you'll need to define the rules and apply them to an initial state of the system. Here's an example of how to create a simple multiway system in JavaScript:\njavascript"
      },
      "date": 1677858595268
    },
    {
      "type": "add",
      "id": "0676c16c8c51cd94",
      "item": {
        "type": "paragraph",
        "id": "0676c16c8c51cd94",
        "text": "Copy code\n// Define the rules\nconst rules = {\n  \"000\": \"0\",\n  \"001\": \"1\",\n  \"010\": \"1\",\n  \"011\": \"0\",\n  \"100\": \"1\",\n  \"101\": \"0\",\n  \"110\": \"0\",\n  \"111\": \"1\",\n};\n\n// Create an initial state\nlet state = \"00000000\";\n\n// Apply the rules to generate the next state\nfunction next(state) {\n  let next = \"\";\n  for (let i = 0; i < state.length - 2; i++) {\n    let pattern = state.slice(i, i + 3);\n    next += rules[pattern];\n  }\n  return next;\n}\n\n// Create a canvas and draw the states\nconst canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.fillStyle = \"black\";\nctx.fillRect(0, 0, canvas.width, canvas.height);\nctx.fillStyle = \"white\";\nctx.font = \"16px monospace\";\nfor (let i = 0; i < 100; i++) {\n  ctx.fillText(state, 10, (i + 1) * 20);\n  state = next(state);\n}\n"
      },
      "after": "1314e5f68f5b2a7b",
      "date": 1677858596697
    },
    {
      "item": {
        "type": "factory",
        "id": "fe7b36f0b577c480"
      },
      "id": "fe7b36f0b577c480",
      "type": "add",
      "after": "392aa4e9fd00e923",
      "date": 1677858604386
    },
    {
      "id": "fe7b36f0b577c480",
      "type": "move",
      "order": [
        "13f44f2e81dfbcc7",
        "a1f6c6a56e46490b",
        "e145ea19139c2276",
        "905d17bb0f0a4a73",
        "f632a216504ec02b",
        "14411a383ca70b04",
        "cda3d212b941dd14",
        "ac983393b2177cae",
        "56e3f2557d09035d",
        "1314e5f68f5b2a7b",
        "fe7b36f0b577c480",
        "0676c16c8c51cd94",
        "392aa4e9fd00e923"
      ],
      "date": 1677858608584
    },
    {
      "type": "edit",
      "id": "fe7b36f0b577c480",
      "item": {
        "type": "code",
        "id": "fe7b36f0b577c480",
        "text": "// Define the rules\nconst rules = {\n  \"000\": \"0\",\n  \"001\": \"1\",\n  \"010\": \"1\",\n  \"011\": \"0\",\n  \"100\": \"1\",\n  \"101\": \"0\",\n  \"110\": \"0\",\n  \"111\": \"1\",\n};\n\n// Create an initial state\nlet state = \"00000000\";\n\n// Apply the rules to generate the next state\nfunction next(state) {\n  let next = \"\";\n  for (let i = 0; i < state.length - 2; i++) {\n    let pattern = state.slice(i, i + 3);\n    next += rules[pattern];\n  }\n  return next;\n}\n\n// Create a canvas and draw the states\nconst canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\nctx.fillStyle = \"black\";\nctx.fillRect(0, 0, canvas.width, canvas.height);\nctx.fillStyle = \"white\";\nctx.font = \"16px monospace\";\nfor (let i = 0; i < 100; i++) {\n  ctx.fillText(state, 10, (i + 1) * 20);\n  state = next(state);\n}\n"
      },
      "date": 1677858611260
    },
    {
      "type": "remove",
      "id": "0676c16c8c51cd94",
      "date": 1677858615052
    },
    {
      "type": "edit",
      "id": "1314e5f68f5b2a7b",
      "item": {
        "type": "paragraph",
        "id": "1314e5f68f5b2a7b",
        "text": "There are a few resources available for implementing Wolfram Multiway Systems in JavaScript. Here are some options:\n\nThe Wolfram Language includes built-in functionality for multiway systems, and it can be used in the Wolfram Cloud or the desktop version of Mathematica. You can create and manipulate multiway systems using the Wolfram Language and then export them to JavaScript using the \"CloudExport\" function. Here's an example of how to do this:\ncss\nCopy code\nsystem = MultiwaySystem[{0, 1, 0, 1}, 2];\nCloudExport[system, \"JavaScript\"]\nThis will generate JavaScript code that you can embed in your website or run in a browser console.\nAnother option is to use the NKS.js library, which is a JavaScript implementation of the Wolfram Language's NKS (New Kind of Science) features. This library includes functionality for creating and visualizing multiway systems, as well as other types of cellular automata and computational systems. You can find the library and documentation here: https://github.com/inconvergent/nksjs\nIf you want to implement multiway systems from scratch, you can use basic JavaScript and canvas or SVG graphics to create a visualization. Multiway systems are based on rewriting rules, so you'll need to define the rules and apply them to an initial state of the system. Here's an example of how to create a simple multiway system in JavaScript:"
      },
      "date": 1677858862648
    },
    {
      "type": "add",
      "id": "17178ebb1ce893df",
      "item": {
        "type": "paragraph",
        "id": "17178ebb1ce893df",
        "text": "XiaoYaoYou (using Pinyin romanization) 逍遥游 "
      },
      "after": "905d17bb0f0a4a73",
      "date": 1677877576377
    },
    {
      "type": "edit",
      "id": "17178ebb1ce893df",
      "item": {
        "type": "paragraph",
        "id": "17178ebb1ce893df",
        "text": "XiaoYaoYou (using Pinyin romanization) [[逍遥游]] "
      },
      "date": 1677877609981
    },
    {
      "type": "edit",
      "id": "17178ebb1ce893df",
      "item": {
        "type": "paragraph",
        "id": "17178ebb1ce893df",
        "text": "XiaoYaoYou (using Pinyin romanization) 逍遥游 "
      },
      "date": 1677877633425
    },
    {
      "type": "add",
      "id": "b4f93c59fe664bfb",
      "item": {
        "type": "paragraph",
        "id": "b4f93c59fe664bfb",
        "text": "[[Xiaoyao You]]"
      },
      "after": "17178ebb1ce893df",
      "date": 1677877918641
    },
    {
      "type": "edit",
      "id": "b4f93c59fe664bfb",
      "item": {
        "type": "paragraph",
        "id": "b4f93c59fe664bfb",
        "text": "⇒ [[Xiaoyao You]]"
      },
      "date": 1677878744918
    },
    {
      "id": "b4f93c59fe664bfb",
      "type": "move",
      "order": [
        "13f44f2e81dfbcc7",
        "a1f6c6a56e46490b",
        "e145ea19139c2276",
        "b4f93c59fe664bfb",
        "905d17bb0f0a4a73",
        "17178ebb1ce893df",
        "f632a216504ec02b",
        "14411a383ca70b04",
        "cda3d212b941dd14",
        "ac983393b2177cae",
        "56e3f2557d09035d",
        "1314e5f68f5b2a7b",
        "fe7b36f0b577c480",
        "392aa4e9fd00e923"
      ],
      "date": 1677878747368
    },
    {
      "type": "remove",
      "id": "905d17bb0f0a4a73",
      "date": 1677878751675
    },
    {
      "id": "fe7b36f0b577c480",
      "type": "remove",
      "removedTo": {
        "page": "2023-03-04"
      },
      "date": 1677926748878
    },
    {
      "type": "edit",
      "id": "1314e5f68f5b2a7b",
      "item": {
        "type": "paragraph",
        "id": "1314e5f68f5b2a7b",
        "text": "There are a few resources available for implementing Wolfram Multiway Systems in JavaScript. Here are some options:\n\nThe Wolfram Language includes built-in functionality for multiway systems, and it can be used in the Wolfram Cloud or the desktop version of Mathematica. You can create and manipulate multiway systems using the Wolfram Language and then export them to JavaScript using the \"CloudExport\" function. Here's an example of how to do this:\ncss\nCopy code\nsystem = MultiwaySystem[{0, 1, 0, 1}, 2];\nCloudExport[system, \"JavaScript\"]\nThis will generate JavaScript code that you can embed in your website or run in a browser console.\nAnother option is to use the NKS.js library, which is a JavaScript implementation of the Wolfram Language's NKS (New Kind of Science) features. This library includes functionality for creating and visualizing multiway systems, as well as other types of cellular automata and computational systems. You can find the library and documentation here: https://github.com/inconvergent/nksjs\nIf you want to implement multiway systems from scratch, you can use basic JavaScript and canvas or SVG graphics to create a visualization. Multiway systems are based on rewriting rules, so you'll need to define the rules and apply them to an initial state of the system. Here's an example of how to create a simple multiway system in JavaScript: […]"
      },
      "date": 1677930518542
    },
    {
      "type": "edit",
      "id": "1314e5f68f5b2a7b",
      "item": {
        "type": "paragraph",
        "id": "1314e5f68f5b2a7b",
        "text": "There are a few resources available for implementing Wolfram Multiway Systems in JavaScript. Here are some options:\n\n"
      },
      "date": 1677931596436
    },
    {
      "type": "add",
      "id": "0ecf5ec4c21704d0",
      "item": {
        "type": "paragraph",
        "id": "0ecf5ec4c21704d0",
        "text": "The Wolfram Language includes built-in functionality for multiway systems, and it can be used in the Wolfram Cloud or the desktop version of Mathematica. You can create and manipulate multiway systems using the Wolfram Language and then export them to JavaScript using the \"CloudExport\" function. Here's an example of how to do this:\ncss\nCopy code\nsystem = MultiwaySystem[{0, 1, 0, 1}, 2];\nCloudExport[system, \"JavaScript\"]\nThis will generate JavaScript code that you can embed in your website or run in a browser console.\n"
      },
      "after": "1314e5f68f5b2a7b",
      "date": 1677931600778
    },
    {
      "type": "add",
      "id": "e0ef4c8093325cc3",
      "item": {
        "type": "paragraph",
        "id": "e0ef4c8093325cc3",
        "text": "Another option is to use the NKS.js library, which is a JavaScript implementation of the Wolfram Language's NKS (New Kind of Science) features. This library includes functionality for creating and visualizing multiway systems, as well as other types of cellular automata and computational systems. You can find the library and documentation here: https://github.com/inconvergent/nksjs\nIf you want to implement multiway systems from scratch, you can use basic JavaScript and canvas or SVG graphics to create a visualization. Multiway systems are based on rewriting rules, so you'll need to define the rules and apply them to an initial state of the system. Here's an example of how to create a simple multiway system in JavaScript: […]"
      },
      "after": "0ecf5ec4c21704d0",
      "date": 1677931602322
    },
    {
      "type": "edit",
      "id": "e0ef4c8093325cc3",
      "item": {
        "type": "paragraph",
        "id": "e0ef4c8093325cc3",
        "text": "Another option is to use the NKS.js library, which is a JavaScript implementation of the Wolfram Language's NKS (New Kind of Science) features. This library includes functionality for creating and visualizing multiway systems, as well as other types of cellular automata and computational systems. You can find the library and documentation here: https://github.com/inconvergent/nksjs\n"
      },
      "date": 1677931616969
    },
    {
      "type": "add",
      "id": "78f3f2c3a2436c20",
      "item": {
        "type": "paragraph",
        "id": "78f3f2c3a2436c20",
        "text": "If you want to implement multiway systems from scratch, you can use basic JavaScript and canvas or SVG graphics to create a visualization. Multiway systems are based on rewriting rules, so you'll need to define the rules and apply them to an initial state of the system. Here's an example of how to create a simple multiway system in JavaScript: […]"
      },
      "after": "e0ef4c8093325cc3",
      "date": 1677931618163
    }
  ]
}