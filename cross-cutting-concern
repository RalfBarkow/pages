{
  "title": "Cross Cutting Concern",
  "story": [
    {
      "type": "html",
      "text": "A <i>cross-cutting concern</i> is some software concern (synchronization, logging, memory allocation, [[Network Transparency]], UI preferences) that is for the most part outside of (and orthogonal to) the [[Problem Domain]] a software component/module is concerned with, but important nonetheless.  Many different techniques have been developed to deal with these--some good, some bad, some [[Ug Ly]].",
      "id": "4d75b4b279ad52f28d00a82362409477"
    },
    {
      "type": "html",
      "text": "\nTechniques include:",
      "id": "dc86de706b741ded88ec8d2951b8defe"
    },
    {
      "type": "html",
      "text": " [[Template Metaprogramming]], augmented with [[Policy Object]]s (such as [[Standard Template Library]] allocators)",
      "id": "2afad10d506110c5182ecbc0e27457c4"
    },
    {
      "type": "html",
      "text": " [[Meta Object Protocol]]s, in particular things like before functions, after functions, etc.",
      "id": "d9fa0fba75f63b1d7253ee5f5fffde90"
    },
    {
      "type": "html",
      "text": " Decorators (both [[Decorator Pattern]] and the language feature in Java), delegation in general.",
      "id": "0ae184bdca4eb082944a4a604e35a659"
    },
    {
      "type": "html",
      "text": " [[Template Method Pattern]] (i.e. use of [[Hook Method]]s)",
      "id": "c7106899e9e22caf3de89ffb5b5c6810"
    },
    {
      "type": "html",
      "text": " RPC tools",
      "id": "823471b86991b27ec30b59f915b1eb46"
    },
    {
      "type": "html",
      "text": " Many of the [[Creational Patterns]] can be used to allow variation of some cross-cutting concern at runtime.",
      "id": "5bda5b0079c8b504e43f6656f9127499"
    },
    {
      "type": "html",
      "text": " [[Multiple Inheritance]] and [[Mix In]]s",
      "id": "a6a3438bc229cb2a3c0a34e2d186c883"
    },
    {
      "type": "html",
      "text": " [[Context Object]] or [[Explicit Management Of Implicit Context]]",
      "id": "1bdaba0e8bd8c68072f52c2e49280e10"
    },
    {
      "type": "html",
      "text": "\nA programming paradigm dealing with this stuff is [[Aspect Oriented Programming]].",
      "id": "0975c0f043b06c183bfb1a1a75adec66"
    },
    {
      "type": "html",
      "text": "\nA few <i>bad</i> techniques for dealing with [[Cross Cutting Concerns]] include:",
      "id": "d9d96d74104729222f25df3324fe918e"
    },
    {
      "type": "html",
      "text": " [[Grand Central Station]] (aggregating lots of independent domain functionality into a [[Big Ball Of Mud]] just so the [[Cross Cutting Concern]]<b></b>(s) can be dealt with in one place).",
      "id": "4222c935bf6244e7129bd3e453f7746f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8aaa0fdba6ba7f8119c2385401d22998"
    },
    {
      "type": "html",
      "text": "See also: [[Variations Tend Toward Cartesian Product]]",
      "id": "80127f51bd53a93ddaab0d7ede6318f3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8aaa0fdba6ba7f8119c2385401d22998"
    },
    {
      "type": "html",
      "text": "[[Category Complexity]], [[Category Info Packaging]] [[Category Aspect Orientation]]",
      "id": "9375c78c4355b29ec58974f634e9b8cc"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CrossCuttingConcern c2.com]",
      "id": "733483a2eb4b25884075920c50441fb3"
    }
  ],
  "journal": [
    {
      "date": 1416499240000,
      "id": "2ab82a6d626d779b5e18f561a76e6cef",
      "type": "create",
      "item": {
        "title": "Cross Cutting Concern",
        "story": [
          {
            "type": "html",
            "text": "A <i>cross-cutting concern</i> is some software concern (synchronization, logging, memory allocation, [[Network Transparency]], UI preferences) that is for the most part outside of (and orthogonal to) the [[Problem Domain]] a software component/module is concerned with, but important nonetheless.  Many different techniques have been developed to deal with these--some good, some bad, some [[Ug Ly]].",
            "id": "4d75b4b279ad52f28d00a82362409477"
          },
          {
            "type": "html",
            "text": "\nTechniques include:",
            "id": "dc86de706b741ded88ec8d2951b8defe"
          },
          {
            "type": "html",
            "text": " [[Template Metaprogramming]], augmented with [[Policy Object]]s (such as [[Standard Template Library]] allocators)",
            "id": "2afad10d506110c5182ecbc0e27457c4"
          },
          {
            "type": "html",
            "text": " [[Meta Object Protocol]]s, in particular things like before functions, after functions, etc.",
            "id": "d9fa0fba75f63b1d7253ee5f5fffde90"
          },
          {
            "type": "html",
            "text": " Decorators (both [[Decorator Pattern]] and the language feature in Java), delegation in general.",
            "id": "0ae184bdca4eb082944a4a604e35a659"
          },
          {
            "type": "html",
            "text": " [[Template Method Pattern]] (i.e. use of [[Hook Method]]s)",
            "id": "c7106899e9e22caf3de89ffb5b5c6810"
          },
          {
            "type": "html",
            "text": " RPC tools",
            "id": "823471b86991b27ec30b59f915b1eb46"
          },
          {
            "type": "html",
            "text": " Many of the [[Creational Patterns]] can be used to allow variation of some cross-cutting concern at runtime.",
            "id": "5bda5b0079c8b504e43f6656f9127499"
          },
          {
            "type": "html",
            "text": " [[Multiple Inheritance]] and [[Mix In]]s",
            "id": "a6a3438bc229cb2a3c0a34e2d186c883"
          },
          {
            "type": "html",
            "text": " [[Context Object]] or [[Explicit Management Of Implicit Context]]",
            "id": "1bdaba0e8bd8c68072f52c2e49280e10"
          },
          {
            "type": "html",
            "text": "\nA programming paradigm dealing with this stuff is [[Aspect Oriented Programming]].",
            "id": "0975c0f043b06c183bfb1a1a75adec66"
          },
          {
            "type": "html",
            "text": "\nA few <i>bad</i> techniques for dealing with [[Cross Cutting Concerns]] include:",
            "id": "d9d96d74104729222f25df3324fe918e"
          },
          {
            "type": "html",
            "text": " [[Grand Central Station]] (aggregating lots of independent domain functionality into a [[Big Ball Of Mud]] just so the [[Cross Cutting Concern]]<b></b>(s) can be dealt with in one place).",
            "id": "4222c935bf6244e7129bd3e453f7746f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8aaa0fdba6ba7f8119c2385401d22998"
          },
          {
            "type": "html",
            "text": "See also: [[Variations Tend Toward Cartesian Product]]",
            "id": "80127f51bd53a93ddaab0d7ede6318f3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8aaa0fdba6ba7f8119c2385401d22998"
          },
          {
            "type": "html",
            "text": "[[Category Complexity]], [[Category Info Packaging]] [[Category Aspect Orientation]]",
            "id": "9375c78c4355b29ec58974f634e9b8cc"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CrossCuttingConcern c2.com]",
            "id": "733483a2eb4b25884075920c50441fb3"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707907341511
    }
  ]
}