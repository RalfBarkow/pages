{
  "title": "Custom Snippet",
  "story": [
    {
      "type": "paragraph",
      "id": "b5b06b374a0da57e",
      "text": "See [[Custom Snippets]]."
    },
    {
      "type": "paragraph",
      "id": "75fdbf72ed435b5f",
      "text": "skeledrew â€” [https://discord.com/channels/729445214812504107/737255889517543545/858013600912375808 discord]\n[[Talents]] on snippets? (haven't looked much at Talents yet, but it seems an interesting way to add more context/relationships) \n"
    },
    {
      "type": "paragraph",
      "id": "183cd4e0e5f0cd2c",
      "text": "botwhytho â€” 25.06.2021\nTalents do seem compelling but might take some thinking to set up properly. Considering snippets use an MVVM pattern [â‡’[[Model-View-ViewModel]]], where would the talents be applied? Sprinkled throughout multiple classes? \nIf you want to extend functionality with Talents, who is the super class. I've been working on custom snippet type in the past weeks and for example, you'd subclass something like leJsonV4AttributeMapping to be able to serialize your custom data, unclear who the super would be with Talents. Sounds very intriguing but tricky to implement in my mind and might break many assumptions the system around you is making as far as the snippet type/class it's dealing with \n"
    },
    {
      "type": "paragraph",
      "id": "ea96c35505394b1f",
      "text": "[[Adrian Sampaleanu]] â€” 25.06.2021\n@SeanDeNigris I think @tudor girba mentioned that links (associations) might become first class entities when I asked about it (with reference to the associative DB implemented in something like [[DMX]]). Wouldn't fleshing out links and enhancing the UX around these get you what you need?\n"
    },
    {
      "type": "paragraph",
      "id": "3e7bafe48220c6e8",
      "text": "tudor girba â€” 25.06.2021\nThey already are independent first class entities ðŸ™‚\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Custom Snippet",
        "story": []
      },
      "date": 1655468459953
    },
    {
      "item": {
        "type": "factory",
        "id": "b5b06b374a0da57e"
      },
      "id": "b5b06b374a0da57e",
      "type": "add",
      "date": 1655468467425
    },
    {
      "type": "edit",
      "id": "b5b06b374a0da57e",
      "item": {
        "type": "paragraph",
        "id": "b5b06b374a0da57e",
        "text": "See [[Custom Snippets]]."
      },
      "date": 1655468480961
    },
    {
      "item": {
        "type": "factory",
        "id": "75fdbf72ed435b5f"
      },
      "id": "75fdbf72ed435b5f",
      "type": "add",
      "after": "b5b06b374a0da57e",
      "date": 1655468612961
    },
    {
      "type": "edit",
      "id": "75fdbf72ed435b5f",
      "item": {
        "type": "paragraph",
        "id": "75fdbf72ed435b5f",
        "text": "skeledrew â€” 25.06.2021\nTalents on snippets? (haven't looked much at Talents yet, but it seems an interesting way to add more context/relationships) \nbotwhytho â€” 25.06.2021\nTalents do seem compelling but might take some thinking to set up properly. Considering snippets use an MVVM pattern, where would the talents be applied? Sprinkled throughout multiple classes? \nIf you want to extend functionality with Talents, who is the super class. I've been working on custom snippet type in the past weeks and for example, you'd subclass something like leJsonV4AttributeMapping to be able to serialize your custom data, unclear who the super would be with Talents. Sounds very intriguing but tricky to implement in my mind and might break many assumptions the system around you is making as far as the snippet type/class it's dealing with \nAdrian Sampaleanu â€” 25.06.2021\n@SeanDeNigris I think @tudor girba mentioned that links (associations) might become first class entities when I asked about it (with reference to the associative DB implemented in something like DMX). Wouldn't fleshing out links and enhancing the UX around these get you what you need?\ntudor girba â€” 25.06.2021\nThey already are independent first class entities ðŸ™‚\n"
      },
      "date": 1655468615977
    },
    {
      "type": "edit",
      "id": "75fdbf72ed435b5f",
      "item": {
        "type": "paragraph",
        "id": "75fdbf72ed435b5f",
        "text": "skeledrew â€” [https://discord.com/channels/729445214812504107/737255889517543545/858013600912375808 discord]\nTalents on snippets? (haven't looked much at Talents yet, but it seems an interesting way to add more context/relationships) \nbotwhytho â€” 25.06.2021\nTalents do seem compelling but might take some thinking to set up properly. Considering snippets use an MVVM pattern, where would the talents be applied? Sprinkled throughout multiple classes? \nIf you want to extend functionality with Talents, who is the super class. I've been working on custom snippet type in the past weeks and for example, you'd subclass something like leJsonV4AttributeMapping to be able to serialize your custom data, unclear who the super would be with Talents. Sounds very intriguing but tricky to implement in my mind and might break many assumptions the system around you is making as far as the snippet type/class it's dealing with \nAdrian Sampaleanu â€” 25.06.2021\n@SeanDeNigris I think @tudor girba mentioned that links (associations) might become first class entities when I asked about it (with reference to the associative DB implemented in something like DMX). Wouldn't fleshing out links and enhancing the UX around these get you what you need?\ntudor girba â€” 25.06.2021\nThey already are independent first class entities ðŸ™‚\n"
      },
      "date": 1655468637731
    },
    {
      "type": "edit",
      "id": "75fdbf72ed435b5f",
      "item": {
        "type": "paragraph",
        "id": "75fdbf72ed435b5f",
        "text": "skeledrew â€” [https://discord.com/channels/729445214812504107/737255889517543545/858013600912375808 discord]\n[[Talents]] on snippets? (haven't looked much at Talents yet, but it seems an interesting way to add more context/relationships) \nbotwhytho â€” 25.06.2021\nTalents do seem compelling but might take some thinking to set up properly. Considering snippets use an MVVM pattern, where would the talents be applied? Sprinkled throughout multiple classes? \nIf you want to extend functionality with Talents, who is the super class. I've been working on custom snippet type in the past weeks and for example, you'd subclass something like leJsonV4AttributeMapping to be able to serialize your custom data, unclear who the super would be with Talents. Sounds very intriguing but tricky to implement in my mind and might break many assumptions the system around you is making as far as the snippet type/class it's dealing with \nAdrian Sampaleanu â€” 25.06.2021\n@SeanDeNigris I think @tudor girba mentioned that links (associations) might become first class entities when I asked about it (with reference to the associative DB implemented in something like DMX). Wouldn't fleshing out links and enhancing the UX around these get you what you need?\ntudor girba â€” 25.06.2021\nThey already are independent first class entities ðŸ™‚\n"
      },
      "date": 1655468647647
    },
    {
      "type": "edit",
      "id": "75fdbf72ed435b5f",
      "item": {
        "type": "paragraph",
        "id": "75fdbf72ed435b5f",
        "text": "skeledrew â€” [https://discord.com/channels/729445214812504107/737255889517543545/858013600912375808 discord]\n[[Talents]] on snippets? (haven't looked much at Talents yet, but it seems an interesting way to add more context/relationships) \nbotwhytho â€” 25.06.2021\nTalents do seem compelling but might take some thinking to set up properly. Considering snippets use an MVVM pattern, where would the talents be applied? Sprinkled throughout multiple classes? \nIf you want to extend functionality with Talents, who is the super class. I've been working on custom snippet type in the past weeks and for example, you'd subclass something like leJsonV4AttributeMapping to be able to serialize your custom data, unclear who the super would be with Talents. Sounds very intriguing but tricky to implement in my mind and might break many assumptions the system around you is making as far as the snippet type/class it's dealing with \n"
      },
      "date": 1655468656917
    },
    {
      "type": "add",
      "id": "ea96c35505394b1f",
      "item": {
        "type": "paragraph",
        "id": "ea96c35505394b1f",
        "text": "Adrian Sampaleanu â€” 25.06.2021\n@SeanDeNigris I think @tudor girba mentioned that links (associations) might become first class entities when I asked about it (with reference to the associative DB implemented in something like DMX). Wouldn't fleshing out links and enhancing the UX around these get you what you need?\n"
      },
      "after": "75fdbf72ed435b5f",
      "date": 1655468661766
    },
    {
      "type": "add",
      "id": "3e7bafe48220c6e8",
      "item": {
        "type": "paragraph",
        "id": "3e7bafe48220c6e8",
        "text": "tudor girba â€” 25.06.2021\nThey already are independent first class entities ðŸ™‚\n"
      },
      "after": "ea96c35505394b1f",
      "date": 1655468665225
    },
    {
      "type": "edit",
      "id": "ea96c35505394b1f",
      "item": {
        "type": "paragraph",
        "id": "ea96c35505394b1f",
        "text": "Adrian Sampaleanu â€” 25.06.2021\n@SeanDeNigris I think @tudor girba mentioned that links (associations) might become first class entities when I asked about it (with reference to the associative DB implemented in something like [[DMX]]). Wouldn't fleshing out links and enhancing the UX around these get you what you need?\n"
      },
      "date": 1655468671651
    },
    {
      "type": "edit",
      "id": "75fdbf72ed435b5f",
      "item": {
        "type": "paragraph",
        "id": "75fdbf72ed435b5f",
        "text": "skeledrew â€” [https://discord.com/channels/729445214812504107/737255889517543545/858013600912375808 discord]\n[[Talents]] on snippets? (haven't looked much at Talents yet, but it seems an interesting way to add more context/relationships) \n"
      },
      "date": 1655468685689
    },
    {
      "type": "add",
      "id": "183cd4e0e5f0cd2c",
      "item": {
        "type": "paragraph",
        "id": "183cd4e0e5f0cd2c",
        "text": "botwhytho â€” 25.06.2021\nTalents do seem compelling but might take some thinking to set up properly. Considering snippets use an MVVM pattern, where would the talents be applied? Sprinkled throughout multiple classes? \nIf you want to extend functionality with Talents, who is the super class. I've been working on custom snippet type in the past weeks and for example, you'd subclass something like leJsonV4AttributeMapping to be able to serialize your custom data, unclear who the super would be with Talents. Sounds very intriguing but tricky to implement in my mind and might break many assumptions the system around you is making as far as the snippet type/class it's dealing with \n"
      },
      "after": "75fdbf72ed435b5f",
      "date": 1655468686733
    },
    {
      "type": "edit",
      "id": "183cd4e0e5f0cd2c",
      "item": {
        "type": "paragraph",
        "id": "183cd4e0e5f0cd2c",
        "text": "botwhytho â€” 25.06.2021\nTalents do seem compelling but might take some thinking to set up properly. Considering snippets use an MVVM pattern [â€“[[Model-View-ViewModel]]], where would the talents be applied? Sprinkled throughout multiple classes? \nIf you want to extend functionality with Talents, who is the super class. I've been working on custom snippet type in the past weeks and for example, you'd subclass something like leJsonV4AttributeMapping to be able to serialize your custom data, unclear who the super would be with Talents. Sounds very intriguing but tricky to implement in my mind and might break many assumptions the system around you is making as far as the snippet type/class it's dealing with \n"
      },
      "date": 1655468729444
    },
    {
      "type": "edit",
      "id": "183cd4e0e5f0cd2c",
      "item": {
        "type": "paragraph",
        "id": "183cd4e0e5f0cd2c",
        "text": "botwhytho â€” 25.06.2021\nTalents do seem compelling but might take some thinking to set up properly. Considering snippets use an MVVM pattern [â‡’[[Model-View-ViewModel]]], where would the talents be applied? Sprinkled throughout multiple classes? \nIf you want to extend functionality with Talents, who is the super class. I've been working on custom snippet type in the past weeks and for example, you'd subclass something like leJsonV4AttributeMapping to be able to serialize your custom data, unclear who the super would be with Talents. Sounds very intriguing but tricky to implement in my mind and might break many assumptions the system around you is making as far as the snippet type/class it's dealing with \n"
      },
      "date": 1655468740959
    },
    {
      "type": "edit",
      "id": "ea96c35505394b1f",
      "item": {
        "type": "paragraph",
        "id": "ea96c35505394b1f",
        "text": "[[Adrian Sampaleanu]] â€” 25.06.2021\n@SeanDeNigris I think @tudor girba mentioned that links (associations) might become first class entities when I asked about it (with reference to the associative DB implemented in something like [[DMX]]). Wouldn't fleshing out links and enhancing the UX around these get you what you need?\n"
      },
      "date": 1655468813800
    }
  ]
}