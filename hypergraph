{
  "title": "Hypergraph",
  "story": [
    {
      "type": "paragraph",
      "id": "920f8d7fbe06f8ae",
      "text": "Hypergraphs are generalized graphs in which an edge can connect more than two nodes [Aui02]. This property allows us to represent more complicated relations between several objects for which standard graphs would require several additional nodes and edges. In our approach nodes represent different software artifacts and edges represent different relations between them. Using hypergraphs as data repositories allows us to look at software as knowledge. (p. 40)"
    },
    {
      "type": "paragraph",
      "id": "17fb4c90888d38f7",
      "text": "KAPEC, Peter. Hypergraph-based software visualization. GraVisMa 2009, 2009, 73. Jg."
    },
    {
      "type": "paragraph",
      "id": "a066d25486003a0a",
      "text": "KAPEC, Peter, 2010. Visual Programming Environment Based on Hypergraph Representations. In: BOLC, Leonard, TADEUSIEWICZ, Ryszard, CHMIELEWSKI, Leszek J. and WOJCIECHOWSKI, Konrad (eds.), Computer Vision and Graphics. Berlin, Heidelberg: Springer. 2010. p. 9–16. Lecture Notes in Computer Science. ISBN 978-3-642-15907-7. DOI 10.1007/978-3-642-15907-7_2. "
    },
    {
      "type": "markdown",
      "id": "51f662f625b05876",
      "text": "> In this paper we present a concept of a visual programming environment that uses hypergraphs for representing, querying and visualizing software artifacts. The hypergraph representation allows to store semantic relations between software artifacts an can be visualized with well-known graph drawing algorithms. The proposed visual programming environment focuses not only on software visualization, but also offers context visualization for programming tasks. We present visualizations of an existing software system and demonstrate how contextual information can be displayed when browsing and modifying source code artifacts.\n"
    },
    {
      "type": "paragraph",
      "id": "a6f72171c4983471",
      "text": "\nKAPEC, Peter, 2010. Visualizing software artifacts using hypergraphs. In: Proceedings of the 26th Spring Conference on Computer Graphics. Online. New York, NY, USA: Association for Computing Machinery. 13 May 2010. p. 27–32. [Accessed 18 April 2022]. SCCG ’10. ISBN 978-1-4503-0558-7. DOI 10.1145/1925059.1925067. "
    },
    {
      "type": "markdown",
      "id": "5392c98ed8d2ecb1",
      "text": "> In this paper we present an alternative software visualization approach that is based on hypergraphs. Hypergraphs are used in all steps of the visualization process -- as a data model for representing software artifacts, trough a query mechanism based on hypergraphs up to the visualization level where we utilize interactive well known 3D graph visualizations methods. The proposed visualization aims to provide a visual programming environment for software developers. We also present visualizations of existing software projects.\n"
    },
    {
      "type": "paragraph",
      "id": "ca62fab2b608d78c",
      "text": "\nKAPEC, P., PAPRČKA, M., PAŽITNAJ, A. and POLÁK, V., 2013. Exploring 3D GPU-accelerated graph visualization with time-traveling virtual camera. Journal of Theoretical and Applied Computer Science. 2013. No. Vol. 7, nr 2, p. 16–30. "
    },
    {
      "type": "markdown",
      "id": "4b12a25f12804f09",
      "text": "> Graph visualization is an ongoing research area with many open problems. Graphs are often visualized in 2D space and recently also 3D visualizations emerge. However, the added third dimension adds additional problems that make the graph comprehension more difficult. In this paper we focus on navigating and exploring 3D graph visualizations. We present our approach for the automation of virtual camera movement for better graph exploration. This camera movement is enhanced with experimental exploration recording and play-back that allows to fork exploration paths at any time and to switch between them. We also present how graph layout can be accelerated with GPU in combination with scene graph structures. These features were added into our graph visualization system that we use for software visualization. We present several visualizations of the structure and the evolution of software systems.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Hypergraph",
        "story": []
      },
      "date": 1649831989248
    },
    {
      "item": {
        "type": "factory",
        "id": "920f8d7fbe06f8ae"
      },
      "id": "920f8d7fbe06f8ae",
      "type": "add",
      "date": 1650275188045
    },
    {
      "type": "edit",
      "id": "920f8d7fbe06f8ae",
      "item": {
        "type": "paragraph",
        "id": "920f8d7fbe06f8ae",
        "text": "Hypergraphs are generalized graphs in which an edge can connect more than two nodes [Aui02]. This property allows us to represent more complicated relations between several objects for which standard graphs would require several additional nodes and edges. In our approach nodes represent different software artifacts and edges represent different relations between them. Using hypergraphs as data repositories allows us to look at software as knowledge."
      },
      "date": 1650275189592
    },
    {
      "item": {
        "type": "factory",
        "id": "17fb4c90888d38f7"
      },
      "id": "17fb4c90888d38f7",
      "type": "add",
      "after": "920f8d7fbe06f8ae",
      "date": 1650275236312
    },
    {
      "type": "edit",
      "id": "17fb4c90888d38f7",
      "item": {
        "type": "paragraph",
        "id": "17fb4c90888d38f7",
        "text": "KAPEC, Peter. Hypergraph-based software visualization. GraVisMa 2009, 2009, 73. Jg., S. 40."
      },
      "date": 1650275239156
    },
    {
      "type": "edit",
      "id": "920f8d7fbe06f8ae",
      "item": {
        "type": "paragraph",
        "id": "920f8d7fbe06f8ae",
        "text": "Hypergraphs are generalized graphs in which an edge can connect more than two nodes [Aui02]. This property allows us to represent more complicated relations between several objects for which standard graphs would require several additional nodes and edges. In our approach nodes represent different software artifacts and edges represent different relations between them. Using hypergraphs as data repositories allows us to look at software as knowledge. (p. 40)"
      },
      "date": 1650275272038
    },
    {
      "type": "edit",
      "id": "17fb4c90888d38f7",
      "item": {
        "type": "paragraph",
        "id": "17fb4c90888d38f7",
        "text": "KAPEC, Peter. Hypergraph-based software visualization. GraVisMa 2009, 2009, 73. Jg."
      },
      "date": 1650275276021
    },
    {
      "item": {
        "type": "factory",
        "id": "a066d25486003a0a"
      },
      "id": "a066d25486003a0a",
      "type": "add",
      "after": "17fb4c90888d38f7",
      "date": 1650275463841
    },
    {
      "type": "edit",
      "id": "a066d25486003a0a",
      "item": {
        "type": "paragraph",
        "id": "a066d25486003a0a",
        "text": "\nKAPEC, Peter, 2010. Visual Programming Environment Based on Hypergraph Representations. In: BOLC, Leonard, TADEUSIEWICZ, Ryszard, CHMIELEWSKI, Leszek J. and WOJCIECHOWSKI, Konrad (eds.), Computer Vision and Graphics. Berlin, Heidelberg: Springer. 2010. p. 9–16. Lecture Notes in Computer Science. ISBN 978-3-642-15907-7. DOI 10.1007/978-3-642-15907-7_2. In this paper we present a concept of a visual programming environment that uses hypergraphs for representing, querying and visualizing software artifacts. The hypergraph representation allows to store semantic relations between software artifacts an can be visualized with well-known graph drawing algorithms. The proposed visual programming environment focuses not only on software visualization, but also offers context visualization for programming tasks. We present visualizations of an existing software system and demonstrate how contextual information can be displayed when browsing and modifying source code artifacts.\n"
      },
      "date": 1650275466934
    },
    {
      "type": "edit",
      "id": "a066d25486003a0a",
      "item": {
        "type": "paragraph",
        "id": "a066d25486003a0a",
        "text": "KAPEC, Peter, 2010. Visual Programming Environment Based on Hypergraph Representations. In: BOLC, Leonard, TADEUSIEWICZ, Ryszard, CHMIELEWSKI, Leszek J. and WOJCIECHOWSKI, Konrad (eds.), Computer Vision and Graphics. Berlin, Heidelberg: Springer. 2010. p. 9–16. Lecture Notes in Computer Science. ISBN 978-3-642-15907-7. DOI 10.1007/978-3-642-15907-7_2. "
      },
      "date": 1650275475109
    },
    {
      "type": "add",
      "id": "51f662f625b05876",
      "item": {
        "type": "paragraph",
        "id": "51f662f625b05876",
        "text": "> In this paper we present a concept of a visual programming environment that uses hypergraphs for representing, querying and visualizing software artifacts. The hypergraph representation allows to store semantic relations between software artifacts an can be visualized with well-known graph drawing algorithms. The proposed visual programming environment focuses not only on software visualization, but also offers context visualization for programming tasks. We present visualizations of an existing software system and demonstrate how contextual information can be displayed when browsing and modifying source code artifacts.\n"
      },
      "after": "a066d25486003a0a",
      "date": 1650275478711
    },
    {
      "type": "edit",
      "id": "51f662f625b05876",
      "item": {
        "type": "markdown",
        "id": "51f662f625b05876",
        "text": "> In this paper we present a concept of a visual programming environment that uses hypergraphs for representing, querying and visualizing software artifacts. The hypergraph representation allows to store semantic relations between software artifacts an can be visualized with well-known graph drawing algorithms. The proposed visual programming environment focuses not only on software visualization, but also offers context visualization for programming tasks. We present visualizations of an existing software system and demonstrate how contextual information can be displayed when browsing and modifying source code artifacts.\n"
      },
      "date": 1650275479984
    },
    {
      "item": {
        "type": "factory",
        "id": "a6f72171c4983471"
      },
      "id": "a6f72171c4983471",
      "type": "add",
      "after": "51f662f625b05876",
      "date": 1650275664064
    },
    {
      "type": "edit",
      "id": "a6f72171c4983471",
      "item": {
        "type": "paragraph",
        "id": "a6f72171c4983471",
        "text": "\nKAPEC, Peter, 2010. Visualizing software artifacts using hypergraphs. In: Proceedings of the 26th Spring Conference on Computer Graphics. Online. New York, NY, USA: Association for Computing Machinery. 13 May 2010. p. 27–32. [Accessed 18 April 2022]. SCCG ’10. ISBN 978-1-4503-0558-7. DOI 10.1145/1925059.1925067. "
      },
      "date": 1650275678150
    },
    {
      "type": "add",
      "id": "5392c98ed8d2ecb1",
      "item": {
        "type": "paragraph",
        "id": "5392c98ed8d2ecb1",
        "text": "> In this paper we present an alternative software visualization approach that is based on hypergraphs. Hypergraphs are used in all steps of the visualization process -- as a data model for representing software artifacts, trough a query mechanism based on hypergraphs up to the visualization level where we utilize interactive well known 3D graph visualizations methods. The proposed visualization aims to provide a visual programming environment for software developers. We also present visualizations of existing software projects.\n"
      },
      "after": "a6f72171c4983471",
      "date": 1650275680380
    },
    {
      "type": "edit",
      "id": "5392c98ed8d2ecb1",
      "item": {
        "type": "markdown",
        "id": "5392c98ed8d2ecb1",
        "text": "> In this paper we present an alternative software visualization approach that is based on hypergraphs. Hypergraphs are used in all steps of the visualization process -- as a data model for representing software artifacts, trough a query mechanism based on hypergraphs up to the visualization level where we utilize interactive well known 3D graph visualizations methods. The proposed visualization aims to provide a visual programming environment for software developers. We also present visualizations of existing software projects.\n"
      },
      "date": 1650275681197
    },
    {
      "item": {
        "type": "factory",
        "id": "ca62fab2b608d78c"
      },
      "id": "ca62fab2b608d78c",
      "type": "add",
      "after": "5392c98ed8d2ecb1",
      "date": 1650275841259
    },
    {
      "type": "edit",
      "id": "ca62fab2b608d78c",
      "item": {
        "type": "paragraph",
        "id": "ca62fab2b608d78c",
        "text": "\nKAPEC, P., PAPRČKA, M., PAŽITNAJ, A. and POLÁK, V., 2013. Exploring 3D GPU-accelerated graph visualization with time-traveling virtual camera. Journal of Theoretical and Applied Computer Science. 2013. No. Vol. 7, nr 2, p. 16–30. "
      },
      "date": 1650275849640
    },
    {
      "type": "add",
      "id": "4b12a25f12804f09",
      "item": {
        "type": "paragraph",
        "id": "4b12a25f12804f09",
        "text": "> Graph visualization is an ongoing research area with many open problems. Graphs are often visualized in 2D space and recently also 3D visualizations emerge. However, the added third dimension adds additional problems that make the graph comprehension more difficult. In this paper we focus on navigating and exploring 3D graph visualizations. We present our approach for the automation of virtual camera movement for better graph exploration. This camera movement is enhanced with experimental exploration recording and play-back that allows to fork exploration paths at any time and to switch between them. We also present how graph layout can be accelerated with GPU in combination with scene graph structures. These features were added into our graph visualization system that we use for software visualization. We present several visualizations of the structure and the evolution of software systems.\n"
      },
      "after": "ca62fab2b608d78c",
      "date": 1650275851082
    },
    {
      "type": "edit",
      "id": "4b12a25f12804f09",
      "item": {
        "type": "markdown",
        "id": "4b12a25f12804f09",
        "text": "> Graph visualization is an ongoing research area with many open problems. Graphs are often visualized in 2D space and recently also 3D visualizations emerge. However, the added third dimension adds additional problems that make the graph comprehension more difficult. In this paper we focus on navigating and exploring 3D graph visualizations. We present our approach for the automation of virtual camera movement for better graph exploration. This camera movement is enhanced with experimental exploration recording and play-back that allows to fork exploration paths at any time and to switch between them. We also present how graph layout can be accelerated with GPU in combination with scene graph structures. These features were added into our graph visualization system that we use for software visualization. We present several visualizations of the structure and the evolution of software systems.\n"
      },
      "date": 1650275852144
    }
  ]
}