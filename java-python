{
  "title": "Java Python",
  "story": [
    {
      "type": "html",
      "text": "Used to be \"JPython\", more recently changed to \"jython\".",
      "id": "1d34a3c0809689f438517bf642708a38"
    },
    {
      "type": "html",
      "text": "\nAn implementation of the [[Python Language]] as one of the [[Other Languages For The Java Vm]].",
      "id": "323f349fe455be9203942aaf5519141d"
    },
    {
      "type": "html",
      "text": " [http://www.jython.org/ www.jython.org]",
      "id": "518e96429bb4e5903c5258520d947873"
    },
    {
      "type": "html",
      "text": "<i>from the site ... (some from an older site)</i>",
      "id": "4239ff51c665e8c79add22e5a0911769"
    },
    {
      "type": "html",
      "text": "\nJython is an implementation of the high-level, dynamic, object-oriented [[Python Language]] written in 100% Pure Java, and seamlessly integrated with the Java platform. It thus allows you to run Python on any Java platform. Jython is freely available for both commercial and non-commercial use and is distributed with source code. Jython is complementary to Java and is especially suited for the following tasks:",
      "id": "abf9d7aaba44cbfb86f8441f9c414450"
    },
    {
      "type": "html",
      "text": " Embedded scripting - Java programmers can add the JPython libraries to their system to allow end users to write simple or complicated scripts that add functionality to the application.  Since JPython is certified 100% Pure Java, it can be added to an application without fear of compromising its ability to run on all Java platforms. ",
      "id": "24fd67b39a5a0d61b650090e0ed0c7a3"
    },
    {
      "type": "html",
      "text": " Interactive experimentation - Jython provides an interactive interpreter that can be used to interact with Java packages or with running Java applications. This allows programmers to experiment and debug any Java system using Jython.",
      "id": "c61b5c5732dee93ae9540e390ef9af44"
    },
    {
      "type": "html",
      "text": " Rapid application development - [[Python Language]] programs are typically 2-10X shorter than the equivalent Java program. This translates directly to increased programmer productivity. The seamless interaction between [[Python Language]] and Java allows developers to freely mix the two languages both during development and in shipping products. ",
      "id": "c76085cc731188290cdc4ec3cd9db88a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2e1b5bc9e2d8b23b2b8f6c9729d2fb08"
    },
    {
      "type": "html",
      "text": "\n[[Jim Hugunin]] began JPython in 1997. He left JPython development in '99. (He later began [[Iron Python]], in 2003.) ",
      "id": "0f031d14eb6bbf892424a76c9a5dab47"
    },
    {
      "type": "html",
      "text": " \"The Story of Jython\", by Jim Hugunin\t",
      "id": "53ec421a78f745d5b8c1c491f9a87151"
    },
    {
      "type": "html",
      "text": " [http://hugunin.net/story_of_jython.html hugunin.net]",
      "id": "e69df995b5cf6a099db5ebecebe92d32"
    },
    {
      "type": "html",
      "text": "\n[[Barry Warsaw]] succeeded Hugunin, moving Jython onto [[Source Forge]] and certified-[[Open Source]] licensing. From about 2000 [[Finn Bock]] and then [[Samuele Pedroni]] took over development. For some time Jython was an important Python implementation and one of the most successful of the JVM languages. But development stalled at some point after 2001. (Pedroni switched his focus to [[Py Py]].) By mid-2007, the stable version of Jython was still at 2.1 while CPython had reached 2.5. The missed point-releases include considerable changes to core Python (including an overhaul of the object model) so Jython not only missed those features but also saw its compatibility with CPython decline. In relative terms, it lost some or all of its lead in maturity over other JVM languages including [[Jay Ruby]], [[Groovy Language]] and [[Scala Language]]. As of August 2007, Jython may finally be escaping its stall; Jython 2.2 has reached RC3.",
      "id": "7d9e1428567cc9d7e970a4d9b21e2fb7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2e1b5bc9e2d8b23b2b8f6c9729d2fb08"
    },
    {
      "type": "html",
      "text": "<b>Strengths:</b>",
      "id": "ed806cd8ac4b9b640954392a4ff75dfa"
    },
    {
      "type": "html",
      "text": " Ability to use a scripting language from within Java. <i>This alone makes it worthwhile!</i>",
      "id": "6d8fa953769078892c19689767d4dba0"
    },
    {
      "type": "html",
      "text": " Excellent ability to invoke [[Java Language]] objects from Python code. <i>This means that you have easy access to all those Java libraries. In fact, it's often EASIER to call Java objects from the Python side than from the Java side! The only time it gets annoying is when there are multiple methods with the same name but multiple signatures.</i> That's called \"method overloading\", grasshopper.",
      "id": "cfb4171861eb2883105f1b0f34aacf83"
    },
    {
      "type": "html",
      "text": " Pretty darn easy to invoke [[Python Language]] objects from Java code. <i>This less used, but vitally important for complete integration.</i>",
      "id": "9c64af3bd88c54bbe2f9bcdb2e68c40f"
    },
    {
      "type": "html",
      "text": " All the \"obvious\" conversions are performed for you. <i>Strings, numbers, arrays, and things like that are typically converted for you with little effort. A java.lang.String just becomes a Python string (and vice-versa) with no need to \"convert\". With fancier objects you'll need to make some effort.</i>",
      "id": "5c8235b2d54a4fd07ab756390e5eeee5"
    },
    {
      "type": "html",
      "text": " Python interpreter can easily be embedded in Java. <i>The existence of \"exec\" (or its equivalent) in [[Perl Language]], [[Python Language]], [[Lisp Language]], etc. makes it quite easy to make things user-scriptable (at runtime). Now you can do it for [[Java Language]] too, only the user scripts get written in Python.</i>",
      "id": "cd02d679b771a64b00f63812c60445cf"
    },
    {
      "type": "html",
      "text": "<b>Weaknesses:</b>",
      "id": "a5d74fa03ee0231033c7aa5cfeb44f81"
    },
    {
      "type": "html",
      "text": " Class loading is weak. For example, if you change a script, you either need to run it with a new class loader or restart the application that will exec the script. Furthermore, reload is shallow, so if any imported scripts change, they also need to be recompiled and run under a new class loader.",
      "id": "fbf8a19992c317994444560b9c669964"
    },
    {
      "type": "html",
      "text": " Jython programs run much more slowly than CPython ones.",
      "id": "9e316858b7a3238e87c90ec2ec9fe4db"
    },
    {
      "type": "html",
      "text": " Jython lags several \"point\" versions behind CPython, plus it doesn't have all the same libraries and functionality as CPython.",
      "id": "513f630905856d740d8d0317dbd8a9c9"
    },
    {
      "type": "html",
      "text": " Java arrays are a problem.  Use the jarray module for Java array support.",
      "id": "4d72df96a89dcd347fb984aceaccede6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2e1b5bc9e2d8b23b2b8f6c9729d2fb08"
    },
    {
      "type": "html",
      "text": "\nQ.Has Jython any benefits against the [[Bean Shell]]? -- <i>Reasonable question actually. [[Bean Shell]], [[Rhino Interpreter]] and [[Java Python]] all began around 1997, making them \"first-generation\" JVM languages. (Where clearly Java was the zeroth-generation JVM language. :) ) How do they, or used they, to compare?</i>",
      "id": "f67bc65f963ceae00aaf2df3eec15bb5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2e1b5bc9e2d8b23b2b8f6c9729d2fb08"
    },
    {
      "type": "html",
      "text": "[[Category Python]] [[Category Java]] [[Category Programming Language]]",
      "id": "db4aeb0a6456de03fe207e8f5da09f5b"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?JavaPython c2.com]",
      "id": "c0bb40c23bef928fac12806feb240b3a"
    }
  ],
  "journal": [
    {
      "date": 1412187131000,
      "id": "0d672a88dbfc5b984b970812e5268203",
      "type": "create",
      "item": {
        "title": "Java Python",
        "story": [
          {
            "type": "html",
            "text": "Used to be \"JPython\", more recently changed to \"jython\".",
            "id": "1d34a3c0809689f438517bf642708a38"
          },
          {
            "type": "html",
            "text": "\nAn implementation of the [[Python Language]] as one of the [[Other Languages For The Java Vm]].",
            "id": "323f349fe455be9203942aaf5519141d"
          },
          {
            "type": "html",
            "text": " [http://www.jython.org/ www.jython.org]",
            "id": "518e96429bb4e5903c5258520d947873"
          },
          {
            "type": "html",
            "text": "<i>from the site ... (some from an older site)</i>",
            "id": "4239ff51c665e8c79add22e5a0911769"
          },
          {
            "type": "html",
            "text": "\nJython is an implementation of the high-level, dynamic, object-oriented [[Python Language]] written in 100% Pure Java, and seamlessly integrated with the Java platform. It thus allows you to run Python on any Java platform. Jython is freely available for both commercial and non-commercial use and is distributed with source code. Jython is complementary to Java and is especially suited for the following tasks:",
            "id": "abf9d7aaba44cbfb86f8441f9c414450"
          },
          {
            "type": "html",
            "text": " Embedded scripting - Java programmers can add the JPython libraries to their system to allow end users to write simple or complicated scripts that add functionality to the application.  Since JPython is certified 100% Pure Java, it can be added to an application without fear of compromising its ability to run on all Java platforms. ",
            "id": "24fd67b39a5a0d61b650090e0ed0c7a3"
          },
          {
            "type": "html",
            "text": " Interactive experimentation - Jython provides an interactive interpreter that can be used to interact with Java packages or with running Java applications. This allows programmers to experiment and debug any Java system using Jython.",
            "id": "c61b5c5732dee93ae9540e390ef9af44"
          },
          {
            "type": "html",
            "text": " Rapid application development - [[Python Language]] programs are typically 2-10X shorter than the equivalent Java program. This translates directly to increased programmer productivity. The seamless interaction between [[Python Language]] and Java allows developers to freely mix the two languages both during development and in shipping products. ",
            "id": "c76085cc731188290cdc4ec3cd9db88a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2e1b5bc9e2d8b23b2b8f6c9729d2fb08"
          },
          {
            "type": "html",
            "text": "\n[[Jim Hugunin]] began JPython in 1997. He left JPython development in '99. (He later began [[Iron Python]], in 2003.) ",
            "id": "0f031d14eb6bbf892424a76c9a5dab47"
          },
          {
            "type": "html",
            "text": " \"The Story of Jython\", by Jim Hugunin\t",
            "id": "53ec421a78f745d5b8c1c491f9a87151"
          },
          {
            "type": "html",
            "text": " [http://hugunin.net/story_of_jython.html hugunin.net]",
            "id": "e69df995b5cf6a099db5ebecebe92d32"
          },
          {
            "type": "html",
            "text": "\n[[Barry Warsaw]] succeeded Hugunin, moving Jython onto [[Source Forge]] and certified-[[Open Source]] licensing. From about 2000 [[Finn Bock]] and then [[Samuele Pedroni]] took over development. For some time Jython was an important Python implementation and one of the most successful of the JVM languages. But development stalled at some point after 2001. (Pedroni switched his focus to [[Py Py]].) By mid-2007, the stable version of Jython was still at 2.1 while CPython had reached 2.5. The missed point-releases include considerable changes to core Python (including an overhaul of the object model) so Jython not only missed those features but also saw its compatibility with CPython decline. In relative terms, it lost some or all of its lead in maturity over other JVM languages including [[Jay Ruby]], [[Groovy Language]] and [[Scala Language]]. As of August 2007, Jython may finally be escaping its stall; Jython 2.2 has reached RC3.",
            "id": "7d9e1428567cc9d7e970a4d9b21e2fb7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2e1b5bc9e2d8b23b2b8f6c9729d2fb08"
          },
          {
            "type": "html",
            "text": "<b>Strengths:</b>",
            "id": "ed806cd8ac4b9b640954392a4ff75dfa"
          },
          {
            "type": "html",
            "text": " Ability to use a scripting language from within Java. <i>This alone makes it worthwhile!</i>",
            "id": "6d8fa953769078892c19689767d4dba0"
          },
          {
            "type": "html",
            "text": " Excellent ability to invoke [[Java Language]] objects from Python code. <i>This means that you have easy access to all those Java libraries. In fact, it's often EASIER to call Java objects from the Python side than from the Java side! The only time it gets annoying is when there are multiple methods with the same name but multiple signatures.</i> That's called \"method overloading\", grasshopper.",
            "id": "cfb4171861eb2883105f1b0f34aacf83"
          },
          {
            "type": "html",
            "text": " Pretty darn easy to invoke [[Python Language]] objects from Java code. <i>This less used, but vitally important for complete integration.</i>",
            "id": "9c64af3bd88c54bbe2f9bcdb2e68c40f"
          },
          {
            "type": "html",
            "text": " All the \"obvious\" conversions are performed for you. <i>Strings, numbers, arrays, and things like that are typically converted for you with little effort. A java.lang.String just becomes a Python string (and vice-versa) with no need to \"convert\". With fancier objects you'll need to make some effort.</i>",
            "id": "5c8235b2d54a4fd07ab756390e5eeee5"
          },
          {
            "type": "html",
            "text": " Python interpreter can easily be embedded in Java. <i>The existence of \"exec\" (or its equivalent) in [[Perl Language]], [[Python Language]], [[Lisp Language]], etc. makes it quite easy to make things user-scriptable (at runtime). Now you can do it for [[Java Language]] too, only the user scripts get written in Python.</i>",
            "id": "cd02d679b771a64b00f63812c60445cf"
          },
          {
            "type": "html",
            "text": "<b>Weaknesses:</b>",
            "id": "a5d74fa03ee0231033c7aa5cfeb44f81"
          },
          {
            "type": "html",
            "text": " Class loading is weak. For example, if you change a script, you either need to run it with a new class loader or restart the application that will exec the script. Furthermore, reload is shallow, so if any imported scripts change, they also need to be recompiled and run under a new class loader.",
            "id": "fbf8a19992c317994444560b9c669964"
          },
          {
            "type": "html",
            "text": " Jython programs run much more slowly than CPython ones.",
            "id": "9e316858b7a3238e87c90ec2ec9fe4db"
          },
          {
            "type": "html",
            "text": " Jython lags several \"point\" versions behind CPython, plus it doesn't have all the same libraries and functionality as CPython.",
            "id": "513f630905856d740d8d0317dbd8a9c9"
          },
          {
            "type": "html",
            "text": " Java arrays are a problem.  Use the jarray module for Java array support.",
            "id": "4d72df96a89dcd347fb984aceaccede6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2e1b5bc9e2d8b23b2b8f6c9729d2fb08"
          },
          {
            "type": "html",
            "text": "\nQ.Has Jython any benefits against the [[Bean Shell]]? -- <i>Reasonable question actually. [[Bean Shell]], [[Rhino Interpreter]] and [[Java Python]] all began around 1997, making them \"first-generation\" JVM languages. (Where clearly Java was the zeroth-generation JVM language. :) ) How do they, or used they, to compare?</i>",
            "id": "f67bc65f963ceae00aaf2df3eec15bb5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2e1b5bc9e2d8b23b2b8f6c9729d2fb08"
          },
          {
            "type": "html",
            "text": "[[Category Python]] [[Category Java]] [[Category Programming Language]]",
            "id": "db4aeb0a6456de03fe207e8f5da09f5b"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?JavaPython c2.com]",
            "id": "c0bb40c23bef928fac12806feb240b3a"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1626126604498
    }
  ]
}