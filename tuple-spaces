{
  "title": "Tuple Spaces",
  "story": [
    {
      "type": "paragraph",
      "id": "8e74995ef8afca0e",
      "text": "Tuple spaces have turned out to be one of the most fundamental abstractions for coordinating communicating agents. At the same time, researchers continue to propose new variants of tuple spaces, since no one approach seems to be universally applicable to all problem domains. Some models offer a certain configurability, but existing approaches generally stop at a fixed set of configuration options and static configuration at instantiation time. We argue that a more open approach is needed, and present [[OpenSpaces]], an object-oriented framework that supports static configurability through subclassing across several dimensions, as well as dynamic configurability of policies through run-time composition. We introduce OpenSpaces by showing how it can be used to instantiate a typical application, and we present an overview of the framework, implemented in Smalltalk, detailing the various degrees of configurability. [https://link.springer.com/chapter/10.1007/3-540-45263-X_1 doi]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Tuple Spaces",
        "story": []
      },
      "date": 1660824878485
    },
    {
      "item": {
        "type": "factory",
        "id": "8e74995ef8afca0e"
      },
      "id": "8e74995ef8afca0e",
      "type": "add",
      "date": 1660824891739
    },
    {
      "type": "edit",
      "id": "8e74995ef8afca0e",
      "item": {
        "type": "paragraph",
        "id": "8e74995ef8afca0e",
        "text": "Tuple spaces have turned out to be one of the most fundamental abstractions for coordinating communicating agents. At the same time, researchers continue to propose new variants of tuple spaces, since no one approach seems to be universally applicable to all problem domains. Some models offer a certain configurability, but existing approaches generally stop at a fixed set of configuration options and static configuration at instantiation time. We argue that a more open approach is needed, and present OpenSpaces, an object-oriented framework that supports static configurability through subclassing across several dimensions, as well as dynamic configurability of policies through run-time composition. We introduce OpenSpaces by showing how it can be used to instantiate a typical application, and we present an overview of the framework, implemented in Smalltalk, detailing the various degrees of configurability."
      },
      "date": 1660824894458
    },
    {
      "type": "edit",
      "id": "8e74995ef8afca0e",
      "item": {
        "type": "paragraph",
        "id": "8e74995ef8afca0e",
        "text": "Tuple spaces have turned out to be one of the most fundamental abstractions for coordinating communicating agents. At the same time, researchers continue to propose new variants of tuple spaces, since no one approach seems to be universally applicable to all problem domains. Some models offer a certain configurability, but existing approaches generally stop at a fixed set of configuration options and static configuration at instantiation time. We argue that a more open approach is needed, and present OpenSpaces, an object-oriented framework that supports static configurability through subclassing across several dimensions, as well as dynamic configurability of policies through run-time composition. We introduce OpenSpaces by showing how it can be used to instantiate a typical application, and we present an overview of the framework, implemented in Smalltalk, detailing the various degrees of configurability. [https://link.springer.com/chapter/10.1007/3-540-45263-X_1 doi]"
      },
      "date": 1660824911187
    },
    {
      "type": "edit",
      "id": "8e74995ef8afca0e",
      "item": {
        "type": "paragraph",
        "id": "8e74995ef8afca0e",
        "text": "Tuple spaces have turned out to be one of the most fundamental abstractions for coordinating communicating agents. At the same time, researchers continue to propose new variants of tuple spaces, since no one approach seems to be universally applicable to all problem domains. Some models offer a certain configurability, but existing approaches generally stop at a fixed set of configuration options and static configuration at instantiation time. We argue that a more open approach is needed, and present OpenSpaces, an object-oriented framework that supports static configurability through subclassing across several dimensions, as well as dynamic configurability of policies through run-time composition. We introduce [[OpenSpaces]] by showing how it can be used to instantiate a typical application, and we present an overview of the framework, implemented in Smalltalk, detailing the various degrees of configurability. [https://link.springer.com/chapter/10.1007/3-540-45263-X_1 doi]"
      },
      "date": 1660824948146
    },
    {
      "type": "edit",
      "id": "8e74995ef8afca0e",
      "item": {
        "type": "paragraph",
        "id": "8e74995ef8afca0e",
        "text": "Tuple spaces have turned out to be one of the most fundamental abstractions for coordinating communicating agents. At the same time, researchers continue to propose new variants of tuple spaces, since no one approach seems to be universally applicable to all problem domains. Some models offer a certain configurability, but existing approaches generally stop at a fixed set of configuration options and static configuration at instantiation time. We argue that a more open approach is needed, and present [[OpenSpaces]], an object-oriented framework that supports static configurability through subclassing across several dimensions, as well as dynamic configurability of policies through run-time composition. We introduce OpenSpaces by showing how it can be used to instantiate a typical application, and we present an overview of the framework, implemented in Smalltalk, detailing the various degrees of configurability. [https://link.springer.com/chapter/10.1007/3-540-45263-X_1 doi]"
      },
      "date": 1660824996939
    }
  ]
}