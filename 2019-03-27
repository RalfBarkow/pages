{
  "title": "2019-03-27",
  "story": [
    {
      "type": "paragraph",
      "id": "7e9e426c90d73fcc",
      "text": "Today is a short entry because I have a lot to do. I'm getting ready for Tokyo and it looks like I might teach a class there. That would be very exciting."
    },
    {
      "type": "paragraph",
      "id": "7c927c495de52010",
      "text": "[[Edwards Demming]] is one of my heroes. I call him the grandfather of Agile since his ideas influenced our industry so much. "
    },
    {
      "type": "paragraph",
      "id": "3c30652b830acc09",
      "text": "I know two people who were his students and both of them told me that he was not a very happy person late in life. He was frustrated and angry."
    },
    {
      "type": "paragraph",
      "id": "202f520325e56cb9",
      "text": "Even with the huge successes Japan made by employing his ideas, many US enterprises were reluctant to try his suggestions. The West is still stuck in Taylorism."
    },
    {
      "type": "paragraph",
      "id": "80caf5365eac01b6",
      "text": "Manufacturing is all about quality and consistency of work. The work is always the same so finding ways to create fast, safe, reliable repeatability is the name of the game in manufacturing."
    },
    {
      "type": "paragraph",
      "id": "0e242367141d730d",
      "text": "But software isn't manufacturing. Taylorism doesn't work in software (it doesn't work in manufacturing either but that's a different discussion). Building software requires a different approach."
    },
    {
      "type": "paragraph",
      "id": "6546d07e56258504",
      "text": "Like other forms of engineering, software development requires making fine distinctions. We have to break down tasks into their most simple and basic elements. We do this at the most minute level in software because even simple tasks require many tiny steps to make happen."
    },
    {
      "type": "paragraph",
      "id": "df51a51baacd4f55",
      "text": "But there's another aspect of software development that complements this very analytical way of thinking, which is almost the opposite. It's about making connections. It's more art than science and it's every bit as important for building maintainable software."
    },
    {
      "type": "paragraph",
      "id": "463b5d9a5fd110f5",
      "text": "We make distinctions by asking the question, \"How are these things different from each other?\" We make connections by asking a very different question. We ask, \"How are these things similar to each other?\""
    },
    {
      "type": "paragraph",
      "id": "b45cdcb5c650fee9",
      "text": "These two questions require different parts of our brain to process. Christopher Alexander called these two approaches to design, design by synthesis and design by differentiation. It was only a couple of paragraphs in A Timeless Way of Building but it made a big impression on me."
    },
    {
      "type": "paragraph",
      "id": "6c7578fd6637e373",
      "text": "In software development, we must make distinctions in order to get the computer to perform a task. But we also must make connections in order to make the software we write maintainable."
    },
    {
      "type": "paragraph",
      "id": "42714603cfe200e0",
      "text": "By seeing how concepts, tasks, and processes are similar we can collapse redundancy build systems that are more straightforward to extend. Redundancy is the bain of a developer's existence because when something has to change in software we are required to modify the code in multiple places. "
    },
    {
      "type": "paragraph",
      "id": "8664f46b7726cbd2",
      "text": "We remove redundancy by asking the question, \"How are these concepts, tasks, or processes the same?\" Often, we can collapse multiple instances of code that do the same thing into a single instance."
    },
    {
      "type": "paragraph",
      "id": "141808a8a22d39dc",
      "text": "Looking for how different things are the same is the basis of abstract thought and intelligence. IQ is largely based on our ability to abstract, which Jame Flynn has shown to steadily increase with each generation. IQ is not fixed or based on birthright, IQ, and intelligence, in general, can be developed and one of the most powerful ways I've found to do this is to discover similarities between dissimilar things. "
    },
    {
      "type": "paragraph",
      "id": "c26aa694bec7afdb",
      "text": "James Coplien wrote his doctoral thesis on this. It's called Multiparadigm Design for C++ and in it, he describes a technique he called CVA or Commonality-Variability Analysis. CVA is the most powerful design methodology that I've ever come across but few developers have heard of it."
    },
    {
      "type": "paragraph",
      "id": "1b133d7c201d4a08",
      "text": "You may be more familiar with this."
    },
    {
      "type": "paragraph",
      "id": "5e61b421bfe55a1b",
      "text": "\"One of these things is not like the other, one of these things just doesn't belong. If you guess which thing is not like the other, Well then my song is done.\""
    },
    {
      "type": "paragraph",
      "id": "79ae748f5eb06506",
      "text": "Yes, that game we used to play on Sesame Street has all the elements of CVA. We first identify the context, then we find the one in the set that's most different. "
    },
    {
      "type": "paragraph",
      "id": "3e2b469a0cc993e6",
      "text": "This is one of the techniques I teach to software developers. It helps us discover the right abstractions in our code that drive us to create code that's more resilient to change."
    },
    {
      "type": "paragraph",
      "id": "288de46f84112023",
      "text": "But the thing that excites me the most is that as we increase and develop our IQ, intelligence, and our ability to abstract, we are also increasing and developer our capacity for compassion because compassion comes from the highest form of asking this question, \"How am I like you?\" and \"How are you like me?\" Seeing ourselves in others is the foundation for compassion."
    },
    {
      "type": "paragraph",
      "id": "3aa2f2b1484bbc7f",
      "text": "And this is how our intellect, which has led us away from humanity in many ways in pursuit of pure science and pure ideas will lead us back to each other."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2019-03-27",
        "story": []
      },
      "date": 1553697554554
    },
    {
      "item": {
        "type": "factory",
        "id": "7e9e426c90d73fcc"
      },
      "id": "7e9e426c90d73fcc",
      "type": "add",
      "date": 1553697557037
    },
    {
      "type": "edit",
      "id": "7e9e426c90d73fcc",
      "item": {
        "type": "paragraph",
        "id": "7e9e426c90d73fcc",
        "text": "Today is a short entry because I have a lot to do. I'm getting ready for Tokyo and it looks like I might teach a class there. That would be very exciting."
      },
      "date": 1553697605413
    },
    {
      "type": "add",
      "id": "7c927c495de52010",
      "item": {
        "type": "paragraph",
        "id": "7c927c495de52010",
        "text": "Edwards Demming is one of my heroes. I call him the grandfather of Agile since his ideas influenced our industry so much. "
      },
      "after": "7e9e426c90d73fcc",
      "date": 1553697683751
    },
    {
      "type": "add",
      "id": "3c30652b830acc09",
      "item": {
        "type": "paragraph",
        "id": "3c30652b830acc09",
        "text": "I know two people who were his students and both of them told me that he was not a very happy person late in life. He was frustrated and angry."
      },
      "after": "7c927c495de52010",
      "date": 1553697745694
    },
    {
      "type": "add",
      "id": "202f520325e56cb9",
      "item": {
        "type": "paragraph",
        "id": "202f520325e56cb9",
        "text": "Even with the huge successes Japan made by employing his ideas, many US enterprises were reluctant to try his suggestions. The West is still stuck in Talyorism."
      },
      "after": "3c30652b830acc09",
      "date": 1553697893655
    },
    {
      "type": "edit",
      "id": "202f520325e56cb9",
      "item": {
        "type": "paragraph",
        "id": "202f520325e56cb9",
        "text": "Even with the huge successes Japan made by employing his ideas, many US enterprises were reluctant to try his suggestions. The West is still stuck in Taylorism."
      },
      "date": 1553697911548
    },
    {
      "type": "add",
      "id": "80caf5365eac01b6",
      "item": {
        "type": "paragraph",
        "id": "80caf5365eac01b6",
        "text": "Manufacturing is all about quality and consistency of work. The work is always the same so finding ways to create fast, safe, reliable repeatability is the name of the game in manufacturing."
      },
      "after": "202f520325e56cb9",
      "date": 1553697963732
    },
    {
      "type": "add",
      "id": "0e242367141d730d",
      "item": {
        "type": "paragraph",
        "id": "0e242367141d730d",
        "text": "But software isn't manufacturing. Taylorism doesn't work in software (it doesn't work in manufacturing either but that's a different discussion). Building software requires a different approach."
      },
      "after": "80caf5365eac01b6",
      "date": 1553698062161
    },
    {
      "type": "add",
      "id": "6546d07e56258504",
      "item": {
        "type": "paragraph",
        "id": "6546d07e56258504",
        "text": "Like other forms of engineering, software development requires making fine distinctions. We have to break down tasks into their most simple and basic elements. We do this at the most minute level in software because even simple tasks require many tiny steps to make happen."
      },
      "after": "0e242367141d730d",
      "date": 1553698186905
    },
    {
      "type": "add",
      "id": "df51a51baacd4f55",
      "item": {
        "type": "paragraph",
        "id": "df51a51baacd4f55",
        "text": "But there's another aspect of software development that complements this very analytical way of thinking, which is almost the opposite. It's about making connections. It's more art than science and it's every bit as important for building maintainable software."
      },
      "after": "6546d07e56258504",
      "date": 1553698263489
    },
    {
      "type": "add",
      "id": "463b5d9a5fd110f5",
      "item": {
        "type": "paragraph",
        "id": "463b5d9a5fd110f5",
        "text": "We make distinctions by asking the question, \"How are these things different from each other?\""
      },
      "after": "df51a51baacd4f55",
      "date": 1553698307474
    },
    {
      "type": "edit",
      "id": "463b5d9a5fd110f5",
      "item": {
        "type": "paragraph",
        "id": "463b5d9a5fd110f5",
        "text": "We make distinctions by asking the question, \"How are these things different from each other?\" We make connections by asking a very different question. We ask, \"How are these things similar to each other?\""
      },
      "date": 1553698361469
    },
    {
      "type": "add",
      "id": "b45cdcb5c650fee9",
      "item": {
        "type": "paragraph",
        "id": "b45cdcb5c650fee9",
        "text": "These two questions require different parts of our brain to process. Christopher Alexander called these two approaches to design, design by synthesis and design by differentiation. It was only a couple of paragraphs in A Timeless Way of Building but it make a big impression on me."
      },
      "after": "463b5d9a5fd110f5",
      "date": 1553698485533
    },
    {
      "type": "edit",
      "id": "b45cdcb5c650fee9",
      "item": {
        "type": "paragraph",
        "id": "b45cdcb5c650fee9",
        "text": "These two questions require different parts of our brain to process. Christopher Alexander called these two approaches to design, design by synthesis and design by differentiation. It was only a couple of paragraphs in A Timeless Way of Building but it made a big impression on me."
      },
      "date": 1553698498811
    },
    {
      "type": "add",
      "id": "6c7578fd6637e373",
      "item": {
        "type": "paragraph",
        "id": "6c7578fd6637e373",
        "text": "In software development, we must make distinctions in order to get the computer to perform a task. But we also must make connections in order to make the software we write maintainable."
      },
      "after": "b45cdcb5c650fee9",
      "date": 1553698580125
    },
    {
      "type": "add",
      "id": "42714603cfe200e0",
      "item": {
        "type": "paragraph",
        "id": "42714603cfe200e0",
        "text": "By seeing how concepts, tasks, and processes are similar we can collapse redundancy build systems that are more straightforward to extend. Redundancy is the bain of a developer's existence because when something has to change in software we are required to modify the code in multiple places. "
      },
      "after": "6c7578fd6637e373",
      "date": 1553698708713
    },
    {
      "type": "add",
      "id": "8664f46b7726cbd2",
      "item": {
        "type": "paragraph",
        "id": "8664f46b7726cbd2",
        "text": "We remove redundancy by asking the question, \"How are these concepts, tasks, or processes the same?\" Often, we can collapse multiple instances of code that do the same thing into a single instance."
      },
      "after": "42714603cfe200e0",
      "date": 1553698845425
    },
    {
      "type": "add",
      "id": "141808a8a22d39dc",
      "item": {
        "type": "paragraph",
        "id": "141808a8a22d39dc",
        "text": "Looking for how different things are the same is the basis of abstract thought and intelligence. IQ is largely based on our ability to abstract, which "
      },
      "after": "8664f46b7726cbd2",
      "date": 1553698919487
    },
    {
      "type": "edit",
      "id": "141808a8a22d39dc",
      "item": {
        "type": "paragraph",
        "id": "141808a8a22d39dc",
        "text": "Looking for how different things are the same is the basis of abstract thought and intelligence. IQ is largely based on our ability to abstract, which Jame Flynn has shown to steadily increase with each generation. IQ is not fixed or based on birthright, IQ, and intelligence, in general, can be developed and one of the most powerful ways I've found to do this is to discover similarities between dissimilar things. "
      },
      "date": 1553699080426
    },
    {
      "type": "add",
      "id": "c26aa694bec7afdb",
      "item": {
        "type": "paragraph",
        "id": "c26aa694bec7afdb",
        "text": "James Coplien wrote his doctoral thesis on this. It's called Multiparadigm Design for C++ and in it, he describes a technique he called CVA or Commonality-Variability Analysis. CVA is the most powerful design methodology that I've ever come across but few developers have heard of it."
      },
      "after": "141808a8a22d39dc",
      "date": 1553699222045
    },
    {
      "type": "add",
      "id": "1b133d7c201d4a08",
      "item": {
        "type": "paragraph",
        "id": "1b133d7c201d4a08",
        "text": "You may be more familiar with this."
      },
      "after": "c26aa694bec7afdb",
      "date": 1553699236415
    },
    {
      "type": "add",
      "id": "5e61b421bfe55a1b",
      "item": {
        "type": "paragraph",
        "id": "5e61b421bfe55a1b",
        "text": "\"One of these things is not like the other, one of these things just doesn't belong. If you guess which thing is not like the other, Well then my song is done.\""
      },
      "after": "1b133d7c201d4a08",
      "date": 1553699278283
    },
    {
      "type": "add",
      "id": "79ae748f5eb06506",
      "item": {
        "type": "paragraph",
        "id": "79ae748f5eb06506",
        "text": "Yes, that game we used to play on Sesame Street has all the elements of CVA. We first identify the context, then we find the one in the set that's most different. "
      },
      "after": "5e61b421bfe55a1b",
      "date": 1553699352832
    },
    {
      "type": "add",
      "id": "3e2b469a0cc993e6",
      "item": {
        "type": "paragraph",
        "id": "3e2b469a0cc993e6",
        "text": "This is one of the techniques I teach to software developers. It helps us discover the right abstractions in our code that drive us to create code that's more resilient to change."
      },
      "after": "79ae748f5eb06506",
      "date": 1553699443559
    },
    {
      "type": "add",
      "id": "288de46f84112023",
      "item": {
        "type": "paragraph",
        "id": "288de46f84112023",
        "text": "But the thing that excites me the most is that as we increase and develop our IQ, intelligence, and our ability to abstract, we are also increasing and developer our capacity for compassion because compassion comes from the highest form of asking this question, \"How am I like you?\" and \"How are you like me?\" Seeing ourselves in others is the foundation for compassion."
      },
      "after": "3e2b469a0cc993e6",
      "date": 1553699629866
    },
    {
      "type": "add",
      "id": "3aa2f2b1484bbc7f",
      "item": {
        "type": "paragraph",
        "id": "3aa2f2b1484bbc7f",
        "text": "And this is how our intellect, which has led us away from humanity in many ways in pursuit of pure science and pure ideas will lead us back to each other."
      },
      "after": "288de46f84112023",
      "date": 1553699685181
    },
    {
      "type": "fork",
      "site": "david.tries.fed.wiki",
      "date": 1650990835365
    },
    {
      "type": "edit",
      "id": "7c927c495de52010",
      "item": {
        "type": "paragraph",
        "id": "7c927c495de52010",
        "text": "[[Edwards Demming]] is one of my heroes. I call him the grandfather of Agile since his ideas influenced our industry so much. "
      },
      "date": 1650990852519
    }
  ]
}