{
  "title": "Smalltalk MVC",
  "story": [
    {
      "type": "paragraph",
      "id": "56149b9eb1288bda",
      "text": "⇒ [[Smalltalk MVC]] Translated to JavaScript. [http://michaux.ca/articles/smalltalk-mvc-translated-to-javascript post], [https://web.archive.org/web/20220319141920/http://michaux.ca/articles/smalltalk-mvc-translated-to-javascript wayback] "
    },
    {
      "type": "markdown",
      "id": "afc7d507f7f0e0be",
      "text": "> The observable-related methods (i.e. dependents, addDependent:, removeDependent:, changed, changed:, changed:with:) are defined in Smalltalk’s Object. This means almost all objects in Smalltalk can participate in the application as model objects. That is, they can be observed."
    },
    {
      "type": "paragraph",
      "id": "a1ba1bd32db0ddf1",
      "text": "The observer-related methods (i.e. update and update:with:) are also defined in Smalltalk’s Object class. This means almost all objects in Smalltalk can participate in the application as observers. Typically this ability is exploited by an application’s view objects."
    },
    {
      "type": "paragraph",
      "id": "20d04981ca36707a",
      "text": "Having both observable-related methods and observer-methods on almost all objects in an application means that almost all objects can communicate in the very decoupled way that the [[Observer Pattern]] enables. This indirect style of communication can be lead to code that is frustratingly difficult to debug. “Where is the call that initiated this error?!” Good choices about which objects should use this communication mechanism are required of the application programmer. The communication between models and views is the main use of the observer pattern in an MVC application. Models observing other models is common too. Some applications might (also) have controllers observing the model but this is much less common."
    },
    {
      "type": "paragraph",
      "id": "5834a3ed543d1a21",
      "text": "⇒ [[Model View Controller]]"
    },
    {
      "type": "paragraph",
      "id": "b6fd4ee64276973e",
      "text": "⇒ [[Publish Subscribe Model]]"
    },
    {
      "type": "graphviz",
      "id": "20ad7ccbd854834f",
      "text": "DOT FROM lambda-browsing"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Smalltalk MVC",
        "story": []
      },
      "date": 1654063105439
    },
    {
      "id": "20d04981ca36707a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "20d04981ca36707a",
        "text": "Having both observable-related methods and observer-methods on almost all objects in an application means that almost all objects can communicate in the very decoupled way that the [[observer pattern]] enables. This indirect style of communication can be lead to code that is frustratingly difficult to debug. “Where is the call that initiated this error?!” Good choices about which objects should use this communication mechanism are required of the application programmer. The communication between models and views is the main use of the observer pattern in an MVC application. Models observing other models is common too. Some applications might (also) have controllers observing the model but this is much less common."
      },
      "date": 1654063149103
    },
    {
      "id": "a1ba1bd32db0ddf1",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a1ba1bd32db0ddf1",
        "text": "The observer-related methods (i.e. update and update:with:) are also defined in Smalltalk’s Object class. This means almost all objects in Smalltalk can participate in the application as observers. Typically this ability is exploited by an application’s view objects."
      },
      "date": 1654063154283
    },
    {
      "id": "afc7d507f7f0e0be",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "afc7d507f7f0e0be",
        "text": "> The observable-related methods (i.e. dependents, addDependent:, removeDependent:, changed, changed:, changed:with:) are defined in Smalltalk’s Object. This means almost all objects in Smalltalk can participate in the application as model objects. That is, they can be observed."
      },
      "date": 1654063158286
    },
    {
      "id": "56149b9eb1288bda",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "56149b9eb1288bda",
        "text": "⇒ [[Smalltalk MVC]] Translated to JavaScript. [http://michaux.ca/articles/smalltalk-mvc-translated-to-javascript post], [https://web.archive.org/web/20220319141920/http://michaux.ca/articles/smalltalk-mvc-translated-to-javascript wayback] "
      },
      "date": 1654063171835
    },
    {
      "type": "fork",
      "date": 1654063182078
    },
    {
      "item": {
        "type": "factory",
        "id": "20ad7ccbd854834f"
      },
      "id": "20ad7ccbd854834f",
      "type": "add",
      "after": "20d04981ca36707a",
      "date": 1654090073374
    },
    {
      "type": "edit",
      "id": "20ad7ccbd854834f",
      "item": {
        "type": "graphviz",
        "id": "20ad7ccbd854834f",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1654090076846
    },
    {
      "type": "edit",
      "id": "20d04981ca36707a",
      "item": {
        "type": "paragraph",
        "id": "20d04981ca36707a",
        "text": "Having both observable-related methods and observer-methods on almost all objects in an application means that almost all objects can communicate in the very decoupled way that the [[Observer Pattern]] enables. This indirect style of communication can be lead to code that is frustratingly difficult to debug. “Where is the call that initiated this error?!” Good choices about which objects should use this communication mechanism are required of the application programmer. The communication between models and views is the main use of the observer pattern in an MVC application. Models observing other models is common too. Some applications might (also) have controllers observing the model but this is much less common."
      },
      "date": 1654090104587
    },
    {
      "type": "add",
      "id": "b6fd4ee64276973e",
      "item": {
        "type": "paragraph",
        "id": "b6fd4ee64276973e",
        "text": "[[Publish Subscribe Model]]"
      },
      "after": "20d04981ca36707a",
      "date": 1654090161243
    },
    {
      "type": "edit",
      "id": "b6fd4ee64276973e",
      "item": {
        "type": "paragraph",
        "id": "b6fd4ee64276973e",
        "text": "⇒ [[Publish Subscribe Model]]"
      },
      "date": 1654090170039
    },
    {
      "type": "add",
      "id": "5834a3ed543d1a21",
      "item": {
        "type": "paragraph",
        "id": "5834a3ed543d1a21",
        "text": "[[Model View Controller]]"
      },
      "after": "b6fd4ee64276973e",
      "date": 1654090265670
    },
    {
      "id": "5834a3ed543d1a21",
      "type": "move",
      "order": [
        "56149b9eb1288bda",
        "afc7d507f7f0e0be",
        "a1ba1bd32db0ddf1",
        "20d04981ca36707a",
        "5834a3ed543d1a21",
        "b6fd4ee64276973e",
        "20ad7ccbd854834f"
      ],
      "date": 1654090267360
    },
    {
      "type": "edit",
      "id": "5834a3ed543d1a21",
      "item": {
        "type": "paragraph",
        "id": "5834a3ed543d1a21",
        "text": "⇒ [[Model View Controller]]"
      },
      "date": 1654090275292
    }
  ]
}