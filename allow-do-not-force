{
  "title": "Allow, Do Not Force",
  "story": [
    {
      "type": "paragraph",
      "id": "79d26c4db4ca8f54",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "ee16e8064cf4d054",
      "text": "In large systems, behavior is most easily and effectively achieved in terms of emergent properties. Therefore, since no complex system depends heavily on commands, no program should depend heavily on developers writing code in the first person."
    },
    {
      "type": "markdown",
      "id": "e68c6f2aaab466f0",
      "text": "If this conclusion is taken to its final consequences, it can cause a tremendous change in perspective. For example, consider a reasonably large program based mostly on code written in the first person. Orders, as opposed to messages, do not necessarily respect distinction boundaries. Hence, the whole system can be considered to be an enormous `struct{...}` accompanied by a huge set of commandment tables."
    },
    {
      "type": "paragraph",
      "id": "97e2bd9f9897889f",
      "text": "For this kind of program to work, the commandments must be written in the context of the struct{...}. But the struct{...} exists in a global context, hence the developer must write the commandments from a point of view in which everything is known and anything can be done. In other words, the developer must become omniscient, omnipotent, and perfect."
    },
    {
      "type": "paragraph",
      "id": "43fc197c72386293",
      "text": "To begin with, nobody can be expected to succeed in these circumstances. In fact, it is an excellent setup to achieve failure! Nevertheless, assume that after a lot of pain and suffering, the 10-zillion-commandment tables are finally produced. Are we done? Is success achieved?"
    },
    {
      "type": "paragraph",
      "id": "c1798af9c5bebc92",
      "text": "Unfortunately, the answer is no. This is because things change all the time. Since the commandments were created in a global context which quickly becomes out of date as change occurs, then every commandment is potentially out of date as well. Like Sisyphus, the developer must then restart the work. Why would anybody put up with such masochist torture?"
    },
    {
      "type": "markdown",
      "id": "eea07297dcd1d754",
      "text": "Rather than obtaining behavior from commandments, it is considerably more productive to carefully design the interaction of the pieces such that the emergent properties of the composite *are* the desired behaviors."
    },
    {
      "type": "paragraph",
      "id": "28f3522b0ace01a2",
      "text": "To get the most benefit out of this approach, the pieces must be designed such that small changes in their interaction produce different varieties of interesting emergent properties. If, such as with Smalltalk, the cost of these small changes is small as well, one has a setup which allows sustainable success."
    },
    {
      "type": "paragraph",
      "id": "eac3c7315ef1b537",
      "text": "Smalltalk is a powerful tool because it does not have frameworks which impose a large overhead on small changes. For example, the lack of an explicit, early bound type system is a vital characteristic that keeps the cost of small changes at a low level. In the long run, this is far more important than preventing a few simple mistakes."
    },
    {
      "type": "paragraph",
      "id": "ebaa2afdffe60b5e",
      "text": "From a technical point of view, if a Smalltalk program is written under these guidelines using very little code, it is hard to see why it should not succeed."
    },
    {
      "type": "paragraph",
      "id": "3cedce4898a7913a",
      "text": "⇒ [[On Courage]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Allow, Do Not Force",
        "story": []
      },
      "date": 1660154644265
    },
    {
      "item": {
        "type": "factory",
        "id": "79d26c4db4ca8f54"
      },
      "id": "79d26c4db4ca8f54",
      "type": "add",
      "date": 1660154645962
    },
    {
      "type": "edit",
      "id": "79d26c4db4ca8f54",
      "item": {
        "type": "paragraph",
        "id": "79d26c4db4ca8f54",
        "text": "[…]"
      },
      "date": 1660154650506
    },
    {
      "item": {
        "type": "factory",
        "id": "ee16e8064cf4d054"
      },
      "id": "ee16e8064cf4d054",
      "type": "add",
      "after": "79d26c4db4ca8f54",
      "date": 1660154661879
    },
    {
      "type": "edit",
      "id": "ee16e8064cf4d054",
      "item": {
        "type": "paragraph",
        "id": "ee16e8064cf4d054",
        "text": "In large systems, behavior is most easily and effectively achieved in terms of emergent properties. Therefore, since no complex system depends heavily on commands, no program should depend heavily on developers writing code in the first person."
      },
      "date": 1660154666468
    },
    {
      "item": {
        "type": "factory",
        "id": "e68c6f2aaab466f0"
      },
      "id": "e68c6f2aaab466f0",
      "type": "add",
      "after": "ee16e8064cf4d054",
      "date": 1660154692412
    },
    {
      "type": "edit",
      "id": "e68c6f2aaab466f0",
      "item": {
        "type": "paragraph",
        "id": "e68c6f2aaab466f0",
        "text": "If this conclusion is taken to its final consequences, it can cause a tremendous change in perspective."
      },
      "date": 1660154694336
    },
    {
      "type": "edit",
      "id": "e68c6f2aaab466f0",
      "item": {
        "type": "paragraph",
        "id": "e68c6f2aaab466f0",
        "text": "If this conclusion is taken to its final consequences, it can cause a tremendous change in perspective. For example, consider a reasonably large program based"
      },
      "date": 1660154704355
    },
    {
      "type": "edit",
      "id": "e68c6f2aaab466f0",
      "item": {
        "type": "paragraph",
        "id": "e68c6f2aaab466f0",
        "text": "If this conclusion is taken to its final consequences, it can cause a tremendous change in perspective. For example, consider a reasonably large program based mostly on code written in the first person. Orders, as opposed to messages, do not necessarily respect distinction boundaries. Hence, the whole system can be considered to be an enormous struct{...} accompanied by a huge set of commandment tables."
      },
      "date": 1660154717105
    },
    {
      "type": "edit",
      "id": "e68c6f2aaab466f0",
      "item": {
        "type": "paragraph",
        "id": "e68c6f2aaab466f0",
        "text": "If this conclusion is taken to its final consequences, it can cause a tremendous change in perspective. For example, consider a reasonably large program based mostly on code written in the first person. Orders, as opposed to messages, do not necessarily respect distinction boundaries. Hence, the whole system can be considered to be an enormous `struct{...}` accompanied by a huge set of commandment tables."
      },
      "date": 1660154743479
    },
    {
      "type": "edit",
      "id": "e68c6f2aaab466f0",
      "item": {
        "type": "markdown",
        "id": "e68c6f2aaab466f0",
        "text": "If this conclusion is taken to its final consequences, it can cause a tremendous change in perspective. For example, consider a reasonably large program based mostly on code written in the first person. Orders, as opposed to messages, do not necessarily respect distinction boundaries. Hence, the whole system can be considered to be an enormous `struct{...}` accompanied by a huge set of commandment tables."
      },
      "date": 1660154744754
    },
    {
      "item": {
        "type": "factory",
        "id": "97e2bd9f9897889f"
      },
      "id": "97e2bd9f9897889f",
      "type": "add",
      "after": "e68c6f2aaab466f0",
      "date": 1660154759415
    },
    {
      "type": "edit",
      "id": "97e2bd9f9897889f",
      "item": {
        "type": "paragraph",
        "id": "97e2bd9f9897889f",
        "text": "For this kind of program to work, the commandments must be written in the context of the struct{...}. But the struct{...} exists in a global context, hence the developer must write the commandments from a point of view in which everything is known and anything can be done. In other words, the developer must become omniscient, omnipotent, and perfect."
      },
      "date": 1660154760989
    },
    {
      "item": {
        "type": "factory",
        "id": "43fc197c72386293"
      },
      "id": "43fc197c72386293",
      "type": "add",
      "after": "97e2bd9f9897889f",
      "date": 1660154774049
    },
    {
      "type": "edit",
      "id": "43fc197c72386293",
      "item": {
        "type": "paragraph",
        "id": "43fc197c72386293",
        "text": "To begin with, nobody can be expected to succeed in these circumstances. In fact, it is an excellent setup to achieve failure! Nevertheless, assume that after a lot of pain and suffering, the 10-zillion-commandment tables are finally produced. Are we done? Is success achieved?"
      },
      "date": 1660154775814
    },
    {
      "item": {
        "type": "factory",
        "id": "c1798af9c5bebc92"
      },
      "id": "c1798af9c5bebc92",
      "type": "add",
      "after": "43fc197c72386293",
      "date": 1660154798739
    },
    {
      "type": "edit",
      "id": "c1798af9c5bebc92",
      "item": {
        "type": "paragraph",
        "id": "c1798af9c5bebc92",
        "text": "Unfortunately, the answer is no. This is because things change all the time. Since the commandments were created in a global context which quickly becomes out of date as change occurs, then every commandment is potentially out of date as well9. Like Sisyphus, the developer must then restart the work. Why would anybody put up with such masochist torture?"
      },
      "date": 1660154805121
    },
    {
      "item": {
        "type": "factory",
        "id": "eea07297dcd1d754"
      },
      "id": "eea07297dcd1d754",
      "type": "add",
      "after": "c1798af9c5bebc92",
      "date": 1660154825399
    },
    {
      "type": "edit",
      "id": "eea07297dcd1d754",
      "item": {
        "type": "paragraph",
        "id": "eea07297dcd1d754",
        "text": "Rather than obtaining behavior from commandments, it is considerably more productive to carefully design the interaction of the pieces such that the emergent properties of the composite *are* the desired behaviors."
      },
      "date": 1660154831734
    },
    {
      "type": "edit",
      "id": "eea07297dcd1d754",
      "item": {
        "type": "markdown",
        "id": "eea07297dcd1d754",
        "text": "Rather than obtaining behavior from commandments, it is considerably more productive to carefully design the interaction of the pieces such that the emergent properties of the composite *are* the desired behaviors."
      },
      "date": 1660154832951
    },
    {
      "item": {
        "type": "factory",
        "id": "28f3522b0ace01a2"
      },
      "id": "28f3522b0ace01a2",
      "type": "add",
      "after": "eea07297dcd1d754",
      "date": 1660154851805
    },
    {
      "type": "edit",
      "id": "28f3522b0ace01a2",
      "item": {
        "type": "paragraph",
        "id": "28f3522b0ace01a2",
        "text": "To get the most benefit out of this approach, the pieces must be designed such that small changes in their interaction produce different varieties of interesting emergent properties. If, such as with Smalltalk, the cost of these small changes is small as well, one has a setup which allows sustainable success."
      },
      "date": 1660154853324
    },
    {
      "item": {
        "type": "factory",
        "id": "eac3c7315ef1b537"
      },
      "id": "eac3c7315ef1b537",
      "type": "add",
      "after": "28f3522b0ace01a2",
      "date": 1660154902190
    },
    {
      "type": "edit",
      "id": "eac3c7315ef1b537",
      "item": {
        "type": "paragraph",
        "id": "eac3c7315ef1b537",
        "text": "Smalltalk is a powerful tool because it does not have frameworks which impose a large overhead on small changes. For example, the lack of an explicit, early bound type system is a vital characteristic that keeps the cost of small changes at a low level. In the long run, this is far more important than preventing a few simple mistakes."
      },
      "date": 1660154903874
    },
    {
      "item": {
        "type": "factory",
        "id": "ebaa2afdffe60b5e"
      },
      "id": "ebaa2afdffe60b5e",
      "type": "add",
      "after": "eac3c7315ef1b537",
      "date": 1660154928597
    },
    {
      "type": "edit",
      "id": "ebaa2afdffe60b5e",
      "item": {
        "type": "paragraph",
        "id": "ebaa2afdffe60b5e",
        "text": "From a technical point of view, if a Smalltalk program is written under these guidelines using very little code, it is hard to see why it should not succeed."
      },
      "date": 1660154930402
    },
    {
      "type": "edit",
      "id": "c1798af9c5bebc92",
      "item": {
        "type": "paragraph",
        "id": "c1798af9c5bebc92",
        "text": "Unfortunately, the answer is no. This is because things change all the time. Since the commandments were created in a global context which quickly becomes out of date as change occurs, then every commandment is potentially out of date as well. Like Sisyphus, the developer must then restart the work. Why would anybody put up with such masochist torture?"
      },
      "date": 1660155041097
    },
    {
      "item": {
        "type": "factory",
        "id": "3cedce4898a7913a"
      },
      "id": "3cedce4898a7913a",
      "type": "add",
      "after": "ebaa2afdffe60b5e",
      "date": 1660155113801
    },
    {
      "type": "edit",
      "id": "3cedce4898a7913a",
      "item": {
        "type": "paragraph",
        "id": "3cedce4898a7913a",
        "text": "On Courage"
      },
      "date": 1660155118917
    },
    {
      "type": "edit",
      "id": "3cedce4898a7913a",
      "item": {
        "type": "paragraph",
        "id": "3cedce4898a7913a",
        "text": "⇒ [[On Courage]]"
      },
      "date": 1660155131393
    }
  ]
}