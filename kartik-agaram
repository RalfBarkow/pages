{
  "title": "Kartik Agaram",
  "story": [
    {
      "type": "markdown",
      "id": "1e8ffa08893f8ad7",
      "text": "[http://akkartik.name/about page] – Kartik is working on ways to better convey the global structure of programs. The goal: use an open-source tool, get an idea for a simple tweak, fork the repo, orient yourself, and make the change you visualized -- all in a single afternoon. \n"
    },
    {
      "type": "markdown",
      "id": "cec322e5188025a1",
      "text": "> Understanding a strange codebase is hard; I can't change that, but I think I can make it easier for people to persevere. I want to carve steps into the wall of the learning process. I want to replace quantum leaps of understanding after weeks of effort with an hour of achievement for an honest hour (or three) of effort. \n"
    },
    {
      "type": "markdown",
      "id": "bafe836553d6b221",
      "text": "This focus on helping outsiders comprehend a project is unconventional. We are less concerned about the [[readability]] of a codebase. We find the usual rhetoric around ‘readability’ tends to focus on helping authors merge contributions rather than helping others understand and appreciate their efforts. If you've ever seen an open source project whose `CONTRIBUTING` document consists of a nit-picky list of formatting rules and procedures for submitting patches, you know what we mean. There's a paucity of guidance earlier in the pipeline, when newcomers aren't thinking about sending a patch, just trying to understand the sea of abstractions, to keep their heads above water. We think improving this guidance might greatly increase the amount of citizen involvement in open source, [https://en.wikipedia.org/wiki/Linus%27s_Law the number of eyeballs reviewing code], rather than simply using projects and treating their internals as [https://en.wikipedia.org/wiki/Externality externalities] until the next [http://heartbleed.com/ serious security vulnerability]. Our society is more anti-fragile when there's greater grassroots oversight of the software that is [http://www.wired.com/business/2012/04/ff_andreessen/5 eating our world], [https://web.archive.org/web/20181224210113/https://www.wired.com/2012/04/ff_andreessen/5/ archive]. \n"
    },
    {
      "type": "markdown",
      "id": "42bf1b28ea7938ef",
      "text": "Everyone doesn't have to understand every line of code that helps manage their lives, but all software should *reward curiosity*. "
    },
    {
      "type": "markdown",
      "id": "20d7249dd2230900",
      "text": "## Sub-problems\n"
    },
    {
      "type": "markdown",
      "id": "73d6a2626661adde",
      "text": "Changing society seems hard. Where to begin? One hint is the observation that early versions of most software are often [http://akkartik.name/post/wart-layers surprisingly easy to understand]. There's this pervasive tendency for software to accumulate accidental complexity over time, making it harder to understand, and also more brittle and ossified and harder to change. If we could resist this ossification we'd make strides in keeping the global structure of a program accessible. Such creeping accidental complexity has at least three causes: "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Kartik Agaram",
        "story": []
      },
      "date": 1633371545127
    },
    {
      "item": {
        "type": "factory",
        "id": "1e8ffa08893f8ad7"
      },
      "id": "1e8ffa08893f8ad7",
      "type": "add",
      "date": 1633371551197
    },
    {
      "type": "edit",
      "id": "1e8ffa08893f8ad7",
      "item": {
        "type": "markdown",
        "id": "1e8ffa08893f8ad7",
        "text": "[http://akkartik.name/about page] – "
      },
      "date": 1633371569424
    },
    {
      "type": "edit",
      "id": "1e8ffa08893f8ad7",
      "item": {
        "type": "markdown",
        "id": "1e8ffa08893f8ad7",
        "text": "[http://akkartik.name/about page] – Kartik is working on ways to better convey the global structure of programs. The goal: use an open-source tool, get an idea for a simple tweak, fork the repo, orient yourself, and make the change you visualized -- all in a single afternoon. Understanding a strange codebase is hard; I can't change that, but I think I can make it easier for people to persevere. I want to carve steps into the wall of the learning process. I want to replace quantum leaps of understanding after weeks of effort with an hour of achievement for an honest hour (or three) of effort. "
      },
      "date": 1633371589180
    },
    {
      "type": "edit",
      "id": "1e8ffa08893f8ad7",
      "item": {
        "type": "markdown",
        "id": "1e8ffa08893f8ad7",
        "text": "[http://akkartik.name/about page] – Kartik is working on ways to better convey the global structure of programs. The goal: use an open-source tool, get an idea for a simple tweak, fork the repo, orient yourself, and make the change you visualized -- all in a single afternoon. \n"
      },
      "date": 1633371690184
    },
    {
      "type": "add",
      "id": "cec322e5188025a1",
      "item": {
        "type": "markdown",
        "id": "cec322e5188025a1",
        "text": "> Understanding a strange codebase is hard; I can't change that, but I think I can make it easier for people to persevere. I want to carve steps into the wall of the learning process. I want to replace quantum leaps of understanding after weeks of effort with an hour of achievement for an honest hour (or three) of effort. "
      },
      "after": "1e8ffa08893f8ad7",
      "date": 1633371692435
    },
    {
      "type": "edit",
      "id": "cec322e5188025a1",
      "item": {
        "type": "markdown",
        "id": "cec322e5188025a1",
        "text": "> Understanding a strange codebase is hard; I can't change that, but I think I can make it easier for people to persevere. I want to carve steps into the wall of the learning process. I want to replace quantum leaps of understanding after weeks of effort with an hour of achievement for an honest hour (or three) of effort. \n"
      },
      "date": 1633445068464
    },
    {
      "type": "add",
      "id": "bafe836553d6b221",
      "item": {
        "type": "markdown",
        "id": "bafe836553d6b221",
        "text": "This focus on helping outsiders comprehend a project is unconventional. I'm less concerned about the readability of a codebase. I find the usual rhetoric around ‘readability’ tends to focus on helping authors merge contributions rather than helping others understand and appreciate their efforts. If you've ever seen an open source project whose CONTRIBUTING document consists of a nit-picky list of formatting rules and procedures for submitting patches, you know what I mean. There's a paucity of guidance earlier in the pipeline, when newcomers aren't thinking about sending a patch, just trying to understand the sea of abstractions, to keep their heads above water. I think improving this guidance might greatly increase the amount of citizen involvement in open source, the number of eyeballs reviewing code, rather than simply using projects and treating their internals as externalities until the next serious security vulnerability. Our society is more anti-fragile when there's greater grassroots oversight of the software that is eating our world. "
      },
      "after": "cec322e5188025a1",
      "date": 1633445069728
    },
    {
      "type": "edit",
      "id": "bafe836553d6b221",
      "item": {
        "type": "markdown",
        "id": "bafe836553d6b221",
        "text": "This focus on helping outsiders comprehend a project is unconventional. We are less concerned about the ]]\n"
      },
      "date": 1633445108871
    },
    {
      "type": "add",
      "id": "cd5b1dadc5df66ab",
      "item": {
        "type": "markdown",
        "id": "cd5b1dadc5df66ab",
        "text": "readability of a codebase. I find the usual rhetoric around ‘readability’ tends to focus on helping authors merge contributions rather than helping others understand and appreciate their efforts. If you've ever seen an open source project whose CONTRIBUTING document consists of a nit-picky list of formatting rules and procedures for submitting patches, you know what I mean. There's a paucity of guidance earlier in the pipeline, when newcomers aren't thinking about sending a patch, just trying to understand the sea of abstractions, to keep their heads above water. I think improving this guidance might greatly increase the amount of citizen involvement in open source, the number of eyeballs reviewing code, rather than simply using projects and treating their internals as externalities until the next serious security vulnerability. Our society is more anti-fragile when there's greater grassroots oversight of the software that is eating our world. "
      },
      "after": "bafe836553d6b221",
      "date": 1633445116669
    },
    {
      "type": "edit",
      "id": "cd5b1dadc5df66ab",
      "item": {
        "type": "markdown",
        "id": "cd5b1dadc5df66ab",
        "text": "[[readability]] of a codebase. I find the usual rhetoric around ‘readability’ tends to focus on helping authors merge contributions rather than helping others understand and appreciate their efforts. If you've ever seen an open source project whose CONTRIBUTING document consists of a nit-picky list of formatting rules and procedures for submitting patches, you know what I mean. There's a paucity of guidance earlier in the pipeline, when newcomers aren't thinking about sending a patch, just trying to understand the sea of abstractions, to keep their heads above water. I think improving this guidance might greatly increase the amount of citizen involvement in open source, the number of eyeballs reviewing code, rather than simply using projects and treating their internals as externalities until the next serious security vulnerability. Our society is more anti-fragile when there's greater grassroots oversight of the software that is eating our world. "
      },
      "date": 1633445126846
    },
    {
      "type": "edit",
      "id": "bafe836553d6b221",
      "item": {
        "type": "markdown",
        "id": "bafe836553d6b221",
        "text": "This focus on helping outsiders comprehend a project is unconventional. We are less concerned about the\n"
      },
      "date": 1633445132876
    },
    {
      "type": "remove",
      "id": "cd5b1dadc5df66ab",
      "date": 1633445138950
    },
    {
      "type": "edit",
      "id": "bafe836553d6b221",
      "item": {
        "type": "markdown",
        "id": "bafe836553d6b221",
        "text": "This focus on helping outsiders comprehend a project is unconventional. We are less concerned about the [[readability]] of a codebase. I find the usual rhetoric around ‘readability’ tends to focus on helping authors merge contributions rather than helping others understand and appreciate their efforts. If you've ever seen an open source project whose CONTRIBUTING document consists of a nit-picky list of formatting rules and procedures for submitting patches, you know what I mean. There's a paucity of guidance earlier in the pipeline, when newcomers aren't thinking about sending a patch, just trying to understand the sea of abstractions, to keep their heads above water. I think improving this guidance might greatly increase the amount of citizen involvement in open source, the number of eyeballs reviewing code, rather than simply using projects and treating their internals as externalities until the next serious security vulnerability. Our society is more anti-fragile when there's greater grassroots oversight of the software that is eating our world. "
      },
      "date": 1633445142212
    },
    {
      "type": "edit",
      "id": "bafe836553d6b221",
      "item": {
        "type": "markdown",
        "id": "bafe836553d6b221",
        "text": "This focus on helping outsiders comprehend a project is unconventional. We are less concerned about the [[readability]] of a codebase. We find the usual rhetoric around ‘readability’ tends to focus on helping authors merge contributions rather than helping others understand and appreciate their efforts. If you've ever seen an open source project whose CONTRIBUTING document consists of a nit-picky list of formatting rules and procedures for submitting patches, you know what I mean. There's a paucity of guidance earlier in the pipeline, when newcomers aren't thinking about sending a patch, just trying to understand the sea of abstractions, to keep their heads above water. I think improving this guidance might greatly increase the amount of citizen involvement in open source, the number of eyeballs reviewing code, rather than simply using projects and treating their internals as externalities until the next serious security vulnerability. Our society is more anti-fragile when there's greater grassroots oversight of the software that is eating our world. "
      },
      "date": 1633445176718
    },
    {
      "type": "edit",
      "id": "bafe836553d6b221",
      "item": {
        "type": "markdown",
        "id": "bafe836553d6b221",
        "text": "This focus on helping outsiders comprehend a project is unconventional. We are less concerned about the [[readability]] of a codebase. We find the usual rhetoric around ‘readability’ tends to focus on helping authors merge contributions rather than helping others understand and appreciate their efforts. If you've ever seen an open source project whose `CONTRIBUTING` document consists of a nit-picky list of formatting rules and procedures for submitting patches, you know what I mean. There's a paucity of guidance earlier in the pipeline, when newcomers aren't thinking about sending a patch, just trying to understand the sea of abstractions, to keep their heads above water. I think improving this guidance might greatly increase the amount of citizen involvement in open source, the number of eyeballs reviewing code, rather than simply using projects and treating their internals as externalities until the next serious security vulnerability. Our society is more anti-fragile when there's greater grassroots oversight of the software that is eating our world. "
      },
      "date": 1633445198037
    },
    {
      "type": "edit",
      "id": "bafe836553d6b221",
      "item": {
        "type": "markdown",
        "id": "bafe836553d6b221",
        "text": "This focus on helping outsiders comprehend a project is unconventional. We are less concerned about the [[readability]] of a codebase. We find the usual rhetoric around ‘readability’ tends to focus on helping authors merge contributions rather than helping others understand and appreciate their efforts. If you've ever seen an open source project whose `CONTRIBUTING` document consists of a nit-picky list of formatting rules and procedures for submitting patches, you know what we mean. There's a paucity of guidance earlier in the pipeline, when newcomers aren't thinking about sending a patch, just trying to understand the sea of abstractions, to keep their heads above water. We think improving this guidance might greatly increase the amount of citizen involvement in open source, [https://en.wikipedia.org/wiki/Linus%27s_Law the number of eyeballs reviewing code], rather than simply using projects and treating their internals as [https://en.wikipedia.org/wiki/Externality externalities] until the next [http://heartbleed.com/ serious security vulnerability]. Our society is more anti-fragile when there's greater grassroots oversight of the software that is [http://www.wired.com/business/2012/04/ff_andreessen/5 eating our world]. "
      },
      "date": 1633445396159
    },
    {
      "type": "edit",
      "id": "bafe836553d6b221",
      "item": {
        "type": "markdown",
        "id": "bafe836553d6b221",
        "text": "This focus on helping outsiders comprehend a project is unconventional. We are less concerned about the [[readability]] of a codebase. We find the usual rhetoric around ‘readability’ tends to focus on helping authors merge contributions rather than helping others understand and appreciate their efforts. If you've ever seen an open source project whose `CONTRIBUTING` document consists of a nit-picky list of formatting rules and procedures for submitting patches, you know what we mean. There's a paucity of guidance earlier in the pipeline, when newcomers aren't thinking about sending a patch, just trying to understand the sea of abstractions, to keep their heads above water. We think improving this guidance might greatly increase the amount of citizen involvement in open source, [https://en.wikipedia.org/wiki/Linus%27s_Law the number of eyeballs reviewing code], rather than simply using projects and treating their internals as [https://en.wikipedia.org/wiki/Externality externalities] until the next [http://heartbleed.com/ serious security vulnerability]. Our society is more anti-fragile when there's greater grassroots oversight of the software that is [http://www.wired.com/business/2012/04/ff_andreessen/5 eating our world], . "
      },
      "date": 1633445439801
    },
    {
      "type": "edit",
      "id": "bafe836553d6b221",
      "item": {
        "type": "markdown",
        "id": "bafe836553d6b221",
        "text": "This focus on helping outsiders comprehend a project is unconventional. We are less concerned about the [[readability]] of a codebase. We find the usual rhetoric around ‘readability’ tends to focus on helping authors merge contributions rather than helping others understand and appreciate their efforts. If you've ever seen an open source project whose `CONTRIBUTING` document consists of a nit-picky list of formatting rules and procedures for submitting patches, you know what we mean. There's a paucity of guidance earlier in the pipeline, when newcomers aren't thinking about sending a patch, just trying to understand the sea of abstractions, to keep their heads above water. We think improving this guidance might greatly increase the amount of citizen involvement in open source, [https://en.wikipedia.org/wiki/Linus%27s_Law the number of eyeballs reviewing code], rather than simply using projects and treating their internals as [https://en.wikipedia.org/wiki/Externality externalities] until the next [http://heartbleed.com/ serious security vulnerability]. Our society is more anti-fragile when there's greater grassroots oversight of the software that is [http://www.wired.com/business/2012/04/ff_andreessen/5 eating our world], [https://web.archive.org/web/20181224210113/https://www.wired.com/2012/04/ff_andreessen/5/ archive]. "
      },
      "date": 1633445458461
    },
    {
      "type": "edit",
      "id": "bafe836553d6b221",
      "item": {
        "type": "markdown",
        "id": "bafe836553d6b221",
        "text": "This focus on helping outsiders comprehend a project is unconventional. We are less concerned about the [[readability]] of a codebase. We find the usual rhetoric around ‘readability’ tends to focus on helping authors merge contributions rather than helping others understand and appreciate their efforts. If you've ever seen an open source project whose `CONTRIBUTING` document consists of a nit-picky list of formatting rules and procedures for submitting patches, you know what we mean. There's a paucity of guidance earlier in the pipeline, when newcomers aren't thinking about sending a patch, just trying to understand the sea of abstractions, to keep their heads above water. We think improving this guidance might greatly increase the amount of citizen involvement in open source, [https://en.wikipedia.org/wiki/Linus%27s_Law the number of eyeballs reviewing code], rather than simply using projects and treating their internals as [https://en.wikipedia.org/wiki/Externality externalities] until the next [http://heartbleed.com/ serious security vulnerability]. Our society is more anti-fragile when there's greater grassroots oversight of the software that is [http://www.wired.com/business/2012/04/ff_andreessen/5 eating our world], [https://web.archive.org/web/20181224210113/https://www.wired.com/2012/04/ff_andreessen/5/ archive]. \n"
      },
      "date": 1633445579945
    },
    {
      "type": "add",
      "id": "42bf1b28ea7938ef",
      "item": {
        "type": "markdown",
        "id": "42bf1b28ea7938ef",
        "text": "Everyone doesn't have to understand every line of code that helps manage their lives, but all software should *reward curiosity*. "
      },
      "after": "bafe836553d6b221",
      "date": 1633445590602
    },
    {
      "item": {
        "type": "factory",
        "id": "20d7249dd2230900"
      },
      "id": "20d7249dd2230900",
      "type": "add",
      "after": "42bf1b28ea7938ef",
      "date": 1633451747435
    },
    {
      "type": "edit",
      "id": "20d7249dd2230900",
      "item": {
        "type": "markdown",
        "id": "20d7249dd2230900",
        "text": "Sub-problems"
      },
      "date": 1633451750580
    },
    {
      "type": "edit",
      "id": "20d7249dd2230900",
      "item": {
        "type": "markdown",
        "id": "20d7249dd2230900",
        "text": "## Sub-problems"
      },
      "date": 1633451761944
    },
    {
      "type": "edit",
      "id": "20d7249dd2230900",
      "item": {
        "type": "markdown",
        "id": "20d7249dd2230900",
        "text": "## Sub-problems\n"
      },
      "date": 1633451770398
    },
    {
      "type": "add",
      "id": "73d6a2626661adde",
      "item": {
        "type": "markdown",
        "id": "73d6a2626661adde",
        "text": "Changing society seems hard. Where to begin? One hint is the observation that early versions of most software are often surprisingly easy to understand. There's this pervasive tendency for software to accumulate accidental complexity over time, making it harder to understand, and also more brittle and ossified and harder to change. If we could resist this ossification we'd make strides in keeping the global structure of a program accessible. Such creeping accidental complexity has at least three causes: "
      },
      "after": "20d7249dd2230900",
      "date": 1633451772821
    },
    {
      "type": "edit",
      "id": "73d6a2626661adde",
      "item": {
        "type": "markdown",
        "id": "73d6a2626661adde",
        "text": "Changing society seems hard. Where to begin? One hint is the observation that early versions of most software are often [http://akkartik.name/post/wart-layers surprisingly easy to understand]. There's this pervasive tendency for software to accumulate accidental complexity over time, making it harder to understand, and also more brittle and ossified and harder to change. If we could resist this ossification we'd make strides in keeping the global structure of a program accessible. Such creeping accidental complexity has at least three causes: "
      },
      "date": 1633451802415
    }
  ]
}