{
  "title": "Mesh",
  "story": [
    {
      "type": "markdown",
      "id": "15b12d3b2d0527d0",
      "text": "Mesh is a base class that handles glBuffer management and common types of data manipulation for the different types of draw primitives. [https://unpkg.com/browse/@croquet/worldcore-webgl@1.2.0/src/Render.js js] (`class Mesh` â€¦)\n"
    },
    {
      "type": "code",
      "id": "695b23e63f6ca9de",
      "text": "class Mesh {\n    constructor(template) {\n        this.clear();\n        if (template) this.copy(template);\n        this.vertexBuffer = new GLBuffer('aVertex');\n        this.normalBuffer = new GLBuffer('aNormal');\n        this.colorBuffer = new GLBuffer('aColor');\n        this.coordinateBuffer = new GLBuffer('aCoordinate');\n    }\n\n    get vertexCount() { return this.vertices.length / 3;}\n\n    destroy() {\n        this.vertexBuffer.destroy();\n        this.normalBuffer.destroy();\n        this.colorBuffer.destroy();\n        this.coordinateBuffer.destroy();\n    }\n\n    // Deletes the local buffers, but not the glBuffers.\n    clear() {\n        this.vertices = [];\n        this.normals = [];\n        this.colors = [];\n        this.coordinates = [];\n    }\n\n    // Copies another mesh into this one. Does not copy the glBuffers, so you'll probably want to do a load immediately after\n    copy(source) {\n        this.vertices = source.vertices.slice();\n        this.normals = source.normals.slice();\n        this.colors = source.colors.slice();\n        this.coordinates = source.coordinates.slice();\n    }\n\n    // Merges another mesh with this one. Does not merge the glBuffers, so you'll probably want to do a load immediately after\n    merge(source) {\n        this.vertices = this.vertices.concat(source.vertices);\n        this.normals = this.normals.concat(source.normals);\n        this.colors = this.colors.concat(source.colors);\n        this.coordinates = this.coordinates.concat(source.coordinates);\n    }\n\n    // Transforms all the vertices and normals using a 4x4 matrix.\n    transform(m4) {\n        const vertices = this.vertices;\n        for (let i = 0; i < this.vertices.length; i+=3) {\n            const v0 = [vertices[i], vertices[i+1], vertices[i+2]];\n            const v1 = v3_transform(v0,m4);\n            vertices[i] = v1[0];\n            vertices[i+1] = v1[1];\n            vertices[i+2] = v1[2];\n        }\n        if (this.normals.length === 0) return;\n        const nm4 = m4_toNormal4(m4);\n        const normals = this.normals;\n        for (let i = 0; i < this.normals.length; i+=3) {\n            const n0 = [normals[i], normals[i+1], normals[i+2]];\n            const n1 = v3_normalize(v3_transform(n0, nm4));\n            normals[i] = n1[0];\n            normals[i+1] = n1[1];\n            normals[i+2] = n1[2];\n        }\n    }\n\n    setColor(color) {\n        this.colors = [];\n        const vertexCount = this.vertexCount;\n        for (let i = 0; i < vertexCount; i++) {\n            this.colors.push(...color);\n        }\n    }\n\n    // Loads the local buffers into the glBuffers\n    load() {\n        this.vertexBuffer.load(this.vertices);\n        this.normalBuffer.load(this.normals);\n        this.colorBuffer.load(this.colors);\n        this.coordinateBuffer.load(this.coordinates);\n        this.saveDrawCount();\n    }\n\n    saveDrawCount() {\n        this.drawCount = this.vertices.length / 3;\n    }\n\n    apply() {\n        this.vertexBuffer.apply();\n        this.normalBuffer.apply();\n        this.colorBuffer.apply();\n        this.coordinateBuffer.apply();\n    }\n\n    findNormal(v0, v1, v2) {\n        const d0 = v3_sub(v1, v0);\n        const d1 = v3_sub(v2, v0);\n        return v3_normalize(v3_cross(d1, d0));\n    }\n\n}"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Mesh",
        "story": []
      },
      "date": 1655157575083
    },
    {
      "item": {
        "type": "factory",
        "id": "15b12d3b2d0527d0"
      },
      "id": "15b12d3b2d0527d0",
      "type": "add",
      "date": 1655157584233
    },
    {
      "type": "edit",
      "id": "15b12d3b2d0527d0",
      "item": {
        "type": "paragraph",
        "id": "15b12d3b2d0527d0",
        "text": "Mesh is a base class that handles glBuffer management and common types of data\n// manipulation for the different types of draw primitives\n"
      },
      "date": 1655157586453
    },
    {
      "type": "edit",
      "id": "15b12d3b2d0527d0",
      "item": {
        "type": "paragraph",
        "id": "15b12d3b2d0527d0",
        "text": "Mesh is a base class that handles glBuffer management and common types of data manipulation for the different types of draw primitives\n"
      },
      "date": 1655157592508
    },
    {
      "item": {
        "type": "factory",
        "id": "695b23e63f6ca9de"
      },
      "id": "695b23e63f6ca9de",
      "type": "add",
      "after": "15b12d3b2d0527d0",
      "date": 1655157616787
    },
    {
      "type": "edit",
      "id": "695b23e63f6ca9de",
      "item": {
        "type": "code",
        "id": "695b23e63f6ca9de",
        "text": "class Mesh {\n    constructor(template) {\n        this.clear();\n        if (template) this.copy(template);\n        this.vertexBuffer = new GLBuffer('aVertex');\n        this.normalBuffer = new GLBuffer('aNormal');\n        this.colorBuffer = new GLBuffer('aColor');\n        this.coordinateBuffer = new GLBuffer('aCoordinate');\n    }\n\n    get vertexCount() { return this.vertices.length / 3;}\n\n    destroy() {\n        this.vertexBuffer.destroy();\n        this.normalBuffer.destroy();\n        this.colorBuffer.destroy();\n        this.coordinateBuffer.destroy();\n    }\n\n    // Deletes the local buffers, but not the glBuffers.\n    clear() {\n        this.vertices = [];\n        this.normals = [];\n        this.colors = [];\n        this.coordinates = [];\n    }\n\n    // Copies another mesh into this one. Does not copy the glBuffers, so you'll probably want to do a load immediately after\n    copy(source) {\n        this.vertices = source.vertices.slice();\n        this.normals = source.normals.slice();\n        this.colors = source.colors.slice();\n        this.coordinates = source.coordinates.slice();\n    }\n\n    // Merges another mesh with this one. Does not merge the glBuffers, so you'll probably want to do a load immediately after\n    merge(source) {\n        this.vertices = this.vertices.concat(source.vertices);\n        this.normals = this.normals.concat(source.normals);\n        this.colors = this.colors.concat(source.colors);\n        this.coordinates = this.coordinates.concat(source.coordinates);\n    }\n\n    // Transforms all the vertices and normals using a 4x4 matrix.\n    transform(m4) {\n        const vertices = this.vertices;\n        for (let i = 0; i < this.vertices.length; i+=3) {\n            const v0 = [vertices[i], vertices[i+1], vertices[i+2]];\n            const v1 = (0,_croquet_worldcore_kernel__WEBPACK_IMPORTED_MODULE_0__.v3_transform)(v0,m4);\n            vertices[i] = v1[0];\n            vertices[i+1] = v1[1];\n            vertices[i+2] = v1[2];\n        }\n        if (this.normals.length === 0) return;\n        const nm4 = (0,_croquet_worldcore_kernel__WEBPACK_IMPORTED_MODULE_0__.m4_toNormal4)(m4);\n        const normals = this.normals;\n        for (let i = 0; i < this.normals.length; i+=3) {\n            const n0 = [normals[i], normals[i+1], normals[i+2]];\n            const n1 = (0,_croquet_worldcore_kernel__WEBPACK_IMPORTED_MODULE_0__.v3_normalize)((0,_croquet_worldcore_kernel__WEBPACK_IMPORTED_MODULE_0__.v3_transform)(n0, nm4));\n            normals[i] = n1[0];\n            normals[i+1] = n1[1];\n            normals[i+2] = n1[2];\n        }\n    }\n\n    setColor(color) {\n        this.colors = [];\n        const vertexCount = this.vertexCount;\n        for (let i = 0; i < vertexCount; i++) {\n            this.colors.push(...color);\n        }\n    }\n\n    // Loads the local buffers into the glBuffers\n    load() {\n        this.vertexBuffer.load(this.vertices);\n        this.normalBuffer.load(this.normals);\n        this.colorBuffer.load(this.colors);\n        this.coordinateBuffer.load(this.coordinates);\n        this.saveDrawCount();\n    }\n\n    saveDrawCount() {\n        this.drawCount = this.vertices.length / 3;\n    }\n\n    apply() {\n        this.vertexBuffer.apply();\n        this.normalBuffer.apply();\n        this.colorBuffer.apply();\n        this.coordinateBuffer.apply();\n    }\n\n    findNormal(v0, v1, v2) {\n        const d0 = (0,_croquet_worldcore_kernel__WEBPACK_IMPORTED_MODULE_0__.v3_sub)(v1, v0);\n        const d1 = (0,_croquet_worldcore_kernel__WEBPACK_IMPORTED_MODULE_0__.v3_sub)(v2, v0);\n        return (0,_croquet_worldcore_kernel__WEBPACK_IMPORTED_MODULE_0__.v3_normalize)((0,_croquet_worldcore_kernel__WEBPACK_IMPORTED_MODULE_0__.v3_cross)(d1, d0));\n    }\n\n}\n"
      },
      "date": 1655157618841
    },
    {
      "type": "edit",
      "id": "695b23e63f6ca9de",
      "item": {
        "type": "code",
        "id": "695b23e63f6ca9de",
        "text": "class Mesh {\n    constructor(template) {\n        this.clear();\n        if (template) this.copy(template);\n        this.vertexBuffer = new GLBuffer('aVertex');\n        this.normalBuffer = new GLBuffer('aNormal');\n        this.colorBuffer = new GLBuffer('aColor');\n        this.coordinateBuffer = new GLBuffer('aCoordinate');\n    }\n\n    get vertexCount() { return this.vertices.length / 3;}\n\n    destroy() {\n        this.vertexBuffer.destroy();\n        this.normalBuffer.destroy();\n        this.colorBuffer.destroy();\n        this.coordinateBuffer.destroy();\n    }\n\n    // Deletes the local buffers, but not the glBuffers.\n    clear() {\n        this.vertices = [];\n        this.normals = [];\n        this.colors = [];\n        this.coordinates = [];\n    }\n\n    // Copies another mesh into this one. Does not copy the glBuffers, so you'll probably want to do a load immediately after\n    copy(source) {\n        this.vertices = source.vertices.slice();\n        this.normals = source.normals.slice();\n        this.colors = source.colors.slice();\n        this.coordinates = source.coordinates.slice();\n    }\n\n    // Merges another mesh with this one. Does not merge the glBuffers, so you'll probably want to do a load immediately after\n    merge(source) {\n        this.vertices = this.vertices.concat(source.vertices);\n        this.normals = this.normals.concat(source.normals);\n        this.colors = this.colors.concat(source.colors);\n        this.coordinates = this.coordinates.concat(source.coordinates);\n    }\n\n    // Transforms all the vertices and normals using a 4x4 matrix.\n    transform(m4) {\n        const vertices = this.vertices;\n        for (let i = 0; i < this.vertices.length; i+=3) {\n            const v0 = [vertices[i], vertices[i+1], vertices[i+2]];\n            const v1 = v3_transform(v0,m4);\n            vertices[i] = v1[0];\n            vertices[i+1] = v1[1];\n            vertices[i+2] = v1[2];\n        }\n        if (this.normals.length === 0) return;\n        const nm4 = m4_toNormal4(m4);\n        const normals = this.normals;\n        for (let i = 0; i < this.normals.length; i+=3) {\n            const n0 = [normals[i], normals[i+1], normals[i+2]];\n            const n1 = v3_normalize(v3_transform(n0, nm4));\n            normals[i] = n1[0];\n            normals[i+1] = n1[1];\n            normals[i+2] = n1[2];\n        }\n    }\n\n    setColor(color) {\n        this.colors = [];\n        const vertexCount = this.vertexCount;\n        for (let i = 0; i < vertexCount; i++) {\n            this.colors.push(...color);\n        }\n    }\n\n    // Loads the local buffers into the glBuffers\n    load() {\n        this.vertexBuffer.load(this.vertices);\n        this.normalBuffer.load(this.normals);\n        this.colorBuffer.load(this.colors);\n        this.coordinateBuffer.load(this.coordinates);\n        this.saveDrawCount();\n    }\n\n    saveDrawCount() {\n        this.drawCount = this.vertices.length / 3;\n    }\n\n    apply() {\n        this.vertexBuffer.apply();\n        this.normalBuffer.apply();\n        this.colorBuffer.apply();\n        this.coordinateBuffer.apply();\n    }\n\n    findNormal(v0, v1, v2) {\n        const d0 = v3_sub(v1, v0);\n        const d1 = v3_sub(v2, v0);\n        return v3_normalize(v3_cross(d1, d0));\n    }\n\n}"
      },
      "date": 1655157795560
    },
    {
      "type": "edit",
      "id": "15b12d3b2d0527d0",
      "item": {
        "type": "paragraph",
        "id": "15b12d3b2d0527d0",
        "text": "Mesh is a base class that handles glBuffer management and common types of data manipulation for the different types of draw primitives. [https://unpkg.com/browse/@croquet/worldcore-webgl@1.2.0/src/Render.js js] \n"
      },
      "date": 1655157977775
    },
    {
      "type": "edit",
      "id": "15b12d3b2d0527d0",
      "item": {
        "type": "paragraph",
        "id": "15b12d3b2d0527d0",
        "text": "Mesh is a base class that handles glBuffer management and common types of data manipulation for the different types of draw primitives. [https://unpkg.com/browse/@croquet/worldcore-webgl@1.2.0/src/Render.js js] (Class Mesh)\n"
      },
      "date": 1655158097052
    },
    {
      "type": "edit",
      "id": "15b12d3b2d0527d0",
      "item": {
        "type": "paragraph",
        "id": "15b12d3b2d0527d0",
        "text": "Mesh is a base class that handles glBuffer management and common types of data manipulation for the different types of draw primitives. [https://unpkg.com/browse/@croquet/worldcore-webgl@1.2.0/src/Render.js js] (`Class Mesh`)\n"
      },
      "date": 1655158118574
    },
    {
      "type": "edit",
      "id": "15b12d3b2d0527d0",
      "item": {
        "type": "markdown",
        "id": "15b12d3b2d0527d0",
        "text": "Mesh is a base class that handles glBuffer management and common types of data manipulation for the different types of draw primitives. [https://unpkg.com/browse/@croquet/worldcore-webgl@1.2.0/src/Render.js js] (`Class Mesh`)\n"
      },
      "date": 1655158124092
    },
    {
      "type": "edit",
      "id": "15b12d3b2d0527d0",
      "item": {
        "type": "markdown",
        "id": "15b12d3b2d0527d0",
        "text": "Mesh is a base class that handles glBuffer management and common types of data manipulation for the different types of draw primitives. [https://unpkg.com/browse/@croquet/worldcore-webgl@1.2.0/src/Render.js js] (`class Mesh` â€¦)\n"
      },
      "date": 1655158153145
    }
  ]
}