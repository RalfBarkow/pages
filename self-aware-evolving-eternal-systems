{
  "title": "Self-Aware, Evolving Eternal Systems",
  "story": [
    {
      "type": "markdown",
      "id": "c4d57528eb782120",
      "text": "O. Nierstrasz, M. Denker, T. Girba, A. Kuhn, A. Lienhard, and D. Roethlisberger, “Self-aware, Evolving Eternal Systems,” report, May 2008. Accessed: Oct. 07, 2021. [Online]. Available: https://hal.inria.fr/inria-00555765\n\n"
    },
    {
      "type": "markdown",
      "id": "3a569c41ea221afd",
      "text": "> **Abstract**. Few real software systems are built completely from scratch nowadays. Instead, systems are built iteratively and incrementally, while integrating and interacting with components from many other systems. These systems also last longer than their developers might imagine – they are, in effect, __eternal__. Nevertheless the platforms, tools and environments we use to develop software are still largely based on an outmoded model that presupposes that software systems are closed and will not significantly evolve after deployment. We claim that in order to enable effective and graceful evolution of eternal systems, we must make them self-aware. A self-aware eternal system supports evolution by: (i) providing explicit, first-class models of software artifacts, change and history at the level of the platform, (ii) continuously analysing static and dynamic evolution to track emergent properties, and (iii) closing the gap between the domain model and the developers' view of the evolving system. We outline our vision of self-aware eternal systems and identify the research challenges to realizing this vision. "
    },
    {
      "type": "markdown",
      "id": "93aba760ba695d7e",
      "text": "Next: [[Eternal Systems]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Self-Aware, Evolving Eternal Systems",
        "story": []
      },
      "date": 1633611286926
    },
    {
      "item": {
        "type": "factory",
        "id": "c4d57528eb782120"
      },
      "id": "c4d57528eb782120",
      "type": "add",
      "date": 1633611296751
    },
    {
      "type": "edit",
      "id": "c4d57528eb782120",
      "item": {
        "type": "markdown",
        "id": "c4d57528eb782120",
        "text": "O. Nierstrasz, M. Denker, T. Girba, A. Kuhn, A. Lienhard, and D. Roethlisberger, “Self-aware, Evolving Eternal Systems,” report, May 2008. Accessed: Oct. 07, 2021. [Online]. Available: https://hal.inria.fr/inria-00555765\n"
      },
      "date": 1633611301732
    },
    {
      "type": "edit",
      "id": "c4d57528eb782120",
      "item": {
        "type": "markdown",
        "id": "c4d57528eb782120",
        "text": "O. Nierstrasz, M. Denker, T. Girba, A. Kuhn, A. Lienhard, and D. Roethlisberger, “Self-aware, Evolving Eternal Systems,” report, May 2008. Accessed: Oct. 07, 2021. [Online]. Available: https://hal.inria.fr/inria-00555765\n\n"
      },
      "date": 1633611722760
    },
    {
      "type": "add",
      "id": "3a569c41ea221afd",
      "item": {
        "type": "markdown",
        "id": "3a569c41ea221afd",
        "text": "> **Abstract**. Few real software systems are built completely from scratch nowadays. Instead, systems are built iteratively and incrementally, while integrating and interacting with components from many other systems. These systems also last longer than their developers might imagine --- they are, in effect, eternal. Nevertheless the platforms, tools and environments we use to develop software are still largely based on an outmoded model that presupposes that software systems are closed and will not significantly evolve after deployment. We claim that in order to enable effective and graceful evolution of eternal systems, we must make them self-aware. A self-aware eternal system supports evolution by: (i) providing explicit, first-class models of software artifacts, change and history at the level of the platform, (ii) continuously analysing static and dynamic evolution to track emergent properties, and (iii) closing the gap between the domain model and the developers' view of the evolving system. We outline our vision of self-aware eternal systems and identify the research challenges to realizing this vision. "
      },
      "after": "c4d57528eb782120",
      "date": 1633611736953
    },
    {
      "type": "edit",
      "id": "3a569c41ea221afd",
      "item": {
        "type": "markdown",
        "id": "3a569c41ea221afd",
        "text": "> **Abstract**. Few real software systems are built completely from scratch nowadays. Instead, systems are built iteratively and incrementally, while integrating and interacting with components from many other systems. These systems also last longer than their developers might imagine – they are, in effect, eternal. Nevertheless the platforms, tools and environments we use to develop software are still largely based on an outmoded model that presupposes that software systems are closed and will not significantly evolve after deployment. We claim that in order to enable effective and graceful evolution of eternal systems, we must make them self-aware. A self-aware eternal system supports evolution by: (i) providing explicit, first-class models of software artifacts, change and history at the level of the platform, (ii) continuously analysing static and dynamic evolution to track emergent properties, and (iii) closing the gap between the domain model and the developers' view of the evolving system. We outline our vision of self-aware eternal systems and identify the research challenges to realizing this vision. "
      },
      "date": 1633611756282
    },
    {
      "type": "edit",
      "id": "3a569c41ea221afd",
      "item": {
        "type": "markdown",
        "id": "3a569c41ea221afd",
        "text": "> **Abstract**. Few real software systems are built completely from scratch nowadays. Instead, systems are built iteratively and incrementally, while integrating and interacting with components from many other systems. These systems also last longer than their developers might imagine – they are, in effect, __eternal__. Nevertheless the platforms, tools and environments we use to develop software are still largely based on an outmoded model that presupposes that software systems are closed and will not significantly evolve after deployment. We claim that in order to enable effective and graceful evolution of eternal systems, we must make them self-aware. A self-aware eternal system supports evolution by: (i) providing explicit, first-class models of software artifacts, change and history at the level of the platform, (ii) continuously analysing static and dynamic evolution to track emergent properties, and (iii) closing the gap between the domain model and the developers' view of the evolving system. We outline our vision of self-aware eternal systems and identify the research challenges to realizing this vision. "
      },
      "date": 1633611793380
    },
    {
      "item": {
        "type": "factory",
        "id": "93aba760ba695d7e"
      },
      "id": "93aba760ba695d7e",
      "type": "add",
      "after": "3a569c41ea221afd",
      "date": 1633630743019
    },
    {
      "type": "edit",
      "id": "93aba760ba695d7e",
      "item": {
        "type": "markdown",
        "id": "93aba760ba695d7e",
        "text": "Next: [[Eternal Systems]]"
      },
      "date": 1633630787497
    }
  ]
}