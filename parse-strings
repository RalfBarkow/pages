{
  "title": "Parse Strings",
  "story": [
    {
      "type": "paragraph",
      "id": "6443ab70fa88236d",
      "text": "[…], the obvious way to parse strings (i.e. [[recover]] their trees) is, for each association problem, to associate to the left unless this yields semantic nonsense."
    },
    {
      "type": "paragraph",
      "id": "684a26fd48651c48",
      "text": "Unfortunately, nonsense testing requires looking up the types r_A and a_B and verifying the existence of a coercion from r_A to a_B. For translation this is not serious, but for interpretation it might slow things down significantly. Fortunately, there is an efficient solution that uses operator precedence functions."
    },
    {
      "type": "paragraph",
      "id": "fedc1f3167e4948c",
      "text": "[…] assignment of integers to the argument positions […]"
    },
    {
      "type": "pagefold",
      "id": "a20cc1ac8f34cc67",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "3ac5ddb3812bd06a",
      "text": "PRATT, Vaughan R., 1973. Top down operator precedence. In: Proceedings of the 1st annual ACM SIGACT-SIGPLAN symposium on Principles of programming languages. 1973. p. 41–51, p. 45.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Parse Strings",
        "story": []
      },
      "date": 1696226165913
    },
    {
      "id": "6443ab70fa88236d",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "6443ab70fa88236d",
        "text": "[…], the obvious way to parse strings (i.e. recover their trees) is, for each association problem, to associate to the left unless this yields semantic nonsense."
      },
      "attribution": {
        "page": "2023-10-02"
      },
      "date": 1696226168939
    },
    {
      "type": "edit",
      "id": "6443ab70fa88236d",
      "item": {
        "type": "paragraph",
        "id": "6443ab70fa88236d",
        "text": "[…], the obvious way to parse strings (i.e. recover their trees) is, for each association problem, to associate to the left unless this yields semantic nonsense."
      },
      "date": 1696226189785
    },
    {
      "item": {
        "type": "pagefold",
        "id": "a20cc1ac8f34cc67",
        "text": "~"
      },
      "id": "a20cc1ac8f34cc67",
      "type": "add",
      "after": "6443ab70fa88236d",
      "date": 1696226219107
    },
    {
      "type": "edit",
      "id": "a20cc1ac8f34cc67",
      "item": {
        "type": "pagefold",
        "id": "a20cc1ac8f34cc67",
        "text": "~"
      },
      "date": 1696226222826
    },
    {
      "item": {
        "type": "paragraph",
        "id": "3ac5ddb3812bd06a",
        "text": "PRATT, Vaughan R., 1973. Top down operator precedence. In: Proceedings of the 1st annual ACM SIGACT-SIGPLAN symposium on Principles of programming languages. 1973. p. 41–51, p. 45.\n"
      },
      "id": "3ac5ddb3812bd06a",
      "type": "add",
      "after": "a20cc1ac8f34cc67",
      "date": 1696226224349
    },
    {
      "type": "edit",
      "id": "3ac5ddb3812bd06a",
      "item": {
        "type": "paragraph",
        "id": "3ac5ddb3812bd06a",
        "text": "PRATT, Vaughan R., 1973. Top down operator precedence. In: Proceedings of the 1st annual ACM SIGACT-SIGPLAN symposium on Principles of programming languages. 1973. p. 41–51, p. 45.\n"
      },
      "date": 1696226234126
    },
    {
      "type": "edit",
      "id": "3ac5ddb3812bd06a",
      "item": {
        "type": "paragraph",
        "id": "3ac5ddb3812bd06a",
        "text": "PRATT, Vaughan R., 1973. Top down operator precedence. In: Proceedings of the 1st annual ACM SIGACT-SIGPLAN symposium on Principles of programming languages. 1973. p. 41–51, p. 45.\n"
      },
      "date": 1696226253529
    },
    {
      "type": "add",
      "id": "684a26fd48651c48",
      "item": {
        "type": "paragraph",
        "id": "684a26fd48651c48",
        "text": "Unfortunately, nonsense testing requires looking up the types r_A and a_B and verifying the existence of a coercion from r_A to a_B. For translation this is not serious, but for interpretation it might slow things down significantly. Fortunately, there is an efficient solution that uses operator precedence functions."
      },
      "after": "6443ab70fa88236d",
      "date": 1696226302892
    },
    {
      "type": "edit",
      "id": "684a26fd48651c48",
      "item": {
        "type": "paragraph",
        "id": "684a26fd48651c48",
        "text": "Unfortunately, nonsense testing requires looking up the types r_A and a_B and verifying the existence of a coercion from r_A to a_B. For translation this is not serious, but for interpretation it might slow things down significantly. Fortunately, there is an efficient solution that uses operator precedence functions."
      },
      "date": 1696226325245
    },
    {
      "type": "edit",
      "id": "684a26fd48651c48",
      "item": {
        "type": "paragraph",
        "id": "684a26fd48651c48",
        "text": "Unfortunately, nonsense testing requires looking up the types r_A and a_B and verifying the existence of a coercion from r_A to a_B. For translation this is not serious, but for interpretation it might slow things down significantly. Fortunately, there is an efficient solution that uses operator precedence functions."
      },
      "date": 1696226401466
    },
    {
      "type": "edit",
      "id": "684a26fd48651c48",
      "item": {
        "type": "paragraph",
        "id": "684a26fd48651c48",
        "text": "Unfortunately, nonsense testing requires looking up the types r_A and a_B and verifying the existence of a coercion from r_A to a_B. For translation this is not serious, but for interpretation it might slow things down significantly. Fortunately, there is an efficient solution that uses operator precedence functions."
      },
      "date": 1696226418042
    },
    {
      "type": "edit",
      "id": "684a26fd48651c48",
      "item": {
        "type": "paragraph",
        "id": "684a26fd48651c48",
        "text": "Unfortunately, nonsense testing requires looking up the types r_A and a_B and verifying the existence of a coercion from r_A to a_B. For translation this is not serious, but for interpretation it might slow things down significantly. Fortunately, there is an efficient solution that uses operator precedence functions."
      },
      "date": 1696226445770
    },
    {
      "type": "edit",
      "id": "684a26fd48651c48",
      "item": {
        "type": "paragraph",
        "id": "684a26fd48651c48",
        "text": "Unfortunately, nonsense testing requires looking up the types r_A and a_B and verifying the existence of a coercion from r_A to a_B. For translation this is not serious, but for interpretation it might slow things down significantly. Fortunately, there is an efficient solution that uses operator precedence functions."
      },
      "date": 1696226502677
    },
    {
      "type": "edit",
      "id": "684a26fd48651c48",
      "item": {
        "type": "paragraph",
        "id": "684a26fd48651c48",
        "text": "Unfortunately, nonsense testing requires looking up the types r_A and a_B and verifying the existence of a coercion from r_A to a_B. For translation this is not serious, but for interpretation it might slow things down significantly. Fortunately, there is an efficient solution that uses operator precedence functions."
      },
      "date": 1696226533863
    },
    {
      "type": "add",
      "id": "fedc1f3167e4948c",
      "item": {
        "type": "paragraph",
        "id": "fedc1f3167e4948c",
        "text": "[…] assignment of integers to the argument positions […]"
      },
      "after": "684a26fd48651c48",
      "date": 1696226612297
    },
    {
      "type": "edit",
      "id": "fedc1f3167e4948c",
      "item": {
        "type": "paragraph",
        "id": "fedc1f3167e4948c",
        "text": "[…] assignment of integers to the argument positions […]"
      },
      "date": 1696226620082,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1696228112326
    },
    {
      "type": "edit",
      "id": "6443ab70fa88236d",
      "item": {
        "type": "paragraph",
        "id": "6443ab70fa88236d",
        "text": "[…], the obvious way to parse strings (i.e. [[recover]] their trees) is, for each association problem, to associate to the left unless this yields semantic nonsense."
      },
      "date": 1696310521823
    }
  ]
}