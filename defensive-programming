{
  "title": "Defensive Programming",
  "story": [
    {
      "type": "html",
      "text": "Blanket term for various practices increasing code stability once the code is in production. Defensive programming defends against the currently impossible.",
      "id": "49fc2c54e1410277eaed8108792d5333"
    },
    {
      "type": "html",
      "text": "\nIdioms that have [[Defensive Programming]] as the primary effect:",
      "id": "618d501471594b348b8ab37ca0edc3d8"
    },
    {
      "type": "html",
      "text": " [[Always Use Braces On If Then]]",
      "id": "bc1900c15b6d7d2a8b2557c2a1ae1bd7"
    },
    {
      "type": "html",
      "text": "\nIdioms that have [[Defensive Programming]] as a side-effect:",
      "id": "6493f66435b2f0174bc8f10e8c9c4a31"
    },
    {
      "type": "html",
      "text": " [[Expressive Loop Condition]]",
      "id": "53999c64e14202f1315a37ccda8afc51"
    },
    {
      "type": "html",
      "text": "\nSee also: [[Offensive Programming]]",
      "id": "e699b424c7f8d29a6a28de9607655489"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "613d358e96c744f1f8fa367568940973"
    },
    {
      "type": "html",
      "text": "<b>Pro</b>",
      "id": "7e95f04a65052d69ec9f078e83bf1c9c"
    },
    {
      "type": "html",
      "text": "\nDefend against the impossible, because the impossible will happen.",
      "id": "3020c7f61dff639348cacb237eb93c1c"
    },
    {
      "type": "html",
      "text": "\nCritical sytems will not fail, but rather try as hard as possible to do the [[Right Thing]].",
      "id": "6ee4f2ffd19346df54430795a6ce8db9"
    },
    {
      "type": "html",
      "text": "\n[[Defensive Programming]] aids the future maintainer of the code.",
      "id": "18555fe84aa27b34edba8cc51ddbcc37"
    },
    {
      "type": "html",
      "text": "<i>Q: How?</i>",
      "id": "d8619af1b5ca94b774d9a58b7dd6ce68"
    },
    {
      "type": "html",
      "text": "<i>A1: Functions will do what their name suggests, even if newly introduced parameter values were not used before.</i>",
      "id": "4fe41d18751a9ad5c7992ff001e3857f"
    },
    {
      "type": "html",
      "text": "<i>A2: Things only break where they must.</i>",
      "id": "ac34873c7266e9e61e1bad531f1e434c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "613d358e96c744f1f8fa367568940973"
    },
    {
      "type": "html",
      "text": "<b>Con</b>",
      "id": "e840fffb4cde5d3576f3ddc5cd3bd543"
    },
    {
      "type": "html",
      "text": "\nWhy defend against the impossible if it can't happen?",
      "id": "30e870c086b971b02b82a6d38a2d6590"
    },
    {
      "type": "html",
      "text": "<i>Counter: Impossible things become possible when new people join the team, and when code goes into maintenance.</i>",
      "id": "69e055c2fb86f45743505f8c3892d1ec"
    },
    {
      "type": "html",
      "text": "<i>Counter2: Humans make anything possible when it comes to errors.</i>",
      "id": "ba9e739307b5626205b8655afd31abc4"
    },
    {
      "type": "html",
      "text": "\nIt increases the mass of the code, which will now have more inertia and be harder to change.",
      "id": "5460b72412ca407bcf7c73cfc924f319"
    },
    {
      "type": "html",
      "text": "\nIt may hide bugs instead of making them visible, if misapplied. See [[Offensive Programming]] and [[Offensive Defensive Programming]].",
      "id": "8da3bf86728b5007bb49c2d8ac65948d"
    },
    {
      "type": "html",
      "text": "\n[[Douglas Adams]] said it best: <i>The major difference between a thing that might go wrong and a thing that cannot possibly go wrong is that when a thing that cannot possibly go wrong goes wrong it usually turns out to be impossible to get at and repair.</i>",
      "id": "e7028af18db1787f09fbe77eeaa25da4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "613d358e96c744f1f8fa367568940973"
    },
    {
      "type": "html",
      "text": "\nI am currently working on a system about to go into production.  We have a number of [[Trouble Reports]] that needs to be resolved first, however.  The system consists of a number of networked nodes working in cooperation, and the trouble reports I have been looking at is usually along the lines of \"unit X swallow packet of type Y under conditions Z\".  I have not looked at many of these problems yet, but the ones I have has been due to the common misunderstanding about [[Defensive Programming]].  For example, a packet was silently ignored because it was in the wrong format.",
      "id": "01fa06cdf763f413d1d0060aec9c6b6a"
    },
    {
      "type": "html",
      "text": "\nMisappliances of [[Defensive Programming]] are usually hard to track down as they take effect as just missing behaviour, and not a loud and visible error message.  The idea of [[Defensive Programming]] is good, but it is often misapplied.  I therefore suggest using the term [[Offensive Programming]] instead.",
      "id": "0cecf533fbfe89aec6f6e8f5e74523aa"
    },
    {
      "type": "html",
      "text": "<i>If a bad packet was silently ignored by some process, rather than an exception being thrown, then it would appear to be the opposite of what is being talked about here.  Defensive programming means raising errors loudly (via assertions usually) whenever something is not perfectly within specification (even things that seem very unlikely to ever happen).</i>",
      "id": "a86dcdeede32e6785cef17695e8be343"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "613d358e96c744f1f8fa367568940973"
    },
    {
      "type": "html",
      "text": "\nDunno if this is the right place. But I have an issue like this.",
      "id": "fea4357880fd80ce22a5ec1b5fa5b4c5"
    },
    {
      "type": "html",
      "text": "\nWhen you're forced to deal with error conditions by explicit exception handlers, you're often inclined to do something that makes sense locally, but doesn't in a wider context. For example, you catch a thrown exception, and handle it in a way that doesn't break execution. But later on, someone tries to re-use the code and your exception handling is now <i>[[Exception Hiding]]</i>. ",
      "id": "e4ba18741419cdf6d385d58a386ba6df"
    },
    {
      "type": "html",
      "text": "\nI prefer it when things just break. ",
      "id": "7b2c3e4bcac0077733b61bd78004bf84"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "613d358e96c744f1f8fa367568940973"
    },
    {
      "type": "html",
      "text": "<i>I prefer it when things just break.</i>",
      "id": "7490010ce000da23f6f069c093f21746"
    },
    {
      "type": "html",
      "text": "\nAnother consequence of [[Exception Hiding]] is that related systems can easily become dependant on your system not reporting invalid input/error conditions. I'm currently working on expanding the scope of a legacy program which 'eats' bad input.  The result of this is that refactorings and improvements in a subsytem tend to break the program. Not because the subsystem that I've changed don't fullfill its' duties, but rather because many of the other sub-systems in the app are reliant on not receiving exceptions when they spew bad output.  Rather than being able to make an isolated refactoring, the changes must either be [[Bug Compatible]] with the legacy system, or the dependant systems must also be fixed.  This has lead to constant headaches with testing and use because new problems are often hidden by the handling for the other legacy systems, leading to frustrating bug hunts.  I also see (on the horizon), a good deal of work to go back and find all the cases where we had to ignore invalid input to be [[Bug Compatible]] and remove them.",
      "id": "ba34fee67c261773ad3ca7aa6f6fe1f0"
    },
    {
      "type": "html",
      "text": "\nPersonally I've always thought of [[Defensive Programming]] as being extra cautious with situations that should raise exceptions or lead to errors further on in your function.  Checking 'If x <= 0' instead of simply 'If x = 0', or checking for both overflows AND underflows.  -- [[Aaron Cumming]]",
      "id": "9054b28b4bb95dc5b9b73fbc579ded8e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "613d358e96c744f1f8fa367568940973"
    },
    {
      "type": "html",
      "text": "[[Category Defensive Programming]]",
      "id": "038ebe7f2dc3fb5f86ced657d9493229"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?DefensiveProgramming c2.com]",
      "id": "cc804eebf92a387eca3405c2296fcd5e"
    }
  ],
  "journal": [
    {
      "date": 1220243348000,
      "id": "c0bf4244504d04b39c05a775498313b3",
      "type": "create",
      "item": {
        "title": "Defensive Programming",
        "story": [
          {
            "type": "html",
            "text": "Blanket term for various practices increasing code stability once the code is in production. Defensive programming defends against the currently impossible.",
            "id": "49fc2c54e1410277eaed8108792d5333"
          },
          {
            "type": "html",
            "text": "\nIdioms that have [[Defensive Programming]] as the primary effect:",
            "id": "618d501471594b348b8ab37ca0edc3d8"
          },
          {
            "type": "html",
            "text": " [[Always Use Braces On If Then]]",
            "id": "bc1900c15b6d7d2a8b2557c2a1ae1bd7"
          },
          {
            "type": "html",
            "text": "\nIdioms that have [[Defensive Programming]] as a side-effect:",
            "id": "6493f66435b2f0174bc8f10e8c9c4a31"
          },
          {
            "type": "html",
            "text": " [[Expressive Loop Condition]]",
            "id": "53999c64e14202f1315a37ccda8afc51"
          },
          {
            "type": "html",
            "text": "\nSee also: [[Offensive Programming]]",
            "id": "e699b424c7f8d29a6a28de9607655489"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "613d358e96c744f1f8fa367568940973"
          },
          {
            "type": "html",
            "text": "<b>Pro</b>",
            "id": "7e95f04a65052d69ec9f078e83bf1c9c"
          },
          {
            "type": "html",
            "text": "\nDefend against the impossible, because the impossible will happen.",
            "id": "3020c7f61dff639348cacb237eb93c1c"
          },
          {
            "type": "html",
            "text": "\nCritical sytems will not fail, but rather try as hard as possible to do the [[Right Thing]].",
            "id": "6ee4f2ffd19346df54430795a6ce8db9"
          },
          {
            "type": "html",
            "text": "\n[[Defensive Programming]] aids the future maintainer of the code.",
            "id": "18555fe84aa27b34edba8cc51ddbcc37"
          },
          {
            "type": "html",
            "text": "<i>Q: How?</i>",
            "id": "d8619af1b5ca94b774d9a58b7dd6ce68"
          },
          {
            "type": "html",
            "text": "<i>A1: Functions will do what their name suggests, even if newly introduced parameter values were not used before.</i>",
            "id": "4fe41d18751a9ad5c7992ff001e3857f"
          },
          {
            "type": "html",
            "text": "<i>A2: Things only break where they must.</i>",
            "id": "ac34873c7266e9e61e1bad531f1e434c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "613d358e96c744f1f8fa367568940973"
          },
          {
            "type": "html",
            "text": "<b>Con</b>",
            "id": "e840fffb4cde5d3576f3ddc5cd3bd543"
          },
          {
            "type": "html",
            "text": "\nWhy defend against the impossible if it can't happen?",
            "id": "30e870c086b971b02b82a6d38a2d6590"
          },
          {
            "type": "html",
            "text": "<i>Counter: Impossible things become possible when new people join the team, and when code goes into maintenance.</i>",
            "id": "69e055c2fb86f45743505f8c3892d1ec"
          },
          {
            "type": "html",
            "text": "<i>Counter2: Humans make anything possible when it comes to errors.</i>",
            "id": "ba9e739307b5626205b8655afd31abc4"
          },
          {
            "type": "html",
            "text": "\nIt increases the mass of the code, which will now have more inertia and be harder to change.",
            "id": "5460b72412ca407bcf7c73cfc924f319"
          },
          {
            "type": "html",
            "text": "\nIt may hide bugs instead of making them visible, if misapplied. See [[Offensive Programming]] and [[Offensive Defensive Programming]].",
            "id": "8da3bf86728b5007bb49c2d8ac65948d"
          },
          {
            "type": "html",
            "text": "\n[[Douglas Adams]] said it best: <i>The major difference between a thing that might go wrong and a thing that cannot possibly go wrong is that when a thing that cannot possibly go wrong goes wrong it usually turns out to be impossible to get at and repair.</i>",
            "id": "e7028af18db1787f09fbe77eeaa25da4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "613d358e96c744f1f8fa367568940973"
          },
          {
            "type": "html",
            "text": "\nI am currently working on a system about to go into production.  We have a number of [[Trouble Reports]] that needs to be resolved first, however.  The system consists of a number of networked nodes working in cooperation, and the trouble reports I have been looking at is usually along the lines of \"unit X swallow packet of type Y under conditions Z\".  I have not looked at many of these problems yet, but the ones I have has been due to the common misunderstanding about [[Defensive Programming]].  For example, a packet was silently ignored because it was in the wrong format.",
            "id": "01fa06cdf763f413d1d0060aec9c6b6a"
          },
          {
            "type": "html",
            "text": "\nMisappliances of [[Defensive Programming]] are usually hard to track down as they take effect as just missing behaviour, and not a loud and visible error message.  The idea of [[Defensive Programming]] is good, but it is often misapplied.  I therefore suggest using the term [[Offensive Programming]] instead.",
            "id": "0cecf533fbfe89aec6f6e8f5e74523aa"
          },
          {
            "type": "html",
            "text": "<i>If a bad packet was silently ignored by some process, rather than an exception being thrown, then it would appear to be the opposite of what is being talked about here.  Defensive programming means raising errors loudly (via assertions usually) whenever something is not perfectly within specification (even things that seem very unlikely to ever happen).</i>",
            "id": "a86dcdeede32e6785cef17695e8be343"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "613d358e96c744f1f8fa367568940973"
          },
          {
            "type": "html",
            "text": "\nDunno if this is the right place. But I have an issue like this.",
            "id": "fea4357880fd80ce22a5ec1b5fa5b4c5"
          },
          {
            "type": "html",
            "text": "\nWhen you're forced to deal with error conditions by explicit exception handlers, you're often inclined to do something that makes sense locally, but doesn't in a wider context. For example, you catch a thrown exception, and handle it in a way that doesn't break execution. But later on, someone tries to re-use the code and your exception handling is now <i>[[Exception Hiding]]</i>. ",
            "id": "e4ba18741419cdf6d385d58a386ba6df"
          },
          {
            "type": "html",
            "text": "\nI prefer it when things just break. ",
            "id": "7b2c3e4bcac0077733b61bd78004bf84"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "613d358e96c744f1f8fa367568940973"
          },
          {
            "type": "html",
            "text": "<i>I prefer it when things just break.</i>",
            "id": "7490010ce000da23f6f069c093f21746"
          },
          {
            "type": "html",
            "text": "\nAnother consequence of [[Exception Hiding]] is that related systems can easily become dependant on your system not reporting invalid input/error conditions. I'm currently working on expanding the scope of a legacy program which 'eats' bad input.  The result of this is that refactorings and improvements in a subsytem tend to break the program. Not because the subsystem that I've changed don't fullfill its' duties, but rather because many of the other sub-systems in the app are reliant on not receiving exceptions when they spew bad output.  Rather than being able to make an isolated refactoring, the changes must either be [[Bug Compatible]] with the legacy system, or the dependant systems must also be fixed.  This has lead to constant headaches with testing and use because new problems are often hidden by the handling for the other legacy systems, leading to frustrating bug hunts.  I also see (on the horizon), a good deal of work to go back and find all the cases where we had to ignore invalid input to be [[Bug Compatible]] and remove them.",
            "id": "ba34fee67c261773ad3ca7aa6f6fe1f0"
          },
          {
            "type": "html",
            "text": "\nPersonally I've always thought of [[Defensive Programming]] as being extra cautious with situations that should raise exceptions or lead to errors further on in your function.  Checking 'If x <= 0' instead of simply 'If x = 0', or checking for both overflows AND underflows.  -- [[Aaron Cumming]]",
            "id": "9054b28b4bb95dc5b9b73fbc579ded8e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "613d358e96c744f1f8fa367568940973"
          },
          {
            "type": "html",
            "text": "[[Category Defensive Programming]]",
            "id": "038ebe7f2dc3fb5f86ced657d9493229"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?DefensiveProgramming c2.com]",
            "id": "cc804eebf92a387eca3405c2296fcd5e"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1671724301943
    }
  ]
}