{
  "title": "Intermediate Representation",
  "story": [
    {
      "type": "paragraph",
      "id": "99a479dc42133e0b",
      "text": "An intermediate representation (IR) is the data structure or code used internally by a compiler or [[virtual machine]] to represent source code. An IR is designed to be conducive to further processing, such as optimization and translation. A \"good\" IR must be accurate – capable of representing the source code without loss of information – and independent of any particular source or target language. An IR may take one of several forms: an in-memory data structure, or a special tuple- or stack-based code readable by the program. In the latter case it is also called an intermediate language. [https://en.wikipedia.org/wiki/Intermediate_representation wikipedia]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Intermediate Representation",
        "story": []
      },
      "date": 1661346664424
    },
    {
      "item": {
        "type": "factory",
        "id": "99a479dc42133e0b"
      },
      "id": "99a479dc42133e0b",
      "type": "add",
      "date": 1661346667329
    },
    {
      "type": "edit",
      "id": "99a479dc42133e0b",
      "item": {
        "type": "paragraph",
        "id": "99a479dc42133e0b",
        "text": "An intermediate representation (IR) is the data structure or code used internally by a compiler or virtual machine to represent source code. An IR is designed to be conducive to further processing, such as optimization and translation.[1] A \"good\" IR must be accurate – capable of representing the source code without loss of information[2] – and independent of any particular source or target language.[1] An IR may take one of several forms: an in-memory data structure, or a special tuple- or stack-based code readable by the program.[3] In the latter case it is also called an intermediate language. "
      },
      "date": 1661346669385
    },
    {
      "type": "edit",
      "id": "99a479dc42133e0b",
      "item": {
        "type": "paragraph",
        "id": "99a479dc42133e0b",
        "text": "An intermediate representation (IR) is the data structure or code used internally by a compiler or [[virtual machine]] to represent source code. An IR is designed to be conducive to further processing, such as optimization and translation. A \"good\" IR must be accurate – capable of representing the source code without loss of information – and independent of any particular source or target language.[1] An IR may take one of several forms: an in-memory data structure, or a special tuple- or stack-based code readable by the program. In the latter case it is also called an intermediate language. [https://en.wikipedia.org/wiki/Intermediate_representation wikipedia]"
      },
      "date": 1661346696796
    },
    {
      "type": "edit",
      "id": "99a479dc42133e0b",
      "item": {
        "type": "paragraph",
        "id": "99a479dc42133e0b",
        "text": "An intermediate representation (IR) is the data structure or code used internally by a compiler or [[virtual machine]] to represent source code. An IR is designed to be conducive to further processing, such as optimization and translation. A \"good\" IR must be accurate – capable of representing the source code without loss of information – and independent of any particular source or target language. An IR may take one of several forms: an in-memory data structure, or a special tuple- or stack-based code readable by the program. In the latter case it is also called an intermediate language. [https://en.wikipedia.org/wiki/Intermediate_representation wikipedia]"
      },
      "date": 1661346723557
    }
  ]
}