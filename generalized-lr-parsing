{
  "title": "Generalized LR Parsing",
  "story": [
    {
      "type": "paragraph",
      "id": "612eb68e025cfe11",
      "text": "TOMITA, Masaru, 1991. Generalized LR parsing. Springer Science & Business Media. [Accessed 19 December 2023]. \n"
    },
    {
      "type": "paragraph",
      "id": "8362828eb23d0b8f",
      "text": "The Generalized LR parsing algorithm (some call it \"Tomita's algorithm\") was originally developed in 1985 as a part of my Ph.D thesis at Carnegie Mellon University. When I was a graduate student at CMU, I tried to build a couple of natural language systems based on existing parsing methods. Their parsing speed, however, always bothered me. I sometimes wondered whether it was ever possible to build a natural language parser that could parse reasonably long sentences in a reasonable time without help from large mainframe machines."
    },
    {
      "type": "paragraph",
      "id": "ada189cc8b106984",
      "text": "At the same time, I was always amazed by the speed of programming language compilers, because they can parse very long sentences (i.e., programs) very quickly even on workstations. There are two reasons. First, programming languages are considerably simpler than natural languages. And secondly, they have very efficient parsing methods, most notably [[LR]]."
    },
    {
      "type": "paragraph",
      "id": "37cdb91cc24981cf",
      "text": "The Generalized LR parsing algorithm handles multiply defined entries gracefully with a device called [[Graph-Structured Stack]], preserving most of the LR efficiency. In fact, if the grammar is as simple as a programming language, it behaves exactly like the standard LR parsing algorithm. While its efficiency is still debatable with the unusual worst case grammars, I (Masaru Tomita) am confident that the GLR parsing algorithm is clearly more efficient than any other non-precompiling algorithms for practical natural language grammars."
    },
    {
      "type": "paragraph",
      "id": "a261f31dd61cc04c",
      "text": "A [[Common Lisp]] version of the GLR parser is available for practical natural language projects. It accepts a grammar written in an LFG-like notation. If you are interested in obtaining a copy of the software, contact: […]"
    },
    {
      "type": "paragraph",
      "id": "25d2a0ce9ab900d0",
      "text": "This parser is no longer the only GLR parser. At the first International Workshop on Parsing Technologies (Pittsburgh, 1989), a good number of papers on GLR parsing were presented by many different researchers from allover the world. This book is a collection of selected papers on GLR parsing, most of which were presented at the workshop."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Generalized LR Parsing",
        "story": []
      },
      "date": 1702982511485
    },
    {
      "id": "612eb68e025cfe11",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "612eb68e025cfe11",
        "text": "TOMITA, Masaru, 1991. Generalized LR parsing. Springer Science & Business Media. [Accessed 19 December 2023]. \n"
      },
      "attribution": {
        "page": "2023-12-19"
      },
      "date": 1702982517614
    },
    {
      "item": {
        "type": "factory",
        "id": "8362828eb23d0b8f"
      },
      "id": "8362828eb23d0b8f",
      "type": "add",
      "after": "612eb68e025cfe11",
      "date": 1702982574859
    },
    {
      "type": "edit",
      "id": "8362828eb23d0b8f",
      "item": {
        "type": "paragraph",
        "id": "8362828eb23d0b8f",
        "text": "The Generalized LR parsing algorithm (some call it \"Tomita's algorithm\") was originally developed in 1985 as a part of my Ph.D thesis at Carnegie Mellon University. When I was a graduate student at CMU, I tried to build a couple of natural language systems based on existing parsing methods. Their parsing speed, however, always bothered me. I sometimes wondered whether it was ever possible to build a natural language parser that could parse reasonably long sentences in a reasonable time without help from large mainframe machines."
      },
      "date": 1702982579752
    },
    {
      "item": {
        "type": "factory",
        "id": "ada189cc8b106984"
      },
      "id": "ada189cc8b106984",
      "type": "add",
      "after": "8362828eb23d0b8f",
      "date": 1702982613107
    },
    {
      "type": "edit",
      "id": "ada189cc8b106984",
      "item": {
        "type": "paragraph",
        "id": "ada189cc8b106984",
        "text": "At the same time, I was always amazed by the speed of programming language compilers, because they can parse very long sentences (i.e., programs) very quickly even on workstations. There are two reasons. First, programming languages are considerably simpler than natural languages. And secondly, they have very efficient parsing methods, most notably LR. The LR parsing algorithm first precompiles a grammar into an LR parsing table, and at the actual parsing time, it performs shift-reduce parsing guided deterministically by the parsing table. So, the key to the LR efficiency is the grammar precompilation; something that had never been tried for natural languages in 1985."
      },
      "date": 1702982614676
    },
    {
      "type": "edit",
      "id": "ada189cc8b106984",
      "item": {
        "type": "paragraph",
        "id": "ada189cc8b106984",
        "text": "At the same time, I was always amazed by the speed of programming language compilers, because they can parse very long sentences (i.e., programs) very quickly even on workstations. There are two reasons. First, programming languages are considerably simpler than natural languages. And secondly, they have very efficient parsing methods, most notably [[LR]]. The LR parsing algorithm first precompiles a grammar into an LR parsing table, and at the actual parsing time, it performs shift-reduce parsing guided deterministically by the parsing table. So, the key to the LR efficiency is the grammar precompilation; something that had never been tried for natural languages in 1985."
      },
      "date": 1702982648632
    },
    {
      "type": "edit",
      "id": "ada189cc8b106984",
      "item": {
        "type": "paragraph",
        "id": "ada189cc8b106984",
        "text": "At the same time, I was always amazed by the speed of programming language compilers, because they can parse very long sentences (i.e., programs) very quickly even on workstations. There are two reasons. First, programming languages are considerably simpler than natural languages. And secondly, they have very efficient parsing methods, most notably [[LR]]."
      },
      "date": 1702982668560
    },
    {
      "type": "add",
      "id": "18f24fc915cf7bd1",
      "item": {
        "type": "paragraph",
        "id": "18f24fc915cf7bd1",
        "text": "The LR parsing algorithm first precompiles a grammar into an LR parsing table, and at the actual parsing time, it performs shift-reduce parsing guided deterministically by the parsing table. So, the key to the LR efficiency is the grammar precompilation; something that had never been tried for natural languages in 1985."
      },
      "after": "ada189cc8b106984",
      "date": 1702982670213
    },
    {
      "id": "18f24fc915cf7bd1",
      "type": "remove",
      "removedTo": {
        "page": "LR"
      },
      "date": 1702982676157
    },
    {
      "id": "37cdb91cc24981cf",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "37cdb91cc24981cf",
        "text": "The Generalized LR parsing algorithm handles multiply defined entries gracefully with a device called [[Graph-Structured Stack]], preserving most of the LR efficiency. In fact, if the grammar is as simple as a programming language, it behaves exactly like the standard LR parsing algorithm. While its efficiency is still debatable with the unusual worst case grammars, I (Masaru Tomita) am confident that the GLR parsing algorithm is clearly more efficient than any other non-precompiling algorithms for practical natural language grammars."
      },
      "after": "ada189cc8b106984",
      "attribution": {
        "page": "LR"
      },
      "date": 1702983084902
    },
    {
      "id": "a261f31dd61cc04c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a261f31dd61cc04c",
        "text": "A [[Common Lisp]] version of the GLR parser is available for practical natural language projects. It accepts a grammar written in an LFG-like notation. If you are interested in obtaining a copy of the software, contact: […]"
      },
      "after": "37cdb91cc24981cf",
      "attribution": {
        "page": "LR"
      },
      "date": 1702983103066
    },
    {
      "id": "25d2a0ce9ab900d0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "25d2a0ce9ab900d0",
        "text": "This parser is no longer the only GLR parser. At the first International Workshop on Parsing Technologies (Pittsburgh, 1989), a good number of papers on GLR parsing were presented by many different researchers from allover the world. This book is a collection of selected papers on GLR parsing, most of which were presented at the workshop."
      },
      "after": "a261f31dd61cc04c",
      "attribution": {
        "page": "LR"
      },
      "date": 1702983118591
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1702986127592
    }
  ]
}