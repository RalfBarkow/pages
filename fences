{
  "title": "Fences",
  "story": [
    {
      "type": "paragraph",
      "id": "650f24f493a524ab",
      "text": "See"
    },
    {
      "type": "markdown",
      "id": "342d168112d10a32",
      "text": "* [[Alan Kay On Messaging]] ⇒ [[fences]]"
    },
    {
      "type": "markdown",
      "id": "f236652e4ded23b9",
      "text": "> I think I recall also pointing out that it is vitally important not just to have a complete metasystem, but to have [[fences]] that help guard the crossing of metaboundaries. One of the simplest of these was one of the motivations for my original excursions in the late sixties: the realization that assignments are a metalevel change from functions, and therefore should not be dealt with at the same level - this was one of the motivations to encapsulate these kinds of state changes, and not let them be done willy nilly. I would say that a system that allowed other metathings to be done in the ordinary course of programming (like changing what inheritance means, or what is an instance) is a bad design. (I believe that systems should allow these things, but the design should be such that there are clear [[fences]] that have to be crossed when serious extensions are made.)\n"
    },
    {
      "type": "markdown",
      "id": "4ab030782424a3e5",
      "text": "* [[Fence after Fence]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Fences",
        "story": []
      },
      "date": 1645361577733
    },
    {
      "item": {
        "type": "factory",
        "id": "650f24f493a524ab"
      },
      "id": "650f24f493a524ab",
      "type": "add",
      "date": 1645361598360
    },
    {
      "type": "edit",
      "id": "650f24f493a524ab",
      "item": {
        "type": "paragraph",
        "id": "650f24f493a524ab",
        "text": "See"
      },
      "date": 1645361602946
    },
    {
      "type": "add",
      "id": "342d168112d10a32",
      "item": {
        "type": "paragraph",
        "id": "342d168112d10a32",
        "text": "* "
      },
      "after": "650f24f493a524ab",
      "date": 1645361605937
    },
    {
      "type": "edit",
      "id": "342d168112d10a32",
      "item": {
        "type": "paragraph",
        "id": "342d168112d10a32",
        "text": "* [[Fence after Fence]]"
      },
      "date": 1645361616245
    },
    {
      "type": "edit",
      "id": "342d168112d10a32",
      "item": {
        "type": "paragraph",
        "id": "342d168112d10a32",
        "text": "*"
      },
      "date": 1645361637283
    },
    {
      "type": "add",
      "id": "4ab030782424a3e5",
      "item": {
        "type": "paragraph",
        "id": "4ab030782424a3e5",
        "text": "* [[Fence after Fence]]"
      },
      "after": "342d168112d10a32",
      "date": 1645361639572
    },
    {
      "type": "edit",
      "id": "342d168112d10a32",
      "item": {
        "type": "paragraph",
        "id": "342d168112d10a32",
        "text": "* [[Alan Kay On Messaging]]"
      },
      "date": 1645361644471
    },
    {
      "type": "edit",
      "id": "342d168112d10a32",
      "item": {
        "type": "markdown",
        "id": "342d168112d10a32",
        "text": "* [[Alan Kay On Messaging]]"
      },
      "date": 1645361645755
    },
    {
      "type": "edit",
      "id": "4ab030782424a3e5",
      "item": {
        "type": "markdown",
        "id": "4ab030782424a3e5",
        "text": "* [[Fence after Fence]]"
      },
      "date": 1645361646699
    },
    {
      "type": "edit",
      "id": "342d168112d10a32",
      "item": {
        "type": "markdown",
        "id": "342d168112d10a32",
        "text": "* [[Alan Kay On Messaging]] ⇒ [[fences]]"
      },
      "date": 1645361671340
    },
    {
      "id": "f236652e4ded23b9",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f236652e4ded23b9",
        "text": "I think I recall also pointing out that it is vitally important not just to have a complete metasystem, but to have [[fences]] that help guard the crossing of metaboundaries. One of the simplest of these was one of the motivations for my original excursions in the late sixties: the realization that assignments are a metalevel change from functions, and therefore should not be dealt with at the same level - this was one of the motivations to encapsulate these kinds of state changes, and not let them be done willy nilly. I would say that a system that allowed other metathings to be done in the ordinary course of programming (like changing what inheritance means, or what is an instance) is a bad design. (I believe that systems should allow these things, but the design should be such that there are clear [[fences]] that have to be crossed when serious extensions are made.)\n"
      },
      "after": "342d168112d10a32",
      "date": 1645362612632
    },
    {
      "type": "edit",
      "id": "f236652e4ded23b9",
      "item": {
        "type": "paragraph",
        "id": "f236652e4ded23b9",
        "text": "> I think I recall also pointing out that it is vitally important not just to have a complete metasystem, but to have [[fences]] that help guard the crossing of metaboundaries. One of the simplest of these was one of the motivations for my original excursions in the late sixties: the realization that assignments are a metalevel change from functions, and therefore should not be dealt with at the same level - this was one of the motivations to encapsulate these kinds of state changes, and not let them be done willy nilly. I would say that a system that allowed other metathings to be done in the ordinary course of programming (like changing what inheritance means, or what is an instance) is a bad design. (I believe that systems should allow these things, but the design should be such that there are clear [[fences]] that have to be crossed when serious extensions are made.)\n"
      },
      "date": 1645362633006
    },
    {
      "type": "edit",
      "id": "f236652e4ded23b9",
      "item": {
        "type": "markdown",
        "id": "f236652e4ded23b9",
        "text": "> I think I recall also pointing out that it is vitally important not just to have a complete metasystem, but to have [[fences]] that help guard the crossing of metaboundaries. One of the simplest of these was one of the motivations for my original excursions in the late sixties: the realization that assignments are a metalevel change from functions, and therefore should not be dealt with at the same level - this was one of the motivations to encapsulate these kinds of state changes, and not let them be done willy nilly. I would say that a system that allowed other metathings to be done in the ordinary course of programming (like changing what inheritance means, or what is an instance) is a bad design. (I believe that systems should allow these things, but the design should be such that there are clear [[fences]] that have to be crossed when serious extensions are made.)\n"
      },
      "date": 1645362633987
    }
  ]
}