{
  "title": "DefaultControllerFactory",
  "story": [
    {
      "type": "markdown",
      "id": "b7d92f6520296230",
      "text": "[[ZettelkastenFX]] [https://github.com/RalfBarkow/ZettelkastenFX github] brought us here.\n\n# FxmlView\n\n[…]\n\n> To instantiate controllers, the *FxmlView* relies  on the associated controller factory. By default it is initialized to *DefaultControllerFactory* that also supports *@Inject* annotation. For every call,  the factory creates a new instance of the  controller but all the dependencies (models, services, etc.) are treated as singletons and kept  in an internal cache."
    },
    {
      "type": "markdown",
      "id": "beac1de13d78d189",
      "text": "Here we want to learn to call an already existing *Stage* of a *Zettel* (note) instead of creating a new Stage every time when *handleMouseClick* calls *showStageZettel*."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "DefaultControllerFactory",
        "story": []
      },
      "date": 1627109454513
    },
    {
      "item": {
        "type": "factory",
        "id": "b7d92f6520296230"
      },
      "id": "b7d92f6520296230",
      "type": "add",
      "date": 1627109475641
    },
    {
      "type": "edit",
      "id": "b7d92f6520296230",
      "item": {
        "type": "markdown",
        "id": "b7d92f6520296230",
        "text": "# FxmlView\n"
      },
      "date": 1627109481816
    },
    {
      "type": "edit",
      "id": "b7d92f6520296230",
      "item": {
        "type": "markdown",
        "id": "b7d92f6520296230",
        "text": "# FxmlView\n\n[…]\n"
      },
      "date": 1627109494135
    },
    {
      "type": "edit",
      "id": "b7d92f6520296230",
      "item": {
        "type": "markdown",
        "id": "b7d92f6520296230",
        "text": "# FxmlView\n\n[…]\n\n> To  instantiate  controllers,  the  FxmlView  relies  on  the \nassociated controller factory. By default it is initialized to \nDefaultControllerFactory that also supports @Inject \nannotation.  For  every  call,  the  factory  creates  a  new  in-\nstance  of  the  controller  but  all  the  dependencies  (models, \nservices,  etc.)  are  treated  as  singletons  and  kept  in  an \ninternal cache."
      },
      "date": 1627109515285
    },
    {
      "type": "edit",
      "id": "b7d92f6520296230",
      "item": {
        "type": "markdown",
        "id": "b7d92f6520296230",
        "text": "# FxmlView\n\n[…]\n\n> To instantiate controllers, the *FxmlView* relies  on the associated controller factory. By default it is initialized to *DefaultControllerFactory* that also supports @Inject \nannotation.  For  every  call,  the  factory  creates  a  new  in-\nstance  of  the  controller  but  all  the  dependencies  (models, \nservices,  etc.)  are  treated  as  singletons  and  kept  in  an \ninternal cache."
      },
      "date": 1627109563164
    },
    {
      "type": "edit",
      "id": "b7d92f6520296230",
      "item": {
        "type": "markdown",
        "id": "b7d92f6520296230",
        "text": "# FxmlView\n\n[…]\n\n> To instantiate controllers, the *FxmlView* relies  on the associated controller factory. By default it is initialized to *DefaultControllerFactory* that also supports *@Inject* \nannotation.  For  every  call,  the  factory  creates  a  new  in-\nstance  of  the  controller  but  all  the  dependencies  (models, \nservices,  etc.)  are  treated  as  singletons  and  kept  in  an \ninternal cache."
      },
      "date": 1627109574836
    },
    {
      "type": "edit",
      "id": "b7d92f6520296230",
      "item": {
        "type": "markdown",
        "id": "b7d92f6520296230",
        "text": "# FxmlView\n\n[…]\n\n> To instantiate controllers, the *FxmlView* relies  on the associated controller factory. By default it is initialized to *DefaultControllerFactory* that also supports *@Inject* annotation. For every call,  the  factory  creates  a  new  in-\nstance  of  the  controller  but  all  the  dependencies  (models, \nservices,  etc.)  are  treated  as  singletons  and  kept  in  an \ninternal cache."
      },
      "date": 1627109589137
    },
    {
      "type": "edit",
      "id": "b7d92f6520296230",
      "item": {
        "type": "markdown",
        "id": "b7d92f6520296230",
        "text": "# FxmlView\n\n[…]\n\n> To instantiate controllers, the *FxmlView* relies  on the associated controller factory. By default it is initialized to *DefaultControllerFactory* that also supports *@Inject* annotation. For every call,  the factory creates a new instance of the  controller but all the dependencies (models, \nservices, etc.) are treated as singletons and kept  in an internal cache."
      },
      "date": 1627109649736
    },
    {
      "type": "edit",
      "id": "b7d92f6520296230",
      "item": {
        "type": "markdown",
        "id": "b7d92f6520296230",
        "text": "# FxmlView\n\n[…]\n\n> To instantiate controllers, the *FxmlView* relies  on the associated controller factory. By default it is initialized to *DefaultControllerFactory* that also supports *@Inject* annotation. For every call,  the factory creates a new instance of the  controller but all the dependencies (models, services, etc.) are treated as singletons and kept  in an internal cache."
      },
      "date": 1627109686578
    },
    {
      "type": "edit",
      "id": "b7d92f6520296230",
      "item": {
        "type": "markdown",
        "id": "b7d92f6520296230",
        "text": "[[ZettelkastenFX]][https://github.com/RalfBarkow/ZettelkastenFX github] brought us here\n\n# FxmlView\n\n[…]\n\n> To instantiate controllers, the *FxmlView* relies  on the associated controller factory. By default it is initialized to *DefaultControllerFactory* that also supports *@Inject* annotation. For every call,  the factory creates a new instance of the  controller but all the dependencies (models, services, etc.) are treated as singletons and kept  in an internal cache."
      },
      "date": 1627109921465
    },
    {
      "type": "edit",
      "id": "b7d92f6520296230",
      "item": {
        "type": "markdown",
        "id": "b7d92f6520296230",
        "text": "[[ZettelkastenFX]] [https://github.com/RalfBarkow/ZettelkastenFX github] brought us here\n\n# FxmlView\n\n[…]\n\n> To instantiate controllers, the *FxmlView* relies  on the associated controller factory. By default it is initialized to *DefaultControllerFactory* that also supports *@Inject* annotation. For every call,  the factory creates a new instance of the  controller but all the dependencies (models, services, etc.) are treated as singletons and kept  in an internal cache."
      },
      "date": 1627109929937
    },
    {
      "type": "edit",
      "id": "b7d92f6520296230",
      "item": {
        "type": "markdown",
        "id": "b7d92f6520296230",
        "text": "[[ZettelkastenFX]] [https://github.com/RalfBarkow/ZettelkastenFX github] brought us here.\n\n# FxmlView\n\n[…]\n\n> To instantiate controllers, the *FxmlView* relies  on the associated controller factory. By default it is initialized to *DefaultControllerFactory* that also supports *@Inject* annotation. For every call,  the factory creates a new instance of the  controller but all the dependencies (models, services, etc.) are treated as singletons and kept  in an internal cache."
      },
      "date": 1627110076159
    },
    {
      "item": {
        "type": "factory",
        "id": "beac1de13d78d189"
      },
      "id": "beac1de13d78d189",
      "type": "add",
      "after": "b7d92f6520296230",
      "date": 1627110124275
    },
    {
      "type": "edit",
      "id": "beac1de13d78d189",
      "item": {
        "type": "markdown",
        "id": "beac1de13d78d189",
        "text": "Here we try to learn"
      },
      "date": 1627110131387
    },
    {
      "type": "edit",
      "id": "beac1de13d78d189",
      "item": {
        "type": "markdown",
        "id": "beac1de13d78d189",
        "text": "Here we want to learn to call an already existing *Stage* of a *Zettel* (note) instead of creating a new Stage each time."
      },
      "date": 1627110256335
    },
    {
      "type": "edit",
      "id": "beac1de13d78d189",
      "item": {
        "type": "markdown",
        "id": "beac1de13d78d189",
        "text": "Here we want to learn to call an already existing *Stage* of a *Zettel* (note) instead of creating a new Stage each time when *handleMouseClick* calls *showStage"
      },
      "date": 1627110328910
    },
    {
      "type": "edit",
      "id": "beac1de13d78d189",
      "item": {
        "type": "markdown",
        "id": "beac1de13d78d189",
        "text": "Here we want to learn to call an already existing *Stage* of a *Zettel* (note) instead of creating a new Stage each time when *handleMouseClick* calls *showStageZettel*."
      },
      "date": 1627110340177
    },
    {
      "type": "edit",
      "id": "beac1de13d78d189",
      "item": {
        "type": "markdown",
        "id": "beac1de13d78d189",
        "text": "Here we want to learn to call an already existing *Stage* of a *Zettel* (note) instead of creating a new Stage every time when *handleMouseClick* calls *showStageZettel*."
      },
      "date": 1627110373136
    }
  ]
}