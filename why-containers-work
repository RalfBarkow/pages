{
  "title": "Why Containers Work",
  "story": [
    {
      "type": "paragraph",
      "id": "3d486184c52299ef",
      "text": "Consistency.  And separation of concerns between configuration-time and run-time."
    },
    {
      "type": "paragraph",
      "id": "d478017148416dc8",
      "text": "Listening to the docker community explain containers is like listening to functional programmers explain monads, or LISPers explain macros.  Few can convey their magic.  Once a person has groked the magic, somehow they simultaneously loose the ability to illuminate a path to understanding for anyone who hasn't already groked the magic."
    },
    {
      "type": "markdown",
      "id": "5286eb7f36ea7baa",
      "text": "# Consistency\n"
    },
    {
      "type": "paragraph",
      "id": "b8892820c41deb9e",
      "text": "*nix processes depend on an ecosystem (see [[Nix Ecosystem]]): the kernel mediates access to RAM, CPU, devices, file system, and sockets.  The challenges of systems administration are nurturing and grooming the ecosystem that supports processes.  Processes finding themselves in inhospitable environments die."
    },
    {
      "type": "paragraph",
      "id": "3cb3653cb5434dca",
      "text": "In traditional systems administration, every intervention we make leaves footprints and debris in the ecosystem.  After a certain amount of time the processes and their ecosystems diverge sufficiently to make the behavior of the processes unreliable or just plain broken."
    },
    {
      "type": "paragraph",
      "id": "d8a87390d288ba78",
      "text": "Docker images provide a freeze-dried ecosystem custom tailored to the processes they will host.  When a container launches from an image, the freeze-dried ecosystem is thawed (sorta: let me stay with the metaphor), and the process takes up residence for as long as necessary to perform its tasks."
    },
    {
      "type": "paragraph",
      "id": "216ead86f42352a1",
      "text": "The magic is almost entirely down to simple consistency.  The consistent ecosystem is perfectly suited to the consistent processes.  If anything goes awry over time, we just stop the failing container and restart anew from a pristine state with a newly thawed ecosystem and new process taking up residence therein."
    },
    {
      "type": "paragraph",
      "id": "09095beb6b402ec7",
      "text": "One especially helpful side-effect of constructing specialized and controlled ecosystems is the ease with which those things can be shared with others.  If I construct this image carefully, the container you invoke from it will run the same on your computer as it does on mine."
    },
    {
      "type": "paragraph",
      "id": "f5774e7ae506acaa",
      "text": "Consistency.  That's magic."
    },
    {
      "type": "markdown",
      "id": "2f3fdfbb6af3095c",
      "text": "# Separation of Concerns (config from runtime)"
    },
    {
      "type": "paragraph",
      "id": "6bad440c34490a1b",
      "text": "The structure of images imposes on their authors a lot of up-front work understanding and organizing the necessary ecosystem and the processes it will host.  Exactly which versions of which packages are required?  Which programming language?  Where exactly must the configurations live on the file system?  Exactly what permissions are required?  Exactly where do the inputs come from and to where exactly do we send the outputs?"
    },
    {
      "type": "paragraph",
      "id": "1ed0b97d07f9c0eb",
      "text": "The image author is forced to think through the configuration ahead of time.  Everything they learn becomes encoded into the ecosystem.  You can only share the ecosystem."
    },
    {
      "type": "paragraph",
      "id": "a4cda30554fb263f",
      "text": "[[Runtime]] is where our processes can actually interact with the world.  And The Operator who types `docker run ... some-image` is empowered to enhance or alter the ecosystem or to launch different processes within that ecosystem, following or ignoring the author's expressed intent.  The options provided to `docker run` allow the operator to combine different ecosystems, by filesystem, internal networking, or external networking with the outside world.  Each running container takes up its ecological niche and the complete program emerges from the interactions between all these digital organisms."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Why Containers Work",
        "story": []
      },
      "date": 1512879381235
    },
    {
      "item": {
        "type": "factory",
        "id": "3d486184c52299ef"
      },
      "id": "3d486184c52299ef",
      "type": "add",
      "date": 1512879392872
    },
    {
      "type": "edit",
      "id": "3d486184c52299ef",
      "item": {
        "type": "paragraph",
        "id": "3d486184c52299ef",
        "text": "Three words: consistency, consistency, consistency."
      },
      "date": 1512879410596
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d478017148416dc8",
        "text": "Listening to the docker community explain containers is like listening to functional programmers explain monads, or LISPers explain macros.  Few can convey their magic.  Once a person has groked the magic, somehow they simultaneously loose the ability to illuminate a path to understanding for anyone who hasn't already groked the magic."
      },
      "after": "3d486184c52299ef",
      "id": "d478017148416dc8",
      "date": 1512879413843
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b8892820c41deb9e",
        "text": "*nix processes depend on an ecosystem: the kernel mediates access to RAM, CPU, devices, file system, and sockets.  The challenges of systems administration are nurturing and grooming the ecosystem that supports processes.  Processes finding themselves in inhospitable environments die."
      },
      "after": "d478017148416dc8",
      "id": "b8892820c41deb9e",
      "date": 1512879416181
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d8a87390d288ba78",
        "text": "Docker images provide a freeze-dried ecosystem custom tailored to the processes they will host.  When a container launches from an image, the freeze-dried ecosystem is thawed, and the process takes up residence for as long as necessary to perform its tasks."
      },
      "after": "b8892820c41deb9e",
      "id": "d8a87390d288ba78",
      "date": 1512879420536
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "216ead86f42352a1",
        "text": "The magic is almost entirely down to simple consistency.  The consistent ecosystem is perfectly suited to the consistent processes.  If anything goes awry over time, we just stop the failing container and restart anew from a pristine state with a new ecosystem and new process."
      },
      "after": "d8a87390d288ba78",
      "id": "216ead86f42352a1",
      "date": 1512879425052
    },
    {
      "type": "add",
      "id": "3cb3653cb5434dca",
      "item": {
        "type": "paragraph",
        "id": "3cb3653cb5434dca",
        "text": "In traditional systems administration, every intervention we make leaves footprints and debris in the ecosystem.  After a certain amount of time the processes and their ecosystems diverge sufficiently to make the behavior of the processes unreliable or just plain broken."
      },
      "after": "b8892820c41deb9e",
      "date": 1512879755583
    },
    {
      "type": "edit",
      "id": "d8a87390d288ba78",
      "item": {
        "type": "paragraph",
        "id": "d8a87390d288ba78",
        "text": "Docker images provide a freeze-dried ecosystem custom tailored to the processes they will host.  When a container launches from an image, the freeze-dried ecosystem is thawed (sorta: let me stay with the metaphor), and the process takes up residence for as long as necessary to perform its tasks."
      },
      "date": 1512879889599
    },
    {
      "type": "add",
      "id": "09095beb6b402ec7",
      "item": {
        "type": "paragraph",
        "id": "09095beb6b402ec7",
        "text": "This maneuver moves complexity into the interactions between containers.  There have always been complexities in inter-process communication.  The consistency within the containers reduces the number of places we have to look when communications break down.  (Except for the part where we're just running a LOT more processes than ever before in history)."
      },
      "after": "216ead86f42352a1",
      "date": 1512880302830
    },
    {
      "type": "edit",
      "id": "09095beb6b402ec7",
      "item": {
        "type": "paragraph",
        "id": "09095beb6b402ec7",
        "text": "One especially helpful side-effect of constructing specialized and controlled ecosystems is the ease with which those things can be shared with others.  If I construct this container carefully it will run the same on your computer as it does on mine."
      },
      "date": 1512880515962
    },
    {
      "type": "add",
      "id": "f5774e7ae506acaa",
      "item": {
        "type": "paragraph",
        "id": "f5774e7ae506acaa",
        "text": "Consistency.  That's the magic."
      },
      "after": "09095beb6b402ec7",
      "date": 1512880523997
    },
    {
      "type": "edit",
      "id": "3d486184c52299ef",
      "item": {
        "type": "paragraph",
        "id": "3d486184c52299ef",
        "text": "Consistency.  And separation of concerns between configuration-time and run-time."
      },
      "date": 1512880771864
    },
    {
      "type": "edit",
      "id": "f5774e7ae506acaa",
      "item": {
        "type": "paragraph",
        "id": "f5774e7ae506acaa",
        "text": "Consistency.  That's magic."
      },
      "date": 1512880784474
    },
    {
      "type": "edit",
      "id": "09095beb6b402ec7",
      "item": {
        "type": "paragraph",
        "id": "09095beb6b402ec7",
        "text": "One especially helpful side-effect of constructing specialized and controlled ecosystems is the ease with which those things can be shared with others.  If I construct this image carefully, the container you invoke from it will run the same on your computer as it does on mine."
      },
      "date": 1512880913526
    },
    {
      "item": {
        "type": "factory",
        "id": "6bad440c34490a1b"
      },
      "id": "6bad440c34490a1b",
      "type": "add",
      "after": "f5774e7ae506acaa",
      "date": 1512880917195
    },
    {
      "type": "edit",
      "id": "6bad440c34490a1b",
      "item": {
        "type": "paragraph",
        "id": "6bad440c34490a1b",
        "text": "The structure of images imposes on their authors a lot of up-front work understanding and organizing the necessary ecosystem and the processes it will host.  Exactly which versions of which packages are required?  Which programming language?  Where exactly must the configurations live on the file system?  Exactly what permissions are required?  Exactly where do the inputs come from and to where exactly do we send the outputs?"
      },
      "date": 1512881174762
    },
    {
      "item": {
        "type": "factory",
        "id": "5286eb7f36ea7baa"
      },
      "id": "5286eb7f36ea7baa",
      "type": "add",
      "after": "3f9bdd3b7f95baed",
      "date": 1512881179128
    },
    {
      "type": "edit",
      "id": "5286eb7f36ea7baa",
      "item": {
        "type": "markdown",
        "id": "5286eb7f36ea7baa",
        "text": "# Consistency\n"
      },
      "date": 1512881188415
    },
    {
      "type": "add",
      "id": "2f3fdfbb6af3095c",
      "item": {
        "type": "markdown",
        "id": "2f3fdfbb6af3095c",
        "text": "# Separation of Concerns (config from runtime)"
      },
      "after": "5286eb7f36ea7baa",
      "date": 1512881201535
    },
    {
      "type": "move",
      "order": [
        "3d486184c52299ef",
        "d478017148416dc8",
        "b8892820c41deb9e",
        "3cb3653cb5434dca",
        "d8a87390d288ba78",
        "216ead86f42352a1",
        "09095beb6b402ec7",
        "f5774e7ae506acaa",
        "2f3fdfbb6af3095c",
        "6bad440c34490a1b",
        "5286eb7f36ea7baa"
      ],
      "id": "2f3fdfbb6af3095c",
      "date": 1512881206036
    },
    {
      "type": "move",
      "order": [
        "3d486184c52299ef",
        "d478017148416dc8",
        "5286eb7f36ea7baa",
        "b8892820c41deb9e",
        "3cb3653cb5434dca",
        "d8a87390d288ba78",
        "216ead86f42352a1",
        "09095beb6b402ec7",
        "f5774e7ae506acaa",
        "2f3fdfbb6af3095c",
        "6bad440c34490a1b"
      ],
      "id": "5286eb7f36ea7baa",
      "date": 1512881212264
    },
    {
      "type": "add",
      "id": "1ed0b97d07f9c0eb",
      "item": {
        "type": "paragraph",
        "id": "1ed0b97d07f9c0eb",
        "text": "The image author is forced to think through the configuration ahead of time.  That becomes the ecosystem.  You can only share the ecosystem."
      },
      "after": "6bad440c34490a1b",
      "date": 1512881342561
    },
    {
      "type": "edit",
      "id": "216ead86f42352a1",
      "item": {
        "type": "paragraph",
        "id": "216ead86f42352a1",
        "text": "The magic is almost entirely down to simple consistency.  The consistent ecosystem is perfectly suited to the consistent processes.  If anything goes awry over time, we just stop the failing container and restart anew from a pristine state with a newly thawed ecosystem and new process taking up residence therein."
      },
      "date": 1525563405678
    },
    {
      "type": "edit",
      "id": "1ed0b97d07f9c0eb",
      "item": {
        "type": "paragraph",
        "id": "1ed0b97d07f9c0eb",
        "text": "The image author is forced to think through the configuration ahead of time.  Everything they learn becomes encoded into the ecosystem.  You can only share the ecosystem."
      },
      "date": 1525563637180
    },
    {
      "type": "add",
      "id": "a4cda30554fb263f",
      "item": {
        "type": "paragraph",
        "id": "a4cda30554fb263f",
        "text": "Runtime is where our processes can actually interact with the world.  And The Operator who types `docker run ... some-image` is empowered to enhance or alter the ecosystem or to launch different processes within that ecosystem, following or ignoring the author's expressed intent.  The options provided to `docker run` allow the operator to combine different ecosystems, by filesystem, internal networking, or external networking with the outside world.  Each running container takes up its ecological niche and the complete program emerges from the interactions between all these digital organisms."
      },
      "after": "1ed0b97d07f9c0eb",
      "date": 1525564421690
    },
    {
      "type": "fork",
      "site": "goals.pods.wiki.dbbs.co",
      "date": 1619361040366
    },
    {
      "type": "fork",
      "site": "eric.dojo.fed.wiki",
      "date": 1638172459996
    },
    {
      "type": "edit",
      "id": "b8892820c41deb9e",
      "item": {
        "type": "paragraph",
        "id": "b8892820c41deb9e",
        "text": "*nix processes depend on an ecosystem (see [[Nix Ecosystem]]: the kernel mediates access to RAM, CPU, devices, file system, and sockets.  The challenges of systems administration are nurturing and grooming the ecosystem that supports processes.  Processes finding themselves in inhospitable environments die."
      },
      "date": 1638172605616
    },
    {
      "type": "edit",
      "id": "b8892820c41deb9e",
      "item": {
        "type": "paragraph",
        "id": "b8892820c41deb9e",
        "text": "*nix processes depend on an ecosystem (see [[Nix Ecosystem]]): the kernel mediates access to RAM, CPU, devices, file system, and sockets.  The challenges of systems administration are nurturing and grooming the ecosystem that supports processes.  Processes finding themselves in inhospitable environments die."
      },
      "date": 1638172612020
    },
    {
      "type": "edit",
      "id": "a4cda30554fb263f",
      "item": {
        "type": "paragraph",
        "id": "a4cda30554fb263f",
        "text": "[[Runtime]] is where our processes can actually interact with the world.  And The Operator who types `docker run ... some-image` is empowered to enhance or alter the ecosystem or to launch different processes within that ecosystem, following or ignoring the author's expressed intent.  The options provided to `docker run` allow the operator to combine different ecosystems, by filesystem, internal networking, or external networking with the outside world.  Each running container takes up its ecological niche and the complete program emerges from the interactions between all these digital organisms."
      },
      "date": 1638172778865
    }
  ]
}