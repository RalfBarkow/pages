{
  "title": "innerHTML",
  "story": [
    {
      "type": "markdown",
      "id": "e03922fbf09cf4a4",
      "text": "* property \"innerHTML\" stopped working in 0.19 #172 [https://github.com/elm/html/issues/172 github]\n> This change was to start ruling out XSS attack vectors in Elm.\n* Print unescaped HTML [https://discourse.elm-lang.org/t/print-unescaped-html/4635 discourse]"
    },
    {
      "type": "markdown",
      "id": "2f7f55e7d39a5c99",
      "text": "* How do you integrate inline SVGs? [https://discourse.elm-lang.org/t/how-do-you-integrate-inline-svgs/1047 discourse]\nelm-assets-loader, [[Elm Assets Loader]]"
    },
    {
      "type": "markdown",
      "id": "ee9456cb0a96cb69",
      "text": "* Rendering HTML encoded Strings [https://discourse.elm-lang.org/t/rendering-html-encoded-strings/775/2 discourse]\n> elm-community/html-extra provides innerHtml 76.\nBut be aware of the security implications (XSS) of doing this, especially if the content is user provided.\nBut since this is just a project for learning, this seems to be ok."
    },
    {
      "type": "code",
      "id": "88e597679a4429c7",
      "text": "module Main exposing (main)\n\nimport Html exposing (Html, p, text)\nimport Html.Attributes exposing (property)\nimport Json.Encode as Json\n\nmain : Html msg\nmain =\n    p\n        [ property \"innerHTML\"\n            (Json.string \"Hello <b>unsafe</b> <em>HTML</em>\")\n        ]\n        []\n"
    },
    {
      "type": "markdown",
      "id": "43cb58b0d32fca8a",
      "text": "* Dont escape html string [https://discourse.elm-lang.org/t/dont-escape-html-string/7404/2 discourse]"
    },
    {
      "type": "markdown",
      "id": "75d0ec02af227457",
      "text": "* Handling custom protocol in URL with Elm (was: Forking elm/url to enable custom Url protocol) [https://discourse.elm-lang.org/t/handling-custom-protocol-in-url-with-elm-was-forking-elm-url-to-enable-custom-url-protocol/7856 discourse]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "innerHTML",
        "story": []
      },
      "date": 1638170347513
    },
    {
      "item": {
        "type": "factory",
        "id": "e03922fbf09cf4a4"
      },
      "id": "e03922fbf09cf4a4",
      "type": "add",
      "date": 1638170360275
    },
    {
      "type": "edit",
      "id": "e03922fbf09cf4a4",
      "item": {
        "type": "markdown",
        "id": "e03922fbf09cf4a4",
        "text": "*  property \"innerHTML\" stopped working in 0.19 #172 "
      },
      "date": 1638170365162
    },
    {
      "type": "edit",
      "id": "e03922fbf09cf4a4",
      "item": {
        "type": "markdown",
        "id": "e03922fbf09cf4a4",
        "text": "* property \"innerHTML\" stopped working in 0.19 #172 [https://github.com/elm/html/issues/172 github]"
      },
      "date": 1638170382337
    },
    {
      "type": "edit",
      "id": "e03922fbf09cf4a4",
      "item": {
        "type": "markdown",
        "id": "e03922fbf09cf4a4",
        "text": "* property \"innerHTML\" stopped working in 0.19 #172 [https://github.com/elm/html/issues/172 github]\n> This change was to start ruling out XSS attack vectors in Elm."
      },
      "date": 1638170393188
    },
    {
      "type": "edit",
      "id": "e03922fbf09cf4a4",
      "item": {
        "type": "markdown",
        "id": "e03922fbf09cf4a4",
        "text": "* property \"innerHTML\" stopped working in 0.19 #172 [https://github.com/elm/html/issues/172 github]\n> This change was to start ruling out XSS attack vectors in Elm.\n* Print unescaped HTML"
      },
      "date": 1638170416873
    },
    {
      "type": "edit",
      "id": "e03922fbf09cf4a4",
      "item": {
        "type": "markdown",
        "id": "e03922fbf09cf4a4",
        "text": "* property \"innerHTML\" stopped working in 0.19 #172 [https://github.com/elm/html/issues/172 github]\n> This change was to start ruling out XSS attack vectors in Elm.\n* Print unescaped HTML [https://discourse.elm-lang.org/t/print-unescaped-html/4635 discourse]"
      },
      "date": 1638170429740
    },
    {
      "item": {
        "type": "factory",
        "id": "2f7f55e7d39a5c99"
      },
      "id": "2f7f55e7d39a5c99",
      "type": "add",
      "after": "e03922fbf09cf4a4",
      "date": 1638173434857
    },
    {
      "type": "edit",
      "id": "2f7f55e7d39a5c99",
      "item": {
        "type": "paragraph",
        "id": "2f7f55e7d39a5c99",
        "text": "* How do you integrate inline SVGs? ["
      },
      "date": 1638173441069
    },
    {
      "type": "edit",
      "id": "2f7f55e7d39a5c99",
      "item": {
        "type": "paragraph",
        "id": "2f7f55e7d39a5c99",
        "text": "* How do you integrate inline SVGs? [https://discourse.elm-lang.org/t/how-do-you-integrate-inline-svgs/1047 discourse]s"
      },
      "date": 1638173451377
    },
    {
      "type": "edit",
      "id": "2f7f55e7d39a5c99",
      "item": {
        "type": "markdown",
        "id": "2f7f55e7d39a5c99",
        "text": "* How do you integrate inline SVGs? [https://discourse.elm-lang.org/t/how-do-you-integrate-inline-svgs/1047 discourse]s"
      },
      "date": 1638173452650
    },
    {
      "type": "edit",
      "id": "2f7f55e7d39a5c99",
      "item": {
        "type": "markdown",
        "id": "2f7f55e7d39a5c99",
        "text": "* How do you integrate inline SVGs? [https://discourse.elm-lang.org/t/how-do-you-integrate-inline-svgs/1047 discourse]"
      },
      "date": 1638173457445
    },
    {
      "type": "edit",
      "id": "2f7f55e7d39a5c99",
      "item": {
        "type": "markdown",
        "id": "2f7f55e7d39a5c99",
        "text": "* How do you integrate inline SVGs? [https://discourse.elm-lang.org/t/how-do-you-integrate-inline-svgs/1047 discourse]\nelm-assets-loader"
      },
      "date": 1638173488925
    },
    {
      "type": "edit",
      "id": "2f7f55e7d39a5c99",
      "item": {
        "type": "markdown",
        "id": "2f7f55e7d39a5c99",
        "text": "* How do you integrate inline SVGs? [https://discourse.elm-lang.org/t/how-do-you-integrate-inline-svgs/1047 discourse]\nelm-assets-loader, [[Elm Assets Loader]]"
      },
      "date": 1638173551828
    },
    {
      "item": {
        "type": "factory",
        "id": "ee9456cb0a96cb69"
      },
      "id": "ee9456cb0a96cb69",
      "type": "add",
      "after": "2f7f55e7d39a5c99",
      "date": 1638174603359
    },
    {
      "type": "edit",
      "id": "ee9456cb0a96cb69",
      "item": {
        "type": "markdown",
        "id": "ee9456cb0a96cb69",
        "text": "* Rendering HTML encoded Strings"
      },
      "date": 1638174608045
    },
    {
      "type": "edit",
      "id": "ee9456cb0a96cb69",
      "item": {
        "type": "markdown",
        "id": "ee9456cb0a96cb69",
        "text": "* Rendering HTML encoded Strings [https://discourse.elm-lang.org/t/rendering-html-encoded-strings/775/2 discourse]"
      },
      "date": 1638174619969
    },
    {
      "type": "edit",
      "id": "ee9456cb0a96cb69",
      "item": {
        "type": "markdown",
        "id": "ee9456cb0a96cb69",
        "text": "* Rendering HTML encoded Strings [https://discourse.elm-lang.org/t/rendering-html-encoded-strings/775/2 discourse]\n> elm-community/html-extra provides innerHtml 76.\nBut be aware of the security implications (XSS) of doing this, especially if the content is user provided.\nBut since this is just a project for learning, this seems to be ok."
      },
      "date": 1638174644035
    },
    {
      "item": {
        "type": "factory",
        "id": "88e597679a4429c7"
      },
      "id": "88e597679a4429c7",
      "type": "add",
      "after": "ee9456cb0a96cb69",
      "date": 1638174687697
    },
    {
      "type": "edit",
      "id": "88e597679a4429c7",
      "item": {
        "type": "code",
        "id": "88e597679a4429c7",
        "text": "module Main exposing (main)\n\nimport Html exposing (Html, p, text)\nimport Html.Attributes exposing (property)\nimport Json.Encode as Json\n\nmain : Html msg\nmain =\n    p\n        [ property \"innerHTML\"\n            (Json.string \"Hello <b>unsafe</b> <em>HTML</em>\")\n        ]\n        []\n"
      },
      "date": 1638174689798
    },
    {
      "item": {
        "type": "factory",
        "id": "7f01cdaf45210a9f"
      },
      "id": "7f01cdaf45210a9f",
      "type": "add",
      "after": "88e597679a4429c7",
      "date": 1638174805223
    },
    {
      "type": "edit",
      "id": "7f01cdaf45210a9f",
      "item": {
        "type": "assets",
        "id": "7f01cdaf45210a9f",
        "text": "assets"
      },
      "date": 1638174811194
    },
    {
      "type": "edit",
      "id": "7f01cdaf45210a9f",
      "item": {
        "type": "assets",
        "id": "7f01cdaf45210a9f",
        "text": "elm"
      },
      "date": 1638174826674
    },
    {
      "item": {
        "type": "factory",
        "id": "d3f6a448e9e6098f"
      },
      "id": "d3f6a448e9e6098f",
      "type": "add",
      "after": "7f01cdaf45210a9f",
      "date": 1638174940348
    },
    {
      "type": "remove",
      "id": "d3f6a448e9e6098f",
      "date": 1638174945151
    },
    {
      "item": {
        "type": "factory",
        "id": "8ec486995b9535a4"
      },
      "id": "8ec486995b9535a4",
      "type": "add",
      "after": "7f01cdaf45210a9f",
      "date": 1638174948500
    },
    {
      "type": "edit",
      "id": "8ec486995b9535a4",
      "item": {
        "type": "frame",
        "id": "8ec486995b9535a4",
        "text": "https://wiki.ralfbarkow.ch/assets/elm/index.html"
      },
      "date": 1638174951318
    },
    {
      "type": "remove",
      "id": "7f01cdaf45210a9f",
      "date": 1638175801520
    },
    {
      "type": "remove",
      "id": "8ec486995b9535a4",
      "date": 1638175811387
    },
    {
      "item": {
        "type": "factory",
        "id": "8b3f45b22d408f32"
      },
      "id": "8b3f45b22d408f32",
      "type": "add",
      "after": "88e597679a4429c7",
      "date": 1638175850184
    },
    {
      "type": "remove",
      "id": "8b3f45b22d408f32",
      "date": 1638175852862
    },
    {
      "item": {
        "type": "factory",
        "id": "43cb58b0d32fca8a"
      },
      "id": "43cb58b0d32fca8a",
      "type": "add",
      "after": "88e597679a4429c7",
      "date": 1638175854074
    },
    {
      "type": "edit",
      "id": "43cb58b0d32fca8a",
      "item": {
        "type": "markdown",
        "id": "43cb58b0d32fca8a",
        "text": "* Dont escape html string"
      },
      "date": 1638175858673
    },
    {
      "type": "edit",
      "id": "43cb58b0d32fca8a",
      "item": {
        "type": "markdown",
        "id": "43cb58b0d32fca8a",
        "text": "* Dont escape html string [https://discourse.elm-lang.org/t/dont-escape-html-string/7404/2 discourse]"
      },
      "date": 1638175871532
    },
    {
      "item": {
        "type": "factory",
        "id": "75d0ec02af227457"
      },
      "id": "75d0ec02af227457",
      "type": "add",
      "after": "43cb58b0d32fca8a",
      "date": 1638175984144
    },
    {
      "type": "edit",
      "id": "75d0ec02af227457",
      "item": {
        "type": "markdown",
        "id": "75d0ec02af227457",
        "text": "* Handling custom protocol in URL with Elm (was: Forking elm/url to enable custom Url protocol) "
      },
      "date": 1638175992156
    },
    {
      "type": "edit",
      "id": "75d0ec02af227457",
      "item": {
        "type": "markdown",
        "id": "75d0ec02af227457",
        "text": "* Handling custom protocol in URL with Elm (was: Forking elm/url to enable custom Url protocol) [https://discourse.elm-lang.org/t/handling-custom-protocol-in-url-with-elm-was-forking-elm-url-to-enable-custom-url-protocol/7856 discourse]"
      },
      "date": 1638176003100
    }
  ]
}