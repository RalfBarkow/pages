{
  "title": "Principle 6 - Don’t scale it, until you nail it.",
  "story": [
    {
      "type": "paragraph",
      "id": "ef9442fb6d177fc9",
      "text": "Start with something small and make it work first. Until then, there is nothing to scale.\n"
    },
    {
      "type": "paragraph",
      "id": "933eadd003ea2af3",
      "text": "A complex system that works is invariably found to have evolved from a simple system that worked. A complex system designed from scratch never works and cannot be patched up to make it work. You have to start over with a working simple system ([[John Gall, 1975]])."
    },
    {
      "type": "paragraph",
      "id": "2da91674547bbfab",
      "text": "Take inspiration from all the lightweight Agile frameworks (see eXtreme Programming, Scrum, ...), and Lean and Kanban, and the relevant sets of patterns. "
    },
    {
      "type": "paragraph",
      "id": "40912ce88fb0a5e9",
      "text": "Simplicity is the essence of what makes up Agility. Since Agile is simple, a scaled version of Agile should also be that simple, or even simpler. Otherwise, it will no longer be Agile ([[Ron Jeffries, 2015]])."
    },
    {
      "type": "pagefold",
      "id": "62ed476e4d365b8d",
      "text": "Discussions"
    },
    {
      "type": "markdown",
      "id": "fb2a271a118230d6",
      "text": "# Comments & Questions & Answers"
    },
    {
      "type": "paragraph",
      "id": "888bae5fc51f7527",
      "text": "Add your comments and questions and answers and discuss with other Complexity practitioners here."
    },
    {
      "type": "paragraph",
      "id": "42791f6e2b292243",
      "text": "For the instructions, see [[How to Post your First Comment]]."
    },
    {
      "type": "markdown",
      "id": "0bb7aa349fa5f93a",
      "text": "# Comments from Agile Cambridge 2022"
    },
    {
      "type": "paragraph",
      "id": "07f910ab12bb586b",
      "text": "\"We tried big first, and then we stripped back.\""
    },
    {
      "type": "paragraph",
      "id": "dc19922d5dcf0952",
      "text": "Identify what isn’t working at the start. Before scaling make sure the team get really good at delivering software! Or issues within a team will be scaled too! Fix the fundamental structural problem like committed people, small teams, scalable tech stack etc. Fix the riskiest issues first (risk-based).\n\n"
    },
    {
      "type": "paragraph",
      "id": "343c9be53de966c0",
      "text": "If you cannot do it \"at home\" (in your team) you won’t be successful outside (across teams and at scale). Start small, for example taking inspiration from eXtreme Programming, elements of Scrum, and Lean thinking."
    },
    {
      "type": "paragraph",
      "id": "2d9848806713f548",
      "text": "What if scale is already there?\nStart where you are, keep what is working, and experiment with willing teams to fix what is not working, by subtraction and simplification. Simplicity is key. See the principles from the 1st part.\n"
    },
    {
      "type": "paragraph",
      "id": "7bf349a9fbe89214",
      "text": "Openly communicate the experiments to the other teams, FOMO can be an issue. Share success and failures early, understand why it was a success and then amplify.\n\n"
    },
    {
      "type": "paragraph",
      "id": "d568c1773f2b6622",
      "text": "\"Nailing it\" means different things for different stakeholders, bring them together to find a common meaning, without letting the fundamentals out (see the other comments below on what is means nailing it).\n"
    },
    {
      "type": "paragraph",
      "id": "2a1835a85c9a002b",
      "text": "What to do when the business wants to scale “fast”? Some deadlines and emergencies are real, an opportunity may be lost without a swift reaction. For that, one must be aware of the technical and organisational debt and the time/cost to fix it later in order to make a good decision to pursue or not the opportunity. While in some organisations and with some business individuals, urgencies and emergencies are constantly manufactured (regulatory compliance is one of my favourite examples), often leading to a state of constant firefighting in an Overload culture. In this case, there is a bigger problem than scaling to be solved first."
    },
    {
      "type": "paragraph",
      "id": "435c74114c1fa3f5",
      "text": "Separate teams may find their own different approaches to nailing it, before scaling. That provides a catalogue of alternatives, and each may work well in a different context and circumstances."
    },
    {
      "type": "paragraph",
      "id": "c709d77daf7c753e",
      "text": "The movie The Secret Garden tells a story where small changes to the environment lead to small changes to the way of thinking, leading to a compound effect.\n"
    },
    {
      "type": "markdown",
      "id": "567b3a7640510938",
      "text": "# Reflection provoked by Matthew Philip\n\nHow can a team understand whether they're nailing it (not \"we're doing scrum\")?\n\nBuilding on an idea from Alistair Cockburn, a team is nailing it when they are successfully delivering a continuous flow of features that delight the users and create value for the customers; while at the same time team members are happy with the evolution of their ways of working and will happily continue like that.\n\n"
    },
    {
      "type": "markdown",
      "id": "635e08c9af1a61d4",
      "text": "# Comments from SPA 2021\n\nBesides the alignment to the 4 values and the 12 principles, other things that suggest a team is nailing it include the team delivering on the promises most of the time, people using what the team delivers, the team having time and space to experiment and learn. \n  \nThe team should have also resolved the structural problems that are creating systemic bottlenecks (such as part-time team members, lack of key roles and skills in the team, lack of continuous knowledge sharing, misalignment between the work to do and the authority required to get it done, external/centralised service teams and gatekeepers that cause delays). And the team should be allowed to be a small long-standing stable team that is not disbanded after the \"end of the project.\"\n  \nThe Agile ways of working should not be added on top of existing traditional governance, policies and processes making everything even heavier (as in an \"Enterprise Scrum process\") but should replace and substantially simplify them. The tools (e.g. the dreadful Jira) should not be used as mere reporting and controlling tools and should not prevent the team from configuring them as it fits its needs and circumstances. Same for the architecture and the code where obstacles that prevent the essential technical agility and the adoption of the desirable Agile technical practices should all be removed.\n  \nThe org should also nail it with a team that is working on a key product (e.g. a money-making product where the pressure to provide support and delivery is high), and not only special no-pressure 'innovation teams'."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Principle 6 - Don’t scale it, until you nail it.",
        "story": []
      },
      "date": 1616949864061
    },
    {
      "id": "ef9442fb6d177fc9",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ef9442fb6d177fc9",
        "text": "Start with something small and make it work first. Until then, there is nothing to scale.\n"
      },
      "date": 1616950042369
    },
    {
      "id": "933eadd003ea2af3",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "933eadd003ea2af3",
        "text": "A complex system that works is invariably found to have evolved from a simple system that worked. A complex system designed from scratch never works and cannot be patched up to make it work. You have to start over with a working simple system (John Gall, 1975)."
      },
      "after": "ef9442fb6d177fc9",
      "date": 1616950045174
    },
    {
      "id": "2da91674547bbfab",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2da91674547bbfab",
        "text": "Take inspiration from all the lightweight Agile frameworks (see eXtreme Programming, Scrum, ...), and Lean and Kanban, and the relevant sets of patterns. "
      },
      "after": "933eadd003ea2af3",
      "date": 1616950047529
    },
    {
      "id": "40912ce88fb0a5e9",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "40912ce88fb0a5e9",
        "text": "Simplicity is the essence of what makes up Agility. Since Agile is simple, a scaled version of Agile should also be that simple, or even simpler. Otherwise, it will no longer be Agile (Ron Jeffries, 2015)."
      },
      "after": "2da91674547bbfab",
      "date": 1616950084279
    },
    {
      "id": "62ed476e4d365b8d",
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "62ed476e4d365b8d",
        "text": "Discussions"
      },
      "after": "40912ce88fb0a5e9",
      "date": 1616953701998
    },
    {
      "id": "fb2a271a118230d6",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "fb2a271a118230d6",
        "text": "# Comments & Questions & Answers"
      },
      "after": "62ed476e4d365b8d",
      "date": 1616953704077
    },
    {
      "id": "888bae5fc51f7527",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "888bae5fc51f7527",
        "text": "Add your comments and questions and answers and discuss with other Complexity practitioners here."
      },
      "after": "fb2a271a118230d6",
      "date": 1616953707810
    },
    {
      "type": "edit",
      "id": "933eadd003ea2af3",
      "item": {
        "type": "paragraph",
        "id": "933eadd003ea2af3",
        "text": "A complex system that works is invariably found to have evolved from a simple system that worked. A complex system designed from scratch never works and cannot be patched up to make it work. You have to start over with a working simple system ([[John Gall, 1975]])."
      },
      "date": 1616954892848
    },
    {
      "type": "edit",
      "id": "40912ce88fb0a5e9",
      "item": {
        "type": "paragraph",
        "id": "40912ce88fb0a5e9",
        "text": "Simplicity is the essence of what makes up Agility. Since Agile is simple, a scaled version of Agile should also be that simple, or even simpler. Otherwise, it will no longer be Agile ([[Ron Jeffries, 2015]])."
      },
      "date": 1616954901898
    },
    {
      "id": "42791f6e2b292243",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "42791f6e2b292243",
        "text": "For the instructions, see [[How to Post your First Comment]]."
      },
      "after": "888bae5fc51f7527",
      "date": 1627743510591
    },
    {
      "id": "635e08c9af1a61d4",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "635e08c9af1a61d4",
        "text": "# Comments from SPA 2021\n\nBesides the alignment to the 4 values and the 12 principles, other things that suggest a team is nailing it include the team delivering on the promises most of the time, people using what the team delivers, the team having time and space to experiment and learn. \n  \nThe team should have also resolved the structural problems that are creating systemic bottlenecks (such as part-time team members, lack of key roles and skills in the team, lack of continuous knowledge sharing, misalignment between the work to do and the authority required to get it done, external/centralised service teams and gatekeepers that cause delays). And the team should be allowed to be a long-standing stable team that is not disbanded after the \"end of the project.\"\n  \nThe Agile ways of working should not be added on top of existing traditional governance, policies and processes making everything even heavier (as in an \"Enterprise Scrum process\") but should replace and substantially simplify them. The tools (e.g. the dreadful Jira) should not be used as mere reporting and controlling tools and should not prevent the team from configuring them as it fits its needs and circumstances. Same for the architecture and the code where obstacles that prevent the essential technical agility and the adoption of the desirable Agile technical practices should all be removed.\n  \nThe org should also nail it with a team that is working on a key product (e.g. a money-making product where the pressure to provide support and delivery is high), and not only special no-pressure 'innovation teams'."
      },
      "after": "42791f6e2b292243",
      "date": 1640622447008
    },
    {
      "type": "edit",
      "id": "635e08c9af1a61d4",
      "item": {
        "type": "markdown",
        "id": "635e08c9af1a61d4",
        "text": "# Comments from SPA 2021\n\nBesides the alignment to the 4 values and the 12 principles, other things that suggest a team is nailing it include the team delivering on the promises most of the time, people using what the team delivers, the team having time and space to experiment and learn. \n  \nThe team should have also resolved the structural problems that are creating systemic bottlenecks (such as part-time team members, lack of key roles and skills in the team, lack of continuous knowledge sharing, misalignment between the work to do and the authority required to get it done, external/centralised service teams and gatekeepers that cause delays). And the team should be allowed to be a small long-standing stable team that is not disbanded after the \"end of the project.\"\n  \nThe Agile ways of working should not be added on top of existing traditional governance, policies and processes making everything even heavier (as in an \"Enterprise Scrum process\") but should replace and substantially simplify them. The tools (e.g. the dreadful Jira) should not be used as mere reporting and controlling tools and should not prevent the team from configuring them as it fits its needs and circumstances. Same for the architecture and the code where obstacles that prevent the essential technical agility and the adoption of the desirable Agile technical practices should all be removed.\n  \nThe org should also nail it with a team that is working on a key product (e.g. a money-making product where the pressure to provide support and delivery is high), and not only special no-pressure 'innovation teams'."
      },
      "date": 1640693401159
    },
    {
      "id": "567b3a7640510938",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "567b3a7640510938",
        "text": "# Reflection provoked by Matthew Philip\n\nHow can a team understand whether they're nailing it (not \"we're doing scrum\")?\n\nBuilding on an idea from Alistair Cockburn, a team is nailing it when they are successfully delivering a continuous flow of features that delight the users and create value for the customers; while at the same time team members are happy with the evolution of their ways of working and will happily continue like that.\n\n"
      },
      "after": "888bae5fc51f7527",
      "date": 1643209970454
    },
    {
      "id": "42791f6e2b292243",
      "type": "move",
      "order": [
        "ef9442fb6d177fc9",
        "933eadd003ea2af3",
        "2da91674547bbfab",
        "40912ce88fb0a5e9",
        "62ed476e4d365b8d",
        "fb2a271a118230d6",
        "888bae5fc51f7527",
        "42791f6e2b292243",
        "567b3a7640510938",
        "635e08c9af1a61d4"
      ],
      "date": 1657472404234
    },
    {
      "id": "0bb7aa349fa5f93a",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "0bb7aa349fa5f93a",
        "text": "# Comments from Agile Cambridge 2022"
      },
      "after": "42791f6e2b292243",
      "date": 1657556690959
    },
    {
      "id": "07f910ab12bb586b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "07f910ab12bb586b",
        "text": "\"We tried big first, and then we stripped back.\""
      },
      "after": "0bb7aa349fa5f93a",
      "date": 1657556694400
    },
    {
      "id": "dc19922d5dcf0952",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "dc19922d5dcf0952",
        "text": "Identify what isn’t working at the start. Before scaling make sure the team get really good at delivering software! Or issues within a team will be scaled too! Fix the fundamental structural problem like committed people, small teams, scalable tech stack etc. Fix the riskiest issues first (risk-based).\n\n"
      },
      "after": "07f910ab12bb586b",
      "date": 1657556696954
    },
    {
      "id": "343c9be53de966c0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "343c9be53de966c0",
        "text": "If you cannot do it \"at home\" (in your team) you won’t be successful outside (across teams and at scale)."
      },
      "after": "dc19922d5dcf0952",
      "date": 1657556700281
    },
    {
      "id": "2d9848806713f548",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2d9848806713f548",
        "text": "What if scale is already there?\nStart where you are, keep what is working, and experiment with willing teams to fix what is not working, by subtraction and simplification. Simplicity is key.\n"
      },
      "after": "343c9be53de966c0",
      "date": 1657556705797
    },
    {
      "id": "7bf349a9fbe89214",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7bf349a9fbe89214",
        "text": "Openly communicate the experiments to the other teams, FOMO can be an issue. Share success and failures early, understand why it was a success and then amplify.\n\n"
      },
      "after": "2d9848806713f548",
      "date": 1657556708155
    },
    {
      "id": "d568c1773f2b6622",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d568c1773f2b6622",
        "text": "\"Nailing it\" means different things for different stakeholders, bring them together to find a common meaning, without letting the fundamentals out (see the other comments below on what is means nailing it).\n"
      },
      "after": "7bf349a9fbe89214",
      "date": 1657556710985
    },
    {
      "id": "2a1835a85c9a002b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2a1835a85c9a002b",
        "text": "What to do when the business wants to scale “fast”? Some deadlines and emergencies are real, an opportunity may be lost without a swift reaction. For that, one must be aware of the technical and organisational debt and the time/cost to fix it later in order to make a good decision to pursue or not the opportunity. While in some organisations and with some business individuals, urgencies and emergencies are constantly manufactured (regulatory compliance is one of my favourite examples), often leading to a state of constant firefighting in an Overload culture. In this case, there is a bigger problem than scaling to be solved first."
      },
      "after": "d568c1773f2b6622",
      "date": 1657556712997
    },
    {
      "id": "435c74114c1fa3f5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "435c74114c1fa3f5",
        "text": "Separate teams may find their own different approaches to nailing it, before scaling. That provides a catalogue of alternatives, and each may work well in a different context and circumstances."
      },
      "after": "2a1835a85c9a002b",
      "date": 1657556716748
    },
    {
      "id": "c709d77daf7c753e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c709d77daf7c753e",
        "text": "The movie The Secret Garden tells a story where small changes to the environment lead to small changes to the way of thinking, leading to a compound effect.\n"
      },
      "after": "435c74114c1fa3f5",
      "date": 1657556719175
    },
    {
      "type": "edit",
      "id": "343c9be53de966c0",
      "item": {
        "type": "paragraph",
        "id": "343c9be53de966c0",
        "text": "If you cannot do it \"at home\" (in your team) you won’t be successful outside (across teams and at scale). Start small."
      },
      "date": 1657556810400
    },
    {
      "type": "edit",
      "id": "2d9848806713f548",
      "item": {
        "type": "paragraph",
        "id": "2d9848806713f548",
        "text": "What if scale is already there?\nStart where you are, keep what is working, and experiment with willing teams to fix what is not working, by subtraction and simplification. Simplicity is key. See the principles from the \n"
      },
      "date": 1657556840700
    },
    {
      "type": "edit",
      "id": "2d9848806713f548",
      "item": {
        "type": "paragraph",
        "id": "2d9848806713f548",
        "text": "What if scale is already there?\nStart where you are, keep what is working, and experiment with willing teams to fix what is not working, by subtraction and simplification. Simplicity is key. See the principles from the 1st part.\n"
      },
      "date": 1657556850964
    },
    {
      "type": "edit",
      "id": "343c9be53de966c0",
      "item": {
        "type": "paragraph",
        "id": "343c9be53de966c0",
        "text": "If you cannot do it \"at home\" (in your team) you won’t be successful outside (across teams and at scale). Start small, for example taking inspiration from eXtreme Programming, elements of Scrum, and Lean thinking."
      },
      "date": 1657557028731
    },
    {
      "type": "fork",
      "site": "p2.fed.wiki",
      "date": 1657615822751
    }
  ]
}