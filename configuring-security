{
  "title": "Configuring Security",
  "story": [
    {
      "type": "markdown",
      "id": "7266be327641344d",
      "text": "By default wiki will, if we don't configure a security module, make all content read-only. [https://github.com/fedwiki/wiki/blob/master/security.md#configuring-security github]\n\nThe previous default where unclaimed sites were editable by anybody can be enabled by setting `security_legacy` to true.\n\nThis version of wiki will install\n\n* a [Passport](http://passportjs.org) based security module, to replace the earlier Mozilla Persona one, and\n* a simpler *friends*, secret token, based security module, see [wiki-security-friends](https://github.com/fedwiki/wiki-security-friends/blob/master/README.md) for details.\n\nTo use this new, Passport based, security module you will need to:\n\n1. migrate the existing Mozilla Persona identity files to the new JSON format owner files. This is achieved by running `wiki-migrate`, there are optional parameters `data`, `status` and `id`; these should be set to the same as you use to run `wiki`.\n\n1. choose one, or more, of the OAuth providers that it makes available and follow the [configuration notes](https://github.com/fedwiki/wiki-security-passportjs/blob/master/docs/configuration.md).\n\nIt is recommended that you make use of *TLS*, while currently it is not required for OAuth, it is recommended by the identity providers. This will require configuring a proxy, in front of the Federated Wiki server, and getting the necessary certificated. There are a number of options, probably the easiest is to use [Caddy](https://caddyserver.com/) with [Automatic HTTPS](https://caddyserver.com/docs/automatic-https), and On-Demand TLS. Which uses [Let's Encrypt](https://letsencrypt.org/) as the certificate authority.\n\nIf you want to use `TLS` you will need to configure the wiki server by adding `\"security_useHttps\": true,` to the configuration file, as well as using `https://` in the callback URLs when you configure the OAuth provider.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Configuring Security",
        "story": []
      },
      "date": 1643925609059
    },
    {
      "item": {
        "type": "factory",
        "id": "7266be327641344d"
      },
      "id": "7266be327641344d",
      "type": "add",
      "date": 1643925619946
    },
    {
      "type": "edit",
      "id": "7266be327641344d",
      "item": {
        "type": "markdown",
        "id": "7266be327641344d",
        "text": "# Configuring security\n\nBy default wiki will, if we don't configure a security module, make all content read-only. \n\nThe previous default where unclaimed sites were editable by anybody can be enabled by setting `security_legacy` to true.\n\nThis version of wiki will install\n\n* a [Passport](http://passportjs.org) based security module, to replace the earlier Mozilla Persona one, and\n* a simpler *friends*, secret token, based security module, see [wiki-security-friends](https://github.com/fedwiki/wiki-security-friends/blob/master/README.md) for details.\n\nTo use this new, Passport based, security module you will need to:\n\n1. migrate the existing Mozilla Persona identity files to the new JSON format owner files. This is achieved by running `wiki-migrate`, there are optional parameters `data`, `status` and `id`; these should be set to the same as you use to run `wiki`.\n\n1. choose one, or more, of the OAuth providers that it makes available and follow the [configuration notes](https://github.com/fedwiki/wiki-security-passportjs/blob/master/docs/configuration.md).\n\nIt is recommended that you make use of *TLS*, while currently it is not required for OAuth, it is recommended by the identity providers. This will require configuring a proxy, in front of the Federated Wiki server, and getting the necessary certificated. There are a number of options, probably the easiest is to use [Caddy](https://caddyserver.com/) with [Automatic HTTPS](https://caddyserver.com/docs/automatic-https), and On-Demand TLS. Which uses [Let's Encrypt](https://letsencrypt.org/) as the certificate authority.\n\nIf you want to use `TLS` you will need to configure the wiki server by adding `\"security_useHttps\": true,` to the configuration file, as well as using `https://` in the callback URLs when you configure the OAuth provider.\n"
      },
      "date": 1643925622211
    },
    {
      "type": "edit",
      "id": "7266be327641344d",
      "item": {
        "type": "markdown",
        "id": "7266be327641344d",
        "text": "By default wiki will, if we don't configure a security module, make all content read-only. \n\nThe previous default where unclaimed sites were editable by anybody can be enabled by setting `security_legacy` to true.\n\nThis version of wiki will install\n\n* a [Passport](http://passportjs.org) based security module, to replace the earlier Mozilla Persona one, and\n* a simpler *friends*, secret token, based security module, see [wiki-security-friends](https://github.com/fedwiki/wiki-security-friends/blob/master/README.md) for details.\n\nTo use this new, Passport based, security module you will need to:\n\n1. migrate the existing Mozilla Persona identity files to the new JSON format owner files. This is achieved by running `wiki-migrate`, there are optional parameters `data`, `status` and `id`; these should be set to the same as you use to run `wiki`.\n\n1. choose one, or more, of the OAuth providers that it makes available and follow the [configuration notes](https://github.com/fedwiki/wiki-security-passportjs/blob/master/docs/configuration.md).\n\nIt is recommended that you make use of *TLS*, while currently it is not required for OAuth, it is recommended by the identity providers. This will require configuring a proxy, in front of the Federated Wiki server, and getting the necessary certificated. There are a number of options, probably the easiest is to use [Caddy](https://caddyserver.com/) with [Automatic HTTPS](https://caddyserver.com/docs/automatic-https), and On-Demand TLS. Which uses [Let's Encrypt](https://letsencrypt.org/) as the certificate authority.\n\nIf you want to use `TLS` you will need to configure the wiki server by adding `\"security_useHttps\": true,` to the configuration file, as well as using `https://` in the callback URLs when you configure the OAuth provider.\n"
      },
      "date": 1643925631715
    },
    {
      "type": "edit",
      "id": "7266be327641344d",
      "item": {
        "type": "markdown",
        "id": "7266be327641344d",
        "text": "By default wiki will, if we don't configure a security module, make all content read-only. [https://github.com/fedwiki/wiki/blob/master/security.md#configuring-security github]\n\nThe previous default where unclaimed sites were editable by anybody can be enabled by setting `security_legacy` to true.\n\nThis version of wiki will install\n\n* a [Passport](http://passportjs.org) based security module, to replace the earlier Mozilla Persona one, and\n* a simpler *friends*, secret token, based security module, see [wiki-security-friends](https://github.com/fedwiki/wiki-security-friends/blob/master/README.md) for details.\n\nTo use this new, Passport based, security module you will need to:\n\n1. migrate the existing Mozilla Persona identity files to the new JSON format owner files. This is achieved by running `wiki-migrate`, there are optional parameters `data`, `status` and `id`; these should be set to the same as you use to run `wiki`.\n\n1. choose one, or more, of the OAuth providers that it makes available and follow the [configuration notes](https://github.com/fedwiki/wiki-security-passportjs/blob/master/docs/configuration.md).\n\nIt is recommended that you make use of *TLS*, while currently it is not required for OAuth, it is recommended by the identity providers. This will require configuring a proxy, in front of the Federated Wiki server, and getting the necessary certificated. There are a number of options, probably the easiest is to use [Caddy](https://caddyserver.com/) with [Automatic HTTPS](https://caddyserver.com/docs/automatic-https), and On-Demand TLS. Which uses [Let's Encrypt](https://letsencrypt.org/) as the certificate authority.\n\nIf you want to use `TLS` you will need to configure the wiki server by adding `\"security_useHttps\": true,` to the configuration file, as well as using `https://` in the callback URLs when you configure the OAuth provider.\n"
      },
      "date": 1643925649861
    }
  ]
}