{
  "title": "Write Programs as Graphs",
  "story": [
    {
      "type": "paragraph",
      "id": "302ccc80a6fa734e",
      "text": "White-box testing is a verification technique that can be used to examine if code works as\nexpected. More precisely, according to IEEE (1990), the definition of white box testing\nis testing that takes into account the internal mechanism of a system or component. So,\nwhite box testing is performed based on knowledge of how the system is implemented."
    },
    {
      "type": "paragraph",
      "id": "b7f39e04d331e397",
      "text": "To describe the degree to which the source code of a program has been tested, we use\ndifferent measures code coverage. In order to measure this code coverage and select\ntests based on the structure of a graph, we will write programs as graphs. This graph\ndescribes the logical structure of the program.\nIn a program, control flows arise from variables and procedures such as if- and while-\nconstructs in C language."
    },
    {
      "type": "paragraph",
      "id": "39c736d3628b88e6",
      "text": "However, it’s possible that some parts of the source code of a\nprogram are unreachable. This problem is due to the semantic of the program. In fact,\nthere is two different approaches in the language which are the semantic which refers to\nthe meaning of the language, and the syntax which as opposed refers to the form of the\nprogram. Since it’s undecidable to detect the semantic part of a program and since the\nmeasure code coverage can be affected by it, we will describe two differents approach\nfor white box coverage: syntactic and semantic approach. The syntactic approach will\ndescribe code coverage in a flow graph and the semantic approach will describe how\nsyntactic coverage has to be changed to only take into account all feasible information\nflows."
    },
    {
      "type": "pagefold",
      "id": "9cdcead799bdda43",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "c9bd20d301ff4523",
      "text": "ELODIE, Venezia, 2011. White box coverage and control flow graphs. [http://www.marktimmer.com/phd/teaching/WhiteBoxCoverageCFG.pdf pdf] \n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Write Programs as Graphs",
        "story": []
      },
      "date": 1711880480126
    },
    {
      "item": {
        "type": "factory",
        "id": "c9bd20d301ff4523"
      },
      "id": "c9bd20d301ff4523",
      "type": "add",
      "date": 1711880495012
    },
    {
      "type": "edit",
      "id": "c9bd20d301ff4523",
      "item": {
        "type": "paragraph",
        "id": "c9bd20d301ff4523",
        "text": "\nELODIE, Venezia, 2011. White box coverage and control flow graphs.. Online. 2011. June. Available from: http://www.marktimmer.com/phd/teaching/WhiteBoxCoverageCFG.pdf [Accessed 30 March 2024]. \n"
      },
      "date": 1711880497654
    },
    {
      "type": "edit",
      "id": "c9bd20d301ff4523",
      "item": {
        "type": "paragraph",
        "id": "c9bd20d301ff4523",
        "text": "ELODIE, Venezia, 2011. White box coverage and control flow graphs. 2011. June. [http://www.marktimmer.com/phd/teaching/WhiteBoxCoverageCFG.pdf pdf] \n"
      },
      "date": 1711880518199
    },
    {
      "type": "edit",
      "id": "c9bd20d301ff4523",
      "item": {
        "type": "paragraph",
        "id": "c9bd20d301ff4523",
        "text": "ELODIE, Venezia, 2011. White box coverage and control flow graphs. [http://www.marktimmer.com/phd/teaching/WhiteBoxCoverageCFG.pdf pdf] \n"
      },
      "date": 1711880525282
    },
    {
      "item": {
        "type": "factory",
        "id": "302ccc80a6fa734e"
      },
      "id": "302ccc80a6fa734e",
      "type": "add",
      "after": "c9bd20d301ff4523",
      "date": 1711880603870
    },
    {
      "id": "302ccc80a6fa734e",
      "type": "move",
      "order": [
        "302ccc80a6fa734e",
        "c9bd20d301ff4523"
      ],
      "date": 1711880606511
    },
    {
      "type": "edit",
      "id": "302ccc80a6fa734e",
      "item": {
        "type": "paragraph",
        "id": "302ccc80a6fa734e",
        "text": "White-box testing is a verification technique that can be used to examine if code works as\nexpected. More precisely, according to IEEE (1990), the definition of white box testing\nis testing that takes into account the internal mechanism of a system or component. So,\nwhite box testing is performed based on knowledge of how the system is implemented.\nTo describe the degree to which the source code of a program has been tested, we use\ndifferent measures code coverage. In order to measure this code coverage and select\ntests based on the structure of a graph, we will write programs as graphs. This graph\ndescribes the logical structure of the program.\nIn a program, control flows arise from variables and procedures such as if- and while-\nconstructs in C language. However, it’s possible that some parts of the source code of a\nprogram are unreachable. This problem is due to the semantic of the program. In fact,\nthere is two different approaches in the language which are the semantic which refers to\nthe meaning of the language, and the syntax which as opposed refers to the form of the\nprogram. Since it’s undecidable to detect the semantic part of a program and since the\nmeasure code coverage can be affected by it, we will describe two differents approach\nfor white box coverage: syntactic and semantic approach. The syntactic approach will\ndescribe code coverage in a flow graph and the semantic approach will describe how\nsyntactic coverage has to be changed to only take into account all feasible information\nflows."
      },
      "date": 1711880609164
    },
    {
      "type": "edit",
      "id": "302ccc80a6fa734e",
      "item": {
        "type": "paragraph",
        "id": "302ccc80a6fa734e",
        "text": "White-box testing is a verification technique that can be used to examine if code works as\nexpected. More precisely, according to IEEE (1990), the definition of white box testing\nis testing that takes into account the internal mechanism of a system or component. So,\nwhite box testing is performed based on knowledge of how the system is implemented."
      },
      "date": 1711880651554
    },
    {
      "type": "add",
      "id": "b7f39e04d331e397",
      "item": {
        "type": "paragraph",
        "id": "b7f39e04d331e397",
        "text": "To describe the degree to which the source code of a program has been tested, we use\ndifferent measures code coverage. In order to measure this code coverage and select\ntests based on the structure of a graph, we will write programs as graphs. This graph\ndescribes the logical structure of the program.\nIn a program, control flows arise from variables and procedures such as if- and while-\nconstructs in C language. However, it’s possible that some parts of the source code of a\nprogram are unreachable. This problem is due to the semantic of the program. In fact,\nthere is two different approaches in the language which are the semantic which refers to\nthe meaning of the language, and the syntax which as opposed refers to the form of the\nprogram. Since it’s undecidable to detect the semantic part of a program and since the\nmeasure code coverage can be affected by it, we will describe two differents approach\nfor white box coverage: syntactic and semantic approach. The syntactic approach will\ndescribe code coverage in a flow graph and the semantic approach will describe how\nsyntactic coverage has to be changed to only take into account all feasible information\nflows."
      },
      "after": "302ccc80a6fa734e",
      "date": 1711880652683
    },
    {
      "type": "edit",
      "id": "b7f39e04d331e397",
      "item": {
        "type": "paragraph",
        "id": "b7f39e04d331e397",
        "text": "To describe the degree to which the source code of a program has been tested, we use\ndifferent measures code coverage. In order to measure this code coverage and select\ntests based on the structure of a graph, we will write programs as graphs. This graph\ndescribes the logical structure of the program.\nIn a program, control flows arise from variables and procedures such as if- and while-\nconstructs in C language."
      },
      "date": 1711880693803
    },
    {
      "type": "add",
      "id": "39c736d3628b88e6",
      "item": {
        "type": "paragraph",
        "id": "39c736d3628b88e6",
        "text": "However, it’s possible that some parts of the source code of a\nprogram are unreachable. This problem is due to the semantic of the program. In fact,\nthere is two different approaches in the language which are the semantic which refers to\nthe meaning of the language, and the syntax which as opposed refers to the form of the\nprogram. Since it’s undecidable to detect the semantic part of a program and since the\nmeasure code coverage can be affected by it, we will describe two differents approach\nfor white box coverage: syntactic and semantic approach. The syntactic approach will\ndescribe code coverage in a flow graph and the semantic approach will describe how\nsyntactic coverage has to be changed to only take into account all feasible information\nflows."
      },
      "after": "b7f39e04d331e397",
      "date": 1711880694955
    },
    {
      "item": {
        "type": "factory",
        "id": "9cdcead799bdda43"
      },
      "id": "9cdcead799bdda43",
      "type": "add",
      "after": "c9bd20d301ff4523",
      "date": 1711880731977
    },
    {
      "type": "edit",
      "id": "9cdcead799bdda43",
      "item": {
        "type": "pagefold",
        "id": "9cdcead799bdda43",
        "text": "~"
      },
      "date": 1711880736382
    },
    {
      "id": "9cdcead799bdda43",
      "type": "move",
      "order": [
        "302ccc80a6fa734e",
        "b7f39e04d331e397",
        "39c736d3628b88e6",
        "9cdcead799bdda43",
        "c9bd20d301ff4523"
      ],
      "date": 1711880740484
    }
  ]
}