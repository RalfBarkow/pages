{
  "title": "Event-Bus Types",
  "story": [
    {
      "type": "paragraph",
      "id": "7007a728094d0213",
      "text": "In the development of non-trivial software systems, a key characteristic of an interface between system components is that the interface is innately complex, consisting of tens if not hundreds of operations. Therefore to manage this complexity, additional structure is needed to help organize these operations."
    },
    {
      "type": "paragraph",
      "id": "90ae41086b58579e",
      "text": "For a systems engineer such complexity is not new, where systems engineers actively manage complexity by using the concepts of a system and an interface [5]. However unlike its interpretation in the software engineering domain, an interface in the systems engineering domain is closer to the concept of a communication link, an electrical / hydraulic / pneumatic / mechanical cable assembly, or an electronic circuit board / backplane i.e. in this domain. An interface is a thing or object to be built, where this [[Thing]] physically links components together, and as such, has the form of a communication & control structure."
    },
    {
      "type": "paragraph",
      "id": "a539d5e977202bc5",
      "text": "However, event-based software can be easily built in the form of a communication & control structure, thereby making it an ideal candidate to perform a function analogous to a systems engineering interface."
    },
    {
      "type": "image",
      "id": "b9d5119eeaf9dc56",
      "text": "Figure 1. Simple Power-Plant Software Model",
      "size": "wide",
      "width": 419,
      "height": 251,
      "url": "/assets/plugins/image/9fefec31ffffde0570321a72736d68c2.jpg"
    },
    {
      "type": "paragraph",
      "id": "ec7d5e65efb34450",
      "text": "Concentrating on the model-view bus and its interactions from Figure 1, repeated here as Figure 5, we see that the event-based software modelling notation used has three concepts, namely, components, buses, and connectors. More specifically, this notation is a [[Bipartite Graph]] G = (C, B, K) in which components C represent one graph vertex set (rectangles), event-based buses B represent the second graph vertex set (ovals), and connector graph edges K define the form of connection provided by buses, to components."
    },
    {
      "type": "image",
      "id": "44f5148455616e56",
      "text": "Figure 5. Model-View Bus Interactions",
      "size": "wide",
      "width": 419,
      "height": 217,
      "url": "/assets/plugins/image/c8aba082a00a0bf07486ddf35f89139f.jpg"
    },
    {
      "type": "paragraph",
      "id": "d466909397c6df0d",
      "text": "Referring to Figure 5, we see that this small but complete event-based software model has: 1) Two display components (remote web display, control console display) connected to the model-view bus (mv bus) using a connector type (view connector). 2) A single power-plant model component (power plant model) connected to the model-view bus using a connector type (model connector). where the connector types (view connector, model connector) provide access to one or more of the events defined and managed by the model-view bus."
    },
    {
      "type": "paragraph",
      "id": "71c1e2ed726e5d45",
      "text": "Now moving attention to the internal structure of an event-bus, and the model-view bus in particular. In its simplest form, an [[Event]] is a structure containing a list of callback operation references. The structure providing a [[subscribe]] operation to add a callback operation reference to the list, and a [[publish]] operation to trigger the event, which in turn causes the execution of all callback operations in the list."
    },
    {
      "type": "image",
      "id": "86fe94abab35618d",
      "text": "Figure 6. An Event",
      "size": "wide",
      "width": 419,
      "height": 138,
      "url": "/assets/plugins/image/239d443f8bef3698a6dc50971fcd9f66.jpg"
    },
    {
      "type": "paragraph",
      "id": "d754f377e5aafc53",
      "text": "Figure 6 presents a graphical representation of an arbitrary event x, from the figure we see that the [[Event]] has the following characteristics: 1) The event has a callback operation ([[handle]] x). 2) The event has a publish or event trigger operation ([[publish]] x). 3) The publish relation is represented by a solid arrow to the event. 4) The subscribe relation is represented by a dashed arrow to the event. 5) The event has a type (String), where the type defines the data passed as a parameter between the publish and callback operations."
    },
    {
      "type": "paragraph",
      "id": "93e20a9395cd704e",
      "text": "NB. [[Graph]] as the only [[Type]]?!!"
    },
    {
      "type": "paragraph",
      "id": "18ed533c888af5e5",
      "text": "Using the conventions of Figure 6, we are now in a position to define an [[Event Bus Graph]] for the [[Model-View Bus]] i.e. Figure 7, where this figure is a complete graphical representation of all the events handled by the bus. As an example, the graph supports the following sequence of operations:"
    },
    {
      "type": "pagefold",
      "id": "bf17b8170cda6423",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "d9d1d6365e9c6be2",
      "text": "KEW, Martin, FERRIS, Timothy, GROSSMANN, Georg and STUMPTNER, Markus, [no date]. Enhancing Event Driven Architectures With [[Event-Bus Types]]. [https://www.researchgate.net/profile/Tlj-Ferris/publication/228803556_Enhancing_Event_Driven_Architectures_With_Event-Bus_Types/links/55c2d2ce08aea2d9bdbff2aa/Enhancing-Event-Driven-Architectures-With-Event-Bus-Types.pdf pdf]. \n"
    },
    {
      "type": "paragraph",
      "id": "ff4686fcf62c26f1",
      "text": "[5] USA DoD, Systems Engineering Fundamentals, Defense Acquisition University Press, 2001"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Event-Bus Types",
        "story": []
      },
      "date": 1713414067651
    },
    {
      "type": "edit",
      "id": "7007a728094d0213",
      "item": {
        "type": "paragraph",
        "id": "7007a728094d0213",
        "text": "In the development of non-trivial software systems, a key characteristic of an interface between system components is that the interface is innately complex, consisting of tens if not hundreds of operations. Therefore to manage this complexity, additional structure is needed to help organize these operations. For a systems engineer such complexity is not new, where systems engineers actively manage complexity by using the concepts of a system and an interface [5]. However unlike its interpretation in the software engineering domain, an interface in the systems engineering domain is closer to the concept of a communication link, an electrical / hydraulic / pneumatic / mechanical cable assembly, or an electronic circuit board / backplane i.e. in this domain. An interface is a thing or object to be built, where this thing physically links components together, and as such, has the form of a communication & control structure."
      },
      "date": 1713414072183
    },
    {
      "type": "edit",
      "id": "7007a728094d0213",
      "item": {
        "type": "paragraph",
        "id": "7007a728094d0213",
        "text": "In the development of non-trivial software systems, a key characteristic of an interface between system components is that the interface is innately complex, consisting of tens if not hundreds of operations. Therefore to manage this complexity, additional structure is needed to help organize these operations."
      },
      "date": 1713414083099
    },
    {
      "type": "add",
      "id": "90ae41086b58579e",
      "item": {
        "type": "paragraph",
        "id": "90ae41086b58579e",
        "text": "For a systems engineer such complexity is not new, where systems engineers actively manage complexity by using the concepts of a system and an interface [5]. However unlike its interpretation in the software engineering domain, an interface in the systems engineering domain is closer to the concept of a communication link, an electrical / hydraulic / pneumatic / mechanical cable assembly, or an electronic circuit board / backplane i.e. in this domain. An interface is a thing or object to be built, where this thing physically links components together, and as such, has the form of a communication & control structure."
      },
      "after": "7007a728094d0213",
      "date": 1713414083964
    },
    {
      "type": "edit",
      "id": "90ae41086b58579e",
      "item": {
        "type": "paragraph",
        "id": "90ae41086b58579e",
        "text": "For a systems engineer such complexity is not new, where systems engineers actively manage complexity by using the concepts of a system and an interface [5]. However unlike its interpretation in the software engineering domain, an interface in the systems engineering domain is closer to the concept of a communication link, an electrical / hydraulic / pneumatic / mechanical cable assembly, or an electronic circuit board / backplane i.e. in this domain. An interface is a thing or object to be built, where this [[Thing]] physically links components together, and as such, has the form of a communication & control structure."
      },
      "date": 1713414145545
    },
    {
      "item": {
        "type": "pagefold",
        "id": "bf17b8170cda6423",
        "text": "~"
      },
      "id": "bf17b8170cda6423",
      "type": "add",
      "after": "90ae41086b58579e",
      "date": 1713415787673
    },
    {
      "type": "edit",
      "id": "bf17b8170cda6423",
      "item": {
        "type": "pagefold",
        "id": "bf17b8170cda6423",
        "text": "~"
      },
      "date": 1713415790950
    },
    {
      "item": {
        "type": "paragraph",
        "id": "ff4686fcf62c26f1",
        "text": "[5] USA DoD, Systems Engineering Fundamentals, Defense Acquisition University Press, 2001"
      },
      "id": "ff4686fcf62c26f1",
      "type": "add",
      "after": "bf17b8170cda6423",
      "date": 1713415792970
    },
    {
      "type": "edit",
      "id": "ff4686fcf62c26f1",
      "item": {
        "type": "paragraph",
        "id": "ff4686fcf62c26f1",
        "text": "[5] USA DoD, Systems Engineering Fundamentals, Defense Acquisition University Press, 2001"
      },
      "date": 1713415803643
    },
    {
      "type": "add",
      "id": "a539d5e977202bc5",
      "item": {
        "type": "paragraph",
        "id": "a539d5e977202bc5",
        "text": "However, event-based software can be easily built in the form of a communication & control structure, thereby making it an ideal candidate to perform a function analogous to a systems engineering interface."
      },
      "after": "90ae41086b58579e",
      "date": 1713416072866
    },
    {
      "item": {
        "type": "image",
        "id": "86fe94abab35618d",
        "text": "Figure 6. An Event",
        "size": "wide",
        "width": 419,
        "height": 138,
        "url": "/assets/plugins/image/239d443f8bef3698a6dc50971fcd9f66.jpg"
      },
      "id": "86fe94abab35618d",
      "type": "add",
      "after": "ff4686fcf62c26f1",
      "date": 1713416129764
    },
    {
      "type": "edit",
      "id": "86fe94abab35618d",
      "item": {
        "type": "image",
        "id": "86fe94abab35618d",
        "text": "Figure 6. An Event",
        "size": "wide",
        "width": 419,
        "height": 138,
        "url": "/assets/plugins/image/239d443f8bef3698a6dc50971fcd9f66.jpg"
      },
      "date": 1713416154922
    },
    {
      "type": "edit",
      "id": "86fe94abab35618d",
      "item": {
        "type": "image",
        "id": "86fe94abab35618d",
        "text": "Figure 6. An Event",
        "size": "wide",
        "width": 419,
        "height": 138,
        "url": "/assets/plugins/image/239d443f8bef3698a6dc50971fcd9f66.jpg"
      },
      "date": 1713416191030
    },
    {
      "item": {
        "type": "image",
        "id": "44f5148455616e56",
        "text": "Figure 5. Model-View Bus Interactions",
        "size": "wide",
        "width": 419,
        "height": 217,
        "url": "/assets/plugins/image/c8aba082a00a0bf07486ddf35f89139f.jpg"
      },
      "id": "44f5148455616e56",
      "type": "add",
      "after": "86fe94abab35618d",
      "date": 1713416219961
    },
    {
      "type": "edit",
      "id": "44f5148455616e56",
      "item": {
        "type": "image",
        "id": "44f5148455616e56",
        "text": "Figure 5. Model-View Bus Interactions",
        "size": "wide",
        "width": 419,
        "height": 217,
        "url": "/assets/plugins/image/c8aba082a00a0bf07486ddf35f89139f.jpg"
      },
      "date": 1713416236012
    },
    {
      "type": "edit",
      "id": "44f5148455616e56",
      "item": {
        "type": "image",
        "id": "44f5148455616e56",
        "text": "Figure 5. Model-View Bus Interactions",
        "size": "wide",
        "width": 419,
        "height": 217,
        "url": "/assets/plugins/image/c8aba082a00a0bf07486ddf35f89139f.jpg"
      },
      "date": 1713416243207
    },
    {
      "type": "add",
      "id": "ec7d5e65efb34450",
      "item": {
        "type": "paragraph",
        "id": "ec7d5e65efb34450",
        "text": "Concentrating on the model-view bus and its interactions from Figure 1, repeated here as Figure 5,"
      },
      "after": "a539d5e977202bc5",
      "date": 1713416280719
    },
    {
      "id": "44f5148455616e56",
      "type": "move",
      "order": [
        "90ae41086b58579e",
        "a539d5e977202bc5",
        "44f5148455616e56",
        "ec7d5e65efb34450",
        "bf17b8170cda6423",
        "ff4686fcf62c26f1",
        "86fe94abab35618d"
      ],
      "date": 1713416286353,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1713416323819
    },
    {
      "item": {
        "type": "image",
        "id": "b9d5119eeaf9dc56",
        "text": "Figure 1. Simple Power-Plant Software Model",
        "size": "wide",
        "width": 419,
        "height": 251,
        "url": "/assets/plugins/image/9fefec31ffffde0570321a72736d68c2.jpg"
      },
      "id": "b9d5119eeaf9dc56",
      "type": "add",
      "after": "86fe94abab35618d",
      "date": 1713416325239
    },
    {
      "type": "edit",
      "id": "b9d5119eeaf9dc56",
      "item": {
        "type": "image",
        "id": "b9d5119eeaf9dc56",
        "text": "Figure 1. Simple Power-Plant Software Model",
        "size": "wide",
        "width": 419,
        "height": 251,
        "url": "/assets/plugins/image/9fefec31ffffde0570321a72736d68c2.jpg"
      },
      "date": 1713416332667
    },
    {
      "id": "b9d5119eeaf9dc56",
      "type": "move",
      "order": [
        "90ae41086b58579e",
        "a539d5e977202bc5",
        "44f5148455616e56",
        "b9d5119eeaf9dc56",
        "ec7d5e65efb34450",
        "bf17b8170cda6423",
        "ff4686fcf62c26f1",
        "86fe94abab35618d"
      ],
      "date": 1713416379758
    },
    {
      "type": "edit",
      "id": "ec7d5e65efb34450",
      "item": {
        "type": "paragraph",
        "id": "ec7d5e65efb34450",
        "text": "Concentrating on the model-view bus and its interactions from Figure 1, repeated here as Figure 5,"
      },
      "date": 1713416391710
    },
    {
      "id": "44f5148455616e56",
      "type": "move",
      "order": [
        "90ae41086b58579e",
        "a539d5e977202bc5",
        "b9d5119eeaf9dc56",
        "ec7d5e65efb34450",
        "44f5148455616e56",
        "cb64276ae067588f",
        "bf17b8170cda6423",
        "ff4686fcf62c26f1",
        "86fe94abab35618d"
      ],
      "date": 1713416398696,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "add",
      "id": "cb64276ae067588f",
      "item": {
        "type": "paragraph",
        "id": "cb64276ae067588f",
        "text": "we see that the event-based software modelling notation used has three concepts, namely, components, buses, and connectors. More specifically, this notation is a bipartite graph4 G = (C, B, K) in which components C represent one graph vertex set (rectangles), event-based buses B represent the second graph vertex set (ovals), and connector graph edges"
      },
      "after": "ec7d5e65efb34450",
      "date": 1713416393271
    },
    {
      "type": "fork",
      "date": 1713416404160
    },
    {
      "type": "edit",
      "id": "cb64276ae067588f",
      "item": {
        "type": "paragraph",
        "id": "cb64276ae067588f",
        "text": "we see that the event-based software modelling notation used has three concepts, namely, components, buses, and connectors. More specifically, this notation is a bipartite graph – A bipartite graph has two disjoint sets of vertices, where every graph edge connects a vertex in one set to a vertex in the other. – G = (C, B, K) in which components C represent one graph vertex set (rectangles), event-based buses B represent the second graph vertex set (ovals), and connector graph edges"
      },
      "date": 1713416475346
    },
    {
      "type": "edit",
      "id": "cb64276ae067588f",
      "item": {
        "type": "paragraph",
        "id": "cb64276ae067588f",
        "text": "we see that the event-based software modelling notation used has three concepts, namely, components, buses, and connectors. More specifically, this notation is a [[Bipartite Graph]] – A bipartite graph has two disjoint sets of vertices, where every graph edge connects a vertex in one set to a vertex in the other. – G = (C, B, K) in which components C represent one graph vertex set (rectangles), event-based buses B represent the second graph vertex set (ovals), and connector graph edges"
      },
      "date": 1713416532973
    },
    {
      "type": "edit",
      "id": "cb64276ae067588f",
      "item": {
        "type": "paragraph",
        "id": "cb64276ae067588f",
        "text": "we see that the event-based software modelling notation used has three concepts, namely, components, buses, and connectors. More specifically, this notation is a [[Bipartite Graph]] G = (C, B, K) in which components C represent one graph vertex set (rectangles), event-based buses B represent the second graph vertex set (ovals), and connector graph edges"
      },
      "date": 1713416587845
    },
    {
      "type": "edit",
      "id": "cb64276ae067588f",
      "item": {
        "type": "paragraph",
        "id": "cb64276ae067588f",
        "text": "we see that the event-based software modelling notation used has three concepts, namely, components, buses, and connectors. More specifically, this notation is a [[Bipartite Graph]] G = (C, B, K) in which components C represent one graph vertex set (rectangles), event-based buses B represent the second graph vertex set (ovals), and connector graph edges K define the form of connection provided by buses, to components."
      },
      "date": 1713416630811
    },
    {
      "type": "add",
      "id": "d466909397c6df0d",
      "item": {
        "type": "paragraph",
        "id": "d466909397c6df0d",
        "text": "Referring to Figure 5, we see that this small but complete event-based software model has: 1) Two display components (remote web display, control console display) connected to the model-view bus (mv bus) using a connector type (view connector). 2) A single power-plant model component (power plant model) connected to the model-view bus using a connector type (model connector). where the connector types (view connector, model connector) provide access to one or more of the events defined and managed by the model-view bus."
      },
      "after": "cb64276ae067588f",
      "date": 1713416658825
    },
    {
      "type": "add",
      "id": "71c1e2ed726e5d45",
      "item": {
        "type": "paragraph",
        "id": "71c1e2ed726e5d45",
        "text": "Now moving attention to the internal structure of an eventbus, and the model-view bus in particular. In its simplest form, an event is a structure containing a list of callback operation references. The structure providing a subscribe operation to add a callback operation reference to the list, and a publish operation to trigger the event, which in turn causes the execution of all callback operations in the list."
      },
      "after": "d466909397c6df0d",
      "date": 1713416746510
    },
    {
      "type": "edit",
      "id": "71c1e2ed726e5d45",
      "item": {
        "type": "paragraph",
        "id": "71c1e2ed726e5d45",
        "text": "Now moving attention to the internal structure of an event-bus, and the model-view bus in particular. In its simplest form, an [[Event]] is a structure containing a list of callback operation references. The structure providing a subscribe operation to add a callback operation reference to the list, and a publish operation to trigger the event, which in turn causes the execution of all callback operations in the list."
      },
      "date": 1713416770466
    },
    {
      "type": "edit",
      "id": "71c1e2ed726e5d45",
      "item": {
        "type": "paragraph",
        "id": "71c1e2ed726e5d45",
        "text": "Now moving attention to the internal structure of an event-bus, and the model-view bus in particular. In its simplest form, an [[Event]] is a structure containing a list of callback operation references. The structure providing a [[subscribe]] operation to add a callback operation reference to the list, and a publish operation to trigger the event, which in turn causes the execution of all callback operations in the list."
      },
      "date": 1713416835774
    },
    {
      "type": "edit",
      "id": "71c1e2ed726e5d45",
      "item": {
        "type": "paragraph",
        "id": "71c1e2ed726e5d45",
        "text": "Now moving attention to the internal structure of an event-bus, and the model-view bus in particular. In its simplest form, an [[Event]] is a structure containing a list of callback operation references. The structure providing a [[subscribe]] operation to add a callback operation reference to the list, and a [[publish]] operation to trigger the event, which in turn causes the execution of all callback operations in the list."
      },
      "date": 1713417488224
    },
    {
      "id": "44f5148455616e56",
      "type": "move",
      "order": [
        "90ae41086b58579e",
        "a539d5e977202bc5",
        "b9d5119eeaf9dc56",
        "ec7d5e65efb34450",
        "cb64276ae067588f",
        "44f5148455616e56",
        "d466909397c6df0d",
        "71c1e2ed726e5d45",
        "bf17b8170cda6423",
        "ff4686fcf62c26f1",
        "86fe94abab35618d"
      ],
      "date": 1713418178484
    },
    {
      "type": "remove",
      "id": "cb64276ae067588f",
      "date": 1713418198920
    },
    {
      "type": "edit",
      "id": "ec7d5e65efb34450",
      "item": {
        "type": "paragraph",
        "id": "ec7d5e65efb34450",
        "text": "Concentrating on the model-view bus and its interactions from Figure 1, repeated here as Figure 5, we see that the event-based software modelling notation used has three concepts, namely, components, buses, and connectors. More specifically, this notation is a [[Bipartite Graph]] G = (C, B, K) in which components C represent one graph vertex set (rectangles), event-based buses B represent the second graph vertex set (ovals), and connector graph edges K define the form of connection provided by buses, to components."
      },
      "date": 1713418201284
    },
    {
      "id": "86fe94abab35618d",
      "type": "move",
      "order": [
        "90ae41086b58579e",
        "a539d5e977202bc5",
        "b9d5119eeaf9dc56",
        "ec7d5e65efb34450",
        "44f5148455616e56",
        "d466909397c6df0d",
        "71c1e2ed726e5d45",
        "86fe94abab35618d",
        "bf17b8170cda6423",
        "ff4686fcf62c26f1"
      ],
      "date": 1713418329225
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1713421490559
    },
    {
      "id": "d9d1d6365e9c6be2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "d9d1d6365e9c6be2",
        "text": "KEW, Martin, FERRIS, Timothy, GROSSMANN, Georg and STUMPTNER, Markus, [no date]. Enhancing Event Driven Architectures With [[Event-Bus Types]]. [https://www.researchgate.net/profile/Tlj-Ferris/publication/228803556_Enhancing_Event_Driven_Architectures_With_Event-Bus_Types/links/55c2d2ce08aea2d9bdbff2aa/Enhancing-Event-Driven-Architectures-With-Event-Bus-Types.pdf pdf]. \n"
      },
      "after": "bf17b8170cda6423",
      "attribution": {
        "page": "rstream-system-bus"
      },
      "date": 1713421518576
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1713421545201
    },
    {
      "item": {
        "type": "factory",
        "id": "d754f377e5aafc53"
      },
      "id": "d754f377e5aafc53",
      "type": "add",
      "after": "ff4686fcf62c26f1",
      "date": 1713421623428
    },
    {
      "type": "edit",
      "id": "d754f377e5aafc53",
      "item": {
        "type": "paragraph",
        "id": "d754f377e5aafc53",
        "text": "causes the execution of all callback operations in the list. Figure 6 presents a graphical representation of an arbitrary event x, from the figure we see that the event has the following characteristics: 1) The event has a callback operation (handle x). 2) The event has a publish or event trigger operation (publish x). 3) The publish relation is represented by a solid arrow to the event. 4) The subscribe relation is represented by a dashed arrow to the event. 5) The event has a type (String), where the type defines the data passed as a parameter between the publish and callback operations."
      },
      "date": 1713421633588
    },
    {
      "type": "edit",
      "id": "d754f377e5aafc53",
      "item": {
        "type": "paragraph",
        "id": "d754f377e5aafc53",
        "text": "Figure 6 presents a graphical representation of an arbitrary event x, from the figure we see that the event has the following characteristics: 1) The event has a callback operation (handle x). 2) The event has a publish or event trigger operation (publish x). 3) The publish relation is represented by a solid arrow to the event. 4) The subscribe relation is represented by a dashed arrow to the event. 5) The event has a type (String), where the type defines the data passed as a parameter between the publish and callback operations."
      },
      "date": 1713421646284
    },
    {
      "id": "d754f377e5aafc53",
      "type": "move",
      "order": [
        "90ae41086b58579e",
        "a539d5e977202bc5",
        "b9d5119eeaf9dc56",
        "ec7d5e65efb34450",
        "44f5148455616e56",
        "d466909397c6df0d",
        "71c1e2ed726e5d45",
        "86fe94abab35618d",
        "d754f377e5aafc53",
        "bf17b8170cda6423",
        "d9d1d6365e9c6be2",
        "ff4686fcf62c26f1"
      ],
      "date": 1713421649911
    },
    {
      "type": "fork",
      "date": 1713421787181
    },
    {
      "type": "edit",
      "id": "d754f377e5aafc53",
      "item": {
        "type": "paragraph",
        "id": "d754f377e5aafc53",
        "text": "Figure 6 presents a graphical representation of an arbitrary event x, from the figure we see that the [[Event]] has the following characteristics: 1) The event has a callback operation (handle x). 2) The event has a publish or event trigger operation (publish x). 3) The publish relation is represented by a solid arrow to the event. 4) The subscribe relation is represented by a dashed arrow to the event. 5) The event has a type (String), where the type defines the data passed as a parameter between the publish and callback operations."
      },
      "date": 1713421801007
    },
    {
      "type": "edit",
      "id": "d754f377e5aafc53",
      "item": {
        "type": "paragraph",
        "id": "d754f377e5aafc53",
        "text": "Figure 6 presents a graphical representation of an arbitrary event x, from the figure we see that the [[Event]] has the following characteristics: 1) The event has a callback operation ([[handle]] x). 2) The event has a publish or event trigger operation ([[publish]] x). 3) The publish relation is represented by a solid arrow to the event. 4) The subscribe relation is represented by a dashed arrow to the event. 5) The event has a type (String), where the type defines the data passed as a parameter between the publish and callback operations."
      },
      "date": 1713421883231
    },
    {
      "type": "add",
      "id": "93e20a9395cd704e",
      "item": {
        "type": "paragraph",
        "id": "93e20a9395cd704e",
        "text": "Note: [[Graph]] as the only type?!"
      },
      "after": "d754f377e5aafc53",
      "date": 1713422208904
    },
    {
      "type": "edit",
      "id": "93e20a9395cd704e",
      "item": {
        "type": "paragraph",
        "id": "93e20a9395cd704e",
        "text": "NB. [[Graph]] as the only type?!"
      },
      "date": 1713422304653
    },
    {
      "type": "edit",
      "id": "93e20a9395cd704e",
      "item": {
        "type": "paragraph",
        "id": "93e20a9395cd704e",
        "text": "NB. [[Graph]] as the only type?!!"
      },
      "date": 1713422336745
    },
    {
      "type": "add",
      "id": "18ed533c888af5e5",
      "item": {
        "type": "paragraph",
        "id": "18ed533c888af5e5",
        "text": "Using the conventions of Figure 6, we are now in a position to define an Event Bus Graph for the model-view bus i.e. Figure 7, where this figure is a complete graphical representation of all the events handled by the bus. As an example, the graph supports the following sequence of operations:"
      },
      "after": "93e20a9395cd704e",
      "date": 1713422442075
    },
    {
      "type": "edit",
      "id": "93e20a9395cd704e",
      "item": {
        "type": "paragraph",
        "id": "93e20a9395cd704e",
        "text": "NB. [[Graph]] as the only [[Type]]?!!"
      },
      "date": 1713422462781
    },
    {
      "type": "edit",
      "id": "18ed533c888af5e5",
      "item": {
        "type": "paragraph",
        "id": "18ed533c888af5e5",
        "text": "Using the conventions of Figure 6, we are now in a position to define an [[Event Bus Graph]] for the model-view bus i.e. Figure 7, where this figure is a complete graphical representation of all the events handled by the bus. As an example, the graph supports the following sequence of operations:"
      },
      "date": 1713422507376
    },
    {
      "type": "edit",
      "id": "18ed533c888af5e5",
      "item": {
        "type": "paragraph",
        "id": "18ed533c888af5e5",
        "text": "Using the conventions of Figure 6, we are now in a position to define an [[Event Bus Graph]] for the [[Model-View Bus]] i.e. Figure 7, where this figure is a complete graphical representation of all the events handled by the bus. As an example, the graph supports the following sequence of operations:"
      },
      "date": 1713422897226
    }
  ]
}