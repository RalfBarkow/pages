{
  "title": "Category Polymorphism",
  "story": [
    {
      "type": "html",
      "text": "Click on the above link to see a complete list of pages in this category.",
      "id": "fe9407b1abf44381403aa0a28fe9ca8c"
    },
    {
      "type": "html",
      "text": "<i>[[Poly Morphism]]</i> (what a horrible [[Wiki Name]], but what can you do?) is the development of algorithms or data structures (or more concrete language constructs, such as objects or functions) which operate successfully on multiple types, doing things appropriate for the type.",
      "id": "6a4d6ae8405df65720090f9b03dfdb5e"
    },
    {
      "type": "html",
      "text": "<i>Some take issue with polymorphism being based solely on \"types\". Answering a particular message (method call) does not necessarily depend on typing. Your viewpoint probably depends on where you stand in the static-versus-dynamic [[Holy War]].</i>",
      "id": "8c7345d9230313e236a9bd7aca0b17a6"
    },
    {
      "type": "html",
      "text": "[Note that even when there isn't a formal type system per se, one can still divine the concept of type. Smalltalk is often called untyped. However, if you have a set of classes that respond to the message ",
      "id": "ba4c2ea947c9d934815eb3a74a3a0254"
    },
    {
      "type": "html",
      "text": "doThis:<br>andThat: andTheOther:",
      "id": "964d34697c0a75d382bc7931fb889669"
    },
    {
      "type": "html",
      "text": "one could say that this set represents a type, distinct from its inverse (which doesn't respond to the above message). Of course, you are getting away from type hierarchies, and into set-based or predicate-based type systems. Which are more flexible than hierarchies, but arguably more difficult to implement efficiently. -- [[Scott Johnson]]]",
      "id": "403ee00e5b8e0e51cc6fc957696009bc"
    },
    {
      "type": "html",
      "text": "\nI am not sure set-based types or predicate-based types could even be called \"types\". I suppose one's world view could be that [[Everything Isa Type]], for good or bad. But, that is a subjective perception, not necessarily something objectively in say Smalltalk.",
      "id": "66cb0528b516082a407cad4fdef4f2fa"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1a2004cac7ff48002ff7c7330488e683"
    },
    {
      "type": "html",
      "text": "\nTypes of polymorphism:",
      "id": "5325a63739c3b31d7c4c18168024e9e1"
    },
    {
      "type": "html",
      "text": " [[Generic Polymorphism]], also known as [[Parametric Polymorphism]]:<br>Generic algorithms, templates, parameteric types, etc. See [[Generic Function]]s (for Lisp discussion), [[Category Cpp Templates]] (they get a category all their own! Lots of useful links in here). ",
      "id": "3c9727744d93f45989770d626084157a"
    },
    {
      "type": "html",
      "text": "<i>Is [[Static Polymorphism]] [[Generic Polymorphism]]?</i>",
      "id": "a52097385ecbb95bb5a087ef636c2d1a"
    },
    {
      "type": "html",
      "text": " [[Subtype Polymorphism]]:<br>Polymorphism based on <i>subtyping</i> (the notion that one type can extend/implement the behavior of another in such fashion that any valid operation on the supertype is valid on the subtype), <i>subsumption</i> (allowing a subtype to be used in a context where a supertype is expected), and <i>[[Dynamic Dispatch]]</i> (selecting a function or data based on the runtime type of its arguments - see [[Single Dispatch]], [[Double Dispatch]], [[Multiple Dispatch]] (aka [[Multi Methods]])). [[Java Language]], [[Cee Plus Plus]], etc., all have subtype polymorphism. See also [[Virtual Functions]], [[Dynamic Cast]], [[Run Time Type Information]]",
      "id": "a0da6afef8abb121e59d43133b234dea"
    },
    {
      "type": "html",
      "text": " [[Boxing Conversions]]:<br>Automagically converting expressions of a type which has undergone [[Type Erasure]] to one that hasn't or vice versa. Going from \"int\" (an intrinsic type) to \"Integer\" (a class) in Java 1.5 (and [[Csharp Language]], though the names might be different) is one example.",
      "id": "ceeb74ac51377d68f8124428caf0d79c"
    },
    {
      "type": "html",
      "text": " [[Ad Hoc Polymorphism]]:<br>Anything else.",
      "id": "443ba33bb393d83d967ecb1462e3c8d0"
    },
    {
      "type": "html",
      "text": "\nAlso see [[Generic Vs Object Oriented Programming]], [[Alternate Object Oriented Programming View]], [[On Understanding Types]]",
      "id": "7b290a0e34fc9a12a72808aa8b6632e3"
    },
    {
      "type": "html",
      "text": "\nIssues in polymorphism:",
      "id": "a05bb7ac1df831167d3ebe9d30448893"
    },
    {
      "type": "html",
      "text": " [[Internal Polymorphism]] vs [[External Polymorphism]]. Does a type itself \"contain\" knowledge of its identity, and participate in the implementation of polymorphism? Or is it entirely external to the type definition?",
      "id": "842d95cc1e77dcb9380cb238f2618622"
    },
    {
      "type": "html",
      "text": " [[Pointer Cast Polymorphism]]. What to do if you are working in a low-level language (like [[Cee Language]])",
      "id": "bd35d880be486d330e391e367f20956f"
    },
    {
      "type": "html",
      "text": " [[Multiple Inheritance]]. Having more than one supertype. [[Multiple Inheritance Is Not Evil]], [[Multiple Inheritance In Smalltalk]], [[Mix In]]",
      "id": "4a5b8911d12a2131109c41c218673c67"
    },
    {
      "type": "html",
      "text": " Inheritance vs delegation vs redirection. Inheritance (subclassing) is when all parts of a base type object are pasted into a derived type object (with some of them capable of being overwritten). Delegation ([[Delegation Pattern]]) is kindasorta \"inheritance by pointer\", where a reference to a base type object is stored in the derived object; however, the subtype relationship is preserved. (Sometimes, multiple instances of a derived object can share the same base object instance). Redirection is similar to delegation, but it's \"one-way\". [[Polymorphism And Inheritance]], [[Delegation Inheritance]], [[Delegation Is Inheritance]], [[Prototype Based Programming]], [[Use Composition And Interfaces Without Class Inheritance]], [[Composition Instead Of Inheritance]]",
      "id": "34acb29b7ca1a1431a7b6989b0cb3229"
    },
    {
      "type": "html",
      "text": " The infamous [[Fragile Base Class Problem]].",
      "id": "5420dba80c1f8753fa0736b5bb78358f"
    },
    {
      "type": "html",
      "text": " A few well-known modeling prolems. [[Circle And Ellipse Problem]] (see also [[Circles Aint Ellipses]], [[Circles Are Ellipses]])",
      "id": "b4d09870a6de772f7ab1f077075791bb"
    },
    {
      "type": "html",
      "text": " Some argue that subtyping (and/or types themselves) is flawed, disagree on how subtypes ought to act with regards to their supertypes, a [[Useful Lie]], or perhaps a not-so-useful lie. See [[Polymorphism Limits]], [[Context Sensitive Subtyping]], [[Limits Of Hierarchies]], [[Liskov Substitution Principle]], [[What Are Types]], [[There Are No Types]], [[Sets Versus Types]]",
      "id": "685d61b9780fd3c0eb6a0f11dc984f73"
    },
    {
      "type": "html",
      "text": " Are there other better ways of implementing polymorhpism than the ones we've seen implemented so far?",
      "id": "dc6cfd368eb32fa54f6dde269e56ce4e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1a2004cac7ff48002ff7c7330488e683"
    },
    {
      "type": "html",
      "text": "See Also: [[Category Conditionals And Dispatching]], [[Category Language Typing]]",
      "id": "41b82de4c7e04f696d86fdb92b3a0952"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1a2004cac7ff48002ff7c7330488e683"
    },
    {
      "type": "html",
      "text": "[[Category Category]]",
      "id": "3f940d25ebec14164040e79212a2b6fa"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CategoryPolymorphism c2.com]",
      "id": "9dcdc77c494ce0538a90c20c011c4471"
    }
  ],
  "journal": [
    {
      "date": 1151225759000,
      "id": "e9995cb4f5db45ef1fa2f2588d617835",
      "type": "create",
      "item": {
        "title": "Category Polymorphism",
        "story": [
          {
            "type": "html",
            "text": "Click on the above link to see a complete list of pages in this category.",
            "id": "fe9407b1abf44381403aa0a28fe9ca8c"
          },
          {
            "type": "html",
            "text": "<i>[[Poly Morphism]]</i> (what a horrible [[Wiki Name]], but what can you do?) is the development of algorithms or data structures (or more concrete language constructs, such as objects or functions) which operate successfully on multiple types, doing things appropriate for the type.",
            "id": "6a4d6ae8405df65720090f9b03dfdb5e"
          },
          {
            "type": "html",
            "text": "<i>Some take issue with polymorphism being based solely on \"types\". Answering a particular message (method call) does not necessarily depend on typing. Your viewpoint probably depends on where you stand in the static-versus-dynamic [[Holy War]].</i>",
            "id": "8c7345d9230313e236a9bd7aca0b17a6"
          },
          {
            "type": "html",
            "text": "[Note that even when there isn't a formal type system per se, one can still divine the concept of type. Smalltalk is often called untyped. However, if you have a set of classes that respond to the message ",
            "id": "ba4c2ea947c9d934815eb3a74a3a0254"
          },
          {
            "type": "html",
            "text": "doThis:<br>andThat: andTheOther:",
            "id": "964d34697c0a75d382bc7931fb889669"
          },
          {
            "type": "html",
            "text": "one could say that this set represents a type, distinct from its inverse (which doesn't respond to the above message). Of course, you are getting away from type hierarchies, and into set-based or predicate-based type systems. Which are more flexible than hierarchies, but arguably more difficult to implement efficiently. -- [[Scott Johnson]]]",
            "id": "403ee00e5b8e0e51cc6fc957696009bc"
          },
          {
            "type": "html",
            "text": "\nI am not sure set-based types or predicate-based types could even be called \"types\". I suppose one's world view could be that [[Everything Isa Type]], for good or bad. But, that is a subjective perception, not necessarily something objectively in say Smalltalk.",
            "id": "66cb0528b516082a407cad4fdef4f2fa"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1a2004cac7ff48002ff7c7330488e683"
          },
          {
            "type": "html",
            "text": "\nTypes of polymorphism:",
            "id": "5325a63739c3b31d7c4c18168024e9e1"
          },
          {
            "type": "html",
            "text": " [[Generic Polymorphism]], also known as [[Parametric Polymorphism]]:<br>Generic algorithms, templates, parameteric types, etc. See [[Generic Function]]s (for Lisp discussion), [[Category Cpp Templates]] (they get a category all their own! Lots of useful links in here). ",
            "id": "3c9727744d93f45989770d626084157a"
          },
          {
            "type": "html",
            "text": "<i>Is [[Static Polymorphism]] [[Generic Polymorphism]]?</i>",
            "id": "a52097385ecbb95bb5a087ef636c2d1a"
          },
          {
            "type": "html",
            "text": " [[Subtype Polymorphism]]:<br>Polymorphism based on <i>subtyping</i> (the notion that one type can extend/implement the behavior of another in such fashion that any valid operation on the supertype is valid on the subtype), <i>subsumption</i> (allowing a subtype to be used in a context where a supertype is expected), and <i>[[Dynamic Dispatch]]</i> (selecting a function or data based on the runtime type of its arguments - see [[Single Dispatch]], [[Double Dispatch]], [[Multiple Dispatch]] (aka [[Multi Methods]])). [[Java Language]], [[Cee Plus Plus]], etc., all have subtype polymorphism. See also [[Virtual Functions]], [[Dynamic Cast]], [[Run Time Type Information]]",
            "id": "a0da6afef8abb121e59d43133b234dea"
          },
          {
            "type": "html",
            "text": " [[Boxing Conversions]]:<br>Automagically converting expressions of a type which has undergone [[Type Erasure]] to one that hasn't or vice versa. Going from \"int\" (an intrinsic type) to \"Integer\" (a class) in Java 1.5 (and [[Csharp Language]], though the names might be different) is one example.",
            "id": "ceeb74ac51377d68f8124428caf0d79c"
          },
          {
            "type": "html",
            "text": " [[Ad Hoc Polymorphism]]:<br>Anything else.",
            "id": "443ba33bb393d83d967ecb1462e3c8d0"
          },
          {
            "type": "html",
            "text": "\nAlso see [[Generic Vs Object Oriented Programming]], [[Alternate Object Oriented Programming View]], [[On Understanding Types]]",
            "id": "7b290a0e34fc9a12a72808aa8b6632e3"
          },
          {
            "type": "html",
            "text": "\nIssues in polymorphism:",
            "id": "a05bb7ac1df831167d3ebe9d30448893"
          },
          {
            "type": "html",
            "text": " [[Internal Polymorphism]] vs [[External Polymorphism]]. Does a type itself \"contain\" knowledge of its identity, and participate in the implementation of polymorphism? Or is it entirely external to the type definition?",
            "id": "842d95cc1e77dcb9380cb238f2618622"
          },
          {
            "type": "html",
            "text": " [[Pointer Cast Polymorphism]]. What to do if you are working in a low-level language (like [[Cee Language]])",
            "id": "bd35d880be486d330e391e367f20956f"
          },
          {
            "type": "html",
            "text": " [[Multiple Inheritance]]. Having more than one supertype. [[Multiple Inheritance Is Not Evil]], [[Multiple Inheritance In Smalltalk]], [[Mix In]]",
            "id": "4a5b8911d12a2131109c41c218673c67"
          },
          {
            "type": "html",
            "text": " Inheritance vs delegation vs redirection. Inheritance (subclassing) is when all parts of a base type object are pasted into a derived type object (with some of them capable of being overwritten). Delegation ([[Delegation Pattern]]) is kindasorta \"inheritance by pointer\", where a reference to a base type object is stored in the derived object; however, the subtype relationship is preserved. (Sometimes, multiple instances of a derived object can share the same base object instance). Redirection is similar to delegation, but it's \"one-way\". [[Polymorphism And Inheritance]], [[Delegation Inheritance]], [[Delegation Is Inheritance]], [[Prototype Based Programming]], [[Use Composition And Interfaces Without Class Inheritance]], [[Composition Instead Of Inheritance]]",
            "id": "34acb29b7ca1a1431a7b6989b0cb3229"
          },
          {
            "type": "html",
            "text": " The infamous [[Fragile Base Class Problem]].",
            "id": "5420dba80c1f8753fa0736b5bb78358f"
          },
          {
            "type": "html",
            "text": " A few well-known modeling prolems. [[Circle And Ellipse Problem]] (see also [[Circles Aint Ellipses]], [[Circles Are Ellipses]])",
            "id": "b4d09870a6de772f7ab1f077075791bb"
          },
          {
            "type": "html",
            "text": " Some argue that subtyping (and/or types themselves) is flawed, disagree on how subtypes ought to act with regards to their supertypes, a [[Useful Lie]], or perhaps a not-so-useful lie. See [[Polymorphism Limits]], [[Context Sensitive Subtyping]], [[Limits Of Hierarchies]], [[Liskov Substitution Principle]], [[What Are Types]], [[There Are No Types]], [[Sets Versus Types]]",
            "id": "685d61b9780fd3c0eb6a0f11dc984f73"
          },
          {
            "type": "html",
            "text": " Are there other better ways of implementing polymorhpism than the ones we've seen implemented so far?",
            "id": "dc6cfd368eb32fa54f6dde269e56ce4e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1a2004cac7ff48002ff7c7330488e683"
          },
          {
            "type": "html",
            "text": "See Also: [[Category Conditionals And Dispatching]], [[Category Language Typing]]",
            "id": "41b82de4c7e04f696d86fdb92b3a0952"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1a2004cac7ff48002ff7c7330488e683"
          },
          {
            "type": "html",
            "text": "[[Category Category]]",
            "id": "3f940d25ebec14164040e79212a2b6fa"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CategoryPolymorphism c2.com]",
            "id": "9dcdc77c494ce0538a90c20c011c4471"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1664258976689
    }
  ]
}