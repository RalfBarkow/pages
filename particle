{
  "title": "Particle",
  "story": [
    {
      "type": "markdown",
      "id": "7fde1762cf0b434f",
      "text": "Particle [[Movement]] (within the [[Geometric Amoebot Model]])\n* should move contracted particle to adjacent unoccupied node when moving\n* should contract expanded particle to one of its nodes when moving"
    },
    {
      "type": "assets",
      "id": "bab9e6f9d5e0732a",
      "text": "pages/particle"
    },
    {
      "type": "paragraph",
      "id": "b7662a6430a365c8",
      "text": "⇐ [[avoid]] conflicts between the [[Simulation]] and our test cases. Exclude the simulation of particle motion from the [[Node]] class (see the node.js file). [⇒ [[First Animated Program]]]"
    },
    {
      "type": "code",
      "id": "4a8dfcc259c867f7",
      "text": "// Simulate particle movement\nsetInterval(() => {\n  particles.forEach((particle) => {\n    particle.move();\n    console.log(`Particle ${particle.id} moved to position (${particle.position.x}, ${particle.position.y})`);\n  });\n}, 1000); // Adjust simulation speed as needed"
    },
    {
      "type": "paragraph",
      "id": "a1bb663823fdd019",
      "text": "⇒ [[Playground: Particle]]"
    },
    {
      "type": "paragraph",
      "id": "521e794ecc08cff8",
      "text": "⇐ [[create]] a new instance of a [[Class]] Particle"
    },
    {
      "type": "code",
      "id": "1f6cc8169aab1083",
      "text": "class Particle {\n  constructor(id, position, state) {\n    this.id = id; // Unique identifier for the particle\n    this.position = position; // Current position on the grid\n    this.state = state; // 'contracted' or 'expanded'\n    this.head = null; // Node the particle last expanded into\n    this.tail = null; // Other occupied node\n  }\n\n  expandTo(node) {\n    this.state = 'expanded';\n    this.head = node;\n  }\n\n  contractTo(node) {\n    this.state = 'contracted';\n    this.tail = node;\n  }\n\n  move() {\n    // Simulate particle movement based on expansions and contractions\n    if (this.state === 'contracted') {\n      // Particle is contracted, try to expand to adjacent node\n      const adjacentNodes = this.getAdjacentNodes();\n      for (const node of adjacentNodes) {\n        if (!node.occupied) {\n          this.expandTo(node);\n          node.occupied = true;\n          return;\n        }\n      }\n    } else if (this.state === 'expanded') {\n      // Particle is expanded, try to contract to one of its nodes\n      if (!this.tail.occupied) {\n        this.contractTo(this.tail);\n        this.head.occupied = false;\n      }\n    }\n  }\n\n  getAdjacentNodes() {\n    // Get adjacent nodes on the triangular grid\n    // Implement your own logic for identifying adjacent nodes based on the triangular grid structure\n    // For simplicity, this implementation assumes a flat grid with triangular cells\n    // and calculates adjacent nodes based on their positions\n    // You may need to adjust this logic based on your specific grid structure\n    const adjacentNodes = [];\n    // Implement logic to identify adjacent nodes based on current position\n    // For example, you could use geometric calculations or pre-defined mappings\n    return adjacentNodes;\n  }\n}\n"
    },
    {
      "type": "paragraph",
      "id": "208f2d46f9449604",
      "text": "⇒ class [[Node]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Particle",
        "story": []
      },
      "date": 1713957556401
    },
    {
      "item": {
        "type": "factory",
        "id": "1f6cc8169aab1083"
      },
      "id": "1f6cc8169aab1083",
      "type": "add",
      "date": 1713957557943
    },
    {
      "type": "edit",
      "id": "1f6cc8169aab1083",
      "item": {
        "type": "code",
        "id": "1f6cc8169aab1083",
        "text": "class Particle {\n  constructor(id, position, state) {\n    this.id = id; // Unique identifier for the particle\n    this.position = position; // Current position on the grid\n    this.state = state; // 'contracted' or 'expanded'\n    this.head = null; // Node the particle last expanded into\n    this.tail = null; // Other occupied node\n  }\n\n  expandTo(node) {\n    this.state = 'expanded';\n    this.head = node;\n  }\n\n  contractTo(node) {\n    this.state = 'contracted';\n    this.tail = node;\n  }\n\n  move() {\n    // Simulate particle movement based on expansions and contractions\n    if (this.state === 'contracted') {\n      // Particle is contracted, try to expand to adjacent node\n      const adjacentNodes = this.getAdjacentNodes();\n      for (const node of adjacentNodes) {\n        if (!node.occupied) {\n          this.expandTo(node);\n          node.occupied = true;\n          return;\n        }\n      }\n    } else if (this.state === 'expanded') {\n      // Particle is expanded, try to contract to one of its nodes\n      if (!this.tail.occupied) {\n        this.contractTo(this.tail);\n        this.head.occupied = false;\n      }\n    }\n  }\n\n  getAdjacentNodes() {\n    // Get adjacent nodes on the triangular grid\n    // Implement your own logic for identifying adjacent nodes based on the triangular grid structure\n    // For simplicity, this implementation assumes a flat grid with triangular cells\n    // and calculates adjacent nodes based on their positions\n    // You may need to adjust this logic based on your specific grid structure\n    const adjacentNodes = [];\n    // Implement logic to identify adjacent nodes based on current position\n    // For example, you could use geometric calculations or pre-defined mappings\n    return adjacentNodes;\n  }\n}\n\nclass Node {\n  constructor(x, y) {\n    this.x = x; // X-coordinate of the node\n    this.y = y; // Y-coordinate of the node\n    this.occupied = false; // Flag to indicate if the node is occupied by a particle\n  }\n}\n\n// Create triangular grid of nodes\nconst nodes = [];\nconst numRows = 10; // Number of rows in the grid\nconst numCols = 10; // Number of columns in the grid\nfor (let i = 0; i < numRows; i++) {\n  for (let j = 0; j < numCols; j++) {\n    // Calculate position of node based on row and column\n    const x = j * 2; // Adjust based on the triangular grid layout\n    const y = i * 2; // Adjust based on the triangular grid layout\n    const node = new Node(x, y);\n    nodes.push(node);\n  }\n}\n\n// Create particles\nconst particles = [];\nconst numParticles = 5; // Number of particles in the simulation\nfor (let i = 0; i < numParticles; i++) {\n  // Randomly select starting position for each particle\n  const randomNode = nodes[Math.floor(Math.random() * nodes.length)];\n  const particle = new Particle(i, randomNode, 'contracted');\n  randomNode.occupied = true;\n  particles.push(particle);\n}\n\n// Simulate particle movement\nsetInterval(() => {\n  particles.forEach((particle) => {\n    particle.move();\n    console.log(`Particle ${particle.id} moved to position (${particle.position.x}, ${particle.position.y})`);\n  });\n}, 1000); // Adjust simulation speed as needed\n"
      },
      "date": 1713957560953
    },
    {
      "item": {
        "type": "factory",
        "id": "bab9e6f9d5e0732a"
      },
      "id": "bab9e6f9d5e0732a",
      "type": "add",
      "after": "1f6cc8169aab1083",
      "date": 1713957624943
    },
    {
      "type": "edit",
      "id": "bab9e6f9d5e0732a",
      "item": {
        "type": "assets",
        "id": "bab9e6f9d5e0732a",
        "text": "pages/particle"
      },
      "date": 1713957643360
    },
    {
      "item": {
        "type": "factory",
        "id": "7fde1762cf0b434f"
      },
      "id": "7fde1762cf0b434f",
      "type": "add",
      "after": "bab9e6f9d5e0732a",
      "date": 1713958170837
    },
    {
      "type": "edit",
      "id": "7fde1762cf0b434f",
      "item": {
        "type": "paragraph",
        "id": "7fde1762cf0b434f",
        "text": "Particle movement\n        should move contracted particle to adjacent unoccupied node when moving\n        should contract expanded particle to one of its nodes when moving"
      },
      "date": 1713958177076
    },
    {
      "id": "7fde1762cf0b434f",
      "type": "move",
      "order": [
        "7fde1762cf0b434f",
        "1f6cc8169aab1083",
        "bab9e6f9d5e0732a"
      ],
      "date": 1713958182109
    },
    {
      "type": "edit",
      "id": "7fde1762cf0b434f",
      "item": {
        "type": "paragraph",
        "id": "7fde1762cf0b434f",
        "text": "Particle movement\n* should move contracted particle to adjacent unoccupied node when moving\n* should contract expanded particle to one of its nodes when moving"
      },
      "date": 1713958193490
    },
    {
      "type": "edit",
      "id": "7fde1762cf0b434f",
      "item": {
        "type": "markdown",
        "id": "7fde1762cf0b434f",
        "text": "Particle movement\n* should move contracted particle to adjacent unoccupied node when moving\n* should contract expanded particle to one of its nodes when moving"
      },
      "date": 1713958194671
    },
    {
      "id": "521e794ecc08cff8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "521e794ecc08cff8",
        "text": "⇐ [[create]] a new instance of a class "
      },
      "after": "7fde1762cf0b434f",
      "attribution": {
        "page": "scratch"
      },
      "date": 1713958257641
    },
    {
      "type": "edit",
      "id": "521e794ecc08cff8",
      "item": {
        "type": "paragraph",
        "id": "521e794ecc08cff8",
        "text": "⇐ [[create]] a new instance of a [[Class]] "
      },
      "date": 1713958266138
    },
    {
      "id": "bab9e6f9d5e0732a",
      "type": "move",
      "order": [
        "7fde1762cf0b434f",
        "bab9e6f9d5e0732a",
        "521e794ecc08cff8",
        "1f6cc8169aab1083"
      ],
      "date": 1713958295916
    },
    {
      "type": "edit",
      "id": "521e794ecc08cff8",
      "item": {
        "type": "paragraph",
        "id": "521e794ecc08cff8",
        "text": "⇐ [[create]] a new instance of a [[Class]]"
      },
      "date": 1713959602552
    },
    {
      "type": "add",
      "id": "b7662a6430a365c8",
      "item": {
        "type": "paragraph",
        "id": "b7662a6430a365c8",
        "text": "⇐ [[avoid]] conflicts between the simulation and your test cases"
      },
      "after": "521e794ecc08cff8",
      "date": 1713959621048
    },
    {
      "id": "311ededb48277072",
      "type": "add",
      "item": {
        "type": "code",
        "id": "311ededb48277072",
        "text": "// Simulate particle movement\nsetInterval(() => {\n  particles.forEach((particle) => {\n    particle.move();\n    console.log(`Particle ${particle.id} moved to position (${particle.position.x}, ${particle.position.y})`);\n  });\n}, 1000); // Adjust simulation speed as needed\n"
      },
      "after": "1f6cc8169aab1083",
      "attribution": {
        "page": "scratch"
      },
      "date": 1713959693791
    },
    {
      "type": "edit",
      "id": "1f6cc8169aab1083",
      "item": {
        "type": "code",
        "id": "1f6cc8169aab1083",
        "text": "class Particle {\n  constructor(id, position, state) {\n    this.id = id; // Unique identifier for the particle\n    this.position = position; // Current position on the grid\n    this.state = state; // 'contracted' or 'expanded'\n    this.head = null; // Node the particle last expanded into\n    this.tail = null; // Other occupied node\n  }\n\n  expandTo(node) {\n    this.state = 'expanded';\n    this.head = node;\n  }\n\n  contractTo(node) {\n    this.state = 'contracted';\n    this.tail = node;\n  }\n\n  move() {\n    // Simulate particle movement based on expansions and contractions\n    if (this.state === 'contracted') {\n      // Particle is contracted, try to expand to adjacent node\n      const adjacentNodes = this.getAdjacentNodes();\n      for (const node of adjacentNodes) {\n        if (!node.occupied) {\n          this.expandTo(node);\n          node.occupied = true;\n          return;\n        }\n      }\n    } else if (this.state === 'expanded') {\n      // Particle is expanded, try to contract to one of its nodes\n      if (!this.tail.occupied) {\n        this.contractTo(this.tail);\n        this.head.occupied = false;\n      }\n    }\n  }\n\n  getAdjacentNodes() {\n    // Get adjacent nodes on the triangular grid\n    // Implement your own logic for identifying adjacent nodes based on the triangular grid structure\n    // For simplicity, this implementation assumes a flat grid with triangular cells\n    // and calculates adjacent nodes based on their positions\n    // You may need to adjust this logic based on your specific grid structure\n    const adjacentNodes = [];\n    // Implement logic to identify adjacent nodes based on current position\n    // For example, you could use geometric calculations or pre-defined mappings\n    return adjacentNodes;\n  }\n}\n\nclass Node {\n  constructor(x, y) {\n    this.x = x; // X-coordinate of the node\n    this.y = y; // Y-coordinate of the node\n    this.occupied = false; // Flag to indicate if the node is occupied by a particle\n  }\n}\n\n// Create triangular grid of nodes\nconst nodes = [];\nconst numRows = 10; // Number of rows in the grid\nconst numCols = 10; // Number of columns in the grid\nfor (let i = 0; i < numRows; i++) {\n  for (let j = 0; j < numCols; j++) {\n    // Calculate position of node based on row and column\n    const x = j * 2; // Adjust based on the triangular grid layout\n    const y = i * 2; // Adjust based on the triangular grid layout\n    const node = new Node(x, y);\n    nodes.push(node);\n  }\n}\n\n// Create particles\nconst particles = [];\nconst numParticles = 5; // Number of particles in the simulation\nfor (let i = 0; i < numParticles; i++) {\n  // Randomly select starting position for each particle\n  const randomNode = nodes[Math.floor(Math.random() * nodes.length)];\n  const particle = new Particle(i, randomNode, 'contracted');\n  randomNode.occupied = true;\n  particles.push(particle);\n}\n"
      },
      "date": 1713959707417
    },
    {
      "type": "edit",
      "id": "1f6cc8169aab1083",
      "item": {
        "type": "code",
        "id": "1f6cc8169aab1083",
        "text": "class Particle {\n  constructor(id, position, state) {\n    this.id = id; // Unique identifier for the particle\n    this.position = position; // Current position on the grid\n    this.state = state; // 'contracted' or 'expanded'\n    this.head = null; // Node the particle last expanded into\n    this.tail = null; // Other occupied node\n  }\n\n  expandTo(node) {\n    this.state = 'expanded';\n    this.head = node;\n  }\n\n  contractTo(node) {\n    this.state = 'contracted';\n    this.tail = node;\n  }\n\n  move() {\n    // Simulate particle movement based on expansions and contractions\n    if (this.state === 'contracted') {\n      // Particle is contracted, try to expand to adjacent node\n      const adjacentNodes = this.getAdjacentNodes();\n      for (const node of adjacentNodes) {\n        if (!node.occupied) {\n          this.expandTo(node);\n          node.occupied = true;\n          return;\n        }\n      }\n    } else if (this.state === 'expanded') {\n      // Particle is expanded, try to contract to one of its nodes\n      if (!this.tail.occupied) {\n        this.contractTo(this.tail);\n        this.head.occupied = false;\n      }\n    }\n  }\n\n  getAdjacentNodes() {\n    // Get adjacent nodes on the triangular grid\n    // Implement your own logic for identifying adjacent nodes based on the triangular grid structure\n    // For simplicity, this implementation assumes a flat grid with triangular cells\n    // and calculates adjacent nodes based on their positions\n    // You may need to adjust this logic based on your specific grid structure\n    const adjacentNodes = [];\n    // Implement logic to identify adjacent nodes based on current position\n    // For example, you could use geometric calculations or pre-defined mappings\n    return adjacentNodes;\n  }\n}\n\nclass Node {\n  constructor(x, y) {\n    this.x = x; // X-coordinate of the node\n    this.y = y; // Y-coordinate of the node\n    this.occupied = false; // Flag to indicate if the node is occupied by a particle\n  }\n}\n\n// Create triangular grid of nodes\nconst nodes = [];\nconst numRows = 10; // Number of rows in the grid\nconst numCols = 10; // Number of columns in the grid\nfor (let i = 0; i < numRows; i++) {\n  for (let j = 0; j < numCols; j++) {\n    // Calculate position of node based on row and column\n    const x = j * 2; // Adjust based on the triangular grid layout\n    const y = i * 2; // Adjust based on the triangular grid layout\n    const node = new Node(x, y);\n    nodes.push(node);\n  }\n}\n\n"
      },
      "date": 1713959731303
    },
    {
      "id": "649a0443210b2171",
      "type": "add",
      "item": {
        "type": "code",
        "id": "649a0443210b2171",
        "text": "// Create particles\nconst particles = [];\nconst numParticles = 5; // Number of particles in the simulation\nfor (let i = 0; i < numParticles; i++) {\n  // Randomly select starting position for each particle\n  const randomNode = nodes[Math.floor(Math.random() * nodes.length)];\n  const particle = new Particle(i, randomNode, 'contracted');\n  randomNode.occupied = true;\n  particles.push(particle);\n}"
      },
      "after": "1f6cc8169aab1083",
      "attribution": {
        "page": "scratch"
      },
      "date": 1713959738798
    },
    {
      "type": "edit",
      "id": "1f6cc8169aab1083",
      "item": {
        "type": "code",
        "id": "1f6cc8169aab1083",
        "text": "class Particle {\n  constructor(id, position, state) {\n    this.id = id; // Unique identifier for the particle\n    this.position = position; // Current position on the grid\n    this.state = state; // 'contracted' or 'expanded'\n    this.head = null; // Node the particle last expanded into\n    this.tail = null; // Other occupied node\n  }\n\n  expandTo(node) {\n    this.state = 'expanded';\n    this.head = node;\n  }\n\n  contractTo(node) {\n    this.state = 'contracted';\n    this.tail = node;\n  }\n\n  move() {\n    // Simulate particle movement based on expansions and contractions\n    if (this.state === 'contracted') {\n      // Particle is contracted, try to expand to adjacent node\n      const adjacentNodes = this.getAdjacentNodes();\n      for (const node of adjacentNodes) {\n        if (!node.occupied) {\n          this.expandTo(node);\n          node.occupied = true;\n          return;\n        }\n      }\n    } else if (this.state === 'expanded') {\n      // Particle is expanded, try to contract to one of its nodes\n      if (!this.tail.occupied) {\n        this.contractTo(this.tail);\n        this.head.occupied = false;\n      }\n    }\n  }\n\n  getAdjacentNodes() {\n    // Get adjacent nodes on the triangular grid\n    // Implement your own logic for identifying adjacent nodes based on the triangular grid structure\n    // For simplicity, this implementation assumes a flat grid with triangular cells\n    // and calculates adjacent nodes based on their positions\n    // You may need to adjust this logic based on your specific grid structure\n    const adjacentNodes = [];\n    // Implement logic to identify adjacent nodes based on current position\n    // For example, you could use geometric calculations or pre-defined mappings\n    return adjacentNodes;\n  }\n}\n\nclass Node {\n  constructor(x, y) {\n    this.x = x; // X-coordinate of the node\n    this.y = y; // Y-coordinate of the node\n    this.occupied = false; // Flag to indicate if the node is occupied by a particle\n  }\n}\n\n\n"
      },
      "date": 1713959793801
    },
    {
      "id": "4ab6f565e0f2c1fd",
      "type": "add",
      "item": {
        "type": "code",
        "id": "4ab6f565e0f2c1fd",
        "text": "// Create triangular grid of nodes\nconst nodes = [];\nconst numRows = 10; // Number of rows in the grid\nconst numCols = 10; // Number of columns in the grid\nfor (let i = 0; i < numRows; i++) {\n  for (let j = 0; j < numCols; j++) {\n    // Calculate position of node based on row and column\n    const x = j * 2; // Adjust based on the triangular grid layout\n    const y = i * 2; // Adjust based on the triangular grid layout\n    const node = new Node(x, y);\n    nodes.push(node);\n  }\n}"
      },
      "after": "1f6cc8169aab1083",
      "attribution": {
        "page": "scratch"
      },
      "date": 1713959801412
    },
    {
      "type": "edit",
      "id": "1f6cc8169aab1083",
      "item": {
        "type": "code",
        "id": "1f6cc8169aab1083",
        "text": "class Particle {\n  constructor(id, position, state) {\n    this.id = id; // Unique identifier for the particle\n    this.position = position; // Current position on the grid\n    this.state = state; // 'contracted' or 'expanded'\n    this.head = null; // Node the particle last expanded into\n    this.tail = null; // Other occupied node\n  }\n\n  expandTo(node) {\n    this.state = 'expanded';\n    this.head = node;\n  }\n\n  contractTo(node) {\n    this.state = 'contracted';\n    this.tail = node;\n  }\n\n  move() {\n    // Simulate particle movement based on expansions and contractions\n    if (this.state === 'contracted') {\n      // Particle is contracted, try to expand to adjacent node\n      const adjacentNodes = this.getAdjacentNodes();\n      for (const node of adjacentNodes) {\n        if (!node.occupied) {\n          this.expandTo(node);\n          node.occupied = true;\n          return;\n        }\n      }\n    } else if (this.state === 'expanded') {\n      // Particle is expanded, try to contract to one of its nodes\n      if (!this.tail.occupied) {\n        this.contractTo(this.tail);\n        this.head.occupied = false;\n      }\n    }\n  }\n\n  getAdjacentNodes() {\n    // Get adjacent nodes on the triangular grid\n    // Implement your own logic for identifying adjacent nodes based on the triangular grid structure\n    // For simplicity, this implementation assumes a flat grid with triangular cells\n    // and calculates adjacent nodes based on their positions\n    // You may need to adjust this logic based on your specific grid structure\n    const adjacentNodes = [];\n    // Implement logic to identify adjacent nodes based on current position\n    // For example, you could use geometric calculations or pre-defined mappings\n    return adjacentNodes;\n  }\n}\n"
      },
      "date": 1713959822780
    },
    {
      "id": "0994c784a5768b17",
      "type": "add",
      "item": {
        "type": "code",
        "id": "0994c784a5768b17",
        "text": "class Node {\n  constructor(x, y) {\n    this.x = x; // X-coordinate of the node\n    this.y = y; // Y-coordinate of the node\n    this.occupied = false; // Flag to indicate if the node is occupied by a particle\n  }\n}"
      },
      "after": "1f6cc8169aab1083",
      "attribution": {
        "page": "scratch"
      },
      "date": 1713959843454
    },
    {
      "type": "edit",
      "id": "b7662a6430a365c8",
      "item": {
        "type": "paragraph",
        "id": "b7662a6430a365c8",
        "text": "⇐ [[avoid]] conflicts between the [[Simulation]] and your test cases"
      },
      "date": 1713959959185
    },
    {
      "type": "edit",
      "id": "7fde1762cf0b434f",
      "item": {
        "type": "markdown",
        "id": "7fde1762cf0b434f",
        "text": "Particle movement (within the [[Geometric Amoebot Model]])\n* should move contracted particle to adjacent unoccupied node when moving\n* should contract expanded particle to one of its nodes when moving"
      },
      "date": 1713960001106
    },
    {
      "type": "edit",
      "id": "b7662a6430a365c8",
      "item": {
        "type": "paragraph",
        "id": "b7662a6430a365c8",
        "text": "⇐ [[avoid]] conflicts between the [[Simulation]] and our test cases"
      },
      "date": 1713963373566
    },
    {
      "type": "edit",
      "id": "521e794ecc08cff8",
      "item": {
        "type": "paragraph",
        "id": "521e794ecc08cff8",
        "text": "⇐ [[create]] a new instance of a [[Class]] Particle"
      },
      "date": 1713963402212
    },
    {
      "id": "208f2d46f9449604",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "208f2d46f9449604",
        "text": "⇒ class [[Node]]"
      },
      "after": "1f6cc8169aab1083",
      "attribution": {
        "page": "scratch"
      },
      "date": 1713963675906
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1713967965293
    },
    {
      "id": "521e794ecc08cff8",
      "type": "move",
      "order": [
        "7fde1762cf0b434f",
        "bab9e6f9d5e0732a",
        "b7662a6430a365c8",
        "521e794ecc08cff8",
        "1f6cc8169aab1083",
        "208f2d46f9449604",
        "0994c784a5768b17",
        "4ab6f565e0f2c1fd",
        "649a0443210b2171",
        "311ededb48277072"
      ],
      "date": 1713975317634
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1713975347588
    },
    {
      "type": "fork",
      "date": 1713975354128
    },
    {
      "type": "remove",
      "id": "0994c784a5768b17",
      "date": 1713975728124
    },
    {
      "type": "remove",
      "id": "4ab6f565e0f2c1fd",
      "date": 1713975730384
    },
    {
      "type": "remove",
      "id": "311ededb48277072",
      "date": 1713975733724
    },
    {
      "type": "edit",
      "id": "7fde1762cf0b434f",
      "item": {
        "type": "markdown",
        "id": "7fde1762cf0b434f",
        "text": "Particle [[Movement]] (within the [[Geometric Amoebot Model]])\n* should move contracted particle to adjacent unoccupied node when moving\n* should contract expanded particle to one of its nodes when moving"
      },
      "date": 1713975997770
    },
    {
      "type": "edit",
      "id": "b7662a6430a365c8",
      "item": {
        "type": "paragraph",
        "id": "b7662a6430a365c8",
        "text": "⇐ [[avoid]] conflicts between the [[Simulation]] and our test cases. Factor out the "
      },
      "date": 1713976272050
    },
    {
      "type": "edit",
      "id": "b7662a6430a365c8",
      "item": {
        "type": "paragraph",
        "id": "b7662a6430a365c8",
        "text": "⇐ [[avoid]] conflicts between the [[Simulation]] and our test cases. Factor out the simulation of particle movement from the Node class (node.js)."
      },
      "date": 1713976311076
    },
    {
      "type": "edit",
      "id": "b7662a6430a365c8",
      "item": {
        "type": "paragraph",
        "id": "b7662a6430a365c8",
        "text": "⇐ [[avoid]] conflicts between the [[Simulation]] and our test cases. Exclude the simulation of particle movement from the Node class (node.js)."
      },
      "date": 1713976400093
    },
    {
      "id": "4a8dfcc259c867f7",
      "type": "add",
      "item": {
        "type": "code",
        "id": "4a8dfcc259c867f7",
        "text": "// Simulate particle movement\nsetInterval(() => {\n  particles.forEach((particle) => {\n    particle.move();\n    console.log(`Particle ${particle.id} moved to position (${particle.position.x}, ${particle.position.y})`);\n  });\n}, 1000); // Adjust simulation speed as needed"
      },
      "after": "b7662a6430a365c8",
      "attribution": {
        "page": "scratch"
      },
      "date": 1713976542237
    },
    {
      "type": "edit",
      "id": "b7662a6430a365c8",
      "item": {
        "type": "paragraph",
        "id": "b7662a6430a365c8",
        "text": "⇐ [[avoid]] conflicts between the [[Simulation]] and our test cases. Exclude the simulation of particle movement from the [[Node]] class (node.js)."
      },
      "date": 1713976553762
    },
    {
      "type": "edit",
      "id": "b7662a6430a365c8",
      "item": {
        "type": "paragraph",
        "id": "b7662a6430a365c8",
        "text": "⇐ [[avoid]] conflicts between the [[Simulation]] and our test cases. Exclude the simulation of particle movement from the [[Node]] class (see the node.js file)."
      },
      "date": 1713976624065
    },
    {
      "type": "edit",
      "id": "b7662a6430a365c8",
      "item": {
        "type": "paragraph",
        "id": "b7662a6430a365c8",
        "text": "⇐ [[avoid]] conflicts between the [[Simulation]] and our test cases. Exclude the simulation of particle motion from the [[Node]] class (see the node.js file)."
      },
      "date": 1713976688086
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1713976742883
    },
    {
      "type": "edit",
      "id": "b7662a6430a365c8",
      "item": {
        "type": "paragraph",
        "id": "b7662a6430a365c8",
        "text": "⇐ [[avoid]] conflicts between the [[Simulation]] and our test cases. Exclude the simulation of particle motion from the [[Node]] class (see the node.js file). [⇒ [[[First Animated Program]]]"
      },
      "date": 1713977000168
    },
    {
      "type": "edit",
      "id": "b7662a6430a365c8",
      "item": {
        "type": "paragraph",
        "id": "b7662a6430a365c8",
        "text": "⇐ [[avoid]] conflicts between the [[Simulation]] and our test cases. Exclude the simulation of particle motion from the [[Node]] class (see the node.js file). [⇒ [[First Animated Program]]"
      },
      "date": 1713977013630
    },
    {
      "type": "edit",
      "id": "b7662a6430a365c8",
      "item": {
        "type": "paragraph",
        "id": "b7662a6430a365c8",
        "text": "⇐ [[avoid]] conflicts between the [[Simulation]] and our test cases. Exclude the simulation of particle motion from the [[Node]] class (see the node.js file). [⇒ [[First Animated Program]]]"
      },
      "date": 1713977019816
    },
    {
      "type": "remove",
      "id": "649a0443210b2171",
      "date": 1713977232975
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1713977284511
    },
    {
      "item": {
        "type": "factory",
        "id": "a1bb663823fdd019"
      },
      "id": "a1bb663823fdd019",
      "type": "add",
      "after": "208f2d46f9449604",
      "date": 1713977429954
    },
    {
      "type": "edit",
      "id": "a1bb663823fdd019",
      "item": {
        "type": "paragraph",
        "id": "a1bb663823fdd019",
        "text": "[[Playground: Particle]]"
      },
      "date": 1713977442769
    },
    {
      "type": "edit",
      "id": "a1bb663823fdd019",
      "item": {
        "type": "paragraph",
        "id": "a1bb663823fdd019",
        "text": "⇒ [[Playground: Particle]]"
      },
      "date": 1713977455510
    },
    {
      "id": "a1bb663823fdd019",
      "type": "move",
      "order": [
        "7fde1762cf0b434f",
        "bab9e6f9d5e0732a",
        "b7662a6430a365c8",
        "4a8dfcc259c867f7",
        "a1bb663823fdd019",
        "521e794ecc08cff8",
        "1f6cc8169aab1083",
        "208f2d46f9449604"
      ],
      "date": 1713977771845
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1713977809780
    }
  ]
}