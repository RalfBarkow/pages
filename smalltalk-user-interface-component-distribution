{
  "title": "Smalltalk User Interface Component Distribution",
  "story": [
    {
      "type": "markdown",
      "id": "60b76e4f983bcd38",
      "text": "Everything in Smalltalk happens by objects sending messages to each other. With a remote messaging framework like [[Tether]], we can put some of the objects in a user interface on a remote machine. [[Snowglobe]] is an adaptation of [[Squeak]]‘s [[Morphic]] user interface framework which runs Squeak on a server, but uses SqueakJS in a client web browser as the display. This is an easy way to recast a Smalltalk application as a web app, while retaining the processing speed and host platform access of the original.\n"
    },
    {
      "type": "markdown",
      "id": "98fa233aaec9ffb0",
      "text": "Morphic is built around a display loop, where drawable components (morphs) are “stepped” at some frequency, like a flipbook animation. Normally, drawing is done on a single morph that corresponds to the display of the machine where Squeak is running. Snowglobe adds a second display morph which is Tether-aware. When drawing to this tethered display morph, the app server translates every display operation into a compact remote message.\n"
    },
    {
      "type": "markdown",
      "id": "d6199734b8546b55",
      "text": "To maximize speed, Morphic already tries to do its drawing with as few operations as possible (e.g., avoiding unnecessary redrawing). This is especially important when display operations become remote, since network transmission is orders of magnitude slower than local drawing. Since the tethered display morph also lives in a Smalltalk object memory, we can optimize drawing operations involving graphics that are known to both sides of the connection. For example, when changing the mouse cursor to a resize icon when hovering over the corner of a window, there’s no need to send the icon over the wire, since the displaying system already has it. Instead, we can send a much smaller message requesting that the icon be shown.\n"
    },
    {
      "type": "markdown",
      "id": "6d77dd3b61f095f8",
      "text": "For full interaction, we also need to handle user input events going back the other way. Snowglobe co-opts Morphic’s user input handling as well. With user input and display forwarded appropriately together, we achieve the seamless illusion that our app is running locally, either as a single morph amongst other local morphs, or using the entire screen.\n"
    },
    {
      "type": "markdown",
      "id": "ee1eff31a47264d1",
      "text": "Next: [[Going beyond Screen-sharing]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Smalltalk User Interface Component Distribution",
        "story": []
      },
      "date": 1628934106417
    },
    {
      "item": {
        "type": "factory",
        "id": "60b76e4f983bcd38"
      },
      "id": "60b76e4f983bcd38",
      "type": "add",
      "date": 1628934122786
    },
    {
      "type": "edit",
      "id": "60b76e4f983bcd38",
      "item": {
        "type": "markdown",
        "id": "60b76e4f983bcd38",
        "text": "Everything in Smalltalk happens by objects sending messages to each other. With a remote messaging framework like Tether, we can put some of the objects in a user interface on a remote machine. Snowglobe is an adaptation of Squeak‘s Morphic user interface framework which runs Squeak on a server, but uses SqueakJS in a client web browser as the display. This is an easy way to recast a Smalltalk application as a web app, while retaining the processing speed and host platform access of the original."
      },
      "date": 1628934125700
    },
    {
      "type": "edit",
      "id": "60b76e4f983bcd38",
      "item": {
        "type": "markdown",
        "id": "60b76e4f983bcd38",
        "text": "Everything in Smalltalk happens by objects sending messages to each other. With a remote messaging framework like [[Tether]], we can put some of the objects in a user interface on a remote machine. Snowglobe is an adaptation of Squeak‘s Morphic user interface framework which runs Squeak on a server, but uses SqueakJS in a client web browser as the display. This is an easy way to recast a Smalltalk application as a web app, while retaining the processing speed and host platform access of the original."
      },
      "date": 1628934142122
    },
    {
      "type": "edit",
      "id": "60b76e4f983bcd38",
      "item": {
        "type": "markdown",
        "id": "60b76e4f983bcd38",
        "text": "Everything in Smalltalk happens by objects sending messages to each other. With a remote messaging framework like [[Tether]], we can put some of the objects in a user interface on a remote machine. [[Snowglobe]] is an adaptation of [[Squeak]]‘s [[Morphic]] user interface framework which runs Squeak on a server, but uses SqueakJS in a client web browser as the display. This is an easy way to recast a Smalltalk application as a web app, while retaining the processing speed and host platform access of the original."
      },
      "date": 1628934173103
    },
    {
      "type": "edit",
      "id": "60b76e4f983bcd38",
      "item": {
        "type": "markdown",
        "id": "60b76e4f983bcd38",
        "text": "Everything in Smalltalk happens by objects sending messages to each other. With a remote messaging framework like [[Tether]], we can put some of the objects in a user interface on a remote machine. [[Snowglobe]] is an adaptation of [[Squeak]]‘s [[Morphic]] user interface framework which runs Squeak on a server, but uses SqueakJS in a client web browser as the display. This is an easy way to recast a Smalltalk application as a web app, while retaining the processing speed and host platform access of the original.\n"
      },
      "date": 1628934193320
    },
    {
      "type": "add",
      "id": "98fa233aaec9ffb0",
      "item": {
        "type": "markdown",
        "id": "98fa233aaec9ffb0",
        "text": "Morphic is built around a display loop, where drawable components (morphs) are “stepped” at some frequency, like a flipbook animation. Normally, drawing is done on a single morph that corresponds to the display of the machine where Squeak is running. Snowglobe adds a second display morph which is Tether-aware. When drawing to this tethered display morph, the app server translates every display operation into a compact remote message."
      },
      "after": "60b76e4f983bcd38",
      "date": 1628934195334
    },
    {
      "type": "edit",
      "id": "98fa233aaec9ffb0",
      "item": {
        "type": "markdown",
        "id": "98fa233aaec9ffb0",
        "text": "Morphic is built around a display loop, where drawable components (morphs) are “stepped” at some frequency, like a flipbook animation. Normally, drawing is done on a single morph that corresponds to the display of the machine where Squeak is running. Snowglobe adds a second display morph which is Tether-aware. When drawing to this tethered display morph, the app server translates every display operation into a compact remote message.\n"
      },
      "date": 1628934235476
    },
    {
      "type": "add",
      "id": "d6199734b8546b55",
      "item": {
        "type": "markdown",
        "id": "d6199734b8546b55",
        "text": "To maximize speed, Morphic already tries to do its drawing with as few operations as possible (e.g., avoiding unnecessary redrawing). This is especially important when display operations become remote, since network transmission is orders of magnitude slower than local drawing. Since the tethered display morph also lives in a Smalltalk object memory, we can optimize drawing operations involving graphics that are known to both sides of the connection. For example, when changing the mouse cursor to a resize icon when hovering over the corner of a window, there’s no need to send the icon over the wire, since the displaying system already has it. Instead, we can send a much smaller message requesting that the icon be shown."
      },
      "after": "98fa233aaec9ffb0",
      "date": 1628934237419
    },
    {
      "type": "edit",
      "id": "d6199734b8546b55",
      "item": {
        "type": "markdown",
        "id": "d6199734b8546b55",
        "text": "To maximize speed, Morphic already tries to do its drawing with as few operations as possible (e.g., avoiding unnecessary redrawing). This is especially important when display operations become remote, since network transmission is orders of magnitude slower than local drawing. Since the tethered display morph also lives in a Smalltalk object memory, we can optimize drawing operations involving graphics that are known to both sides of the connection. For example, when changing the mouse cursor to a resize icon when hovering over the corner of a window, there’s no need to send the icon over the wire, since the displaying system already has it. Instead, we can send a much smaller message requesting that the icon be shown.\n"
      },
      "date": 1628934277633
    },
    {
      "type": "add",
      "id": "6d77dd3b61f095f8",
      "item": {
        "type": "markdown",
        "id": "6d77dd3b61f095f8",
        "text": "For full interaction, we also need to handle user input events going back the other way. Snowglobe co-opts Morphic’s user input handling as well. With user input and display forwarded appropriately together, we achieve the seamless illusion that our app is running locally, either as a single morph amongst other local morphs, or using the entire screen."
      },
      "after": "d6199734b8546b55",
      "date": 1628934279554
    },
    {
      "type": "edit",
      "id": "6d77dd3b61f095f8",
      "item": {
        "type": "markdown",
        "id": "6d77dd3b61f095f8",
        "text": "For full interaction, we also need to handle user input events going back the other way. Snowglobe co-opts Morphic’s user input handling as well. With user input and display forwarded appropriately together, we achieve the seamless illusion that our app is running locally, either as a single morph amongst other local morphs, or using the entire screen.\n"
      },
      "date": 1628934301338
    },
    {
      "type": "add",
      "id": "ee1eff31a47264d1",
      "item": {
        "type": "markdown",
        "id": "ee1eff31a47264d1",
        "text": "Next: [[Going beyond Screen-sharing]]"
      },
      "after": "6d77dd3b61f095f8",
      "date": 1628934319891
    }
  ]
}