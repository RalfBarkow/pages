{
  "title": "Hacking the Same-Origin Policy",
  "story": [
    {
      "type": "paragraph",
      "id": "1efeb19494310f62",
      "text": "[[Vickie Li]], How attackers bypass the fundamental Internet safeguard to read confidential data. [https://medium.com/swlh/hacking-the-same-origin-policy-f9f49ad592fc medium]"
    },
    {
      "type": "paragraph",
      "id": "d2ed62d8dcf7788b",
      "text": "Amyrahm, Exploiting CORS. [https://medium.com/@amyrahm786/exploiting-cors-f6925d215be9 medium]"
    },
    {
      "type": "paragraph",
      "id": "4997abaf4cfe13bc",
      "text": "Same-Origin Policy And Cross-Origin Resource Sharing (CORS). [https://www.hackedu.com/blog/same-origin-policy-and-cross-origin-resource-sharing-cors hackedu]"
    },
    {
      "type": "paragraph",
      "id": "13b0d3569b39bc6e",
      "text": "Same Origin Method Execution (SOME)\nExploiting A Callback for Same Origin Policy Bypass\nby [[Ben Hayak]] (Twitter: @BenHayak)\nInitial submission date (Nov 5, 2014) [https://www.blackhat.com/docs/eu-14/materials/eu-14-Hayak-Same-Origin-Method-Execution-Exploiting-A-Callback-For-Same-Origin-Policy-Bypass-wp.pdf pdf]"
    },
    {
      "type": "markdown",
      "id": "4b8ace1cfd2d828c",
      "text": "> One of those wrong implementation resulted in a discovery of a new web application attack called \"Same Origin Method Execution\" (SOME). Importantly, the implications of the attack envelop a risk level close to one of the most dangerous client-side web application attacks ever to be documented, namely Cross Site Scripting. The client-side web application attacks often aim to abuse a user session on a vulnerable trusted website by forging an arbitrary link or a web page. This is done in the goal of forcing the user's browser to execute malicious actions of the vulnerable trusted website. Until the present day, we have witnessed a range of client-side web application attacks, such as XSS, CSRF, an so on, which exposed users to threats in web applications varying in impact. With the flexibility of SOME, a successful exploitation can substantially elevate the level of providing an extremely critical control over a user's session and, in some cases, it may even compromise the vulnerable site."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Hacking the Same-Origin Policy",
        "story": []
      },
      "date": 1654173058882
    },
    {
      "item": {
        "type": "factory",
        "id": "1efeb19494310f62"
      },
      "id": "1efeb19494310f62",
      "type": "add",
      "date": 1654173068516
    },
    {
      "type": "edit",
      "id": "1efeb19494310f62",
      "item": {
        "type": "paragraph",
        "id": "1efeb19494310f62",
        "text": "– [https://medium.com/swlh/hacking-the-same-origin-policy-f9f49ad592fc]"
      },
      "date": 1654173074050
    },
    {
      "type": "edit",
      "id": "1efeb19494310f62",
      "item": {
        "type": "paragraph",
        "id": "1efeb19494310f62",
        "text": "– [https://medium.com/swlh/hacking-the-same-origin-policy-f9f49ad592fc medium]"
      },
      "date": 1654173082790
    },
    {
      "type": "edit",
      "id": "1efeb19494310f62",
      "item": {
        "type": "paragraph",
        "id": "1efeb19494310f62",
        "text": "[[Vickie Li]] – [https://medium.com/swlh/hacking-the-same-origin-policy-f9f49ad592fc medium]"
      },
      "date": 1654173118003
    },
    {
      "type": "edit",
      "id": "1efeb19494310f62",
      "item": {
        "type": "paragraph",
        "id": "1efeb19494310f62",
        "text": "[[Vickie Li]], How attackers bypass the fundamental Internet safeguard to read confidential data. [https://medium.com/swlh/hacking-the-same-origin-policy-f9f49ad592fc medium]"
      },
      "date": 1654173135913
    },
    {
      "item": {
        "type": "factory",
        "id": "d2ed62d8dcf7788b"
      },
      "id": "d2ed62d8dcf7788b",
      "type": "add",
      "after": "1efeb19494310f62",
      "date": 1654173204188
    },
    {
      "type": "edit",
      "id": "d2ed62d8dcf7788b",
      "item": {
        "type": "paragraph",
        "id": "d2ed62d8dcf7788b",
        "text": "Exploiting CORS"
      },
      "date": 1654173206328
    },
    {
      "type": "edit",
      "id": "d2ed62d8dcf7788b",
      "item": {
        "type": "paragraph",
        "id": "d2ed62d8dcf7788b",
        "text": "Amyrahm, Exploiting CORS"
      },
      "date": 1654173214367
    },
    {
      "type": "edit",
      "id": "d2ed62d8dcf7788b",
      "item": {
        "type": "paragraph",
        "id": "d2ed62d8dcf7788b",
        "text": "Amyrahm, Exploiting CORS. [https://medium.com/@amyrahm786/exploiting-cors-f6925d215be9 medium]"
      },
      "date": 1654173230001
    },
    {
      "item": {
        "type": "factory",
        "id": "4997abaf4cfe13bc"
      },
      "id": "4997abaf4cfe13bc",
      "type": "add",
      "after": "d2ed62d8dcf7788b",
      "date": 1654173268777
    },
    {
      "type": "edit",
      "id": "4997abaf4cfe13bc",
      "item": {
        "type": "paragraph",
        "id": "4997abaf4cfe13bc",
        "text": "Same-Origin Policy And Cross-Origin Resource Sharing (CORS)"
      },
      "date": 1654173272282
    },
    {
      "type": "edit",
      "id": "4997abaf4cfe13bc",
      "item": {
        "type": "paragraph",
        "id": "4997abaf4cfe13bc",
        "text": "Same-Origin Policy And Cross-Origin Resource Sharing (CORS). [https://www.hackedu.com/blog/same-origin-policy-and-cross-origin-resource-sharing-cors hackedu]"
      },
      "date": 1654173284203
    },
    {
      "item": {
        "type": "factory",
        "id": "13b0d3569b39bc6e"
      },
      "id": "13b0d3569b39bc6e",
      "type": "add",
      "after": "4997abaf4cfe13bc",
      "date": 1654173342750
    },
    {
      "type": "edit",
      "id": "13b0d3569b39bc6e",
      "item": {
        "type": "paragraph",
        "id": "13b0d3569b39bc6e",
        "text": "Same Origin Method Execution (SOME)\nExploiting A Callback for Same Origin Policy Bypass\nBen Hayak\nTwitter: @BenHayak\nInitial submission date (Nov 5, 2014)"
      },
      "date": 1654173345389
    },
    {
      "type": "edit",
      "id": "13b0d3569b39bc6e",
      "item": {
        "type": "paragraph",
        "id": "13b0d3569b39bc6e",
        "text": "Same Origin Method Execution (SOME)\nExploiting A Callback for Same Origin Policy Bypass\nBen Hayak\nTwitter: @BenHayak\nInitial submission date (Nov 5, 2014) [https://www.blackhat.com/docs/eu-14/materials/eu-14-Hayak-Same-Origin-Method-Execution-Exploiting-A-Callback-For-Same-Origin-Policy-Bypass-wp.pdf pdf]"
      },
      "date": 1654173354942
    },
    {
      "item": {
        "type": "factory",
        "id": "4b8ace1cfd2d828c"
      },
      "id": "4b8ace1cfd2d828c",
      "type": "add",
      "after": "13b0d3569b39bc6e",
      "date": 1654173462887
    },
    {
      "type": "edit",
      "id": "4b8ace1cfd2d828c",
      "item": {
        "type": "markdown",
        "id": "4b8ace1cfd2d828c",
        "text": "> One of those wrong implementation resulted in a discovery of a new web application\nattack called \"Same Origin Method Execution\" (SOME). Importantly, the implications\nof the attack envelop a risk level close to one of the most dangerous client-side web ap-\nplication attacks ever to be documented, namely Cross Site Scripting. The client-side\nweb application attacks often aim to abuse a user session on a vulnerable trusted website\nby forging an arbitrary link or a web page. This is done in the goal of forcing the user's\nbrowser to execute malicious actions of the vulnerable trusted website. Until the present\nday, we have witnessed a range of client-side web application attacks, such as XSS, CSRF,\nan so on, which exposed users to threats in web applications varying in impact. With\nthe \u001dexibility of SOME, a successful exploitation can substantially elevate the level of\nproviding an extremely critical control over a user's session and, in some cases, it may\neven compromise the vulnerable site."
      },
      "date": 1654173466214
    },
    {
      "type": "edit",
      "id": "4b8ace1cfd2d828c",
      "item": {
        "type": "markdown",
        "id": "4b8ace1cfd2d828c",
        "text": "> One of those wrong implementation resulted in a discovery of a new web application attack called \"Same Origin Method Execution\" (SOME). Importantly, the implications of the attack envelop a risk level close to one of the most dangerous client-side web application attacks ever to be documented, namely Cross Site Scripting. The client-side web application attacks often aim to abuse a user session on a vulnerable trusted website by forging an arbitrary link or a web page. This is done in the goal of forcing the user's browser to execute malicious actions of the vulnerable trusted website. Until the present day, we have witnessed a range of client-side web application attacks, such as XSS, CSRF, an so on, which exposed users to threats in web applications varying in impact. With the exibility of SOME, a successful exploitation can substantially elevate the level of providing an extremely critical control over a user's session and, in some cases, it may even compromise the vulnerable site."
      },
      "date": 1654173530297
    },
    {
      "type": "edit",
      "id": "4b8ace1cfd2d828c",
      "item": {
        "type": "markdown",
        "id": "4b8ace1cfd2d828c",
        "text": "> One of those wrong implementation resulted in a discovery of a new web application attack called \"Same Origin Method Execution\" (SOME). Importantly, the implications of the attack envelop a risk level close to one of the most dangerous client-side web application attacks ever to be documented, namely Cross Site Scripting. The client-side web application attacks often aim to abuse a user session on a vulnerable trusted website by forging an arbitrary link or a web page. This is done in the goal of forcing the user's browser to execute malicious actions of the vulnerable trusted website. Until the present day, we have witnessed a range of client-side web application attacks, such as XSS, CSRF, an so on, which exposed users to threats in web applications varying in impact. With the flexibility of SOME, a successful exploitation can substantially elevate the level of providing an extremely critical control over a user's session and, in some cases, it may even compromise the vulnerable site."
      },
      "date": 1654173608984
    },
    {
      "type": "edit",
      "id": "13b0d3569b39bc6e",
      "item": {
        "type": "paragraph",
        "id": "13b0d3569b39bc6e",
        "text": "Same Origin Method Execution (SOME)\nExploiting A Callback for Same Origin Policy Bypass\nby [[Ben Hayak]] (Twitter: @BenHayak)\nInitial submission date (Nov 5, 2014) [https://www.blackhat.com/docs/eu-14/materials/eu-14-Hayak-Same-Origin-Method-Execution-Exploiting-A-Callback-For-Same-Origin-Policy-Bypass-wp.pdf pdf]"
      },
      "date": 1654173770259
    }
  ]
}