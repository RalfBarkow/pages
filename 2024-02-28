{
  "title": "2024-02-28",
  "story": [
    {
      "type": "paragraph",
      "id": "8d14a08da81e3077",
      "text": "⇒ [[Linear Shuffle]] ⇒ [[shuffle]] ⇒ [[Shuffled Cards]]"
    },
    {
      "type": "paragraph",
      "id": "22c24014f8940ae7",
      "text": "Retrieve the Nodes From the Graph"
    },
    {
      "type": "reference",
      "id": "e104eb9de7a2216f",
      "site": "ward.dojo.fed.wiki",
      "slug": "spaces-bug",
      "title": "Spaces Bug",
      "text": "Paul has considered how we might make it harder to create pages with spaces at either end of a title. One constraint is that we don't want to make such existing pages inaccessible. [https://github.com/fedwiki/wiki-client/pull/314 github]"
    },
    {
      "type": "paragraph",
      "id": "d361c3c891428f50",
      "text": "[[CLIM]] (Common Lisp Interface Manager) panes record the series of operations that generates an output. [https://mcclim.common-lisp.dev/static/manual/mcclim.html#How-CLIM-applications-produce-output page] These panes resemble our [[Journal]], right?"
    },
    {
      "type": "paragraph",
      "id": "a1a530fe0e53271e",
      "text": "Defining Application Frames [https://mcclim.common-lisp.dev/static/manual/mcclim.html#Defining-Application-Frames page]"
    },
    {
      "type": "paragraph",
      "id": "4c886b2101ca72f3",
      "text": "⇐ [[Parse Page Paragraphs]]"
    },
    {
      "type": "paragraph",
      "id": "bb5852b435ee966c",
      "text": "See feat(speed-bot): Convert application to SpeedBotApp module, refactor code to fix undefined function errors, and add missing function definitions [https://github.com/RalfBarkow/assets/commit/86850bc7cf78ca213f31f3b473b8aa5e538bc986 commit]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2024-02-28",
        "story": []
      },
      "date": 1709088655723
    },
    {
      "item": {
        "type": "factory",
        "id": "50f8fa1d3002c8d3"
      },
      "id": "50f8fa1d3002c8d3",
      "type": "add",
      "date": 1709088657762
    },
    {
      "type": "edit",
      "id": "50f8fa1d3002c8d3",
      "item": {
        "type": "paragraph",
        "id": "50f8fa1d3002c8d3",
        "text": "[[shuffle]"
      },
      "date": 1709088668744
    },
    {
      "type": "edit",
      "id": "50f8fa1d3002c8d3",
      "item": {
        "type": "paragraph",
        "id": "50f8fa1d3002c8d3",
        "text": "[[shuffle]]"
      },
      "date": 1709088674344
    },
    {
      "id": "8d14a08da81e3077",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "8d14a08da81e3077",
        "text": "⇒ [[Linear Shuffle]]"
      },
      "attribution": {
        "page": "2024-02-27"
      },
      "date": 1709088740567
    },
    {
      "type": "remove",
      "id": "50f8fa1d3002c8d3",
      "date": 1709088753232
    },
    {
      "type": "edit",
      "id": "8d14a08da81e3077",
      "item": {
        "type": "paragraph",
        "id": "8d14a08da81e3077",
        "text": "⇒ [[Linear Shuffle]] ⇒ [[shuffle]]"
      },
      "date": 1709088757821
    },
    {
      "item": {
        "type": "factory",
        "id": "86d30b39cb4618af"
      },
      "id": "86d30b39cb4618af",
      "type": "add",
      "after": "8d14a08da81e3077",
      "date": 1709088762955
    },
    {
      "type": "edit",
      "id": "86d30b39cb4618af",
      "item": {
        "type": "code",
        "id": "86d30b39cb4618af",
        "text": "function linearShuffle(deck) {\n    for (let i = deck.length - 1; i > 0; i--) {\n        // Generate a random index between 0 and i (inclusive)\n        const j = Math.floor(Math.random() * (i + 1));\n\n        // Swap deck[i] with deck[j]\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n    return deck;\n}\n\n// Example usage:\nconst deck = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\nconsole.log(\"Original deck:\", deck);\nconsole.log(\"Shuffled deck:\", linearShuffle(deck.slice())); // Pass a copy of the deck to avoid modifying the original array\n"
      },
      "date": 1709088765333
    },
    {
      "item": {
        "type": "factory",
        "id": "b74b8c12bda0a777"
      },
      "id": "b74b8c12bda0a777",
      "type": "add",
      "after": "86d30b39cb4618af",
      "date": 1709088839815
    },
    {
      "type": "edit",
      "id": "b74b8c12bda0a777",
      "item": {
        "type": "frame",
        "id": "b74b8c12bda0a777",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nHEIGHT 75\nLINEUP graph"
      },
      "date": 1709088849555
    },
    {
      "item": {
        "type": "factory",
        "id": "dd48e5eaeae7f3be"
      },
      "id": "dd48e5eaeae7f3be",
      "type": "add",
      "after": "b74b8c12bda0a777",
      "date": 1709088908565
    },
    {
      "type": "edit",
      "id": "86d30b39cb4618af",
      "item": {
        "type": "code",
        "id": "86d30b39cb4618af",
        "text": "function linearShuffle(deck) {\n    for (let i = deck.length - 1; i > 0; i--) {\n        // Generate a random index between 0 and i (inclusive)\n        const j = Math.floor(Math.random() * (i + 1));\n\n        // Swap deck[i] with deck[j]\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n    return deck;\n}"
      },
      "date": 1709088920573
    },
    {
      "type": "edit",
      "id": "dd48e5eaeae7f3be",
      "item": {
        "type": "code",
        "id": "dd48e5eaeae7f3be",
        "text": "// Example usage:\nconst deck = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\nconsole.log(\"Original deck:\", deck);\nconsole.log(\"Shuffled deck:\", linearShuffle(deck.slice())); // Pass a copy of the deck to avoid modifying the original array\n"
      },
      "date": 1709088923732
    },
    {
      "id": "2b83956535395893",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need a function that displays the graph."
      },
      "after": "dd48e5eaeae7f3be",
      "attribution": {
        "page": "LINEUP graph",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1709089097965
    },
    {
      "type": "edit",
      "id": "2b83956535395893",
      "item": {
        "type": "paragraph",
        "id": "2b83956535395893",
        "text": "We need a function that displays the deck."
      },
      "date": 1709089106285
    },
    {
      "id": "5eb6b67568179aa3",
      "type": "add",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Function to emit HTML content for the graph container\nexport async function emit(el) {\n    el.innerHTML = `\n    <div id=\"graph-container\"></div>\n    <style>#graph-container {border: 1px solid black;}</style>`;\n}"
      },
      "after": "2b83956535395893",
      "attribution": {
        "page": "LINEUP graph",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1709089132085
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Function to emit HTML content for the graph container\nexport async function emit(el) {\n    el.innerHTML = `\n    <div id=\"deck-container\"></div>\n    <style>#deck-container {border: 1px solid black;}</style>`;\n}"
      },
      "date": 1709089154679
    },
    {
      "type": "remove",
      "id": "dd48e5eaeae7f3be",
      "date": 1709089174812
    },
    {
      "id": "86d30b39cb4618af",
      "type": "move",
      "order": [
        "8d14a08da81e3077",
        "b74b8c12bda0a777",
        "2b83956535395893",
        "5eb6b67568179aa3",
        "86d30b39cb4618af"
      ],
      "date": 1709089182813
    },
    {
      "type": "edit",
      "id": "86d30b39cb4618af",
      "item": {
        "type": "code",
        "id": "86d30b39cb4618af",
        "text": "async function linearShuffle(deck) {\n    for (let i = deck.length - 1; i > 0; i--) {\n        // Generate a random index between 0 and i (inclusive)\n        const j = Math.floor(Math.random() * (i + 1));\n\n        // Swap deck[i] with deck[j]\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n    return deck;\n}"
      },
      "date": 1709089199540
    },
    {
      "type": "add",
      "id": "2a53aeae1e6e865d",
      "item": {
        "type": "paragraph",
        "id": "2a53aeae1e6e865d",
        "text": "linearShuffle"
      },
      "after": "8d14a08da81e3077",
      "date": 1709089233595
    },
    {
      "id": "2a53aeae1e6e865d",
      "type": "move",
      "order": [
        "8d14a08da81e3077",
        "b74b8c12bda0a777",
        "2b83956535395893",
        "5eb6b67568179aa3",
        "2a53aeae1e6e865d",
        "86d30b39cb4618af"
      ],
      "date": 1709089236800
    },
    {
      "id": "f60c71defbe486e0",
      "type": "add",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "// Function to render the graph in the graph container\nasync function renderGraph(graph) {\n\n    // Parse the JSON string into an object\n    const graphObject = JSON.parse(graph);\n\n    // Select the graph container element\n    const graphContainer = document.getElementById('graph-container');\n    \n    // Render the graph in the graph container\n    graphContainer.innerHTML = `<pre>${JSON.stringify(graphObject, null, 2)}</pre>`; // Pretty print the JSON\n}\n"
      },
      "after": "2a53aeae1e6e865d",
      "attribution": {
        "page": "LINEUP graph",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1709089330173
    },
    {
      "id": "86d30b39cb4618af",
      "type": "move",
      "order": [
        "8d14a08da81e3077",
        "b74b8c12bda0a777",
        "2b83956535395893",
        "5eb6b67568179aa3",
        "2a53aeae1e6e865d",
        "86d30b39cb4618af",
        "f60c71defbe486e0"
      ],
      "date": 1709089335301
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "// Function to render the deck in the deck container\nasync function renderDeck(deck) {\n\n    // Parse the JSON string into an object\n    const graphObject = JSON.parse(graph);\n\n    // Select the deck container element\n    const deckContainer = document.getElementById('deck-container');\n    \n    // Render the deck in the deck container\n    deckContainer.innerHTML = `<pre>${JSON.stringify(deckObject, null, 2)}</pre>`; // Pretty print the JSON\n}\n"
      },
      "date": 1709089407755
    },
    {
      "type": "edit",
      "id": "86d30b39cb4618af",
      "item": {
        "type": "code",
        "id": "86d30b39cb4618af",
        "text": "async function linearShuffle(deck) {\nconst deck = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n\n    return deck;\n}"
      },
      "date": 1709089475900
    },
    {
      "type": "edit",
      "id": "86d30b39cb4618af",
      "item": {
        "type": "code",
        "id": "86d30b39cb4618af",
        "text": "async function linearShuffle(deck) {\n  const deck = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n  return deck;\n}"
      },
      "date": 1709089523886
    },
    {
      "type": "edit",
      "id": "b74b8c12bda0a777",
      "item": {
        "type": "frame",
        "id": "b74b8c12bda0a777",
        "text": "//frame.wiki.dbbs.co/assets/pages/snippet-template/esm.html\nHEIGHT 75"
      },
      "date": 1709089560872
    },
    {
      "type": "edit",
      "id": "86d30b39cb4618af",
      "item": {
        "type": "code",
        "id": "86d30b39cb4618af",
        "text": "//"
      },
      "date": 1709089578900
    },
    {
      "type": "edit",
      "id": "86d30b39cb4618af",
      "item": {
        "type": "code",
        "id": "86d30b39cb4618af",
        "text": "const deck = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];"
      },
      "date": 1709089635948
    },
    {
      "item": {
        "type": "factory",
        "id": "17aab5ec6cb79d53"
      },
      "id": "17aab5ec6cb79d53",
      "type": "add",
      "after": "f60c71defbe486e0",
      "date": 1709089669512
    },
    {
      "id": "17aab5ec6cb79d53",
      "type": "move",
      "order": [
        "8d14a08da81e3077",
        "b74b8c12bda0a777",
        "2b83956535395893",
        "5eb6b67568179aa3",
        "2a53aeae1e6e865d",
        "86d30b39cb4618af",
        "17aab5ec6cb79d53",
        "f60c71defbe486e0"
      ],
      "date": 1709089672156
    },
    {
      "type": "edit",
      "id": "17aab5ec6cb79d53",
      "item": {
        "type": "code",
        "id": "17aab5ec6cb79d53",
        "text": "renderDeck(deck)"
      },
      "date": 1709089674940
    },
    {
      "type": "edit",
      "id": "86d30b39cb4618af",
      "item": {
        "type": "code",
        "id": "86d30b39cb4618af",
        "text": "const deck = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\nconsole.log(\"Original deck:\", deck);"
      },
      "date": 1709089752501
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "// Function to render the deck in the deck container\nasync function renderDeck(deck) {\n\n    // Parse the JSON string into an object\n    const deckObject = JSON.parse(deck);\n\n    // Select the deck container element\n    const deckContainer = document.getElementById('deck-container');\n    \n    // Render the deck in the deck container\n    deckContainer.innerHTML = `<pre>${JSON.stringify(deckObject, null, 2)}</pre>`; // Pretty print the JSON\n}\n"
      },
      "date": 1709089885816
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "// Function to render the deck in the deck container\nasync function renderDeck(deck) {\n\n    // Parse the JSON string into an object\n    // const deckObject = JSON.parse(deck);\n\n    // Select the deck container element\n    const deckContainer = document.getElementById('deck-container');\n    \n    // Render the deck in the deck container\n    deckContainer.innerHTML = `<pre>${JSON.stringify(deckObject, null, 2)}</pre>`; // Pretty print the JSON\n}\n"
      },
      "date": 1709090020503
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "// Function to render the deck in the deck container\nasync function renderDeck(deck) {\n\n    // Parse the JSON string into an object\n    // const deckObject = JSON.parse(deck);\n    const deckObject = deck;\n\n    // Select the deck container element\n    const deckContainer = document.getElementById('deck-container');\n    \n    // Render the deck in the deck container\n    deckContainer.innerHTML = `<pre>${JSON.stringify(deckObject, null, 2)}</pre>`; // Pretty print the JSON\n}\n"
      },
      "date": 1709090127943
    },
    {
      "type": "edit",
      "id": "f60c71defbe486e0",
      "item": {
        "type": "code",
        "id": "f60c71defbe486e0",
        "text": "// Function to render the deck in the deck container\nasync function renderDeck(deck) {\n\n    // Parse the JSON string into an object\n    // const deckObject = JSON.parse(deck);\n    const deckObject = deck;\n\n    // Select the deck container element\n    const deckContainer = document.getElementById('deck-container');\n    \n    // Render the deck in the deck container\n    deckContainer.innerHTML = `<pre>${JSON.stringify(deckObject)}</pre>`; // Pretty print the JSON\n}\n"
      },
      "date": 1709090237638
    },
    {
      "id": "6c928a0f5f801149",
      "type": "add",
      "item": {
        "type": "code",
        "id": "6c928a0f5f801149",
        "text": "export async function emit(el) {\n  el.innerHTML = `\n    <canvas width=\"380\" height=\"300\"></canvas>\n    <style>canvas {border: 1px solid black;}</style>`\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n  const canvas = el.querySelector(\"canvas\")\n  const ctx = canvas.getContext(\"2d\")\n  ctx.translate(190, 150)\n  resize()\n  drawLine(ctx, line(), \"purple\")\n}",
        "alias": "5eb6b67568179aa3"
      },
      "after": "5eb6b67568179aa3",
      "attribution": {
        "page": "Scribble",
        "site": "frame.wiki.dbbs.co"
      },
      "date": 1709090405225
    },
    {
      "type": "edit",
      "id": "6c928a0f5f801149",
      "item": {
        "type": "code",
        "id": "6c928a0f5f801149",
        "text": "export async function bind(el) {\n  console.log(el.innerHTML)\n  const canvas = el.querySelector(\"canvas\")\n  const ctx = canvas.getContext(\"2d\")\n  ctx.translate(190, 150)\n  resize()\n  drawLine(ctx, line(), \"purple\")\n}",
        "alias": "5eb6b67568179aa3"
      },
      "date": 1709090438291
    },
    {
      "type": "edit",
      "id": "6c928a0f5f801149",
      "item": {
        "type": "code",
        "id": "6c928a0f5f801149",
        "text": "export async function bind(el) {\n  console.log(el.innerHTML)\n  \n}",
        "alias": "5eb6b67568179aa3"
      },
      "date": 1709090559622
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Function to emit HTML content for the deck container\nexport async function emit(el) {\n    el.innerHTML = `\n    <div id=\"deck-container\"></div>\n    <style>#deck-container {border: 1px solid black;}</style>`;\n}"
      },
      "date": 1709090731734
    },
    {
      "type": "edit",
      "id": "6c928a0f5f801149",
      "item": {
        "type": "code",
        "id": "6c928a0f5f801149",
        "text": "export async function bind(el) {\n  console.log(el.innerHTML)\n  \n",
        "alias": "5eb6b67568179aa3"
      },
      "date": 1709090767671
    },
    {
      "item": {
        "type": "factory",
        "id": "4f09bdab360247d8"
      },
      "id": "4f09bdab360247d8",
      "type": "add",
      "after": "f60c71defbe486e0",
      "date": 1709090780595
    },
    {
      "type": "edit",
      "id": "4f09bdab360247d8",
      "item": {
        "type": "code",
        "id": "4f09bdab360247d8",
        "text": "}"
      },
      "date": 1709090783401
    },
    {
      "id": "4f09bdab360247d8",
      "type": "move",
      "order": [
        "8d14a08da81e3077",
        "b74b8c12bda0a777",
        "2b83956535395893",
        "5eb6b67568179aa3",
        "6c928a0f5f801149",
        "2a53aeae1e6e865d",
        "86d30b39cb4618af",
        "17aab5ec6cb79d53",
        "4f09bdab360247d8",
        "f60c71defbe486e0"
      ],
      "date": 1709090790120
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1709090936415
    },
    {
      "type": "remove",
      "id": "6c928a0f5f801149",
      "date": 1709090976307
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Function to emit HTML content for the deck container\nexport async function emit(el) {\n    el.innerHTML = `\n    <div id=\"deck-container\"></div>\n    <style>#deck-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)\n  \n"
      },
      "date": 1709090979810
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Function to emit HTML content for the deck container\nexport async function emit(el) {\n    el.innerHTML = `\n    <div id=\"deck-container\"></div>\n    <style>#deck-container {border: 1px solid black;}</style>`;\n}\n\nexport async function bind(el) {\n  console.log(el.innerHTML)"
      },
      "date": 1709090990312
    },
    {
      "item": {
        "type": "factory",
        "id": "4f46952fb4a34d06"
      },
      "id": "4f46952fb4a34d06",
      "type": "add",
      "after": "f60c71defbe486e0",
      "date": 1709091036505
    },
    {
      "type": "edit",
      "id": "4f46952fb4a34d06",
      "item": {
        "type": "code",
        "id": "4f46952fb4a34d06",
        "text": "function linearShuffle(deck) {\n    for (let i = deck.length - 1; i > 0; i--) {\n        // Generate a random index between 0 and i (inclusive)\n        const j = Math.floor(Math.random() * (i + 1));\n\n        // Swap deck[i] with deck[j]\n        [deck[i], deck[j]] = [deck[j], deck[i]];\n    }\n    return deck;\n}"
      },
      "date": 1709091039780
    },
    {
      "item": {
        "type": "factory",
        "id": "27e88033d49e7c47"
      },
      "id": "27e88033d49e7c47",
      "type": "add",
      "after": "4f46952fb4a34d06",
      "date": 1709091058964
    },
    {
      "id": "27e88033d49e7c47",
      "type": "move",
      "order": [
        "8d14a08da81e3077",
        "b74b8c12bda0a777",
        "2b83956535395893",
        "5eb6b67568179aa3",
        "2a53aeae1e6e865d",
        "86d30b39cb4618af",
        "27e88033d49e7c47",
        "17aab5ec6cb79d53",
        "4f09bdab360247d8",
        "f60c71defbe486e0",
        "4f46952fb4a34d06"
      ],
      "date": 1709091064985
    },
    {
      "type": "edit",
      "id": "27e88033d49e7c47",
      "item": {
        "type": "code",
        "id": "27e88033d49e7c47",
        "text": "linearShuffle(deck)"
      },
      "date": 1709091070198
    },
    {
      "type": "edit",
      "id": "27e88033d49e7c47",
      "item": {
        "type": "code",
        "id": "27e88033d49e7c47",
        "text": "const shuffle = linearShuffle(deck)"
      },
      "date": 1709091122586
    },
    {
      "type": "edit",
      "id": "17aab5ec6cb79d53",
      "item": {
        "type": "code",
        "id": "17aab5ec6cb79d53",
        "text": "renderDeck(shuffle)"
      },
      "date": 1709091133210
    },
    {
      "type": "edit",
      "id": "86d30b39cb4618af",
      "item": {
        "type": "code",
        "id": "86d30b39cb4618af",
        "text": "  const deck = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];\n  console.log(\"Original deck:\", deck);"
      },
      "date": 1709091217777
    },
    {
      "type": "edit",
      "id": "27e88033d49e7c47",
      "item": {
        "type": "code",
        "id": "27e88033d49e7c47",
        "text": "  const shuffle = linearShuffle(deck)"
      },
      "date": 1709091222523
    },
    {
      "type": "edit",
      "id": "17aab5ec6cb79d53",
      "item": {
        "type": "code",
        "id": "17aab5ec6cb79d53",
        "text": "  renderDeck(shuffle)"
      },
      "date": 1709091227077
    },
    {
      "type": "edit",
      "id": "17aab5ec6cb79d53",
      "item": {
        "type": "code",
        "id": "17aab5ec6cb79d53",
        "text": "  renderDeck(shuffle)\n  console.log(\"Shuffled deck:\", shuffle);"
      },
      "date": 1709091321952
    },
    {
      "type": "edit",
      "id": "8d14a08da81e3077",
      "item": {
        "type": "paragraph",
        "id": "8d14a08da81e3077",
        "text": "⇒ [[Linear Shuffle]] ⇒ [[shuffle]] ⇒ [[Shuffled cards]]"
      },
      "date": 1709091423041
    },
    {
      "type": "edit",
      "id": "8d14a08da81e3077",
      "item": {
        "type": "paragraph",
        "id": "8d14a08da81e3077",
        "text": "⇒ [[Linear Shuffle]] ⇒ [[shuffle]] ⇒ [[Shuffled Cards]]"
      },
      "date": 1709091454884
    },
    {
      "type": "fork",
      "date": 1709091665760
    },
    {
      "type": "fork",
      "date": 1709091688141
    },
    {
      "type": "fork",
      "date": 1709091765309
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1709091807562
    },
    {
      "type": "add",
      "id": "22c24014f8940ae7",
      "item": {
        "type": "paragraph",
        "id": "22c24014f8940ae7",
        "text": "Retrieve the Nodes From the Graph"
      },
      "after": "8d14a08da81e3077",
      "date": 1709094681816
    },
    {
      "type": "remove",
      "id": "b74b8c12bda0a777",
      "date": 1709094684307
    },
    {
      "type": "remove",
      "id": "2b83956535395893",
      "date": 1709094686606
    },
    {
      "type": "remove",
      "id": "5eb6b67568179aa3",
      "date": 1709094688417
    },
    {
      "type": "remove",
      "id": "2a53aeae1e6e865d",
      "date": 1709094690226
    },
    {
      "type": "remove",
      "id": "86d30b39cb4618af",
      "date": 1709094692076
    },
    {
      "type": "remove",
      "id": "27e88033d49e7c47",
      "date": 1709094693661
    },
    {
      "type": "remove",
      "id": "17aab5ec6cb79d53",
      "date": 1709094695127
    },
    {
      "type": "remove",
      "id": "4f09bdab360247d8",
      "date": 1709094696655
    },
    {
      "type": "remove",
      "id": "f60c71defbe486e0",
      "date": 1709094698139
    },
    {
      "type": "remove",
      "id": "4f46952fb4a34d06",
      "date": 1709094699822
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1709094759908
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1709100335172
    },
    {
      "item": {
        "type": "factory",
        "id": "e104eb9de7a2216f"
      },
      "id": "e104eb9de7a2216f",
      "type": "add",
      "after": "22c24014f8940ae7",
      "date": 1709100356560
    },
    {
      "type": "edit",
      "id": "e104eb9de7a2216f",
      "item": {
        "type": "reference",
        "id": "e104eb9de7a2216f",
        "site": "ward.dojo.fed.wiki",
        "slug": "spaces-bug",
        "title": "Spaces Bug",
        "text": "Paul has considered how we might make it harder to create pages with spaces at either end of a title. One constraint is that we don't want to make such existing pages inaccessible. [https://github.com/fedwiki/wiki-client/pull/314 github]"
      },
      "date": 1709100373951
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1709100905853
    },
    {
      "item": {
        "type": "factory",
        "id": "d361c3c891428f50"
      },
      "id": "d361c3c891428f50",
      "type": "add",
      "after": "e104eb9de7a2216f",
      "date": 1709104630123
    },
    {
      "type": "edit",
      "id": "d361c3c891428f50",
      "item": {
        "type": "paragraph",
        "id": "d361c3c891428f50",
        "text": "[[CLIM]] panes record the series of operations that generates an output. "
      },
      "date": 1709104637962
    },
    {
      "type": "edit",
      "id": "d361c3c891428f50",
      "item": {
        "type": "paragraph",
        "id": "d361c3c891428f50",
        "text": "[[CLIM]] panes record the series of operations that generates an output. [https://mcclim.common-lisp.dev/static/manual/mcclim.html#How-CLIM-applications-produce-output page]"
      },
      "date": 1709104677735
    },
    {
      "type": "edit",
      "id": "d361c3c891428f50",
      "item": {
        "type": "paragraph",
        "id": "d361c3c891428f50",
        "text": "[[CLIM]] panes record the series of operations that generates an output. [https://mcclim.common-lisp.dev/static/manual/mcclim.html#How-CLIM-applications-produce-output page] These panes resemble our [[Journal]], right?"
      },
      "date": 1709104727063
    },
    {
      "item": {
        "type": "factory",
        "id": "a1a530fe0e53271e"
      },
      "id": "a1a530fe0e53271e",
      "type": "add",
      "after": "d361c3c891428f50",
      "date": 1709104841152
    },
    {
      "type": "edit",
      "id": "a1a530fe0e53271e",
      "item": {
        "type": "paragraph",
        "id": "a1a530fe0e53271e",
        "text": "Defining Application Frames"
      },
      "date": 1709104844974
    },
    {
      "type": "edit",
      "id": "a1a530fe0e53271e",
      "item": {
        "type": "paragraph",
        "id": "a1a530fe0e53271e",
        "text": "Defining Application Frames [https://mcclim.common-lisp.dev/static/manual/mcclim.html#Defining-Application-Frames page]"
      },
      "date": 1709104855649
    },
    {
      "type": "edit",
      "id": "d361c3c891428f50",
      "item": {
        "type": "paragraph",
        "id": "d361c3c891428f50",
        "text": "[[CLIM]] (Common Lisp Interface Manager) ) panes record the series of operations that generates an output. [https://mcclim.common-lisp.dev/static/manual/mcclim.html#How-CLIM-applications-produce-output page] These panes resemble our [[Journal]], right?"
      },
      "date": 1709104901503
    },
    {
      "type": "edit",
      "id": "d361c3c891428f50",
      "item": {
        "type": "paragraph",
        "id": "d361c3c891428f50",
        "text": "[[CLIM]] (Common Lisp Interface Manager) panes record the series of operations that generates an output. [https://mcclim.common-lisp.dev/static/manual/mcclim.html#How-CLIM-applications-produce-output page] These panes resemble our [[Journal]], right?"
      },
      "date": 1709104909730
    },
    {
      "type": "add",
      "id": "bb5852b435ee966c",
      "item": {
        "type": "paragraph",
        "id": "bb5852b435ee966c",
        "text": "See feat(speed-bot): Convert application to SpeedBotApp module, refactor code to fix undefined function errors, and add missing function definitions commit"
      },
      "after": "a1a530fe0e53271e",
      "date": 1709115818901
    },
    {
      "type": "edit",
      "id": "bb5852b435ee966c",
      "item": {
        "type": "paragraph",
        "id": "bb5852b435ee966c",
        "text": "See feat(speed-bot): Convert application to SpeedBotApp module, refactor code to fix undefined function errors, and add missing function definitions [https://github.com/RalfBarkow/assets/commit/86850bc7cf78ca213f31f3b473b8aa5e538bc986 commit]"
      },
      "date": 1709115834072
    },
    {
      "type": "add",
      "id": "4c886b2101ca72f3",
      "item": {
        "type": "paragraph",
        "id": "4c886b2101ca72f3",
        "text": "⇐ [[Parse Page Paragraphs]]"
      },
      "after": "a1a530fe0e53271e",
      "date": 1709115874285
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1709192154431
    }
  ]
}