{
  "title": "Trait Groups",
  "story": [
    {
      "type": "markdown",
      "id": "90e5d023efd2e154",
      "text": " The fundamental component of the [[Famix]] is a trait group. A trait group always describes a fragment of meta-model and can consist of one, two or more entities and relations between them.\n\nWe can demonstrate it on an example of the *access*. In some meta-model, we have two kinds of entities: local variables and methods. Methods contain a code that reads some local variables or writes data to them. Let's have a program that contains a method named `aMethod` with a local variable named `foo`. It writes data to it and then uses it in a method call. "
    },
    {
      "type": "code",
      "id": "e56e9b2ab7de04ca",
      "text": "    public void aMethod() {\n        int foo = 5;\n        someMethod(foo);\n    }"
    },
    {
      "type": "markdown",
      "id": "9a8150850ef4ae81",
      "text": " Now we will try to model our little program using the meta-model. We will create an object for the method `aMethod`, an object that models the variable `foo` that contains information, wherein the code the instance variable was declared. But one crucial information is missing. We would like where in the code the variable was accessed and what kind of access was that. Was the variable written or read? With such information, we can do a straightforward but useful analysis of the program models and decide, what local variables were not used or just written and never read.\n\nTo model the association between the variable and method, we will introduce a new kind of entity in our metamodel: the access. For every access to a local variable, we will create an object that describes is. It will contain information what the accessed local variable was, what method accessed it, wherein the code this concrete access is placed and what kind of access is it (read or write).\n\nThe Famix provides a meta-model fragment exactly for this use-case. It contains a trait group named Access that describes three entities: access itself (Access), the element that is being accessed (Accessible, in our case, it is the local variable) and an entity that contains accesses (WithAccesses, in case of our meta-model it is the method). "
    },
    {
      "type": "html",
      "id": "aba06e783bb59e47",
      "text": "<center><img width=\"100%\" src=\"https://pavel-krivanek.github.io/famix/Chapters/Introduction/figures/accessGroup.svg\"></center>"
    },
    {
      "type": "paragraph",
      "id": "3c712cd0afe15e2b",
      "text": "Access trait group"
    },
    {
      "type": "paragraph",
      "id": "bc535600b9be1dd7",
      "text": " This trait group describes relations between these three entities. So WithAccesses has accesses, Accessible has incomming accesses, and the Access stores information aoubt its accessor and variable.\n\nThe entities that Famix provides are not real meta-model entities. They cannot be instantiated directly. They are provided in form of traits. That means that you need to apply them on your custom meta-model. That's why in following text they will have a prefix T (meaning trait).\n\nThe concrete language meta-model will contain three real entities: JavaLocalVariable, JavaMethod and JavaAccess. What we will do is to apply the traits provided by the Famix trait group on them. So JavaAccess will use the trait TAccess, JavaMethod will use the trait TWithAccesses and "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Trait Groups",
        "story": []
      },
      "date": 1640586207901
    },
    {
      "item": {
        "type": "factory",
        "id": "90e5d023efd2e154"
      },
      "id": "90e5d023efd2e154",
      "type": "add",
      "date": 1640586209349
    },
    {
      "type": "edit",
      "id": "90e5d023efd2e154",
      "item": {
        "type": "paragraph",
        "id": "90e5d023efd2e154",
        "text": " The fundamental component of the Famix is a trait group. A trait group always describes a fragment of meta-model and can consist of one, two or more entities and relations between them.\n\nWe can demonstrate it on an example of the access. In some meta-model, we have two kinds of entities: local variables and methods. Methods contain a code that reads some local variables or writes data to them. Let's have a program that contains a method named aMethod with a local variable named foo. It writes data to it and then uses it in a method call. "
      },
      "date": 1640586210592
    },
    {
      "type": "edit",
      "id": "90e5d023efd2e154",
      "item": {
        "type": "paragraph",
        "id": "90e5d023efd2e154",
        "text": " The fundamental component of the [[Famix]] is a trait group. A trait group always describes a fragment of meta-model and can consist of one, two or more entities and relations between them.\n\nWe can demonstrate it on an example of the access. In some meta-model, we have two kinds of entities: local variables and methods. Methods contain a code that reads some local variables or writes data to them. Let's have a program that contains a method named aMethod with a local variable named foo. It writes data to it and then uses it in a method call. "
      },
      "date": 1640586219918
    },
    {
      "type": "edit",
      "id": "90e5d023efd2e154",
      "item": {
        "type": "paragraph",
        "id": "90e5d023efd2e154",
        "text": " The fundamental component of the [[Famix]] is a trait group. A trait group always describes a fragment of meta-model and can consist of one, two or more entities and relations between them.\n\nWe can demonstrate it on an example of the *access*. In some meta-model, we have two kinds of entities: local variables and methods. Methods contain a code that reads some local variables or writes data to them. Let's have a program that contains a method named aMethod with a local variable named foo. It writes data to it and then uses it in a method call. "
      },
      "date": 1640586242321
    },
    {
      "type": "edit",
      "id": "90e5d023efd2e154",
      "item": {
        "type": "markdown",
        "id": "90e5d023efd2e154",
        "text": " The fundamental component of the [[Famix]] is a trait group. A trait group always describes a fragment of meta-model and can consist of one, two or more entities and relations between them.\n\nWe can demonstrate it on an example of the *access*. In some meta-model, we have two kinds of entities: local variables and methods. Methods contain a code that reads some local variables or writes data to them. Let's have a program that contains a method named aMethod with a local variable named foo. It writes data to it and then uses it in a method call. "
      },
      "date": 1640586243454
    },
    {
      "type": "edit",
      "id": "90e5d023efd2e154",
      "item": {
        "type": "markdown",
        "id": "90e5d023efd2e154",
        "text": " The fundamental component of the [[Famix]] is a trait group. A trait group always describes a fragment of meta-model and can consist of one, two or more entities and relations between them.\n\nWe can demonstrate it on an example of the *access*. In some meta-model, we have two kinds of entities: local variables and methods. Methods contain a code that reads some local variables or writes data to them. Let's have a program that contains a method named `aMethod` with a local variable named `foo`. It writes data to it and then uses it in a method call. "
      },
      "date": 1640586282010
    },
    {
      "item": {
        "type": "factory",
        "id": "e56e9b2ab7de04ca"
      },
      "id": "e56e9b2ab7de04ca",
      "type": "add",
      "after": "90e5d023efd2e154",
      "date": 1640586296551
    },
    {
      "type": "edit",
      "id": "e56e9b2ab7de04ca",
      "item": {
        "type": "code",
        "id": "e56e9b2ab7de04ca",
        "text": "    public void aMethod() {\n        int foo = 5;\n        someMethod(foo);\n    }"
      },
      "date": 1640586298417
    },
    {
      "item": {
        "type": "factory",
        "id": "9a8150850ef4ae81"
      },
      "id": "9a8150850ef4ae81",
      "type": "add",
      "after": "e56e9b2ab7de04ca",
      "date": 1640586328175
    },
    {
      "type": "edit",
      "id": "9a8150850ef4ae81",
      "item": {
        "type": "markdown",
        "id": "9a8150850ef4ae81",
        "text": " Now we will try to model our little program using the meta-model. We will create an object for the method aMethod, an object that models the variable foo that contains information, wherein the code the instance variable was declared. But one crucial information is missing. We would like where in the code the variable was accessed and what kind of access was that. Was the variable written or read? With such information, we can do a straightforward but useful analysis of the program models and decide, what local variables were not used or just written and never read.\n\nTo model the association between the variable and method, we will introduce a new kind of entity in our metamodel: the access. For every access to a local variable, we will create an object that describes is. It will contain information what the accessed local variable was, what method accessed it, wherein the code this concrete access is placed and what kind of access is it (read or write).\n\nThe Famix provides a meta-model fragment exactly for this use-case. It contains a trait group named Access that describes three entities: access itself (Access), the element that is being accessed (Accessible, in our case, it is the local variable) and an entity that contains accesses (WithAccesses, in case of our meta-model it is the method). "
      },
      "date": 1640586330001
    },
    {
      "item": {
        "type": "factory",
        "id": "aba06e783bb59e47"
      },
      "id": "aba06e783bb59e47",
      "type": "add",
      "after": "9a8150850ef4ae81",
      "date": 1640586347878
    },
    {
      "type": "edit",
      "id": "aba06e783bb59e47",
      "item": {
        "type": "html",
        "id": "aba06e783bb59e47",
        "text": "<center><img width=\"100%\" src=\"https://pavel-krivanek.github.io/famix/Chapters/Introduction/figures/accessGroup.svg\"></center>"
      },
      "date": 1640586356665
    },
    {
      "item": {
        "type": "factory",
        "id": "3c712cd0afe15e2b"
      },
      "id": "3c712cd0afe15e2b",
      "type": "add",
      "after": "aba06e783bb59e47",
      "date": 1640586362083
    },
    {
      "type": "edit",
      "id": "3c712cd0afe15e2b",
      "item": {
        "type": "paragraph",
        "id": "3c712cd0afe15e2b",
        "text": "Access trait group"
      },
      "date": 1640586363289
    },
    {
      "type": "edit",
      "id": "9a8150850ef4ae81",
      "item": {
        "type": "markdown",
        "id": "9a8150850ef4ae81",
        "text": " Now we will try to model our little program using the meta-model. We will create an object for the method `aMethod`, an object that models the variable foo that contains information, wherein the code the instance variable was declared. But one crucial information is missing. We would like where in the code the variable was accessed and what kind of access was that. Was the variable written or read? With such information, we can do a straightforward but useful analysis of the program models and decide, what local variables were not used or just written and never read.\n\nTo model the association between the variable and method, we will introduce a new kind of entity in our metamodel: the access. For every access to a local variable, we will create an object that describes is. It will contain information what the accessed local variable was, what method accessed it, wherein the code this concrete access is placed and what kind of access is it (read or write).\n\nThe Famix provides a meta-model fragment exactly for this use-case. It contains a trait group named Access that describes three entities: access itself (Access), the element that is being accessed (Accessible, in our case, it is the local variable) and an entity that contains accesses (WithAccesses, in case of our meta-model it is the method). "
      },
      "date": 1640586389007
    },
    {
      "type": "edit",
      "id": "9a8150850ef4ae81",
      "item": {
        "type": "markdown",
        "id": "9a8150850ef4ae81",
        "text": " Now we will try to model our little program using the meta-model. We will create an object for the method `aMethod`, an object that models the variable `foo` that contains information, wherein the code the instance variable was declared. But one crucial information is missing. We would like where in the code the variable was accessed and what kind of access was that. Was the variable written or read? With such information, we can do a straightforward but useful analysis of the program models and decide, what local variables were not used or just written and never read.\n\nTo model the association between the variable and method, we will introduce a new kind of entity in our metamodel: the access. For every access to a local variable, we will create an object that describes is. It will contain information what the accessed local variable was, what method accessed it, wherein the code this concrete access is placed and what kind of access is it (read or write).\n\nThe Famix provides a meta-model fragment exactly for this use-case. It contains a trait group named Access that describes three entities: access itself (Access), the element that is being accessed (Accessible, in our case, it is the local variable) and an entity that contains accesses (WithAccesses, in case of our meta-model it is the method). "
      },
      "date": 1640586410912
    },
    {
      "item": {
        "type": "factory",
        "id": "bc535600b9be1dd7"
      },
      "id": "bc535600b9be1dd7",
      "type": "add",
      "after": "3c712cd0afe15e2b",
      "date": 1640601741522
    },
    {
      "type": "edit",
      "id": "bc535600b9be1dd7",
      "item": {
        "type": "paragraph",
        "id": "bc535600b9be1dd7",
        "text": " This trait group describes relations between these three entities. So WithAccesses has accesses, Accessible has incomming accesses, and the Access stores information aoubt its accessor and variable.\n\nThe entities that Famix provides are not real meta-model entities. They cannot be instantiated directly. They are provided in form of traits. That means that you need to apply them on your custom meta-model. That's why in following text they will have a prefix T (meaning trait).\n\nThe concrete language meta-model will contain three real entities: JavaLocalVariable, JavaMethod and JavaAccess. What we will do is to apply the traits provided by the Famix trait group on them. So JavaAccess will use the trait TAccess, JavaMethod will use the trait TWithAccesses and "
      },
      "date": 1640601742977
    }
  ]
}