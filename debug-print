{
  "title": "Debug Print",
  "story": [
    {
      "type": "paragraph",
      "id": "5ff5c4076b412f91",
      "text": "I am always thinking, what can I print so that I know my program works? I try to make this easy and still useful. Sometimes a little effort to make it easy pays off big."
    },
    {
      "type": "paragraph",
      "id": "d4aa1e89999ecf2b",
      "text": "In Fortran 4,  what a pain."
    },
    {
      "type": "code",
      "id": "bc8a7824de50fd62",
      "text": "      PRINT (5, 20) I, J\n20    FORMAT (2HI=, I10, 4H, J=, I10)"
    },
    {
      "type": "paragraph",
      "id": "ab14525d2104114c",
      "text": "In C, a little better."
    },
    {
      "type": "code",
      "id": "36d8207526c67a11",
      "text": "printf(stderr, \"i=%d, j=%d\\n\", i, j);"
    },
    {
      "type": "paragraph",
      "id": "b01e5eac72528a6a",
      "text": "In Javascript, nice, and works for objects too."
    },
    {
      "type": "code",
      "id": "4215b31e24f9a58d",
      "text": "console.log({i:i, j:j})"
    },
    {
      "type": "paragraph",
      "id": "fb486e45b3e47e16",
      "text": "Javascript works as well as it does because there is an excellent \"console\" that collects the prints and lets one further inspect or even compute with the results."
    },
    {
      "type": "paragraph",
      "id": "14f4e2d8b7bfaf36",
      "text": "In tight situations I've built my own mechanisms for collecting debugging print output."
    },
    {
      "type": "paragraph",
      "id": "eeffeab38a0e4a06",
      "text": "[[PL/1 Compiler]] used a macro to print any register legibly and non-destructively."
    },
    {
      "type": "code",
      "id": "00c60334a31c7243",
      "text": "TRACE \"Symbol Table Size\", B6"
    },
    {
      "type": "paragraph",
      "id": "679b369cd04d09db",
      "text": "[[State Ports]] let me write a byte to a custom made peripheral for debugging early multi-microprocessors."
    },
    {
      "type": "code",
      "id": "b7f348c25b900bf5",
      "text": "OUT 12, I"
    },
    {
      "type": "paragraph",
      "id": "c008ba5064215da9",
      "text": "[[Spinometer]] similarly modulated a single microcontroller pin to move a meter showing variables."
    },
    {
      "type": "code",
      "id": "b88bdd3c165e4d40",
      "text": "meter (10, threshold, 1024);"
    },
    {
      "type": "paragraph",
      "id": "d0189c905f65c0ab",
      "text": "[[Test Point]] logged objects in a circular buffer without any storage allocation or print formatting until read."
    },
    {
      "type": "code",
      "id": "5d3014afb64d7f5a",
      "text": "trace(\"dispatch\", thisEvent)"
    },
    {
      "type": "paragraph",
      "id": "042edc880356cacf",
      "text": "[[Exploratory Parsing]] captured failed cases as legitimate input and tallied it with all other results."
    },
    {
      "type": "code",
      "id": "5769c8bfea594c0b",
      "text": "fact = key value | other_char"
    },
    {
      "type": "paragraph",
      "id": "75993571c84b93f7",
      "text": "[[Rubific]] parsed a subset of Ruby expressions tracing recursive entry and exit as it went."
    },
    {
      "type": "code",
      "id": "388fc2fff80a91a2",
      "text": "trace(\"( ... \")\ntrace(\" ... )\")"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Debug Print",
        "story": []
      },
      "date": 1463148000558
    },
    {
      "item": {
        "type": "factory",
        "id": "5ff5c4076b412f91"
      },
      "id": "5ff5c4076b412f91",
      "type": "add",
      "date": 1463148002711
    },
    {
      "type": "edit",
      "id": "5ff5c4076b412f91",
      "item": {
        "type": "paragraph",
        "id": "5ff5c4076b412f91",
        "text": "I am always thinking, what can I print so that I know my program works? I try to make this easy and still useful. Sometimes a little effort to make it easy pays off big."
      },
      "date": 1463148175188
    },
    {
      "item": {
        "type": "factory",
        "id": "d4aa1e89999ecf2b"
      },
      "id": "d4aa1e89999ecf2b",
      "type": "add",
      "after": "5ff5c4076b412f91",
      "date": 1463148238702
    },
    {
      "type": "edit",
      "id": "d4aa1e89999ecf2b",
      "item": {
        "type": "paragraph",
        "id": "d4aa1e89999ecf2b",
        "text": "In Fortran, what a pain."
      },
      "date": 1463148250389
    },
    {
      "item": {
        "type": "factory",
        "id": "bc8a7824de50fd62"
      },
      "id": "bc8a7824de50fd62",
      "type": "add",
      "after": "d4aa1e89999ecf2b",
      "date": 1463148252300
    },
    {
      "type": "edit",
      "id": "bc8a7824de50fd62",
      "item": {
        "type": "code",
        "id": "bc8a7824de50fd62",
        "text": "      PRINT (5, 20) I, J\n20    FORMAT (2HI=, I10, 4H, J=, I10)"
      },
      "date": 1463148473416
    },
    {
      "type": "edit",
      "id": "d4aa1e89999ecf2b",
      "item": {
        "type": "paragraph",
        "id": "d4aa1e89999ecf2b",
        "text": "In Fortran 4,  what a pain."
      },
      "date": 1463148482563
    },
    {
      "item": {
        "type": "factory",
        "id": "ab14525d2104114c"
      },
      "id": "ab14525d2104114c",
      "type": "add",
      "after": "bc8a7824de50fd62",
      "date": 1463148522203
    },
    {
      "type": "edit",
      "id": "ab14525d2104114c",
      "item": {
        "type": "paragraph",
        "id": "ab14525d2104114c",
        "text": "In C, a little better."
      },
      "date": 1463148554361
    },
    {
      "item": {
        "type": "factory",
        "id": "36d8207526c67a11"
      },
      "id": "36d8207526c67a11",
      "type": "add",
      "after": "ab14525d2104114c",
      "date": 1463148556538
    },
    {
      "type": "edit",
      "id": "36d8207526c67a11",
      "item": {
        "type": "code",
        "id": "36d8207526c67a11",
        "text": "printf(stderr, \"i=%d, j=%d\\n\", i, j);"
      },
      "date": 1463148614089
    },
    {
      "item": {
        "type": "factory",
        "id": "b01e5eac72528a6a"
      },
      "id": "b01e5eac72528a6a",
      "type": "add",
      "after": "36d8207526c67a11",
      "date": 1463148623738
    },
    {
      "type": "edit",
      "id": "b01e5eac72528a6a",
      "item": {
        "type": "paragraph",
        "id": "b01e5eac72528a6a",
        "text": "In Javascript, nice, and works for objects too."
      },
      "date": 1463148670010
    },
    {
      "item": {
        "type": "factory",
        "id": "4215b31e24f9a58d"
      },
      "id": "4215b31e24f9a58d",
      "type": "add",
      "after": "b01e5eac72528a6a",
      "date": 1463148676518
    },
    {
      "type": "edit",
      "id": "4215b31e24f9a58d",
      "item": {
        "type": "code",
        "id": "4215b31e24f9a58d",
        "text": "console.log({i: i, j:j})"
      },
      "date": 1463148729760
    },
    {
      "type": "edit",
      "id": "4215b31e24f9a58d",
      "item": {
        "type": "code",
        "id": "4215b31e24f9a58d",
        "text": "console.log({i:i, j:j})"
      },
      "date": 1463148757890
    },
    {
      "item": {
        "type": "factory",
        "id": "fb486e45b3e47e16"
      },
      "id": "fb486e45b3e47e16",
      "type": "add",
      "after": "4215b31e24f9a58d",
      "date": 1463148897017
    },
    {
      "type": "edit",
      "id": "fb486e45b3e47e16",
      "item": {
        "type": "paragraph",
        "id": "fb486e45b3e47e16",
        "text": "Javascript works as well as it does because there is an excellent \"console\" that collects the prints and lets one further inspect or even compute with the results."
      },
      "date": 1463148973200
    },
    {
      "type": "add",
      "id": "14f4e2d8b7bfaf36",
      "item": {
        "type": "paragraph",
        "id": "14f4e2d8b7bfaf36",
        "text": "In tight situations I've built my own mechanisms for collecting debugging print output."
      },
      "after": "fb486e45b3e47e16",
      "date": 1463149019187
    },
    {
      "type": "add",
      "id": "679b369cd04d09db",
      "item": {
        "type": "paragraph",
        "id": "679b369cd04d09db",
        "text": "[[State Ports]] let me write a byte to a custom made peripheral for debugging early multi-microprocessor systems."
      },
      "after": "14f4e2d8b7bfaf36",
      "date": 1463149134901
    },
    {
      "type": "edit",
      "id": "679b369cd04d09db",
      "item": {
        "type": "paragraph",
        "id": "679b369cd04d09db",
        "text": "[[State Ports]] let me write a byte to a custom made peripheral for debugging early multi-microprocessors."
      },
      "date": 1463149143929
    },
    {
      "type": "fork",
      "date": 1463149218931
    },
    {
      "item": {
        "type": "factory",
        "id": "b7f348c25b900bf5"
      },
      "id": "b7f348c25b900bf5",
      "type": "add",
      "after": "679b369cd04d09db",
      "date": 1463149221430
    },
    {
      "type": "edit",
      "id": "b7f348c25b900bf5",
      "item": {
        "type": "code",
        "id": "b7f348c25b900bf5",
        "text": "    OUT 12, I"
      },
      "date": 1463149226013
    },
    {
      "item": {
        "type": "factory",
        "id": "5d3014afb64d7f5a"
      },
      "id": "5d3014afb64d7f5a",
      "type": "add",
      "after": "b7f348c25b900bf5",
      "date": 1463149319377
    },
    {
      "type": "edit",
      "id": "5d3014afb64d7f5a",
      "item": {
        "type": "code",
        "id": "5d3014afb64d7f5a",
        "text": "trace(\"dispatch\", thisEvent)"
      },
      "date": 1463149339817
    },
    {
      "item": {
        "type": "factory",
        "id": "d0189c905f65c0ab"
      },
      "id": "d0189c905f65c0ab",
      "type": "add",
      "after": "5d3014afb64d7f5a",
      "date": 1463149362413
    },
    {
      "type": "edit",
      "id": "d0189c905f65c0ab",
      "item": {
        "type": "paragraph",
        "id": "d0189c905f65c0ab",
        "text": "[[Test Point]] logged objects in a circular buffer without any storage allocation or print formatting until the buffer was examined."
      },
      "date": 1463149429948
    },
    {
      "type": "edit",
      "id": "d0189c905f65c0ab",
      "item": {
        "type": "paragraph",
        "id": "d0189c905f65c0ab",
        "text": "[[Test Point]] logged objects in a circular buffer without any storage allocation or print formatting until read."
      },
      "date": 1463149442707
    },
    {
      "type": "move",
      "order": [
        "5ff5c4076b412f91",
        "d4aa1e89999ecf2b",
        "bc8a7824de50fd62",
        "ab14525d2104114c",
        "36d8207526c67a11",
        "b01e5eac72528a6a",
        "4215b31e24f9a58d",
        "fb486e45b3e47e16",
        "14f4e2d8b7bfaf36",
        "679b369cd04d09db",
        "b7f348c25b900bf5",
        "d0189c905f65c0ab",
        "5d3014afb64d7f5a"
      ],
      "id": "d0189c905f65c0ab",
      "date": 1463149446300
    },
    {
      "type": "edit",
      "id": "b7f348c25b900bf5",
      "item": {
        "type": "code",
        "id": "b7f348c25b900bf5",
        "text": "OUT 12, I"
      },
      "date": 1463149464335
    },
    {
      "item": {
        "type": "factory",
        "id": "5769c8bfea594c0b"
      },
      "id": "5769c8bfea594c0b",
      "type": "add",
      "after": "5d3014afb64d7f5a",
      "date": 1463149623941
    },
    {
      "type": "edit",
      "id": "5769c8bfea594c0b",
      "item": {
        "type": "code",
        "id": "5769c8bfea594c0b",
        "text": "fact = key value | other_char"
      },
      "date": 1463149635773
    },
    {
      "item": {
        "type": "factory",
        "id": "042edc880356cacf"
      },
      "id": "042edc880356cacf",
      "type": "add",
      "after": "5769c8bfea594c0b",
      "date": 1463149639156
    },
    {
      "type": "edit",
      "id": "042edc880356cacf",
      "item": {
        "type": "paragraph",
        "id": "042edc880356cacf",
        "text": "[[Exploratory Parsing]] captured failed cases as legitimate input and tallied it with all other results."
      },
      "date": 1463149700610
    },
    {
      "type": "move",
      "order": [
        "5ff5c4076b412f91",
        "d4aa1e89999ecf2b",
        "bc8a7824de50fd62",
        "ab14525d2104114c",
        "36d8207526c67a11",
        "b01e5eac72528a6a",
        "4215b31e24f9a58d",
        "fb486e45b3e47e16",
        "14f4e2d8b7bfaf36",
        "679b369cd04d09db",
        "b7f348c25b900bf5",
        "d0189c905f65c0ab",
        "5d3014afb64d7f5a",
        "042edc880356cacf",
        "5769c8bfea594c0b"
      ],
      "id": "042edc880356cacf",
      "date": 1463149703599
    },
    {
      "item": {
        "type": "factory",
        "id": "c008ba5064215da9"
      },
      "id": "c008ba5064215da9",
      "type": "add",
      "after": "5769c8bfea594c0b",
      "date": 1463150920714
    },
    {
      "type": "edit",
      "id": "c008ba5064215da9",
      "item": {
        "type": "paragraph",
        "id": "c008ba5064215da9",
        "text": "[[Spinometer]] similarly modulated a single pin of a microcontroller to move a meter reading program variables."
      },
      "date": 1463150991135
    },
    {
      "type": "edit",
      "id": "c008ba5064215da9",
      "item": {
        "type": "paragraph",
        "id": "c008ba5064215da9",
        "text": "[[Spinometer]] similarly modulated a single microcontroller pin to move a meter showing variables."
      },
      "date": 1463151046621
    },
    {
      "type": "add",
      "item": {
        "type": "code",
        "id": "b88bdd3c165e4d40",
        "text": "meter (10, threshold, 1024);\nmeter (9, contrast, 250);"
      },
      "after": "c008ba5064215da9",
      "id": "b88bdd3c165e4d40",
      "date": 1463151066619
    },
    {
      "type": "edit",
      "id": "b88bdd3c165e4d40",
      "item": {
        "type": "code",
        "id": "b88bdd3c165e4d40",
        "text": "meter (10, threshold, 1024);"
      },
      "date": 1463151081155
    },
    {
      "type": "move",
      "order": [
        "5ff5c4076b412f91",
        "d4aa1e89999ecf2b",
        "bc8a7824de50fd62",
        "ab14525d2104114c",
        "36d8207526c67a11",
        "b01e5eac72528a6a",
        "4215b31e24f9a58d",
        "fb486e45b3e47e16",
        "14f4e2d8b7bfaf36",
        "679b369cd04d09db",
        "b7f348c25b900bf5",
        "c008ba5064215da9",
        "d0189c905f65c0ab",
        "5d3014afb64d7f5a",
        "042edc880356cacf",
        "5769c8bfea594c0b",
        "b88bdd3c165e4d40"
      ],
      "id": "c008ba5064215da9",
      "date": 1463151088858
    },
    {
      "type": "move",
      "order": [
        "5ff5c4076b412f91",
        "d4aa1e89999ecf2b",
        "bc8a7824de50fd62",
        "ab14525d2104114c",
        "36d8207526c67a11",
        "b01e5eac72528a6a",
        "4215b31e24f9a58d",
        "fb486e45b3e47e16",
        "14f4e2d8b7bfaf36",
        "679b369cd04d09db",
        "b7f348c25b900bf5",
        "c008ba5064215da9",
        "b88bdd3c165e4d40",
        "d0189c905f65c0ab",
        "5d3014afb64d7f5a",
        "042edc880356cacf",
        "5769c8bfea594c0b"
      ],
      "id": "b88bdd3c165e4d40",
      "date": 1463151092153
    },
    {
      "type": "add",
      "item": {
        "type": "code",
        "id": "388fc2fff80a91a2",
        "text": "trace(\"( ... \")\ntrace(\" ... )\")"
      },
      "after": "5769c8bfea594c0b",
      "id": "388fc2fff80a91a2",
      "date": 1463153585509
    },
    {
      "item": {
        "type": "factory",
        "id": "75993571c84b93f7"
      },
      "id": "75993571c84b93f7",
      "type": "add",
      "after": "388fc2fff80a91a2",
      "date": 1463153621885
    },
    {
      "type": "edit",
      "id": "75993571c84b93f7",
      "item": {
        "type": "paragraph",
        "id": "75993571c84b93f7",
        "text": "[[Rubific]] parsed a subset of Ruby expressions tracing recursive entry and exit as it went."
      },
      "date": 1463153688808
    },
    {
      "type": "move",
      "order": [
        "5ff5c4076b412f91",
        "d4aa1e89999ecf2b",
        "bc8a7824de50fd62",
        "ab14525d2104114c",
        "36d8207526c67a11",
        "b01e5eac72528a6a",
        "4215b31e24f9a58d",
        "fb486e45b3e47e16",
        "14f4e2d8b7bfaf36",
        "679b369cd04d09db",
        "b7f348c25b900bf5",
        "c008ba5064215da9",
        "b88bdd3c165e4d40",
        "d0189c905f65c0ab",
        "5d3014afb64d7f5a",
        "042edc880356cacf",
        "5769c8bfea594c0b",
        "75993571c84b93f7",
        "388fc2fff80a91a2"
      ],
      "id": "75993571c84b93f7",
      "date": 1463153693088
    },
    {
      "type": "add",
      "id": "eeffeab38a0e4a06",
      "item": {
        "type": "paragraph",
        "id": "eeffeab38a0e4a06",
        "text": "[[PL/1 Compiler]] used a macro to print any register legibly and non-destructively."
      },
      "after": "14f4e2d8b7bfaf36",
      "date": 1463155059966
    },
    {
      "item": {
        "type": "factory",
        "id": "00c60334a31c7243"
      },
      "id": "00c60334a31c7243",
      "type": "add",
      "after": "388fc2fff80a91a2",
      "date": 1463155084709
    },
    {
      "type": "edit",
      "id": "00c60334a31c7243",
      "item": {
        "type": "code",
        "id": "00c60334a31c7243",
        "text": "TRACE \"Symbol Table Size\", b6"
      },
      "date": 1463155114666
    },
    {
      "type": "move",
      "order": [
        "5ff5c4076b412f91",
        "d4aa1e89999ecf2b",
        "bc8a7824de50fd62",
        "ab14525d2104114c",
        "36d8207526c67a11",
        "b01e5eac72528a6a",
        "4215b31e24f9a58d",
        "fb486e45b3e47e16",
        "14f4e2d8b7bfaf36",
        "eeffeab38a0e4a06",
        "00c60334a31c7243",
        "679b369cd04d09db",
        "b7f348c25b900bf5",
        "c008ba5064215da9",
        "b88bdd3c165e4d40",
        "d0189c905f65c0ab",
        "5d3014afb64d7f5a",
        "042edc880356cacf",
        "5769c8bfea594c0b",
        "75993571c84b93f7",
        "388fc2fff80a91a2"
      ],
      "id": "00c60334a31c7243",
      "date": 1463155120618
    },
    {
      "type": "edit",
      "id": "00c60334a31c7243",
      "item": {
        "type": "code",
        "id": "00c60334a31c7243",
        "text": "TRACE \"Symbol Table Size\", B6"
      },
      "date": 1463155152082
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org",
      "date": 1463155342987
    },
    {
      "type": "fork",
      "site": "xpdx.org",
      "date": 1627063936837
    }
  ]
}