{
  "title": "Elimination of Conditional Logic",
  "story": [
    {
      "type": "markdown",
      "id": "c03799c4a4a12b7b",
      "text": "More often than not, a high frequency of the message `ifTrue:ifFalse:` suggests that [[distinctions]] which might have been possible at design time are being drawn at run time. But if distinctions were drawn at design time in the form of classes, then it would not be necessary for the running program to repeatedly rediscover what was known by the developers."
    },
    {
      "type": "paragraph",
      "id": "8e55e186dc92d1e0",
      "text": "This leads to conclude that drawing design time distinctions at run time is intention obscuring by nature. It is a sign of missing explicit representation of valuable distinctions, of information kept private in the developer’s mind. It is also the manifestation of unnecessary homework left to any reader of the code. This is because classes are explicit consequences of the intentions behind their existence."
    },
    {
      "type": "paragraph",
      "id": "8b76a3e1606fa5d5",
      "text": "From a more pragmatic point of view, what is even worse about this homework is that it applies to the virtual machine as well. Drawing design time distinctions at run time takes computer resources which could be more wisely spent."
    },
    {
      "type": "markdown",
      "id": "56e788ccaa8702f0",
      "text": "Polymorphic message sends allow the meaning of messages to be defined by the context in which the message is received. Therefore, in programs in which design time distinctions are drawn explicitly as classes, `ifTrue:ifFalse:` tends to become unnecessary."
    },
    {
      "type": "paragraph",
      "id": "bac94e206c8f66f6",
      "text": "If you need to improve performance, classes and polymorphism are some of your most powerful allies because they can make it so that the run time does not need to spend any time whatsoever recreating known information."
    },
    {
      "type": "markdown",
      "id": "d0559468372ba9dc",
      "text": "The assertion that more classes can result in improved performance may seem strange at first. However, it is the case that virtual machines make large systems of objects evolve faster and more efficiently when behavior depends heavily on polymorphic message sends rather than on ifTrue:ifFalse:. This is because virtual machines are well equipped with machinery that executes polymorphic message sends extremely fast. Therefore, let go of the temptation to do the work of the virtual machine by invoking special messages such as `==`, `isKindOf:` and `ifTrue:ifFalse:`.\n"
    },
    {
      "type": "markdown",
      "id": "923b2f581adb1378",
      "text": "In short, *distinguish* and *conquer*."
    },
    {
      "type": "markdown",
      "id": "37865b24fb1538d3",
      "text": "> You can only name what is already distinguished."
    },
    {
      "type": "markdown",
      "id": "a971be7a0bb1e07e",
      "text": "An excellent example of using polymorphism to avoid drawing unnecessary distinctions at run time, and of letting the meaning messages be defined by the context in which they are received, is how `true` and `false` themselves are implemented."
    },
    {
      "type": "paragraph",
      "id": "5010cf59a25b745b",
      "text": "[…]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Elimination of Conditional Logic",
        "story": []
      },
      "date": 1660154177884
    },
    {
      "item": {
        "type": "factory",
        "id": "c03799c4a4a12b7b"
      },
      "id": "c03799c4a4a12b7b",
      "type": "add",
      "date": 1660154193886
    },
    {
      "type": "edit",
      "id": "c03799c4a4a12b7b",
      "item": {
        "type": "paragraph",
        "id": "c03799c4a4a12b7b",
        "text": "More often than not, a high frequency of the message `ifTrue:ifFalse:` suggests that distinctions which might have been possible at design time are being drawn"
      },
      "date": 1660154203651
    },
    {
      "type": "edit",
      "id": "c03799c4a4a12b7b",
      "item": {
        "type": "paragraph",
        "id": "c03799c4a4a12b7b",
        "text": "More often than not, a high frequency of the message `ifTrue:ifFalse:` suggests that [[distinctions]] which might have been possible at design time are being drawn"
      },
      "date": 1660154214351
    },
    {
      "type": "edit",
      "id": "c03799c4a4a12b7b",
      "item": {
        "type": "paragraph",
        "id": "c03799c4a4a12b7b",
        "text": "More often than not, a high frequency of the message `ifTrue:ifFalse:` suggests that [[distinctions]] which might have been possible at design time are being drawn at run time. But if distinctions were drawn at design time in the form of classes, then it would not be necessary for the running program to repeatedly rediscover what was known by the developers."
      },
      "date": 1660154229476
    },
    {
      "type": "edit",
      "id": "c03799c4a4a12b7b",
      "item": {
        "type": "markdown",
        "id": "c03799c4a4a12b7b",
        "text": "More often than not, a high frequency of the message `ifTrue:ifFalse:` suggests that [[distinctions]] which might have been possible at design time are being drawn at run time. But if distinctions were drawn at design time in the form of classes, then it would not be necessary for the running program to repeatedly rediscover what was known by the developers."
      },
      "date": 1660154233309
    },
    {
      "item": {
        "type": "factory",
        "id": "8e55e186dc92d1e0"
      },
      "id": "8e55e186dc92d1e0",
      "type": "add",
      "after": "c03799c4a4a12b7b",
      "date": 1660154260677
    },
    {
      "type": "edit",
      "id": "8e55e186dc92d1e0",
      "item": {
        "type": "paragraph",
        "id": "8e55e186dc92d1e0",
        "text": "This leads to conclude that drawing design time distinctions at run time is intention obscuring by nature. It is a sign of missing explicit representation of valuable distinctions, of information kept private in the developer’s mind. It is also the manifestation of unnecessary homework left to any reader of the code. This is because classes are explicit consequences of the intentions behind their existence."
      },
      "date": 1660154262851
    },
    {
      "item": {
        "type": "factory",
        "id": "8b76a3e1606fa5d5"
      },
      "id": "8b76a3e1606fa5d5",
      "type": "add",
      "after": "8e55e186dc92d1e0",
      "date": 1660154285855
    },
    {
      "type": "edit",
      "id": "8b76a3e1606fa5d5",
      "item": {
        "type": "paragraph",
        "id": "8b76a3e1606fa5d5",
        "text": "From a more pragmatic point of view, what is even worse about this homework is that it applies to the virtual machine as well. Drawing design time distinctions at run time takes computer resources which could be more wisely spent."
      },
      "date": 1660154287498
    },
    {
      "item": {
        "type": "factory",
        "id": "56e788ccaa8702f0"
      },
      "id": "56e788ccaa8702f0",
      "type": "add",
      "after": "8b76a3e1606fa5d5",
      "date": 1660154304182
    },
    {
      "type": "edit",
      "id": "56e788ccaa8702f0",
      "item": {
        "type": "paragraph",
        "id": "56e788ccaa8702f0",
        "text": "Polymorphic message sends allow the meaning of messages to be defined by the context in which the message is received. Therefore, in programs in which design time distinctions are drawn explicitly as classes, ifTrue:ifFalse: tends to become unnecessary."
      },
      "date": 1660154306200
    },
    {
      "type": "edit",
      "id": "56e788ccaa8702f0",
      "item": {
        "type": "paragraph",
        "id": "56e788ccaa8702f0",
        "text": "Polymorphic message sends allow the meaning of messages to be defined by the context in which the message is received. Therefore, in programs in which design time distinctions are drawn explicitly as classes, `ifTrue:ifFalse:` tends to become unnecessary."
      },
      "date": 1660154320578
    },
    {
      "type": "edit",
      "id": "56e788ccaa8702f0",
      "item": {
        "type": "markdown",
        "id": "56e788ccaa8702f0",
        "text": "Polymorphic message sends allow the meaning of messages to be defined by the context in which the message is received. Therefore, in programs in which design time distinctions are drawn explicitly as classes, `ifTrue:ifFalse:` tends to become unnecessary."
      },
      "date": 1660154322013
    },
    {
      "item": {
        "type": "factory",
        "id": "bac94e206c8f66f6"
      },
      "id": "bac94e206c8f66f6",
      "type": "add",
      "after": "56e788ccaa8702f0",
      "date": 1660154374262
    },
    {
      "type": "edit",
      "id": "bac94e206c8f66f6",
      "item": {
        "type": "paragraph",
        "id": "bac94e206c8f66f6",
        "text": "If you need to improve performance, classes and polymorphism are some of your most powerful allies because they can make it so that the run time does not need to spend any time whatsoever recreating known information."
      },
      "date": 1660154376035
    },
    {
      "item": {
        "type": "factory",
        "id": "d0559468372ba9dc"
      },
      "id": "d0559468372ba9dc",
      "type": "add",
      "after": "bac94e206c8f66f6",
      "date": 1660154385314
    },
    {
      "type": "edit",
      "id": "d0559468372ba9dc",
      "item": {
        "type": "paragraph",
        "id": "d0559468372ba9dc",
        "text": "The assertion that more classes can result in improved performance may seem strange at first. However, it is the case that virtual machines make large systems of objects evolve faster and more efficiently when behavior depends heavily on polymorphic message sends rather than on ifTrue:ifFalse:. This is because virtual machines are well equipped with machinery that executes polymorphic message sends extremely fast. Therefore, let go of the temptation to do the work of the virtual machine by invoking special messages such as ==, isKindOf: and ifTrue:ifFalse:."
      },
      "date": 1660154386725
    },
    {
      "type": "edit",
      "id": "d0559468372ba9dc",
      "item": {
        "type": "paragraph",
        "id": "d0559468372ba9dc",
        "text": "The assertion that more classes can result in improved performance may seem strange at first. However, it is the case that virtual machines make large systems of objects evolve faster and more efficiently when behavior depends heavily on polymorphic message sends rather than on ifTrue:ifFalse:. This is because virtual machines are well equipped with machinery that executes polymorphic message sends extremely fast. Therefore, let go of the temptation to do the work of the virtual machine by invoking special messages such as `==`, `isKindOf:` and `ifTrue:ifFalse:`."
      },
      "date": 1660154414329
    },
    {
      "type": "edit",
      "id": "d0559468372ba9dc",
      "item": {
        "type": "markdown",
        "id": "d0559468372ba9dc",
        "text": "The assertion that more classes can result in improved performance may seem strange at first. However, it is the case that virtual machines make large systems of objects evolve faster and more efficiently when behavior depends heavily on polymorphic message sends rather than on ifTrue:ifFalse:. This is because virtual machines are well equipped with machinery that executes polymorphic message sends extremely fast. Therefore, let go of the temptation to do the work of the virtual machine by invoking special messages such as `==`, `isKindOf:` and `ifTrue:ifFalse:`."
      },
      "date": 1660154415721
    },
    {
      "type": "edit",
      "id": "d0559468372ba9dc",
      "item": {
        "type": "markdown",
        "id": "d0559468372ba9dc",
        "text": "The assertion that more classes can result in improved performance may seem strange at first. However, it is the case that virtual machines make large systems of objects evolve faster and more efficiently when behavior depends heavily on polymorphic message sends rather than on ifTrue:ifFalse:. This is because virtual machines are well equipped with machinery that executes polymorphic message sends extremely fast. Therefore, let go of the temptation to do the work of the virtual machine by invoking special messages such as `==`, `isKindOf:` and `ifTrue:ifFalse:`.\n"
      },
      "date": 1660154434245
    },
    {
      "type": "add",
      "id": "923b2f581adb1378",
      "item": {
        "type": "markdown",
        "id": "923b2f581adb1378",
        "text": "In short, *distinguish* and *conquer*."
      },
      "after": "d0559468372ba9dc",
      "date": 1660154444263
    },
    {
      "item": {
        "type": "factory",
        "id": "37865b24fb1538d3"
      },
      "id": "37865b24fb1538d3",
      "type": "add",
      "after": "923b2f581adb1378",
      "date": 1660154457174
    },
    {
      "type": "edit",
      "id": "37865b24fb1538d3",
      "item": {
        "type": "paragraph",
        "id": "37865b24fb1538d3",
        "text": "> You can only name what is already distinguished."
      },
      "date": 1660154459830
    },
    {
      "type": "edit",
      "id": "37865b24fb1538d3",
      "item": {
        "type": "markdown",
        "id": "37865b24fb1538d3",
        "text": "> You can only name what is already distinguished."
      },
      "date": 1660154461200
    },
    {
      "item": {
        "type": "factory",
        "id": "a971be7a0bb1e07e"
      },
      "id": "a971be7a0bb1e07e",
      "type": "add",
      "after": "37865b24fb1538d3",
      "date": 1660154479185
    },
    {
      "type": "edit",
      "id": "a971be7a0bb1e07e",
      "item": {
        "type": "paragraph",
        "id": "a971be7a0bb1e07e",
        "text": "An excellent example of using polymorphism to avoid drawing unnecessary distinctions at run time, and of letting the meaning messages be defined by the context in which they are received, is how true and false themselves are implemented."
      },
      "date": 1660154480713
    },
    {
      "type": "edit",
      "id": "a971be7a0bb1e07e",
      "item": {
        "type": "paragraph",
        "id": "a971be7a0bb1e07e",
        "text": "An excellent example of using polymorphism to avoid drawing unnecessary distinctions at run time, and of letting the meaning messages be defined by the context in which they are received, is how `true` and `false` themselves are implemented."
      },
      "date": 1660154504639
    },
    {
      "type": "edit",
      "id": "a971be7a0bb1e07e",
      "item": {
        "type": "markdown",
        "id": "a971be7a0bb1e07e",
        "text": "An excellent example of using polymorphism to avoid drawing unnecessary distinctions at run time, and of letting the meaning messages be defined by the context in which they are received, is how `true` and `false` themselves are implemented."
      },
      "date": 1660154505762
    },
    {
      "item": {
        "type": "factory",
        "id": "5010cf59a25b745b"
      },
      "id": "5010cf59a25b745b",
      "type": "add",
      "after": "a971be7a0bb1e07e",
      "date": 1660154538184
    },
    {
      "type": "edit",
      "id": "5010cf59a25b745b",
      "item": {
        "type": "paragraph",
        "id": "5010cf59a25b745b",
        "text": "[…]"
      },
      "date": 1660154541769
    }
  ]
}