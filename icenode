{
  "title": "IceNode",
  "story": [
    {
      "type": "markdown",
      "id": "3e85e66e16c0452c",
      "text": "I am a tree implementation used for diffing and merging.\n\nI work by composition and not inheritance. My users should use the values of the node (kept in the #value instance variable) and not subclass myself.\nEach node stores its child nodes in a dictionary, indexed by a key.\n\nTree API:\n - #/ access to children\n - #path get the path of the current node in the tree\n - #parent get the parent node of the current node\n - #rootNode get the root node of the current tree\n - #children get the children of the current node\n - #keys, #keysDo:, #includesKey: enumerate the keys of the node\n - #at:put, #childAt:ifAbsentPut:, #childAt:ifPresent:\n - #resolve:, #resolve:ifAbsent: resolve a path in the current node\n - #replaceBy: replaces the current node by another node\n - #replace:with: replaces the given child node by another node\n\nEnumerating API:\n - #allSatisfy:\n - #anySatisfy:\n - #collect:\n - #detect:\n - #select:\n - #count:\n - #do:\n\nVisiting API:\n - visit:"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "IceNode",
        "story": []
      },
      "date": 1663154774643
    },
    {
      "item": {
        "type": "factory",
        "id": "3e85e66e16c0452c"
      },
      "id": "3e85e66e16c0452c",
      "type": "add",
      "date": 1663154780479
    },
    {
      "type": "edit",
      "id": "3e85e66e16c0452c",
      "item": {
        "type": "markdown",
        "id": "3e85e66e16c0452c",
        "text": "I am a tree implementation used for diffing and merging.\n\nI work by composition and not inheritance. My users should use the values of the node (kept in the #value instance variable) and not subclass myself.\nEach node stores its child nodes in a dictionary, indexed by a key.\n\nTree API:\n - #/ access to children\n - #path get the path of the current node in the tree\n - #parent get the parent node of the current node\n - #rootNode get the root node of the current tree\n - #children get the children of the current node\n - #keys, #keysDo:, #includesKey: enumerate the keys of the node\n - #at:put, #childAt:ifAbsentPut:, #childAt:ifPresent:\n - #resolve:, #resolve:ifAbsent: resolve a path in the current node\n - #replaceBy: replaces the current node by another node\n - #replace:with: replaces the given child node by another node\n\nEnumerating API:\n - #allSatisfy:\n - #anySatisfy:\n - #collect:\n - #detect:\n - #select:\n - #count:\n - #do:\n\nVisiting API:\n - visit:"
      },
      "date": 1663154782547
    }
  ]
}