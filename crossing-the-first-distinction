{
  "title": "Crossing the First Distinction",
  "story": [
    {
      "type": "paragraph",
      "id": "e6b28a5f9bec94b8",
      "text": "In order to take a look at our problem from the first distinction, we have to cross the boundary the first distinction represents in a controlled manner. In the same way that we have the means to perceive and cause perceivable change in our environment, we will need to model a connection channel that allows the crossing of the boundary between our first distinction and our surroundings."
    },
    {
      "type": "paragraph",
      "id": "0c282c9e58a22188",
      "text": "In [[Smalltalk]], boundary crossing is achieved by sending messages. Note how object encapsulation provides a distinction that separates the contents of the object from its environment. There is no way to directly interact with the interior of an object’s boundary. Instead, messages must be sent to the object with the tacit understanding that answers will be reasonable."
    },
    {
      "type": "markdown",
      "id": "5cde9e6fcf59b02d",
      "text": "Life, in a way, works that way too. Cells have boundaries that separate them from their environments, and it is only through messages that multicellular organisms organize themselves. If a cell does not provide reasonable answers, its relationship with the rest of the cells becomes unstable. Outcomes typically range from eviction, to the whole cell colony shutting down entirely. One way or the other, improper interaction is strongly selected against. The fact that in Smalltalk it is very easy to do damaging things, such as `true become: false` or `Object become: nil`, is sometimes used to argue that the lack of restrictions is actually a defect. This argument is most counterproductive. In fact, it is the lack of pessimism what makes Smalltalk powerful, as its scarce constraints let the cost of change stay low. Besides, were safeguards put in place against doing damage, they would immediately become dead code because they would never run after the program becomes stable. Thus, it is not worth to spend time or energy in them."
    },
    {
      "type": "paragraph",
      "id": "0539e47a0271e159",
      "text": "[…]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Crossing the First Distinction",
        "story": []
      },
      "date": 1660239127871
    },
    {
      "item": {
        "type": "factory",
        "id": "e6b28a5f9bec94b8"
      },
      "id": "e6b28a5f9bec94b8",
      "type": "add",
      "date": 1660239144999
    },
    {
      "type": "edit",
      "id": "e6b28a5f9bec94b8",
      "item": {
        "type": "paragraph",
        "id": "e6b28a5f9bec94b8",
        "text": "In order to take a look at our problem from the first distinction, we have to cross the boundary the first distinction represents in a controlled manner. In the same way that we have the means to perceive and cause perceivable change in our environment, we will need to model a connection channel that allows the crossing of the boundary between our first distinction and our surroundings."
      },
      "date": 1660239146972
    },
    {
      "type": "add",
      "id": "0539e47a0271e159",
      "item": {
        "type": "paragraph",
        "id": "0539e47a0271e159",
        "text": "[…]"
      },
      "after": "e6b28a5f9bec94b8",
      "date": 1660239148998
    },
    {
      "type": "add",
      "id": "0c282c9e58a22188",
      "item": {
        "type": "paragraph",
        "id": "0c282c9e58a22188",
        "text": "In [[Smalltalk]], boundary crossing is achieved by sending messages. Note how object encapsulation provides a distinction that separates the contents of the object from its environment. There is no way to directly interact with the interior of an object’s boundary. Instead, messages must be sent to the object with the tacit understanding that answers will be reasonable4."
      },
      "after": "e6b28a5f9bec94b8",
      "date": 1660239184831
    },
    {
      "type": "edit",
      "id": "0c282c9e58a22188",
      "item": {
        "type": "paragraph",
        "id": "0c282c9e58a22188",
        "text": "In [[Smalltalk]], boundary crossing is achieved by sending messages. Note how object encapsulation provides a distinction that separates the contents of the object from its environment. There is no way to directly interact with the interior of an object’s boundary. Instead, messages must be sent to the object with the tacit understanding that answers will be reasonable."
      },
      "date": 1660239196431
    },
    {
      "type": "add",
      "id": "5cde9e6fcf59b02d",
      "item": {
        "type": "paragraph",
        "id": "5cde9e6fcf59b02d",
        "text": "Life, in a way, works that way too. Cells have boundaries that separate them from their environments, and it is only through messages that multicellular organisms organize themselves. If a cell does not provide reasonable answers, its relationship with the rest of the cells becomes unstable. Outcomes typically range from eviction, to the whole cell colony shutting down entirely. One way or the other, improper interaction is strongly selected against. The fact that in Smalltalk it is very easy to do damaging things, such as true become: false or Object become: nil, is sometimes used to argue that the lack of restrictions is actually a defect. This argument is most counterproductive. In fact, it is the lack of pessimism what makes Smalltalk powerful, as its scarce constraints let the cost of change stay low. Besides, were safeguards put in place against doing damage, they would immediately become dead code because they would never run after the program becomes stable. Thus, it is not worth to spend time or energy in them."
      },
      "after": "0c282c9e58a22188",
      "date": 1660239197622
    },
    {
      "type": "edit",
      "id": "5cde9e6fcf59b02d",
      "item": {
        "type": "paragraph",
        "id": "5cde9e6fcf59b02d",
        "text": "Life, in a way, works that way too. Cells have boundaries that separate them from their environments, and it is only through messages that multicellular organisms organize themselves. If a cell does not provide reasonable answers, its relationship with the rest of the cells becomes unstable. Outcomes typically range from eviction, to the whole cell colony shutting down entirely. One way or the other, improper interaction is strongly selected against. The fact that in Smalltalk it is very easy to do damaging things, such as `true become: false` or `Object become: nil`, is sometimes used to argue that the lack of restrictions is actually a defect. This argument is most counterproductive. In fact, it is the lack of pessimism what makes Smalltalk powerful, as its scarce constraints let the cost of change stay low. Besides, were safeguards put in place against doing damage, they would immediately become dead code because they would never run after the program becomes stable. Thus, it is not worth to spend time or energy in them."
      },
      "date": 1660239247337
    },
    {
      "type": "edit",
      "id": "5cde9e6fcf59b02d",
      "item": {
        "type": "markdown",
        "id": "5cde9e6fcf59b02d",
        "text": "Life, in a way, works that way too. Cells have boundaries that separate them from their environments, and it is only through messages that multicellular organisms organize themselves. If a cell does not provide reasonable answers, its relationship with the rest of the cells becomes unstable. Outcomes typically range from eviction, to the whole cell colony shutting down entirely. One way or the other, improper interaction is strongly selected against. The fact that in Smalltalk it is very easy to do damaging things, such as `true become: false` or `Object become: nil`, is sometimes used to argue that the lack of restrictions is actually a defect. This argument is most counterproductive. In fact, it is the lack of pessimism what makes Smalltalk powerful, as its scarce constraints let the cost of change stay low. Besides, were safeguards put in place against doing damage, they would immediately become dead code because they would never run after the program becomes stable. Thus, it is not worth to spend time or energy in them."
      },
      "date": 1660239248788
    }
  ]
}