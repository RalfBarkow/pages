{
  "title": "Mixins",
  "story": [
    {
      "type": "markdown",
      "id": "e0f9a51807e7149e",
      "text": "Mixins are functions that can be used to modularly extend [[Actor]] and [[Pawn]]s. The \"mix\" and \"with\" operators are semantic sugar to make the [[construct]]ion of the composite class look nice. – https://croquet.io/docs/worldcore/Overview.html"
    },
    {
      "type": "html",
      "text": "Mixins are coming from [[Flavors]]. Flavors is an early Object System for the [[Lisp Machine]].",
      "id": "4ca3e7b0d83eeeb0c9e4cbef3f4f2436"
    },
    {
      "type": "paragraph",
      "id": "a4da781c822c32f3",
      "text": "⇒ [[Mix In]] ⇒ [[Mixins and Javascript]]\n"
    },
    {
      "type": "markdown",
      "id": "ab21dfce3b2c7025",
      "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522649714174XxeBx:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] – When objects were new to me I dug deeply into both [[Favors]] (mixin lisp) and [[Smalltalk]]. Although I found the same delightful idiomatic application code in both, I found flavor's objects a jumble of variables while single-inheritance smalltalk object state was short and sweet.\n\nI also studied [[The Art of the Interpreter]] which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Mixins",
        "story": []
      },
      "date": 1654948034245
    },
    {
      "item": {
        "type": "factory",
        "id": "e0f9a51807e7149e"
      },
      "id": "e0f9a51807e7149e",
      "type": "add",
      "date": 1654948045632
    },
    {
      "type": "edit",
      "id": "e0f9a51807e7149e",
      "item": {
        "type": "paragraph",
        "id": "e0f9a51807e7149e",
        "text": "– https://croquet.io/docs/worldcore/Overview.html"
      },
      "date": 1654948048408
    },
    {
      "type": "edit",
      "id": "e0f9a51807e7149e",
      "item": {
        "type": "markdown",
        "id": "e0f9a51807e7149e",
        "text": "– https://croquet.io/docs/worldcore/Overview.html"
      },
      "date": 1654948049692
    },
    {
      "type": "edit",
      "id": "e0f9a51807e7149e",
      "item": {
        "type": "markdown",
        "id": "e0f9a51807e7149e",
        "text": "Mixins are functions that can be used to modularly extend actor and pawns. The \"mix\" and \"with\" operators are semantic sugar to make the construction of the composite class look nice. – https://croquet.io/docs/worldcore/Overview.html"
      },
      "date": 1655097686564
    },
    {
      "type": "edit",
      "id": "e0f9a51807e7149e",
      "item": {
        "type": "markdown",
        "id": "e0f9a51807e7149e",
        "text": "Mixins are functions that can be used to modularly extend [[Actor]] and [[Pawns]]. The \"mix\" and \"with\" operators are semantic sugar to make the construction of the composite class look nice. – https://croquet.io/docs/worldcore/Overview.html"
      },
      "date": 1655097709366
    },
    {
      "type": "edit",
      "id": "e0f9a51807e7149e",
      "item": {
        "type": "markdown",
        "id": "e0f9a51807e7149e",
        "text": "Mixins are functions that can be used to modularly extend [[Actor]] and [[Pawn]]s. The \"mix\" and \"with\" operators are semantic sugar to make the construction of the composite class look nice. – https://croquet.io/docs/worldcore/Overview.html"
      },
      "date": 1655097718532
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a4da781c822c32f3",
        "text": "⇒ [[Mixins and Javascript]]\n"
      },
      "id": "a4da781c822c32f3",
      "type": "add",
      "after": "e0f9a51807e7149e",
      "date": 1655230418606
    },
    {
      "type": "edit",
      "id": "a4da781c822c32f3",
      "item": {
        "type": "paragraph",
        "id": "a4da781c822c32f3",
        "text": "⇒ [[Mixins and Javascript]]\n"
      },
      "date": 1655230425453,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1655230431704
    },
    {
      "type": "edit",
      "id": "a4da781c822c32f3",
      "item": {
        "type": "paragraph",
        "id": "a4da781c822c32f3",
        "text": "⇒ [[Mix In]] ⇒ [[Mixins and Javascript]]\n"
      },
      "date": 1655230473085
    },
    {
      "item": {
        "type": "factory",
        "id": "ab21dfce3b2c7025"
      },
      "id": "ab21dfce3b2c7025",
      "type": "add",
      "after": "a4da781c822c32f3",
      "date": 1655270280836
    },
    {
      "type": "edit",
      "id": "ab21dfce3b2c7025",
      "item": {
        "type": "markdown",
        "id": "ab21dfce3b2c7025",
        "text": "Ward via [matrix]\nWhen objects were new to me I dug deeply into both favors (mixin lisp) and smalltalk. Although I found the same delightful idiomatic application code in both, I found flavor's objects a jumble of variables while single-inheritance smalltalk object state was short and sweet.\nWard\nI also studied The Art of the Interpreter which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible."
      },
      "date": 1655270292177
    },
    {
      "type": "edit",
      "id": "ab21dfce3b2c7025",
      "item": {
        "type": "markdown",
        "id": "ab21dfce3b2c7025",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522649714174XxeBx:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWhen objects were new to me I dug deeply into both favors (mixin lisp) and smalltalk. Although I found the same delightful idiomatic application code in both, I found flavor's objects a jumble of variables while single-inheritance smalltalk object state was short and sweet.\nWard\nI also studied The Art of the Interpreter which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible."
      },
      "date": 1655270304467
    },
    {
      "type": "edit",
      "id": "ab21dfce3b2c7025",
      "item": {
        "type": "markdown",
        "id": "ab21dfce3b2c7025",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522649714174XxeBx:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWhen objects were new to me I dug deeply into both [[Favors]] (mixin lisp) and [[Smalltalk]]. Although I found the same delightful idiomatic application code in both, I found flavor's objects a jumble of variables while single-inheritance smalltalk object state was short and sweet.\nWard\nI also studied The Art of the Interpreter which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible."
      },
      "date": 1655270336199
    },
    {
      "type": "edit",
      "id": "ab21dfce3b2c7025",
      "item": {
        "type": "markdown",
        "id": "ab21dfce3b2c7025",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522649714174XxeBx:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWhen objects were new to me I dug deeply into both [[Favors]] (mixin lisp) and [[Smalltalk]]. Although I found the same delightful idiomatic application code in both, I found flavor's objects a jumble of variables while single-inheritance smalltalk object state was short and sweet.\n\nI also studied The Art of the Interpreter which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible."
      },
      "date": 1655270347229
    },
    {
      "id": "4ca3e7b0d83eeeb0c9e4cbef3f4f2436",
      "type": "add",
      "item": {
        "type": "html",
        "text": "Mixins are coming from [[Flavors]]. Flavors is an early Object System for the [[Lisp Machine]].",
        "id": "4ca3e7b0d83eeeb0c9e4cbef3f4f2436"
      },
      "after": "a4da781c822c32f3",
      "date": 1655270463296
    },
    {
      "id": "4ca3e7b0d83eeeb0c9e4cbef3f4f2436",
      "type": "move",
      "order": [
        "e0f9a51807e7149e",
        "4ca3e7b0d83eeeb0c9e4cbef3f4f2436",
        "a4da781c822c32f3",
        "ab21dfce3b2c7025"
      ],
      "date": 1655270526643
    },
    {
      "type": "edit",
      "id": "e0f9a51807e7149e",
      "item": {
        "type": "markdown",
        "id": "e0f9a51807e7149e",
        "text": "Mixins are functions that can be used to modularly extend [[Actor]] and [[Pawn]]s. The \"mix\" and \"with\" operators are semantic sugar to make the [[construct]]ion of the composite class look nice. – https://croquet.io/docs/worldcore/Overview.html"
      },
      "date": 1655270566675
    },
    {
      "type": "edit",
      "id": "ab21dfce3b2c7025",
      "item": {
        "type": "markdown",
        "id": "ab21dfce3b2c7025",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522649714174XxeBx:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]– When objects were new to me I dug deeply into both [[Favors]] (mixin lisp) and [[Smalltalk]]. Although I found the same delightful idiomatic application code in both, I found flavor's objects a jumble of variables while single-inheritance smalltalk object state was short and sweet.\n\nI also studied The Art of the Interpreter which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible."
      },
      "date": 1655282994366
    },
    {
      "type": "edit",
      "id": "ab21dfce3b2c7025",
      "item": {
        "type": "markdown",
        "id": "ab21dfce3b2c7025",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522649714174XxeBx:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] – When objects were new to me I dug deeply into both [[Favors]] (mixin lisp) and [[Smalltalk]]. Although I found the same delightful idiomatic application code in both, I found flavor's objects a jumble of variables while single-inheritance smalltalk object state was short and sweet.\n\nI also studied The Art of the Interpreter which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible."
      },
      "date": 1655283000824
    },
    {
      "type": "edit",
      "id": "ab21dfce3b2c7025",
      "item": {
        "type": "markdown",
        "id": "ab21dfce3b2c7025",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$165522649714174XxeBx:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] – When objects were new to me I dug deeply into both [[Favors]] (mixin lisp) and [[Smalltalk]]. Although I found the same delightful idiomatic application code in both, I found flavor's objects a jumble of variables while single-inheritance smalltalk object state was short and sweet.\n\nI also studied [[The Art of the Interpreter]] which seemed much more careful about piling things into their mechanisms. A well formed scheme program would be the product of intention and care. A multi-xyz-inheritance solution is the sign of making some programmer's first thoughts expressible."
      },
      "date": 1655283038432
    }
  ]
}