{
  "title": "Apl Language",
  "story": [
    {
      "type": "html",
      "text": "Now that Unicode support in browsers is decent, I'll try to put the code examples in Unicode characters rather than images. Let me know if there are any problems. (I'm keeping the images for now - feel free to delete if the Unicode characters are sufficiently useful.) -- [[Marnen Laibow Koser]]",
      "id": "4d5cd9c3d782455a4933143c6f3553eb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5f4273baa1ec6d2b850239dd79626476"
    },
    {
      "type": "html",
      "text": "\nAPL stands for A Programming Language. It is an [[Array Oriented Language]].",
      "id": "9beaaf42fb87aa72e3fddd8e110f4d42"
    },
    {
      "type": "html",
      "text": "\nIts character set is a superset of ASCII. This is demonstrated in the following APL code sample:",
      "id": "bac6e2983c14d4db352aa45798a4b772"
    },
    {
      "type": "image",
      "url": "http://www.chilton.com/~jimw/a2ap1g1.gif",
      "text": "www.chilton.com",
      "id": "0d083bd8547da9967da0d849763f4c34"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "6a71db232aab4ec8b6f172a6f0c02bef"
    },
    {
      "type": "code",
      "text": " [6]    L←(Lι':')↓L←,L       ⍝ drop To:\n [7]    L←LJUST VTOM',',L    ⍝ mat with one entry per row\n [8]    S←¯1++/∧\\L≠'('       ⍝ length of address\n [9]    X←0⌈⌈/S\n [10]   L←S⌽(−(⍴L)+0,X)↑L    ⍝ align the (names)\n [11]   A←((1↑⍴L),X)↑L       ⍝ address\n [12]   N←0 1↓DLTB(0,X)↓L    ⍝ names)\n [13]   N←,'⍺',N\n [14]   N[(N='_')/ι⍴N]←' '   ⍝ change _ to blank\n [15]   N←0 ¯1↓RJUST VTOM N  ⍝ names\n [16]   S←+/∧\\' '≠⌽N         ⍝ length of last word in name",
      "id": "60a08aac2a70d042eee03ef62629b595"
    },
    {
      "type": "html",
      "text": "\nReserved words are preceded by a special symbol (called quad). ",
      "id": "3e3a39125dd585ea23c92b8d211c483d"
    },
    {
      "type": "html",
      "text": "\nThere are no precedence rules in APL: statements are simply read from right to left. For example,",
      "id": "d8d0eef1d399feaad35657695b6fc1ee"
    },
    {
      "type": "html",
      "text": "\n12 - 3 + 4 yields 5, same as 12 - (3 + 4)",
      "id": "793318f5db07b6b1e55720fc221286a3"
    },
    {
      "type": "html",
      "text": "\nContributors: DanB (Dan Baronet, or Dan Bernstein?)",
      "id": "2ba72b64f0be0d5b31da46c1c92d9185"
    },
    {
      "type": "html",
      "text": "<i>While APL is executed right to left, it is read from left to right. -- [[Jim Russell]]</i> ",
      "id": "d79a51b96595ceae140d8059e5814817"
    },
    {
      "type": "html",
      "text": "\nThe intent was to use 'function'al notation i.e. f(g(x)).",
      "id": "f7c15e27a08003eef8ab72b80d965a37"
    },
    {
      "type": "html",
      "text": "\nCould someone give a list of what the characters in the above example mean? I remember some of them, and a number of them are described in [http://www.users.cloud9.net/~bradmcc/APL.html www.users.cloud9.net]. However, I have no idea what LJUST, RJUST or VTOM mean - I don't believe they are APL primitives, but are either functions written in APL, or else functions from some language which replaces APL characters with alphanumeric strings. -- [[Paul Morrison]]",
      "id": "15a75e755e5adb620debcc4ec757cf77"
    },
    {
      "type": "html",
      "text": " Paul: You are right that LJUST & RJUST and VTOM are not primitives. They appear to be variable names or function names, based on the preceding syntax. My guess is the RJUST and Ljst are Left and Right Justify, respectively, but I'm not sure what VTOM is. -- [[Hans Wobbe]]",
      "id": "78e3aa404697ef5c8df55190058f84f9"
    },
    {
      "type": "html",
      "text": " Hans: VTOM is a well-known function (at least to SHARP APL users), the name means Vector TO Matrix. It basically takes a delimiter, followed by a vector which contains lines delimited by that delimiter, and returns a padded matrix with each line as a separate row, each preceded by the delimiter. That is, VTOM '.ab.cde' is the matrix 2 4 {shape} '.ab .cde' -- Leigh Clayton",
      "id": "58067aeeb7f4bda1d729c1e25567ea63"
    },
    {
      "type": "html",
      "text": " Thanks, Leigh. I guess that became a popular function name after my days as IPSA. I still have the primitives code and never did get around to setting it up as a function. Perhaps one of the reasons that I do enjoy following the Object Oriented discussions around here, is that I seem to be guilty of a lot of such over-sights.  By the way, It's nice to have our paths cross, once again. Regards, - 'hwo'.",
      "id": "2fbbf0d01928eedfbf26fa19366f1883"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5f4273baa1ec6d2b850239dd79626476"
    },
    {
      "type": "html",
      "text": "<i>Note that 12-3+4 = 12-(3+4) = 5 is exactly opposite from the way [[Smalltalk Language]] does it. In Smalltalk, 12-3+4 = (12-3)+4 = 13.</i>",
      "id": "fad18614f1d572dc5c28417049a53d81"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5f4273baa1ec6d2b850239dd79626476"
    },
    {
      "type": "html",
      "text": "APL was developed by [[Ken Iverson]] who has since gone on to direct his attention to the language J [[[Jay Language]]].",
      "id": "0303e25749933358a02d2b3d0cb17a3c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5f4273baa1ec6d2b850239dd79626476"
    },
    {
      "type": "html",
      "text": "\nYes, you needed a special keyboard, and yes, you need a special terminal, since at that time we are talking about VT100 and variants, mostly IBM terminals actually, but I can't remember their names.",
      "id": "4600467592d01dac4064f3750a0790c0"
    },
    {
      "type": "html",
      "text": " Did you know there is a [[Uni Code]] range devoted to APL symbols? See if any of the code points U2336-U237A have glyphs in your favorite fonts.",
      "id": "1d83b2a97a97240a5c4ee8f7446b801e"
    },
    {
      "type": "html",
      "text": "\nI found some keyboard designs in Google. The one I used was similar to the most complex.",
      "id": "8e87cc28472f570c908265ca9cb430e6"
    },
    {
      "type": "image",
      "url": "http://www.unb.ca/web/transpo/mynet/aplkbd.gif",
      "text": "www.unb.ca",
      "id": "e42bf82599849a8999b95b9740355941"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "6a71db232aab4ec8b6f172a6f0c02bef"
    },
    {
      "type": "image",
      "url": "http://www.rexswain.com/aplkeyb.gif",
      "text": "www.rexswain.com",
      "id": "930a60445ce6ea9335b9ea880320fd84"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "6a71db232aab4ec8b6f172a6f0c02bef"
    },
    {
      "type": "html",
      "text": "\nAlthough difficult to get used to, APL was Fun. I know of a large bank in Brazil that had a team of economists just doing what we call today [[Data Mining]] in APL 20 years ago.",
      "id": "bffc666569b039192a52d06041d28f27"
    },
    {
      "type": "html",
      "text": "\nAs I understand, if you had an extended APL, you needed an extended keyboard also. IBM must have loved this language at that time.",
      "id": "9dbcae3930d0efff4235798c5016bd4f"
    },
    {
      "type": "html",
      "text": "\nAn APL program to find all [[Prime Number]]s <= an integer:",
      "id": "7fe56f011ee6ab9e043969d460e19496"
    },
    {
      "type": "image",
      "url": "http://www.users.cloud9.net/~bradmcc/jpg/apl_PRIMES.jpg",
      "text": "www.users.cloud9.net",
      "id": "8df5075b144622c987c9c262092ca41e"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "6a71db232aab4ec8b6f172a6f0c02bef"
    },
    {
      "type": "html",
      "text": "PRIMES :<br>(~R∈R○.×R)/R←1↓ιR",
      "id": "d34fdeb19d53ea299d6f2060d0a30832"
    },
    {
      "type": "html",
      "text": "from: [http://www.users.cloud9.net/~bradmcc/APL.html www.users.cloud9.net]",
      "id": "8d58f403edaefd96b217423375e2232a"
    },
    {
      "type": "html",
      "text": "\nSo Apple stole the option key trick from APL? That makes the fact that Windows doesn't use it even more disappointing than it already was.",
      "id": "a5c403ea1d1c3d2db73e4e48b4b985ad"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5f4273baa1ec6d2b850239dd79626476"
    },
    {
      "type": "html",
      "text": "\nAPL was originally created to [[Define Document Specify]] the IBM 360...",
      "id": "7e6c638ef359f705ad14ff2c556ababe"
    },
    {
      "type": "html",
      "text": " No; Iverson published a formal spec for the 360 in 1964, but APL was not developed for that purpose. His 1962 book A Programming Language specifically says in the preface that he developed it over severals years teaching graduate courses, as a mathematical notation for discussing algorithms.",
      "id": "132cb6ccba26e271b33236ffad3f232d"
    },
    {
      "type": "html",
      "text": " The notation used in the book used semantically significant fonts, superscripts, subscripts, and such that were replaced by more practically implementable notations in the later implementation of it as a programming language.",
      "id": "31d6b94d12ce8627c42cf061bb91ba1f"
    },
    {
      "type": "html",
      "text": "...and it was close enough to being an actual computer language that an interpreter was implemented for it (and a special type ball on the ibm selectric was created to represent it).",
      "id": "6ca7cbd1d32ad794fc6cab7a2585db8b"
    },
    {
      "type": "html",
      "text": "\nAPL was once used to prototype SQL - SQL could be looked at as an attempt to extract the data-storage aspects of APL into a form which is generally useful.",
      "id": "94d950da8cfd88886f9137c1bb3ba30c"
    },
    {
      "type": "html",
      "text": " You could look at it that way as a metaphor or something, but that's not to say that that's where SQL got those aspects of its nature. Those aspects came from Codd's database theory research.",
      "id": "8b36efa3b17c6e7067715c3fa7893c88"
    },
    {
      "type": "html",
      "text": " <i>I don't see these as contradictory. Using APL to implement a prototype has little or nothing to do with where SQL as a language came from.</i>",
      "id": "e430b919ed27e8c656740a48d947a0d2"
    },
    {
      "type": "html",
      "text": " They *are* contradictory, because in terms of objective documented history, SQL was *not* \"an attempt to extract the data-storage aspects of APL into a form which is generally useful\". It just wasn't, and there aren't any citations out there to support that speculation. That's why I said (trying to be gentle) that you could say that as a \"metaphor\", because it sure as hell isn't historical fact.",
      "id": "cf887a428d0c08a4ee13a8f2a1979324"
    },
    {
      "type": "html",
      "text": " I'm a fan of APL, it doesn't need anyone to lie (or even exaggerate) about its historical contributions to justify its worth.",
      "id": "ea578d5dbc8223cddf80b717b90c0c75"
    },
    {
      "type": "html",
      "text": "\nAPL is now a dead language: the user community is so small that you almost never hear about it",
      "id": "bc2c2a2430c92275df42b435b7e632b3"
    },
    {
      "type": "html",
      "text": " That's a subjective judgement, not an objective fact. I am not part of the APL/J/K community, but I hear about it repeatedly over the years. The APL community was <b>always</b> a small one. The introduction of the J and K dialects seem to have kindled some new interest.",
      "id": "d8b631a7a36fb7039abb09e7e7c187be"
    },
    {
      "type": "html",
      "text": "...and there are so many divergent variants that little is held in common beyond the basic language.",
      "id": "99dfcf4ac920d3524ec62f7a4e3bec8d"
    },
    {
      "type": "html",
      "text": " I believe that there are only 3 many variants, that they have actually quite a bit in common, and that it is meaningless to say \"beyond the basic language\", because it sounds like you're saying they do have the basic language in common, and are thus contradicting yourself in the very same phrase in which in make your claim.",
      "id": "3341b1ee7d6d53839223b4335f5e7755"
    },
    {
      "type": "html",
      "text": "\nStill, there are lessons to be learned from APL which could benefit even the most cutting edge technologies.",
      "id": "72caee871d00e54cdd993579f56f9da0"
    },
    {
      "type": "html",
      "text": " Agreed.",
      "id": "abaedbfe6cf271be8ee1081351567715"
    },
    {
      "type": "html",
      "text": " I, too, agree. The Apl community I was privileged to join in 1972, was one of the most educational environments I have encountered in my career. And while it has always been small, its core members undoubtedly have a lot that they could contribute. If there is any interest, I would be pleased to try to find some of the following and try to recruit them to post here. I think we would be the better for it. Specifically:",
      "id": "9cbf828b062c643d7fb7578089388483"
    },
    {
      "type": "html",
      "text": " [[Bob Bernecky]]",
      "id": "16aa0afb60370dded96cdf8956792090"
    },
    {
      "type": "html",
      "text": " [[David Keith]] (large databases in APL)",
      "id": "a61f8d3c4378b4535a134e36fce30773"
    },
    {
      "type": "html",
      "text": " [[Eric Iverson]] (oldest [[Ken Iverson]] son who managed [[Ip Sharp]]'s 'zoo' - the developers.)",
      "id": "61b5e705687e609b65fd7cc30b870aa7"
    },
    {
      "type": "html",
      "text": " [[Leslie Goldsmith]] (666 mailbox)",
      "id": "821043197c8d59010eb8e9a3869660ec"
    },
    {
      "type": "html",
      "text": " [[Roger Moore]] (original programming implementation team that won the [[Grace Hopper]] award)",
      "id": "d710852fa9b1ebfbdc343ef8d10bd284"
    },
    {
      "type": "html",
      "text": " ... -- [[Hans Wobbe]]",
      "id": "2a7f11d11713c6b4fdb823601bce4af3"
    },
    {
      "type": "html",
      "text": "\nFor example: one of the lessons of UML is that it's a mistake to introduce aggregations or multiplicities early on. These are details which are added later. And yet, \"object-oriented\" languages force you to learn design patterns dedicated to dealing with these concepts. In APL, on the other hand, you can use the same code to deal with 1:1, 1:n, n:1, or n:n multiplicities (yes, n:n is really 1:1 multiplicity, but you wouldn't know that by the way you have to represent it in a classic OO language). n:m (outer join) multiplicities take a slightly different approach, but we're talking a minor syntactic difference here, not a design pattern which requires the creation of several different classes.",
      "id": "4808f5871fc89e35f6bb8df72aca251e"
    },
    {
      "type": "html",
      "text": " This seems interesting but I'm not 100% sure of what you're driving at.",
      "id": "6b9fa092dae7eea489ae21b61f5b98bc"
    },
    {
      "type": "html",
      "text": "\nWhen you look at a body of OO code (like .NET, or J2EE), and compare it to a body of APL code (like what you see at [http://www.kx.com/download/documentation.htm www.kx.com], you can't help but realize that there are lessons about [[Code Reuse]] which we've yet to integrate into the mainstream.",
      "id": "583be4336836ff96767b86a20f5ff260"
    },
    {
      "type": "html",
      "text": " I'm willing to believe you, but which lessons are those?",
      "id": "8faefb8cc3ec9ef601284f05008b04dd"
    },
    {
      "type": "html",
      "text": "-- [[Anonymous Donor]]",
      "id": "a33c80f6682024383452be9a7f83cc54"
    },
    {
      "type": "html",
      "text": " The lesson is the point above about n:n multiplicity being the same thing as 1:1, 1:n, n:1, et al, in APL. In Java, operations on an Array of Foos are different from operations on a single Foo. In APL and members of its family, the code doesn't change at all when you move from a single Foo to a collection of Foos. It's a striking and powerful difference.",
      "id": "0f64de86cf6feaf6fcbc0edff2b84c28"
    },
    {
      "type": "html",
      "text": " That's certainly a powerful feature of APL and its descendants, but how does it have anything to do with code reuse? --[[Marnen Laibow Koser]]",
      "id": "99fd177a988ace741eb17b34f24756ec"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5f4273baa1ec6d2b850239dd79626476"
    },
    {
      "type": "html",
      "text": "<b>Reading Material</b>",
      "id": "d1c9f798cf3e1d83c9014c1f2f8308c5"
    },
    {
      "type": "html",
      "text": " <i>Lack of libraries in APL</i> [http://old.vector.org.uk.novaredirects.com/v201/lib201.htm old.vector.org.uk.novaredirects.com]",
      "id": "6566f65515a6119c299b05f93691f459"
    },
    {
      "type": "html",
      "text": " <i>APL wiki hosted on [[Moin Moin]]</i> [http://wiki.vector.org.uk/mywiki/ wiki.vector.org.uk]",
      "id": "f5a2e65c8ca3f514b3eac17a49d57764"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5f4273baa1ec6d2b850239dd79626476"
    },
    {
      "type": "html",
      "text": "<b>[[Apl Language]] [[Quick Questions]]</b>",
      "id": "a00eb869bca4c99da3ed97689806181a"
    },
    {
      "type": "html",
      "text": "<b>Q</b> Anyone know where to get a \"free\" [[Apl Language]] processor that works in [[Windows Xp]], can communicate with a [[Com Component]] (or activex) that has GUI, and also links up to databases via ODBC or OLEDB drivers?\nAny dialect will do, though I prefer basic APL with ability to remap keyboard to using APL keys",
      "id": "8f16105ff72f3b6678dae32e2b493b76"
    },
    {
      "type": "html",
      "text": "<b>A</b> Did you try [http://www.jsoftware.com www.jsoftware.com], home of the <i>\"free\" [[Jay Language]] interpreter</i> [[[Randy Mac Donald]]]",
      "id": "f0be478f2c0e6edafd9a9aa830ab4b4e"
    },
    {
      "type": "html",
      "text": " No and I assume you have tried and liked it? If all I have to sacrifice in using J is the lack of greek characters, but if it has a reasonable GUI for [[Windows Xp]] and ODBC, then I will try it. BTW, does the version work on [[Pocket Pc]] as well? That would indeed be good. Thanks from [[David Liu]]",
      "id": "0c0bea9de1fc54c13e7566c190bafb05"
    },
    {
      "type": "html",
      "text": "<b>A</b> Workstation APL2 Time Limited Version of APL2 \nLast time I looked, the limitation is accumulated CPU time, so one can use this over a period of days, weeks, or months.\n[http://www14.software.ibm.com/webapp/download/preconfig.jsp?id=2002-12-22+21%3A26%3A37.604297R&cat=&fam=&s=p&S_TACT=104AH%20W42&S_CMP= www14.software.ibm.com]",
      "id": "8cbce2e9d3d24205e9251f714f8a1247"
    },
    {
      "type": "html",
      "text": "[IBM.com ... Products & services > Software > Software Development] \ngerry lowry gerry.lowry@abilitybusinesscomputerservices.com",
      "id": "3b21dc01184af6c49c43d2437867928b"
    },
    {
      "type": "html",
      "text": "(Wednesday 2004-11-03 03:15 Eastern Time)",
      "id": "8657fb2cae83220d656057ba6d9dba61"
    },
    {
      "type": "html",
      "text": " Thanks for information. What is the exact time limit? I must have missed it when looking at that web page. Also do I get a clean uninstall?",
      "id": "0c3778519b2972d60892cb510f1c720d"
    },
    {
      "type": "html",
      "text": "-- sorry, I do not know the exact time limit ... regardless, because it's in CPU allocation, unless you stuck in a loop, you should get a substantial number of days, weeks, or months to play with it ... as for clean uninstall, I am not that sure ... one would hope that IBM can perform a clean uninstall but unfortunately, I can not speak on their behalf. As for me, I never uninstalled it, so I do not have an answer from my personal experience. -- gerry [http://abilitybusinesscomputerservices.com abilitybusinesscomputerservices.com]",
      "id": "e1f5b1cb13dc1cb3ed3d2ec7a92b0fd4"
    },
    {
      "type": "html",
      "text": "<b>A</b> I've found NARS2000 at [http://www.nars2000.org/ www.nars2000.org] to be a solid player. It's a Windows executable but it does easily run using Wine on Linux as suggested on it's page. See also the \"What it's Not\" section to know where it's aimed. I certainly have used it to play around and attempt to rekindle my 30 year old skills (and I'm only 45 so what kind of geek does that make me?)",
      "id": "c37fcbc01d16c1f77477d82a5f87fd8b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5f4273baa1ec6d2b850239dd79626476"
    },
    {
      "type": "html",
      "text": "See also [[Joel Moses On Apl And Lisp]], [[Jay Language]], [[Kay Language]], [[Aplus Language]]",
      "id": "7a3853c2502f1ab3281d2c58cf9a3120"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "5f4273baa1ec6d2b850239dd79626476"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]]",
      "id": "d22497612ed816a5c9d736d6c793b28c"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?AplLanguage c2.com]",
      "id": "0a993abc1535e5f2d9b02364411e2527"
    }
  ],
  "journal": [
    {
      "date": 1383434515000,
      "id": "2011e0cad7df76f2a8331ae7e980507c",
      "type": "create",
      "item": {
        "title": "Apl Language",
        "story": [
          {
            "type": "html",
            "text": "Now that Unicode support in browsers is decent, I'll try to put the code examples in Unicode characters rather than images. Let me know if there are any problems. (I'm keeping the images for now - feel free to delete if the Unicode characters are sufficiently useful.) -- [[Marnen Laibow Koser]]",
            "id": "4d5cd9c3d782455a4933143c6f3553eb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5f4273baa1ec6d2b850239dd79626476"
          },
          {
            "type": "html",
            "text": "\nAPL stands for A Programming Language. It is an [[Array Oriented Language]].",
            "id": "9beaaf42fb87aa72e3fddd8e110f4d42"
          },
          {
            "type": "html",
            "text": "\nIts character set is a superset of ASCII. This is demonstrated in the following APL code sample:",
            "id": "bac6e2983c14d4db352aa45798a4b772"
          },
          {
            "type": "image",
            "url": "http://www.chilton.com/~jimw/a2ap1g1.gif",
            "text": "www.chilton.com",
            "id": "0d083bd8547da9967da0d849763f4c34"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "6a71db232aab4ec8b6f172a6f0c02bef"
          },
          {
            "type": "code",
            "text": " [6]    L←(Lι':')↓L←,L       ⍝ drop To:\n [7]    L←LJUST VTOM',',L    ⍝ mat with one entry per row\n [8]    S←¯1++/∧\\L≠'('       ⍝ length of address\n [9]    X←0⌈⌈/S\n [10]   L←S⌽(−(⍴L)+0,X)↑L    ⍝ align the (names)\n [11]   A←((1↑⍴L),X)↑L       ⍝ address\n [12]   N←0 1↓DLTB(0,X)↓L    ⍝ names)\n [13]   N←,'⍺',N\n [14]   N[(N='_')/ι⍴N]←' '   ⍝ change _ to blank\n [15]   N←0 ¯1↓RJUST VTOM N  ⍝ names\n [16]   S←+/∧\\' '≠⌽N         ⍝ length of last word in name",
            "id": "60a08aac2a70d042eee03ef62629b595"
          },
          {
            "type": "html",
            "text": "\nReserved words are preceded by a special symbol (called quad). ",
            "id": "3e3a39125dd585ea23c92b8d211c483d"
          },
          {
            "type": "html",
            "text": "\nThere are no precedence rules in APL: statements are simply read from right to left. For example,",
            "id": "d8d0eef1d399feaad35657695b6fc1ee"
          },
          {
            "type": "html",
            "text": "\n12 - 3 + 4 yields 5, same as 12 - (3 + 4)",
            "id": "793318f5db07b6b1e55720fc221286a3"
          },
          {
            "type": "html",
            "text": "\nContributors: DanB (Dan Baronet, or Dan Bernstein?)",
            "id": "2ba72b64f0be0d5b31da46c1c92d9185"
          },
          {
            "type": "html",
            "text": "<i>While APL is executed right to left, it is read from left to right. -- [[Jim Russell]]</i> ",
            "id": "d79a51b96595ceae140d8059e5814817"
          },
          {
            "type": "html",
            "text": "\nThe intent was to use 'function'al notation i.e. f(g(x)).",
            "id": "f7c15e27a08003eef8ab72b80d965a37"
          },
          {
            "type": "html",
            "text": "\nCould someone give a list of what the characters in the above example mean? I remember some of them, and a number of them are described in [http://www.users.cloud9.net/~bradmcc/APL.html www.users.cloud9.net]. However, I have no idea what LJUST, RJUST or VTOM mean - I don't believe they are APL primitives, but are either functions written in APL, or else functions from some language which replaces APL characters with alphanumeric strings. -- [[Paul Morrison]]",
            "id": "15a75e755e5adb620debcc4ec757cf77"
          },
          {
            "type": "html",
            "text": " Paul: You are right that LJUST & RJUST and VTOM are not primitives. They appear to be variable names or function names, based on the preceding syntax. My guess is the RJUST and Ljst are Left and Right Justify, respectively, but I'm not sure what VTOM is. -- [[Hans Wobbe]]",
            "id": "78e3aa404697ef5c8df55190058f84f9"
          },
          {
            "type": "html",
            "text": " Hans: VTOM is a well-known function (at least to SHARP APL users), the name means Vector TO Matrix. It basically takes a delimiter, followed by a vector which contains lines delimited by that delimiter, and returns a padded matrix with each line as a separate row, each preceded by the delimiter. That is, VTOM '.ab.cde' is the matrix 2 4 {shape} '.ab .cde' -- Leigh Clayton",
            "id": "58067aeeb7f4bda1d729c1e25567ea63"
          },
          {
            "type": "html",
            "text": " Thanks, Leigh. I guess that became a popular function name after my days as IPSA. I still have the primitives code and never did get around to setting it up as a function. Perhaps one of the reasons that I do enjoy following the Object Oriented discussions around here, is that I seem to be guilty of a lot of such over-sights.  By the way, It's nice to have our paths cross, once again. Regards, - 'hwo'.",
            "id": "2fbbf0d01928eedfbf26fa19366f1883"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5f4273baa1ec6d2b850239dd79626476"
          },
          {
            "type": "html",
            "text": "<i>Note that 12-3+4 = 12-(3+4) = 5 is exactly opposite from the way [[Smalltalk Language]] does it. In Smalltalk, 12-3+4 = (12-3)+4 = 13.</i>",
            "id": "fad18614f1d572dc5c28417049a53d81"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5f4273baa1ec6d2b850239dd79626476"
          },
          {
            "type": "html",
            "text": "APL was developed by [[Ken Iverson]] who has since gone on to direct his attention to the language J [[[Jay Language]]].",
            "id": "0303e25749933358a02d2b3d0cb17a3c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5f4273baa1ec6d2b850239dd79626476"
          },
          {
            "type": "html",
            "text": "\nYes, you needed a special keyboard, and yes, you need a special terminal, since at that time we are talking about VT100 and variants, mostly IBM terminals actually, but I can't remember their names.",
            "id": "4600467592d01dac4064f3750a0790c0"
          },
          {
            "type": "html",
            "text": " Did you know there is a [[Uni Code]] range devoted to APL symbols? See if any of the code points U2336-U237A have glyphs in your favorite fonts.",
            "id": "1d83b2a97a97240a5c4ee8f7446b801e"
          },
          {
            "type": "html",
            "text": "\nI found some keyboard designs in Google. The one I used was similar to the most complex.",
            "id": "8e87cc28472f570c908265ca9cb430e6"
          },
          {
            "type": "image",
            "url": "http://www.unb.ca/web/transpo/mynet/aplkbd.gif",
            "text": "www.unb.ca",
            "id": "e42bf82599849a8999b95b9740355941"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "6a71db232aab4ec8b6f172a6f0c02bef"
          },
          {
            "type": "image",
            "url": "http://www.rexswain.com/aplkeyb.gif",
            "text": "www.rexswain.com",
            "id": "930a60445ce6ea9335b9ea880320fd84"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "6a71db232aab4ec8b6f172a6f0c02bef"
          },
          {
            "type": "html",
            "text": "\nAlthough difficult to get used to, APL was Fun. I know of a large bank in Brazil that had a team of economists just doing what we call today [[Data Mining]] in APL 20 years ago.",
            "id": "bffc666569b039192a52d06041d28f27"
          },
          {
            "type": "html",
            "text": "\nAs I understand, if you had an extended APL, you needed an extended keyboard also. IBM must have loved this language at that time.",
            "id": "9dbcae3930d0efff4235798c5016bd4f"
          },
          {
            "type": "html",
            "text": "\nAn APL program to find all [[Prime Number]]s <= an integer:",
            "id": "7fe56f011ee6ab9e043969d460e19496"
          },
          {
            "type": "image",
            "url": "http://www.users.cloud9.net/~bradmcc/jpg/apl_PRIMES.jpg",
            "text": "www.users.cloud9.net",
            "id": "8df5075b144622c987c9c262092ca41e"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "6a71db232aab4ec8b6f172a6f0c02bef"
          },
          {
            "type": "html",
            "text": "PRIMES :<br>(~R∈R○.×R)/R←1↓ιR",
            "id": "d34fdeb19d53ea299d6f2060d0a30832"
          },
          {
            "type": "html",
            "text": "from: [http://www.users.cloud9.net/~bradmcc/APL.html www.users.cloud9.net]",
            "id": "8d58f403edaefd96b217423375e2232a"
          },
          {
            "type": "html",
            "text": "\nSo Apple stole the option key trick from APL? That makes the fact that Windows doesn't use it even more disappointing than it already was.",
            "id": "a5c403ea1d1c3d2db73e4e48b4b985ad"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5f4273baa1ec6d2b850239dd79626476"
          },
          {
            "type": "html",
            "text": "\nAPL was originally created to [[Define Document Specify]] the IBM 360...",
            "id": "7e6c638ef359f705ad14ff2c556ababe"
          },
          {
            "type": "html",
            "text": " No; Iverson published a formal spec for the 360 in 1964, but APL was not developed for that purpose. His 1962 book A Programming Language specifically says in the preface that he developed it over severals years teaching graduate courses, as a mathematical notation for discussing algorithms.",
            "id": "132cb6ccba26e271b33236ffad3f232d"
          },
          {
            "type": "html",
            "text": " The notation used in the book used semantically significant fonts, superscripts, subscripts, and such that were replaced by more practically implementable notations in the later implementation of it as a programming language.",
            "id": "31d6b94d12ce8627c42cf061bb91ba1f"
          },
          {
            "type": "html",
            "text": "...and it was close enough to being an actual computer language that an interpreter was implemented for it (and a special type ball on the ibm selectric was created to represent it).",
            "id": "6ca7cbd1d32ad794fc6cab7a2585db8b"
          },
          {
            "type": "html",
            "text": "\nAPL was once used to prototype SQL - SQL could be looked at as an attempt to extract the data-storage aspects of APL into a form which is generally useful.",
            "id": "94d950da8cfd88886f9137c1bb3ba30c"
          },
          {
            "type": "html",
            "text": " You could look at it that way as a metaphor or something, but that's not to say that that's where SQL got those aspects of its nature. Those aspects came from Codd's database theory research.",
            "id": "8b36efa3b17c6e7067715c3fa7893c88"
          },
          {
            "type": "html",
            "text": " <i>I don't see these as contradictory. Using APL to implement a prototype has little or nothing to do with where SQL as a language came from.</i>",
            "id": "e430b919ed27e8c656740a48d947a0d2"
          },
          {
            "type": "html",
            "text": " They *are* contradictory, because in terms of objective documented history, SQL was *not* \"an attempt to extract the data-storage aspects of APL into a form which is generally useful\". It just wasn't, and there aren't any citations out there to support that speculation. That's why I said (trying to be gentle) that you could say that as a \"metaphor\", because it sure as hell isn't historical fact.",
            "id": "cf887a428d0c08a4ee13a8f2a1979324"
          },
          {
            "type": "html",
            "text": " I'm a fan of APL, it doesn't need anyone to lie (or even exaggerate) about its historical contributions to justify its worth.",
            "id": "ea578d5dbc8223cddf80b717b90c0c75"
          },
          {
            "type": "html",
            "text": "\nAPL is now a dead language: the user community is so small that you almost never hear about it",
            "id": "bc2c2a2430c92275df42b435b7e632b3"
          },
          {
            "type": "html",
            "text": " That's a subjective judgement, not an objective fact. I am not part of the APL/J/K community, but I hear about it repeatedly over the years. The APL community was <b>always</b> a small one. The introduction of the J and K dialects seem to have kindled some new interest.",
            "id": "d8b631a7a36fb7039abb09e7e7c187be"
          },
          {
            "type": "html",
            "text": "...and there are so many divergent variants that little is held in common beyond the basic language.",
            "id": "99dfcf4ac920d3524ec62f7a4e3bec8d"
          },
          {
            "type": "html",
            "text": " I believe that there are only 3 many variants, that they have actually quite a bit in common, and that it is meaningless to say \"beyond the basic language\", because it sounds like you're saying they do have the basic language in common, and are thus contradicting yourself in the very same phrase in which in make your claim.",
            "id": "3341b1ee7d6d53839223b4335f5e7755"
          },
          {
            "type": "html",
            "text": "\nStill, there are lessons to be learned from APL which could benefit even the most cutting edge technologies.",
            "id": "72caee871d00e54cdd993579f56f9da0"
          },
          {
            "type": "html",
            "text": " Agreed.",
            "id": "abaedbfe6cf271be8ee1081351567715"
          },
          {
            "type": "html",
            "text": " I, too, agree. The Apl community I was privileged to join in 1972, was one of the most educational environments I have encountered in my career. And while it has always been small, its core members undoubtedly have a lot that they could contribute. If there is any interest, I would be pleased to try to find some of the following and try to recruit them to post here. I think we would be the better for it. Specifically:",
            "id": "9cbf828b062c643d7fb7578089388483"
          },
          {
            "type": "html",
            "text": " [[Bob Bernecky]]",
            "id": "16aa0afb60370dded96cdf8956792090"
          },
          {
            "type": "html",
            "text": " [[David Keith]] (large databases in APL)",
            "id": "a61f8d3c4378b4535a134e36fce30773"
          },
          {
            "type": "html",
            "text": " [[Eric Iverson]] (oldest [[Ken Iverson]] son who managed [[Ip Sharp]]'s 'zoo' - the developers.)",
            "id": "61b5e705687e609b65fd7cc30b870aa7"
          },
          {
            "type": "html",
            "text": " [[Leslie Goldsmith]] (666 mailbox)",
            "id": "821043197c8d59010eb8e9a3869660ec"
          },
          {
            "type": "html",
            "text": " [[Roger Moore]] (original programming implementation team that won the [[Grace Hopper]] award)",
            "id": "d710852fa9b1ebfbdc343ef8d10bd284"
          },
          {
            "type": "html",
            "text": " ... -- [[Hans Wobbe]]",
            "id": "2a7f11d11713c6b4fdb823601bce4af3"
          },
          {
            "type": "html",
            "text": "\nFor example: one of the lessons of UML is that it's a mistake to introduce aggregations or multiplicities early on. These are details which are added later. And yet, \"object-oriented\" languages force you to learn design patterns dedicated to dealing with these concepts. In APL, on the other hand, you can use the same code to deal with 1:1, 1:n, n:1, or n:n multiplicities (yes, n:n is really 1:1 multiplicity, but you wouldn't know that by the way you have to represent it in a classic OO language). n:m (outer join) multiplicities take a slightly different approach, but we're talking a minor syntactic difference here, not a design pattern which requires the creation of several different classes.",
            "id": "4808f5871fc89e35f6bb8df72aca251e"
          },
          {
            "type": "html",
            "text": " This seems interesting but I'm not 100% sure of what you're driving at.",
            "id": "6b9fa092dae7eea489ae21b61f5b98bc"
          },
          {
            "type": "html",
            "text": "\nWhen you look at a body of OO code (like .NET, or J2EE), and compare it to a body of APL code (like what you see at [http://www.kx.com/download/documentation.htm www.kx.com], you can't help but realize that there are lessons about [[Code Reuse]] which we've yet to integrate into the mainstream.",
            "id": "583be4336836ff96767b86a20f5ff260"
          },
          {
            "type": "html",
            "text": " I'm willing to believe you, but which lessons are those?",
            "id": "8faefb8cc3ec9ef601284f05008b04dd"
          },
          {
            "type": "html",
            "text": "-- [[Anonymous Donor]]",
            "id": "a33c80f6682024383452be9a7f83cc54"
          },
          {
            "type": "html",
            "text": " The lesson is the point above about n:n multiplicity being the same thing as 1:1, 1:n, n:1, et al, in APL. In Java, operations on an Array of Foos are different from operations on a single Foo. In APL and members of its family, the code doesn't change at all when you move from a single Foo to a collection of Foos. It's a striking and powerful difference.",
            "id": "0f64de86cf6feaf6fcbc0edff2b84c28"
          },
          {
            "type": "html",
            "text": " That's certainly a powerful feature of APL and its descendants, but how does it have anything to do with code reuse? --[[Marnen Laibow Koser]]",
            "id": "99fd177a988ace741eb17b34f24756ec"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5f4273baa1ec6d2b850239dd79626476"
          },
          {
            "type": "html",
            "text": "<b>Reading Material</b>",
            "id": "d1c9f798cf3e1d83c9014c1f2f8308c5"
          },
          {
            "type": "html",
            "text": " <i>Lack of libraries in APL</i> [http://old.vector.org.uk.novaredirects.com/v201/lib201.htm old.vector.org.uk.novaredirects.com]",
            "id": "6566f65515a6119c299b05f93691f459"
          },
          {
            "type": "html",
            "text": " <i>APL wiki hosted on [[Moin Moin]]</i> [http://wiki.vector.org.uk/mywiki/ wiki.vector.org.uk]",
            "id": "f5a2e65c8ca3f514b3eac17a49d57764"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5f4273baa1ec6d2b850239dd79626476"
          },
          {
            "type": "html",
            "text": "<b>[[Apl Language]] [[Quick Questions]]</b>",
            "id": "a00eb869bca4c99da3ed97689806181a"
          },
          {
            "type": "html",
            "text": "<b>Q</b> Anyone know where to get a \"free\" [[Apl Language]] processor that works in [[Windows Xp]], can communicate with a [[Com Component]] (or activex) that has GUI, and also links up to databases via ODBC or OLEDB drivers?\nAny dialect will do, though I prefer basic APL with ability to remap keyboard to using APL keys",
            "id": "8f16105ff72f3b6678dae32e2b493b76"
          },
          {
            "type": "html",
            "text": "<b>A</b> Did you try [http://www.jsoftware.com www.jsoftware.com], home of the <i>\"free\" [[Jay Language]] interpreter</i> [[[Randy Mac Donald]]]",
            "id": "f0be478f2c0e6edafd9a9aa830ab4b4e"
          },
          {
            "type": "html",
            "text": " No and I assume you have tried and liked it? If all I have to sacrifice in using J is the lack of greek characters, but if it has a reasonable GUI for [[Windows Xp]] and ODBC, then I will try it. BTW, does the version work on [[Pocket Pc]] as well? That would indeed be good. Thanks from [[David Liu]]",
            "id": "0c0bea9de1fc54c13e7566c190bafb05"
          },
          {
            "type": "html",
            "text": "<b>A</b> Workstation APL2 Time Limited Version of APL2 \nLast time I looked, the limitation is accumulated CPU time, so one can use this over a period of days, weeks, or months.\n[http://www14.software.ibm.com/webapp/download/preconfig.jsp?id=2002-12-22+21%3A26%3A37.604297R&cat=&fam=&s=p&S_TACT=104AH%20W42&S_CMP= www14.software.ibm.com]",
            "id": "8cbce2e9d3d24205e9251f714f8a1247"
          },
          {
            "type": "html",
            "text": "[IBM.com ... Products & services > Software > Software Development] \ngerry lowry gerry.lowry@abilitybusinesscomputerservices.com",
            "id": "3b21dc01184af6c49c43d2437867928b"
          },
          {
            "type": "html",
            "text": "(Wednesday 2004-11-03 03:15 Eastern Time)",
            "id": "8657fb2cae83220d656057ba6d9dba61"
          },
          {
            "type": "html",
            "text": " Thanks for information. What is the exact time limit? I must have missed it when looking at that web page. Also do I get a clean uninstall?",
            "id": "0c3778519b2972d60892cb510f1c720d"
          },
          {
            "type": "html",
            "text": "-- sorry, I do not know the exact time limit ... regardless, because it's in CPU allocation, unless you stuck in a loop, you should get a substantial number of days, weeks, or months to play with it ... as for clean uninstall, I am not that sure ... one would hope that IBM can perform a clean uninstall but unfortunately, I can not speak on their behalf. As for me, I never uninstalled it, so I do not have an answer from my personal experience. -- gerry [http://abilitybusinesscomputerservices.com abilitybusinesscomputerservices.com]",
            "id": "e1f5b1cb13dc1cb3ed3d2ec7a92b0fd4"
          },
          {
            "type": "html",
            "text": "<b>A</b> I've found NARS2000 at [http://www.nars2000.org/ www.nars2000.org] to be a solid player. It's a Windows executable but it does easily run using Wine on Linux as suggested on it's page. See also the \"What it's Not\" section to know where it's aimed. I certainly have used it to play around and attempt to rekindle my 30 year old skills (and I'm only 45 so what kind of geek does that make me?)",
            "id": "c37fcbc01d16c1f77477d82a5f87fd8b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5f4273baa1ec6d2b850239dd79626476"
          },
          {
            "type": "html",
            "text": "See also [[Joel Moses On Apl And Lisp]], [[Jay Language]], [[Kay Language]], [[Aplus Language]]",
            "id": "7a3853c2502f1ab3281d2c58cf9a3120"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "5f4273baa1ec6d2b850239dd79626476"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]]",
            "id": "d22497612ed816a5c9d736d6c793b28c"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?AplLanguage c2.com]",
            "id": "0a993abc1535e5f2d9b02364411e2527"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1708081549748
    }
  ]
}