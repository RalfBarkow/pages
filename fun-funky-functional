{
  "title": "Fun, Funky, Functional",
  "story": [
    {
      "type": "markdown",
      "id": "bfe0122865a4a0ac",
      "text": "Fun, Funky, Functional: The Pursuit of Better User Interfaces for Programming"
    },
    {
      "type": "video",
      "id": "a3d83347d8f36b56",
      "text": "YOUTUBE 1gGd7pKSpRM"
    },
    {
      "type": "markdown",
      "id": "4328b05abba6d117",
      "text": "https://youtu.be/1gGd7pKSpRM?t=374"
    },
    {
      "type": "markdown",
      "id": "1c6b20ad0b07d091",
      "text": "https://web.archive.org/web/20210426052545/http://www.pl-enthusiast.net/2015/05/"
    },
    {
      "type": "markdown",
      "id": "14e55fcd146b366b",
      "text": "Functional Programming by Demonstration for SVG\n"
    },
    {
      "type": "markdown",
      "id": "8363531cc1cf99e3",
      "text": "B. Hempel, J. Lubin, and R. Chugh, “Sketch-n-Sketch: Output-Directed Programming for SVG,” in Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology, New York, NY, USA, Oct. 2019, pp. 281–292. doi: 10.1145/3332165.3347925.\n"
    },
    {
      "type": "markdown",
      "id": "740af81526fc4a72",
      "text": "> For creative tasks, programmers face a choice: Use a GUI and sacrifice flexibility, or write code and sacrifice ergonomics?\n>\nTo obtain both flexibility and ease of use, a number of systems have explored a workflow that we call output-directed programming. In this paradigm, direct manipulation of the program's graphical output corresponds to writing code in a general-purpose programming language, and edits not possible with the mouse can still be enacted through ordinary text edits to the program. Such capabilities provide hope for integrating graphical user interfaces into what are currently text-centric programming environments.\n>\nTo further advance this vision, we present a variety of new output-directed techniques that extend the expressive power of Sketch-n-Sketch, an output-directed programming system for creating programs that generate vector graphics. To enable output-directed interaction at more stages of program construction, we expose intermediate execution products for manipulation and we present a mechanism for contextual drawing. Looking forward to output-directed programming beyond vector graphics, we also offer generic refactorings through the GUI, and our techniques employ a domain-agnostic provenance tracing scheme.\n>\nTo demonstrate the improved expressiveness, we implement a dozen new parametric designs in Sketch-n-Sketch without text-based edits. Among these is the first demonstration of building a recursive function in an output-directed programming setting.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Fun, Funky, Functional",
        "story": []
      },
      "date": 1630935831330
    },
    {
      "item": {
        "type": "factory",
        "id": "bfe0122865a4a0ac"
      },
      "id": "bfe0122865a4a0ac",
      "type": "add",
      "date": 1630935833261
    },
    {
      "type": "edit",
      "id": "bfe0122865a4a0ac",
      "item": {
        "type": "markdown",
        "id": "bfe0122865a4a0ac",
        "text": "Fun, Funky, Functional: The Pursuit of Better User Interfaces for Programming"
      },
      "date": 1630935835265
    },
    {
      "item": {
        "type": "factory",
        "id": "a3d83347d8f36b56"
      },
      "id": "a3d83347d8f36b56",
      "type": "add",
      "after": "bfe0122865a4a0ac",
      "date": 1630935846071
    },
    {
      "type": "edit",
      "id": "a3d83347d8f36b56",
      "item": {
        "type": "video",
        "id": "a3d83347d8f36b56",
        "text": "YOUTUBE 1gGd7pKSpRM"
      },
      "date": 1630935857538
    },
    {
      "item": {
        "type": "factory",
        "id": "1c6b20ad0b07d091"
      },
      "id": "1c6b20ad0b07d091",
      "type": "add",
      "after": "a3d83347d8f36b56",
      "date": 1630936015168
    },
    {
      "type": "edit",
      "id": "1c6b20ad0b07d091",
      "item": {
        "type": "markdown",
        "id": "1c6b20ad0b07d091",
        "text": "https://web.archive.org/web/20210426052545/http://www.pl-enthusiast.net/2015/05/"
      },
      "date": 1630936017628
    },
    {
      "item": {
        "type": "factory",
        "id": "4328b05abba6d117"
      },
      "id": "4328b05abba6d117",
      "type": "add",
      "after": "1c6b20ad0b07d091",
      "date": 1630936023852
    },
    {
      "type": "edit",
      "id": "4328b05abba6d117",
      "item": {
        "type": "markdown",
        "id": "4328b05abba6d117",
        "text": "https://youtu.be/1gGd7pKSpRM"
      },
      "date": 1630936027720
    },
    {
      "id": "4328b05abba6d117",
      "type": "move",
      "order": [
        "bfe0122865a4a0ac",
        "a3d83347d8f36b56",
        "4328b05abba6d117",
        "1c6b20ad0b07d091"
      ],
      "date": 1630936029770
    },
    {
      "type": "edit",
      "id": "4328b05abba6d117",
      "item": {
        "type": "markdown",
        "id": "4328b05abba6d117",
        "text": "https://youtu.be/1gGd7pKSpRM?t=374"
      },
      "date": 1630936054867
    },
    {
      "item": {
        "type": "factory",
        "id": "14e55fcd146b366b"
      },
      "id": "14e55fcd146b366b",
      "type": "add",
      "after": "1c6b20ad0b07d091",
      "date": 1630936210841
    },
    {
      "type": "edit",
      "id": "14e55fcd146b366b",
      "item": {
        "type": "markdown",
        "id": "14e55fcd146b366b",
        "text": "Functional Programming by Demonstration for SVG"
      },
      "date": 1630936216175
    },
    {
      "type": "edit",
      "id": "14e55fcd146b366b",
      "item": {
        "type": "markdown",
        "id": "14e55fcd146b366b",
        "text": "Functional Programming by Demonstration for SVG\n"
      },
      "date": 1630936301818
    },
    {
      "type": "add",
      "id": "21903bac51a10dce",
      "item": {
        "type": "markdown",
        "id": "21903bac51a10dce",
        "text": "B. Hempel, J. Lubin, and R. Chugh, “Sketch-n-Sketch: Output-Directed Programming for SVG,” in Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology, New York, NY, USA, Oct. 2019, pp. 281–292. doi: 10.1145/3332165.3347925.\n"
      },
      "after": "14e55fcd146b366b",
      "date": 1630936308170
    },
    {
      "type": "edit",
      "id": "21903bac51a10dce",
      "item": {
        "type": "markdown",
        "id": "21903bac51a10dce",
        "text": "B. Hempel, J. Lubin, and R. Chugh, “Sketch-n-Sketch: Output-Directed Programming for SVG,” in Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology, New York, NY, USA, Oct. 2019, pp. 281–292. doi: 10.1145/3332165.3347925.\n\n> \n\nFor creative tasks, programmers face a choice: Use a GUI and sacrifice flexibility, or write code and sacrifice ergonomics?\n\nTo obtain both flexibility and ease of use, a number of systems have explored a workflow that we call output-directed programming. In this paradigm, direct manipulation of the program's graphical output corresponds to writing code in a general-purpose programming language, and edits not possible with the mouse can still be enacted through ordinary text edits to the program. Such capabilities provide hope for integrating graphical user interfaces into what are currently text-centric programming environments.\n\nTo further advance this vision, we present a variety of new output-directed techniques that extend the expressive power of Sketch-n-Sketch, an output-directed programming system for creating programs that generate vector graphics. To enable output-directed interaction at more stages of program construction, we expose intermediate execution products for manipulation and we present a mechanism for contextual drawing. Looking forward to output-directed programming beyond vector graphics, we also offer generic refactorings through the GUI, and our techniques employ a domain-agnostic provenance tracing scheme.\n\nTo demonstrate the improved expressiveness, we implement a dozen new parametric designs in Sketch-n-Sketch without text-based edits. Among these is the first demonstration of building a recursive function in an output-directed programming setting.\n"
      },
      "date": 1630936330236
    },
    {
      "item": {
        "type": "factory",
        "id": "740af81526fc4a72"
      },
      "id": "740af81526fc4a72",
      "type": "add",
      "after": "21903bac51a10dce",
      "date": 1630936335554
    },
    {
      "type": "edit",
      "id": "740af81526fc4a72",
      "item": {
        "type": "markdown",
        "id": "740af81526fc4a72",
        "text": "> \n\nFor creative tasks, programmers face a choice: Use a GUI and sacrifice flexibility, or write code and sacrifice ergonomics?\n\nTo obtain both flexibility and ease of use, a number of systems have explored a workflow that we call output-directed programming. In this paradigm, direct manipulation of the program's graphical output corresponds to writing code in a general-purpose programming language, and edits not possible with the mouse can still be enacted through ordinary text edits to the program. Such capabilities provide hope for integrating graphical user interfaces into what are currently text-centric programming environments.\n\nTo further advance this vision, we present a variety of new output-directed techniques that extend the expressive power of Sketch-n-Sketch, an output-directed programming system for creating programs that generate vector graphics. To enable output-directed interaction at more stages of program construction, we expose intermediate execution products for manipulation and we present a mechanism for contextual drawing. Looking forward to output-directed programming beyond vector graphics, we also offer generic refactorings through the GUI, and our techniques employ a domain-agnostic provenance tracing scheme.\n\nTo demonstrate the improved expressiveness, we implement a dozen new parametric designs in Sketch-n-Sketch without text-based edits. Among these is the first demonstration of building a recursive function in an output-directed programming setting.\n"
      },
      "date": 1630936340188
    },
    {
      "type": "remove",
      "id": "21903bac51a10dce",
      "date": 1630936347653
    },
    {
      "type": "edit",
      "id": "740af81526fc4a72",
      "item": {
        "type": "markdown",
        "id": "740af81526fc4a72",
        "text": "> For creative tasks, programmers face a choice: Use a GUI and sacrifice flexibility, or write code and sacrifice ergonomics?\n\nTo obtain both flexibility and ease of use, a number of systems have explored a workflow that we call output-directed programming. In this paradigm, direct manipulation of the program's graphical output corresponds to writing code in a general-purpose programming language, and edits not possible with the mouse can still be enacted through ordinary text edits to the program. Such capabilities provide hope for integrating graphical user interfaces into what are currently text-centric programming environments.\n\nTo further advance this vision, we present a variety of new output-directed techniques that extend the expressive power of Sketch-n-Sketch, an output-directed programming system for creating programs that generate vector graphics. To enable output-directed interaction at more stages of program construction, we expose intermediate execution products for manipulation and we present a mechanism for contextual drawing. Looking forward to output-directed programming beyond vector graphics, we also offer generic refactorings through the GUI, and our techniques employ a domain-agnostic provenance tracing scheme.\n\nTo demonstrate the improved expressiveness, we implement a dozen new parametric designs in Sketch-n-Sketch without text-based edits. Among these is the first demonstration of building a recursive function in an output-directed programming setting.\n"
      },
      "date": 1630936351801
    },
    {
      "type": "edit",
      "id": "740af81526fc4a72",
      "item": {
        "type": "markdown",
        "id": "740af81526fc4a72",
        "text": "> For creative tasks, programmers face a choice: Use a GUI and sacrifice flexibility, or write code and sacrifice ergonomics?\n>\nTo obtain both flexibility and ease of use, a number of systems have explored a workflow that we call output-directed programming. In this paradigm, direct manipulation of the program's graphical output corresponds to writing code in a general-purpose programming language, and edits not possible with the mouse can still be enacted through ordinary text edits to the program. Such capabilities provide hope for integrating graphical user interfaces into what are currently text-centric programming environments.\n\nTo further advance this vision, we present a variety of new output-directed techniques that extend the expressive power of Sketch-n-Sketch, an output-directed programming system for creating programs that generate vector graphics. To enable output-directed interaction at more stages of program construction, we expose intermediate execution products for manipulation and we present a mechanism for contextual drawing. Looking forward to output-directed programming beyond vector graphics, we also offer generic refactorings through the GUI, and our techniques employ a domain-agnostic provenance tracing scheme.\n\nTo demonstrate the improved expressiveness, we implement a dozen new parametric designs in Sketch-n-Sketch without text-based edits. Among these is the first demonstration of building a recursive function in an output-directed programming setting.\n"
      },
      "date": 1630936368228
    },
    {
      "type": "edit",
      "id": "740af81526fc4a72",
      "item": {
        "type": "markdown",
        "id": "740af81526fc4a72",
        "text": "> For creative tasks, programmers face a choice: Use a GUI and sacrifice flexibility, or write code and sacrifice ergonomics?\n>\nTo obtain both flexibility and ease of use, a number of systems have explored a workflow that we call output-directed programming. In this paradigm, direct manipulation of the program's graphical output corresponds to writing code in a general-purpose programming language, and edits not possible with the mouse can still be enacted through ordinary text edits to the program. Such capabilities provide hope for integrating graphical user interfaces into what are currently text-centric programming environments.\n>\nTo further advance this vision, we present a variety of new output-directed techniques that extend the expressive power of Sketch-n-Sketch, an output-directed programming system for creating programs that generate vector graphics. To enable output-directed interaction at more stages of program construction, we expose intermediate execution products for manipulation and we present a mechanism for contextual drawing. Looking forward to output-directed programming beyond vector graphics, we also offer generic refactorings through the GUI, and our techniques employ a domain-agnostic provenance tracing scheme.\n\nTo demonstrate the improved expressiveness, we implement a dozen new parametric designs in Sketch-n-Sketch without text-based edits. Among these is the first demonstration of building a recursive function in an output-directed programming setting.\n"
      },
      "date": 1630936448033
    },
    {
      "type": "edit",
      "id": "740af81526fc4a72",
      "item": {
        "type": "markdown",
        "id": "740af81526fc4a72",
        "text": "> For creative tasks, programmers face a choice: Use a GUI and sacrifice flexibility, or write code and sacrifice ergonomics?\n>\nTo obtain both flexibility and ease of use, a number of systems have explored a workflow that we call output-directed programming. In this paradigm, direct manipulation of the program's graphical output corresponds to writing code in a general-purpose programming language, and edits not possible with the mouse can still be enacted through ordinary text edits to the program. Such capabilities provide hope for integrating graphical user interfaces into what are currently text-centric programming environments.\n>\nTo further advance this vision, we present a variety of new output-directed techniques that extend the expressive power of Sketch-n-Sketch, an output-directed programming system for creating programs that generate vector graphics. To enable output-directed interaction at more stages of program construction, we expose intermediate execution products for manipulation and we present a mechanism for contextual drawing. Looking forward to output-directed programming beyond vector graphics, we also offer generic refactorings through the GUI, and our techniques employ a domain-agnostic provenance tracing scheme.\n>\nTo demonstrate the improved expressiveness, we implement a dozen new parametric designs in Sketch-n-Sketch without text-based edits. Among these is the first demonstration of building a recursive function in an output-directed programming setting.\n"
      },
      "date": 1630936481234
    },
    {
      "type": "add",
      "id": "8363531cc1cf99e3",
      "item": {
        "type": "markdown",
        "id": "8363531cc1cf99e3",
        "text": "B. Hempel, J. Lubin, and R. Chugh, “Sketch-n-Sketch: Output-Directed Programming for SVG,” in Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology, New York, NY, USA, Oct. 2019, pp. 281–292. doi: 10.1145/3332165.3347925.\n"
      },
      "after": "14e55fcd146b366b",
      "date": 1630936513511
    }
  ]
}