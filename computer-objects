{
  "title": "Computer Objects",
  "story": [
    {
      "type": "markdown",
      "id": "954667de61822d10",
      "text": "Computer objects are only models of those of the real world. The UML user guides goes further in stating that *a model is a simplification of reality* and we should emphasize that it is *only that*. OOP modeling is so powerful, however, that people tend to forgot about it and only think in terms of real world objects. ([https://github.com/SquareBracketAssociates/PolyMath-book github], Numerical Methods Book (January 2016 snapshot), p. 2)"
    },
    {
      "type": "paragraph",
      "id": "ad0d55d3e23030a8",
      "text": "Mathematical objects use polymorphism in that one operation\ncan be defined on several entities. For example, addition and multiplication are\ndefined for numbers, vectors, matrices, polynomials — as we shall see in this\nbook — and many other mathematical entities. Common properties can be\nestablished as an abstract concept — a group e.g.— without the need to specify\na concrete implementation. Such concepts can then be used to prove a given\nproperty for a concrete case. All this looks very similar to class hierarchies,\nmethods and inheritance."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Computer Objects",
        "story": []
      },
      "date": 1639312499495
    },
    {
      "item": {
        "type": "factory",
        "id": "954667de61822d10"
      },
      "id": "954667de61822d10",
      "type": "add",
      "date": 1639312512905
    },
    {
      "type": "edit",
      "id": "954667de61822d10",
      "item": {
        "type": "paragraph",
        "id": "954667de61822d10",
        "text": "Computer objects are only models of those of the real world. The UML user guides goes further in stating that a model is a simplification of reality and we should emphasize that it is only that. OOP modeling is so powerful, however, that people tend to forgot about it and only think in terms\nof real world objects."
      },
      "date": 1639312521723
    },
    {
      "type": "edit",
      "id": "954667de61822d10",
      "item": {
        "type": "paragraph",
        "id": "954667de61822d10",
        "text": "Computer objects are only models of those of the real world. The UML user guides goes further in stating that a model is a simplification of reality and we should emphasize that it is only that. OOP modeling is so powerful, however, that people tend to forgot about it and only think in terms of real world objects."
      },
      "date": 1639312525654
    },
    {
      "type": "edit",
      "id": "954667de61822d10",
      "item": {
        "type": "paragraph",
        "id": "954667de61822d10",
        "text": "Computer objects are only models of those of the real world. The UML user guides goes further in stating that a model is a simplification of reality and we should emphasize that it is only that. OOP modeling is so powerful, however, that people tend to forgot about it and only think in terms of real world objects. ([https://github.com/SquareBracketAssociates/PolyMath-book github] p. )"
      },
      "date": 1639312599250
    },
    {
      "type": "edit",
      "id": "954667de61822d10",
      "item": {
        "type": "paragraph",
        "id": "954667de61822d10",
        "text": "Computer objects are only models of those of the real world. The UML user guides goes further in stating that a model is a simplification of reality and we should emphasize that it is only that. OOP modeling is so powerful, however, that people tend to forgot about it and only think in terms of real world objects. ([https://github.com/SquareBracketAssociates/PolyMath-book github] p. 2)"
      },
      "date": 1639312610870
    },
    {
      "type": "edit",
      "id": "954667de61822d10",
      "item": {
        "type": "paragraph",
        "id": "954667de61822d10",
        "text": "Computer objects are only models of those of the real world. The UML user guides goes further in stating that a model is a simplification of reality and we should emphasize that it is only that. OOP modeling is so powerful, however, that people tend to forgot about it and only think in terms of real world objects. ([https://github.com/SquareBracketAssociates/PolyMath-book github], p. 2)"
      },
      "date": 1639312616350
    },
    {
      "type": "edit",
      "id": "954667de61822d10",
      "item": {
        "type": "paragraph",
        "id": "954667de61822d10",
        "text": "Computer objects are only models of those of the real world. The UML user guides goes further in stating that a model is a simplification of reality and we should emphasize that it is only that. OOP modeling is so powerful, however, that people tend to forgot about it and only think in terms of real world objects. ([https://github.com/SquareBracketAssociates/PolyMath-book github], Numerical Methods Book (January 2016 snapshot), p. 2)"
      },
      "date": 1639312635229
    },
    {
      "type": "edit",
      "id": "954667de61822d10",
      "item": {
        "type": "paragraph",
        "id": "954667de61822d10",
        "text": "Computer objects are only models of those of the real world. The UML user guides goes further in stating that **a model is a simplification of reality** and we should emphasize that it is only that. OOP modeling is so powerful, however, that people tend to forgot about it and only think in terms of real world objects. ([https://github.com/SquareBracketAssociates/PolyMath-book github], Numerical Methods Book (January 2016 snapshot), p. 2)"
      },
      "date": 1639312673646
    },
    {
      "type": "edit",
      "id": "954667de61822d10",
      "item": {
        "type": "markdown",
        "id": "954667de61822d10",
        "text": "Computer objects are only models of those of the real world. The UML user guides goes further in stating that **a model is a simplification of reality** and we should emphasize that it is only that. OOP modeling is so powerful, however, that people tend to forgot about it and only think in terms of real world objects. ([https://github.com/SquareBracketAssociates/PolyMath-book github], Numerical Methods Book (January 2016 snapshot), p. 2)"
      },
      "date": 1639312674808
    },
    {
      "type": "edit",
      "id": "954667de61822d10",
      "item": {
        "type": "markdown",
        "id": "954667de61822d10",
        "text": "Computer objects are only models of those of the real world. The UML user guides goes further in stating that *a model is a simplification of reality* and we should emphasize that it is only that. OOP modeling is so powerful, however, that people tend to forgot about it and only think in terms of real world objects. ([https://github.com/SquareBracketAssociates/PolyMath-book github], Numerical Methods Book (January 2016 snapshot), p. 2)"
      },
      "date": 1639312680309
    },
    {
      "type": "edit",
      "id": "954667de61822d10",
      "item": {
        "type": "markdown",
        "id": "954667de61822d10",
        "text": "Computer objects are only models of those of the real world. The UML user guides goes further in stating that *a model is a simplification of reality* and we should emphasize that it is *only that*. OOP modeling is so powerful, however, that people tend to forgot about it and only think in terms of real world objects. ([https://github.com/SquareBracketAssociates/PolyMath-book github], Numerical Methods Book (January 2016 snapshot), p. 2)"
      },
      "date": 1639312713014
    },
    {
      "item": {
        "type": "factory",
        "id": "ad0d55d3e23030a8"
      },
      "id": "ad0d55d3e23030a8",
      "type": "add",
      "after": "954667de61822d10",
      "date": 1639315331220
    },
    {
      "type": "edit",
      "id": "ad0d55d3e23030a8",
      "item": {
        "type": "paragraph",
        "id": "ad0d55d3e23030a8",
        "text": "Mathematical objects use polymorphism in that one operation\ncan be defined on several entities. For example, addition and multiplication are\ndefined for numbers, vectors, matrices, polynomials — as we shall see in this\nbook — and many other mathematical entities. Common properties can be\nestablished as an abstract concept — a group e.g.— without the need to specify\na concrete implementation. Such concepts can then be used to prove a given\nproperty for a concrete case. All this looks very similar to class hierarchies,\nmethods and inheritance."
      },
      "date": 1639315333609
    }
  ]
}