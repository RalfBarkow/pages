{
  "title": "Automerge",
  "story": [
    {
      "type": "html",
      "id": "27ccb5e169ce7c27",
      "text": "<center><img width=\"100%\" scr=\"https://github.com/automerge/automerge/raw/main/img/sign.svg\"></center>"
    },
    {
      "type": "paragraph",
      "id": "169df34ec7484ba7",
      "text": "[[Automerge]] is a library of data structures for building collaborative applications in JavaScript. [https://github.com/automerge/automerge github]\n\n"
    },
    {
      "type": "html",
      "id": "892cc484783732be",
      "text": "<center><img width=\"100%\" src=\"https://github.com/automerge/automerge/raw/main/img/sign.svg\"></center>"
    },
    {
      "type": "paragraph",
      "id": "c9c2cd3ed0dcf04d",
      "text": "A common approach to building JavaScript apps involves keeping the state of your application in model objects, such as a JSON document. For example, imagine you are developing a task-tracking app in which each task is represented by a card."
    },
    {
      "type": "markdown",
      "id": "cd9473cd7f2a2e05",
      "text": "## Features and design principles\n\n- **Network-agnostic**. Automerge is a pure data structure library that does not care about what\n  kind of network you use. It works with any connection-oriented network protocol, which could be\n  client/server (e.g. WebSocket), peer-to-peer (e.g. WebRTC), or entirely local (e.g. Bluetooth).\n  Bindings to particular networking technologies are handled by separate libraries;\n  see the section on [Sending and receiving changes](https://github.com/automerge/automerge#sending-and-receiving-changes) for examples.\n  It also works with unidirectional messaging: you can send an Automerge file as email attachment,\n  or on a USB drive in the mail, and the recipient will be able to merge it with their version.\n- **Immutable state**. An Automerge object is an immutable snapshot of the application state at one\n  point in time. Whenever you make a change, or merge in a change that came from the network, you\n  get back a new state object reflecting that change. This fact makes Automerge compatible with the\n  functional reactive programming style of [React](https://reactjs.org) and\n  [Redux](http://redux.js.org/), for example.\n- **Automatic merging**. Automerge is a _Conflict-Free Replicated Data Type_ ([CRDT](https://crdt.tech/)),\n  which allows concurrent changes on different devices to be merged automatically without requiring any\n  central server. It is based on [academic research on JSON CRDTs](https://arxiv.org/abs/1608.03960), but\n  the details of the algorithm in Automerge are different from the JSON CRDT paper, and we are\n  planning to publish more detail about it in the future.\n- **Fairly portable**. We're not yet making an effort to support old platforms, but we have tested\n  Automerge in Node.js, Chrome, Firefox, Safari, MS Edge, and [Electron](https://electron.atom.io/).\n  For TypeScript users, Automerge comes with\n  [type definitions](https://github.com/automerge/automerge/blob/main/@types/automerge/index.d.ts)\n  that allow you to use Automerge in a type-safe way."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Automerge",
        "story": []
      },
      "date": 1641371316125
    },
    {
      "item": {
        "type": "html",
        "id": "27ccb5e169ce7c27",
        "text": "<center><img width=\"100%\" scr=\"https://github.com/automerge/automerge/raw/main/img/sign.svg\"></center>"
      },
      "id": "27ccb5e169ce7c27",
      "type": "add",
      "date": 1641371317554
    },
    {
      "type": "edit",
      "id": "27ccb5e169ce7c27",
      "item": {
        "type": "html",
        "id": "27ccb5e169ce7c27",
        "text": "<center><img width=\"100%\" scr=\"https://github.com/automerge/automerge/raw/main/img/sign.svg\"></center>"
      },
      "date": 1641371348402
    },
    {
      "item": {
        "type": "html",
        "id": "892cc484783732be",
        "text": "<center><img width=\"100%\" src=\"https://github.com/automerge/automerge/raw/main/img/sign.svg\"></center>"
      },
      "id": "892cc484783732be",
      "type": "add",
      "after": "27ccb5e169ce7c27",
      "date": 1641371352288
    },
    {
      "type": "edit",
      "id": "892cc484783732be",
      "item": {
        "type": "html",
        "id": "892cc484783732be",
        "text": "<center><img width=\"100%\" src=\"https://github.com/automerge/automerge/raw/main/img/sign.svg\"></center>"
      },
      "date": 1641371397055
    },
    {
      "item": {
        "type": "factory",
        "id": "a68eb706b31ee7d5"
      },
      "id": "a68eb706b31ee7d5",
      "type": "add",
      "after": "892cc484783732be",
      "date": 1641371404959
    },
    {
      "id": "169df34ec7484ba7",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "169df34ec7484ba7",
        "text": "[[Automerge]] is a library of data structures for building collaborative applications in JavaScript.\n\nA common approach to building JavaScript apps involves keeping the state of your application in model objects, such as a JSON document. For example, imagine you are developing a task-tracking app in which each task is represented by a card."
      },
      "after": "892cc484783732be",
      "date": 1641371407914
    },
    {
      "id": "169df34ec7484ba7",
      "type": "move",
      "order": [
        "27ccb5e169ce7c27",
        "169df34ec7484ba7",
        "892cc484783732be",
        "a68eb706b31ee7d5"
      ],
      "date": 1641371409339
    },
    {
      "type": "edit",
      "id": "169df34ec7484ba7",
      "item": {
        "type": "paragraph",
        "id": "169df34ec7484ba7",
        "text": "[[Automerge]] is a library of data structures for building collaborative applications in JavaScript.\n\n"
      },
      "date": 1641371419441
    },
    {
      "id": "892cc484783732be",
      "type": "move",
      "order": [
        "27ccb5e169ce7c27",
        "169df34ec7484ba7",
        "892cc484783732be",
        "c9c2cd3ed0dcf04d",
        "a68eb706b31ee7d5"
      ],
      "date": 1641371421366,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1641371424804
    },
    {
      "type": "add",
      "id": "c9c2cd3ed0dcf04d",
      "item": {
        "type": "paragraph",
        "id": "c9c2cd3ed0dcf04d",
        "text": "A common approach to building JavaScript apps involves keeping the state of your application in model objects, such as a JSON document. For example, imagine you are developing a task-tracking app in which each task is represented by a card."
      },
      "after": "169df34ec7484ba7",
      "date": 1641371426080
    },
    {
      "type": "remove",
      "id": "a68eb706b31ee7d5",
      "date": 1641371429490
    },
    {
      "type": "edit",
      "id": "169df34ec7484ba7",
      "item": {
        "type": "paragraph",
        "id": "169df34ec7484ba7",
        "text": "[[Automerge]] is a library of data structures for building collaborative applications in JavaScript. [https://github.com/automerge/automerge github]\n\n"
      },
      "date": 1641371472041
    },
    {
      "id": "892cc484783732be",
      "type": "move",
      "order": [
        "27ccb5e169ce7c27",
        "169df34ec7484ba7",
        "892cc484783732be",
        "c9c2cd3ed0dcf04d"
      ],
      "date": 1641371502953
    },
    {
      "item": {
        "type": "factory",
        "id": "cd9473cd7f2a2e05"
      },
      "id": "cd9473cd7f2a2e05",
      "type": "add",
      "after": "c9c2cd3ed0dcf04d",
      "date": 1641371611919
    },
    {
      "type": "edit",
      "id": "cd9473cd7f2a2e05",
      "item": {
        "type": "markdown",
        "id": "cd9473cd7f2a2e05",
        "text": "## Features and design principles\n\n- **Network-agnostic**. Automerge is a pure data structure library that does not care about what\n  kind of network you use. It works with any connection-oriented network protocol, which could be\n  client/server (e.g. WebSocket), peer-to-peer (e.g. WebRTC), or entirely local (e.g. Bluetooth).\n  Bindings to particular networking technologies are handled by separate libraries;\n  see the section on [Sending and receiving changes](#sending-and-receiving-changes) for examples.\n  It also works with unidirectional messaging: you can send an Automerge file as email attachment,\n  or on a USB drive in the mail, and the recipient will be able to merge it with their version.\n- **Immutable state**. An Automerge object is an immutable snapshot of the application state at one\n  point in time. Whenever you make a change, or merge in a change that came from the network, you\n  get back a new state object reflecting that change. This fact makes Automerge compatible with the\n  functional reactive programming style of [React](https://reactjs.org) and\n  [Redux](http://redux.js.org/), for example.\n- **Automatic merging**. Automerge is a _Conflict-Free Replicated Data Type_ ([CRDT](https://crdt.tech/)),\n  which allows concurrent changes on different devices to be merged automatically without requiring any\n  central server. It is based on [academic research on JSON CRDTs](https://arxiv.org/abs/1608.03960), but\n  the details of the algorithm in Automerge are different from the JSON CRDT paper, and we are\n  planning to publish more detail about it in the future.\n- **Fairly portable**. We're not yet making an effort to support old platforms, but we have tested\n  Automerge in Node.js, Chrome, Firefox, Safari, MS Edge, and [Electron](https://electron.atom.io/).\n  For TypeScript users, Automerge comes with\n  [type definitions](https://github.com/automerge/automerge/blob/main/@types/automerge/index.d.ts)\n  that allow you to use Automerge in a type-safe way."
      },
      "date": 1641371613813
    },
    {
      "type": "edit",
      "id": "cd9473cd7f2a2e05",
      "item": {
        "type": "markdown",
        "id": "cd9473cd7f2a2e05",
        "text": "## Features and design principles\n\n- **Network-agnostic**. Automerge is a pure data structure library that does not care about what\n  kind of network you use. It works with any connection-oriented network protocol, which could be\n  client/server (e.g. WebSocket), peer-to-peer (e.g. WebRTC), or entirely local (e.g. Bluetooth).\n  Bindings to particular networking technologies are handled by separate libraries;\n  see the section on [Sending and receiving changes](https://github.com/automerge/automerge#sending-and-receiving-changes) for examples.\n  It also works with unidirectional messaging: you can send an Automerge file as email attachment,\n  or on a USB drive in the mail, and the recipient will be able to merge it with their version.\n- **Immutable state**. An Automerge object is an immutable snapshot of the application state at one\n  point in time. Whenever you make a change, or merge in a change that came from the network, you\n  get back a new state object reflecting that change. This fact makes Automerge compatible with the\n  functional reactive programming style of [React](https://reactjs.org) and\n  [Redux](http://redux.js.org/), for example.\n- **Automatic merging**. Automerge is a _Conflict-Free Replicated Data Type_ ([CRDT](https://crdt.tech/)),\n  which allows concurrent changes on different devices to be merged automatically without requiring any\n  central server. It is based on [academic research on JSON CRDTs](https://arxiv.org/abs/1608.03960), but\n  the details of the algorithm in Automerge are different from the JSON CRDT paper, and we are\n  planning to publish more detail about it in the future.\n- **Fairly portable**. We're not yet making an effort to support old platforms, but we have tested\n  Automerge in Node.js, Chrome, Firefox, Safari, MS Edge, and [Electron](https://electron.atom.io/).\n  For TypeScript users, Automerge comes with\n  [type definitions](https://github.com/automerge/automerge/blob/main/@types/automerge/index.d.ts)\n  that allow you to use Automerge in a type-safe way."
      },
      "date": 1641372364176
    }
  ]
}