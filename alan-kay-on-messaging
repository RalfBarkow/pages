{
  "title": "Alan Kay On Messaging",
  "story": [
    {
      "type": "paragraph",
      "id": "9a95ee87319b700a",
      "text": " Just a gentle reminder that I took some pains at the last OOPSLA to try to\n remind everyone that Smalltalk is not only NOT its syntax or the class\n library, it is not even about classes. I'm sorry that I long ago coined the\n term \"objects\" for this topic because it gets many people to focus on the\n lesser idea.\n[http://wiki.c2.com/?AlanKayOnMessaging wiki]\n[http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html mail]"
    },
    {
      "type": "paragraph",
      "id": "c470f2f00d7202d3",
      "text": "The big idea is \"[[Messaging]]\" – that is what the kernal of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase). The Japanese have a small word – ma – for \"that which is in between\" – perhaps the nearest English equivalent is \"[[interstitial]]\". The key in making great and growable systems is much more to design how its modules communicate rather than what their internal properties and behaviors should be. Think of the internet – to live, it (a) has to allow many different kinds of ideas and realizations that are beyond any single standard and (b) to allow varying degrees of safe interoperability between these ideas.\n"
    },
    {
      "type": "paragraph",
      "id": "7e8706163d9d5f84",
      "text": " If you focus on just messaging - and realize that a good metasystem can\n late bind the various 2nd level architectures used in objects - then much\n of the language-, UI-, and OS based discussions on this thread are really\n quite moot. This was why I complained at the last OOPSLA that - whereas at\n PARC we changed Smalltalk constantly, treating it always as a work in\n progress - when ST hit the larger world, it was pretty much taken as\n \"something just to be learned\", as though it were Pascal or Algol.\n Smalltalk-80 never really was mutated into the next better versions of OOP.\n Given the current low state of programming in general, I think this is a\n real mistake.\n\n"
    },
    {
      "type": "paragraph",
      "id": "f236652e4ded23b9",
      "text": "I think I recall also pointing out that it is vitally important not just to have a complete metasystem, but to have [[Fences]] that help guard the crossing of metaboundaries. One of the simplest of these was one of the motivations for my original excursions in the late sixties: the realization that assignments are a metalevel change from functions, and therefore should not be dealt with at the same level - this was one of the motivations to encapsulate these kinds of state changes, and not let them be done willy nilly. I would say that a system that allowed other metathings to be done in the ordinary course of programming (like changing what inheritance means, or what is an instance) is a bad design. (I believe that systems should allow these things, but the design should be such that there are clear [[Fences]] that have to be crossed when serious extensions are made.)\n"
    },
    {
      "type": "paragraph",
      "id": "1f54cc8e0fef8ab3",
      "text": " I would suggest that more progress could be made if the smart and talented\n Squeak list would think more about what the next step in metaprogramming\n should be - how can we get great power, parsimony, AND security of meaning?"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Alan Kay On Messaging",
        "story": []
      },
      "date": 1578167189000
    },
    {
      "item": {
        "type": "factory",
        "id": "9a95ee87319b700a"
      },
      "id": "9a95ee87319b700a",
      "type": "add",
      "date": 1578167222270
    },
    {
      "type": "edit",
      "id": "9a95ee87319b700a",
      "item": {
        "type": "paragraph",
        "id": "9a95ee87319b700a",
        "text": " Just a gentle reminder that I took some pains at the last OOPSLA to try to\n remind everyone that Smalltalk is not only NOT its syntax or the class\n library, it is not even about classes. I'm sorry that I long ago coined the\n term \"objects\" for this topic because it gets many people to focus on the\n lesser idea.\n\n"
      },
      "date": 1578167239004
    },
    {
      "type": "add",
      "id": "c470f2f00d7202d3",
      "item": {
        "type": "paragraph",
        "id": "c470f2f00d7202d3",
        "text": " The big idea is \"messaging\" - that is what the kernal of Smalltalk/Squeak\n is all about (and it's something that was never quite completed in our\n Xerox PARC phase). The Japanese have a small word - ma - for \"that which\n is in between\" - perhaps the nearest English equivalent is \"interstitial\".\n The key in making great and growable systems is much more to design how its\n modules communicate rather than what their internal properties and\n behaviors should be. Think of the internet - to live, it (a) has to allow\n many different kinds of ideas and realizations that are beyond any single\n standard and (b) to allow varying degrees of safe interoperability between\n these ideas.\n\n"
      },
      "after": "9a95ee87319b700a",
      "date": 1578167248688
    },
    {
      "type": "add",
      "id": "7e8706163d9d5f84",
      "item": {
        "type": "paragraph",
        "id": "7e8706163d9d5f84",
        "text": " If you focus on just messaging - and realize that a good metasystem can\n late bind the various 2nd level architectures used in objects - then much\n of the language-, UI-, and OS based discussions on this thread are really\n quite moot. This was why I complained at the last OOPSLA that - whereas at\n PARC we changed Smalltalk constantly, treating it always as a work in\n progress - when ST hit the larger world, it was pretty much taken as\n \"something just to be learned\", as though it were Pascal or Algol.\n Smalltalk-80 never really was mutated into the next better versions of OOP.\n Given the current low state of programming in general, I think this is a\n real mistake.\n\n I think I recall also pointing out that it is vitally important not just to\n have a complete metasystem, but to have fences that help guard the crossing\n of metaboundaries. One of the simplest of these was one of the motivations\n for my original excursions in the late sixties: the realization that\n assignments are a metalevel change from functions, and therefore should not\n be dealt with at the same level - this was one of the motivations to\n encapsulate these kinds of state changes, and not let them be done willy\n nilly. I would say that a system that allowed other metathings to be done\n in the ordinary course of programming (like changing what inheritance\n means, or what is an instance) is a bad design. (I believe that systems\n should allow these things, but the design should be such that there are\n clear fences that have to be crossed when serious extensions are made.)\n\n I would suggest that more progress could be made if the smart and talented\n Squeak list would think more about what the next step in metaprogramming\n should be - how can we get great power, parsimony, AND security of meaning?"
      },
      "after": "c470f2f00d7202d3",
      "date": 1578167367916
    },
    {
      "type": "edit",
      "id": "7e8706163d9d5f84",
      "item": {
        "type": "paragraph",
        "id": "7e8706163d9d5f84",
        "text": " If you focus on just messaging - and realize that a good metasystem can\n late bind the various 2nd level architectures used in objects - then much\n of the language-, UI-, and OS based discussions on this thread are really\n quite moot. This was why I complained at the last OOPSLA that - whereas at\n PARC we changed Smalltalk constantly, treating it always as a work in\n progress - when ST hit the larger world, it was pretty much taken as\n \"something just to be learned\", as though it were Pascal or Algol.\n Smalltalk-80 never really was mutated into the next better versions of OOP.\n Given the current low state of programming in general, I think this is a\n real mistake.\n\n"
      },
      "date": 1578167471719
    },
    {
      "type": "add",
      "id": "f236652e4ded23b9",
      "item": {
        "type": "paragraph",
        "id": "f236652e4ded23b9",
        "text": " I think I recall also pointing out that it is vitally important not just to\n have a complete metasystem, but to have fences that help guard the crossing\n of metaboundaries. One of the simplest of these was one of the motivations\n for my original excursions in the late sixties: the realization that\n assignments are a metalevel change from functions, and therefore should not\n be dealt with at the same level - this was one of the motivations to\n encapsulate these kinds of state changes, and not let them be done willy\n nilly. I would say that a system that allowed other metathings to be done\n in the ordinary course of programming (like changing what inheritance\n means, or what is an instance) is a bad design. (I believe that systems\n should allow these things, but the design should be such that there are\n clear fences that have to be crossed when serious extensions are made.)\n\n"
      },
      "after": "7e8706163d9d5f84",
      "date": 1578167480905
    },
    {
      "type": "add",
      "id": "1f54cc8e0fef8ab3",
      "item": {
        "type": "paragraph",
        "id": "1f54cc8e0fef8ab3",
        "text": " I would suggest that more progress could be made if the smart and talented\n Squeak list would think more about what the next step in metaprogramming\n should be - how can we get great power, parsimony, AND security of meaning?"
      },
      "after": "f236652e4ded23b9",
      "date": 1578167483579
    },
    {
      "type": "edit",
      "id": "9a95ee87319b700a",
      "item": {
        "type": "paragraph",
        "id": "9a95ee87319b700a",
        "text": " Just a gentle reminder that I took some pains at the last OOPSLA to try to\n remind everyone that Smalltalk is not only NOT its syntax or the class\n library, it is not even about classes. I'm sorry that I long ago coined the\n term \"objects\" for this topic because it gets many people to focus on the\n lesser idea.\n[http://wiki.c2.com/?AlanKayOnMessaging wiki]\n"
      },
      "date": 1578167591552
    },
    {
      "type": "edit",
      "id": "9a95ee87319b700a",
      "item": {
        "type": "paragraph",
        "id": "9a95ee87319b700a",
        "text": " Just a gentle reminder that I took some pains at the last OOPSLA to try to\n remind everyone that Smalltalk is not only NOT its syntax or the class\n library, it is not even about classes. I'm sorry that I long ago coined the\n term \"objects\" for this topic because it gets many people to focus on the\n lesser idea.\n[http://wiki.c2.com/?AlanKayOnMessaging wiki]\n[http://lists.squeakfoundation.org/pipermail/squeak-dev/1998-October/017019.html mail]"
      },
      "date": 1578167619254
    },
    {
      "type": "fork",
      "site": "found.ward.bay.wiki.org",
      "date": 1636346891941
    },
    {
      "type": "edit",
      "id": "f236652e4ded23b9",
      "item": {
        "type": "paragraph",
        "id": "f236652e4ded23b9",
        "text": " I think I recall also pointing out that it is vitally important not just to\n have a complete metasystem, but to have fences that help guard the crossing\n of metaboundaries. One of the simplest of these was one of the motivations\n for my original excursions in the late sixties: the realization that\n assignments are a metalevel change from functions, and therefore should not\n be dealt with at the same level - this was one of the motivations to\n encapsulate these kinds of state changes, and not let them be done willy\n nilly. I would say that a system that allowed other metathings to be done\n in the ordinary course of programming (like changing what inheritance\n means, or what is an instance) is a bad design. (I believe that systems\n should allow these things, but the design should be such that there are\n clear [[fences]] that have to be crossed when serious extensions are made.)\n\n"
      },
      "date": 1645361553950
    },
    {
      "type": "edit",
      "id": "f236652e4ded23b9",
      "item": {
        "type": "paragraph",
        "id": "f236652e4ded23b9",
        "text": " I think I recall also pointing out that it is vitally important not just to\n have a complete metasystem, but to have [[fences]] that help guard the crossing\n of metaboundaries. One of the simplest of these was one of the motivations\n for my original excursions in the late sixties: the realization that\n assignments are a metalevel change from functions, and therefore should not\n be dealt with at the same level - this was one of the motivations to\n encapsulate these kinds of state changes, and not let them be done willy\n nilly. I would say that a system that allowed other metathings to be done\n in the ordinary course of programming (like changing what inheritance\n means, or what is an instance) is a bad design. (I believe that systems\n should allow these things, but the design should be such that there are\n clear [[fences]] that have to be crossed when serious extensions are made.)\n\n"
      },
      "date": 1645362054734
    },
    {
      "type": "edit",
      "id": "f236652e4ded23b9",
      "item": {
        "type": "paragraph",
        "id": "f236652e4ded23b9",
        "text": "I think I recall also pointing out that it is vitally important not just to have a complete metasystem, but to have [[fences]] that help guard the crossing of metaboundaries. One of the simplest of these was one of the motivations for my original excursions in the late sixties: the realization that assignments are a metalevel change from functions, and therefore should not be dealt with at the same level - this was one of the motivations to encapsulate these kinds of state changes, and not let them be done willy nilly. I would say that a system that allowed other metathings to be done in the ordinary course of programming (like changing what inheritance means, or what is an instance) is a bad design. (I believe that systems should allow these things, but the design should be such that there are clear [[fences]] that have to be crossed when serious extensions are made.)\n"
      },
      "date": 1645362124516
    },
    {
      "type": "fork",
      "date": 1645362620997
    },
    {
      "type": "edit",
      "id": "f236652e4ded23b9",
      "item": {
        "type": "paragraph",
        "id": "f236652e4ded23b9",
        "text": "I think I recall also pointing out that it is vitally important not just to have a complete metasystem, but to have [[Fences]] that help guard the crossing of metaboundaries. One of the simplest of these was one of the motivations for my original excursions in the late sixties: the realization that assignments are a metalevel change from functions, and therefore should not be dealt with at the same level - this was one of the motivations to encapsulate these kinds of state changes, and not let them be done willy nilly. I would say that a system that allowed other metathings to be done in the ordinary course of programming (like changing what inheritance means, or what is an instance) is a bad design. (I believe that systems should allow these things, but the design should be such that there are clear [[fences]] that have to be crossed when serious extensions are made.)\n"
      },
      "date": 1703217265668
    },
    {
      "type": "edit",
      "id": "f236652e4ded23b9",
      "item": {
        "type": "paragraph",
        "id": "f236652e4ded23b9",
        "text": "I think I recall also pointing out that it is vitally important not just to have a complete metasystem, but to have [[Fences]] that help guard the crossing of metaboundaries. One of the simplest of these was one of the motivations for my original excursions in the late sixties: the realization that assignments are a metalevel change from functions, and therefore should not be dealt with at the same level - this was one of the motivations to encapsulate these kinds of state changes, and not let them be done willy nilly. I would say that a system that allowed other metathings to be done in the ordinary course of programming (like changing what inheritance means, or what is an instance) is a bad design. (I believe that systems should allow these things, but the design should be such that there are clear [[Fences]] that have to be crossed when serious extensions are made.)\n"
      },
      "date": 1703217313008
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703217957992
    },
    {
      "type": "edit",
      "id": "c470f2f00d7202d3",
      "item": {
        "type": "paragraph",
        "id": "c470f2f00d7202d3",
        "text": "The big idea is \"[[Messaging]]\" – that is what the kernal of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase). The Japanese have a small word – ma – for \"that which is in between\" – perhaps the nearest English equivalent is \"interstitial\". The key in making great and growable systems is much more to design how its modules communicate rather than what their internal properties and behaviors should be. Think of the internet – to live, it (a) has to allow many different kinds of ideas and realizations that are beyond any single standard and (b) to allow varying degrees of safe interoperability between these ideas.\n"
      },
      "date": 1707116112407
    },
    {
      "type": "edit",
      "id": "c470f2f00d7202d3",
      "item": {
        "type": "paragraph",
        "id": "c470f2f00d7202d3",
        "text": "The big idea is \"[[Messaging]]\" – that is what the kernal of Smalltalk/Squeak is all about (and it's something that was never quite completed in our Xerox PARC phase). The Japanese have a small word – ma – for \"that which is in between\" – perhaps the nearest English equivalent is \"[[interstitial]]\". The key in making great and growable systems is much more to design how its modules communicate rather than what their internal properties and behaviors should be. Think of the internet – to live, it (a) has to allow many different kinds of ideas and realizations that are beyond any single standard and (b) to allow varying degrees of safe interoperability between these ideas.\n"
      },
      "date": 1707116147443
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1707118615689
    }
  ]
}