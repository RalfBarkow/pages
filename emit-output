{
  "title": "Emit Output",
  "story": [
    {
      "type": "paragraph",
      "id": "4820e38d56722465",
      "text": "Stream processing computations are typically structured as dataflow computations, an abstract graph whose nodes and edges represent operators and data, respectively. Operators process input data and emit output, potentially accumulating state over time on which future output data depends. Operators can be divided into two macro categories, stateful operators and stateless operators, depending on whether or not they rely on internal state to emit their output. Most non-trivial computations make heavy use of stateful operators."
    },
    {
      "type": "pagefold",
      "id": "e6a92f1c63465e84",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "388e9d14247ba9d5",
      "text": "SELVATICI, Lorenzo, 2020. A Streaming System with Coordination-Free Fault-Tolerance. Master’s Thesis. Systems Group, Department of Computer Science, ETH Zurich. [https://www.research-collection.ethz.ch/bitstream/handle/20.500.11850/455359/1/Selvatici_Lorenzo.pdf pdf]."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Emit Output",
        "story": []
      },
      "date": 1713817798066
    },
    {
      "id": "388e9d14247ba9d5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "388e9d14247ba9d5",
        "text": "SELVATICI, Lorenzo, 2020. A Streaming System with Coordination-Free Fault-Tolerance. Master’s Thesis. Systems Group, Department of Computer Science, ETH Zurich. [https://www.research-collection.ethz.ch/bitstream/handle/20.500.11850/455359/1/Selvatici_Lorenzo.pdf pdf]."
      },
      "attribution": {
        "page": "2024-04-22"
      },
      "date": 1713817824258
    },
    {
      "item": {
        "type": "pagefold",
        "id": "e6a92f1c63465e84",
        "text": "~"
      },
      "id": "e6a92f1c63465e84",
      "type": "add",
      "after": "388e9d14247ba9d5",
      "date": 1713817825931
    },
    {
      "type": "edit",
      "id": "e6a92f1c63465e84",
      "item": {
        "type": "pagefold",
        "id": "e6a92f1c63465e84",
        "text": "~"
      },
      "date": 1713817829374
    },
    {
      "id": "e6a92f1c63465e84",
      "type": "move",
      "order": [
        "e6a92f1c63465e84",
        "388e9d14247ba9d5"
      ],
      "date": 1713817834481,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1713817836268
    },
    {
      "id": "4820e38d56722465",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4820e38d56722465",
        "text": "Distributed stream processors have been proved successful at continually processing large amount of data, achieving both high throughput and low latency in large cluster deployments. Often employed for long-lasting computations, they are powering core services and store essential, mission-critical information. Stream processing computations are typically structured as dataflow computations, an abstract graph whose nodes and edges represent respectively operators and data. Operators process input data, emitting output and potentially accumulating state over time, upon which future output data will depend on. Operators can be divided in two macro categories, stateful operators and stateless operators, depending whether or not they rely on internal state to emit their output. Most non-trivial computations heavily employ stateful operators."
      },
      "attribution": {
        "page": "2024-04-22"
      },
      "date": 1713817840186
    },
    {
      "type": "edit",
      "id": "4820e38d56722465",
      "item": {
        "type": "paragraph",
        "id": "4820e38d56722465",
        "text": "Distributed stream processors have a proven track record of continuously processing large amounts of data, achieving both high throughput and low latency in large cluster deployments. They are often used for long-running computations, powering core services and storing essential, mission-critical information. Stream processing computations are typically structured as dataflow computations, an abstract graph whose nodes and edges represent operators and data, respectively. Operators process input data and emit output, potentially accumulating state over time on which future output data depends. Operators can be divided into two macro categories, stateful operators and stateless operators, depending on whether or not they rely on internal state to emit their output. Most non-trivial computations make heavy use of stateful operators.Distributed stream processors have a proven track record of continuously processing large amounts of data, achieving both high throughput and low latency in large cluster deployments. They are often used for long-running computations, powering core services and storing essential, mission-critical information. Stream processing computations are typically structured as dataflow computations, an abstract graph whose nodes and edges represent operators and data, respectively. Operators process input data and emit output, potentially accumulating state over time on which future output data depends. Operators can be divided into two macro categories, stateful operators and stateless operators, depending on whether or not they rely on internal state to emit their output. Most non-trivial computations make heavy use of stateful operators."
      },
      "date": 1713817879386
    },
    {
      "type": "edit",
      "id": "4820e38d56722465",
      "item": {
        "type": "paragraph",
        "id": "4820e38d56722465",
        "text": "Distributed stream processors have a proven track record of continuously processing large amounts of data, achieving both high throughput and low latency in large cluster deployments. They are often used for long-running computations, powering core services and storing essential, mission-critical information. Stream processing computations are typically structured as dataflow computations, an abstract graph whose nodes and edges represent operators and data, respectively. Operators process input data and emit output, potentially accumulating state over time on which future output data depends. Operators can be divided into two macro categories, stateful operators and stateless operators, depending on whether or not they rely on internal state to emit their output. Most non-trivial computations make heavy use of stateful operators."
      },
      "date": 1713817884261
    },
    {
      "type": "edit",
      "id": "4820e38d56722465",
      "item": {
        "type": "paragraph",
        "id": "4820e38d56722465",
        "text": "Stream processing computations are typically structured as dataflow computations, an abstract graph whose nodes and edges represent operators and data, respectively. Operators process input data and emit output, potentially accumulating state over time on which future output data depends. Operators can be divided into two macro categories, stateful operators and stateless operators, depending on whether or not they rely on internal state to emit their output. Most non-trivial computations make heavy use of stateful operators."
      },
      "date": 1713817908331
    }
  ]
}