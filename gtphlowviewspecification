{
  "title": "GtPhlowViewSpecification",
  "story": [
    {
      "type": "markdown",
      "id": "5e25d6f7b2dc3309",
      "text": "{{gtClass:GtPhlowViewSpecification}} provides a [[Declarative UI Specification]] for presenting data that can be easily serialised and sent over the wire, including between applications written in different languages.\n\nA specification contains basic data about the view, like its title and priority, and a data source that handles the actual data of the view."
    },
    {
      "type": "markdown",
      "id": "3fdff68b9f675aca",
      "text": "#### Local and and remote instances\n\nAn instance of the specification is created remotely based on the remote view. That specification is serialized by sending it {{gtMethod:GtPhlowViewSpecification>>asJSONForExport|label=#selector}}, and based on it a new instance is created locally with the same data using {{gtMethod:GtPhlowViewSpecification class>>fromJSONString:|label=#selector}}. So there will be two instances of the specification, one remotely and one locally."
    },
    {
      "type": "markdown",
      "id": "5233fbd30ea82bcd",
      "text": "#### Initializing the local instance\n\nThe initialisation of the local version of the specification is done in two steps. First, an instance is created and initialized using the initial JSON data. Second, on this instance the inspector calls {{gtMethod:GtPhlowViewSpecification>>initializeFromInspector:|label=#selector}}. \n\nThis call exists so that the specification can initialize the `phlowDataSource` attributes. Views can initialize it with a local object, if all the data of the view was retrieved, or with a proxy to the remote data source.  \n\nSo while the local and remote instances of the specification have the same attributes, for the data source attribute the local version can have a proxy, and the remote version the actual object.\n\ndataTransport is an emumerated value indicating whether the data to be displayed will be included with the specification or is available via reference or by key.]\n\n- 1: data is included in the response\n- 2: data is available by reference\n- 3: data is available by reference and key (tbc)"
    },
    {
      "type": "markdown",
      "id": "c9bbff5e9cd3abfa",
      "text": "#### Creating local views\n\nSubclasses should override {{gtMethod:GtPhlowViewSpecification>>viewFor:|label=#selector}}  for creating a  local views from a specification."
    }
  ],
  "journal": [
    {
      "item": {
        "type": "markdown",
        "id": "5e25d6f7b2dc3309",
        "text": "{{gtClass:GtPhlowViewSpecification}} provides a declarative UI specification for presenting data that can be easily serialised and sent over the wire, including between applications written in different languages.\n\nA specification contains basic data about the view, like its title and priority, and a data source that handles the actual data of the view.\n####Local and and remote instances\n\nAn instance of the specification is created remotely based on the remote view. That specification is serialized by sending it {{gtMethod:GtPhlowViewSpecification>>asJSONForExport|label=#selector}}, and based on it a new instance is created locally with the same data using {{gtMethod:GtPhlowViewSpecification class>>fromJSONString:|label=#selector}}. So there will be two instances of the specification, one remotely and one locally.\n\n####Initializing the local instance\n\nThe initialisation of the local version of the specification is done in two steps. First, an instance is created and initialized using the initial JSON data. Second, on this instance the inspector calls {{gtMethod:GtPhlowViewSpecification>>initializeFromInspector:|label=#selector}}. \n\nThis call exists so that the specification can initialize the `phlowDataSource` attributes. Views can initialize it with a local object, if all the data of the view was retrieved, or with a proxy to the remote data source.  \n\nSo while the local and remote instances of the specification have the same attributes, for the data source attribute the local version can have a proxy, and the remote version the actual object.\n\ndataTransport is an emumerated value indicating whether the data to be displayed will be included with the specification or is available via reference or by key.]\n\n- 1: data is included in the response\n- 2: data is available by reference\n- 3: data is available by reference and key (tbc)\n\n####Creating local views\n\nSubclasses should override {{gtMethod:GtPhlowViewSpecification>>viewFor:|label=#selector}}  for creating a  local views from a specification.\n\n"
      },
      "id": "5e25d6f7b2dc3309",
      "type": "add",
      "date": 1713353833510,
      "error": {
        "type": "error",
        "msg": "Not Found",
        "response": "Server Page not found"
      }
    },
    {
      "type": "create",
      "item": {
        "title": "GtPhlowViewSpecification",
        "story": [
          {
            "type": "markdown",
            "id": "5e25d6f7b2dc3309",
            "text": "{{gtClass:GtPhlowViewSpecification}} provides a declarative UI specification for presenting data that can be easily serialised and sent over the wire, including between applications written in different languages.\n\nA specification contains basic data about the view, like its title and priority, and a data source that handles the actual data of the view.\n####Local and and remote instances\n\nAn instance of the specification is created remotely based on the remote view. That specification is serialized by sending it {{gtMethod:GtPhlowViewSpecification>>asJSONForExport|label=#selector}}, and based on it a new instance is created locally with the same data using {{gtMethod:GtPhlowViewSpecification class>>fromJSONString:|label=#selector}}. So there will be two instances of the specification, one remotely and one locally.\n\n####Initializing the local instance\n\nThe initialisation of the local version of the specification is done in two steps. First, an instance is created and initialized using the initial JSON data. Second, on this instance the inspector calls {{gtMethod:GtPhlowViewSpecification>>initializeFromInspector:|label=#selector}}. \n\nThis call exists so that the specification can initialize the `phlowDataSource` attributes. Views can initialize it with a local object, if all the data of the view was retrieved, or with a proxy to the remote data source.  \n\nSo while the local and remote instances of the specification have the same attributes, for the data source attribute the local version can have a proxy, and the remote version the actual object.\n\ndataTransport is an emumerated value indicating whether the data to be displayed will be included with the specification or is available via reference or by key.]\n\n- 1: data is included in the response\n- 2: data is available by reference\n- 3: data is available by reference and key (tbc)\n\n####Creating local views\n\nSubclasses should override {{gtMethod:GtPhlowViewSpecification>>viewFor:|label=#selector}}  for creating a  local views from a specification.\n\n"
          }
        ]
      },
      "date": 1713353832183
    },
    {
      "type": "fork",
      "date": 1713353866265
    },
    {
      "type": "edit",
      "id": "5e25d6f7b2dc3309",
      "item": {
        "type": "markdown",
        "id": "5e25d6f7b2dc3309",
        "text": "{{gtClass:GtPhlowViewSpecification}} provides a declarative UI specification for presenting data that can be easily serialised and sent over the wire, including between applications written in different languages.\n\nA specification contains basic data about the view, like its title and priority, and a data source that handles the actual data of the view."
      },
      "date": 1713353877321
    },
    {
      "type": "add",
      "id": "3fdff68b9f675aca",
      "item": {
        "type": "markdown",
        "id": "3fdff68b9f675aca",
        "text": "#### Local and and remote instances\n\nAn instance of the specification is created remotely based on the remote view. That specification is serialized by sending it {{gtMethod:GtPhlowViewSpecification>>asJSONForExport|label=#selector}}, and based on it a new instance is created locally with the same data using {{gtMethod:GtPhlowViewSpecification class>>fromJSONString:|label=#selector}}. So there will be two instances of the specification, one remotely and one locally."
      },
      "after": "5e25d6f7b2dc3309",
      "date": 1713353886018
    },
    {
      "type": "add",
      "id": "5233fbd30ea82bcd",
      "item": {
        "type": "markdown",
        "id": "5233fbd30ea82bcd",
        "text": "#### Initializing the local instance\n\nThe initialisation of the local version of the specification is done in two steps. First, an instance is created and initialized using the initial JSON data. Second, on this instance the inspector calls {{gtMethod:GtPhlowViewSpecification>>initializeFromInspector:|label=#selector}}. \n\nThis call exists so that the specification can initialize the `phlowDataSource` attributes. Views can initialize it with a local object, if all the data of the view was retrieved, or with a proxy to the remote data source.  \n\nSo while the local and remote instances of the specification have the same attributes, for the data source attribute the local version can have a proxy, and the remote version the actual object.\n\ndataTransport is an emumerated value indicating whether the data to be displayed will be included with the specification or is available via reference or by key.]\n\n- 1: data is included in the response\n- 2: data is available by reference\n- 3: data is available by reference and key (tbc)\n\n####Creating local views\n\nSubclasses should override {{gtMethod:GtPhlowViewSpecification>>viewFor:|label=#selector}}  for creating a  local views from a specification."
      },
      "after": "3fdff68b9f675aca",
      "date": 1713353895617
    },
    {
      "type": "edit",
      "id": "5233fbd30ea82bcd",
      "item": {
        "type": "markdown",
        "id": "5233fbd30ea82bcd",
        "text": "#### Initializing the local instance\n\nThe initialisation of the local version of the specification is done in two steps. First, an instance is created and initialized using the initial JSON data. Second, on this instance the inspector calls {{gtMethod:GtPhlowViewSpecification>>initializeFromInspector:|label=#selector}}. \n\nThis call exists so that the specification can initialize the `phlowDataSource` attributes. Views can initialize it with a local object, if all the data of the view was retrieved, or with a proxy to the remote data source.  \n\nSo while the local and remote instances of the specification have the same attributes, for the data source attribute the local version can have a proxy, and the remote version the actual object.\n\ndataTransport is an emumerated value indicating whether the data to be displayed will be included with the specification or is available via reference or by key.]\n\n- 1: data is included in the response\n- 2: data is available by reference\n- 3: data is available by reference and key (tbc)"
      },
      "date": 1713353914799
    },
    {
      "type": "add",
      "id": "c9bbff5e9cd3abfa",
      "item": {
        "type": "markdown",
        "id": "c9bbff5e9cd3abfa",
        "text": "#### Creating local views\n\nSubclasses should override {{gtMethod:GtPhlowViewSpecification>>viewFor:|label=#selector}}  for creating a  local views from a specification."
      },
      "after": "5233fbd30ea82bcd",
      "date": 1713353917270
    },
    {
      "type": "edit",
      "id": "5e25d6f7b2dc3309",
      "item": {
        "type": "markdown",
        "id": "5e25d6f7b2dc3309",
        "text": "{{gtClass:GtPhlowViewSpecification}} provides a [[Declarative UI Specification]] for presenting data that can be easily serialised and sent over the wire, including between applications written in different languages.\n\nA specification contains basic data about the view, like its title and priority, and a data source that handles the actual data of the view."
      },
      "date": 1713353936909
    }
  ]
}