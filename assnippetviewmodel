{
  "title": "asSnippetViewModel",
  "story": [
    {
      "type": "markdown",
      "id": "bfee6a2bbbb5e839",
      "text": "[[Snippet]] had the subclass responsibility to implement #asSnippetViewModel"
    },
    {
      "type": "markdown",
      "id": "6e8b94514f4c1350",
      "text": "I am following the example of [[Sean DeNigris]]'s [[QuLeTranscriptLineSnippet]]."
    },
    {
      "type": "image",
      "id": "dfcb57232cb939d9",
      "text": "[[QuLeTranscriptLineSnippet]]>>#asSnippetViewModel",
      "size": "wide",
      "width": 419,
      "height": 255,
      "url": "/assets/plugins/image/4ecb28c9912cddd5223b706476629405.jpg"
    },
    {
      "type": "pagefold",
      "id": "1b4f7c9d873ce53b",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "4c85af87a38c7966",
      "site": "wiki.ralfbarkow.ch",
      "slug": "model-view-viewmodel",
      "title": "Model-View-ViewModel",
      "text": "(MVVM) is a software architectural pattern that facilitates the separation of the development of the graphical user interface (the view) – be it via a markup language or GUI code – from the development of the business logic or back-end logic (the model) so that the view is not dependent on any specific model platform. The viewmodel of MVVM is a value converter,[1] meaning the viewmodel is responsible for exposing (converting) the data objects from the model in such a way that objects are easily managed and presented. In this respect, …"
    },
    {
      "type": "reference",
      "id": "104358db81ff0d06",
      "site": "wiki.ralfbarkow.ch",
      "slug": "custom-snippet",
      "title": "Custom Snippet",
      "text": "Considering snippets use an MVVM pattern [⇒[[Model-View-ViewModel]]], where would the talents be applied? Sprinkled throughout multiple classes? \nIf you want to extend functionality with [[Talents]], who is the super class?"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "asSnippetViewModel",
        "story": []
      },
      "date": 1704634294493
    },
    {
      "id": "bfee6a2bbbb5e839",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "bfee6a2bbbb5e839",
        "text": "SubclassResponsibility: Snippet had the subclass responsibility to implement #asSnippetViewModel"
      },
      "attribution": {
        "page": "2024-01-06"
      },
      "date": 1704634316385
    },
    {
      "type": "edit",
      "id": "bfee6a2bbbb5e839",
      "item": {
        "type": "markdown",
        "id": "bfee6a2bbbb5e839",
        "text": "[[Snippet]] had the subclass responsibility to implement #asSnippetViewModel"
      },
      "date": 1704634326809
    },
    {
      "id": "dfcb57232cb939d9",
      "type": "add",
      "item": {
        "type": "image",
        "id": "dfcb57232cb939d9",
        "text": "[[QuLeTranscriptLineSnippet]]>>#asSnippetViewModel",
        "size": "wide",
        "width": 419,
        "height": 255,
        "url": "/assets/plugins/image/4ecb28c9912cddd5223b706476629405.jpg"
      },
      "after": "bfee6a2bbbb5e839",
      "attribution": {
        "page": "2024-01-06"
      },
      "date": 1704634411672
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1704634683573
    },
    {
      "id": "6e8b94514f4c1350",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "6e8b94514f4c1350",
        "text": "I am interested in the question of which super class might be suitable for my [[Snippet]]s. I follow [[Sean DeNigris]]'s [[QuLeTranscriptLineSnippet]] example here, which is a subclass of [[LeTextSnippet]]."
      },
      "after": "bfee6a2bbbb5e839",
      "attribution": {
        "page": "Snippet"
      },
      "date": 1704634694495
    },
    {
      "type": "edit",
      "id": "6e8b94514f4c1350",
      "item": {
        "type": "markdown",
        "id": "6e8b94514f4c1350",
        "text": "I follow [[Sean DeNigris]]'s [[QuLeTranscriptLineSnippet]] example here."
      },
      "date": 1704634704535
    },
    {
      "type": "edit",
      "id": "6e8b94514f4c1350",
      "item": {
        "type": "markdown",
        "id": "6e8b94514f4c1350",
        "text": "I am following the example of [[Sean DeNigris]]'s [[QuLeTranscriptLineSnippet]]."
      },
      "date": 1704634762913
    },
    {
      "item": {
        "type": "factory",
        "id": "1b4f7c9d873ce53b"
      },
      "id": "1b4f7c9d873ce53b",
      "type": "add",
      "after": "dfcb57232cb939d9",
      "date": 1704634819414
    },
    {
      "type": "edit",
      "id": "1b4f7c9d873ce53b",
      "item": {
        "type": "pagefold",
        "id": "1b4f7c9d873ce53b",
        "text": "~"
      },
      "date": 1704634822230
    },
    {
      "id": "4c85af87a38c7966",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "4c85af87a38c7966",
        "site": "wiki.ralfbarkow.ch",
        "slug": "model-view-viewmodel",
        "title": "Model-View-ViewModel",
        "text": "Model–view–viewmodel (MVVM) is a software architectural pattern that facilitates the separation of the development of the graphical user interface (the view) – be it via a markup language or GUI code – from the development of the business logic or back-end logic (the model) so that the view is not dependent on any specific model platform. The viewmodel of MVVM is a value converter,[1] meaning the viewmodel is responsible for exposing (converting) the data objects from the model in such a way that objects are easily managed and presented. In this respect,"
      },
      "after": "1b4f7c9d873ce53b",
      "attribution": {
        "page": "2024-01-06"
      },
      "date": 1704634830658
    },
    {
      "id": "104358db81ff0d06",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "104358db81ff0d06",
        "site": "wiki.ralfbarkow.ch",
        "slug": "custom-snippet",
        "title": "Custom Snippet",
        "text": "Considering snippets use an MVVM pattern [⇒[[Model-View-ViewModel]]], where would the talents be applied? Sprinkled throughout multiple classes? \nIf you want to extend functionality with [[Talents]], who is the super class?"
      },
      "after": "4c85af87a38c7966",
      "attribution": {
        "page": "2024-01-06"
      },
      "date": 1704634834188
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1704634862451
    },
    {
      "type": "edit",
      "id": "4c85af87a38c7966",
      "item": {
        "type": "reference",
        "id": "4c85af87a38c7966",
        "site": "wiki.ralfbarkow.ch",
        "slug": "model-view-viewmodel",
        "title": "Model-View-ViewModel",
        "text": "(MVVM) is a software architectural pattern that facilitates the separation of the development of the graphical user interface (the view) – be it via a markup language or GUI code – from the development of the business logic or back-end logic (the model) so that the view is not dependent on any specific model platform. The viewmodel of MVVM is a value converter,[1] meaning the viewmodel is responsible for exposing (converting) the data objects from the model in such a way that objects are easily managed and presented. In this respect,"
      },
      "date": 1704634869804
    },
    {
      "type": "edit",
      "id": "4c85af87a38c7966",
      "item": {
        "type": "reference",
        "id": "4c85af87a38c7966",
        "site": "wiki.ralfbarkow.ch",
        "slug": "model-view-viewmodel",
        "title": "Model-View-ViewModel",
        "text": "(MVVM) is a software architectural pattern that facilitates the separation of the development of the graphical user interface (the view) – be it via a markup language or GUI code – from the development of the business logic or back-end logic (the model) so that the view is not dependent on any specific model platform. The viewmodel of MVVM is a value converter,[1] meaning the viewmodel is responsible for exposing (converting) the data objects from the model in such a way that objects are easily managed and presented. In this respect, …"
      },
      "date": 1704634909724
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1704998530204
    }
  ]
}