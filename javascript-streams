{
  "title": "JavaScript Streams",
  "story": [
    {
      "type": "paragraph",
      "id": "9841cb3ef62c75a7",
      "text": "Streams are an awesome asynchronous io abstraction. Streams come from the Unix tradition, and are one of the most important factors in node modules ability to uphold the [http://en.wikipedia.org/wiki/Unix_philosophy Unix philosophy]."
    },
    {
      "type": "paragraph",
      "id": "7593ec7332d3b51c",
      "text": "Streams allow us to handle a flow of generic data events as they happen. By keeping the structure of a stream generic you don't have to know anything about the other streams that you are going to interact with. This allows various things to be piped to one another even if the author of either module has never heard of the other one."
    },
    {
      "type": "paragraph",
      "id": "2a7599a3086e41a5",
      "text": "By sticking with standard conventions as to what events will be emitted and how to handle back pressure we lower the specific knowledge anyone needs to interact with us. It's hard to overstate how powerful it is to be able to take so many different libraries and just have them work as expected."
    },
    {
      "type": "paragraph",
      "id": "a6c9bab58d2aaaee",
      "text": "On top of making code much easier to understand streams also prevent artificial bottlenecks in your application. By not buffering everything in memory needlessly you can handle huge amounts of information one bite size chunk at a time. Even if a file would be bigger than your system memory you can still stream it."
    },
    {
      "type": "paragraph",
      "id": "84ad07b50520de9e",
      "text": "The current Streams2 api provides easy constructors for several basic streams that can be easily modified to do what you need. The event-streams library also provides many standard stream parts that are useful to implement many patterns."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "JavaScript Streams"
      },
      "date": 1360909494328
    },
    {
      "item": {
        "type": "factory",
        "id": "9841cb3ef62c75a7"
      },
      "id": "9841cb3ef62c75a7",
      "type": "add",
      "date": 1360909509143
    },
    {
      "type": "edit",
      "id": "9841cb3ef62c75a7",
      "item": {
        "type": "paragraph",
        "id": "9841cb3ef62c75a7",
        "text": "Streams are an awesome asynchronous io abstraction."
      },
      "date": 1360909555239
    },
    {
      "item": {
        "type": "paragraph",
        "id": "f683fce3db8b74f0",
        "text": ""
      },
      "id": "f683fce3db8b74f0",
      "type": "add",
      "after": "9841cb3ef62c75a7",
      "date": 1360909555743
    },
    {
      "type": "remove",
      "id": "f683fce3db8b74f0",
      "date": 1360910180297
    },
    {
      "item": {
        "type": "paragraph",
        "id": "7593ec7332d3b51c",
        "text": ""
      },
      "id": "7593ec7332d3b51c",
      "type": "add",
      "after": "9841cb3ef62c75a7",
      "date": 1360993361066
    },
    {
      "type": "edit",
      "id": "7593ec7332d3b51c",
      "item": {
        "type": "paragraph",
        "id": "7593ec7332d3b51c",
        "text": "Streams allow us to handle a flow of generic data events as they happen. By keeping the structure of a stream generic you don't have to know anything about the other streams that you are going to interact with. This allows various things to be piped to one enough even if the authors of both modules have never heard of the other one."
      },
      "date": 1360994420072
    },
    {
      "item": {
        "type": "paragraph",
        "id": "2a7599a3086e41a5",
        "text": ""
      },
      "id": "2a7599a3086e41a5",
      "type": "add",
      "after": "7593ec7332d3b51c",
      "date": 1361258417912
    },
    {
      "type": "edit",
      "id": "2a7599a3086e41a5",
      "item": {
        "type": "paragraph",
        "id": "2a7599a3086e41a5",
        "text": "By sticking with standard conventions as to what events will be emitted and how to handle back pressure we lower the specific knowledge anyone needs to interact with us. It's hard to overstate how powerful it is to be able to take so many different libraries and just have them work as expected."
      },
      "date": 1361258516600
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a6c9bab58d2aaaee",
        "text": ""
      },
      "id": "a6c9bab58d2aaaee",
      "type": "add",
      "after": "2a7599a3086e41a5",
      "date": 1361426383285
    },
    {
      "type": "edit",
      "id": "a6c9bab58d2aaaee",
      "item": {
        "type": "paragraph",
        "id": "a6c9bab58d2aaaee",
        "text": "On top of making code much easier to understand streams also prevent causing artificial bottlenecks in your application. By not buffering everything in memory needlessly you can handle huge amounts of information one bite size chunk at a time. Even if a file would be bigger then your system memory you can still stream it."
      },
      "date": 1361426518212
    },
    {
      "type": "fork",
      "site": "nrn.io"
    },
    {
      "type": "edit",
      "id": "9841cb3ef62c75a7",
      "item": {
        "type": "paragraph",
        "id": "9841cb3ef62c75a7",
        "text": "Streams are an awesome asynchronous io abstraction. Streams come from the Unix tradition, and are one of the most important factors in node modules ability to uphold the Unix philosophy."
      },
      "site": "nrn.io",
      "date": 1361603441068
    },
    {
      "type": "fork",
      "date": 1361603484638
    },
    {
      "type": "edit",
      "id": "9841cb3ef62c75a7",
      "item": {
        "type": "paragraph",
        "id": "9841cb3ef62c75a7",
        "text": "Streams are an awesome asynchronous io abstraction. Streams come from the Unix tradition, and are one of the most important factors in node modules ability to uphold the [http://en.wikipedia.org/wiki/Unix_philosophy Unix philosophy]."
      },
      "date": 1362899723995
    },
    {
      "type": "edit",
      "id": "a6c9bab58d2aaaee",
      "item": {
        "type": "paragraph",
        "id": "a6c9bab58d2aaaee",
        "text": "On top of making code much easier to understand streams also prevent artificial bottlenecks in your application. By not buffering everything in memory needlessly you can handle huge amounts of information one bite size chunk at a time. Even if a file would be bigger than your system memory you can still stream it."
      },
      "date": 1363062938358
    },
    {
      "item": {
        "type": "paragraph",
        "id": "84ad07b50520de9e",
        "text": ""
      },
      "id": "84ad07b50520de9e",
      "type": "add",
      "after": "a6c9bab58d2aaaee",
      "date": 1363514411349
    },
    {
      "type": "edit",
      "id": "84ad07b50520de9e",
      "item": {
        "type": "paragraph",
        "id": "84ad07b50520de9e",
        "text": "The current Streams2 api provides easy constructors for several basic streams that can be easily modified to do what you need. The event-streams library also provides many standard stream parts that are useful to implement many patterns."
      },
      "date": 1363514545133
    },
    {
      "type": "edit",
      "id": "7593ec7332d3b51c",
      "item": {
        "type": "paragraph",
        "id": "7593ec7332d3b51c",
        "text": "Streams allow us to handle a flow of generic data events as they happen. By keeping the structure of a stream generic you don't have to know anything about the other streams that you are going to interact with. This allows various things to be piped to one another even if the author of either module has never heard of the other one."
      },
      "date": 1413704462638
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1678777324713
    }
  ]
}