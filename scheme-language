{
  "title": "Scheme Language",
  "story": [
    {
      "type": "html",
      "text": "Lisp done right, according to some. Others prefer [[Common Lisp]], right at the other end of the oversimplified/baroque - or, if you prefer, elegant/full-featured - axis. Standard Scheme as defined by the [[Revised Report On Algorithmic Language Scheme]] is deliberately minimalistic. [[Scheme Requests For Implementation]] provide de facto standards for often needed (and often requested) features and extensions, like record types, multi-threading, exception handling and localization.",
      "id": "1636023e8e2b98397a430f31a12635db"
    },
    {
      "type": "html",
      "text": "\nGiven its small size and minimalistic nature, some ask [[Is Scheme Suitable For Developing Larger Systems]]?",
      "id": "bdd5ce6d7070bc474fbf82960a98a2e2"
    },
    {
      "type": "html",
      "text": "\nScheme was originally inspired by [[Carl Hewitt]]'s [[Actors Model]]. It served as a proof by example that Actors' message-passing model of execution was equivalent to the more common function-call model. [[Gerald Sussman]] and [[Guy Steele]], the original creators of Scheme, discovered that when implementing both models, they ended up with identical functions doing the work.",
      "id": "b59eb27a3be1f518ea54f03aa2c182bd"
    },
    {
      "type": "html",
      "text": "\nIn the words of [[Guy Steele]] ([http://www.dreamsongs.com/ObjectsHaveNotFailedNarr.html www.dreamsongs.com]): <i>The Scheme programming language was born from an attempt in 1975 to explicate [[Object Oriented Programming]] in terms that [[Gerald Sussman]] and I could understand. In particular, we wanted to restate [[Carl Hewitt]]'s theory of actors in words of one syllable, so to speak. One of the conclusions that we reached was that \"object\" need not be a primitive notion in a programming language; one can build objects and their behavior from little more than assignable value cells and good old [[Lambda Expression]]s. Moreover, most of the objects in Hewitt's theory were stateless and unchanging once created; for those, lambda expressions alone were sufficient.</i>",
      "id": "057e49d2a908915db401fa8b9a05779b"
    },
    {
      "type": "html",
      "text": "\nOne outcome of this insight is that standard-compliant [[Scheme Implementations]] are required to support [[Proper Tail Call]]s.",
      "id": "f0c20797feae235dd908427ff778bc59"
    },
    {
      "type": "html",
      "text": "\nScheme is seen by some as the Algol of the [[Lisp Family]] (see [[Algol Language]] and [[Language Families]]), because:",
      "id": "eb5232a955207259286e89dc449e5ad8"
    },
    {
      "type": "html",
      "text": " It has a considerably less dynamic feel than for example [[Common Lisp]]",
      "id": "5625545a30e699af9c21e0098ba2b925"
    },
    {
      "type": "html",
      "text": " It introduced [[Lexical Scoping]] into the [[Lisp Family]] of [[Programming Language]]s, a feature subsequently adopted by [[Common Lisp]] ",
      "id": "1099b4e37a37613e87e6ebbcdc514c20"
    },
    {
      "type": "html",
      "text": " It's a small language in the same way that Algol 60 was a small language.",
      "id": "854657f5d3ea5a0a822520bd9405d105"
    },
    {
      "type": "html",
      "text": " It lacks the ability to print an s-expression and parse it back in.",
      "id": "52ad649e06c5376ea4f6e2f76647e4e0"
    },
    {
      "type": "html",
      "text": " The compiler operates on text, not s-expressions/forms",
      "id": "6bc7a6c3d66ba84cac3e8774e72b5429"
    },
    {
      "type": "html",
      "text": " The single namespace for variables and functions",
      "id": "c15bfa978dcf41bcc9b5b875467d151d"
    },
    {
      "type": "html",
      "text": "\nScheme is used in the books [[Structure And Interpretation Of Computer Programs]], [[Essentials Of Programming Languages]], [[Lisp In Small Pieces]], [[How To Design Programs]].",
      "id": "d4e51318e7dd83b6010790786dfacc36"
    },
    {
      "type": "html",
      "text": "<b>External links</b>:",
      "id": "71a32bac78e47b98f5001225990d3282"
    },
    {
      "type": "html",
      "text": " General information: [http://www.schemers.org/ www.schemers.org]",
      "id": "c2889e4eb474ff55c290bb8a18559a8a"
    },
    {
      "type": "html",
      "text": " [[Scheme Requests For Implementation]], the Scheme library standards system: [http://srfi.schemers.org/ srfi.schemers.org]",
      "id": "56ced82c737015abb681f6225729b6b7"
    },
    {
      "type": "html",
      "text": " SLIB, a portable Scheme library: [http://swissnet.ai.mit.edu/~jaffer/SLIB.html swissnet.ai.mit.edu]",
      "id": "3165743835a3e537b1d3bd542a5382c7"
    },
    {
      "type": "html",
      "text": " CSAN (Comprehensive Scheme Archive Network): [http://strader.xs4all.nl/csan/index.html strader.xs4all.nl]",
      "id": "860b5deb08395abf6c2217b874261b70"
    },
    {
      "type": "html",
      "text": " Meet schemers in your area through [[Meet Up]]: [http://scheme.meetup.com scheme.meetup.com]",
      "id": "65cf97f5e9b0446fc9d7f1814612e040"
    },
    {
      "type": "html",
      "text": " Online bibliography of Scheme-related research at [http://library.readscheme.org/ library.readscheme.org] (maintained by [[Jim Bender]])",
      "id": "943bbc7a90249f8a5409f8d58e170955"
    },
    {
      "type": "html",
      "text": " Online Scheme Oriented wiki at [http://community.schemewiki.org community.schemewiki.org]",
      "id": "d20adff9f32a42d538f55e7eb3815baa"
    },
    {
      "type": "html",
      "text": " PLEAC has a partial cookbook for (at least) Guile: [http://pleac.sourceforge.net/ pleac.sourceforge.net]",
      "id": "05712f4ed05effb61bbee2e9f1c40924"
    },
    {
      "type": "html",
      "text": " [[Wiki Pedia]]: [http://en.wikipedia.org/wiki/Scheme_programming_language en.wikipedia.org]",
      "id": "ef1073af598c8025e52405f032b37750"
    },
    {
      "type": "html",
      "text": " [[John Lennon]]'s \"Imagine\" song as re-imagined by a Schemer: [http://www.schemers.org/Miscellaneous/imagine.txt www.schemers.org]",
      "id": "19a576e4c39d7495ffcc271f1a5f7d7c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1d86db3bd0c6b273d6d1f5a68490371d"
    },
    {
      "type": "html",
      "text": "On getting the code for a procedure:",
      "id": "50b4ba8f5606dbe4eaeb9d97f7e8df1a"
    },
    {
      "type": "html",
      "text": "<i>R5RS does not define an external representation for procedure objects and closures, so there is no portable answer. However, depending on the implementation techniques used and the sophistication of its run time system or debugger environment a given Scheme implementation may let you inspect the machine code or [[Byte Code]] representation and the bindings/environment for a given procedure object.</i>",
      "id": "9ac1b9582b1da387fea58c761447ceeb"
    },
    {
      "type": "html",
      "text": "\nAlso, it is possible without too much effort to redefine 'define' to store the definitions in a global map, thus making any non-primitive function's source available. With a little 'magic', it's actually quite easy to make an inspector with formatting, versioning, browsing, etc... :)",
      "id": "fa0ceab42b568cdc637911473491d195"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1d86db3bd0c6b273d6d1f5a68490371d"
    },
    {
      "type": "html",
      "text": "<i>Moved from Learning<b></b>Scheme</i>",
      "id": "6312d836cf7626253617c20abea77742"
    },
    {
      "type": "html",
      "text": "\nAn excellent way to learn Scheme (and a lot more besides!) is to read [[Structure And Interpretation Of Computer Programs]]. Reading SICP is not however something you can do in a weekend, so to get a taste you may like to read a [[Web Scheme Tutorial]]. To play around, you'll need an interpreter like [[Dr Scheme]].",
      "id": "806212b92c05082483179c74faca706f"
    },
    {
      "type": "html",
      "text": "\nIf you read a \"LISP\" tutorial, be mindful that there are many dialects of LISP of which Scheme is one, and while they are similar you will not be able to run (for example) [[Common Lisp]] code in a Scheme interpreter. Generally things that relate to Scheme will say so directly, but if you're in doubt then a good rule of thumb is that names like <i>null?</i>, <i>zero?</i>, <i>define</i> are Schemey, whereas <i>zerop</i>, <i>defun</i>, and <i>setq</i> are more [[Common Lisp]]y.",
      "id": "6a87c3faa143e6cc76e2ceb8c3590bf7"
    },
    {
      "type": "html",
      "text": "<i>Scheme bears roughly the same relationship to [[Mac Lisp]] and [[Common Lisp]] as [[Java Language]] does to [[Cee Language]] and [[Cee Plus Plus]] - or to be a bit more accurate, the same relationship [[Pascal Language]] has to [[Algol Sixty Eight]] and [[Ada Language]], in that Scheme improved on [[Mac Lisp]] by simplifying and regularizing it, and was designed in the early 1970s by a small group of developers for a specific purpose (testing the relationship between Actors and closures, initially, and later, as a language for teaching), whereas Common Lisp improved on [[Mac Lisp]] by vastly expanding it and modernizing it, and was designed in the late 1970s and early 1980s by a large committee to support large project development across diverse platforms. - [[Jay Osako]]</i>",
      "id": "34a240d6d827390c91b27b29ff7b9ccc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1d86db3bd0c6b273d6d1f5a68490371d"
    },
    {
      "type": "html",
      "text": "<i>Evaluator in Silicon</i>",
      "id": "e79a59c1e26ee0dc37e3d59b6d81e8c5"
    },
    {
      "type": "image",
      "url": "http://mitpress.mit.edu/sicp/full-text/book/chip.jpg",
      "text": "mitpress.mit.edu",
      "id": "7836dc119d3e1d105ad121938072a4a2"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "b9a60a1182dae504ec0ef0a5f111d6cc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1d86db3bd0c6b273d6d1f5a68490371d"
    },
    {
      "type": "html",
      "text": "See [[Scheme Implementations]], [[Lisp Scheme Differences]], [[Scheme Macros]], [[Scheme Wiki]], [[Social Problems Of Lisp]], [[Call With Current Continuation]], [[Mit Scheme]]",
      "id": "4ab29a98a9f717ac1708b45be563c976"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1d86db3bd0c6b273d6d1f5a68490371d"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]] [[Category Scheme]]",
      "id": "7f2cd6b8add9560adcb6b507731257ef"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?SchemeLanguage c2.com]",
      "id": "25af7d008e3d6cc1c2424fd27c66f265"
    }
  ],
  "journal": [
    {
      "date": 1407563309000,
      "id": "e32f396f2ce4879b763cb56a68a60b61",
      "type": "create",
      "item": {
        "title": "Scheme Language",
        "story": [
          {
            "type": "html",
            "text": "Lisp done right, according to some. Others prefer [[Common Lisp]], right at the other end of the oversimplified/baroque - or, if you prefer, elegant/full-featured - axis. Standard Scheme as defined by the [[Revised Report On Algorithmic Language Scheme]] is deliberately minimalistic. [[Scheme Requests For Implementation]] provide de facto standards for often needed (and often requested) features and extensions, like record types, multi-threading, exception handling and localization.",
            "id": "1636023e8e2b98397a430f31a12635db"
          },
          {
            "type": "html",
            "text": "\nGiven its small size and minimalistic nature, some ask [[Is Scheme Suitable For Developing Larger Systems]]?",
            "id": "bdd5ce6d7070bc474fbf82960a98a2e2"
          },
          {
            "type": "html",
            "text": "\nScheme was originally inspired by [[Carl Hewitt]]'s [[Actors Model]]. It served as a proof by example that Actors' message-passing model of execution was equivalent to the more common function-call model. [[Gerald Sussman]] and [[Guy Steele]], the original creators of Scheme, discovered that when implementing both models, they ended up with identical functions doing the work.",
            "id": "b59eb27a3be1f518ea54f03aa2c182bd"
          },
          {
            "type": "html",
            "text": "\nIn the words of [[Guy Steele]] ([http://www.dreamsongs.com/ObjectsHaveNotFailedNarr.html www.dreamsongs.com]): <i>The Scheme programming language was born from an attempt in 1975 to explicate [[Object Oriented Programming]] in terms that [[Gerald Sussman]] and I could understand. In particular, we wanted to restate [[Carl Hewitt]]'s theory of actors in words of one syllable, so to speak. One of the conclusions that we reached was that \"object\" need not be a primitive notion in a programming language; one can build objects and their behavior from little more than assignable value cells and good old [[Lambda Expression]]s. Moreover, most of the objects in Hewitt's theory were stateless and unchanging once created; for those, lambda expressions alone were sufficient.</i>",
            "id": "057e49d2a908915db401fa8b9a05779b"
          },
          {
            "type": "html",
            "text": "\nOne outcome of this insight is that standard-compliant [[Scheme Implementations]] are required to support [[Proper Tail Call]]s.",
            "id": "f0c20797feae235dd908427ff778bc59"
          },
          {
            "type": "html",
            "text": "\nScheme is seen by some as the Algol of the [[Lisp Family]] (see [[Algol Language]] and [[Language Families]]), because:",
            "id": "eb5232a955207259286e89dc449e5ad8"
          },
          {
            "type": "html",
            "text": " It has a considerably less dynamic feel than for example [[Common Lisp]]",
            "id": "5625545a30e699af9c21e0098ba2b925"
          },
          {
            "type": "html",
            "text": " It introduced [[Lexical Scoping]] into the [[Lisp Family]] of [[Programming Language]]s, a feature subsequently adopted by [[Common Lisp]] ",
            "id": "1099b4e37a37613e87e6ebbcdc514c20"
          },
          {
            "type": "html",
            "text": " It's a small language in the same way that Algol 60 was a small language.",
            "id": "854657f5d3ea5a0a822520bd9405d105"
          },
          {
            "type": "html",
            "text": " It lacks the ability to print an s-expression and parse it back in.",
            "id": "52ad649e06c5376ea4f6e2f76647e4e0"
          },
          {
            "type": "html",
            "text": " The compiler operates on text, not s-expressions/forms",
            "id": "6bc7a6c3d66ba84cac3e8774e72b5429"
          },
          {
            "type": "html",
            "text": " The single namespace for variables and functions",
            "id": "c15bfa978dcf41bcc9b5b875467d151d"
          },
          {
            "type": "html",
            "text": "\nScheme is used in the books [[Structure And Interpretation Of Computer Programs]], [[Essentials Of Programming Languages]], [[Lisp In Small Pieces]], [[How To Design Programs]].",
            "id": "d4e51318e7dd83b6010790786dfacc36"
          },
          {
            "type": "html",
            "text": "<b>External links</b>:",
            "id": "71a32bac78e47b98f5001225990d3282"
          },
          {
            "type": "html",
            "text": " General information: [http://www.schemers.org/ www.schemers.org]",
            "id": "c2889e4eb474ff55c290bb8a18559a8a"
          },
          {
            "type": "html",
            "text": " [[Scheme Requests For Implementation]], the Scheme library standards system: [http://srfi.schemers.org/ srfi.schemers.org]",
            "id": "56ced82c737015abb681f6225729b6b7"
          },
          {
            "type": "html",
            "text": " SLIB, a portable Scheme library: [http://swissnet.ai.mit.edu/~jaffer/SLIB.html swissnet.ai.mit.edu]",
            "id": "3165743835a3e537b1d3bd542a5382c7"
          },
          {
            "type": "html",
            "text": " CSAN (Comprehensive Scheme Archive Network): [http://strader.xs4all.nl/csan/index.html strader.xs4all.nl]",
            "id": "860b5deb08395abf6c2217b874261b70"
          },
          {
            "type": "html",
            "text": " Meet schemers in your area through [[Meet Up]]: [http://scheme.meetup.com scheme.meetup.com]",
            "id": "65cf97f5e9b0446fc9d7f1814612e040"
          },
          {
            "type": "html",
            "text": " Online bibliography of Scheme-related research at [http://library.readscheme.org/ library.readscheme.org] (maintained by [[Jim Bender]])",
            "id": "943bbc7a90249f8a5409f8d58e170955"
          },
          {
            "type": "html",
            "text": " Online Scheme Oriented wiki at [http://community.schemewiki.org community.schemewiki.org]",
            "id": "d20adff9f32a42d538f55e7eb3815baa"
          },
          {
            "type": "html",
            "text": " PLEAC has a partial cookbook for (at least) Guile: [http://pleac.sourceforge.net/ pleac.sourceforge.net]",
            "id": "05712f4ed05effb61bbee2e9f1c40924"
          },
          {
            "type": "html",
            "text": " [[Wiki Pedia]]: [http://en.wikipedia.org/wiki/Scheme_programming_language en.wikipedia.org]",
            "id": "ef1073af598c8025e52405f032b37750"
          },
          {
            "type": "html",
            "text": " [[John Lennon]]'s \"Imagine\" song as re-imagined by a Schemer: [http://www.schemers.org/Miscellaneous/imagine.txt www.schemers.org]",
            "id": "19a576e4c39d7495ffcc271f1a5f7d7c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1d86db3bd0c6b273d6d1f5a68490371d"
          },
          {
            "type": "html",
            "text": "On getting the code for a procedure:",
            "id": "50b4ba8f5606dbe4eaeb9d97f7e8df1a"
          },
          {
            "type": "html",
            "text": "<i>R5RS does not define an external representation for procedure objects and closures, so there is no portable answer. However, depending on the implementation techniques used and the sophistication of its run time system or debugger environment a given Scheme implementation may let you inspect the machine code or [[Byte Code]] representation and the bindings/environment for a given procedure object.</i>",
            "id": "9ac1b9582b1da387fea58c761447ceeb"
          },
          {
            "type": "html",
            "text": "\nAlso, it is possible without too much effort to redefine 'define' to store the definitions in a global map, thus making any non-primitive function's source available. With a little 'magic', it's actually quite easy to make an inspector with formatting, versioning, browsing, etc... :)",
            "id": "fa0ceab42b568cdc637911473491d195"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1d86db3bd0c6b273d6d1f5a68490371d"
          },
          {
            "type": "html",
            "text": "<i>Moved from Learning<b></b>Scheme</i>",
            "id": "6312d836cf7626253617c20abea77742"
          },
          {
            "type": "html",
            "text": "\nAn excellent way to learn Scheme (and a lot more besides!) is to read [[Structure And Interpretation Of Computer Programs]]. Reading SICP is not however something you can do in a weekend, so to get a taste you may like to read a [[Web Scheme Tutorial]]. To play around, you'll need an interpreter like [[Dr Scheme]].",
            "id": "806212b92c05082483179c74faca706f"
          },
          {
            "type": "html",
            "text": "\nIf you read a \"LISP\" tutorial, be mindful that there are many dialects of LISP of which Scheme is one, and while they are similar you will not be able to run (for example) [[Common Lisp]] code in a Scheme interpreter. Generally things that relate to Scheme will say so directly, but if you're in doubt then a good rule of thumb is that names like <i>null?</i>, <i>zero?</i>, <i>define</i> are Schemey, whereas <i>zerop</i>, <i>defun</i>, and <i>setq</i> are more [[Common Lisp]]y.",
            "id": "6a87c3faa143e6cc76e2ceb8c3590bf7"
          },
          {
            "type": "html",
            "text": "<i>Scheme bears roughly the same relationship to [[Mac Lisp]] and [[Common Lisp]] as [[Java Language]] does to [[Cee Language]] and [[Cee Plus Plus]] - or to be a bit more accurate, the same relationship [[Pascal Language]] has to [[Algol Sixty Eight]] and [[Ada Language]], in that Scheme improved on [[Mac Lisp]] by simplifying and regularizing it, and was designed in the early 1970s by a small group of developers for a specific purpose (testing the relationship between Actors and closures, initially, and later, as a language for teaching), whereas Common Lisp improved on [[Mac Lisp]] by vastly expanding it and modernizing it, and was designed in the late 1970s and early 1980s by a large committee to support large project development across diverse platforms. - [[Jay Osako]]</i>",
            "id": "34a240d6d827390c91b27b29ff7b9ccc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1d86db3bd0c6b273d6d1f5a68490371d"
          },
          {
            "type": "html",
            "text": "<i>Evaluator in Silicon</i>",
            "id": "e79a59c1e26ee0dc37e3d59b6d81e8c5"
          },
          {
            "type": "image",
            "url": "http://mitpress.mit.edu/sicp/full-text/book/chip.jpg",
            "text": "mitpress.mit.edu",
            "id": "7836dc119d3e1d105ad121938072a4a2"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "b9a60a1182dae504ec0ef0a5f111d6cc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1d86db3bd0c6b273d6d1f5a68490371d"
          },
          {
            "type": "html",
            "text": "See [[Scheme Implementations]], [[Lisp Scheme Differences]], [[Scheme Macros]], [[Scheme Wiki]], [[Social Problems Of Lisp]], [[Call With Current Continuation]], [[Mit Scheme]]",
            "id": "4ab29a98a9f717ac1708b45be563c976"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1d86db3bd0c6b273d6d1f5a68490371d"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]] [[Category Scheme]]",
            "id": "7f2cd6b8add9560adcb6b507731257ef"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?SchemeLanguage c2.com]",
            "id": "25af7d008e3d6cc1c2424fd27c66f265"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628075646113
    }
  ]
}