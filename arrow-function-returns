{
  "title": "Arrow function returns",
  "story": [
    {
      "type": "paragraph",
      "id": "847a056e7922e45b",
      "text": "There is a new way to define functions in JavaScript, known as the fat arrow. Fat arrows are intended to be used for quick anonymous functions, especially where you want to use the outer 'this' context. To help streamline this use case when you use them without a single expression instead of a block they implicitly return the value of that expression."
    },
    {
      "type": "code",
      "id": "c77f06d43c6068f4",
      "text": "var nums = [1, 2, 3]\n\nvar total = nums.reduce((a, b) => a + b)\n\nconsole.log(total) //6"
    },
    {
      "type": "paragraph",
      "id": "7c91e37708a03a20",
      "text": "A super concise bit of syntactic sugar. But what if you need multiple statements/expressions inside of your function?"
    },
    {
      "type": "code",
      "id": "2246e0bbc15cd704",
      "text": "var nums = [1, 2, 3]\n// broke\nvar total = nums.reduce((a, b) => {\n  console.log('Summing: ', a, b)\n  a + b\n})\n\nconsole.log(total) // undefined\n"
    },
    {
      "type": "paragraph",
      "id": "a02bb755440c20df",
      "text": "Still concise, but we log undefined instead of 6... Arrow functions with curly braces around the body don't implicitly return the value of their last expression."
    },
    {
      "type": "paragraph",
      "id": "ac73d9ee22b71ca4",
      "text": "I propose that we restrict ourselves to only the first form, the single expression arrow function. When functions grow more than a single expression, pull them out, make them function statements at the highest level they can be, and give them a meaningful name."
    },
    {
      "type": "code",
      "id": "f778796c4955e74b",
      "text": "var nums = [1, 2, 3]\n\nvar total = nums.reduce(sum)\n\nconsole.log(total) // 6\n\nfunction sum (a, b) {\n  console.log('Summing: ', a, b)\n  return a + b\n}"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Arrow function returns",
        "story": []
      },
      "date": 1431497044440
    },
    {
      "item": {
        "type": "factory",
        "id": "847a056e7922e45b"
      },
      "id": "847a056e7922e45b",
      "type": "add",
      "date": 1431497047463
    },
    {
      "type": "edit",
      "id": "847a056e7922e45b",
      "item": {
        "type": "paragraph",
        "id": "847a056e7922e45b",
        "text": "There is a new way to define functions in JavaScript, known as the fat arrow. Fat arrows are intended to be used for quick anonymous functions, especially where you want to use the outer 'this' context. To help streamline this use case when you use them without a single expression instead of a block they implicitly return the value of that expression."
      },
      "date": 1431497330335
    },
    {
      "item": {
        "type": "factory",
        "id": "c77f06d43c6068f4"
      },
      "id": "c77f06d43c6068f4",
      "type": "add",
      "after": "847a056e7922e45b",
      "date": 1431535813479
    },
    {
      "type": "edit",
      "id": "c77f06d43c6068f4",
      "item": {
        "type": "code",
        "id": "c77f06d43c6068f4",
        "text": "var nums = [1, 2, 3]\n\nvar total = nums.reduce((a, b) => a + b)\n\nconsole.log(total)"
      },
      "date": 1431535820315
    },
    {
      "type": "edit",
      "id": "c77f06d43c6068f4",
      "item": {
        "type": "code",
        "id": "c77f06d43c6068f4",
        "text": "var nums = [1, 2, 3]\n\nvar total = nums.reduce((a, b) => a + b)\n\nconsole.log(total) //6"
      },
      "date": 1431535834630
    },
    {
      "item": {
        "type": "factory",
        "id": "7c91e37708a03a20"
      },
      "id": "7c91e37708a03a20",
      "type": "add",
      "after": "c77f06d43c6068f4",
      "date": 1431535934182
    },
    {
      "type": "edit",
      "id": "7c91e37708a03a20",
      "item": {
        "type": "paragraph",
        "id": "7c91e37708a03a20",
        "text": "A super concise bit of syntactic sugar. But what if you need multiple statements/expressions inside of your function?"
      },
      "date": 1431535986168
    },
    {
      "item": {
        "type": "factory",
        "id": "f719a8345a67e186"
      },
      "id": "f719a8345a67e186",
      "type": "add",
      "after": "7c91e37708a03a20",
      "date": 1431536172491
    },
    {
      "type": "remove",
      "id": "f719a8345a67e186",
      "date": 1431536175580
    },
    {
      "item": {
        "type": "factory",
        "id": "2246e0bbc15cd704"
      },
      "id": "2246e0bbc15cd704",
      "type": "add",
      "after": "7c91e37708a03a20",
      "date": 1431536177912
    },
    {
      "type": "edit",
      "id": "2246e0bbc15cd704",
      "item": {
        "type": "code",
        "id": "2246e0bbc15cd704",
        "text": "var nums = [1, 2, 3]\n// broke\nvar total = nums.reduce((a, b) => {\n  console.log('Summing: ', a, b)\n  a + b\n})\n\nconsole.log(total) // undefined\n"
      },
      "date": 1431536184150
    },
    {
      "item": {
        "type": "factory",
        "id": "a02bb755440c20df"
      },
      "id": "a02bb755440c20df",
      "type": "add",
      "after": "2246e0bbc15cd704",
      "date": 1431536202300
    },
    {
      "type": "edit",
      "id": "a02bb755440c20df",
      "item": {
        "type": "paragraph",
        "id": "a02bb755440c20df",
        "text": "Still concise, but we log undefined instead of 6... For whatever reason we don't "
      },
      "date": 1431536294278
    },
    {
      "type": "edit",
      "id": "a02bb755440c20df",
      "item": {
        "type": "paragraph",
        "id": "a02bb755440c20df",
        "text": "Still concise, but we log undefined instead of 6... Arrow functions with curly braces around the body don't implicitly return the value of their last expression."
      },
      "date": 1431536417009
    },
    {
      "type": "add",
      "id": "ac73d9ee22b71ca4",
      "item": {
        "type": "paragraph",
        "id": "ac73d9ee22b71ca4",
        "text": "I propose that we restrict ourselves to only the first form, the single expression arrow function. When functions grow more than a single expression, pull them out, make them function statements at the highest level they can be, and give them a meaningful name."
      },
      "after": "a02bb755440c20df",
      "date": 1431536618836
    },
    {
      "item": {
        "type": "factory",
        "id": "cd9988db404db59b"
      },
      "id": "cd9988db404db59b",
      "type": "add",
      "after": "ac73d9ee22b71ca4",
      "date": 1431536740476
    },
    {
      "type": "remove",
      "id": "cd9988db404db59b",
      "date": 1431536751615
    },
    {
      "item": {
        "type": "factory",
        "id": "f778796c4955e74b"
      },
      "id": "f778796c4955e74b",
      "type": "add",
      "after": "ac73d9ee22b71ca4",
      "date": 1431536753583
    },
    {
      "type": "edit",
      "id": "f778796c4955e74b",
      "item": {
        "type": "code",
        "id": "f778796c4955e74b",
        "text": "var nums = [1, 2, 3]\n\nvar total = nums.reduce(sum)\n\nconsole.log(total) // 6\n\nfunction sum (a, b) {\n  console.log('Summing: ', a, b)\n  return a + b\n}"
      },
      "date": 1431536758696
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1652868447483
    }
  ]
}