{
  "title": "S2S",
  "story": [
    {
      "type": "paragraph",
      "id": "0e8b2c1b1a30e902",
      "text": "There were two major refactorings in the past, if I (jon r) 'm not mistaken: the porting from Ruby to Node, and then the deprecation of the S2S federation API, and soley relying on \"passive\" federation via CORS and voluntary forking. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170276993248jXXBx:gitter.im?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
    },
    {
      "type": "paragraph",
      "id": "b10bc2bb256c8678",
      "text": "I (Ward) don't remember S2S federation. Is that something you did? [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170277369830505jcKai:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
    },
    {
      "type": "pagefold",
      "id": "669826787579affb",
      "text": "Service-to-Service, Server-to-Server"
    },
    {
      "type": "paragraph",
      "id": "68865538a42be27b",
      "text": "FITZGERALD, William Michael and FOLEY, Simon, 2010. Management of heterogeneous security access control configuration using an ontology engineering approach. In: Proceedings of the 3rd ACM workshop on Assurable and usable security configuration. Online. Chicago Illinois USA: ACM. 4 October 2010. p. 27–36. ISBN 978-1-4503-0093-3. DOI 10.1145/1866898.1866903. [Accessed 17 December 2023]."
    },
    {
      "type": "markdown",
      "id": "bc30ab582934192e",
      "text": "**Abstract** Management of heterogeneous enterprise security mechanisms is complex and requires a security administrator to have deep knowledge of each security mechanism’s configuration. Effective configuration may be hampered by poor understanding and/or management of the enterprise security policy which, in turn, may unnecessarily expose the enterprise to known threats. This paper argues that knowledge about detailed security configuration, enterprise-level security requirements including best practice recommendations and their relationships can be modelled, queried and reasoned over within an ontology-based framework. A threatbased approach is taken to structure this knowledge. The management of XMPP application-level and firewall-level access control configuration is investigated."
    },
    {
      "type": "paragraph",
      "id": "e2ae98464a1e5285",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "15b9de9e9aa739ae",
      "text": "Access control configuration may be hampered by poor understanding and/or management of the enterprise security policy. For example, consider the following enterprise-level security requirements regarding an XMPP server: permit client-to-server (C2S) access to the XMPP server; permit clients to transfer files over XMPP on the internal network and permit server-to-server (S2S) access with trusted external XMPP servers. However, implementing access-control rules for XMPP clients and servers is not just about making ports 5222 (C2S) and 5269 (S2S) accessible on the XMPP server and/or intermediatory access controls such as firewalls. One may wish to only permit certain C2S communication (for example, by an IP address whitelist), require clients to use TLS encryption, accept only SASL [31] authentication from some S2S communication and dialback [24] authentication for others, prevent external file transfer and deal with XMPP traffic that is tunneled through proxies (for example, XMPP HTTP-bind). Furthermore, XMPP traffic does not necessarily have to communicate on the IANA [19] recommended XMPP ports. It may also be prudent to provide content sanitation at the application-layer. For example, controlling Spam over Instant Messaging (SPIM) by filtering known SPIM signatures within XMPP message stanzas."
    },
    {
      "type": "paragraph",
      "id": "aaa3f7947bc5b401",
      "text": "LAPINSKI, Michael and SOBOLEWSKI, Michael, 2003. Managing Notifications in a Federated S2S Environment. Concurrent Engineering. Online. March 2003. Vol. 11, no. 1, p. 17–25. DOI 10.1177/1063293X03011001002. [Accessed 17 December 2023]. \nThe goal of the Federated Intelligent Product Environment (FIPER) is to form a federation of distributed services that provide engineering data, applications and tools on a network. A highly flexible software architecture has been developed, in which engineering tools like computer-aided design (CAD), computer-aided engineering (CAE), product data management (PDM), optimization, cost modeling, etc., act as distributed service providers and service requestors. Service providers can enter the federation by registering with a service registry and publish the services through a process of discovery and join. An environment like this requires a mechanism for interprocess message passing from services to clients, services to services, and even clients to clients. The design issues of such a system and its implementation in the FIPER environment are described."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "S2S",
        "story": []
      },
      "date": 1702789410749
    },
    {
      "id": "0e8b2c1b1a30e902",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "0e8b2c1b1a30e902",
        "text": "There were two major refactorings in the past, if I (jon r) 'm not mistaken: the porting from Ruby to Node, and then the deprecation of the S2S federation API, and soley relying on \"passive\" federation via CORS and voluntary forking. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170276993248jXXBx:gitter.im?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "attribution": {
        "page": "2023-12-17"
      },
      "date": 1702789412991
    },
    {
      "id": "b10bc2bb256c8678",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b10bc2bb256c8678",
        "text": "I (Ward) don't remember S2S federation. Is that something you did? [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170277369830505jcKai:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "after": "0e8b2c1b1a30e902",
      "attribution": {
        "page": "2023-12-17"
      },
      "date": 1702789415470
    },
    {
      "id": "7d4d39d2bd575807",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7d4d39d2bd575807",
        "text": "Service-to-Service ([[S2S]])"
      },
      "after": "b10bc2bb256c8678",
      "attribution": {
        "page": "2023-12-17"
      },
      "date": 1702789423278
    },
    {
      "type": "edit",
      "id": "7d4d39d2bd575807",
      "item": {
        "type": "paragraph",
        "id": "7d4d39d2bd575807",
        "text": "Service-to-Service, server-to-server"
      },
      "date": 1702789445489
    },
    {
      "type": "edit",
      "id": "7d4d39d2bd575807",
      "item": {
        "type": "paragraph",
        "id": "7d4d39d2bd575807",
        "text": "Service-to-Service, Server-to-Server"
      },
      "date": 1702789477370
    },
    {
      "item": {
        "type": "factory",
        "id": "669826787579affb"
      },
      "id": "669826787579affb",
      "type": "add",
      "after": "7d4d39d2bd575807",
      "date": 1702789479179
    },
    {
      "type": "remove",
      "id": "7d4d39d2bd575807",
      "date": 1702789481919
    },
    {
      "type": "edit",
      "id": "669826787579affb",
      "item": {
        "type": "pagefold",
        "id": "669826787579affb",
        "text": "Service-to-Service, Server-to-Server"
      },
      "date": 1702789484175
    },
    {
      "id": "68865538a42be27b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "68865538a42be27b",
        "text": "FITZGERALD, William Michael and FOLEY, Simon, 2010. Management of heterogeneous security access control configuration using an ontology engineering approach. In: Proceedings of the 3rd ACM workshop on Assurable and usable security configuration. Online. Chicago Illinois USA: ACM. 4 October 2010. p. 27–36. ISBN 978-1-4503-0093-3. DOI 10.1145/1866898.1866903. [Accessed 17 December 2023]."
      },
      "after": "669826787579affb",
      "attribution": {
        "page": "2023-12-17"
      },
      "date": 1702789490598
    },
    {
      "id": "15b9de9e9aa739ae",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "15b9de9e9aa739ae",
        "text": "Access control configuration may be hampered by poor understanding and/or management of the enterprise security policy. For example, consider the following enterprise-level security requirements regarding an XMPP server: permit client-to-server (C2S) access to the XMPP server; permit clients to transfer files over XMPP on the internal network and permit server-to-server (S2S) access with trusted external XMPP servers. However, implementing access-control rules for XMPP clients and servers is not just about making ports 5222 (C2S) and 5269 (S2S) accessible on the XMPP server and/or intermediatory access controls such as firewalls. One may wish to only permit certain C2S communication (for example, by an IP address whitelist), require clients to use TLS encryption, accept only SASL [31] authentication from some S2S communication and dialback [24] authentication for others, prevent external file transfer and deal with XMPP traffic that is tunneled through proxies (for example, XMPP HTTP-bind). Furthermore, XMPP traffic does not necessarily have to communicate on the IANA [19] recommended XMPP ports. It may also be prudent to provide content sanitation at the application-layer. For example, controlling Spam over Instant Messaging (SPIM) by filtering known SPIM signatures within XMPP message stanzas."
      },
      "after": "68865538a42be27b",
      "attribution": {
        "page": "2023-12-17"
      },
      "date": 1702789494406
    },
    {
      "id": "aaa3f7947bc5b401",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "aaa3f7947bc5b401",
        "text": "LAPINSKI, Michael and SOBOLEWSKI, Michael, 2003. Managing Notifications in a Federated S2S Environment. Concurrent Engineering. Online. March 2003. Vol. 11, no. 1, p. 17–25. DOI 10.1177/1063293X03011001002. [Accessed 17 December 2023]. \nThe goal of the Federated Intelligent Product Environment (FIPER) is to form a federation of distributed services that provide engineering data, applications and tools on a network. A highly flexible software architecture has been developed, in which engineering tools like computer-aided design (CAD), computer-aided engineering (CAE), product data management (PDM), optimization, cost modeling, etc., act as distributed service providers and service requestors. Service providers can enter the federation by registering with a service registry and publish the services through a process of discovery and join. An environment like this requires a mechanism for interprocess message passing from services to clients, services to services, and even clients to clients. The design issues of such a system and its implementation in the FIPER environment are described."
      },
      "after": "15b9de9e9aa739ae",
      "attribution": {
        "page": "2023-12-17"
      },
      "date": 1702789500873
    },
    {
      "type": "add",
      "id": "bc30ab582934192e",
      "item": {
        "type": "paragraph",
        "id": "bc30ab582934192e",
        "text": "ABSTRACT Management of heterogeneous enterprise security mechanisms is complex and requires a security administrator to have deep knowledge of each security mechanism’s configuration. Effective configuration may be hampered by poor understanding and/or management of the enterprise security policy which, in turn, may unnecessarily expose the enterprise to known threats. This paper argues that knowledge about detailed security configuration, enterprise-level security requirements including best practice recommendations and their relationships can be modelled, queried and reasoned over within an ontology-based framework. A threatbased approach is taken to structure this knowledge. The management of XMPP application-level and firewall-level access control configuration is investigated."
      },
      "after": "68865538a42be27b",
      "date": 1702789574894
    },
    {
      "type": "add",
      "id": "e2ae98464a1e5285",
      "item": {
        "type": "paragraph",
        "id": "e2ae98464a1e5285",
        "text": "[…]"
      },
      "after": "bc30ab582934192e",
      "date": 1702789577078
    },
    {
      "type": "edit",
      "id": "bc30ab582934192e",
      "item": {
        "type": "paragraph",
        "id": "bc30ab582934192e",
        "text": "**Abstract** Management of heterogeneous enterprise security mechanisms is complex and requires a security administrator to have deep knowledge of each security mechanism’s configuration. Effective configuration may be hampered by poor understanding and/or management of the enterprise security policy which, in turn, may unnecessarily expose the enterprise to known threats. This paper argues that knowledge about detailed security configuration, enterprise-level security requirements including best practice recommendations and their relationships can be modelled, queried and reasoned over within an ontology-based framework. A threatbased approach is taken to structure this knowledge. The management of XMPP application-level and firewall-level access control configuration is investigated."
      },
      "date": 1702789597810
    },
    {
      "type": "edit",
      "id": "bc30ab582934192e",
      "item": {
        "type": "markdown",
        "id": "bc30ab582934192e",
        "text": "**Abstract** Management of heterogeneous enterprise security mechanisms is complex and requires a security administrator to have deep knowledge of each security mechanism’s configuration. Effective configuration may be hampered by poor understanding and/or management of the enterprise security policy which, in turn, may unnecessarily expose the enterprise to known threats. This paper argues that knowledge about detailed security configuration, enterprise-level security requirements including best practice recommendations and their relationships can be modelled, queried and reasoned over within an ontology-based framework. A threatbased approach is taken to structure this knowledge. The management of XMPP application-level and firewall-level access control configuration is investigated."
      },
      "date": 1702789599239
    }
  ]
}