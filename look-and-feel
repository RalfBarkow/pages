{
  "title": "Look and Feel",
  "story": [
    {
      "type": "paragraph",
      "id": "c2f6e27b51c3cffd",
      "text": "Class LookAndFeel [https://docs.oracle.com/javase/8/docs/api/javax/swing/LookAndFeel.html docs]"
    },
    {
      "type": "markdown",
      "id": "85e6636509d5c21c",
      "text": "> [[Swing]] is built upon the foundation that each JComponent subclass has an implementation of a specific ComponentUI subclass. The ComponentUI is often referred to as \"the ui\", \"component ui\", or \"look and feel delegate\". The ComponentUI subclass is responsible for providing the look and feel specific functionality of the component. For example, JTree requires an implementation of the ComponentUI subclass TreeUI. The implementation of the specific ComponentUI subclass is provided by the LookAndFeel. Each JComponent subclass identifies the ComponentUI subclass it requires by way of the JComponent method getUIClassID. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Look and Feel",
        "story": []
      },
      "date": 1698733276622
    },
    {
      "item": {
        "type": "factory",
        "id": "c2f6e27b51c3cffd"
      },
      "id": "c2f6e27b51c3cffd",
      "type": "add",
      "date": 1698733278168
    },
    {
      "type": "edit",
      "id": "c2f6e27b51c3cffd",
      "item": {
        "type": "paragraph",
        "id": "c2f6e27b51c3cffd",
        "text": "Class LookAndFeel"
      },
      "date": 1698733281725
    },
    {
      "type": "edit",
      "id": "c2f6e27b51c3cffd",
      "item": {
        "type": "paragraph",
        "id": "c2f6e27b51c3cffd",
        "text": "Class LookAndFeel [https://docs.oracle.com/javase/8/docs/api/javax/swing/LookAndFeel.html docs]"
      },
      "date": 1698733297996
    },
    {
      "item": {
        "type": "factory",
        "id": "85e6636509d5c21c"
      },
      "id": "85e6636509d5c21c",
      "type": "add",
      "after": "c2f6e27b51c3cffd",
      "date": 1698733340510
    },
    {
      "type": "edit",
      "id": "85e6636509d5c21c",
      "item": {
        "type": "paragraph",
        "id": "85e6636509d5c21c",
        "text": "> [[Swing]] is built upon the foundation that each JComponent subclass has an implementation of a specific ComponentUI subclass. The ComponentUI is often referred to as \"the ui\", \"component ui\", or \"look and feel delegate\". The ComponentUI subclass is responsible for providing the look and feel specific functionality of the component. For example, JTree requires an implementation of the ComponentUI subclass TreeUI. The implementation of the specific ComponentUI subclass is provided by the LookAndFeel. Each JComponent subclass identifies the ComponentUI subclass it requires by way of the JComponent method getUIClassID. "
      },
      "date": 1698733350819
    },
    {
      "type": "edit",
      "id": "85e6636509d5c21c",
      "item": {
        "type": "markdown",
        "id": "85e6636509d5c21c",
        "text": "> [[Swing]] is built upon the foundation that each JComponent subclass has an implementation of a specific ComponentUI subclass. The ComponentUI is often referred to as \"the ui\", \"component ui\", or \"look and feel delegate\". The ComponentUI subclass is responsible for providing the look and feel specific functionality of the component. For example, JTree requires an implementation of the ComponentUI subclass TreeUI. The implementation of the specific ComponentUI subclass is provided by the LookAndFeel. Each JComponent subclass identifies the ComponentUI subclass it requires by way of the JComponent method getUIClassID. "
      },
      "date": 1698733351939
    }
  ]
}