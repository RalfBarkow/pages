{
  "title": "Comparable Work",
  "story": [
    {
      "type": "paragraph",
      "id": "dd3c793f719e464c",
      "text": "Developers are surprisingly bad estimators when it comes to dates. On the other hand, they have a good memory of what circumstances lead to what problems on just about every project they ever worked on and have a sixth sense for the same circumstances in a new project.\n\n"
    },
    {
      "type": "html",
      "id": "e7d6e13c7ace1e55",
      "text": "<b>Therefore:</b> Let developers estimate effort by selecting comparable work. A job that is 2/3 as complex as some previous job will probably take about 2/3 as long. Comparable estimates are usually accurate even for ill-defined projects unless there is hidden complexity not taken into account when selecting comparable. "
    },
    {
      "type": "paragraph",
      "id": "f7dd5d92a031cab4",
      "text": "Hidden complexity usually shows within a few days of actually starting work. It's OK to challenge an estimate that is not taken seriously but don't try to hold developers to last week's estimate when they've uncovered hidden complexity. Take heart, there is such a thing as hidden simplicity that does surface on occasion.\n\n"
    },
    {
      "type": "paragraph",
      "id": "0190989b4bb30d4a",
      "text": "As an aid to memory, record uninterrupted days applied to current efforts as was done in Figure 3. This data will be a handy reference when today's projects become tomorrow's comparable. Do not expect a week on the job to yield more than two or three full days of development. "
    },
    {
      "type": "paragraph",
      "id": "bf0f5b2aa7063574",
      "text": "Also, don't try to use this data for performance evaluation. To do so will destroy the frank relationship required for good estimating. Besides, it's not clear whether bigger or smaller numbers indicate improved performance. It will be necessary to prorate accumulated effort data should a project undergo a Work Split. Some ratio will suggest itself. Just don't count days twice.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Comparable Work",
        "story": []
      },
      "date": 1389417321273
    },
    {
      "item": {
        "type": "factory",
        "id": "dd3c793f719e464c"
      },
      "id": "dd3c793f719e464c",
      "type": "add",
      "date": 1389417322966
    },
    {
      "type": "edit",
      "id": "dd3c793f719e464c",
      "item": {
        "type": "paragraph",
        "id": "dd3c793f719e464c",
        "text": "Developers are surprisingly bad estimators when it comes to dates. On the other hand, they have a good memory of what circumstances lead to what problems on just about every project they ever worked on and have a sixth sense for the same circumstances in a new project.\n\n"
      },
      "date": 1389417329927
    },
    {
      "item": {
        "type": "paragraph",
        "id": "e7d6e13c7ace1e55",
        "text": "Therefore: Let developers estimate effort by selecting comparable work. A job that is 2/3 as complex as some previous job will probably take about 2/3 as long. Comparable estimates are usually accurate even for ill-defined projects unless there is hidden complexity not taken into account when selecting comparable. Hidden complexity usually shows within a few days of actually starting work. It's OK to challenge an estimate that is not taken seriously but don't try to hold developers to last week's estimate when they've uncovered hidden complexity. Take heart, there is such a thing as hidden simplicity that does surface on occasion.\n\nAs an aid to memory, record uninterrupted days applied to current efforts as was done in Figure 3. This data will be a handy reference when today's projects become tomorrow's comparable. Do not expect a week on the job to yield more than two or three full days of development. Also, don't try to use this data for performance evaluation. To do so will destroy the frank relationship required for good estimating. Besides, it's not clear whether bigger or smaller numbers indicate improved performance. It will be necessary to prorate accumulated effort data should a project undergo a Work Split. Some ratio will suggest itself. Just don't count days twice.\n"
      },
      "id": "e7d6e13c7ace1e55",
      "type": "add",
      "after": "dd3c793f719e464c",
      "date": 1389417330435
    },
    {
      "type": "edit",
      "id": "e7d6e13c7ace1e55",
      "item": {
        "type": "paragraph",
        "id": "e7d6e13c7ace1e55",
        "text": "<b>Therefore:</b> Let developers estimate effort by selecting comparable work. A job that is 2/3 as complex as some previous job will probably take about 2/3 as long. Comparable estimates are usually accurate even for ill-defined projects unless there is hidden complexity not taken into account when selecting comparable. "
      },
      "date": 1389417347920
    },
    {
      "item": {
        "type": "paragraph",
        "id": "f7dd5d92a031cab4",
        "text": "Hidden complexity usually shows within a few days of actually starting work. It's OK to challenge an estimate that is not taken seriously but don't try to hold developers to last week's estimate when they've uncovered hidden complexity. Take heart, there is such a thing as hidden simplicity that does surface on occasion.\n\nAs an aid to memory, record uninterrupted days applied to current efforts as was done in Figure 3. This data will be a handy reference when today's projects become tomorrow's comparable. Do not expect a week on the job to yield more than two or three full days of development. Also, don't try to use this data for performance evaluation. To do so will destroy the frank relationship required for good estimating. Besides, it's not clear whether bigger or smaller numbers indicate improved performance. It will be necessary to prorate accumulated effort data should a project undergo a Work Split. Some ratio will suggest itself. Just don't count days twice.\n"
      },
      "id": "f7dd5d92a031cab4",
      "type": "add",
      "after": "e7d6e13c7ace1e55",
      "date": 1389417348429
    },
    {
      "type": "edit",
      "id": "f7dd5d92a031cab4",
      "item": {
        "type": "paragraph",
        "id": "f7dd5d92a031cab4",
        "text": "Hidden complexity usually shows within a few days of actually starting work. It's OK to challenge an estimate that is not taken seriously but don't try to hold developers to last week's estimate when they've uncovered hidden complexity. Take heart, there is such a thing as hidden simplicity that does surface on occasion.\n\n"
      },
      "date": 1389417354417
    },
    {
      "item": {
        "type": "paragraph",
        "id": "0190989b4bb30d4a",
        "text": "As an aid to memory, record uninterrupted days applied to current efforts as was done in Figure 3. This data will be a handy reference when today's projects become tomorrow's comparable. Do not expect a week on the job to yield more than two or three full days of development. Also, don't try to use this data for performance evaluation. To do so will destroy the frank relationship required for good estimating. Besides, it's not clear whether bigger or smaller numbers indicate improved performance. It will be necessary to prorate accumulated effort data should a project undergo a Work Split. Some ratio will suggest itself. Just don't count days twice.\n"
      },
      "id": "0190989b4bb30d4a",
      "type": "add",
      "after": "f7dd5d92a031cab4",
      "date": 1389417354928
    },
    {
      "type": "edit",
      "id": "0190989b4bb30d4a",
      "item": {
        "type": "paragraph",
        "id": "0190989b4bb30d4a",
        "text": "As an aid to memory, record uninterrupted days applied to current efforts as was done in Figure 3. This data will be a handy reference when today's projects become tomorrow's comparable. Do not expect a week on the job to yield more than two or three full days of development. "
      },
      "date": 1389417372742
    },
    {
      "item": {
        "type": "paragraph",
        "id": "bf0f5b2aa7063574",
        "text": "Also, don't try to use this data for performance evaluation. To do so will destroy the frank relationship required for good estimating. Besides, it's not clear whether bigger or smaller numbers indicate improved performance. It will be necessary to prorate accumulated effort data should a project undergo a Work Split. Some ratio will suggest itself. Just don't count days twice.\n"
      },
      "id": "bf0f5b2aa7063574",
      "type": "add",
      "after": "0190989b4bb30d4a",
      "date": 1389417373249
    },
    {
      "type": "edit",
      "id": "e7d6e13c7ace1e55",
      "item": {
        "type": "html",
        "id": "e7d6e13c7ace1e55",
        "text": "<b>Therefore:</b> Let developers estimate effort by selecting comparable work. A job that is 2/3 as complex as some previous job will probably take about 2/3 as long. Comparable estimates are usually accurate even for ill-defined projects unless there is hidden complexity not taken into account when selecting comparable. "
      },
      "date": 1420949721404
    },
    {
      "type": "fork",
      "site": "episodes.fed.wiki.org",
      "date": 1664338655789
    }
  ]
}