{
  "title": "Smalltalk VM Development",
  "story": [
    {
      "type": "paragraph",
      "id": "e35ab5290f9d6f5f",
      "text": "Two Decades of [[Smalltalk VM Development]] [https://hal.archives-ouvertes.fr/hal-01883380/file/hal.pdf pdf]"
    },
    {
      "type": "markdown",
      "id": "1aace12d06d0fd9d",
      "text": "> **Abstract**. OpenSmalltalk-VM is a virtual machine (VM) for languages in the Smalltalk family (e.g. Squeak, Pharo) which is itself written in a subset of Smalltalk that can easily be translated to C. Development is done in Smalltalk, an activity we call “Simulation”. The production VM is derived by translating the core VM code to C. As a result, two execution models coexist: simulation, where the Smalltalk code is executed on top of a Smalltalk VM, and production, where the same code is compiled to an executable through a C compiler.\n>\n> In this paper, we detail the VM simulation infrastructure and we report our experience developing and debugging the garbage collector and the just-in-time compiler (JIT) within it. Then, we discuss how we use the simulation infrastructure to perform analysis on the runtime, directing some design decisions we have made to tune VM performance.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Smalltalk VM Development",
        "story": []
      },
      "date": 1641311141171
    },
    {
      "item": {
        "type": "factory",
        "id": "f7e22be6f9dedffd"
      },
      "id": "f7e22be6f9dedffd",
      "type": "add",
      "date": 1641311175334
    },
    {
      "id": "e35ab5290f9d6f5f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e35ab5290f9d6f5f",
        "text": "Two Decades of [[Smalltalk VM Development]] [https://hal.archives-ouvertes.fr/hal-01883380/file/hal.pdf pdf]"
      },
      "date": 1641311177687
    },
    {
      "id": "1aace12d06d0fd9d",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "1aace12d06d0fd9d",
        "text": "> **Abstract**. OpenSmalltalk-VM is a virtual machine (VM) for languages in the Smalltalk family (e.g. Squeak, Pharo) which is itself written in a subset of Smalltalk that can easily be translated to C. Development is done in Smalltalk, an activity we call “Simulation”. The production VM is derived by translating the core VM code to C. As a result, two execution models coexist: simulation, where the Smalltalk code is executed on top of a Smalltalk VM, and production, where the same code is compiled to an executable through a C compiler.\n>\n> In this paper, we detail the VM simulation infrastructure and we report our experience developing and debugging the garbage collector and the just-in-time compiler (JIT) within it. Then, we discuss how we use the simulation infrastructure to perform analysis on the runtime, directing some design decisions we have made to tune VM performance.\n"
      },
      "after": "e35ab5290f9d6f5f",
      "date": 1641311179874
    },
    {
      "type": "remove",
      "id": "f7e22be6f9dedffd",
      "date": 1641311188552
    }
  ]
}