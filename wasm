{
  "title": "wasm",
  "story": [
    {
      "text": "[[WebAssembly]] (__Wasm__) is a new type of code that can be run in modern web browsers — it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++ with a compilation target so that they can run on the web. It is also designed to run alongside JavaScript, allowing both to work together - [https://developer.mozilla.org/en-US/docs/WebAssembly developer.mozilla.org]\n",
      "id": "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
      "type": "markdown"
    },
    {
      "type": "markdown",
      "id": "cc1c3a9bf7f0c340",
      "text": "- Running remote code on friend's computers, using [[WebAssembly]] for security - looking good to [[SSB]] team - [http://twitter.com/andrestaltz/status/1061178360800440320 twitter]\n- webassembly \"perfect for security\"\n- no full linux vm overhead, attack surface area\n- no huge api/edgecase javascript lockdown\n- fully static (code can't dynamically self-change)\n- code/memory separation\n- adoption growing\n- tools coming\n"
    },
    {
      "type": "markdown",
      "id": "55d969ad75b623ab",
      "text": "WebAssembly is a portable binary instruction format for executable programs, whose main goal is to enable high performance applications on web pages, but also to be embedded in other environments, such as IoT devices. \n"
    },
    {
      "type": "markdown",
      "id": "c801db82ffb4f0e0",
      "text": "WebAssembly is designed to be run on an abstract stack-based virtual machine, can be parsed faster than JavaScript, and its binaries are smaller than the corresponding JavaScript programs due to a very compact code representation.\n"
    },
    {
      "type": "markdown",
      "id": "f02bc423d21e9c48",
      "text": "WebAssembly specifies two formats: textual and binary. The textual format is intended to be human-readable — below is an example of a recursive factorial function written in C, and translated to textual WebAssembly:\n"
    },
    {
      "type": "code",
      "id": "1664e73bc9d14160",
      "text": "long fact(long n) {\n  if (n == 0)\n    return 1L;\n  else\n    return n * fact(n - 1);\n}"
    },
    {
      "type": "markdown",
      "id": "5ee13d7503106395",
      "text": "The corresponding WebAssembly looks as follows:"
    },
    {
      "type": "code",
      "id": "ad1fd652784a8cd5",
      "text": "get_local 0\ni64.eqz\nif (result i64)\n    i64.const 1\nelse\n    get_local 0\n    get_local 0\n    i64.const 1\n    i64.sub\n    call 0\n    i64.mul\nend"
    },
    {
      "type": "markdown",
      "id": "72e07c78bdf5dbc0",
      "text": "# See also\n"
    },
    {
      "type": "markdown",
      "id": "c31f3d33ebd3554c",
      "text": "- [[Emscripten]]\n- [[Transpiler]]\n- [[WebAssembly]]\n- [[Web Components]]\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "wasm",
        "story": []
      },
      "date": 1541863783149
    },
    {
      "item": {
        "type": "audio",
        "id": "276dfabd56fb4c8b"
      },
      "id": "276dfabd56fb4c8b",
      "type": "add",
      "date": 1541863791837
    },
    {
      "type": "fork",
      "date": 1541863838406
    },
    {
      "type": "edit",
      "id": "276dfabd56fb4c8b",
      "item": {
        "type": "audio",
        "id": "276dfabd56fb4c8b",
        "text": "twitter.com/andrestaltz/status/1061178360800440320WASM looking good to SSB team:  \n\nwebassembly \"perfect for security\"  \nno full linux vm overhead, attack surface area  \nno huge api/edgecase javascript lockdown  \nfully static  \ncode/memory separation  \n(code can't dynamically self-change)  \nadoption growing  \ntools coming  \n\n\n\n\n\n\n\n\n\n\n\n"
      },
      "date": 1541863840302
    },
    {
      "type": "edit",
      "id": "276dfabd56fb4c8b",
      "item": {
        "type": "audio",
        "id": "276dfabd56fb4c8b",
        "text": "[twitter.com/andrestaltz/status/1061178360800440320 WASM] looking good to SSB team:  \n\nwebassembly \"perfect for security\"  \nno full linux vm overhead, attack surface area  \nno huge api/edgecase javascript lockdown  \nfully static  \ncode/memory separation  \n(code can't dynamically self-change)  \nadoption growing  \ntools coming  \n\n\n\n\n\n\n\n\n\n\n\n\n\n"
      },
      "date": 1541863880667
    },
    {
      "type": "edit",
      "id": "276dfabd56fb4c8b",
      "item": {
        "type": "audio",
        "id": "276dfabd56fb4c8b",
        "text": "[WASM http:// twitter.com/andrestaltz/status/1061178360800440320 ] looking good to SSB team:  \n\nwebassembly \"perfect for security\"  \nno full linux vm overhead, attack surface area  \nno huge api/edgecase javascript lockdown  \nfully static  \n\n\n\n\n\n\n\ncode/memory separation  \n(code can't dynamically self-change)  \nadoption growing  \ntools coming  \n\n\n\n\n\n\n\n\n\n\n\n\n\n"
      },
      "date": 1541864555872
    },
    {
      "type": "edit",
      "id": "276dfabd56fb4c8b",
      "item": {
        "type": "audio",
        "id": "276dfabd56fb4c8b",
        "text": "[WASM http:// twitter.com/andrestaltz/status/1061178360800440320 ] looking good to SSB team:  \n\nwebassembly \"perfect for security\"  \nno full linux vm overhead, attack surface area  \nno huge api/edgecase javascript lockdown  \nfully static  \n\n\n\n\n\n\n\ncode/memory separation  \n(code can't dynamically self-change)  \nadoption growing  \ntools coming  \n\n\n\n\n\n\n\n\n\n\n\n\n\n"
      },
      "date": 1541864562957
    },
    {
      "type": "edit",
      "id": "276dfabd56fb4c8b",
      "item": {
        "type": "audio",
        "id": "276dfabd56fb4c8b",
        "text": "[WASM http:// twitter.com/andrestaltz/status/1061178360800440320 ] looking good to SSB team:  \n\nwebassembly \"perfect for security\"  \nno full linux vm overhead, attack surface area  \nno huge api/edgecase javascript lockdown  \nfully static  \n\n\n\n\n\n\n\ncode/memory separation  \n(code can't dynamically self-change)  \nadoption growing  \ntools coming  \n\n\n\n\n\n\n\n\n\n\n\n\n\n"
      },
      "date": 1541864568331
    },
    {
      "type": "fork",
      "date": 1541864573039
    },
    {
      "item": {
        "type": "factory",
        "id": "cc1c3a9bf7f0c340"
      },
      "id": "cc1c3a9bf7f0c340",
      "type": "add",
      "after": "276dfabd56fb4c8b",
      "date": 1541864579831
    },
    {
      "type": "edit",
      "id": "cc1c3a9bf7f0c340",
      "item": {
        "type": "paragraph",
        "id": "cc1c3a9bf7f0c340",
        "text": "[WASM http:// twitter.com/andrestaltz/status/1061178360800440320 ] looking good to SSB team: "
      },
      "date": 1541864587220
    },
    {
      "type": "edit",
      "id": "cc1c3a9bf7f0c340",
      "item": {
        "type": "paragraph",
        "id": "cc1c3a9bf7f0c340",
        "text": "[http:// twitter.com/andrestaltz/status/1061178360800440320 WASM "
      },
      "date": 1541864600253
    },
    {
      "type": "edit",
      "id": "cc1c3a9bf7f0c340",
      "item": {
        "type": "paragraph",
        "id": "cc1c3a9bf7f0c340",
        "text": "[http:// twitter.com/andrestaltz/status/1061178360800440320 WASM ] looking good to SSB team: "
      },
      "date": 1541864603205
    },
    {
      "type": "edit",
      "id": "cc1c3a9bf7f0c340",
      "item": {
        "type": "paragraph",
        "id": "cc1c3a9bf7f0c340",
        "text": "[http:// twitter.com/andrestaltz/status/1061178360800440320 WASM] looking good to SSB team: "
      },
      "date": 1541864619935
    },
    {
      "type": "edit",
      "id": "cc1c3a9bf7f0c340",
      "item": {
        "type": "paragraph",
        "id": "cc1c3a9bf7f0c340",
        "text": "[http://twitter.com/andrestaltz/status/1061178360800440320 WASM] looking good to SSB team: "
      },
      "date": 1541864630493
    },
    {
      "type": "edit",
      "id": "276dfabd56fb4c8b",
      "item": {
        "type": "audio",
        "id": "276dfabd56fb4c8b",
        "text": "webassembly \"perfect for security\"  \nno full linux vm overhead, attack surface area  \nno huge api/edgecase javascript lockdown  \nfully static  \n\n\n\n\n\n\n\ncode/memory separation  \n(code can't dynamically self-change)  \nadoption growing  \ntools coming  \n\n\n\n\n\n\n\n\n\n\n\n\n\n"
      },
      "date": 1541864741521
    },
    {
      "type": "edit",
      "id": "276dfabd56fb4c8b",
      "item": {
        "type": "audio",
        "id": "276dfabd56fb4c8b",
        "text": "WASM "
      },
      "date": 1541864769425
    },
    {
      "type": "remove",
      "id": "276dfabd56fb4c8b",
      "date": 1541864791405
    },
    {
      "type": "add",
      "id": "6e47f0527909af02",
      "item": {
        "type": "paragraph",
        "id": "6e47f0527909af02",
        "text": "webassembly \"perfect for security\""
      },
      "after": "cc1c3a9bf7f0c340",
      "date": 1541864797888
    },
    {
      "type": "add",
      "id": "4e77bab276e5a62f",
      "item": {
        "type": "paragraph",
        "id": "4e77bab276e5a62f",
        "text": "no full linux vm overhead, attack surface area"
      },
      "after": "6e47f0527909af02",
      "date": 1541864800910
    },
    {
      "type": "add",
      "id": "11070a3d91e8feee",
      "item": {
        "type": "paragraph",
        "id": "11070a3d91e8feee",
        "text": "no huge api/edgecase javascript lockdown"
      },
      "after": "4e77bab276e5a62f",
      "date": 1541864802332
    },
    {
      "type": "add",
      "id": "9ee5a44e3bd8bc6c",
      "item": {
        "type": "paragraph",
        "id": "9ee5a44e3bd8bc6c",
        "text": "fully static"
      },
      "after": "11070a3d91e8feee",
      "date": 1541864805258
    },
    {
      "type": "add",
      "id": "0df054d3018a22e1",
      "item": {
        "type": "paragraph",
        "id": "0df054d3018a22e1",
        "text": "code/memory separation"
      },
      "after": "9ee5a44e3bd8bc6c",
      "date": 1541864806777
    },
    {
      "type": "add",
      "id": "fc19f372e3886837",
      "item": {
        "type": "paragraph",
        "id": "fc19f372e3886837",
        "text": "(code can't dynamically self-change)"
      },
      "after": "0df054d3018a22e1",
      "date": 1541864808105
    },
    {
      "type": "add",
      "id": "a48db8d271367b0c",
      "item": {
        "type": "paragraph",
        "id": "a48db8d271367b0c",
        "text": "adoption growing"
      },
      "after": "fc19f372e3886837",
      "date": 1541864809630
    },
    {
      "type": "add",
      "id": "491261d88eee20d4",
      "item": {
        "type": "paragraph",
        "id": "491261d88eee20d4",
        "text": "tools coming"
      },
      "after": "a48db8d271367b0c",
      "date": 1541864813593
    },
    {
      "type": "fork",
      "site": "duke.tries.fed.wiki",
      "date": 1550078366478
    },
    {
      "type": "add",
      "item": {
        "text": "WebAssembly is a new type of code that can be run in modern web browsers — it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++ with a compilation target so that they can run on the web. It is also designed to run alongside JavaScript, allowing both to work together - [https://developer.mozilla.org/en-US/docs/WebAssembly developer.mozilla.org]",
        "id": "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
        "type": "paragraph"
      },
      "id": "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
      "date": 1550078376825
    },
    {
      "type": "edit",
      "id": "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
      "item": {
        "text": "[[WebAssembly]] (__Wasm__) is a new type of code that can be run in modern web browsers — it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++ with a compilation target so that they can run on the web. It is also designed to run alongside JavaScript, allowing both to work together - [https://developer.mozilla.org/en-US/docs/WebAssembly developer.mozilla.org]",
        "id": "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
        "type": "paragraph"
      },
      "date": 1550078412345
    },
    {
      "type": "edit",
      "id": "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
      "item": {
        "text": "[[WebAssembly]] (__Wasm__) is a new type of code that can be run in modern web browsers — it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++ with a compilation target so that they can run on the web. It is also designed to run alongside JavaScript, allowing both to work together - [https://developer.mozilla.org/en-US/docs/WebAssembly developer.mozilla.org]",
        "id": "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
        "type": "markdown"
      },
      "date": 1550078414604
    },
    {
      "type": "edit",
      "id": "cc1c3a9bf7f0c340",
      "item": {
        "type": "paragraph",
        "id": "cc1c3a9bf7f0c340",
        "text": "- Running remote code on friend's computers, using WebAssembly for security - looking good to [[SSB]] team - [http://twitter.com/andrestaltz/status/1061178360800440320 twitter]"
      },
      "date": 1550078545282
    },
    {
      "type": "edit",
      "id": "cc1c3a9bf7f0c340",
      "item": {
        "type": "markdown",
        "id": "cc1c3a9bf7f0c340",
        "text": "- Running remote code on friend's computers, using WebAssembly for security - looking good to [[SSB]] team - [http://twitter.com/andrestaltz/status/1061178360800440320 twitter]"
      },
      "date": 1550078546898
    },
    {
      "type": "edit",
      "id": "6e47f0527909af02",
      "item": {
        "type": "paragraph",
        "id": "6e47f0527909af02",
        "text": "- webassembly \"perfect for security\""
      },
      "date": 1550078590784
    },
    {
      "type": "edit",
      "id": "491261d88eee20d4",
      "item": {
        "type": "paragraph",
        "id": "491261d88eee20d4",
        "text": "- tools coming"
      },
      "date": 1550078595498
    },
    {
      "type": "edit",
      "id": "a48db8d271367b0c",
      "item": {
        "type": "paragraph",
        "id": "a48db8d271367b0c",
        "text": "- adoption growing"
      },
      "date": 1550078601282
    },
    {
      "type": "remove",
      "id": "fc19f372e3886837",
      "date": 1550078611518
    },
    {
      "type": "edit",
      "id": "0df054d3018a22e1",
      "item": {
        "type": "paragraph",
        "id": "0df054d3018a22e1",
        "text": "- code/memory separation"
      },
      "date": 1550078614485
    },
    {
      "type": "edit",
      "id": "9ee5a44e3bd8bc6c",
      "item": {
        "type": "paragraph",
        "id": "9ee5a44e3bd8bc6c",
        "text": "- fully static (code can't dynamically self-change)"
      },
      "date": 1550078619270
    },
    {
      "type": "edit",
      "id": "11070a3d91e8feee",
      "item": {
        "type": "paragraph",
        "id": "11070a3d91e8feee",
        "text": "- no huge api/edgecase javascript lockdown"
      },
      "date": 1550078626915
    },
    {
      "type": "remove",
      "id": "4e77bab276e5a62f",
      "date": 1550078634156
    },
    {
      "type": "edit",
      "id": "6e47f0527909af02",
      "item": {
        "type": "paragraph",
        "id": "6e47f0527909af02",
        "text": "- webassembly \"perfect for security\"- no full linux vm overhead, attack surface area"
      },
      "date": 1550078643038
    },
    {
      "type": "edit",
      "id": "6e47f0527909af02",
      "item": {
        "type": "markdown",
        "id": "6e47f0527909af02",
        "text": "- webassembly \"perfect for security\"- no full linux vm overhead, attack surface area"
      },
      "date": 1550078644143
    },
    {
      "type": "edit",
      "id": "11070a3d91e8feee",
      "item": {
        "type": "markdown",
        "id": "11070a3d91e8feee",
        "text": "- no huge api/edgecase javascript lockdown"
      },
      "date": 1550078646525
    },
    {
      "type": "edit",
      "id": "9ee5a44e3bd8bc6c",
      "item": {
        "type": "markdown",
        "id": "9ee5a44e3bd8bc6c",
        "text": "- fully static (code can't dynamically self-change)"
      },
      "date": 1550078647326
    },
    {
      "type": "edit",
      "id": "0df054d3018a22e1",
      "item": {
        "type": "markdown",
        "id": "0df054d3018a22e1",
        "text": "- code/memory separation"
      },
      "date": 1550078648992
    },
    {
      "type": "edit",
      "id": "a48db8d271367b0c",
      "item": {
        "type": "markdown",
        "id": "a48db8d271367b0c",
        "text": "- adoption growing"
      },
      "date": 1550078649890
    },
    {
      "type": "edit",
      "id": "491261d88eee20d4",
      "item": {
        "type": "markdown",
        "id": "491261d88eee20d4",
        "text": "- tools coming"
      },
      "date": 1550078650616
    },
    {
      "type": "remove",
      "id": "491261d88eee20d4",
      "date": 1550078652415
    },
    {
      "type": "remove",
      "id": "a48db8d271367b0c",
      "date": 1550078654951
    },
    {
      "type": "remove",
      "id": "0df054d3018a22e1",
      "date": 1550078657459
    },
    {
      "type": "remove",
      "id": "9ee5a44e3bd8bc6c",
      "date": 1550078660578
    },
    {
      "type": "remove",
      "id": "11070a3d91e8feee",
      "date": 1550078665436
    },
    {
      "type": "remove",
      "id": "6e47f0527909af02",
      "date": 1550078672721
    },
    {
      "type": "edit",
      "id": "cc1c3a9bf7f0c340",
      "item": {
        "type": "markdown",
        "id": "cc1c3a9bf7f0c340",
        "text": "- Running remote code on friend's computers, using WebAssembly for security - looking good to [[SSB]] team - [http://twitter.com/andrestaltz/status/1061178360800440320 twitter]\n- webassembly \"perfect for security\"\n- no full linux vm overhead, attack surface area\n- no huge api/edgecase javascript lockdown\n- fully static (code can't dynamically self-change)\n- code/memory separation\n- adoption growing\n- tools coming"
      },
      "date": 1550078675698
    },
    {
      "type": "edit",
      "id": "cc1c3a9bf7f0c340",
      "item": {
        "type": "markdown",
        "id": "cc1c3a9bf7f0c340",
        "text": "- Running remote code on friend's computers, using WebAssembly for security - looking good to [[SSB]] team - [http://twitter.com/andrestaltz/status/1061178360800440320 twitter]\n- webassembly \"perfect for security\"\n- no full linux vm overhead, attack surface area\n- no huge api/edgecase javascript lockdown\n- fully static (code can't dynamically self-change)\n- code/memory separation\n- adoption growing\n- tools coming\n"
      },
      "date": 1550078682941
    },
    {
      "type": "add",
      "id": "72e07c78bdf5dbc0",
      "item": {
        "type": "markdown",
        "id": "72e07c78bdf5dbc0",
        "text": "# See also\n"
      },
      "after": "cc1c3a9bf7f0c340",
      "date": 1550078686871
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "c31f3d33ebd3554c",
        "text": "- [[Emscripten]]\n- [[Transpiler]]\n- [[WebAssembly]]\n- [[Web Components]]\n"
      },
      "after": "72e07c78bdf5dbc0",
      "id": "c31f3d33ebd3554c",
      "date": 1550078702696
    },
    {
      "type": "edit",
      "id": "cc1c3a9bf7f0c340",
      "item": {
        "type": "markdown",
        "id": "cc1c3a9bf7f0c340",
        "text": "- Running remote code on friend's computers, using [[WebAssembly]] for security - looking good to [[SSB]] team - [http://twitter.com/andrestaltz/status/1061178360800440320 twitter]\n- webassembly \"perfect for security\"\n- no full linux vm overhead, attack surface area\n- no huge api/edgecase javascript lockdown\n- fully static (code can't dynamically self-change)\n- code/memory separation\n- adoption growing\n- tools coming\n"
      },
      "date": 1550078863686
    },
    {
      "type": "edit",
      "id": "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
      "item": {
        "text": "[[WebAssembly]] (__Wasm__) is a new type of code that can be run in modern web browsers — it is a low-level assembly-like language with a compact binary format that runs with near-native performance and provides languages such as C/C++ with a compilation target so that they can run on the web. It is also designed to run alongside JavaScript, allowing both to work together - [https://developer.mozilla.org/en-US/docs/WebAssembly developer.mozilla.org]\n",
        "id": "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
        "type": "markdown"
      },
      "date": 1586023094727
    },
    {
      "type": "add",
      "id": "55d969ad75b623ab",
      "item": {
        "type": "markdown",
        "id": "55d969ad75b623ab",
        "text": "WebAssembly is a portable binary instruction format for executable programs, whose main goal is to enable high performance applications on web pages, but also to be embedded in other environments, such as IoT devices. WebAssembly is designed to be run on an abstract stack-based virtual machine, can be parsed faster than JavaScript, and its binaries are smaller than the corresponding JavaScript programs due to a very compact code representation.\n"
      },
      "after": "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
      "date": 1586023097968
    },
    {
      "type": "add",
      "id": "f02bc423d21e9c48",
      "item": {
        "type": "markdown",
        "id": "f02bc423d21e9c48",
        "text": "WebAssembly specifies two formats: textual and binary. The textual format is intended to be human-readable — below is an example of a recursive factorial function written in C, and translated to textual WebAssembly:"
      },
      "after": "55d969ad75b623ab",
      "date": 1586023099983
    },
    {
      "type": "edit",
      "id": "55d969ad75b623ab",
      "item": {
        "type": "markdown",
        "id": "55d969ad75b623ab",
        "text": "WebAssembly is a portable binary instruction format for executable programs, whose main goal is to enable high performance applications on web pages, but also to be embedded in other environments, such as IoT devices. \n"
      },
      "date": 1586023102735
    },
    {
      "type": "add",
      "id": "c801db82ffb4f0e0",
      "item": {
        "type": "markdown",
        "id": "c801db82ffb4f0e0",
        "text": "WebAssembly is designed to be run on an abstract stack-based virtual machine, can be parsed faster than JavaScript, and its binaries are smaller than the corresponding JavaScript programs due to a very compact code representation.\n"
      },
      "after": "55d969ad75b623ab",
      "date": 1586023105052
    },
    {
      "item": {
        "type": "factory",
        "id": "1664e73bc9d14160"
      },
      "id": "1664e73bc9d14160",
      "type": "add",
      "after": "c31f3d33ebd3554c",
      "date": 1586023109818
    },
    {
      "id": "1664e73bc9d14160",
      "type": "move",
      "order": [
        "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
        "55d969ad75b623ab",
        "c801db82ffb4f0e0",
        "f02bc423d21e9c48",
        "1664e73bc9d14160",
        "cc1c3a9bf7f0c340",
        "72e07c78bdf5dbc0",
        "c31f3d33ebd3554c"
      ],
      "date": 1586023117265
    },
    {
      "id": "cc1c3a9bf7f0c340",
      "type": "move",
      "order": [
        "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
        "cc1c3a9bf7f0c340",
        "55d969ad75b623ab",
        "c801db82ffb4f0e0",
        "f02bc423d21e9c48",
        "1664e73bc9d14160",
        "72e07c78bdf5dbc0",
        "c31f3d33ebd3554c"
      ],
      "date": 1586023119763
    },
    {
      "type": "edit",
      "id": "1664e73bc9d14160",
      "item": {
        "type": "code",
        "id": "1664e73bc9d14160",
        "text": "long fact(long n) {\n  if (n == 0)\n    return 1L;\n  else\n    return n * fact(n - 1);\n}"
      },
      "date": 1586023137125
    },
    {
      "item": {
        "type": "factory",
        "id": "ad1fd652784a8cd5"
      },
      "id": "ad1fd652784a8cd5",
      "type": "add",
      "after": "c31f3d33ebd3554c",
      "date": 1586023141690
    },
    {
      "id": "ad1fd652784a8cd5",
      "type": "move",
      "order": [
        "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
        "cc1c3a9bf7f0c340",
        "55d969ad75b623ab",
        "c801db82ffb4f0e0",
        "f02bc423d21e9c48",
        "1664e73bc9d14160",
        "ad1fd652784a8cd5",
        "72e07c78bdf5dbc0",
        "c31f3d33ebd3554c"
      ],
      "date": 1586023143958
    },
    {
      "type": "edit",
      "id": "f02bc423d21e9c48",
      "item": {
        "type": "markdown",
        "id": "f02bc423d21e9c48",
        "text": "WebAssembly specifies two formats: textual and binary. The textual format is intended to be human-readable — below is an example of a recursive factorial function written in C, and translated to textual WebAssembly:\n"
      },
      "date": 1586023166306
    },
    {
      "type": "add",
      "id": "5ee13d7503106395",
      "item": {
        "type": "markdown",
        "id": "5ee13d7503106395",
        "text": "The corresponding WebAssembly looks as follows:"
      },
      "after": "f02bc423d21e9c48",
      "date": 1586023168998
    },
    {
      "id": "5ee13d7503106395",
      "type": "move",
      "order": [
        "f056c152-ae00-4d1b-b40a-3b67b2187e7e",
        "cc1c3a9bf7f0c340",
        "55d969ad75b623ab",
        "c801db82ffb4f0e0",
        "f02bc423d21e9c48",
        "1664e73bc9d14160",
        "5ee13d7503106395",
        "ad1fd652784a8cd5",
        "72e07c78bdf5dbc0",
        "c31f3d33ebd3554c"
      ],
      "date": 1586023171127
    },
    {
      "type": "edit",
      "id": "ad1fd652784a8cd5",
      "item": {
        "type": "code",
        "id": "ad1fd652784a8cd5",
        "text": "get_local 0\ni64.eqz\nif (result i64)\n    i64.const 1\nelse\n    get_local 0\n    get_local 0\n    i64.const 1\n    i64.sub\n    call 0\n    i64.mul\nend"
      },
      "date": 1586023186142
    },
    {
      "type": "fork",
      "site": "c0de.academy",
      "date": 1626102646062
    }
  ]
}