{
  "title": "User Defined Interface",
  "story": [
    {
      "type": "html",
      "text": "Having to use 3 different browsers for both work and home for various purposes, I'm growing agitated that the user interfaces are all different despite having mostly the same tools: address bar, search bar, favorites, history, etc. This triggered the thought of standardizing user-side UI configurations into an XML file that could in theory be used by all three brands. The same technique or standard could perhaps be adopted by other tools, such as word processors and IDE's. (Most end users would ideally use a GUI to set or create these settings, but defining the XML first helps to standardize the options.)",
      "id": "59fdea06d5a9667298e4089fcfdd605f"
    },
    {
      "type": "html",
      "text": "\nI'll start with just the top and bottom menus and menu bars.",
      "id": "989c7955ddd1b4f257e10af4283b2fcf"
    },
    {
      "type": "code",
      "text": " <toolbar \n   groupName=[application's name or ID for the toolbar or option group]\n   autoPopulate={(auto)/append/prepend/none}  // see notes\n   location={(top)/bottom/auto}\n   leftLone={true/(false)}   // \"true\" if this bar always starts a row\n   rightLone={true/(false)}  // \"true\" if this bar always ends a row\n   maxWidth={[integer]/[percent%]/(auto)}\n   overflow={(scroll)/more/error}  // \"more\" would be a link to the right\n   textSize={(auto)/small/medium/large}\n   move={(confirm)/easy/lock} // \"confirm\" means a prompt confirms a move\n   meta=[app-specific stuff]\n   id=[optional reference ID for misc. tools]\n ><option...><divider...><option...>...</toolbar>",
      "id": "12aa442dc6530284b530ed9c94ededcd"
    },
    {
      "type": "code",
      "text": " <option\n   refName=[application's name or ID for the option]  \n   notFound=[(greyout)/hide/error/none] // what to do if refName not found or not applic.\n   beforeUrl=[URL to run before application processes this option] // optional\n   afterUrl=[URL to run after application processes this option]   // optional\n   target=[similar to HTML for HREF destinations, including \"_blank\"] // for above URL's\n   title={(_auto)/[custom text]/_none}  //\"_auto\" means the app decides\n   iconSrc={[url]/(_auto)/_none}\n   openType={(_auto)/popup/dialog}  // see notes\n   input={(_auto)/[integer width]/_none}  // text box, see note\n   list=[Pipe-separated list of pull-down options] // Example: \"Off|On|Auto\". See note.\n   meta=[app-specific stuff]\n   formButton=[Submit button title if we want group to serve as a form. See notes.]\n   id=[optional reference ID for misc. tools]\n />",
      "id": "b09ae95c4239b60715946a148c195065"
    },
    {
      "type": "html",
      "text": "\nNotes",
      "id": "728aa0ce5340c1ca42ea32bc9a52075d"
    },
    {
      "type": "html",
      "text": " The items generally appear in the order defined, unless certain \"autoPopulate\" settings are used (described below).",
      "id": "59c1af88f7a1616390207f9177afcaa0"
    },
    {
      "type": "html",
      "text": " Parenthesis surround the default.",
      "id": "ab23141f23003cc7bb88fa2fc1717ae6"
    },
    {
      "type": "html",
      "text": " \"<divider...>\" is a thin separator or line between menu options.",
      "id": "2629d728475404f5dd8dd2379a83541a"
    },
    {
      "type": "html",
      "text": " I don't see any solid reason to distinguish between text menu bars and icon-based tool-bars other than tradition. One should be able to mix and match as needed. The title is used as a roll-over title if any icon is supplied or \"inherited\".",
      "id": "b482ebbada15278a771eb13e0a2787f3"
    },
    {
      "type": "html",
      "text": " \"groupName\" is optional, but potentially allows one \"inherit\" automatic options, in conjunction with the \"autoPopulate\" attribute. \"refName\" for the \"options\" tag is not specific (dedicated) to a group name such that <b>one does <i>not</i> have to group options by the vendor's default grouping</b>. \"autoPopulate\" can optionally fill the group with its default options. \"(auto)\" means the ordering is defined by the application. \"append\" means those options explicitly defined are placed at the end of ordering and any non-app-defined options are also at the end. \"Prepend\" is the same, except at the front.",
      "id": "1ec3359335223d97ea96fba22dfeaf04"
    },
    {
      "type": "html",
      "text": " If one wants to hide an otherwise auto-populated option (above), then use the appropriate refName, and set title to \"_none\" and iconUrl to \"_none\". ",
      "id": "11c9ad39bbd9f245f589d3952c7264f4"
    },
    {
      "type": "html",
      "text": " \"refName\" for \"options\" tag is not required since we can optionally define our own URL \"action\" (beforeUrl and afterURL). If it's blank, then \"notFound\" defaults to \"none\". One can reference the same refName multiple times.",
      "id": "47a30f103498864d3ca59074130f72bc"
    },
    {
      "type": "html",
      "text": " Some convention for relative references to icons should be provided so that fully qualified paths are not required. Not addressed here yet. Suggestions welcome.",
      "id": "8d4cceaa4ee9da7f48e6170bd7c15c40"
    },
    {
      "type": "html",
      "text": " An outer \"<window...>\" tag is perhaps in order. Not addressed here yet.",
      "id": "83e174bb137edc1544075a022e852b34"
    },
    {
      "type": "html",
      "text": " \"Side\" tool bars are not addressed here yet.",
      "id": "c207d6a130a52fe66559efbce4be9b1f"
    },
    {
      "type": "html",
      "text": " For \"openType\", \"popup\" is generally considered more compact than the full version, \"dialog\". The app doesn't necessarily have to respect this setting, it's merely a \"suggestion\" to the app.",
      "id": "29a54ccba744db024cbb4ed28ed0814c"
    },
    {
      "type": "html",
      "text": " The \"input\" attribute allows one to add an optional text input box. The value of the prompt (contents) is appended to the \"beforeUrl\" and \"afterUrl\" destinations (URL encoded), if given, with the URL attribute name of \"value\" as in \"foo?value=123\".",
      "id": "576c4ea6dcc90f6971653b4aff62c9e8"
    },
    {
      "type": "html",
      "text": " \"list\" is similar to \"input\" in that that it appends a parameter to the URL's, if given. The URL parameter name is \"selected\". The list drop-down appears after the input box, if given. For example, if one wanted to make their own custom multi-purpose search and address bar, they could do something like this:",
      "id": "764105dac108f190b4a5bfd8fd33f784"
    },
    {
      "type": "code",
      "text": "          <option title=\"Search\" beforeUrl=\"www.myCustomSearch.php\" input=\"30\" list=\"Url|Google|Bing|desktop\"/>\n          // Example appearance: Search [Kilroy_____________] [Url|V]  // \"V\" = down-arrow. User entered \"Kilroy\"\n          // Example result: www.myCustomSearch.php?value=Kilroy&selected=Bing",
      "id": "e0113c543fa80de5e081a161a5a70df1"
    },
    {
      "type": "html",
      "text": " Perhaps the vendor can have URL versions of some or all of their options so that the above \"input\" and \"list\" options can be used to <b>send basic parameters to the app</b> for slightly more complicated or advanced options. Hopefully they too would be standardized such that they work across vendors. For example, we could define an asterisk in \"beforeUrl\" and \"afterUrl\" to mean the browser's and/or window's default handler. The various URL parameters and tag(s) attribute values could be sent as URL parameters to give more potential info to use. (If you use an asterisk, then the usual behavior is not passed pass onto the application since a URL launch is doing it instead.)",
      "id": "912f76b552c5b2fbc25ba1f6b69676dd"
    },
    {
      "type": "html",
      "text": " The \"formButton\" attribute optionally allows the \"toolbar\" to serve as a form such that we can build some basic forms with such an interface. (Although being a form builder is not the primary purpose. We want to resist [[Feature Creep]].) If \"formButton\" is set, then the usual individual option behavior is suppressed for options with inputs or lists, and the options' values are appended to the URL per typical GET behavior (POST not yet supported). List values get \"_selected\" appended to the URL attribute name to make sure they are unique per form. Thus, an option with a refName of \"foo\" would result in \"...&foo_selected=Bing\" for its drop-down list selection.",
      "id": "b207562791908d60b21d55c4ad8f36a9"
    },
    {
      "type": "html",
      "text": " If the app has special doo-dads or widgets in options, then typically the input and list box goes after them. If the app's option by default already has an input box or drop-down list, then ideally it would cede definition of them to our option specifications (such as size or list content) rather than include both the vendor versions and our custom ones; but the vendor is not obligated to do that.",
      "id": "d6939441c715fe6c5f461a85a4829832"
    },
    {
      "type": "html",
      "text": " The vendor is expected to attempt to provide a reasonable approximation if an option even if the existing options not quite applicable. For example, some browsers use the address bar for the (Google) search bar also, and depends on what button one uses. Thus, the \"search-engine\" and \"url-address\" (refName's) implementation may be the same instance of the dual-purpose search bar. The standard is not asking vendors to change their entire product, only the primary menus and tool-bars.",
      "id": "d5af835df03fd4ceedad8e7c8717e1de"
    },
    {
      "type": "html",
      "text": "--top",
      "id": "848e81ee290482843c77fa4f26ef858f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "deb7a5fb582bf28bc5bfdf9648dadb54"
    },
    {
      "type": "html",
      "text": "[[Category User Interface]], [[Category Gui]]",
      "id": "c7fe9710fc2aa1b1ed7fff4c2a08140a"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?UserDefinedInterface c2.com]",
      "id": "e2bdc8e1fd794acb44e6f4cc915f4bdc"
    }
  ],
  "journal": [
    {
      "date": 1419385405000,
      "id": "676b5c631aba6bff708218e5e367d168",
      "type": "create",
      "item": {
        "title": "User Defined Interface",
        "story": [
          {
            "type": "html",
            "text": "Having to use 3 different browsers for both work and home for various purposes, I'm growing agitated that the user interfaces are all different despite having mostly the same tools: address bar, search bar, favorites, history, etc. This triggered the thought of standardizing user-side UI configurations into an XML file that could in theory be used by all three brands. The same technique or standard could perhaps be adopted by other tools, such as word processors and IDE's. (Most end users would ideally use a GUI to set or create these settings, but defining the XML first helps to standardize the options.)",
            "id": "59fdea06d5a9667298e4089fcfdd605f"
          },
          {
            "type": "html",
            "text": "\nI'll start with just the top and bottom menus and menu bars.",
            "id": "989c7955ddd1b4f257e10af4283b2fcf"
          },
          {
            "type": "code",
            "text": " <toolbar \n   groupName=[application's name or ID for the toolbar or option group]\n   autoPopulate={(auto)/append/prepend/none}  // see notes\n   location={(top)/bottom/auto}\n   leftLone={true/(false)}   // \"true\" if this bar always starts a row\n   rightLone={true/(false)}  // \"true\" if this bar always ends a row\n   maxWidth={[integer]/[percent%]/(auto)}\n   overflow={(scroll)/more/error}  // \"more\" would be a link to the right\n   textSize={(auto)/small/medium/large}\n   move={(confirm)/easy/lock} // \"confirm\" means a prompt confirms a move\n   meta=[app-specific stuff]\n   id=[optional reference ID for misc. tools]\n ><option...><divider...><option...>...</toolbar>",
            "id": "12aa442dc6530284b530ed9c94ededcd"
          },
          {
            "type": "code",
            "text": " <option\n   refName=[application's name or ID for the option]  \n   notFound=[(greyout)/hide/error/none] // what to do if refName not found or not applic.\n   beforeUrl=[URL to run before application processes this option] // optional\n   afterUrl=[URL to run after application processes this option]   // optional\n   target=[similar to HTML for HREF destinations, including \"_blank\"] // for above URL's\n   title={(_auto)/[custom text]/_none}  //\"_auto\" means the app decides\n   iconSrc={[url]/(_auto)/_none}\n   openType={(_auto)/popup/dialog}  // see notes\n   input={(_auto)/[integer width]/_none}  // text box, see note\n   list=[Pipe-separated list of pull-down options] // Example: \"Off|On|Auto\". See note.\n   meta=[app-specific stuff]\n   formButton=[Submit button title if we want group to serve as a form. See notes.]\n   id=[optional reference ID for misc. tools]\n />",
            "id": "b09ae95c4239b60715946a148c195065"
          },
          {
            "type": "html",
            "text": "\nNotes",
            "id": "728aa0ce5340c1ca42ea32bc9a52075d"
          },
          {
            "type": "html",
            "text": " The items generally appear in the order defined, unless certain \"autoPopulate\" settings are used (described below).",
            "id": "59c1af88f7a1616390207f9177afcaa0"
          },
          {
            "type": "html",
            "text": " Parenthesis surround the default.",
            "id": "ab23141f23003cc7bb88fa2fc1717ae6"
          },
          {
            "type": "html",
            "text": " \"<divider...>\" is a thin separator or line between menu options.",
            "id": "2629d728475404f5dd8dd2379a83541a"
          },
          {
            "type": "html",
            "text": " I don't see any solid reason to distinguish between text menu bars and icon-based tool-bars other than tradition. One should be able to mix and match as needed. The title is used as a roll-over title if any icon is supplied or \"inherited\".",
            "id": "b482ebbada15278a771eb13e0a2787f3"
          },
          {
            "type": "html",
            "text": " \"groupName\" is optional, but potentially allows one \"inherit\" automatic options, in conjunction with the \"autoPopulate\" attribute. \"refName\" for the \"options\" tag is not specific (dedicated) to a group name such that <b>one does <i>not</i> have to group options by the vendor's default grouping</b>. \"autoPopulate\" can optionally fill the group with its default options. \"(auto)\" means the ordering is defined by the application. \"append\" means those options explicitly defined are placed at the end of ordering and any non-app-defined options are also at the end. \"Prepend\" is the same, except at the front.",
            "id": "1ec3359335223d97ea96fba22dfeaf04"
          },
          {
            "type": "html",
            "text": " If one wants to hide an otherwise auto-populated option (above), then use the appropriate refName, and set title to \"_none\" and iconUrl to \"_none\". ",
            "id": "11c9ad39bbd9f245f589d3952c7264f4"
          },
          {
            "type": "html",
            "text": " \"refName\" for \"options\" tag is not required since we can optionally define our own URL \"action\" (beforeUrl and afterURL). If it's blank, then \"notFound\" defaults to \"none\". One can reference the same refName multiple times.",
            "id": "47a30f103498864d3ca59074130f72bc"
          },
          {
            "type": "html",
            "text": " Some convention for relative references to icons should be provided so that fully qualified paths are not required. Not addressed here yet. Suggestions welcome.",
            "id": "8d4cceaa4ee9da7f48e6170bd7c15c40"
          },
          {
            "type": "html",
            "text": " An outer \"<window...>\" tag is perhaps in order. Not addressed here yet.",
            "id": "83e174bb137edc1544075a022e852b34"
          },
          {
            "type": "html",
            "text": " \"Side\" tool bars are not addressed here yet.",
            "id": "c207d6a130a52fe66559efbce4be9b1f"
          },
          {
            "type": "html",
            "text": " For \"openType\", \"popup\" is generally considered more compact than the full version, \"dialog\". The app doesn't necessarily have to respect this setting, it's merely a \"suggestion\" to the app.",
            "id": "29a54ccba744db024cbb4ed28ed0814c"
          },
          {
            "type": "html",
            "text": " The \"input\" attribute allows one to add an optional text input box. The value of the prompt (contents) is appended to the \"beforeUrl\" and \"afterUrl\" destinations (URL encoded), if given, with the URL attribute name of \"value\" as in \"foo?value=123\".",
            "id": "576c4ea6dcc90f6971653b4aff62c9e8"
          },
          {
            "type": "html",
            "text": " \"list\" is similar to \"input\" in that that it appends a parameter to the URL's, if given. The URL parameter name is \"selected\". The list drop-down appears after the input box, if given. For example, if one wanted to make their own custom multi-purpose search and address bar, they could do something like this:",
            "id": "764105dac108f190b4a5bfd8fd33f784"
          },
          {
            "type": "code",
            "text": "          <option title=\"Search\" beforeUrl=\"www.myCustomSearch.php\" input=\"30\" list=\"Url|Google|Bing|desktop\"/>\n          // Example appearance: Search [Kilroy_____________] [Url|V]  // \"V\" = down-arrow. User entered \"Kilroy\"\n          // Example result: www.myCustomSearch.php?value=Kilroy&selected=Bing",
            "id": "e0113c543fa80de5e081a161a5a70df1"
          },
          {
            "type": "html",
            "text": " Perhaps the vendor can have URL versions of some or all of their options so that the above \"input\" and \"list\" options can be used to <b>send basic parameters to the app</b> for slightly more complicated or advanced options. Hopefully they too would be standardized such that they work across vendors. For example, we could define an asterisk in \"beforeUrl\" and \"afterUrl\" to mean the browser's and/or window's default handler. The various URL parameters and tag(s) attribute values could be sent as URL parameters to give more potential info to use. (If you use an asterisk, then the usual behavior is not passed pass onto the application since a URL launch is doing it instead.)",
            "id": "912f76b552c5b2fbc25ba1f6b69676dd"
          },
          {
            "type": "html",
            "text": " The \"formButton\" attribute optionally allows the \"toolbar\" to serve as a form such that we can build some basic forms with such an interface. (Although being a form builder is not the primary purpose. We want to resist [[Feature Creep]].) If \"formButton\" is set, then the usual individual option behavior is suppressed for options with inputs or lists, and the options' values are appended to the URL per typical GET behavior (POST not yet supported). List values get \"_selected\" appended to the URL attribute name to make sure they are unique per form. Thus, an option with a refName of \"foo\" would result in \"...&foo_selected=Bing\" for its drop-down list selection.",
            "id": "b207562791908d60b21d55c4ad8f36a9"
          },
          {
            "type": "html",
            "text": " If the app has special doo-dads or widgets in options, then typically the input and list box goes after them. If the app's option by default already has an input box or drop-down list, then ideally it would cede definition of them to our option specifications (such as size or list content) rather than include both the vendor versions and our custom ones; but the vendor is not obligated to do that.",
            "id": "d6939441c715fe6c5f461a85a4829832"
          },
          {
            "type": "html",
            "text": " The vendor is expected to attempt to provide a reasonable approximation if an option even if the existing options not quite applicable. For example, some browsers use the address bar for the (Google) search bar also, and depends on what button one uses. Thus, the \"search-engine\" and \"url-address\" (refName's) implementation may be the same instance of the dual-purpose search bar. The standard is not asking vendors to change their entire product, only the primary menus and tool-bars.",
            "id": "d5af835df03fd4ceedad8e7c8717e1de"
          },
          {
            "type": "html",
            "text": "--top",
            "id": "848e81ee290482843c77fa4f26ef858f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "deb7a5fb582bf28bc5bfdf9648dadb54"
          },
          {
            "type": "html",
            "text": "[[Category User Interface]], [[Category Gui]]",
            "id": "c7fe9710fc2aa1b1ed7fff4c2a08140a"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?UserDefinedInterface c2.com]",
            "id": "e2bdc8e1fd794acb44e6f4cc915f4bdc"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1708068683368
    }
  ]
}