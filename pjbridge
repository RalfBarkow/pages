{
  "title": "PjBridge",
  "story": [
    {
      "type": "markdown",
      "id": "3d6f8287fe4b74d1",
      "text": "A PjBridge is the facade that allows interacting (i.e. evaluting code) with a javascript interpreter. \n"
    },
    {
      "type": "markdown",
      "id": "c909960cd8b2b9ea",
      "text": "\nExample: \n\"1) Start a bridge in a workspace\"\n"
    },
    {
      "type": "markdown",
      "id": "39214e70523f319f",
      "text": "\n\n\"2) Open a web browser on http://localhost:12345\"\n\n\"3) Perform in the workspace the following expressions one at a time. Use 'printIt' to display results. Watch the log on the web browser to see the  javascript code actually peformed.\"\nbridge eval: '1+2'.\nbridge eval: 'x := 6 * 7'.\nbridge eval: 'x - 5'.\nbridge loadClass: PjCounter.\nbridge eval: 'counter := PjCounter new.\ncounter increment.\ncounter increment.\ncounter increment.\ncounter count.'. \n\n\"4) Once done, don't forget to stop the bridge\"\nbridge stop.\n\nInstance Variables\n\tclientClassName:\t\t<String>\n\tcommunicationTrialsCount:\t\t<Integer>\n\tconverter:\t\t<PjSmalltalkToJavaScriptConverer>\n\tserver:\t\t<PjServer>\n\nclientClassName\n\t- Name of the class of the socket wrapper running on the JavaScript client (e.g. PjEvaluatorWebSocketDelegate)\n\ncommunicationTrialsCount\n\t- Number of attempts to send/receive data through the webSocket\n\nconverter\n\t- Smalltalk to JavaScript converter. Used to translate Smalltalk code to JavaScript before evaluating it on the client (see #eval: and #loadClass:)\n\nserver\n\t- Manages client connections including the websocket\n"
    },
    {
      "type": "code",
      "id": "21326bcfdb4b5517",
      "text": "bridge := PjBridge startOn: 12345 title: 'Example'."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "PjBridge",
        "story": []
      },
      "date": 1661980700863
    },
    {
      "item": {
        "type": "markdown",
        "id": "3d6f8287fe4b74d1",
        "text": "A PjBridge is the facade that allows interacting (i.e. evaluting code) with a javascript interpreter. \n"
      },
      "id": "3d6f8287fe4b74d1",
      "type": "add",
      "date": 1661980702238
    },
    {
      "type": "edit",
      "id": "3d6f8287fe4b74d1",
      "item": {
        "type": "markdown",
        "id": "3d6f8287fe4b74d1",
        "text": "A PjBridge is the facade that allows interacting (i.e. evaluting code) with a javascript interpreter. \n"
      },
      "date": 1661980712189
    },
    {
      "item": {
        "type": "code",
        "id": "21326bcfdb4b5517",
        "text": "bridge := PjBridge startOn: 12345 title: 'Example'."
      },
      "id": "21326bcfdb4b5517",
      "type": "add",
      "after": "3d6f8287fe4b74d1",
      "date": 1661980722004
    },
    {
      "id": "21326bcfdb4b5517",
      "type": "move",
      "order": [
        "21326bcfdb4b5517",
        "3d6f8287fe4b74d1"
      ],
      "date": 1661980730916
    },
    {
      "type": "edit",
      "id": "3d6f8287fe4b74d1",
      "item": {
        "type": "markdown",
        "id": "3d6f8287fe4b74d1",
        "text": "A PjBridge is the facade that allows interacting (i.e. evaluting code) with a javascript interpreter. \n"
      },
      "date": 1661980735429
    },
    {
      "id": "3d6f8287fe4b74d1",
      "type": "move",
      "order": [
        "3d6f8287fe4b74d1",
        "21326bcfdb4b5517",
        "c909960cd8b2b9ea"
      ],
      "date": 1661980737753,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "add",
      "id": "c909960cd8b2b9ea",
      "item": {
        "type": "markdown",
        "id": "c909960cd8b2b9ea",
        "text": "\nExample: \n\"1) Start a bridge in a workspace\"\n"
      },
      "after": "3d6f8287fe4b74d1",
      "date": 1661980741761
    },
    {
      "type": "add",
      "id": "39214e70523f319f",
      "item": {
        "type": "markdown",
        "id": "39214e70523f319f",
        "text": "\n\n\"2) Open a web browser on http://localhost:12345\"\n\n\"3) Perform in the workspace the following expressions one at a time. Use 'printIt' to display results. Watch the log on the web browser to see the  javascript code actually peformed.\"\nbridge eval: '1+2'.\nbridge eval: 'x := 6 * 7'.\nbridge eval: 'x - 5'.\nbridge loadClass: PjCounter.\nbridge eval: 'counter := PjCounter new.\ncounter increment.\ncounter increment.\ncounter increment.\ncounter count.'. \n\n\"4) Once done, don't forget to stop the bridge\"\nbridge stop.\n\nInstance Variables\n\tclientClassName:\t\t<String>\n\tcommunicationTrialsCount:\t\t<Integer>\n\tconverter:\t\t<PjSmalltalkToJavaScriptConverer>\n\tserver:\t\t<PjServer>\n\nclientClassName\n\t- Name of the class of the socket wrapper running on the JavaScript client (e.g. PjEvaluatorWebSocketDelegate)\n\ncommunicationTrialsCount\n\t- Number of attempts to send/receive data through the webSocket\n\nconverter\n\t- Smalltalk to JavaScript converter. Used to translate Smalltalk code to JavaScript before evaluating it on the client (see #eval: and #loadClass:)\n\nserver\n\t- Manages client connections including the websocket\n"
      },
      "after": "c909960cd8b2b9ea",
      "date": 1661980748725
    },
    {
      "type": "edit",
      "id": "21326bcfdb4b5517",
      "item": {
        "type": "code",
        "id": "21326bcfdb4b5517",
        "text": "bridge := PjBridge startOn: 12345 title: 'Example'."
      },
      "date": 1661980749513
    },
    {
      "type": "fork",
      "date": 1661980753425
    }
  ]
}