{
  "title": "Python Language",
  "story": [
    {
      "type": "html",
      "text": "Python is an [[Object Oriented]] language that does all the things that you can do with Perl or TCL - only better, since it was designed from the ground up as an OO language. Lots of Python documentation is available at [http://www.python.org www.python.org] and the Python Wiki [http://www.python.org/cgi-bin/moinmoin www.python.org] as well as source code and binaries for UNIX, Macintosh, Win95/NT, DOS, etc.",
      "id": "87a97924f88d9bc0dc997a11ad208c97"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>See also</b>:",
      "id": "ad9e7a468063256dd4a8d00d60b86d86"
    },
    {
      "type": "html",
      "text": " [[Python Philosophy]]",
      "id": "27a66c0f0d1d7bfe2b3309080176975b"
    },
    {
      "type": "html",
      "text": " [[Python Sample]]s",
      "id": "df36ba3dffd79bc387bff210ce9d613d"
    },
    {
      "type": "html",
      "text": " [[Python Idioms]]",
      "id": "277d47a4fbe165784e1179df5c15fcf1"
    },
    {
      "type": "html",
      "text": " [[Python Discussion]]",
      "id": "3b45ada1344f064226bbcce43da4d134"
    },
    {
      "type": "html",
      "text": " [[Python Problems]] - <i>negative comments go here</i>",
      "id": "3ad5a0ed94207a9f4ca04f6334bac72c"
    },
    {
      "type": "html",
      "text": " [[Boa Constructor]] - RAD (gui builder) ide and Zope front end",
      "id": "41bc1088da5c69269d8680b3e083a955"
    },
    {
      "type": "html",
      "text": " [[Python Ide]] - They are springing out all over",
      "id": "c6f9b60ce13c841d07b4d06e082a9e42"
    },
    {
      "type": "html",
      "text": " [[Python People]]",
      "id": "19f7a4970b6be694e9148f4c3f1a950f"
    },
    {
      "type": "html",
      "text": " [[Python Optimization]]",
      "id": "6a72b7c737cc5024a799d3dfaa885369"
    },
    {
      "type": "html",
      "text": " [[Python Sprint]]",
      "id": "ddcee24c55672a1f32bcb9e8567fc470"
    },
    {
      "type": "html",
      "text": " [[Blocks In Python]]",
      "id": "5097ee9d59ebeb59c96482764391cded"
    },
    {
      "type": "html",
      "text": " [[Refactoring With Python]]",
      "id": "04272688739cd623bcbbb4b49917ef85"
    },
    {
      "type": "html",
      "text": " [[Re Structured Text]] ([[Doc Utils]])",
      "id": "438de141a4699852aa49b0fa539aa1f2"
    },
    {
      "type": "html",
      "text": " [[Py Lit]] ([[Literate Programming]] tool)",
      "id": "6118abadd2bd197e830741da90aea200"
    },
    {
      "type": "html",
      "text": " [[Iwanna Learn Python]]",
      "id": "6881feb244339007163af15670a408bd"
    },
    {
      "type": "html",
      "text": " [[Java Script Object Notation]](JSON) (data interchange format)",
      "id": "4c42804f3c3eaf04f31d8f90e98a7b0f"
    },
    {
      "type": "html",
      "text": " [[Py Checker]]",
      "id": "dacdf2ef9e05b522e12e4c0bda8b7843"
    },
    {
      "type": "html",
      "text": " [[Python White Space Discussion]]",
      "id": "9605dff5097621fc6c2df1d0b79bb9a6"
    },
    {
      "type": "html",
      "text": " [[Python Three Thousand]]",
      "id": "3de803c52968ccb1f658832b939ab8e9"
    },
    {
      "type": "html",
      "text": " [[Visual Python]]",
      "id": "91c4230be42412056845899c52843fd3"
    },
    {
      "type": "html",
      "text": " [[What Are The Differences Between Python Two And Python Three]]",
      "id": "11fec3f85257de887252015ac54072ef"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Python Web Frameworks</b>",
      "id": "5c22ec45382381ee3fa936de0c92e712"
    },
    {
      "type": "html",
      "text": " [[Django Project]]",
      "id": "46519d16212bcbdb2f2d56ff3dba526a"
    },
    {
      "type": "html",
      "text": " Web2Py",
      "id": "811a22dc071bf8bc755b09b2b5999a5f"
    },
    {
      "type": "html",
      "text": " [[Pylons Framework]]",
      "id": "afa31744b9e5e03b6b9b59ab29df43c2"
    },
    {
      "type": "html",
      "text": " [[Zope Application Server]] (Zope) - Application server in python",
      "id": "39e2e81af99ed2bed805989a5aa009ee"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Python Books</b>",
      "id": "0a9e4dc722e307156a7229b9df74ec97"
    },
    {
      "type": "html",
      "text": " [[Core Python Programming]]",
      "id": "7f35bcd518f76a78e1e0a4174473d152"
    },
    {
      "type": "html",
      "text": " [[Learning Python]]",
      "id": "d721293a257af23daef4d21303777f50"
    },
    {
      "type": "html",
      "text": " [[Programming Python]]",
      "id": "9ee7644de63e23383dbe9fcc572e6649"
    },
    {
      "type": "html",
      "text": " [[Python Cookbook]]",
      "id": "cc03389e7853fc10d7af8fc0783bfb82"
    },
    {
      "type": "html",
      "text": " [[Python Ina Nutshell]]",
      "id": "541cadbdb8641497d7fdccefbc12e888"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Interfaces for Python extensions in [[Cee Language]] or [[Cee Plus Plus]]</b>",
      "id": "2aa97ce104cbd584aab86ef847b03898"
    },
    {
      "type": "html",
      "text": " [[Boost Python Library]]",
      "id": "87d38d898270296d865e93a3414bdfdb"
    },
    {
      "type": "html",
      "text": " [[Simplified Wrapper And Interface Generator]] (SWIG)",
      "id": "3c56d1f48ea93eee9d3bb4524f9804d8"
    },
    {
      "type": "html",
      "text": " [[Python Cxx Module]]",
      "id": "fb894e8a0c3ba1b8a6f5fcef57dc934f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Interfaces for Python extensions in R ([[Arr Language]])</b>",
      "id": "bedc3b83ea81276feaa9fb7b6408c46a"
    },
    {
      "type": "html",
      "text": " [[Arr Py]] (Rpy)",
      "id": "b0ca45fff26c6dbf7abd645945a50901"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Wikis about Python</b>:",
      "id": "35e7aea028528edf4237bfc101ec873c"
    },
    {
      "type": "html",
      "text": " The official Python Info wiki at [http://wiki.python.org/moin/ wiki.python.org].",
      "id": "9b24e29c08e25e5c464540ba65fbc5a3"
    },
    {
      "type": "html",
      "text": " The [[Seattle Python Interest Group]] wiki.",
      "id": "adb26040035157a499a895c9d893d1bc"
    },
    {
      "type": "html",
      "text": " A [[German Language]] wiki about Python: [http://mobbing-gegner.de/mywiki/Python/Links mobbing-gegner.de]",
      "id": "f0ac04288f3ab6bca43541aab7c977dc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Wikis written in Python</b>:",
      "id": "e1a8e0f2eac39a250021c36e8a6e5e49"
    },
    {
      "type": "html",
      "text": " [[Jot Engine]]",
      "id": "8f8583368237c634cdd1b0221fd5cf30"
    },
    {
      "type": "html",
      "text": " [[Py Wiki]], [[Piki Piki]]",
      "id": "d5397472ca2f43bc28fc81b79952e1a0"
    },
    {
      "type": "html",
      "text": " [[Moin Moin]]",
      "id": "850c8d4ff1b01323db0e7e2e16654196"
    },
    {
      "type": "html",
      "text": " [[Icky Wiki]]",
      "id": "54338d3c2944fa19eb81e33d3e8ec411"
    },
    {
      "type": "html",
      "text": " [[Zwi Ki]]",
      "id": "54bb1e06ccdfe864f14fad1fe68ccbea"
    },
    {
      "type": "html",
      "text": " [[Wiki Nehesa]]",
      "id": "55a63a6f2a41a4f8234f829cf1ed7dda"
    },
    {
      "type": "html",
      "text": " [[Windows Wiki]]",
      "id": "db743cf34ccb2939514517fc03c50e34"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>PEAK - P</b><b>ythonEnterpriseApplicationKit</b>",
      "id": "da5656f4dd74addc668ab434b95274bf"
    },
    {
      "type": "html",
      "text": "\nI heard that it is an exciting development that is evolving, with proponents claiming superiority to J2EE.",
      "id": "340f0f18dbe6790e75c2f7e9f94d2386"
    },
    {
      "type": "html",
      "text": "\nWhat can it do already, at Jun05? Any good introductory reading on why people should keep an eye on it? -- dl",
      "id": "37746989dc7ab04fd9b1198ab6a609e8"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Games that use Python</b>:",
      "id": "5e0ffc47cf4827be8ca64d8d63d68921"
    },
    {
      "type": "html",
      "text": " [[Freedom Force]]",
      "id": "898b7f63210dc9da3e056f31bec2e4d6"
    },
    {
      "type": "html",
      "text": " Blade of Darkness (several megabytes of Python scripts)",
      "id": "b54bec8c52154ca7741932562b0b136a"
    },
    {
      "type": "html",
      "text": " [[Eve Online]] (uses [[Stackless Python]])",
      "id": "a8b7e3badab26a4b4e3e770e655d3801"
    },
    {
      "type": "html",
      "text": " The Backyard Sports series, from Humongous",
      "id": "a5acf891fbae151d1dee20ca7864b369"
    },
    {
      "type": "html",
      "text": " [[Temple Of Elemental Evil]]",
      "id": "1de252d5a722be55ca462ff5ffa5073b"
    },
    {
      "type": "html",
      "text": " Uru: Ages Beyond Myst",
      "id": "49febf7c94eb7f6c9b9850d30566de7d"
    },
    {
      "type": "html",
      "text": " [[Civilization Iv]]",
      "id": "1468d80ec8bf5f4901d55cb593af8470"
    },
    {
      "type": "html",
      "text": " [[Endgame Singularity]]",
      "id": "8ad1bf57a84eab281e8be9dcf29b755a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Other applications that use Python</b>:",
      "id": "821dd3a54de173c8decea0ae567f898f"
    },
    {
      "type": "html",
      "text": " [[Cubic Web]] ([[Semantic Web]] tool)",
      "id": "61a98529b7a4f7906e07bcaedee90329"
    },
    {
      "type": "html",
      "text": " [[Envisage Plugin Framework]] | [[Enthought Tool Suite]] (ETS)",
      "id": "8e8f1919e2a48560185a2f3f2665b097"
    },
    {
      "type": "html",
      "text": " GNU Mailman (mailing list software)",
      "id": "06e6f05dfefaaa45d2f80367444cca14"
    },
    {
      "type": "html",
      "text": " [[Gentoo Portage]]",
      "id": "b6a19da4b80d32c34627539a8c2a8f8e"
    },
    {
      "type": "html",
      "text": " Pediatek ([http://pediatek.com pediatek.com])",
      "id": "fb1587dba7f25cdd4b1efa25d6a94960"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>[[Testing Frameworks]]</b>:",
      "id": "97f72ae2597d137192c85cedb907ce3a"
    },
    {
      "type": "html",
      "text": " Unittest.py, an xUnit for python, is part of the standard library. ([[Python Unit]])",
      "id": "1fbe5a10953766fc7b304a22d555d869"
    },
    {
      "type": "html",
      "text": " [[Doc Test]]: testing-from-the-doc-string written by [[Tim Peters]]",
      "id": "1a2095fa9305a9e1bc56312ede9cc0fa"
    },
    {
      "type": "html",
      "text": " py.test: Pythonic [[Testing Framework]] ([http://codespeak.net/py/current/doc/test.html codespeak.net])",
      "id": "ac07bb32edc927e8cde9f8441a7b1303"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Python Patterns</b>",
      "id": "a70c0eaee6695aba596320c1a84ea759"
    },
    {
      "type": "html",
      "text": " [[Python Singleton]]",
      "id": "01ceb97b446e240032ef1473de9fc74f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Python Implementations</b>:",
      "id": "7012ea7a4235147797ee03b76a069584"
    },
    {
      "type": "html",
      "text": " CPython: the canonical, reference implementation",
      "id": "4be3523afdae3c2e32d5491f84399d44"
    },
    {
      "type": "html",
      "text": " [[Java Python]]: Jython (formerly JPython), implemented in [[Java Language]]. Emits [[Java Byte Code]] and integrates seamlessly with Java code",
      "id": "228413a84ea68f6e6d05a0311ae2807c"
    },
    {
      "type": "html",
      "text": " [[Stackless Python]]: supports continuation, coroutines, and microthread",
      "id": "c3c6d5af3dea1e58f748f84743dc5bce"
    },
    {
      "type": "html",
      "text": " [[Palm Python]]: python on PalmOS devices",
      "id": "e060a113785f2d6492997039efdbd3dc"
    },
    {
      "type": "html",
      "text": " [[Py Py]]: a self-hosting implementation of Python",
      "id": "4e819bdaf8a415157df77fc05f51069a"
    },
    {
      "type": "html",
      "text": " [[Iron Python]]: Python implemented on top of the [[Common Language Runtime]], for seamless integration with the rest of [[Dot Net]]",
      "id": "8cd977730bf4e34678cd659c17f08b94"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>[[Refactoring Browser]]</b>:",
      "id": "ad6a904e486ac6038e0e539e34605d76"
    },
    {
      "type": "html",
      "text": " [[Bicycle Repair Man]]: Python [[Refactoring Browser]] (apparently stalled; no activity since 2004)",
      "id": "32ef1e3f9e5d31e65fd59da81c42d4b5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Python advocates</b>:",
      "id": "574acbc00afa2239bdbf2265aacb65ea"
    },
    {
      "type": "html",
      "text": " [[Computer Programming For Everybody]]([[Can End Users Script]]) : problems that Python tries to address.",
      "id": "1ba5c31dedb28ac963bb5f161678af3b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Useful Python Libraries</b>:",
      "id": "0bc166af3923ab43d122b7fd36dc2c27"
    },
    {
      "type": "html",
      "text": " Pywin32 from [http://sourceforge.net/projects/pywin32/ sourceforge.net] (for persons with [[Microsoft Windows Cultural Assumption]])",
      "id": "84f154e6e4982a949ffb246d423b0972"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "<b>Python comparisons</b>:",
      "id": "1934e1eff36f9bb80f4b8b49ec4adbeb"
    },
    {
      "type": "html",
      "text": " Python and [[Java Language]] side by side at: [http://www.ferg.org/projects/python_java_side-by-side.html www.ferg.org]",
      "id": "0e65927febb4749d2c342a8cb0b2c4c9"
    },
    {
      "type": "html",
      "text": " [[Python Vs Ruby]]",
      "id": "ee96e4c6c04498af1f539e5c4339b609"
    },
    {
      "type": "html",
      "text": " [[Python Vs Perl]]",
      "id": "a46cf647c1394473ab188cfa120f6e58"
    },
    {
      "type": "html",
      "text": " [[Rosetta Code]]",
      "id": "6094dd6dbf515a59c32455c67b0123ea"
    },
    {
      "type": "html",
      "text": "---- ",
      "id": "dadac1dc1d567beb803f04098066a13c"
    },
    {
      "type": "html",
      "text": "<b>Python's key features:</b>",
      "id": "d0aecf9a894581791e58fdf434385172"
    },
    {
      "type": "html",
      "text": " Python is an excellent language for learning object orientation.",
      "id": "34d547468d0278f5b3d9f5c74c3a40e3"
    },
    {
      "type": "html",
      "text": " Python's [[Big Idea]] is that almost everything is a writable dictionary: dictionaries, classes, objects, stack frames, modules, etc. It's a very elegant and flexible idea.",
      "id": "039682caf519c8a5fcd5a1e1a013b027"
    },
    {
      "type": "html",
      "text": " And that you can make a reference to almost anything and pass that around. You have first-class modules, objects, methods, functions, etc.",
      "id": "1273ed442ea6a9768be36b28d9496f85"
    },
    {
      "type": "html",
      "text": " [[Name Space]]s too. Never forget about namespaces in Python.",
      "id": "a7ef8625c3ad35754e729d032eed988e"
    },
    {
      "type": "html",
      "text": " Oddly enough, I thought Python's [[Big Idea]] was that everything is a sequence",
      "id": "b9e040127b5e871f5a993d89c316a883"
    },
    {
      "type": "html",
      "text": " <b>Python has a [[Big Idea]] for everyone as the above 3 points would seem to indicate</b>  <i>\"Our chief weapon is surprise!  Surprise and fear...fear and surprise... Our two weapons are...\"</i> -- [[Monty Python]]",
      "id": "16a56e374294c4929f10e87da9ece16d"
    },
    {
      "type": "html",
      "text": " And a fanatical devotion to the BDFL...",
      "id": "7c01642a52ced3a7f944ef4e554ff5a3"
    },
    {
      "type": "html",
      "text": " Perhaps it's more than there are no <b>[[Big Idea]]</b>s in Python, it's just a collection of well-thought-out features.",
      "id": "d213df3e0e5b568054e1dadeabc40651"
    },
    {
      "type": "html",
      "text": " Who was it that said \"Python gets all of its compromises exactly right.\"?",
      "id": "580c4788e4c61566e2d667e1dd6d54df"
    },
    {
      "type": "html",
      "text": " I think Python supports [[[Multi Paradigm Programming]]] well -- [[Martin Pool]]",
      "id": "638d69bb8fad178fd3de0f083070aaa2"
    },
    {
      "type": "html",
      "text": " Its other great strength is its scalability; -- [[Steve Freeman]]",
      "id": "227024522d4196e8872f9aafdf0d7172"
    },
    {
      "type": "html",
      "text": " It also does excellent support for all things Microsoft, and it's a nice way to lead VB folk out of the wilderness. -- [[Peter Merel]]",
      "id": "4236c2ede9992e436029b3072b436f49"
    },
    {
      "type": "html",
      "text": " Completely open source.",
      "id": "0bf9350dbc54f965328e5c2010bd1e7b"
    },
    {
      "type": "html",
      "text": " Large set of standard/nonstandard libraries.",
      "id": "88ad98f0254603db40dea69baa79f175"
    },
    {
      "type": "html",
      "text": " Enjoys almost-Smalltalk-like plasticity, with typeless variables, late-late binding and reflection.",
      "id": "0b39136eae707b03c07e05c23841661d"
    },
    {
      "type": "html",
      "text": " Normally doesn't look like line noise run through an obfuscation filter [Though [[Obfuscated Python]] and [[Wy Py]] show how even Python can be made to look horrid]",
      "id": "8f2281d0ac8de4ad504c5107a9c96d9e"
    },
    {
      "type": "html",
      "text": " [[Generators In Python]], which support simple form of continuation. You'll be really amazed at how it can make complex stuff simple and elegant. -- [[June Kim]]",
      "id": "346aeb405b31e79c19c19c73771ff95d"
    },
    {
      "type": "html",
      "text": " [[List Comprehension]]s from [[Haskell Language]] - see a quicksort implementation in [[Python Sample]].",
      "id": "f768c13451b23bd417db96ecf07c12c4"
    },
    {
      "type": "html",
      "text": " [[Duck Typing]]:  you don't need a massive, static inheritance diagram. If an object implements the methods that, say, a file does, you can pass it to anything that expects a file, and it just works. (If you really want to live dangerously, you can even add the methods after instantiation, pass it like a file, and pull them back off the object when you're done. [[Dont Try This At Home]].)",
      "id": "44b5118a2ca12a15932f32ebd9a91f67"
    },
    {
      "type": "html",
      "text": " Insight: code will be read more often than being written: optimize for readability",
      "id": "5f59aac3cbc36f5a906b8be938d0b57d"
    },
    {
      "type": "html",
      "text": " Last but not Least: It has a cool name :-P (<i>It's named after <b>Monty</b> Python, not the snake -- [[Wayne Werner]]</i>)",
      "id": "de8a5503c148810102ebad4b70e94075"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "[[Peter Norvig]] on [[Python For Lisp Programmers]]: <i>Basically, Python can be seen as a dialect of Lisp with \"traditional syntax.\"</i>",
      "id": "415ce8062fc3eb0993a18edb3dfc1891"
    },
    {
      "type": "html",
      "text": "\nIncorrect. No conditionals in lambda. <i>And you can't use returns either. Or use lambdas as generators.</i>",
      "id": "0dfa65aac09beb65369fbe63f3e46693"
    },
    {
      "type": "html",
      "text": "<b>Actually conditional expressions have been added to Python 2.5, they look like this:</b>",
      "id": "804f2694c0a7de143c99901cc863a86c"
    },
    {
      "type": "html",
      "text": "test_temp = lambda t:<br>\"Above freezing\" if t > 32 else (\"Below freezing\" if t < 32 else \"At freezing\")",
      "id": "fe2cfc37e7a0eae8484cba37c84cd38d"
    },
    {
      "type": "html",
      "text": "<b>Using lambdas with generators can be done by using functions from itertools (e.g. imap, izip)</b>",
      "id": "2b89d2255388aac535c81f8efcb97e5d"
    },
    {
      "type": "html",
      "text": "<i>Ah, but y = lambda x: foo is just syntactic sugar for</i> ",
      "id": "171f0efdc3d3cc59085029f64eaeb2aa"
    },
    {
      "type": "html",
      "text": "def y(x):<br>",
      "id": "421cd85022026c0dd6845a769c4f740e"
    },
    {
      "type": "code",
      "text": "  return foo",
      "id": "58e37e78a7e366b33c04cb4a6c5f987a"
    },
    {
      "type": "html",
      "text": "<i>This is because the definition of a nested function will be re-evaluated (or at least appear to be) whenever its outer function is called. So Python does have \"proper\" higher-order functions, but without a nice syntax for anything more complicated than returning an expression.</i>",
      "id": "6fa5821fa7374f48eb9afce58d54c62a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "Python has built-in [[Complex Numbers]]. [[Complex Numbers Are Your Friend]].",
      "id": "4aedc17648c53bbd660cd17dfff4bdb3"
    },
    {
      "type": "html",
      "text": "\nPython is the best language I've tried for day-to-day quick programming. I've used it to manipulate text files, pipe formatting algorithms through a text editor, write music scripts, etc. I have to say I'm a believer in easy-to-use syntax that doesn't make you work hard and jump through hoops ([[Lisp Language]], [[Perl Language]], [[Forth Language]], [[Smalltalk Language]] - Perl's the worst offender). It has a very pragmatic feel. Lisp, [[Scheme Language]], etc. can can claim to be beautiful; Python is beautiful, easy-to-use, and powerful and practical for real-world apps. It even has support for a limited functional style for the pure academic type programmers out there. And recursion and iteration are equally supported, although performance is better for iteration, I think. -- [[Aaron Krister Johnson]]",
      "id": "17453b8d4c89bc2b7b2691ea5866f5fd"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "(Moved from [[Objects Are Dictionaries]])",
      "id": "593dcad1d446b4b097b575dac6c22b33"
    },
    {
      "type": "html",
      "text": "\n[[Python Language]] implements objects as dictionaries, and \"new-style\" classes as objects.",
      "id": "d84116117a9c03abd0d4757e583b5a2a"
    },
    {
      "type": "html",
      "text": "<i>IMO Python failed to capitalize on the similarities early on, and now seems to have created two different structures for things that are only slightly different from each other rather than consolidate, unnecessarily complicating the language. In general Python designers went structure-happy with dictionaries, tuples, lists, etc. that are only slightly different from each other. Perhaps it was done for speed, but it certainly complicates the language syntax. A violation of the [[Law Of Orthogonality]]?</i>",
      "id": "2d24445a8a8339a53c82def10172ffe7"
    },
    {
      "type": "html",
      "text": "\nWhilst I agree that Python is increasingly in danger of becoming unnecessarily complex, I think you're wrong about the structures. The variety of built-in structures with easy ways of expressing literals is one of the key strengths of Python. Python dictionaries and lists enable one to clearly express one's intention using literals. And the tuples exist to provide an immutable sequence for things like hashing.",
      "id": "ad5b54f3f847a4cb797e06299050f1a5"
    },
    {
      "type": "html",
      "text": "<i>I suppose we would have to compare and contrast some examples.</i>",
      "id": "c8c1601ebc07cbca63eb5a647e0566c4"
    },
    {
      "type": "html",
      "text": "\nPython:",
      "id": "209042252ff69eb1a49998475b8110b9"
    },
    {
      "type": "html",
      "text": "myDict = {\"a\":<br>1, \"b\": 2, \"c\": 3}",
      "id": "878815a4d0846c25c2558591cfac5429"
    },
    {
      "type": "code",
      "text": " print myDict.get(someKey, someDefault)",
      "id": "a47f349d0d62c5b72fea45a7589c4d57"
    },
    {
      "type": "html",
      "text": "[[Cee Sharp]]:",
      "id": "cd94fe2d49c6e57349f2950cfceeada7"
    },
    {
      "type": "code",
      "text": " var myDict = new Dictionary<string, int> { { \"a\", 1 }, { \"b\", 2 }, { \"c\", 3 } };\n int value = someDefault;\n myDict.Try''''''Get''''''Value(someKey, out value);\n Console.Write''''''Line(value);",
      "id": "f1feba1f2fde1dbf2245f34e57f2c1ad"
    },
    {
      "type": "html",
      "text": "The paragraph below related to the old C#, I took the liberty of updating it to fairly idiomatic modern C#. It's worth noting that the initializer syntax used is general to all types, not specialized for dictionaries, and the new code is type safe where the old was not. Not an Object in sight.",
      "id": "eb1b27e74f02ccbcdfec7541a4261ed7"
    },
    {
      "type": "html",
      "text": "\nOne of these encourages the use of dictionaries more than the other, especially for things like lookup tables vs. switch statements. Looking through many introductions to C#, I see switch statements for stuff that I'd just hash in Python.",
      "id": "cac9f9d6536012b85d420243bce1fc39"
    },
    {
      "type": "html",
      "text": "\nThe other comparison would be between Python and a language with regular/minimal syntax, like [[Lisp Language]] or [[Scheme Language]], I suppose.",
      "id": "96fd7b48de83c4251a77a7ec600ab146"
    },
    {
      "type": "html",
      "text": "\nAs far as having lots of similar built-in structures, dicts are different from lists, of course. That there are immutable tuples and mutable lists that are otherwise similar is perhaps a wart. You can hash on tuples but not lists; I suppose if Python were being designed right now, mutability of objects might be handled differently.",
      "id": "3634fb68a9a3575824c2dbfbd57497e9"
    },
    {
      "type": "html",
      "text": "\nOutside of dict, list, and tuple, what other built-in data structures are of note?",
      "id": "f715180ee3df68389446f78420046670"
    },
    {
      "type": "html",
      "text": "-- [[Adam Vandenberg]]",
      "id": "c2de60572cbb8aee4134102762cdb91c"
    },
    {
      "type": "html",
      "text": "\nWell, objects (the base type of new-style classes) are interesting, as are generators (although they're not as general-purpose as the \"big three\" you list). Naturally, most code uses modules, methods, and functions; they're first-class types in Python just like integers and tuples.",
      "id": "813e5288ed8be3110f095f1c0eca7ade"
    },
    {
      "type": "html",
      "text": "\nIt's a good idea to look over the methods of even the simplest types from time to time, because they have interesting properties that you might not know about otherwise.",
      "id": "a2854798b6a9ef630a8e6a8ef7f71042"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "I tore up some of my classes and made functions out of them. What's happening?? Seems I have learned enough of [[Python Language]] and can write code where I don't have to hide complexity. If I can see a function in half a page, I don't have to make a class and then call .doSomething(), like in [[Cee Plus Plus]].",
      "id": "dfb8b1c5d16c14bf76dd1875c0e3370f"
    },
    {
      "type": "html",
      "text": "<i>I'm trying to make sense of this. Freestanding functions are not a feature specific to Python - there's no reason you can't write them in [[Cee Plus Plus]]. In fact, Stroustrup rants against the \"make everything a class\" attitude of some coders.</i>",
      "id": "b7c93748f66517446b1cc5475e085971"
    },
    {
      "type": "html",
      "text": "I believe the point was that something that would take several pages in [[Cee Plus Plus]] can be done in half a page in python. Several pages of code requires some further organization; half a page can be understood on its own terms.",
      "id": "a12fa7df2de9a0fe6a0f3f7537f4ffc3"
    },
    {
      "type": "html",
      "text": "<i>While free functions have always been perfectly acceptable in Python, until recently [[Everything Isa Class]] was a very common paradigm in [[Cee Plus Plus]]. Recently, it's come under fire by folks like [[Herb Sutter]], though, so it appears that [[Cee Plus Plus]] is moving in this direction as well.</i>",
      "id": "b09e8da013b248606f46999a9949586e"
    },
    {
      "type": "html",
      "text": "\nVariable names are becoming shorter. Is it me or Python influence?",
      "id": "67565e7caa19c961633ddf48dab6a071"
    },
    {
      "type": "html",
      "text": "<i>I think it is the old C influence reasserting itself - those short, vowel-stripped variable names are something that people like to complain about in the common C libraries.</i>",
      "id": "bc803e544e13700bb303a9158fd5416a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
    },
    {
      "type": "html",
      "text": "[[Category Python]] [[Category Programming Language]]",
      "id": "bf9f655674284ab1775df84069659996"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?PythonLanguage c2.com]",
      "id": "2726bdb867c3fbc2eed65e0551a4e5d7"
    }
  ],
  "journal": [
    {
      "date": 1408813799000,
      "id": "e10054b7ddc22196acaa78a78685e9dd",
      "type": "create",
      "item": {
        "title": "Python Language",
        "story": [
          {
            "type": "html",
            "text": "Python is an [[Object Oriented]] language that does all the things that you can do with Perl or TCL - only better, since it was designed from the ground up as an OO language. Lots of Python documentation is available at [http://www.python.org www.python.org] and the Python Wiki [http://www.python.org/cgi-bin/moinmoin www.python.org] as well as source code and binaries for UNIX, Macintosh, Win95/NT, DOS, etc.",
            "id": "87a97924f88d9bc0dc997a11ad208c97"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>See also</b>:",
            "id": "ad9e7a468063256dd4a8d00d60b86d86"
          },
          {
            "type": "html",
            "text": " [[Python Philosophy]]",
            "id": "27a66c0f0d1d7bfe2b3309080176975b"
          },
          {
            "type": "html",
            "text": " [[Python Sample]]s",
            "id": "df36ba3dffd79bc387bff210ce9d613d"
          },
          {
            "type": "html",
            "text": " [[Python Idioms]]",
            "id": "277d47a4fbe165784e1179df5c15fcf1"
          },
          {
            "type": "html",
            "text": " [[Python Discussion]]",
            "id": "3b45ada1344f064226bbcce43da4d134"
          },
          {
            "type": "html",
            "text": " [[Python Problems]] - <i>negative comments go here</i>",
            "id": "3ad5a0ed94207a9f4ca04f6334bac72c"
          },
          {
            "type": "html",
            "text": " [[Boa Constructor]] - RAD (gui builder) ide and Zope front end",
            "id": "41bc1088da5c69269d8680b3e083a955"
          },
          {
            "type": "html",
            "text": " [[Python Ide]] - They are springing out all over",
            "id": "c6f9b60ce13c841d07b4d06e082a9e42"
          },
          {
            "type": "html",
            "text": " [[Python People]]",
            "id": "19f7a4970b6be694e9148f4c3f1a950f"
          },
          {
            "type": "html",
            "text": " [[Python Optimization]]",
            "id": "6a72b7c737cc5024a799d3dfaa885369"
          },
          {
            "type": "html",
            "text": " [[Python Sprint]]",
            "id": "ddcee24c55672a1f32bcb9e8567fc470"
          },
          {
            "type": "html",
            "text": " [[Blocks In Python]]",
            "id": "5097ee9d59ebeb59c96482764391cded"
          },
          {
            "type": "html",
            "text": " [[Refactoring With Python]]",
            "id": "04272688739cd623bcbbb4b49917ef85"
          },
          {
            "type": "html",
            "text": " [[Re Structured Text]] ([[Doc Utils]])",
            "id": "438de141a4699852aa49b0fa539aa1f2"
          },
          {
            "type": "html",
            "text": " [[Py Lit]] ([[Literate Programming]] tool)",
            "id": "6118abadd2bd197e830741da90aea200"
          },
          {
            "type": "html",
            "text": " [[Iwanna Learn Python]]",
            "id": "6881feb244339007163af15670a408bd"
          },
          {
            "type": "html",
            "text": " [[Java Script Object Notation]](JSON) (data interchange format)",
            "id": "4c42804f3c3eaf04f31d8f90e98a7b0f"
          },
          {
            "type": "html",
            "text": " [[Py Checker]]",
            "id": "dacdf2ef9e05b522e12e4c0bda8b7843"
          },
          {
            "type": "html",
            "text": " [[Python White Space Discussion]]",
            "id": "9605dff5097621fc6c2df1d0b79bb9a6"
          },
          {
            "type": "html",
            "text": " [[Python Three Thousand]]",
            "id": "3de803c52968ccb1f658832b939ab8e9"
          },
          {
            "type": "html",
            "text": " [[Visual Python]]",
            "id": "91c4230be42412056845899c52843fd3"
          },
          {
            "type": "html",
            "text": " [[What Are The Differences Between Python Two And Python Three]]",
            "id": "11fec3f85257de887252015ac54072ef"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Python Web Frameworks</b>",
            "id": "5c22ec45382381ee3fa936de0c92e712"
          },
          {
            "type": "html",
            "text": " [[Django Project]]",
            "id": "46519d16212bcbdb2f2d56ff3dba526a"
          },
          {
            "type": "html",
            "text": " Web2Py",
            "id": "811a22dc071bf8bc755b09b2b5999a5f"
          },
          {
            "type": "html",
            "text": " [[Pylons Framework]]",
            "id": "afa31744b9e5e03b6b9b59ab29df43c2"
          },
          {
            "type": "html",
            "text": " [[Zope Application Server]] (Zope) - Application server in python",
            "id": "39e2e81af99ed2bed805989a5aa009ee"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Python Books</b>",
            "id": "0a9e4dc722e307156a7229b9df74ec97"
          },
          {
            "type": "html",
            "text": " [[Core Python Programming]]",
            "id": "7f35bcd518f76a78e1e0a4174473d152"
          },
          {
            "type": "html",
            "text": " [[Learning Python]]",
            "id": "d721293a257af23daef4d21303777f50"
          },
          {
            "type": "html",
            "text": " [[Programming Python]]",
            "id": "9ee7644de63e23383dbe9fcc572e6649"
          },
          {
            "type": "html",
            "text": " [[Python Cookbook]]",
            "id": "cc03389e7853fc10d7af8fc0783bfb82"
          },
          {
            "type": "html",
            "text": " [[Python Ina Nutshell]]",
            "id": "541cadbdb8641497d7fdccefbc12e888"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Interfaces for Python extensions in [[Cee Language]] or [[Cee Plus Plus]]</b>",
            "id": "2aa97ce104cbd584aab86ef847b03898"
          },
          {
            "type": "html",
            "text": " [[Boost Python Library]]",
            "id": "87d38d898270296d865e93a3414bdfdb"
          },
          {
            "type": "html",
            "text": " [[Simplified Wrapper And Interface Generator]] (SWIG)",
            "id": "3c56d1f48ea93eee9d3bb4524f9804d8"
          },
          {
            "type": "html",
            "text": " [[Python Cxx Module]]",
            "id": "fb894e8a0c3ba1b8a6f5fcef57dc934f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Interfaces for Python extensions in R ([[Arr Language]])</b>",
            "id": "bedc3b83ea81276feaa9fb7b6408c46a"
          },
          {
            "type": "html",
            "text": " [[Arr Py]] (Rpy)",
            "id": "b0ca45fff26c6dbf7abd645945a50901"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Wikis about Python</b>:",
            "id": "35e7aea028528edf4237bfc101ec873c"
          },
          {
            "type": "html",
            "text": " The official Python Info wiki at [http://wiki.python.org/moin/ wiki.python.org].",
            "id": "9b24e29c08e25e5c464540ba65fbc5a3"
          },
          {
            "type": "html",
            "text": " The [[Seattle Python Interest Group]] wiki.",
            "id": "adb26040035157a499a895c9d893d1bc"
          },
          {
            "type": "html",
            "text": " A [[German Language]] wiki about Python: [http://mobbing-gegner.de/mywiki/Python/Links mobbing-gegner.de]",
            "id": "f0ac04288f3ab6bca43541aab7c977dc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Wikis written in Python</b>:",
            "id": "e1a8e0f2eac39a250021c36e8a6e5e49"
          },
          {
            "type": "html",
            "text": " [[Jot Engine]]",
            "id": "8f8583368237c634cdd1b0221fd5cf30"
          },
          {
            "type": "html",
            "text": " [[Py Wiki]], [[Piki Piki]]",
            "id": "d5397472ca2f43bc28fc81b79952e1a0"
          },
          {
            "type": "html",
            "text": " [[Moin Moin]]",
            "id": "850c8d4ff1b01323db0e7e2e16654196"
          },
          {
            "type": "html",
            "text": " [[Icky Wiki]]",
            "id": "54338d3c2944fa19eb81e33d3e8ec411"
          },
          {
            "type": "html",
            "text": " [[Zwi Ki]]",
            "id": "54bb1e06ccdfe864f14fad1fe68ccbea"
          },
          {
            "type": "html",
            "text": " [[Wiki Nehesa]]",
            "id": "55a63a6f2a41a4f8234f829cf1ed7dda"
          },
          {
            "type": "html",
            "text": " [[Windows Wiki]]",
            "id": "db743cf34ccb2939514517fc03c50e34"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>PEAK - P</b><b>ythonEnterpriseApplicationKit</b>",
            "id": "da5656f4dd74addc668ab434b95274bf"
          },
          {
            "type": "html",
            "text": "\nI heard that it is an exciting development that is evolving, with proponents claiming superiority to J2EE.",
            "id": "340f0f18dbe6790e75c2f7e9f94d2386"
          },
          {
            "type": "html",
            "text": "\nWhat can it do already, at Jun05? Any good introductory reading on why people should keep an eye on it? -- dl",
            "id": "37746989dc7ab04fd9b1198ab6a609e8"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Games that use Python</b>:",
            "id": "5e0ffc47cf4827be8ca64d8d63d68921"
          },
          {
            "type": "html",
            "text": " [[Freedom Force]]",
            "id": "898b7f63210dc9da3e056f31bec2e4d6"
          },
          {
            "type": "html",
            "text": " Blade of Darkness (several megabytes of Python scripts)",
            "id": "b54bec8c52154ca7741932562b0b136a"
          },
          {
            "type": "html",
            "text": " [[Eve Online]] (uses [[Stackless Python]])",
            "id": "a8b7e3badab26a4b4e3e770e655d3801"
          },
          {
            "type": "html",
            "text": " The Backyard Sports series, from Humongous",
            "id": "a5acf891fbae151d1dee20ca7864b369"
          },
          {
            "type": "html",
            "text": " [[Temple Of Elemental Evil]]",
            "id": "1de252d5a722be55ca462ff5ffa5073b"
          },
          {
            "type": "html",
            "text": " Uru: Ages Beyond Myst",
            "id": "49febf7c94eb7f6c9b9850d30566de7d"
          },
          {
            "type": "html",
            "text": " [[Civilization Iv]]",
            "id": "1468d80ec8bf5f4901d55cb593af8470"
          },
          {
            "type": "html",
            "text": " [[Endgame Singularity]]",
            "id": "8ad1bf57a84eab281e8be9dcf29b755a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Other applications that use Python</b>:",
            "id": "821dd3a54de173c8decea0ae567f898f"
          },
          {
            "type": "html",
            "text": " [[Cubic Web]] ([[Semantic Web]] tool)",
            "id": "61a98529b7a4f7906e07bcaedee90329"
          },
          {
            "type": "html",
            "text": " [[Envisage Plugin Framework]] | [[Enthought Tool Suite]] (ETS)",
            "id": "8e8f1919e2a48560185a2f3f2665b097"
          },
          {
            "type": "html",
            "text": " GNU Mailman (mailing list software)",
            "id": "06e6f05dfefaaa45d2f80367444cca14"
          },
          {
            "type": "html",
            "text": " [[Gentoo Portage]]",
            "id": "b6a19da4b80d32c34627539a8c2a8f8e"
          },
          {
            "type": "html",
            "text": " Pediatek ([http://pediatek.com pediatek.com])",
            "id": "fb1587dba7f25cdd4b1efa25d6a94960"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>[[Testing Frameworks]]</b>:",
            "id": "97f72ae2597d137192c85cedb907ce3a"
          },
          {
            "type": "html",
            "text": " Unittest.py, an xUnit for python, is part of the standard library. ([[Python Unit]])",
            "id": "1fbe5a10953766fc7b304a22d555d869"
          },
          {
            "type": "html",
            "text": " [[Doc Test]]: testing-from-the-doc-string written by [[Tim Peters]]",
            "id": "1a2095fa9305a9e1bc56312ede9cc0fa"
          },
          {
            "type": "html",
            "text": " py.test: Pythonic [[Testing Framework]] ([http://codespeak.net/py/current/doc/test.html codespeak.net])",
            "id": "ac07bb32edc927e8cde9f8441a7b1303"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Python Patterns</b>",
            "id": "a70c0eaee6695aba596320c1a84ea759"
          },
          {
            "type": "html",
            "text": " [[Python Singleton]]",
            "id": "01ceb97b446e240032ef1473de9fc74f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Python Implementations</b>:",
            "id": "7012ea7a4235147797ee03b76a069584"
          },
          {
            "type": "html",
            "text": " CPython: the canonical, reference implementation",
            "id": "4be3523afdae3c2e32d5491f84399d44"
          },
          {
            "type": "html",
            "text": " [[Java Python]]: Jython (formerly JPython), implemented in [[Java Language]]. Emits [[Java Byte Code]] and integrates seamlessly with Java code",
            "id": "228413a84ea68f6e6d05a0311ae2807c"
          },
          {
            "type": "html",
            "text": " [[Stackless Python]]: supports continuation, coroutines, and microthread",
            "id": "c3c6d5af3dea1e58f748f84743dc5bce"
          },
          {
            "type": "html",
            "text": " [[Palm Python]]: python on PalmOS devices",
            "id": "e060a113785f2d6492997039efdbd3dc"
          },
          {
            "type": "html",
            "text": " [[Py Py]]: a self-hosting implementation of Python",
            "id": "4e819bdaf8a415157df77fc05f51069a"
          },
          {
            "type": "html",
            "text": " [[Iron Python]]: Python implemented on top of the [[Common Language Runtime]], for seamless integration with the rest of [[Dot Net]]",
            "id": "8cd977730bf4e34678cd659c17f08b94"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>[[Refactoring Browser]]</b>:",
            "id": "ad6a904e486ac6038e0e539e34605d76"
          },
          {
            "type": "html",
            "text": " [[Bicycle Repair Man]]: Python [[Refactoring Browser]] (apparently stalled; no activity since 2004)",
            "id": "32ef1e3f9e5d31e65fd59da81c42d4b5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Python advocates</b>:",
            "id": "574acbc00afa2239bdbf2265aacb65ea"
          },
          {
            "type": "html",
            "text": " [[Computer Programming For Everybody]]([[Can End Users Script]]) : problems that Python tries to address.",
            "id": "1ba5c31dedb28ac963bb5f161678af3b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Useful Python Libraries</b>:",
            "id": "0bc166af3923ab43d122b7fd36dc2c27"
          },
          {
            "type": "html",
            "text": " Pywin32 from [http://sourceforge.net/projects/pywin32/ sourceforge.net] (for persons with [[Microsoft Windows Cultural Assumption]])",
            "id": "84f154e6e4982a949ffb246d423b0972"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "<b>Python comparisons</b>:",
            "id": "1934e1eff36f9bb80f4b8b49ec4adbeb"
          },
          {
            "type": "html",
            "text": " Python and [[Java Language]] side by side at: [http://www.ferg.org/projects/python_java_side-by-side.html www.ferg.org]",
            "id": "0e65927febb4749d2c342a8cb0b2c4c9"
          },
          {
            "type": "html",
            "text": " [[Python Vs Ruby]]",
            "id": "ee96e4c6c04498af1f539e5c4339b609"
          },
          {
            "type": "html",
            "text": " [[Python Vs Perl]]",
            "id": "a46cf647c1394473ab188cfa120f6e58"
          },
          {
            "type": "html",
            "text": " [[Rosetta Code]]",
            "id": "6094dd6dbf515a59c32455c67b0123ea"
          },
          {
            "type": "html",
            "text": "---- ",
            "id": "dadac1dc1d567beb803f04098066a13c"
          },
          {
            "type": "html",
            "text": "<b>Python's key features:</b>",
            "id": "d0aecf9a894581791e58fdf434385172"
          },
          {
            "type": "html",
            "text": " Python is an excellent language for learning object orientation.",
            "id": "34d547468d0278f5b3d9f5c74c3a40e3"
          },
          {
            "type": "html",
            "text": " Python's [[Big Idea]] is that almost everything is a writable dictionary: dictionaries, classes, objects, stack frames, modules, etc. It's a very elegant and flexible idea.",
            "id": "039682caf519c8a5fcd5a1e1a013b027"
          },
          {
            "type": "html",
            "text": " And that you can make a reference to almost anything and pass that around. You have first-class modules, objects, methods, functions, etc.",
            "id": "1273ed442ea6a9768be36b28d9496f85"
          },
          {
            "type": "html",
            "text": " [[Name Space]]s too. Never forget about namespaces in Python.",
            "id": "a7ef8625c3ad35754e729d032eed988e"
          },
          {
            "type": "html",
            "text": " Oddly enough, I thought Python's [[Big Idea]] was that everything is a sequence",
            "id": "b9e040127b5e871f5a993d89c316a883"
          },
          {
            "type": "html",
            "text": " <b>Python has a [[Big Idea]] for everyone as the above 3 points would seem to indicate</b>  <i>\"Our chief weapon is surprise!  Surprise and fear...fear and surprise... Our two weapons are...\"</i> -- [[Monty Python]]",
            "id": "16a56e374294c4929f10e87da9ece16d"
          },
          {
            "type": "html",
            "text": " And a fanatical devotion to the BDFL...",
            "id": "7c01642a52ced3a7f944ef4e554ff5a3"
          },
          {
            "type": "html",
            "text": " Perhaps it's more than there are no <b>[[Big Idea]]</b>s in Python, it's just a collection of well-thought-out features.",
            "id": "d213df3e0e5b568054e1dadeabc40651"
          },
          {
            "type": "html",
            "text": " Who was it that said \"Python gets all of its compromises exactly right.\"?",
            "id": "580c4788e4c61566e2d667e1dd6d54df"
          },
          {
            "type": "html",
            "text": " I think Python supports [[[Multi Paradigm Programming]]] well -- [[Martin Pool]]",
            "id": "638d69bb8fad178fd3de0f083070aaa2"
          },
          {
            "type": "html",
            "text": " Its other great strength is its scalability; -- [[Steve Freeman]]",
            "id": "227024522d4196e8872f9aafdf0d7172"
          },
          {
            "type": "html",
            "text": " It also does excellent support for all things Microsoft, and it's a nice way to lead VB folk out of the wilderness. -- [[Peter Merel]]",
            "id": "4236c2ede9992e436029b3072b436f49"
          },
          {
            "type": "html",
            "text": " Completely open source.",
            "id": "0bf9350dbc54f965328e5c2010bd1e7b"
          },
          {
            "type": "html",
            "text": " Large set of standard/nonstandard libraries.",
            "id": "88ad98f0254603db40dea69baa79f175"
          },
          {
            "type": "html",
            "text": " Enjoys almost-Smalltalk-like plasticity, with typeless variables, late-late binding and reflection.",
            "id": "0b39136eae707b03c07e05c23841661d"
          },
          {
            "type": "html",
            "text": " Normally doesn't look like line noise run through an obfuscation filter [Though [[Obfuscated Python]] and [[Wy Py]] show how even Python can be made to look horrid]",
            "id": "8f2281d0ac8de4ad504c5107a9c96d9e"
          },
          {
            "type": "html",
            "text": " [[Generators In Python]], which support simple form of continuation. You'll be really amazed at how it can make complex stuff simple and elegant. -- [[June Kim]]",
            "id": "346aeb405b31e79c19c19c73771ff95d"
          },
          {
            "type": "html",
            "text": " [[List Comprehension]]s from [[Haskell Language]] - see a quicksort implementation in [[Python Sample]].",
            "id": "f768c13451b23bd417db96ecf07c12c4"
          },
          {
            "type": "html",
            "text": " [[Duck Typing]]:  you don't need a massive, static inheritance diagram. If an object implements the methods that, say, a file does, you can pass it to anything that expects a file, and it just works. (If you really want to live dangerously, you can even add the methods after instantiation, pass it like a file, and pull them back off the object when you're done. [[Dont Try This At Home]].)",
            "id": "44b5118a2ca12a15932f32ebd9a91f67"
          },
          {
            "type": "html",
            "text": " Insight: code will be read more often than being written: optimize for readability",
            "id": "5f59aac3cbc36f5a906b8be938d0b57d"
          },
          {
            "type": "html",
            "text": " Last but not Least: It has a cool name :-P (<i>It's named after <b>Monty</b> Python, not the snake -- [[Wayne Werner]]</i>)",
            "id": "de8a5503c148810102ebad4b70e94075"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "[[Peter Norvig]] on [[Python For Lisp Programmers]]: <i>Basically, Python can be seen as a dialect of Lisp with \"traditional syntax.\"</i>",
            "id": "415ce8062fc3eb0993a18edb3dfc1891"
          },
          {
            "type": "html",
            "text": "\nIncorrect. No conditionals in lambda. <i>And you can't use returns either. Or use lambdas as generators.</i>",
            "id": "0dfa65aac09beb65369fbe63f3e46693"
          },
          {
            "type": "html",
            "text": "<b>Actually conditional expressions have been added to Python 2.5, they look like this:</b>",
            "id": "804f2694c0a7de143c99901cc863a86c"
          },
          {
            "type": "html",
            "text": "test_temp = lambda t:<br>\"Above freezing\" if t > 32 else (\"Below freezing\" if t < 32 else \"At freezing\")",
            "id": "fe2cfc37e7a0eae8484cba37c84cd38d"
          },
          {
            "type": "html",
            "text": "<b>Using lambdas with generators can be done by using functions from itertools (e.g. imap, izip)</b>",
            "id": "2b89d2255388aac535c81f8efcb97e5d"
          },
          {
            "type": "html",
            "text": "<i>Ah, but y = lambda x: foo is just syntactic sugar for</i> ",
            "id": "171f0efdc3d3cc59085029f64eaeb2aa"
          },
          {
            "type": "html",
            "text": "def y(x):<br>",
            "id": "421cd85022026c0dd6845a769c4f740e"
          },
          {
            "type": "code",
            "text": "  return foo",
            "id": "58e37e78a7e366b33c04cb4a6c5f987a"
          },
          {
            "type": "html",
            "text": "<i>This is because the definition of a nested function will be re-evaluated (or at least appear to be) whenever its outer function is called. So Python does have \"proper\" higher-order functions, but without a nice syntax for anything more complicated than returning an expression.</i>",
            "id": "6fa5821fa7374f48eb9afce58d54c62a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "Python has built-in [[Complex Numbers]]. [[Complex Numbers Are Your Friend]].",
            "id": "4aedc17648c53bbd660cd17dfff4bdb3"
          },
          {
            "type": "html",
            "text": "\nPython is the best language I've tried for day-to-day quick programming. I've used it to manipulate text files, pipe formatting algorithms through a text editor, write music scripts, etc. I have to say I'm a believer in easy-to-use syntax that doesn't make you work hard and jump through hoops ([[Lisp Language]], [[Perl Language]], [[Forth Language]], [[Smalltalk Language]] - Perl's the worst offender). It has a very pragmatic feel. Lisp, [[Scheme Language]], etc. can can claim to be beautiful; Python is beautiful, easy-to-use, and powerful and practical for real-world apps. It even has support for a limited functional style for the pure academic type programmers out there. And recursion and iteration are equally supported, although performance is better for iteration, I think. -- [[Aaron Krister Johnson]]",
            "id": "17453b8d4c89bc2b7b2691ea5866f5fd"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "(Moved from [[Objects Are Dictionaries]])",
            "id": "593dcad1d446b4b097b575dac6c22b33"
          },
          {
            "type": "html",
            "text": "\n[[Python Language]] implements objects as dictionaries, and \"new-style\" classes as objects.",
            "id": "d84116117a9c03abd0d4757e583b5a2a"
          },
          {
            "type": "html",
            "text": "<i>IMO Python failed to capitalize on the similarities early on, and now seems to have created two different structures for things that are only slightly different from each other rather than consolidate, unnecessarily complicating the language. In general Python designers went structure-happy with dictionaries, tuples, lists, etc. that are only slightly different from each other. Perhaps it was done for speed, but it certainly complicates the language syntax. A violation of the [[Law Of Orthogonality]]?</i>",
            "id": "2d24445a8a8339a53c82def10172ffe7"
          },
          {
            "type": "html",
            "text": "\nWhilst I agree that Python is increasingly in danger of becoming unnecessarily complex, I think you're wrong about the structures. The variety of built-in structures with easy ways of expressing literals is one of the key strengths of Python. Python dictionaries and lists enable one to clearly express one's intention using literals. And the tuples exist to provide an immutable sequence for things like hashing.",
            "id": "ad5b54f3f847a4cb797e06299050f1a5"
          },
          {
            "type": "html",
            "text": "<i>I suppose we would have to compare and contrast some examples.</i>",
            "id": "c8c1601ebc07cbca63eb5a647e0566c4"
          },
          {
            "type": "html",
            "text": "\nPython:",
            "id": "209042252ff69eb1a49998475b8110b9"
          },
          {
            "type": "html",
            "text": "myDict = {\"a\":<br>1, \"b\": 2, \"c\": 3}",
            "id": "878815a4d0846c25c2558591cfac5429"
          },
          {
            "type": "code",
            "text": " print myDict.get(someKey, someDefault)",
            "id": "a47f349d0d62c5b72fea45a7589c4d57"
          },
          {
            "type": "html",
            "text": "[[Cee Sharp]]:",
            "id": "cd94fe2d49c6e57349f2950cfceeada7"
          },
          {
            "type": "code",
            "text": " var myDict = new Dictionary<string, int> { { \"a\", 1 }, { \"b\", 2 }, { \"c\", 3 } };\n int value = someDefault;\n myDict.Try''''''Get''''''Value(someKey, out value);\n Console.Write''''''Line(value);",
            "id": "f1feba1f2fde1dbf2245f34e57f2c1ad"
          },
          {
            "type": "html",
            "text": "The paragraph below related to the old C#, I took the liberty of updating it to fairly idiomatic modern C#. It's worth noting that the initializer syntax used is general to all types, not specialized for dictionaries, and the new code is type safe where the old was not. Not an Object in sight.",
            "id": "eb1b27e74f02ccbcdfec7541a4261ed7"
          },
          {
            "type": "html",
            "text": "\nOne of these encourages the use of dictionaries more than the other, especially for things like lookup tables vs. switch statements. Looking through many introductions to C#, I see switch statements for stuff that I'd just hash in Python.",
            "id": "cac9f9d6536012b85d420243bce1fc39"
          },
          {
            "type": "html",
            "text": "\nThe other comparison would be between Python and a language with regular/minimal syntax, like [[Lisp Language]] or [[Scheme Language]], I suppose.",
            "id": "96fd7b48de83c4251a77a7ec600ab146"
          },
          {
            "type": "html",
            "text": "\nAs far as having lots of similar built-in structures, dicts are different from lists, of course. That there are immutable tuples and mutable lists that are otherwise similar is perhaps a wart. You can hash on tuples but not lists; I suppose if Python were being designed right now, mutability of objects might be handled differently.",
            "id": "3634fb68a9a3575824c2dbfbd57497e9"
          },
          {
            "type": "html",
            "text": "\nOutside of dict, list, and tuple, what other built-in data structures are of note?",
            "id": "f715180ee3df68389446f78420046670"
          },
          {
            "type": "html",
            "text": "-- [[Adam Vandenberg]]",
            "id": "c2de60572cbb8aee4134102762cdb91c"
          },
          {
            "type": "html",
            "text": "\nWell, objects (the base type of new-style classes) are interesting, as are generators (although they're not as general-purpose as the \"big three\" you list). Naturally, most code uses modules, methods, and functions; they're first-class types in Python just like integers and tuples.",
            "id": "813e5288ed8be3110f095f1c0eca7ade"
          },
          {
            "type": "html",
            "text": "\nIt's a good idea to look over the methods of even the simplest types from time to time, because they have interesting properties that you might not know about otherwise.",
            "id": "a2854798b6a9ef630a8e6a8ef7f71042"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "I tore up some of my classes and made functions out of them. What's happening?? Seems I have learned enough of [[Python Language]] and can write code where I don't have to hide complexity. If I can see a function in half a page, I don't have to make a class and then call .doSomething(), like in [[Cee Plus Plus]].",
            "id": "dfb8b1c5d16c14bf76dd1875c0e3370f"
          },
          {
            "type": "html",
            "text": "<i>I'm trying to make sense of this. Freestanding functions are not a feature specific to Python - there's no reason you can't write them in [[Cee Plus Plus]]. In fact, Stroustrup rants against the \"make everything a class\" attitude of some coders.</i>",
            "id": "b7c93748f66517446b1cc5475e085971"
          },
          {
            "type": "html",
            "text": "I believe the point was that something that would take several pages in [[Cee Plus Plus]] can be done in half a page in python. Several pages of code requires some further organization; half a page can be understood on its own terms.",
            "id": "a12fa7df2de9a0fe6a0f3f7537f4ffc3"
          },
          {
            "type": "html",
            "text": "<i>While free functions have always been perfectly acceptable in Python, until recently [[Everything Isa Class]] was a very common paradigm in [[Cee Plus Plus]]. Recently, it's come under fire by folks like [[Herb Sutter]], though, so it appears that [[Cee Plus Plus]] is moving in this direction as well.</i>",
            "id": "b09e8da013b248606f46999a9949586e"
          },
          {
            "type": "html",
            "text": "\nVariable names are becoming shorter. Is it me or Python influence?",
            "id": "67565e7caa19c961633ddf48dab6a071"
          },
          {
            "type": "html",
            "text": "<i>I think it is the old C influence reasserting itself - those short, vowel-stripped variable names are something that people like to complain about in the common C libraries.</i>",
            "id": "bc803e544e13700bb303a9158fd5416a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "fbc30e81da44645c7e62c0dadeaf2cdf"
          },
          {
            "type": "html",
            "text": "[[Category Python]] [[Category Programming Language]]",
            "id": "bf9f655674284ab1775df84069659996"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?PythonLanguage c2.com]",
            "id": "2726bdb867c3fbc2eed65e0551a4e5d7"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1645326976887
    }
  ]
}