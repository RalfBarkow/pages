{
  "title": "Programming paradigm",
  "journal": [
    {
      "date": 1550997274458,
      "type": "create",
      "item": {
        "story": "",
        "title": "Programming paradigm"
      }
    },
    {
      "type": "fork",
      "date": 1550997143538
    },
    {
      "type": "edit",
      "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
      "item": {
        "type": "markdown",
        "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
        "text": "-  [[imperative programming]] in which the programmer instructs the machine how to change its state,\n- * [[procedural programming|procedural]] which groups instructions into procedures,\n- * [[object-oriented programming|object-oriented]] which groups instructions together with the part of the state they operate on,\n-  [[declarative programming|declarative]] in which the programmer merely declares properties of the desired result, but not how to compute it\n- * [[functional programming|functional]] in which the desired result is declared as the value of a series of function applications,\n- * [[logic programming|logic]] in which the desired result is declared as the answer to a question about a system of facts and rules,\n- * [[Mathematical programming|mathematical]] in which the desired result is declared as the solution of an optimization problem"
      },
      "date": 1550997161818
    },
    {
      "type": "edit",
      "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
      "item": {
        "type": "markdown",
        "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
        "text": "-  [[imperative programming]] in which the programmer instructs the machine how to change its state,\n- * [[procedural programming]] which groups instructions into procedures,\n- * [[object-oriented programming|object-oriented]] which groups instructions together with the part of the state they operate on,\n-  [[declarative programming|declarative]] in which the programmer merely declares properties of the desired result, but not how to compute it\n- * [[functional programming|functional]] in which the desired result is declared as the value of a series of function applications,\n- * [[logic programming|logic]] in which the desired result is declared as the answer to a question about a system of facts and rules,\n- * [[Mathematical programming|mathematical]] in which the desired result is declared as the solution of an optimization problem"
      },
      "date": 1550997172450
    },
    {
      "type": "edit",
      "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
      "item": {
        "type": "markdown",
        "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
        "text": "-  [[imperative programming]] in which the programmer instructs the machine how to change its state,\n- [[procedural programming]] which groups instructions into procedures,\n- * [[object-oriented programming]] which groups instructions together with the part of the state they operate on,\n-  [[declarative programming]] in which the programmer merely declares properties of the desired result, but not how to compute it\n- * [[functional programming]] in which the desired result is declared as the value of a series of function applications,\n- * [[logic programming]] in which the desired result is declared as the answer to a question about a system of facts and rules,\n- * [[Mathematical programming]] in which the desired result is declared as the solution of an optimization problem"
      },
      "date": 1550997934594
    },
    {
      "type": "edit",
      "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
      "item": {
        "type": "markdown",
        "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
        "text": "-  [[imperative programming]] in which the programmer instructs the machine how to change its state,\n- [[procedural programming]] which groups instructions into procedures,\n- [[object-oriented programming]] which groups instructions together with the part of the state they operate on,\n- [[declarative programming]] in which the programmer merely declares properties of the desired result, but not how to compute it\n- [[functional programming]] in which the desired result is declared as the value of a series of function applications,\n- [[logic programming]] in which the desired result is declared as the answer to a question about a system of facts and rules,\n- [[Mathematical programming]] in which the desired result is declared as the solution of an optimisation problem"
      },
      "date": 1550997965460
    },
    {
      "type": "edit",
      "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
      "item": {
        "type": "markdown",
        "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
        "text": "-  [[imperative programming]] in which the programmer instructs the machine how to change its state,\n- [[procedural programming]] which groups instructions into procedures,\n- [[object-oriented programming]] which groups instructions together with the part of the state they operate on,\n- [[declarative programming]] in which the programmer merely declares properties of the desired result, but not how to compute it\n- [[functional programming]] in which the desired result is declared as the value of a series of function applications,\n- [[logic programming]] in which the desired result is declared as the answer to a question about a system of facts and rules,\n- mathematical programming (programming using [[mathematical optimization]]) in which the desired result is declared as the solution of an optimisation problem"
      },
      "date": 1550998265390
    },
    {
      "type": "edit",
      "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
      "item": {
        "type": "markdown",
        "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
        "text": "-  [[imperative programming]] in which the programmer instructs the machine how to change its state,\n- [[procedural programming]] which groups instructions into procedures,\n- [[object-oriented programming]] which groups instructions together with the part of the state they operate on,\n- [[declarative programming]] in which the programmer merely declares properties of the desired result, but not how to compute it\n- [[functional programming]] in which the desired result is declared as the value of a series of function applications,\n- [[logic programming]] in which the desired result is declared as the answer to a question about a system of facts and rules,\n- [[mathematical optimization]] (mathematical programming) in which the desired result is declared as the solution of an optimisation problem"
      },
      "date": 1550998296973
    },
    {
      "type": "edit",
      "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
      "item": {
        "type": "markdown",
        "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
        "text": "# Imperative\n-  [[imperative programming]] in which the programmer instructs the machine how to change its state,\n- [[procedural programming]] which groups instructions into procedures,\n- [[object-oriented programming]] which groups instructions together with the part of the state they operate on\n"
      },
      "date": 1550998366566
    },
    {
      "type": "add",
      "id": "7a7d59dbef3033f6",
      "item": {
        "type": "markdown",
        "id": "7a7d59dbef3033f6",
        "text": "# Declarative\n- [[declarative programming]] in which the programmer merely declares properties of the desired result, but not how to compute it\n- [[functional programming]] in which the desired result is declared as the value of a series of function applications,\n- [[logic programming]] in which the desired result is declared as the answer to a question about a system of facts and rules,\n- [[mathematical optimization]] (mathematical programming) in which the desired result is declared as the solution of an optimisation problem"
      },
      "after": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
      "date": 1550998374607
    },
    {
      "type": "edit",
      "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
      "item": {
        "type": "markdown",
        "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
        "text": "# Imperative\n[[Imperative programming]] in which the programmer instructs the machine how to change its state:\n\n- [[procedural programming]] which groups instructions into procedures,\n- [[object-oriented programming]] which groups instructions together with the part of the state they operate on\n"
      },
      "date": 1550998395560
    },
    {
      "type": "edit",
      "id": "7a7d59dbef3033f6",
      "item": {
        "type": "markdown",
        "id": "7a7d59dbef3033f6",
        "text": "# Declarative\n\n[[Declarative programming]] in which the programmer merely declares properties of the desired result, but not how to compute it:\n\n- [[functional programming]] in which the desired result is declared as the value of a series of function applications,\n- [[logic programming]] in which the desired result is declared as the answer to a question about a system of facts and rules,\n- [[mathematical optimization]] (mathematical programming) in which the desired result is declared as the solution of an optimisation problem"
      },
      "date": 1550998415032
    },
    {
      "type": "edit",
      "id": "9048942b-b7a7-4acb-882d-3a30d8b4a756",
      "item": {
        "type": "markdown",
        "id": "9048942b-b7a7-4acb-882d-3a30d8b4a756",
        "text": "For example, languages that fall into the __imperative paradigm__ have two main features: they state the order in which operations occur, with constructs that explicitly control that order, and they allow side effects, in which state can be modified at one point in time, within one unit of code, and then later read at a different point in time inside a different unit of code.  \n"
      },
      "date": 1550998428734
    },
    {
      "type": "add",
      "id": "0e086254fa0284e6",
      "item": {
        "type": "markdown",
        "id": "0e086254fa0284e6",
        "text": "The communication between the units of code is not explicit.  Meanwhile, in __object-oriented__ programming, code is organized into [[Object (programming)]] that contain state that is only modified by the code that is part of the object.  \n"
      },
      "after": "9048942b-b7a7-4acb-882d-3a30d8b4a756",
      "date": 1550998433357
    },
    {
      "type": "add",
      "id": "fb3caab2f7908ccf",
      "item": {
        "type": "markdown",
        "id": "fb3caab2f7908ccf",
        "text": "Most object-oriented languages are also imperative languages.  In contrast, languages that fit the __declarative paradigm__ do not state the order in which to execute operations.  Instead, they supply a number of operations that are available in the system, along with the conditions under which each is allowed to execute.  \n"
      },
      "after": "0e086254fa0284e6",
      "date": 1550998438247
    },
    {
      "type": "add",
      "id": "6ca5da7649b48d34",
      "item": {
        "type": "markdown",
        "id": "6ca5da7649b48d34",
        "text": "The implementation of the language's execution model tracks which operations are free to execute and chooses the order on its own. More at  [[Comparison of multi-paradigm programming languages]]."
      },
      "after": "fb3caab2f7908ccf",
      "date": 1550998438849
    },
    {
      "type": "remove",
      "id": "c25e97ff-b38b-472e-baf5-73d60753cac2",
      "date": 1550998447239
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "184098f494286c76",
        "text": "- [[Imperative programming]]\n- [[Procedural programming]]\n- [[Object-oriented programming]]\n- [[Declarative programming]]\n- [[Functional programming]]\n- [[Reactive programming]]\n- [[Logic programming]]\n- [[Literate programming]]\n- [[Programming paradigm]]\n\n"
      },
      "after": "698cdcfe-742f-4679-84e5-8d1ebed30822",
      "id": "184098f494286c76",
      "date": 1550999403251
    },
    {
      "type": "edit",
      "id": "184098f494286c76",
      "item": {
        "type": "markdown",
        "id": "184098f494286c76",
        "text": "- [[Imperative programming]]\n- [[Procedural programming]]\n- [[Object-oriented programming]]\n- [[Declarative programming]]\n- [[Functional programming]]\n- [[Reactive programming]]\n- [[Logic programming]]\n- [[Literate programming]]\n- [[Programming paradigm]]\n"
      },
      "date": 1551169737759
    },
    {
      "type": "edit",
      "id": "184098f494286c76",
      "item": {
        "type": "markdown",
        "id": "184098f494286c76",
        "text": "- [[Imperative programming]]\n- [[Procedural programming]]\n- [[Object-oriented programming]]\n- [[Declarative programming]]\n- [[Functional programming]]\n- [[Reactive programming]]\n- [[Logic programming]]\n- [[Literate programming]]\n- [[Programming paradigm]]\n- [[Language Oriented Programming]]"
      },
      "date": 1551169750337
    },
    {
      "type": "edit",
      "id": "0e086254fa0284e6",
      "item": {
        "type": "markdown",
        "id": "0e086254fa0284e6",
        "text": "The communication between the units of code is not explicit.  Meanwhile, in __object-oriented__ programming, code is organized into __objects__ that contain state that is only modified by the code that is part of the object.  \n"
      },
      "date": 1551349512710
    },
    {
      "type": "fork",
      "site": "c0de.academy",
      "date": 1626124242694
    }
  ],
  "story": [
    {
      "type": "markdown",
      "id": "1a5486ba-eab6-4bfb-a024-a772d42bbf80",
      "text": "__Programming paradigms__ are a way to classify [[programming language]]s based on their features. Languages can be classified into multiple paradigms - [https://en.wikipedia.org/wiki/Programming_paradigm wikipedia]"
    },
    {
      "type": "markdown",
      "id": "6e3f4246-7096-4f7b-922d-c9f341da928e",
      "text": "Some paradigms are concerned mainly with implications for the [[execution model]] of the language, such as allowing [[Side effect (computer science)]], or whether the sequence of operations is defined by the execution model.  Other paradigms are concerned mainly with the way that code is organized, such as grouping a code into units along with the state that is modified by the code.  Yet others are concerned mainly with the style of syntax and grammar."
    },
    {
      "type": "markdown",
      "id": "e5b2a21f-e05b-41aa-b209-df179cf71c84",
      "text": "Common programming paradigms include:"
    },
    {
      "type": "markdown",
      "id": "334ed2ff-45f4-48df-90ce-56f6dba64b8c",
      "text": "# Imperative\n[[Imperative programming]] in which the programmer instructs the machine how to change its state:\n\n- [[procedural programming]] which groups instructions into procedures,\n- [[object-oriented programming]] which groups instructions together with the part of the state they operate on\n"
    },
    {
      "type": "markdown",
      "id": "7a7d59dbef3033f6",
      "text": "# Declarative\n\n[[Declarative programming]] in which the programmer merely declares properties of the desired result, but not how to compute it:\n\n- [[functional programming]] in which the desired result is declared as the value of a series of function applications,\n- [[logic programming]] in which the desired result is declared as the answer to a question about a system of facts and rules,\n- [[mathematical optimization]] (mathematical programming) in which the desired result is declared as the solution of an optimisation problem"
    },
    {
      "type": "markdown",
      "id": "9048942b-b7a7-4acb-882d-3a30d8b4a756",
      "text": "For example, languages that fall into the __imperative paradigm__ have two main features: they state the order in which operations occur, with constructs that explicitly control that order, and they allow side effects, in which state can be modified at one point in time, within one unit of code, and then later read at a different point in time inside a different unit of code.  \n"
    },
    {
      "type": "markdown",
      "id": "0e086254fa0284e6",
      "text": "The communication between the units of code is not explicit.  Meanwhile, in __object-oriented__ programming, code is organized into __objects__ that contain state that is only modified by the code that is part of the object.  \n"
    },
    {
      "type": "markdown",
      "id": "fb3caab2f7908ccf",
      "text": "Most object-oriented languages are also imperative languages.  In contrast, languages that fit the __declarative paradigm__ do not state the order in which to execute operations.  Instead, they supply a number of operations that are available in the system, along with the conditions under which each is allowed to execute.  \n"
    },
    {
      "type": "markdown",
      "id": "6ca5da7649b48d34",
      "text": "The implementation of the language's execution model tracks which operations are free to execute and chooses the order on its own. More at  [[Comparison of multi-paradigm programming languages]]."
    },
    {
      "type": "markdown",
      "id": "931797d8-a622-44b1-8dd0-9d78bf5694ae",
      "text": "# Sections"
    },
    {
      "type": "html",
      "id": "c6b97d84-963d-4a84-b61c-841b0e33ff6e",
      "text": "<form action='https://rest.livecode.world/mediawiki/importSection'><input name=section_title size=60 value='Overview'>\n<input name=url type=hidden value='https://en.wikipedia.org/w/index.php?title=Programming paradigm&action=edit&section=1'>\n<input type=submit value=create></form>"
    },
    {
      "type": "html",
      "id": "a8bcf6c6-423e-402a-b21b-b552b85b1e9e",
      "text": "<form action='https://rest.livecode.world/mediawiki/importSection'><input name=section_title size=60 value='Criticism'>\n<input name=url type=hidden value='https://en.wikipedia.org/w/index.php?title=Programming paradigm&action=edit&section=2'>\n<input type=submit value=create></form>"
    },
    {
      "type": "html",
      "id": "ee35c82f-af9f-435e-8e90-cc14bbf1b66d",
      "text": "<form action='https://rest.livecode.world/mediawiki/importSection'><input name=section_title size=60 value='History'>\n<input name=url type=hidden value='https://en.wikipedia.org/w/index.php?title=Programming paradigm&action=edit&section=3'>\n<input type=submit value=create></form>"
    },
    {
      "type": "html",
      "id": "ab66f89c-7613-401a-b596-7e5111ed909f",
      "text": "<form action='https://rest.livecode.world/mediawiki/importSection'><input name=section_title size=60 value='Support for multiple paradigms'>\n<input name=url type=hidden value='https://en.wikipedia.org/w/index.php?title=Programming paradigm&action=edit&section=8'>\n<input type=submit value=create></form>"
    },
    {
      "type": "markdown",
      "id": "698cdcfe-742f-4679-84e5-8d1ebed30822",
      "text": "# See also"
    },
    {
      "type": "markdown",
      "id": "184098f494286c76",
      "text": "- [[Imperative programming]]\n- [[Procedural programming]]\n- [[Object-oriented programming]]\n- [[Declarative programming]]\n- [[Functional programming]]\n- [[Reactive programming]]\n- [[Logic programming]]\n- [[Literate programming]]\n- [[Programming paradigm]]\n- [[Language Oriented Programming]]"
    },
    {
      "type": "markdown",
      "id": "6f3e84cb-c08a-47e9-bd78-d6deb7da5024",
      "text": "- [[Architecture description language]]\n- [[Comparison of programming languages]]\n- [[Comparison of programming paradigms]]\n- [[Domain-specific language]]\n- [[Mindset]]\n- [[Modeling language]]\n- [[Programming domain]]\n- [[Type system]]\n- [[Turing completeness]]\n- [[Von Neumann programming languages]]"
    }
  ]
}