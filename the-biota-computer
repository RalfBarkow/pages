{
  "title": "The Biota Computer",
  "story": [
    {
      "type": "markdown",
      "id": "25e56f594a345ff3",
      "text": "The Biota Computer [https://c2.com/~ward/biota/notes.txt page]\nby Ward Cunningham\n\n\n\n"
    },
    {
      "type": "markdown",
      "id": "c16a068b44f611fa",
      "text": "Biota is a simulation of an imaginary computer with some unusual properties.  Its memory is addressed by points held in registers that can be incremented in any of eight possible directions.\n"
    },
    {
      "type": "markdown",
      "id": "b647cfb15adfacec",
      "text": " \nPrograms are interpreted by following strings of non-blank instructions as they wind through memory.  Loops and branches appear as exactly that.  The program counter turns to avoid blanks and failing\ninstructions.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "2a79349bbe462fef",
      "text": "New Classes\n-----------\n\nBiota -- A two dimensional space, addressed by points, which stores the characters that are biota programs and data.  Class methods define the size of the space and a single character, called empty, that marks unused cells.\n"
    },
    {
      "type": "markdown",
      "id": "662dd693a001794f",
      "text": "DisplayBiota -- A kind of biota that echos it's modifications the computer display.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "e3dd080f07080317",
      "text": "BiotaIndex -- A kind of point that includes a direction and responds to turtle style protocol (go, turn).\n\n\n"
    },
    {
      "type": "markdown",
      "id": "d10e4e8a3203d1c7",
      "text": "BiotaEngine -- A processor that can interpret programs stored in a biota.  Includes a loader and debugger.  A class method constructs an instruction dispatch table from a method dictionary.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "5f8bfbbef204207e",
      "text": "The loader expects data in odd numbered columns and control characters in the others.  '�' marks the initial program counter; '\u001a' the initial data pointer.  (Use cut and paste to type these characters.)\n\nThe debugger will single step with each press of the space bar.  Press and hold 'r' to run at high speed.  'q' will quit.  (Collapse or frame all windows to the bottom inch of the display before running.  Redraw screen when finished.)\n"
    },
    {
      "type": "markdown",
      "id": "77e30eba0b12ace2",
      "text": "TestEngine -- An experimental biota engine with twelve instructions. Class methods answer sample programs written for this engine. \n\n\n"
    },
    {
      "type": "markdown",
      "id": "83e522736d6848a3",
      "text": "The instructions 't' and 'u' turn right and left.  's' and 'b' step forward and backward.  'd' and 'r' duplicate data, 'r' more aggressively. 'c' clears data to blank.  'f' faces the data pointer at the nearest data while 'h' alignes it with the program counter.  'g' combines 'f' and 's'.  'a' and 'q' are obsolete and should be avoided.\n\n"
    },
    {
      "type": "markdown",
      "id": "ea5b315b2b331434",
      "text": "New Methods\n-----------\n\nPoint offset -- Computes the byte offset in a linear memory (i.e. a string) corresponding to a given point."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "The Biota Computer",
        "story": []
      },
      "date": 1641032180750
    },
    {
      "item": {
        "type": "factory",
        "id": "25e56f594a345ff3"
      },
      "id": "25e56f594a345ff3",
      "type": "add",
      "date": 1641032190616
    },
    {
      "type": "edit",
      "id": "25e56f594a345ff3",
      "item": {
        "type": "paragraph",
        "id": "25e56f594a345ff3",
        "text": "he Biota Computer\nby Ward Cunningham\n\n\nBiota is a simulation of an imaginary computer with some unusual\nproperties.  Its memory is addressed by points held in registers\nthat can be incremented in any of eight possible directions. \nPrograms are interpreted by following strings of non-blank instructions\nas they wind through memory.  Loops and branches appear as exactly\nthat.  The program counter turns to avoid blanks and failing\ninstructions.\n\nNew Classes\n-----------\n\nBiota -- A two dimensional space, addressed by points, which stores\nthe characters that are biota programs and data.  Class methods define\nthe size of the space and a single character, called empty, that marks\nunused cells.\n\nDisplayBiota -- A kind of biota that echos it's modifications the \ncomputer display.\n\nBiotaIndex -- A kind of point that includes a direction and responds \nto turtle style protocol (go, turn).\n\nBiotaEngine -- A processor that can interpret programs stored in a\nbiota.  Includes a loader and debugger.  A class method constructs\nan instruction dispatch table from a method dictionary.\n\nThe loader expects data in odd numbered columns and control characters\nin the others.  '�' marks the initial program counter; '\u001a' the initial\ndata pointer.  (Use cut and paste to type these characters.)\n\nThe debugger will single step with each press of the space bar.  Press\nand hold 'r' to run at high speed.  'q' will quit.  (Collapse or frame\nall windows to the bottom inch of the display before running.  Redraw\nscreen when finished.)\n\nTestEngine -- An experimental biota engine with twelve instructions.\nClass methods answer sample programs written for this engine. \n\nThe instructions 't' and 'u' turn right and left.  's' and 'b' step\nforward and backward.  'd' and 'r' duplicate data, 'r' more aggressively.\n'c' clears data to blank.  'f' faces the data pointer at the nearest\ndata while 'h' alignes it with the program counter.  'g' combines 'f'\nand 's'.  'a' and 'q' are obsolete and should be avoided.\n\n  \nNew Methods\n-----------\n\nPoint offset -- Computes the byte offset in a linear memory (i.e. a string)\ncorresponding to a given point."
      },
      "date": 1641032191906
    },
    {
      "type": "edit",
      "id": "25e56f594a345ff3",
      "item": {
        "type": "paragraph",
        "id": "25e56f594a345ff3",
        "text": "The Biota Computer\nby Ward Cunningham\n\n\nBiota is a simulation of an imaginary computer with some unusual\nproperties.  Its memory is addressed by points held in registers\nthat can be incremented in any of eight possible directions. \nPrograms are interpreted by following strings of non-blank instructions\nas they wind through memory.  Loops and branches appear as exactly\nthat.  The program counter turns to avoid blanks and failing\ninstructions.\n\nNew Classes\n-----------\n\nBiota -- A two dimensional space, addressed by points, which stores\nthe characters that are biota programs and data.  Class methods define\nthe size of the space and a single character, called empty, that marks\nunused cells.\n\nDisplayBiota -- A kind of biota that echos it's modifications the \ncomputer display.\n\nBiotaIndex -- A kind of point that includes a direction and responds \nto turtle style protocol (go, turn).\n\nBiotaEngine -- A processor that can interpret programs stored in a\nbiota.  Includes a loader and debugger.  A class method constructs\nan instruction dispatch table from a method dictionary.\n\nThe loader expects data in odd numbered columns and control characters\nin the others.  '�' marks the initial program counter; '\u001a' the initial\ndata pointer.  (Use cut and paste to type these characters.)\n\nThe debugger will single step with each press of the space bar.  Press\nand hold 'r' to run at high speed.  'q' will quit.  (Collapse or frame\nall windows to the bottom inch of the display before running.  Redraw\nscreen when finished.)\n\nTestEngine -- An experimental biota engine with twelve instructions.\nClass methods answer sample programs written for this engine. \n\nThe instructions 't' and 'u' turn right and left.  's' and 'b' step\nforward and backward.  'd' and 'r' duplicate data, 'r' more aggressively.\n'c' clears data to blank.  'f' faces the data pointer at the nearest\ndata while 'h' alignes it with the program counter.  'g' combines 'f'\nand 's'.  'a' and 'q' are obsolete and should be avoided.\n\n  \nNew Methods\n-----------\n\nPoint offset -- Computes the byte offset in a linear memory (i.e. a string)\ncorresponding to a given point."
      },
      "date": 1641032203042
    },
    {
      "type": "edit",
      "id": "25e56f594a345ff3",
      "item": {
        "type": "paragraph",
        "id": "25e56f594a345ff3",
        "text": "The Biota Computer [https://c2.com/~ward/biota/notes.txt page]\nby Ward Cunningham\n\n\nBiota is a simulation of an imaginary computer with some unusual\nproperties.  Its memory is addressed by points held in registers\nthat can be incremented in any of eight possible directions. \nPrograms are interpreted by following strings of non-blank instructions\nas they wind through memory.  Loops and branches appear as exactly\nthat.  The program counter turns to avoid blanks and failing\ninstructions.\n\nNew Classes\n-----------\n\nBiota -- A two dimensional space, addressed by points, which stores\nthe characters that are biota programs and data.  Class methods define\nthe size of the space and a single character, called empty, that marks\nunused cells.\n\nDisplayBiota -- A kind of biota that echos it's modifications the \ncomputer display.\n\nBiotaIndex -- A kind of point that includes a direction and responds \nto turtle style protocol (go, turn).\n\nBiotaEngine -- A processor that can interpret programs stored in a\nbiota.  Includes a loader and debugger.  A class method constructs\nan instruction dispatch table from a method dictionary.\n\nThe loader expects data in odd numbered columns and control characters\nin the others.  '�' marks the initial program counter; '\u001a' the initial\ndata pointer.  (Use cut and paste to type these characters.)\n\nThe debugger will single step with each press of the space bar.  Press\nand hold 'r' to run at high speed.  'q' will quit.  (Collapse or frame\nall windows to the bottom inch of the display before running.  Redraw\nscreen when finished.)\n\nTestEngine -- An experimental biota engine with twelve instructions.\nClass methods answer sample programs written for this engine. \n\nThe instructions 't' and 'u' turn right and left.  's' and 'b' step\nforward and backward.  'd' and 'r' duplicate data, 'r' more aggressively.\n'c' clears data to blank.  'f' faces the data pointer at the nearest\ndata while 'h' alignes it with the program counter.  'g' combines 'f'\nand 's'.  'a' and 'q' are obsolete and should be avoided.\n\n  \nNew Methods\n-----------\n\nPoint offset -- Computes the byte offset in a linear memory (i.e. a string)\ncorresponding to a given point."
      },
      "date": 1641032265242
    },
    {
      "type": "edit",
      "id": "25e56f594a345ff3",
      "item": {
        "type": "markdown",
        "id": "25e56f594a345ff3",
        "text": "The Biota Computer [https://c2.com/~ward/biota/notes.txt page]\nby Ward Cunningham\n\n\nBiota is a simulation of an imaginary computer with some unusual\nproperties.  Its memory is addressed by points held in registers\nthat can be incremented in any of eight possible directions. \nPrograms are interpreted by following strings of non-blank instructions\nas they wind through memory.  Loops and branches appear as exactly\nthat.  The program counter turns to avoid blanks and failing\ninstructions.\n\nNew Classes\n-----------\n\nBiota -- A two dimensional space, addressed by points, which stores\nthe characters that are biota programs and data.  Class methods define\nthe size of the space and a single character, called empty, that marks\nunused cells.\n\nDisplayBiota -- A kind of biota that echos it's modifications the \ncomputer display.\n\nBiotaIndex -- A kind of point that includes a direction and responds \nto turtle style protocol (go, turn).\n\nBiotaEngine -- A processor that can interpret programs stored in a\nbiota.  Includes a loader and debugger.  A class method constructs\nan instruction dispatch table from a method dictionary.\n\nThe loader expects data in odd numbered columns and control characters\nin the others.  '�' marks the initial program counter; '\u001a' the initial\ndata pointer.  (Use cut and paste to type these characters.)\n\nThe debugger will single step with each press of the space bar.  Press\nand hold 'r' to run at high speed.  'q' will quit.  (Collapse or frame\nall windows to the bottom inch of the display before running.  Redraw\nscreen when finished.)\n\nTestEngine -- An experimental biota engine with twelve instructions.\nClass methods answer sample programs written for this engine. \n\nThe instructions 't' and 'u' turn right and left.  's' and 'b' step\nforward and backward.  'd' and 'r' duplicate data, 'r' more aggressively.\n'c' clears data to blank.  'f' faces the data pointer at the nearest\ndata while 'h' alignes it with the program counter.  'g' combines 'f'\nand 's'.  'a' and 'q' are obsolete and should be avoided.\n\n  \nNew Methods\n-----------\n\nPoint offset -- Computes the byte offset in a linear memory (i.e. a string)\ncorresponding to a given point."
      },
      "date": 1641032266773
    },
    {
      "type": "edit",
      "id": "25e56f594a345ff3",
      "item": {
        "type": "markdown",
        "id": "25e56f594a345ff3",
        "text": "The Biota Computer [https://c2.com/~ward/biota/notes.txt page]\nby Ward Cunningham\n\n\nBiota is a simulation of an imaginary computer with some unusual properties.  Its memory is addressed by points held in registers that can be incremented in any of eight possible directions. \nPrograms are interpreted by following strings of non-blank instructions\nas they wind through memory.  Loops and branches appear as exactly\nthat.  The program counter turns to avoid blanks and failing\ninstructions.\n\nNew Classes\n-----------\n\nBiota -- A two dimensional space, addressed by points, which stores\nthe characters that are biota programs and data.  Class methods define\nthe size of the space and a single character, called empty, that marks\nunused cells.\n\nDisplayBiota -- A kind of biota that echos it's modifications the \ncomputer display.\n\nBiotaIndex -- A kind of point that includes a direction and responds \nto turtle style protocol (go, turn).\n\nBiotaEngine -- A processor that can interpret programs stored in a\nbiota.  Includes a loader and debugger.  A class method constructs\nan instruction dispatch table from a method dictionary.\n\nThe loader expects data in odd numbered columns and control characters\nin the others.  '�' marks the initial program counter; '\u001a' the initial\ndata pointer.  (Use cut and paste to type these characters.)\n\nThe debugger will single step with each press of the space bar.  Press\nand hold 'r' to run at high speed.  'q' will quit.  (Collapse or frame\nall windows to the bottom inch of the display before running.  Redraw\nscreen when finished.)\n\nTestEngine -- An experimental biota engine with twelve instructions.\nClass methods answer sample programs written for this engine. \n\nThe instructions 't' and 'u' turn right and left.  's' and 'b' step\nforward and backward.  'd' and 'r' duplicate data, 'r' more aggressively.\n'c' clears data to blank.  'f' faces the data pointer at the nearest\ndata while 'h' alignes it with the program counter.  'g' combines 'f'\nand 's'.  'a' and 'q' are obsolete and should be avoided.\n\n  \nNew Methods\n-----------\n\nPoint offset -- Computes the byte offset in a linear memory (i.e. a string)\ncorresponding to a given point."
      },
      "date": 1641032278903
    },
    {
      "type": "edit",
      "id": "25e56f594a345ff3",
      "item": {
        "type": "markdown",
        "id": "25e56f594a345ff3",
        "text": "The Biota Computer [https://c2.com/~ward/biota/notes.txt page]\nby Ward Cunningham\n\n\n\n"
      },
      "date": 1641032320546
    },
    {
      "type": "add",
      "id": "c16a068b44f611fa",
      "item": {
        "type": "markdown",
        "id": "c16a068b44f611fa",
        "text": "Biota is a simulation of an imaginary computer with some unusual properties.  Its memory is addressed by points held in registers that can be incremented in any of eight possible directions.\n"
      },
      "after": "25e56f594a345ff3",
      "date": 1641032333482
    },
    {
      "type": "add",
      "id": "b647cfb15adfacec",
      "item": {
        "type": "markdown",
        "id": "b647cfb15adfacec",
        "text": " \nPrograms are interpreted by following strings of non-blank instructions as they wind through memory.  Loops and branches appear as exactly that.  The program counter turns to avoid blanks and failing\ninstructions.\n\n\n"
      },
      "after": "c16a068b44f611fa",
      "date": 1641032336884
    },
    {
      "type": "add",
      "id": "2a79349bbe462fef",
      "item": {
        "type": "markdown",
        "id": "2a79349bbe462fef",
        "text": "New Classes\n-----------\n\nBiota -- A two dimensional space, addressed by points, which stores the characters that are biota programs and data.  Class methods define\nthe size of the space and a single character, called empty, that marks unused cells.\n"
      },
      "after": "b647cfb15adfacec",
      "date": 1641032345409
    },
    {
      "type": "add",
      "id": "662dd693a001794f",
      "item": {
        "type": "markdown",
        "id": "662dd693a001794f",
        "text": "\nDisplayBiota -- A kind of biota that echos it's modifications the computer display.\n\n\n"
      },
      "after": "2a79349bbe462fef",
      "date": 1641032353303
    },
    {
      "type": "add",
      "id": "e3dd080f07080317",
      "item": {
        "type": "markdown",
        "id": "e3dd080f07080317",
        "text": "BiotaIndex -- A kind of point that includes a direction and responds to turtle style protocol (go, turn).\n\n\n"
      },
      "after": "662dd693a001794f",
      "date": 1641032359716
    },
    {
      "type": "add",
      "id": "d10e4e8a3203d1c7",
      "item": {
        "type": "markdown",
        "id": "d10e4e8a3203d1c7",
        "text": "BiotaEngine -- A processor that can interpret programs stored in a biota.  Includes a loader and debugger.  A class method constructs an instruction dispatch table from a method dictionary.\n\n\n"
      },
      "after": "e3dd080f07080317",
      "date": 1641032374224
    },
    {
      "type": "add",
      "id": "5f8bfbbef204207e",
      "item": {
        "type": "markdown",
        "id": "5f8bfbbef204207e",
        "text": "The loader expects data in odd numbered columns and control characters in the others.  '�' marks the initial program counter; '\u001a' the initial\ndata pointer.  (Use cut and paste to type these characters.)\n\nThe debugger will single step with each press of the space bar.  Press and hold 'r' to run at high speed.  'q' will quit.  (Collapse or frame\nall windows to the bottom inch of the display before running.  Redraw screen when finished.)\n\n\n"
      },
      "after": "d10e4e8a3203d1c7",
      "date": 1641032402264
    },
    {
      "type": "add",
      "id": "77e30eba0b12ace2",
      "item": {
        "type": "markdown",
        "id": "77e30eba0b12ace2",
        "text": "TestEngine -- An experimental biota engine with twelve instructions. Class methods answer sample programs written for this engine. \n\n\n"
      },
      "after": "5f8bfbbef204207e",
      "date": 1641032415630
    },
    {
      "type": "add",
      "id": "83e522736d6848a3",
      "item": {
        "type": "markdown",
        "id": "83e522736d6848a3",
        "text": "The instructions 't' and 'u' turn right and left.  's' and 'b' step forward and backward.  'd' and 'r' duplicate data, 'r' more aggressively. 'c' clears data to blank.  'f' faces the data pointer at the nearest data while 'h' alignes it with the program counter.  'g' combines 'f' and 's'.  'a' and 'q' are obsolete and should be avoided.\n\n"
      },
      "after": "77e30eba0b12ace2",
      "date": 1641032435515
    },
    {
      "type": "add",
      "id": "ea5b315b2b331434",
      "item": {
        "type": "markdown",
        "id": "ea5b315b2b331434",
        "text": "New Methods\n-----------\n\nPoint offset -- Computes the byte offset in a linear memory (i.e. a string) corresponding to a given point."
      },
      "after": "83e522736d6848a3",
      "date": 1641032443533
    },
    {
      "type": "edit",
      "id": "2a79349bbe462fef",
      "item": {
        "type": "markdown",
        "id": "2a79349bbe462fef",
        "text": "New Classes\n-----------\n\nBiota -- A two dimensional space, addressed by points, which stores the characters that are biota programs and data.  Class methods define the size of the space and a single character, called empty, that marks unused cells.\n"
      },
      "date": 1641045848422
    },
    {
      "type": "edit",
      "id": "662dd693a001794f",
      "item": {
        "type": "markdown",
        "id": "662dd693a001794f",
        "text": "DisplayBiota -- A kind of biota that echos it's modifications the computer display.\n\n\n"
      },
      "date": 1641045893141
    },
    {
      "type": "edit",
      "id": "5f8bfbbef204207e",
      "item": {
        "type": "markdown",
        "id": "5f8bfbbef204207e",
        "text": "The loader expects data in odd numbered columns and control characters in the others.  '�' marks the initial program counter; '\u001a' the initial data pointer.  (Use cut and paste to type these characters.)\n\nThe debugger will single step with each press of the space bar.  Press and hold 'r' to run at high speed.  'q' will quit.  (Collapse or frame\nall windows to the bottom inch of the display before running.  Redraw screen when finished.)\n"
      },
      "date": 1641046286021
    },
    {
      "type": "edit",
      "id": "5f8bfbbef204207e",
      "item": {
        "type": "markdown",
        "id": "5f8bfbbef204207e",
        "text": "The loader expects data in odd numbered columns and control characters in the others.  '�' marks the initial program counter; '\u001a' the initial data pointer.  (Use cut and paste to type these characters.)\n\nThe debugger will single step with each press of the space bar.  Press and hold 'r' to run at high speed.  'q' will quit.  (Collapse or frame all windows to the bottom inch of the display before running.  Redraw screen when finished.)\n"
      },
      "date": 1641046295753
    }
  ]
}