{
  "title": "Java Wiki Content Fetcher",
  "story": [
    {
      "type": "paragraph",
      "id": "588fdbd8946e70f0",
      "text": "Read federated wiki pages from the internet with Java. Uses the Jackson library for JSON (locally downloaded jars) and the built-in HttpClient from JDK 11+. [https://github.com/jasonrclark/fedwiki-java github] "
    },
    {
      "type": "paragraph",
      "id": "907a2e1ca3609f6c",
      "text": "This Java code is a simple command-line application that interacts with a web service to fetch and display content from a wiki-like platform."
    },
    {
      "type": "paragraph",
      "id": "e6eeb698f35cd7cb",
      "text": "Let's go through the code step by step:\n\n"
    },
    {
      "type": "paragraph",
      "id": "29648ba8886cb94b",
      "text": "1. The code imports necessary Java classes and libraries for networking, input/output, and JSON processing."
    },
    {
      "type": "paragraph",
      "id": "1b5b3f2434b45feb",
      "text": "2. The Main class is defined, which serves as the entry point for the application."
    },
    {
      "type": "paragraph",
      "id": "1503943ac568ec02",
      "text": "3. The main method is the starting point of the program. It accepts command-line arguments but primarily uses the args array to determine the value of the slug variable. If an argument is provided, it assigns the second argument to slug. Otherwise, it uses a default value."
    },
    {
      "type": "paragraph",
      "id": "7fe4948951acbc6c",
      "text": "4. The fetch method is called to retrieve the initial page based on the context and slug values. This method constructs an HTTP request using the provided URL and sends it to the server using the HttpClient class. The response is received as a JSON string, which is then deserialized into a Page object using the Jackson library's ObjectMapper."
    },
    {
      "type": "paragraph",
      "id": "348bdea58724c018",
      "text": "5. A Scanner object is created to read user input from the command line."
    },
    {
      "type": "paragraph",
      "id": "0ddd9b6cd19ab68f",
      "text": "6. A loop is started to display the content of each item in the result.story list. For each item, it prints the text field, reads a line of user input, and performs different actions based on the entered command."
    },
    {
      "type": "markdown",
      "id": "1579df6f9817a2b2",
      "text": "* If the entered command starts with \"e\", the program exits."
    },
    {
      "type": "markdown",
      "id": "e79f57f44cc5dc4d",
      "text": "* If the entered command starts with \"l\", it fetches a new page using the first link in the item's links list and breaks out of the loop to display the new page."
    },
    {
      "type": "paragraph",
      "id": "5486792450118201",
      "text": "7. The fetch method constructs an HTTP request, sends it to the server, and receives the response. If the response status code is not 200 (OK), an empty Page object is returned."
    },
    {
      "type": "paragraph",
      "id": "85b5202a72990a79",
      "text": "8. The deserialized Page object is then returned."
    },
    {
      "type": "paragraph",
      "id": "944ea11a41265235",
      "text": "9. The Page class is defined as a representation of a wiki page. It has fields for the page's title, a list of Item objects representing the content, and a list of Action objects representing journal entries."
    },
    {
      "type": "paragraph",
      "id": "ea5d936d32a6be39",
      "text": "10. The context() method in the Page class returns a list of unique sites mentioned in the journal entries."
    },
    {
      "type": "paragraph",
      "id": "84ed63c06daa79ff",
      "text": "11. The Item class represents an item within a page. It has fields for the item's type, ID, title, and text. It also provides a links() method that uses a regular expression pattern to extract links from the text field. It returns a list of slugs (formatted strings) extracted from the links."
    },
    {
      "type": "paragraph",
      "id": "a09a39d6ee913e0d",
      "text": "12. The println() method in the Item class prints the text of the item to the console."
    },
    {
      "type": "paragraph",
      "id": "31aebec80080347f",
      "text": "13. The Action class represents an action or event related to a page. It has fields for the action's type, ID, date, associated item, and site."
    },
    {
      "type": "paragraph",
      "id": "37e9e61cbd358fc5",
      "text": "In summary, this Java code fetches content from a web service, displays it in the console, and allows the user to navigate between different pages by following links within the content."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Java Wiki Content Fetcher",
        "story": []
      },
      "date": 1684991781169
    },
    {
      "id": "588fdbd8946e70f0",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "588fdbd8946e70f0",
        "text": "Read federated wiki pages from the internet with Java. Uses the Jackson library for JSON (locally downloaded jars) and the built-in HttpClient from JDK 11+."
      },
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991785447
    },
    {
      "id": "907a2e1ca3609f6c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "907a2e1ca3609f6c",
        "text": "This Java code is a simple command-line application that interacts with a web service to fetch and display content from a wiki-like platform."
      },
      "after": "588fdbd8946e70f0",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991788878
    },
    {
      "id": "e6eeb698f35cd7cb",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e6eeb698f35cd7cb",
        "text": "Let's go through the code step by step:\n\n"
      },
      "after": "907a2e1ca3609f6c",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991792227
    },
    {
      "id": "29648ba8886cb94b",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "29648ba8886cb94b",
        "text": "1. The code imports necessary Java classes and libraries for networking, input/output, and JSON processing."
      },
      "after": "e6eeb698f35cd7cb",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991794853
    },
    {
      "id": "1b5b3f2434b45feb",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1b5b3f2434b45feb",
        "text": "2. The Main class is defined, which serves as the entry point for the application."
      },
      "after": "29648ba8886cb94b",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991798051
    },
    {
      "id": "1503943ac568ec02",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1503943ac568ec02",
        "text": "3. The main method is the starting point of the program. It accepts command-line arguments but primarily uses the args array to determine the value of the slug variable. If an argument is provided, it assigns the second argument to slug. Otherwise, it uses a default value."
      },
      "after": "1b5b3f2434b45feb",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991804542
    },
    {
      "id": "7fe4948951acbc6c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7fe4948951acbc6c",
        "text": "4. The fetch method is called to retrieve the initial page based on the context and slug values. This method constructs an HTTP request using the provided URL and sends it to the server using the HttpClient class. The response is received as a JSON string, which is then deserialized into a Page object using the Jackson library's ObjectMapper."
      },
      "after": "1503943ac568ec02",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991808462
    },
    {
      "id": "348bdea58724c018",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "348bdea58724c018",
        "text": "5. A Scanner object is created to read user input from the command line."
      },
      "after": "7fe4948951acbc6c",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991814469
    },
    {
      "id": "0ddd9b6cd19ab68f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "0ddd9b6cd19ab68f",
        "text": "6. A loop is started to display the content of each item in the result.story list. For each item, it prints the text field, reads a line of user input, and performs different actions based on the entered command."
      },
      "after": "348bdea58724c018",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991824500
    },
    {
      "id": "1579df6f9817a2b2",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "1579df6f9817a2b2",
        "text": "* If the entered command starts with \"e\", the program exits."
      },
      "after": "0ddd9b6cd19ab68f",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991828982
    },
    {
      "id": "e79f57f44cc5dc4d",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "e79f57f44cc5dc4d",
        "text": "* If the entered command starts with \"l\", it fetches a new page using the first link in the item's links list and breaks out of the loop to display the new page."
      },
      "after": "1579df6f9817a2b2",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991832394
    },
    {
      "id": "5486792450118201",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5486792450118201",
        "text": "7. The fetch method constructs an HTTP request, sends it to the server, and receives the response. If the response status code is not 200 (OK), an empty Page object is returned."
      },
      "after": "e79f57f44cc5dc4d",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991834993
    },
    {
      "id": "85b5202a72990a79",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "85b5202a72990a79",
        "text": "8. The deserialized Page object is then returned."
      },
      "after": "5486792450118201",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991838347
    },
    {
      "id": "944ea11a41265235",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "944ea11a41265235",
        "text": "9. The Page class is defined as a representation of a wiki page. It has fields for the page's title, a list of Item objects representing the content, and a list of Action objects representing journal entries."
      },
      "after": "85b5202a72990a79",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991843919
    },
    {
      "id": "ea5d936d32a6be39",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ea5d936d32a6be39",
        "text": "10. The context() method in the Page class returns a list of unique sites mentioned in the journal entries."
      },
      "after": "944ea11a41265235",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991847701
    },
    {
      "id": "84ed63c06daa79ff",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "84ed63c06daa79ff",
        "text": "11. The Item class represents an item within a page. It has fields for the item's type, ID, title, and text. It also provides a links() method that uses a regular expression pattern to extract links from the text field. It returns a list of slugs (formatted strings) extracted from the links."
      },
      "after": "ea5d936d32a6be39",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991852929
    },
    {
      "id": "a09a39d6ee913e0d",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a09a39d6ee913e0d",
        "text": "12. The println() method in the Item class prints the text of the item to the console."
      },
      "after": "84ed63c06daa79ff",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991857154
    },
    {
      "id": "31aebec80080347f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "31aebec80080347f",
        "text": "13. The Action class represents an action or event related to a page. It has fields for the action's type, ID, date, associated item, and site."
      },
      "after": "a09a39d6ee913e0d",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991859637
    },
    {
      "id": "37e9e61cbd358fc5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "37e9e61cbd358fc5",
        "text": "In summary, this Java code fetches content from a web service, displays it in the console, and allows the user to navigate between different pages by following links within the content."
      },
      "after": "31aebec80080347f",
      "attribution": {
        "page": "2023-05-25"
      },
      "date": 1684991862531
    },
    {
      "type": "edit",
      "id": "588fdbd8946e70f0",
      "item": {
        "type": "paragraph",
        "id": "588fdbd8946e70f0",
        "text": "Read federated wiki pages from the internet with Java. Uses the Jackson library for JSON (locally downloaded jars) and the built-in HttpClient from JDK 11+. [https://github.com/jasonrclark/fedwiki-java github] "
      },
      "date": 1684991895241
    }
  ]
}