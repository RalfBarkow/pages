{
  "title": "2022-07-11",
  "story": [
    {
      "type": "paragraph",
      "id": "babdebf1bddc17c5",
      "text": "The history of patterns in software development. By Rainer Grimm. [https://www.heise.de/blog/Die-Geschichte-der-Patterns-in-der-Softwareentwicklung-7166631.html heise online] (de)"
    },
    {
      "type": "paragraph",
      "id": "7134fd4ba937c637",
      "text": "Ward Cunningham and Kent Beck were inspired by the ideas of Christoph Alexander and applied them to software development. In 1987, they published their book *Using Pattern Languages for Object-Oriented Programs* [https://c2.com/doc/oopsla87.html c2], a pattern language designed to simplify the development of user interfaces in Smalltalk. They created the first pattern system for designing user interfaces. Here are their patterns: "
    },
    {
      "type": "markdown",
      "id": "699ef000cda2c699",
      "text": "1. Window Per Task: a separate window for each task\n1. Few Panes Per Window: Development of a separate pane in the window for each view of the task\n1. Standard Panes: Designing functional panes according to the same principles\n1. Short Menus \n1. Nouns and Verbs: Action instructions (verbs) belong in the menu"
    },
    {
      "type": "paragraph",
      "id": "8d8d0e289e039d37",
      "text": "[…] The Hillside Group […]"
    },
    {
      "type": "reference",
      "id": "70e8ba54fc92178f",
      "site": "wellspring.fed.wiki",
      "slug": "takashi-iba",
      "title": "Takashi Iba",
      "text": "Takashi Iba is a Professor at Faculty of Policy Management as well as Graduate School of Media and Governance, Keio University. He is a board member of The Hillside Group, which promotes the use of patterns and pattern languages and also sponsors several conferences and publications on pattern languages; he is also the president of CreativeShift, Inc., which provides goods to utilize pattern languages and services to support creating new pattern languages."
    },
    {
      "type": "paragraph",
      "id": "12ae1ef4019a0630",
      "text": "Takashi Iba, [https://drive.google.com/file/d/1QXk3s3JHl5TtykKFsJknNFTMCOFF1MTC/view Illuminating Egoless Creation with Theories of Autopoietic Systems]"
    },
    {
      "type": "reference",
      "id": "b24263e048938267",
      "site": "nick.becoming.ustawi.wiki",
      "slug": "emergent-autopoiesis",
      "title": "Emergent Autopoiesis",
      "text": "Two Chilean biologists coined the word 'autopoiesis' to describe the fundamental nature of organic systems, [[Autopoietic Systems]] that were 'self-creating'. Contrast this with artificial systems, systems that are mechanical in nature, what be called 'allopoietic systems', the 'other creating' of a factory assembly line."
    },
    {
      "type": "pagefold",
      "id": "72cc28b8e3dc2a21",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "a1e8a6f04d6bfe57",
      "text": "Kent Beck and Ward Cunningham  presented these patterns to a team of application specialists writing a specification for a special purpose programming environment. Without detailed understanding of any of Smalltalk's interface mechanisms (MVC for example) they were able to specify very reasonable interfaces after one day of practice [Cunn87]. Note that we sorted and numbered the patterns. Pattern 1 must be addressed first. It decides what windows will be available and what will be done in them. Next patterns 2 and 3 divide each window into panes. Finally patterns 4 and 5 determine what selections and actions will do within each pane. This order was derived from the topology of influences between each pattern. "
    },
    {
      "type": "paragraph",
      "id": "d5fa848e54c46526",
      "text": "⇒ [[Collect Low-Level Protocol]]"
    },
    {
      "type": "graphviz",
      "id": "20068a19c27777fb",
      "text": "DOT FROM lambda-browsing"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-07-11",
        "story": []
      },
      "date": 1657533351232
    },
    {
      "item": {
        "type": "factory",
        "id": "babdebf1bddc17c5"
      },
      "id": "babdebf1bddc17c5",
      "type": "add",
      "date": 1657533353952
    },
    {
      "type": "edit",
      "id": "babdebf1bddc17c5",
      "item": {
        "type": "paragraph",
        "id": "babdebf1bddc17c5",
        "text": "The history of patterns in software development"
      },
      "date": 1657533362672
    },
    {
      "item": {
        "type": "factory",
        "id": "3d2a92045d202e8a"
      },
      "id": "3d2a92045d202e8a",
      "type": "add",
      "after": "babdebf1bddc17c5",
      "date": 1657533377031
    },
    {
      "type": "remove",
      "id": "3d2a92045d202e8a",
      "date": 1657533379665
    },
    {
      "type": "edit",
      "id": "babdebf1bddc17c5",
      "item": {
        "type": "paragraph",
        "id": "babdebf1bddc17c5",
        "text": "The history of patterns in software development. By Rainer Grimm\nheise online"
      },
      "date": 1657533387334
    },
    {
      "type": "edit",
      "id": "babdebf1bddc17c5",
      "item": {
        "type": "paragraph",
        "id": "babdebf1bddc17c5",
        "text": "The history of patterns in software development. By Rainer Grimm. [https://www.heise.de/blog/Die-Geschichte-der-Patterns-in-der-Softwareentwicklung-7166631.html heise online]"
      },
      "date": 1657533413802
    },
    {
      "type": "edit",
      "id": "babdebf1bddc17c5",
      "item": {
        "type": "paragraph",
        "id": "babdebf1bddc17c5",
        "text": "The history of patterns in software development. By Rainer Grimm. [https://www.heise.de/blog/Die-Geschichte-der-Patterns-in-der-Softwareentwicklung-7166631.html heise online] (de)"
      },
      "date": 1657533419568
    },
    {
      "item": {
        "type": "factory",
        "id": "7134fd4ba937c637"
      },
      "id": "7134fd4ba937c637",
      "type": "add",
      "after": "babdebf1bddc17c5",
      "date": 1657533747999
    },
    {
      "type": "edit",
      "id": "7134fd4ba937c637",
      "item": {
        "type": "paragraph",
        "id": "7134fd4ba937c637",
        "text": "Ward Cunningham and Kent Beck were inspired by the ideas of Christoph Alexander and applied them to software development. In 1987, they published their book Using Pattern Languages for Object-Oriented Programs, a pattern language designed to simplify the development of user interfaces in Smalltalk. They created the first pattern system for designing user interfaces. Here are four of their patterns: "
      },
      "date": 1657533751539
    },
    {
      "type": "edit",
      "id": "7134fd4ba937c637",
      "item": {
        "type": "paragraph",
        "id": "7134fd4ba937c637",
        "text": "Ward Cunningham and Kent Beck were inspired by the ideas of Christoph Alexander and applied them to software development. In 1987, they published their book *Using Pattern Languages for Object-Oriented Programs* [https://c2.com/doc/oopsla87.html c2], a pattern language designed to simplify the development of user interfaces in Smalltalk. They created the first pattern system for designing user interfaces. Here are four of their patterns: "
      },
      "date": 1657533815688
    },
    {
      "item": {
        "type": "factory",
        "id": "699ef000cda2c699"
      },
      "id": "699ef000cda2c699",
      "type": "add",
      "after": "7134fd4ba937c637",
      "date": 1657535207766
    },
    {
      "type": "edit",
      "id": "699ef000cda2c699",
      "item": {
        "type": "markdown",
        "id": "699ef000cda2c699",
        "text": "1. Window-per-Task: Ein separates Fenster für jede Aufgabe\n    Few-Panes: Entwicklung eines separaten Bereichs im Fenster für jede Ansicht der Aufgabe\n    Standard-Panes: Gestaltung der Funktionsbereiche nach den gleichen Prinzipien\n    Nouns and Verbs: Handlungsanweisungen (Verben) gehören ins Menü"
      },
      "date": 1657535216508
    },
    {
      "type": "edit",
      "id": "699ef000cda2c699",
      "item": {
        "type": "markdown",
        "id": "699ef000cda2c699",
        "text": "1. Window-per-task: a separate window for each task\n1. Few-Panes: Development of a separate pane in the window for each view of the task\n1. Standard-Panes: Designing functional panes according to the same principles\n1. Nouns and Verbs: Action instructions (verbs) belong in the menu"
      },
      "date": 1657535238521
    },
    {
      "type": "edit",
      "id": "7134fd4ba937c637",
      "item": {
        "type": "paragraph",
        "id": "7134fd4ba937c637",
        "text": "Ward Cunningham and Kent Beck were inspired by the ideas of Christoph Alexander and applied them to software development. In 1987, they published their book *Using Pattern Languages for Object-Oriented Programs* [https://c2.com/doc/oopsla87.html c2], a pattern language designed to simplify the development of user interfaces in Smalltalk. They created the first pattern system for designing user interfaces. Here are their patterns: "
      },
      "date": 1657564657837
    },
    {
      "type": "edit",
      "id": "699ef000cda2c699",
      "item": {
        "type": "markdown",
        "id": "699ef000cda2c699",
        "text": "1. Window Per Task: a separate window for each task\n1. Few-Panes: Development of a separate pane in the window for each view of the task\n1. Standard-Panes: Designing functional panes according to the same principles\n1. Nouns and Verbs: Action instructions (verbs) belong in the menu"
      },
      "date": 1657564667028
    },
    {
      "type": "edit",
      "id": "699ef000cda2c699",
      "item": {
        "type": "markdown",
        "id": "699ef000cda2c699",
        "text": "1. Window Per Task: a separate window for each task\n1. Few Panes Per Window: Development of a separate pane in the window for each view of the task\n1. Standard-Panes: Designing functional panes according to the same principles\n1. Nouns and Verbs: Action instructions (verbs) belong in the menu"
      },
      "date": 1657564675691
    },
    {
      "type": "edit",
      "id": "699ef000cda2c699",
      "item": {
        "type": "markdown",
        "id": "699ef000cda2c699",
        "text": "1. Window Per Task: a separate window for each task\n1. Few Panes Per Window: Development of a separate pane in the window for each view of the task\n1. Standard Panes: Designing functional panes according to the same principles\n1. Nouns and Verbs: Action instructions (verbs) belong in the menu"
      },
      "date": 1657564684983
    },
    {
      "type": "edit",
      "id": "699ef000cda2c699",
      "item": {
        "type": "markdown",
        "id": "699ef000cda2c699",
        "text": "1. Window Per Task: a separate window for each task\n1. Few Panes Per Window: Development of a separate pane in the window for each view of the task\n1. Standard Panes: Designing functional panes according to the same principles\n1. Short Menus \n1. Nouns and Verbs: Action instructions (verbs) belong in the menu"
      },
      "date": 1657564700017
    },
    {
      "item": {
        "type": "factory",
        "id": "8d8d0e289e039d37"
      },
      "id": "8d8d0e289e039d37",
      "type": "add",
      "after": "699ef000cda2c699",
      "date": 1657565217810
    },
    {
      "type": "edit",
      "id": "8d8d0e289e039d37",
      "item": {
        "type": "paragraph",
        "id": "8d8d0e289e039d37",
        "text": "[…]"
      },
      "date": 1657565221885
    },
    {
      "type": "edit",
      "id": "8d8d0e289e039d37",
      "item": {
        "type": "paragraph",
        "id": "8d8d0e289e039d37",
        "text": "[…] The Hillside Group […]"
      },
      "date": 1657565240964
    },
    {
      "item": {
        "type": "factory",
        "id": "70e8ba54fc92178f"
      },
      "id": "70e8ba54fc92178f",
      "type": "add",
      "after": "8d8d0e289e039d37",
      "date": 1657565245688
    },
    {
      "type": "edit",
      "id": "70e8ba54fc92178f",
      "item": {
        "type": "reference",
        "id": "70e8ba54fc92178f",
        "site": "wellspring.fed.wiki",
        "slug": "takashi-iba",
        "title": "Takashi Iba",
        "text": "Takashi Iba is a Professor at Faculty of Policy Management as well as Graduate School of Media and Governance, Keio University. He is a board member of The Hillside Group, which promotes the use of patterns and pattern languages and also sponsors several conferences and publications on pattern languages; he is also the president of CreativeShift, Inc., which provides goods to utilize pattern languages and services to support creating new pattern languages."
      },
      "date": 1657565248864
    },
    {
      "item": {
        "type": "factory",
        "id": "a1e8a6f04d6bfe57"
      },
      "id": "a1e8a6f04d6bfe57",
      "type": "add",
      "after": "70e8ba54fc92178f",
      "date": 1657614570695
    },
    {
      "type": "edit",
      "id": "a1e8a6f04d6bfe57",
      "item": {
        "type": "paragraph",
        "id": "a1e8a6f04d6bfe57",
        "text": "Kent Beck and Ward Cunningham"
      },
      "date": 1657614579096
    },
    {
      "type": "edit",
      "id": "a1e8a6f04d6bfe57",
      "item": {
        "type": "paragraph",
        "id": "a1e8a6f04d6bfe57",
        "text": "Kent Beck and Ward Cunningham  presented these patterns to a team of application specialists writing a specification for a special purpose programming environment. Without detailed understanding of any of Smalltalk's interface mechanisms (MVC for example) they were able to specify very reasonable interfaces after one day of practice [Cunn87]. Note that we sorted and numbered the patterns. Pattern 1 must be addressed first. It decides what windows will be available and what will be done in them. Next patterns 2 and 3 divide each window into panes. Finally patterns 4 and 5 determine what selections and actions will do within each pane. This order was derived from the topology of influences between each pattern. "
      },
      "date": 1657614600892
    },
    {
      "item": {
        "type": "factory",
        "id": "5f062b1f4b7666e0"
      },
      "id": "5f062b1f4b7666e0",
      "type": "add",
      "after": "a1e8a6f04d6bfe57",
      "date": 1657615465515
    },
    {
      "type": "edit",
      "id": "5f062b1f4b7666e0",
      "item": {
        "type": "paragraph",
        "id": "5f062b1f4b7666e0",
        "text": "We have begun writing a complete pattern language for object-oriented programming. An example from this language is the pattern entitled Collect Low-level Protocol. Here it is in abbreviated form: "
      },
      "date": 1657615468325
    },
    {
      "type": "edit",
      "id": "5f062b1f4b7666e0",
      "item": {
        "type": "paragraph",
        "id": "5f062b1f4b7666e0",
        "text": "We have begun writing a complete pattern language for object-oriented programming. An example from this language is the pattern entitled [[Collect Low-Level Protocol]]. Here it is in abbreviated form: "
      },
      "date": 1657615636523
    },
    {
      "id": "12ae1ef4019a0630",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "12ae1ef4019a0630",
        "text": "Takashi Iba, [https://drive.google.com/file/d/1QXk3s3JHl5TtykKFsJknNFTMCOFF1MTC/view Illuminating Egoless Creation with Theories of Autopoietic Systems]"
      },
      "after": "70e8ba54fc92178f",
      "date": 1657615939360
    },
    {
      "item": {
        "type": "factory",
        "id": "b24263e048938267"
      },
      "id": "b24263e048938267",
      "type": "add",
      "after": "5f062b1f4b7666e0",
      "date": 1657615947404
    },
    {
      "type": "edit",
      "id": "b24263e048938267",
      "item": {
        "type": "reference",
        "id": "b24263e048938267",
        "site": "nick.becoming.ustawi.wiki",
        "slug": "emergent-autopoiesis",
        "title": "Emergent Autopoiesis",
        "text": "Two Chilean biologists coined the word 'autopoiesis' to describe the fundamental nature of organic systems, [[Autopoietic Systems]] that were 'self-creating'. Contrast this with artificial systems, systems that are mechanical in nature, what be called 'allopoietic systems', the 'other creating' of a factory assembly line."
      },
      "date": 1657615952518
    },
    {
      "id": "b24263e048938267",
      "type": "move",
      "order": [
        "babdebf1bddc17c5",
        "7134fd4ba937c637",
        "699ef000cda2c699",
        "8d8d0e289e039d37",
        "70e8ba54fc92178f",
        "12ae1ef4019a0630",
        "b24263e048938267",
        "a1e8a6f04d6bfe57",
        "5f062b1f4b7666e0"
      ],
      "date": 1657615958724
    },
    {
      "item": {
        "type": "factory",
        "id": "72cc28b8e3dc2a21"
      },
      "id": "72cc28b8e3dc2a21",
      "type": "add",
      "after": "5f062b1f4b7666e0",
      "date": 1657615963255
    },
    {
      "type": "edit",
      "id": "72cc28b8e3dc2a21",
      "item": {
        "type": "pagefold",
        "id": "72cc28b8e3dc2a21",
        "text": "~"
      },
      "date": 1657615967906
    },
    {
      "id": "72cc28b8e3dc2a21",
      "type": "move",
      "order": [
        "babdebf1bddc17c5",
        "7134fd4ba937c637",
        "699ef000cda2c699",
        "8d8d0e289e039d37",
        "70e8ba54fc92178f",
        "12ae1ef4019a0630",
        "b24263e048938267",
        "72cc28b8e3dc2a21",
        "a1e8a6f04d6bfe57",
        "5f062b1f4b7666e0"
      ],
      "date": 1657615971665
    },
    {
      "item": {
        "type": "factory",
        "id": "af7868c921899bd7"
      },
      "id": "af7868c921899bd7",
      "type": "add",
      "after": "5f062b1f4b7666e0",
      "date": 1657616381859
    },
    {
      "type": "edit",
      "id": "af7868c921899bd7",
      "item": {
        "type": "markdown",
        "id": "af7868c921899bd7",
        "text": "> Once you have initially decomposed a system into objects [Objects from the User's World] and refined the objects [Engines and Holders] you need to begin collecting useful functionality that doesn't particularly fit into any single object. Often many objects need to communicate with low-level (bit- or byte-oriented) parts of the system. For example, external files can have complex or highly encoded formats that require substantial byte or even bit manipulation to interpret. Collect all necessary protocol for decoding file formats or any other particular low-level task into an object specifically designed for the purpose. Do so even if you might otherwise spread it around several other objects. Once you have done this you are ready to begin testing and refining your objects [Elegance through Debugging]. "
      },
      "date": 1657616385033
    },
    {
      "type": "fork",
      "date": 1657617766920
    },
    {
      "id": "5f062b1f4b7666e0",
      "type": "remove",
      "date": 1657617854935
    },
    {
      "id": "af7868c921899bd7",
      "type": "remove",
      "date": 1657617858152
    },
    {
      "item": {
        "type": "factory",
        "id": "d5fa848e54c46526"
      },
      "id": "d5fa848e54c46526",
      "type": "add",
      "after": "a1e8a6f04d6bfe57",
      "date": 1657617873067
    },
    {
      "type": "edit",
      "id": "d5fa848e54c46526",
      "item": {
        "type": "paragraph",
        "id": "d5fa848e54c46526",
        "text": "– [[Collect Low-Level Protocol]]"
      },
      "date": 1657617877620
    },
    {
      "type": "edit",
      "id": "d5fa848e54c46526",
      "item": {
        "type": "paragraph",
        "id": "d5fa848e54c46526",
        "text": "⇒ [[Collect Low-Level Protocol]]"
      },
      "date": 1657617897335
    },
    {
      "item": {
        "type": "factory",
        "id": "20068a19c27777fb"
      },
      "id": "20068a19c27777fb",
      "type": "add",
      "after": "d5fa848e54c46526",
      "date": 1657617900699
    },
    {
      "type": "edit",
      "id": "20068a19c27777fb",
      "item": {
        "type": "graphviz",
        "id": "20068a19c27777fb",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1657617909970
    }
  ]
}