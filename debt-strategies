{
  "title": "Debt Strategies",
  "story": [
    {
      "type": "paragraph",
      "id": "febd00ef816daa73",
      "text": "I have a pet theory that refactoring is more difficult in a polyglot microservice world and that accumulating technical debt as a competitive strategy is more dangerous than it has been or once was. I hope to flush out this idea with a list of particulars. Specifically, what makes refactoring hard and how do we accommodate?"
    },
    {
      "type": "paragraph",
      "id": "d6df46d710d72071",
      "text": "When old code has been written in a different language or framework that currently in use the rot accelerates as teams fear touching it."
    },
    {
      "type": "paragraph",
      "id": "8cd92bc310b564dc",
      "text": "Lack of familiarity with the codebase due to turnover or reorganization makes any modification scary."
    },
    {
      "type": "paragraph",
      "id": "f56d97068724e4f8",
      "text": "Teams are doing less refactoring as they go and hoping they’ll get to do it later after deadline, but then the next big thing that needs to ship happens."
    },
    {
      "type": "paragraph",
      "id": "7321ec822cc60a99",
      "text": "Refactoring is easier in microservices, it just requires certain things to be true and some discipline around rolling it out. Microservices allow you to change things in one place at a time. "
    },
    {
      "type": "paragraph",
      "id": "12d19bed7285676a",
      "text": "You want to change what kind of data gets passed into a service? great, add an endpoint that takes the new data structure and dark-launch it in the receiving service. You can then take your time switching the producing side, rolling it out slowly, double writing for a while, etc."
    },
    {
      "type": "paragraph",
      "id": "9071b2a22b5c8692",
      "text": "Things like protobuffers externally define data structures that define interfaces between services. In the long term the workflow forces you to be more explicit about this thinking."
    },
    {
      "type": "paragraph",
      "id": "4ae8fefb5c08d8c5",
      "text": "Polyglot microservice refactors can be harder because of the multivariate or multivector nature of them. The number of languages being one vector and the number of microservices being another vector. In a monolith there is no vectorization."
    },
    {
      "type": "paragraph",
      "id": "cfe002ed3bfdfaa3",
      "text": "Single language, shared ecosystem micorservices has gone very well with challenging improvements in a day because every service used the same config library that they modified to pull values out of a repository. Yes, toil, but not risky, error prone work."
    },
    {
      "type": "paragraph",
      "id": "0ae91ca333999191",
      "text": "With all services in a monorepo changes to shared data structures could be done in one combo pull request. However, with explicit separation there is procedural value in being forced to introduce the change into different repos more deliberately."
    },
    {
      "type": "paragraph",
      "id": "52d54cc4df3a81f4",
      "text": "One is more likely to delete code in a service oriented infrastructure because one can just shut down a service entirely rather than doing some advanced refactoring maneuvers to try and identify which code and tests can be dumped."
    },
    {
      "type": "paragraph",
      "id": "8bdcec89233e4e5b",
      "text": "Externalizing data structures helps refactoring and more importantly deploying refactors safely to production."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Debt Strategies",
        "story": []
      },
      "date": 1572393003309
    },
    {
      "item": {
        "type": "factory",
        "id": "febd00ef816daa73"
      },
      "id": "febd00ef816daa73",
      "type": "add",
      "date": 1572393012186
    },
    {
      "type": "edit",
      "id": "febd00ef816daa73",
      "item": {
        "type": "paragraph",
        "id": "febd00ef816daa73",
        "text": "I have a pet theory that refactoring is more difficult in a polyglot microservice world and that accumulating technical debt as a competitive strategy is more dangerous than it has been or once was. I hope to flush out this idea with a list of particulars. Specifically, what makes refactoring hard and how do we accommodate?"
      },
      "date": 1572393170646
    },
    {
      "type": "add",
      "id": "d6df46d710d72071",
      "item": {
        "type": "paragraph",
        "id": "d6df46d710d72071",
        "text": "Cases where old code written in a different language or framework that currently in use. Code rot accelerates when teams are increasingly fearful to touch it."
      },
      "after": "febd00ef816daa73",
      "date": 1572393358734
    },
    {
      "type": "edit",
      "id": "d6df46d710d72071",
      "item": {
        "type": "paragraph",
        "id": "d6df46d710d72071",
        "text": "When old code has been written in a different language or framework that currently in use the rot accelerates when teams fear touching it."
      },
      "date": 1572393425907
    },
    {
      "type": "edit",
      "id": "d6df46d710d72071",
      "item": {
        "type": "paragraph",
        "id": "d6df46d710d72071",
        "text": "When old code has been written in a different language or framework that currently in use the rot accelerates as teams fear touching it."
      },
      "date": 1572393445883
    },
    {
      "type": "add",
      "id": "8cd92bc310b564dc",
      "item": {
        "type": "paragraph",
        "id": "8cd92bc310b564dc",
        "text": "Lack of familiarity with the codebase due to turnover or reorganization makes any modification scary."
      },
      "after": "d6df46d710d72071",
      "date": 1572393641785
    },
    {
      "type": "add",
      "id": "f56d97068724e4f8",
      "item": {
        "type": "paragraph",
        "id": "f56d97068724e4f8",
        "text": "Teams are doing less refactoring as they go and hoping they’ll get to do it later after deadline, but then the next big thing that needs to ship happens."
      },
      "after": "8cd92bc310b564dc",
      "date": 1572393717297
    },
    {
      "type": "add",
      "id": "7321ec822cc60a99",
      "item": {
        "type": "paragraph",
        "id": "7321ec822cc60a99",
        "text": "Refactoring is easier in microservices, it just requires certain things to be true and some discipline around rolling it out"
      },
      "after": "f56d97068724e4f8",
      "date": 1572393767395
    },
    {
      "type": "edit",
      "id": "7321ec822cc60a99",
      "item": {
        "type": "paragraph",
        "id": "7321ec822cc60a99",
        "text": "Refactoring is easier in microservices, it just requires certain things to be true and some discipline around rolling it out. Microservices allow you to change things in one place at a time. "
      },
      "date": 1572393879931
    },
    {
      "type": "add",
      "id": "12d19bed7285676a",
      "item": {
        "type": "paragraph",
        "id": "12d19bed7285676a",
        "text": "You want to change what kind of data gets passed into a service? great, add an endpoint that takes the new data structure and dark-launch it in the receiving service. You can then take your time switching the producing side, rolling it out slowly, double writing for a while, etc."
      },
      "after": "7321ec822cc60a99",
      "date": 1572393902100
    },
    {
      "type": "add",
      "id": "9071b2a22b5c8692",
      "item": {
        "type": "paragraph",
        "id": "9071b2a22b5c8692",
        "text": "Things like protobuffers externally define data structures that define interfaces between services. In the long term the workflow forces you to be more explicit about this thinking."
      },
      "after": "12d19bed7285676a",
      "date": 1572394048664
    },
    {
      "type": "add",
      "id": "4ae8fefb5c08d8c5",
      "item": {
        "type": "paragraph",
        "id": "4ae8fefb5c08d8c5",
        "text": "Polyglot microservice refactors can be harder because of the multivariate or multivector nature of them. The number of languages being one vector and the number of microservices being another vector. In a monolith there is no vectorization."
      },
      "after": "9071b2a22b5c8692",
      "date": 1572394308929
    },
    {
      "type": "add",
      "id": "cfe002ed3bfdfaa3",
      "item": {
        "type": "paragraph",
        "id": "cfe002ed3bfdfaa3",
        "text": "Single language, shared ecosystem micorservices has gone very well with challenging improvements in a day because every service used the same config library that they modified to pull values out of a repository. Yes, toil, but not risky, error prone work."
      },
      "after": "4ae8fefb5c08d8c5",
      "date": 1572394818322
    },
    {
      "type": "add",
      "id": "0ae91ca333999191",
      "item": {
        "type": "paragraph",
        "id": "0ae91ca333999191",
        "text": "With all services in a monorepo changes to shared data structures could be done in one combo pull request. However, with explicit separation there is procedural value in being forced to introduce the change into different repos more deliberately."
      },
      "after": "cfe002ed3bfdfaa3",
      "date": 1572395064484
    },
    {
      "type": "add",
      "id": "52d54cc4df3a81f4",
      "item": {
        "type": "paragraph",
        "id": "52d54cc4df3a81f4",
        "text": "One is more likely to delete code in a service oriented infrastructure because one can just shut down a service entirely rather than doing some advanced refactoring maneuvers to try and identify which code and tests can be dumped."
      },
      "after": "0ae91ca333999191",
      "date": 1572395243848
    },
    {
      "type": "add",
      "id": "8bdcec89233e4e5b",
      "item": {
        "type": "paragraph",
        "id": "8bdcec89233e4e5b",
        "text": "Externalizing data structures helps refactoring and more importantly deploying refactors safely to production."
      },
      "after": "52d54cc4df3a81f4",
      "date": 1572395348205
    },
    {
      "type": "fork",
      "site": "debt.ward.bay.wiki.org",
      "date": 1650519284148
    }
  ]
}