{
  "title": "Jim Shore",
  "story": [
    {
      "type": "html",
      "text": "Welcome visitors--as of today (Apr 29, 2008) it's been many years since I participated in Ward's Wiki.  I offer the below as a purely historical curiosity.  It's not necessarily representative of my views today--in fact, some of it's pretty embarrassing to me now.",
      "id": "0da137f741655ab50a459ef1767ad9b8"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "mailto:jshore@titanium-it.com",
      "id": "4f3d51e13761ed64be68eb13bbcd59ee"
    },
    {
      "type": "html",
      "text": "\nI have a new website and blog: [http://www.jamesshore.com www.jamesshore.com]",
      "id": "a331d66cb0012b4c1107513a918b11a3"
    },
    {
      "type": "html",
      "text": "\nFormerly known as [[Jim Little]].  These days, I'm doing business as Titanium I.T. LLC (\"Making IT Profitable\"), helping companies improve the profitability of their software development efforts.  Although I started out as a programmer, focused entirely on technical issues, now I'm more interested in how software fits into the big picture--the difference between writing code and creating software that improves lives.  In the context of business, \"profitability\" is a nice, pithy way to say this.",
      "id": "742df59791f4d413b12cf6d515e55d9d"
    },
    {
      "type": "html",
      "text": "\nI haven't lost interest in technical issues... in fact, I think the foundation of software development is programming.  Writing code.  Design, requirements, testing; these are all inputs to the final end result of making software that has an impact.  Writing code poorly leads to poor results.  Writing it well leads to good results... but writing it \"well\" means more than making it work.  I believe programmers, business experts, and the rest of the development team all need to work together, intimately, in order to make truly great software.",
      "id": "dcdfc46948e8049a41ceeb7a6db33e4d"
    },
    {
      "type": "html",
      "text": "\nHere are some pages I've written along these lines.",
      "id": "ea1a28eaf404f257117435b9e53d88fd"
    },
    {
      "type": "html",
      "text": " [[Levels Of Software Success]]",
      "id": "fe3cf51e9e0faf261b6b19300b1d7356"
    },
    {
      "type": "html",
      "text": " [[Good Design]]",
      "id": "45dfa73628efa43419f3ab24abcbb039"
    },
    {
      "type": "html",
      "text": " [[Design Debt]]",
      "id": "ad495e7b26b7fba209e04360009ab80c"
    },
    {
      "type": "html",
      "text": "\nI'm particularly proud of [[Good Design]]--I've seen many attempts to define \"good design\" in the past, and they all get caught up in subjective discussions of \"truth and beauty.\"  I like to think my approach brings a new spin to the discussion.",
      "id": "bcac2be888a6a67ad9db0cb4dd692955"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "\nThe above was written March 2004.  The following is pretty old, but not so old that I want to rewrite it today.",
      "id": "9d30af647f478c45698feeba0a93f079"
    },
    {
      "type": "html",
      "text": "\nIf you're just looking for interesting pages that I've written, I consider each of these six pages my best of its category. I started these pages, and often didn't sign my work, but not everything unsigned is from me.",
      "id": "e0c90b899f84b3c8c171f2b8689275a3"
    },
    {
      "type": "html",
      "text": " [[Design Debt]]",
      "id": "ad495e7b26b7fba209e04360009ab80c"
    },
    {
      "type": "html",
      "text": " [[Behavioral Effect Of Metrics]]",
      "id": "1cad08592003116c31154e9fc15a6245"
    },
    {
      "type": "html",
      "text": " [[Commenting Challenge Response]]",
      "id": "9846df4c1bde15beac5d1f08c58a5195"
    },
    {
      "type": "html",
      "text": " [[Productivity Rant]]",
      "id": "22769140bbd0efa16bc0977c9b75d2b2"
    },
    {
      "type": "html",
      "text": " [[Design Patterns Considered Harmful]]",
      "id": "2f52fb615c53bd4707bd46b200aeb10a"
    },
    {
      "type": "html",
      "text": " [[Optimization Stories]]",
      "id": "c83fd32f9c6f256aeaf11658a21c521a"
    },
    {
      "type": "html",
      "text": "\nFor more of my writing, take a look at the \"New Stuff\" section (next) and the \"About Me\" section that follows.",
      "id": "945c6dd788915f3ef0cc2f220557f1f5"
    },
    {
      "type": "html",
      "text": "\nIf you'd rather learn about me by seeing what I like, scroll about halfway down the page, where you'll find favorite links and quotes by other authors.",
      "id": "5a916bc2e1811de37ec604d13287ded6"
    },
    {
      "type": "html",
      "text": "\nIf you'd like to leave me a message, scroll down to the very bottom of the page. I don't check it regularly, but I like getting it. Or send me an email if you want me to read it now. You'll see a link to my email at the very top of this page.",
      "id": "d8ef7b12dd3e24400dd4182af379e1bb"
    },
    {
      "type": "html",
      "text": "\nI've also added a picture of myself. Vanity is an important cause, so I'm glad to be able to contribute. That's at the very very very bottom. Consider yourself warned.",
      "id": "e9951c8d46190fb5906dbe9f265f59fc"
    },
    {
      "type": "html",
      "text": "\nShort warning about my sense of humor: When they were handing out the funny, I applied for \"clever and witty\" but all they had left was \"goofy.\" I do the best I can with what I've been given.",
      "id": "bc11dc1e1c5ffb30adfb8aa020365128"
    },
    {
      "type": "html",
      "text": "\nIf you're not at all interested in me, try [[Random Pages]]. It tends to be better reading anyway.",
      "id": "2484cadfd29c547be1812361c44da2b0"
    },
    {
      "type": "html",
      "text": "\nIf you're like me and think \"short and sweet\" is preferable to \"long and drawn out,\" pretend this is the end of the page. Thanks.",
      "id": "6ba4fae5438d7dd6893486d446077a3d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "<b>New stuff:</b>",
      "id": "65efeffe7cbbd5d9a984d91be31726fb"
    },
    {
      "type": "html",
      "text": " [[Breadth First Learning]]",
      "id": "99b4b7a0c510c89013e70e9d75c9cad2"
    },
    {
      "type": "html",
      "text": " [[Customers And Velocity]]",
      "id": "af09cb1e8e0a88e8371bc74f371fee07"
    },
    {
      "type": "html",
      "text": " [[Dont Call Me]]",
      "id": "8c98c1c0a69633d5c4f732af345f1803"
    },
    {
      "type": "html",
      "text": " [[Pair Programming Benefits]]",
      "id": "d59c59f4ab485badc35ab7e8e61521ca"
    },
    {
      "type": "html",
      "text": " [[Properties Of Good Languages]]",
      "id": "f94d54af696da637de92902fb38a36c2"
    },
    {
      "type": "html",
      "text": " [[Serendipitous Communication]]",
      "id": "1218e838c96c10a27c3ee04222be3043"
    },
    {
      "type": "html",
      "text": " [[Change Your Organization Diary]]",
      "id": "e97ff9df7349edd55d41c4e342191fac"
    },
    {
      "type": "html",
      "text": " [[Schedule Stories]]",
      "id": "1369e2aee85e8d528072f89208b16e4f"
    },
    {
      "type": "html",
      "text": " [[Levels Of Software Success]]",
      "id": "fe3cf51e9e0faf261b6b19300b1d7356"
    },
    {
      "type": "html",
      "text": " [[Software By Numbers]] (book information)",
      "id": "b3a1f82859420b0676b85794502efa80"
    },
    {
      "type": "html",
      "text": " [[Good Design]]",
      "id": "45dfa73628efa43419f3ab24abcbb039"
    },
    {
      "type": "html",
      "text": " My column on [[Continuous Design]] is now available at [http://www.martinfowler.com/ieeeSoftware/continuousDesign.pdf www.martinfowler.com]",
      "id": "137d4f354c0e784b8df72ffad258627b"
    },
    {
      "type": "html",
      "text": "\nAt the risk of seeming egotistical, here's something I wrote on [[Oo Empirical Evidence]]. I really like it. (And besides, that's what this home page is about. Me me me me me. Scroll down... way down... if you want stuff by other people.)",
      "id": "e153784d3235902cada44e4202a9e1ca"
    },
    {
      "type": "html",
      "text": "Every so often, I have a customer ask me to show that I'm improving productivity. In one case, it was because the company wanted productivity to improve over time; in another, it was because they were considering paying for another programmer to be added to the project.",
      "id": "217fe7d5541ee2716e53f8616d11e3e3"
    },
    {
      "type": "html",
      "text": "Whenever this happens, I'm put into a quandary. I <i>don't know how</i> to objectively measure productivity in the programming world. I can define it - \"productivity = features / effort\" - and I can measure effort - but I can't measure features. And that stumps me every time.",
      "id": "2bd9b1ea6d0aebfe3aec6ad9c56cce26"
    },
    {
      "type": "html",
      "text": "I'm aware of the function point metric, but last time I looked at it, it wasn't entirely measuring features. It included stuff like \"number of database tables\" and \"number of forms.\" A sufficiently clever team might spend <i>more</i> time per function point and come up with <i>fewer</i> forms and database tables, while still satisfying the base requirement. They would be penalized, because they would seem less productive. [[Behavioral Effect Of Metrics]] (blatant plug) says that you'll get what you measure. If you measure productivity using function points, then you'll get lots of forms and database tables, and that will lead to crappy software.",
      "id": "5d502889befc85c67685333f3ec30a30"
    },
    {
      "type": "html",
      "text": "This is a very basic problem. If we can't objectively measure productivity in software projects, then we have <i>no way</i> to say whether or not OO is better than procedural. We can't say whether or not anything is better than anything. We have nothing but anecdotal evidence and personal experience. If that's all we have, fine, I can use that with some success. But it's very hard to defend to a business person, and a hell of a way to run a profession.",
      "id": "17102c8328ed1da91709a7c2ad1b03e7"
    },
    {
      "type": "html",
      "text": "-- [[Jim Little]]",
      "id": "286aca9a91214d15eb04cd7ae6a74367"
    },
    {
      "type": "html",
      "text": "\nHere's something else I wrote recently that I think is way cool... except that it implies that refactoring is a stand-alone activity, rather than being an active part of development. Oh, well. It's still a fun analogy.",
      "id": "ad87ea46d5c9585ef18b7426b8856614"
    },
    {
      "type": "html",
      "text": "Here�s an analogy that illustrates the difference between refactoring and rewriting.",
      "id": "fb8dfe14ca246a0fcd67e1cfeed8b6ca"
    },
    {
      "type": "html",
      "text": "Imagine that you�re a young boy, sitting in your room, playing with a Rubik's cube.  It�s all jumbled up, and you want to solve it before dinner. Your mom is going to call you to dinner in fifteen minutes.",
      "id": "8b71b46e803ec6431dda997cc586a953"
    },
    {
      "type": "html",
      "text": "Okay, the analogy here is that the boy is the programming team, the Rubik's cube is the application, and dinnertime is the ship date. The cube is jumbled up, but it�s still in one piece: the application works, but it doesn�t have everything neatly lined up.",
      "id": "e47e03160aedf2f4558a786dd0f7ea9c"
    },
    {
      "type": "html",
      "text": "So you want to solve the Rubik�s cube. What do you do?",
      "id": "f32043c28a71421131ea004beda67ab3"
    },
    {
      "type": "html",
      "text": "Well, when I was kid, I took a screwdriver to it. I levered out each of the little squares - sproing! - and then fit them all back together in the correct order. The problem was that sometimes the pieces went flying across the room. Sometimes I couldn't find them all before dinnertime, and my cube ended up with pieces missing.",
      "id": "28b5096cb17ac4ab7726850cc0f15f20"
    },
    {
      "type": "html",
      "text": "I had a friend who was a little more determined. You might even say plodding.  He would turn the Rubik's cube back and forth, back and forth.  He would think a lot before making each turn, so he wasn�t usually done before dinner either. But every turn he made got the cube a little bit closer to being solved. When he got called to dinner, the cube wasn�t always done, but it was always in one piece, and it was always better off than when he started.",
      "id": "4a4f1e55841a53353c626d4b0f58424a"
    },
    {
      "type": "html",
      "text": "Rewriting software is like taking apart a Rubik's cube. It�s tempting and easy, but you run the risk of losing a piece.  Refactoring is like solving the cube. It's kind of boring, and it requires you to think a lot, but turn by turn, the application gets better. You never lose a piece.",
      "id": "0391d7948736763d9656e85b74b3df04"
    },
    {
      "type": "html",
      "text": "Some people are whizzes with a Rubik's cube. They can solve it faster than I can take it apart and put it back together again, and they never lose a piece.  If we practice refactoring a lot, we'll be able to do the same thing.",
      "id": "7bf21893b2973a8e5de48f0defd81a1e"
    },
    {
      "type": "html",
      "text": "\nI've been thinking about my [[Definition Of Project Success]] recently. I have a very strict definition:",
      "id": "635dab5465cc70de9d4d5e5dce587778"
    },
    {
      "type": "html",
      "text": " The project [[Delivers Value]] to the person or organization paying for it.",
      "id": "71af6663439cd62fcade498ff30270e0"
    },
    {
      "type": "html",
      "text": " The project doesn't degrade the [[Quality Of Life]] of the people involved in producing it.",
      "id": "435542c3e7de9b018e2a1aa45c5a9fb8"
    },
    {
      "type": "html",
      "text": "\nA response to a post on the XP mailing list about the need for up-front design with some transactions and multithreading:",
      "id": "2db2a098d9c451350f52c9197caf777f"
    },
    {
      "type": "html",
      "text": "Having done \"hard\" retrofits several times, I strongly disagree.  I've retrofitted code with \"hard\" features three times now: security, transactions, and internationalization. Each time I was modifying good code that had zero prior design for the feature in question. In each case, the retrofit was easy.",
      "id": "afe796931bd0ebe5b8c481e01c91daae"
    },
    {
      "type": "html",
      "text": "About four years ago, I retrofitted transaction security into a client-server application I had led. By \"transaction security,\" I mean that every business operation was verified by the server when it occurred and backed up by a pretty user interface. The code was very good, but not stellar. It took a team of three programmers about four days to add that code. Most of it was fairly mindless modification: we added security status objects that we passed around and added security checking to every server-side entry point. (There were quite a few.)",
      "id": "ecc007924fabd8107c3509f181beb9b9"
    },
    {
      "type": "html",
      "text": "A year or so after that, I retrofitted business transactions into a web-based application I was leading. This project had been developed with XP and had outstanding code. It was a little more complex than it needed to be, but I was still new to XP. This retrofit, which was more significant than the security retrofit, took much less time because the code was better. It took one pair about a day, maybe two. We extended an existing database connection object, already used by most business objects, renamed it to \"Transaction,\" and added commit and rollback features. Then we modified existing centralized database and exception-handling logic to use it.",
      "id": "bbcf684dae2b4d2e171ae1bc02e39fe4"
    },
    {
      "type": "html",
      "text": "About half a year later, I retrofitted the same web-based application with internationalized input and output. At the time, that web application was one of the few on the net (that I'm aware of) that handled international input successfully. The code had been getting steadily better over time, thanks to XP practices, and at this point was absolutely fantastic. The change took one pair about four hours of coding, if that. (There was a lot more time spent researching Unicode and internationalization issues.) It required a five-line change to the centralized user input processing and another ten-line change to the centralized output template picker.",
      "id": "7df2860bc8bdab2520da9bc2e17e689e"
    },
    {
      "type": "html",
      "text": "We did not design in advance for any of these problems. It might seem like it (why have a centralized user input processing method, otherwise?), but in fact we were just following good XP design principles: simplicity and reduction of duplication. At one point, we had the same two lines of user input handling duplicated in three or four places. We refactored that into a centralized method. Months later, when we had dozens of pages, we came back and reused that method to support international input. No grand design, just damn good code.",
      "id": "a7cd4ce7f56200c2e708e29657e80c5f"
    },
    {
      "type": "html",
      "text": "The common wisdom is that some things are so hard they require up-front design. I've pushed this theory, and it hasn't pushed back. I'm not so sure it's true. I think they require good code, but up-front design isn't the only way to get that. And in my experience, it's not the most effective way to get it, either.",
      "id": "dddfbc92742470f9bfe038d0b10829c1"
    },
    {
      "type": "html",
      "text": "\nA random statement I made recently that I like. I know this is going to come back and bite me, but I have to post it anyway. (Vanity, thou art a cruel master!)",
      "id": "9d7e78922a586c6223c37fa7ee2c3f44"
    },
    {
      "type": "html",
      "text": "If you can't be selectively dogmatic, you can't do XP.",
      "id": "b39f8e367f097b6ec97ab4b9d3517b0b"
    },
    {
      "type": "html",
      "text": "\nI'm writing an article about [[Continual Design]]. Here's a thought that occurred to me as I wrote. It's a silly metaphor, but a fun comment.",
      "id": "1ed5ac672a873a8c3e2fb97e3b07864a"
    },
    {
      "type": "html",
      "text": "Why is it that continual design doesn't back you into a corner like up-front design does? With the lack of planning, you'd think you'd be <i>more</i> likely to end up in a corner, not less. The reason: continual design is focused on simplicity. In continual design, there are no walls... just the floor you're painting. Hence, no corners to be backed into.",
      "id": "994c49e5ee17b5d946c5adf31e40974d"
    },
    {
      "type": "html",
      "text": "\nI just wrote quite a bit on [[Object Oriented For Dummies]], which inspired and then fed off of [[Good Design]]. It's 4:30 am.  Right now, I'm thinking this is great stuff. I fear what I'll think in the morning. (Or rather, when I wake up, which probably won't actually be morning anymore.)",
      "id": "badd6c139d5e73cb5e66555372df6238"
    },
    {
      "type": "html",
      "text": "\nI just saw \"The Bar is Higher Now\" on [[Michael Feathers]]' blog ([http://www.artima.com/weblogs/viewpost.jsp?thread=42486 www.artima.com]):",
      "id": "620e149e61de5999de4df06f900200ab"
    },
    {
      "type": "html",
      "text": "I love it.  I think that [[Dont Repeat Yourself]] and [[Coupling And Cohesion]] are basic principles of [[Good Design]].  [[Dont Repeat Yourself]] is easy to understand and apply.  [[Coupling And Cohesion]] isn't.  I've been looking for a simple rule to use to help people understand these rules, and I think Michael's hit on one for decoupling: Can you take any arbitrary class and write a unit test for it, alone, in a few minutes?  Brilliant.  Now, what about cohesion?",
      "id": "c96429e6bcdb85ac4ce1e8cd18aef5e6"
    },
    {
      "type": "html",
      "text": "\nA thought on [[Law Of Demeter]]:",
      "id": "922a898c7fa11cb02ce17e9896f8a906"
    },
    {
      "type": "html",
      "text": "I have to admit, I've always been a bit unclear on the Law of Demeter.  I understand what it is and why it exists, but the formal definition never made total sense to me.  And when I try to explain it to others, I get bogged down.  Still, I've been looking for a simple guideline, like the [[Pragmatic Programmers]]' [[Dont Repeat Yourself]], that does for coupling what [[Dont Repeat Yourself]] does for duplication.  (Actually, I mentioned this in the blurb just above.)",
      "id": "50db3d46bd398453f2e5a403ddf886b6"
    },
    {
      "type": "html",
      "text": "I think I may have found one.  It's not quite as encompassing as [[Law Of Demeter]], but it's a lot simpler, and might have the kinds of emergent properties I love about [[Dont Repeat Yourself]].  Here it is:",
      "id": "4b7f3df63763b5554a617eef47c38c3a"
    },
    {
      "type": "html",
      "text": "Don't implement \"set\" methods.  ",
      "id": "98be842d1bf8b7b234956023789c148f"
    },
    {
      "type": "html",
      "text": "You can pass parameters into an object when you construct it, and you can pass messages that include parameters, but except in the constructor, you can't write any method that does nothing but take a parameter and store it in an instance variable.",
      "id": "5561dd023d44b7f7a718b42b41621f3d"
    },
    {
      "type": "html",
      "text": "Wacky idea, I know.  I'm going to experiment with it for a few years and let you know how it works out.  :)",
      "id": "6cc4bc15188e4333240c7ec00cf22c0c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "<b>About me:</b>",
      "id": "987f5509ceed63c3c73550dcc2b148ee"
    },
    {
      "type": "html",
      "text": "\nI'm a programmer who's very interested in high quality software and effective methodologies. I'm a sporadic contributor to Wiki - I have bursts in which I'll contribute a lot, but then I'll go away for a while. Right now, most of my energy is focused on [[Nunit Asp]]. I've also been recruited for the C# port and maintenance of fit ([[Framework For Integrated Test]]).",
      "id": "3810cbbfb2ef72f2062f734c42449c35"
    },
    {
      "type": "html",
      "text": "\nI like creating small pages that focus on a single concept, then seeing the pages grow as people add their thoughts. I experiment with writing as compactly and clearly as possible. I also experiment with concepts: I'll start a page as a way of trying out an idea, as well as a way of seeing what other people think.  Sometimes I'll write provocatively in order to seed discussion:",
      "id": "13cbfd630a8ff46806f8340db64b9d86"
    },
    {
      "type": "html",
      "text": " [[Design Patterns Considered Harmful]]",
      "id": "2f52fb615c53bd4707bd46b200aeb10a"
    },
    {
      "type": "html",
      "text": " [[Avoid Or Embrace Libraries]]",
      "id": "330205b4b50174facc46d5a22d433158"
    },
    {
      "type": "html",
      "text": " [[Distribution Is Optimization]]",
      "id": "b11f8724a0d41ec0da6d2aa69fa7bb75"
    },
    {
      "type": "html",
      "text": " [[Productivity Rant]]",
      "id": "22769140bbd0efa16bc0977c9b75d2b2"
    },
    {
      "type": "html",
      "text": " [[First Rule Of Logging]] (this one was very controversial, but resulted in the fantastic [[Logging Discussion]], mostly thanks to [[Steve Howell]]'s refactoring)",
      "id": "0b73af609652b5c954e4f46f5ebfff11"
    },
    {
      "type": "html",
      "text": "\nMy current favorite contribution has been the \"[[Process Principles]]\" set of pages, which I mostly created in August and September of 2001. In these, I'm experimenting with the beginnings of a process pattern language. Eventually, I'd like to collect enough process patterns and forces to write a book about creating processes customized to an individual project and work environment.  Here's the pages:",
      "id": "3401ce135eddd27c47b5ad1f74c4a12d"
    },
    {
      "type": "html",
      "text": "\"[[Process Principle]]\" pages:",
      "id": "941e7db529e598922c02af4462fa1620"
    },
    {
      "type": "html",
      "text": " [[Eliminate Technical Debt]] (includes [[Eliminate Design Debt]])",
      "id": "48b0adc291d102ce04aadc8a8c3aa47d"
    },
    {
      "type": "html",
      "text": " [[Acknowledge Fallibility]]",
      "id": "b8a885f54be4aea7c04d3cde5e4ad40e"
    },
    {
      "type": "html",
      "text": " [[Collaborate For Success]]",
      "id": "8b785ff1128f865cdf57527377b4c3d9"
    },
    {
      "type": "html",
      "text": " [[Remember The Future]]",
      "id": "e39dac8e644644844c0be2586f768cef"
    },
    {
      "type": "html",
      "text": " [[Deliver Value]]",
      "id": "6eaf22b577202e1941b8443cbae39a3e"
    },
    {
      "type": "html",
      "text": " [[Maximize Programming Time]]",
      "id": "0254bdad72513d1c7a3485a5b83fd6f5"
    },
    {
      "type": "html",
      "text": " [[Focus On People]]",
      "id": "1742347c2708e89801836bc877239190"
    },
    {
      "type": "html",
      "text": " [[Question Conventions]]",
      "id": "7d4345ed50f2387d43881bad50e6e6c7"
    },
    {
      "type": "html",
      "text": " [[Replace Documentation]] (and [[Problems With Documentation]], and [[Self Documenting User Interface]])",
      "id": "af9bb7f6858dc6dbf81e982c18c312b4"
    },
    {
      "type": "html",
      "text": " [[Improve The Process]]",
      "id": "f2f1fe8a98f83fa2ad37750cd3cee686"
    },
    {
      "type": "html",
      "text": " [[Minimize The Cost Of Change]]",
      "id": "87d0ba1165f9fe7d74d422e47e72fbc6"
    },
    {
      "type": "html",
      "text": "\nRelated [[Process Pattern]] pages that I authored:",
      "id": "3e14971a9ac03a0f60fd0f0f61829cde"
    },
    {
      "type": "html",
      "text": " [[Expose Errors]]",
      "id": "fede79fd8c6d1e5f806ac7e2cefe84dd"
    },
    {
      "type": "html",
      "text": " [[Fix The Process]]",
      "id": "4a0e45db7e8cb796d0aa8cd336e2d441"
    },
    {
      "type": "html",
      "text": " [[Support Swami]]",
      "id": "fbef11458669b19290c1def19be079ec"
    },
    {
      "type": "html",
      "text": " [[Prove Assumptions]]",
      "id": "1c5233c9d59c41d7ce50052e0b13a292"
    },
    {
      "type": "html",
      "text": " [[Oral Tradition]]",
      "id": "5709d165ff8327b53f87b44774c0ea9d"
    },
    {
      "type": "html",
      "text": " [[Document Last]]",
      "id": "c31e99c6ac45cc7371ef58be98565433"
    },
    {
      "type": "html",
      "text": " [[Automate Processes]]",
      "id": "3ec4f9bd87a9a4410bf2a773bc915cd5"
    },
    {
      "type": "html",
      "text": "\nI once heard Ward Cunningham talk about the idea of complexity as debt, and I thought it was a great metaphor. I wrote several pages about that idea:",
      "id": "2dc2fba273b3216f35fe91154229c105"
    },
    {
      "type": "html",
      "text": " [[Complexity As Debt]]",
      "id": "a32817667ef4f25dd4e3beedebb5c1af"
    },
    {
      "type": "html",
      "text": " [[Design Debt]]",
      "id": "ad495e7b26b7fba209e04360009ab80c"
    },
    {
      "type": "html",
      "text": " [[Eliminate Design Debt]]",
      "id": "6a1cc4ee4e611d04573ebbe0170afbc9"
    },
    {
      "type": "html",
      "text": " [[Extreme Programming Principles]]",
      "id": "0e4ce732d7dc3aa38ddd372a56c23607"
    },
    {
      "type": "html",
      "text": "\nI own a small consulting business and once had grand ideas for it. I've since learned better, but the pages I wrote during that time are still around:",
      "id": "67eab2d80a82dbbc9f70b6a0b4a95bd3"
    },
    {
      "type": "html",
      "text": " [[Managementless Organization]]",
      "id": "12279dbcd40aa2d0e3481e9ca35b44e9"
    },
    {
      "type": "html",
      "text": " [[Compensation Game]]",
      "id": "b8860763904f96fda8f9c8a17dfd4457"
    },
    {
      "type": "html",
      "text": "\nI've done a fair amount of [[Extreme Programming]]. I started using it in April 2000, and written some pages about it:",
      "id": "c7c067f8246fd81226a2675c63317f95"
    },
    {
      "type": "html",
      "text": " [[Ats Goes Extreme]] and [[Ats Diary]] -- my first exposure to XP.  Old, but still interesting.",
      "id": "f4c834ff398d3d614f63cc43d394ec9e"
    },
    {
      "type": "html",
      "text": " [[Up Front Design Versus Evolutionary Design In Denalis Persistence Layer]] -- my XP Universe (2001) experience report.  ",
      "id": "41396c7cc16fd82feb9a00034e7d3a7e"
    },
    {
      "type": "html",
      "text": " [[Extreme Programming Principles]]",
      "id": "0e4ce732d7dc3aa38ddd372a56c23607"
    },
    {
      "type": "html",
      "text": "\nI love stories. They're fun to read, fun to write, and a great way to learn.  Some of the pages I created are for stories:",
      "id": "e95664e34b0ab2f5d79a0274e06bf888"
    },
    {
      "type": "html",
      "text": " [[Optimization Stories]]",
      "id": "c83fd32f9c6f256aeaf11658a21c521a"
    },
    {
      "type": "html",
      "text": " [[Distribution Stories]]",
      "id": "8d5c833b5be781c76d1e837a01cd0457"
    },
    {
      "type": "html",
      "text": " [[Behavioral Effect Of Metrics]]",
      "id": "1cad08592003116c31154e9fc15a6245"
    },
    {
      "type": "html",
      "text": "\nFinally, I have a few pages which focus purely on the nuts and bolts of programming:",
      "id": "b404778f6efffcfd6c6556e7a45111c0"
    },
    {
      "type": "html",
      "text": " [[Commenting Challenge Response]] (I really like this one)",
      "id": "9747793b0cf0d042c2db520858542fe2"
    },
    {
      "type": "html",
      "text": " [[Catch Dont Check Refuted]]",
      "id": "383807ec20738b3dbe8bc8089151ef22"
    },
    {
      "type": "html",
      "text": "\nThat's all the pages that I can think of right now. If you've gotten this far, you probably need to go do whatever it is that you've been putting off. :) But if you've had a chance to read some of these pages, I'd love to hear your comments, good and bad. Knowing that people are listening is what keeps me writing. There's a place for comments at the bottom of the page.",
      "id": "a231058568b690d952e56dd398571e0d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "<b>About others, mostly:</b>",
      "id": "cdee3dae8a60670dad1d19e5cb4ea3c5"
    },
    {
      "type": "html",
      "text": "\nThus ends the self-aggrandizing part of my home page. The rest is stuff by other people.",
      "id": "bda01ea9958c6bde411c6dfee6b48b31"
    },
    {
      "type": "html",
      "text": "\nHere's some other links that I like or want handy:",
      "id": "4e5ea90089ca1df11f4b1f151edbb8c6"
    },
    {
      "type": "html",
      "text": " [[Recent Changes]] or [http://c2.com/cgi/quickChanges c2.com]",
      "id": "3c17776512c22168984d4ab38b8d2655"
    },
    {
      "type": "html",
      "text": " [[Program Transformation Wiki]]",
      "id": "109209e8507bfd3c73582e8b472a8f17"
    },
    {
      "type": "html",
      "text": " [[Three Week Project Turnaround]]",
      "id": "c018ece856d5213b570ce0bbe73b9d5f"
    },
    {
      "type": "html",
      "text": " [[Screechingly Obvious Code]]",
      "id": "fbfe932bc4db2abb15e868a5fe4ff92a"
    },
    {
      "type": "html",
      "text": " [[Category Code Smell]]",
      "id": "f87caa83fbb08c6b6afc859414df8479"
    },
    {
      "type": "html",
      "text": " [[Organizational Patterns]] | [http://i44pc48.info.uni-karlsruhe.de/cgi-bin/OrgPatterns?BookOutline i44pc48.info.uni-karlsruhe.de]",
      "id": "e7c2fa6d9438d19526390395278e28fa"
    },
    {
      "type": "html",
      "text": " [[Extreme Hour With Actual Programming]]",
      "id": "7c0e60372b3da307a627096818aaa13c"
    },
    {
      "type": "html",
      "text": " [[Raise The Papers Potential]]",
      "id": "a107f797bfa86be022d24ddfbafdf7f7"
    },
    {
      "type": "html",
      "text": " [[String Buffer]]",
      "id": "73bb1515e0f28d6f79e97c1ece56bd29"
    },
    {
      "type": "html",
      "text": " [[Extremely Spoiled Child]]",
      "id": "d41483cc108c94da9c921f9a2ccc562a"
    },
    {
      "type": "html",
      "text": " [[The Internet Is Not Your Life]]",
      "id": "f0ed056615904d9bc571910bbffaf512"
    },
    {
      "type": "html",
      "text": " [[Conquer With Compassion]]",
      "id": "09f12eaa605fc909be97878a996cbc46"
    },
    {
      "type": "html",
      "text": " [[Community Life Cycle]]",
      "id": "2bd3141f0504799e472ed654ec61b187"
    },
    {
      "type": "html",
      "text": " [[Fix Your Wiki]]",
      "id": "5d287eb4fde5115d6cde8cc101b4d1b5"
    },
    {
      "type": "html",
      "text": " [[Patterns For Effective Meetings]]",
      "id": "c8e7c53db1aae83faaa61f0c1e92d9d2"
    },
    {
      "type": "html",
      "text": " [[Real Story About Developer Turned Manager]]",
      "id": "4decc83c7574a4c5f04f9e5336f5f17e"
    },
    {
      "type": "html",
      "text": " [[Principles Of Object Oriented Design]]",
      "id": "bc90a568cb9aa7d613dc8131464e1c21"
    },
    {
      "type": "html",
      "text": " [[Collecting Seashells]]",
      "id": "2eb18d909d253c38ea49f4e2ed8216f0"
    },
    {
      "type": "html",
      "text": " [[Three Levels Of Audience]] | [[Shu Ha Ri]]",
      "id": "96a2598fc1d2240e85a1d9c2cea23d32"
    },
    {
      "type": "html",
      "text": " [http://radio.weblogs.com/0100190/stories/2002/07/25/sixRulesOfUnitTesting.html radio.weblogs.com]",
      "id": "dc1eb374c89e15e3064eae60c8052edc"
    },
    {
      "type": "html",
      "text": " [[Cautious Buy Over Build]]",
      "id": "1f8b33f91465dc65e671302cf64997c6"
    },
    {
      "type": "html",
      "text": " [http://www.thomsett.com.au/main/articles/path/toc.htm www.thomsett.com.au] (\"Project Pathology:<br>Causes, patterns and symptoms of project failure\")",
      "id": "4ed89caf7045c241c087ebdf820e2fed"
    },
    {
      "type": "html",
      "text": " [[The Emperors Old Clothes]]... wonderful!",
      "id": "e2ffa63de2c2e355f21adfe7c511139c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "\nSome quotes I like:",
      "id": "3baf55f8a7b227045706443911de35d3"
    },
    {
      "type": "html",
      "text": "I learned to write [[Unit Test]]s while I was still a Java fanatic. I wrote some tests; they caught some bugs. I wrote more, they caught more. By the time I had enough tests to be confident that I had [[Near Zero Bugs]]?, I didn't feel like I needed the static typing anymore. I shouted, \"Aha!\" and went to try out Smalltalk. -- [[Adam Spitz]], [[Static Type Safety]]",
      "id": "ff44f660c6fb8fed4dd73ffbce19ea8d"
    },
    {
      "type": "html",
      "text": "Computer Science graduates tend to be loud advocates of anything formal, regardless of their own (lack of) experience in usefully applying such tools. -- [[Anonymous Donor]], [[Static Type Safety]]",
      "id": "e89cb6b0a63feb278cb42346497d7640"
    },
    {
      "type": "html",
      "text": "Since foresight doesn't work, don't rely on it. Go for early hindsight. -- [[Ben Kovitz]], [[Only Foresight Matters]]",
      "id": "76923b902e804c7560842d02ce69af76"
    },
    {
      "type": "html",
      "text": "Somebody said (and I think it's on Wiki somewhere), \"People hate change.\" The first reaction is, \"Yeah, well, <i>everyone</i> knows that!\" To which the proper reply is, \"No, you don't understand, people really <b>really</b> hate change.\" -- [[Anonymous Donor]], [[They Will Not Listen]]",
      "id": "e3dcba8adb59f56863658c9865882a40"
    },
    {
      "type": "html",
      "text": "Estimates are about \"how much work does it take\". Delivery (velocity) is about \"when will we get it\". This is why I find estimating clock/calendar time to be sketchy. -- J. B. Rainsberger, XP mailing list",
      "id": "6a73e3919381911d58181100eb99fbe7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "\nFor sushi lovers:",
      "id": "81dc98af71456b8271f1fb21f70a8635"
    },
    {
      "type": "html",
      "text": "The first dish we tried was raw octopus. It was very, very raw. It had been chopped up into little strips, and doused with sesame oil, but each of the individual pieces was still squirming and writhing vigorously. One of our Koreans hosts demonstrated how to eat it. Grab a piece quick and put it into the hot sauce (a self-saucing food - it wriggles itself full of sauce) and then eat it quick before it stops moving.",
      "id": "65262ccf0f303a5c9b07d7abcd6f0be1"
    },
    {
      "type": "html",
      "text": "I decided to start with the smallest, most straightforward piece I could find. I fastened my silver chopsticks on the tip of a small tentacle.. Big surprise. The dismembered tentacle's suction cups grabbed the plate and wouldn't let go. I pulled, and the plate lifted. I poked it for a while, and it finally bonded to one of the chopsticks. I quickly dunked it into the red-hot sauce (no apparent effect on the still animate tentacle) and pried it off the chopstick with my teeth. It didn't fight too much once it was inside my mouth. Later I discovered from someone in Seoul that every year several people choke to death when the tentacles fasten themselves on the inside of their throats. I never realized enjoying local cuisine could be so risky.",
      "id": "0baaa2eac99123906a7c673254cf97df"
    },
    {
      "type": "html",
      "text": "(from [http://www.ntv.co.jp/ghibli/Pmo/0512e.html www.ntv.co.jp])",
      "id": "d252d341c32ab0d7a3a31d97ba05e2f3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "\nAn interesting stat: Slashdot's normal peak load is 25 pages/second, using 6 servers. That's more processor power than I expected for a popular site like Slashdot. (On the other hand, it's a DB-intensive site.) Prior to the WTC bombing, their hit record was 1.6M pages in a day, and their average was 1.4M ppd.",
      "id": "0247b337252527e4050548580e7e4dbc"
    },
    {
      "type": "html",
      "text": "\nOn Tuesday, the day of the WTC attack, they peaked at 70 pps, and served nearly 3 million pages. They continually monitored performance and tweaked the code to deal with the load. Average page serving time slowed by 2 seconds per page after performance tweaks.",
      "id": "28192df3d7e192077570239a1899c7c4"
    },
    {
      "type": "html",
      "text": "(extracted from [http://slashdot.org/article.pl?sid=01/09/13/154222&mode=nocomment slashdot.org])",
      "id": "6b3d1db90d58a100f98436af275688a7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "\nFrom the stating-the-obvious department:",
      "id": "5b3e807a1aa72290f77d88f0077b7b6e"
    },
    {
      "type": "html",
      "text": "It's easier to add features to an architecture than to remove them. If you have a misguided feature that a bunch of classes are using, taking it out requires that you modify all kinds of existing code... correctly! On the other hand, if you have a new feature that would make life easier, adding it doesn't require that you retrofit any old code.",
      "id": "ecf39fcbebeae97b90987775b4a208b6"
    },
    {
      "type": "html",
      "text": "This is why architectures and designs with don't do much are better than ones that do a lot. It's counter-intuitive, but true: the more your design anticipates future needs, the less prepared it is to deal with future requirements.",
      "id": "9369b2fce262dedc8349ebddb9882677"
    },
    {
      "type": "html",
      "text": "(This is a basic XP principle so I'm being very redundant here. But this particular twist on [[Do The Simplest Thing That Could Possibly Work]] just occurred to me. I'm going to search Wiki when I have time and see if it deserves its own page.)",
      "id": "f41a8714ffdb2a3b8f4cd51b7ecb6c2c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "\nA success story about completely refactoring an old, crufty application in three weeks. Apparently no tests were used or added.",
      "id": "4c9fd67c6440bdb8ba4cdfd3e3a9ae20"
    },
    {
      "type": "html",
      "text": "[http://www.joelonsoftware.com/articles/fog0000000348.html www.joelonsoftware.com]",
      "id": "ac502cd19d7ec593cf35ec17c1067741"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "\nRandom thoughts not yet worthy of their own page:",
      "id": "3106be8aa0c7c19ea444f6d564a5bdbf"
    },
    {
      "type": "html",
      "text": " The programmers' bookshelf should contain few specific language and tool how-to books and many books on general principles and practices.",
      "id": "c3753f4417c5d008fd7be579ffb2f2ea"
    },
    {
      "type": "html",
      "text": " Constructors should never do any significant work. Although having an object be fully baked after construction is nice, it leads to coupling issues that can make testing extremely difficult. As the code evolves, the coupling can lead to code that is fragile and resistant to change. Instead, use [[Lazy Initialization]] in those cases where significant work is necessary.",
      "id": "59e0955f2e8338030e8e7a3f4c72378f"
    },
    {
      "type": "html",
      "text": " When using [[Lazy Initialization]], avoid side effects. I've twice seen a case where [[Lazy Initialization]] was used to log into a remote system (once was in my own code!) and both times it resulted in confusing and brittle code.",
      "id": "0f7f5ccdc3a72d471a8ed2fea4a63d75"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "\nResearch on the effects of eye-contact in group discussions:",
      "id": "f973722e1be1bdd0731025a6351f9de0"
    },
    {
      "type": "html",
      "text": "  \"The effect of eye gaze has literally fascinated people throughout the ages,\" says Dr. Vertegaal, whose paper, Explaining Effects of Eye Gaze on Mediated Group Conversations:<br>Amount or Synchronization? was presented this week at the Association for Computing Machinery (ACM) Conference on Computer Supported Cooperative Work.",
      "id": "b39daeeb9e4131ef8b3aa62ef651cd72"
    },
    {
      "type": "html",
      "text": " [http://www.sciencedaily.com/releases/2002/11/021122073858.htm www.sciencedaily.com]",
      "id": "dc1231f8d8f11513b021f748075d2c9d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "\nThis is an entertaining story, in a way that only the very wacky true stories can be.  It's about a couple of guys who snuck into Apple to create the \"graphing calculator\" application that was shipped with every [[Power Macintosh]].",
      "id": "4601533c74df0f3b205040e289b09feb"
    },
    {
      "type": "html",
      "text": " [http://www.pacifict.com/Story/ www.pacifict.com]",
      "id": "de1443f9d302bb9aeb8e4a30b4a923dc"
    },
    {
      "type": "html",
      "text": "<i>I wonder if history is repeating itself?  To very little fanfare, [[Mac Osx]] version 10.4 \"Tiger\" will again include a free ultra-nifty graphic calculator. -- [[Ian Osgood]]</i>",
      "id": "68abdb6afb8a9d181094d1c45c29097b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "<b>Leave me a comment here.</b> I like hearing from other people.",
      "id": "a83541799524d827aec1538b53dc23b4"
    },
    {
      "type": "html",
      "text": "\nIs this the same Jim Little? [http://www.cs.ubc.ca/~little/ www.cs.ubc.ca]",
      "id": "7439a99fca5aaf15ec6d5c4001857187"
    },
    {
      "type": "html",
      "text": "<i>Nope, not me. Here's me (on the right):</i>",
      "id": "7eebc0a68e9f8bca9ea02fbe283501cb"
    },
    {
      "type": "image",
      "url": "http://fit.c2.com/files/DotNetPlatform/team-small.jpg",
      "text": "fit.c2.com",
      "id": "d513a8767aa48101045ad10a9944253a"
    },
    {
      "type": "html",
      "text": "\n",
      "id": "bf2ec278d5882621376cec5ce1fa1cbf"
    },
    {
      "type": "html",
      "text": "\nJim got a haircut since the last time I saw him. (-- Alistair)",
      "id": "9b56db5a4ba76f494106c226eea4e21f"
    },
    {
      "type": "html",
      "text": "<i>I like the Rubik's cube story. Have you seen [[Nose Job Refactoring]]? -- [[Matthew Astley]]</i>",
      "id": "f35fbdef70853202f36f7ac89ddba03d"
    },
    {
      "type": "html",
      "text": "\nSorry girls, Jim is no longer available. Congratulations on the recent wedding, Jim! -- [[Rob Myers]]",
      "id": "dbb5d85b218916ee3d13d672c32e8d27"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "Jim, I appreciate the comment about making [[Fire Fox]] work with [[User Names]] - I tested and tweaked the info a little and put it on the [[User Name]] page. Thanks again! -- [[Layne Thomas]]",
      "id": "46e8af25f6c19721ef6da2fa3a9b16bc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "Jim I have motioned a delete of ManagementlessO<b></b>rganization and therefore its related CompensationG<b></b>ame, and CompensationG<b></b>ameTheoryAnalysis. Perhaps [[Egalitarian Compensation]] is a more suitable home for some of the material. If I am wrong please explain. thx",
      "id": "8cb83662cd104f3444419c4825147f55"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a6873c633f729942035cf808fe62ec4c"
    },
    {
      "type": "html",
      "text": "[[Category Home Page]]",
      "id": "bbd6d339189930aa2da200df85be883f"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?JimShore c2.com]",
      "id": "051c6ca5306718ea8747af4d5dbd19bb"
    }
  ],
  "journal": [
    {
      "date": 1209533057000,
      "id": "16a6378e88523ca6c0941a055947efc2",
      "type": "create",
      "item": {
        "title": "Jim Shore",
        "story": [
          {
            "type": "html",
            "text": "Welcome visitors--as of today (Apr 29, 2008) it's been many years since I participated in Ward's Wiki.  I offer the below as a purely historical curiosity.  It's not necessarily representative of my views today--in fact, some of it's pretty embarrassing to me now.",
            "id": "0da137f741655ab50a459ef1767ad9b8"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "mailto:jshore@titanium-it.com",
            "id": "4f3d51e13761ed64be68eb13bbcd59ee"
          },
          {
            "type": "html",
            "text": "\nI have a new website and blog: [http://www.jamesshore.com www.jamesshore.com]",
            "id": "a331d66cb0012b4c1107513a918b11a3"
          },
          {
            "type": "html",
            "text": "\nFormerly known as [[Jim Little]].  These days, I'm doing business as Titanium I.T. LLC (\"Making IT Profitable\"), helping companies improve the profitability of their software development efforts.  Although I started out as a programmer, focused entirely on technical issues, now I'm more interested in how software fits into the big picture--the difference between writing code and creating software that improves lives.  In the context of business, \"profitability\" is a nice, pithy way to say this.",
            "id": "742df59791f4d413b12cf6d515e55d9d"
          },
          {
            "type": "html",
            "text": "\nI haven't lost interest in technical issues... in fact, I think the foundation of software development is programming.  Writing code.  Design, requirements, testing; these are all inputs to the final end result of making software that has an impact.  Writing code poorly leads to poor results.  Writing it well leads to good results... but writing it \"well\" means more than making it work.  I believe programmers, business experts, and the rest of the development team all need to work together, intimately, in order to make truly great software.",
            "id": "dcdfc46948e8049a41ceeb7a6db33e4d"
          },
          {
            "type": "html",
            "text": "\nHere are some pages I've written along these lines.",
            "id": "ea1a28eaf404f257117435b9e53d88fd"
          },
          {
            "type": "html",
            "text": " [[Levels Of Software Success]]",
            "id": "fe3cf51e9e0faf261b6b19300b1d7356"
          },
          {
            "type": "html",
            "text": " [[Good Design]]",
            "id": "45dfa73628efa43419f3ab24abcbb039"
          },
          {
            "type": "html",
            "text": " [[Design Debt]]",
            "id": "ad495e7b26b7fba209e04360009ab80c"
          },
          {
            "type": "html",
            "text": "\nI'm particularly proud of [[Good Design]]--I've seen many attempts to define \"good design\" in the past, and they all get caught up in subjective discussions of \"truth and beauty.\"  I like to think my approach brings a new spin to the discussion.",
            "id": "bcac2be888a6a67ad9db0cb4dd692955"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "\nThe above was written March 2004.  The following is pretty old, but not so old that I want to rewrite it today.",
            "id": "9d30af647f478c45698feeba0a93f079"
          },
          {
            "type": "html",
            "text": "\nIf you're just looking for interesting pages that I've written, I consider each of these six pages my best of its category. I started these pages, and often didn't sign my work, but not everything unsigned is from me.",
            "id": "e0c90b899f84b3c8c171f2b8689275a3"
          },
          {
            "type": "html",
            "text": " [[Design Debt]]",
            "id": "ad495e7b26b7fba209e04360009ab80c"
          },
          {
            "type": "html",
            "text": " [[Behavioral Effect Of Metrics]]",
            "id": "1cad08592003116c31154e9fc15a6245"
          },
          {
            "type": "html",
            "text": " [[Commenting Challenge Response]]",
            "id": "9846df4c1bde15beac5d1f08c58a5195"
          },
          {
            "type": "html",
            "text": " [[Productivity Rant]]",
            "id": "22769140bbd0efa16bc0977c9b75d2b2"
          },
          {
            "type": "html",
            "text": " [[Design Patterns Considered Harmful]]",
            "id": "2f52fb615c53bd4707bd46b200aeb10a"
          },
          {
            "type": "html",
            "text": " [[Optimization Stories]]",
            "id": "c83fd32f9c6f256aeaf11658a21c521a"
          },
          {
            "type": "html",
            "text": "\nFor more of my writing, take a look at the \"New Stuff\" section (next) and the \"About Me\" section that follows.",
            "id": "945c6dd788915f3ef0cc2f220557f1f5"
          },
          {
            "type": "html",
            "text": "\nIf you'd rather learn about me by seeing what I like, scroll about halfway down the page, where you'll find favorite links and quotes by other authors.",
            "id": "5a916bc2e1811de37ec604d13287ded6"
          },
          {
            "type": "html",
            "text": "\nIf you'd like to leave me a message, scroll down to the very bottom of the page. I don't check it regularly, but I like getting it. Or send me an email if you want me to read it now. You'll see a link to my email at the very top of this page.",
            "id": "d8ef7b12dd3e24400dd4182af379e1bb"
          },
          {
            "type": "html",
            "text": "\nI've also added a picture of myself. Vanity is an important cause, so I'm glad to be able to contribute. That's at the very very very bottom. Consider yourself warned.",
            "id": "e9951c8d46190fb5906dbe9f265f59fc"
          },
          {
            "type": "html",
            "text": "\nShort warning about my sense of humor: When they were handing out the funny, I applied for \"clever and witty\" but all they had left was \"goofy.\" I do the best I can with what I've been given.",
            "id": "bc11dc1e1c5ffb30adfb8aa020365128"
          },
          {
            "type": "html",
            "text": "\nIf you're not at all interested in me, try [[Random Pages]]. It tends to be better reading anyway.",
            "id": "2484cadfd29c547be1812361c44da2b0"
          },
          {
            "type": "html",
            "text": "\nIf you're like me and think \"short and sweet\" is preferable to \"long and drawn out,\" pretend this is the end of the page. Thanks.",
            "id": "6ba4fae5438d7dd6893486d446077a3d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "<b>New stuff:</b>",
            "id": "65efeffe7cbbd5d9a984d91be31726fb"
          },
          {
            "type": "html",
            "text": " [[Breadth First Learning]]",
            "id": "99b4b7a0c510c89013e70e9d75c9cad2"
          },
          {
            "type": "html",
            "text": " [[Customers And Velocity]]",
            "id": "af09cb1e8e0a88e8371bc74f371fee07"
          },
          {
            "type": "html",
            "text": " [[Dont Call Me]]",
            "id": "8c98c1c0a69633d5c4f732af345f1803"
          },
          {
            "type": "html",
            "text": " [[Pair Programming Benefits]]",
            "id": "d59c59f4ab485badc35ab7e8e61521ca"
          },
          {
            "type": "html",
            "text": " [[Properties Of Good Languages]]",
            "id": "f94d54af696da637de92902fb38a36c2"
          },
          {
            "type": "html",
            "text": " [[Serendipitous Communication]]",
            "id": "1218e838c96c10a27c3ee04222be3043"
          },
          {
            "type": "html",
            "text": " [[Change Your Organization Diary]]",
            "id": "e97ff9df7349edd55d41c4e342191fac"
          },
          {
            "type": "html",
            "text": " [[Schedule Stories]]",
            "id": "1369e2aee85e8d528072f89208b16e4f"
          },
          {
            "type": "html",
            "text": " [[Levels Of Software Success]]",
            "id": "fe3cf51e9e0faf261b6b19300b1d7356"
          },
          {
            "type": "html",
            "text": " [[Software By Numbers]] (book information)",
            "id": "b3a1f82859420b0676b85794502efa80"
          },
          {
            "type": "html",
            "text": " [[Good Design]]",
            "id": "45dfa73628efa43419f3ab24abcbb039"
          },
          {
            "type": "html",
            "text": " My column on [[Continuous Design]] is now available at [http://www.martinfowler.com/ieeeSoftware/continuousDesign.pdf www.martinfowler.com]",
            "id": "137d4f354c0e784b8df72ffad258627b"
          },
          {
            "type": "html",
            "text": "\nAt the risk of seeming egotistical, here's something I wrote on [[Oo Empirical Evidence]]. I really like it. (And besides, that's what this home page is about. Me me me me me. Scroll down... way down... if you want stuff by other people.)",
            "id": "e153784d3235902cada44e4202a9e1ca"
          },
          {
            "type": "html",
            "text": "Every so often, I have a customer ask me to show that I'm improving productivity. In one case, it was because the company wanted productivity to improve over time; in another, it was because they were considering paying for another programmer to be added to the project.",
            "id": "217fe7d5541ee2716e53f8616d11e3e3"
          },
          {
            "type": "html",
            "text": "Whenever this happens, I'm put into a quandary. I <i>don't know how</i> to objectively measure productivity in the programming world. I can define it - \"productivity = features / effort\" - and I can measure effort - but I can't measure features. And that stumps me every time.",
            "id": "2bd9b1ea6d0aebfe3aec6ad9c56cce26"
          },
          {
            "type": "html",
            "text": "I'm aware of the function point metric, but last time I looked at it, it wasn't entirely measuring features. It included stuff like \"number of database tables\" and \"number of forms.\" A sufficiently clever team might spend <i>more</i> time per function point and come up with <i>fewer</i> forms and database tables, while still satisfying the base requirement. They would be penalized, because they would seem less productive. [[Behavioral Effect Of Metrics]] (blatant plug) says that you'll get what you measure. If you measure productivity using function points, then you'll get lots of forms and database tables, and that will lead to crappy software.",
            "id": "5d502889befc85c67685333f3ec30a30"
          },
          {
            "type": "html",
            "text": "This is a very basic problem. If we can't objectively measure productivity in software projects, then we have <i>no way</i> to say whether or not OO is better than procedural. We can't say whether or not anything is better than anything. We have nothing but anecdotal evidence and personal experience. If that's all we have, fine, I can use that with some success. But it's very hard to defend to a business person, and a hell of a way to run a profession.",
            "id": "17102c8328ed1da91709a7c2ad1b03e7"
          },
          {
            "type": "html",
            "text": "-- [[Jim Little]]",
            "id": "286aca9a91214d15eb04cd7ae6a74367"
          },
          {
            "type": "html",
            "text": "\nHere's something else I wrote recently that I think is way cool... except that it implies that refactoring is a stand-alone activity, rather than being an active part of development. Oh, well. It's still a fun analogy.",
            "id": "ad87ea46d5c9585ef18b7426b8856614"
          },
          {
            "type": "html",
            "text": "Here�s an analogy that illustrates the difference between refactoring and rewriting.",
            "id": "fb8dfe14ca246a0fcd67e1cfeed8b6ca"
          },
          {
            "type": "html",
            "text": "Imagine that you�re a young boy, sitting in your room, playing with a Rubik's cube.  It�s all jumbled up, and you want to solve it before dinner. Your mom is going to call you to dinner in fifteen minutes.",
            "id": "8b71b46e803ec6431dda997cc586a953"
          },
          {
            "type": "html",
            "text": "Okay, the analogy here is that the boy is the programming team, the Rubik's cube is the application, and dinnertime is the ship date. The cube is jumbled up, but it�s still in one piece: the application works, but it doesn�t have everything neatly lined up.",
            "id": "e47e03160aedf2f4558a786dd0f7ea9c"
          },
          {
            "type": "html",
            "text": "So you want to solve the Rubik�s cube. What do you do?",
            "id": "f32043c28a71421131ea004beda67ab3"
          },
          {
            "type": "html",
            "text": "Well, when I was kid, I took a screwdriver to it. I levered out each of the little squares - sproing! - and then fit them all back together in the correct order. The problem was that sometimes the pieces went flying across the room. Sometimes I couldn't find them all before dinnertime, and my cube ended up with pieces missing.",
            "id": "28b5096cb17ac4ab7726850cc0f15f20"
          },
          {
            "type": "html",
            "text": "I had a friend who was a little more determined. You might even say plodding.  He would turn the Rubik's cube back and forth, back and forth.  He would think a lot before making each turn, so he wasn�t usually done before dinner either. But every turn he made got the cube a little bit closer to being solved. When he got called to dinner, the cube wasn�t always done, but it was always in one piece, and it was always better off than when he started.",
            "id": "4a4f1e55841a53353c626d4b0f58424a"
          },
          {
            "type": "html",
            "text": "Rewriting software is like taking apart a Rubik's cube. It�s tempting and easy, but you run the risk of losing a piece.  Refactoring is like solving the cube. It's kind of boring, and it requires you to think a lot, but turn by turn, the application gets better. You never lose a piece.",
            "id": "0391d7948736763d9656e85b74b3df04"
          },
          {
            "type": "html",
            "text": "Some people are whizzes with a Rubik's cube. They can solve it faster than I can take it apart and put it back together again, and they never lose a piece.  If we practice refactoring a lot, we'll be able to do the same thing.",
            "id": "7bf21893b2973a8e5de48f0defd81a1e"
          },
          {
            "type": "html",
            "text": "\nI've been thinking about my [[Definition Of Project Success]] recently. I have a very strict definition:",
            "id": "635dab5465cc70de9d4d5e5dce587778"
          },
          {
            "type": "html",
            "text": " The project [[Delivers Value]] to the person or organization paying for it.",
            "id": "71af6663439cd62fcade498ff30270e0"
          },
          {
            "type": "html",
            "text": " The project doesn't degrade the [[Quality Of Life]] of the people involved in producing it.",
            "id": "435542c3e7de9b018e2a1aa45c5a9fb8"
          },
          {
            "type": "html",
            "text": "\nA response to a post on the XP mailing list about the need for up-front design with some transactions and multithreading:",
            "id": "2db2a098d9c451350f52c9197caf777f"
          },
          {
            "type": "html",
            "text": "Having done \"hard\" retrofits several times, I strongly disagree.  I've retrofitted code with \"hard\" features three times now: security, transactions, and internationalization. Each time I was modifying good code that had zero prior design for the feature in question. In each case, the retrofit was easy.",
            "id": "afe796931bd0ebe5b8c481e01c91daae"
          },
          {
            "type": "html",
            "text": "About four years ago, I retrofitted transaction security into a client-server application I had led. By \"transaction security,\" I mean that every business operation was verified by the server when it occurred and backed up by a pretty user interface. The code was very good, but not stellar. It took a team of three programmers about four days to add that code. Most of it was fairly mindless modification: we added security status objects that we passed around and added security checking to every server-side entry point. (There were quite a few.)",
            "id": "ecc007924fabd8107c3509f181beb9b9"
          },
          {
            "type": "html",
            "text": "A year or so after that, I retrofitted business transactions into a web-based application I was leading. This project had been developed with XP and had outstanding code. It was a little more complex than it needed to be, but I was still new to XP. This retrofit, which was more significant than the security retrofit, took much less time because the code was better. It took one pair about a day, maybe two. We extended an existing database connection object, already used by most business objects, renamed it to \"Transaction,\" and added commit and rollback features. Then we modified existing centralized database and exception-handling logic to use it.",
            "id": "bbcf684dae2b4d2e171ae1bc02e39fe4"
          },
          {
            "type": "html",
            "text": "About half a year later, I retrofitted the same web-based application with internationalized input and output. At the time, that web application was one of the few on the net (that I'm aware of) that handled international input successfully. The code had been getting steadily better over time, thanks to XP practices, and at this point was absolutely fantastic. The change took one pair about four hours of coding, if that. (There was a lot more time spent researching Unicode and internationalization issues.) It required a five-line change to the centralized user input processing and another ten-line change to the centralized output template picker.",
            "id": "7df2860bc8bdab2520da9bc2e17e689e"
          },
          {
            "type": "html",
            "text": "We did not design in advance for any of these problems. It might seem like it (why have a centralized user input processing method, otherwise?), but in fact we were just following good XP design principles: simplicity and reduction of duplication. At one point, we had the same two lines of user input handling duplicated in three or four places. We refactored that into a centralized method. Months later, when we had dozens of pages, we came back and reused that method to support international input. No grand design, just damn good code.",
            "id": "a7cd4ce7f56200c2e708e29657e80c5f"
          },
          {
            "type": "html",
            "text": "The common wisdom is that some things are so hard they require up-front design. I've pushed this theory, and it hasn't pushed back. I'm not so sure it's true. I think they require good code, but up-front design isn't the only way to get that. And in my experience, it's not the most effective way to get it, either.",
            "id": "dddfbc92742470f9bfe038d0b10829c1"
          },
          {
            "type": "html",
            "text": "\nA random statement I made recently that I like. I know this is going to come back and bite me, but I have to post it anyway. (Vanity, thou art a cruel master!)",
            "id": "9d7e78922a586c6223c37fa7ee2c3f44"
          },
          {
            "type": "html",
            "text": "If you can't be selectively dogmatic, you can't do XP.",
            "id": "b39f8e367f097b6ec97ab4b9d3517b0b"
          },
          {
            "type": "html",
            "text": "\nI'm writing an article about [[Continual Design]]. Here's a thought that occurred to me as I wrote. It's a silly metaphor, but a fun comment.",
            "id": "1ed5ac672a873a8c3e2fb97e3b07864a"
          },
          {
            "type": "html",
            "text": "Why is it that continual design doesn't back you into a corner like up-front design does? With the lack of planning, you'd think you'd be <i>more</i> likely to end up in a corner, not less. The reason: continual design is focused on simplicity. In continual design, there are no walls... just the floor you're painting. Hence, no corners to be backed into.",
            "id": "994c49e5ee17b5d946c5adf31e40974d"
          },
          {
            "type": "html",
            "text": "\nI just wrote quite a bit on [[Object Oriented For Dummies]], which inspired and then fed off of [[Good Design]]. It's 4:30 am.  Right now, I'm thinking this is great stuff. I fear what I'll think in the morning. (Or rather, when I wake up, which probably won't actually be morning anymore.)",
            "id": "badd6c139d5e73cb5e66555372df6238"
          },
          {
            "type": "html",
            "text": "\nI just saw \"The Bar is Higher Now\" on [[Michael Feathers]]' blog ([http://www.artima.com/weblogs/viewpost.jsp?thread=42486 www.artima.com]):",
            "id": "620e149e61de5999de4df06f900200ab"
          },
          {
            "type": "html",
            "text": "I love it.  I think that [[Dont Repeat Yourself]] and [[Coupling And Cohesion]] are basic principles of [[Good Design]].  [[Dont Repeat Yourself]] is easy to understand and apply.  [[Coupling And Cohesion]] isn't.  I've been looking for a simple rule to use to help people understand these rules, and I think Michael's hit on one for decoupling: Can you take any arbitrary class and write a unit test for it, alone, in a few minutes?  Brilliant.  Now, what about cohesion?",
            "id": "c96429e6bcdb85ac4ce1e8cd18aef5e6"
          },
          {
            "type": "html",
            "text": "\nA thought on [[Law Of Demeter]]:",
            "id": "922a898c7fa11cb02ce17e9896f8a906"
          },
          {
            "type": "html",
            "text": "I have to admit, I've always been a bit unclear on the Law of Demeter.  I understand what it is and why it exists, but the formal definition never made total sense to me.  And when I try to explain it to others, I get bogged down.  Still, I've been looking for a simple guideline, like the [[Pragmatic Programmers]]' [[Dont Repeat Yourself]], that does for coupling what [[Dont Repeat Yourself]] does for duplication.  (Actually, I mentioned this in the blurb just above.)",
            "id": "50db3d46bd398453f2e5a403ddf886b6"
          },
          {
            "type": "html",
            "text": "I think I may have found one.  It's not quite as encompassing as [[Law Of Demeter]], but it's a lot simpler, and might have the kinds of emergent properties I love about [[Dont Repeat Yourself]].  Here it is:",
            "id": "4b7f3df63763b5554a617eef47c38c3a"
          },
          {
            "type": "html",
            "text": "Don't implement \"set\" methods.  ",
            "id": "98be842d1bf8b7b234956023789c148f"
          },
          {
            "type": "html",
            "text": "You can pass parameters into an object when you construct it, and you can pass messages that include parameters, but except in the constructor, you can't write any method that does nothing but take a parameter and store it in an instance variable.",
            "id": "5561dd023d44b7f7a718b42b41621f3d"
          },
          {
            "type": "html",
            "text": "Wacky idea, I know.  I'm going to experiment with it for a few years and let you know how it works out.  :)",
            "id": "6cc4bc15188e4333240c7ec00cf22c0c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "<b>About me:</b>",
            "id": "987f5509ceed63c3c73550dcc2b148ee"
          },
          {
            "type": "html",
            "text": "\nI'm a programmer who's very interested in high quality software and effective methodologies. I'm a sporadic contributor to Wiki - I have bursts in which I'll contribute a lot, but then I'll go away for a while. Right now, most of my energy is focused on [[Nunit Asp]]. I've also been recruited for the C# port and maintenance of fit ([[Framework For Integrated Test]]).",
            "id": "3810cbbfb2ef72f2062f734c42449c35"
          },
          {
            "type": "html",
            "text": "\nI like creating small pages that focus on a single concept, then seeing the pages grow as people add their thoughts. I experiment with writing as compactly and clearly as possible. I also experiment with concepts: I'll start a page as a way of trying out an idea, as well as a way of seeing what other people think.  Sometimes I'll write provocatively in order to seed discussion:",
            "id": "13cbfd630a8ff46806f8340db64b9d86"
          },
          {
            "type": "html",
            "text": " [[Design Patterns Considered Harmful]]",
            "id": "2f52fb615c53bd4707bd46b200aeb10a"
          },
          {
            "type": "html",
            "text": " [[Avoid Or Embrace Libraries]]",
            "id": "330205b4b50174facc46d5a22d433158"
          },
          {
            "type": "html",
            "text": " [[Distribution Is Optimization]]",
            "id": "b11f8724a0d41ec0da6d2aa69fa7bb75"
          },
          {
            "type": "html",
            "text": " [[Productivity Rant]]",
            "id": "22769140bbd0efa16bc0977c9b75d2b2"
          },
          {
            "type": "html",
            "text": " [[First Rule Of Logging]] (this one was very controversial, but resulted in the fantastic [[Logging Discussion]], mostly thanks to [[Steve Howell]]'s refactoring)",
            "id": "0b73af609652b5c954e4f46f5ebfff11"
          },
          {
            "type": "html",
            "text": "\nMy current favorite contribution has been the \"[[Process Principles]]\" set of pages, which I mostly created in August and September of 2001. In these, I'm experimenting with the beginnings of a process pattern language. Eventually, I'd like to collect enough process patterns and forces to write a book about creating processes customized to an individual project and work environment.  Here's the pages:",
            "id": "3401ce135eddd27c47b5ad1f74c4a12d"
          },
          {
            "type": "html",
            "text": "\"[[Process Principle]]\" pages:",
            "id": "941e7db529e598922c02af4462fa1620"
          },
          {
            "type": "html",
            "text": " [[Eliminate Technical Debt]] (includes [[Eliminate Design Debt]])",
            "id": "48b0adc291d102ce04aadc8a8c3aa47d"
          },
          {
            "type": "html",
            "text": " [[Acknowledge Fallibility]]",
            "id": "b8a885f54be4aea7c04d3cde5e4ad40e"
          },
          {
            "type": "html",
            "text": " [[Collaborate For Success]]",
            "id": "8b785ff1128f865cdf57527377b4c3d9"
          },
          {
            "type": "html",
            "text": " [[Remember The Future]]",
            "id": "e39dac8e644644844c0be2586f768cef"
          },
          {
            "type": "html",
            "text": " [[Deliver Value]]",
            "id": "6eaf22b577202e1941b8443cbae39a3e"
          },
          {
            "type": "html",
            "text": " [[Maximize Programming Time]]",
            "id": "0254bdad72513d1c7a3485a5b83fd6f5"
          },
          {
            "type": "html",
            "text": " [[Focus On People]]",
            "id": "1742347c2708e89801836bc877239190"
          },
          {
            "type": "html",
            "text": " [[Question Conventions]]",
            "id": "7d4345ed50f2387d43881bad50e6e6c7"
          },
          {
            "type": "html",
            "text": " [[Replace Documentation]] (and [[Problems With Documentation]], and [[Self Documenting User Interface]])",
            "id": "af9bb7f6858dc6dbf81e982c18c312b4"
          },
          {
            "type": "html",
            "text": " [[Improve The Process]]",
            "id": "f2f1fe8a98f83fa2ad37750cd3cee686"
          },
          {
            "type": "html",
            "text": " [[Minimize The Cost Of Change]]",
            "id": "87d0ba1165f9fe7d74d422e47e72fbc6"
          },
          {
            "type": "html",
            "text": "\nRelated [[Process Pattern]] pages that I authored:",
            "id": "3e14971a9ac03a0f60fd0f0f61829cde"
          },
          {
            "type": "html",
            "text": " [[Expose Errors]]",
            "id": "fede79fd8c6d1e5f806ac7e2cefe84dd"
          },
          {
            "type": "html",
            "text": " [[Fix The Process]]",
            "id": "4a0e45db7e8cb796d0aa8cd336e2d441"
          },
          {
            "type": "html",
            "text": " [[Support Swami]]",
            "id": "fbef11458669b19290c1def19be079ec"
          },
          {
            "type": "html",
            "text": " [[Prove Assumptions]]",
            "id": "1c5233c9d59c41d7ce50052e0b13a292"
          },
          {
            "type": "html",
            "text": " [[Oral Tradition]]",
            "id": "5709d165ff8327b53f87b44774c0ea9d"
          },
          {
            "type": "html",
            "text": " [[Document Last]]",
            "id": "c31e99c6ac45cc7371ef58be98565433"
          },
          {
            "type": "html",
            "text": " [[Automate Processes]]",
            "id": "3ec4f9bd87a9a4410bf2a773bc915cd5"
          },
          {
            "type": "html",
            "text": "\nI once heard Ward Cunningham talk about the idea of complexity as debt, and I thought it was a great metaphor. I wrote several pages about that idea:",
            "id": "2dc2fba273b3216f35fe91154229c105"
          },
          {
            "type": "html",
            "text": " [[Complexity As Debt]]",
            "id": "a32817667ef4f25dd4e3beedebb5c1af"
          },
          {
            "type": "html",
            "text": " [[Design Debt]]",
            "id": "ad495e7b26b7fba209e04360009ab80c"
          },
          {
            "type": "html",
            "text": " [[Eliminate Design Debt]]",
            "id": "6a1cc4ee4e611d04573ebbe0170afbc9"
          },
          {
            "type": "html",
            "text": " [[Extreme Programming Principles]]",
            "id": "0e4ce732d7dc3aa38ddd372a56c23607"
          },
          {
            "type": "html",
            "text": "\nI own a small consulting business and once had grand ideas for it. I've since learned better, but the pages I wrote during that time are still around:",
            "id": "67eab2d80a82dbbc9f70b6a0b4a95bd3"
          },
          {
            "type": "html",
            "text": " [[Managementless Organization]]",
            "id": "12279dbcd40aa2d0e3481e9ca35b44e9"
          },
          {
            "type": "html",
            "text": " [[Compensation Game]]",
            "id": "b8860763904f96fda8f9c8a17dfd4457"
          },
          {
            "type": "html",
            "text": "\nI've done a fair amount of [[Extreme Programming]]. I started using it in April 2000, and written some pages about it:",
            "id": "c7c067f8246fd81226a2675c63317f95"
          },
          {
            "type": "html",
            "text": " [[Ats Goes Extreme]] and [[Ats Diary]] -- my first exposure to XP.  Old, but still interesting.",
            "id": "f4c834ff398d3d614f63cc43d394ec9e"
          },
          {
            "type": "html",
            "text": " [[Up Front Design Versus Evolutionary Design In Denalis Persistence Layer]] -- my XP Universe (2001) experience report.  ",
            "id": "41396c7cc16fd82feb9a00034e7d3a7e"
          },
          {
            "type": "html",
            "text": " [[Extreme Programming Principles]]",
            "id": "0e4ce732d7dc3aa38ddd372a56c23607"
          },
          {
            "type": "html",
            "text": "\nI love stories. They're fun to read, fun to write, and a great way to learn.  Some of the pages I created are for stories:",
            "id": "e95664e34b0ab2f5d79a0274e06bf888"
          },
          {
            "type": "html",
            "text": " [[Optimization Stories]]",
            "id": "c83fd32f9c6f256aeaf11658a21c521a"
          },
          {
            "type": "html",
            "text": " [[Distribution Stories]]",
            "id": "8d5c833b5be781c76d1e837a01cd0457"
          },
          {
            "type": "html",
            "text": " [[Behavioral Effect Of Metrics]]",
            "id": "1cad08592003116c31154e9fc15a6245"
          },
          {
            "type": "html",
            "text": "\nFinally, I have a few pages which focus purely on the nuts and bolts of programming:",
            "id": "b404778f6efffcfd6c6556e7a45111c0"
          },
          {
            "type": "html",
            "text": " [[Commenting Challenge Response]] (I really like this one)",
            "id": "9747793b0cf0d042c2db520858542fe2"
          },
          {
            "type": "html",
            "text": " [[Catch Dont Check Refuted]]",
            "id": "383807ec20738b3dbe8bc8089151ef22"
          },
          {
            "type": "html",
            "text": "\nThat's all the pages that I can think of right now. If you've gotten this far, you probably need to go do whatever it is that you've been putting off. :) But if you've had a chance to read some of these pages, I'd love to hear your comments, good and bad. Knowing that people are listening is what keeps me writing. There's a place for comments at the bottom of the page.",
            "id": "a231058568b690d952e56dd398571e0d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "<b>About others, mostly:</b>",
            "id": "cdee3dae8a60670dad1d19e5cb4ea3c5"
          },
          {
            "type": "html",
            "text": "\nThus ends the self-aggrandizing part of my home page. The rest is stuff by other people.",
            "id": "bda01ea9958c6bde411c6dfee6b48b31"
          },
          {
            "type": "html",
            "text": "\nHere's some other links that I like or want handy:",
            "id": "4e5ea90089ca1df11f4b1f151edbb8c6"
          },
          {
            "type": "html",
            "text": " [[Recent Changes]] or [http://c2.com/cgi/quickChanges c2.com]",
            "id": "3c17776512c22168984d4ab38b8d2655"
          },
          {
            "type": "html",
            "text": " [[Program Transformation Wiki]]",
            "id": "109209e8507bfd3c73582e8b472a8f17"
          },
          {
            "type": "html",
            "text": " [[Three Week Project Turnaround]]",
            "id": "c018ece856d5213b570ce0bbe73b9d5f"
          },
          {
            "type": "html",
            "text": " [[Screechingly Obvious Code]]",
            "id": "fbfe932bc4db2abb15e868a5fe4ff92a"
          },
          {
            "type": "html",
            "text": " [[Category Code Smell]]",
            "id": "f87caa83fbb08c6b6afc859414df8479"
          },
          {
            "type": "html",
            "text": " [[Organizational Patterns]] | [http://i44pc48.info.uni-karlsruhe.de/cgi-bin/OrgPatterns?BookOutline i44pc48.info.uni-karlsruhe.de]",
            "id": "e7c2fa6d9438d19526390395278e28fa"
          },
          {
            "type": "html",
            "text": " [[Extreme Hour With Actual Programming]]",
            "id": "7c0e60372b3da307a627096818aaa13c"
          },
          {
            "type": "html",
            "text": " [[Raise The Papers Potential]]",
            "id": "a107f797bfa86be022d24ddfbafdf7f7"
          },
          {
            "type": "html",
            "text": " [[String Buffer]]",
            "id": "73bb1515e0f28d6f79e97c1ece56bd29"
          },
          {
            "type": "html",
            "text": " [[Extremely Spoiled Child]]",
            "id": "d41483cc108c94da9c921f9a2ccc562a"
          },
          {
            "type": "html",
            "text": " [[The Internet Is Not Your Life]]",
            "id": "f0ed056615904d9bc571910bbffaf512"
          },
          {
            "type": "html",
            "text": " [[Conquer With Compassion]]",
            "id": "09f12eaa605fc909be97878a996cbc46"
          },
          {
            "type": "html",
            "text": " [[Community Life Cycle]]",
            "id": "2bd3141f0504799e472ed654ec61b187"
          },
          {
            "type": "html",
            "text": " [[Fix Your Wiki]]",
            "id": "5d287eb4fde5115d6cde8cc101b4d1b5"
          },
          {
            "type": "html",
            "text": " [[Patterns For Effective Meetings]]",
            "id": "c8e7c53db1aae83faaa61f0c1e92d9d2"
          },
          {
            "type": "html",
            "text": " [[Real Story About Developer Turned Manager]]",
            "id": "4decc83c7574a4c5f04f9e5336f5f17e"
          },
          {
            "type": "html",
            "text": " [[Principles Of Object Oriented Design]]",
            "id": "bc90a568cb9aa7d613dc8131464e1c21"
          },
          {
            "type": "html",
            "text": " [[Collecting Seashells]]",
            "id": "2eb18d909d253c38ea49f4e2ed8216f0"
          },
          {
            "type": "html",
            "text": " [[Three Levels Of Audience]] | [[Shu Ha Ri]]",
            "id": "96a2598fc1d2240e85a1d9c2cea23d32"
          },
          {
            "type": "html",
            "text": " [http://radio.weblogs.com/0100190/stories/2002/07/25/sixRulesOfUnitTesting.html radio.weblogs.com]",
            "id": "dc1eb374c89e15e3064eae60c8052edc"
          },
          {
            "type": "html",
            "text": " [[Cautious Buy Over Build]]",
            "id": "1f8b33f91465dc65e671302cf64997c6"
          },
          {
            "type": "html",
            "text": " [http://www.thomsett.com.au/main/articles/path/toc.htm www.thomsett.com.au] (\"Project Pathology:<br>Causes, patterns and symptoms of project failure\")",
            "id": "4ed89caf7045c241c087ebdf820e2fed"
          },
          {
            "type": "html",
            "text": " [[The Emperors Old Clothes]]... wonderful!",
            "id": "e2ffa63de2c2e355f21adfe7c511139c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "\nSome quotes I like:",
            "id": "3baf55f8a7b227045706443911de35d3"
          },
          {
            "type": "html",
            "text": "I learned to write [[Unit Test]]s while I was still a Java fanatic. I wrote some tests; they caught some bugs. I wrote more, they caught more. By the time I had enough tests to be confident that I had [[Near Zero Bugs]]?, I didn't feel like I needed the static typing anymore. I shouted, \"Aha!\" and went to try out Smalltalk. -- [[Adam Spitz]], [[Static Type Safety]]",
            "id": "ff44f660c6fb8fed4dd73ffbce19ea8d"
          },
          {
            "type": "html",
            "text": "Computer Science graduates tend to be loud advocates of anything formal, regardless of their own (lack of) experience in usefully applying such tools. -- [[Anonymous Donor]], [[Static Type Safety]]",
            "id": "e89cb6b0a63feb278cb42346497d7640"
          },
          {
            "type": "html",
            "text": "Since foresight doesn't work, don't rely on it. Go for early hindsight. -- [[Ben Kovitz]], [[Only Foresight Matters]]",
            "id": "76923b902e804c7560842d02ce69af76"
          },
          {
            "type": "html",
            "text": "Somebody said (and I think it's on Wiki somewhere), \"People hate change.\" The first reaction is, \"Yeah, well, <i>everyone</i> knows that!\" To which the proper reply is, \"No, you don't understand, people really <b>really</b> hate change.\" -- [[Anonymous Donor]], [[They Will Not Listen]]",
            "id": "e3dcba8adb59f56863658c9865882a40"
          },
          {
            "type": "html",
            "text": "Estimates are about \"how much work does it take\". Delivery (velocity) is about \"when will we get it\". This is why I find estimating clock/calendar time to be sketchy. -- J. B. Rainsberger, XP mailing list",
            "id": "6a73e3919381911d58181100eb99fbe7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "\nFor sushi lovers:",
            "id": "81dc98af71456b8271f1fb21f70a8635"
          },
          {
            "type": "html",
            "text": "The first dish we tried was raw octopus. It was very, very raw. It had been chopped up into little strips, and doused with sesame oil, but each of the individual pieces was still squirming and writhing vigorously. One of our Koreans hosts demonstrated how to eat it. Grab a piece quick and put it into the hot sauce (a self-saucing food - it wriggles itself full of sauce) and then eat it quick before it stops moving.",
            "id": "65262ccf0f303a5c9b07d7abcd6f0be1"
          },
          {
            "type": "html",
            "text": "I decided to start with the smallest, most straightforward piece I could find. I fastened my silver chopsticks on the tip of a small tentacle.. Big surprise. The dismembered tentacle's suction cups grabbed the plate and wouldn't let go. I pulled, and the plate lifted. I poked it for a while, and it finally bonded to one of the chopsticks. I quickly dunked it into the red-hot sauce (no apparent effect on the still animate tentacle) and pried it off the chopstick with my teeth. It didn't fight too much once it was inside my mouth. Later I discovered from someone in Seoul that every year several people choke to death when the tentacles fasten themselves on the inside of their throats. I never realized enjoying local cuisine could be so risky.",
            "id": "0baaa2eac99123906a7c673254cf97df"
          },
          {
            "type": "html",
            "text": "(from [http://www.ntv.co.jp/ghibli/Pmo/0512e.html www.ntv.co.jp])",
            "id": "d252d341c32ab0d7a3a31d97ba05e2f3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "\nAn interesting stat: Slashdot's normal peak load is 25 pages/second, using 6 servers. That's more processor power than I expected for a popular site like Slashdot. (On the other hand, it's a DB-intensive site.) Prior to the WTC bombing, their hit record was 1.6M pages in a day, and their average was 1.4M ppd.",
            "id": "0247b337252527e4050548580e7e4dbc"
          },
          {
            "type": "html",
            "text": "\nOn Tuesday, the day of the WTC attack, they peaked at 70 pps, and served nearly 3 million pages. They continually monitored performance and tweaked the code to deal with the load. Average page serving time slowed by 2 seconds per page after performance tweaks.",
            "id": "28192df3d7e192077570239a1899c7c4"
          },
          {
            "type": "html",
            "text": "(extracted from [http://slashdot.org/article.pl?sid=01/09/13/154222&mode=nocomment slashdot.org])",
            "id": "6b3d1db90d58a100f98436af275688a7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "\nFrom the stating-the-obvious department:",
            "id": "5b3e807a1aa72290f77d88f0077b7b6e"
          },
          {
            "type": "html",
            "text": "It's easier to add features to an architecture than to remove them. If you have a misguided feature that a bunch of classes are using, taking it out requires that you modify all kinds of existing code... correctly! On the other hand, if you have a new feature that would make life easier, adding it doesn't require that you retrofit any old code.",
            "id": "ecf39fcbebeae97b90987775b4a208b6"
          },
          {
            "type": "html",
            "text": "This is why architectures and designs with don't do much are better than ones that do a lot. It's counter-intuitive, but true: the more your design anticipates future needs, the less prepared it is to deal with future requirements.",
            "id": "9369b2fce262dedc8349ebddb9882677"
          },
          {
            "type": "html",
            "text": "(This is a basic XP principle so I'm being very redundant here. But this particular twist on [[Do The Simplest Thing That Could Possibly Work]] just occurred to me. I'm going to search Wiki when I have time and see if it deserves its own page.)",
            "id": "f41a8714ffdb2a3b8f4cd51b7ecb6c2c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "\nA success story about completely refactoring an old, crufty application in three weeks. Apparently no tests were used or added.",
            "id": "4c9fd67c6440bdb8ba4cdfd3e3a9ae20"
          },
          {
            "type": "html",
            "text": "[http://www.joelonsoftware.com/articles/fog0000000348.html www.joelonsoftware.com]",
            "id": "ac502cd19d7ec593cf35ec17c1067741"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "\nRandom thoughts not yet worthy of their own page:",
            "id": "3106be8aa0c7c19ea444f6d564a5bdbf"
          },
          {
            "type": "html",
            "text": " The programmers' bookshelf should contain few specific language and tool how-to books and many books on general principles and practices.",
            "id": "c3753f4417c5d008fd7be579ffb2f2ea"
          },
          {
            "type": "html",
            "text": " Constructors should never do any significant work. Although having an object be fully baked after construction is nice, it leads to coupling issues that can make testing extremely difficult. As the code evolves, the coupling can lead to code that is fragile and resistant to change. Instead, use [[Lazy Initialization]] in those cases where significant work is necessary.",
            "id": "59e0955f2e8338030e8e7a3f4c72378f"
          },
          {
            "type": "html",
            "text": " When using [[Lazy Initialization]], avoid side effects. I've twice seen a case where [[Lazy Initialization]] was used to log into a remote system (once was in my own code!) and both times it resulted in confusing and brittle code.",
            "id": "0f7f5ccdc3a72d471a8ed2fea4a63d75"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "\nResearch on the effects of eye-contact in group discussions:",
            "id": "f973722e1be1bdd0731025a6351f9de0"
          },
          {
            "type": "html",
            "text": "  \"The effect of eye gaze has literally fascinated people throughout the ages,\" says Dr. Vertegaal, whose paper, Explaining Effects of Eye Gaze on Mediated Group Conversations:<br>Amount or Synchronization? was presented this week at the Association for Computing Machinery (ACM) Conference on Computer Supported Cooperative Work.",
            "id": "b39daeeb9e4131ef8b3aa62ef651cd72"
          },
          {
            "type": "html",
            "text": " [http://www.sciencedaily.com/releases/2002/11/021122073858.htm www.sciencedaily.com]",
            "id": "dc1231f8d8f11513b021f748075d2c9d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "\nThis is an entertaining story, in a way that only the very wacky true stories can be.  It's about a couple of guys who snuck into Apple to create the \"graphing calculator\" application that was shipped with every [[Power Macintosh]].",
            "id": "4601533c74df0f3b205040e289b09feb"
          },
          {
            "type": "html",
            "text": " [http://www.pacifict.com/Story/ www.pacifict.com]",
            "id": "de1443f9d302bb9aeb8e4a30b4a923dc"
          },
          {
            "type": "html",
            "text": "<i>I wonder if history is repeating itself?  To very little fanfare, [[Mac Osx]] version 10.4 \"Tiger\" will again include a free ultra-nifty graphic calculator. -- [[Ian Osgood]]</i>",
            "id": "68abdb6afb8a9d181094d1c45c29097b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "<b>Leave me a comment here.</b> I like hearing from other people.",
            "id": "a83541799524d827aec1538b53dc23b4"
          },
          {
            "type": "html",
            "text": "\nIs this the same Jim Little? [http://www.cs.ubc.ca/~little/ www.cs.ubc.ca]",
            "id": "7439a99fca5aaf15ec6d5c4001857187"
          },
          {
            "type": "html",
            "text": "<i>Nope, not me. Here's me (on the right):</i>",
            "id": "7eebc0a68e9f8bca9ea02fbe283501cb"
          },
          {
            "type": "image",
            "url": "http://fit.c2.com/files/DotNetPlatform/team-small.jpg",
            "text": "fit.c2.com",
            "id": "d513a8767aa48101045ad10a9944253a"
          },
          {
            "type": "html",
            "text": "\n",
            "id": "bf2ec278d5882621376cec5ce1fa1cbf"
          },
          {
            "type": "html",
            "text": "\nJim got a haircut since the last time I saw him. (-- Alistair)",
            "id": "9b56db5a4ba76f494106c226eea4e21f"
          },
          {
            "type": "html",
            "text": "<i>I like the Rubik's cube story. Have you seen [[Nose Job Refactoring]]? -- [[Matthew Astley]]</i>",
            "id": "f35fbdef70853202f36f7ac89ddba03d"
          },
          {
            "type": "html",
            "text": "\nSorry girls, Jim is no longer available. Congratulations on the recent wedding, Jim! -- [[Rob Myers]]",
            "id": "dbb5d85b218916ee3d13d672c32e8d27"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "Jim, I appreciate the comment about making [[Fire Fox]] work with [[User Names]] - I tested and tweaked the info a little and put it on the [[User Name]] page. Thanks again! -- [[Layne Thomas]]",
            "id": "46e8af25f6c19721ef6da2fa3a9b16bc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "Jim I have motioned a delete of ManagementlessO<b></b>rganization and therefore its related CompensationG<b></b>ame, and CompensationG<b></b>ameTheoryAnalysis. Perhaps [[Egalitarian Compensation]] is a more suitable home for some of the material. If I am wrong please explain. thx",
            "id": "8cb83662cd104f3444419c4825147f55"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a6873c633f729942035cf808fe62ec4c"
          },
          {
            "type": "html",
            "text": "[[Category Home Page]]",
            "id": "bbd6d339189930aa2da200df85be883f"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?JimShore c2.com]",
            "id": "051c6ca5306718ea8747af4d5dbd19bb"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1660314981768
    }
  ]
}