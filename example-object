{
  "title": "Example Object",
  "story": [
    {
      "type": "markdown",
      "id": "6a6f014126edd419",
      "text": "**Problem:** [https://book.gtoolkit.com/example-object-dyquv1b6xptl2c0ayhgb376bw page]"
    },
    {
      "type": "paragraph",
      "id": "197203ba7c0dfe36",
      "text": "How do you organize examples for testing and documentation? "
    },
    {
      "type": "markdown",
      "id": "d2a4a845ac0c5cdf",
      "text": "**Forces:**"
    },
    {
      "type": "paragraph",
      "id": "9b84f02340a62466",
      "text": "Concrete examples are need for many purposes, such as documentation, testing, and exploration. Examples can be complex to set up.Unit tests consume examples, but they are only accessible if a test fails. "
    },
    {
      "type": "markdown",
      "id": "039f5493abe5852c",
      "text": "**Solution:**"
    },
    {
      "type": "paragraph",
      "id": "95841114be5b5884",
      "text": "Wrap examples as (instance) methods that optionally evaluate some tests (assertions), and return the example instance. Each example may also use one or more examples as the initial setup for the new example. "
    },
    {
      "type": "markdown",
      "id": "7e3d4af3cf92d85c",
      "text": "**Steps:**"
    },
    {
      "type": "paragraph",
      "id": "1fffd0aca7ae3832",
      "text": "To start, you need a modified unit testing framework in which tests return the exercised fixture, namely, an example. In GT, you create an Example by defining a parameterless method that has a <gtExample> pragma, and returns an object. (A similar framework for Java is JExample.)"
    },
    {
      "type": "paragraph",
      "id": "ce501d50a6a408bf",
      "text": "[…]"
    },
    {
      "type": "markdown",
      "id": "4b0c8d726f042d38",
      "text": "**Related patterns:**"
    },
    {
      "type": "paragraph",
      "id": "be0f2797ce761154",
      "text": "Examples can be embedded in the notebook pages of a [[Project Diary]].\n\nExamples can produce a [[Moldable Object]] for moldable development.\n"
    },
    {
      "type": "reference",
      "id": "209c68aff8fbd083",
      "site": "wiki.ralfbarkow.ch",
      "slug": "use-examples-rather-than-tests",
      "title": "Use Examples Rather than Tests",
      "text": "With [[Moldable Development]] we use examples rather than tests. Basically these are unit tests that return a live instance that you can interact with."
    },
    {
      "type": "markdown",
      "id": "057ec440a1ca1b2e",
      "text": "**Known Uses:**"
    },
    {
      "type": "paragraph",
      "id": "4a6889905b5ab1cd",
      "text": "\n(Consequences) Examples can be run just like classical unit tests.\n\nWhen an example fails, its dependent examples do not need to be run.\n\nWhen an example succeeds, it can be inspected, used as a moldable object to start coding, or embedded as a live example snippet within a notebook page to illustrate some point. (The example snippets above illustrate this.)\n\nWhen you are searching for usages of an API, not only do you find examples that illustrate the usage, but by running the example you obtain a live instance that you can explore.\n"
    },
    {
      "type": "pagefold",
      "id": "697e05389a42676f",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "da9c5e530c5de899",
      "site": "wiki.ralfbarkow.ch",
      "slug": "programming-by-example",
      "title": "Programming by Example",
      "text": "In the paper proposed by Myers (1990), the author makes use of a new Visual Programming tool ‘[[Peridot]]’ (Myers, 1988, 1987) for creating graphical and interactive interfaces. This language makes use of the interesting concept of “programming by example”. A picture of the required interface needs to be drawn by the user. This picture is then generalized by the system to generate a parameterized procedure. The user has to provide some example values for each parameter to enable the system in displaying a solid instance of the user interface."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Example Object",
        "story": [
          {
            "type": "markdown",
            "id": "6a6f014126edd419",
            "text": "**Problem:**"
          },
          {
            "type": "factory",
            "id": "197203ba7c0dfe36"
          },
          {
            "type": "markdown",
            "id": "d2a4a845ac0c5cdf",
            "text": "**Forces:**"
          },
          {
            "type": "factory",
            "id": "9b84f02340a62466"
          },
          {
            "type": "markdown",
            "id": "039f5493abe5852c",
            "text": "**Solution:**"
          },
          {
            "type": "factory",
            "id": "95841114be5b5884"
          },
          {
            "type": "markdown",
            "id": "7e3d4af3cf92d85c",
            "text": "**Steps:**"
          },
          {
            "type": "factory",
            "id": "1fffd0aca7ae3832"
          },
          {
            "type": "markdown",
            "id": "4b0c8d726f042d38",
            "text": "**Related patterns:**"
          },
          {
            "type": "factory",
            "id": "be0f2797ce761154"
          },
          {
            "type": "markdown",
            "id": "057ec440a1ca1b2e",
            "text": "**Known Uses:**"
          },
          {
            "type": "factory",
            "id": "4a6889905b5ab1cd"
          }
        ]
      },
      "date": 1702641873207
    },
    {
      "type": "edit",
      "id": "197203ba7c0dfe36",
      "item": {
        "type": "paragraph",
        "id": "197203ba7c0dfe36",
        "text": "How do you organize examples for testing and documentation? "
      },
      "date": 1702641889179
    },
    {
      "type": "edit",
      "id": "6a6f014126edd419",
      "item": {
        "type": "markdown",
        "id": "6a6f014126edd419",
        "text": "**Problem:** [https://book.gtoolkit.com/example-object-dyquv1b6xptl2c0ayhgb376bw page]"
      },
      "date": 1702641899691
    },
    {
      "type": "edit",
      "id": "9b84f02340a62466",
      "item": {
        "type": "paragraph",
        "id": "9b84f02340a62466",
        "text": "Concrete examples are need for many purposes, such as documentation, testing, and exploration. Examples can be complex to set up.Unit tests consume examples, but they are only accessible if a test fails. "
      },
      "date": 1702641948141
    },
    {
      "type": "edit",
      "id": "95841114be5b5884",
      "item": {
        "type": "paragraph",
        "id": "95841114be5b5884",
        "text": "Wrap examples as (instance) methods that optionally evaluate some tests (assertions), and return the example instance. Each example may also use one or more examples as the initial setup for the new example. "
      },
      "date": 1702641957484
    },
    {
      "type": "edit",
      "id": "1fffd0aca7ae3832",
      "item": {
        "type": "paragraph",
        "id": "1fffd0aca7ae3832",
        "text": "To start, you need a modified unit testing framework in which tests return the exercised fixture, namely, an example. In GT, you create an Example by defining a parameterless method that has a <gtExample> pragma, and returns an object. (A similar framework for Java is JExample.) "
      },
      "date": 1702641972416
    },
    {
      "type": "edit",
      "id": "1fffd0aca7ae3832",
      "item": {
        "type": "paragraph",
        "id": "1fffd0aca7ae3832",
        "text": "To start, you need a modified unit testing framework in which tests return the exercised fixture, namely, an example. In GT, you create an Example by defining a parameterless method that has a <gtExample> pragma, and returns an object. (A similar framework for Java is JExample.)"
      },
      "date": 1702642005714
    },
    {
      "type": "add",
      "id": "ce501d50a6a408bf",
      "item": {
        "type": "paragraph",
        "id": "ce501d50a6a408bf",
        "text": "[…]"
      },
      "after": "1fffd0aca7ae3832",
      "date": 1702642007769
    },
    {
      "type": "edit",
      "id": "4a6889905b5ab1cd",
      "item": {
        "type": "paragraph",
        "id": "4a6889905b5ab1cd",
        "text": "\n\nExamples can be run just like classical unit tests.\n\nWhen an example fails, its dependent examples do not need to be run.\n\nWhen an example succeeds, it can be inspected, used as a moldable object to start coding, or embedded as a live example snippet within a notebook page to illustrate some point. (The example snippets above illustrate this.)\n\nWhen you are searching for usages of an API, not only do you find examples that illustrate the usage, but by running the example you obtain a live instance that you can explore.\n"
      },
      "date": 1702642059597
    },
    {
      "type": "edit",
      "id": "4a6889905b5ab1cd",
      "item": {
        "type": "paragraph",
        "id": "4a6889905b5ab1cd",
        "text": "\n(Consequences) Examples can be run just like classical unit tests.\n\nWhen an example fails, its dependent examples do not need to be run.\n\nWhen an example succeeds, it can be inspected, used as a moldable object to start coding, or embedded as a live example snippet within a notebook page to illustrate some point. (The example snippets above illustrate this.)\n\nWhen you are searching for usages of an API, not only do you find examples that illustrate the usage, but by running the example you obtain a live instance that you can explore.\n"
      },
      "date": 1702642076972
    },
    {
      "type": "edit",
      "id": "be0f2797ce761154",
      "item": {
        "type": "paragraph",
        "id": "be0f2797ce761154",
        "text": "Examples can be embedded in the notebook pages of a [[Project Diary]].\n\nExamples can produce a Moldable object for moldable development.\n"
      },
      "date": 1702642107464
    },
    {
      "type": "edit",
      "id": "be0f2797ce761154",
      "item": {
        "type": "paragraph",
        "id": "be0f2797ce761154",
        "text": "Examples can be embedded in the notebook pages of a [[Project Diary]].\n\nExamples can produce a [[Moldable Object]] for moldable development.\n"
      },
      "date": 1702642130569
    },
    {
      "item": {
        "type": "factory",
        "id": "697e05389a42676f"
      },
      "id": "697e05389a42676f",
      "type": "add",
      "after": "4a6889905b5ab1cd",
      "date": 1702642219021
    },
    {
      "type": "edit",
      "id": "697e05389a42676f",
      "item": {
        "type": "pagefold",
        "id": "697e05389a42676f",
        "text": "~"
      },
      "date": 1702642222802
    },
    {
      "item": {
        "type": "factory",
        "id": "da9c5e530c5de899"
      },
      "id": "da9c5e530c5de899",
      "type": "add",
      "after": "697e05389a42676f",
      "date": 1702642224409
    },
    {
      "type": "edit",
      "id": "da9c5e530c5de899",
      "item": {
        "type": "reference",
        "id": "da9c5e530c5de899",
        "site": "wiki.ralfbarkow.ch",
        "slug": "programming-by-example",
        "title": "Programming by Example",
        "text": "In the paper proposed by Myers (1990), the author makes use of a new Visual Programming tool ‘[[Peridot]]’ (Myers, 1988, 1987) for creating graphical and interactive interfaces. This language makes use of the interesting concept of “programming by example”. A picture of the required interface needs to be drawn by the user. This picture is then generalized by the system to generate a parameterized procedure. The user has to provide some example values for each parameter to enable the system in displaying a solid instance of the user interface."
      },
      "date": 1702642231293
    },
    {
      "item": {
        "type": "factory",
        "id": "209c68aff8fbd083"
      },
      "id": "209c68aff8fbd083",
      "type": "add",
      "after": "da9c5e530c5de899",
      "date": 1702642559418
    },
    {
      "type": "edit",
      "id": "209c68aff8fbd083",
      "item": {
        "type": "reference",
        "id": "209c68aff8fbd083",
        "site": "wiki.ralfbarkow.ch",
        "slug": "use-examples-rather-than-tests",
        "title": "Use Examples Rather than Tests",
        "text": "With [[Moldable Development]] we use examples rather than tests. Basically these are unit tests that return a live instance that you can interact with."
      },
      "date": 1702642562218
    },
    {
      "id": "209c68aff8fbd083",
      "type": "move",
      "order": [
        "6a6f014126edd419",
        "197203ba7c0dfe36",
        "d2a4a845ac0c5cdf",
        "9b84f02340a62466",
        "039f5493abe5852c",
        "95841114be5b5884",
        "7e3d4af3cf92d85c",
        "1fffd0aca7ae3832",
        "ce501d50a6a408bf",
        "4b0c8d726f042d38",
        "be0f2797ce761154",
        "209c68aff8fbd083",
        "057ec440a1ca1b2e",
        "4a6889905b5ab1cd",
        "697e05389a42676f",
        "da9c5e530c5de899"
      ],
      "date": 1702642572620
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1706014352739
    },
    {
      "type": "fork",
      "site": "mold.dreyeck.ch",
      "date": 1706524684053
    }
  ]
}