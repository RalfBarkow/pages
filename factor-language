{
  "title": "Factor Language",
  "story": [
    {
      "type": "html",
      "text": "A [[Stack Based Language]] based on [[Joy Language]], [[Forth Language]], [[Lisp Language]], and [[Slate Language]]. It features the [[Cons Cell]] as the building block of code, [[Higher Order Function]]s, [[Call With Current Continuation]], [[Dynamic Typing]], and [[Dynamic Scope]].",
      "id": "3b867943a038d4092fc2eaaf69661466"
    },
    {
      "type": "html",
      "text": "\nSee [http://www.factorcode.org/ www.factorcode.org].",
      "id": "e35ce9b003fe5eff2da3a0dbef8d5a28"
    },
    {
      "type": "html",
      "text": "\nFor a sample, [http://docs.factorcode.org/ docs.factorcode.org] leads to a slick web-based dictionary and documentation browsers for the source of the web server, which supports [[Web Transactions With Continuations]].  Super-cool!",
      "id": "a48531ed9cf489c05ab932cecb344dec"
    },
    {
      "type": "html",
      "text": "\nFactor is a [[Concatenative Language]].",
      "id": "64f0a9cc64ae2f8ba88f74ea4f05bf75"
    },
    {
      "type": "html",
      "text": "-- [[Slava Pestov]]",
      "id": "8f1fb5e20eff2eec6be89174549a6b36"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a10509514ffedaff16a4c277aa3f2905"
    },
    {
      "type": "html",
      "text": "\nFor a small sample of Factor code that performs an operation well-known to many Internet users, here's rot13.factor from the \"extras\" distributed with the Factor system.",
      "id": "12f8409591135d0a10a5451aa445bb2b"
    },
    {
      "type": "code",
      "text": " ! Copyright (C) 2006 Daniel Ehrenberg\n ! See http://factorcode.org/license.txt for BSD license.\n USING: kernel math sequences strings io combinators ascii ;\n IN: rot13",
      "id": "4ff27c5292106447b87c076e8d4f4416"
    },
    {
      "type": "html",
      "text": "rotate ( ch base -- ch ) [ - 13 + 26 mod ] keep + ;",
      "id": "5657f47be5f7e7535339c3b740d60a4f"
    },
    {
      "type": "html",
      "text": "rot-letter ( ch -- ch )",
      "id": "4c5c00a8b52fada2fd597fe7fb826928"
    },
    {
      "type": "code",
      "text": "     {\n         { [ dup letter? ] [ CHAR: a rotate ] }\n         { [ dup LETTER? ] [ CHAR: A rotate ] }\n         { [ t ] [ ] }\n     } cond ;",
      "id": "6d30f6eeb682ebab2156d03dff5c9512"
    },
    {
      "type": "html",
      "text": "rot13 ( string -- string ) [ rot-letter ] map ;",
      "id": "4bd0c9685fc70bd9b8aeb79803164681"
    },
    {
      "type": "html",
      "text": "rot13-demo ( -- )",
      "id": "32699ab4bcc649cd72852713c7d53707"
    },
    {
      "type": "code",
      "text": "     \"Please enter a string:\" print flush\n     readln [\n         \"Your string: \" write dup print\n         \"Rot13:       \" write rot13 print\n     ] when* ;",
      "id": "c117fbe2d1ad10069ada3de561d874f3"
    },
    {
      "type": "html",
      "text": "MAIN:<br>rot13-demo",
      "id": "9d9a850fe5bb2265dc8b6c160d70987d"
    },
    {
      "type": "html",
      "text": "\nThis illustrates a few properties of Factor code: it looks roughly like Forth, largely composed of colon definitions; control-flow words such as \"cond\" use data structures composed of code (called <i>quotations</i>) as their arguments; and higher-order functions such as \"map\" work similarly.",
      "id": "fd56af1bffc8c31ff763a5f965223af4"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?FactorLanguage c2.com]",
      "id": "f80ea69cc6ae6b2a95c575c46565e1b5"
    }
  ],
  "journal": [
    {
      "date": 1388314241000,
      "id": "0cdde9f355e41b9fb0b15df292d24043",
      "type": "create",
      "item": {
        "title": "Factor Language",
        "story": [
          {
            "type": "html",
            "text": "A [[Stack Based Language]] based on [[Joy Language]], [[Forth Language]], [[Lisp Language]], and [[Slate Language]]. It features the [[Cons Cell]] as the building block of code, [[Higher Order Function]]s, [[Call With Current Continuation]], [[Dynamic Typing]], and [[Dynamic Scope]].",
            "id": "3b867943a038d4092fc2eaaf69661466"
          },
          {
            "type": "html",
            "text": "\nSee [http://www.factorcode.org/ www.factorcode.org].",
            "id": "e35ce9b003fe5eff2da3a0dbef8d5a28"
          },
          {
            "type": "html",
            "text": "\nFor a sample, [http://docs.factorcode.org/ docs.factorcode.org] leads to a slick web-based dictionary and documentation browsers for the source of the web server, which supports [[Web Transactions With Continuations]].  Super-cool!",
            "id": "a48531ed9cf489c05ab932cecb344dec"
          },
          {
            "type": "html",
            "text": "\nFactor is a [[Concatenative Language]].",
            "id": "64f0a9cc64ae2f8ba88f74ea4f05bf75"
          },
          {
            "type": "html",
            "text": "-- [[Slava Pestov]]",
            "id": "8f1fb5e20eff2eec6be89174549a6b36"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a10509514ffedaff16a4c277aa3f2905"
          },
          {
            "type": "html",
            "text": "\nFor a small sample of Factor code that performs an operation well-known to many Internet users, here's rot13.factor from the \"extras\" distributed with the Factor system.",
            "id": "12f8409591135d0a10a5451aa445bb2b"
          },
          {
            "type": "code",
            "text": " ! Copyright (C) 2006 Daniel Ehrenberg\n ! See http://factorcode.org/license.txt for BSD license.\n USING: kernel math sequences strings io combinators ascii ;\n IN: rot13",
            "id": "4ff27c5292106447b87c076e8d4f4416"
          },
          {
            "type": "html",
            "text": "rotate ( ch base -- ch ) [ - 13 + 26 mod ] keep + ;",
            "id": "5657f47be5f7e7535339c3b740d60a4f"
          },
          {
            "type": "html",
            "text": "rot-letter ( ch -- ch )",
            "id": "4c5c00a8b52fada2fd597fe7fb826928"
          },
          {
            "type": "code",
            "text": "     {\n         { [ dup letter? ] [ CHAR: a rotate ] }\n         { [ dup LETTER? ] [ CHAR: A rotate ] }\n         { [ t ] [ ] }\n     } cond ;",
            "id": "6d30f6eeb682ebab2156d03dff5c9512"
          },
          {
            "type": "html",
            "text": "rot13 ( string -- string ) [ rot-letter ] map ;",
            "id": "4bd0c9685fc70bd9b8aeb79803164681"
          },
          {
            "type": "html",
            "text": "rot13-demo ( -- )",
            "id": "32699ab4bcc649cd72852713c7d53707"
          },
          {
            "type": "code",
            "text": "     \"Please enter a string:\" print flush\n     readln [\n         \"Your string: \" write dup print\n         \"Rot13:       \" write rot13 print\n     ] when* ;",
            "id": "c117fbe2d1ad10069ada3de561d874f3"
          },
          {
            "type": "html",
            "text": "MAIN:<br>rot13-demo",
            "id": "9d9a850fe5bb2265dc8b6c160d70987d"
          },
          {
            "type": "html",
            "text": "\nThis illustrates a few properties of Factor code: it looks roughly like Forth, largely composed of colon definitions; control-flow words such as \"cond\" use data structures composed of code (called <i>quotations</i>) as their arguments; and higher-order functions such as \"map\" work similarly.",
            "id": "fd56af1bffc8c31ff763a5f965223af4"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?FactorLanguage c2.com]",
            "id": "f80ea69cc6ae6b2a95c575c46565e1b5"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1707798504337
    }
  ]
}