{
  "title": "Some Best Practices Summarized",
  "story": [
    {
      "type": "paragraph",
      "id": "7a67583f739c0595",
      "text": "Section 1.4 of [[A Mentoring Course on Smalltalk]]"
    },
    {
      "type": "markdown",
      "id": "16a2a0f37e95b7c0",
      "text": "* [[Intention-Revealing Names]]\n"
    },
    {
      "type": "markdown",
      "id": "f14c8790255ed4dc",
      "text": "* [[Small Methods]]"
    },
    {
      "type": "paragraph",
      "id": "22dd78cd20bfb128",
      "text": "When you view things from the point of view of [[distinctions]] and the [[Laws of Form]], things have a tendency to become simpler. For example, we could consider some of the well-established productive patterns of Smalltalk programming behavior. Rather than hard won individual bits of good sounding advice, they become simple consequences of deeper principles. Lengthy justifications become trivial deductions that amount to not much more than an assertion."
    },
    {
      "type": "paragraph",
      "id": "087f49d28751fe42",
      "text": "Let’s go over some familiar examples to see the axioms of Laws of Form in action. While we will discuss them abstractly at this time, they will be put to full use throughout the rest of the book."
    },
    {
      "type": "paragraph",
      "id": "07091aef6af9c907",
      "text": "This inevitably brings up the topic of [[Refactoring]]. When I first heard about refactoring in 1996, it was described as some sort of homework that you had to do to improve the code after it was done. But if I learned how to refactor, then that would imply that I would have enough knowledge to distinguish between refactored code and stuff in need of refactoring. Thus, I wondered why should I knowingly write messy code that would need refactoring later. Therefore, I decided to train myself to refactor code as I was writing it to avoid causing myself homework. It was painful at first, especially because I also learned Smalltalk in 1996. After some time and a lot of practice, however, it became more or less natural. "
    },
    {
      "type": "markdown",
      "id": "c2a914639bcdc0ed",
      "text": "> Familiarity is always more powerful than comfort. —[[Virginia Satir]] "
    },
    {
      "type": "paragraph",
      "id": "671a714759d28913",
      "text": "I find this skill, honed and sharpened for nearly as long as I have used Smalltalk, to be absolutely indispensable. If you do not currently do this, then I strongly suggest that you start immediately. The following may serve as further illustration."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Some Best Practices Summarized",
        "story": []
      },
      "date": 1660204427324
    },
    {
      "item": {
        "type": "factory",
        "id": "7a67583f739c0595"
      },
      "id": "7a67583f739c0595",
      "type": "add",
      "date": 1660204464620
    },
    {
      "type": "edit",
      "id": "7a67583f739c0595",
      "item": {
        "type": "paragraph",
        "id": "7a67583f739c0595",
        "text": "Section 1.4 of [[A Mentoring Course on Smalltalk]]"
      },
      "date": 1660204470475
    },
    {
      "item": {
        "type": "factory",
        "id": "22dd78cd20bfb128"
      },
      "id": "22dd78cd20bfb128",
      "type": "add",
      "after": "7a67583f739c0595",
      "date": 1660204489366
    },
    {
      "type": "edit",
      "id": "22dd78cd20bfb128",
      "item": {
        "type": "paragraph",
        "id": "22dd78cd20bfb128",
        "text": "When you view things from the point of view of distinctions and the laws of form, things have a tendency to become simpler. For example, we could consider some of the well-established productive patterns of Smalltalk programming behavior. Rather than hard won individual bits of good sounding advice, they become simple consequences of deeper principles. Lengthy justifications become trivial deductions that amount to not much more than an assertion."
      },
      "date": 1660204491412
    },
    {
      "type": "edit",
      "id": "22dd78cd20bfb128",
      "item": {
        "type": "paragraph",
        "id": "22dd78cd20bfb128",
        "text": "When you view things from the point of view of [[distinctions]] and the [[Laws of Form]], things have a tendency to become simpler. For example, we could consider some of the well-established productive patterns of Smalltalk programming behavior. Rather than hard won individual bits of good sounding advice, they become simple consequences of deeper principles. Lengthy justifications become trivial deductions that amount to not much more than an assertion."
      },
      "date": 1660204539624
    },
    {
      "item": {
        "type": "factory",
        "id": "087f49d28751fe42"
      },
      "id": "087f49d28751fe42",
      "type": "add",
      "after": "22dd78cd20bfb128",
      "date": 1660204561655
    },
    {
      "type": "edit",
      "id": "087f49d28751fe42",
      "item": {
        "type": "paragraph",
        "id": "087f49d28751fe42",
        "text": "Let’s go over some familiar examples to see the axioms of Laws of Form in action. While we will discuss them abstractly at this time, they will be put to full use throughout the rest of the book."
      },
      "date": 1660204566317
    },
    {
      "item": {
        "type": "factory",
        "id": "07091aef6af9c907"
      },
      "id": "07091aef6af9c907",
      "type": "add",
      "after": "087f49d28751fe42",
      "date": 1660204573763
    },
    {
      "type": "edit",
      "id": "07091aef6af9c907",
      "item": {
        "type": "paragraph",
        "id": "07091aef6af9c907",
        "text": "This inevitably brings up the topic of refactoring. When I first heard about refactoring in 1996, it was described as some sort of homework that you had to do to improve the code after it was done. But if I learned how to refactor, then that would imply that I would have enough knowledge to distinguish between refactored code and stuff in need of refactoring. Thus, I wondered why should I knowingly write messy code that would need refactoring later. Therefore, I decided to train myself to refactor code as I was writing it to avoid causing myself homework. It was painful at first, especially because I also learned Smalltalk in 1996. After some time and a lot of practice, however, it became more or less natural. "
      },
      "date": 1660204579248
    },
    {
      "type": "add",
      "id": "c2a914639bcdc0ed",
      "item": {
        "type": "paragraph",
        "id": "c2a914639bcdc0ed",
        "text": "> Familiarity is always more powerful than comfort. —Virginia Satir "
      },
      "after": "07091aef6af9c907",
      "date": 1660204584548
    },
    {
      "type": "edit",
      "id": "c2a914639bcdc0ed",
      "item": {
        "type": "markdown",
        "id": "c2a914639bcdc0ed",
        "text": "> Familiarity is always more powerful than comfort. —Virginia Satir "
      },
      "date": 1660204586994
    },
    {
      "type": "add",
      "id": "671a714759d28913",
      "item": {
        "type": "paragraph",
        "id": "671a714759d28913",
        "text": "I find this skill, honed and sharpened for nearly as long as I have used Smalltalk, to be absolutely indispensable. If you do not currently do this, then I strongly suggest that you start immediately. The following may serve as further illustration."
      },
      "after": "c2a914639bcdc0ed",
      "date": 1660204588189
    },
    {
      "type": "edit",
      "id": "c2a914639bcdc0ed",
      "item": {
        "type": "markdown",
        "id": "c2a914639bcdc0ed",
        "text": "> Familiarity is always more powerful than comfort. —[[Virginia Satir]] "
      },
      "date": 1660204594799
    },
    {
      "type": "edit",
      "id": "07091aef6af9c907",
      "item": {
        "type": "paragraph",
        "id": "07091aef6af9c907",
        "text": "This inevitably brings up the topic of [[refactoring]]. When I first heard about refactoring in 1996, it was described as some sort of homework that you had to do to improve the code after it was done. But if I learned how to refactor, then that would imply that I would have enough knowledge to distinguish between refactored code and stuff in need of refactoring. Thus, I wondered why should I knowingly write messy code that would need refactoring later. Therefore, I decided to train myself to refactor code as I was writing it to avoid causing myself homework. It was painful at first, especially because I also learned Smalltalk in 1996. After some time and a lot of practice, however, it became more or less natural. "
      },
      "date": 1660204657917
    },
    {
      "type": "edit",
      "id": "07091aef6af9c907",
      "item": {
        "type": "paragraph",
        "id": "07091aef6af9c907",
        "text": "This inevitably brings up the topic of [[Refactoring]]. When I first heard about refactoring in 1996, it was described as some sort of homework that you had to do to improve the code after it was done. But if I learned how to refactor, then that would imply that I would have enough knowledge to distinguish between refactored code and stuff in need of refactoring. Thus, I wondered why should I knowingly write messy code that would need refactoring later. Therefore, I decided to train myself to refactor code as I was writing it to avoid causing myself homework. It was painful at first, especially because I also learned Smalltalk in 1996. After some time and a lot of practice, however, it became more or less natural. "
      },
      "date": 1660204725380
    },
    {
      "type": "add",
      "id": "16a2a0f37e95b7c0",
      "item": {
        "type": "paragraph",
        "id": "16a2a0f37e95b7c0",
        "text": "* [[Intention-Revealing Names]]"
      },
      "after": "7a67583f739c0595",
      "date": 1660204788322
    },
    {
      "type": "edit",
      "id": "16a2a0f37e95b7c0",
      "item": {
        "type": "markdown",
        "id": "16a2a0f37e95b7c0",
        "text": "* [[Intention-Revealing Names]]"
      },
      "date": 1660204789666
    },
    {
      "type": "edit",
      "id": "16a2a0f37e95b7c0",
      "item": {
        "type": "markdown",
        "id": "16a2a0f37e95b7c0",
        "text": "* [[Intention-Revealing Names]]\n"
      },
      "date": 1660206845836
    },
    {
      "type": "add",
      "id": "f14c8790255ed4dc",
      "item": {
        "type": "markdown",
        "id": "f14c8790255ed4dc",
        "text": "* [Small Methods]]"
      },
      "after": "16a2a0f37e95b7c0",
      "date": 1660206848937
    },
    {
      "type": "edit",
      "id": "f14c8790255ed4dc",
      "item": {
        "type": "markdown",
        "id": "f14c8790255ed4dc",
        "text": "* [[Small Methods]]"
      },
      "date": 1660206854438
    }
  ]
}