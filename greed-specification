{
  "title": "Greed Specification",
  "story": [
    {
      "type": "paragraph",
      "id": "b5e92796edbe5265",
      "text": "                         Greed Specification \n                    Revised: September 15, 1989\nProvided by Reed Phillips and Tom Love. [http://www.programd.com/69_aee9bfaf0aaa699e_1.htm source]"
    },
    {
      "type": "paragraph",
      "id": "8682e4c327065b96",
      "text": "Greed is a dice game played between two or more players.  The object \nof the game is to tally points from the dice rolls and be the first \nplayer to score 5000 points.  There are five dice in the game that are \nrolled from a cup. \n"
    },
    {
      "type": "paragraph",
      "id": "94dafce08cc0fbcd",
      "text": "To \"enter the game\" a player must score at least 300 points on the \nfirst roll of his turn, otherwise the player is considered \"bust\".  If \nhe goes \"bust\" he must wait his turn to roll again.  If this first \nroll produces 300 or more points, then the player has the option of \nstopping and keeping the initial score or continuing.  "
    },
    {
      "type": "paragraph",
      "id": "ef12a421b2f7518d",
      "text": "To continue, \nthe player rolls only the dice that have not yet scored in this turn. \nIf all the dice score, in one or multiple roles, the player may \ncontinue by rolling all five dice.  "
    },
    {
      "type": "paragraph",
      "id": "8a5a3ab81929abd1",
      "text": "A player may continue rolling as \nlong as a score is made on each roll.  With the exception of the entry \nroll, a \"bust\" is when an individual roll produces no points.  "
    },
    {
      "type": "paragraph",
      "id": "355c5b0520b70a33",
      "text": "During \nhis turn the player may stop and keep his score after any roll as long \nas he is not \"bust\".  "
    },
    {
      "type": "paragraph",
      "id": "6501c1686d240a73",
      "text": "When a player is \"bust\" the only points lost are \nthose accumulated during the turn in which the \"bust\" occurs.  In \nother words he gets no points for that turn. \n"
    },
    {
      "type": "paragraph",
      "id": "80603edca0057f88",
      "text": "Each dice roll is tallied as follows: \n "
    },
    {
      "type": "paragraph",
      "id": "617aa848c5ef4252",
      "text": "       - Threes of a kind score 100 * face value of one of the three \n          die.  If the face value = 1, then it is scored as 1000. \n"
    },
    {
      "type": "paragraph",
      "id": "f2875ad9b100181e",
      "text": "        - Single 1's and 5's score 100 and 50 points, respectively. \n"
    },
    {
      "type": "paragraph",
      "id": "b2ab5db8ef7e42a1",
      "text": "        - Examples (Rolls to \"enter the game\"): \n                44446 = 400 points total \n                        and would have the option to roll the 4 & 6 if \n                        the player chose to role the 4&6 and they did \n                        not score the player would be bust and would \n                        have to try to \"enter the game\" on his next \n                        turn.  If the 4&6 score then the player could \n                        continue by rolling all five dice. \n                11115 = 1000 +100 +50 points = 1150 points \n                        and would have the option to roll all five \n                        dice again \n                12315 = 100 + 0 + 0 + 100 + 50 points = BUST \n"
    },
    {
      "type": "paragraph",
      "id": "84f6101c42002ffc",
      "text": "Finally, the winner is determined after a player collects a total \nscore of 5000 or more and all players have had an equal number of \nturns.  If, for example, a player scores over 5000 points, he may \nstill lose if a subsequent player ends up with a final score greater \nthan his. \n"
    },
    {
      "type": "paragraph",
      "id": "f404dc452bb6b76d",
      "text": "Getting Started \n"
    },
    {
      "type": "paragraph",
      "id": "ae78c11023143e14",
      "text": "For design purposes, we should assume that the rules, strategies and \nscoring algorithms can be changed.  For this reason, the design should \nbe cleanly factored.  "
    },
    {
      "type": "paragraph",
      "id": "3c6053a5c5c7331c",
      "text": "Rules are not expected to change during play. \nThe designer is also encouraged to play the game a few times before \nbeginning the design.  The following sections give a suggested basic \nobject breakdown for the design.  There can easily be more objects \ninvolved. \n"
    },
    {
      "type": "paragraph",
      "id": "b91cbc031a9c6f16",
      "text": "Game Object \n"
    },
    {
      "type": "paragraph",
      "id": "d0c9b18f9adac9d0",
      "text": "The greed game itself can be considered an object.  The game consists \nof players, dice, a cup, and rules.  The game object should also know \nwho started first, who's turn it is, and what the rolls are for the \ncurrent turn.  It should be playable 'by itself' and independent of \nthe type of interface used.  "
    },
    {
      "type": "paragraph",
      "id": "244cdd0b746b5e72",
      "text": "For example, the object should respond to \nrequest (messages) like: \n"
    },
    {
      "type": "paragraph",
      "id": "eaf5961acfee44ac",
      "text": "        roll the dice, "
    },
    {
      "type": "paragraph",
      "id": "01c3785af2ca9c38",
      "text": "        go to next player, \n"
    },
    {
      "type": "paragraph",
      "id": "62faa922d8d702ee",
      "text": "        restart game, \n"
    },
    {
      "type": "paragraph",
      "id": "ec06986bf758457c",
      "text": "        add a new player, etc. \n"
    },
    {
      "type": "paragraph",
      "id": "9afbef20ee5aaab6",
      "text": "The game object should be flexible enough to easily allow for \ndifferent game parameters such as: \n"
    },
    {
      "type": "paragraph",
      "id": "53e6db97bf0b74ae",
      "text": "        different numbers of dice, \n"
    },
    {
      "type": "paragraph",
      "id": "a76b35ce3c7464f9",
      "text": "        different minimum score to enter, \n"
    },
    {
      "type": "paragraph",
      "id": "8efce0ad00f3d56e",
      "text": "        different high score, \n"
    },
    {
      "type": "paragraph",
      "id": "d179c36b189178d0",
      "text": "        different dice scoring rules, etc. \n"
    },
    {
      "type": "paragraph",
      "id": "7542c36984a92676",
      "text": "Die Object \n"
    },
    {
      "type": "paragraph",
      "id": "54c29b1355d9d5d0",
      "text": "Each die can be considered an object.  It should know how to roll and \ndisplay itself.  It needs to randomly choose and keep track of its \nvalue.  The die object would probably need an undefined state which \nwould represent it being shaken or sitting in the cup.  "
    },
    {
      "type": "paragraph",
      "id": "3840278d46e0e680",
      "text": "A die in an \nundefined state would also display itself differently (i.e.  rolling \nor spinning). \n"
    },
    {
      "type": "paragraph",
      "id": "59afd7c207d2d88f",
      "text": "We will assume the die is a cube but the design should be flexible \nenough to account for die with different numbers of faces (i.e.  a die \nwith 11 sides). \n"
    },
    {
      "type": "paragraph",
      "id": "eab42a2a9ce7f67a",
      "text": "Player Object \n"
    },
    {
      "type": "paragraph",
      "id": "b716b8d5d1aecf82",
      "text": "Players participate in the greed game and keep track of their score. \nTheir score tracking should also reflect the scoring history.  A \nplayer should at least know what his score was for each turn of the \ngame.  Players have names.  This player object expects an external \nsource (user) to make the decisions (i.e.  when to continue rolling or \nstop). \n"
    },
    {
      "type": "paragraph",
      "id": "bc8a20ba1a66e843",
      "text": "Computer Player Object \n"
    },
    {
      "type": "paragraph",
      "id": "8af907093b223ffd",
      "text": "The computer player object is a subclass of player object that makes \nhis own decisions about whether to roll or stop.  The computer player \nallows a user to play greed with the computer.  The intelligence about \nwhether or not to roll should be represented by a 'degree of risk' or \ngreediness factor.  The computer player can also take into account \nthings like how far behind he is, is this his last turn, his history \nof busts vs.  rolls, etc.  Any number and combination of players \n(users) and computer players should be allowed. \n"
    },
    {
      "type": "paragraph",
      "id": "fe7928f3c6f150db",
      "text": "Interface Model Object \n"
    },
    {
      "type": "paragraph",
      "id": "5d21e7c5e3130cc7",
      "text": "This object is determined by your interface design.  Its roll is to \norchestrate the game and players and to reflect player decisions and \ngame state.  As a minimum, the interface should: \n"
    },
    {
      "type": "paragraph",
      "id": "4a25cc60856678b1",
      "text": "        - show the dice graphically for current turn and roll \n"
    },
    {
      "type": "paragraph",
      "id": "a962a6e4365fc1fb",
      "text": "        - allow players to be added and removed \n"
    },
    {
      "type": "paragraph",
      "id": "7c349a738defb99a",
      "text": "        - allow players to provide roll/stop decisions \n"
    },
    {
      "type": "paragraph",
      "id": "2f2b83c2df52d813",
      "text": "        - graphically display the scoring history of the players. \n"
    },
    {
      "type": "paragraph",
      "id": "05d29a50beddf194",
      "text": "          This could take the form of a monotonically increasing curve \n          for each player. \n"
    },
    {
      "type": "paragraph",
      "id": "42cec8e90cc22627",
      "text": "The designer is encouraged to use creativity when designing the \ninterface.  This could be anything from animating the cup and dice to \ngiving the computer players or game a personality. \n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Greed Specification",
        "story": []
      },
      "date": 1423541388360
    },
    {
      "item": {
        "type": "factory",
        "id": "b5e92796edbe5265"
      },
      "id": "b5e92796edbe5265",
      "type": "add",
      "date": 1423541390241
    },
    {
      "type": "edit",
      "id": "b5e92796edbe5265",
      "item": {
        "type": "paragraph",
        "id": "b5e92796edbe5265",
        "text": "                         Greed Specification \n                    (Revised: September 15, 1989) \n"
      },
      "date": 1423541406994
    },
    {
      "type": "add",
      "id": "794a4e6a75263b20",
      "item": {
        "type": "paragraph",
        "id": "794a4e6a75263b20",
        "text": "Provided courtesy of Reed Phillips and Tom Love."
      },
      "after": "b5e92796edbe5265",
      "date": 1423541441923
    },
    {
      "type": "add",
      "id": "8682e4c327065b96",
      "item": {
        "type": "paragraph",
        "id": "8682e4c327065b96",
        "text": "Greed is a dice game played between two or more players.  The object \nof the game is to tally points from the dice rolls and be the first \nplayer to score 5000 points.  There are five dice in the game that are \nrolled from a cup. \n"
      },
      "after": "794a4e6a75263b20",
      "date": 1423541470366
    },
    {
      "type": "add",
      "id": "94dafce08cc0fbcd",
      "item": {
        "type": "paragraph",
        "id": "94dafce08cc0fbcd",
        "text": "To \"enter the game\" a player must score at least 300 points on the \nfirst roll of his turn, otherwise the player is considered \"bust\".  If \nhe goes \"bust\" he must wait his turn to roll again.  If this first \nroll produces 300 or more points, then the player has the option of \nstopping and keeping the initial score or continuing.  "
      },
      "after": "8682e4c327065b96",
      "date": 1423541488352
    },
    {
      "type": "add",
      "id": "ef12a421b2f7518d",
      "item": {
        "type": "paragraph",
        "id": "ef12a421b2f7518d",
        "text": "To continue, \nthe player rolls only the dice that have not yet scored in this turn. \nIf all the dice score, in one or multiple roles, the player may \ncontinue by rolling all five dice.  A player may continue rolling as \nlong as a score is made on each roll.  With the exception of the entry \nroll, a \"bust\" is when an individual roll produces no points.  During \nhis turn the player may stop and keep his score after any roll as long \nas he is not \"bust\".  When a player is \"bust\" the only points lost are \nthose accumulated during the turn in which the \"bust\" occurs.  In \nother words he gets no points for that turn. \n"
      },
      "after": "94dafce08cc0fbcd",
      "date": 1423541505081
    },
    {
      "type": "add",
      "id": "80603edca0057f88",
      "item": {
        "type": "paragraph",
        "id": "80603edca0057f88",
        "text": "Each dice roll is tallied as follows: \n        - Threes of a kind score 100 * face value of one of the three \n          die.  If the face value = 1, then it is scored as 1000. \n        - Single 1's and 5's score 100 and 50 points, respectively. \n        - Examples (Rolls to \"enter the game\"): \n                44446 = 400 points total \n                        and would have the option to roll the 4 & 6 if \n                        the player chose to role the 4&6 and they did \n                        not score the player would be bust and would \n                        have to try to \"enter the game\" on his next \n                        turn.  If the 4&6 score then the player could \n                        continue by rolling all five dice. \n                11115 = 1000 +100 +50 points = 1150 points \n                        and would have the option to roll all five \n                        dice again \n                12315 = 100 + 0 + 0 + 100 + 50 points = BUST \nFinally, the winner is determined after a player collects a total \nscore of 5000 or more and all players have had an equal number of \nturns.  If, for example, a player scores over 5000 points, he may \nstill lose if a subsequent player ends up with a final score greater \nthan his. \nGetting Started \nFor design purposes, we should assume that the rules, strategies and \nscoring algorithms can be changed.  For this reason, the design should \nbe cleanly factored.  Rules are not expected to change during play. \nThe designer is also encouraged to play the game a few times before \nbeginning the design.  The following sections give a suggested basic \nobject breakdown for the design.  There can easily be more objects \ninvolved. \nGame Object \nThe greed game itself can be considered an object.  The game consists \nof players, dice, a cup, and rules.  The game object should also know \nwho started first, who's turn it is, and what the rolls are for the \ncurrent turn.  It should be playable 'by itself' and independent of \nthe type of interface used.  For example, the object should respond to \nrequest (messages) like: \n        roll the dice, \n        go to next player, \n        restart game, \n        add a new player, etc. \nThe game object should be flexible enough to easily allow for \ndifferent game parameters such as: \n        different numbers of dice, \n        different minimum score to enter, \n        different high score, \n        different dice scoring rules, etc. \nDie Object \nEach die can be considered an object.  It should know how to roll and \ndisplay itself.  It needs to randomly choose and keep track of its \nvalue.  The die object would probably need an undefined state which \nwould represent it being shaken or sitting in the cup.  A die in an \nundefined state would also display itself differently (i.e.  rolling \nor spinning). \nWe will assume the die is a cube but the design should be flexible \nenough to account for die with different numbers of faces (i.e.  a die \nwith 11 sides). \nPlayer Object \nPlayers participate in the greed game and keep track of their score. \nTheir score tracking should also reflect the scoring history.  A \nplayer should at least know what his score was for each turn of the \ngame.  Players have names.  This player object expects an external \nsource (user) to make the decisions (i.e.  when to continue rolling or \nstop). \nComputer Player Object \nThe computer player object is a subclass of player object that makes \nhis own decisions about whether to roll or stop.  The computer player \nallows a user to play greed with the computer.  The intelligence about \nwhether or not to roll should be represented by a 'degree of risk' or \ngreediness factor.  The computer player can also take into account \nthings like how far behind he is, is this his last turn, his history \nof busts vs.  rolls, etc.  Any number and combination of players \n(users) and computer players should be allowed. \nInterface Model Object \nThis object is determined by your interface design.  Its roll is to \norchestrate the game and players and to reflect player decisions and \ngame state.  As a minimum, the interface should: \n        - show the dice graphically for current turn and roll \n        - allow players to be added and removed \n        - allow players to provide roll/stop decisions \n        - graphically display the scoring history of the players. \n          This could take the form of a monotonically increasing curve \n          for each player. \nThe designer is encouraged to use creativity when designing the \ninterface.  This could be anything from animating the cup and dice to \ngiving the computer players or game a personality. \n \n \n \n"
      },
      "after": "ef12a421b2f7518d",
      "date": 1423541515929
    },
    {
      "type": "edit",
      "id": "ef12a421b2f7518d",
      "item": {
        "type": "paragraph",
        "id": "ef12a421b2f7518d",
        "text": "To continue, \nthe player rolls only the dice that have not yet scored in this turn. \nIf all the dice score, in one or multiple roles, the player may \ncontinue by rolling all five dice.  "
      },
      "date": 1423541522345
    },
    {
      "type": "add",
      "id": "8a5a3ab81929abd1",
      "item": {
        "type": "paragraph",
        "id": "8a5a3ab81929abd1",
        "text": "A player may continue rolling as \nlong as a score is made on each roll.  With the exception of the entry \nroll, a \"bust\" is when an individual roll produces no points.  "
      },
      "after": "ef12a421b2f7518d",
      "date": 1423541528524
    },
    {
      "type": "add",
      "id": "355c5b0520b70a33",
      "item": {
        "type": "paragraph",
        "id": "355c5b0520b70a33",
        "text": "During \nhis turn the player may stop and keep his score after any roll as long \nas he is not \"bust\".  "
      },
      "after": "8a5a3ab81929abd1",
      "date": 1423541538350
    },
    {
      "type": "add",
      "id": "6501c1686d240a73",
      "item": {
        "type": "paragraph",
        "id": "6501c1686d240a73",
        "text": "When a player is \"bust\" the only points lost are \nthose accumulated during the turn in which the \"bust\" occurs.  In \nother words he gets no points for that turn. \n"
      },
      "after": "355c5b0520b70a33",
      "date": 1423541543640
    },
    {
      "type": "edit",
      "id": "80603edca0057f88",
      "item": {
        "type": "paragraph",
        "id": "80603edca0057f88",
        "text": "Each dice roll is tallied as follows: \n "
      },
      "date": 1423541561977
    },
    {
      "type": "add",
      "id": "617aa848c5ef4252",
      "item": {
        "type": "paragraph",
        "id": "617aa848c5ef4252",
        "text": "       - Threes of a kind score 100 * face value of one of the three \n          die.  If the face value = 1, then it is scored as 1000. \n        - Single 1's and 5's score 100 and 50 points, respectively. \n        - Examples (Rolls to \"enter the game\"): \n                44446 = 400 points total \n                        and would have the option to roll the 4 & 6 if \n                        the player chose to role the 4&6 and they did \n                        not score the player would be bust and would \n                        have to try to \"enter the game\" on his next \n                        turn.  If the 4&6 score then the player could \n                        continue by rolling all five dice. \n                11115 = 1000 +100 +50 points = 1150 points \n                        and would have the option to roll all five \n                        dice again \n                12315 = 100 + 0 + 0 + 100 + 50 points = BUST \nFinally, the winner is determined after a player collects a total \nscore of 5000 or more and all players have had an equal number of \nturns.  If, for example, a player scores over 5000 points, he may \nstill lose if a subsequent player ends up with a final score greater \nthan his. \nGetting Started \nFor design purposes, we should assume that the rules, strategies and \nscoring algorithms can be changed.  For this reason, the design should \nbe cleanly factored.  Rules are not expected to change during play. \nThe designer is also encouraged to play the game a few times before \nbeginning the design.  The following sections give a suggested basic \nobject breakdown for the design.  There can easily be more objects \ninvolved. \nGame Object \nThe greed game itself can be considered an object.  The game consists \nof players, dice, a cup, and rules.  The game object should also know \nwho started first, who's turn it is, and what the rolls are for the \ncurrent turn.  It should be playable 'by itself' and independent of \nthe type of interface used.  For example, the object should respond to \nrequest (messages) like: \n        roll the dice, \n        go to next player, \n        restart game, \n        add a new player, etc. \nThe game object should be flexible enough to easily allow for \ndifferent game parameters such as: \n        different numbers of dice, \n        different minimum score to enter, \n        different high score, \n        different dice scoring rules, etc. \nDie Object \nEach die can be considered an object.  It should know how to roll and \ndisplay itself.  It needs to randomly choose and keep track of its \nvalue.  The die object would probably need an undefined state which \nwould represent it being shaken or sitting in the cup.  A die in an \nundefined state would also display itself differently (i.e.  rolling \nor spinning). \nWe will assume the die is a cube but the design should be flexible \nenough to account for die with different numbers of faces (i.e.  a die \nwith 11 sides). \nPlayer Object \nPlayers participate in the greed game and keep track of their score. \nTheir score tracking should also reflect the scoring history.  A \nplayer should at least know what his score was for each turn of the \ngame.  Players have names.  This player object expects an external \nsource (user) to make the decisions (i.e.  when to continue rolling or \nstop). \nComputer Player Object \nThe computer player object is a subclass of player object that makes \nhis own decisions about whether to roll or stop.  The computer player \nallows a user to play greed with the computer.  The intelligence about \nwhether or not to roll should be represented by a 'degree of risk' or \ngreediness factor.  The computer player can also take into account \nthings like how far behind he is, is this his last turn, his history \nof busts vs.  rolls, etc.  Any number and combination of players \n(users) and computer players should be allowed. \nInterface Model Object \nThis object is determined by your interface design.  Its roll is to \norchestrate the game and players and to reflect player decisions and \ngame state.  As a minimum, the interface should: \n        - show the dice graphically for current turn and roll \n        - allow players to be added and removed \n        - allow players to provide roll/stop decisions \n        - graphically display the scoring history of the players. \n          This could take the form of a monotonically increasing curve \n          for each player. \nThe designer is encouraged to use creativity when designing the \ninterface.  This could be anything from animating the cup and dice to \ngiving the computer players or game a personality. \n \n \n \n"
      },
      "after": "80603edca0057f88",
      "date": 1423541564038
    },
    {
      "type": "edit",
      "id": "617aa848c5ef4252",
      "item": {
        "type": "paragraph",
        "id": "617aa848c5ef4252",
        "text": "       - Threes of a kind score 100 * face value of one of the three \n          die.  If the face value = 1, then it is scored as 1000. \n"
      },
      "date": 1423541588580
    },
    {
      "type": "add",
      "id": "f2875ad9b100181e",
      "item": {
        "type": "paragraph",
        "id": "f2875ad9b100181e",
        "text": "        - Single 1's and 5's score 100 and 50 points, respectively. \n"
      },
      "after": "617aa848c5ef4252",
      "date": 1423541592580
    },
    {
      "type": "add",
      "id": "b2ab5db8ef7e42a1",
      "item": {
        "type": "paragraph",
        "id": "b2ab5db8ef7e42a1",
        "text": "        - Examples (Rolls to \"enter the game\"): \n                44446 = 400 points total \n                        and would have the option to roll the 4 & 6 if \n                        the player chose to role the 4&6 and they did \n                        not score the player would be bust and would \n                        have to try to \"enter the game\" on his next \n                        turn.  If the 4&6 score then the player could \n                        continue by rolling all five dice. \n                11115 = 1000 +100 +50 points = 1150 points \n                        and would have the option to roll all five \n                        dice again \n                12315 = 100 + 0 + 0 + 100 + 50 points = BUST \n"
      },
      "after": "f2875ad9b100181e",
      "date": 1423541606576
    },
    {
      "type": "add",
      "id": "84f6101c42002ffc",
      "item": {
        "type": "paragraph",
        "id": "84f6101c42002ffc",
        "text": "Finally, the winner is determined after a player collects a total \nscore of 5000 or more and all players have had an equal number of \nturns.  If, for example, a player scores over 5000 points, he may \nstill lose if a subsequent player ends up with a final score greater \nthan his. \n"
      },
      "after": "b2ab5db8ef7e42a1",
      "date": 1423541638865
    },
    {
      "type": "add",
      "id": "f404dc452bb6b76d",
      "item": {
        "type": "paragraph",
        "id": "f404dc452bb6b76d",
        "text": "Getting Started \n"
      },
      "after": "84f6101c42002ffc",
      "date": 1423541641561
    },
    {
      "type": "add",
      "id": "ae78c11023143e14",
      "item": {
        "type": "paragraph",
        "id": "ae78c11023143e14",
        "text": "For design purposes, we should assume that the rules, strategies and \nscoring algorithms can be changed.  For this reason, the design should \nbe cleanly factored.  "
      },
      "after": "f404dc452bb6b76d",
      "date": 1423541655728
    },
    {
      "type": "add",
      "id": "3c6053a5c5c7331c",
      "item": {
        "type": "paragraph",
        "id": "3c6053a5c5c7331c",
        "text": "Rules are not expected to change during play. \nThe designer is also encouraged to play the game a few times before \nbeginning the design.  The following sections give a suggested basic \nobject breakdown for the design.  There can easily be more objects \ninvolved. \n"
      },
      "after": "ae78c11023143e14",
      "date": 1423541663098
    },
    {
      "type": "add",
      "id": "b91cbc031a9c6f16",
      "item": {
        "type": "paragraph",
        "id": "b91cbc031a9c6f16",
        "text": "Game Object \n"
      },
      "after": "3c6053a5c5c7331c",
      "date": 1423541667247
    },
    {
      "type": "add",
      "id": "d0c9b18f9adac9d0",
      "item": {
        "type": "paragraph",
        "id": "d0c9b18f9adac9d0",
        "text": "The greed game itself can be considered an object.  The game consists \nof players, dice, a cup, and rules.  The game object should also know \nwho started first, who's turn it is, and what the rolls are for the \ncurrent turn.  It should be playable 'by itself' and independent of \nthe type of interface used.  "
      },
      "after": "b91cbc031a9c6f16",
      "date": 1423541684230
    },
    {
      "type": "add",
      "id": "244cdd0b746b5e72",
      "item": {
        "type": "paragraph",
        "id": "244cdd0b746b5e72",
        "text": "For example, the object should respond to \nrequest (messages) like: \n"
      },
      "after": "d0c9b18f9adac9d0",
      "date": 1423541690930
    },
    {
      "type": "add",
      "id": "eaf5961acfee44ac",
      "item": {
        "type": "paragraph",
        "id": "eaf5961acfee44ac",
        "text": "        roll the dice, "
      },
      "after": "244cdd0b746b5e72",
      "date": 1423541697182
    },
    {
      "type": "add",
      "id": "01c3785af2ca9c38",
      "item": {
        "type": "paragraph",
        "id": "01c3785af2ca9c38",
        "text": "        go to next player, \n"
      },
      "after": "eaf5961acfee44ac",
      "date": 1423541699397
    },
    {
      "type": "add",
      "id": "62faa922d8d702ee",
      "item": {
        "type": "paragraph",
        "id": "62faa922d8d702ee",
        "text": "        restart game, \n"
      },
      "after": "01c3785af2ca9c38",
      "date": 1423541700794
    },
    {
      "type": "add",
      "id": "ec06986bf758457c",
      "item": {
        "type": "paragraph",
        "id": "ec06986bf758457c",
        "text": "        add a new player, etc. \n"
      },
      "after": "62faa922d8d702ee",
      "date": 1423541702810
    },
    {
      "type": "add",
      "id": "9afbef20ee5aaab6",
      "item": {
        "type": "paragraph",
        "id": "9afbef20ee5aaab6",
        "text": "The game object should be flexible enough to easily allow for \ndifferent game parameters such as: \n"
      },
      "after": "ec06986bf758457c",
      "date": 1423541711695
    },
    {
      "type": "add",
      "id": "53e6db97bf0b74ae",
      "item": {
        "type": "paragraph",
        "id": "53e6db97bf0b74ae",
        "text": "        different numbers of dice, \n"
      },
      "after": "9afbef20ee5aaab6",
      "date": 1423541712767
    },
    {
      "type": "add",
      "id": "a76b35ce3c7464f9",
      "item": {
        "type": "paragraph",
        "id": "a76b35ce3c7464f9",
        "text": "        different minimum score to enter, \n"
      },
      "after": "53e6db97bf0b74ae",
      "date": 1423541713732
    },
    {
      "type": "add",
      "id": "8efce0ad00f3d56e",
      "item": {
        "type": "paragraph",
        "id": "8efce0ad00f3d56e",
        "text": "        different high score, \n"
      },
      "after": "a76b35ce3c7464f9",
      "date": 1423541714567
    },
    {
      "type": "add",
      "id": "d179c36b189178d0",
      "item": {
        "type": "paragraph",
        "id": "d179c36b189178d0",
        "text": "        different dice scoring rules, etc. \n"
      },
      "after": "8efce0ad00f3d56e",
      "date": 1423541715962
    },
    {
      "type": "add",
      "id": "7542c36984a92676",
      "item": {
        "type": "paragraph",
        "id": "7542c36984a92676",
        "text": "Die Object \n"
      },
      "after": "d179c36b189178d0",
      "date": 1423541717434
    },
    {
      "type": "add",
      "id": "54c29b1355d9d5d0",
      "item": {
        "type": "paragraph",
        "id": "54c29b1355d9d5d0",
        "text": "Each die can be considered an object.  It should know how to roll and \ndisplay itself.  It needs to randomly choose and keep track of its \nvalue.  The die object would probably need an undefined state which \nwould represent it being shaken or sitting in the cup.  "
      },
      "after": "7542c36984a92676",
      "date": 1423541734144
    },
    {
      "type": "add",
      "id": "3840278d46e0e680",
      "item": {
        "type": "paragraph",
        "id": "3840278d46e0e680",
        "text": "A die in an \nundefined state would also display itself differently (i.e.  rolling \nor spinning). \nWe will assume the die is a cube but the design should be flexible \nenough to account for die with different numbers of faces (i.e.  a die \nwith 11 sides). \nPlayer Object \nPlayers participate in the greed game and keep track of their score. \nTheir score tracking should also reflect the scoring history.  A \nplayer should at least know what his score was for each turn of the \ngame.  Players have names.  This player object expects an external \nsource (user) to make the decisions (i.e.  when to continue rolling or \nstop). \nComputer Player Object \nThe computer player object is a subclass of player object that makes \nhis own decisions about whether to roll or stop.  The computer player \nallows a user to play greed with the computer.  The intelligence about \nwhether or not to roll should be represented by a 'degree of risk' or \ngreediness factor.  The computer player can also take into account \nthings like how far behind he is, is this his last turn, his history \nof busts vs.  rolls, etc.  Any number and combination of players \n(users) and computer players should be allowed. \nInterface Model Object \nThis object is determined by your interface design.  Its roll is to \norchestrate the game and players and to reflect player decisions and \ngame state.  As a minimum, the interface should: \n        - show the dice graphically for current turn and roll \n        - allow players to be added and removed \n        - allow players to provide roll/stop decisions \n        - graphically display the scoring history of the players. \n          This could take the form of a monotonically increasing curve \n          for each player. \nThe designer is encouraged to use creativity when designing the \ninterface.  This could be anything from animating the cup and dice to \ngiving the computer players or game a personality. \n \n \n \n"
      },
      "after": "54c29b1355d9d5d0",
      "date": 1423541743452
    },
    {
      "type": "edit",
      "id": "3840278d46e0e680",
      "item": {
        "type": "paragraph",
        "id": "3840278d46e0e680",
        "text": "A die in an \nundefined state would also display itself differently (i.e.  rolling \nor spinning). \n"
      },
      "date": 1423541762574
    },
    {
      "type": "add",
      "id": "59afd7c207d2d88f",
      "item": {
        "type": "paragraph",
        "id": "59afd7c207d2d88f",
        "text": "We will assume the die is a cube but the design should be flexible \nenough to account for die with different numbers of faces (i.e.  a die \nwith 11 sides). \n"
      },
      "after": "3840278d46e0e680",
      "date": 1423541765320
    },
    {
      "type": "add",
      "id": "eab42a2a9ce7f67a",
      "item": {
        "type": "paragraph",
        "id": "eab42a2a9ce7f67a",
        "text": "Player Object \n"
      },
      "after": "59afd7c207d2d88f",
      "date": 1423541766451
    },
    {
      "type": "add",
      "id": "b716b8d5d1aecf82",
      "item": {
        "type": "paragraph",
        "id": "b716b8d5d1aecf82",
        "text": "Players participate in the greed game and keep track of their score. \nTheir score tracking should also reflect the scoring history.  A \nplayer should at least know what his score was for each turn of the \ngame.  Players have names.  This player object expects an external \nsource (user) to make the decisions (i.e.  when to continue rolling or \nstop). \n"
      },
      "after": "eab42a2a9ce7f67a",
      "date": 1423541771646
    },
    {
      "type": "add",
      "id": "bc8a20ba1a66e843",
      "item": {
        "type": "paragraph",
        "id": "bc8a20ba1a66e843",
        "text": "Computer Player Object \n"
      },
      "after": "b716b8d5d1aecf82",
      "date": 1423541774016
    },
    {
      "type": "add",
      "id": "8af907093b223ffd",
      "item": {
        "type": "paragraph",
        "id": "8af907093b223ffd",
        "text": "The computer player object is a subclass of player object that makes \nhis own decisions about whether to roll or stop.  The computer player \nallows a user to play greed with the computer.  The intelligence about \nwhether or not to roll should be represented by a 'degree of risk' or \ngreediness factor.  The computer player can also take into account \nthings like how far behind he is, is this his last turn, his history \nof busts vs.  rolls, etc.  Any number and combination of players \n(users) and computer players should be allowed. \n"
      },
      "after": "bc8a20ba1a66e843",
      "date": 1423541780496
    },
    {
      "type": "add",
      "id": "fe7928f3c6f150db",
      "item": {
        "type": "paragraph",
        "id": "fe7928f3c6f150db",
        "text": "Interface Model Object \n"
      },
      "after": "8af907093b223ffd",
      "date": 1423541781879
    },
    {
      "type": "add",
      "id": "5d21e7c5e3130cc7",
      "item": {
        "type": "paragraph",
        "id": "5d21e7c5e3130cc7",
        "text": "This object is determined by your interface design.  Its roll is to \norchestrate the game and players and to reflect player decisions and \ngame state.  As a minimum, the interface should: \n"
      },
      "after": "fe7928f3c6f150db",
      "date": 1423541784977
    },
    {
      "type": "add",
      "id": "4a25cc60856678b1",
      "item": {
        "type": "paragraph",
        "id": "4a25cc60856678b1",
        "text": "        - show the dice graphically for current turn and roll \n"
      },
      "after": "5d21e7c5e3130cc7",
      "date": 1423541786548
    },
    {
      "type": "add",
      "id": "a962a6e4365fc1fb",
      "item": {
        "type": "paragraph",
        "id": "a962a6e4365fc1fb",
        "text": "        - allow players to be added and removed \n"
      },
      "after": "4a25cc60856678b1",
      "date": 1423541787634
    },
    {
      "type": "add",
      "id": "7c349a738defb99a",
      "item": {
        "type": "paragraph",
        "id": "7c349a738defb99a",
        "text": "        - allow players to provide roll/stop decisions \n"
      },
      "after": "a962a6e4365fc1fb",
      "date": 1423541788590
    },
    {
      "type": "add",
      "id": "2f2b83c2df52d813",
      "item": {
        "type": "paragraph",
        "id": "2f2b83c2df52d813",
        "text": "        - graphically display the scoring history of the players. \n"
      },
      "after": "7c349a738defb99a",
      "date": 1423541793454
    },
    {
      "type": "add",
      "id": "05d29a50beddf194",
      "item": {
        "type": "paragraph",
        "id": "05d29a50beddf194",
        "text": "          This could take the form of a monotonically increasing curve \n          for each player. \n"
      },
      "after": "2f2b83c2df52d813",
      "date": 1423541801044
    },
    {
      "type": "add",
      "id": "42cec8e90cc22627",
      "item": {
        "type": "paragraph",
        "id": "42cec8e90cc22627",
        "text": "The designer is encouraged to use creativity when designing the \ninterface.  This could be anything from animating the cup and dice to \ngiving the computer players or game a personality. \n"
      },
      "after": "05d29a50beddf194",
      "date": 1423541809342
    },
    {
      "type": "remove",
      "id": "794a4e6a75263b20",
      "date": 1423541837636
    },
    {
      "type": "edit",
      "id": "b5e92796edbe5265",
      "item": {
        "type": "paragraph",
        "id": "b5e92796edbe5265",
        "text": "                         Greed Specification \n                    (Revised: September 15, 1989) \nProvided courtesy of Reed Phillips and Tom Love."
      },
      "date": 1423541839789
    },
    {
      "type": "edit",
      "id": "b5e92796edbe5265",
      "item": {
        "type": "paragraph",
        "id": "b5e92796edbe5265",
        "text": "                         Greed Specification \n                    (Revised: September 15, 1989) \nProvided courtesy of Reed Phillips and Tom Love. [http://www.programd.com/69_aee9bfaf0aaa699e_1.htm source]"
      },
      "date": 1423542280799
    },
    {
      "type": "edit",
      "id": "b5e92796edbe5265",
      "item": {
        "type": "paragraph",
        "id": "b5e92796edbe5265",
        "text": "                         Greed Specification \n                    Revised: September 15, 1989\nProvided by Reed Phillips and Tom Love. [http://www.programd.com/69_aee9bfaf0aaa699e_1.htm source]"
      },
      "date": 1423542304910
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org",
      "date": 1640691826485
    }
  ]
}