{
  "title": "Code Style Reflects Organization",
  "story": [
    {
      "type": "paragraph",
      "id": "10cb419c7616eb01",
      "text": "After discussing some code examples from [[Robert Martin]]'s books, it appears that his designs may be for a more bureaucratic [[Organization]] than the one some of us normally find ourselves in."
    },
    {
      "type": "html",
      "text": "[[I]] tend to purposely avoid organizations that I consider overly bureaucratic, so perhaps my view of code and Robert's are shaped by the organizations that we target. It seems like he separates concepts in order to partition staff. However, such barriers create more total work in my opinion because one has to manage the extra interfaces between the barriers. But if you are dealing with developers who are perhaps not very skilled or not very motivated, then heavily partitioned code may be the way to go as far as predictability and developer progress monitoring. Large organizations tend to prefer predictable workers sometimes at the expense of productive workers, perhaps those with a tinge of [[Cowboy Coder]] personality. I get bored spending too much time managing parameter lists and pushing and pulling stuff in and out of interface layers. I feel better when the code is actually doing real work, solving the problem at hand.",
      "id": "0c4f6373c1e90615821d9e5fa8ba379a"
    },
    {
      "type": "html",
      "text": "\nI don't know if procedural/relational is as bureaucratizable as OOP. It is not something I've really cared about in the past so don't know the upper limits of p/r in that category. I try to keep my code fairly lean and simple regardless of who will be working on it. I don't partition concepts unless there is a clear need. (It is tough to partition by everything where there are multiple conflicting division candidates anyhow, which is usually the case. Martin's choices are thus somewhat arbitrary in my opinion.)",
      "id": "c082a58786f07f6eeb3c25d36ea819e2"
    },
    {
      "type": "html",
      "text": "\n[[Paul Graham]] has made some similar remarks in his criticism of OOP. See points 2 and 3 at: [http://www.paulgraham.com/noop.html www.paulgraham.com]",
      "id": "41e591684ad089765048f0ae7afc45ab"
    },
    {
      "type": "html",
      "text": "\nExcerpts:",
      "id": "6386045ea3cfc08fe58d932ddc911a51"
    },
    {
      "type": "html",
      "text": " \"Object-oriented programming imposes a discipline on these [mediocre] programmers that prevents any one of them from doing too much damage. The price is that the resulting code is bloated with protocols and full of duplication.\"",
      "id": "eea2a6f6da6664cf8dfb9dd8a01892e2"
    },
    {
      "type": "html",
      "text": " \"Object-oriented programming generates a lot of what looks like work...Something that a Lisp hacker might handle by [[push]]ing a symbol onto a list becomes a whole file of classes and methods. So it is a good tool if you want to convince yourself, or someone else, that you are doing a lot of work.\"",
      "id": "26f35e7209a6d9c32eb7c921dd2be98e"
    },
    {
      "type": "html",
      "text": "--top",
      "id": "69a82034db775ba4fce4510db0e3f9ff"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "87f5df74728b8b6cc94f7897678f130d"
    },
    {
      "type": "html",
      "text": "See also: [[Yag Ni]], [[Separation Of Concerns]]",
      "id": "a38a7ef6c2d23e5a9433285da348504b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "87f5df74728b8b6cc94f7897678f130d"
    },
    {
      "type": "html",
      "text": "[[Category Info Packaging]]",
      "id": "79a847039f529e1f559c010663fb8a96"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CodeStyleReflectsOrganization c2.com]",
      "id": "65c9ca6022d1a7542daffd42e2f2f38b"
    }
  ],
  "journal": [
    {
      "date": 1176724351000,
      "id": "8f46147a6cd7528d4f0c907e5e975c3b",
      "type": "create",
      "item": {
        "title": "Code Style Reflects Organization",
        "story": [
          {
            "type": "html",
            "text": "After discussing some code examples from [[Robert Martin]]'s books, it seems that perhaps his designs are for a more bureaucratic organization than where I usually am. I tend to purposely avoid organizations that I consider overly bureaucratic, so perhaps my view of code and Robert's are shaped by the organizations that we target. It seems like he separates concepts in order to partition staff. However, such barriers create more total work in my opinion because one has to manage the extra interfaces between the barriers. But if you are dealing with developers who are perhaps not very skilled or not very motivated, then heavily partitioned code may be the way to go as far as predictability and developer progress monitoring. Large organizations tend to prefer predictable workers sometimes at the expense of productive workers, perhaps those with a tinge of [[Cowboy Coder]] personality. I get bored spending too much time managing parameter lists and pushing and pulling stuff in and out of interface layers. I feel better when the code is actually doing real work, solving the problem at hand.",
            "id": "0c4f6373c1e90615821d9e5fa8ba379a"
          },
          {
            "type": "html",
            "text": "\nI don't know if procedural/relational is as bureaucratizable as OOP. It is not something I've really cared about in the past so don't know the upper limits of p/r in that category. I try to keep my code fairly lean and simple regardless of who will be working on it. I don't partition concepts unless there is a clear need. (It is tough to partition by everything where there are multiple conflicting division candidates anyhow, which is usually the case. Martin's choices are thus somewhat arbitrary in my opinion.)",
            "id": "c082a58786f07f6eeb3c25d36ea819e2"
          },
          {
            "type": "html",
            "text": "\n[[Paul Graham]] has made some similar remarks in his criticism of OOP. See points 2 and 3 at: [http://www.paulgraham.com/noop.html www.paulgraham.com]",
            "id": "41e591684ad089765048f0ae7afc45ab"
          },
          {
            "type": "html",
            "text": "\nExcerpts:",
            "id": "6386045ea3cfc08fe58d932ddc911a51"
          },
          {
            "type": "html",
            "text": " \"Object-oriented programming imposes a discipline on these [mediocre] programmers that prevents any one of them from doing too much damage. The price is that the resulting code is bloated with protocols and full of duplication.\"",
            "id": "eea2a6f6da6664cf8dfb9dd8a01892e2"
          },
          {
            "type": "html",
            "text": " \"Object-oriented programming generates a lot of what looks like work...Something that a Lisp hacker might handle by pushing a symbol onto a list becomes a whole file of classes and methods. So it is a good tool if you want to convince yourself, or someone else, that you are doing a lot of work.\"",
            "id": "26f35e7209a6d9c32eb7c921dd2be98e"
          },
          {
            "type": "html",
            "text": "--top",
            "id": "69a82034db775ba4fce4510db0e3f9ff"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "87f5df74728b8b6cc94f7897678f130d"
          },
          {
            "type": "html",
            "text": "See also: [[Yag Ni]], [[Separation Of Concerns]]",
            "id": "a38a7ef6c2d23e5a9433285da348504b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "87f5df74728b8b6cc94f7897678f130d"
          },
          {
            "type": "html",
            "text": "[[Category Info Packaging]]",
            "id": "79a847039f529e1f559c010663fb8a96"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CodeStyleReflectsOrganization c2.com]",
            "id": "65c9ca6022d1a7542daffd42e2f2f38b"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1653339324963
    },
    {
      "type": "edit",
      "id": "26f35e7209a6d9c32eb7c921dd2be98e",
      "item": {
        "type": "html",
        "text": " \"Object-oriented programming generates a lot of what looks like work...Something that a Lisp hacker might handle by [[push]]ing a symbol onto a list becomes a whole file of classes and methods. So it is a good tool if you want to convince yourself, or someone else, that you are doing a lot of work.\"",
        "id": "26f35e7209a6d9c32eb7c921dd2be98e"
      },
      "date": 1681315641499
    },
    {
      "item": {
        "type": "factory",
        "id": "10cb419c7616eb01"
      },
      "id": "10cb419c7616eb01",
      "type": "add",
      "after": "65c9ca6022d1a7542daffd42e2f2f38b",
      "date": 1681315729522
    },
    {
      "id": "10cb419c7616eb01",
      "type": "move",
      "order": [
        "10cb419c7616eb01",
        "0c4f6373c1e90615821d9e5fa8ba379a",
        "c082a58786f07f6eeb3c25d36ea819e2",
        "41e591684ad089765048f0ae7afc45ab",
        "6386045ea3cfc08fe58d932ddc911a51",
        "eea2a6f6da6664cf8dfb9dd8a01892e2",
        "26f35e7209a6d9c32eb7c921dd2be98e",
        "69a82034db775ba4fce4510db0e3f9ff",
        "87f5df74728b8b6cc94f7897678f130d",
        "a38a7ef6c2d23e5a9433285da348504b",
        "87f5df74728b8b6cc94f7897678f130d",
        "79a847039f529e1f559c010663fb8a96",
        "65c9ca6022d1a7542daffd42e2f2f38b"
      ],
      "date": 1681315737211
    },
    {
      "type": "edit",
      "id": "0c4f6373c1e90615821d9e5fa8ba379a",
      "item": {
        "type": "html",
        "text": " I tend to purposely avoid organizations that I consider overly bureaucratic, so perhaps my view of code and Robert's are shaped by the organizations that we target. It seems like he separates concepts in order to partition staff. However, such barriers create more total work in my opinion because one has to manage the extra interfaces between the barriers. But if you are dealing with developers who are perhaps not very skilled or not very motivated, then heavily partitioned code may be the way to go as far as predictability and developer progress monitoring. Large organizations tend to prefer predictable workers sometimes at the expense of productive workers, perhaps those with a tinge of [[Cowboy Coder]] personality. I get bored spending too much time managing parameter lists and pushing and pulling stuff in and out of interface layers. I feel better when the code is actually doing real work, solving the problem at hand.",
        "id": "0c4f6373c1e90615821d9e5fa8ba379a"
      },
      "date": 1681315745436
    },
    {
      "type": "edit",
      "id": "10cb419c7616eb01",
      "item": {
        "type": "paragraph",
        "id": "10cb419c7616eb01",
        "text": "After discussing some code examples from [[Robert Martin]]'s books, it seems that perhaps his designs are for a more bureaucratic organization than where I usually am."
      },
      "date": 1681315746710
    },
    {
      "type": "edit",
      "id": "10cb419c7616eb01",
      "item": {
        "type": "paragraph",
        "id": "10cb419c7616eb01",
        "text": "After discussing some code examples from [[Robert Martin]]'s books, it appears that his designs may be for a more bureaucratic organization than the one some of us normally find ourselves in."
      },
      "date": 1681315757275
    },
    {
      "type": "edit",
      "id": "10cb419c7616eb01",
      "item": {
        "type": "paragraph",
        "id": "10cb419c7616eb01",
        "text": "After discussing some code examples from [[Robert Martin]]'s books, it appears that his designs may be for a more bureaucratic [[Organization]] than the one some of us normally find ourselves in."
      },
      "date": 1681315809905
    },
    {
      "type": "edit",
      "id": "0c4f6373c1e90615821d9e5fa8ba379a",
      "item": {
        "type": "html",
        "text": "I tend to purposely avoid organizations that I consider overly bureaucratic, so perhaps my view of code and Robert's are shaped by the organizations that we target. It seems like he separates concepts in order to partition staff. However, such barriers create more total work in my opinion because one has to manage the extra interfaces between the barriers. But if you are dealing with developers who are perhaps not very skilled or not very motivated, then heavily partitioned code may be the way to go as far as predictability and developer progress monitoring. Large organizations tend to prefer predictable workers sometimes at the expense of productive workers, perhaps those with a tinge of [[Cowboy Coder]] personality. I get bored spending too much time managing parameter lists and pushing and pulling stuff in and out of interface layers. I feel better when the code is actually doing real work, solving the problem at hand.",
        "id": "0c4f6373c1e90615821d9e5fa8ba379a"
      },
      "date": 1681315868826
    },
    {
      "type": "edit",
      "id": "0c4f6373c1e90615821d9e5fa8ba379a",
      "item": {
        "type": "html",
        "text": "[[I]] tend to purposely avoid organizations that I consider overly bureaucratic, so perhaps my view of code and Robert's are shaped by the organizations that we target. It seems like he separates concepts in order to partition staff. However, such barriers create more total work in my opinion because one has to manage the extra interfaces between the barriers. But if you are dealing with developers who are perhaps not very skilled or not very motivated, then heavily partitioned code may be the way to go as far as predictability and developer progress monitoring. Large organizations tend to prefer predictable workers sometimes at the expense of productive workers, perhaps those with a tinge of [[Cowboy Coder]] personality. I get bored spending too much time managing parameter lists and pushing and pulling stuff in and out of interface layers. I feel better when the code is actually doing real work, solving the problem at hand.",
        "id": "0c4f6373c1e90615821d9e5fa8ba379a"
      },
      "date": 1681315880510
    }
  ]
}