{
  "title": "Gold Plating",
  "story": [
    {
      "type": "html",
      "text": "That problem's too boring for you?",
      "id": "e7c88638b414ed4ca82ebb1c0006bc1b"
    },
    {
      "type": "html",
      "text": "\nYour vast intellect is wasted on your customer's silly needs?",
      "id": "60dd11e80643ebfd6bf0ec96359c3bfd"
    },
    {
      "type": "html",
      "text": "\nHave I got a solution for you!:",
      "id": "3610e5363b38b9c7ddd972f51439e898"
    },
    {
      "type": "html",
      "text": "<b>[[Gold Plating]]</b>",
      "id": "890b49b803ffcf2fbf16584ec4b97bc0"
    },
    {
      "type": "html",
      "text": "\nThat's right, friend.  Before long, you'll discover that almost <i>any</i> problem can be made more complicated!  Tap into the unemptyable wells of [[Premature Complexity]] & [[Accidental Complexity]], and have a heyday!",
      "id": "a1fbd941f2487b2140a09148c08093e6"
    },
    {
      "type": "html",
      "text": "\nIf your coworkers question you, assume they're idiots who can't code their way out of a paper bag! (Or, in this case, a paper hypercoagulative entity-containing megadevice!)",
      "id": "52608c7c62e5c297267d61ddd61152e2"
    },
    {
      "type": "html",
      "text": "<b>Hint:</b> This is an <i>[[Anti Pattern]]</i>",
      "id": "7be26973da9b230d714cce56dd709e02"
    },
    {
      "type": "html",
      "text": " Not necessarily in all settings, see below.",
      "id": "19058239025e53a522235ab3523a4017"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8e69d08da81c227ebd5eed6bdf55ae2f"
    },
    {
      "type": "html",
      "text": "\nIt's possible to do gold-plating by accident. Usually it happens when you program a little bit in a lot of languages. You have a problem P, and it has simple solution Q which is immediately obvious to you. But solution Q is in language X, and you're using language Y. So what you end up trying to do is implementing enough of X in Y that you can implement Q the same way you did in X. You've made a bigger problem that way.",
      "id": "b3db9af161343f417e60cb2c4a35fba1"
    },
    {
      "type": "html",
      "text": "\nI program in [[Scheme Language]] and [[Forth Language]]. They are entirely different languages. I was trying to write a pattern matcher in Forth, but I had written several of the things in Scheme, and everything that occurred to me had to do with (a) lambda expressions, which can be used to combine two parsing rules into a single parsing rule, and (b) [[Continuation Passing Style]], which can be used to pass every parsing rule <i>two</i> continuations, one to use if it succeeds and one to use if it fails. I was also thinking of [[Cons Cell]]s, of course, and car and cdr. That's how you do this stuff in Scheme.",
      "id": "6ab7d137d1cf9590ed324f05770dfdaa"
    },
    {
      "type": "html",
      "text": "\nSo I started to think of how I could implement some kind of CPS in Forth, and before long it seemed that garbage collection had been dragged in, and [[Call With Current Continuation]], and I found myself getting carried away trying to implement most of Scheme in Forth. It is not impossible to implement Scheme in Forth, but since I had never actually done it before I was finding it pretty difficult. It posed a bunch of other hard problems which I hadn't considered. Most of those problems were just as hard as the original pattern matching problem. (After all, a Scheme interpreter is just a bunch of rewrite rules, anyway, isn't it?)",
      "id": "afb568192654db944bd5c43cd0cbdbb5"
    },
    {
      "type": "html",
      "text": "\nMonths later the solution occurred to me. It didn't occur to me all at once, either, but in stages. At one point enough of it was revealed that I could code. I successfully implemented a pattern-matcher in pure Forth. It does not require Scheme's lambda forms, or garbage collection, or continuations. Nor does it create Forth implementations of any of those things. But you can see certain similarities between the Forth pattern-matcher and the Scheme ones I had written before.",
      "id": "336c82a89699814e8e956fee33f0669a"
    },
    {
      "type": "html",
      "text": "\nI'm pleased with the elegance of the solution but if someone had shown it to me two months ago I would have probably rejected it -- unless they took the trouble to show me first how the solution did the same thing the Scheme solution would do, only without the need for most of Scheme.",
      "id": "5eabec9fa359707aa644a8361aa3baba"
    },
    {
      "type": "html",
      "text": "\nMy conclusion is that [[Gold Plating]], at least in some cases, comes from thinking of a solution in the wrong programming language and then trying to mechanically translate it to the language actually in use.",
      "id": "f4ed557a491dc7371f939653db06028d"
    },
    {
      "type": "html",
      "text": "\nI already wrote that [[Restricted Programming Language]]s in particular can make [[Gold Plating]] worse -- but [[Gold Plating]] can happen even in a relatively unrestricted language. It's the language mismatch that causes it.",
      "id": "9276ddfa1f72dddb145ec03628bd9d28"
    },
    {
      "type": "html",
      "text": "<i>This sounds more like [[Nail Tinting]] than [[Gold Plating]].</i>  [[Smug Lisp Weenie]]s call it [[Green Spunning]].",
      "id": "c886245cf53ca9208d8529a79861c0c0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8e69d08da81c227ebd5eed6bdf55ae2f"
    },
    {
      "type": "html",
      "text": "<i>Some comments that were originally on [[Boredom Isa Smell]], before it was reworded to more explicitly disavow the [[Gold Plating]] habit:</i>",
      "id": "36437dbba7548177f9b09e6bd9c6db9c"
    },
    {
      "type": "html",
      "text": "[...] when you look for challenges and interesting ways to do things, there is always the risk that you will spend your time entertaining yourself rather than doing what you are getting paid for.  It's important to keep some sort of objective view of what you are doing to avoid boring tasks, and continuously evaluate whether it is really productive or if you are \"just screwing around\".  When programmers turn simple problems into complex ones just so that they are more fun to work on, that's a smell too.  --[[Kris Johnson]]",
      "id": "94cd55ea6b9ef20f22ef45b7d0065faf"
    },
    {
      "type": "html",
      "text": "\nI agree. Most of our prisons are of our own construction. When we do a little more than the customer asks, we have to drag that little more along for the rest of the journey. And the customer has no sympathy for our burden. When we do a little less than the customer asks we get to finish early, have a nice conversation with the customer in a relaxed environment, and cheerfully charge off to do the two more things the customer really wanted out of the fifteen we had thought of. Doing those two more things well is fun too. The [[Gold Plating]] is on the handcuffs. -- [[Ward Cunningham]]",
      "id": "82d5f99f607c737ef3a153773758be5c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8e69d08da81c227ebd5eed6bdf55ae2f"
    },
    {
      "type": "html",
      "text": "<i>Copied from [[Creeping Featuritis]]</i>:",
      "id": "d9fb8ce4be9fda6c737d564613bf867f"
    },
    {
      "type": "html",
      "text": "\nWhen I joined Tektronix I attended an engineering orientation where the founder of the company, Howard Vollum, spoke. After a few light comments about his long-time rival, Hewlett-Packard, he focused on our real enemy, [[Creeping Featuritis]]. I was struck by his intensity. It took me a few years to integrate his comments with the company motto: committed to technical excellence . He was right, of course. You'll never find the exquisite solution to a real problem if you are busy tending little problems of your own making. -- [[Ward Cunningham]]",
      "id": "cedb292b248cb5c9a43c9c33177d1652"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8e69d08da81c227ebd5eed6bdf55ae2f"
    },
    {
      "type": "html",
      "text": "it is implied above that [[Gold Plating]] is a result of programmers thinking that problems are too boring/easy - it seems equally likely to me that pathological attention to irrelevant details could result from reluctance to tackle the meat of a particularly <i>difficult</i> problem. -- [[Moe Aboulkheir]]",
      "id": "93952ef3f62030617b66130b0f850b31"
    },
    {
      "type": "html",
      "text": "<i>Being of the [[Everything Is Relative]] mindset, calling it \"pathological\" my be misplaced in my opinion. They just may be in the wrong specialty. There's a place and time for such fastidious personalities. For example, see the software QA article referenced in the [[Space Shuttle]] topic. Hell, maybe the [[Grammar Vandal]] can get a job in their documentation department.</i>",
      "id": "1560966f6c0b86e50917f7a36635d3e1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8e69d08da81c227ebd5eed6bdf55ae2f"
    },
    {
      "type": "html",
      "text": "\nOf course, the million-dollar question is: <i>is well factored code [[Gold Plating]]?  What about safe code?  Is protecting yourself from buffer overflows just overcomplicating things because [[You Arent Gonna Need It]]?  I mean, where is the line between wiping the stinking [[Code Smell]] turds off the wood and electroplating precious metals onto it begin?</i>",
      "id": "6dc701e1228e6b01a4c429eb3f2d1a57"
    },
    {
      "type": "html",
      "text": "<i>Speaking of millions of dollars, isn't there also an impetus on the part of contractors to do [[Gold Plating]] to extend the lifetime of contracts?  Are there not other impulses at play here other than boredom or [[Bondage And Discipline Language]]?</i> -- [[Malcolm Campbell]]",
      "id": "2d53c93c00d0cc9d81fa1afc9065eede"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "8e69d08da81c227ebd5eed6bdf55ae2f"
    },
    {
      "type": "html",
      "text": "\nSee also: [[Borrowing Trouble]], [[Creeping Featuritis]], [[Mental Masturbation]], [[Safety Gold Plating]], [[Job Security]], [[Are We Biased Toward Labor Intensive]]",
      "id": "c7cefcc6b2dae0da05172861a503e3f6"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?GoldPlating c2.com]",
      "id": "9d922aa85013bdad01c745b38f8fb4f6"
    }
  ],
  "journal": [
    {
      "date": 1415630774000,
      "id": "486264aba2d0ed341bb7b9d557efbe52",
      "type": "create",
      "item": {
        "title": "Gold Plating",
        "story": [
          {
            "type": "html",
            "text": "That problem's too boring for you?",
            "id": "e7c88638b414ed4ca82ebb1c0006bc1b"
          },
          {
            "type": "html",
            "text": "\nYour vast intellect is wasted on your customer's silly needs?",
            "id": "60dd11e80643ebfd6bf0ec96359c3bfd"
          },
          {
            "type": "html",
            "text": "\nHave I got a solution for you!:",
            "id": "3610e5363b38b9c7ddd972f51439e898"
          },
          {
            "type": "html",
            "text": "<b>[[Gold Plating]]</b>",
            "id": "890b49b803ffcf2fbf16584ec4b97bc0"
          },
          {
            "type": "html",
            "text": "\nThat's right, friend.  Before long, you'll discover that almost <i>any</i> problem can be made more complicated!  Tap into the unemptyable wells of [[Premature Complexity]] & [[Accidental Complexity]], and have a heyday!",
            "id": "a1fbd941f2487b2140a09148c08093e6"
          },
          {
            "type": "html",
            "text": "\nIf your coworkers question you, assume they're idiots who can't code their way out of a paper bag! (Or, in this case, a paper hypercoagulative entity-containing megadevice!)",
            "id": "52608c7c62e5c297267d61ddd61152e2"
          },
          {
            "type": "html",
            "text": "<b>Hint:</b> This is an <i>[[Anti Pattern]]</i>",
            "id": "7be26973da9b230d714cce56dd709e02"
          },
          {
            "type": "html",
            "text": " Not necessarily in all settings, see below.",
            "id": "19058239025e53a522235ab3523a4017"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8e69d08da81c227ebd5eed6bdf55ae2f"
          },
          {
            "type": "html",
            "text": "\nIt's possible to do gold-plating by accident. Usually it happens when you program a little bit in a lot of languages. You have a problem P, and it has simple solution Q which is immediately obvious to you. But solution Q is in language X, and you're using language Y. So what you end up trying to do is implementing enough of X in Y that you can implement Q the same way you did in X. You've made a bigger problem that way.",
            "id": "b3db9af161343f417e60cb2c4a35fba1"
          },
          {
            "type": "html",
            "text": "\nI program in [[Scheme Language]] and [[Forth Language]]. They are entirely different languages. I was trying to write a pattern matcher in Forth, but I had written several of the things in Scheme, and everything that occurred to me had to do with (a) lambda expressions, which can be used to combine two parsing rules into a single parsing rule, and (b) [[Continuation Passing Style]], which can be used to pass every parsing rule <i>two</i> continuations, one to use if it succeeds and one to use if it fails. I was also thinking of [[Cons Cell]]s, of course, and car and cdr. That's how you do this stuff in Scheme.",
            "id": "6ab7d137d1cf9590ed324f05770dfdaa"
          },
          {
            "type": "html",
            "text": "\nSo I started to think of how I could implement some kind of CPS in Forth, and before long it seemed that garbage collection had been dragged in, and [[Call With Current Continuation]], and I found myself getting carried away trying to implement most of Scheme in Forth. It is not impossible to implement Scheme in Forth, but since I had never actually done it before I was finding it pretty difficult. It posed a bunch of other hard problems which I hadn't considered. Most of those problems were just as hard as the original pattern matching problem. (After all, a Scheme interpreter is just a bunch of rewrite rules, anyway, isn't it?)",
            "id": "afb568192654db944bd5c43cd0cbdbb5"
          },
          {
            "type": "html",
            "text": "\nMonths later the solution occurred to me. It didn't occur to me all at once, either, but in stages. At one point enough of it was revealed that I could code. I successfully implemented a pattern-matcher in pure Forth. It does not require Scheme's lambda forms, or garbage collection, or continuations. Nor does it create Forth implementations of any of those things. But you can see certain similarities between the Forth pattern-matcher and the Scheme ones I had written before.",
            "id": "336c82a89699814e8e956fee33f0669a"
          },
          {
            "type": "html",
            "text": "\nI'm pleased with the elegance of the solution but if someone had shown it to me two months ago I would have probably rejected it -- unless they took the trouble to show me first how the solution did the same thing the Scheme solution would do, only without the need for most of Scheme.",
            "id": "5eabec9fa359707aa644a8361aa3baba"
          },
          {
            "type": "html",
            "text": "\nMy conclusion is that [[Gold Plating]], at least in some cases, comes from thinking of a solution in the wrong programming language and then trying to mechanically translate it to the language actually in use.",
            "id": "f4ed557a491dc7371f939653db06028d"
          },
          {
            "type": "html",
            "text": "\nI already wrote that [[Restricted Programming Language]]s in particular can make [[Gold Plating]] worse -- but [[Gold Plating]] can happen even in a relatively unrestricted language. It's the language mismatch that causes it.",
            "id": "9276ddfa1f72dddb145ec03628bd9d28"
          },
          {
            "type": "html",
            "text": "<i>This sounds more like [[Nail Tinting]] than [[Gold Plating]].</i>  [[Smug Lisp Weenie]]s call it [[Green Spunning]].",
            "id": "c886245cf53ca9208d8529a79861c0c0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8e69d08da81c227ebd5eed6bdf55ae2f"
          },
          {
            "type": "html",
            "text": "<i>Some comments that were originally on [[Boredom Isa Smell]], before it was reworded to more explicitly disavow the [[Gold Plating]] habit:</i>",
            "id": "36437dbba7548177f9b09e6bd9c6db9c"
          },
          {
            "type": "html",
            "text": "[...] when you look for challenges and interesting ways to do things, there is always the risk that you will spend your time entertaining yourself rather than doing what you are getting paid for.  It's important to keep some sort of objective view of what you are doing to avoid boring tasks, and continuously evaluate whether it is really productive or if you are \"just screwing around\".  When programmers turn simple problems into complex ones just so that they are more fun to work on, that's a smell too.  --[[Kris Johnson]]",
            "id": "94cd55ea6b9ef20f22ef45b7d0065faf"
          },
          {
            "type": "html",
            "text": "\nI agree. Most of our prisons are of our own construction. When we do a little more than the customer asks, we have to drag that little more along for the rest of the journey. And the customer has no sympathy for our burden. When we do a little less than the customer asks we get to finish early, have a nice conversation with the customer in a relaxed environment, and cheerfully charge off to do the two more things the customer really wanted out of the fifteen we had thought of. Doing those two more things well is fun too. The [[Gold Plating]] is on the handcuffs. -- [[Ward Cunningham]]",
            "id": "82d5f99f607c737ef3a153773758be5c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8e69d08da81c227ebd5eed6bdf55ae2f"
          },
          {
            "type": "html",
            "text": "<i>Copied from [[Creeping Featuritis]]</i>:",
            "id": "d9fb8ce4be9fda6c737d564613bf867f"
          },
          {
            "type": "html",
            "text": "\nWhen I joined Tektronix I attended an engineering orientation where the founder of the company, Howard Vollum, spoke. After a few light comments about his long-time rival, Hewlett-Packard, he focused on our real enemy, [[Creeping Featuritis]]. I was struck by his intensity. It took me a few years to integrate his comments with the company motto: committed to technical excellence . He was right, of course. You'll never find the exquisite solution to a real problem if you are busy tending little problems of your own making. -- [[Ward Cunningham]]",
            "id": "cedb292b248cb5c9a43c9c33177d1652"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8e69d08da81c227ebd5eed6bdf55ae2f"
          },
          {
            "type": "html",
            "text": "it is implied above that [[Gold Plating]] is a result of programmers thinking that problems are too boring/easy - it seems equally likely to me that pathological attention to irrelevant details could result from reluctance to tackle the meat of a particularly <i>difficult</i> problem. -- [[Moe Aboulkheir]]",
            "id": "93952ef3f62030617b66130b0f850b31"
          },
          {
            "type": "html",
            "text": "<i>Being of the [[Everything Is Relative]] mindset, calling it \"pathological\" my be misplaced in my opinion. They just may be in the wrong specialty. There's a place and time for such fastidious personalities. For example, see the software QA article referenced in the [[Space Shuttle]] topic. Hell, maybe the [[Grammar Vandal]] can get a job in their documentation department.</i>",
            "id": "1560966f6c0b86e50917f7a36635d3e1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8e69d08da81c227ebd5eed6bdf55ae2f"
          },
          {
            "type": "html",
            "text": "\nOf course, the million-dollar question is: <i>is well factored code [[Gold Plating]]?  What about safe code?  Is protecting yourself from buffer overflows just overcomplicating things because [[You Arent Gonna Need It]]?  I mean, where is the line between wiping the stinking [[Code Smell]] turds off the wood and electroplating precious metals onto it begin?</i>",
            "id": "6dc701e1228e6b01a4c429eb3f2d1a57"
          },
          {
            "type": "html",
            "text": "<i>Speaking of millions of dollars, isn't there also an impetus on the part of contractors to do [[Gold Plating]] to extend the lifetime of contracts?  Are there not other impulses at play here other than boredom or [[Bondage And Discipline Language]]?</i> -- [[Malcolm Campbell]]",
            "id": "2d53c93c00d0cc9d81fa1afc9065eede"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "8e69d08da81c227ebd5eed6bdf55ae2f"
          },
          {
            "type": "html",
            "text": "\nSee also: [[Borrowing Trouble]], [[Creeping Featuritis]], [[Mental Masturbation]], [[Safety Gold Plating]], [[Job Security]], [[Are We Biased Toward Labor Intensive]]",
            "id": "c7cefcc6b2dae0da05172861a503e3f6"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?GoldPlating c2.com]",
            "id": "9d922aa85013bdad01c745b38f8fb4f6"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628511744908
    }
  ]
}