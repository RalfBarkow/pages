{
  "title": "Engineering Envy",
  "story": [
    {
      "type": "html",
      "text": "\"What do you lack that they have? A diploma.\" -- [[The Wizard Of Oz]]",
      "id": "d72ce5db63ac6ae84e6fc8680f2a31fd"
    },
    {
      "type": "html",
      "text": "\nWhat do engineers have that we don't, but wish we did?",
      "id": "adaa7ed742ac8605833f3f43e427e5cf"
    },
    {
      "type": "html",
      "text": "\nTwo things that I really envy civil engineers:",
      "id": "38325d6066fdde8db583052ab64b62ef"
    },
    {
      "type": "html",
      "text": " A common understanding of acceptable practice. You don't get to be a civil engineer unless you persuade working civil engineers that you know what you are doing and can be trusted with other people's lives. I have no idea how to certify software competence; every attempt I've seen has certified platform knowledge <i>[$$$]</i>, at best. I don't think we understand what we're doing well enough to certify it yet.",
      "id": "199833404b271d9d58f199aada36ef90"
    },
    {
      "type": "html",
      "text": " Review boards. When a building falls down, a review board is called in to figure out why and update the acceptable practice so that it doesn't happen again. In software, we bury our mistakes; when a $10-million project is cancelled after coming in 2 years late with unusable deliverables, everybody says \"That's software for you\" and moves on to do something else.\tBut is it possible to have a review board before you have a common understanding of acceptable practice?",
      "id": "9835fe449929bfe51d804ee68703ffcc"
    },
    {
      "type": "html",
      "text": " Something external and objective to test ideas against. See [[Discipline Envy]]. Most software engineering metrics are too closely tied to psychology, and psychology is a very immature discipline compared to chemistry and physics. See [[Most Holy Wars Tied To Psychology]]. -- top",
      "id": "6a2b43b8a56fe47759db428736042a4e"
    },
    {
      "type": "html",
      "text": "\nI think that we, as a discipline, are missing an invaluable learning opportunity because we don't have formal [[Post Project Review]](s) on all projects, successful and unsuccessful.",
      "id": "09a5041c0e237e636971edc001933998"
    },
    {
      "type": "html",
      "text": "\nCredit: This idea first came to me when reading [[Why Buildings Fall Down]].",
      "id": "28cec9daddeec8ed0ef1eea413097ec3"
    },
    {
      "type": "html",
      "text": "-- [[Betsy Hanes Perry]]",
      "id": "7182ab0df8c772a980fbccfd3ec05000"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "<b>Discussion:</b>",
      "id": "398b273632d7a06dfcaa55775cdd8354"
    },
    {
      "type": "html",
      "text": "\nIs it possible that these two things are easier to bring about in disciplines with more stable user expectations? I may be very wrong here, but I feel that the answer to \"What can software do?\" has changed rather significantly over my lifetime, but the answer to \"What can a building do?\" has stayed much more stable. If a civil engineer stumbles across this page, I'd be very interested in their thoughts. -- [[David Saff]]",
      "id": "8888aae6dd664c016b2b4ac439123f0c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "\nOne thing that software does not have is recourse to natural laws - a civil engineer can always make a beam slightly smaller, and s/he knows that it will behave <b>almost</b> the same as the thicker one. Software seems at times to be chaotic - slight changes in the initial conditions have great and unpredictable effects on the outcome. And few customers of a building want as many structural changes as software customers want - they know it's hard to change concrete, but software is [[Only Ones And Zeros]].",
      "id": "2a1b47277a2543ef895c920c721e9d33"
    },
    {
      "type": "html",
      "text": "-- [[Pete Hardie]]",
      "id": "9fdd955a2cbe16431e5c0a1e0d1ea230"
    },
    {
      "type": "html",
      "text": "\nExactly, because software can only <i>simulate</i> a beam of light...provide a metaphor for light by exploiting a video monitor. The simulator is <b>not</b> the beam of light, so it acts unpredictably. It does not <i>have the nature of a physical beam of light.</i> However, we can write software that <i>controls</i> a real beam of light, but even that method of control will be another metaphor for some phsyical kind of controller. The software can never be the <i>phsyical entity</i> it models. It will be cool when software starts creating new constructs that aren't even based on the physical world. This has started but is still in its infancy. -- rad",
      "id": "7795095bb5310f6d15b58b847b342dff"
    },
    {
      "type": "html",
      "text": "\nYikes, no! Small changes in engineering can have radical effects on not only the structure itself (how about that bridge that collapsed, simply because they added a small windbreak for the pedestrian traffic?) but things around it (an entire city situated on an island, connected to the Oregon Coast by an isthmus disappeared when the Army Corps of Engineers put up a seawall for a neighboring harbor). Oftentimes these civil engineers don't know what their changes will produce, of course these results may be the most dramatic, and thereby get books written about them, whereas software crises seem much more common. I think this whole discussion misses the point that we can never be like civil engineers, everything we do, succeses and failures, rarely is even widely known within an organization, let alone to the world. -- anon ",
      "id": "b9f641953ec1ab7741a14cb4afa63887"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "<i>One thing that software does not have is recourse to natural laws... -- Pete Hardie</i>",
      "id": "a1b12d9813508d2d258d51942a6f694b"
    },
    {
      "type": "html",
      "text": "\nIsn't information theory subject to, or even part of, natural law? And don't we regularly exploit the continuities of that discipline? I'm striving to put my finger on just where software departs, and I know that it does. Can anyone help me?",
      "id": "768776b3fb1e3e1f1327a16dacfc149b"
    },
    {
      "type": "html",
      "text": "-- [[Walden Mathews]]",
      "id": "abc974345ee8e0672af961770cf504bc"
    },
    {
      "type": "html",
      "text": "\nEverthing we develop in software is metaphorical. Every software system is representative, symbolic, or analogous to something else physical. This doesn't mean it has to <i>look</i> like something else, just be a level of indirection to it - an <i>interface</i> or a <i>conduit</i>. This is the essential difference between Software Engineering and almost <b>everything</b> else in Civil Engineering. Software <i>must</i> be metaphorical. Other mediums, can be, but don't <i>have</i> to be. When a Civil Engineer designs a bridge, it is a <i>real</i> and <i>tactile</i> bridge and people can move across it. It is not <i>a metaphorical bridge</i> or <i>a representation of a bridge</i>. It does not <i>symbolize</i> a bridge. I went off on this for a while in [[Architecting Word]]. <i>For example, Quicken provides a metaphor of your checkbook (i.e. your actual Checking Account not the timy pieces of paper that are themselves an indirection). A Wordprocessor provides a metaphor for writing a document. Even a real-time control system is metaphorical of the system it is controlling!!</i> For me, this is something that is very unique about software, maybe its most unique attribute. It is <i>always</i> indirection. Software inhabits the <i>machine</i>. It is never tactile but it may <i>control</i> something tactile - indirectly. It may enumulate, be analogous to, or mimic something tactile (even as much as in [[Virtual Reality]]) or not, but it is still an indirection. The software system <i>itself</i> is never the <i>entity or process it is representing</i> - software is never the <i>final intention</i>. It is always the metaphor of something else, like a payroll system or a 401K plan. This doesn't mean it has to <i>look</i> like or <i>emulate</i> a traditional payroll system or 401K plan. That misses my point. The point is that <b>you can look through the software to the payroll system</b>. This is the really wonderful thing about Software. <i>Software is allegory.</i> Here, allegory refers to characters, user and programmer interfaces, and expression that represent abstract ideas and concepts. -- [[Robert Di Falco]]",
      "id": "ed25cf4e03dcd703f1f64e83380e9006"
    },
    {
      "type": "html",
      "text": "\nA computer program is a blueprint for a virtual machine. The computer automatically translates that blueprint into a machine. The machine obeys the physical laws of the computer. What makes software seem different from a bridge is our repeated misunderstanding of it - we keep thinking that the software is the <i>machine itself.</i> -- [[Anonymous Donor]]",
      "id": "52985687e7a49d10e9adffd9eb761286"
    },
    {
      "type": "html",
      "text": "<i>This is exactly <b>why</b> I say that software is allegory. We can't even describe it without entering into allegory. This is why we say <b>virtual</b> machine, it's not a </i>real<i> machine - only the hardware is a physical and tactile machine. Software by definition <b>runs in the allegorical world</b> - its home is metaphor-land and its strengths are indirection!! Cool. If we build a bridge in software using a [[Bridge Pattern]] or are making a virtual bridge in a game - two VERY different things - neither is tactile, a person cannot walk across it. Both are created to represent something else. To provide a view on to some other concept. Only ideas, objects, or virtual characters can span our software bridges. This is cool, something to be embraced. Software is always a tool. Nothing else resembles this aspect of software in that it is only used for indirection. I can't think of a single entity in the software realm that is not symbolic - that is not a </i>concept<i>. If we think about the hardware that runs software, we </i>can<i> find reality, but not in the software itself. It's just ideas. I almost prefer to use the analogy of allegory or the analogy of metaphor but both work well for communicating that idea of </i>indirection<i>. -- [[Robert Di Falco]]</i>",
      "id": "191a0fb98287acda50113ae1f5ee1a32"
    },
    {
      "type": "html",
      "text": "<i>Always expect what I write to change as I refine my wording and ideas... I don't have my mind made up about anything and am constantly evolving my points of view. -- [[The Empty Rice Bowl]]</i>",
      "id": "16448bdecbd0c75c701505e110e36138"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "\nRobert, I think you're close with this, but I'm still missing something. While it's true that Quicken <i>used to be</i> a metaphor for my checkbook, it now <i>is</i> my checkbook. The difference is just some network links. And while a real-time control program may use an internal model of its environment, I believe the control mechanism is just that, not a metaphor for a control mechanism. But I definitely see the rampant use of metaphor in what we as a programming community tend to do when we ply our craft (and talk about it). I wonder: is the metaphor essential, or is it maybe a large part of what stands between us and credible engineering?",
      "id": "087b7add695921bbf401a29632ad32c5"
    },
    {
      "type": "html",
      "text": "\nThanks for your generous contribution.",
      "id": "bf62ea661355452aa5e68ced06a36e86"
    },
    {
      "type": "html",
      "text": "-- [[Walden Mathews]]",
      "id": "abc974345ee8e0672af961770cf504bc"
    },
    {
      "type": "html",
      "text": "\nI understand [[The Map Has Replaced The Territory]], but this isn't the case in Quicken. I'm going to attempt to peel one layer at a time since there are so many ways to view metaphor and something like Quicken actually uses them all! First, is the most outer layer - the relationship between Quicken and the look and use of a traditional Checkbook. Most of us use Quicken <i>with</i> our Checkbooks. We haven't ceased to write <i>any</i> traditional checks, just fewer. Even when Quicken does completely supplant the Check Book and move on to not simulate the Check Book in its user interface, there are still other, even more important metaphorical attributes of Quicken. The next level to this is the <i>balancing</i> of our checking accounts. Quicken has indeed replaced the manual way of <i>balancing</i> your checkbook with a paper and pen. However, that doesn't stop Quicken from being a metaphor of your checking account. We have to go in another layer to see that even the tradition <i>paper</i> based ledger it replaces was already just a device we could look through to <i>see</i> what is <i>at the bank</i>. So, Quicken did what commercial products sometimes do. They replaced an existing metaphor with a much more powerful, software based one. Unfortunately, they chose to <i>emulate</i> the old metaphor in their User Interface. However, the important point I'm trying to make is that while Quicken may base its look and workflow on your checkbook - both the check book and Quicken are really just metaphors of your banking data. Go to the next layer and we find that what is <i>at the bank</i> (their software, databases, and paper ledgers) are just a layer of indirection to <i>paper money</i>. Is there yet another layer of indirection? Of course. I'm sure everyone has guessed it. It is the <i>paper money</i> itself! Money is simply a symbol for the exchange of goods and services. So, even if we go to a system devoid of paper money, even the electronic records will be markers and not the <i>final</i> layer. Just a different metaphor. Just a better way to <i>represent</i> the exchange of goods and services. ",
      "id": "e327384fbadc723617270e7e6835830c"
    },
    {
      "type": "html",
      "text": "\nIt <i>seems</i> to us like a real-time control system is more than just a way to interact with (i.e. monitor and control) physical sensors and actuators. But no matter how complex the control <i>software</i> becomes, it will never become the physical sensors and actuators. <i>Software will always be <b>a level of indirection to something else</b></i>. There may be fringe cases, but as a rule, software only exists to <i>model</i> or provide a way to <i>control</i> something else. For me the best software designs are those that recognize this and view themselves as allegorical - lots of symbolism, characters, and events - instead of a world unto themselves. -- [[Robert Di Falco]] ",
      "id": "be40aae79809b626166c1d60799165e9"
    },
    {
      "type": "html",
      "text": "<i>..is the metaphor essential, or is it maybe a large part of what stands between us and credible engineering?</i>",
      "id": "fb28da198bfd83739134fd0e00bee573"
    },
    {
      "type": "html",
      "text": "\nWalden, I'm not even sure what this <i>means</i>. What is <i>credible</i> engineering? Do you mean <i>good</i> software engineering? I have no idea. However, I think what stands between programmers and great software systems is ignoring the metaphorical attributes of what they do. Don't confuse this with [[Architectural Style]]<b></b>'s, [[System Metaphor]], or even the emulation of real-world entities. This is <b>not</b> what I mean when I say metaphor or allegory. Most software developers get so caught up in what they are creating that they loose sight of the fact that they are creating a <i>conduit</i>. They begin to think their software is the <i>finality</i>. Loosing sight of the fact that they are providing a representation of something else, like a 401K plan or payroll system, immeadiately hurts the <i>user</i>. <b>The user does not care about your software, they care about what your softare allows them to do.</b> This doesn't mean that a word processor must look like a piece of paper. That's missing the point. Rather, it means that the designer of the word procesor should understand that they are not writing a word processor but are designing a tool for writing - something that will serve as a conduit for the human process of writing. -- [[Robert Di Falco]]",
      "id": "6c973f8f8be1628138021ca7d19eec6a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "Robert (Rob?), up above, you said <i>\"Nothing else resembles this aspect of software.\"</i> But here (just above) you've discovered that monetary systems have been that way for a long time. I'll go with your later discovery; software systems are not unique for their generous use of symbolism.",
      "id": "1a342ddf32869f91b09b996897888d88"
    },
    {
      "type": "html",
      "text": "\nA generally accepted and modern definition for \"engineering\" is \"the use of science or scientific method as applied to building things\". The fact that software developers are \"building things\" is not worth challenging, but the use of scientific method certainly draws doubts. The Tarot reader recently pronounced that \"everything will be okay\" in my family, but I don't put too much stock in that. The reading, by the way, was based on level after level of metaphor, most of it well beyond my intellectual or spiritual means.",
      "id": "18a8528c8d078744e8b451ae71f0c93b"
    },
    {
      "type": "html",
      "text": "\nI think what I come away from this with is as follows. Much of what we build computer systems for is stuff where human thought reigns without any solid mass to evince it. The fact that someone walked through my front door five seconds ago is a critical piece of information to the home alarm system, but go look for some physical state that that represents, and you won't find it. We imagine the concept of time, and create symbols for it. Human symbology is imperfect, and subject to perversion by minds that insist on \"seeing\" things in a way that suits the current (often survival) purpose. This is just a human condition, not a computer thing...",
      "id": "1d70e7cd1eeff4cba79c5487fc00c118"
    },
    {
      "type": "html",
      "text": "\nEnter the computer. What do we use it for? To record transactions, count how much time elapsed since a particular sensor was activated, etc. In other words, we use it to extend our own memories and temporal awarenesses, stuff that's already a sea of uncertainty. When software developers talk architecture bullshit (some do, admit it) they're doing the same thing the Tarot reader does, but directing it towards the building of software. I repeat: Is this necessary?",
      "id": "e92b95de78dfa99df6ebd63ad9a102f4"
    },
    {
      "type": "html",
      "text": "\"All the world's a stage.\" That's metaphor. The speaker didn't build the world, nor did he build the stage. He just equated them. You make a distinction between the software and the computer, the computer and the sensors and actuators. What are we talking about here, just software? If so, software alone is not a metaphor for anything. And at best, when Quicken pretends to be your checkbook, that's purely intentional on the part of the Quicken builders. So it's not metaphor, it's \"metaphor\". Know what I mean?",
      "id": "1183c279c3b1f124e8ad62ee5b9f2974"
    },
    {
      "type": "html",
      "text": "\nThanks for an interesting discussion.",
      "id": "1853e45a7a472566c2fc5ff469870408"
    },
    {
      "type": "html",
      "text": "-- [[Walden Mathews]]",
      "id": "abc974345ee8e0672af961770cf504bc"
    },
    {
      "type": "html",
      "text": "<i>Robert (Rob?), up above, you said </i>\"Nothing else resembles this aspect of software.\"<i></i>",
      "id": "c1c6b16543ae8269d1faeac6a34411c2"
    },
    {
      "type": "html",
      "text": "\nI prefer Robert, thanks for asking most people don't and end up calling me Bob (which is fine for some Roberts). First I should have said - <i>nothing else in Civil Engineering</i>. Most of my initial comments were meant to be compared with traditional engineering and architecture. But even so, what I meant is unique is not that software systems <i>can</i> be representative, it is that indirection is an immutable attribute <b>of</b> software. Anything <i>can</i> be used for indirection to something else. Software is unique in that is almost always is this. (Clearly, I'm not talking about electronic pulses here.) I think as designers we too often mistake our software for the final subject matter instead of a representation of it. As Tom points out, a great analogy for this is <i>mistaking money for value</i>. -- [[Robert Di Falco]]",
      "id": "4e872fd5e515836db26bba9df8371e29"
    },
    {
      "type": "html",
      "text": "<i>...but go look for some physical state that that represents, and you won't find it</i>",
      "id": "5c4c5a5c7aa0d022983b1733f55b65c8"
    },
    {
      "type": "html",
      "text": "\nActually there is and it is staring us right in the face! It is <i>someone walking through my door</i>. That is the state the software of your alarm system is representing. -- rad",
      "id": "07ef0314ec4e56c118248cdbb138ca61"
    },
    {
      "type": "html",
      "text": "<i>So it's not metaphor, it's \"metaphor\". Know what I mean?</i>",
      "id": "b50ee41f7e7474ad87e8209da746c90b"
    },
    {
      "type": "html",
      "text": "\nI'm not sure. But I do NOT think that metaphor, symbolism, or indirection means that a software program for playing CD's needs to look like a Stereo System. Not at all! It <b>does mean</b> that a good software system for playing audio will do an excellent job of symbolizing the users interaction with the audio stored on that CD. Further, it will understand its role in this. Because it understands this, it may even do such a good job that the user forgets the audio files and the CD altogether. This is what I meant when I said Quicken isn't representing your ledger, its representing your account activity. Is this what you mean by \"metaphor\" as opposed to metaphor? -- [[Robert Di Falco]]",
      "id": "cc4fa72fcc55a246aef6fcc6d5b6cc85"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "Well I'm confused. A couple of thoughts:",
      "id": "eb81ed770083ba7471934726e56cadab"
    },
    {
      "type": "html",
      "text": "\nComputer programs are real, they have physical existence as electrical potentials in circuits. We may 'think' in metaphor when we design and build software but the software still has physical reality. I assume this is not really the reality under discussion. Certainly most software development models a system. In many cases this modelling is so important that the software 'becomes' the system, this can happen in other metaphorical systems, too (The confusion of 'money with value' led to the collapse of the Spanish empire).",
      "id": "25bfdf59c49c79cf403bc2b0293061dc"
    },
    {
      "type": "html",
      "text": "\nSo we are talking about two relationships with reality:",
      "id": "73097ba7bfe5cc0f87351fe7446cc855"
    },
    {
      "type": "html",
      "text": " Software's physical reality (electrical and magnetic fields in circuits and media) and its metaphorical reality as a metaphor? The first is not interesting to most software developers except for performance and sizing exercises - The last 'make it fast' stage of software development - or the odd pissing match. (I think Robert missed this one; his description of software seems almost dualist.)",
      "id": "e1473f6452e37c3df1dd1ff54ade6d80"
    },
    {
      "type": "html",
      "text": " Software's metaphorical reality or how well it models something for us.",
      "id": "62efdaea681f1e7bf6b08de538129de1"
    },
    {
      "type": "html",
      "text": "\nI think the problem with most software development is that it's a metaphor for a metaphor for a metaphor. Layer upon layer of systems built by arbitrary decisions before the software engineer gets a look in. A payroll isn't real (it's just a load of squiggles in a book that maps to another metaphor, monetary payments. That's one of the reasons that it is so hard to become a domain expert and why so many users don't know what their system should do.",
      "id": "91755a6449fbf44c1d4d33e762fb9dc9"
    },
    {
      "type": "html",
      "text": "\nThat may also be why real-time mechanical control developers and business system developers have so many communication problems. One works with maybe two levels of metaphor, the other with dozens.",
      "id": "f4fa856af13ac7f6a4e516610e84ef0a"
    },
    {
      "type": "html",
      "text": "\nMy head hurts now. -- [[Tom Ayerst]]",
      "id": "62419acbbf3feecc8b392f80f252d65c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "Tom, you took the words out of my mouth with that last bit about real-time mechanical control. I was thinking as I was writing above that these systems have something special, as compared with the rest of software systems, and you've explained what that is. -- [[Walden Mathews]]",
      "id": "aebf48fbc6a3060ab618fbded038ccb7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "To take the thought further this may be why some programmers like languages such as C and C++ where they can drop into 'close to the metal' mode. In this mode they stop having to worry about interpreting someones interpretation of a business metaphor. Building a better threading library is hard, but the victory conditions are more obvious than understanding the implications of reimplementing <i>soft-dollar vs hard-dollar charging regimes in a pure-agency, correspondent trade flow</i> (to take an example close to my heart).",
      "id": "107965d07df03b87e6fb076502f9201c"
    },
    {
      "type": "html",
      "text": "\nI'm tempted to make some comment about Smalltalk developers managing this better but I won't. ;-) -- [[Tom Ayerst]]",
      "id": "cff218f8a63bf1117eacc26f3e6343a1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "Off-topic request for info: what is \"Quicken\" and what is the \"balancing\" of a cheque-book? ",
      "id": "52484799e544c6891a8e9aa66a4b95e7"
    },
    {
      "type": "html",
      "text": "<i>See [[What Is Quicken]]</i>",
      "id": "f2a7f53e7b05bc80ee893f7dbc1eae25"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "There's much discussion above of <i>metaphor</i>. Bringing this back to the topic [[Engineering Envy]], it occurs to me that in other engineering fields, it's possible to dispense with imprecise, metaphorical reasoning when deemed necessary, and I'm not sure we can do that in software, but I wish we could. The metaphorical application of software-based products (like thinking of Quicken as your checkbook) is not the issue. The issue is whether we allow fuzzy, metaphorical thinking to crowd out semantically precise specifications when we're making software. Precise semantics is harder, so our bias should come as no surprise. Please see [[What Is Metaphor]].",
      "id": "455925733dc2fe94e3292604f76aa3b1"
    },
    {
      "type": "html",
      "text": "\nMuch of the discussion above should probably be moved to a different page, or deleted. Tom and Robert, would you care to summarize?",
      "id": "4483d967e13d35cbd3941ae4a9282d94"
    },
    {
      "type": "html",
      "text": "-- [[Walden Mathews]]",
      "id": "abc974345ee8e0672af961770cf504bc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "\nDiscussion has lapsed. I may be restating some of the thoughts above:",
      "id": "0e1b49b79f958f9e54dbe20dd1dd68f5"
    },
    {
      "type": "html",
      "text": "\nIn an increasing number of cases (typically [[Real Time]] environments) software is being used in a real Engineering sense. If the firmware used to control a car, pumping station, or other critical system is screwed up, then you get the real life equivalent of collapsing bridges and falling buildings (differing only in scale).",
      "id": "5d64b7a4f37142b0d292126fa64392c5"
    },
    {
      "type": "html",
      "text": "\nYes, [[Software Is Modeling]], and software is really only an abstraction of the related reality, but because of the \"leverage\" provided by electronic controls (think servos and relays), the amount of [[First Domino]] voltage is at or below TTL. This means that the signal resulting from a \"store\" (or \"out\") instruction can cause real life events (open doors, raise/lower elevators, open/close valves, etc.), making it the unique case of map-controls-the-territory.",
      "id": "113526951f60afe82e8e8699d2fa180e"
    },
    {
      "type": "html",
      "text": "\nConsequently, it becomes necessary for programmers (some, at least) to think and behave like engineers.",
      "id": "1999a65821478f1c5433e4d9e31d0f40"
    },
    {
      "type": "html",
      "text": "\nI currently write firmware that gathers and relays data in [[Near Real Time]]. It's not mechanical control, so if I screw up nobody dies, but my employers or their customers stand to lose substantial sums. The risks are \"only financial\" but clearly it's worth adopting an engineering approach to counter those risks.",
      "id": "f5bc545c4a70c7084744ee8ace94cd57"
    },
    {
      "type": "html",
      "text": "\nSome software has no real world risks (e.g. games - never mind impacts on vision and tendonitis), while some has fairly low risks. Some software companies recognize that it's possible to draw credible causal relationships between their software and real world risks, and so write ponderous disclaimers as their way out of that.",
      "id": "97260d7c11831a3d0e88dfe9a3495c23"
    },
    {
      "type": "html",
      "text": "\nAs software becomes more and more embedded in the real world, its practitioners must become engineers, if not in name, then at least in practice. Some <i>common understanding of acceptable practice</i> is, or will be, an unavoidable requirement. I understand (first hand) the problems in defining the complete set of criteria for validating given software, but when it controls your car's brakes, you need to get it right.",
      "id": "3f7928d69cd226e876abecca826dd908"
    },
    {
      "type": "html",
      "text": "-- [[Garry Hamilton]]",
      "id": "02c60e3b7dd8cfb123491f3d91305993"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "\nLike I stated above, if a bridge falls down, everyone knows, it's on the news, in the paper, etc. If a software project fails (or succeeds) many, many times, hardly anyone knows. Everything must be hidden behind a cloak of intellectual property, copyright, trade secret, and Non-Disclosure Agreements (or another country's equivalents). We can never have the same accountatbility, or even work the same way as civil engineering while we function in this way, so why bother trying to make the comparison? I'm asking a legitimate question here, if someone knows a valid reason that engineering is a good metaphor for what I do (my resume and job title say Software Engineer after all), I'd love to hear it.",
      "id": "a1050d8315956eb5b1af7b9fa3723353"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
    },
    {
      "type": "html",
      "text": "\nWow guys. Great discussion. I'm not a regular visitor to this site so I don't know if I'll be able to read any of the follow-ups to this post, but wanted to add this.",
      "id": "a6efd2b1cb19d7a7ab00317acf218b71"
    },
    {
      "type": "html",
      "text": "\nRemember, we could all be brains in a jar!",
      "id": "75c81a7d85417cb01bdfa6cd407152cc"
    },
    {
      "type": "html",
      "text": "\nAs a software engineer, we manipulate the states and rules that define our cyber-worlds just as civil engineers manipulate the states and rules that define the \"physical\" world (though generally they have less control over the rules). But of course the physical world may just be someone else's cyber world. There's no way to really know and I don't think it really matters. We *know* that both worlds, what we call physical and what we call cyber, exist. They are sets of rules and states of quarks/electrons/bytes, and that state is held in someone's computer or someone's mind or someone's space-time manifold or elaborate system of strings and pulleys; which in turn may be hosted in some other mind/computer/space-time manifold.",
      "id": "de2d33e02b4c3db030d57860c2194ff1"
    },
    {
      "type": "html",
      "text": "\nYou suggest that the work of a software engineer is less important and visible than the work of civil engineers. This is generally true, probably because the world of buildings and bridges is still so important to people. But in the future what we are currently calling the cyber-world may become more important that what we're calling the physical world; as more and more important stuff, such as bank account balances and google page rankings becomes housed entirely within the cyber world. We may end up spending more and more time in virtual reality, hooking wires to our brains. The singularity may arrive and every bit of matter in the world may be refined and converted into a sort of cyber-soup in which intereseting things like people and bridges are represented much more efficiently as arrangements of light and electrons instead of the gross old-fashioned way of representing things as arrangements of atoms and molecules (such a waste of space!). Or we may find a way to hack into the computer that is hosting our physical universe and learn to program bridges into existence.",
      "id": "e9a3e68da2f22050140ea802f3d41990"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?EngineeringEnvy c2.com]",
      "id": "94135cf15fc677cd9dd3c8403a6595c4"
    }
  ],
  "journal": [
    {
      "date": 1140316906000,
      "id": "4fe3b3201e094c2e7aff9ef6c951e9cf",
      "type": "create",
      "item": {
        "title": "Engineering Envy",
        "story": [
          {
            "type": "html",
            "text": "\"What do you lack that they have? A diploma.\" -- [[The Wizard Of Oz]]",
            "id": "d72ce5db63ac6ae84e6fc8680f2a31fd"
          },
          {
            "type": "html",
            "text": "\nWhat do engineers have that we don't, but wish we did?",
            "id": "adaa7ed742ac8605833f3f43e427e5cf"
          },
          {
            "type": "html",
            "text": "\nTwo things that I really envy civil engineers:",
            "id": "38325d6066fdde8db583052ab64b62ef"
          },
          {
            "type": "html",
            "text": " A common understanding of acceptable practice. You don't get to be a civil engineer unless you persuade working civil engineers that you know what you are doing and can be trusted with other people's lives. I have no idea how to certify software competence; every attempt I've seen has certified platform knowledge <i>[$$$]</i>, at best. I don't think we understand what we're doing well enough to certify it yet.",
            "id": "199833404b271d9d58f199aada36ef90"
          },
          {
            "type": "html",
            "text": " Review boards. When a building falls down, a review board is called in to figure out why and update the acceptable practice so that it doesn't happen again. In software, we bury our mistakes; when a $10-million project is cancelled after coming in 2 years late with unusable deliverables, everybody says \"That's software for you\" and moves on to do something else.\tBut is it possible to have a review board before you have a common understanding of acceptable practice?",
            "id": "9835fe449929bfe51d804ee68703ffcc"
          },
          {
            "type": "html",
            "text": " Something external and objective to test ideas against. See [[Discipline Envy]]. Most software engineering metrics are too closely tied to psychology, and psychology is a very immature discipline compared to chemistry and physics. See [[Most Holy Wars Tied To Psychology]]. -- top",
            "id": "6a2b43b8a56fe47759db428736042a4e"
          },
          {
            "type": "html",
            "text": "\nI think that we, as a discipline, are missing an invaluable learning opportunity because we don't have formal [[Post Project Review]](s) on all projects, successful and unsuccessful.",
            "id": "09a5041c0e237e636971edc001933998"
          },
          {
            "type": "html",
            "text": "\nCredit: This idea first came to me when reading [[Why Buildings Fall Down]].",
            "id": "28cec9daddeec8ed0ef1eea413097ec3"
          },
          {
            "type": "html",
            "text": "-- [[Betsy Hanes Perry]]",
            "id": "7182ab0df8c772a980fbccfd3ec05000"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "<b>Discussion:</b>",
            "id": "398b273632d7a06dfcaa55775cdd8354"
          },
          {
            "type": "html",
            "text": "\nIs it possible that these two things are easier to bring about in disciplines with more stable user expectations? I may be very wrong here, but I feel that the answer to \"What can software do?\" has changed rather significantly over my lifetime, but the answer to \"What can a building do?\" has stayed much more stable. If a civil engineer stumbles across this page, I'd be very interested in their thoughts. -- [[David Saff]]",
            "id": "8888aae6dd664c016b2b4ac439123f0c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "\nOne thing that software does not have is recourse to natural laws - a civil engineer can always make a beam slightly smaller, and s/he knows that it will behave <b>almost</b> the same as the thicker one. Software seems at times to be chaotic - slight changes in the initial conditions have great and unpredictable effects on the outcome. And few customers of a building want as many structural changes as software customers want - they know it's hard to change concrete, but software is [[Only Ones And Zeros]].",
            "id": "2a1b47277a2543ef895c920c721e9d33"
          },
          {
            "type": "html",
            "text": "-- [[Pete Hardie]]",
            "id": "9fdd955a2cbe16431e5c0a1e0d1ea230"
          },
          {
            "type": "html",
            "text": "\nExactly, because software can only <i>simulate</i> a beam of light...provide a metaphor for light by exploiting a video monitor. The simulator is <b>not</b> the beam of light, so it acts unpredictably. It does not <i>have the nature of a physical beam of light.</i> However, we can write software that <i>controls</i> a real beam of light, but even that method of control will be another metaphor for some phsyical kind of controller. The software can never be the <i>phsyical entity</i> it models. It will be cool when software starts creating new constructs that aren't even based on the physical world. This has started but is still in its infancy. -- rad",
            "id": "7795095bb5310f6d15b58b847b342dff"
          },
          {
            "type": "html",
            "text": "\nYikes, no! Small changes in engineering can have radical effects on not only the structure itself (how about that bridge that collapsed, simply because they added a small windbreak for the pedestrian traffic?) but things around it (an entire city situated on an island, connected to the Oregon Coast by an isthmus disappeared when the Army Corps of Engineers put up a seawall for a neighboring harbor). Oftentimes these civil engineers don't know what their changes will produce, of course these results may be the most dramatic, and thereby get books written about them, whereas software crises seem much more common. I think this whole discussion misses the point that we can never be like civil engineers, everything we do, succeses and failures, rarely is even widely known within an organization, let alone to the world. -- anon ",
            "id": "b9f641953ec1ab7741a14cb4afa63887"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "<i>One thing that software does not have is recourse to natural laws... -- Pete Hardie</i>",
            "id": "a1b12d9813508d2d258d51942a6f694b"
          },
          {
            "type": "html",
            "text": "\nIsn't information theory subject to, or even part of, natural law? And don't we regularly exploit the continuities of that discipline? I'm striving to put my finger on just where software departs, and I know that it does. Can anyone help me?",
            "id": "768776b3fb1e3e1f1327a16dacfc149b"
          },
          {
            "type": "html",
            "text": "-- [[Walden Mathews]]",
            "id": "abc974345ee8e0672af961770cf504bc"
          },
          {
            "type": "html",
            "text": "\nEverthing we develop in software is metaphorical. Every software system is representative, symbolic, or analogous to something else physical. This doesn't mean it has to <i>look</i> like something else, just be a level of indirection to it - an <i>interface</i> or a <i>conduit</i>. This is the essential difference between Software Engineering and almost <b>everything</b> else in Civil Engineering. Software <i>must</i> be metaphorical. Other mediums, can be, but don't <i>have</i> to be. When a Civil Engineer designs a bridge, it is a <i>real</i> and <i>tactile</i> bridge and people can move across it. It is not <i>a metaphorical bridge</i> or <i>a representation of a bridge</i>. It does not <i>symbolize</i> a bridge. I went off on this for a while in [[Architecting Word]]. <i>For example, Quicken provides a metaphor of your checkbook (i.e. your actual Checking Account not the timy pieces of paper that are themselves an indirection). A Wordprocessor provides a metaphor for writing a document. Even a real-time control system is metaphorical of the system it is controlling!!</i> For me, this is something that is very unique about software, maybe its most unique attribute. It is <i>always</i> indirection. Software inhabits the <i>machine</i>. It is never tactile but it may <i>control</i> something tactile - indirectly. It may enumulate, be analogous to, or mimic something tactile (even as much as in [[Virtual Reality]]) or not, but it is still an indirection. The software system <i>itself</i> is never the <i>entity or process it is representing</i> - software is never the <i>final intention</i>. It is always the metaphor of something else, like a payroll system or a 401K plan. This doesn't mean it has to <i>look</i> like or <i>emulate</i> a traditional payroll system or 401K plan. That misses my point. The point is that <b>you can look through the software to the payroll system</b>. This is the really wonderful thing about Software. <i>Software is allegory.</i> Here, allegory refers to characters, user and programmer interfaces, and expression that represent abstract ideas and concepts. -- [[Robert Di Falco]]",
            "id": "ed25cf4e03dcd703f1f64e83380e9006"
          },
          {
            "type": "html",
            "text": "\nA computer program is a blueprint for a virtual machine. The computer automatically translates that blueprint into a machine. The machine obeys the physical laws of the computer. What makes software seem different from a bridge is our repeated misunderstanding of it - we keep thinking that the software is the <i>machine itself.</i> -- [[Anonymous Donor]]",
            "id": "52985687e7a49d10e9adffd9eb761286"
          },
          {
            "type": "html",
            "text": "<i>This is exactly <b>why</b> I say that software is allegory. We can't even describe it without entering into allegory. This is why we say <b>virtual</b> machine, it's not a </i>real<i> machine - only the hardware is a physical and tactile machine. Software by definition <b>runs in the allegorical world</b> - its home is metaphor-land and its strengths are indirection!! Cool. If we build a bridge in software using a [[Bridge Pattern]] or are making a virtual bridge in a game - two VERY different things - neither is tactile, a person cannot walk across it. Both are created to represent something else. To provide a view on to some other concept. Only ideas, objects, or virtual characters can span our software bridges. This is cool, something to be embraced. Software is always a tool. Nothing else resembles this aspect of software in that it is only used for indirection. I can't think of a single entity in the software realm that is not symbolic - that is not a </i>concept<i>. If we think about the hardware that runs software, we </i>can<i> find reality, but not in the software itself. It's just ideas. I almost prefer to use the analogy of allegory or the analogy of metaphor but both work well for communicating that idea of </i>indirection<i>. -- [[Robert Di Falco]]</i>",
            "id": "191a0fb98287acda50113ae1f5ee1a32"
          },
          {
            "type": "html",
            "text": "<i>Always expect what I write to change as I refine my wording and ideas... I don't have my mind made up about anything and am constantly evolving my points of view. -- [[The Empty Rice Bowl]]</i>",
            "id": "16448bdecbd0c75c701505e110e36138"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "\nRobert, I think you're close with this, but I'm still missing something. While it's true that Quicken <i>used to be</i> a metaphor for my checkbook, it now <i>is</i> my checkbook. The difference is just some network links. And while a real-time control program may use an internal model of its environment, I believe the control mechanism is just that, not a metaphor for a control mechanism. But I definitely see the rampant use of metaphor in what we as a programming community tend to do when we ply our craft (and talk about it). I wonder: is the metaphor essential, or is it maybe a large part of what stands between us and credible engineering?",
            "id": "087b7add695921bbf401a29632ad32c5"
          },
          {
            "type": "html",
            "text": "\nThanks for your generous contribution.",
            "id": "bf62ea661355452aa5e68ced06a36e86"
          },
          {
            "type": "html",
            "text": "-- [[Walden Mathews]]",
            "id": "abc974345ee8e0672af961770cf504bc"
          },
          {
            "type": "html",
            "text": "\nI understand [[The Map Has Replaced The Territory]], but this isn't the case in Quicken. I'm going to attempt to peel one layer at a time since there are so many ways to view metaphor and something like Quicken actually uses them all! First, is the most outer layer - the relationship between Quicken and the look and use of a traditional Checkbook. Most of us use Quicken <i>with</i> our Checkbooks. We haven't ceased to write <i>any</i> traditional checks, just fewer. Even when Quicken does completely supplant the Check Book and move on to not simulate the Check Book in its user interface, there are still other, even more important metaphorical attributes of Quicken. The next level to this is the <i>balancing</i> of our checking accounts. Quicken has indeed replaced the manual way of <i>balancing</i> your checkbook with a paper and pen. However, that doesn't stop Quicken from being a metaphor of your checking account. We have to go in another layer to see that even the tradition <i>paper</i> based ledger it replaces was already just a device we could look through to <i>see</i> what is <i>at the bank</i>. So, Quicken did what commercial products sometimes do. They replaced an existing metaphor with a much more powerful, software based one. Unfortunately, they chose to <i>emulate</i> the old metaphor in their User Interface. However, the important point I'm trying to make is that while Quicken may base its look and workflow on your checkbook - both the check book and Quicken are really just metaphors of your banking data. Go to the next layer and we find that what is <i>at the bank</i> (their software, databases, and paper ledgers) are just a layer of indirection to <i>paper money</i>. Is there yet another layer of indirection? Of course. I'm sure everyone has guessed it. It is the <i>paper money</i> itself! Money is simply a symbol for the exchange of goods and services. So, even if we go to a system devoid of paper money, even the electronic records will be markers and not the <i>final</i> layer. Just a different metaphor. Just a better way to <i>represent</i> the exchange of goods and services. ",
            "id": "e327384fbadc723617270e7e6835830c"
          },
          {
            "type": "html",
            "text": "\nIt <i>seems</i> to us like a real-time control system is more than just a way to interact with (i.e. monitor and control) physical sensors and actuators. But no matter how complex the control <i>software</i> becomes, it will never become the physical sensors and actuators. <i>Software will always be <b>a level of indirection to something else</b></i>. There may be fringe cases, but as a rule, software only exists to <i>model</i> or provide a way to <i>control</i> something else. For me the best software designs are those that recognize this and view themselves as allegorical - lots of symbolism, characters, and events - instead of a world unto themselves. -- [[Robert Di Falco]] ",
            "id": "be40aae79809b626166c1d60799165e9"
          },
          {
            "type": "html",
            "text": "<i>..is the metaphor essential, or is it maybe a large part of what stands between us and credible engineering?</i>",
            "id": "fb28da198bfd83739134fd0e00bee573"
          },
          {
            "type": "html",
            "text": "\nWalden, I'm not even sure what this <i>means</i>. What is <i>credible</i> engineering? Do you mean <i>good</i> software engineering? I have no idea. However, I think what stands between programmers and great software systems is ignoring the metaphorical attributes of what they do. Don't confuse this with [[Architectural Style]]<b></b>'s, [[System Metaphor]], or even the emulation of real-world entities. This is <b>not</b> what I mean when I say metaphor or allegory. Most software developers get so caught up in what they are creating that they loose sight of the fact that they are creating a <i>conduit</i>. They begin to think their software is the <i>finality</i>. Loosing sight of the fact that they are providing a representation of something else, like a 401K plan or payroll system, immeadiately hurts the <i>user</i>. <b>The user does not care about your software, they care about what your softare allows them to do.</b> This doesn't mean that a word processor must look like a piece of paper. That's missing the point. Rather, it means that the designer of the word procesor should understand that they are not writing a word processor but are designing a tool for writing - something that will serve as a conduit for the human process of writing. -- [[Robert Di Falco]]",
            "id": "6c973f8f8be1628138021ca7d19eec6a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "Robert (Rob?), up above, you said <i>\"Nothing else resembles this aspect of software.\"</i> But here (just above) you've discovered that monetary systems have been that way for a long time. I'll go with your later discovery; software systems are not unique for their generous use of symbolism.",
            "id": "1a342ddf32869f91b09b996897888d88"
          },
          {
            "type": "html",
            "text": "\nA generally accepted and modern definition for \"engineering\" is \"the use of science or scientific method as applied to building things\". The fact that software developers are \"building things\" is not worth challenging, but the use of scientific method certainly draws doubts. The Tarot reader recently pronounced that \"everything will be okay\" in my family, but I don't put too much stock in that. The reading, by the way, was based on level after level of metaphor, most of it well beyond my intellectual or spiritual means.",
            "id": "18a8528c8d078744e8b451ae71f0c93b"
          },
          {
            "type": "html",
            "text": "\nI think what I come away from this with is as follows. Much of what we build computer systems for is stuff where human thought reigns without any solid mass to evince it. The fact that someone walked through my front door five seconds ago is a critical piece of information to the home alarm system, but go look for some physical state that that represents, and you won't find it. We imagine the concept of time, and create symbols for it. Human symbology is imperfect, and subject to perversion by minds that insist on \"seeing\" things in a way that suits the current (often survival) purpose. This is just a human condition, not a computer thing...",
            "id": "1d70e7cd1eeff4cba79c5487fc00c118"
          },
          {
            "type": "html",
            "text": "\nEnter the computer. What do we use it for? To record transactions, count how much time elapsed since a particular sensor was activated, etc. In other words, we use it to extend our own memories and temporal awarenesses, stuff that's already a sea of uncertainty. When software developers talk architecture bullshit (some do, admit it) they're doing the same thing the Tarot reader does, but directing it towards the building of software. I repeat: Is this necessary?",
            "id": "e92b95de78dfa99df6ebd63ad9a102f4"
          },
          {
            "type": "html",
            "text": "\"All the world's a stage.\" That's metaphor. The speaker didn't build the world, nor did he build the stage. He just equated them. You make a distinction between the software and the computer, the computer and the sensors and actuators. What are we talking about here, just software? If so, software alone is not a metaphor for anything. And at best, when Quicken pretends to be your checkbook, that's purely intentional on the part of the Quicken builders. So it's not metaphor, it's \"metaphor\". Know what I mean?",
            "id": "1183c279c3b1f124e8ad62ee5b9f2974"
          },
          {
            "type": "html",
            "text": "\nThanks for an interesting discussion.",
            "id": "1853e45a7a472566c2fc5ff469870408"
          },
          {
            "type": "html",
            "text": "-- [[Walden Mathews]]",
            "id": "abc974345ee8e0672af961770cf504bc"
          },
          {
            "type": "html",
            "text": "<i>Robert (Rob?), up above, you said </i>\"Nothing else resembles this aspect of software.\"<i></i>",
            "id": "c1c6b16543ae8269d1faeac6a34411c2"
          },
          {
            "type": "html",
            "text": "\nI prefer Robert, thanks for asking most people don't and end up calling me Bob (which is fine for some Roberts). First I should have said - <i>nothing else in Civil Engineering</i>. Most of my initial comments were meant to be compared with traditional engineering and architecture. But even so, what I meant is unique is not that software systems <i>can</i> be representative, it is that indirection is an immutable attribute <b>of</b> software. Anything <i>can</i> be used for indirection to something else. Software is unique in that is almost always is this. (Clearly, I'm not talking about electronic pulses here.) I think as designers we too often mistake our software for the final subject matter instead of a representation of it. As Tom points out, a great analogy for this is <i>mistaking money for value</i>. -- [[Robert Di Falco]]",
            "id": "4e872fd5e515836db26bba9df8371e29"
          },
          {
            "type": "html",
            "text": "<i>...but go look for some physical state that that represents, and you won't find it</i>",
            "id": "5c4c5a5c7aa0d022983b1733f55b65c8"
          },
          {
            "type": "html",
            "text": "\nActually there is and it is staring us right in the face! It is <i>someone walking through my door</i>. That is the state the software of your alarm system is representing. -- rad",
            "id": "07ef0314ec4e56c118248cdbb138ca61"
          },
          {
            "type": "html",
            "text": "<i>So it's not metaphor, it's \"metaphor\". Know what I mean?</i>",
            "id": "b50ee41f7e7474ad87e8209da746c90b"
          },
          {
            "type": "html",
            "text": "\nI'm not sure. But I do NOT think that metaphor, symbolism, or indirection means that a software program for playing CD's needs to look like a Stereo System. Not at all! It <b>does mean</b> that a good software system for playing audio will do an excellent job of symbolizing the users interaction with the audio stored on that CD. Further, it will understand its role in this. Because it understands this, it may even do such a good job that the user forgets the audio files and the CD altogether. This is what I meant when I said Quicken isn't representing your ledger, its representing your account activity. Is this what you mean by \"metaphor\" as opposed to metaphor? -- [[Robert Di Falco]]",
            "id": "cc4fa72fcc55a246aef6fcc6d5b6cc85"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "Well I'm confused. A couple of thoughts:",
            "id": "eb81ed770083ba7471934726e56cadab"
          },
          {
            "type": "html",
            "text": "\nComputer programs are real, they have physical existence as electrical potentials in circuits. We may 'think' in metaphor when we design and build software but the software still has physical reality. I assume this is not really the reality under discussion. Certainly most software development models a system. In many cases this modelling is so important that the software 'becomes' the system, this can happen in other metaphorical systems, too (The confusion of 'money with value' led to the collapse of the Spanish empire).",
            "id": "25bfdf59c49c79cf403bc2b0293061dc"
          },
          {
            "type": "html",
            "text": "\nSo we are talking about two relationships with reality:",
            "id": "73097ba7bfe5cc0f87351fe7446cc855"
          },
          {
            "type": "html",
            "text": " Software's physical reality (electrical and magnetic fields in circuits and media) and its metaphorical reality as a metaphor? The first is not interesting to most software developers except for performance and sizing exercises - The last 'make it fast' stage of software development - or the odd pissing match. (I think Robert missed this one; his description of software seems almost dualist.)",
            "id": "e1473f6452e37c3df1dd1ff54ade6d80"
          },
          {
            "type": "html",
            "text": " Software's metaphorical reality or how well it models something for us.",
            "id": "62efdaea681f1e7bf6b08de538129de1"
          },
          {
            "type": "html",
            "text": "\nI think the problem with most software development is that it's a metaphor for a metaphor for a metaphor. Layer upon layer of systems built by arbitrary decisions before the software engineer gets a look in. A payroll isn't real (it's just a load of squiggles in a book that maps to another metaphor, monetary payments. That's one of the reasons that it is so hard to become a domain expert and why so many users don't know what their system should do.",
            "id": "91755a6449fbf44c1d4d33e762fb9dc9"
          },
          {
            "type": "html",
            "text": "\nThat may also be why real-time mechanical control developers and business system developers have so many communication problems. One works with maybe two levels of metaphor, the other with dozens.",
            "id": "f4fa856af13ac7f6a4e516610e84ef0a"
          },
          {
            "type": "html",
            "text": "\nMy head hurts now. -- [[Tom Ayerst]]",
            "id": "62419acbbf3feecc8b392f80f252d65c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "Tom, you took the words out of my mouth with that last bit about real-time mechanical control. I was thinking as I was writing above that these systems have something special, as compared with the rest of software systems, and you've explained what that is. -- [[Walden Mathews]]",
            "id": "aebf48fbc6a3060ab618fbded038ccb7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "To take the thought further this may be why some programmers like languages such as C and C++ where they can drop into 'close to the metal' mode. In this mode they stop having to worry about interpreting someones interpretation of a business metaphor. Building a better threading library is hard, but the victory conditions are more obvious than understanding the implications of reimplementing <i>soft-dollar vs hard-dollar charging regimes in a pure-agency, correspondent trade flow</i> (to take an example close to my heart).",
            "id": "107965d07df03b87e6fb076502f9201c"
          },
          {
            "type": "html",
            "text": "\nI'm tempted to make some comment about Smalltalk developers managing this better but I won't. ;-) -- [[Tom Ayerst]]",
            "id": "cff218f8a63bf1117eacc26f3e6343a1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "Off-topic request for info: what is \"Quicken\" and what is the \"balancing\" of a cheque-book? ",
            "id": "52484799e544c6891a8e9aa66a4b95e7"
          },
          {
            "type": "html",
            "text": "<i>See [[What Is Quicken]]</i>",
            "id": "f2a7f53e7b05bc80ee893f7dbc1eae25"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "There's much discussion above of <i>metaphor</i>. Bringing this back to the topic [[Engineering Envy]], it occurs to me that in other engineering fields, it's possible to dispense with imprecise, metaphorical reasoning when deemed necessary, and I'm not sure we can do that in software, but I wish we could. The metaphorical application of software-based products (like thinking of Quicken as your checkbook) is not the issue. The issue is whether we allow fuzzy, metaphorical thinking to crowd out semantically precise specifications when we're making software. Precise semantics is harder, so our bias should come as no surprise. Please see [[What Is Metaphor]].",
            "id": "455925733dc2fe94e3292604f76aa3b1"
          },
          {
            "type": "html",
            "text": "\nMuch of the discussion above should probably be moved to a different page, or deleted. Tom and Robert, would you care to summarize?",
            "id": "4483d967e13d35cbd3941ae4a9282d94"
          },
          {
            "type": "html",
            "text": "-- [[Walden Mathews]]",
            "id": "abc974345ee8e0672af961770cf504bc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "\nDiscussion has lapsed. I may be restating some of the thoughts above:",
            "id": "0e1b49b79f958f9e54dbe20dd1dd68f5"
          },
          {
            "type": "html",
            "text": "\nIn an increasing number of cases (typically [[Real Time]] environments) software is being used in a real Engineering sense. If the firmware used to control a car, pumping station, or other critical system is screwed up, then you get the real life equivalent of collapsing bridges and falling buildings (differing only in scale).",
            "id": "5d64b7a4f37142b0d292126fa64392c5"
          },
          {
            "type": "html",
            "text": "\nYes, [[Software Is Modeling]], and software is really only an abstraction of the related reality, but because of the \"leverage\" provided by electronic controls (think servos and relays), the amount of [[First Domino]] voltage is at or below TTL. This means that the signal resulting from a \"store\" (or \"out\") instruction can cause real life events (open doors, raise/lower elevators, open/close valves, etc.), making it the unique case of map-controls-the-territory.",
            "id": "113526951f60afe82e8e8699d2fa180e"
          },
          {
            "type": "html",
            "text": "\nConsequently, it becomes necessary for programmers (some, at least) to think and behave like engineers.",
            "id": "1999a65821478f1c5433e4d9e31d0f40"
          },
          {
            "type": "html",
            "text": "\nI currently write firmware that gathers and relays data in [[Near Real Time]]. It's not mechanical control, so if I screw up nobody dies, but my employers or their customers stand to lose substantial sums. The risks are \"only financial\" but clearly it's worth adopting an engineering approach to counter those risks.",
            "id": "f5bc545c4a70c7084744ee8ace94cd57"
          },
          {
            "type": "html",
            "text": "\nSome software has no real world risks (e.g. games - never mind impacts on vision and tendonitis), while some has fairly low risks. Some software companies recognize that it's possible to draw credible causal relationships between their software and real world risks, and so write ponderous disclaimers as their way out of that.",
            "id": "97260d7c11831a3d0e88dfe9a3495c23"
          },
          {
            "type": "html",
            "text": "\nAs software becomes more and more embedded in the real world, its practitioners must become engineers, if not in name, then at least in practice. Some <i>common understanding of acceptable practice</i> is, or will be, an unavoidable requirement. I understand (first hand) the problems in defining the complete set of criteria for validating given software, but when it controls your car's brakes, you need to get it right.",
            "id": "3f7928d69cd226e876abecca826dd908"
          },
          {
            "type": "html",
            "text": "-- [[Garry Hamilton]]",
            "id": "02c60e3b7dd8cfb123491f3d91305993"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "\nLike I stated above, if a bridge falls down, everyone knows, it's on the news, in the paper, etc. If a software project fails (or succeeds) many, many times, hardly anyone knows. Everything must be hidden behind a cloak of intellectual property, copyright, trade secret, and Non-Disclosure Agreements (or another country's equivalents). We can never have the same accountatbility, or even work the same way as civil engineering while we function in this way, so why bother trying to make the comparison? I'm asking a legitimate question here, if someone knows a valid reason that engineering is a good metaphor for what I do (my resume and job title say Software Engineer after all), I'd love to hear it.",
            "id": "a1050d8315956eb5b1af7b9fa3723353"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d8a48d807e1dc9f627b6b2be72c6ca30"
          },
          {
            "type": "html",
            "text": "\nWow guys. Great discussion. I'm not a regular visitor to this site so I don't know if I'll be able to read any of the follow-ups to this post, but wanted to add this.",
            "id": "a6efd2b1cb19d7a7ab00317acf218b71"
          },
          {
            "type": "html",
            "text": "\nRemember, we could all be brains in a jar!",
            "id": "75c81a7d85417cb01bdfa6cd407152cc"
          },
          {
            "type": "html",
            "text": "\nAs a software engineer, we manipulate the states and rules that define our cyber-worlds just as civil engineers manipulate the states and rules that define the \"physical\" world (though generally they have less control over the rules). But of course the physical world may just be someone else's cyber world. There's no way to really know and I don't think it really matters. We *know* that both worlds, what we call physical and what we call cyber, exist. They are sets of rules and states of quarks/electrons/bytes, and that state is held in someone's computer or someone's mind or someone's space-time manifold or elaborate system of strings and pulleys; which in turn may be hosted in some other mind/computer/space-time manifold.",
            "id": "de2d33e02b4c3db030d57860c2194ff1"
          },
          {
            "type": "html",
            "text": "\nYou suggest that the work of a software engineer is less important and visible than the work of civil engineers. This is generally true, probably because the world of buildings and bridges is still so important to people. But in the future what we are currently calling the cyber-world may become more important that what we're calling the physical world; as more and more important stuff, such as bank account balances and google page rankings becomes housed entirely within the cyber world. We may end up spending more and more time in virtual reality, hooking wires to our brains. The singularity may arrive and every bit of matter in the world may be refined and converted into a sort of cyber-soup in which intereseting things like people and bridges are represented much more efficiently as arrangements of light and electrons instead of the gross old-fashioned way of representing things as arrangements of atoms and molecules (such a waste of space!). Or we may find a way to hack into the computer that is hosting our physical universe and learn to program bridges into existence.",
            "id": "e9a3e68da2f22050140ea802f3d41990"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?EngineeringEnvy c2.com]",
            "id": "94135cf15fc677cd9dd3c8403a6595c4"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1641307635978
    }
  ]
}