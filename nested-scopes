{
  "title": "Nested Scopes",
  "story": [
    {
      "type": "html",
      "text": "In a progamming language with [[Nested Scopes]], source code has a nested structure such that variable definitions can be introduced at any level of nesting.",
      "id": "c8e09704c74b3ba81f529cfd24d4aaf2"
    },
    {
      "type": "html",
      "text": "\n[[Nested Scopes]] can be combined with either [[Lexical Scoping]] or [[Dynamic Scoping]]; see the\n[[Dynamic Scoping]] entry for an explanation of the differences.",
      "id": "4230a36270c046ad246fa06018b0bcd1"
    },
    {
      "type": "html",
      "text": "\nLanguages that support nested scopes include [[Scheme Language]], [[Common Lisp]], [[Ee Language]], and [[Java Language]] (using [[Inner Class]]es).",
      "id": "4bfd2ba2cbedfe934e71b7f242424024"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ac922afbde8408e0464e0e9e927b4754"
    },
    {
      "type": "html",
      "text": "In [[Cee Language]], there are four kinds of scope:",
      "id": "08f0748602626cf9529083d58d19a2fe"
    },
    {
      "type": "html",
      "text": " global",
      "id": "27d48d6e8206e353b8ecce99266284ba"
    },
    {
      "type": "html",
      "text": " translation unit",
      "id": "5a7997a3583366c76ec6fe76da767f00"
    },
    {
      "type": "html",
      "text": " static (within a function)",
      "id": "5d1e6636a75042bc4bbc56bce00267a3"
    },
    {
      "type": "html",
      "text": " automatic",
      "id": "6785b4c3be00ed85fafcb7421bf71667"
    },
    {
      "type": "html",
      "text": "<i>The list of C \"scopes\" above seems to conflate scoping, visibility, linkage rules and lifetime (which is no surprise). Note also that </i>kinds<i> of scope does not map well to </i>levels<i> of scoping. [[Scheme Language]] only has one kind of scope for names, but procedure definitions may be nested arbitrarily deeply.</i>",
      "id": "aa4e489bd6285ff713e9f60df147c688"
    },
    {
      "type": "html",
      "text": "<i>While it is not possible in [[Ansi Cee]] to nest the definition of functions, it is possible to nest scopes where variables are defined arbitrarily deeply, like this:</i>",
      "id": "8b713ef2f71b8d3d04e58fb4d54677c1"
    },
    {
      "type": "code",
      "text": " void wibble(){\n   {\n     int a;\n     {\n       int b;\n       {\n         //etc...\n       }\n     }\n   }\n }",
      "id": "8dfc58df7e9448532721df50dc1e0921"
    },
    {
      "type": "html",
      "text": "\nAs an extension, [[Gnu Cee]] supports nested functions, and therefore full [[Nested Scopes]].",
      "id": "bfe2dd8d09e8c7b6e5f7583f89a02c54"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ac922afbde8408e0464e0e9e927b4754"
    },
    {
      "type": "html",
      "text": "\nSee also [[Global Variables Considered Harmful]], [[Lexical Scoping]], [[Dynamic Scoping]].",
      "id": "3f0afbdf38a270cab56d7e0139e38ba2"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?NestedScopes c2.com]",
      "id": "2ed6c552078cc2a7b1b4c048a0f82987"
    }
  ],
  "journal": [
    {
      "date": 1133534567000,
      "id": "b8e6e703289f864a8fa13ffab459de9b",
      "type": "create",
      "item": {
        "title": "Nested Scopes",
        "story": [
          {
            "type": "html",
            "text": "In a progamming language with [[Nested Scopes]], source code has a nested structure such that variable definitions can be introduced at any level of nesting.",
            "id": "c8e09704c74b3ba81f529cfd24d4aaf2"
          },
          {
            "type": "html",
            "text": "\n[[Nested Scopes]] can be combined with either [[Lexical Scoping]] or [[Dynamic Scoping]]; see the\n[[Dynamic Scoping]] entry for an explanation of the differences.",
            "id": "4230a36270c046ad246fa06018b0bcd1"
          },
          {
            "type": "html",
            "text": "\nLanguages that support nested scopes include [[Scheme Language]], [[Common Lisp]], [[Ee Language]], and [[Java Language]] (using [[Inner Class]]es).",
            "id": "4bfd2ba2cbedfe934e71b7f242424024"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ac922afbde8408e0464e0e9e927b4754"
          },
          {
            "type": "html",
            "text": "In [[Cee Language]], there are four kinds of scope:",
            "id": "08f0748602626cf9529083d58d19a2fe"
          },
          {
            "type": "html",
            "text": " global",
            "id": "27d48d6e8206e353b8ecce99266284ba"
          },
          {
            "type": "html",
            "text": " translation unit",
            "id": "5a7997a3583366c76ec6fe76da767f00"
          },
          {
            "type": "html",
            "text": " static (within a function)",
            "id": "5d1e6636a75042bc4bbc56bce00267a3"
          },
          {
            "type": "html",
            "text": " automatic",
            "id": "6785b4c3be00ed85fafcb7421bf71667"
          },
          {
            "type": "html",
            "text": "<i>The list of C \"scopes\" above seems to conflate scoping, visibility, linkage rules and lifetime (which is no surprise). Note also that </i>kinds<i> of scope does not map well to </i>levels<i> of scoping. [[Scheme Language]] only has one kind of scope for names, but procedure definitions may be nested arbitrarily deeply.</i>",
            "id": "aa4e489bd6285ff713e9f60df147c688"
          },
          {
            "type": "html",
            "text": "<i>While it is not possible in [[Ansi Cee]] to nest the definition of functions, it is possible to nest scopes where variables are defined arbitrarily deeply, like this:</i>",
            "id": "8b713ef2f71b8d3d04e58fb4d54677c1"
          },
          {
            "type": "code",
            "text": " void wibble(){\n   {\n     int a;\n     {\n       int b;\n       {\n         //etc...\n       }\n     }\n   }\n }",
            "id": "8dfc58df7e9448532721df50dc1e0921"
          },
          {
            "type": "html",
            "text": "\nAs an extension, [[Gnu Cee]] supports nested functions, and therefore full [[Nested Scopes]].",
            "id": "bfe2dd8d09e8c7b6e5f7583f89a02c54"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ac922afbde8408e0464e0e9e927b4754"
          },
          {
            "type": "html",
            "text": "\nSee also [[Global Variables Considered Harmful]], [[Lexical Scoping]], [[Dynamic Scoping]].",
            "id": "3f0afbdf38a270cab56d7e0139e38ba2"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?NestedScopes c2.com]",
            "id": "2ed6c552078cc2a7b1b4c048a0f82987"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1674055427389
    }
  ]
}