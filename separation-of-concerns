{
  "title": "Separation Of Concerns",
  "story": [
    {
      "type": "html",
      "text": "The key concept for [[Software Engineering]] and the basis of [[Object Oriented Programming]], [[Aspect Oriented Programming]], [[Subject Oriented Programming]] and [[Hyper Space]] programming.",
      "id": "6d7ebdab7583d66d19092e0396166ca7"
    },
    {
      "type": "html",
      "text": "\nThe term seems to have been coined by [[Ew Dijkstra]] - [Source:On the role of scientific thought, EWD 477, 30th August 1974, Neuen, The Netherlands] - the relevant passage:",
      "id": "b0f80330f51cb449a37c72a1f6ea89db"
    },
    {
      "type": "html",
      "text": " <i>It is what I sometimes have called “the separation of concerns” </i>",
      "id": "e138d936a5ae3ca0c6fda28ad5a84503"
    },
    {
      "type": "html",
      "text": "  [http://cs-exhibitions.uni-klu.ac.at/index.php?id=4&uid=33 cs-exhibitions.uni-klu.ac.at]",
      "id": "a091648ed8c4ae78e61fed14c20c713a"
    },
    {
      "type": "html",
      "text": "\nDownload a PDF:",
      "id": "d89d17e0800c51f33d347fe4dc8cbd10"
    },
    {
      "type": "html",
      "text": " Asymmetrically vs. Symmetrically Organized Paradigms for Software Composition",
      "id": "0bb52304aa53087fd8bfe4dbd64b1304"
    },
    {
      "type": "html",
      "text": " [http://domino.watson.ibm.com/library/cyberdig.nsf/papers/2a4097e93456d0cf85256ca9006dac29/$file/rc22685.pdf domino.watson.ibm.com]",
      "id": "782ca29bdfd5ee5c40c890ee1a99424b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "10c9fde0bf28f51001d64e1711118613"
    },
    {
      "type": "html",
      "text": "\nParnas' [[On Decomposing Systems]] doesn't use the term, but definitely has the idea: \"Every module in the second decomposition is characterized by its knowledge of a design decision which it hides from all others.\"",
      "id": "22a8743aa2ecae1cd7ee42d2059c1b1f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "10c9fde0bf28f51001d64e1711118613"
    },
    {
      "type": "html",
      "text": "\nI believe the first reference is actually in Polya's classic book [[How To Solve It]]. -- [[Anthony Lauder]]",
      "id": "fcf6325e4287d4fe9c47583ad98a1842"
    },
    {
      "type": "html",
      "text": "<i>Which is what the phrase is meant to deal with, [[Dealing With Concerns]]. Anyone can make lists of Concerns for someone else to solve. But Concerns should be localized. One should ask - is this something I should be concerned about, and can I do anything to deal with the concern. One in action dealing with a concern is doing something to reduce the number of concerns involved in a local situation or scene. It has been transformed from a concern to a concerted effort.</i>",
      "id": "6ad0640016e6318655715f12845270b0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "10c9fde0bf28f51001d64e1711118613"
    },
    {
      "type": "html",
      "text": "\nThe problem is that \"concerns\" are relative. I belong in the [[Everything Is Relative]] camp on this one. There is rarely perfect grouping and perfect separation. The degree that any two things are related is a continuous scale, and often changes over time. Thus, either we come up with a [[Useful Lie]], or use some kind of ad-hoc querying technique to bring together what we want to look at when we want to look at it (see [[Code Avoidance]]).",
      "id": "9babb9198e2287061315311c205def45"
    },
    {
      "type": "html",
      "text": "<i>If one employs a \"[[Useful Lie]]\", or practices an avoidance, what was a concern, becomes irrelevant and will no longer impinge on the \"Concerns\" in one's [[Personal Queue]]. It then has been classified as \"Let George Do It\", or \"It's not my job\".</i>",
      "id": "b95dca1b1ec61d90fe2db3a3670bf89b"
    },
    {
      "type": "html",
      "text": "\nI am not quite sure what you mean. Can you provide an example? It is not necessarily a matter of responsibility, but simply that a given thing may participate in multiple different groupings or relationships over time or per user/coder.",
      "id": "708665f1f233b863e1a4a12d4ac4b8f6"
    },
    {
      "type": "html",
      "text": "\n[[Separation And Grouping Are Archaic Concepts]]",
      "id": "55c993ee749924ceae9b14a78623ef10"
    },
    {
      "type": "html",
      "text": "\nI believe that [[Management Of Concerns]] is a more realistic goal because pure separation itself is not practical in many domains. -top",
      "id": "b63a7ccaa35c497e3f076b99c456f2f1"
    },
    {
      "type": "html",
      "text": "\n[[Separation Of Concerns]] doesn't need to be \"pure\" to be useful. Certain concerns - security, safety, performance, persistence & disruption, modularity, portability, error-handling, logging, etc. - tend to be [[Cross Cutting Concern]]s no matter how you try to cut them. [[Separation Of Concerns]] on the smallish scale - i.e. splitting a [[Big Ball Of Mud]] of <i>specific</i> domain concerns {A,B,C,D} such that they can be encoded separately in smaller groups {A,B} and {C,D} - is both realistic and useful for [[Management Of Concerns]]. I'd assert that [[General Purpose Programming Language]]'s primary task is simplified management of the many [[Cross Cutting Concern]]s. -[[Anonymous Donor]]",
      "id": "76de3f1f876725a70f2f566306708fcd"
    },
    {
      "type": "html",
      "text": "<i>Moved discussion to [[Table Oriented Code Management Discussion]].</i>",
      "id": "d35a79aa91e15f81365ed34f6839d410"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "10c9fde0bf28f51001d64e1711118613"
    },
    {
      "type": "html",
      "text": "\nIf one is dealing with a problem, it is important to decompose the problem into solvable fragments. In doing so, the relationships between what needs to be done and when it needs to be done can be discovered and plans to deal with the problem fragments can be assigned to, or if one does not have the power position to assign, identified as belonging to, [[Solution Spaces]].  ",
      "id": "0d70fefd005588b418fcee2a883d6436"
    },
    {
      "type": "html",
      "text": "<i>The last \"or\" clause seems to be missing a verb, or else I am having trouble parsing this. Otherwise I agree that we have to draw lines in order to divide up work. A [[Useful Lie]]. However, no line is perfect and is always a compromise. For example, to multinational corporations; countries, provinces, etc. are a hinderance. The grouping \"country\" is orthogonal to \"corporation\" more or less.</i>",
      "id": "24e3c74101ce90abe18be7ca9fa74f32"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "10c9fde0bf28f51001d64e1711118613"
    },
    {
      "type": "html",
      "text": "<b>Separation and Yagni</b>",
      "id": "45843c58e4f2d35b81f28a99f5cf2d78"
    },
    {
      "type": "html",
      "text": "\nHere is an example of where [[Separation Of Concerns]] may violate [[Yag Ni]].",
      "id": "0f1cb4dd5c05555db456e7504403e049"
    },
    {
      "type": "html",
      "text": "\nSuppose we have a GUI system and we are defining an On-Click button event:",
      "id": "376fa7b6642c700d61d84ab4d3e00fae"
    },
    {
      "type": "code",
      "text": "  define button_7_onClick(...) {\n     executeSql(\"UPDATE myTable SET x = x + 1 WHERE id=4\");\n  }",
      "id": "af3d9d63d579ea564f51e5633fc13af3"
    },
    {
      "type": "html",
      "text": "Many pro-separation documents recommend putting all SQL together in one code unit dedicated to SQL. Thus, it allegedly should be:",
      "id": "7daeb441b41ce4d58037521d616e51c8"
    },
    {
      "type": "code",
      "text": "  define button_7_onClick(...) {\n    incrementId4();\n  }\n  ....\n  module SQLstuff {   // a different file\n    ....\n    function incrementId4() {\n      executeSql(\"UPDATE myTable SET x = x + 1 WHERE id=4\");       \n    }\n  }",
      "id": "5abf70484f29b1f1e75465abd6dd16db"
    },
    {
      "type": "html",
      "text": "This creates more code and more jumping around to edit and view. If \"incrementId4\" is referenced once and only once, then we have wasted code, bloated code, and violated [[Yag Ni]]. I agree that if that something is likely to be shared that perhaps it should be put into a shared area (but perhaps not by SQL-ness). But often such is not the case. A given set of actions is done in just one place.",
      "id": "a733b9c3d3072db62a794c16d78cec20"
    },
    {
      "type": "html",
      "text": "(I thought I included an example like this already. Either it was erased or I put it in a similar topic.)",
      "id": "89e7d21ae5c7efc021eea8721e60d542"
    },
    {
      "type": "html",
      "text": "-- top",
      "id": "68103cfd309ad7d5508d2c6f5266bc7e"
    },
    {
      "type": "html",
      "text": "-- seperating GUI and SQL code seems like a very good idea! Single Responsibility Principle and all that. We stopped thinking the being called more than once was the only reason for creating a procedure some time in the 1980s. Have you read [[Structured Design]] by Constantine and Yourdon? You do claim to be the Procedural programmer? Have you read any modern book on Refactoring? [[Nick Keighley]]",
      "id": "75a1d2c137c4098658e42a604872f557"
    },
    {
      "type": "html",
      "text": "\nIf you gained bunches of great knowledge from such books then use it to explain WHY, rather than \"do X because Mr. Y says so\". [[Software Engineering Is Art Of Compromise]], one is balancing multiple factors when selecting among trade-offs. I respect people who know and can explain the trade-offs. I may disagree with their weightings at times, such as disagreements about how human [[Wet Ware]] reacts to given designs, but I hope one at least demonstrates they've done their \"trade-off homework\". And I'm not saying it's <i>always</i> better to keep together or separate SQL. The best answer often depends shop practices, shop skill divisions, application type etc.  --top ",
      "id": "157c3bb62c5540608630ed0b80081214"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "10c9fde0bf28f51001d64e1711118613"
    },
    {
      "type": "html",
      "text": "You have illustrated a case where [[Premature Optimization]] trumps [[Separation Of Concerns]]. This doesn't weaken the validity of this concept, but it must be prioritized appropriately.",
      "id": "4ea858ff2558cd0a29a1e7f430bdc9eb"
    },
    {
      "type": "html",
      "text": "<i>All else being equal, I agree that the separation is a good thing. However, there are at least 2 other counter-factors that we need help weighing against it:</i>",
      "id": "ff9e3cd6354737ef3e4619d3f88ba252"
    },
    {
      "type": "html",
      "text": " Other orthogonal grouping/separation factor candidates",
      "id": "d05d8bddc79067a1204a552124cfe81c"
    },
    {
      "type": "html",
      "text": " Note if there are too many competing factors, then perhaps no division is the way to go, or else meta-tizing it so that factors can be dynamically/virtually isolated as needed (smells like tables, eh? :-)",
      "id": "bbdeca49bd797bca6b632e2642384e57"
    },
    {
      "type": "html",
      "text": " Other factors (such as [[Premature Optimization]])",
      "id": "b87373b4e70bb30fb4b28d02d07c2c4b"
    },
    {
      "type": "html",
      "text": "--top",
      "id": "59cac0305fe7d3b87122f60ec98f3d26"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "10c9fde0bf28f51001d64e1711118613"
    },
    {
      "type": "html",
      "text": "\nAnother area where a conflict seems to often appear is validation and processing. For example, it may take a lot of code to parse something for validation. Sometimes one can also use that parsed info to reformat the information. It seems a violation of [[Once And Only Once]] to copy the validation parsing code for formatting also. One could make a shared function or utility to do the parsing, but then we are not only performing the same parse action twice, slowing performance, but also clogging up the code with very specific, rarely used functions or utilities. [[Kiss Principle]] seems to dictate intermixing validation and formatting. (A [[Duplication Refactoring Threshold]] of 2 is a bit low in my opinion unless the code is long.)",
      "id": "d46e0f619be8b71d010df3638265399e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "10c9fde0bf28f51001d64e1711118613"
    },
    {
      "type": "html",
      "text": "\nTwo concerns that I would like to see separated in programming are data and [[Real Information]]. Data has to do with what a database is designed to do best, handle large amounts of very precise content in little pieces. The information section would focus on providing a representation in code of the way the user thinks (in data structures themselves, not in the UI). There would be a translation interface between the data and information sections, and representation engine for interacting with the user. --[[Jon Grover]]",
      "id": "10e50e7a98681b938bd3c737e83c15f8"
    },
    {
      "type": "html",
      "text": "<i>That's an interesting notion.  Can you provide a simple, concrete illustration that exemplifies the distinction between data and [[Real Information]]?  In particular, can you clearly illustrate how data differs from information?  There are some relevant -- but unanswered -- questions on the [[Real Information]] page, too.</i>",
      "id": "98eca53e89f270cd99704d53925c61db"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "10c9fde0bf28f51001d64e1711118613"
    },
    {
      "type": "html",
      "text": "\nTypical computing-space concerns include:",
      "id": "f5780bc9b3fd5f94a095d55c990dcaf9"
    },
    {
      "type": "html",
      "text": " Business logic",
      "id": "c0c7ebb63604d5f6e992782291b869cc"
    },
    {
      "type": "html",
      "text": " Security",
      "id": "723ebadecf02e93889cf7c58a569372e"
    },
    {
      "type": "html",
      "text": " Error/exception-handling",
      "id": "6a3861786238c20024d911ec0405bfe4"
    },
    {
      "type": "html",
      "text": " Debugging/tracing",
      "id": "f75d912a66d7a5be72d1253f77816be9"
    },
    {
      "type": "html",
      "text": " I/O",
      "id": "920f3a7c7f4e6638981f42936fd8c78e"
    },
    {
      "type": "html",
      "text": " Database (arguably more than \"I/O\", see [[Databases Are More Than Just Storage]])",
      "id": "006aa4db3c71e71971c528185bc582b7"
    },
    {
      "type": "html",
      "text": " Files",
      "id": "99e55ca203db6a03c70ec5320fb7c11d"
    },
    {
      "type": "html",
      "text": " Networking",
      "id": "83e8322bc2a788b93812e27ab4354887"
    },
    {
      "type": "html",
      "text": " UI",
      "id": "a0b901415391e540f3b511362e053605"
    },
    {
      "type": "html",
      "text": "\nThese are not necessarily mutually-exclusive.",
      "id": "74b2d624df121990cc716901a8a7db31"
    },
    {
      "type": "html",
      "text": "<i>[[Separation Of Concerns]] does not imply \"disconnected\".  Database and Files are necessarily connected, but that doesn't mean they can't be separated.  I'm separate from you, but we communicate.</i>",
      "id": "54c12a391f3d42c8257b27dcdea68899"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "10c9fde0bf28f51001d64e1711118613"
    },
    {
      "type": "html",
      "text": "Related:",
      "id": "0225dc035c75e3d5f1f4c90f8acf09bc"
    },
    {
      "type": "html",
      "text": " [[One Responsibility Rule]]",
      "id": "465903619ba591cd6ab84dc46e387887"
    },
    {
      "type": "html",
      "text": " [[Functions And Data Are Separate]]",
      "id": "b74fe780f9988b781931af7a3d16b0fe"
    },
    {
      "type": "html",
      "text": " [[Objects And Data Are Separate]]",
      "id": "d4268d95a0cb76aeb34bf59329ce1e7a"
    },
    {
      "type": "html",
      "text": " [[Keep Things Separate]]",
      "id": "26c33d96f95225215e4eebb1acc3c331"
    },
    {
      "type": "html",
      "text": " [[Connection Of Concerns]]",
      "id": "05e88f8a59dacf4c757f90fe00f1b544"
    },
    {
      "type": "html",
      "text": " [[Mirror Model]]",
      "id": "dab826146c2f03ef93263905c2b61d6e"
    },
    {
      "type": "html",
      "text": " [[Overhauling Style Sheets]]",
      "id": "eb259393e2bc8a613a107ccd90e10254"
    },
    {
      "type": "html",
      "text": " [[Business Logic Definition]]",
      "id": "92d860a0bd09085897416022250ec95a"
    },
    {
      "type": "html",
      "text": " [[Separation And Grouping Are Archaic Concepts]]",
      "id": "6c5e228099a7eee6415e9515f9987fc7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "10c9fde0bf28f51001d64e1711118613"
    },
    {
      "type": "html",
      "text": "[[Category Info Packaging]]",
      "id": "1e79b62ea0f0cfc5407ee0a75a02efbc"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?SeparationOfConcerns c2.com]",
      "id": "ca2f15f6f8a1bf56b6af3cc35de6c3f2"
    }
  ],
  "journal": [
    {
      "date": 1414615380000,
      "id": "5c50406cef2d3f43bea875b659b0c0bd",
      "type": "create",
      "item": {
        "title": "Separation Of Concerns",
        "story": [
          {
            "type": "html",
            "text": "The key concept for [[Software Engineering]] and the basis of [[Object Oriented Programming]], [[Aspect Oriented Programming]], [[Subject Oriented Programming]] and [[Hyper Space]] programming.",
            "id": "6d7ebdab7583d66d19092e0396166ca7"
          },
          {
            "type": "html",
            "text": "\nThe term seems to have been coined by [[Ew Dijkstra]] - [Source:On the role of scientific thought, EWD 477, 30th August 1974, Neuen, The Netherlands] - the relevant passage:",
            "id": "b0f80330f51cb449a37c72a1f6ea89db"
          },
          {
            "type": "html",
            "text": " <i>It is what I sometimes have called “the separation of concerns” </i>",
            "id": "e138d936a5ae3ca0c6fda28ad5a84503"
          },
          {
            "type": "html",
            "text": "  [http://cs-exhibitions.uni-klu.ac.at/index.php?id=4&uid=33 cs-exhibitions.uni-klu.ac.at]",
            "id": "a091648ed8c4ae78e61fed14c20c713a"
          },
          {
            "type": "html",
            "text": "\nDownload a PDF:",
            "id": "d89d17e0800c51f33d347fe4dc8cbd10"
          },
          {
            "type": "html",
            "text": " Asymmetrically vs. Symmetrically Organized Paradigms for Software Composition",
            "id": "0bb52304aa53087fd8bfe4dbd64b1304"
          },
          {
            "type": "html",
            "text": " [http://domino.watson.ibm.com/library/cyberdig.nsf/papers/2a4097e93456d0cf85256ca9006dac29/$file/rc22685.pdf domino.watson.ibm.com]",
            "id": "782ca29bdfd5ee5c40c890ee1a99424b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "10c9fde0bf28f51001d64e1711118613"
          },
          {
            "type": "html",
            "text": "\nParnas' [[On Decomposing Systems]] doesn't use the term, but definitely has the idea: \"Every module in the second decomposition is characterized by its knowledge of a design decision which it hides from all others.\"",
            "id": "22a8743aa2ecae1cd7ee42d2059c1b1f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "10c9fde0bf28f51001d64e1711118613"
          },
          {
            "type": "html",
            "text": "\nI believe the first reference is actually in Polya's classic book [[How To Solve It]]. -- [[Anthony Lauder]]",
            "id": "fcf6325e4287d4fe9c47583ad98a1842"
          },
          {
            "type": "html",
            "text": "<i>Which is what the phrase is meant to deal with, [[Dealing With Concerns]]. Anyone can make lists of Concerns for someone else to solve. But Concerns should be localized. One should ask - is this something I should be concerned about, and can I do anything to deal with the concern. One in action dealing with a concern is doing something to reduce the number of concerns involved in a local situation or scene. It has been transformed from a concern to a concerted effort.</i>",
            "id": "6ad0640016e6318655715f12845270b0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "10c9fde0bf28f51001d64e1711118613"
          },
          {
            "type": "html",
            "text": "\nThe problem is that \"concerns\" are relative. I belong in the [[Everything Is Relative]] camp on this one. There is rarely perfect grouping and perfect separation. The degree that any two things are related is a continuous scale, and often changes over time. Thus, either we come up with a [[Useful Lie]], or use some kind of ad-hoc querying technique to bring together what we want to look at when we want to look at it (see [[Code Avoidance]]).",
            "id": "9babb9198e2287061315311c205def45"
          },
          {
            "type": "html",
            "text": "<i>If one employs a \"[[Useful Lie]]\", or practices an avoidance, what was a concern, becomes irrelevant and will no longer impinge on the \"Concerns\" in one's [[Personal Queue]]. It then has been classified as \"Let George Do It\", or \"It's not my job\".</i>",
            "id": "b95dca1b1ec61d90fe2db3a3670bf89b"
          },
          {
            "type": "html",
            "text": "\nI am not quite sure what you mean. Can you provide an example? It is not necessarily a matter of responsibility, but simply that a given thing may participate in multiple different groupings or relationships over time or per user/coder.",
            "id": "708665f1f233b863e1a4a12d4ac4b8f6"
          },
          {
            "type": "html",
            "text": "\n[[Separation And Grouping Are Archaic Concepts]]",
            "id": "55c993ee749924ceae9b14a78623ef10"
          },
          {
            "type": "html",
            "text": "\nI believe that [[Management Of Concerns]] is a more realistic goal because pure separation itself is not practical in many domains. -top",
            "id": "b63a7ccaa35c497e3f076b99c456f2f1"
          },
          {
            "type": "html",
            "text": "\n[[Separation Of Concerns]] doesn't need to be \"pure\" to be useful. Certain concerns - security, safety, performance, persistence & disruption, modularity, portability, error-handling, logging, etc. - tend to be [[Cross Cutting Concern]]s no matter how you try to cut them. [[Separation Of Concerns]] on the smallish scale - i.e. splitting a [[Big Ball Of Mud]] of <i>specific</i> domain concerns {A,B,C,D} such that they can be encoded separately in smaller groups {A,B} and {C,D} - is both realistic and useful for [[Management Of Concerns]]. I'd assert that [[General Purpose Programming Language]]'s primary task is simplified management of the many [[Cross Cutting Concern]]s. -[[Anonymous Donor]]",
            "id": "76de3f1f876725a70f2f566306708fcd"
          },
          {
            "type": "html",
            "text": "<i>Moved discussion to [[Table Oriented Code Management Discussion]].</i>",
            "id": "d35a79aa91e15f81365ed34f6839d410"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "10c9fde0bf28f51001d64e1711118613"
          },
          {
            "type": "html",
            "text": "\nIf one is dealing with a problem, it is important to decompose the problem into solvable fragments. In doing so, the relationships between what needs to be done and when it needs to be done can be discovered and plans to deal with the problem fragments can be assigned to, or if one does not have the power position to assign, identified as belonging to, [[Solution Spaces]].  ",
            "id": "0d70fefd005588b418fcee2a883d6436"
          },
          {
            "type": "html",
            "text": "<i>The last \"or\" clause seems to be missing a verb, or else I am having trouble parsing this. Otherwise I agree that we have to draw lines in order to divide up work. A [[Useful Lie]]. However, no line is perfect and is always a compromise. For example, to multinational corporations; countries, provinces, etc. are a hinderance. The grouping \"country\" is orthogonal to \"corporation\" more or less.</i>",
            "id": "24e3c74101ce90abe18be7ca9fa74f32"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "10c9fde0bf28f51001d64e1711118613"
          },
          {
            "type": "html",
            "text": "<b>Separation and Yagni</b>",
            "id": "45843c58e4f2d35b81f28a99f5cf2d78"
          },
          {
            "type": "html",
            "text": "\nHere is an example of where [[Separation Of Concerns]] may violate [[Yag Ni]].",
            "id": "0f1cb4dd5c05555db456e7504403e049"
          },
          {
            "type": "html",
            "text": "\nSuppose we have a GUI system and we are defining an On-Click button event:",
            "id": "376fa7b6642c700d61d84ab4d3e00fae"
          },
          {
            "type": "code",
            "text": "  define button_7_onClick(...) {\n     executeSql(\"UPDATE myTable SET x = x + 1 WHERE id=4\");\n  }",
            "id": "af3d9d63d579ea564f51e5633fc13af3"
          },
          {
            "type": "html",
            "text": "Many pro-separation documents recommend putting all SQL together in one code unit dedicated to SQL. Thus, it allegedly should be:",
            "id": "7daeb441b41ce4d58037521d616e51c8"
          },
          {
            "type": "code",
            "text": "  define button_7_onClick(...) {\n    incrementId4();\n  }\n  ....\n  module SQLstuff {   // a different file\n    ....\n    function incrementId4() {\n      executeSql(\"UPDATE myTable SET x = x + 1 WHERE id=4\");       \n    }\n  }",
            "id": "5abf70484f29b1f1e75465abd6dd16db"
          },
          {
            "type": "html",
            "text": "This creates more code and more jumping around to edit and view. If \"incrementId4\" is referenced once and only once, then we have wasted code, bloated code, and violated [[Yag Ni]]. I agree that if that something is likely to be shared that perhaps it should be put into a shared area (but perhaps not by SQL-ness). But often such is not the case. A given set of actions is done in just one place.",
            "id": "a733b9c3d3072db62a794c16d78cec20"
          },
          {
            "type": "html",
            "text": "(I thought I included an example like this already. Either it was erased or I put it in a similar topic.)",
            "id": "89e7d21ae5c7efc021eea8721e60d542"
          },
          {
            "type": "html",
            "text": "-- top",
            "id": "68103cfd309ad7d5508d2c6f5266bc7e"
          },
          {
            "type": "html",
            "text": "-- seperating GUI and SQL code seems like a very good idea! Single Responsibility Principle and all that. We stopped thinking the being called more than once was the only reason for creating a procedure some time in the 1980s. Have you read [[Structured Design]] by Constantine and Yourdon? You do claim to be the Procedural programmer? Have you read any modern book on Refactoring? [[Nick Keighley]]",
            "id": "75a1d2c137c4098658e42a604872f557"
          },
          {
            "type": "html",
            "text": "\nIf you gained bunches of great knowledge from such books then use it to explain WHY, rather than \"do X because Mr. Y says so\". [[Software Engineering Is Art Of Compromise]], one is balancing multiple factors when selecting among trade-offs. I respect people who know and can explain the trade-offs. I may disagree with their weightings at times, such as disagreements about how human [[Wet Ware]] reacts to given designs, but I hope one at least demonstrates they've done their \"trade-off homework\". And I'm not saying it's <i>always</i> better to keep together or separate SQL. The best answer often depends shop practices, shop skill divisions, application type etc.  --top ",
            "id": "157c3bb62c5540608630ed0b80081214"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "10c9fde0bf28f51001d64e1711118613"
          },
          {
            "type": "html",
            "text": "You have illustrated a case where [[Premature Optimization]] trumps [[Separation Of Concerns]]. This doesn't weaken the validity of this concept, but it must be prioritized appropriately.",
            "id": "4ea858ff2558cd0a29a1e7f430bdc9eb"
          },
          {
            "type": "html",
            "text": "<i>All else being equal, I agree that the separation is a good thing. However, there are at least 2 other counter-factors that we need help weighing against it:</i>",
            "id": "ff9e3cd6354737ef3e4619d3f88ba252"
          },
          {
            "type": "html",
            "text": " Other orthogonal grouping/separation factor candidates",
            "id": "d05d8bddc79067a1204a552124cfe81c"
          },
          {
            "type": "html",
            "text": " Note if there are too many competing factors, then perhaps no division is the way to go, or else meta-tizing it so that factors can be dynamically/virtually isolated as needed (smells like tables, eh? :-)",
            "id": "bbdeca49bd797bca6b632e2642384e57"
          },
          {
            "type": "html",
            "text": " Other factors (such as [[Premature Optimization]])",
            "id": "b87373b4e70bb30fb4b28d02d07c2c4b"
          },
          {
            "type": "html",
            "text": "--top",
            "id": "59cac0305fe7d3b87122f60ec98f3d26"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "10c9fde0bf28f51001d64e1711118613"
          },
          {
            "type": "html",
            "text": "\nAnother area where a conflict seems to often appear is validation and processing. For example, it may take a lot of code to parse something for validation. Sometimes one can also use that parsed info to reformat the information. It seems a violation of [[Once And Only Once]] to copy the validation parsing code for formatting also. One could make a shared function or utility to do the parsing, but then we are not only performing the same parse action twice, slowing performance, but also clogging up the code with very specific, rarely used functions or utilities. [[Kiss Principle]] seems to dictate intermixing validation and formatting. (A [[Duplication Refactoring Threshold]] of 2 is a bit low in my opinion unless the code is long.)",
            "id": "d46e0f619be8b71d010df3638265399e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "10c9fde0bf28f51001d64e1711118613"
          },
          {
            "type": "html",
            "text": "\nTwo concerns that I would like to see separated in programming are data and [[Real Information]]. Data has to do with what a database is designed to do best, handle large amounts of very precise content in little pieces. The information section would focus on providing a representation in code of the way the user thinks (in data structures themselves, not in the UI). There would be a translation interface between the data and information sections, and representation engine for interacting with the user. --[[Jon Grover]]",
            "id": "10e50e7a98681b938bd3c737e83c15f8"
          },
          {
            "type": "html",
            "text": "<i>That's an interesting notion.  Can you provide a simple, concrete illustration that exemplifies the distinction between data and [[Real Information]]?  In particular, can you clearly illustrate how data differs from information?  There are some relevant -- but unanswered -- questions on the [[Real Information]] page, too.</i>",
            "id": "98eca53e89f270cd99704d53925c61db"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "10c9fde0bf28f51001d64e1711118613"
          },
          {
            "type": "html",
            "text": "\nTypical computing-space concerns include:",
            "id": "f5780bc9b3fd5f94a095d55c990dcaf9"
          },
          {
            "type": "html",
            "text": " Business logic",
            "id": "c0c7ebb63604d5f6e992782291b869cc"
          },
          {
            "type": "html",
            "text": " Security",
            "id": "723ebadecf02e93889cf7c58a569372e"
          },
          {
            "type": "html",
            "text": " Error/exception-handling",
            "id": "6a3861786238c20024d911ec0405bfe4"
          },
          {
            "type": "html",
            "text": " Debugging/tracing",
            "id": "f75d912a66d7a5be72d1253f77816be9"
          },
          {
            "type": "html",
            "text": " I/O",
            "id": "920f3a7c7f4e6638981f42936fd8c78e"
          },
          {
            "type": "html",
            "text": " Database (arguably more than \"I/O\", see [[Databases Are More Than Just Storage]])",
            "id": "006aa4db3c71e71971c528185bc582b7"
          },
          {
            "type": "html",
            "text": " Files",
            "id": "99e55ca203db6a03c70ec5320fb7c11d"
          },
          {
            "type": "html",
            "text": " Networking",
            "id": "83e8322bc2a788b93812e27ab4354887"
          },
          {
            "type": "html",
            "text": " UI",
            "id": "a0b901415391e540f3b511362e053605"
          },
          {
            "type": "html",
            "text": "\nThese are not necessarily mutually-exclusive.",
            "id": "74b2d624df121990cc716901a8a7db31"
          },
          {
            "type": "html",
            "text": "<i>[[Separation Of Concerns]] does not imply \"disconnected\".  Database and Files are necessarily connected, but that doesn't mean they can't be separated.  I'm separate from you, but we communicate.</i>",
            "id": "54c12a391f3d42c8257b27dcdea68899"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "10c9fde0bf28f51001d64e1711118613"
          },
          {
            "type": "html",
            "text": "Related:",
            "id": "0225dc035c75e3d5f1f4c90f8acf09bc"
          },
          {
            "type": "html",
            "text": " [[One Responsibility Rule]]",
            "id": "465903619ba591cd6ab84dc46e387887"
          },
          {
            "type": "html",
            "text": " [[Functions And Data Are Separate]]",
            "id": "b74fe780f9988b781931af7a3d16b0fe"
          },
          {
            "type": "html",
            "text": " [[Objects And Data Are Separate]]",
            "id": "d4268d95a0cb76aeb34bf59329ce1e7a"
          },
          {
            "type": "html",
            "text": " [[Keep Things Separate]]",
            "id": "26c33d96f95225215e4eebb1acc3c331"
          },
          {
            "type": "html",
            "text": " [[Connection Of Concerns]]",
            "id": "05e88f8a59dacf4c757f90fe00f1b544"
          },
          {
            "type": "html",
            "text": " [[Mirror Model]]",
            "id": "dab826146c2f03ef93263905c2b61d6e"
          },
          {
            "type": "html",
            "text": " [[Overhauling Style Sheets]]",
            "id": "eb259393e2bc8a613a107ccd90e10254"
          },
          {
            "type": "html",
            "text": " [[Business Logic Definition]]",
            "id": "92d860a0bd09085897416022250ec95a"
          },
          {
            "type": "html",
            "text": " [[Separation And Grouping Are Archaic Concepts]]",
            "id": "6c5e228099a7eee6415e9515f9987fc7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "10c9fde0bf28f51001d64e1711118613"
          },
          {
            "type": "html",
            "text": "[[Category Info Packaging]]",
            "id": "1e79b62ea0f0cfc5407ee0a75a02efbc"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?SeparationOfConcerns c2.com]",
            "id": "ca2f15f6f8a1bf56b6af3cc35de6c3f2"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707907376263
    }
  ]
}