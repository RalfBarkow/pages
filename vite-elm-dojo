{
  "title": "vite-elm-dojo",
  "story": [
    {
      "type": "paragraph",
      "id": "ed523160aeb69e67",
      "text": "⇒ [[Parse Wiki-Style Links]] and Render Them as Anchors"
    },
    {
      "type": "paragraph",
      "id": "c2d7ed1322f63e38",
      "text": "Regular Expression [https://elmprogramming.com/regular-expression.html page] > Splitting a String"
    },
    {
      "type": "markdown",
      "id": "630ea9aca9ea934b",
      "text": "> In the Splitting a String section earlier [https://elmprogramming.com/string.html#splitting-a-string page], we learned how to split a string by using the String.split function. That function is limited to splitting a string based only on a separator."
    },
    {
      "type": "markdown",
      "id": "1dea892700f41cba",
      "text": "# Regex for Wiki-Style Links"
    },
    {
      "type": "paragraph",
      "id": "1fa1302f62b51340",
      "text": "You can use regular expressions in Elm [https://package.elm-lang.org/packages/elm/regex/latest/ page] to match and extract wiki-style links. [https://package.elm-lang.org/packages/elm/regex/latest/Regex#fromString page]"
    },
    {
      "type": "code",
      "id": "103ea0612c7085a7",
      "text": "import Regex exposing (..)\n\n-- Define a regular expression pattern\nwikiLinkPattern : String\nwikiLinkPattern =\n    \"/\\[\\[([^\\]\\[:]+)\\]\\]/gm\"\n\n-- Define a function to extract matches\nextractWikiLinks : String -> List String\nextractWikiLinks input =\n    let\n        regex = Regex.fromString wikiLinkPattern\n        matches = Regex.find regex input\n    in\n        List.map\n            (\\match ->\n                case match of\n                    Just [text] -> text\n                    _ -> \"\"\n            )\n            matches\n"
    },
    {
      "type": "paragraph",
      "id": "474aa68094b16e53",
      "text": "Regex match Wikipedia internal article links [https://stackoverflow.com/questions/26010846/regex-match-wikipedia-internal-article-links stackoverflow]"
    },
    {
      "type": "paragraph",
      "id": "9fc8e8d353d5c1c1",
      "text": "Regular Expression: [https://regex101.com/ site], [https://regex101.com/r/zUAKXt/1 page]"
    },
    {
      "type": "code",
      "id": "eb98fd1cb789126a",
      "text": "/\\[\\[([^\\]\\[:]+)\\]\\]/gm"
    },
    {
      "type": "paragraph",
      "id": "326c0cb0720942cb",
      "text": "Test String:"
    },
    {
      "type": "code",
      "id": "f52d99e912aadfec",
      "text": "[[Federated Wiki]]"
    },
    {
      "type": "pagefold",
      "id": "a2ec471bfd941009",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "87ae70fdef39260d",
      "text": "Generally speaking, it will be easier and nicer to use a parsing library like elm/parser instead of this. [https://package.elm-lang.org/packages/elm/regex/latest/ page], [https://package.elm-lang.org/packages/elm/parser/latest page], [https://github.com/elm/parser/blob/master/comparison.md page]"
    },
    {
      "type": "paragraph",
      "id": "020204fb56f3f8c9",
      "text": "SIPSER, Michael, 1996. Introduction to the theory of computation. Prelim. ed. Boston: PWS Pub. Co. The PWS series in computer science. ISBN 978-0-534-95250-1. \n"
    },
    {
      "type": "paragraph",
      "id": "c6d2fb41297c6def",
      "text": "Introduction to the Theory of Computation by [[Michael Sipser]]. [https://dl.acm.org/doi/pdf/10.1145/230514.571645 page]"
    },
    {
      "type": "paragraph",
      "id": "ecc727efb7dd5bca",
      "text": "Introduction to the elm/parser package [https://korban.net/posts/elm/2018-09-07-introduction-elm-parser/ page], [https://ellie-app.com/3fjB8wvN7L9a1 ellie]"
    },
    {
      "type": "code",
      "id": "fbf00f9307b1d448",
      "text": "wikiLinkParser : Parser WikiLink\nwikiLinkParser =\n    succeed WikiLink\n        |. symbol \"[[\"\n        |= (getChompedString <| chompWhile (\\c -> c /= ']'))\n        |. symbol \"]]\"\n\n"
    },
    {
      "type": "paragraph",
      "id": "ecdc6ae3068677c8",
      "text": "⇒ [[elm-markdown]]"
    },
    {
      "type": "assets",
      "id": "3618c141dbd9cb72",
      "text": "pages/vite-elm-dojo"
    },
    {
      "type": "frame",
      "id": "9613c55af4166d4a",
      "text": "http://localhost:3000/assets/pages/vite-elm-dojo/dist/index.html"
    },
    {
      "type": "assets",
      "id": "ac7e41cd794372f0",
      "text": "pages/vite-elm-dojo/dist\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "vite-elm-dojo",
        "story": []
      },
      "date": 1694431911624
    },
    {
      "id": "ed523160aeb69e67",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ed523160aeb69e67",
        "text": "⇒ Parse wiki-style links and render them as anchors ⇒ [[vite-elm-dojo]]"
      },
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694431914829
    },
    {
      "type": "edit",
      "id": "ed523160aeb69e67",
      "item": {
        "type": "paragraph",
        "id": "ed523160aeb69e67",
        "text": "⇒ Parse wiki-style links and render them as anchors "
      },
      "date": 1694431920934
    },
    {
      "id": "1787d6bd08833063",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1787d6bd08833063",
        "text": "To parse wiki-style links and render them as anchors in Elm, you'll need to create a function that can identify and convert these links. I'll provide you with an example Elm code snippet that demonstrates how you can achieve this:"
      },
      "after": "ed523160aeb69e67",
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694431923342
    },
    {
      "id": "2b23fa426a951208",
      "type": "add",
      "item": {
        "type": "code",
        "id": "2b23fa426a951208",
        "text": "module Main exposing (main)\n\nimport Html exposing (Html, a, text)\nimport Html.Attributes exposing (href)\nimport String exposing (contains, split)\n\n\ntype alias WikiLink =\n    { label : String\n    , target : String\n    }\n\n\nparseWikiLink : String -> Maybe WikiLink\nparseWikiLink input =\n    let\n        parts =\n            split \"]]\" input\n    in\n    case parts of\n        [ label, target ] ->\n            if contains \"[[\" label then\n                Just { label = String.dropLeft 2 label, target = target }\n\n            else\n                Nothing\n\n        _ ->\n            Nothing\n\n\nrenderWikiLink : WikiLink -> Html msg\nrenderWikiLink link =\n    a [ Html.Attributes.href link.target ] [ Html.text link.label ]\n\n\nmain : Html msg\nmain =\n    let\n        wikiLinkText : String\n        wikiLinkText =\n            \"[[OpenAI]]\"\n\n        maybeWikiLink : Maybe WikiLink\n        maybeWikiLink =\n            parseWikiLink wikiLinkText\n    in\n    case maybeWikiLink of\n        Just link ->\n            renderWikiLink link\n\n        Nothing ->\n            text \"Invalid Wiki Link\"\n"
      },
      "after": "1787d6bd08833063",
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694431925607
    },
    {
      "id": "e40b1abf7284db37",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "e40b1abf7284db37",
        "text": "Explanation:"
      },
      "after": "2b23fa426a951208",
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694431931223
    },
    {
      "id": "52e190785c7b4d9f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "52e190785c7b4d9f",
        "text": "1. WikiLink is a type alias that represents a wiki-style link. It has two fields: label for the link text and target for the link destination."
      },
      "after": "e40b1abf7284db37",
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694431936808
    },
    {
      "id": "96a3c7ffb9b4e1ba",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "96a3c7ffb9b4e1ba",
        "text": "2. parseWikiLink is a function that attempts to parse a wiki-style link from a string. It takes a string as input and returns a Maybe WikiLink. If a valid wiki link is found, it returns Just WikiLink. Otherwise, it returns Nothing."
      },
      "after": "52e190785c7b4d9f",
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694431939996
    },
    {
      "id": "4bf1f99896de9bd8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4bf1f99896de9bd8",
        "text": "3. renderWikiLink is a function that takes a WikiLink and generates an HTML anchor element (a tag) with the appropriate href and label."
      },
      "after": "96a3c7ffb9b4e1ba",
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694431945542
    },
    {
      "id": "ed6725e1aa987d1d",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ed6725e1aa987d1d",
        "text": "4. main is the entry point of the Elm program. In this example, it tries to parse a wiki-style link string \"[[OpenAI]]\" using parseWikiLink. If a valid link is found, it renders it using renderWikiLink. Otherwise, it displays \"Invalid Wiki Link\"."
      },
      "after": "4bf1f99896de9bd8",
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694431951186
    },
    {
      "id": "23767a03edfd5065",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "23767a03edfd5065",
        "text": "In this example, if you run the Elm code, it will output an HTML anchor element with the label \"OpenAI\" and a target of OpenAI. You can adapt this code to handle more complex wiki-style links and integrate it into your larger Elm application as needed."
      },
      "after": "ed6725e1aa987d1d",
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694431954446
    },
    {
      "item": {
        "type": "factory",
        "id": "da622abe54534d48"
      },
      "id": "da622abe54534d48",
      "type": "add",
      "after": "23767a03edfd5065",
      "date": 1694431960178
    },
    {
      "type": "edit",
      "id": "da622abe54534d48",
      "item": {
        "type": "pagefold",
        "id": "da622abe54534d48",
        "text": "~"
      },
      "date": 1694431962721
    },
    {
      "id": "c2d7ed1322f63e38",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c2d7ed1322f63e38",
        "text": "Splitting a String [https://elmprogramming.com/string.html#splitting-a-string page], [https://elmprogramming.com/regular-expression.html page]"
      },
      "after": "da622abe54534d48",
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694431965787
    },
    {
      "id": "5457934a58c23474",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5457934a58c23474",
        "text": "How can i break line html text in Elm [https://stackoverflow.com/questions/57568074/how-can-i-break-line-html-text-in-elm stackoverflow]"
      },
      "after": "c2d7ed1322f63e38",
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694431978082
    },
    {
      "id": "366db6fb97ccdc09",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "366db6fb97ccdc09",
        "text": "Elm code for splitting a string into list of tuples containing character and its index position [https://stackoverflow.com/questions/37281332/elm-code-for-splitting-a-string-into-list-of-tuples-containing-character-and-its stackoverflow]"
      },
      "after": "5457934a58c23474",
      "attribution": {
        "page": "2023-09-11"
      },
      "date": 1694431980780
    },
    {
      "item": {
        "type": "factory",
        "id": "abde8f96050144e5"
      },
      "id": "abde8f96050144e5",
      "type": "add",
      "after": "366db6fb97ccdc09",
      "date": 1694432132212
    },
    {
      "type": "edit",
      "id": "abde8f96050144e5",
      "item": {
        "type": "reference",
        "id": "abde8f96050144e5",
        "site": "wiki.ralfbarkow.ch",
        "slug": "qualified-links",
        "title": "Qualified Links",
        "text": "[[Link]]s that indicate their relationship type. For example, here's a wiki-style link that includes a relationship qualifier (instead of \"OTHER-NOTE\", insert your usual link ID format):"
      },
      "date": 1694432136226
    },
    {
      "item": {
        "type": "factory",
        "id": "5a08406acce2d216"
      },
      "id": "5a08406acce2d216",
      "type": "add",
      "after": "abde8f96050144e5",
      "date": 1694432224016
    },
    {
      "type": "edit",
      "id": "5a08406acce2d216",
      "item": {
        "type": "reference",
        "id": "5a08406acce2d216",
        "site": "wiki.ralfbarkow.ch",
        "slug": "wiki-creole",
        "title": "Wiki Creole",
        "text": "[[Wiki Creole]] is intended to be the <i>lingua franca</i> [[Wiki Syntax]] of the most popular offshoots of wiki around the world, used both for editing directly and as an [[Wiki Interchange Format]] for sharing content between wikis. The beta [[Wiki Syntax]] was banged out at [[Wiki Sym]] 2006. Apparently, [[Wards Wiki]] will be one of the test beds!  So far, the creole supports [[Media Wiki]]-style [[Free Link]]s and preformatted text.  Creole has been implemented now in 10 wiki engines and 4 wiki tools.  It is currently version 1.0."
      },
      "date": 1694432226047
    },
    {
      "type": "remove",
      "id": "366db6fb97ccdc09",
      "date": 1694432312852
    },
    {
      "type": "remove",
      "id": "5457934a58c23474",
      "date": 1694432328566
    },
    {
      "item": {
        "type": "factory",
        "id": "431d21fdc6262334"
      },
      "id": "431d21fdc6262334",
      "type": "add",
      "after": "5a08406acce2d216",
      "date": 1694432385694
    },
    {
      "type": "edit",
      "id": "431d21fdc6262334",
      "item": {
        "type": "reference",
        "id": "431d21fdc6262334",
        "site": "splash.fed.wiki.org",
        "slug": "link-word",
        "title": "Link Word",
        "text": "Wiki has a distinct markup for links that go to pages outside the wiki. Here we suggest a style for using that markup that suites both writer and reader."
      },
      "date": 1694432389062
    },
    {
      "id": "431d21fdc6262334",
      "type": "move",
      "order": [
        "ed523160aeb69e67",
        "1787d6bd08833063",
        "2b23fa426a951208",
        "e40b1abf7284db37",
        "52e190785c7b4d9f",
        "96a3c7ffb9b4e1ba",
        "4bf1f99896de9bd8",
        "ed6725e1aa987d1d",
        "23767a03edfd5065",
        "da622abe54534d48",
        "c2d7ed1322f63e38",
        "431d21fdc6262334",
        "abde8f96050144e5",
        "5a08406acce2d216"
      ],
      "date": 1694432391611
    },
    {
      "type": "edit",
      "id": "5a08406acce2d216",
      "item": {
        "type": "reference",
        "id": "5a08406acce2d216",
        "site": "wiki.ralfbarkow.ch",
        "slug": "wiki-creole",
        "title": "Wiki Creole",
        "text": "is intended to be the lingua franca [[Wiki Syntax]] of the most popular offshoots of wiki around the world, used both for editing directly and as an [[Wiki Interchange Format]] for sharing content between wikis. The beta [[Wiki Syntax]] was banged out at [[Wiki Sym]] 2006. Apparently, [[Wards Wiki]] will be one of the test beds!  So far, the creole supports [[Media Wiki]]-style [[Free Link]]s and preformatted text.  Creole has been implemented now in 10 wiki engines and 4 wiki tools.  It is currently version 1.0."
      },
      "date": 1694432465811
    },
    {
      "type": "edit",
      "id": "ed523160aeb69e67",
      "item": {
        "type": "paragraph",
        "id": "ed523160aeb69e67",
        "text": "⇒ [[Parse Wiki-Style Links]] and Render Them as Anchors"
      },
      "date": 1694432570638
    },
    {
      "id": "1787d6bd08833063",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432599884
    },
    {
      "id": "2b23fa426a951208",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432602699
    },
    {
      "id": "e40b1abf7284db37",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432606737
    },
    {
      "id": "52e190785c7b4d9f",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432610628
    },
    {
      "id": "96a3c7ffb9b4e1ba",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432613948
    },
    {
      "id": "4bf1f99896de9bd8",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432617615
    },
    {
      "id": "ed6725e1aa987d1d",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432621645
    },
    {
      "id": "23767a03edfd5065",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432624106
    },
    {
      "id": "da622abe54534d48",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432627020
    },
    {
      "id": "c2d7ed1322f63e38",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432629968
    },
    {
      "id": "431d21fdc6262334",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432633332
    },
    {
      "id": "abde8f96050144e5",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432639936
    },
    {
      "id": "5a08406acce2d216",
      "type": "remove",
      "removedTo": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694432646169
    },
    {
      "id": "1787d6bd08833063",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1787d6bd08833063",
        "text": "To parse wiki-style links and render them as anchors in Elm, you'll need to create a function that can identify and convert these links. I (ChatGPT August 3 Version) will provide you with an example Elm code snippet that demonstrates how you can achieve this: [https://github.com/RalfBarkow/vite-elm-dojo/commit/b6cf5e3baac8ec259a71a39dab4334d10b779443 commit]"
      },
      "after": "ed523160aeb69e67",
      "attribution": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694433342557
    },
    {
      "id": "1787d6bd08833063",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1787d6bd08833063",
        "text": "To parse wiki-style links and render them as anchors in Elm, you'll need to create a function that can identify and convert these links. I'll provide you with an example Elm code snippet that demonstrates how you can achieve this: [https://github.com/RalfBarkow/vite-elm-dojo/commit/b6cf5e3baac8ec259a71a39dab4334d10b779443 commit], [https://github.com/RalfBarkow/vite-elm-dojo/blob/b6cf5e3baac8ec259a71a39dab4334d10b779443/src/Main.elm code]"
      },
      "after": "ed523160aeb69e67",
      "attribution": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694433382367
    },
    {
      "id": "c2d7ed1322f63e38",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c2d7ed1322f63e38",
        "text": "Splitting a String [https://elmprogramming.com/string.html#splitting-a-string page], [https://elmprogramming.com/regular-expression.html page]"
      },
      "after": "1787d6bd08833063",
      "attribution": {
        "page": "Parse Wiki-Style Links"
      },
      "date": 1694433421476
    },
    {
      "item": {
        "type": "factory",
        "id": "1dea892700f41cba"
      },
      "id": "1dea892700f41cba",
      "type": "add",
      "after": "c2d7ed1322f63e38",
      "date": 1694433510949
    },
    {
      "type": "edit",
      "id": "1dea892700f41cba",
      "item": {
        "type": "paragraph",
        "id": "1dea892700f41cba",
        "text": "#Regex for These Wiki-Style Links"
      },
      "date": 1694433514358
    },
    {
      "type": "edit",
      "id": "1dea892700f41cba",
      "item": {
        "type": "paragraph",
        "id": "1dea892700f41cba",
        "text": "# Regex for These Wiki-Style Links"
      },
      "date": 1694433516341
    },
    {
      "type": "edit",
      "id": "1dea892700f41cba",
      "item": {
        "type": "markdown",
        "id": "1dea892700f41cba",
        "text": "# Regex for These Wiki-Style Links"
      },
      "date": 1694433517220
    },
    {
      "item": {
        "type": "factory",
        "id": "1fa1302f62b51340"
      },
      "id": "1fa1302f62b51340",
      "type": "add",
      "after": "1dea892700f41cba",
      "date": 1694433523322
    },
    {
      "type": "edit",
      "id": "1fa1302f62b51340",
      "item": {
        "type": "paragraph",
        "id": "1fa1302f62b51340",
        "text": "ou can use regular expressions in Elm to match and extract wiki-style links. Here's an example of a regular expression to match links in the format [[label|target]]:"
      },
      "date": 1694433524855
    },
    {
      "type": "edit",
      "id": "1fa1302f62b51340",
      "item": {
        "type": "paragraph",
        "id": "1fa1302f62b51340",
        "text": "You can use regular expressions in Elm to match and extract wiki-style links. Here's an example of a regular expression to match links in the format [[label|target]]:"
      },
      "date": 1694433530937
    },
    {
      "item": {
        "type": "factory",
        "id": "103ea0612c7085a7"
      },
      "id": "103ea0612c7085a7",
      "type": "add",
      "after": "1fa1302f62b51340",
      "date": 1694433534899
    },
    {
      "type": "edit",
      "id": "103ea0612c7085a7",
      "item": {
        "type": "code",
        "id": "103ea0612c7085a7",
        "text": "import Regex exposing (..)\n\n-- Define a regular expression pattern\nwikiLinkPattern : String\nwikiLinkPattern =\n    \"\\\\[\\\\[([^\\\\|\\\\]]+)(?:\\\\|([^\\\\]]+))?\\\\]\\\\]\"\n\n-- Define a function to extract matches\nextractWikiLinks : String -> List (String, String)\nextractWikiLinks input =\n    let\n        regex = Regex.fromRegex wikiLinkPattern\n        matches = Regex.find regex input\n    in\n        List.map\n            (\\match ->\n                case match of\n                    Just groups ->\n                        case List.head groups of\n                            Just label -> \n                                case List.head (List.tail groups) of\n                                    Just target -> (label, target)\n                                    Nothing -> (label, \"\")\n\n                            Nothing -> (\"\", \"\")\n\n                    Nothing -> (\"\", \"\")\n            )\n            matches\n"
      },
      "date": 1694433536969
    },
    {
      "item": {
        "type": "factory",
        "id": "ab86b244735dfec9"
      },
      "id": "ab86b244735dfec9",
      "type": "add",
      "after": "103ea0612c7085a7",
      "date": 1694433557658
    },
    {
      "id": "ab86b244735dfec9",
      "type": "move",
      "order": [
        "ed523160aeb69e67",
        "1787d6bd08833063",
        "c2d7ed1322f63e38",
        "1dea892700f41cba",
        "1fa1302f62b51340",
        "ab86b244735dfec9",
        "103ea0612c7085a7"
      ],
      "date": 1694433559866
    },
    {
      "type": "edit",
      "id": "ab86b244735dfec9",
      "item": {
        "type": "code",
        "id": "ab86b244735dfec9",
        "text": "[[label|target]]"
      },
      "date": 1694433561735
    },
    {
      "type": "edit",
      "id": "1fa1302f62b51340",
      "item": {
        "type": "paragraph",
        "id": "1fa1302f62b51340",
        "text": "You can use regular expressions in Elm to match and extract wiki-style links. Here's an example of a regular expression to match links in the format"
      },
      "date": 1694433570967
    },
    {
      "type": "add",
      "id": "0730bb14b5081396",
      "item": {
        "type": "paragraph",
        "id": "0730bb14b5081396",
        "text": "[[label|target]]:"
      },
      "after": "1fa1302f62b51340",
      "date": 1694433571557
    },
    {
      "id": "0730bb14b5081396",
      "type": "move",
      "order": [
        "ed523160aeb69e67",
        "1787d6bd08833063",
        "c2d7ed1322f63e38",
        "1dea892700f41cba",
        "1fa1302f62b51340",
        "ab86b244735dfec9",
        "0730bb14b5081396",
        "103ea0612c7085a7"
      ],
      "date": 1694433574484
    },
    {
      "type": "edit",
      "id": "0730bb14b5081396",
      "item": {
        "type": "paragraph",
        "id": "0730bb14b5081396",
        "text": ":"
      },
      "date": 1694433578700
    },
    {
      "item": {
        "type": "factory",
        "id": "474aa68094b16e53"
      },
      "id": "474aa68094b16e53",
      "type": "add",
      "after": "103ea0612c7085a7",
      "date": 1694433626867
    },
    {
      "type": "fork",
      "date": 1694433653766
    },
    {
      "type": "remove",
      "id": "1787d6bd08833063",
      "date": 1694433655452
    },
    {
      "type": "edit",
      "id": "1fa1302f62b51340",
      "item": {
        "type": "paragraph",
        "id": "1fa1302f62b51340",
        "text": "You can use regular expressions in Elm to match and extract wiki-style links. "
      },
      "date": 1694433751200
    },
    {
      "type": "remove",
      "id": "ab86b244735dfec9",
      "date": 1694433753495
    },
    {
      "type": "remove",
      "id": "0730bb14b5081396",
      "date": 1694433755129
    },
    {
      "type": "edit",
      "id": "103ea0612c7085a7",
      "item": {
        "type": "code",
        "id": "103ea0612c7085a7",
        "text": "import Regex exposing (..)\n\n-- Define a regular expression pattern\nwikiLinkPattern : String\nwikiLinkPattern =\n    \"\\\\[\\\\[([^\\\\]]+)\\\\]\\\\]\"\n\n-- Define a function to extract matches\nextractWikiLinks : String -> List String\nextractWikiLinks input =\n    let\n        regex = Regex.fromRegex wikiLinkPattern\n        matches = Regex.find regex input\n    in\n        List.map\n            (\\match ->\n                case match of\n                    Just [text] -> text\n                    _ -> \"\"\n            )\n            matches\n"
      },
      "date": 1694433761535
    },
    {
      "type": "edit",
      "id": "474aa68094b16e53",
      "item": {
        "type": "paragraph",
        "id": "474aa68094b16e53",
        "text": "Regex match Wikipedia internal article links"
      },
      "date": 1694444633844
    },
    {
      "type": "edit",
      "id": "474aa68094b16e53",
      "item": {
        "type": "paragraph",
        "id": "474aa68094b16e53",
        "text": "Regex match Wikipedia internal article links [https://stackoverflow.com/questions/26010846/regex-match-wikipedia-internal-article-links stackoverflow]"
      },
      "date": 1694444753210
    },
    {
      "item": {
        "type": "factory",
        "id": "7682f205bc42bfdb"
      },
      "id": "7682f205bc42bfdb",
      "type": "add",
      "after": "474aa68094b16e53",
      "date": 1694445109667
    },
    {
      "type": "edit",
      "id": "7682f205bc42bfdb",
      "item": {
        "type": "paragraph",
        "id": "7682f205bc42bfdb",
        "text": "/\\[\\[([^\\]\\[:]+)/gm"
      },
      "date": 1694445112777
    },
    {
      "type": "edit",
      "id": "474aa68094b16e53",
      "item": {
        "type": "paragraph",
        "id": "474aa68094b16e53",
        "text": "Regex match Wikipedia internal article links [https://stackoverflow.com/questions/26010846/regex-match-wikipedia-internal-article-links stackoverflow], [https://regex101.com/ site]"
      },
      "date": 1694445121517
    },
    {
      "type": "remove",
      "id": "7682f205bc42bfdb",
      "date": 1694445127133
    },
    {
      "item": {
        "type": "factory",
        "id": "eb98fd1cb789126a"
      },
      "id": "eb98fd1cb789126a",
      "type": "add",
      "after": "474aa68094b16e53",
      "date": 1694445129409
    },
    {
      "type": "edit",
      "id": "eb98fd1cb789126a",
      "item": {
        "type": "code",
        "id": "eb98fd1cb789126a",
        "text": "/\\[\\[([^\\]\\[:]+)/gm"
      },
      "date": 1694445131053
    },
    {
      "type": "edit",
      "id": "eb98fd1cb789126a",
      "item": {
        "type": "code",
        "id": "eb98fd1cb789126a",
        "text": "/\\[\\[([^\\]\\[:]+)\\]\\]/gm"
      },
      "date": 1694445274900
    },
    {
      "item": {
        "type": "factory",
        "id": "9fc8e8d353d5c1c1"
      },
      "id": "9fc8e8d353d5c1c1",
      "type": "add",
      "after": "eb98fd1cb789126a",
      "date": 1694445307333
    },
    {
      "id": "9fc8e8d353d5c1c1",
      "type": "move",
      "order": [
        "ed523160aeb69e67",
        "c2d7ed1322f63e38",
        "1dea892700f41cba",
        "1fa1302f62b51340",
        "103ea0612c7085a7",
        "474aa68094b16e53",
        "9fc8e8d353d5c1c1",
        "eb98fd1cb789126a"
      ],
      "date": 1694445310043
    },
    {
      "type": "edit",
      "id": "9fc8e8d353d5c1c1",
      "item": {
        "type": "paragraph",
        "id": "9fc8e8d353d5c1c1",
        "text": "Regular expression:"
      },
      "date": 1694445318302
    },
    {
      "type": "edit",
      "id": "9fc8e8d353d5c1c1",
      "item": {
        "type": "paragraph",
        "id": "9fc8e8d353d5c1c1",
        "text": "Regular Expression:"
      },
      "date": 1694445323866
    },
    {
      "item": {
        "type": "factory",
        "id": "326c0cb0720942cb"
      },
      "id": "326c0cb0720942cb",
      "type": "add",
      "after": "eb98fd1cb789126a",
      "date": 1694445336932
    },
    {
      "type": "edit",
      "id": "326c0cb0720942cb",
      "item": {
        "type": "paragraph",
        "id": "326c0cb0720942cb",
        "text": "Test String:"
      },
      "date": 1694445338949
    },
    {
      "item": {
        "type": "factory",
        "id": "f52d99e912aadfec"
      },
      "id": "f52d99e912aadfec",
      "type": "add",
      "after": "326c0cb0720942cb",
      "date": 1694445343501
    },
    {
      "type": "edit",
      "id": "f52d99e912aadfec",
      "item": {
        "type": "code",
        "id": "f52d99e912aadfec",
        "text": "[[Federated Wiki]]"
      },
      "date": 1694445345168
    },
    {
      "type": "edit",
      "id": "9fc8e8d353d5c1c1",
      "item": {
        "type": "paragraph",
        "id": "9fc8e8d353d5c1c1",
        "text": "Regular Expression: [https://regex101.com/ site]"
      },
      "date": 1694445358464
    },
    {
      "type": "edit",
      "id": "c2d7ed1322f63e38",
      "item": {
        "type": "paragraph",
        "id": "c2d7ed1322f63e38",
        "text": "Splitting a String [https://elmprogramming.com/string.html#splitting-a-string page] and Regular Expression [https://elmprogramming.com/regular-expression.html page]"
      },
      "date": 1694445684204
    },
    {
      "type": "edit",
      "id": "c2d7ed1322f63e38",
      "item": {
        "type": "paragraph",
        "id": "c2d7ed1322f63e38",
        "text": "Splitting a String [https://elmprogramming.com/string.html#splitting-a-string page] and Regular Expression [https://elmprogramming.com/regular-expression.html page] > Splitting a String"
      },
      "date": 1694445721095
    },
    {
      "type": "add",
      "id": "630ea9aca9ea934b",
      "item": {
        "type": "paragraph",
        "id": "630ea9aca9ea934b",
        "text": "> In the Splitting a String section earlier, we learned how to split a string by using the String.split function. That function is limited to splitting a string based only on a separator."
      },
      "after": "c2d7ed1322f63e38",
      "date": 1694445748422
    },
    {
      "type": "edit",
      "id": "630ea9aca9ea934b",
      "item": {
        "type": "markdown",
        "id": "630ea9aca9ea934b",
        "text": "> In the Splitting a String section earlier, we learned how to split a string by using the String.split function. That function is limited to splitting a string based only on a separator."
      },
      "date": 1694445749683
    },
    {
      "type": "edit",
      "id": "c2d7ed1322f63e38",
      "item": {
        "type": "paragraph",
        "id": "c2d7ed1322f63e38",
        "text": "Regular Expression [https://elmprogramming.com/regular-expression.html page] > Splitting a String"
      },
      "date": 1694445766236
    },
    {
      "type": "edit",
      "id": "630ea9aca9ea934b",
      "item": {
        "type": "markdown",
        "id": "630ea9aca9ea934b",
        "text": "> In the Splitting a String section earlier Splitting a String [https://elmprogramming.com/string.html#splitting-a-string page], we learned how to split a string by using the String.split function. That function is limited to splitting a string based only on a separator."
      },
      "date": 1694445777421
    },
    {
      "type": "edit",
      "id": "630ea9aca9ea934b",
      "item": {
        "type": "markdown",
        "id": "630ea9aca9ea934b",
        "text": "> In the Splitting a String section earlier [https://elmprogramming.com/string.html#splitting-a-string page], we learned how to split a string by using the String.split function. That function is limited to splitting a string based only on a separator."
      },
      "date": 1694445790153
    },
    {
      "type": "edit",
      "id": "1fa1302f62b51340",
      "item": {
        "type": "paragraph",
        "id": "1fa1302f62b51340",
        "text": "You can use regular expressions in Elm [https://package.elm-lang.org/packages/elm/regex/latest/ page] to match and extract wiki-style links. "
      },
      "date": 1694445874879
    },
    {
      "item": {
        "type": "factory",
        "id": "87ae70fdef39260d"
      },
      "id": "87ae70fdef39260d",
      "type": "add",
      "after": "f52d99e912aadfec",
      "date": 1694445910349
    },
    {
      "type": "edit",
      "id": "87ae70fdef39260d",
      "item": {
        "type": "paragraph",
        "id": "87ae70fdef39260d",
        "text": "Generally speaking, it will be easier and nicer to use a parsing library like elm/parser instead of this."
      },
      "date": 1694445916426
    },
    {
      "type": "edit",
      "id": "87ae70fdef39260d",
      "item": {
        "type": "paragraph",
        "id": "87ae70fdef39260d",
        "text": "Generally speaking, it will be easier and nicer to use a parsing library like elm/parser instead of this. [https://package.elm-lang.org/packages/elm/regex/latest/ page]"
      },
      "date": 1694445929065
    },
    {
      "item": {
        "type": "factory",
        "id": "a2ec471bfd941009"
      },
      "id": "a2ec471bfd941009",
      "type": "add",
      "after": "87ae70fdef39260d",
      "date": 1694445937806
    },
    {
      "id": "a2ec471bfd941009",
      "type": "move",
      "order": [
        "ed523160aeb69e67",
        "c2d7ed1322f63e38",
        "630ea9aca9ea934b",
        "1dea892700f41cba",
        "1fa1302f62b51340",
        "103ea0612c7085a7",
        "474aa68094b16e53",
        "9fc8e8d353d5c1c1",
        "eb98fd1cb789126a",
        "326c0cb0720942cb",
        "f52d99e912aadfec",
        "a2ec471bfd941009",
        "87ae70fdef39260d"
      ],
      "date": 1694445939825
    },
    {
      "type": "edit",
      "id": "a2ec471bfd941009",
      "item": {
        "type": "pagefold",
        "id": "a2ec471bfd941009",
        "text": "~"
      },
      "date": 1694445942888
    },
    {
      "type": "edit",
      "id": "87ae70fdef39260d",
      "item": {
        "type": "paragraph",
        "id": "87ae70fdef39260d",
        "text": "Generally speaking, it will be easier and nicer to use a parsing library like elm/parser instead of this. [https://package.elm-lang.org/packages/elm/regex/latest/ page], [https://package.elm-lang.org/packages/elm/parser/latest page]"
      },
      "date": 1694445948416
    },
    {
      "type": "edit",
      "id": "87ae70fdef39260d",
      "item": {
        "type": "paragraph",
        "id": "87ae70fdef39260d",
        "text": "Generally speaking, it will be easier and nicer to use a parsing library like elm/parser instead of this. [https://package.elm-lang.org/packages/elm/regex/latest/ page], [https://package.elm-lang.org/packages/elm/parser/latest page], [https://github.com/elm/parser/blob/master/comparison.md page]"
      },
      "date": 1694446010599
    },
    {
      "type": "edit",
      "id": "9fc8e8d353d5c1c1",
      "item": {
        "type": "paragraph",
        "id": "9fc8e8d353d5c1c1",
        "text": "Regular Expression: [https://regex101.com/ site], [https://regex101.com/r/zUAKXt/1 page]"
      },
      "date": 1694446083733
    },
    {
      "type": "edit",
      "id": "474aa68094b16e53",
      "item": {
        "type": "paragraph",
        "id": "474aa68094b16e53",
        "text": "Regex match Wikipedia internal article links [https://stackoverflow.com/questions/26010846/regex-match-wikipedia-internal-article-links stackoverflow]"
      },
      "date": 1694446160160
    },
    {
      "type": "add",
      "id": "c6d2fb41297c6def",
      "item": {
        "type": "paragraph",
        "id": "c6d2fb41297c6def",
        "text": "Introduction to the Theory of Computation by Michael Sipser!"
      },
      "after": "9fc8e8d353d5c1c1",
      "date": 1694446900296
    },
    {
      "id": "c6d2fb41297c6def",
      "type": "move",
      "order": [
        "ed523160aeb69e67",
        "c2d7ed1322f63e38",
        "630ea9aca9ea934b",
        "1dea892700f41cba",
        "1fa1302f62b51340",
        "103ea0612c7085a7",
        "474aa68094b16e53",
        "9fc8e8d353d5c1c1",
        "eb98fd1cb789126a",
        "326c0cb0720942cb",
        "f52d99e912aadfec",
        "c6d2fb41297c6def",
        "a2ec471bfd941009",
        "87ae70fdef39260d"
      ],
      "date": 1694446903541
    },
    {
      "type": "edit",
      "id": "c6d2fb41297c6def",
      "item": {
        "type": "paragraph",
        "id": "c6d2fb41297c6def",
        "text": "Introduction to the Theory of Computation by [[Michael Sipser]]. [https://dl.acm.org/doi/pdf/10.1145/230514.571645 page]"
      },
      "date": 1694447004480
    },
    {
      "type": "add",
      "id": "020204fb56f3f8c9",
      "item": {
        "type": "paragraph",
        "id": "020204fb56f3f8c9",
        "text": "\nSIPSER, Michael, 1996. Introduction to the theory of computation. . Prelim. ed. Boston: PWS Pub. Co. The PWS series in computer science. ISBN 978-0-534-95250-1. QA267 .S56 1996\n"
      },
      "after": "c6d2fb41297c6def",
      "date": 1694447060711
    },
    {
      "type": "edit",
      "id": "020204fb56f3f8c9",
      "item": {
        "type": "paragraph",
        "id": "020204fb56f3f8c9",
        "text": "SIPSER, Michael, 1996. Introduction to the theory of computation. Prelim. ed. Boston: PWS Pub. Co. The PWS series in computer science. ISBN 978-0-534-95250-1. \n"
      },
      "date": 1694447081055
    },
    {
      "id": "020204fb56f3f8c9",
      "type": "move",
      "order": [
        "ed523160aeb69e67",
        "c2d7ed1322f63e38",
        "630ea9aca9ea934b",
        "1dea892700f41cba",
        "1fa1302f62b51340",
        "103ea0612c7085a7",
        "474aa68094b16e53",
        "9fc8e8d353d5c1c1",
        "eb98fd1cb789126a",
        "326c0cb0720942cb",
        "f52d99e912aadfec",
        "c6d2fb41297c6def",
        "a2ec471bfd941009",
        "87ae70fdef39260d",
        "020204fb56f3f8c9"
      ],
      "date": 1694447103900
    },
    {
      "id": "c6d2fb41297c6def",
      "type": "move",
      "order": [
        "ed523160aeb69e67",
        "c2d7ed1322f63e38",
        "630ea9aca9ea934b",
        "1dea892700f41cba",
        "1fa1302f62b51340",
        "103ea0612c7085a7",
        "474aa68094b16e53",
        "9fc8e8d353d5c1c1",
        "eb98fd1cb789126a",
        "326c0cb0720942cb",
        "f52d99e912aadfec",
        "a2ec471bfd941009",
        "87ae70fdef39260d",
        "020204fb56f3f8c9",
        "c6d2fb41297c6def"
      ],
      "date": 1694447111781
    },
    {
      "item": {
        "type": "factory",
        "id": "ecc727efb7dd5bca"
      },
      "id": "ecc727efb7dd5bca",
      "type": "add",
      "after": "c6d2fb41297c6def",
      "date": 1694451391738
    },
    {
      "type": "edit",
      "id": "ecc727efb7dd5bca",
      "item": {
        "type": "paragraph",
        "id": "ecc727efb7dd5bca",
        "text": "Introduction to the elm/parser package"
      },
      "date": 1694451398653
    },
    {
      "type": "edit",
      "id": "ecc727efb7dd5bca",
      "item": {
        "type": "paragraph",
        "id": "ecc727efb7dd5bca",
        "text": "Introduction to the elm/parser package [https://korban.net/posts/elm/2018-09-07-introduction-elm-parser/ page]"
      },
      "date": 1694451406727
    },
    {
      "item": {
        "type": "factory",
        "id": "fbf00f9307b1d448"
      },
      "id": "fbf00f9307b1d448",
      "type": "add",
      "after": "ecc727efb7dd5bca",
      "date": 1694451758398
    },
    {
      "type": "edit",
      "id": "fbf00f9307b1d448",
      "item": {
        "type": "code",
        "id": "fbf00f9307b1d448",
        "text": "wikiLinkParser : Parser WikiLink\nwikiLinkParser =\n    succeed WikiLink\n        |. symbol \"[[\"\n        |= (getChompedString <| chompWhile (\\c -> c /= ']'))\n        |. symbol \"]]\"\n\n"
      },
      "date": 1694451760087
    },
    {
      "type": "edit",
      "id": "ecc727efb7dd5bca",
      "item": {
        "type": "paragraph",
        "id": "ecc727efb7dd5bca",
        "text": "Introduction to the elm/parser package [https://korban.net/posts/elm/2018-09-07-introduction-elm-parser/ page], [https://ellie-app.com/3fjB8wvN7L9a1 ellie]"
      },
      "date": 1694451781111
    },
    {
      "type": "edit",
      "id": "103ea0612c7085a7",
      "item": {
        "type": "code",
        "id": "103ea0612c7085a7",
        "text": "import Regex exposing (..)\n\n-- Define a regular expression pattern\nwikiLinkPattern : String\nwikiLinkPattern =\n    \"\\[\\[([^\\]\\[:]+)\\]\\]\"\n\n-- Define a function to extract matches\nextractWikiLinks : String -> List String\nextractWikiLinks input =\n    let\n        regex = Regex.fromRegex wikiLinkPattern\n        matches = Regex.find regex input\n    in\n        List.map\n            (\\match ->\n                case match of\n                    Just [text] -> text\n                    _ -> \"\"\n            )\n            matches\n"
      },
      "date": 1694451916512
    },
    {
      "type": "edit",
      "id": "103ea0612c7085a7",
      "item": {
        "type": "code",
        "id": "103ea0612c7085a7",
        "text": "import Regex exposing (..)\n\n-- Define a regular expression pattern\nwikiLinkPattern : String\nwikiLinkPattern =\n    \"/\\[\\[([^\\]\\[:]+)\\]\\]/gm\"\n\n-- Define a function to extract matches\nextractWikiLinks : String -> List String\nextractWikiLinks input =\n    let\n        regex = Regex.fromRegex wikiLinkPattern\n        matches = Regex.find regex input\n    in\n        List.map\n            (\\match ->\n                case match of\n                    Just [text] -> text\n                    _ -> \"\"\n            )\n            matches\n"
      },
      "date": 1694452434723
    },
    {
      "type": "edit",
      "id": "103ea0612c7085a7",
      "item": {
        "type": "code",
        "id": "103ea0612c7085a7",
        "text": "import Regex exposing (..)\n\n-- Define a regular expression pattern\nwikiLinkPattern : String\nwikiLinkPattern =\n    \"/\\[\\[([^\\]\\[:]+)\\]\\]/gm\"\n\n-- Define a function to extract matches\nextractWikiLinks : String -> List String\nextractWikiLinks input =\n    let\n        regex = Regex.fromString wikiLinkPattern\n        matches = Regex.find regex input\n    in\n        List.map\n            (\\match ->\n                case match of\n                    Just [text] -> text\n                    _ -> \"\"\n            )\n            matches\n"
      },
      "date": 1694453254637
    },
    {
      "type": "edit",
      "id": "1fa1302f62b51340",
      "item": {
        "type": "paragraph",
        "id": "1fa1302f62b51340",
        "text": "You can use regular expressions in Elm [https://package.elm-lang.org/packages/elm/regex/latest/ page] to match and extract wiki-style links. [https://package.elm-lang.org/packages/elm/regex/latest/Regex#fromString page]"
      },
      "date": 1694453435835
    },
    {
      "type": "edit",
      "id": "1dea892700f41cba",
      "item": {
        "type": "markdown",
        "id": "1dea892700f41cba",
        "text": "# Regex for Wiki-Style Links"
      },
      "date": 1694453584639
    },
    {
      "item": {
        "type": "factory",
        "id": "ecdc6ae3068677c8"
      },
      "id": "ecdc6ae3068677c8",
      "type": "add",
      "after": "fbf00f9307b1d448",
      "date": 1694457305232
    },
    {
      "type": "edit",
      "id": "ecdc6ae3068677c8",
      "item": {
        "type": "paragraph",
        "id": "ecdc6ae3068677c8",
        "text": "⇒ [[elm-markdown]]"
      },
      "date": 1694457312766
    },
    {
      "item": {
        "type": "factory",
        "id": "3618c141dbd9cb72"
      },
      "id": "3618c141dbd9cb72",
      "type": "add",
      "after": "ecdc6ae3068677c8",
      "date": 1711516708942
    },
    {
      "type": "edit",
      "id": "3618c141dbd9cb72",
      "item": {
        "type": "assets",
        "id": "3618c141dbd9cb72",
        "text": "pages/Vite-Elm-Dojo"
      },
      "date": 1711516723502
    },
    {
      "type": "edit",
      "id": "3618c141dbd9cb72",
      "item": {
        "type": "assets",
        "id": "3618c141dbd9cb72",
        "text": "pages/vite-elm-dojo"
      },
      "date": 1711516733315
    },
    {
      "item": {
        "type": "factory",
        "id": "9613c55af4166d4a"
      },
      "id": "9613c55af4166d4a",
      "type": "add",
      "after": "3618c141dbd9cb72",
      "date": 1711516745714
    },
    {
      "type": "edit",
      "id": "9613c55af4166d4a",
      "item": {
        "type": "frame",
        "id": "9613c55af4166d4a",
        "text": "http://localhost:3000/assets/pages/vite-elm-dojo/index.html"
      },
      "date": 1711516748268
    },
    {
      "item": {
        "type": "factory",
        "id": "ac7e41cd794372f0"
      },
      "id": "ac7e41cd794372f0",
      "type": "add",
      "after": "9613c55af4166d4a",
      "date": 1711517080774
    },
    {
      "type": "edit",
      "id": "ac7e41cd794372f0",
      "item": {
        "type": "assets",
        "id": "ac7e41cd794372f0",
        "text": "pages/vite-elm-dojo/dist\n"
      },
      "date": 1711517087507
    },
    {
      "type": "edit",
      "id": "9613c55af4166d4a",
      "item": {
        "type": "frame",
        "id": "9613c55af4166d4a",
        "text": "http://localhost:3000/assets/pages/vite-elm-dojo/dist/index.html"
      },
      "date": 1711517096611
    }
  ]
}