{
  "title": "Relation With the Model",
  "story": [
    {
      "type": "paragraph",
      "id": "12f356ccce3c5992",
      "text": "Although a language engineer may freely choose his/her own concrete syntax graph, synchronization between concrete syntax graph and representation is not completely automatable: mapping needs to be explicit. We propose here a mechanism to update concrete syntax graph (in model repository) according to changes in the SVG document (as an XML tree)."
    },
    {
      "type": "markdown",
      "id": "b4942e894d079d1e",
      "text": "As explained in previous section, changes that may occur in the SVG scene are made possible by declaring interfaces chosen in a predefined library. The interfaces state what are the behavioral capabilities of their holding XML node, e.g. an SVG rectangle that is able to move because the node declares the `Translatable` interface. While some changes in the scene don’t alter the concrete syntax graph (e.g. changing the route of a path representing a transition), some others need to be reflected (e.g. moving a `Containable` SVG rectangle that represents a `SimpleState` into a `Container` SVG rectangle that represents the contents area of a `CompositeState`)."
    },
    {
      "type": "paragraph",
      "id": "4d346abb579bdfda",
      "text": "To solve problem of specifying this representation-to-concrete syntax graph data propagation, we propose an event-based approach in which reactions to events will impact the concrete syntax graph as a model. Such reactions may be written in a specialized language as KerMeta, Xion, EMF or JMI Java. To avoid confusion between the language under specification and the concrete syntax manipulation language, we will further refer to this latter language as the reaction language."
    },
    {
      "type": "paragraph",
      "id": "61004dfb1f8fc67d",
      "text": "To define a reaction, different information need to be provided. First, reaction needs to be given an access to the model repository in which concrete syntax graph resides. We detail in section 5.4.3.1 how a repository can be handled. A reaction also needs to know what is the display object represented by the template instance. For instance, if a name is changed in a state representation, the corresponding reaction must be sure to alter the name of the correct state. To do so, we introduce in section 5.4.3.2 a mechanism of high-level variables (referring to elements of the concrete syntax) that can be maintained in template instances. We identify in section 5.4.3.3 what are the possible events that may define a reaction according to the DOM components that are defined in section 5.4.2.2. The representation also needs to be updated when the concrete syntax graph is changed, be it by as a side effect of a reaction or by another mean. We detail a mechanism to listen to concrete syntax graph changes in section 5.4.3.4."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Relation With the Model",
        "story": []
      },
      "date": 1652308240598
    },
    {
      "item": {
        "type": "factory",
        "id": "12f356ccce3c5992"
      },
      "id": "12f356ccce3c5992",
      "type": "add",
      "date": 1652308246880
    },
    {
      "type": "edit",
      "id": "12f356ccce3c5992",
      "item": {
        "type": "paragraph",
        "id": "12f356ccce3c5992",
        "text": "Although a language engineer may freely choose his/her own concrete syntax graph, synchronization between concrete syntax graph and representation is not completely automatable: mapping needs to be explicit. We propose here a mechanism to update concrete syntax graph (in model repository) according to changes in the SVG document (as an XML tree)."
      },
      "date": 1652308248203
    },
    {
      "item": {
        "type": "factory",
        "id": "b4942e894d079d1e"
      },
      "id": "b4942e894d079d1e",
      "type": "add",
      "after": "12f356ccce3c5992",
      "date": 1652308255881
    },
    {
      "type": "edit",
      "id": "b4942e894d079d1e",
      "item": {
        "type": "paragraph",
        "id": "b4942e894d079d1e",
        "text": "As explained in previous section, changes that may occur in the SVG scene are made possible by declaring interfaces chosen in a predefined library. The interfaces state what are the behavioral capabilities of their holding XML node, e.g. an SVG rectangle that is able to move because the node declares the `Translatable` interface. While some changes in the"
      },
      "date": 1652308268072
    },
    {
      "type": "edit",
      "id": "b4942e894d079d1e",
      "item": {
        "type": "markdown",
        "id": "b4942e894d079d1e",
        "text": "As explained in previous section, changes that may occur in the SVG scene are made possible by declaring interfaces chosen in a predefined library. The interfaces state what are the behavioral capabilities of their holding XML node, e.g. an SVG rectangle that is able to move because the node declares the `Translatable` interface. While some changes in the"
      },
      "date": 1652308269268
    },
    {
      "type": "edit",
      "id": "b4942e894d079d1e",
      "item": {
        "type": "markdown",
        "id": "b4942e894d079d1e",
        "text": "As explained in previous section, changes that may occur in the SVG scene are made possible by declaring interfaces chosen in a predefined library. The interfaces state what are the behavioral capabilities of their holding XML node, e.g. an SVG rectangle that is able to move because the node declares the `Translatable` interface. While some changes in the scene don’t alter the concrete syntax graph (e.g. changing the route of a path representing a transition), some others need to be reflected (e.g. moving a `Containable` SVG rectangle that represents a `SimpleState` into a `Container` SVG rectangle that represents the contents area of a `CompositeState`s)."
      },
      "date": 1652308322409
    },
    {
      "type": "edit",
      "id": "b4942e894d079d1e",
      "item": {
        "type": "markdown",
        "id": "b4942e894d079d1e",
        "text": "As explained in previous section, changes that may occur in the SVG scene are made possible by declaring interfaces chosen in a predefined library. The interfaces state what are the behavioral capabilities of their holding XML node, e.g. an SVG rectangle that is able to move because the node declares the `Translatable` interface. While some changes in the scene don’t alter the concrete syntax graph (e.g. changing the route of a path representing a transition), some others need to be reflected (e.g. moving a `Containable` SVG rectangle that represents a `SimpleState` into a `Container` SVG rectangle that represents the contents area of a `CompositeState`)."
      },
      "date": 1652308336517
    },
    {
      "item": {
        "type": "factory",
        "id": "4d346abb579bdfda"
      },
      "id": "4d346abb579bdfda",
      "type": "add",
      "after": "b4942e894d079d1e",
      "date": 1652308356260
    },
    {
      "type": "edit",
      "id": "4d346abb579bdfda",
      "item": {
        "type": "paragraph",
        "id": "4d346abb579bdfda",
        "text": "To solve problem of specifying this representation-to-concrete syntax graph data propagation, we propose an event-based approach in which reactions to events will impact the concrete syntax graph as a model. Such reactions may be written in a specialized language as KerMeta, Xion, EMF or JMI Java. To avoid confusion between the language under specification and the concrete syntax manipulation language, we will further refer to this latter language as the reaction language."
      },
      "date": 1652308357544
    },
    {
      "item": {
        "type": "factory",
        "id": "61004dfb1f8fc67d"
      },
      "id": "61004dfb1f8fc67d",
      "type": "add",
      "after": "4d346abb579bdfda",
      "date": 1652308390548
    },
    {
      "type": "edit",
      "id": "61004dfb1f8fc67d",
      "item": {
        "type": "paragraph",
        "id": "61004dfb1f8fc67d",
        "text": "To define a reaction, different information need to be provided. First, reaction needs to be given an access to the model repository in which concrete syntax graph resides. We detail in section 5.4.3.1 how a repository can be handled. A reaction also needs to know what is the display object represented by the template instance. For instance, if a name is changed in a state representation, the corresponding reaction must be sure to alter the name of the correct state. To do so, we introduce in section 5.4.3.2 a mechanism of high-level variables (referring to elements of the concrete syntax) that can be maintained in template instances. We identify in section 5.4.3.3 what are the possible events that may define a reaction according to the DOM components that are defined in section 5.4.2.2. The representation also needs to be updated when the concrete syntax graph is changed, be it by as a side effect of a reaction or by another mean. We detail a mechanism to listen to concrete syntax graph changes in section 5.4.3.4."
      },
      "date": 1652308391882
    }
  ]
}