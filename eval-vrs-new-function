{
  "title": "eval vrs. new Function",
  "story": [
    {
      "type": "paragraph",
      "id": "6fddf55919305103",
      "text": "It's not often a good idea to evaluate text as code, but sometimes it is necessary. There are two ways to do it in JavaScript, eval and new Function. They are subtly different. Neither are safe, but new Function has less possible side effects."
    },
    {
      "type": "code",
      "id": "42d94314485e4b6b",
      "text": "a = 10\n\nconsole.log(\n  bar('a + 2')\n) // 3\n\nfunction bar (txt) {\n  var a = 1;\n  return eval(txt)\n}"
    },
    {
      "type": "paragraph",
      "id": "0891d21770340a10",
      "text": "At first glance it's hard to tell what is going to happen when you eval the txt. The 'a' is surprisingly the scope inside the function where the eval happens, not the global a outside. It exposes the internal state of the function to the person passing in the string, sometimes surprisingly to both the caller and the callee."
    },
    {
      "type": "code",
      "id": "0e9bad8112b4e98f",
      "text": "a = 10\n\nconsole.log(\n  bar('a + 2')\n) // 12\n\nfunction bar (txt) {\n  var a = 1;\n  return new Function('return ' + txt)()\n}"
    },
    {
      "type": "paragraph",
      "id": "707fefa8f168597a",
      "text": "Ahh, there we go, our new function doesn't see the internal variable, only the global value! Much more predictable behavior than evaling the same text."
    },
    {
      "type": "paragraph",
      "id": "efbbfdb7f66e2e54",
      "text": "Now, remember don't use either if you can possibly avoid it. But, if you really need to, prefer new Function to eval."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "eval vrs. new Function",
        "story": []
      },
      "date": 1432259525089
    },
    {
      "item": {
        "type": "factory",
        "id": "6fddf55919305103"
      },
      "id": "6fddf55919305103",
      "type": "add",
      "date": 1432259527037
    },
    {
      "type": "edit",
      "id": "6fddf55919305103",
      "item": {
        "type": "paragraph",
        "id": "6fddf55919305103",
        "text": "It's not often a good idea to evaluate text as code, but sometimes it is necessary. There are two ways to do it in JavaScript, eval and new Function. They are subtly different. Neither are safe, but new Function has less possible side effects."
      },
      "date": 1432260424896
    },
    {
      "item": {
        "type": "factory",
        "id": "42d94314485e4b6b"
      },
      "id": "42d94314485e4b6b",
      "type": "add",
      "after": "6fddf55919305103",
      "date": 1432260822578
    },
    {
      "type": "edit",
      "id": "42d94314485e4b6b",
      "item": {
        "type": "code",
        "id": "42d94314485e4b6b",
        "text": "console.log(\n  bar('a + 2')\n)\n\nfunction bar (txt) {\n  var a = 2;\n  return eval(txt)\n}"
      },
      "date": 1432260829320
    },
    {
      "item": {
        "type": "factory",
        "id": "0891d21770340a10"
      },
      "id": "0891d21770340a10",
      "type": "add",
      "after": "42d94314485e4b6b",
      "date": 1432260843032
    },
    {
      "type": "edit",
      "id": "0891d21770340a10",
      "item": {
        "type": "paragraph",
        "id": "0891d21770340a10",
        "text": "Now this looks like it works like you expect it to at first glance."
      },
      "date": 1432260890036
    },
    {
      "type": "edit",
      "id": "42d94314485e4b6b",
      "item": {
        "type": "code",
        "id": "42d94314485e4b6b",
        "text": "var a = 10\n\nconsole.log(\n  bar('a + 2')\n)\n\nfunction bar (txt) {\n  var a = 1;\n  return eval(txt)\n}"
      },
      "date": 1432260945021
    },
    {
      "type": "edit",
      "id": "42d94314485e4b6b",
      "item": {
        "type": "code",
        "id": "42d94314485e4b6b",
        "text": "var a = 10\n\nconsole.log(\n  bar('a + 2')\n) // 3\n\nfunction bar (txt) {\n  var a = 1;\n  return eval(txt)\n}"
      },
      "date": 1432260973400
    },
    {
      "type": "edit",
      "id": "0891d21770340a10",
      "item": {
        "type": "paragraph",
        "id": "0891d21770340a10",
        "text": "At first glance it's hard to tell what is going to happen when you eval the txt. The 'a' is surprisingly the scope inside the function where the eval happens, not outside where we declare the string."
      },
      "date": 1432261409162
    },
    {
      "type": "edit",
      "id": "42d94314485e4b6b",
      "item": {
        "type": "code",
        "id": "42d94314485e4b6b",
        "text": "a = 10\n\nconsole.log(\n  bar('a + 2')\n) // 3\n\nfunction bar (txt) {\n  var a = 1;\n  return eval(txt)\n}"
      },
      "date": 1432261427103
    },
    {
      "type": "edit",
      "id": "0891d21770340a10",
      "item": {
        "type": "paragraph",
        "id": "0891d21770340a10",
        "text": "At first glance it's hard to tell what is going to happen when you eval the txt. The 'a' is surprisingly the scope inside the function where the eval happens, not the global a."
      },
      "date": 1432261444123
    },
    {
      "item": {
        "type": "factory",
        "id": "0e9bad8112b4e98f"
      },
      "id": "0e9bad8112b4e98f",
      "type": "add",
      "after": "0891d21770340a10",
      "date": 1432261655233
    },
    {
      "type": "edit",
      "id": "0e9bad8112b4e98f",
      "item": {
        "type": "code",
        "id": "0e9bad8112b4e98f",
        "text": "a = 10\n\nconsole.log(\n  bar('a + 2')\n)\n\nfunction bar (txt) {\n  var a = 1;\n  return new Function('return ' + txt)()\n}"
      },
      "date": 1432261662772
    },
    {
      "type": "edit",
      "id": "0e9bad8112b4e98f",
      "item": {
        "type": "code",
        "id": "0e9bad8112b4e98f",
        "text": "a = 10\n\nconsole.log(\n  bar('a + 2')\n) // 12\n\nfunction bar (txt) {\n  var a = 1;\n  return new Function('return ' + txt)()\n}"
      },
      "date": 1432261675238
    },
    {
      "type": "edit",
      "id": "0891d21770340a10",
      "item": {
        "type": "paragraph",
        "id": "0891d21770340a10",
        "text": "At first glance it's hard to tell what is going to happen when you eval the txt. The 'a' is surprisingly the scope inside the function where the eval happens, not the global a outside. It exposes the internal state of the function to the person passing in the string, sometimes surprisingly to both the caller and the callee."
      },
      "date": 1432261823592
    },
    {
      "item": {
        "type": "factory",
        "id": "707fefa8f168597a"
      },
      "id": "707fefa8f168597a",
      "type": "add",
      "after": "0e9bad8112b4e98f",
      "date": 1432261848150
    },
    {
      "type": "edit",
      "id": "707fefa8f168597a",
      "item": {
        "type": "paragraph",
        "id": "707fefa8f168597a",
        "text": "Ahh, there we go, our new function doesn't see the internal variable, only the global value! Much more predictable behavior than evaling the same text."
      },
      "date": 1432262022189
    },
    {
      "item": {
        "type": "factory",
        "id": "efbbfdb7f66e2e54"
      },
      "id": "efbbfdb7f66e2e54",
      "type": "add",
      "after": "707fefa8f168597a",
      "date": 1432262032281
    },
    {
      "type": "edit",
      "id": "efbbfdb7f66e2e54",
      "item": {
        "type": "paragraph",
        "id": "efbbfdb7f66e2e54",
        "text": "Now, remember don't use either if you can possibly avoid it. But, if you really need to, prefer new Function to eval."
      },
      "date": 1432262177541
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1652868536504
    }
  ]
}