{
  "title": "CmdMouseCommandActivation",
  "story": [
    {
      "type": "markdown",
      "id": "b5a345705828c88e",
      "text": "My subclasses represent particular kind of [[Mouse]] events which should activate annotated commands.\nFor example it can be mouse click or double click.\n\nMy instances are configured with type of mouse button and keyboard modifier which are expected to be used to activate commands.\n\nBy default the left click is expected:\n\n\tCmdClickActivation for: aCommandUser.\n\nWith extra parameter you can configure modifier: \n\n\tCmdClickActivation with: KMModifier shift for: aCommandUser.\n\t\nTo specify mouse button use following messages: \n\n\t(CmdClickActivation for: aCommandUser) beBlueButton.\n\t(CmdClickActivation for: aCommandUser) beYellowButton.\n\t(CmdClickActivation for: aCommandUser) beRedButton\n\nAnd there is special constructor for yellow button which is usefull for various context menu activations:\n\n\tCmdClickActivation byYellowButtonFor: aCommandUser.\n\tCmdClickActivation byYellowButtonWith: KMModifier shift for: aCommandUser\n\nMy instances are active when they are match last mouse event:\n\n\taMouseActivation isActiveInContext: aToolContext \n\t\nI extend this method to check that last mouse event matches expected button and modifier. \n\t\t\nThere are few methods how to enable mouse commands in the morphs: \n\n\taMorph enableMouseCommands: CmdClickActivation withContextFrom: aToolContext.\n\nIt enables click action to execute commands in given aMorph instance.\n\n\taMorph enableAllMouseCommandsFrom: aToolContext.    \t \n\t\t\nIt enables all kind of mouse events to execute commands in given aMorph instance.\n\nInternal Representation and Key Implementation Points.\n\n    Instance Variables\n\tkeyboardModifier:\t\t<KMModifier>\n\twhichButton:\t\t<Integer>"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "CmdMouseCommandActivation",
        "story": []
      },
      "date": 1655486545571
    },
    {
      "item": {
        "type": "factory",
        "id": "b5a345705828c88e"
      },
      "id": "b5a345705828c88e",
      "type": "add",
      "date": 1655486549742
    },
    {
      "type": "edit",
      "id": "b5a345705828c88e",
      "item": {
        "type": "markdown",
        "id": "b5a345705828c88e",
        "text": "My subclasses represent particular kind of mouse events which should activate annotated commands.\nFor example it can be mouse click or double click.\n\nMy instances are configured with type of mouse button and keyboard modifier which are expected to be used to activate commands.\n\nBy default the left click is expected:\n\n\tCmdClickActivation for: aCommandUser.\n\nWith extra parameter you can configure modifier: \n\n\tCmdClickActivation with: KMModifier shift for: aCommandUser.\n\t\nTo specify mouse button use following messages: \n\n\t(CmdClickActivation for: aCommandUser) beBlueButton.\n\t(CmdClickActivation for: aCommandUser) beYellowButton.\n\t(CmdClickActivation for: aCommandUser) beRedButton\n\nAnd there is special constructor for yellow button which is usefull for various context menu activations:\n\n\tCmdClickActivation byYellowButtonFor: aCommandUser.\n\tCmdClickActivation byYellowButtonWith: KMModifier shift for: aCommandUser\n\nMy instances are active when they are match last mouse event:\n\n\taMouseActivation isActiveInContext: aToolContext \n\t\nI extend this method to check that last mouse event matches expected button and modifier. \n\t\t\nThere are few methods how to enable mouse commands in the morphs: \n\n\taMorph enableMouseCommands: CmdClickActivation withContextFrom: aToolContext.\n\nIt enables click action to execute commands in given aMorph instance.\n\n\taMorph enableAllMouseCommandsFrom: aToolContext.    \t \n\t\t\nIt enables all kind of mouse events to execute commands in given aMorph instance.\n\nInternal Representation and Key Implementation Points.\n\n    Instance Variables\n\tkeyboardModifier:\t\t<KMModifier>\n\twhichButton:\t\t<Integer>"
      },
      "date": 1655486554383
    },
    {
      "type": "edit",
      "id": "b5a345705828c88e",
      "item": {
        "type": "markdown",
        "id": "b5a345705828c88e",
        "text": "My subclasses represent particular kind of [[Mouse]] events which should activate annotated commands.\nFor example it can be mouse click or double click.\n\nMy instances are configured with type of mouse button and keyboard modifier which are expected to be used to activate commands.\n\nBy default the left click is expected:\n\n\tCmdClickActivation for: aCommandUser.\n\nWith extra parameter you can configure modifier: \n\n\tCmdClickActivation with: KMModifier shift for: aCommandUser.\n\t\nTo specify mouse button use following messages: \n\n\t(CmdClickActivation for: aCommandUser) beBlueButton.\n\t(CmdClickActivation for: aCommandUser) beYellowButton.\n\t(CmdClickActivation for: aCommandUser) beRedButton\n\nAnd there is special constructor for yellow button which is usefull for various context menu activations:\n\n\tCmdClickActivation byYellowButtonFor: aCommandUser.\n\tCmdClickActivation byYellowButtonWith: KMModifier shift for: aCommandUser\n\nMy instances are active when they are match last mouse event:\n\n\taMouseActivation isActiveInContext: aToolContext \n\t\nI extend this method to check that last mouse event matches expected button and modifier. \n\t\t\nThere are few methods how to enable mouse commands in the morphs: \n\n\taMorph enableMouseCommands: CmdClickActivation withContextFrom: aToolContext.\n\nIt enables click action to execute commands in given aMorph instance.\n\n\taMorph enableAllMouseCommandsFrom: aToolContext.    \t \n\t\t\nIt enables all kind of mouse events to execute commands in given aMorph instance.\n\nInternal Representation and Key Implementation Points.\n\n    Instance Variables\n\tkeyboardModifier:\t\t<KMModifier>\n\twhichButton:\t\t<Integer>"
      },
      "date": 1655486570083
    }
  ]
}