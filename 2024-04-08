{
  "title": "2024-04-08",
  "story": [
    {
      "type": "paragraph",
      "id": "d6123b8533878b99",
      "text": "⇐ [[Paragraph Recommendation Viewer]]. [http://localhost:3000/view/welcome-visitors/view/2024-04-08/view/addnode/view/paragraph-recommendation-viewer/view/lineup-graph/view/parse-page-paragraphs/view/speed-bot lineup]"
    },
    {
      "type": "paragraph",
      "id": "d39f51a7a35b8043",
      "text": "[[addNode]]"
    },
    {
      "type": "paragraph",
      "id": "0b9c107d83b506f5",
      "text": "How do I check the type of a node in cypher? [https://stackoverflow.com/questions/44835575/how-do-i-check-the-type-of-a-node-in-cypher#44835775 stackoverflow]"
    },
    {
      "type": "paragraph",
      "id": "4bfeb30febf42519",
      "text": "Ward (via personal communication, matrix) could never figure out why they designed the language to allow multiple labels as it turned every type check into an array search. I spoke with Neo4j people who had been with the company forever who couldn’t explain it. Best I could figure is that some proof somewhere talked about marking nodes with various colors or something so early math envy cursed downstream programmers ever since. I recommend adding a property “labels” using an array or Set or Bag for those algorithms if no outside storage was to be used for some inexplicable reason."
    },
    {
      "type": "paragraph",
      "id": "dfece2e554100c75",
      "text": "We are talking about limitations in the query language not the javascript Graph class which is very permissive. Of course when we serialize as json then it’s restrictions apply."
    },
    {
      "type": "paragraph",
      "id": "7d5f511136d3eb11",
      "text": "Ward is not opposed to changing the query parser but there would need to be some argument that the language was still deterministic."
    },
    {
      "type": "paragraph",
      "id": "5a552d0f61dcc953",
      "text": "⇒ [[Basic Properties of the Property Graph Model]]"
    },
    {
      "type": "reference",
      "id": "a90a222901793cff",
      "site": "ddd.fed.wiki.org",
      "slug": "published-language",
      "title": "Published Language",
      "text": "The translation between the models of two [[bounded context]] requires a common language."
    },
    {
      "type": "paragraph",
      "id": "1926027095810219",
      "text": "How do you focus on your central problem and keep from drowning in a sea of side issues?"
    },
    {
      "type": "pagefold",
      "id": "dcd7dde9b9db4309",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "ec7332b0fbc19dad",
      "text": "xattr – display and manipulate extended attributes"
    },
    {
      "type": "code",
      "id": "a062bc3221e777b3",
      "text": "xattr -rc *\n"
    },
    {
      "type": "pagefold",
      "id": "23f86062bc8c1ebe",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "a7afba25fbc6ecd6",
      "text": "Ward\nThe Neo history: Consulting company working on an inventory system for a large customer develops some graph abstractions in Java. They then open source the abstractions and attract a community. This takes on a life of its own and Neo for Java becomes Neo4j. This was then hooked up to some open source db so that it could run on larger models. Then a volunteer cooked up the query language because he liked functional programming and had some \"combinator\" method for building parsers. The community is all on board and the phrase \"graphs are everywhere\" is born. The Neo4j company funds community members to help other succeed. This is about the time I get involved based on suggestions from my own community."
    },
    {
      "type": "paragraph",
      "id": "ff4ba342168f7c93",
      "text": "Ward\nThis is a good summary of my experience with Neo4j. New Relic agreed with open sourcing the UI component, a graph viewer. I wrote the last three page of this lineup for some other engineers trying to duplicate the New Relic El Dorado experience. Some of this writing was not completed. I should get back to this before I forget. My colleagues had already given up as what I had already described seemed too big a project.\n[http://ddd.ward.wiki.org/view/welcome-visitors/view/about-the-el-dorado-project/view/sharing-our-work/view/el-dorado-ui/view/database-build/view/tips-for-modeling/view/save-and-revise-queries lineup]"
    },
    {
      "type": "paragraph",
      "id": "3f4ba4b59748cb36",
      "text": "The Graph class and the Solo plugin promise a method that is easier to get started and might have just as much upside as El Dorado. I am trying to duplicate your success with graphs carried between pages using events. This is showing some weakness in wiki's methods for which there are short-term workarounds and maybe long-term architectural improvements in how push and pull work together in a lineup."
    },
    {
      "type": "paragraph",
      "id": "a1e7512d73476e22",
      "text": "Ward: \nI love the way you grow the SpeedBot graphs. I hope we can make a version where clicking on a bot generated node in the Solo plugin will signal to the bot to make and publish another \"aspect\" of the structure you are exploring together."
    },
    {
      "type": "pagefold",
      "id": "09208df749d19711",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "a82eaf3a2a3ff40d",
      "text": "What are the advantages of surprises? ([[r.Vergessen.Esposito]], 78)"
    },
    {
      "type": "paragraph",
      "id": "6675840bc5a80af6",
      "text": "Doch welcher Nutzen kann aus der Erzeugung von Überraschung gezogen werden? Man muss sich vergegenwärtigen, dass die aus der permanenten Erzeugung von Überraschungen gewonnenen Informationen nicht mit Wahrheit gleichzusetzen sind. Während eine Nachricht auch dann informativ sein kann, wenn sie unwahr ist, stellt eine wiederholte Wahrheit keine Information mehr dar. Eine Gesellschaft, deren Orientierungskriterien auf Information beruhen, bedarf noch keiner Wahrheitskonzeption, die der modernen, auf Rationalität bauenden Konzeption gleichzusetzen wäre102 (auch weil eine solche für eine zweidimensionale Semantik noch zu abstrakt ist). Es genügt schon, wenn eine solche Gesellschaft die Fähigkeit ausbildet, Sinn hervorzubringen und dafür wird durch die Produktion von Überraschungen ständig gesorgt. Die divinatorischen Praktiken interpretieren die Oberflächenlineaturen als Zeichen eines verborgenen Sinns, der immer wieder hervorgeholt werden kann, ohne dabei jedoch die Annahme eines unbekannten Mysteriums zu erschüttern. Die Weissagungen der Priester und die Orakelsprüche offenbaren keine Wahrheiten, sondern bieten lediglich eine Handlungsorientierung."
    },
    {
      "type": "paragraph",
      "id": "9d5762ef400f0819",
      "text": "But what benefits can be gained from creating surprises? It should be borne in mind that the information gained through the constant generation of surprises cannot be equated with the truth. While a message can be informative even if it is untrue, a repeated truth no longer constitutes information. A society whose orientation criteria are based on information does not yet need a concept of truth that could be equated with the modern concept based on rationality (also because such a concept is still too abstract for two-dimensional semantics). For such a society, it is sufficient to develop the ability to produce meaning, and this is constantly guaranteed by the production of surprises. The divinatory practices interpret the superficial lineatures as signs of a hidden meaning that can be brought out again and again, but without shaking the assumption of an unknown mystery. The divinations of the priests and the oracular sayings do not reveal truths, but merely offer instructions for action."
    }
  ],
  "journal": [
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1712593961111
    },
    {
      "type": "edit",
      "id": "d39f51a7a35b8043",
      "item": {
        "type": "paragraph",
        "id": "d39f51a7a35b8043",
        "text": "[[addNode]]"
      },
      "date": 1712592700890
    },
    {
      "type": "edit",
      "id": "d6123b8533878b99",
      "item": {
        "type": "paragraph",
        "id": "d6123b8533878b99",
        "text": "⇐ [[Paragraph Recommendation Viewer]]. [http://localhost:3000/view/welcome-visitors/view/2024-04-08/view/addnode/view/paragraph-recommendation-viewer/view/lineup-graph/view/parse-page-paragraphs/view/speed-bot lineup]"
      },
      "date": 1712592476164
    },
    {
      "type": "edit",
      "id": "d6123b8533878b99",
      "item": {
        "type": "paragraph",
        "id": "d6123b8533878b99",
        "text": "⇐ [[Paragraph Recommendation Viewer]]. [http://localhost:3000/view/welcome-visitors/view/2024-04-08/view/addnote/view/paragraph-recommendation-viewer/view/lineup-graph/view/parse-page-paragraphs/view/speed-bot lineup]"
      },
      "date": 1712592409230
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1712592403345
    },
    {
      "id": "f71adf259db7a9a6",
      "type": "remove",
      "removedTo": {
        "page": "Basic Properties of the Property Graph Model"
      },
      "date": 1712588305507
    },
    {
      "type": "add",
      "id": "5a552d0f61dcc953",
      "item": {
        "type": "paragraph",
        "id": "5a552d0f61dcc953",
        "text": "⇒ [[Basic Properties of the Property Graph Model]]"
      },
      "after": "f71adf259db7a9a6",
      "date": 1712587757389
    },
    {
      "type": "edit",
      "id": "f71adf259db7a9a6",
      "item": {
        "type": "paragraph",
        "id": "f71adf259db7a9a6",
        "text": "GREEN, Alastair, GUAGLIARDO, Paolo, LIBKIN, Leonid, LINDAAKER, Tobias, MARSAULT, Victor, PLANTIKOW, Stefan, SCHUSTER, Martin, SELMER, Petra and VOIGT, Hannes, 2019. Updating graph databases with Cypher. Proceedings of the VLDB Endowment. August 2019. Vol. 12, no. 12, p. 2242–2254. DOI 10.14778/3352063.3352139. \nThe paper describes the present and the future of graph updates in Cypher, the language of the Neo4j property graph database and several other products. Update features include those with clear analogs in relational databases, as well as those that do not correspond to any relational operators. Moreover, unlike SQL, Cypher updates can be arbitrarily intertwined with querying clauses. After presenting the current state of update features, we point out their shortcomings, most notably violations of atomicity and non-deterministic behavior of updates. These have not been previously known in the Cypher community. We then describe the industry-academia collaboration on designing a revised set of Cypher update operations. Based on discovered shortcomings of update features, a number of possible solutions were devised. They were presented to key Cypher users, who were given the opportunity to comment on how update features are used in real life, and on their preferences for proposed fixes. As the result of the consultation, a new set of update operations for Cypher were designed. Those led to a streamlined syntax, and eliminated the unexpected and problematic behavior that original Cypher updates exhibited."
      },
      "date": 1712587748494
    },
    {
      "type": "add",
      "id": "f71adf259db7a9a6",
      "item": {
        "type": "paragraph",
        "id": "f71adf259db7a9a6",
        "text": "\nGREEN, Alastair, GUAGLIARDO, Paolo, LIBKIN, Leonid, LINDAAKER, Tobias, MARSAULT, Victor, PLANTIKOW, Stefan, SCHUSTER, Martin, SELMER, Petra and VOIGT, Hannes, 2019. Updating graph databases with Cypher. Proceedings of the VLDB Endowment. August 2019. Vol. 12, no. 12, p. 2242–2254. DOI 10.14778/3352063.3352139. \nThe paper describes the present and the future of graph updates in Cypher, the language of the Neo4j property graph database and several other products. Update features include those with clear analogs in relational databases, as well as those that do not correspond to any relational operators. Moreover, unlike SQL, Cypher updates can be arbitrarily intertwined with querying clauses. After presenting the current state of update features, we point out their shortcomings, most notably violations of atomicity and non-deterministic behavior of updates. These have not been previously known in the Cypher community. We then describe the industry-academia collaboration on designing a revised set of Cypher update operations. Based on discovered shortcomings of update features, a number of possible solutions were devised. They were presented to key Cypher users, who were given the opportunity to comment on how update features are used in real life, and on their preferences for proposed fixes. As the result of the consultation, a new set of update operations for Cypher were designed. Those led to a streamlined syntax, and eliminated the unexpected and problematic behavior that original Cypher updates exhibited.\n"
      },
      "after": "7d5f511136d3eb11",
      "date": 1712586927317
    },
    {
      "type": "add",
      "id": "7d5f511136d3eb11",
      "item": {
        "type": "paragraph",
        "id": "7d5f511136d3eb11",
        "text": "Ward is not opposed to changing the query parser but there would need to be some argument that the language was still deterministic."
      },
      "after": "dfece2e554100c75",
      "date": 1712585708280
    },
    {
      "type": "add",
      "id": "dfece2e554100c75",
      "item": {
        "type": "paragraph",
        "id": "dfece2e554100c75",
        "text": "We are talking about limitations in the query language not the javascript Graph class which is very permissive. Of course when we serialize as json then it’s restrictions apply."
      },
      "after": "4bfeb30febf42519",
      "date": 1712585646223
    },
    {
      "type": "add",
      "id": "4bfeb30febf42519",
      "item": {
        "type": "paragraph",
        "id": "4bfeb30febf42519",
        "text": "Ward (via personal communication, matrix) could never figure out why they designed the language to allow multiple labels as it turned every type check into an array search. I spoke with Neo4j people who had been with the company forever who couldn’t explain it. Best I could figure is that some proof somewhere talked about marking nodes with various colors or something so early math envy cursed downstream programmers ever since. I recommend adding a property “labels” using an array or Set or Bag for those algorithms if no outside storage was to be used for some inexplicable reason."
      },
      "after": "0b9c107d83b506f5",
      "date": 1712585582418
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1712585546202
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1712574547837
    },
    {
      "type": "edit",
      "id": "0b9c107d83b506f5",
      "item": {
        "type": "paragraph",
        "id": "0b9c107d83b506f5",
        "text": "How do I check the type of a node in cypher? [https://stackoverflow.com/questions/44835575/how-do-i-check-the-type-of-a-node-in-cypher#44835775 stackoverflow]"
      },
      "date": 1712574245861
    },
    {
      "type": "add",
      "id": "0b9c107d83b506f5",
      "item": {
        "type": "paragraph",
        "id": "0b9c107d83b506f5",
        "text": "How do I check the type of a node in cypher?"
      },
      "after": "d39f51a7a35b8043",
      "date": 1712574228917
    },
    {
      "type": "edit",
      "id": "d6123b8533878b99",
      "item": {
        "type": "paragraph",
        "id": "d6123b8533878b99",
        "text": "⇐ [[Paragraph Recommendation Viewer]] [http://localhost:3000/view/welcome-visitors/view/2024-04-08/view/addnote/view/paragraph-recommendation-viewer/view/lineup-graph/view/parse-page-paragraphs/view/speed-bot lineup]"
      },
      "date": 1712573220255
    },
    {
      "type": "edit",
      "id": "d6123b8533878b99",
      "item": {
        "type": "paragraph",
        "id": "d6123b8533878b99",
        "text": "⇐ [[Paragraph Recommendation Viewer]] [http://localhost:3000/view/welcome-visitors/view/2024-04-08/view/addnote/view/paragraph-recommendation-viewer/view/lineup-graph/view/parse-page-paragraphs/view/speed-botlineup]"
      },
      "date": 1712573214994
    },
    {
      "id": "a062bc3221e777b3",
      "type": "move",
      "order": [
        "d6123b8533878b99",
        "d39f51a7a35b8043",
        "a90a222901793cff",
        "1926027095810219",
        "dcd7dde9b9db4309",
        "ec7332b0fbc19dad",
        "a062bc3221e777b3"
      ],
      "date": 1712573183169
    },
    {
      "id": "ec7332b0fbc19dad",
      "type": "move",
      "order": [
        "a062bc3221e777b3",
        "d6123b8533878b99",
        "d39f51a7a35b8043",
        "a90a222901793cff",
        "1926027095810219",
        "dcd7dde9b9db4309",
        "ec7332b0fbc19dad"
      ],
      "date": 1712573179915
    },
    {
      "id": "dcd7dde9b9db4309",
      "type": "move",
      "order": [
        "a062bc3221e777b3",
        "ec7332b0fbc19dad",
        "d6123b8533878b99",
        "d39f51a7a35b8043",
        "a90a222901793cff",
        "1926027095810219",
        "dcd7dde9b9db4309"
      ],
      "date": 1712573170167
    },
    {
      "id": "1926027095810219",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1926027095810219",
        "text": "How do you focus on your central problem and keep from drowning in a sea of side issues?"
      },
      "after": "a90a222901793cff",
      "attribution": {
        "page": "Published Language",
        "site": "ddd.fed.wiki.org"
      },
      "date": 1712572159706
    },
    {
      "type": "edit",
      "id": "a90a222901793cff",
      "item": {
        "type": "reference",
        "id": "a90a222901793cff",
        "site": "ddd.fed.wiki.org",
        "slug": "published-language",
        "title": "Published Language",
        "text": "The translation between the models of two [[bounded context]] requires a common language."
      },
      "date": 1712572154205
    },
    {
      "item": {
        "type": "factory",
        "id": "a90a222901793cff"
      },
      "id": "a90a222901793cff",
      "type": "add",
      "after": "d39f51a7a35b8043",
      "date": 1712572149527
    },
    {
      "type": "edit",
      "id": "d39f51a7a35b8043",
      "item": {
        "type": "paragraph",
        "id": "d39f51a7a35b8043",
        "text": "[[addNote]]"
      },
      "date": 1712566582638
    },
    {
      "item": {
        "type": "factory",
        "id": "d39f51a7a35b8043"
      },
      "id": "d39f51a7a35b8043",
      "type": "add",
      "after": "d6123b8533878b99",
      "date": 1712566573520
    },
    {
      "type": "edit",
      "id": "d6123b8533878b99",
      "item": {
        "type": "paragraph",
        "id": "d6123b8533878b99",
        "text": "⇐ [[Paragraph Recommendation Viewer]] [http://localhost:3000/view/welcome-visitors/view/2024-04-08/view/paragraph-recommendation-viewer/view/lineup-graph/view/parse-page-paragraphs lineup]"
      },
      "date": 1712556757167
    },
    {
      "type": "edit",
      "id": "d6123b8533878b99",
      "item": {
        "type": "paragraph",
        "id": "d6123b8533878b99",
        "text": "⇐ [[Paragraph Recommendation Viewer]]"
      },
      "date": 1712556709225
    },
    {
      "item": {
        "type": "factory",
        "id": "d6123b8533878b99"
      },
      "id": "d6123b8533878b99",
      "type": "add",
      "after": "dcd7dde9b9db4309",
      "date": 1712556697875
    },
    {
      "type": "edit",
      "id": "dcd7dde9b9db4309",
      "item": {
        "type": "pagefold",
        "id": "dcd7dde9b9db4309",
        "text": "~"
      },
      "date": 1712556691578
    },
    {
      "item": {
        "type": "factory",
        "id": "dcd7dde9b9db4309"
      },
      "id": "dcd7dde9b9db4309",
      "type": "add",
      "after": "ec7332b0fbc19dad",
      "date": 1712556688606
    },
    {
      "type": "edit",
      "id": "ec7332b0fbc19dad",
      "item": {
        "type": "paragraph",
        "id": "ec7332b0fbc19dad",
        "text": "xattr – display and manipulate extended attributes"
      },
      "date": 1712556410288
    },
    {
      "item": {
        "type": "factory",
        "id": "ec7332b0fbc19dad"
      },
      "id": "ec7332b0fbc19dad",
      "type": "add",
      "after": "a062bc3221e777b3",
      "date": 1712556407835
    },
    {
      "type": "edit",
      "id": "a062bc3221e777b3",
      "item": {
        "type": "code",
        "id": "a062bc3221e777b3",
        "text": "xattr -rc *\n"
      },
      "date": 1712556302491
    },
    {
      "item": {
        "type": "factory",
        "id": "a062bc3221e777b3"
      },
      "id": "a062bc3221e777b3",
      "type": "add",
      "date": 1712556299620
    },
    {
      "type": "create",
      "item": {
        "title": "2024-04-08",
        "story": []
      },
      "date": 1712556298096
    },
    {
      "item": {
        "type": "pagefold",
        "id": "23f86062bc8c1ebe",
        "text": "~"
      },
      "id": "23f86062bc8c1ebe",
      "type": "add",
      "after": "a062bc3221e777b3",
      "date": 1712594612166
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a7afba25fbc6ecd6",
        "text": "Ward\nThe Neo history: Consulting company working on an inventory system for a large customer develops some graph abstractions in Java. They then open source the abstractions and attract a community. This takes on a life of its own and Neo for Java becomes Neo4j. This was then hooked up to some open source db so that it could run on larger models. Then a volunteer cooked up the query language because he liked functional programming and had some \"combinator\" method for building parsers. The community is all on board and the phrase \"graphs are everywhere\" is born. The Neo4j company funds community members to help other succeed. This is about the time I get involved based on suggestions from my own community."
      },
      "id": "a7afba25fbc6ecd6",
      "type": "add",
      "after": "23f86062bc8c1ebe",
      "date": 1712594617734
    },
    {
      "type": "edit",
      "id": "23f86062bc8c1ebe",
      "item": {
        "type": "pagefold",
        "id": "23f86062bc8c1ebe",
        "text": "~"
      },
      "date": 1712594615691
    },
    {
      "type": "edit",
      "id": "a7afba25fbc6ecd6",
      "item": {
        "type": "paragraph",
        "id": "a7afba25fbc6ecd6",
        "text": "Ward\nThe Neo history: Consulting company working on an inventory system for a large customer develops some graph abstractions in Java. They then open source the abstractions and attract a community. This takes on a life of its own and Neo for Java becomes Neo4j. This was then hooked up to some open source db so that it could run on larger models. Then a volunteer cooked up the query language because he liked functional programming and had some \"combinator\" method for building parsers. The community is all on board and the phrase \"graphs are everywhere\" is born. The Neo4j company funds community members to help other succeed. This is about the time I get involved based on suggestions from my own community."
      },
      "date": 1712594619448
    },
    {
      "type": "edit",
      "id": "a7afba25fbc6ecd6",
      "item": {
        "type": "paragraph",
        "id": "a7afba25fbc6ecd6",
        "text": "Ward\nThe Neo history: Consulting company working on an inventory system for a large customer develops some graph abstractions in Java. They then open source the abstractions and attract a community. This takes on a life of its own and Neo for Java becomes Neo4j. This was then hooked up to some open source db so that it could run on larger models. Then a volunteer cooked up the query language because he liked functional programming and had some \"combinator\" method for building parsers. The community is all on board and the phrase \"graphs are everywhere\" is born. The Neo4j company funds community members to help other succeed. This is about the time I get involved based on suggestions from my own community."
      },
      "date": 1712594637011
    },
    {
      "type": "add",
      "id": "ff4ba342168f7c93",
      "item": {
        "type": "paragraph",
        "id": "ff4ba342168f7c93",
        "text": "Ward\nThis is a good summary of my experience with Neo4j. New Relic agreed with open sourcing the UI component, a graph viewer. I wrote the last three page of this lineup for some other engineers trying to duplicate the New Relic El Dorado experience. Some of this writing was not completed. I should get back to this before I forget. My colleagues had already given up as what I had already described seemed too big a project.\n[http://ddd.ward.wiki.org/view/welcome-visitors/view/about-the-el-dorado-project/view/sharing-our-work/view/el-dorado-ui/view/database-build/view/tips-for-modeling/view/save-and-revise-queries lineup]"
      },
      "after": "a7afba25fbc6ecd6",
      "date": 1712594637948
    },
    {
      "type": "edit",
      "id": "ff4ba342168f7c93",
      "item": {
        "type": "paragraph",
        "id": "ff4ba342168f7c93",
        "text": "Ward\nThis is a good summary of my experience with Neo4j. New Relic agreed with open sourcing the UI component, a graph viewer. I wrote the last three page of this lineup for some other engineers trying to duplicate the New Relic El Dorado experience. Some of this writing was not completed. I should get back to this before I forget. My colleagues had already given up as what I had already described seemed too big a project.\n[http://ddd.ward.wiki.org/view/welcome-visitors/view/about-the-el-dorado-project/view/sharing-our-work/view/el-dorado-ui/view/database-build/view/tips-for-modeling/view/save-and-revise-queries lineup]"
      },
      "date": 1712594694858
    },
    {
      "type": "add",
      "id": "3f4ba4b59748cb36",
      "item": {
        "type": "paragraph",
        "id": "3f4ba4b59748cb36",
        "text": "The Graph class and the Solo plugin promise a method that is easier to get started and might have just as much upside as El Dorado. I am trying to duplicate your success with graphs carried between pages using events. This is showing some weakness in wiki's methods for which there are short-term workarounds and maybe long-term architectural improvements in how push and pull work together in a lineup."
      },
      "after": "ff4ba342168f7c93",
      "date": 1712594822771
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a1e7512d73476e22",
        "text": "Ward: \nI love the way you grow the SpeedBot graphs. I hope we can make a version where clicking on a bot generated node in the Solo plugin will signal to the bot to make and publish another \"aspect\" of the structure you are exploring together."
      },
      "id": "a1e7512d73476e22",
      "type": "add",
      "after": "3f4ba4b59748cb36",
      "date": 1712598831946
    },
    {
      "type": "edit",
      "id": "a1e7512d73476e22",
      "item": {
        "type": "paragraph",
        "id": "a1e7512d73476e22",
        "text": "Ward: \nI love the way you grow the SpeedBot graphs. I hope we can make a version where clicking on a bot generated node in the Solo plugin will signal to the bot to make and publish another \"aspect\" of the structure you are exploring together."
      },
      "date": 1712598835042
    },
    {
      "type": "edit",
      "id": "a1e7512d73476e22",
      "item": {
        "type": "paragraph",
        "id": "a1e7512d73476e22",
        "text": "Ward: \nI love the way you grow the SpeedBot graphs. I hope we can make a version where clicking on a bot generated node in the Solo plugin will signal to the bot to make and publish another \"aspect\" of the structure you are exploring together."
      },
      "date": 1712598845420
    },
    {
      "item": {
        "type": "pagefold",
        "id": "09208df749d19711",
        "text": "~"
      },
      "id": "09208df749d19711",
      "type": "add",
      "after": "a1e7512d73476e22",
      "date": 1712599291586
    },
    {
      "type": "edit",
      "id": "09208df749d19711",
      "item": {
        "type": "pagefold",
        "id": "09208df749d19711",
        "text": "~"
      },
      "date": 1712599295832
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a82eaf3a2a3ff40d",
        "text": "What are the advantages of surprises? ([[r.Vergessen.Esposito]], 78)"
      },
      "id": "a82eaf3a2a3ff40d",
      "type": "add",
      "after": "09208df749d19711",
      "date": 1712599297972
    },
    {
      "type": "edit",
      "id": "a82eaf3a2a3ff40d",
      "item": {
        "type": "paragraph",
        "id": "a82eaf3a2a3ff40d",
        "text": "What are the advantages of surprises? ([[r.Vergessen.Esposito]], 78)"
      },
      "date": 1712599303070
    },
    {
      "type": "edit",
      "id": "a82eaf3a2a3ff40d",
      "item": {
        "type": "paragraph",
        "id": "a82eaf3a2a3ff40d",
        "text": "What are the advantages of surprises? ([[r.Vergessen.Esposito]], 78)"
      },
      "date": 1712599374697
    },
    {
      "type": "edit",
      "id": "a82eaf3a2a3ff40d",
      "item": {
        "type": "paragraph",
        "id": "a82eaf3a2a3ff40d",
        "text": "What are the advantages of surprises? ([[r.Vergessen.Esposito]], 78)"
      },
      "date": 1712599395364
    },
    {
      "item": {
        "type": "paragraph",
        "id": "6675840bc5a80af6",
        "text": "Doch welcher Nutzen kann aus der Erzeugung von Überraschung gezogen werden? Man muss sich vergegenwärtigen, dass die aus der permanenten Erzeugung von Überraschungen gewonnenen Informationen nicht mit Wahrheit gleichzusetzen sind. Während eine Nachricht auch dann informativ sein kann, wenn sie unwahr ist, stellt eine wiederholte Wahrheit keine Information mehr dar. Eine Gesellschaft, deren Orientierungskriterien auf Information beruhen, bedarf noch keiner Wahrheitskonzeption, die der modernen, auf Rationalität bauenden Konzeption gleichzusetzen wäre102 (auch weil eine solche für eine zweidimensionale Semantik noch zu abstrakt ist). Es genügt schon, wenn eine solche Gesellschaft die Fähigkeit ausbildet, Sinn hervorzubringen und dafür wird durch die Produktion von Überraschungen ständig gesorgt. Die divinatorischen Praktiken interpretieren die Oberflächenlineaturen als Zeichen eines verborgenen Sinns, der immer wieder hervorgeholt werden kann, ohne dabei jedoch die Annahme eines unbekannten Mysteriums zu erschüttern. Die Weissagungen der Priester und die Orakelsprüche offenbaren keine Wahrheiten, sondern bieten lediglich eine Handlungsorientierung."
      },
      "id": "6675840bc5a80af6",
      "type": "add",
      "after": "a82eaf3a2a3ff40d",
      "date": 1712599422575
    },
    {
      "type": "edit",
      "id": "6675840bc5a80af6",
      "item": {
        "type": "paragraph",
        "id": "6675840bc5a80af6",
        "text": "Doch welcher Nutzen kann aus der Erzeugung von Überraschung gezogen werden? Man muss sich vergegenwärtigen, dass die aus der permanenten Erzeugung von Überraschungen gewonnenen Informationen nicht mit Wahrheit gleichzusetzen sind. Während eine Nachricht auch dann informativ sein kann, wenn sie unwahr ist, stellt eine wiederholte Wahrheit keine Information mehr dar. Eine Gesellschaft, deren Orientierungskriterien auf Information beruhen, bedarf noch keiner Wahrheitskonzeption, die der modernen, auf Rationalität bauenden Konzeption gleichzusetzen wäre102 (auch weil eine solche für eine zweidimensionale Semantik noch zu abstrakt ist). Es genügt schon, wenn eine solche Gesellschaft die Fähigkeit ausbildet, Sinn hervorzubringen und dafür wird durch die Produktion von Überraschungen ständig gesorgt. Die divinatorischen Praktiken interpretieren die Oberflächenlineaturen als Zeichen eines verborgenen Sinns, der immer wieder hervorgeholt werden kann, ohne dabei jedoch die Annahme eines unbekannten Mysteriums zu erschüttern. Die Weissagungen der Priester und die Orakelsprüche offenbaren keine Wahrheiten, sondern bieten lediglich eine Handlungsorientierung."
      },
      "date": 1712599424421
    },
    {
      "type": "edit",
      "id": "6675840bc5a80af6",
      "item": {
        "type": "paragraph",
        "id": "6675840bc5a80af6",
        "text": "Doch welcher Nutzen kann aus der Erzeugung von Überraschung gezogen werden? Man muss sich vergegenwärtigen, dass die aus der permanenten Erzeugung von Überraschungen gewonnenen Informationen nicht mit Wahrheit gleichzusetzen sind. Während eine Nachricht auch dann informativ sein kann, wenn sie unwahr ist, stellt eine wiederholte Wahrheit keine Information mehr dar. Eine Gesellschaft, deren Orientierungskriterien auf Information beruhen, bedarf noch keiner Wahrheitskonzeption, die der modernen, auf Rationalität bauenden Konzeption gleichzusetzen wäre102 (auch weil eine solche für eine zweidimensionale Semantik noch zu abstrakt ist). Es genügt schon, wenn eine solche Gesellschaft die Fähigkeit ausbildet, Sinn hervorzubringen und dafür wird durch die Produktion von Überraschungen ständig gesorgt. Die divinatorischen Praktiken interpretieren die Oberflächenlineaturen als Zeichen eines verborgenen Sinns, der immer wieder hervorgeholt werden kann, ohne dabei jedoch die Annahme eines unbekannten Mysteriums zu erschüttern. Die Weissagungen der Priester und die Orakelsprüche offenbaren keine Wahrheiten, sondern bieten lediglich eine Handlungsorientierung."
      },
      "date": 1712599466866
    },
    {
      "type": "add",
      "id": "9d5762ef400f0819",
      "item": {
        "type": "paragraph",
        "id": "9d5762ef400f0819",
        "text": "But what benefits can be gained from creating surprises? It should be borne in mind that the information gained through the constant generation of surprises cannot be equated with the truth. While a message can be informative even if it is untrue, a repeated truth no longer constitutes information. A society whose orientation criteria are based on information does not yet need a concept of truth that could be equated with the modern concept based on rationality (also because such a concept is still too abstract for two-dimensional semantics). For such a society, it is sufficient to develop the ability to produce meaning, and this is constantly guaranteed by the production of surprises. The divinatory practices interpret the superficial lineatures as signs of a hidden meaning that can be brought out again and again, but without shaking the assumption of an unknown mystery. The divinations of the priests and the oracular sayings do not reveal truths, but merely offer instructions for action."
      },
      "after": "6675840bc5a80af6",
      "date": 1712599521338
    },
    {
      "type": "edit",
      "id": "9d5762ef400f0819",
      "item": {
        "type": "paragraph",
        "id": "9d5762ef400f0819",
        "text": "But what benefits can be gained from creating surprises? It should be borne in mind that the information gained through the constant generation of surprises cannot be equated with the truth. While a message can be informative even if it is untrue, a repeated truth no longer constitutes information. A society whose orientation criteria are based on information does not yet need a concept of truth that could be equated with the modern concept based on rationality (also because such a concept is still too abstract for two-dimensional semantics). For such a society, it is sufficient to develop the ability to produce meaning, and this is constantly guaranteed by the production of surprises. The divinatory practices interpret the superficial lineatures as signs of a hidden meaning that can be brought out again and again, but without shaking the assumption of an unknown mystery. The divinations of the priests and the oracular sayings do not reveal truths, but merely offer instructions for action."
      },
      "date": 1712599578718
    },
    {
      "type": "fork",
      "date": 1712599672113
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1712599685512
    }
  ]
}