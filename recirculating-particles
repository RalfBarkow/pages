{
  "title": "Recirculating Particles",
  "story": [
    {
      "type": "paragraph",
      "id": "484e092159df2d01",
      "text": "We will vary the number of visible particles as the stream pulses through a network. We start with [[Particle Pipeline]]"
    },
    {
      "type": "code",
      "id": "b49ef28852d16927",
      "text": "const rn = () => Math.random()-Math.random()"
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": "let geo = new THREE.BufferGeometry()\nlet count = 10000\nlet pos = new Float32Array(count*3)"
    },
    {
      "type": "code",
      "id": "139b4f2abf33cf4b",
      "text": "for(let i=0; i<count*3; i+=3){\n  pos[i] = -1\n  pos[i+1] = rn()/10\n  pos[i+2] = rn()/10\n}"
    },
    {
      "type": "code",
      "id": "d2b9b24d40dfa93c",
      "text": "geo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))"
    },
    {
      "type": "code",
      "id": "4add2553d4af9b54",
      "text": "let mat = new THREE.PointsMaterial({\n  size:0.02, sizeAttenuation:true, color:0xffff88})"
    },
    {
      "type": "code",
      "id": "91b83a703f16d7dc",
      "text": "scene.add(new THREE.Points(geo, mat))"
    },
    {
      "type": "code",
      "id": "b7cc3f47afaee04b",
      "text": "let have = 0, done = 0\nlet more = () => {\n  for (let i=0; i<10; i++)\n    if(have < count) {\n      have += 1\n      pos[have*3]=rn()/50-1}}\n"
    },
    {
      "type": "code",
      "id": "d788856cdbe73431",
      "text": "tick = () => {\n  more()\n  for(let i = done; i < have; i++) {\n    let i3 = i*3\n    pos[i3] += 0.02\n    if (pos[i3] >= 1) done = i+1\n  }\n  geo.attributes.position.needsUpdate = true }"
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "http://three.ward.asia.wiki.org/assets/pages/snippet-template/basic.html?snippet-template\nHEIGHT 400"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Recirculating Particles",
        "story": [
          {
            "type": "paragraph",
            "id": "484e092159df2d01",
            "text": "Explain what this does."
          },
          {
            "type": "code",
            "id": "5eb6b67568179aa3",
            "text": "// Code that does it.\n\nconst geo = new THREE.BoxGeometry(1, 1, 1)\nconst mat = new THREE.MeshNormalMaterial()\nconst box = new THREE.Mesh(geo, mat)\nscene.add(box)"
          },
          {
            "type": "code",
            "id": "d788856cdbe73431",
            "text": "tick = () => box.rotation.x += 0.02\ncontrols.autoRotate = true"
          },
          {
            "type": "frame",
            "id": "6cf52409eec3988c",
            "text": "http://three.ward.asia.wiki.org/assets/pages/snippet-template/basic.html?snippet-template\nHEIGHT 400"
          }
        ]
      },
      "date": 1615054106556
    },
    {
      "type": "edit",
      "id": "484e092159df2d01",
      "item": {
        "type": "paragraph",
        "id": "484e092159df2d01",
        "text": "We will vary the number of visible particles as the stream pulses through a network."
      },
      "date": 1615054188787
    },
    {
      "type": "edit",
      "id": "484e092159df2d01",
      "item": {
        "type": "paragraph",
        "id": "484e092159df2d01",
        "text": "We will vary the number of visible particles as the stream pulses through a network. We start with [[Particle Pipeline]]"
      },
      "date": 1615054243032
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "let geo = new THREE.BufferGeometry()\nlet count = 50000\nlet pos = new Float32Array(count*3)"
      },
      "date": 1615054276278
    },
    {
      "item": {
        "type": "factory",
        "id": "139b4f2abf33cf4b"
      },
      "id": "139b4f2abf33cf4b",
      "type": "add",
      "after": "6cf52409eec3988c",
      "date": 1615054311174
    },
    {
      "id": "139b4f2abf33cf4b",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "5eb6b67568179aa3",
        "139b4f2abf33cf4b",
        "d788856cdbe73431",
        "6cf52409eec3988c"
      ],
      "date": 1615054315718
    },
    {
      "type": "edit",
      "id": "139b4f2abf33cf4b",
      "item": {
        "type": "code",
        "id": "139b4f2abf33cf4b",
        "text": "for(let i=0; i<count; i++){\n  const rn = () => Math.random()-Math.random()\n  const set3 = (a,x,y,z) => {\n    let i3 = i*3; a[i3++]=x; a[i3++]=y; a[i3++]=z;}\n  set3(pos,rn(),rn()/4+i%3-1,rn())}"
      },
      "date": 1615054326936
    },
    {
      "item": {
        "type": "factory",
        "id": "d2b9b24d40dfa93c"
      },
      "id": "d2b9b24d40dfa93c",
      "type": "add",
      "after": "6cf52409eec3988c",
      "date": 1615054332151
    },
    {
      "type": "edit",
      "id": "d2b9b24d40dfa93c",
      "item": {
        "type": "code",
        "id": "d2b9b24d40dfa93c",
        "text": "geo.setAttribute('position',\n  new THREE.BufferAttribute(pos, 3))"
      },
      "date": 1615054346146
    },
    {
      "item": {
        "type": "factory",
        "id": "4add2553d4af9b54"
      },
      "id": "4add2553d4af9b54",
      "type": "add",
      "after": "d2b9b24d40dfa93c",
      "date": 1615054349656
    },
    {
      "type": "edit",
      "id": "4add2553d4af9b54",
      "item": {
        "type": "code",
        "id": "4add2553d4af9b54",
        "text": "let mat = new THREE.PointsMaterial({\n  size:0.01, sizeAttenuation:true, color:0xffff88})"
      },
      "date": 1615054363137
    },
    {
      "item": {
        "type": "factory",
        "id": "91b83a703f16d7dc"
      },
      "id": "91b83a703f16d7dc",
      "type": "add",
      "after": "4add2553d4af9b54",
      "date": 1615054370614
    },
    {
      "type": "edit",
      "id": "91b83a703f16d7dc",
      "item": {
        "type": "code",
        "id": "91b83a703f16d7dc",
        "text": "scene.add(new THREE.Points(geo, mat))"
      },
      "date": 1615054377263
    },
    {
      "item": {
        "type": "factory",
        "id": "25217011ed2aa17b"
      },
      "id": "25217011ed2aa17b",
      "type": "add",
      "after": "91b83a703f16d7dc",
      "date": 1615054385370
    },
    {
      "type": "edit",
      "id": "25217011ed2aa17b",
      "item": {
        "type": "code",
        "id": "25217011ed2aa17b",
        "text": "tick = () => {\n  for(let i3 = 0; i3 < count*3; i3+=3) {\n    pos[i3] = (pos[i3]+0.02+1)%2-1 }\n  geo.attributes.position.needsUpdate = true }"
      },
      "date": 1615054389998
    },
    {
      "type": "remove",
      "id": "25217011ed2aa17b",
      "date": 1615054428172
    },
    {
      "type": "edit",
      "id": "d788856cdbe73431",
      "item": {
        "type": "code",
        "id": "d788856cdbe73431",
        "text": "tick = () => {\n  for(let i3 = 0; i3 < count*3; i3+=3) {\n    pos[i3] = (pos[i3]+0.02+1)%2-1 }\n  geo.attributes.position.needsUpdate = true }"
      },
      "date": 1615054436129
    },
    {
      "id": "6cf52409eec3988c",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "5eb6b67568179aa3",
        "139b4f2abf33cf4b",
        "d788856cdbe73431",
        "d2b9b24d40dfa93c",
        "4add2553d4af9b54",
        "91b83a703f16d7dc",
        "6cf52409eec3988c"
      ],
      "date": 1615054446187
    },
    {
      "id": "d788856cdbe73431",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "5eb6b67568179aa3",
        "139b4f2abf33cf4b",
        "d2b9b24d40dfa93c",
        "4add2553d4af9b54",
        "91b83a703f16d7dc",
        "d788856cdbe73431",
        "6cf52409eec3988c"
      ],
      "date": 1615054452806
    },
    {
      "type": "edit",
      "id": "139b4f2abf33cf4b",
      "item": {
        "type": "code",
        "id": "139b4f2abf33cf4b",
        "text": "for(let i=0; i<count*3; i+=3){\n  pos[i] = -1\n  pos[i+1] = 0\n  pos[i+2] = 0}"
      },
      "date": 1615055273590
    },
    {
      "type": "edit",
      "id": "139b4f2abf33cf4b",
      "item": {
        "type": "code",
        "id": "139b4f2abf33cf4b",
        "text": "for(let i=0; i<count*3; i+=3){\n  pos[i] = 0\n  pos[i+1] = 0\n  pos[i+2] = 0}"
      },
      "date": 1615055318356
    },
    {
      "item": {
        "type": "factory",
        "id": "b49ef28852d16927"
      },
      "id": "b49ef28852d16927",
      "type": "add",
      "after": "6cf52409eec3988c",
      "date": 1615055358187
    },
    {
      "type": "edit",
      "id": "b49ef28852d16927",
      "item": {
        "type": "code",
        "id": "b49ef28852d16927",
        "text": "const rn = () => Math.random()-Math.random()"
      },
      "date": 1615055369493
    },
    {
      "id": "b49ef28852d16927",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "b49ef28852d16927",
        "5eb6b67568179aa3",
        "139b4f2abf33cf4b",
        "d2b9b24d40dfa93c",
        "4add2553d4af9b54",
        "91b83a703f16d7dc",
        "d788856cdbe73431",
        "6cf52409eec3988c"
      ],
      "date": 1615055374688
    },
    {
      "type": "edit",
      "id": "139b4f2abf33cf4b",
      "item": {
        "type": "code",
        "id": "139b4f2abf33cf4b",
        "text": "for(let i=0; i<count*3; i+=3){\n  pos[i] = 0\n  pos[i+1] = rn()/10\n  pos[i+2] = rn()/10\n}"
      },
      "date": 1615055425345
    },
    {
      "type": "edit",
      "id": "139b4f2abf33cf4b",
      "item": {
        "type": "code",
        "id": "139b4f2abf33cf4b",
        "text": "for(let i=0; i<count*3; i+=3){\n  pos[i] = -1\n  pos[i+1] = rn()/10\n  pos[i+2] = rn()/10\n}"
      },
      "date": 1615055463957
    },
    {
      "item": {
        "type": "factory",
        "id": "b7cc3f47afaee04b"
      },
      "id": "b7cc3f47afaee04b",
      "type": "add",
      "after": "6cf52409eec3988c",
      "date": 1615055808167
    },
    {
      "id": "b7cc3f47afaee04b",
      "type": "move",
      "order": [
        "484e092159df2d01",
        "b49ef28852d16927",
        "5eb6b67568179aa3",
        "139b4f2abf33cf4b",
        "d2b9b24d40dfa93c",
        "4add2553d4af9b54",
        "91b83a703f16d7dc",
        "b7cc3f47afaee04b",
        "d788856cdbe73431",
        "6cf52409eec3988c"
      ],
      "date": 1615055810680
    },
    {
      "type": "edit",
      "id": "b7cc3f47afaee04b",
      "item": {
        "type": "code",
        "id": "b7cc3f47afaee04b",
        "text": "let have = 0\nmore () => {\n  if(have < count) {\n    have += 1 }}\n"
      },
      "date": 1615055942019
    },
    {
      "type": "edit",
      "id": "b7cc3f47afaee04b",
      "item": {
        "type": "code",
        "id": "b7cc3f47afaee04b",
        "text": "let have = 0\nlet more = () => {\n  if(have < count) {\n    have += 1 }}\n"
      },
      "date": 1615055963708
    },
    {
      "type": "edit",
      "id": "d788856cdbe73431",
      "item": {
        "type": "code",
        "id": "d788856cdbe73431",
        "text": "tick = () => {\n  more()\n  for(let i3 = 0; i3 < have*3; i3+=3) {\n    pos[i3] = (pos[i3]+0.02+1)%2-1 }\n  geo.attributes.position.needsUpdate = true }"
      },
      "date": 1615055988575
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "let geo = new THREE.BufferGeometry()\nlet count = 500\nlet pos = new Float32Array(count*3)"
      },
      "date": 1615056145196
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "let geo = new THREE.BufferGeometry()\nlet count = 1000\nlet pos = new Float32Array(count*3)"
      },
      "date": 1615056204365
    },
    {
      "type": "edit",
      "id": "b7cc3f47afaee04b",
      "item": {
        "type": "code",
        "id": "b7cc3f47afaee04b",
        "text": "let have = 0; done = 0\nlet more = () => {\n  if(have < count) {\n    have += 1 }}\n"
      },
      "date": 1615056655810
    },
    {
      "type": "edit",
      "id": "d788856cdbe73431",
      "item": {
        "type": "code",
        "id": "d788856cdbe73431",
        "text": "tick = () => {\n  more()\n  for(let i3 = done; i3 < have*3; i3+=3) {\n    pos[i3] += 0.02\n    if (pos[i3] >= 1) done = i3/3\n  }\n  geo.attributes.position.needsUpdate = true }"
      },
      "date": 1615056780634
    },
    {
      "type": "edit",
      "id": "b7cc3f47afaee04b",
      "item": {
        "type": "code",
        "id": "b7cc3f47afaee04b",
        "text": "let have = 0, done = 0\nlet more = () => {\n  if(have < count) {\n    have += 1 }}\n"
      },
      "date": 1615056801485
    },
    {
      "type": "edit",
      "id": "d788856cdbe73431",
      "item": {
        "type": "code",
        "id": "d788856cdbe73431",
        "text": "tick = () => {\n  more()\n  for(let i3 = done*3; i3 < have*3; i3+=3) {\n    pos[i3] += 0.02\n    if (pos[i3] >= 1) done = i3/3\n  }\n  geo.attributes.position.needsUpdate = true }"
      },
      "date": 1615056824869
    },
    {
      "type": "edit",
      "id": "4add2553d4af9b54",
      "item": {
        "type": "code",
        "id": "4add2553d4af9b54",
        "text": "let mat = new THREE.PointsMaterial({\n  size:0.1, sizeAttenuation:true, color:0xffff88})"
      },
      "date": 1615056850627
    },
    {
      "type": "edit",
      "id": "d788856cdbe73431",
      "item": {
        "type": "code",
        "id": "d788856cdbe73431",
        "text": "tick = () => {\n  more()\n  for(let i = done; i < have; i++) {\n    let i3 = i*3\n    pos[i3] += 0.02\n    if (pos[i3] >= 1) done = i\n  }\n  geo.attributes.position.needsUpdate = true }"
      },
      "date": 1615056987074
    },
    {
      "type": "edit",
      "id": "4add2553d4af9b54",
      "item": {
        "type": "code",
        "id": "4add2553d4af9b54",
        "text": "let mat = new THREE.PointsMaterial({\n  size:0.05, sizeAttenuation:true, color:0xffff88})"
      },
      "date": 1615057044610
    },
    {
      "type": "edit",
      "id": "d788856cdbe73431",
      "item": {
        "type": "code",
        "id": "d788856cdbe73431",
        "text": "tick = () => {\n  more()\n  for(let i = done; i < have; i++) {\n    let i3 = i*3\n    pos[i3] += 0.02\n    if (pos[i3] >= 1) done = i+1\n  }\n  geo.attributes.position.needsUpdate = true }"
      },
      "date": 1615057559716
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "let geo = new THREE.BufferGeometry()\nlet count = 10000\nlet pos = new Float32Array(count*3)"
      },
      "date": 1615057651499
    },
    {
      "type": "edit",
      "id": "4add2553d4af9b54",
      "item": {
        "type": "code",
        "id": "4add2553d4af9b54",
        "text": "let mat = new THREE.PointsMaterial({\n  size:0.02, sizeAttenuation:true, color:0xffff88})"
      },
      "date": 1615057711491
    },
    {
      "type": "edit",
      "id": "b7cc3f47afaee04b",
      "item": {
        "type": "code",
        "id": "b7cc3f47afaee04b",
        "text": "let have = 0, done = 0\nlet more = () => {\n  for (let i=0; i<10; i++)\n    if(have < count) {\n      have += 1\n      pos[have*3]=rn()/50}}\n"
      },
      "date": 1615057835280
    },
    {
      "type": "edit",
      "id": "b7cc3f47afaee04b",
      "item": {
        "type": "code",
        "id": "b7cc3f47afaee04b",
        "text": "let have = 0, done = 0\nlet more = () => {\n  for (let i=0; i<10; i++)\n    if(have < count) {\n      have += 1\n      pos[have*3]=rn()/50-1}}\n"
      },
      "date": 1615057853320
    },
    {
      "type": "fork",
      "site": "three.ward.asia.wiki.org",
      "date": 1675233699779
    }
  ]
}