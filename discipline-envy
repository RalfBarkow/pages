{
  "title": "Discipline Envy",
  "story": [
    {
      "type": "html",
      "text": "We want [[Software Engineering]] to be like math; instead it is turning out to better resemble the \"soft disciplines\" of psychology, journalism, etc.",
      "id": "d8d43944c441f466609085639315529d"
    },
    {
      "type": "html",
      "text": "<i>Interestingly, in the Dewey Decimal System of classification, Computing appears in section 001 (a subcategory of 000 - General Works). It does not appear in either section 500 (Pure Sciences) or 600 (Technology (Applied Sciences)). So, according to the original classifiers, Computing is not a science!</i> Source: [http://lib.sdstate.edu/lib02/dewey.html lib.sdstate.edu]",
      "id": "3e9599e965d58bffc2b472a82c476caf"
    },
    {
      "type": "html",
      "text": "{Bear in mind that not everyone wants software engineering to be like math! Some of us are very pleased to see the cold equations being checked and driven back, at least in one area...}",
      "id": "69bba5c3188cf39ee24149a6c3ca56a8"
    },
    {
      "type": "html",
      "text": "[I think the original poster means that [[Software Engineering]] should be rigorous like electrical engineering, rather than fluffy and amorphous.  That doesn't mean [[Software Engineering]] needs to be mathematical, just that it should be logical and informed by reason, not whim.]",
      "id": "f00ba4542f6cc1c9f8a06b4b3788c8b8"
    },
    {
      "type": "html",
      "text": "{That makes sense.}",
      "id": "61c973b04a3c7706c6e162147ccdb228"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "dbabc894e300a20a8caaf526e0901fd3"
    },
    {
      "type": "html",
      "text": "<i>An argument based on analogy is like a house built on sand.</i>",
      "id": "6e657fb2fe5de77ecda8243f2f76e93b"
    },
    {
      "type": "html",
      "text": "\nThe programming discipline has suffered a long term identity crisis.\nIt never seems happy to be itself but instead pretends to be the\ndiscipline it serves at the moment, or the discipline from which it has\ndrawn the most members.  First our discipline wanted to be like\nmathematics.  Oh how nice it is to reason with artifacts of pure\nthought.  Then we were a science, off on a voyage of discovery with\nthe scientific method at our side.  Now we've matured to engineers,\nliberated by certified processes and writing our handbook.",
      "id": "eb36fb9b0a60270afeb6dedbd2f3ee83"
    },
    {
      "type": "html",
      "text": "\nI don't believe it.  When I stoop to analogy I pick journalism.  Hey, like us, the journalism grunts are idolized and reviled at the same time and all work under deadlines.  And we will be a lot better off when we let our young whips design the systems and make our old sages do editorial maintenance. Unlike journalism, we promote the wrong direction.",
      "id": "6597f2fab1ef98635c26fb209e1eaf44"
    },
    {
      "type": "html",
      "text": "\nBut that's analogy.  Instead we should study our own.  Instead of throwing anchors out to established practice, let's find the fastest among us and hitch on to them.  That's what I want from our investment in patterns.  I move fast and I want to move faster. ",
      "id": "e1a6f61fb9c98bab9cc0e4c057669415"
    },
    {
      "type": "html",
      "text": "-- [[Ward Cunningham]]",
      "id": "b50fe01327742af6377376eabc3a3a38"
    },
    {
      "type": "html",
      "text": "<i>The problem with 'hitching' a ride with the 'fastest' amongst us is that the vast majority cannot be absolutely sure 'we' are moving in the right direction.  The direction becomes a matter of rhetoric and faith instead of a matter of evidence and proof.  At some point that direction is questioned, as evidenced by the recurring software crisis and resulting paradigm shifts.   We need to follow the most effective among us, the ones that can balance the three typical project driving forces: speed, cost, correctness.</i> -- [[Martin Spamer]]",
      "id": "1822f3d7b22aa2f9e56954332d0b4429"
    },
    {
      "type": "html",
      "text": "<i>The problem with complaining about analogies is that they're all we have to live with, for now. How else to explain our discipline, to non-members, other than by analogy? (See [[Metaphors We Live By]].)</i>",
      "id": "789ddf590659fd29d42380e72b4922c2"
    },
    {
      "type": "html",
      "text": "\nThe roles people play within a development team very much depend on their choice of analogy. \nI think of programming like story-telling. \nOr maybe like acting. The point is that, above and beyond questions of efficiency and performance, good design requires that we be able to empathize with our objects. Otherwise we will no be able to communicate the design to other people. That would bye-bye to good implementations, bye-bye to extensibility, bye-bye to object reuse, bye-bye to all those virtues that are vague and fuzzy but nonetheless real. ",
      "id": "0151db44b2a3d1eb83ae7c17a952e1f1"
    },
    {
      "type": "html",
      "text": "\nI design things and then I walk around asking questions like ...",
      "id": "1e30daa91611ede009cf80394d5eae4c"
    },
    {
      "type": "html",
      "text": " Why does this object care? and",
      "id": "7f522fc6863744e8e94a2518b21b3a85"
    },
    {
      "type": "html",
      "text": " Why is it involved?\nI could easily see me asking ...",
      "id": "f4231707aab2257fd73429efabc87528"
    },
    {
      "type": "html",
      "text": " What's its motivation?",
      "id": "920132349478c86846a59ec8dc447bd4"
    },
    {
      "type": "html",
      "text": " What's its background?",
      "id": "27c68779ad0b5f5163884749cb88c582"
    },
    {
      "type": "html",
      "text": " How did it get involved in this situation?\nI like each thread to tell a story. If you name member functions well, it should be fairly easy to transform the \nthread of execution into a simple story. ",
      "id": "e96409f23d6df930aec6d0cfac6b3fa0"
    },
    {
      "type": "html",
      "text": "\nOn the other hand, I work with people who see programming as engineering. They tend to ask different sorts of questions. ",
      "id": "a92b2e066d9c01e2178b8c10c23b5003"
    },
    {
      "type": "html",
      "text": " How can this object do its task better? or ",
      "id": "f2cf12c79c1878426142e5b21f5d11fb"
    },
    {
      "type": "html",
      "text": " What's the cost of doing it that way?\nGood questions and important questions. Just not my questions. ",
      "id": "2d10613f3cdc32566d50bd2f3be53d2f"
    },
    {
      "type": "html",
      "text": "-- [[William Grosso]]",
      "id": "75555913b4f94ae46ce72ebc0c057402"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "dbabc894e300a20a8caaf526e0901fd3"
    },
    {
      "type": "html",
      "text": "Thanks, William.  I swallowed what I was about to say.  Now I'll try to restate it.  Analogies are not all we have.  We have objective events and distinct personal sensations.  While I am programming, I do not think, \"I am being a journalist / engineer / scientist.\"  I am simply putting something together.  We could, as Ward suggests, start building up a vocabulary for those events and sensations.  Every part of a vocabulary comes from somewhere else, but the putting together of it can become the way of talking about software without using analogy.  Use direct description, in other words, instead of circumlocutions and analogies.  ",
      "id": "844e557e46ada77911d8a985204502f2"
    },
    {
      "type": "html",
      "text": "That having been said, it is clear that I borrow a persona when talking about design to another person, or to myself out loud.  \nAnd the persona I choose matters.  Exactly as you described about the would-be scientist, or would-be engineer, or would-be behaviorist.  So I regularly confuse my new-to-OO colleagues by asking how it <i>feels</i> to be this object with those responsibilities, and such like questions.  \nThey live inside a different sort of dialogue about their design.  They want it 3rd-person, impartial, objective, measurable.  I like it subjective, comfortable, and measured in a very few ways.",
      "id": "285e806cbfc526ec1bd8e9528bca0fa5"
    },
    {
      "type": "html",
      "text": "\nThat was nice, your bringing in the persona issue, because that does come from analogy, even if talking about the profession is done with direct vocabulary.  For each analogy about the profession, it is good to see what you can learn and borrow, and then go back to direct vocabulary.",
      "id": "848e309bdf824874d2031f3078577dc7"
    },
    {
      "type": "html",
      "text": "-- [[Alistair Cockburn]]",
      "id": "cea150023269ae115b8f027cf1538ccf"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "dbabc894e300a20a8caaf526e0901fd3"
    },
    {
      "type": "html",
      "text": "I use analogy to ask \"What can I steal?\"  Programming isn't architecture, but some tricks that work for architects may also work for programmers.  I agree that the danger of metaphor is the insistence on a one-to-one mapping.  The danger of no metaphor is that you wind up reinventing the wheel -- or never realizing that a wheel would help.",
      "id": "4761caef14aebb2b81d6c370d1c1f1e1"
    },
    {
      "type": "html",
      "text": "\nWhat do other professions have that we don't?  See [[Engineering Envy]].",
      "id": "0e90a6419fb03360d55967684bbbd1fc"
    },
    {
      "type": "html",
      "text": "--[[Betsy Hanes Perry]] ",
      "id": "106774ccfaa6c0fe5607de51d744d509"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "dbabc894e300a20a8caaf526e0901fd3"
    },
    {
      "type": "html",
      "text": "When trying to work out confusing elements of a design, I fall back on storytelling almost immediately.  \"Programming\" sounds like writing solid code to some people, so perhaps storytelling doesn't work there, but I certainly believe in [[Analysis As Storytelling]].",
      "id": "62bb771e60c0958bc402a076b6dd33bc"
    },
    {
      "type": "html",
      "text": "--[[Brian Schuth]]",
      "id": "6eba90c372d4739467d08d6de1a9e96a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "dbabc894e300a20a8caaf526e0901fd3"
    },
    {
      "type": "html",
      "text": "We do not rely just on analogies - we still have actual examples.  An actual example can be as simple as seeing a screenshot or code example, and comparing it's ease of use to some other tool. If the two tools both have advantages, then we've successfully proven that both are useful and a viable option.  If one is proven to get the job faster for certain things, and the other is proven to get the job done faster in other areas, then someone can pick and choose which tool suits the job. The receiver of information does not always need analogies, but real world examples of why, and how. If we've just talked about other things in life using analogies, it's not as likely to get across to the receiver as using a real world situation where A used B to get C done.",
      "id": "c07b222842f18af5f6605515e46cc765"
    },
    {
      "type": "html",
      "text": "\nWe need to see more examples of why SomethingA is so better than SomethingB. If there aren't any examples, then maybe the analogies will not get through. I've tried analogies, but I always end up using real examples if I really want to get a point across. I'd like a code example, screenshot, and a description, rather than I would purely a description or opinion. We'd rather see some code being put to use than I would <i>hear</i> about all the good things it <i>could</i> or it <i>might</i> do in relation to an <i>orange</i> or <i>pizza</i>. ",
      "id": "2e10b897499c74896e04d07aef8c8fb4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "dbabc894e300a20a8caaf526e0901fd3"
    },
    {
      "type": "html",
      "text": "Maybe:",
      "id": "74d930611e7b14fca420c68c1a323491"
    },
    {
      "type": "html",
      "text": " [[Analysis Is Journalism]]",
      "id": "a32254feb58b96dafd6ed434ba01d565"
    },
    {
      "type": "html",
      "text": " [[Design Is Engineering]]",
      "id": "e591e97876ec285b82e528bee4582a45"
    },
    {
      "type": "html",
      "text": " [[Programming Is Art]]",
      "id": "880ec94fddcaa18dce9cdbc66521e97e"
    },
    {
      "type": "html",
      "text": " [[Programming Is Theology]]",
      "id": "ba415a10a0e8be5482ae6bb17f43136d"
    },
    {
      "type": "html",
      "text": " [[Debugging Is Detective Work]]",
      "id": "8d1f33422483ea4fcf4aaef126fbae88"
    },
    {
      "type": "html",
      "text": " [[Software Engineering Is Mostly About Psychology]]",
      "id": "49111d0f0dae51db1503c67c63045ae0"
    },
    {
      "type": "html",
      "text": " [[Success Requires Persistance]]",
      "id": "5948af1f41602097ca61508bef8dca2c"
    },
    {
      "type": "html",
      "text": "<i>For more possibilities, see [[Purpose Of Programming]].</i>",
      "id": "5c71694bd81d1b22e35c87570bfda923"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "dbabc894e300a20a8caaf526e0901fd3"
    },
    {
      "type": "html",
      "text": "Didn't we programmers just start out as apprentices, helping our \"masters\" as Junior Programmers, until we rose up through the ranks?  Don't we work in guilds?  ",
      "id": "b129eb05d02700eb08cd6ac94959badf"
    },
    {
      "type": "html",
      "text": "\nTo me, seems more like the process of training doctors than reporters.  Only, our patients evolve a lot more quickly.",
      "id": "d8d91dc2e599bcca399b9c8f0af45cc5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "dbabc894e300a20a8caaf526e0901fd3"
    },
    {
      "type": "html",
      "text": "Analogies are what human brains construct in order to keep developing an understanding of the Universe.P lease visualize the evolution of programming as a contributive process where more and more elements take place. First, it was all within the sphere of expert mathematicians. Progressively, the affairs of programming involve as well other disciplines, such as the social sciences (anthropology, psichology, law & politics), arts (music, graphic design, animation), economy (e-commerce), even fashion (the cool factor). In the beginning the programmer was rowing alone on a small boat. Now, cyberspace is becoming a huge cruise, where so many other skills are also involved.",
      "id": "42032f48b3a8bf899ea93f6f8525dadd"
    },
    {
      "type": "html",
      "text": "\nDaniel Henry Thomas",
      "id": "930484295049f13d0aef0e910260061f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "dbabc894e300a20a8caaf526e0901fd3"
    },
    {
      "type": "html",
      "text": "Perhaps we need to get back on track here and return to the discussion of discipline. As an engineer I view the development of software as simply another step towards solving a system. Systems require solutions that are composed of many more components than just the software. Those of us who are [[Justa Programmer]] may not see it that way, but when one looks at the Big Picture® one sees that this is really the case.",
      "id": "3ba1916eb0ce08de0bb0bc05d7c3a77b"
    },
    {
      "type": "html",
      "text": "\nTherefore, we need to analyze our development of software as a component of \"the\" solution, and not as the entirety of it. Even if I work on a DLL to provide services to a much larger application I still need to consider my work in relation to the rest of the system. Yeah, my contract says that I will deliver such-and-such functionality with so-and-so interfaces, but my discipline as an engineer requires that my (intermediate) solution fits into the overall system.",
      "id": "5a32a4cab0a4cd4648b77a2eeaf86dab"
    },
    {
      "type": "html",
      "text": "\nLikewise, if I am charged with solving a system that requires electronic, mechanical, or other components then I need to analyze and design my components and the separation of duties appropriately. If I can't figure this stuff out by myself then I must call upon other professionals who can provide the expertise to do so.",
      "id": "0af359e4af59d482935d0d78f8f5a780"
    },
    {
      "type": "html",
      "text": "\nSo, what makes our software engineering discipline any different than, say, mechanical engineering? Or electronics? Or pneumatics, or hydraulics, or anything else? Just because we are dealing with esoterica doesn't mean that the discipline of software engineering should be any different from that involving the mundane. Professionalism is professionalism.",
      "id": "3b3489abf2ec014d7b8164ad53cac9fa"
    },
    {
      "type": "html",
      "text": "<i>What is missing is one of two things:</i>",
      "id": "1779af36fc9f0fa90db28db1f0a35103"
    },
    {
      "type": "html",
      "text": " A \"standards body\" that dictates \"best practices\".",
      "id": "65307f42ea9598a0976758d14dc63498"
    },
    {
      "type": "html",
      "text": " An agreed-upon and codified (objective) way to test \"best design\". ",
      "id": "96c24369bb2733b37988309629f4fe4e"
    },
    {
      "type": "html",
      "text": "<b>Hmm.</b> I'm not all that sure that I'd settle for the dictates of some standards body. Otherwise we might all end up being measured by SEI CMM kaka or something along those lines. The discipline of software creation should be as close to other engineering disciplines as it can be made to be. \"Best\" becomes rather difficult to define when you ask any engineering professional about widely differing challenges within that field. How is software development any different?",
      "id": "e1cd33d038416853cba13ed4a3cfda16"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "dbabc894e300a20a8caaf526e0901fd3"
    },
    {
      "type": "html",
      "text": "See: [[New Analogies For Software]], [[Ink Blot Software Engineering]], [[Software Gives Us God Like Powers]], [[Software Engineering Criticism]], [[Evidence Eras]], [[Great Lisp War]]",
      "id": "7fedffa13877b28e66c7c6e70f505934"
    },
    {
      "type": "html",
      "text": "\n[[Category Professionalism]], [[Category Subjectivity And Relativism]] ",
      "id": "7f1d9a5cdcf6023ed98f7506ad44f1b1"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?DisciplineEnvy c2.com]",
      "id": "47f636bedc53ad02aeba3b17745cdd0b"
    }
  ],
  "journal": [
    {
      "date": 1419355023000,
      "id": "d729680f1c161985493f0858d5892c6b",
      "type": "create",
      "item": {
        "title": "Discipline Envy",
        "story": [
          {
            "type": "html",
            "text": "We want [[Software Engineering]] to be like math; instead it is turning out to better resemble the \"soft disciplines\" of psychology, journalism, etc.",
            "id": "d8d43944c441f466609085639315529d"
          },
          {
            "type": "html",
            "text": "<i>Interestingly, in the Dewey Decimal System of classification, Computing appears in section 001 (a subcategory of 000 - General Works). It does not appear in either section 500 (Pure Sciences) or 600 (Technology (Applied Sciences)). So, according to the original classifiers, Computing is not a science!</i> Source: [http://lib.sdstate.edu/lib02/dewey.html lib.sdstate.edu]",
            "id": "3e9599e965d58bffc2b472a82c476caf"
          },
          {
            "type": "html",
            "text": "{Bear in mind that not everyone wants software engineering to be like math! Some of us are very pleased to see the cold equations being checked and driven back, at least in one area...}",
            "id": "69bba5c3188cf39ee24149a6c3ca56a8"
          },
          {
            "type": "html",
            "text": "[I think the original poster means that [[Software Engineering]] should be rigorous like electrical engineering, rather than fluffy and amorphous.  That doesn't mean [[Software Engineering]] needs to be mathematical, just that it should be logical and informed by reason, not whim.]",
            "id": "f00ba4542f6cc1c9f8a06b4b3788c8b8"
          },
          {
            "type": "html",
            "text": "{That makes sense.}",
            "id": "61c973b04a3c7706c6e162147ccdb228"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "dbabc894e300a20a8caaf526e0901fd3"
          },
          {
            "type": "html",
            "text": "<i>An argument based on analogy is like a house built on sand.</i>",
            "id": "6e657fb2fe5de77ecda8243f2f76e93b"
          },
          {
            "type": "html",
            "text": "\nThe programming discipline has suffered a long term identity crisis.\nIt never seems happy to be itself but instead pretends to be the\ndiscipline it serves at the moment, or the discipline from which it has\ndrawn the most members.  First our discipline wanted to be like\nmathematics.  Oh how nice it is to reason with artifacts of pure\nthought.  Then we were a science, off on a voyage of discovery with\nthe scientific method at our side.  Now we've matured to engineers,\nliberated by certified processes and writing our handbook.",
            "id": "eb36fb9b0a60270afeb6dedbd2f3ee83"
          },
          {
            "type": "html",
            "text": "\nI don't believe it.  When I stoop to analogy I pick journalism.  Hey, like us, the journalism grunts are idolized and reviled at the same time and all work under deadlines.  And we will be a lot better off when we let our young whips design the systems and make our old sages do editorial maintenance. Unlike journalism, we promote the wrong direction.",
            "id": "6597f2fab1ef98635c26fb209e1eaf44"
          },
          {
            "type": "html",
            "text": "\nBut that's analogy.  Instead we should study our own.  Instead of throwing anchors out to established practice, let's find the fastest among us and hitch on to them.  That's what I want from our investment in patterns.  I move fast and I want to move faster. ",
            "id": "e1a6f61fb9c98bab9cc0e4c057669415"
          },
          {
            "type": "html",
            "text": "-- [[Ward Cunningham]]",
            "id": "b50fe01327742af6377376eabc3a3a38"
          },
          {
            "type": "html",
            "text": "<i>The problem with 'hitching' a ride with the 'fastest' amongst us is that the vast majority cannot be absolutely sure 'we' are moving in the right direction.  The direction becomes a matter of rhetoric and faith instead of a matter of evidence and proof.  At some point that direction is questioned, as evidenced by the recurring software crisis and resulting paradigm shifts.   We need to follow the most effective among us, the ones that can balance the three typical project driving forces: speed, cost, correctness.</i> -- [[Martin Spamer]]",
            "id": "1822f3d7b22aa2f9e56954332d0b4429"
          },
          {
            "type": "html",
            "text": "<i>The problem with complaining about analogies is that they're all we have to live with, for now. How else to explain our discipline, to non-members, other than by analogy? (See [[Metaphors We Live By]].)</i>",
            "id": "789ddf590659fd29d42380e72b4922c2"
          },
          {
            "type": "html",
            "text": "\nThe roles people play within a development team very much depend on their choice of analogy. \nI think of programming like story-telling. \nOr maybe like acting. The point is that, above and beyond questions of efficiency and performance, good design requires that we be able to empathize with our objects. Otherwise we will no be able to communicate the design to other people. That would bye-bye to good implementations, bye-bye to extensibility, bye-bye to object reuse, bye-bye to all those virtues that are vague and fuzzy but nonetheless real. ",
            "id": "0151db44b2a3d1eb83ae7c17a952e1f1"
          },
          {
            "type": "html",
            "text": "\nI design things and then I walk around asking questions like ...",
            "id": "1e30daa91611ede009cf80394d5eae4c"
          },
          {
            "type": "html",
            "text": " Why does this object care? and",
            "id": "7f522fc6863744e8e94a2518b21b3a85"
          },
          {
            "type": "html",
            "text": " Why is it involved?\nI could easily see me asking ...",
            "id": "f4231707aab2257fd73429efabc87528"
          },
          {
            "type": "html",
            "text": " What's its motivation?",
            "id": "920132349478c86846a59ec8dc447bd4"
          },
          {
            "type": "html",
            "text": " What's its background?",
            "id": "27c68779ad0b5f5163884749cb88c582"
          },
          {
            "type": "html",
            "text": " How did it get involved in this situation?\nI like each thread to tell a story. If you name member functions well, it should be fairly easy to transform the \nthread of execution into a simple story. ",
            "id": "e96409f23d6df930aec6d0cfac6b3fa0"
          },
          {
            "type": "html",
            "text": "\nOn the other hand, I work with people who see programming as engineering. They tend to ask different sorts of questions. ",
            "id": "a92b2e066d9c01e2178b8c10c23b5003"
          },
          {
            "type": "html",
            "text": " How can this object do its task better? or ",
            "id": "f2cf12c79c1878426142e5b21f5d11fb"
          },
          {
            "type": "html",
            "text": " What's the cost of doing it that way?\nGood questions and important questions. Just not my questions. ",
            "id": "2d10613f3cdc32566d50bd2f3be53d2f"
          },
          {
            "type": "html",
            "text": "-- [[William Grosso]]",
            "id": "75555913b4f94ae46ce72ebc0c057402"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "dbabc894e300a20a8caaf526e0901fd3"
          },
          {
            "type": "html",
            "text": "Thanks, William.  I swallowed what I was about to say.  Now I'll try to restate it.  Analogies are not all we have.  We have objective events and distinct personal sensations.  While I am programming, I do not think, \"I am being a journalist / engineer / scientist.\"  I am simply putting something together.  We could, as Ward suggests, start building up a vocabulary for those events and sensations.  Every part of a vocabulary comes from somewhere else, but the putting together of it can become the way of talking about software without using analogy.  Use direct description, in other words, instead of circumlocutions and analogies.  ",
            "id": "844e557e46ada77911d8a985204502f2"
          },
          {
            "type": "html",
            "text": "\nThat having been said, it is clear that I borrow a persona when talking about design to another person, or to myself out loud.  \nAnd the persona I choose matters.  Exactly as you described about the would-be scientist, or would-be engineer, or would-be behaviorist.  So I regularly confuse my new-to-OO colleagues by asking how it <i>feels</i> to be this object with those responsibilities, and such like questions.  \nThey live inside a different sort of dialogue about their design.  They want it 3rd-person, impartial, objective, measurable.  I like it subjective, comfortable, and measured in a very few ways.",
            "id": "285e806cbfc526ec1bd8e9528bca0fa5"
          },
          {
            "type": "html",
            "text": "\nThat was nice, your bringing in the persona issue, because that does come from analogy, even if talking about the profession is done with direct vocabulary.  For each analogy about the profession, it is good to see what you can learn and borrow, and then go back to direct vocabulary.",
            "id": "848e309bdf824874d2031f3078577dc7"
          },
          {
            "type": "html",
            "text": "-- [[Alistair Cockburn]]",
            "id": "cea150023269ae115b8f027cf1538ccf"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "dbabc894e300a20a8caaf526e0901fd3"
          },
          {
            "type": "html",
            "text": "I use analogy to ask \"What can I steal?\"  Programming isn't architecture, but some tricks that work for architects may also work for programmers.  I agree that the danger of metaphor is the insistence on a one-to-one mapping.  The danger of no metaphor is that you wind up reinventing the wheel -- or never realizing that a wheel would help.",
            "id": "4761caef14aebb2b81d6c370d1c1f1e1"
          },
          {
            "type": "html",
            "text": "\nWhat do other professions have that we don't?  See [[Engineering Envy]].",
            "id": "0e90a6419fb03360d55967684bbbd1fc"
          },
          {
            "type": "html",
            "text": "--[[Betsy Hanes Perry]] ",
            "id": "106774ccfaa6c0fe5607de51d744d509"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "dbabc894e300a20a8caaf526e0901fd3"
          },
          {
            "type": "html",
            "text": "When trying to work out confusing elements of a design, I fall back on storytelling almost immediately.  \"Programming\" sounds like writing solid code to some people, so perhaps storytelling doesn't work there, but I certainly believe in [[Analysis As Storytelling]].",
            "id": "62bb771e60c0958bc402a076b6dd33bc"
          },
          {
            "type": "html",
            "text": "--[[Brian Schuth]]",
            "id": "6eba90c372d4739467d08d6de1a9e96a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "dbabc894e300a20a8caaf526e0901fd3"
          },
          {
            "type": "html",
            "text": "We do not rely just on analogies - we still have actual examples.  An actual example can be as simple as seeing a screenshot or code example, and comparing it's ease of use to some other tool. If the two tools both have advantages, then we've successfully proven that both are useful and a viable option.  If one is proven to get the job faster for certain things, and the other is proven to get the job done faster in other areas, then someone can pick and choose which tool suits the job. The receiver of information does not always need analogies, but real world examples of why, and how. If we've just talked about other things in life using analogies, it's not as likely to get across to the receiver as using a real world situation where A used B to get C done.",
            "id": "c07b222842f18af5f6605515e46cc765"
          },
          {
            "type": "html",
            "text": "\nWe need to see more examples of why SomethingA is so better than SomethingB. If there aren't any examples, then maybe the analogies will not get through. I've tried analogies, but I always end up using real examples if I really want to get a point across. I'd like a code example, screenshot, and a description, rather than I would purely a description or opinion. We'd rather see some code being put to use than I would <i>hear</i> about all the good things it <i>could</i> or it <i>might</i> do in relation to an <i>orange</i> or <i>pizza</i>. ",
            "id": "2e10b897499c74896e04d07aef8c8fb4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "dbabc894e300a20a8caaf526e0901fd3"
          },
          {
            "type": "html",
            "text": "Maybe:",
            "id": "74d930611e7b14fca420c68c1a323491"
          },
          {
            "type": "html",
            "text": " [[Analysis Is Journalism]]",
            "id": "a32254feb58b96dafd6ed434ba01d565"
          },
          {
            "type": "html",
            "text": " [[Design Is Engineering]]",
            "id": "e591e97876ec285b82e528bee4582a45"
          },
          {
            "type": "html",
            "text": " [[Programming Is Art]]",
            "id": "880ec94fddcaa18dce9cdbc66521e97e"
          },
          {
            "type": "html",
            "text": " [[Programming Is Theology]]",
            "id": "ba415a10a0e8be5482ae6bb17f43136d"
          },
          {
            "type": "html",
            "text": " [[Debugging Is Detective Work]]",
            "id": "8d1f33422483ea4fcf4aaef126fbae88"
          },
          {
            "type": "html",
            "text": " [[Software Engineering Is Mostly About Psychology]]",
            "id": "49111d0f0dae51db1503c67c63045ae0"
          },
          {
            "type": "html",
            "text": " [[Success Requires Persistance]]",
            "id": "5948af1f41602097ca61508bef8dca2c"
          },
          {
            "type": "html",
            "text": "<i>For more possibilities, see [[Purpose Of Programming]].</i>",
            "id": "5c71694bd81d1b22e35c87570bfda923"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "dbabc894e300a20a8caaf526e0901fd3"
          },
          {
            "type": "html",
            "text": "Didn't we programmers just start out as apprentices, helping our \"masters\" as Junior Programmers, until we rose up through the ranks?  Don't we work in guilds?  ",
            "id": "b129eb05d02700eb08cd6ac94959badf"
          },
          {
            "type": "html",
            "text": "\nTo me, seems more like the process of training doctors than reporters.  Only, our patients evolve a lot more quickly.",
            "id": "d8d91dc2e599bcca399b9c8f0af45cc5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "dbabc894e300a20a8caaf526e0901fd3"
          },
          {
            "type": "html",
            "text": "Analogies are what human brains construct in order to keep developing an understanding of the Universe.P lease visualize the evolution of programming as a contributive process where more and more elements take place. First, it was all within the sphere of expert mathematicians. Progressively, the affairs of programming involve as well other disciplines, such as the social sciences (anthropology, psichology, law & politics), arts (music, graphic design, animation), economy (e-commerce), even fashion (the cool factor). In the beginning the programmer was rowing alone on a small boat. Now, cyberspace is becoming a huge cruise, where so many other skills are also involved.",
            "id": "42032f48b3a8bf899ea93f6f8525dadd"
          },
          {
            "type": "html",
            "text": "\nDaniel Henry Thomas",
            "id": "930484295049f13d0aef0e910260061f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "dbabc894e300a20a8caaf526e0901fd3"
          },
          {
            "type": "html",
            "text": "Perhaps we need to get back on track here and return to the discussion of discipline. As an engineer I view the development of software as simply another step towards solving a system. Systems require solutions that are composed of many more components than just the software. Those of us who are [[Justa Programmer]] may not see it that way, but when one looks at the Big Picture® one sees that this is really the case.",
            "id": "3ba1916eb0ce08de0bb0bc05d7c3a77b"
          },
          {
            "type": "html",
            "text": "\nTherefore, we need to analyze our development of software as a component of \"the\" solution, and not as the entirety of it. Even if I work on a DLL to provide services to a much larger application I still need to consider my work in relation to the rest of the system. Yeah, my contract says that I will deliver such-and-such functionality with so-and-so interfaces, but my discipline as an engineer requires that my (intermediate) solution fits into the overall system.",
            "id": "5a32a4cab0a4cd4648b77a2eeaf86dab"
          },
          {
            "type": "html",
            "text": "\nLikewise, if I am charged with solving a system that requires electronic, mechanical, or other components then I need to analyze and design my components and the separation of duties appropriately. If I can't figure this stuff out by myself then I must call upon other professionals who can provide the expertise to do so.",
            "id": "0af359e4af59d482935d0d78f8f5a780"
          },
          {
            "type": "html",
            "text": "\nSo, what makes our software engineering discipline any different than, say, mechanical engineering? Or electronics? Or pneumatics, or hydraulics, or anything else? Just because we are dealing with esoterica doesn't mean that the discipline of software engineering should be any different from that involving the mundane. Professionalism is professionalism.",
            "id": "3b3489abf2ec014d7b8164ad53cac9fa"
          },
          {
            "type": "html",
            "text": "<i>What is missing is one of two things:</i>",
            "id": "1779af36fc9f0fa90db28db1f0a35103"
          },
          {
            "type": "html",
            "text": " A \"standards body\" that dictates \"best practices\".",
            "id": "65307f42ea9598a0976758d14dc63498"
          },
          {
            "type": "html",
            "text": " An agreed-upon and codified (objective) way to test \"best design\". ",
            "id": "96c24369bb2733b37988309629f4fe4e"
          },
          {
            "type": "html",
            "text": "<b>Hmm.</b> I'm not all that sure that I'd settle for the dictates of some standards body. Otherwise we might all end up being measured by SEI CMM kaka or something along those lines. The discipline of software creation should be as close to other engineering disciplines as it can be made to be. \"Best\" becomes rather difficult to define when you ask any engineering professional about widely differing challenges within that field. How is software development any different?",
            "id": "e1cd33d038416853cba13ed4a3cfda16"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "dbabc894e300a20a8caaf526e0901fd3"
          },
          {
            "type": "html",
            "text": "See: [[New Analogies For Software]], [[Ink Blot Software Engineering]], [[Software Gives Us God Like Powers]], [[Software Engineering Criticism]], [[Evidence Eras]], [[Great Lisp War]]",
            "id": "7fedffa13877b28e66c7c6e70f505934"
          },
          {
            "type": "html",
            "text": "\n[[Category Professionalism]], [[Category Subjectivity And Relativism]] ",
            "id": "7f1d9a5cdcf6023ed98f7506ad44f1b1"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?DisciplineEnvy c2.com]",
            "id": "47f636bedc53ad02aeba3b17745cdd0b"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1641307254657
    },
    {
      "type": "edit",
      "id": "285e806cbfc526ec1bd8e9528bca0fa5",
      "item": {
        "type": "html",
        "text": "That having been said, it is clear that I borrow a persona when talking about design to another person, or to myself out loud.  \nAnd the persona I choose matters.  Exactly as you described about the would-be scientist, or would-be engineer, or would-be behaviorist.  So I regularly confuse my new-to-OO colleagues by asking how it <i>feels</i> to be this object with those responsibilities, and such like questions.  \nThey live inside a different sort of dialogue about their design.  They want it 3rd-person, impartial, objective, measurable.  I like it subjective, comfortable, and measured in a very few ways.",
        "id": "285e806cbfc526ec1bd8e9528bca0fa5"
      },
      "date": 1641307552308
    }
  ]
}