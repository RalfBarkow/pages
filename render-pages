{
  "title": "Render Pages",
  "story": [
    {
      "type": "paragraph",
      "id": "49689d9005f41cb0",
      "text": "Refresh will fetch a page and use it to fill a dom element that has been ready made to hold it. Rendering includes fetching and running the necessary plugins."
    },
    {
      "type": "paragraph",
      "id": "984b9b552cb92d2e",
      "text": "Aside: The client-side code is organized as a collection of modules that exist as coffeescript in lib. Grunt compiles these and then builds client.js with browserify. Here we refer to lib modules as if they are close friends."
    },
    {
      "type": "markdown",
      "id": "65b2de4a3dc33e5f",
      "text": "* [https://github.com/fedwiki/wiki-client/blob/adfe0d75499b6401b7c9e600d2bc21ab686a7b36/lib/legacy.coffee#L188-L193 legacy.coffee]\n\n* [https://github.com/fedwiki/wiki-client/blob/adfe0d75499b6401b7c9e600d2bc21ab686a7b36/lib/refresh.coffee#L223-L253 refresh.coffee]"
    },
    {
      "type": "paragraph",
      "id": "d575748c185f7aa0",
      "text": "The server fills its initial (and only) html page with empty divs, one for each wiki page to appear in the lineup. The last few lines of legacy will boot up the refresh cycle for each wiki page on jquery dom ready."
    },
    {
      "type": "code",
      "id": "440d0f0d1453acef",
      "text": "  $ ->\n    state.first()\n    $('.page').each refresh.cycle\n    active.set($('.page').last())\n"
    },
    {
      "type": "paragraph",
      "id": "23839cbc77a4ba16",
      "text": "Try adding debugger to this handler and step briefly into each of these calls. This will be easier if you add a breakpoint to refresh.cycle rather than stepping through the jquery loop."
    },
    {
      "type": "paragraph",
      "id": "7a296b99e2a7d00a",
      "text": "State manages the browser's state used by the back button. Active highlights an active page and works the side-scrolling in response to arrow keys. Refresh does the heavy lifting fetching and rendering json into the dom."
    },
    {
      "type": "markdown",
      "id": "fa4e1584f10b04e4",
      "text": "# Get"
    },
    {
      "type": "paragraph",
      "id": "44f9240bd1fa76e6",
      "text": "The refresh cycle begins by fetching the wiki page json from any of a number of locations. We provide the pageHandler an object with various facts about the desired page and a couple of async handlers for successful and unsuccessful gets."
    },
    {
      "type": "code",
      "id": "70c697990646d51b",
      "text": "  pageHandler.get\n    whenGotten: whenGotten\n    whenNotGotten: createGhostPage\n    pageInformation: pageInformation\n"
    },
    {
      "type": "paragraph",
      "id": "70b522cb7e961ff6",
      "text": "If the pageHandler fails we create a ghost page that offers to create the missing page and post it to the server."
    },
    {
      "type": "paragraph",
      "id": "b123158425f172c8",
      "text": "Try setting a breakpoint here and then click a link to a non-existent page. Here is what you will see."
    },
    {
      "type": "paragraph",
      "id": "cc88f21673e966a8",
      "text": "We title the ghost page based on what we can find of the link that begot it. If this fails, we use the slug as title. Yuck."
    },
    {
      "type": "paragraph",
      "id": "e095ee7b7bfc78ba",
      "text": "We rummage through the sitemaps of our neighborhood to see if the page might exist there. PageHandler follows some strict rules for its search. Here we can be more generous because we're talking to the user."
    },
    {
      "type": "paragraph",
      "id": "8005a9da0fa41d9e",
      "text": "We construct the ghost page with all this advice and one unusual core plugin, future. Future makes the offer to create the desired page. So far we have just made the page that makes this offer."
    },
    {
      "type": "paragraph",
      "id": "514c3adaf73bcf59",
      "text": "See also [[Where Pages Live]]"
    },
    {
      "type": "markdown",
      "id": "985fdd0a9cb97f18",
      "text": "# Build"
    },
    {
      "type": "paragraph",
      "id": "fad66e648d3f5ea8",
      "text": "Whether gotten or constructed, we now have page content to be rendered into the dom. The gotten path adds the extra step of registering new neighbors, sites mentioned in the page json."
    },
    {
      "type": "paragraph",
      "id": "e285b6fb0ce1a7a3",
      "text": "Aside: Pages variously exist as json strings, the objects constructed from those strings, and more recently, the pageObjects that bundle pages with site details about their source. The longish name reminds us that this is the preferred representation while some points in the codebase still handle unbundled pages."
    },
    {
      "type": "paragraph",
      "id": "d25c59b8bba8dd8a",
      "text": "The refresh module exposes two additional build entry points besides cycle where we started. We travel through these, marking the page div in various ways, before getting into serious building which starts by discarding anything that might be left in $page."
    },
    {
      "type": "code",
      "id": "0b4c3287a38cf620",
      "text": "$page.empty()"
    },
    {
      "type": "paragraph",
      "id": "3465ee26d772f4e8",
      "text": "We prefer the convention of naming variables that hold dom elements, usually jquery wrappers, with dollar signs. Thus $page is a handle on the dom structure of the page."
    },
    {
      "type": "paragraph",
      "id": "11c1fd9f4ccd8e36",
      "text": "Try finding calls to buildPage and rebuildPage in other lib modules. Expect to find event handlers of various kinds."
    },
    {
      "type": "paragraph",
      "id": "a9116f2e75d0af4e",
      "text": "Building proceeds to add a layer of divs under $page that will be filled in and linked up with a series of emit-something calls."
    },
    {
      "type": "code",
      "id": "65cfa1387ee497b4",
      "text": "$twins,\n$header,\n$story,\n$journal,\n$footer"
    },
    {
      "type": "paragraph",
      "id": "cddeda7d193e8a84",
      "text": "We often register event handlers on dom objects as they are built using calls on init-something functions. We now prefer jquery's event delegation mechanism and have seen delegates collect in the one-time initialization of the legacy module, hopefully not their final resting place."
    },
    {
      "type": "markdown",
      "id": "133543dbfa5d71a1",
      "text": "# Story"
    },
    {
      "type": "paragraph",
      "id": "163fd58db579dcab",
      "text": "Rendering the page's story is made complicated by the async calls needed to load plugins and possible async calls they might make in order complete their rendering. We delegate iterating over story items and provide a callback that does the actual work."
    },
    {
      "type": "code",
      "id": "e3588a1e4c0c0a4e",
      "text": "  pageObject.seqItems (item, done) ->\n    $item = $ \"\"\"<div class=\"item #{item.type}\" ... \n    $story.append $item\n    plugin.do $item, item, done\n"
    },
    {
      "type": "paragraph",
      "id": "0b836bfbd05153f9",
      "text": "The plugin module handles loading and caching plugin javascript from the origin server. It creates a reasonable substitute when a plugin doesn't exist or fails to emit successfully."
    },
    {
      "type": "paragraph",
      "id": "b5805a97ebed508e",
      "text": "A plugin is expected to emit dom elements before binding to others. We intend for this sequence to be asynchronous with all emits completed before binds are started. Plugins that can't emit synchronously must provide a callback as the third argument. We respect this protocol but don't yet separate emits and binds."
    },
    {
      "type": "paragraph",
      "id": "82220b6afcf61903",
      "text": "Try locating this logic inside the plugin module."
    },
    {
      "type": "code",
      "id": "65a3ff190f84b3b3",
      "text": "      if script.emit.length > 2\n        script.emit div, item, ->\n          script.bind div, item\n          done()\n      else\n        script.emit div, item\n        script.bind div, item\n        done()\n"
    },
    {
      "type": "markdown",
      "id": "5ece7ee245e20ac0",
      "text": "# Reflection"
    },
    {
      "type": "paragraph",
      "id": "0fef0e06fd44a214",
      "text": "Wiki finds and renders pages from idiomatic json as one step of hypertext browsing. We defer just how linking works for a subsequent hack. Rendering leaves many clues in both the dom and model object to guide subsequent event handlers."
    },
    {
      "type": "paragraph",
      "id": "2db6775e75034d5a",
      "text": "Wiki's page rendering logic establishes a contract with plugins that allows them to work within the dom so as to interact with the user and other plugins by convention more than by strict pathways defined in wiki's core."
    },
    {
      "type": "paragraph",
      "id": "d26042be509e3e2d",
      "text": "As some of the oldest and most frequently refactored code one can see in refresh the work of many hands in many styles. For now be content to know what is here. Our approach to refactoring will be left for a later hack."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Render Pages",
        "story": []
      },
      "date": 1446218112816
    },
    {
      "item": {
        "type": "factory",
        "id": "49689d9005f41cb0"
      },
      "id": "49689d9005f41cb0",
      "type": "add",
      "date": 1446218283377
    },
    {
      "type": "edit",
      "id": "49689d9005f41cb0",
      "item": {
        "type": "paragraph",
        "id": "49689d9005f41cb0",
        "text": "Refresh will fetch a page and use it to fill a dom element that has been ready made to hold it."
      },
      "date": 1446218323293
    },
    {
      "item": {
        "type": "factory",
        "id": "d575748c185f7aa0"
      },
      "id": "d575748c185f7aa0",
      "type": "add",
      "after": "49689d9005f41cb0",
      "date": 1446218360961
    },
    {
      "type": "edit",
      "id": "d575748c185f7aa0",
      "item": {
        "type": "paragraph",
        "id": "d575748c185f7aa0",
        "text": "For historical reasons the server fills its initial html page with empty divs, one for each page to appear in a lineup."
      },
      "date": 1446218451728
    },
    {
      "type": "edit",
      "id": "d575748c185f7aa0",
      "item": {
        "type": "paragraph",
        "id": "d575748c185f7aa0",
        "text": "For historical reasons the server fills its initial (and only) html page with empty divs, one for each wiki page to appear in lineup. The last few lines of legacy.coffee boot up from there on jquery dom ready."
      },
      "date": 1446218582786
    },
    {
      "item": {
        "type": "factory",
        "id": "440d0f0d1453acef"
      },
      "id": "440d0f0d1453acef",
      "type": "add",
      "after": "d575748c185f7aa0",
      "date": 1446218620961
    },
    {
      "type": "edit",
      "id": "440d0f0d1453acef",
      "item": {
        "type": "code",
        "id": "440d0f0d1453acef",
        "text": "  $ ->\n    state.first()\n    $('.page').each refresh.cycle\n    active.set($('.page').last())\n"
      },
      "date": 1446218626695
    },
    {
      "type": "edit",
      "id": "d575748c185f7aa0",
      "item": {
        "type": "paragraph",
        "id": "d575748c185f7aa0",
        "text": "The server fills its initial (and only) html page with empty divs, one for each wiki page to appear in the lineup. The last few lines of legacy.coffee boot up from there on jquery dom ready."
      },
      "date": 1446218688587
    },
    {
      "item": {
        "type": "factory",
        "id": "78306e6edffd5a95"
      },
      "id": "78306e6edffd5a95",
      "type": "add",
      "after": "440d0f0d1453acef",
      "date": 1446218758320
    },
    {
      "type": "remove",
      "id": "78306e6edffd5a95",
      "date": 1446218779491
    },
    {
      "type": "edit",
      "id": "d575748c185f7aa0",
      "item": {
        "type": "paragraph",
        "id": "d575748c185f7aa0",
        "text": "The server fills its initial (and only) html page with empty divs, one for each wiki page to appear in the lineup. The last few lines of legacy boot up from there on jquery dom ready."
      },
      "date": 1446218813137
    },
    {
      "type": "add",
      "id": "984b9b552cb92d2e",
      "item": {
        "type": "paragraph",
        "id": "984b9b552cb92d2e",
        "text": "The client-side code is organized as a collection of modules that exist as coffeescript in lib. Grunt compiles these and then builds client.js with browserify. Here we refer to lib modules as if they are close friends."
      },
      "after": "49689d9005f41cb0",
      "date": 1446218987438
    },
    {
      "type": "edit",
      "id": "984b9b552cb92d2e",
      "item": {
        "type": "paragraph",
        "id": "984b9b552cb92d2e",
        "text": "Aside: The client-side code is organized as a collection of modules that exist as coffeescript in lib. Grunt compiles these and then builds client.js with browserify. Here we refer to lib modules as if they are close friends."
      },
      "date": 1446219003890
    },
    {
      "item": {
        "type": "factory",
        "id": "c3877d6548b826dc"
      },
      "id": "c3877d6548b826dc",
      "type": "add",
      "after": "440d0f0d1453acef",
      "date": 1446219014564
    },
    {
      "type": "remove",
      "id": "c3877d6548b826dc",
      "date": 1446219052851
    },
    {
      "type": "edit",
      "id": "d575748c185f7aa0",
      "item": {
        "type": "paragraph",
        "id": "d575748c185f7aa0",
        "text": "The server fills its initial (and only) html page with empty divs, one for each wiki page to appear in the lineup. The last few lines of legacy boot up the refresh cycle on jquery dom ready."
      },
      "date": 1446219067117
    },
    {
      "type": "edit",
      "id": "d575748c185f7aa0",
      "item": {
        "type": "paragraph",
        "id": "d575748c185f7aa0",
        "text": "The server fills its initial (and only) html page with empty divs, one for each wiki page to appear in the lineup. The last few lines of legacy boot up the refresh cycle for each on jquery dom ready."
      },
      "date": 1446219096672
    },
    {
      "type": "edit",
      "id": "d575748c185f7aa0",
      "item": {
        "type": "paragraph",
        "id": "d575748c185f7aa0",
        "text": "The server fills its initial (and only) html page with empty divs, one for each wiki page to appear in the lineup. The last few lines of legacy will boot up the refresh cycle for each wiki page on jquery dom ready."
      },
      "date": 1446219126197
    },
    {
      "item": {
        "type": "factory",
        "id": "23839cbc77a4ba16"
      },
      "id": "23839cbc77a4ba16",
      "type": "add",
      "after": "440d0f0d1453acef",
      "date": 1446219200145
    },
    {
      "type": "edit",
      "id": "23839cbc77a4ba16",
      "item": {
        "type": "paragraph",
        "id": "23839cbc77a4ba16",
        "text": "Try adding debugger to this handler and step briefly into each of these calls. "
      },
      "date": 1446219256505
    },
    {
      "type": "edit",
      "id": "23839cbc77a4ba16",
      "item": {
        "type": "paragraph",
        "id": "23839cbc77a4ba16",
        "text": "Try adding debugger to this handler and step briefly into each of these calls. This will be easier if you add a breakpoint to refresh.cycle rather than stepping through the jquery loop."
      },
      "date": 1446219318575
    },
    {
      "type": "add",
      "id": "7a296b99e2a7d00a",
      "item": {
        "type": "paragraph",
        "id": "7a296b99e2a7d00a",
        "text": "State manages the browser's state used by the back button. Active highlights an active page and works the side-scrolling in response to arrow keys. Refresh does the heavy lifting fetching and rendering json into the dom."
      },
      "after": "23839cbc77a4ba16",
      "date": 1446219540980
    },
    {
      "type": "add",
      "id": "fa4e1584f10b04e4",
      "item": {
        "type": "paragraph",
        "id": "fa4e1584f10b04e4",
        "text": "# Get"
      },
      "after": "7a296b99e2a7d00a",
      "date": 1446219866961
    },
    {
      "type": "add",
      "id": "44f9240bd1fa76e6",
      "item": {
        "type": "paragraph",
        "id": "44f9240bd1fa76e6",
        "text": "The refresh cycle begins by fetching the wiki page json from any of a number of locations."
      },
      "after": "fa4e1584f10b04e4",
      "date": 1446219949017
    },
    {
      "type": "edit",
      "id": "44f9240bd1fa76e6",
      "item": {
        "type": "paragraph",
        "id": "44f9240bd1fa76e6",
        "text": "The refresh cycle begins by fetching the wiki page json from any of a number of locations. We provide the pageHandler an object with various facts about the desired page and a couple of handlers for successful and unsuccessful gets."
      },
      "date": 1446220175534
    },
    {
      "item": {
        "type": "factory",
        "id": "70c697990646d51b"
      },
      "id": "70c697990646d51b",
      "type": "add",
      "after": "44f9240bd1fa76e6",
      "date": 1446220186332
    },
    {
      "type": "edit",
      "id": "70c697990646d51b",
      "item": {
        "type": "code",
        "id": "70c697990646d51b",
        "text": "  pageHandler.get\n    whenGotten: whenGotten\n    whenNotGotten: createGhostPage\n    pageInformation: pageInformation\n"
      },
      "date": 1446220190939
    },
    {
      "type": "edit",
      "id": "fa4e1584f10b04e4",
      "item": {
        "type": "markdown",
        "id": "fa4e1584f10b04e4",
        "text": "# Get"
      },
      "date": 1446220205572
    },
    {
      "type": "edit",
      "id": "44f9240bd1fa76e6",
      "item": {
        "type": "paragraph",
        "id": "44f9240bd1fa76e6",
        "text": "The refresh cycle begins by fetching the wiki page json from any of a number of locations. We provide the pageHandler an object with various facts about the desired page and a couple of async handlers for successful and unsuccessful gets."
      },
      "date": 1446220234130
    },
    {
      "item": {
        "type": "factory",
        "id": "70b522cb7e961ff6"
      },
      "id": "70b522cb7e961ff6",
      "type": "add",
      "after": "70c697990646d51b",
      "date": 1446220352189
    },
    {
      "type": "edit",
      "id": "70b522cb7e961ff6",
      "item": {
        "type": "paragraph",
        "id": "70b522cb7e961ff6",
        "text": "If the pageHandler fails we create a ghost page that offers to create the missing page and post it to the server. "
      },
      "date": 1446220446964
    },
    {
      "type": "edit",
      "id": "70b522cb7e961ff6",
      "item": {
        "type": "paragraph",
        "id": "70b522cb7e961ff6",
        "text": "If the pageHandler fails we create a ghost page that offers to create the missing page and post it to the server."
      },
      "date": 1446220469517
    },
    {
      "type": "add",
      "id": "cc88f21673e966a8",
      "item": {
        "type": "paragraph",
        "id": "cc88f21673e966a8",
        "text": "We title the ghost page based on what we can find of the link that begot it. If this fails, we use the slug as title. Yuck."
      },
      "after": "70b522cb7e961ff6",
      "date": 1446220581696
    },
    {
      "type": "add",
      "id": "e095ee7b7bfc78ba",
      "item": {
        "type": "paragraph",
        "id": "e095ee7b7bfc78ba",
        "text": "We rummage through the sitemaps of our neighborhood to see if the page might exist there. pageHandler follows some strict rules for its search. Here we can be more generous because we're talking to the user."
      },
      "after": "cc88f21673e966a8",
      "date": 1446220728074
    },
    {
      "type": "edit",
      "id": "e095ee7b7bfc78ba",
      "item": {
        "type": "paragraph",
        "id": "e095ee7b7bfc78ba",
        "text": "We rummage through the sitemaps of our neighborhood to see if the page might exist there. PageHandler follows some strict rules for its search. Here we can be more generous because we're talking to the user."
      },
      "date": 1446220741907
    },
    {
      "type": "add",
      "id": "8005a9da0fa41d9e",
      "item": {
        "type": "paragraph",
        "id": "8005a9da0fa41d9e",
        "text": "We construct the ghost page with all this advice and one unusual core plugin, future. Future makes the offer to create the desired page. So far we have just made the page that makes this offer."
      },
      "after": "e095ee7b7bfc78ba",
      "date": 1446220980804
    },
    {
      "type": "add",
      "id": "985fdd0a9cb97f18",
      "item": {
        "type": "paragraph",
        "id": "985fdd0a9cb97f18",
        "text": "# Build"
      },
      "after": "8005a9da0fa41d9e",
      "date": 1446220999318
    },
    {
      "type": "add",
      "id": "fad66e648d3f5ea8",
      "item": {
        "type": "paragraph",
        "id": "fad66e648d3f5ea8",
        "text": "Whether gotten or not gotten, we now have a page to be rendered into the dom."
      },
      "after": "985fdd0a9cb97f18",
      "date": 1446221031349
    },
    {
      "type": "edit",
      "id": "fad66e648d3f5ea8",
      "item": {
        "type": "paragraph",
        "id": "fad66e648d3f5ea8",
        "text": "Whether gotten or not gotten, we now have a page to be rendered into the dom. The gotten path adds the extra step of registering new neighbors that might be mentioned in the new page."
      },
      "date": 1446221147417
    },
    {
      "type": "edit",
      "id": "985fdd0a9cb97f18",
      "item": {
        "type": "markdown",
        "id": "985fdd0a9cb97f18",
        "text": "# Build"
      },
      "date": 1446221154223
    },
    {
      "type": "edit",
      "id": "49689d9005f41cb0",
      "item": {
        "type": "paragraph",
        "id": "49689d9005f41cb0",
        "text": "Refresh will fetch a page and use it to fill a dom element that has been ready made to hold it. Rendering includes fetching and running the necessary plugins."
      },
      "date": 1446221249677
    },
    {
      "type": "add",
      "id": "b123158425f172c8",
      "item": {
        "type": "paragraph",
        "id": "b123158425f172c8",
        "text": "Try setting a breakpoint here and then click a link to a non-existent page."
      },
      "after": "70b522cb7e961ff6",
      "date": 1446221391316
    },
    {
      "type": "edit",
      "id": "b123158425f172c8",
      "item": {
        "type": "paragraph",
        "id": "b123158425f172c8",
        "text": "Try setting a breakpoint here and then click a link to a non-existent page. Here is what you will see."
      },
      "date": 1446221409890
    },
    {
      "type": "add",
      "id": "e285b6fb0ce1a7a3",
      "item": {
        "type": "paragraph",
        "id": "e285b6fb0ce1a7a3",
        "text": "more soon"
      },
      "after": "fad66e648d3f5ea8",
      "date": 1446221440130
    },
    {
      "type": "add",
      "id": "514c3adaf73bcf59",
      "item": {
        "type": "paragraph",
        "id": "514c3adaf73bcf59",
        "text": "See also [[Where Pages Live]]"
      },
      "after": "8005a9da0fa41d9e",
      "date": 1446303580122
    },
    {
      "type": "edit",
      "id": "fad66e648d3f5ea8",
      "item": {
        "type": "paragraph",
        "id": "fad66e648d3f5ea8",
        "text": "Whether gotten or constructed, we now have page content to be rendered into the dom. The gotten path adds the extra step of registering new neighbors that have been mentioned in the new page."
      },
      "date": 1446306397422
    },
    {
      "type": "edit",
      "id": "fad66e648d3f5ea8",
      "item": {
        "type": "paragraph",
        "id": "fad66e648d3f5ea8",
        "text": "Whether gotten or constructed, we now have page content to be rendered into the dom. The gotten path adds the extra step of registering new neighbors, sites mentioned in the page json."
      },
      "date": 1446308978968
    },
    {
      "type": "edit",
      "id": "e285b6fb0ce1a7a3",
      "item": {
        "type": "paragraph",
        "id": "e285b6fb0ce1a7a3",
        "text": "Pages variously exist as json strings, the objects constructed from those strings, and more recently, the pageObjects that bundle pages with site details about their source."
      },
      "date": 1446309442164
    },
    {
      "type": "edit",
      "id": "e285b6fb0ce1a7a3",
      "item": {
        "type": "paragraph",
        "id": "e285b6fb0ce1a7a3",
        "text": "Pages variously exist as json strings, the objects constructed from those strings, and more recently, the pageObjects that bundle pages with site details about their source. The longish name reminds us that this is the model of a page while resident in the client."
      },
      "date": 1446309714932
    },
    {
      "type": "edit",
      "id": "e285b6fb0ce1a7a3",
      "item": {
        "type": "paragraph",
        "id": "e285b6fb0ce1a7a3",
        "text": "Pages variously exist as json strings, the objects constructed from those strings, and more recently, the pageObjects that bundle pages with site details about their source. The longish name reminds us that this is the model of a page while resident in the client, the product of a refactoring."
      },
      "date": 1446309756130
    },
    {
      "type": "edit",
      "id": "e285b6fb0ce1a7a3",
      "item": {
        "type": "paragraph",
        "id": "e285b6fb0ce1a7a3",
        "text": "Pages variously exist as json strings, the objects constructed from those strings, and more recently, the pageObjects that bundle pages with site details about their source. The longish name reminds us that this is the preferred representation while some points in the codebase still handle unbundled pages."
      },
      "date": 1446310008790
    },
    {
      "type": "edit",
      "id": "e285b6fb0ce1a7a3",
      "item": {
        "type": "paragraph",
        "id": "e285b6fb0ce1a7a3",
        "text": "Aside: Pages variously exist as json strings, the objects constructed from those strings, and more recently, the pageObjects that bundle pages with site details about their source. The longish name reminds us that this is the preferred representation while some points in the codebase still handle unbundled pages."
      },
      "date": 1446310048161
    },
    {
      "type": "add",
      "id": "d25c59b8bba8dd8a",
      "item": {
        "type": "paragraph",
        "id": "d25c59b8bba8dd8a",
        "text": "The refresh module exposes two additional entry points besides cycle where we started."
      },
      "after": "e285b6fb0ce1a7a3",
      "date": 1446311020641
    },
    {
      "type": "edit",
      "id": "d25c59b8bba8dd8a",
      "item": {
        "type": "paragraph",
        "id": "d25c59b8bba8dd8a",
        "text": "The refresh module exposes two additional build entry points besides cycle where we started. We travel through these, marking the page div in various ways, before getting on to the private workhorse,  "
      },
      "date": 1446311227612
    },
    {
      "type": "edit",
      "id": "d25c59b8bba8dd8a",
      "item": {
        "type": "paragraph",
        "id": "d25c59b8bba8dd8a",
        "text": "The refresh module exposes two additional build entry points besides cycle where we started. We travel through these, marking the page div in various ways, before getting into serious building which starts by discarding anything that might be left in $page."
      },
      "date": 1446314007309
    },
    {
      "type": "edit",
      "id": "d25c59b8bba8dd8a",
      "item": {
        "type": "paragraph",
        "id": "d25c59b8bba8dd8a",
        "text": "The refresh module exposes two additional build entry points besides cycle where we started. We travel through these, marking the page div in various ways, before getting into serious building which starts by discarding anything that might be left in $page."
      },
      "date": 1446314126815
    },
    {
      "type": "edit",
      "id": "d25c59b8bba8dd8a",
      "item": {
        "type": "paragraph",
        "id": "d25c59b8bba8dd8a",
        "text": "The refresh module exposes two additional build entry points besides cycle where we started. We travel through these, marking the page div in various ways, before getting into serious building which starts by discarding anything that might be left in $page."
      },
      "date": 1446314146222
    },
    {
      "item": {
        "type": "code",
        "id": "0b4c3287a38cf620",
        "text": "$page.empty()"
      },
      "id": "0b4c3287a38cf620",
      "type": "add",
      "after": "d25c59b8bba8dd8a",
      "date": 1446314169485
    },
    {
      "type": "edit",
      "id": "0b4c3287a38cf620",
      "item": {
        "type": "code",
        "id": "0b4c3287a38cf620",
        "text": "$page.empty()"
      },
      "date": 1446314174481
    },
    {
      "item": {
        "type": "paragraph",
        "id": "11c1fd9f4ccd8e36",
        "text": "Try finding calls to buildPage and rebuildPage in other lib modules. Expect to find event handlers of various kinds."
      },
      "id": "11c1fd9f4ccd8e36",
      "type": "add",
      "after": "0b4c3287a38cf620",
      "date": 1446314247454
    },
    {
      "type": "edit",
      "id": "11c1fd9f4ccd8e36",
      "item": {
        "type": "paragraph",
        "id": "11c1fd9f4ccd8e36",
        "text": "Try finding calls to buildPage and rebuildPage in other lib modules. Expect to find event handlers of various kinds."
      },
      "date": 1446314304237
    },
    {
      "type": "edit",
      "id": "11c1fd9f4ccd8e36",
      "item": {
        "type": "paragraph",
        "id": "11c1fd9f4ccd8e36",
        "text": "Try finding calls to buildPage and rebuildPage in other lib modules. Expect to find event handlers of various kinds."
      },
      "date": 1446314779710
    },
    {
      "type": "add",
      "id": "a9116f2e75d0af4e",
      "item": {
        "type": "paragraph",
        "id": "a9116f2e75d0af4e",
        "text": "Building proceeds to add a layer of divs under $page that will be filled in and linked up with a series of emit-something calls."
      },
      "after": "11c1fd9f4ccd8e36",
      "date": 1446315097876
    },
    {
      "type": "edit",
      "id": "a9116f2e75d0af4e",
      "item": {
        "type": "paragraph",
        "id": "a9116f2e75d0af4e",
        "text": "Building proceeds to add a layer of divs under $page that will be filled in and linked up with a series of emit-something calls."
      },
      "date": 1446315466750
    },
    {
      "item": {
        "type": "markdown",
        "id": "6a66af13e2018ead",
        "text": ""
      },
      "id": "6a66af13e2018ead",
      "type": "add",
      "after": "a9116f2e75d0af4e",
      "date": 1446315470642
    },
    {
      "type": "edit",
      "id": "6a66af13e2018ead",
      "item": {
        "type": "markdown",
        "id": "6a66af13e2018ead",
        "text": ""
      },
      "date": 1446315522282
    },
    {
      "type": "edit",
      "id": "6a66af13e2018ead",
      "item": {
        "type": "markdown",
        "id": "6a66af13e2018ead",
        "text": ""
      },
      "date": 1446315539828
    },
    {
      "type": "remove",
      "id": "6a66af13e2018ead",
      "date": 1446315565100
    },
    {
      "item": {
        "type": "code",
        "id": "65cfa1387ee497b4",
        "text": "$twins,\n$header,\n$story,\n$journal,\n$footer"
      },
      "id": "65cfa1387ee497b4",
      "type": "add",
      "after": "a9116f2e75d0af4e",
      "date": 1446315567029
    },
    {
      "type": "edit",
      "id": "65cfa1387ee497b4",
      "item": {
        "type": "code",
        "id": "65cfa1387ee497b4",
        "text": "$twins,\n$header,\n$story,\n$journal,\n$footer"
      },
      "date": 1446315583088
    },
    {
      "type": "edit",
      "id": "65cfa1387ee497b4",
      "item": {
        "type": "code",
        "id": "65cfa1387ee497b4",
        "text": "$twins,\n$header,\n$story,\n$journal,\n$footer"
      },
      "date": 1446315629386
    },
    {
      "type": "fork",
      "date": 1446315707404
    },
    {
      "type": "add",
      "id": "3465ee26d772f4e8",
      "item": {
        "type": "paragraph",
        "id": "3465ee26d772f4e8",
        "text": "We prefer the convention of naming variables that hold dom elements, usually jquery wrappers, with dollar signs. Thus $page is a handle on the dom structure of the page."
      },
      "after": "d25c59b8bba8dd8a",
      "date": 1446316046446
    },
    {
      "type": "move",
      "order": [
        "49689d9005f41cb0",
        "984b9b552cb92d2e",
        "d575748c185f7aa0",
        "440d0f0d1453acef",
        "23839cbc77a4ba16",
        "7a296b99e2a7d00a",
        "fa4e1584f10b04e4",
        "44f9240bd1fa76e6",
        "70c697990646d51b",
        "70b522cb7e961ff6",
        "b123158425f172c8",
        "cc88f21673e966a8",
        "e095ee7b7bfc78ba",
        "8005a9da0fa41d9e",
        "514c3adaf73bcf59",
        "985fdd0a9cb97f18",
        "fad66e648d3f5ea8",
        "e285b6fb0ce1a7a3",
        "d25c59b8bba8dd8a",
        "0b4c3287a38cf620",
        "3465ee26d772f4e8",
        "11c1fd9f4ccd8e36",
        "a9116f2e75d0af4e",
        "65cfa1387ee497b4"
      ],
      "id": "3465ee26d772f4e8",
      "date": 1446316052054
    },
    {
      "item": {
        "type": "factory",
        "id": "133543dbfa5d71a1"
      },
      "id": "133543dbfa5d71a1",
      "type": "add",
      "after": "65cfa1387ee497b4",
      "date": 1446316195371
    },
    {
      "type": "edit",
      "id": "133543dbfa5d71a1",
      "item": {
        "type": "paragraph",
        "id": "133543dbfa5d71a1",
        "text": "# Story"
      },
      "date": 1446316220228
    },
    {
      "type": "add",
      "id": "163fd58db579dcab",
      "item": {
        "type": "paragraph",
        "id": "163fd58db579dcab",
        "text": "Rendering the page's story is made complicated by the async calls needed to load plugins and possible async calls they might make in order complete their rendering."
      },
      "after": "133543dbfa5d71a1",
      "date": 1446316388470
    },
    {
      "type": "edit",
      "id": "133543dbfa5d71a1",
      "item": {
        "type": "markdown",
        "id": "133543dbfa5d71a1",
        "text": "# Story"
      },
      "date": 1446316394362
    },
    {
      "type": "edit",
      "id": "163fd58db579dcab",
      "item": {
        "type": "paragraph",
        "id": "163fd58db579dcab",
        "text": "Rendering the page's story is made complicated by the async calls needed to load plugins and possible async calls they might make in order complete their rendering. We delegate iterating over story items and provide a callback that does the actual work."
      },
      "date": 1446316708259
    },
    {
      "item": {
        "type": "factory",
        "id": "e3588a1e4c0c0a4e"
      },
      "id": "e3588a1e4c0c0a4e",
      "type": "add",
      "after": "163fd58db579dcab",
      "date": 1446316714946
    },
    {
      "type": "edit",
      "id": "e3588a1e4c0c0a4e",
      "item": {
        "type": "code",
        "id": "e3588a1e4c0c0a4e",
        "text": "  pageObject.seqItems (item, done) ->\n    $item = $ \"\"\"<div class=\"item #{item.type}\" data-id=\"#{item.id}\">\"\"\"\n    $story.append $item\n    plugin.do $item, item, done\n"
      },
      "date": 1446316723771
    },
    {
      "type": "edit",
      "id": "e3588a1e4c0c0a4e",
      "item": {
        "type": "code",
        "id": "e3588a1e4c0c0a4e",
        "text": "  pageObject.seqItems (item, done) ->\n    $item = $ \"\"\"\n      <div class=\"item #{item.type}\"\n         data-id=\"#{item.id}\">\n    \"\"\"\n    $story.append $item\n    plugin.do $item, item, done\n"
      },
      "date": 1446316783462
    },
    {
      "type": "edit",
      "id": "e3588a1e4c0c0a4e",
      "item": {
        "type": "code",
        "id": "e3588a1e4c0c0a4e",
        "text": "  pageObject.seqItems (item, done) ->\n    $item = $ <div class=\"item #{item.type}\" ... \n    $story.append $item\n    plugin.do $item, item, done\n"
      },
      "date": 1446316864843
    },
    {
      "type": "edit",
      "id": "e3588a1e4c0c0a4e",
      "item": {
        "type": "code",
        "id": "e3588a1e4c0c0a4e",
        "text": "  pageObject.seqItems (item, done) ->\n    $item = $ \"\"\"<div class=\"item #{item.type}\" ... \n    $story.append $item\n    plugin.do $item, item, done\n"
      },
      "date": 1446316890438
    },
    {
      "item": {
        "type": "factory",
        "id": "0b836bfbd05153f9"
      },
      "id": "0b836bfbd05153f9",
      "type": "add",
      "after": "e3588a1e4c0c0a4e",
      "date": 1446317079276
    },
    {
      "type": "edit",
      "id": "0b836bfbd05153f9",
      "item": {
        "type": "paragraph",
        "id": "0b836bfbd05153f9",
        "text": "The plugin module handles loading and caching plugin javascript from the origin server. It creates a reasonable substitute when a plugin doesn't exist or fails to emit successfully."
      },
      "date": 1446317385964
    },
    {
      "type": "add",
      "id": "b5805a97ebed508e",
      "item": {
        "type": "paragraph",
        "id": "b5805a97ebed508e",
        "text": "A plugin is expected to emit dom elements before binding to others. We intend for this sequence to be asynchronous with all emits completed before binds are started."
      },
      "after": "0b836bfbd05153f9",
      "date": 1446317811025
    },
    {
      "type": "edit",
      "id": "b5805a97ebed508e",
      "item": {
        "type": "paragraph",
        "id": "b5805a97ebed508e",
        "text": "A plugin is expected to emit dom elements before binding to others. We intend for this sequence to be asynchronous with all emits completed before binds are started. Plugins that can't emit synchronously must provide a callback as the third argument."
      },
      "date": 1446318206058
    },
    {
      "item": {
        "type": "factory",
        "id": "65a3ff190f84b3b3"
      },
      "id": "65a3ff190f84b3b3",
      "type": "add",
      "after": "b5805a97ebed508e",
      "date": 1446318272173
    },
    {
      "type": "edit",
      "id": "65a3ff190f84b3b3",
      "item": {
        "type": "code",
        "id": "65a3ff190f84b3b3",
        "text": "      if script.emit.length > 2\n        script.emit div, item, ->\n          script.bind div, item\n          done()\n      else\n        script.emit div, item\n        script.bind div, item\n        done()\n"
      },
      "date": 1446318288976
    },
    {
      "type": "edit",
      "id": "b5805a97ebed508e",
      "item": {
        "type": "paragraph",
        "id": "b5805a97ebed508e",
        "text": "A plugin is expected to emit dom elements before binding to others. We intend for this sequence to be asynchronous with all emits completed before binds are started. Plugins that can't emit synchronously must provide a callback as the third argument. We respect this but don't yet separate emits and binds."
      },
      "date": 1446318345880
    },
    {
      "type": "add",
      "id": "82220b6afcf61903",
      "item": {
        "type": "paragraph",
        "id": "82220b6afcf61903",
        "text": "Try locating this logic inside the plugin module."
      },
      "after": "b5805a97ebed508e",
      "date": 1446318436247
    },
    {
      "type": "edit",
      "id": "b5805a97ebed508e",
      "item": {
        "type": "paragraph",
        "id": "b5805a97ebed508e",
        "text": "A plugin is expected to emit dom elements before binding to others. We intend for this sequence to be asynchronous with all emits completed before binds are started. Plugins that can't emit synchronously must provide a callback as the third argument. We respect this protocol but don't yet separate emits and binds."
      },
      "date": 1446318497332
    },
    {
      "item": {
        "type": "factory",
        "id": "5ece7ee245e20ac0"
      },
      "id": "5ece7ee245e20ac0",
      "type": "add",
      "after": "65a3ff190f84b3b3",
      "date": 1446318825814
    },
    {
      "type": "edit",
      "id": "5ece7ee245e20ac0",
      "item": {
        "type": "paragraph",
        "id": "5ece7ee245e20ac0",
        "text": "# Reflection"
      },
      "date": 1446318863189
    },
    {
      "type": "add",
      "id": "2db6775e75034d5a",
      "item": {
        "type": "paragraph",
        "id": "2db6775e75034d5a",
        "text": "Wiki's page rendering logic establishes a contract with plugins that allows them to work within the dom so as to interact with the user and other plugins by convention more than by strict pathways defined in wiki's core."
      },
      "after": "5ece7ee245e20ac0",
      "date": 1446319340513
    },
    {
      "type": "add",
      "id": "0fef0e06fd44a214",
      "item": {
        "type": "paragraph",
        "id": "0fef0e06fd44a214",
        "text": "Wiki finds and renders pages from idiomatic json as one step of hypertext browsing. We defer just how linking works for a subsequent hack. Rendering leaves many clues in both the dom and model object to guide subsequent event handlers."
      },
      "after": "5ece7ee245e20ac0",
      "date": 1446319831315
    },
    {
      "type": "add",
      "id": "d26042be509e3e2d",
      "item": {
        "type": "paragraph",
        "id": "d26042be509e3e2d",
        "text": "As some of the oldest and most frequently refactored code one can see in refresh the work of many hands in many styles."
      },
      "after": "2db6775e75034d5a",
      "date": 1446320135467
    },
    {
      "type": "edit",
      "id": "d26042be509e3e2d",
      "item": {
        "type": "paragraph",
        "id": "d26042be509e3e2d",
        "text": "As some of the oldest and most frequently refactored code one can see in refresh the work of many hands in many styles. For now be content to know what is here. Our approach to refactoring will be left for a later hack."
      },
      "date": 1446320261894
    },
    {
      "type": "edit",
      "id": "5ece7ee245e20ac0",
      "item": {
        "type": "markdown",
        "id": "5ece7ee245e20ac0",
        "text": "# Reflection"
      },
      "date": 1446320273922
    },
    {
      "type": "add",
      "id": "cddeda7d193e8a84",
      "item": {
        "type": "paragraph",
        "id": "cddeda7d193e8a84",
        "text": "We often register event handlers on dom objects as they are built using calls on init-something functions. We now prefer jquery's event delegation mechanism and have seen delegates collect in the one-time initialization of the legacy module."
      },
      "after": "a9116f2e75d0af4e",
      "date": 1446320623939
    },
    {
      "type": "edit",
      "id": "cddeda7d193e8a84",
      "item": {
        "type": "paragraph",
        "id": "cddeda7d193e8a84",
        "text": "We often register event handlers on dom objects as they are built using calls on init-something functions. We now prefer jquery's event delegation mechanism and have seen delegates collect in the one-time initialization of the legacy module, hopefully not their final resting place."
      },
      "date": 1446320648888
    },
    {
      "type": "move",
      "order": [
        "49689d9005f41cb0",
        "984b9b552cb92d2e",
        "d575748c185f7aa0",
        "440d0f0d1453acef",
        "23839cbc77a4ba16",
        "7a296b99e2a7d00a",
        "fa4e1584f10b04e4",
        "44f9240bd1fa76e6",
        "70c697990646d51b",
        "70b522cb7e961ff6",
        "b123158425f172c8",
        "cc88f21673e966a8",
        "e095ee7b7bfc78ba",
        "8005a9da0fa41d9e",
        "514c3adaf73bcf59",
        "985fdd0a9cb97f18",
        "fad66e648d3f5ea8",
        "e285b6fb0ce1a7a3",
        "d25c59b8bba8dd8a",
        "0b4c3287a38cf620",
        "3465ee26d772f4e8",
        "11c1fd9f4ccd8e36",
        "a9116f2e75d0af4e",
        "65cfa1387ee497b4",
        "cddeda7d193e8a84",
        "133543dbfa5d71a1",
        "163fd58db579dcab",
        "e3588a1e4c0c0a4e",
        "0b836bfbd05153f9",
        "b5805a97ebed508e",
        "82220b6afcf61903",
        "65a3ff190f84b3b3",
        "5ece7ee245e20ac0",
        "0fef0e06fd44a214",
        "2db6775e75034d5a",
        "d26042be509e3e2d"
      ],
      "id": "cddeda7d193e8a84",
      "date": 1446320653065
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "65b2de4a3dc33e5f",
        "text": "* [https://github.com/fedwiki/wiki-client/blob/adfe0d75499b6401b7c9e600d2bc21ab686a7b36/lib/legacy.coffee#L188-L193 legacy.coffee]\n* [https://github.com/fedwiki/wiki-client/blob/adfe0d75499b6401b7c9e600d2bc21ab686a7b36/lib/refresh.coffee#L223-L335 refresh.coffee]"
      },
      "after": "984b9b552cb92d2e",
      "id": "65b2de4a3dc33e5f",
      "date": 1446857109264
    },
    {
      "type": "edit",
      "id": "65b2de4a3dc33e5f",
      "item": {
        "type": "markdown",
        "id": "65b2de4a3dc33e5f",
        "text": "* [https://github.com/fedwiki/wiki-client/blob/adfe0d75499b6401b7c9e600d2bc21ab686a7b36/lib/legacy.coffee#L188-L193 legacy.coffee]\n\n* [https://github.com/fedwiki/wiki-client/blob/adfe0d75499b6401b7c9e600d2bc21ab686a7b36/lib/refresh.coffee#L223-L253 refresh.coffee]"
      },
      "date": 1446860184046
    },
    {
      "type": "fork",
      "site": "dev.asia.wiki.org",
      "date": 1644564936450
    }
  ]
}