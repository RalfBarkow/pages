{
  "title": "Two iFrames Side by Side",
  "story": [
    {
      "type": "paragraph",
      "id": "4b5ef22c372062ca",
      "text": "The given Elm code [https://github.com/RalfBarkow/vite-elm-dojo/commit/907dee4fcae8b2e82fe83cce01ff3381dc13e67f commit] represents a simple application that displays two [[iFrames]] side by side. "
    },
    {
      "type": "paragraph",
      "id": "ea3230efba3e67aa",
      "text": "Let's break down the code:"
    },
    {
      "type": "paragraph",
      "id": "0db4cd144a1b9988",
      "text": "The module declaration (module Main exposing (..)) states that the module is named Main and exposes all its definitions."
    },
    {
      "type": "markdown",
      "id": "05177436be4b4f4e",
      "text": "The necessary imports are specified:\n* import Browser allows us to create a sandboxed Elm application that can run in a web browser.\n* import Html provides functions and types for creating HTML elements and composing a view.\n* import Html.Attributes exposes functions for working with HTML attributes."
    },
    {
      "type": "paragraph",
      "id": "ccd54e1866d04835",
      "text": "The main function is the entry point of the application and creates a sandbox program using Browser.sandbox. The sandboxed program requires an initial Model, an update function to handle messages, and a view function to render the UI."
    },
    {
      "type": "paragraph",
      "id": "984eae383694d55c",
      "text": "The Model type alias defines the structure of the application's model. It consists of two fields: leftIframeSrc and rightIframeSrc, both of type String, representing the source URLs for the left and right iframes."
    },
    {
      "type": "paragraph",
      "id": "d1d175703c3ece7a",
      "text": "The Msg type defines the possible messages that can be sent to the update function. In this case, there is only one message NoOp, which stands for \"no operation\" and does nothing."
    },
    {
      "type": "paragraph",
      "id": "4dd361e4045b7c0d",
      "text": "The init function initializes the model with default values. It sets the leftIframeSrc and rightIframeSrc fields to the respective URLs of the iframes."
    },
    {
      "type": "paragraph",
      "id": "7a3f45324915c5d5",
      "text": "The update function takes a message (Msg) and the current model (Model) and returns an updated model. In this case, it simply returns the same model unchanged for the NoOp message."
    },
    {
      "type": "paragraph",
      "id": "f8c1baa8904858a8",
      "text": "The view function generates the HTML representation of the application's UI based on the current model. It creates a div element with an empty attribute list ([]) and two iframe elements. The src attribute of each iframe is set to the corresponding URL from the model."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Two iFrames Side by Side",
        "story": []
      },
      "date": 1685795218433
    },
    {
      "item": {
        "type": "factory",
        "id": "4b5ef22c372062ca"
      },
      "id": "4b5ef22c372062ca",
      "type": "add",
      "date": 1685795229135
    },
    {
      "type": "edit",
      "id": "4b5ef22c372062ca",
      "item": {
        "type": "paragraph",
        "id": "4b5ef22c372062ca",
        "text": "The given Elm code [commit] represents a simple application that displays two iframes side by side. Let's break down the code:"
      },
      "date": 1685795239023
    },
    {
      "type": "edit",
      "id": "4b5ef22c372062ca",
      "item": {
        "type": "paragraph",
        "id": "4b5ef22c372062ca",
        "text": "The given Elm code [https://github.com/RalfBarkow/vite-elm-dojo/commit/907dee4fcae8b2e82fe83cce01ff3381dc13e67fcommit] represents a simple application that displays two iframes side by side. Let's break down the code:"
      },
      "date": 1685795350327
    },
    {
      "type": "edit",
      "id": "4b5ef22c372062ca",
      "item": {
        "type": "paragraph",
        "id": "4b5ef22c372062ca",
        "text": "The given Elm code [https://github.com/RalfBarkow/vite-elm-dojo/commit/907dee4fcae8b2e82fe83cce01ff3381dc13e67f commit] represents a simple application that displays two iframes side by side. Let's break down the code:"
      },
      "date": 1685795355024
    },
    {
      "item": {
        "type": "factory",
        "id": "0db4cd144a1b9988"
      },
      "id": "0db4cd144a1b9988",
      "type": "add",
      "after": "4b5ef22c372062ca",
      "date": 1685795427071
    },
    {
      "type": "edit",
      "id": "0db4cd144a1b9988",
      "item": {
        "type": "paragraph",
        "id": "0db4cd144a1b9988",
        "text": "The module declaration (module Main exposing (..)) states that the module is named Main and exposes all its definitions."
      },
      "date": 1685795428409
    },
    {
      "item": {
        "type": "factory",
        "id": "05177436be4b4f4e"
      },
      "id": "05177436be4b4f4e",
      "type": "add",
      "after": "0db4cd144a1b9988",
      "date": 1685795440668
    },
    {
      "type": "edit",
      "id": "05177436be4b4f4e",
      "item": {
        "type": "paragraph",
        "id": "05177436be4b4f4e",
        "text": "The necessary imports are specified:\nimport Browser allows us to create a sandboxed Elm application that can run in a web browser.\nimport Html provides functions and types for creating HTML elements and composing a view.\nimport Html.Attributes exposes functions for working with HTML attributes."
      },
      "date": 1685795443857
    },
    {
      "type": "edit",
      "id": "05177436be4b4f4e",
      "item": {
        "type": "paragraph",
        "id": "05177436be4b4f4e",
        "text": "The necessary imports are specified:\n* import Browser allows us to create a sandboxed Elm application that can run in a web browser.\nimport Html provides functions and types for creating HTML elements and composing a view.\nimport Html.Attributes exposes functions for working with HTML attributes."
      },
      "date": 1685795451553
    },
    {
      "type": "edit",
      "id": "05177436be4b4f4e",
      "item": {
        "type": "markdown",
        "id": "05177436be4b4f4e",
        "text": "The necessary imports are specified:\n* import Browser allows us to create a sandboxed Elm application that can run in a web browser.\nimport Html provides functions and types for creating HTML elements and composing a view.\nimport Html.Attributes exposes functions for working with HTML attributes."
      },
      "date": 1685795452719
    },
    {
      "type": "edit",
      "id": "05177436be4b4f4e",
      "item": {
        "type": "markdown",
        "id": "05177436be4b4f4e",
        "text": "The necessary imports are specified:\n* import Browser allows us to create a sandboxed Elm application that can run in a web browser.\n* import Html provides functions and types for creating HTML elements and composing a view.\n* import Html.Attributes exposes functions for working with HTML attributes."
      },
      "date": 1685795465855
    },
    {
      "type": "edit",
      "id": "4b5ef22c372062ca",
      "item": {
        "type": "paragraph",
        "id": "4b5ef22c372062ca",
        "text": "The given Elm code [https://github.com/RalfBarkow/vite-elm-dojo/commit/907dee4fcae8b2e82fe83cce01ff3381dc13e67f commit] represents a simple application that displays two [[iFrames]] side by side. Let's break down the code:"
      },
      "date": 1685795493970
    },
    {
      "item": {
        "type": "factory",
        "id": "ccd54e1866d04835"
      },
      "id": "ccd54e1866d04835",
      "type": "add",
      "after": "05177436be4b4f4e",
      "date": 1685795522658
    },
    {
      "type": "edit",
      "id": "ccd54e1866d04835",
      "item": {
        "type": "paragraph",
        "id": "ccd54e1866d04835",
        "text": "The main function is the entry point of the application and creates a sandbox program using Browser.sandbox. The sandboxed program requires an initial Model, an update function to handle messages, and a view function to render the UI."
      },
      "date": 1685795524079
    },
    {
      "item": {
        "type": "factory",
        "id": "984eae383694d55c"
      },
      "id": "984eae383694d55c",
      "type": "add",
      "after": "ccd54e1866d04835",
      "date": 1685795538106
    },
    {
      "type": "edit",
      "id": "984eae383694d55c",
      "item": {
        "type": "paragraph",
        "id": "984eae383694d55c",
        "text": "The Model type alias defines the structure of the application's model. It consists of two fields: leftIframeSrc and rightIframeSrc, both of type String, representing the source URLs for the left and right iframes."
      },
      "date": 1685795539736
    },
    {
      "item": {
        "type": "factory",
        "id": "d1d175703c3ece7a"
      },
      "id": "d1d175703c3ece7a",
      "type": "add",
      "after": "984eae383694d55c",
      "date": 1685798130296
    },
    {
      "type": "edit",
      "id": "d1d175703c3ece7a",
      "item": {
        "type": "paragraph",
        "id": "d1d175703c3ece7a",
        "text": "The Msg type defines the possible messages that can be sent to the update function. In this case, there is only one message NoOp, which stands for \"no operation\" and does nothing."
      },
      "date": 1685798131738
    },
    {
      "item": {
        "type": "factory",
        "id": "4dd361e4045b7c0d"
      },
      "id": "4dd361e4045b7c0d",
      "type": "add",
      "after": "d1d175703c3ece7a",
      "date": 1685798148552
    },
    {
      "type": "edit",
      "id": "4dd361e4045b7c0d",
      "item": {
        "type": "paragraph",
        "id": "4dd361e4045b7c0d",
        "text": "The init function initializes the model with default values. It sets the leftIframeSrc and rightIframeSrc fields to the respective URLs of the iframes."
      },
      "date": 1685798150281
    },
    {
      "item": {
        "type": "factory",
        "id": "7a3f45324915c5d5"
      },
      "id": "7a3f45324915c5d5",
      "type": "add",
      "after": "4dd361e4045b7c0d",
      "date": 1685798155932
    },
    {
      "type": "edit",
      "id": "7a3f45324915c5d5",
      "item": {
        "type": "paragraph",
        "id": "7a3f45324915c5d5",
        "text": "The update function takes a message (Msg) and the current model (Model) and returns an updated model. In this case, it simply returns the same model unchanged for the NoOp message."
      },
      "date": 1685798157408
    },
    {
      "item": {
        "type": "factory",
        "id": "f8c1baa8904858a8"
      },
      "id": "f8c1baa8904858a8",
      "type": "add",
      "after": "7a3f45324915c5d5",
      "date": 1685798165862
    },
    {
      "type": "edit",
      "id": "f8c1baa8904858a8",
      "item": {
        "type": "paragraph",
        "id": "f8c1baa8904858a8",
        "text": "The view function generates the HTML representation of the application's UI based on the current model. It creates a div element with an empty attribute list ([]) and two iframe elements. The src attribute of each iframe is set to the corresponding URL from the model."
      },
      "date": 1685798167081
    },
    {
      "type": "edit",
      "id": "4b5ef22c372062ca",
      "item": {
        "type": "paragraph",
        "id": "4b5ef22c372062ca",
        "text": "The given Elm code [https://github.com/RalfBarkow/vite-elm-dojo/commit/907dee4fcae8b2e82fe83cce01ff3381dc13e67f commit] represents a simple application that displays two [[iFrames]] side by side. "
      },
      "date": 1685798203206
    },
    {
      "type": "add",
      "id": "ea3230efba3e67aa",
      "item": {
        "type": "paragraph",
        "id": "ea3230efba3e67aa",
        "text": "Let's break down the code:"
      },
      "after": "4b5ef22c372062ca",
      "date": 1685798204379
    }
  ]
}