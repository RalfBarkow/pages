{
  "title": "How Does the Bridge Work?",
  "story": [
    {
      "type": "paragraph",
      "id": "021cdf633a3ce791",
      "text": "The bridge is used during development to connect the running Pharo image and the running [[PharoJS]] code in the browser – but does not exist in production code. The bridge is implemented over a WebSocket which allows bi-directional asynchronous communication.\n\nThere are proxy objects on the Pharo side that represent objects on the browser. Some of there are global proxies, such as document, window, etc. which are implemented as Javascript globals (see the question on globals). When you send a message to a proxy, a DNU intervenes and sends the parameters across the bridge to the browser, which calls the method on the object referred to by the proxy, and returns the result.\n\n"
    },
    {
      "type": "markdown",
      "id": "2c4a7f9bc9604035",
      "text": "* If that result is a simple value (number, boolean, string, nil) it is returned across the bridge to the Pharo side which has suspended your code, awaiting the response. The response is converted to a Smalltalk value, and returned to your code.\n* If that result is not a simple value, a reference to that value is created (so it doesn't get garbage collected by the browser), and a reference is passed back across the bridge. That reference is converted to a proxy, and that proxy is returned to your code.\n* When all references to that proxy have disappeared on the Pharo side, the browser side is told to remove the holding reference.\n\n"
    },
    {
      "type": "paragraph",
      "id": "dc0ea4565243973e",
      "text": "The other main thing that comes across the bridge are callbacks. A callback is a reflection of an event occuring on the broswer. The structure for callbacks is created by sending an addEventListener:block: message to a proxy (see the question on this). In order to faithfully emulate the Javascript execution model, no callback can happen while an existing callback is executing, or while any initial interaction with the browser is taking place.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "How Does the Bridge Work?",
        "story": []
      },
      "date": 1661984724726
    },
    {
      "item": {
        "type": "factory",
        "id": "ca9626d5e6d1edb1"
      },
      "id": "ca9626d5e6d1edb1",
      "type": "add",
      "date": 1661984735714
    },
    {
      "type": "remove",
      "id": "ca9626d5e6d1edb1",
      "date": 1661984743604
    },
    {
      "item": {
        "type": "factory",
        "id": "021cdf633a3ce791"
      },
      "id": "021cdf633a3ce791",
      "type": "add",
      "date": 1661984747701
    },
    {
      "type": "edit",
      "id": "021cdf633a3ce791",
      "item": {
        "type": "paragraph",
        "id": "021cdf633a3ce791",
        "text": "\n\nThe bridge is used during development to connect the running Pharo image and the running PharoJS code in the browser - but does not exist in production code. The bridge is implemented over a WebSocket which allows bi-directional asynchronous communication.\n\nThere are proxy objects on the Pharo side that represent objects on the browser. Some of there are global proxies, such as document, window, etc. which are implemented as Javascript globals (see the question on globals). When you send a message to a proxy, a DNU intervenes and sends the parameters across the bridge to the browser, which calls the method on the object referred to by the proxy, and returns the result.\n\n    If that result is a simple value (number, boolean, string, nil) it is returned across the bridge to the Pharo side which has suspended your code, awaiting the response. The response is converted to a Smalltalk value, and returned to your code.\n    If that result is not a simple value, a reference to that value is created (so it doesn't get garbage collected by the browser), and a reference is passed back across the bridge. That reference is converted to a proxy, and that proxy is returned to your code.\n    When all references to that proxy have disappeared on the Pharo side, the browser side is told to remove the holding reference.\n\nThe other main thing that comes across the bridge are callbacks. A callback is a reflection of an event occuring on the broswer. The structure for callbacks is created by sending an addEventListener:block: message to a proxy (see the question on this). In order to faithfully emulate the Javascript execution model, no callback can happen while an existing callback is executing, or while any initial interactionwith the browser is taking place.\n"
      },
      "date": 1661984749461
    },
    {
      "type": "edit",
      "id": "021cdf633a3ce791",
      "item": {
        "type": "paragraph",
        "id": "021cdf633a3ce791",
        "text": "\nThe bridge is used during development to connect the running Pharo image and the running PharoJS code in the browser – but does not exist in production code. The bridge is implemented over a WebSocket which allows bi-directional asynchronous communication.\n\nThere are proxy objects on the Pharo side that represent objects on the browser. Some of there are global proxies, such as document, window, etc. which are implemented as Javascript globals (see the question on globals). When you send a message to a proxy, a DNU intervenes and sends the parameters across the bridge to the browser, which calls the method on the object referred to by the proxy, and returns the result.\n\n    If that result is a simple value (number, boolean, string, nil) it is returned across the bridge to the Pharo side which has suspended your code, awaiting the response. The response is converted to a Smalltalk value, and returned to your code.\n    If that result is not a simple value, a reference to that value is created (so it doesn't get garbage collected by the browser), and a reference is passed back across the bridge. That reference is converted to a proxy, and that proxy is returned to your code.\n    When all references to that proxy have disappeared on the Pharo side, the browser side is told to remove the holding reference.\n\nThe other main thing that comes across the bridge are callbacks. A callback is a reflection of an event occuring on the broswer. The structure for callbacks is created by sending an addEventListener:block: message to a proxy (see the question on this). In order to faithfully emulate the Javascript execution model, no callback can happen while an existing callback is executing, or while any initial interactionwith the browser is taking place.\n"
      },
      "date": 1661984787344
    },
    {
      "type": "edit",
      "id": "021cdf633a3ce791",
      "item": {
        "type": "paragraph",
        "id": "021cdf633a3ce791",
        "text": "The bridge is used during development to connect the running Pharo image and the running PharoJS code in the browser – but does not exist in production code. The bridge is implemented over a WebSocket which allows bi-directional asynchronous communication.\n\nThere are proxy objects on the Pharo side that represent objects on the browser. Some of there are global proxies, such as document, window, etc. which are implemented as Javascript globals (see the question on globals). When you send a message to a proxy, a DNU intervenes and sends the parameters across the bridge to the browser, which calls the method on the object referred to by the proxy, and returns the result.\n\n"
      },
      "date": 1661984892533
    },
    {
      "type": "add",
      "id": "2c4a7f9bc9604035",
      "item": {
        "type": "paragraph",
        "id": "2c4a7f9bc9604035",
        "text": "* If that result is a simple value (number, boolean, string, nil) it is returned across the bridge to the Pharo side which has suspended your code, awaiting the response. The response is converted to a Smalltalk value, and returned to your code.\n* If that result is not a simple value, a reference to that value is created (so it doesn't get garbage collected by the browser), and a reference is passed back across the bridge. That reference is converted to a proxy, and that proxy is returned to your code.\n* When all references to that proxy have disappeared on the Pharo side, the browser side is told to remove the holding reference.\n\n"
      },
      "after": "021cdf633a3ce791",
      "date": 1661984908858
    },
    {
      "type": "edit",
      "id": "2c4a7f9bc9604035",
      "item": {
        "type": "markdown",
        "id": "2c4a7f9bc9604035",
        "text": "* If that result is a simple value (number, boolean, string, nil) it is returned across the bridge to the Pharo side which has suspended your code, awaiting the response. The response is converted to a Smalltalk value, and returned to your code.\n* If that result is not a simple value, a reference to that value is created (so it doesn't get garbage collected by the browser), and a reference is passed back across the bridge. That reference is converted to a proxy, and that proxy is returned to your code.\n* When all references to that proxy have disappeared on the Pharo side, the browser side is told to remove the holding reference.\n\n"
      },
      "date": 1661984911544
    },
    {
      "type": "add",
      "id": "dc0ea4565243973e",
      "item": {
        "type": "paragraph",
        "id": "dc0ea4565243973e",
        "text": "The other main thing that comes across the bridge are callbacks. A callback is a reflection of an event occuring on the broswer. The structure for callbacks is created by sending an addEventListener:block: message to a proxy (see the question on this). In order to faithfully emulate the Javascript execution model, no callback can happen while an existing callback is executing, or while any initial interactionwith the browser is taking place.\n"
      },
      "after": "2c4a7f9bc9604035",
      "date": 1661984913041
    },
    {
      "type": "edit",
      "id": "021cdf633a3ce791",
      "item": {
        "type": "paragraph",
        "id": "021cdf633a3ce791",
        "text": "The bridge is used during development to connect the running Pharo image and the running [[PharoJS]] code in the browser – but does not exist in production code. The bridge is implemented over a WebSocket which allows bi-directional asynchronous communication.\n\nThere are proxy objects on the Pharo side that represent objects on the browser. Some of there are global proxies, such as document, window, etc. which are implemented as Javascript globals (see the question on globals). When you send a message to a proxy, a DNU intervenes and sends the parameters across the bridge to the browser, which calls the method on the object referred to by the proxy, and returns the result.\n\n"
      },
      "date": 1661984947949
    },
    {
      "type": "edit",
      "id": "dc0ea4565243973e",
      "item": {
        "type": "paragraph",
        "id": "dc0ea4565243973e",
        "text": "The other main thing that comes across the bridge are callbacks. A callback is a reflection of an event occuring on the broswer. The structure for callbacks is created by sending an addEventListener:block: message to a proxy (see the question on this). In order to faithfully emulate the Javascript execution model, no callback can happen while an existing callback is executing, or while any initial interaction with the browser is taking place.\n"
      },
      "date": 1661985028027
    }
  ]
}