{
  "title": "Arrows Enhancement Request",
  "story": [
    {
      "type": "markdown",
      "id": "ec142d56c3ce0f96",
      "text": "dobbs\n\nfor SVG export, please group svg elements by node and edge\n\nPlease improve your SVG export to semantically group the svg elements within <g class=\"node\"> and <g class=\"edge\"> elements. It would also be helpful to semantically group labels and properties in the exported SVG.\n"
    },
    {
      "type": "markdown",
      "id": "56fa99574aa7ec96",
      "text": "See [https://githubmemory.com/repo/neo4j-labs/arrows.app/activity Arrows Gethub Web Page]\n"
    },
    {
      "type": "markdown",
      "id": "23f620005410f724",
      "text": "Our specific use case follows.\n\nIn federated wiki, we have instrumented graphviz diagrams with click behavior that allows readers to navigate their site through visual graphs. We love graphviz, but some graphs want to be laid-out by hand and we find Arrows.app to be fantastic for this.\n\nThe example SVG below is exported by graphviz and shows the semantic grouping. Please notice that each node in the graph is represented in SVG as a <g class=\"node\"> containing a <path> and one or more <text> elements. Edges are similarly grouped as a <g class=\"edge\"> with <path> elements for the arc and arrowhead, and <text> elements of label.\n\nThose group tags make it very easy to create a general-purpose click handler for our navigation behavior. From any clicked element we can find the closest parent <g> that is a node or an edge and then search for all the <text> nodes within to determine the title of a wiki page to open. It is worth noting that graphviz exports can use many different shapes for the nodes besides <path>. But our click handler only needs to look for the <g> and <text> elements.\n\nThe absence of those tags in the SVG exported from Arrows.app make it prohibitively difficult to distinguish a node label from a node name or from an edge label.\n\n<svg width=\"201pt\" height=\"44pt\" viewBox=\"0.00 0.00 200.98 44.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 40)\">\n<title>%0</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-40 196.979,-40 196.979,4 -4,4\"/>\n<!-- A -->\n<g id=\"node1\" class=\"node\">\n  <title>A</title>\n  <path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M42,-36C42,-36 12,-36 12,-36 6,-36 0,-30 0,-24 0,-24 0,-12 0,-12 0,-6 6,0 12,0 12,0 42,0 42,0 48,0 54,-6 54,-12 54,-12 54,-24 54,-24 54,-30 48,-36 42,-36\"/>\n  <text text-anchor=\"middle\" x=\"27\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">A</text>\n</g>\n<!-- B -->\n<g id=\"node2\" class=\"node\">\n<title>B</title>\n  <path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M180.979,-36C180.979,-36 150.979,-36 150.979,-36 144.979,-36 138.979,-30 138.979,-24 138.979,-24 138.979,-12 138.979,-12 138.979,-6 144.979,0 150.979,0 150.979,0 180.979,0 180.979,0 186.979,0 192.979,-6 192.979,-12 192.979,-12 192.979,-24 192.979,-24 192.979,-30 186.979,-36 180.979,-36\"/>\n  <text text-anchor=\"middle\" x=\"165.979\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">B</text>\n</g>\n<!-- A&#45;&gt;B -->\n<g id=\"edge1\" class=\"edge\">\n  <title>A-&gt;B</title>\n  <path fill=\"none\" stroke=\"#000000\" d=\"M54.1265,-18C75.3625,-18 105.1342,-18 128.6237,-18\"/>\n  <polygon fill=\"#000000\" stroke=\"#000000\" points=\"128.921,-21.5001 138.9209,-18 128.9209,-14.5001 128.921,-21.5001\"/>\n  <text text-anchor=\"middle\" x=\"96.4895\" y=\"-22.2\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">connects</text>\n</g>\n</g>\n</svg>"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Arrows Enhancement Request",
        "story": []
      },
      "date": 1639414580431
    },
    {
      "item": {
        "type": "factory",
        "id": "ec142d56c3ce0f96"
      },
      "id": "ec142d56c3ce0f96",
      "type": "add",
      "date": 1639414582506
    },
    {
      "type": "edit",
      "id": "ec142d56c3ce0f96",
      "item": {
        "type": "markdown",
        "id": "ec142d56c3ce0f96",
        "text": "\ndobbs\nNONE\ncreatedAt 1 month ago\nfor SVG export, please group svg elements by node and edge\nPlease improve your SVG export to semantically group the svg elements within <g class=\"node\"> and <g class=\"edge\"> elements. It would also be helpful to semantically group labels and properties in the exported SVG.\n\nOur specific use case follows.\n\nIn federated wiki, we have instrumented graphviz diagrams with click behavior that allows readers to navigate their site through visual graphs. We love graphviz, but some graphs want to be laid-out by hand and we find Arrows.app to be fantastic for this.\n\nThe example SVG below is exported by graphviz and shows the semantic grouping. Please notice that each node in the graph is represented in SVG as a <g class=\"node\"> containing a <path> and one or more <text> elements. Edges are similarly grouped as a <g class=\"edge\"> with <path> elements for the arc and arrowhead, and <text> elements of label.\n\nThose group tags make it very easy to create a general-purpose click handler for our navigation behavior. From any clicked element we can find the closest parent <g> that is a node or an edge and then search for all the <text> nodes within to determine the title of a wiki page to open. It is worth noting that graphviz exports can use many different shapes for the nodes besides <path>. But our click handler only needs to look for the <g> and <text> elements.\n\nThe absence of those tags in the SVG exported from Arrows.app make it prohibitively difficult to distinguish a node label from a node name or from an edge label.\n\n<svg width=\"201pt\" height=\"44pt\" viewBox=\"0.00 0.00 200.98 44.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 40)\">\n<title>%0</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-40 196.979,-40 196.979,4 -4,4\"/>\n<!-- A -->\n<g id=\"node1\" class=\"node\">\n  <title>A</title>\n  <path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M42,-36C42,-36 12,-36 12,-36 6,-36 0,-30 0,-24 0,-24 0,-12 0,-12 0,-6 6,0 12,0 12,0 42,0 42,0 48,0 54,-6 54,-12 54,-12 54,-24 54,-24 54,-30 48,-36 42,-36\"/>\n  <text text-anchor=\"middle\" x=\"27\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">A</text>\n</g>\n<!-- B -->\n<g id=\"node2\" class=\"node\">\n<title>B</title>\n  <path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M180.979,-36C180.979,-36 150.979,-36 150.979,-36 144.979,-36 138.979,-30 138.979,-24 138.979,-24 138.979,-12 138.979,-12 138.979,-6 144.979,0 150.979,0 150.979,0 180.979,0 180.979,0 186.979,0 192.979,-6 192.979,-12 192.979,-12 192.979,-24 192.979,-24 192.979,-30 186.979,-36 180.979,-36\"/>\n  <text text-anchor=\"middle\" x=\"165.979\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">B</text>\n</g>\n<!-- A&#45;&gt;B -->\n<g id=\"edge1\" class=\"edge\">\n  <title>A-&gt;B</title>\n  <path fill=\"none\" stroke=\"#000000\" d=\"M54.1265,-18C75.3625,-18 105.1342,-18 128.6237,-18\"/>\n  <polygon fill=\"#000000\" stroke=\"#000000\" points=\"128.921,-21.5001 138.9209,-18 128.9209,-14.5001 128.921,-21.5001\"/>\n  <text text-anchor=\"middle\" x=\"96.4895\" y=\"-22.2\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">connects</text>\n</g>\n</g>\n</svg>"
      },
      "date": 1639414587607
    },
    {
      "type": "edit",
      "id": "ec142d56c3ce0f96",
      "item": {
        "type": "markdown",
        "id": "ec142d56c3ce0f96",
        "text": "dobbs\nNONE\ncreatedAt 1 month ago\nfor SVG export, please group svg elements by node and edge\nPlease improve your SVG export to semantically group the svg elements within <g class=\"node\"> and <g class=\"edge\"> elements. It would also be helpful to semantically group labels and properties in the exported SVG.\n"
      },
      "date": 1639414635491
    },
    {
      "type": "add",
      "id": "56fa99574aa7ec96",
      "item": {
        "type": "markdown",
        "id": "56fa99574aa7ec96",
        "text": "See [https://githubmemory.com/repo/neo4j-labs/arrows.app/activity Arrows Gethub Web Page]\nOur specific use case follows.\n\nIn federated wiki, we have instrumented graphviz diagrams with click behavior that allows readers to navigate their site through visual graphs. We love graphviz, but some graphs want to be laid-out by hand and we find Arrows.app to be fantastic for this.\n\nThe example SVG below is exported by graphviz and shows the semantic grouping. Please notice that each node in the graph is represented in SVG as a <g class=\"node\"> containing a <path> and one or more <text> elements. Edges are similarly grouped as a <g class=\"edge\"> with <path> elements for the arc and arrowhead, and <text> elements of label.\n\nThose group tags make it very easy to create a general-purpose click handler for our navigation behavior. From any clicked element we can find the closest parent <g> that is a node or an edge and then search for all the <text> nodes within to determine the title of a wiki page to open. It is worth noting that graphviz exports can use many different shapes for the nodes besides <path>. But our click handler only needs to look for the <g> and <text> elements.\n\nThe absence of those tags in the SVG exported from Arrows.app make it prohibitively difficult to distinguish a node label from a node name or from an edge label.\n\n<svg width=\"201pt\" height=\"44pt\" viewBox=\"0.00 0.00 200.98 44.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 40)\">\n<title>%0</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-40 196.979,-40 196.979,4 -4,4\"/>\n<!-- A -->\n<g id=\"node1\" class=\"node\">\n  <title>A</title>\n  <path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M42,-36C42,-36 12,-36 12,-36 6,-36 0,-30 0,-24 0,-24 0,-12 0,-12 0,-6 6,0 12,0 12,0 42,0 42,0 48,0 54,-6 54,-12 54,-12 54,-24 54,-24 54,-30 48,-36 42,-36\"/>\n  <text text-anchor=\"middle\" x=\"27\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">A</text>\n</g>\n<!-- B -->\n<g id=\"node2\" class=\"node\">\n<title>B</title>\n  <path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M180.979,-36C180.979,-36 150.979,-36 150.979,-36 144.979,-36 138.979,-30 138.979,-24 138.979,-24 138.979,-12 138.979,-12 138.979,-6 144.979,0 150.979,0 150.979,0 180.979,0 180.979,0 186.979,0 192.979,-6 192.979,-12 192.979,-12 192.979,-24 192.979,-24 192.979,-30 186.979,-36 180.979,-36\"/>\n  <text text-anchor=\"middle\" x=\"165.979\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">B</text>\n</g>\n<!-- A&#45;&gt;B -->\n<g id=\"edge1\" class=\"edge\">\n  <title>A-&gt;B</title>\n  <path fill=\"none\" stroke=\"#000000\" d=\"M54.1265,-18C75.3625,-18 105.1342,-18 128.6237,-18\"/>\n  <polygon fill=\"#000000\" stroke=\"#000000\" points=\"128.921,-21.5001 138.9209,-18 128.9209,-14.5001 128.921,-21.5001\"/>\n  <text text-anchor=\"middle\" x=\"96.4895\" y=\"-22.2\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">connects</text>\n</g>\n</g>\n</svg>"
      },
      "after": "ec142d56c3ce0f96",
      "date": 1639414668974
    },
    {
      "type": "edit",
      "id": "56fa99574aa7ec96",
      "item": {
        "type": "markdown",
        "id": "56fa99574aa7ec96",
        "text": "See [https://githubmemory.com/repo/neo4j-labs/arrows.app/activity Arrows Gethub Web Page]\n"
      },
      "date": 1639414674653
    },
    {
      "type": "add",
      "id": "23f620005410f724",
      "item": {
        "type": "markdown",
        "id": "23f620005410f724",
        "text": "Our specific use case follows.\n\nIn federated wiki, we have instrumented graphviz diagrams with click behavior that allows readers to navigate their site through visual graphs. We love graphviz, but some graphs want to be laid-out by hand and we find Arrows.app to be fantastic for this.\n\nThe example SVG below is exported by graphviz and shows the semantic grouping. Please notice that each node in the graph is represented in SVG as a <g class=\"node\"> containing a <path> and one or more <text> elements. Edges are similarly grouped as a <g class=\"edge\"> with <path> elements for the arc and arrowhead, and <text> elements of label.\n\nThose group tags make it very easy to create a general-purpose click handler for our navigation behavior. From any clicked element we can find the closest parent <g> that is a node or an edge and then search for all the <text> nodes within to determine the title of a wiki page to open. It is worth noting that graphviz exports can use many different shapes for the nodes besides <path>. But our click handler only needs to look for the <g> and <text> elements.\n\nThe absence of those tags in the SVG exported from Arrows.app make it prohibitively difficult to distinguish a node label from a node name or from an edge label.\n\n<svg width=\"201pt\" height=\"44pt\" viewBox=\"0.00 0.00 200.98 44.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 40)\">\n<title>%0</title>\n<polygon fill=\"#ffffff\" stroke=\"transparent\" points=\"-4,4 -4,-40 196.979,-40 196.979,4 -4,4\"/>\n<!-- A -->\n<g id=\"node1\" class=\"node\">\n  <title>A</title>\n  <path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M42,-36C42,-36 12,-36 12,-36 6,-36 0,-30 0,-24 0,-24 0,-12 0,-12 0,-6 6,0 12,0 12,0 42,0 42,0 48,0 54,-6 54,-12 54,-12 54,-24 54,-24 54,-30 48,-36 42,-36\"/>\n  <text text-anchor=\"middle\" x=\"27\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">A</text>\n</g>\n<!-- B -->\n<g id=\"node2\" class=\"node\">\n<title>B</title>\n  <path fill=\"#d3d3d3\" stroke=\"#000000\" d=\"M180.979,-36C180.979,-36 150.979,-36 150.979,-36 144.979,-36 138.979,-30 138.979,-24 138.979,-24 138.979,-12 138.979,-12 138.979,-6 144.979,0 150.979,0 150.979,0 180.979,0 180.979,0 186.979,0 192.979,-6 192.979,-12 192.979,-12 192.979,-24 192.979,-24 192.979,-30 186.979,-36 180.979,-36\"/>\n  <text text-anchor=\"middle\" x=\"165.979\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">B</text>\n</g>\n<!-- A&#45;&gt;B -->\n<g id=\"edge1\" class=\"edge\">\n  <title>A-&gt;B</title>\n  <path fill=\"none\" stroke=\"#000000\" d=\"M54.1265,-18C75.3625,-18 105.1342,-18 128.6237,-18\"/>\n  <polygon fill=\"#000000\" stroke=\"#000000\" points=\"128.921,-21.5001 138.9209,-18 128.9209,-14.5001 128.921,-21.5001\"/>\n  <text text-anchor=\"middle\" x=\"96.4895\" y=\"-22.2\" font-family=\"Times,serif\" font-size=\"14.00\" fill=\"#000000\">connects</text>\n</g>\n</g>\n</svg>"
      },
      "after": "56fa99574aa7ec96",
      "date": 1639414675924
    },
    {
      "type": "edit",
      "id": "ec142d56c3ce0f96",
      "item": {
        "type": "markdown",
        "id": "ec142d56c3ce0f96",
        "text": "dobbs\n\nfor SVG export, please group svg elements by node and edge\n\nPlease improve your SVG export to semantically group the svg elements within <g class=\"node\"> and <g class=\"edge\"> elements. It would also be helpful to semantically group labels and properties in the exported SVG.\n"
      },
      "date": 1639414700497
    },
    {
      "type": "fork",
      "site": "marc.tries.fed.wiki",
      "date": 1651126679792
    }
  ]
}