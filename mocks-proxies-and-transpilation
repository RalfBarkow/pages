{
  "title": "Mocks, Proxies, and Transpilation",
  "story": [
    {
      "type": "paragraph",
      "id": "28e3411882646add",
      "text": "BOURAQADI, Noury and MASON, Dave, 2016. Mocks, Proxies, and Transpilation as Development Strategies for Web Development. In: Proceedings of the 11th edition of the International Workshop on Smalltalk Technologies. New York, NY, USA: Association for Computing Machinery. 23 August 2016. p. 1–6. [Accessed 30 August 2022]. IWST’16. ISBN 978-1-4503-4524-8. DOI 10.1145/2991041.2991051. "
    },
    {
      "type": "markdown",
      "id": "dc6a8cbababf3294",
      "text": "> With the advent of [[HTML5]], we can now develop rich web apps that rival classical standalone apps. This richness together with the portability of web technologies, turned HTML 5 into a viable (and in the case of mobile - essential) solution to develop cross-platform apps. This possibility is heavily dependent on Javascript having acceptable performance, good testability, and a modern development environment. Despite its extensive use in creating highly interactive environments, most Javascript development environments currently use a compile/run paradigm. Similarly, testing is frequently tacked on, rather than being an integrated part of the development cycle. We propose PharoJS which leverages the Smalltalk IDE with a seamless transition from native Smalltalk tests, through proxied browser tests, to full browser-resident tests. We support the standard event-driven browser model and transpile Smalltalk code into efficient Javascript for execution in the browser. We further support testing - both manually and automatically - in a range of browsers to provide assured consistency upon deployment. In addition to transpiling the Smalltalk code to Javascript to perform tests in the browser, we can also run non-interactive tests within the Smalltalk environment. The unique feature we provide is the ability to run interactive tests largely within the Smalltalk IDE, so as to fully exploit the debugging and development environment, while the actual interaction occurs on the browser. We exhibit this new mode of development via a simple application.\n"
    },
    {
      "type": "pagefold",
      "id": "a2613f0cc640e7d3",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "6a0a91ec73868985",
      "text": "AGUIAR, Francisco Ricardo Taborda and DA COSTA, Dalberto Dias, [no date]. COBEM2021-0441 TRANSPILATION FROM NC FILES TO CANONICAL MACHINING FUNCTIONS. . Online. Available from: http://www.labusig.ufpr.br/projetos/COBEM-21-FRANCISCO.pdf [Accessed 8 January 2024]. \n\nANDRÉS, Bastidas F. and PÉREZ, María, 2017. Transpiler-based architecture for multi-platform web applications. In: 2017 IEEE Second Ecuador Technical Chapters Meeting (ETCM). Online. IEEE. 2017. p. 1–6. Available from: https://ieeexplore.ieee.org/abstract/document/8247456/ [Accessed 8 January 2024]. \n\nBÉLANGER, Marc-André and FEELEY, Marc, 2021. A Scheme Foreign Function Interface to JavaScript Based on an Infix Extension.. Online. 2021. Available from: https://www-labs.iro.umontreal.ca/~feeley/papers/BelangerFeeleyELS21.pdf [Accessed 8 January 2024]. \n\nBOURAQADI, Noury and MASON, Dave, 2016. Mocks, Proxies, and Transpilation as Development Strategies for Web Development. In: Proceedings of the 11th edition of the International Workshop on Smalltalk Technologies. Online. New York, NY, USA: Association for Computing Machinery. 23 August 2016. p. 1–6. IWST’16. ISBN 978-1-4503-4524-8. DOI 10.1145/2991041.2991051. [Accessed 30 August 2022]. \nWith the advent of HTML 5, we can now develop rich web apps that rival classical standalone apps. This richness together with the portability of web technologies, turned HTML 5 into a viable (and in the case of mobile - essential) solution to develop cross-platform apps. This possibility is heavily dependent on Javascript having acceptable performance, good testability, and a modern development environment. Despite its extensive use in creating highly interactive environments, most Javascript development environments currently use a compile/run paradigm. Similarly, testing is frequently tacked on, rather than being an integrated part of the development cycle. We propose PharoJS which leverages the Smalltalk IDE with a seamless transition from native Smalltalk tests, through proxied browser tests, to full browser-resident tests. We support the standard event-driven browser model and transpile Smalltalk code into efficient Javascript for execution in the browser. We further support testing - both manually and automatically - in a range of browsers to provide assured consistency upon deployment. In addition to transpiling the Smalltalk code to Javascript to perform tests in the browser, we can also run non-interactive tests within the Smalltalk environment. The unique feature we provide is the ability to run interactive tests largely within the Smalltalk IDE, so as to fully exploit the debugging and development environment, while the actual interaction occurs on the browser. We exhibit this new mode of development via a simple application.\n\nBOURAQADI, Noury and MASON, Dave, 2018. Test-driven development for generated portable Javascript apps. Science of Computer Programming. Online. 2018. Vol. 161, p. 2–17. Available from: https://www.sciencedirect.com/science/article/pii/S0167642318300595 [Accessed 8 January 2024]. \n\nBOURAQADI, Noury and MASON, Dave, 2023. PharoJS: Transpiling Pharo Classes to JS ECMAScript 5 versus ECMAScript 6. In: International Workshop on Smalltalk Technologies. Online. 2023. Available from: https://hal.science/hal-04194673/ [Accessed 8 January 2024]. \n\nESTÉVEZ GÁMEZ, Selene and OLIVARES ZEPAHUA, Beatriz Alejandra, 2018. Desarrollo de un generador de Aplicaciones Enriquecidas de Internet modeladas bajo el patrón arquitectónico MVC usando UML e IFML. Online. PhD Thesis. Available from: http://repositorios.orizaba.tecnm.mx:8080/xmlui/handle/123456789/392 [Accessed 8 January 2024]. \n\nMISSE-CHANABIER, Pierre, 2022. Testing a virtual machine developed in a simulation-based virtual machine generator. Online. PhD Thesis. Université de Lille. Available from: https://theses.hal.science/tel-04139297/ [Accessed 8 January 2024]."
    },
    {
      "type": "paragraph",
      "id": "fe73cc6db9c91a2e",
      "text": "MISSE-CHANABIER, Pierre, POLITO, Guillermo, BOURAQADI, Noury, DUCASSE, Stéphane, FABRESSE, Luc and TESONE, Pablo, 2022. Differential Testing of Simulation-Based Virtual Machine Generators: Automatic Detection of VM Generator Semantic Gaps Between Simulation and Generated VMs. In: PERROUIN, Gilles, MOHA, Naouel and SERIAI, Abdelhak-Djamel (eds.), Reuse and Software Quality. Online. Cham: Springer International Publishing. p. 103–119. Lecture Notes in Computer Science. ISBN 978-3-031-08128-6. [Accessed 8 January 2024]. \n\nMISSE-CHANABIER, Pierre, POLITO, Guillermo, DUCASSE, Stéphane, BOURAQADI, Noury, FABRESSE, Luc and TESONE, Pablo, 2022. Differential testing of simulation-based VM generators: automatic detection of VM generator semantic gaps between simulation and generated VMs. In: Proceedings of the 37th ACM/SIGAPP Symposium on Applied Computing. Online. Virtual Event: ACM. 25 April 2022. p. 1280–1283. ISBN 978-1-4503-8713-2. DOI 10.1145/3477314.3507171. [Accessed 8 January 2024]."
    },
    {
      "type": "paragraph",
      "id": "224bd6fd7e44c20d",
      "text": "⇒ [[Dealing With Semantic Gaps]]"
    },
    {
      "type": "paragraph",
      "id": "6ea58a92d67d4a5b",
      "text": "NUNNARI, Fabrizio and HELOIR, Alexis, 2018. Write-Once, Transpile-Everywhere: Re-using Motion Controllers of Virtual Humans Across Multiple Game Engines. In: DE PAOLIS, Lucio Tommaso and BOURDOT, Patrick (eds.), Augmented Reality, Virtual Reality, and Computer Graphics. Online. Cham: Springer International Publishing. p. 435–446. Lecture Notes in Computer Science. ISBN 978-3-319-95269-7. [Accessed 8 January 2024]. \n\nSELENE, Estévez Gámez and OLIVARES ZEPAHUA, Beatriz Alejandra, 2018. Desarrollo de un generador de Aplicaciones Enriquecidas de Internet modeladas bajo el patrón arquitectónico MVC usando UML e IFML. Online. PhD Thesis. Available from: http://repositorios.orizaba.tecnm.mx:8080/xmlui/handle/123456789/173 [Accessed 8 January 2024]."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Mocks, Proxies, and Transpilation",
        "story": []
      },
      "date": 1661983139280
    },
    {
      "item": {
        "type": "factory",
        "id": "28e3411882646add"
      },
      "id": "28e3411882646add",
      "type": "add",
      "date": 1661983140525
    },
    {
      "type": "edit",
      "id": "28e3411882646add",
      "item": {
        "type": "paragraph",
        "id": "28e3411882646add",
        "text": "\nBOURAQADI, Noury and MASON, Dave, 2016. Mocks, Proxies, and Transpilation as Development Strategies for Web Development. In: Proceedings of the 11th edition of the International Workshop on Smalltalk Technologies. Online. New York, NY, USA: Association for Computing Machinery. 23 August 2016. p. 1–6. [Accessed 30 August 2022]. IWST’16. ISBN 978-1-4503-4524-8. DOI 10.1145/2991041.2991051. "
      },
      "date": 1661983150387
    },
    {
      "type": "add",
      "id": "dc6a8cbababf3294",
      "item": {
        "type": "paragraph",
        "id": "dc6a8cbababf3294",
        "text": "> With the advent of HTML 5, we can now develop rich web apps that rival classical standalone apps. This richness together with the portability of web technologies, turned HTML 5 into a viable (and in the case of mobile - essential) solution to develop cross-platform apps. This possibility is heavily dependent on Javascript having acceptable performance, good testability, and a modern development environment. Despite its extensive use in creating highly interactive environments, most Javascript development environments currently use a compile/run paradigm. Similarly, testing is frequently tacked on, rather than being an integrated part of the development cycle. We propose PharoJS which leverages the Smalltalk IDE with a seamless transition from native Smalltalk tests, through proxied browser tests, to full browser-resident tests. We support the standard event-driven browser model and transpile Smalltalk code into efficient Javascript for execution in the browser. We further support testing - both manually and automatically - in a range of browsers to provide assured consistency upon deployment. In addition to transpiling the Smalltalk code to Javascript to perform tests in the browser, we can also run non-interactive tests within the Smalltalk environment. The unique feature we provide is the ability to run interactive tests largely within the Smalltalk IDE, so as to fully exploit the debugging and development environment, while the actual interaction occurs on the browser. We exhibit this new mode of development via a simple application.\n"
      },
      "after": "28e3411882646add",
      "date": 1661983153628
    },
    {
      "type": "edit",
      "id": "dc6a8cbababf3294",
      "item": {
        "type": "markdown",
        "id": "dc6a8cbababf3294",
        "text": "> With the advent of HTML 5, we can now develop rich web apps that rival classical standalone apps. This richness together with the portability of web technologies, turned HTML 5 into a viable (and in the case of mobile - essential) solution to develop cross-platform apps. This possibility is heavily dependent on Javascript having acceptable performance, good testability, and a modern development environment. Despite its extensive use in creating highly interactive environments, most Javascript development environments currently use a compile/run paradigm. Similarly, testing is frequently tacked on, rather than being an integrated part of the development cycle. We propose PharoJS which leverages the Smalltalk IDE with a seamless transition from native Smalltalk tests, through proxied browser tests, to full browser-resident tests. We support the standard event-driven browser model and transpile Smalltalk code into efficient Javascript for execution in the browser. We further support testing - both manually and automatically - in a range of browsers to provide assured consistency upon deployment. In addition to transpiling the Smalltalk code to Javascript to perform tests in the browser, we can also run non-interactive tests within the Smalltalk environment. The unique feature we provide is the ability to run interactive tests largely within the Smalltalk IDE, so as to fully exploit the debugging and development environment, while the actual interaction occurs on the browser. We exhibit this new mode of development via a simple application.\n"
      },
      "date": 1661983155379
    },
    {
      "type": "edit",
      "id": "dc6a8cbababf3294",
      "item": {
        "type": "markdown",
        "id": "dc6a8cbababf3294",
        "text": "> With the advent of [[HTML 5]], we can now develop rich web apps that rival classical standalone apps. This richness together with the portability of web technologies, turned HTML 5 into a viable (and in the case of mobile - essential) solution to develop cross-platform apps. This possibility is heavily dependent on Javascript having acceptable performance, good testability, and a modern development environment. Despite its extensive use in creating highly interactive environments, most Javascript development environments currently use a compile/run paradigm. Similarly, testing is frequently tacked on, rather than being an integrated part of the development cycle. We propose PharoJS which leverages the Smalltalk IDE with a seamless transition from native Smalltalk tests, through proxied browser tests, to full browser-resident tests. We support the standard event-driven browser model and transpile Smalltalk code into efficient Javascript for execution in the browser. We further support testing - both manually and automatically - in a range of browsers to provide assured consistency upon deployment. In addition to transpiling the Smalltalk code to Javascript to perform tests in the browser, we can also run non-interactive tests within the Smalltalk environment. The unique feature we provide is the ability to run interactive tests largely within the Smalltalk IDE, so as to fully exploit the debugging and development environment, while the actual interaction occurs on the browser. We exhibit this new mode of development via a simple application.\n"
      },
      "date": 1661983163377
    },
    {
      "item": {
        "type": "factory",
        "id": "a2613f0cc640e7d3"
      },
      "id": "a2613f0cc640e7d3",
      "type": "add",
      "after": "dc6a8cbababf3294",
      "date": 1704694929444
    },
    {
      "type": "edit",
      "id": "a2613f0cc640e7d3",
      "item": {
        "type": "pagefold",
        "id": "a2613f0cc640e7d3",
        "text": "~"
      },
      "date": 1704694933126
    },
    {
      "item": {
        "type": "factory",
        "id": "6a0a91ec73868985"
      },
      "id": "6a0a91ec73868985",
      "type": "add",
      "after": "a2613f0cc640e7d3",
      "date": 1704694936324
    },
    {
      "type": "edit",
      "id": "6a0a91ec73868985",
      "item": {
        "type": "paragraph",
        "id": "6a0a91ec73868985",
        "text": "\nAGUIAR, Francisco Ricardo Taborda and DA COSTA, Dalberto Dias, [no date]. COBEM2021-0441 TRANSPILATION FROM NC FILES TO CANONICAL MACHINING FUNCTIONS. . Online. Available from: http://www.labusig.ufpr.br/projetos/COBEM-21-FRANCISCO.pdf [Accessed 8 January 2024]. \n\nANDRÉS, Bastidas F. and PÉREZ, María, 2017. Transpiler-based architecture for multi-platform web applications. In: 2017 IEEE Second Ecuador Technical Chapters Meeting (ETCM). Online. IEEE. 2017. p. 1–6. Available from: https://ieeexplore.ieee.org/abstract/document/8247456/ [Accessed 8 January 2024]. \n\nBÉLANGER, Marc-André and FEELEY, Marc, 2021. A Scheme Foreign Function Interface to JavaScript Based on an Infix Extension.. Online. 2021. Available from: https://www-labs.iro.umontreal.ca/~feeley/papers/BelangerFeeleyELS21.pdf [Accessed 8 January 2024]. \n\nBOURAQADI, Noury and MASON, Dave, 2016. Mocks, Proxies, and Transpilation as Development Strategies for Web Development. In: Proceedings of the 11th edition of the International Workshop on Smalltalk Technologies. Online. New York, NY, USA: Association for Computing Machinery. 23 August 2016. p. 1–6. IWST’16. ISBN 978-1-4503-4524-8. DOI 10.1145/2991041.2991051. [Accessed 30 August 2022]. \nWith the advent of HTML 5, we can now develop rich web apps that rival classical standalone apps. This richness together with the portability of web technologies, turned HTML 5 into a viable (and in the case of mobile - essential) solution to develop cross-platform apps. This possibility is heavily dependent on Javascript having acceptable performance, good testability, and a modern development environment. Despite its extensive use in creating highly interactive environments, most Javascript development environments currently use a compile/run paradigm. Similarly, testing is frequently tacked on, rather than being an integrated part of the development cycle. We propose PharoJS which leverages the Smalltalk IDE with a seamless transition from native Smalltalk tests, through proxied browser tests, to full browser-resident tests. We support the standard event-driven browser model and transpile Smalltalk code into efficient Javascript for execution in the browser. We further support testing - both manually and automatically - in a range of browsers to provide assured consistency upon deployment. In addition to transpiling the Smalltalk code to Javascript to perform tests in the browser, we can also run non-interactive tests within the Smalltalk environment. The unique feature we provide is the ability to run interactive tests largely within the Smalltalk IDE, so as to fully exploit the debugging and development environment, while the actual interaction occurs on the browser. We exhibit this new mode of development via a simple application.\n\nBOURAQADI, Noury and MASON, Dave, 2018. Test-driven development for generated portable Javascript apps. Science of Computer Programming. Online. 2018. Vol. 161, p. 2–17. Available from: https://www.sciencedirect.com/science/article/pii/S0167642318300595 [Accessed 8 January 2024]. \n\nBOURAQADI, Noury and MASON, Dave, 2023. PharoJS: Transpiling Pharo Classes to JS ECMAScript 5 versus ECMAScript 6. In: International Workshop on Smalltalk Technologies. Online. 2023. Available from: https://hal.science/hal-04194673/ [Accessed 8 January 2024]. \n\nESTÉVEZ GÁMEZ, Selene and OLIVARES ZEPAHUA, Beatriz Alejandra, 2018. Desarrollo de un generador de Aplicaciones Enriquecidas de Internet modeladas bajo el patrón arquitectónico MVC usando UML e IFML. Online. PhD Thesis. Available from: http://repositorios.orizaba.tecnm.mx:8080/xmlui/handle/123456789/392 [Accessed 8 January 2024]. \n\nMISSE-CHANABIER, Pierre, 2022. Testing a virtual machine developed in a simulation-based virtual machine generator. Online. PhD Thesis. Université de Lille. Available from: https://theses.hal.science/tel-04139297/ [Accessed 8 January 2024]. \n\nMISSE-CHANABIER, Pierre, POLITO, Guillermo, BOURAQADI, Noury, DUCASSE, Stéphane, FABRESSE, Luc and TESONE, Pablo, 2022. Differential Testing of Simulation-Based Virtual Machine Generators: Automatic Detection of VM Generator Semantic Gaps Between Simulation and Generated VMs. In: PERROUIN, Gilles, MOHA, Naouel and SERIAI, Abdelhak-Djamel (eds.), Reuse and Software Quality. Online. Cham: Springer International Publishing. p. 103–119. Lecture Notes in Computer Science. ISBN 978-3-031-08128-6. [Accessed 8 January 2024]. \n\nMISSE-CHANABIER, Pierre, POLITO, Guillermo, DUCASSE, Stéphane, BOURAQADI, Noury, FABRESSE, Luc and TESONE, Pablo, 2022. Differential testing of simulation-based VM generators: automatic detection of VM generator semantic gaps between simulation and generated VMs. In: Proceedings of the 37th ACM/SIGAPP Symposium on Applied Computing. Online. Virtual Event: ACM. 25 April 2022. p. 1280–1283. ISBN 978-1-4503-8713-2. DOI 10.1145/3477314.3507171. [Accessed 8 January 2024]. \n\nNUNNARI, Fabrizio and HELOIR, Alexis, 2018. Write-Once, Transpile-Everywhere: Re-using Motion Controllers of Virtual Humans Across Multiple Game Engines. In: DE PAOLIS, Lucio Tommaso and BOURDOT, Patrick (eds.), Augmented Reality, Virtual Reality, and Computer Graphics. Online. Cham: Springer International Publishing. p. 435–446. Lecture Notes in Computer Science. ISBN 978-3-319-95269-7. [Accessed 8 January 2024]. \n\nSELENE, Estévez Gámez and OLIVARES ZEPAHUA, Beatriz Alejandra, 2018. Desarrollo de un generador de Aplicaciones Enriquecidas de Internet modeladas bajo el patrón arquitectónico MVC usando UML e IFML. Online. PhD Thesis. Available from: http://repositorios.orizaba.tecnm.mx:8080/xmlui/handle/123456789/173 [Accessed 8 January 2024]. \n"
      },
      "date": 1704694938487
    },
    {
      "type": "edit",
      "id": "6a0a91ec73868985",
      "item": {
        "type": "paragraph",
        "id": "6a0a91ec73868985",
        "text": "AGUIAR, Francisco Ricardo Taborda and DA COSTA, Dalberto Dias, [no date]. COBEM2021-0441 TRANSPILATION FROM NC FILES TO CANONICAL MACHINING FUNCTIONS. . Online. Available from: http://www.labusig.ufpr.br/projetos/COBEM-21-FRANCISCO.pdf [Accessed 8 January 2024]. \n\nANDRÉS, Bastidas F. and PÉREZ, María, 2017. Transpiler-based architecture for multi-platform web applications. In: 2017 IEEE Second Ecuador Technical Chapters Meeting (ETCM). Online. IEEE. 2017. p. 1–6. Available from: https://ieeexplore.ieee.org/abstract/document/8247456/ [Accessed 8 January 2024]. \n\nBÉLANGER, Marc-André and FEELEY, Marc, 2021. A Scheme Foreign Function Interface to JavaScript Based on an Infix Extension.. Online. 2021. Available from: https://www-labs.iro.umontreal.ca/~feeley/papers/BelangerFeeleyELS21.pdf [Accessed 8 January 2024]. \n\nBOURAQADI, Noury and MASON, Dave, 2016. Mocks, Proxies, and Transpilation as Development Strategies for Web Development. In: Proceedings of the 11th edition of the International Workshop on Smalltalk Technologies. Online. New York, NY, USA: Association for Computing Machinery. 23 August 2016. p. 1–6. IWST’16. ISBN 978-1-4503-4524-8. DOI 10.1145/2991041.2991051. [Accessed 30 August 2022]. \nWith the advent of HTML 5, we can now develop rich web apps that rival classical standalone apps. This richness together with the portability of web technologies, turned HTML 5 into a viable (and in the case of mobile - essential) solution to develop cross-platform apps. This possibility is heavily dependent on Javascript having acceptable performance, good testability, and a modern development environment. Despite its extensive use in creating highly interactive environments, most Javascript development environments currently use a compile/run paradigm. Similarly, testing is frequently tacked on, rather than being an integrated part of the development cycle. We propose PharoJS which leverages the Smalltalk IDE with a seamless transition from native Smalltalk tests, through proxied browser tests, to full browser-resident tests. We support the standard event-driven browser model and transpile Smalltalk code into efficient Javascript for execution in the browser. We further support testing - both manually and automatically - in a range of browsers to provide assured consistency upon deployment. In addition to transpiling the Smalltalk code to Javascript to perform tests in the browser, we can also run non-interactive tests within the Smalltalk environment. The unique feature we provide is the ability to run interactive tests largely within the Smalltalk IDE, so as to fully exploit the debugging and development environment, while the actual interaction occurs on the browser. We exhibit this new mode of development via a simple application.\n\nBOURAQADI, Noury and MASON, Dave, 2018. Test-driven development for generated portable Javascript apps. Science of Computer Programming. Online. 2018. Vol. 161, p. 2–17. Available from: https://www.sciencedirect.com/science/article/pii/S0167642318300595 [Accessed 8 January 2024]. \n\nBOURAQADI, Noury and MASON, Dave, 2023. PharoJS: Transpiling Pharo Classes to JS ECMAScript 5 versus ECMAScript 6. In: International Workshop on Smalltalk Technologies. Online. 2023. Available from: https://hal.science/hal-04194673/ [Accessed 8 January 2024]. \n\nESTÉVEZ GÁMEZ, Selene and OLIVARES ZEPAHUA, Beatriz Alejandra, 2018. Desarrollo de un generador de Aplicaciones Enriquecidas de Internet modeladas bajo el patrón arquitectónico MVC usando UML e IFML. Online. PhD Thesis. Available from: http://repositorios.orizaba.tecnm.mx:8080/xmlui/handle/123456789/392 [Accessed 8 January 2024]. \n\nMISSE-CHANABIER, Pierre, 2022. Testing a virtual machine developed in a simulation-based virtual machine generator. Online. PhD Thesis. Université de Lille. Available from: https://theses.hal.science/tel-04139297/ [Accessed 8 January 2024]. \n\nMISSE-CHANABIER, Pierre, POLITO, Guillermo, BOURAQADI, Noury, DUCASSE, Stéphane, FABRESSE, Luc and TESONE, Pablo, 2022. Differential Testing of Simulation-Based Virtual Machine Generators: Automatic Detection of VM Generator Semantic Gaps Between Simulation and Generated VMs. In: PERROUIN, Gilles, MOHA, Naouel and SERIAI, Abdelhak-Djamel (eds.), Reuse and Software Quality. Online. Cham: Springer International Publishing. p. 103–119. Lecture Notes in Computer Science. ISBN 978-3-031-08128-6. [Accessed 8 January 2024]. \n\nMISSE-CHANABIER, Pierre, POLITO, Guillermo, DUCASSE, Stéphane, BOURAQADI, Noury, FABRESSE, Luc and TESONE, Pablo, 2022. Differential testing of simulation-based VM generators: automatic detection of VM generator semantic gaps between simulation and generated VMs. In: Proceedings of the 37th ACM/SIGAPP Symposium on Applied Computing. Online. Virtual Event: ACM. 25 April 2022. p. 1280–1283. ISBN 978-1-4503-8713-2. DOI 10.1145/3477314.3507171. [Accessed 8 January 2024]. \n\nNUNNARI, Fabrizio and HELOIR, Alexis, 2018. Write-Once, Transpile-Everywhere: Re-using Motion Controllers of Virtual Humans Across Multiple Game Engines. In: DE PAOLIS, Lucio Tommaso and BOURDOT, Patrick (eds.), Augmented Reality, Virtual Reality, and Computer Graphics. Online. Cham: Springer International Publishing. p. 435–446. Lecture Notes in Computer Science. ISBN 978-3-319-95269-7. [Accessed 8 January 2024]. \n\nSELENE, Estévez Gámez and OLIVARES ZEPAHUA, Beatriz Alejandra, 2018. Desarrollo de un generador de Aplicaciones Enriquecidas de Internet modeladas bajo el patrón arquitectónico MVC usando UML e IFML. Online. PhD Thesis. Available from: http://repositorios.orizaba.tecnm.mx:8080/xmlui/handle/123456789/173 [Accessed 8 January 2024]. \n"
      },
      "date": 1704695096635
    },
    {
      "type": "edit",
      "id": "6a0a91ec73868985",
      "item": {
        "type": "paragraph",
        "id": "6a0a91ec73868985",
        "text": "AGUIAR, Francisco Ricardo Taborda and DA COSTA, Dalberto Dias, [no date]. COBEM2021-0441 TRANSPILATION FROM NC FILES TO CANONICAL MACHINING FUNCTIONS. . Online. Available from: http://www.labusig.ufpr.br/projetos/COBEM-21-FRANCISCO.pdf [Accessed 8 January 2024]. \n\nANDRÉS, Bastidas F. and PÉREZ, María, 2017. Transpiler-based architecture for multi-platform web applications. In: 2017 IEEE Second Ecuador Technical Chapters Meeting (ETCM). Online. IEEE. 2017. p. 1–6. Available from: https://ieeexplore.ieee.org/abstract/document/8247456/ [Accessed 8 January 2024]. \n\nBÉLANGER, Marc-André and FEELEY, Marc, 2021. A Scheme Foreign Function Interface to JavaScript Based on an Infix Extension.. Online. 2021. Available from: https://www-labs.iro.umontreal.ca/~feeley/papers/BelangerFeeleyELS21.pdf [Accessed 8 January 2024]. \n\nBOURAQADI, Noury and MASON, Dave, 2016. Mocks, Proxies, and Transpilation as Development Strategies for Web Development. In: Proceedings of the 11th edition of the International Workshop on Smalltalk Technologies. Online. New York, NY, USA: Association for Computing Machinery. 23 August 2016. p. 1–6. IWST’16. ISBN 978-1-4503-4524-8. DOI 10.1145/2991041.2991051. [Accessed 30 August 2022]. \nWith the advent of HTML 5, we can now develop rich web apps that rival classical standalone apps. This richness together with the portability of web technologies, turned HTML 5 into a viable (and in the case of mobile - essential) solution to develop cross-platform apps. This possibility is heavily dependent on Javascript having acceptable performance, good testability, and a modern development environment. Despite its extensive use in creating highly interactive environments, most Javascript development environments currently use a compile/run paradigm. Similarly, testing is frequently tacked on, rather than being an integrated part of the development cycle. We propose PharoJS which leverages the Smalltalk IDE with a seamless transition from native Smalltalk tests, through proxied browser tests, to full browser-resident tests. We support the standard event-driven browser model and transpile Smalltalk code into efficient Javascript for execution in the browser. We further support testing - both manually and automatically - in a range of browsers to provide assured consistency upon deployment. In addition to transpiling the Smalltalk code to Javascript to perform tests in the browser, we can also run non-interactive tests within the Smalltalk environment. The unique feature we provide is the ability to run interactive tests largely within the Smalltalk IDE, so as to fully exploit the debugging and development environment, while the actual interaction occurs on the browser. We exhibit this new mode of development via a simple application.\n\nBOURAQADI, Noury and MASON, Dave, 2018. Test-driven development for generated portable Javascript apps. Science of Computer Programming. Online. 2018. Vol. 161, p. 2–17. Available from: https://www.sciencedirect.com/science/article/pii/S0167642318300595 [Accessed 8 January 2024]. \n\nBOURAQADI, Noury and MASON, Dave, 2023. PharoJS: Transpiling Pharo Classes to JS ECMAScript 5 versus ECMAScript 6. In: International Workshop on Smalltalk Technologies. Online. 2023. Available from: https://hal.science/hal-04194673/ [Accessed 8 January 2024]. \n\nESTÉVEZ GÁMEZ, Selene and OLIVARES ZEPAHUA, Beatriz Alejandra, 2018. Desarrollo de un generador de Aplicaciones Enriquecidas de Internet modeladas bajo el patrón arquitectónico MVC usando UML e IFML. Online. PhD Thesis. Available from: http://repositorios.orizaba.tecnm.mx:8080/xmlui/handle/123456789/392 [Accessed 8 January 2024]. \n\nMISSE-CHANABIER, Pierre, 2022. Testing a virtual machine developed in a simulation-based virtual machine generator. Online. PhD Thesis. Université de Lille. Available from: https://theses.hal.science/tel-04139297/ [Accessed 8 January 2024]."
      },
      "date": 1704695137667
    },
    {
      "type": "add",
      "id": "fe73cc6db9c91a2e",
      "item": {
        "type": "paragraph",
        "id": "fe73cc6db9c91a2e",
        "text": "MISSE-CHANABIER, Pierre, POLITO, Guillermo, BOURAQADI, Noury, DUCASSE, Stéphane, FABRESSE, Luc and TESONE, Pablo, 2022. Differential Testing of Simulation-Based Virtual Machine Generators: Automatic Detection of VM Generator Semantic Gaps Between Simulation and Generated VMs. In: PERROUIN, Gilles, MOHA, Naouel and SERIAI, Abdelhak-Djamel (eds.), Reuse and Software Quality. Online. Cham: Springer International Publishing. p. 103–119. Lecture Notes in Computer Science. ISBN 978-3-031-08128-6. [Accessed 8 January 2024]. \n\nMISSE-CHANABIER, Pierre, POLITO, Guillermo, DUCASSE, Stéphane, BOURAQADI, Noury, FABRESSE, Luc and TESONE, Pablo, 2022. Differential testing of simulation-based VM generators: automatic detection of VM generator semantic gaps between simulation and generated VMs. In: Proceedings of the 37th ACM/SIGAPP Symposium on Applied Computing. Online. Virtual Event: ACM. 25 April 2022. p. 1280–1283. ISBN 978-1-4503-8713-2. DOI 10.1145/3477314.3507171. [Accessed 8 January 2024]."
      },
      "after": "6a0a91ec73868985",
      "date": 1704695159050
    },
    {
      "type": "add",
      "id": "6ea58a92d67d4a5b",
      "item": {
        "type": "paragraph",
        "id": "6ea58a92d67d4a5b",
        "text": "NUNNARI, Fabrizio and HELOIR, Alexis, 2018. Write-Once, Transpile-Everywhere: Re-using Motion Controllers of Virtual Humans Across Multiple Game Engines. In: DE PAOLIS, Lucio Tommaso and BOURDOT, Patrick (eds.), Augmented Reality, Virtual Reality, and Computer Graphics. Online. Cham: Springer International Publishing. p. 435–446. Lecture Notes in Computer Science. ISBN 978-3-319-95269-7. [Accessed 8 January 2024]. \n\nSELENE, Estévez Gámez and OLIVARES ZEPAHUA, Beatriz Alejandra, 2018. Desarrollo de un generador de Aplicaciones Enriquecidas de Internet modeladas bajo el patrón arquitectónico MVC usando UML e IFML. Online. PhD Thesis. Available from: http://repositorios.orizaba.tecnm.mx:8080/xmlui/handle/123456789/173 [Accessed 8 January 2024]."
      },
      "after": "fe73cc6db9c91a2e",
      "date": 1704695163029
    },
    {
      "type": "add",
      "id": "224bd6fd7e44c20d",
      "item": {
        "type": "paragraph",
        "id": "224bd6fd7e44c20d",
        "text": "⇒ [[Dealing With Semantic Gaps]]"
      },
      "after": "fe73cc6db9c91a2e",
      "date": 1704695187122
    },
    {
      "type": "edit",
      "id": "28e3411882646add",
      "item": {
        "type": "paragraph",
        "id": "28e3411882646add",
        "text": "BOURAQADI, Noury and MASON, Dave, 2016. Mocks, Proxies, and Transpilation as Development Strategies for Web Development. In: Proceedings of the 11th edition of the International Workshop on Smalltalk Technologies. New York, NY, USA: Association for Computing Machinery. 23 August 2016. p. 1–6. [Accessed 30 August 2022]. IWST’16. ISBN 978-1-4503-4524-8. DOI 10.1145/2991041.2991051. "
      },
      "date": 1704787394042
    },
    {
      "type": "edit",
      "id": "dc6a8cbababf3294",
      "item": {
        "type": "markdown",
        "id": "dc6a8cbababf3294",
        "text": "> With the advent of [[HTML5]], we can now develop rich web apps that rival classical standalone apps. This richness together with the portability of web technologies, turned HTML 5 into a viable (and in the case of mobile - essential) solution to develop cross-platform apps. This possibility is heavily dependent on Javascript having acceptable performance, good testability, and a modern development environment. Despite its extensive use in creating highly interactive environments, most Javascript development environments currently use a compile/run paradigm. Similarly, testing is frequently tacked on, rather than being an integrated part of the development cycle. We propose PharoJS which leverages the Smalltalk IDE with a seamless transition from native Smalltalk tests, through proxied browser tests, to full browser-resident tests. We support the standard event-driven browser model and transpile Smalltalk code into efficient Javascript for execution in the browser. We further support testing - both manually and automatically - in a range of browsers to provide assured consistency upon deployment. In addition to transpiling the Smalltalk code to Javascript to perform tests in the browser, we can also run non-interactive tests within the Smalltalk environment. The unique feature we provide is the ability to run interactive tests largely within the Smalltalk IDE, so as to fully exploit the debugging and development environment, while the actual interaction occurs on the browser. We exhibit this new mode of development via a simple application.\n"
      },
      "date": 1704888459580
    }
  ]
}