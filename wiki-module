{
  "title": "Wiki Module",
  "story": [
    {
      "type": "paragraph",
      "id": "9650b0580f01f5d4",
      "text": "We collect functions that read and write [[Wiki Page]]s and transform them into HTML for display in a browser."
    },
    {
      "type": "paragraph",
      "id": "da8a8bf854bd7d23",
      "text": "The functions are written in the [[Elm]] programming language."
    },
    {
      "type": "image",
      "id": "d61d994bbaeb36a4",
      "text": "Side-by-Side Comparison",
      "size": "wide",
      "width": 419,
      "height": 148,
      "url": "/assets/plugins/image/c5af8b0fa7c0fe03374303b4267aa2d6.jpg"
    },
    {
      "type": "paragraph",
      "id": "b7e235132ef58e4d",
      "text": "In the figure above, we see the same page displayed on one side (left) by the fedwiki reference implementation and on the other side (right) by the [[elm-pages]] prototype. The prototype uses the Wiki module."
    },
    {
      "type": "markdown",
      "id": "175a3519c7e35ba8",
      "text": "We define a module named `Wiki` that exposes various types and functions related to [[Wiki Page JSON]]."
    },
    {
      "type": "paragraph",
      "id": "ffb4be9aa4fdffbb",
      "text": "Let's break down the [https://github.com/dreyeck/blog/blob/ed164f8beb61e093e1efcf41f0fd7c18dfb62643/elm-pages-starter-express/src/Wiki.elm code] step by step:"
    },
    {
      "type": "markdown",
      "id": "b57db9b7ea825a68",
      "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (see [[Plugins]] – the story item type identifies the plugin that can render the item).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns HTML based on the story item type.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `[[Decode.oneOf]]` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `[[Decode.oneOf]]` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
    },
    {
      "type": "markdown",
      "id": "a0b3cdbaa3a42121",
      "text": "Overall, this Elm module provides a framework for working with [[Wiki Page JSON]], including types for pages, stories, and events, along with functions for encoding and decoding these types to and from JSON. The `renderStory` function generates HTML based on the type of story items provided."
    },
    {
      "type": "paragraph",
      "id": "fb08e832b431b037",
      "text": "⇒ [[Render Story]]"
    },
    {
      "type": "paragraph",
      "id": "526751853c6deb70",
      "text": "feat: Add renderStory function for rendering Wiki.Story [[Item]]s to HTML. [https://github.com/dreyeck/blog/commit/991721118e80f7cba4af277055fc6413c381e3d2 commit], [https://github.com/dreyeck/blog/blob/991721118e80f7cba4af277055fc6413c381e3d2/elm-pages-starter-express/app/Route/View/Slug_/SPLAT__.elm#L156-L175 code]"
    },
    {
      "type": "paragraph",
      "id": "5844461890908459",
      "text": "refactor(renderStory): Move function to Wiki module. [https://github.com/dreyeck/blog/commit/c9480f0bc43ea0df14e79ebbf24cb96fe9caa567 commit]"
    },
    {
      "type": "pagefold",
      "id": "8a297b3249a5759a",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "5c19ea0350fd7286",
      "site": "jeff.dojo.fed.wiki",
      "slug": "item",
      "title": "Item",
      "text": "An item, often but not always a paragraph, makes up one self-contained element of a wiki page's [[Story]]."
    },
    {
      "type": "reference",
      "id": "da9ebdd586b11e67",
      "site": "goals.pod.rodwell.me",
      "slug": "json-schema",
      "title": "JSON Schema",
      "text": "We define the schema for federated wiki pages to the depth that we know it. We use a BNF-like notation to suggest JSON elements. Any ambiguity will be resolved by examining the example. We close with a brief reflection on the successes of the format."
    },
    {
      "type": "markdown",
      "id": "9889b9fa672f52b9",
      "text": "> A story is an array of paragraph-like items. The type identifies the plugin that can render the item."
    },
    {
      "type": "markdown",
      "id": "45afb1c5f8a604c2",
      "text": "> The journal contains a [[Sequence]] of actions that creates the story. Actions are of a small number of types relating to editing actions."
    },
    {
      "type": "reference",
      "id": "2c78d6d67a505e4a",
      "site": "wiki.ralfbarkow.ch",
      "slug": "track-successes-and-failures",
      "title": "Track Successes and Failures",
      "text": "To track successes and failures when using [[Decode.oneOf]], you can use Result type to capture the outcome of each decoding attempt. Instead of directly applying Decode.oneOf to a list of decoders, you can map each decoder with Decode.attempt to wrap it in a Result type. This way, you can keep track of the success or failure of each decoding attempt."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Wiki Module",
        "story": []
      },
      "date": 1693817322083
    },
    {
      "item": {
        "type": "factory",
        "id": "9650b0580f01f5d4"
      },
      "id": "9650b0580f01f5d4",
      "type": "add",
      "date": 1693817323178
    },
    {
      "type": "edit",
      "id": "9650b0580f01f5d4",
      "item": {
        "type": "paragraph",
        "id": "9650b0580f01f5d4",
        "text": "We collect functions that read and write wiki pages and transform them into HTML to display them in a browser. The functions are written in the Elm programming language."
      },
      "date": 1693817327477
    },
    {
      "type": "edit",
      "id": "9650b0580f01f5d4",
      "item": {
        "type": "paragraph",
        "id": "9650b0580f01f5d4",
        "text": "We collect functions that read and write [[Wiki Page]]s and transform them into HTML to display them in a browser. The functions are written in the Elm programming language."
      },
      "date": 1693819755920
    },
    {
      "type": "edit",
      "id": "9650b0580f01f5d4",
      "item": {
        "type": "paragraph",
        "id": "9650b0580f01f5d4",
        "text": "We collect functions that read and write [[Wiki Page]]s and transform them into HTML to display them in a browser."
      },
      "date": 1693819839349
    },
    {
      "type": "add",
      "id": "da8a8bf854bd7d23",
      "item": {
        "type": "paragraph",
        "id": "da8a8bf854bd7d23",
        "text": "The functions are written in the [[Elm]] programming language."
      },
      "after": "9650b0580f01f5d4",
      "date": 1693819844693
    },
    {
      "type": "edit",
      "id": "da8a8bf854bd7d23",
      "item": {
        "type": "paragraph",
        "id": "da8a8bf854bd7d23",
        "text": "The functions are written in the [[Elm]] programming language. [https://github.com/RalfBarkow/vite-elm-dojo/blob/main/src/Wiki.elm code]"
      },
      "date": 1693819875924
    },
    {
      "type": "edit",
      "id": "da8a8bf854bd7d23",
      "item": {
        "type": "paragraph",
        "id": "da8a8bf854bd7d23",
        "text": "The functions are written in the [[Elm]] programming language. [https://github.com/RalfBarkow/vite-elm-dojo/blob/main/src/Wiki.elm code], [https://github.com/dreyeck/blog/blob/main/elm-pages-starter-express/src/Wiki.elm]"
      },
      "date": 1693819929658
    },
    {
      "type": "edit",
      "id": "da8a8bf854bd7d23",
      "item": {
        "type": "paragraph",
        "id": "da8a8bf854bd7d23",
        "text": "The functions are written in the [[Elm]] programming language. [https://github.com/RalfBarkow/vite-elm-dojo/blob/main/src/Wiki.elm code], [https://github.com/dreyeck/blog/blob/main/elm-pages-starter-express/src/Wiki.elm code]"
      },
      "date": 1693819936620
    },
    {
      "item": {
        "type": "factory",
        "id": "8a297b3249a5759a"
      },
      "id": "8a297b3249a5759a",
      "type": "add",
      "after": "da8a8bf854bd7d23",
      "date": 1693820213475
    },
    {
      "type": "edit",
      "id": "8a297b3249a5759a",
      "item": {
        "type": "pagefold",
        "id": "8a297b3249a5759a",
        "text": "Building blocks"
      },
      "date": 1693820216547
    },
    {
      "item": {
        "type": "factory",
        "id": "653a281adc3b34e7"
      },
      "id": "653a281adc3b34e7",
      "type": "add",
      "after": "8a297b3249a5759a",
      "date": 1693820218515
    },
    {
      "type": "edit",
      "id": "653a281adc3b34e7",
      "item": {
        "type": "paragraph",
        "id": "653a281adc3b34e7",
        "text": "Building blocks"
      },
      "date": 1693820222082
    },
    {
      "type": "edit",
      "id": "8a297b3249a5759a",
      "item": {
        "type": "pagefold",
        "id": "8a297b3249a5759a",
        "text": "~"
      },
      "date": 1693820224337
    },
    {
      "item": {
        "type": "factory",
        "id": "da9ebdd586b11e67"
      },
      "id": "da9ebdd586b11e67",
      "type": "add",
      "after": "653a281adc3b34e7",
      "date": 1693847355543
    },
    {
      "type": "edit",
      "id": "da9ebdd586b11e67",
      "item": {
        "type": "reference",
        "id": "da9ebdd586b11e67",
        "site": "goals.pod.rodwell.me",
        "slug": "json-schema",
        "title": "JSON Schema",
        "text": "We define the schema for federated wiki pages to the depth that we know it. We use a BNF-like notation to suggest JSON elements. Any ambiguity will be resolved by examining the example. We close with a brief reflection on the successes of the format."
      },
      "date": 1693847358541
    },
    {
      "type": "edit",
      "id": "653a281adc3b34e7",
      "item": {
        "type": "paragraph",
        "id": "653a281adc3b34e7",
        "text": "⇒ [[Module]] ⇒ Building blocks"
      },
      "date": 1693847513159
    },
    {
      "id": "9889b9fa672f52b9",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9889b9fa672f52b9",
        "text": "A story is an array of paragraph-like items. The type identifies the plugin that can render the item."
      },
      "after": "da9ebdd586b11e67",
      "attribution": {
        "page": "JSON Schema",
        "site": "goals.pod.rodwell.me"
      },
      "date": 1693847652473
    },
    {
      "type": "edit",
      "id": "9889b9fa672f52b9",
      "item": {
        "type": "paragraph",
        "id": "9889b9fa672f52b9",
        "text": "> A story is an array of paragraph-like items. The type identifies the plugin that can render the item."
      },
      "date": 1693847661843
    },
    {
      "type": "edit",
      "id": "9889b9fa672f52b9",
      "item": {
        "type": "markdown",
        "id": "9889b9fa672f52b9",
        "text": "> A story is an array of paragraph-like items. The type identifies the plugin that can render the item."
      },
      "date": 1693847663185
    },
    {
      "id": "45afb1c5f8a604c2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "45afb1c5f8a604c2",
        "text": "The journal contains a sequence of actions that creates the story. Actions are of a small number of types relating to editing actions."
      },
      "after": "9889b9fa672f52b9",
      "attribution": {
        "page": "JSON Schema"
      },
      "date": 1693847708737
    },
    {
      "type": "edit",
      "id": "45afb1c5f8a604c2",
      "item": {
        "type": "paragraph",
        "id": "45afb1c5f8a604c2",
        "text": "> The journal contains a sequence of actions that creates the story. Actions are of a small number of types relating to editing actions."
      },
      "date": 1693847715136
    },
    {
      "type": "edit",
      "id": "45afb1c5f8a604c2",
      "item": {
        "type": "markdown",
        "id": "45afb1c5f8a604c2",
        "text": "> The journal contains a sequence of actions that creates the story. Actions are of a small number of types relating to editing actions."
      },
      "date": 1693847716767
    },
    {
      "type": "edit",
      "id": "653a281adc3b34e7",
      "item": {
        "type": "paragraph",
        "id": "653a281adc3b34e7",
        "text": "⇒ [[Module]] ⇒ Building blocks ⇒ [[Action]]"
      },
      "date": 1693847792212
    },
    {
      "type": "edit",
      "id": "653a281adc3b34e7",
      "item": {
        "type": "paragraph",
        "id": "653a281adc3b34e7",
        "text": "⇒ [[Module]] ⇒ Building blocks ⇒ [[Action]] ⇒ [[Types]]"
      },
      "date": 1693847875756
    },
    {
      "type": "edit",
      "id": "653a281adc3b34e7",
      "item": {
        "type": "paragraph",
        "id": "653a281adc3b34e7",
        "text": "⇒ [[Module]] ⇒ Building blocks ⇒ [[Action]] ⇒ [[Types]] ⇒ [[Type]]"
      },
      "date": 1693847898975
    },
    {
      "item": {
        "type": "factory",
        "id": "5c19ea0350fd7286"
      },
      "id": "5c19ea0350fd7286",
      "type": "add",
      "after": "45afb1c5f8a604c2",
      "date": 1693847984469
    },
    {
      "type": "edit",
      "id": "5c19ea0350fd7286",
      "item": {
        "type": "reference",
        "id": "5c19ea0350fd7286",
        "site": "jeff.dojo.fed.wiki",
        "slug": "item",
        "title": "Item",
        "text": "An item, often but not always a paragraph, makes up one self-contained element of a wiki page's story."
      },
      "date": 1693847987469
    },
    {
      "id": "5c19ea0350fd7286",
      "type": "move",
      "order": [
        "9650b0580f01f5d4",
        "da8a8bf854bd7d23",
        "8a297b3249a5759a",
        "653a281adc3b34e7",
        "5c19ea0350fd7286",
        "da9ebdd586b11e67",
        "9889b9fa672f52b9",
        "45afb1c5f8a604c2"
      ],
      "date": 1693848058925
    },
    {
      "type": "edit",
      "id": "5c19ea0350fd7286",
      "item": {
        "type": "reference",
        "id": "5c19ea0350fd7286",
        "site": "jeff.dojo.fed.wiki",
        "slug": "item",
        "title": "Item",
        "text": "An item, often but not always a paragraph, makes up one self-contained element of a wiki page's [[Story]]."
      },
      "date": 1693848114643
    },
    {
      "type": "edit",
      "id": "9650b0580f01f5d4",
      "item": {
        "type": "paragraph",
        "id": "9650b0580f01f5d4",
        "text": "We collect functions that read and write [[Wiki Page]]s and transform them into HTML for display them in a browser."
      },
      "date": 1693848170466
    },
    {
      "type": "edit",
      "id": "9650b0580f01f5d4",
      "item": {
        "type": "paragraph",
        "id": "9650b0580f01f5d4",
        "text": "We collect functions that read and write [[Wiki Page]]s and transform them into HTML for display  in a browser."
      },
      "date": 1693848197558
    },
    {
      "type": "edit",
      "id": "9650b0580f01f5d4",
      "item": {
        "type": "paragraph",
        "id": "9650b0580f01f5d4",
        "text": "We collect functions that read and write [[Wiki Page]]s and transform them into HTML for display in a browser."
      },
      "date": 1693848201011
    },
    {
      "type": "add",
      "id": "fb08e832b431b037",
      "item": {
        "type": "paragraph",
        "id": "fb08e832b431b037",
        "text": "⇒ [[Render Story]]"
      },
      "after": "da8a8bf854bd7d23",
      "date": 1693937483560
    },
    {
      "type": "add",
      "id": "5844461890908459",
      "item": {
        "type": "paragraph",
        "id": "5844461890908459",
        "text": " refactor(renderStory): Move function to Wiki module "
      },
      "after": "fb08e832b431b037",
      "date": 1694077648091
    },
    {
      "type": "edit",
      "id": "5844461890908459",
      "item": {
        "type": "paragraph",
        "id": "5844461890908459",
        "text": "refactor(renderStory): Move function to Wiki module [https://github.com/dreyeck/blog/commit/c9480f0bc43ea0df14e79ebbf24cb96fe9caa567 commit]"
      },
      "date": 1694077660130
    },
    {
      "type": "edit",
      "id": "5844461890908459",
      "item": {
        "type": "paragraph",
        "id": "5844461890908459",
        "text": "refactor(renderStory): Move function to Wiki module. [https://github.com/dreyeck/blog/commit/c9480f0bc43ea0df14e79ebbf24cb96fe9caa567 commit]"
      },
      "date": 1694077666379
    },
    {
      "id": "5844461890908459",
      "type": "remove",
      "removedTo": {
        "page": "2023-09-07"
      },
      "date": 1694077897889
    },
    {
      "id": "5844461890908459",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5844461890908459",
        "text": "refactor(renderStory): Move function to Wiki module. [https://github.com/dreyeck/blog/commit/c9480f0bc43ea0df14e79ebbf24cb96fe9caa567 commit]"
      },
      "after": "fb08e832b431b037",
      "attribution": {
        "page": "2023-09-07"
      },
      "date": 1694077904087
    },
    {
      "id": "d61d994bbaeb36a4",
      "type": "add",
      "item": {
        "type": "image",
        "id": "d61d994bbaeb36a4",
        "text": "Side-by-Side Comparison [https://github.com/dreyeck/blog/commit/27ba4048efae557d442773d44f0ba54715f627e6 commit]",
        "size": "wide",
        "width": 419,
        "height": 148,
        "url": "/assets/plugins/image/c5af8b0fa7c0fe03374303b4267aa2d6.jpg"
      },
      "after": "5844461890908459",
      "attribution": {
        "page": "Render Story"
      },
      "date": 1694078896995
    },
    {
      "type": "edit",
      "id": "d61d994bbaeb36a4",
      "item": {
        "type": "image",
        "id": "d61d994bbaeb36a4",
        "text": "Side-by-Side Comparison [https://github.com/dreyeck/blog/commit/27ba4048efae557d442773d44f0ba54715f627e6 commit], [https://github.com/dreyeck/blog/commit/c9480f0bc43ea0df14e79ebbf24cb96fe9caa567 commit]",
        "size": "wide",
        "width": 419,
        "height": 148,
        "url": "/assets/plugins/image/c5af8b0fa7c0fe03374303b4267aa2d6.jpg"
      },
      "date": 1694078917071
    },
    {
      "id": "d61d994bbaeb36a4",
      "type": "move",
      "order": [
        "9650b0580f01f5d4",
        "da8a8bf854bd7d23",
        "fb08e832b431b037",
        "d61d994bbaeb36a4",
        "5844461890908459",
        "8a297b3249a5759a",
        "653a281adc3b34e7",
        "5c19ea0350fd7286",
        "da9ebdd586b11e67",
        "9889b9fa672f52b9",
        "45afb1c5f8a604c2"
      ],
      "date": 1694078955543
    },
    {
      "type": "add",
      "id": "3ebb78b2aaf3ba1c",
      "item": {
        "type": "paragraph",
        "id": "3ebb78b2aaf3ba1c",
        "text": "See the same Wiki Page JSON displayed on one side (left) by the fedwiki reference implementation and on the other side (right) by the elm-pages prototype."
      },
      "after": "fb08e832b431b037",
      "date": 1694079030549
    },
    {
      "id": "3ebb78b2aaf3ba1c",
      "type": "move",
      "order": [
        "9650b0580f01f5d4",
        "da8a8bf854bd7d23",
        "fb08e832b431b037",
        "d61d994bbaeb36a4",
        "3ebb78b2aaf3ba1c",
        "5844461890908459",
        "8a297b3249a5759a",
        "653a281adc3b34e7",
        "5c19ea0350fd7286",
        "da9ebdd586b11e67",
        "9889b9fa672f52b9",
        "45afb1c5f8a604c2"
      ],
      "date": 1694079045510
    },
    {
      "type": "remove",
      "id": "3ebb78b2aaf3ba1c",
      "date": 1694079060184
    },
    {
      "id": "5844461890908459",
      "type": "move",
      "order": [
        "9650b0580f01f5d4",
        "da8a8bf854bd7d23",
        "fb08e832b431b037",
        "5844461890908459",
        "d61d994bbaeb36a4",
        "8a297b3249a5759a",
        "653a281adc3b34e7",
        "5c19ea0350fd7286",
        "da9ebdd586b11e67",
        "9889b9fa672f52b9",
        "45afb1c5f8a604c2"
      ],
      "date": 1694079132290
    },
    {
      "id": "b7e235132ef58e4d",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b7e235132ef58e4d",
        "text": "We see the same [[Wiki Page JSON]] displayed on one side (left) by the fedwiki reference implementation and on the other side (right) by the elm-pages prototype. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$16939825695UUWPO:dreyeck.freedombox.rocks?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "after": "d61d994bbaeb36a4",
      "attribution": {
        "page": "Render Story"
      },
      "date": 1694079135867
    },
    {
      "type": "edit",
      "id": "b7e235132ef58e4d",
      "item": {
        "type": "paragraph",
        "id": "b7e235132ef58e4d",
        "text": "We see the same [[Wiki Page JSON]] displayed on one side (left) by the fedwiki reference implementation and on the other side (right) by the [[elm-pages]] prototype. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$16939825695UUWPO:dreyeck.freedombox.rocks?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "date": 1694079154800
    },
    {
      "id": "526751853c6deb70",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "526751853c6deb70",
        "text": "feat: Add renderStory function for rendering Wiki.Story [[Item]]s to HTML. [https://github.com/dreyeck/blog/commit/991721118e80f7cba4af277055fc6413c381e3d2 commit], [https://github.com/dreyeck/blog/blob/991721118e80f7cba4af277055fc6413c381e3d2/elm-pages-starter-express/app/Route/View/Slug_/SPLAT__.elm#L156-L175 code]"
      },
      "after": "fb08e832b431b037",
      "attribution": {
        "page": "Render Story"
      },
      "date": 1694079198029
    },
    {
      "id": "d61d994bbaeb36a4",
      "type": "move",
      "order": [
        "9650b0580f01f5d4",
        "da8a8bf854bd7d23",
        "d61d994bbaeb36a4",
        "fb08e832b431b037",
        "526751853c6deb70",
        "5844461890908459",
        "b7e235132ef58e4d",
        "8a297b3249a5759a",
        "653a281adc3b34e7",
        "5c19ea0350fd7286",
        "da9ebdd586b11e67",
        "9889b9fa672f52b9",
        "45afb1c5f8a604c2"
      ],
      "date": 1694146428254
    },
    {
      "id": "b7e235132ef58e4d",
      "type": "move",
      "order": [
        "9650b0580f01f5d4",
        "da8a8bf854bd7d23",
        "d61d994bbaeb36a4",
        "b7e235132ef58e4d",
        "fb08e832b431b037",
        "526751853c6deb70",
        "5844461890908459",
        "8a297b3249a5759a",
        "653a281adc3b34e7",
        "5c19ea0350fd7286",
        "da9ebdd586b11e67",
        "9889b9fa672f52b9",
        "45afb1c5f8a604c2"
      ],
      "date": 1694146431686
    },
    {
      "item": {
        "type": "factory",
        "id": "175a3519c7e35ba8"
      },
      "id": "175a3519c7e35ba8",
      "type": "add",
      "after": "45afb1c5f8a604c2",
      "date": 1694146485704
    },
    {
      "id": "175a3519c7e35ba8",
      "type": "move",
      "order": [
        "9650b0580f01f5d4",
        "da8a8bf854bd7d23",
        "d61d994bbaeb36a4",
        "b7e235132ef58e4d",
        "175a3519c7e35ba8",
        "fb08e832b431b037",
        "526751853c6deb70",
        "5844461890908459",
        "8a297b3249a5759a",
        "653a281adc3b34e7",
        "5c19ea0350fd7286",
        "da9ebdd586b11e67",
        "9889b9fa672f52b9",
        "45afb1c5f8a604c2"
      ],
      "date": 1694146493336
    },
    {
      "type": "edit",
      "id": "175a3519c7e35ba8",
      "item": {
        "type": "markdown",
        "id": "175a3519c7e35ba8",
        "text": "This Elm code defines a module named `Wiki` that exposes various types and functions related to a wiki-like system. Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module. It exposes `Event`, `Page`, `Story`, `pageDecoder`, `pageEncoder`, and `renderStory`.\n\n2. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n3. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n4. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items).\n\n5. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n6. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n7. `type Story = ...`:\n   - This defines a custom type named `Story`. It can be one of four variants: `Future`, `Factory`, `Paragraph`, or `EmptyStory`.\n\n8. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n9. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n10. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n11. `type alias StoryItemAlias = ...`, `storyItemDecoder : Decode.Decoder StoryItemAlias`, `storyItemEncoder : StoryItemAlias -> Encode.Value`:\n   - These lines define an alias for a common structure (`StoryItemAlias`), along with its decoder and encoder functions.\n\n12. `type alias ParagraphItemAlias = ...`, `paragraphItemDecoder : Decode.Decoder ParagraphItemAlias`, `paragraphItemEncoder : ParagraphItemAlias -> Encode.Value`:\n   - Similar to the previous point, these lines define an alias for a structure (`ParagraphItemAlias`) and its decoder and encoder functions.\n\n13. `type alias FactoryItemAlias = ...`, `addFactoryItemDecoder : Decode.Decoder AddFactoryItemAlias`, `addFactoryItemEncoder : AddFactoryItemAlias -> Encode.Value`:\n   - Similar to the previous points, these lines define an alias for a structure (`FactoryItemAlias`) and its decoder and encoder functions.\n\n14. `type alias FutureItemAlias = ...`, `futureEventDecoder : Decode.Decoder FutureItemAlias`:\n   - Similar to the previous points, these lines define an alias for a structure (`FutureItemAlias`) and its decoder.\n\n15. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n16. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n17. `createEventDecoder : Decode.Decoder CreateEvent`, `addFactoryEventDecoder : Decode.Decoder AddFactoryEvent`, `editEventDecoder : Decode.Decoder EditEvent`:\n   - These lines define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n18. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n19. Comments in the code provide additional information and explanations for some of the functions and types.\n\nOverall, this Elm module provides a framework for working with a wiki-like system, including types for pages, stories, and events, along with functions for encoding and decoding these types to and from JSON. The `renderStory` function generates HTML based on the type of story provided."
      },
      "date": 1694146495910
    },
    {
      "type": "edit",
      "id": "175a3519c7e35ba8",
      "item": {
        "type": "markdown",
        "id": "175a3519c7e35ba8",
        "text": "This Elm code defines a module named `Wiki` that exposes various types and functions related to [[Wiki Page JSON]]. Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module. It exposes `Event`, `Page`, `Story`, `pageDecoder`, `pageEncoder`, and `renderStory`.\n\n2. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n3. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n4. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items).\n\n5. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n6. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n7. `type Story = ...`:\n   - This defines a custom type named `Story`. It can be one of four variants: `Future`, `Factory`, `Paragraph`, or `EmptyStory`.\n\n8. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n9. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n10. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n11. `type alias StoryItemAlias = ...`, `storyItemDecoder : Decode.Decoder StoryItemAlias`, `storyItemEncoder : StoryItemAlias -> Encode.Value`:\n   - These lines define an alias for a common structure (`StoryItemAlias`), along with its decoder and encoder functions.\n\n12. `type alias ParagraphItemAlias = ...`, `paragraphItemDecoder : Decode.Decoder ParagraphItemAlias`, `paragraphItemEncoder : ParagraphItemAlias -> Encode.Value`:\n   - Similar to the previous point, these lines define an alias for a structure (`ParagraphItemAlias`) and its decoder and encoder functions.\n\n13. `type alias FactoryItemAlias = ...`, `addFactoryItemDecoder : Decode.Decoder AddFactoryItemAlias`, `addFactoryItemEncoder : AddFactoryItemAlias -> Encode.Value`:\n   - Similar to the previous points, these lines define an alias for a structure (`FactoryItemAlias`) and its decoder and encoder functions.\n\n14. `type alias FutureItemAlias = ...`, `futureEventDecoder : Decode.Decoder FutureItemAlias`:\n   - Similar to the previous points, these lines define an alias for a structure (`FutureItemAlias`) and its decoder.\n\n15. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n16. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n17. `createEventDecoder : Decode.Decoder CreateEvent`, `addFactoryEventDecoder : Decode.Decoder AddFactoryEvent`, `editEventDecoder : Decode.Decoder EditEvent`:\n   - These lines define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n18. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n19. Comments in the code provide additional information and explanations for some of the functions and types.\n\nOverall, this Elm module provides a framework for working with a wiki-like system, including types for pages, stories, and events, along with functions for encoding and decoding these types to and from JSON. The `renderStory` function generates HTML based on the type of story provided."
      },
      "date": 1694146585117
    },
    {
      "type": "edit",
      "id": "175a3519c7e35ba8",
      "item": {
        "type": "markdown",
        "id": "175a3519c7e35ba8",
        "text": "We define a module named `Wiki` that exposes various types and functions related to [[Wiki Page JSON]]. Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module. It exposes `Event`, `Page`, `Story`, `pageDecoder`, `pageEncoder`, and `renderStory`.\n\n2. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n3. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n4. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items).\n\n5. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n6. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n7. `type Story = ...`:\n   - This defines a custom type named `Story`. It can be one of four variants: `Future`, `Factory`, `Paragraph`, or `EmptyStory`.\n\n8. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n9. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n10. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n11. `type alias StoryItemAlias = ...`, `storyItemDecoder : Decode.Decoder StoryItemAlias`, `storyItemEncoder : StoryItemAlias -> Encode.Value`:\n   - These lines define an alias for a common structure (`StoryItemAlias`), along with its decoder and encoder functions.\n\n12. `type alias ParagraphItemAlias = ...`, `paragraphItemDecoder : Decode.Decoder ParagraphItemAlias`, `paragraphItemEncoder : ParagraphItemAlias -> Encode.Value`:\n   - Similar to the previous point, these lines define an alias for a structure (`ParagraphItemAlias`) and its decoder and encoder functions.\n\n13. `type alias FactoryItemAlias = ...`, `addFactoryItemDecoder : Decode.Decoder AddFactoryItemAlias`, `addFactoryItemEncoder : AddFactoryItemAlias -> Encode.Value`:\n   - Similar to the previous points, these lines define an alias for a structure (`FactoryItemAlias`) and its decoder and encoder functions.\n\n14. `type alias FutureItemAlias = ...`, `futureEventDecoder : Decode.Decoder FutureItemAlias`:\n   - Similar to the previous points, these lines define an alias for a structure (`FutureItemAlias`) and its decoder.\n\n15. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n16. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n17. `createEventDecoder : Decode.Decoder CreateEvent`, `addFactoryEventDecoder : Decode.Decoder AddFactoryEvent`, `editEventDecoder : Decode.Decoder EditEvent`:\n   - These lines define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n18. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n19. Comments in the code provide additional information and explanations for some of the functions and types.\n\nOverall, this Elm module provides a framework for working with a wiki-like system, including types for pages, stories, and events, along with functions for encoding and decoding these types to and from JSON. The `renderStory` function generates HTML based on the type of story provided."
      },
      "date": 1694146651484
    },
    {
      "type": "edit",
      "id": "175a3519c7e35ba8",
      "item": {
        "type": "markdown",
        "id": "175a3519c7e35ba8",
        "text": "We define a module named `Wiki` that exposes various types and functions related to [[Wiki Page JSON]]. Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n2. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n3. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n4. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items).\n\n5. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n6. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n7. `type Story = ...`:\n   - This defines a custom type named `Story`. It can be one of four variants: `Future`, `Factory`, `Paragraph`, or `EmptyStory`.\n\n8. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n9. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n10. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n11. `type alias StoryItemAlias = ...`, `storyItemDecoder : Decode.Decoder StoryItemAlias`, `storyItemEncoder : StoryItemAlias -> Encode.Value`:\n   - These lines define an alias for a common structure (`StoryItemAlias`), along with its decoder and encoder functions.\n\n12. `type alias ParagraphItemAlias = ...`, `paragraphItemDecoder : Decode.Decoder ParagraphItemAlias`, `paragraphItemEncoder : ParagraphItemAlias -> Encode.Value`:\n   - Similar to the previous point, these lines define an alias for a structure (`ParagraphItemAlias`) and its decoder and encoder functions.\n\n13. `type alias FactoryItemAlias = ...`, `addFactoryItemDecoder : Decode.Decoder AddFactoryItemAlias`, `addFactoryItemEncoder : AddFactoryItemAlias -> Encode.Value`:\n   - Similar to the previous points, these lines define an alias for a structure (`FactoryItemAlias`) and its decoder and encoder functions.\n\n14. `type alias FutureItemAlias = ...`, `futureEventDecoder : Decode.Decoder FutureItemAlias`:\n   - Similar to the previous points, these lines define an alias for a structure (`FutureItemAlias`) and its decoder.\n\n15. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n16. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n17. `createEventDecoder : Decode.Decoder CreateEvent`, `addFactoryEventDecoder : Decode.Decoder AddFactoryEvent`, `editEventDecoder : Decode.Decoder EditEvent`:\n   - These lines define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n18. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n19. Comments in the code provide additional information and explanations for some of the functions and types.\n\nOverall, this Elm module provides a framework for working with a wiki-like system, including types for pages, stories, and events, along with functions for encoding and decoding these types to and from JSON. The `renderStory` function generates HTML based on the type of story provided."
      },
      "date": 1694146685773
    },
    {
      "type": "edit",
      "id": "175a3519c7e35ba8",
      "item": {
        "type": "markdown",
        "id": "175a3519c7e35ba8",
        "text": "We define a module named `Wiki` that exposes various types and functions related to [[Wiki Page JSON]]."
      },
      "date": 1694146758740
    },
    {
      "type": "add",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n2. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n3. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n4. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items).\n\n5. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n6. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n7. `type Story = ...`:\n   - This defines a custom type named `Story`. It can be one of four variants: `Future`, `Factory`, `Paragraph`, or `EmptyStory`.\n\n8. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n9. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n10. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n11. `type alias StoryItemAlias = ...`, `storyItemDecoder : Decode.Decoder StoryItemAlias`, `storyItemEncoder : StoryItemAlias -> Encode.Value`:\n   - These lines define an alias for a common structure (`StoryItemAlias`), along with its decoder and encoder functions.\n\n12. `type alias ParagraphItemAlias = ...`, `paragraphItemDecoder : Decode.Decoder ParagraphItemAlias`, `paragraphItemEncoder : ParagraphItemAlias -> Encode.Value`:\n   - Similar to the previous point, these lines define an alias for a structure (`ParagraphItemAlias`) and its decoder and encoder functions.\n\n13. `type alias FactoryItemAlias = ...`, `addFactoryItemDecoder : Decode.Decoder AddFactoryItemAlias`, `addFactoryItemEncoder : AddFactoryItemAlias -> Encode.Value`:\n   - Similar to the previous points, these lines define an alias for a structure (`FactoryItemAlias`) and its decoder and encoder functions.\n\n14. `type alias FutureItemAlias = ...`, `futureEventDecoder : Decode.Decoder FutureItemAlias`:\n   - Similar to the previous points, these lines define an alias for a structure (`FutureItemAlias`) and its decoder.\n\n15. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n16. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n17. `createEventDecoder : Decode.Decoder CreateEvent`, `addFactoryEventDecoder : Decode.Decoder AddFactoryEvent`, `editEventDecoder : Decode.Decoder EditEvent`:\n   - These lines define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n18. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n19. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "after": "175a3519c7e35ba8",
      "date": 1694146776085
    },
    {
      "type": "add",
      "id": "a0b3cdbaa3a42121",
      "item": {
        "type": "markdown",
        "id": "a0b3cdbaa3a42121",
        "text": "Overall, this Elm module provides a framework for working with a wiki-like system, including types for pages, stories, and events, along with functions for encoding and decoding these types to and from JSON. The `renderStory` function generates HTML based on the type of story provided."
      },
      "after": "f8cc8c0389f80236",
      "date": 1694146796662
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n2. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n3. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n4. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items).\n\n5. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n6. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n7. `type Story = ...`:\n   - This defines a user-defined type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: plugins).\n\n8. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n9. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n10. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n11. `type alias StoryItemAlias = ...`, `storyItemDecoder : Decode.Decoder StoryItemAlias`, `storyItemEncoder : StoryItemAlias -> Encode.Value`:\n   - These lines define an alias for a common structure (`StoryItemAlias`), along with its decoder and encoder functions.\n\n12. `type alias ParagraphItemAlias = ...`, `paragraphItemDecoder : Decode.Decoder ParagraphItemAlias`, `paragraphItemEncoder : ParagraphItemAlias -> Encode.Value`:\n   - Similar to the previous point, these lines define an alias for a structure (`ParagraphItemAlias`) and its decoder and encoder functions.\n\n13. `type alias FactoryItemAlias = ...`, `addFactoryItemDecoder : Decode.Decoder AddFactoryItemAlias`, `addFactoryItemEncoder : AddFactoryItemAlias -> Encode.Value`:\n   - Similar to the previous points, these lines define an alias for a structure (`FactoryItemAlias`) and its decoder and encoder functions.\n\n14. `type alias FutureItemAlias = ...`, `futureEventDecoder : Decode.Decoder FutureItemAlias`:\n   - Similar to the previous points, these lines define an alias for a structure (`FutureItemAlias`) and its decoder.\n\n15. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n16. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n17. `createEventDecoder : Decode.Decoder CreateEvent`, `addFactoryEventDecoder : Decode.Decoder AddFactoryEvent`, `editEventDecoder : Decode.Decoder EditEvent`:\n   - These lines define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n18. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n19. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694146904694
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n2. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n3. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n4. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items).\n\n5. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n6. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n7. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: plugins).\n\n8. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n9. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n10. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n11. `type alias StoryItemAlias = ...`, `storyItemDecoder : Decode.Decoder StoryItemAlias`, `storyItemEncoder : StoryItemAlias -> Encode.Value`:\n   - These lines define an alias for a common structure (`StoryItemAlias`), along with its decoder and encoder functions.\n\n12. `type alias ParagraphItemAlias = ...`, `paragraphItemDecoder : Decode.Decoder ParagraphItemAlias`, `paragraphItemEncoder : ParagraphItemAlias -> Encode.Value`:\n   - Similar to the previous point, these lines define an alias for a structure (`ParagraphItemAlias`) and its decoder and encoder functions.\n\n13. `type alias FactoryItemAlias = ...`, `addFactoryItemDecoder : Decode.Decoder AddFactoryItemAlias`, `addFactoryItemEncoder : AddFactoryItemAlias -> Encode.Value`:\n   - Similar to the previous points, these lines define an alias for a structure (`FactoryItemAlias`) and its decoder and encoder functions.\n\n14. `type alias FutureItemAlias = ...`, `futureEventDecoder : Decode.Decoder FutureItemAlias`:\n   - Similar to the previous points, these lines define an alias for a structure (`FutureItemAlias`) and its decoder.\n\n15. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n16. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n17. `createEventDecoder : Decode.Decoder CreateEvent`, `addFactoryEventDecoder : Decode.Decoder AddFactoryEvent`, `editEventDecoder : Decode.Decoder EditEvent`:\n   - These lines define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n18. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n19. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694146941146
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n2. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n3. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n4. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/action items).\n\n5. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n6. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n7. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: plugins).\n\n8. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n9. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n10. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n11. `type alias StoryItemAlias = ...`, `storyItemDecoder : Decode.Decoder StoryItemAlias`, `storyItemEncoder : StoryItemAlias -> Encode.Value`:\n   - These lines define an alias for a common structure (`StoryItemAlias`), along with its decoder and encoder functions.\n\n12. `type alias ParagraphItemAlias = ...`, `paragraphItemDecoder : Decode.Decoder ParagraphItemAlias`, `paragraphItemEncoder : ParagraphItemAlias -> Encode.Value`:\n   - Similar to the previous point, these lines define an alias for a structure (`ParagraphItemAlias`) and its decoder and encoder functions.\n\n13. `type alias FactoryItemAlias = ...`, `addFactoryItemDecoder : Decode.Decoder AddFactoryItemAlias`, `addFactoryItemEncoder : AddFactoryItemAlias -> Encode.Value`:\n   - Similar to the previous points, these lines define an alias for a structure (`FactoryItemAlias`) and its decoder and encoder functions.\n\n14. `type alias FutureItemAlias = ...`, `futureEventDecoder : Decode.Decoder FutureItemAlias`:\n   - Similar to the previous points, these lines define an alias for a structure (`FutureItemAlias`) and its decoder.\n\n15. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n16. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n17. `createEventDecoder : Decode.Decoder CreateEvent`, `addFactoryEventDecoder : Decode.Decoder AddFactoryEvent`, `editEventDecoder : Decode.Decoder EditEvent`:\n   - These lines define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n18. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n19. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694147102240
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n2. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n3. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n4. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n5. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n6. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n7. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: plugins).\n\n8. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n9. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n10. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n11. `type alias StoryItemAlias = ...`, `storyItemDecoder : Decode.Decoder StoryItemAlias`, `storyItemEncoder : StoryItemAlias -> Encode.Value`:\n   - These lines define an alias for a common structure (`StoryItemAlias`), along with its decoder and encoder functions.\n\n12. `type alias ParagraphItemAlias = ...`, `paragraphItemDecoder : Decode.Decoder ParagraphItemAlias`, `paragraphItemEncoder : ParagraphItemAlias -> Encode.Value`:\n   - Similar to the previous point, these lines define an alias for a structure (`ParagraphItemAlias`) and its decoder and encoder functions.\n\n13. `type alias FactoryItemAlias = ...`, `addFactoryItemDecoder : Decode.Decoder AddFactoryItemAlias`, `addFactoryItemEncoder : AddFactoryItemAlias -> Encode.Value`:\n   - Similar to the previous points, these lines define an alias for a structure (`FactoryItemAlias`) and its decoder and encoder functions.\n\n14. `type alias FutureItemAlias = ...`, `futureEventDecoder : Decode.Decoder FutureItemAlias`:\n   - Similar to the previous points, these lines define an alias for a structure (`FutureItemAlias`) and its decoder.\n\n15. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n16. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n17. `createEventDecoder : Decode.Decoder CreateEvent`, `addFactoryEventDecoder : Decode.Decoder AddFactoryEvent`, `editEventDecoder : Decode.Decoder EditEvent`:\n   - These lines define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n18. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n19. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694147165051
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n2. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n3. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n4. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n5. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n6. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n7. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: plugins).\n\n8. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n9. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n10. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n11. `type alias StoryItemAlias = ...`, `storyItemDecoder : Decode.Decoder StoryItemAlias`, `storyItemEncoder : StoryItemAlias -> Encode.Value`:\n   - These lines define an alias for a common structure (`StoryItemAlias`), along with its decoder and encoder functions.\n\n12. `type alias ParagraphItemAlias = ...`, `paragraphItemDecoder : Decode.Decoder ParagraphItemAlias`, `paragraphItemEncoder : ParagraphItemAlias -> Encode.Value`:\n   - Similar to the previous point, these lines define an alias for a structure (`ParagraphItemAlias`) and its decoder and encoder functions.\n\n13. `type alias FactoryItemAlias = ...`, `addFactoryItemDecoder : Decode.Decoder AddFactoryItemAlias`, `addFactoryItemEncoder : AddFactoryItemAlias -> Encode.Value`:\n   - Similar to the previous points, these lines define an alias for a structure (`FactoryItemAlias`) and its decoder and encoder functions.\n\n14. `type alias FutureItemAlias = ...`, `futureEventDecoder : Decode.Decoder FutureItemAlias`:\n   - Similar to the previous points, these lines define an alias for a structure (`FutureItemAlias`) and its decoder.\n\n15. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n16. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n17. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n18. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n19. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694149867560
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n2. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n3. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n4. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n5. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n6. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n7. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: plugins).\n\n8. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n9. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n10. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n15. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n16. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n17. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n18. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n19. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694150020623
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n3. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n4. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n5. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n6. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n7. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: plugins).\n\n8. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n9. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n10. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n15. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n16. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n17. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n18. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n19. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694150131407
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: plugins).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694150176301
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694150809058
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694151108709
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\nNote: Add decoders for other journal event variants as needed\n        -- remove\n        -- move\n        -- fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694151317231
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n\nNote: Add other journal event variants as needed\n        -- remove\n        -- move\n        -- fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694151439448
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\nNote: Add other journal event variants as needed\n        -- remove\n        -- move\n        -- fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694151480024
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n   - Note: Add other journal event variants as needed\n        -- remove\n        -- move\n        -- fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694151508964
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n   - Note: Add other journal event variants as needed\n        - remove\n        - move\n        - fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694151549144
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n   - Note: Add other journal event variants as needed\n   - remove\n   - move\n   - fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694151599500
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n   - Note: Add other journal event variants as needed\n      - remove\n      - move\n      - fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694151621046
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event`/[[Action]] items).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n   - Note: Add other journal event variants/[[Action]]s as needed\n      - remove\n      - move\n      - fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694151716440
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items/[[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n   - Note: Add other journal event variants/[[Action]]s as needed\n      - remove\n      - move\n      - fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694151824532
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items or [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible variants (`Create`, `Edit`, `AddFactory`) based on the data.\n   - Note: Add other journal event variants/[[Action]]s as needed\n      - remove\n      - move\n      - fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694151898482
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items or [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `Edit`, `AddFactory`) based on the data.\n   - Note: Add other types as needed\n      - remove\n      - move\n      - fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694152052379
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items or [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`,  `AddFactory`, `Edit`) based on the data.\n   - Note: Add other types as needed\n      - remove\n      - move\n      - fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694152135354
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items or [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data.\n   - Note: Add other types as needed\n      - remove\n      - move\n      - fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694152157462
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:\n\n1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items or [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data.\n   - Note: Add other types as needed\n      - remove\n      - move\n      - fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694152233676
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the code step by step:"
      },
      "date": 1694152795033
    },
    {
      "type": "add",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: \n   - This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: \n   - This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`:\n   - These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`:\n   - This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items or [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page = ...`:\n   - This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value = ...`:\n   - This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`:\n   - This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg = ...`:\n   - This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story = ...`:\n   - This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value = ...`:\n   - This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`:\n   - This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event = ...`:\n   - This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data.\n   - Note: Add other types as needed\n      - remove\n      - move\n      - fork\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value = ...`:\n   - This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "after": "f8cc8c0389f80236",
      "date": 1694152796535
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the [https://github.com/dreyeck/blog/blob/c9480f0bc43ea0df14e79ebbf24cb96fe9caa567/elm-pages-starter-express/src/Wiki.elm code] step by step:"
      },
      "date": 1694152804785
    },
    {
      "type": "edit",
      "id": "da8a8bf854bd7d23",
      "item": {
        "type": "paragraph",
        "id": "da8a8bf854bd7d23",
        "text": "The functions are written in the [[Elm]] programming language."
      },
      "date": 1694152868932
    },
    {
      "type": "edit",
      "id": "d61d994bbaeb36a4",
      "item": {
        "type": "image",
        "id": "d61d994bbaeb36a4",
        "text": "Side-by-Side Comparison",
        "size": "wide",
        "width": 419,
        "height": 148,
        "url": "/assets/plugins/image/c5af8b0fa7c0fe03374303b4267aa2d6.jpg"
      },
      "date": 1694152913224
    },
    {
      "type": "edit",
      "id": "b7e235132ef58e4d",
      "item": {
        "type": "paragraph",
        "id": "b7e235132ef58e4d",
        "text": "We see the same [[Wiki Page JSON]] displayed on one side (left) by the fedwiki reference implementation and on the other side (right) by the [[elm-pages]] prototype."
      },
      "date": 1694152968234
    },
    {
      "type": "edit",
      "id": "a0b3cdbaa3a42121",
      "item": {
        "type": "markdown",
        "id": "a0b3cdbaa3a42121",
        "text": "Overall, this Elm module provides a framework for working with [[Wiki Page JSON]], including types for pages, stories, and events, along with functions for encoding and decoding these types to and from JSON. The `renderStory` function generates HTML based on the type of story provided."
      },
      "date": 1694153370943
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694153710371
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694153736151
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694153745880
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694153777097
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694153803284
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694153915610
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694154035620
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694154057735
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694154263988
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694154288235
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]]).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694154339976
    },
    {
      "type": "remove",
      "id": "653a281adc3b34e7",
      "date": 1694155109038
    },
    {
      "type": "edit",
      "id": "45afb1c5f8a604c2",
      "item": {
        "type": "markdown",
        "id": "45afb1c5f8a604c2",
        "text": "> The journal contains a [[Sequence]] of actions that creates the story. Actions are of a small number of types relating to editing actions."
      },
      "date": 1694155162617
    },
    {
      "type": "fork",
      "date": 1694155177466
    },
    {
      "type": "edit",
      "id": "b7e235132ef58e4d",
      "item": {
        "type": "paragraph",
        "id": "b7e235132ef58e4d",
        "text": "We see the same page displayed on one side (left) by the fedwiki reference implementation and on the other side (right) by the [[elm-pages]] prototype."
      },
      "date": 1694155279329
    },
    {
      "type": "fork",
      "date": 1694155555128
    },
    {
      "type": "fork",
      "date": 1694155878478
    },
    {
      "type": "edit",
      "id": "b7e235132ef58e4d",
      "item": {
        "type": "paragraph",
        "id": "b7e235132ef58e4d",
        "text": "We see the same page displayed on one side (left) by the fedwiki reference implementation and on the other side (right) by the [[elm-pages]] prototype. The prototype uses the Wiki module."
      },
      "date": 1694155993840
    },
    {
      "type": "edit",
      "id": "b7e235132ef58e4d",
      "item": {
        "type": "paragraph",
        "id": "b7e235132ef58e4d",
        "text": "In the figure above, we see the same page displayed on one side (left) by the fedwiki reference implementation and on the other side (right) by the [[elm-pages]] prototype. The prototype uses the Wiki module."
      },
      "date": 1694156079701
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]] – The type identifies the plugin that can render the item.).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694156314105
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (keyword: [[Plugins]] – The story item type identifies the plugin that can render the item.).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694156365073
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (see [[Plugins]] – The story item type identifies the plugin that can render the item.).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694156388791
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (see [[Plugins]] – the story item type identifies the plugin that can render the item).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the variant of the `Story`.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694156411952
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (see [[Plugins]] – the story item type identifies the plugin that can render the item).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the story item type.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `Decode.oneOf` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `Decode.oneOf` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694157184166
    },
    {
      "item": {
        "type": "factory",
        "id": "2c78d6d67a505e4a"
      },
      "id": "2c78d6d67a505e4a",
      "type": "add",
      "after": "45afb1c5f8a604c2",
      "date": 1694157427526
    },
    {
      "type": "edit",
      "id": "2c78d6d67a505e4a",
      "item": {
        "type": "reference",
        "id": "2c78d6d67a505e4a",
        "site": "wiki.ralfbarkow.ch",
        "slug": "track-successes-and-failures",
        "title": "Track Successes and Failures",
        "text": "To track successes and failures when using Decode.oneOf, you can use Result type to capture the outcome of each decoding attempt. Instead of directly applying Decode.oneOf to a list of decoders, you can map each decoder with Decode.attempt to wrap it in a Result type. This way, you can keep track of the success or failure of each decoding attempt."
      },
      "date": 1694157430107
    },
    {
      "type": "edit",
      "id": "2c78d6d67a505e4a",
      "item": {
        "type": "reference",
        "id": "2c78d6d67a505e4a",
        "site": "wiki.ralfbarkow.ch",
        "slug": "track-successes-and-failures",
        "title": "Track Successes and Failures",
        "text": "To track successes and failures when using [[Decode.oneOf]], you can use Result type to capture the outcome of each decoding attempt. Instead of directly applying Decode.oneOf to a list of decoders, you can map each decoder with Decode.attempt to wrap it in a Result type. This way, you can keep track of the success or failure of each decoding attempt."
      },
      "date": 1694157862267
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (see [[Plugins]] – the story item type identifies the plugin that can render the item).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns an `Html` element. It generates HTML based on the story item type.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `[[Decode.oneOf]]` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `[[Decode.oneOf]]` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694157954511
    },
    {
      "type": "fork",
      "date": 1694158127777
    },
    {
      "type": "edit",
      "id": "b57db9b7ea825a68",
      "item": {
        "type": "markdown",
        "id": "b57db9b7ea825a68",
        "text": "1. `module Wiki exposing (Event(..), Page, Story(..), pageDecoder, pageEncoder, renderStory)`: This line declares a module named `Wiki` and specifies which values (types, functions) are accessible from outside the module.\n\n1. `import Html exposing (Html)`: This line imports the `Html` module from the Elm standard library, making the `Html` type and related functions available for use.\n\n1. `import Json.Decode as Decode` and `import Json.Encode as Encode`: These lines import the `Json.Decode` and `Json.Encode` modules, which provide functions for decoding and encoding JSON data, respectively. They are used later in the module.\n\n1. `type alias Page = ...`: This defines a custom type alias named `Page`. A `Page` has three fields: `title` (a string), `story` (a list of `Story` items), and `journal` (a list of `Event` items, called [[Action]]s).\n\n1. `pageDecoder : Decode.Decoder Page`: This defines a JSON decoder for the `Page` type. It maps over three fields (\"title\", \"story\", \"journal\") to construct a `Page`.\n\n1. `pageEncoder : Page -> Encode.Value`: This defines a function that encodes a `Page` into a JSON value.\n\n1. `type Story = ...`: This defines a custom type called `Story`. It can initially be one of four variants: `Future`, `Factory`, `Paragraph` or `EmptyStory`. Other variants will be added later (see [[Plugins]] – the story item type identifies the plugin that can render the item).\n\n1. `renderStory : Story -> Html msg`: This defines a function `renderStory` that takes a `Story` and returns HTML based on the story item type.\n\n1. `storyDecoder : Decode.Decoder Story`: This defines a JSON decoder for the `Story` type. It uses `[[Decode.oneOf]]` to choose among the possible variants (`Future`, `Paragraph`, `Factory`, `EmptyStory`) based on the data.\n\n1. `storyEncoder : Story -> Encode.Value`: This defines a function that encodes a `Story` into a JSON value.\n\n1. `type Event = ...`: This defines a custom type named `Event`. It can initially be one of three variants: `Create`, `AddFactory`, or `Edit`.\n\n1. `eventDecoder : Decode.Decoder Event`: This defines a JSON decoder for the `Event` type. It uses `[[Decode.oneOf]]` to choose among the possible [[Action]]s (`Create`, `AddFactory`, `Edit`) based on the data. Note: Add other types as needed (remove, move, fork).\n\n1. We define JSON decoders for specific event types (`CreateEvent`, `AddFactoryEvent`, `EditEvent`, …).\n\n1. `journalEncoder : Event -> Encode.Value`: This defines a function that encodes an `Event` into a JSON value.\n\n1. Comments in the code provide additional information and explanations for some of the functions and types."
      },
      "date": 1694160672855
    },
    {
      "type": "edit",
      "id": "a0b3cdbaa3a42121",
      "item": {
        "type": "markdown",
        "id": "a0b3cdbaa3a42121",
        "text": "Overall, this Elm module provides a framework for working with [[Wiki Page JSON]], including types for pages, stories, and events, along with functions for encoding and decoding these types to and from JSON. The `renderStory` function generates HTML based on the type of story items provided."
      },
      "date": 1694161470600
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the https://github.com/dreyeck/blog/blob/ed164f8beb61e093e1efcf41f0fd7c18dfb62643/elm-pages-starter-express/src/Wiki.elm code] step by step:"
      },
      "date": 1694175518377
    },
    {
      "type": "edit",
      "id": "f8cc8c0389f80236",
      "item": {
        "type": "markdown",
        "id": "f8cc8c0389f80236",
        "text": "Let's break down the [https://github.com/dreyeck/blog/blob/ed164f8beb61e093e1efcf41f0fd7c18dfb62643/elm-pages-starter-express/src/Wiki.elm code] step by step:"
      },
      "date": 1694175524428
    },
    {
      "item": {
        "type": "factory",
        "id": "ffb4be9aa4fdffbb"
      },
      "id": "ffb4be9aa4fdffbb",
      "type": "add",
      "after": "2c78d6d67a505e4a",
      "date": 1694175568831
    },
    {
      "id": "ffb4be9aa4fdffbb",
      "type": "move",
      "order": [
        "9650b0580f01f5d4",
        "da8a8bf854bd7d23",
        "d61d994bbaeb36a4",
        "b7e235132ef58e4d",
        "175a3519c7e35ba8",
        "f8cc8c0389f80236",
        "ffb4be9aa4fdffbb",
        "b57db9b7ea825a68",
        "a0b3cdbaa3a42121",
        "fb08e832b431b037",
        "526751853c6deb70",
        "5844461890908459",
        "8a297b3249a5759a",
        "5c19ea0350fd7286",
        "da9ebdd586b11e67",
        "9889b9fa672f52b9",
        "45afb1c5f8a604c2",
        "2c78d6d67a505e4a"
      ],
      "date": 1694175574682
    },
    {
      "type": "remove",
      "id": "f8cc8c0389f80236",
      "date": 1694175579172
    },
    {
      "type": "edit",
      "id": "ffb4be9aa4fdffbb",
      "item": {
        "type": "paragraph",
        "id": "ffb4be9aa4fdffbb",
        "text": "Let's break down the [https://github.com/dreyeck/blog/blob/ed164f8beb61e093e1efcf41f0fd7c18dfb62643/elm-pages-starter-express/src/Wiki.elm code] step by step:"
      },
      "date": 1694175580342
    }
  ]
}