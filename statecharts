{
  "title": "Statecharts",
  "story": [
    {
      "type": "paragraph",
      "id": "5d94be326dc7f9d3",
      "text": "HAREL, David, 1987. [[Statecharts]]: a visual formalism for complex systems. Science of Computer Programming. 1 June 1987. Vol. 8, no. 3, p. 231–274. DOI 10.1016/0167-6423(87)90035-9. "
    },
    {
      "type": "markdown",
      "id": "6e3f9109b4f6b8dd",
      "text": "> We present a broad extension of the conventional formalism of state machines and state diagrams, that is relevant to the specification and design of complex discrete-event systems, such as multi-computer real-time systems, communication protocols and digital control units. Our diagrams, which we call statecharts, extend conventional state-transition diagrams with essentially three elements, dealing, respectively, with the notions of hierarchy, concurrency and communication. These transform the language of state diagrams into a highly structured and economical description language. Statecharts are thus compact and expressive—small diagrams can express complex behavior—as well as compositional and modular. When coupled with the capabilities of computerized graphics, statecharts enable viewing the description at different levels of detail, and make even very large specifications manageable and comprehensible. In fact, we intend to demonstrate here that statecharts counter many of the objections raised against conventional state diagrams, and thus appear to render specification by diagrams an attractive and plausible approach. Statecharts can be used either as a stand-alone behavioral description or as part of a more general design methodology that deals also with the system’s other aspects, such as functional decomposition and data-flow specification. We also discuss some practical experience that was gained over the last three years in applying the statechart formalism to the specification of a particularly complex system.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Statecharts",
        "story": []
      },
      "date": 1660446515556
    },
    {
      "id": "5d94be326dc7f9d3",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "5d94be326dc7f9d3",
        "text": "HAREL, David, 1987. [[Statecharts]]: a visual formalism for complex systems. Science of Computer Programming. 1 June 1987. Vol. 8, no. 3, p. 231–274. DOI 10.1016/0167-6423(87)90035-9. "
      },
      "date": 1660446522314
    },
    {
      "id": "6e3f9109b4f6b8dd",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "6e3f9109b4f6b8dd",
        "text": "> We present a broad extension of the conventional formalism of state machines and state diagrams, that is relevant to the specification and design of complex discrete-event systems, such as multi-computer real-time systems, communication protocols and digital control units. Our diagrams, which we call statecharts, extend conventional state-transition diagrams with essentially three elements, dealing, respectively, with the notions of hierarchy, concurrency and communication. These transform the language of state diagrams into a highly structured and economical description language. Statecharts are thus compact and expressive—small diagrams can express complex behavior—as well as compositional and modular. When coupled with the capabilities of computerized graphics, statecharts enable viewing the description at different levels of detail, and make even very large specifications manageable and comprehensible. In fact, we intend to demonstrate here that statecharts counter many of the objections raised against conventional state diagrams, and thus appear to render specification by diagrams an attractive and plausible approach. Statecharts can be used either as a stand-alone behavioral description or as part of a more general design methodology that deals also with the system’s other aspects, such as functional decomposition and data-flow specification. We also discuss some practical experience that was gained over the last three years in applying the statechart formalism to the specification of a particularly complex system.\n"
      },
      "after": "5d94be326dc7f9d3",
      "date": 1660446525759
    }
  ]
}