{
  "title": "stepLife",
  "story": [
    {
      "type": "paragraph",
      "id": "484e092159df2d01",
      "text": "Explain what this does."
    },
    {
      "type": "paragraph",
      "id": "3faf85d9513a946b",
      "text": "Once you have an [[ndarray]] you can access elements using .set and .get. [https://github.com/scijs/ndarray github]"
    },
    {
      "type": "paragraph",
      "id": "2835e0aa8f98614d",
      "text": "For example, here is an implementation of *Conway's game of life* [https://en.wikipedia.org/wiki/Conway's_Game_of_Life wikipedia]  using ndarrays:"
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": "// Code that does it.\n\nfunction stepLife(next_state, cur_state) {\n\n  //Get array shape\n  var nx = cur_state.shape[0], \n      ny = cur_state.shape[1]\n\n  //Loop over all cells\n  for(var i=1; i<nx-1; ++i) {\n    for(var j=1; j<ny-1; ++j) {\n\n      //Count neighbors\n      var n = 0\n      for(var dx=-1; dx<=1; ++dx) {\n        for(var dy=-1; dy<=1; ++dy) {\n          if(dx === 0 && dy === 0) {\n            continue\n          }\n          n += cur_state.get(i+dx, j+dy)\n        }\n      }\n      \n      //Update state according to rule\n      if(n === 3 || n === 3 + cur_state.get(i,j)) {\n        next_state.set(i,j,1)\n      } else {\n        next_state.set(i,j,0)\n      }\n    }\n  }\n}"
    },
    {
      "type": "paragraph",
      "id": "caa626ac93aa7d4c",
      "text": "In the frame below we can view the results."
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "stepLife",
        "story": [
          {
            "type": "paragraph",
            "id": "484e092159df2d01",
            "text": "Explain what this does."
          },
          {
            "type": "code",
            "id": "5eb6b67568179aa3",
            "text": "// Code that does it.\n\nexport async function emit(el) {\n el.innerHTML = 2 + 3\n}\n\n"
          },
          {
            "type": "paragraph",
            "id": "caa626ac93aa7d4c",
            "text": "In the frame below we can view the results."
          },
          {
            "type": "frame",
            "id": "6cf52409eec3988c",
            "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
          },
          {
            "type": "paragraph",
            "id": "8155a586f5842b0f",
            "text": "See also [[Static Import Snippet]]"
          }
        ]
      },
      "date": 1652039356420
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
      },
      "date": 1652039370929
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nfunction stepLife(next_state, cur_state) {\n\n  //Get array shape\n  var nx = cur_state.shape[0], \n      ny = cur_state.shape[1]\n\n  //Loop over all cells\n  for(var i=1; i<nx-1; ++i) {\n    for(var j=1; j<ny-1; ++j) {\n\n      //Count neighbors\n      var n = 0\n      for(var dx=-1; dx<=1; ++dx) {\n        for(var dy=-1; dy<=1; ++dy) {\n          if(dx === 0 && dy === 0) {\n            continue\n          }\n          n += cur_state.get(i+dx, j+dy)\n        }\n      }\n      \n      //Update state according to rule\n      if(n === 3 || n === 3 + cur_state.get(i,j)) {\n        next_state.set(i,j,1)\n      } else {\n        next_state.set(i,j,0)\n      }\n    }\n  }\n}"
      },
      "date": 1652039392285
    },
    {
      "type": "add",
      "id": "3faf85d9513a946b",
      "item": {
        "type": "paragraph",
        "id": "3faf85d9513a946b",
        "text": "Once you have an nd-array you can access elements using .set and .get. For example, here is an implementation of Conway's game of life using ndarrays:"
      },
      "after": "484e092159df2d01",
      "date": 1652039436959
    },
    {
      "type": "edit",
      "id": "3faf85d9513a946b",
      "item": {
        "type": "paragraph",
        "id": "3faf85d9513a946b",
        "text": "Once you have an nd-array you can access elements using .set and .get. [https://github.com/scijs/ndarray github]"
      },
      "date": 1652039454519
    },
    {
      "type": "add",
      "id": "2835e0aa8f98614d",
      "item": {
        "type": "paragraph",
        "id": "2835e0aa8f98614d",
        "text": "For example, here is an implementation of Conway's game of life using ndarrays:"
      },
      "after": "3faf85d9513a946b",
      "date": 1652039455235
    },
    {
      "type": "edit",
      "id": "3faf85d9513a946b",
      "item": {
        "type": "paragraph",
        "id": "3faf85d9513a946b",
        "text": "Once you have an [[nd-array]] you can access elements using .set and .get. [https://github.com/scijs/ndarray github]"
      },
      "date": 1652039464329
    },
    {
      "type": "edit",
      "id": "2835e0aa8f98614d",
      "item": {
        "type": "paragraph",
        "id": "2835e0aa8f98614d",
        "text": "For example, here is an implementation of *Conway's game of life* [https://en.wikipedia.org/wiki/Conway's_Game_of_Life wikipedia]  using ndarrays:"
      },
      "date": 1652039504338
    },
    {
      "type": "remove",
      "id": "8155a586f5842b0f",
      "date": 1652039533959
    },
    {
      "type": "edit",
      "id": "3faf85d9513a946b",
      "item": {
        "type": "paragraph",
        "id": "3faf85d9513a946b",
        "text": "Once you have an [[ndarray]] you can access elements using .set and .get. [https://github.com/scijs/ndarray github]"
      },
      "date": 1652039636758
    }
  ]
}