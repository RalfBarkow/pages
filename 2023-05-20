{
  "title": "2023-05-20",
  "story": [
    {
      "type": "paragraph",
      "id": "e4ff6f935f6afccc",
      "text": "⇒ [[Pharo]] Consortium is participating in GSoC 2023. View the ideas list and the contribution guide for this organization. [https://www.gsocorganizations.dev/organization/pharo-consortium/ page]"
    },
    {
      "type": "paragraph",
      "id": "c4083f02dc7d681d",
      "text": "We are happy to announce that we got accepted for this year Google Summer of Code!\nThis is really good for us because it helps to expand the impact of our technologies and to have more people involved in our community.\n\nPlease share it on your social medias. I will put some links\n- GSoc website https://summerofcode.withgoogle.com/\n- Gsoc website of Pharo organisation: https://www.gsocorganizations.dev/organization/pharo-consortium/\n- our gsoc page https://gsoc.pharo.org/ideas\n\nCheers,\nSebastian Jordan in regard of the Pharo Consortium"
    },
    {
      "type": "paragraph",
      "id": "96ba19a829a9606c",
      "text": "Better Serialization Support [https://gsoc.pharo.org/serialization page]"
    },
    {
      "type": "pagefold",
      "id": "1968ab39b329ed1e",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "80504df06978364e",
      "text": "⇒ [[Elm]] ⇒ [[Elm and Vite]]: The background is too bright for me and I would like to set the background to dark gray, for example."
    },
    {
      "type": "code",
      "id": "aa77004c9d0c8acb",
      "text": "elm install avh4/elm-color\n"
    },
    {
      "type": "paragraph",
      "id": "c012aacb1530ab89",
      "text": "⇒ [[Kengo Hamasaki ]]: vite-plugin-elm"
    },
    {
      "type": "code",
      "id": "6e38386ac6f1c659",
      "text": "elm install rtfeldman/elm-css  "
    },
    {
      "type": "markdown",
      "id": "e8654d407f9ef8a3",
      "text": "Here is my plan:\n  \n  Add:\n    robinheghan/murmur3     1.0.0\n    rtfeldman/elm-css      18.0.0\n    rtfeldman/elm-hex       1.0.0\n\nWould you like me to update your elm.json accordingly? [Y/n]: Y"
    },
    {
      "type": "paragraph",
      "id": "713dad7cb1cb9503",
      "text": "Module `Html` does not expose `beginnerProgram` [https://stackoverflow.com/questions/41253152/module-html-does-not-expose-beginnerprogram stackoverflow]"
    },
    {
      "type": "pagefold",
      "id": "450b172d81591c4b",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "454b2d8ab7d3560c",
      "text": "⇒ [[Paul Rodwell]]: switch to dialog for login #16 [https://github.com/fedwiki/wiki-security-friends/pull/16 github] (\"using a html dialog rather than a browser prompt\")"
    },
    {
      "type": "paragraph",
      "id": "95e4da8652b408b5",
      "text": "POST /auth/reclaim/ HTTP/1.1\nLine-based text data"
    },
    {
      "type": "paragraph",
      "id": "fcb0e16745ce678b",
      "text": "RFC 7235\nHypertext Transfer Protocol (HTTP/1.1): Authentication, June 2014\n [https://www.rfc-editor.org/info/rfc7235 page]"
    },
    {
      "type": "paragraph",
      "id": "77fe52ab3b44bb85",
      "text": "paul90 via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$168460525734384ytFBv:matrix.org?via=matrix.org&via=matrix.allmende.io&via=tchncs.de matrix] […] If you set secure-cookie the cookie will only be served by the browser over https. It can however be set by completing the dialog on the http site. So, as client is protocol agnostic, all it sees is the successful login response from the server – so shows the unlocked padlock. However, the browser will have saved the secure cookie, and will only send it back to the server over https. End result is that any edit will fail, as the browser only has a secure cookie which it will only send over https, and the server doesn't not receive any cookie."
    },
    {
      "type": "paragraph",
      "id": "75e5e2750b364c07",
      "text": "If at that stage the user switches to https they will be recognised as the logged in user, as the browser will have sent the cookie. But, the sites look identical except for that little difference in the browser address bar."
    },
    {
      "type": "paragraph",
      "id": "42115c39c924b7bd",
      "text": "[…]friends is a security plugin the code is https://github.com/fedwiki/wiki-security-friends\nA simple solution would add detection of the protocol being used, and setup different versions of the dialog and event code, probably around [https://github.com/fedwiki/wiki-security-friends/blob/bf8a1631806829cb8c20614be1642d80b0bd5cfb/client/security.coffee#L91 L91]\nThe more complex solution would not be friends, but a new security plugin more like the passportjs one."
    },
    {
      "type": "paragraph",
      "id": "4a13e6a77bb4368c",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "ce0573029f5ed6ff",
      "text": "Ward has now explained his suggestion. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$168461822335899VeEsM:matrix.org?via=matrix.org&via=matrix.allmende.io&via=tchncs.de matrix], [https://github.com/fedwiki/wiki-client/pull/294#issuecomment-1556014179 github]."
    },
    {
      "type": "markdown",
      "id": "0907c5d32a09d59f",
      "text": "> I'm not the one to implement this or even to say if it would be easy or hard. I'm trying to imagine what can be explained to a user that can't find cited pages."
    },
    {
      "type": "paragraph",
      "id": "81c99c9712553d97",
      "text": "We bundle several capabilities within the \"wiki\" check so maybe adding man-in-the-middle protection would make sense to the extra cautious. We would at least that a simple instruction: turn off full internet if you are worried about having your code stolen by spies."
    },
    {
      "type": "paragraph",
      "id": "b9d82bbb393192a6",
      "text": "add full internet toggle to footer #294 [https://github.com/fedwiki/wiki-client/pull/294 github] "
    },
    {
      "type": "pagefold",
      "id": "d7b6f201284bf5a3",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "4f18aa6e76b0bb01",
      "text": "Here's an example of how you can implement user authentication and access control in Elm for a simple blog application. This example assumes a username/password-based authentication approach."
    },
    {
      "type": "code",
      "id": "281edbd27439abf3",
      "text": "module Main exposing (..)\n\nimport Browser\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (onClick, onSubmit)\nimport Http\nimport Json.Decode exposing (Decoder, (:=))\nimport Json.Encode exposing (Value)\n\n\n-- MODEL\n\n\ntype alias Model =\n    { isAuthenticated : Bool\n    , username : String\n    , password : String\n    }\n\n\ninitialModel : Model\ninitialModel =\n    { isAuthenticated = False\n    , username = \"\"\n    , password = \"\"\n    }\n\n\n-- MESSAGES\n\n\ntype Msg\n    = Authenticate\n    | UpdateUsername String\n    | UpdatePassword String\n    | Logout\n\n\n-- UPDATE\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        Authenticate ->\n            -- Perform authentication logic here\n            let\n                authenticatedUser =\n                    authenticateUser model.username model.password\n            in\n            { model | isAuthenticated = authenticatedUser }\n\n        UpdateUsername value ->\n            { model | username = value }\n\n        UpdatePassword value ->\n            { model | password = value }\n\n        Logout ->\n            { model | isAuthenticated = False }\n\n\nauthenticateUser : String -> String -> Bool\nauthenticateUser username password =\n    -- Implement your authentication logic here\n    -- For simplicity, we'll use a hardcoded username/password\n    username == \"admin\" && password == \"password\"\n\n\n-- VIEW\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ if model.isAuthenticated then\n            button [ onClick Logout ] [ text \"Logout\" ]\n          else\n            div []\n                [ form [ onSubmit Authenticate ]\n                    [ input [ type_ \"text\", placeholder \"Username\", onInput UpdateUsername ] []\n                    , input [ type_ \"password\", placeholder \"Password\", onInput UpdatePassword ] []\n                    , button [ type_ \"submit\" ] [ text \"Login\" ]\n                    ]\n                ]\n        , if model.isAuthenticated then\n            h2 [] [ text \"Edit blog entries\" ]\n          else\n            h2 [] [ text \"Read blog entries\" ]\n        ]\n\n\n-- HTTP REQUESTS\n\n\ntype alias Response a =\n    Result Http.Error a\n\n\ntype alias HttpTask a =\n    Http.Response (Response a) -> Task.Task Http.Error a\n\n\nloginRequest : String -> String -> HttpTask Bool\nloginRequest username password =\n    Http.post\n        { url = \"https://your-api-endpoint.com/login\"\n        , body = Http.jsonBody (Json.Encode.object [ ( \"username\", Json.Encode.string username ), ( \"password\", Json.Encode.string password ) ])\n        , expect = Http.expectJson loginResponseDecoder\n        }\n\n\nloginResponseDecoder : Decoder Bool\nloginResponseDecoder =\n    Json.Decode.field \"authenticated\" Json.Decode.bool\n\n\n-- INIT\n\n\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , update = update\n        , view = view\n        }\n"
    },
    {
      "type": "paragraph",
      "id": "6752b57f9d6ab4c4",
      "text": "In this example, we have a simple Model that includes an isAuthenticated flag, username, and password fields. The Msg type defines the possible actions that can be performed in the application, such as authenticating, updating the username and password, and logging out.\n\nThe update function handles the different messages and updates the model accordingly. In the Authenticate message, you can perform your authentication logic by calling authenticateUser with the provided username and password. You can replace the authenticateUser function with your own implementation to validate the user's credentials.\n\nThe view function renders the appropriate UI based on the isAuthenticated flag."
    },
    {
      "type": "pagefold",
      "id": "3ade279a988df6d2",
      "text": "End of chat.openai's response"
    },
    {
      "type": "paragraph",
      "id": "d0a6d83a04b6d6d5",
      "text": "Define the possible actions that can be performed in the application: Reading the wiki pages should also be possible via http, but editing only via https."
    },
    {
      "type": "paragraph",
      "id": "3e6123f8c4806ac8",
      "text": "[...] I would like to achieve this functionality using client-side code only. (client-side Elm code, to be precise)."
    },
    {
      "type": "pagefold",
      "id": "4dc99fd15ef970d2",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "d99c838cec13180f",
      "text": "[…] If you want to handle the functionality of serving the HTTP and HTTPS versions of your website using client-side Elm code, you can use the Window.location.protocol property to determine the current protocol and dynamically handle the rendering of the appropriate content. Here's an example of how you can achieve this:"
    },
    {
      "type": "code",
      "id": "8df2fd3a4fa46164",
      "text": "module Main exposing (..)\n\nimport Browser\nimport Html exposing (Html, div, text)\nimport Url\n\n\ntype alias Model =\n    { protocol : String\n    }\n\n\ninitialModel : Model\ninitialModel =\n    { protocol = Url.defaultUrl.protocol }\n\n\ntype Msg\n    = NoOp\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    model\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ if model.protocol == \"https:\" then\n            viewSecureContent\n          else\n            viewNonSecureContent\n        ]\n\n\nviewSecureContent : Html Msg\nviewSecureContent =\n    div []\n        [ text \"This is the HTTPS version of the content.\" ]\n\n\nviewNonSecureContent : Html Msg\nviewNonSecureContent =\n    div []\n        [ text \"This is the HTTP version of the content.\" ]\n\n\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , update = update\n        , view = view\n        }\n"
    },
    {
      "type": "paragraph",
      "id": "7249727e9d302c64",
      "text": "In this example, the Model contains a protocol field that stores the current protocol retrieved from Window.location.protocol. The view function checks the value of model.protocol to determine whether to render the secure (HTTPS) or non-secure (HTTP) content.\n\nYou can customize the viewSecureContent and viewNonSecureContent functions to render the specific content you desire for each version of your website.\n\nPlease note that this approach relies on client-side code and assumes that both versions of your website are accessible by the user. It's important to ensure that any sensitive information or actions are protected and handled securely on the server-side as well."
    },
    {
      "type": "pagefold",
      "id": "8316973cab7e143c",
      "text": "End of chat.openai's response"
    },
    {
      "type": "paragraph",
      "id": "b8b92723f0bb5585",
      "text": "Also, how can we ensure that the HTML login form is only displayed when connected via HTTPS?"
    },
    {
      "type": "pagefold",
      "id": "6e8c92531307c64a",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "105ecf488b03f6ab",
      "text": "To ensure that the HTML login form is only displayed when connected via HTTPS, you can use client-side Elm code to conditionally render the login form based on the protocol (Window.location.protocol). Here's an example:"
    },
    {
      "type": "code",
      "id": "a212555e35941c05",
      "text": "module Main exposing (..)\n\nimport Browser\nimport Html exposing (Html, div, form, input, button, text)\nimport Html.Attributes exposing (type_, placeholder)\nimport Html.Events exposing (onClick, onSubmit)\nimport Url\n\n\ntype alias Model =\n    { protocol : String\n    , username : String\n    , password : String\n    }\n\n\ninitialModel : Model\ninitialModel =\n    { protocol = Url.defaultUrl.protocol\n    , username = \"\"\n    , password = \"\"\n    }\n\n\ntype Msg\n    = UpdateUsername String\n    | UpdatePassword String\n    | SubmitLoginForm\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        UpdateUsername value ->\n            { model | username = value }\n\n        UpdatePassword value ->\n            { model | password = value }\n\n        SubmitLoginForm ->\n            -- Perform login form submission logic here\n            -- This can involve sending the form data to the server for authentication\n            -- You can add additional validation, error handling, etc.\n            model\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ if model.protocol == \"https:\" then\n            loginFormView model\n          else\n            div [] [ text \"Login form is only available over HTTPS.\" ]\n        ]\n\n\nloginFormView : Model -> Html Msg\nloginFormView model =\n    form [ onSubmit SubmitLoginForm ]\n        [ input [ type_ \"text\", placeholder \"Username\", onInput UpdateUsername ] []\n        , input [ type_ \"password\", placeholder \"Password\", onInput UpdatePassword ] []\n        , button [ type_ \"submit\" ] [ text \"Login\" ]\n        ]\n\n\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , update = update\n        , view = view\n        }\n"
    },
    {
      "type": "paragraph",
      "id": "56d8f862c4462c77",
      "text": "In this example, the Model includes the protocol field that stores the current protocol obtained from Window.location.protocol. The view function checks the value of model.protocol and conditionally renders either the login form or a message indicating that the login form is only available over HTTPS.\n\nThe loginFormView function is responsible for rendering the login form. It is only called when the protocol is HTTPS (model.protocol == \"https:\"). You can customize this function to include additional form fields, validation, error handling, and the actual submission logic.\n\nBy using this approach, the login form will only be displayed when the user accesses your website via HTTPS, ensuring that the form is available securely."
    },
    {
      "type": "pagefold",
      "id": "c3d0d4f20443ae7f",
      "text": "End of chat.openai's response"
    },
    {
      "type": "paragraph",
      "id": "8e97c1f09f4fe925",
      "text": "To prevent HTML forms, especially input fields, from appearing while using HTTP and ensure that data is sent to the server only when the protocol is HTTPS, you can use client-side Elm code to conditionally render the forms and validate the protocol before submitting the data. (chat.openai)"
    },
    {
      "type": "code",
      "id": "426e00ae9779f395",
      "text": "module Main exposing (..)\n\nimport Browser\nimport Html exposing (Html, div, form, input, button, text)\nimport Html.Attributes exposing (type_, placeholder, style)\nimport Html.Events exposing (onClick, onSubmit)\nimport Url\n\n\ntype alias Model =\n    { protocol : String\n    , username : String\n    , password : String\n    , formSubmitted : Bool\n    }\n\n\ninitialModel : Model\ninitialModel =\n    { protocol = Url.defaultUrl.protocol\n    , username = \"\"\n    , password = \"\"\n    , formSubmitted = False\n    }\n\n\ntype Msg\n    = UpdateUsername String\n    | UpdatePassword String\n    | SubmitLoginForm\n    | FormSubmitted\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        UpdateUsername value ->\n            { model | username = value }\n\n        UpdatePassword value ->\n            { model | password = value }\n\n        SubmitLoginForm ->\n            { model | formSubmitted = True }\n\n        FormSubmitted ->\n            model\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ if model.protocol == \"https:\" then\n            if model.formSubmitted then\n                formSubmittedView\n            else\n                loginFormView model\n          else\n            div [ style \"color\" \"red\" ] [ text \"Accessing this page requires HTTPS.\" ]\n        ]\n\n\nloginFormView : Model -> Html Msg\nloginFormView model =\n    form [ onSubmit SubmitLoginForm ]\n        [ input [ type_ \"text\", placeholder \"Username\", onInput UpdateUsername ] []\n        , input [ type_ \"password\", placeholder \"Password\", onInput UpdatePassword ] []\n        , button [ type_ \"submit\" ] [ text \"Login\" ]\n        ]\n\n\nformSubmittedView : Html Msg\nformSubmittedView =\n    div [] [ text \"Form submitted successfully.\" ]\n\n\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , update = update\n        , view = view\n        }\n"
    }
  ],
  "journal": [
    {
      "type": "edit",
      "id": "c012aacb1530ab89",
      "item": {
        "type": "paragraph",
        "id": "c012aacb1530ab89",
        "text": "⇒ [[Kengo Hamasaki ]]: vite-plugin-elm"
      },
      "date": 1684592300308
    },
    {
      "type": "edit",
      "id": "c012aacb1530ab89",
      "item": {
        "type": "paragraph",
        "id": "c012aacb1530ab89",
        "text": "⇒ [[Kengo Hamasaki ]]: vite-plugin-elm"
      },
      "date": 1684592290314
    },
    {
      "type": "edit",
      "id": "c012aacb1530ab89",
      "item": {
        "type": "paragraph",
        "id": "c012aacb1530ab89",
        "text": "⇒ [[Kengo Hamasaki ]]: vite-plugin-elm"
      },
      "date": 1684592236749
    },
    {
      "item": {
        "type": "paragraph",
        "id": "c012aacb1530ab89",
        "text": "⇒ [[Kengo Hamasaki ]]: vite-plugin-elm"
      },
      "id": "c012aacb1530ab89",
      "type": "add",
      "after": "aa77004c9d0c8acb",
      "date": 1684592232743
    },
    {
      "type": "remove",
      "id": "6e2afe620c0b5b97",
      "date": 1684592068966
    },
    {
      "type": "edit",
      "id": "1adad5edffff0faa",
      "item": {
        "type": "paragraph",
        "id": "1adad5edffff0faa",
        "text": "The background is too bright for me and I would like to set the background to dark gray, for example."
      },
      "date": 1684591961265
    },
    {
      "type": "edit",
      "id": "1adad5edffff0faa",
      "item": {
        "type": "paragraph",
        "id": "1adad5edffff0faa",
        "text": "The background is too bright for me and I would like to set the background to dark gray, for example."
      },
      "date": 1684591942230
    },
    {
      "type": "edit",
      "id": "aa77004c9d0c8acb",
      "item": {
        "type": "code",
        "id": "aa77004c9d0c8acb",
        "text": "elm install avh4/elm-color\n"
      },
      "date": 1684591348750
    },
    {
      "item": {
        "type": "code",
        "id": "aa77004c9d0c8acb",
        "text": "elm install avh4/elm-color\n"
      },
      "id": "aa77004c9d0c8acb",
      "type": "add",
      "after": "6e2afe620c0b5b97",
      "date": 1684591344961
    },
    {
      "type": "edit",
      "id": "6e2afe620c0b5b97",
      "item": {
        "type": "paragraph",
        "id": "6e2afe620c0b5b97",
        "text": ""
      },
      "date": 1684591310185
    },
    {
      "type": "edit",
      "id": "6e2afe620c0b5b97",
      "item": {
        "type": "paragraph",
        "id": "6e2afe620c0b5b97",
        "text": ""
      },
      "date": 1684591305154
    },
    {
      "type": "edit",
      "id": "6e2afe620c0b5b97",
      "item": {
        "type": "paragraph",
        "id": "6e2afe620c0b5b97",
        "text": ""
      },
      "date": 1684591198281
    },
    {
      "item": {
        "type": "paragraph",
        "id": "6e2afe620c0b5b97",
        "text": ""
      },
      "id": "6e2afe620c0b5b97",
      "type": "add",
      "after": "1adad5edffff0faa",
      "date": 1684591189132
    },
    {
      "type": "edit",
      "id": "1adad5edffff0faa",
      "item": {
        "type": "paragraph",
        "id": "1adad5edffff0faa",
        "text": "The background is too light for me and I want to set the background to e.g. dark gray via CSS."
      },
      "date": 1684579752943
    },
    {
      "item": {
        "type": "factory",
        "id": "1adad5edffff0faa"
      },
      "id": "1adad5edffff0faa",
      "type": "add",
      "after": "713dad7cb1cb9503",
      "date": 1684579750982
    },
    {
      "type": "edit",
      "id": "713dad7cb1cb9503",
      "item": {
        "type": "paragraph",
        "id": "713dad7cb1cb9503",
        "text": "Module `Html` does not expose `beginnerProgram` [https://stackoverflow.com/questions/41253152/module-html-does-not-expose-beginnerprogram stackoverflow]"
      },
      "date": 1684577900392
    },
    {
      "type": "edit",
      "id": "713dad7cb1cb9503",
      "item": {
        "type": "paragraph",
        "id": "713dad7cb1cb9503",
        "text": "Module `Html` does not expose `beginnerProgram`"
      },
      "date": 1684577883641
    },
    {
      "item": {
        "type": "factory",
        "id": "713dad7cb1cb9503"
      },
      "id": "713dad7cb1cb9503",
      "type": "add",
      "after": "e8654d407f9ef8a3",
      "date": 1684577880678
    },
    {
      "type": "edit",
      "id": "e8654d407f9ef8a3",
      "item": {
        "type": "markdown",
        "id": "e8654d407f9ef8a3",
        "text": "Here is my plan:\n  \n  Add:\n    robinheghan/murmur3     1.0.0\n    rtfeldman/elm-css      18.0.0\n    rtfeldman/elm-hex       1.0.0\n\nWould you like me to update your elm.json accordingly? [Y/n]: Y"
      },
      "date": 1684577879631
    },
    {
      "type": "edit",
      "id": "80504df06978364e",
      "item": {
        "type": "paragraph",
        "id": "80504df06978364e",
        "text": "⇒ [[Elm]]: install rtfeldman/elm-css [https://package.elm-lang.org/packages/rtfeldman/elm-css/latest/Css page]"
      },
      "date": 1684577012798
    },
    {
      "type": "edit",
      "id": "80504df06978364e",
      "item": {
        "type": "paragraph",
        "id": "80504df06978364e",
        "text": "⇒ [[Elm]]: install rtfeldman/elm-css  [https://package.elm-lang.org/packages/rtfeldman/elm-css/latest/Css page]"
      },
      "date": 1684577007386
    },
    {
      "type": "edit",
      "id": "80504df06978364e",
      "item": {
        "type": "paragraph",
        "id": "80504df06978364e",
        "text": "⇒ [[Elm]]: install rtfeldman/elm-css  "
      },
      "date": 1684576990593
    },
    {
      "type": "edit",
      "id": "80504df06978364e",
      "item": {
        "type": "paragraph",
        "id": "80504df06978364e",
        "text": "⇒ [[Elm] ]install rtfeldman/elm-css  "
      },
      "date": 1684576983781
    },
    {
      "type": "edit",
      "id": "80504df06978364e",
      "item": {
        "type": "paragraph",
        "id": "80504df06978364e",
        "text": "[[Elm] ]install rtfeldman/elm-css  "
      },
      "date": 1684576976708
    },
    {
      "id": "6e38386ac6f1c659",
      "type": "move",
      "order": [
        "e4ff6f935f6afccc",
        "c4083f02dc7d681d",
        "96ba19a829a9606c",
        "1968ab39b329ed1e",
        "80504df06978364e",
        "6e38386ac6f1c659",
        "e8654d407f9ef8a3"
      ],
      "date": 1684576958295
    },
    {
      "type": "edit",
      "id": "6e38386ac6f1c659",
      "item": {
        "type": "code",
        "id": "6e38386ac6f1c659",
        "text": "elm install rtfeldman/elm-css  "
      },
      "date": 1684576956741
    },
    {
      "item": {
        "type": "factory",
        "id": "6e38386ac6f1c659"
      },
      "id": "6e38386ac6f1c659",
      "type": "add",
      "after": "e8654d407f9ef8a3",
      "date": 1684576955103
    },
    {
      "type": "remove",
      "id": "e2e69c8ecaab2601",
      "date": 1684576953345
    },
    {
      "item": {
        "type": "factory",
        "id": "e2e69c8ecaab2601"
      },
      "id": "e2e69c8ecaab2601",
      "type": "add",
      "after": "e8654d407f9ef8a3",
      "date": 1684576952103
    },
    {
      "type": "edit",
      "id": "e8654d407f9ef8a3",
      "item": {
        "type": "markdown",
        "id": "e8654d407f9ef8a3",
        "text": "Here is my plan:\n  \n  Add:\n    robinheghan/murmur3     1.0.0\n    rtfeldman/elm-css      18.0.0\n    rtfeldman/elm-hex       1.0.0\n\nWould you like me to update your elm.json accordingly? [Y/n]: "
      },
      "date": 1684576947230
    },
    {
      "item": {
        "type": "factory",
        "id": "e8654d407f9ef8a3"
      },
      "id": "e8654d407f9ef8a3",
      "type": "add",
      "after": "80504df06978364e",
      "date": 1684576944482
    },
    {
      "type": "edit",
      "id": "80504df06978364e",
      "item": {
        "type": "paragraph",
        "id": "80504df06978364e",
        "text": "elm install rtfeldman/elm-css  "
      },
      "date": 1684576937415
    },
    {
      "item": {
        "type": "factory",
        "id": "80504df06978364e"
      },
      "id": "80504df06978364e",
      "type": "add",
      "after": "1968ab39b329ed1e",
      "date": 1684576934297
    },
    {
      "type": "edit",
      "id": "1968ab39b329ed1e",
      "item": {
        "type": "pagefold",
        "id": "1968ab39b329ed1e",
        "text": "~"
      },
      "date": 1684576932686
    },
    {
      "item": {
        "type": "factory",
        "id": "1968ab39b329ed1e"
      },
      "id": "1968ab39b329ed1e",
      "type": "add",
      "after": "96ba19a829a9606c",
      "date": 1684576929650
    },
    {
      "type": "edit",
      "id": "96ba19a829a9606c",
      "item": {
        "type": "paragraph",
        "id": "96ba19a829a9606c",
        "text": "Better Serialization Support [https://gsoc.pharo.org/serialization page]"
      },
      "date": 1684570391647
    },
    {
      "type": "edit",
      "id": "96ba19a829a9606c",
      "item": {
        "type": "paragraph",
        "id": "96ba19a829a9606c",
        "text": "Better Serialization Support"
      },
      "date": 1684570375886
    },
    {
      "item": {
        "type": "factory",
        "id": "96ba19a829a9606c"
      },
      "id": "96ba19a829a9606c",
      "type": "add",
      "after": "c4083f02dc7d681d",
      "date": 1684570373670
    },
    {
      "type": "edit",
      "id": "c4083f02dc7d681d",
      "item": {
        "type": "paragraph",
        "id": "c4083f02dc7d681d",
        "text": "We are happy to announce that we got accepted for this year Google Summer of Code!\nThis is really good for us because it helps to expand the impact of our technologies and to have more people involved in our community.\n\nPlease share it on your social medias. I will put some links\n- GSoc website https://summerofcode.withgoogle.com/\n- Gsoc website of Pharo organisation: https://www.gsocorganizations.dev/organization/pharo-consortium/\n- our gsoc page https://gsoc.pharo.org/ideas\n\nCheers,\nSebastian Jordan in regard of the Pharo Consortium"
      },
      "date": 1684570328709
    },
    {
      "item": {
        "type": "factory",
        "id": "c4083f02dc7d681d"
      },
      "id": "c4083f02dc7d681d",
      "type": "add",
      "after": "e4ff6f935f6afccc",
      "date": 1684570327366
    },
    {
      "type": "edit",
      "id": "e4ff6f935f6afccc",
      "item": {
        "type": "paragraph",
        "id": "e4ff6f935f6afccc",
        "text": "⇒ [[Pharo]] Consortium is participating in GSoC 2023. View the ideas list and the contribution guide for this organization. [https://www.gsocorganizations.dev/organization/pharo-consortium/ page]"
      },
      "date": 1684570316147
    },
    {
      "type": "edit",
      "id": "e4ff6f935f6afccc",
      "item": {
        "type": "paragraph",
        "id": "e4ff6f935f6afccc",
        "text": "Pharo Consortium is participating in GSoC 2023. View the ideas list and the contribution guide for this organization. [https://www.gsocorganizations.dev/organization/pharo-consortium/ page]"
      },
      "date": 1684570305538
    },
    {
      "type": "edit",
      "id": "e4ff6f935f6afccc",
      "item": {
        "type": "paragraph",
        "id": "e4ff6f935f6afccc",
        "text": "Pharo Consortium is participating in GSoC 2023. View the ideas list and the contribution guide for this organization."
      },
      "date": 1684570288983
    },
    {
      "item": {
        "type": "factory",
        "id": "e4ff6f935f6afccc"
      },
      "id": "e4ff6f935f6afccc",
      "type": "add",
      "date": 1684570286927
    },
    {
      "type": "create",
      "item": {
        "title": "2023-05-20",
        "story": []
      },
      "date": 1684570285334
    },
    {
      "type": "edit",
      "id": "80504df06978364e",
      "item": {
        "type": "paragraph",
        "id": "80504df06978364e",
        "text": "⇒ [[Elm]]: "
      },
      "date": 1684592339377
    },
    {
      "id": "1adad5edffff0faa",
      "type": "move",
      "order": [
        "e4ff6f935f6afccc",
        "c4083f02dc7d681d",
        "96ba19a829a9606c",
        "1968ab39b329ed1e",
        "80504df06978364e",
        "1adad5edffff0faa",
        "2c7b801d9c93d7d3",
        "6e38386ac6f1c659",
        "e8654d407f9ef8a3",
        "713dad7cb1cb9503",
        "aa77004c9d0c8acb",
        "c012aacb1530ab89"
      ],
      "date": 1684592343085,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1684592394559
    },
    {
      "type": "edit",
      "id": "80504df06978364e",
      "item": {
        "type": "paragraph",
        "id": "80504df06978364e",
        "text": "⇒ [[Elm]] ⇒ [[Elm and Vite]]: "
      },
      "date": 1684592442169
    },
    {
      "type": "remove",
      "id": "1adad5edffff0faa",
      "date": 1684592467493
    },
    {
      "type": "edit",
      "id": "80504df06978364e",
      "item": {
        "type": "paragraph",
        "id": "80504df06978364e",
        "text": "⇒ [[Elm]] ⇒ [[Elm and Vite]]: The background is too bright for me and I would like to set the background to dark gray, for example."
      },
      "date": 1684592471935
    },
    {
      "id": "aa77004c9d0c8acb",
      "type": "move",
      "order": [
        "e4ff6f935f6afccc",
        "c4083f02dc7d681d",
        "96ba19a829a9606c",
        "1968ab39b329ed1e",
        "80504df06978364e",
        "aa77004c9d0c8acb",
        "6e38386ac6f1c659",
        "e8654d407f9ef8a3",
        "713dad7cb1cb9503",
        "c012aacb1530ab89"
      ],
      "date": 1684592981579
    },
    {
      "id": "6e38386ac6f1c659",
      "type": "move",
      "order": [
        "e4ff6f935f6afccc",
        "c4083f02dc7d681d",
        "96ba19a829a9606c",
        "1968ab39b329ed1e",
        "80504df06978364e",
        "aa77004c9d0c8acb",
        "e8654d407f9ef8a3",
        "713dad7cb1cb9503",
        "6e38386ac6f1c659",
        "c012aacb1530ab89"
      ],
      "date": 1684595348648
    },
    {
      "id": "6e38386ac6f1c659",
      "type": "move",
      "order": [
        "e4ff6f935f6afccc",
        "c4083f02dc7d681d",
        "96ba19a829a9606c",
        "1968ab39b329ed1e",
        "80504df06978364e",
        "aa77004c9d0c8acb",
        "e8654d407f9ef8a3",
        "713dad7cb1cb9503",
        "c012aacb1530ab89",
        "6e38386ac6f1c659"
      ],
      "date": 1684595351327
    },
    {
      "id": "e8654d407f9ef8a3",
      "type": "move",
      "order": [
        "e4ff6f935f6afccc",
        "c4083f02dc7d681d",
        "96ba19a829a9606c",
        "1968ab39b329ed1e",
        "80504df06978364e",
        "aa77004c9d0c8acb",
        "713dad7cb1cb9503",
        "c012aacb1530ab89",
        "6e38386ac6f1c659",
        "e8654d407f9ef8a3"
      ],
      "date": 1684595354182
    },
    {
      "id": "713dad7cb1cb9503",
      "type": "move",
      "order": [
        "e4ff6f935f6afccc",
        "c4083f02dc7d681d",
        "96ba19a829a9606c",
        "1968ab39b329ed1e",
        "80504df06978364e",
        "aa77004c9d0c8acb",
        "c012aacb1530ab89",
        "6e38386ac6f1c659",
        "e8654d407f9ef8a3",
        "713dad7cb1cb9503"
      ],
      "date": 1684595360866
    },
    {
      "item": {
        "type": "factory",
        "id": "450b172d81591c4b"
      },
      "id": "450b172d81591c4b",
      "type": "add",
      "after": "713dad7cb1cb9503",
      "date": 1684623502402
    },
    {
      "type": "edit",
      "id": "450b172d81591c4b",
      "item": {
        "type": "pagefold",
        "id": "450b172d81591c4b",
        "text": "~"
      },
      "date": 1684623505723
    },
    {
      "item": {
        "type": "factory",
        "id": "fcb0e16745ce678b"
      },
      "id": "fcb0e16745ce678b",
      "type": "add",
      "after": "450b172d81591c4b",
      "date": 1684623507068
    },
    {
      "type": "edit",
      "id": "fcb0e16745ce678b",
      "item": {
        "type": "paragraph",
        "id": "fcb0e16745ce678b",
        "text": "https://www.rfc-editor.org/info/rfc7235 page"
      },
      "date": 1684623516878
    },
    {
      "item": {
        "type": "factory",
        "id": "454b2d8ab7d3560c"
      },
      "id": "454b2d8ab7d3560c",
      "type": "add",
      "after": "fcb0e16745ce678b",
      "date": 1684624027197
    },
    {
      "id": "454b2d8ab7d3560c",
      "type": "move",
      "order": [
        "e4ff6f935f6afccc",
        "c4083f02dc7d681d",
        "96ba19a829a9606c",
        "1968ab39b329ed1e",
        "80504df06978364e",
        "aa77004c9d0c8acb",
        "c012aacb1530ab89",
        "6e38386ac6f1c659",
        "e8654d407f9ef8a3",
        "713dad7cb1cb9503",
        "450b172d81591c4b",
        "454b2d8ab7d3560c",
        "fcb0e16745ce678b"
      ],
      "date": 1684624029440
    },
    {
      "type": "edit",
      "id": "454b2d8ab7d3560c",
      "item": {
        "type": "paragraph",
        "id": "454b2d8ab7d3560c",
        "text": " switch to dialog for login #16 "
      },
      "date": 1684624032911
    },
    {
      "type": "edit",
      "id": "454b2d8ab7d3560c",
      "item": {
        "type": "paragraph",
        "id": "454b2d8ab7d3560c",
        "text": "[[Paul Rodwell]]: switch to dialog for login #16 "
      },
      "date": 1684624058171
    },
    {
      "type": "edit",
      "id": "454b2d8ab7d3560c",
      "item": {
        "type": "paragraph",
        "id": "454b2d8ab7d3560c",
        "text": "⇒ [[Paul Rodwell]]: switch to dialog for login #16 "
      },
      "date": 1684624064186
    },
    {
      "type": "edit",
      "id": "454b2d8ab7d3560c",
      "item": {
        "type": "paragraph",
        "id": "454b2d8ab7d3560c",
        "text": "⇒ [[Paul Rodwell]]: switch to dialog for login #16 [https://github.com/fedwiki/wiki-security-friends/pull/16 github]"
      },
      "date": 1684624083099
    },
    {
      "type": "edit",
      "id": "454b2d8ab7d3560c",
      "item": {
        "type": "paragraph",
        "id": "454b2d8ab7d3560c",
        "text": "⇒ [[Paul Rodwell]]: switch to dialog for login #16 [https://github.com/fedwiki/wiki-security-friends/pull/16 github] (\"using a html dialog rather than a browser prompt\")"
      },
      "date": 1684624104149
    },
    {
      "item": {
        "type": "factory",
        "id": "95e4da8652b408b5"
      },
      "id": "95e4da8652b408b5",
      "type": "add",
      "after": "fcb0e16745ce678b",
      "date": 1684624201184
    },
    {
      "type": "edit",
      "id": "95e4da8652b408b5",
      "item": {
        "type": "paragraph",
        "id": "95e4da8652b408b5",
        "text": "POST /auth/reclaim/ HTTP/1.1\nLine-based text data"
      },
      "date": 1684624207367
    },
    {
      "id": "fcb0e16745ce678b",
      "type": "move",
      "order": [
        "e4ff6f935f6afccc",
        "c4083f02dc7d681d",
        "96ba19a829a9606c",
        "1968ab39b329ed1e",
        "80504df06978364e",
        "aa77004c9d0c8acb",
        "c012aacb1530ab89",
        "6e38386ac6f1c659",
        "e8654d407f9ef8a3",
        "713dad7cb1cb9503",
        "450b172d81591c4b",
        "454b2d8ab7d3560c",
        "95e4da8652b408b5",
        "fcb0e16745ce678b"
      ],
      "date": 1684624212486
    },
    {
      "type": "edit",
      "id": "fcb0e16745ce678b",
      "item": {
        "type": "paragraph",
        "id": "fcb0e16745ce678b",
        "text": "[https://www.rfc-editor.org/info/rfc7235 page]"
      },
      "date": 1684624221419
    },
    {
      "type": "edit",
      "id": "fcb0e16745ce678b",
      "item": {
        "type": "paragraph",
        "id": "fcb0e16745ce678b",
        "text": "RFC 7235\nHypertext Transfer Protocol (HTTP/1.1): Authentication, June 2014\n [https://www.rfc-editor.org/info/rfc7235 page]"
      },
      "date": 1684624233266
    },
    {
      "item": {
        "type": "factory",
        "id": "77fe52ab3b44bb85"
      },
      "id": "77fe52ab3b44bb85",
      "type": "add",
      "after": "fcb0e16745ce678b",
      "date": 1684624416660
    },
    {
      "type": "edit",
      "id": "77fe52ab3b44bb85",
      "item": {
        "type": "paragraph",
        "id": "77fe52ab3b44bb85",
        "text": "paul90 via [matrix] […] If you set secure-cookie the cookie will only be served by the browser over https. It can however be set by completing the dialog on the http site. So, as client is protocol agnostic, all it sees is the successful login response from the server - so shows the unlocked padlock. However, the browser will have saved the secure cookie, and will only send it back to the server over https. End result is that any edit will fail, as the browser only has a secure cookie which it will only send over https, and the server doesn't not receive any cookie.\nIf at that stage the user switches to https they will be recognised as the logged in user, as the browser will have sent the cookie. But, the sites look identical except for that little difference in the browser address bar.\nBack to the earlier questions - friends is a security plugin the code is https://github.com/fedwiki/wiki-security-friends\nA simple solution would add detection of the protocol being used, and setup different versions of the dialog and event code, probably around https://github.com/fedwiki/wiki-security-friends/blob/bf8a1631806829cb8c20614be1642d80b0bd5cfb/client/security.coffee#L91\nThe more complex solution would not be friends, but a new security plugin more like the passportjs one."
      },
      "date": 1684624431667
    },
    {
      "type": "edit",
      "id": "77fe52ab3b44bb85",
      "item": {
        "type": "paragraph",
        "id": "77fe52ab3b44bb85",
        "text": "paul90 via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$168460525734384ytFBv:matrix.org?via=matrix.org&via=matrix.allmende.io&via=tchncs.de matrix] […] If you set secure-cookie the cookie will only be served by the browser over https. It can however be set by completing the dialog on the http site. So, as client is protocol agnostic, all it sees is the successful login response from the server - so shows the unlocked padlock. However, the browser will have saved the secure cookie, and will only send it back to the server over https. End result is that any edit will fail, as the browser only has a secure cookie which it will only send over https, and the server doesn't not receive any cookie.\nIf at that stage the user switches to https they will be recognised as the logged in user, as the browser will have sent the cookie. But, the sites look identical except for that little difference in the browser address bar.\nBack to the earlier questions - friends is a security plugin the code is https://github.com/fedwiki/wiki-security-friends\nA simple solution would add detection of the protocol being used, and setup different versions of the dialog and event code, probably around https://github.com/fedwiki/wiki-security-friends/blob/bf8a1631806829cb8c20614be1642d80b0bd5cfb/client/security.coffee#L91\nThe more complex solution would not be friends, but a new security plugin more like the passportjs one."
      },
      "date": 1684624445585
    },
    {
      "type": "edit",
      "id": "77fe52ab3b44bb85",
      "item": {
        "type": "paragraph",
        "id": "77fe52ab3b44bb85",
        "text": "paul90 via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$168460525734384ytFBv:matrix.org?via=matrix.org&via=matrix.allmende.io&via=tchncs.de matrix] […] If you set secure-cookie the cookie will only be served by the browser over https. It can however be set by completing the dialog on the http site. So, as client is protocol agnostic, all it sees is the successful login response from the server – so shows the unlocked padlock. However, the browser will have saved the secure cookie, and will only send it back to the server over https. End result is that any edit will fail, as the browser only has a secure cookie which it will only send over https, and the server doesn't not receive any cookie."
      },
      "date": 1684624483438
    },
    {
      "type": "add",
      "id": "75e5e2750b364c07",
      "item": {
        "type": "paragraph",
        "id": "75e5e2750b364c07",
        "text": "If at that stage the user switches to https they will be recognised as the logged in user, as the browser will have sent the cookie. But, the sites look identical except for that little difference in the browser address bar."
      },
      "after": "77fe52ab3b44bb85",
      "date": 1684624526375
    },
    {
      "type": "add",
      "id": "42115c39c924b7bd",
      "item": {
        "type": "paragraph",
        "id": "42115c39c924b7bd",
        "text": "[…]friends is a security plugin the code is https://github.com/fedwiki/wiki-security-friends\nA simple solution would add detection of the protocol being used, and setup different versions of the dialog and event code, probably around https://github.com/fedwiki/wiki-security-friends/blob/bf8a1631806829cb8c20614be1642d80b0bd5cfb/client/security.coffee#L91\nThe more complex solution would not be friends, but a new security plugin more like the passportjs one."
      },
      "after": "75e5e2750b364c07",
      "date": 1684624539253
    },
    {
      "type": "add",
      "id": "b9d82bbb393192a6",
      "item": {
        "type": "paragraph",
        "id": "b9d82bbb393192a6",
        "text": " add full internet toggle to footer #294 "
      },
      "after": "42115c39c924b7bd",
      "date": 1684624744445
    },
    {
      "type": "edit",
      "id": "42115c39c924b7bd",
      "item": {
        "type": "paragraph",
        "id": "42115c39c924b7bd",
        "text": "[…]friends is a security plugin the code is https://github.com/fedwiki/wiki-security-friends\nA simple solution would add detection of the protocol being used, and setup different versions of the dialog and event code, probably around [https://github.com/fedwiki/wiki-security-friends/blob/bf8a1631806829cb8c20614be1642d80b0bd5cfb/client/security.coffee#L91 L91]\nThe more complex solution would not be friends, but a new security plugin more like the passportjs one."
      },
      "date": 1684624762498
    },
    {
      "type": "add",
      "id": "4a13e6a77bb4368c",
      "item": {
        "type": "paragraph",
        "id": "4a13e6a77bb4368c",
        "text": "[…]"
      },
      "after": "42115c39c924b7bd",
      "date": 1684624812397
    },
    {
      "type": "add",
      "id": "ce0573029f5ed6ff",
      "item": {
        "type": "paragraph",
        "id": "ce0573029f5ed6ff",
        "text": "Ward\nI have now explained my suggestion. See https://github.com/fedwiki/wiki-client/pull/294#issuecomment-1556014179\nI'm not the one to implement this or even to say if it would be easy or hard. I'm trying to imagine what can be explained to a user that can't find cited pages.\nWe bundle several capabilities within the \"wiki\" check so maybe adding man-in-the-middle protection would make sense to the extra cautious. We would at least that a simple instruction: turn off full internet if you are worried about having your code stolen by spies."
      },
      "after": "4a13e6a77bb4368c",
      "date": 1684624814015
    },
    {
      "type": "edit",
      "id": "ce0573029f5ed6ff",
      "item": {
        "type": "paragraph",
        "id": "ce0573029f5ed6ff",
        "text": "Ward has now explained his suggestion. See https://github.com/fedwiki/wiki-client/pull/294#issuecomment-1556014179\nI'm not the one to implement this or even to say if it would be easy or hard. I'm trying to imagine what can be explained to a user that can't find cited pages.\nWe bundle several capabilities within the \"wiki\" check so maybe adding man-in-the-middle protection would make sense to the extra cautious. We would at least that a simple instruction: turn off full internet if you are worried about having your code stolen by spies."
      },
      "date": 1684624840196
    },
    {
      "type": "edit",
      "id": "ce0573029f5ed6ff",
      "item": {
        "type": "paragraph",
        "id": "ce0573029f5ed6ff",
        "text": "Ward has now explained his suggestion. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$168461822335899VeEsM:matrix.org?via=matrix.org&via=matrix.allmende.io&via=tchncs.de matrix] See https://github.com/fedwiki/wiki-client/pull/294#issuecomment-1556014179\nI'm not the one to implement this or even to say if it would be easy or hard. I'm trying to imagine what can be explained to a user that can't find cited pages.\nWe bundle several capabilities within the \"wiki\" check so maybe adding man-in-the-middle protection would make sense to the extra cautious. We would at least that a simple instruction: turn off full internet if you are worried about having your code stolen by spies."
      },
      "date": 1684624853916
    },
    {
      "type": "edit",
      "id": "ce0573029f5ed6ff",
      "item": {
        "type": "paragraph",
        "id": "ce0573029f5ed6ff",
        "text": "Ward has now explained his suggestion. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$168461822335899VeEsM:matrix.org?via=matrix.org&via=matrix.allmende.io&via=tchncs.de matrix], [https://github.com/fedwiki/wiki-client/pull/294#issuecomment-1556014179 github]."
      },
      "date": 1684624889929
    },
    {
      "type": "add",
      "id": "0907c5d32a09d59f",
      "item": {
        "type": "paragraph",
        "id": "0907c5d32a09d59f",
        "text": "> I'm not the one to implement this or even to say if it would be easy or hard. I'm trying to imagine what can be explained to a user that can't find cited pages."
      },
      "after": "ce0573029f5ed6ff",
      "date": 1684624894577
    },
    {
      "type": "add",
      "id": "81c99c9712553d97",
      "item": {
        "type": "paragraph",
        "id": "81c99c9712553d97",
        "text": "We bundle several capabilities within the \"wiki\" check so maybe adding man-in-the-middle protection would make sense to the extra cautious. We would at least that a simple instruction: turn off full internet if you are worried about having your code stolen by spies."
      },
      "after": "0907c5d32a09d59f",
      "date": 1684624895124
    },
    {
      "type": "edit",
      "id": "0907c5d32a09d59f",
      "item": {
        "type": "markdown",
        "id": "0907c5d32a09d59f",
        "text": "> I'm not the one to implement this or even to say if it would be easy or hard. I'm trying to imagine what can be explained to a user that can't find cited pages."
      },
      "date": 1684624896188
    },
    {
      "type": "edit",
      "id": "b9d82bbb393192a6",
      "item": {
        "type": "paragraph",
        "id": "b9d82bbb393192a6",
        "text": "add full internet toggle to footer #294 [https://github.com/fedwiki/wiki-client/pull/294 github] "
      },
      "date": 1684624979546
    },
    {
      "item": {
        "type": "factory",
        "id": "d7b6f201284bf5a3"
      },
      "id": "d7b6f201284bf5a3",
      "type": "add",
      "after": "b9d82bbb393192a6",
      "date": 1684625610426
    },
    {
      "type": "edit",
      "id": "d7b6f201284bf5a3",
      "item": {
        "type": "pagefold",
        "id": "d7b6f201284bf5a3",
        "text": "chat.openai"
      },
      "date": 1684625616589
    },
    {
      "item": {
        "type": "factory",
        "id": "4f18aa6e76b0bb01"
      },
      "id": "4f18aa6e76b0bb01",
      "type": "add",
      "after": "d7b6f201284bf5a3",
      "date": 1684625618242
    },
    {
      "type": "edit",
      "id": "4f18aa6e76b0bb01",
      "item": {
        "type": "paragraph",
        "id": "4f18aa6e76b0bb01",
        "text": "Here's an example of how you can implement user authentication and access control in Elm for a simple blog application. This example assumes a username/password-based authentication approach."
      },
      "date": 1684625627216
    },
    {
      "item": {
        "type": "factory",
        "id": "281edbd27439abf3"
      },
      "id": "281edbd27439abf3",
      "type": "add",
      "after": "4f18aa6e76b0bb01",
      "date": 1684625635443
    },
    {
      "type": "edit",
      "id": "281edbd27439abf3",
      "item": {
        "type": "code",
        "id": "281edbd27439abf3",
        "text": "module Main exposing (..)\n\nimport Browser\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (onClick, onSubmit)\nimport Http\nimport Json.Decode exposing (Decoder, (:=))\nimport Json.Encode exposing (Value)\n\n\n-- MODEL\n\n\ntype alias Model =\n    { isAuthenticated : Bool\n    , username : String\n    , password : String\n    }\n\n\ninitialModel : Model\ninitialModel =\n    { isAuthenticated = False\n    , username = \"\"\n    , password = \"\"\n    }\n\n\n-- MESSAGES\n\n\ntype Msg\n    = Authenticate\n    | UpdateUsername String\n    | UpdatePassword String\n    | Logout\n\n\n-- UPDATE\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        Authenticate ->\n            -- Perform authentication logic here\n            let\n                authenticatedUser =\n                    authenticateUser model.username model.password\n            in\n            { model | isAuthenticated = authenticatedUser }\n\n        UpdateUsername value ->\n            { model | username = value }\n\n        UpdatePassword value ->\n            { model | password = value }\n\n        Logout ->\n            { model | isAuthenticated = False }\n\n\nauthenticateUser : String -> String -> Bool\nauthenticateUser username password =\n    -- Implement your authentication logic here\n    -- For simplicity, we'll use a hardcoded username/password\n    username == \"admin\" && password == \"password\"\n\n\n-- VIEW\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ if model.isAuthenticated then\n            button [ onClick Logout ] [ text \"Logout\" ]\n          else\n            div []\n                [ form [ onSubmit Authenticate ]\n                    [ input [ type_ \"text\", placeholder \"Username\", onInput UpdateUsername ] []\n                    , input [ type_ \"password\", placeholder \"Password\", onInput UpdatePassword ] []\n                    , button [ type_ \"submit\" ] [ text \"Login\" ]\n                    ]\n                ]\n        , if model.isAuthenticated then\n            h2 [] [ text \"Edit blog entries\" ]\n          else\n            h2 [] [ text \"Read blog entries\" ]\n        ]\n\n\n-- HTTP REQUESTS\n\n\ntype alias Response a =\n    Result Http.Error a\n\n\ntype alias HttpTask a =\n    Http.Response (Response a) -> Task.Task Http.Error a\n\n\nloginRequest : String -> String -> HttpTask Bool\nloginRequest username password =\n    Http.post\n        { url = \"https://your-api-endpoint.com/login\"\n        , body = Http.jsonBody (Json.Encode.object [ ( \"username\", Json.Encode.string username ), ( \"password\", Json.Encode.string password ) ])\n        , expect = Http.expectJson loginResponseDecoder\n        }\n\n\nloginResponseDecoder : Decoder Bool\nloginResponseDecoder =\n    Json.Decode.field \"authenticated\" Json.Decode.bool\n\n\n-- INIT\n\n\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , update = update\n        , view = view\n        }\n"
      },
      "date": 1684625638505
    },
    {
      "item": {
        "type": "factory",
        "id": "6752b57f9d6ab4c4"
      },
      "id": "6752b57f9d6ab4c4",
      "type": "add",
      "after": "281edbd27439abf3",
      "date": 1684625680196
    },
    {
      "type": "edit",
      "id": "6752b57f9d6ab4c4",
      "item": {
        "type": "paragraph",
        "id": "6752b57f9d6ab4c4",
        "text": "In this example, we have a simple Model that includes an isAuthenticated flag, username, and password fields. The Msg type defines the possible actions that can be performed in the application, such as authenticating, updating the username and password, and logging out.\n\nThe update function handles the different messages and updates the model accordingly. In the Authenticate message, you can perform your authentication logic by calling authenticateUser with the provided username and password. You can replace the authenticateUser function with your own implementation to validate the user's credentials.\n\nThe view function renders the appropriate UI based on the isAuthenticated flag."
      },
      "date": 1684625682003
    },
    {
      "item": {
        "type": "factory",
        "id": "3ade279a988df6d2"
      },
      "id": "3ade279a988df6d2",
      "type": "add",
      "after": "6752b57f9d6ab4c4",
      "date": 1684625722590
    },
    {
      "type": "edit",
      "id": "3ade279a988df6d2",
      "item": {
        "type": "pagefold",
        "id": "3ade279a988df6d2",
        "text": "End of chat.openai's response"
      },
      "date": 1684625737288
    },
    {
      "item": {
        "type": "factory",
        "id": "d0a6d83a04b6d6d5"
      },
      "id": "d0a6d83a04b6d6d5",
      "type": "add",
      "after": "3ade279a988df6d2",
      "date": 1684625939019
    },
    {
      "type": "edit",
      "id": "d0a6d83a04b6d6d5",
      "item": {
        "type": "paragraph",
        "id": "d0a6d83a04b6d6d5",
        "text": "Define the possible actions that can be performed in the application"
      },
      "date": 1684625948102
    },
    {
      "type": "edit",
      "id": "d0a6d83a04b6d6d5",
      "item": {
        "type": "paragraph",
        "id": "d0a6d83a04b6d6d5",
        "text": "Define the possible actions that can be performed in the application: reading the wiki pages should also be possible via http but editing only via https?"
      },
      "date": 1684626009329
    },
    {
      "type": "edit",
      "id": "d0a6d83a04b6d6d5",
      "item": {
        "type": "paragraph",
        "id": "d0a6d83a04b6d6d5",
        "text": "Define the possible actions that can be performed in the application: Reading the wiki pages should also be possible via http, but editing only via https."
      },
      "date": 1684626076001
    },
    {
      "item": {
        "type": "factory",
        "id": "4dc99fd15ef970d2"
      },
      "id": "4dc99fd15ef970d2",
      "type": "add",
      "after": "d0a6d83a04b6d6d5",
      "date": 1684626973695
    },
    {
      "type": "edit",
      "id": "4dc99fd15ef970d2",
      "item": {
        "type": "pagefold",
        "id": "4dc99fd15ef970d2",
        "text": "chat.openai"
      },
      "date": 1684626983513
    },
    {
      "item": {
        "type": "factory",
        "id": "d99c838cec13180f"
      },
      "id": "d99c838cec13180f",
      "type": "add",
      "after": "4dc99fd15ef970d2",
      "date": 1684626985547
    },
    {
      "type": "edit",
      "id": "d99c838cec13180f",
      "item": {
        "type": "paragraph",
        "id": "d99c838cec13180f",
        "text": "Apologies for the misunderstanding. If you want to handle the functionality of serving the HTTP and HTTPS versions of your website using client-side Elm code, you can use the Window.location.protocol property to determine the current protocol and dynamically handle the rendering of the appropriate content. Here's an example of how you can achieve this:"
      },
      "date": 1684626987308
    },
    {
      "type": "edit",
      "id": "d99c838cec13180f",
      "item": {
        "type": "paragraph",
        "id": "d99c838cec13180f",
        "text": "[…] If you want to handle the functionality of serving the HTTP and HTTPS versions of your website using client-side Elm code, you can use the Window.location.protocol property to determine the current protocol and dynamically handle the rendering of the appropriate content. Here's an example of how you can achieve this:"
      },
      "date": 1684626997085
    },
    {
      "type": "add",
      "id": "3e6123f8c4806ac8",
      "item": {
        "type": "paragraph",
        "id": "3e6123f8c4806ac8",
        "text": "[…]  I want to achieve this functionality by means of client side code only. (client side Elm code to be specific)"
      },
      "after": "d0a6d83a04b6d6d5",
      "date": 1684627023646
    },
    {
      "type": "edit",
      "id": "3e6123f8c4806ac8",
      "item": {
        "type": "paragraph",
        "id": "3e6123f8c4806ac8",
        "text": "[...] I would like to achieve this functionality using client-side code only. (client-side Elm code, to be precise)."
      },
      "date": 1684627047670
    },
    {
      "item": {
        "type": "factory",
        "id": "8df2fd3a4fa46164"
      },
      "id": "8df2fd3a4fa46164",
      "type": "add",
      "after": "d99c838cec13180f",
      "date": 1684627080537
    },
    {
      "type": "edit",
      "id": "8df2fd3a4fa46164",
      "item": {
        "type": "code",
        "id": "8df2fd3a4fa46164",
        "text": "module Main exposing (..)\n\nimport Browser\nimport Html exposing (Html, div, text)\nimport Url\n\n\ntype alias Model =\n    { protocol : String\n    }\n\n\ninitialModel : Model\ninitialModel =\n    { protocol = Url.defaultUrl.protocol }\n\n\ntype Msg\n    = NoOp\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    model\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ if model.protocol == \"https:\" then\n            viewSecureContent\n          else\n            viewNonSecureContent\n        ]\n\n\nviewSecureContent : Html Msg\nviewSecureContent =\n    div []\n        [ text \"This is the HTTPS version of the content.\" ]\n\n\nviewNonSecureContent : Html Msg\nviewNonSecureContent =\n    div []\n        [ text \"This is the HTTP version of the content.\" ]\n\n\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , update = update\n        , view = view\n        }\n"
      },
      "date": 1684627083187
    },
    {
      "item": {
        "type": "factory",
        "id": "7249727e9d302c64"
      },
      "id": "7249727e9d302c64",
      "type": "add",
      "after": "8df2fd3a4fa46164",
      "date": 1684627164944
    },
    {
      "type": "edit",
      "id": "7249727e9d302c64",
      "item": {
        "type": "paragraph",
        "id": "7249727e9d302c64",
        "text": "In this example, the Model contains a protocol field that stores the current protocol retrieved from Window.location.protocol. The view function checks the value of model.protocol to determine whether to render the secure (HTTPS) or non-secure (HTTP) content.\n\nYou can customize the viewSecureContent and viewNonSecureContent functions to render the specific content you desire for each version of your website.\n\nPlease note that this approach relies on client-side code and assumes that both versions of your website are accessible by the user. It's important to ensure that any sensitive information or actions are protected and handled securely on the server-side as well."
      },
      "date": 1684627166800
    },
    {
      "item": {
        "type": "factory",
        "id": "8316973cab7e143c"
      },
      "id": "8316973cab7e143c",
      "type": "add",
      "after": "7249727e9d302c64",
      "date": 1684627276515
    },
    {
      "type": "edit",
      "id": "8316973cab7e143c",
      "item": {
        "type": "pagefold",
        "id": "8316973cab7e143c",
        "text": "End of chat.openai's response"
      },
      "date": 1684627289069
    },
    {
      "item": {
        "type": "factory",
        "id": "b8b92723f0bb5585"
      },
      "id": "b8b92723f0bb5585",
      "type": "add",
      "after": "8316973cab7e143c",
      "date": 1684627290759
    },
    {
      "type": "edit",
      "id": "b8b92723f0bb5585",
      "item": {
        "type": "paragraph",
        "id": "b8b92723f0bb5585",
        "text": "Also, how can we ensure that the HTML login form is only displayed when connected via HTTPS?"
      },
      "date": 1684627292271
    },
    {
      "item": {
        "type": "factory",
        "id": "6e8c92531307c64a"
      },
      "id": "6e8c92531307c64a",
      "type": "add",
      "after": "b8b92723f0bb5585",
      "date": 1684627302176
    },
    {
      "type": "edit",
      "id": "6e8c92531307c64a",
      "item": {
        "type": "pagefold",
        "id": "6e8c92531307c64a",
        "text": "chat.openai"
      },
      "date": 1684627306294
    },
    {
      "item": {
        "type": "factory",
        "id": "105ecf488b03f6ab"
      },
      "id": "105ecf488b03f6ab",
      "type": "add",
      "after": "6e8c92531307c64a",
      "date": 1684627308387
    },
    {
      "type": "edit",
      "id": "105ecf488b03f6ab",
      "item": {
        "type": "paragraph",
        "id": "105ecf488b03f6ab",
        "text": "To ensure that the HTML login form is only displayed when connected via HTTPS, you can use client-side Elm code to conditionally render the login form based on the protocol (Window.location.protocol). Here's an example:"
      },
      "date": 1684627310343
    },
    {
      "item": {
        "type": "factory",
        "id": "a212555e35941c05"
      },
      "id": "a212555e35941c05",
      "type": "add",
      "after": "105ecf488b03f6ab",
      "date": 1684627316886
    },
    {
      "type": "edit",
      "id": "a212555e35941c05",
      "item": {
        "type": "code",
        "id": "a212555e35941c05",
        "text": "module Main exposing (..)\n\nimport Browser\nimport Html exposing (Html, div, form, input, button, text)\nimport Html.Attributes exposing (type_, placeholder)\nimport Html.Events exposing (onClick, onSubmit)\nimport Url\n\n\ntype alias Model =\n    { protocol : String\n    , username : String\n    , password : String\n    }\n\n\ninitialModel : Model\ninitialModel =\n    { protocol = Url.defaultUrl.protocol\n    , username = \"\"\n    , password = \"\"\n    }\n\n\ntype Msg\n    = UpdateUsername String\n    | UpdatePassword String\n    | SubmitLoginForm\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        UpdateUsername value ->\n            { model | username = value }\n\n        UpdatePassword value ->\n            { model | password = value }\n\n        SubmitLoginForm ->\n            -- Perform login form submission logic here\n            -- This can involve sending the form data to the server for authentication\n            -- You can add additional validation, error handling, etc.\n            model\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ if model.protocol == \"https:\" then\n            loginFormView model\n          else\n            div [] [ text \"Login form is only available over HTTPS.\" ]\n        ]\n\n\nloginFormView : Model -> Html Msg\nloginFormView model =\n    form [ onSubmit SubmitLoginForm ]\n        [ input [ type_ \"text\", placeholder \"Username\", onInput UpdateUsername ] []\n        , input [ type_ \"password\", placeholder \"Password\", onInput UpdatePassword ] []\n        , button [ type_ \"submit\" ] [ text \"Login\" ]\n        ]\n\n\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , update = update\n        , view = view\n        }\n"
      },
      "date": 1684627319140
    },
    {
      "item": {
        "type": "factory",
        "id": "56d8f862c4462c77"
      },
      "id": "56d8f862c4462c77",
      "type": "add",
      "after": "a212555e35941c05",
      "date": 1684627355296
    },
    {
      "type": "edit",
      "id": "56d8f862c4462c77",
      "item": {
        "type": "paragraph",
        "id": "56d8f862c4462c77",
        "text": "In this example, the Model includes the protocol field that stores the current protocol obtained from Window.location.protocol. The view function checks the value of model.protocol and conditionally renders either the login form or a message indicating that the login form is only available over HTTPS.\n\nThe loginFormView function is responsible for rendering the login form. It is only called when the protocol is HTTPS (model.protocol == \"https:\"). You can customize this function to include additional form fields, validation, error handling, and the actual submission logic.\n\nBy using this approach, the login form will only be displayed when the user accesses your website via HTTPS, ensuring that the form is available securely."
      },
      "date": 1684627357789
    },
    {
      "item": {
        "type": "factory",
        "id": "c3d0d4f20443ae7f"
      },
      "id": "c3d0d4f20443ae7f",
      "type": "add",
      "after": "56d8f862c4462c77",
      "date": 1684627398099
    },
    {
      "type": "edit",
      "id": "c3d0d4f20443ae7f",
      "item": {
        "type": "pagefold",
        "id": "c3d0d4f20443ae7f",
        "text": "End of chat.openai's response"
      },
      "date": 1684627411457
    },
    {
      "item": {
        "type": "factory",
        "id": "8e97c1f09f4fe925"
      },
      "id": "8e97c1f09f4fe925",
      "type": "add",
      "after": "c3d0d4f20443ae7f",
      "date": 1684627901889
    },
    {
      "type": "edit",
      "id": "8e97c1f09f4fe925",
      "item": {
        "type": "paragraph",
        "id": "8e97c1f09f4fe925",
        "text": "To prevent HTML forms, especially input fields, from appearing while using HTTP and ensure that data is sent to the server only when the protocol is HTTPS, you can use client-side Elm code to conditionally render the forms and validate the protocol before submitting the data. (chat.openai)"
      },
      "date": 1684627951728
    },
    {
      "item": {
        "type": "factory",
        "id": "426e00ae9779f395"
      },
      "id": "426e00ae9779f395",
      "type": "add",
      "after": "8e97c1f09f4fe925",
      "date": 1684627991315
    },
    {
      "type": "edit",
      "id": "426e00ae9779f395",
      "item": {
        "type": "code",
        "id": "426e00ae9779f395",
        "text": "module Main exposing (..)\n\nimport Browser\nimport Html exposing (Html, div, form, input, button, text)\nimport Html.Attributes exposing (type_, placeholder, style)\nimport Html.Events exposing (onClick, onSubmit)\nimport Url\n\n\ntype alias Model =\n    { protocol : String\n    , username : String\n    , password : String\n    , formSubmitted : Bool\n    }\n\n\ninitialModel : Model\ninitialModel =\n    { protocol = Url.defaultUrl.protocol\n    , username = \"\"\n    , password = \"\"\n    , formSubmitted = False\n    }\n\n\ntype Msg\n    = UpdateUsername String\n    | UpdatePassword String\n    | SubmitLoginForm\n    | FormSubmitted\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        UpdateUsername value ->\n            { model | username = value }\n\n        UpdatePassword value ->\n            { model | password = value }\n\n        SubmitLoginForm ->\n            { model | formSubmitted = True }\n\n        FormSubmitted ->\n            model\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ if model.protocol == \"https:\" then\n            if model.formSubmitted then\n                formSubmittedView\n            else\n                loginFormView model\n          else\n            div [ style \"color\" \"red\" ] [ text \"Accessing this page requires HTTPS.\" ]\n        ]\n\n\nloginFormView : Model -> Html Msg\nloginFormView model =\n    form [ onSubmit SubmitLoginForm ]\n        [ input [ type_ \"text\", placeholder \"Username\", onInput UpdateUsername ] []\n        , input [ type_ \"password\", placeholder \"Password\", onInput UpdatePassword ] []\n        , button [ type_ \"submit\" ] [ text \"Login\" ]\n        ]\n\n\nformSubmittedView : Html Msg\nformSubmittedView =\n    div [] [ text \"Form submitted successfully.\" ]\n\n\nmain : Program () Model Msg\nmain =\n    Browser.sandbox\n        { init = initialModel\n        , update = update\n        , view = view\n        }\n"
      },
      "date": 1684627993807
    }
  ]
}