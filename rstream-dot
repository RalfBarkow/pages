{
  "title": "rstream-dot",
  "story": [
    {
      "type": "paragraph",
      "id": "61bbb350e1aff69d",
      "text": "Graphviz DOT conversion of @thi.ng/rstream dataflow graph topologies. [https://docs.thi.ng/umbrella/rstream-dot/index.html github]"
    },
    {
      "type": "code",
      "id": "49cbc9e1e10bd3a7",
      "text": "import * as rsd from \"https://cdn.skypack.dev/@thi.ng/rstream-dot\";\n\nimport * as rs from \"https://cdn.skypack.dev/@thi.ng/rstream\";\nimport * as tx from \"https://cdn.skypack.dev/@thi.ng/transducers\";\n\n"
    },
    {
      "type": "frame",
      "id": "5396a0b4e33715c0",
      "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 256"
    },
    {
      "type": "paragraph",
      "id": "8fc91beb174452cf",
      "text": "Create dummy dataflow:"
    },
    {
      "type": "code",
      "id": "76582538cc0c2d84",
      "text": "var a = rs.fromIterable([1, 2, 3]);\n"
    },
    {
      "type": "pagefold",
      "id": "de92e3a7fabeec8e",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "e2c8bf4ec9bdd213",
      "text": "SCHMIDT, Karsten, 2018. @thi.ng/rstream-dot. [https://docs.thi.ng/umbrella/rstream-dot/index.html github]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "rstream-dot",
        "story": []
      },
      "date": 1678799972519
    },
    {
      "id": "5396a0b4e33715c0",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "5396a0b4e33715c0",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 256"
      },
      "attribution": {
        "page": "ellipse-proximity"
      },
      "date": 1678799981284
    },
    {
      "id": "49cbc9e1e10bd3a7",
      "type": "add",
      "item": {
        "type": "code",
        "id": "49cbc9e1e10bd3a7",
        "text": "import { closestPointEllipse } from \"https://cdn.skypack.dev/@thi.ng/geom-closest-point\";\nimport { $compile } from \"https://cdn.skypack.dev/@thi.ng/rdom\";\nimport { $canvas } from \"https://cdn.skypack.dev/@thi.ng/rdom-canvas\";\nimport { merge, reactive } from \"https://cdn.skypack.dev/@thi.ng/rstream\";\nimport { gestureStream } from \"https://cdn.skypack.dev/@thi.ng/rstream-gestures\";\nimport { mapcat, repeatedly } from \"https://cdn.skypack.dev/@thi.ng/transducers\";\nimport { add2, normalCCW, random2 } from \"https://cdn.skypack.dev/@thi.ng/vectors\";\n"
      },
      "attribution": {
        "page": "ellipse-proximity"
      },
      "date": 1678799995450
    },
    {
      "type": "edit",
      "id": "49cbc9e1e10bd3a7",
      "item": {
        "type": "code",
        "id": "49cbc9e1e10bd3a7",
        "text": "import * as rsd from \"https://cdn.skypack.dev/@thi.ng/rstream-dot\";\n\nimport * as rs from \"https://cdn.skypack.dev/@thi.ng/rstream\";\nimport * as tx from \"https://cdn.skypack.dev/@thi.ng/transducers\";\n\n// create dummy dataflow\na = rs.fromIterable([1,2,3]);\nb = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\nrs.merge({src: [a, b]}).subscribe(rs.trace());\n\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));\n\n// digraph g {\n// rankdir=LR;\n// node[fontname=Inconsolata,fontsize=11,style=filled,fontcolor=white];\n// edge[fontname=Inconsolata,fontsize=11];\n// s0[label=\"iterable-0\\n(Stream)\", color=blue];\n// s1[label=\"x10\", color=black];\n// s2[label=\"in-iterable-0\", color=black];\n// s3[label=\"<noid>\", color=gray];\n// s4[label=\"streammerge-0\\n(StreamMerge)\", color=red];\n// s5[label=\"sub-1\", color=black];\n// s6[label=\"<noid>\", color=gray];\n// s7[label=\"iterable-1\\n(Stream)\", color=blue];\n// s8[label=\"in-iterable-1\", color=black];\n// s9[label=\"<noid>\", color=gray];\n// s5 -> s6;\n// s4 -> s5;\n// s3 -> s4;\n// s2 -> s3;\n// s0 -> s1[label=\"xform\"];\n// s0 -> s2;\n// s9 -> s4;\n// s8 -> s9;\n// s7 -> s8;\n// }"
      },
      "date": 1678800044122
    },
    {
      "item": {
        "type": "factory",
        "id": "76582538cc0c2d84"
      },
      "id": "76582538cc0c2d84",
      "type": "add",
      "after": "5396a0b4e33715c0",
      "date": 1678800082628
    },
    {
      "type": "edit",
      "id": "49cbc9e1e10bd3a7",
      "item": {
        "type": "code",
        "id": "49cbc9e1e10bd3a7",
        "text": "import * as rsd from \"https://cdn.skypack.dev/@thi.ng/rstream-dot\";\n\nimport * as rs from \"https://cdn.skypack.dev/@thi.ng/rstream\";\nimport * as tx from \"https://cdn.skypack.dev/@thi.ng/transducers\";\n\n"
      },
      "date": 1678800093610
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\na = rs.fromIterable([1,2,3]);\nb = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\nrs.merge({src: [a, b]}).subscribe(rs.trace());\n\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));\n\n// digraph g {\n// rankdir=LR;\n// node[fontname=Inconsolata,fontsize=11,style=filled,fontcolor=white];\n// edge[fontname=Inconsolata,fontsize=11];\n// s0[label=\"iterable-0\\n(Stream)\", color=blue];\n// s1[label=\"x10\", color=black];\n// s2[label=\"in-iterable-0\", color=black];\n// s3[label=\"<noid>\", color=gray];\n// s4[label=\"streammerge-0\\n(StreamMerge)\", color=red];\n// s5[label=\"sub-1\", color=black];\n// s6[label=\"<noid>\", color=gray];\n// s7[label=\"iterable-1\\n(Stream)\", color=blue];\n// s8[label=\"in-iterable-1\", color=black];\n// s9[label=\"<noid>\", color=gray];\n// s5 -> s6;\n// s4 -> s5;\n// s3 -> s4;\n// s2 -> s3;\n// s0 -> s1[label=\"xform\"];\n// s0 -> s2;\n// s9 -> s4;\n// s8 -> s9;\n// s7 -> s8;\n// }"
      },
      "date": 1678800095238
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\na = rs.fromIterable([1,2,3]);\nb = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\nrs.merge({src: [a, b]}).subscribe(rs.trace());\n\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));\n\n"
      },
      "date": 1678800114979
    },
    {
      "item": {
        "type": "factory",
        "id": "61bbb350e1aff69d"
      },
      "id": "61bbb350e1aff69d",
      "type": "add",
      "after": "76582538cc0c2d84",
      "date": 1678800164256
    },
    {
      "id": "61bbb350e1aff69d",
      "type": "move",
      "order": [
        "61bbb350e1aff69d",
        "49cbc9e1e10bd3a7",
        "5396a0b4e33715c0",
        "76582538cc0c2d84"
      ],
      "date": 1678800172405
    },
    {
      "type": "edit",
      "id": "61bbb350e1aff69d",
      "item": {
        "type": "paragraph",
        "id": "61bbb350e1aff69d",
        "text": "Graphviz DOT conversion of @thi.ng/rstream dataflow graph topologies."
      },
      "date": 1678800178490
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "import * as rsd from \"@thi.ng/rstream-dot\";\n\nimport * as rs from \"@thi.ng/rstream\";\nimport * as tx from \"@thi.ng/transducers\";\n\n// create dummy dataflow\na = rs.fromIterable([1,2,3]);\nb = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\nrs.merge({src: [a, b]}).subscribe(rs.trace());\n\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));"
      },
      "date": 1678800230597
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\na = rs.fromIterable([1,2,3]);\nb = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\nrs.merge({src: [a, b]}).subscribe(rs.trace());\n\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));"
      },
      "date": 1678800281028
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\na = rs.fromIterable([1,2,3]);\nb = rs.fromIterable([10, 20, 30]);\n//a.transform(tx.map((x) => x * 10), \"x10\");\n//rs.merge({src: [a, b]}).subscribe(rs.trace());\n\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));"
      },
      "date": 1678800480941
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\na = rs.fromIterable([1,2,3]);\nb = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\nrs.merge({src: [a, b]}).subscribe(rs.trace());\n\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));"
      },
      "date": 1678800508508
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\nvar a = rs.fromIterable([1,2,3]);\nvar b = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\nrs.merge({src: [a, b]}).subscribe(rs.trace());\n\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));"
      },
      "date": 1678800536116
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\nlet a = rs.fromIterable([1,2,3]);\nlet b = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\nrs.merge({src: [a, b]}).subscribe(rs.trace());\n\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));"
      },
      "date": 1678800564533
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\na = rs.fromIterable([1,2,3]);\n//b = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\n//rs.merge({src: [a, b]}).subscribe(rs.trace());\n\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));"
      },
      "date": 1678800687477
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\nlet a = rs.fromIterable([1,2,3]);\n//b = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\n//rs.merge({src: [a, b]}).subscribe(rs.trace());\n\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));"
      },
      "date": 1678800731821
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\na = rs.fromIterable([1, 2, 3]);\nb = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\nrs.merge({ src: [a, b] }).subscribe(rs.trace());\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));\n"
      },
      "date": 1678800834709
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\nvar a = rs.fromIterable([1, 2, 3]);\nvar b = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\nrs.merge({ src: [a, b] }).subscribe(rs.trace());\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));\n"
      },
      "date": 1678800900771
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\nconst a = rs.fromIterable([1, 2, 3]);\nconst b = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\nrs.merge({ src: [a, b] }).subscribe(rs.trace());\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));\n"
      },
      "date": 1678800964764
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "// create dummy dataflow\nconst a = rs.fromIterable([1, 2, 3]);\n//const b = rs.fromIterable([10, 20, 30]);\na.transform(tx.map((x) => x * 10), \"x10\");\n//rs.merge({ src: [a, b] }).subscribe(rs.trace());\n// now capture the topology by walking the graph from its root(s)\n// and convert the result to GraphViz DOT format\nconsole.log(rsd.toDot(rsd.walk([a, b])));\n"
      },
      "date": 1678800989171
    },
    {
      "item": {
        "type": "factory",
        "id": "8fc91beb174452cf"
      },
      "id": "8fc91beb174452cf",
      "type": "add",
      "after": "76582538cc0c2d84",
      "date": 1678801008299
    },
    {
      "id": "8fc91beb174452cf",
      "type": "move",
      "order": [
        "61bbb350e1aff69d",
        "49cbc9e1e10bd3a7",
        "5396a0b4e33715c0",
        "8fc91beb174452cf",
        "76582538cc0c2d84"
      ],
      "date": 1678801011680
    },
    {
      "type": "edit",
      "id": "8fc91beb174452cf",
      "item": {
        "type": "paragraph",
        "id": "8fc91beb174452cf",
        "text": "Create dummy dataflow:"
      },
      "date": 1678801019302
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "const a = rs.fromIterable([1, 2, 3]);\na.transform(tx.map((x) => x * 10), \"x10\");\n"
      },
      "date": 1678801032324
    },
    {
      "type": "edit",
      "id": "76582538cc0c2d84",
      "item": {
        "type": "code",
        "id": "76582538cc0c2d84",
        "text": "var a = rs.fromIterable([1, 2, 3]);\n"
      },
      "date": 1678801071249
    },
    {
      "type": "edit",
      "id": "61bbb350e1aff69d",
      "item": {
        "type": "paragraph",
        "id": "61bbb350e1aff69d",
        "text": "Graphviz DOT conversion of @thi.ng/rstream dataflow graph topologies. [https://docs.thi.ng/umbrella/rstream-dot/index.html github]"
      },
      "date": 1678801395315
    },
    {
      "item": {
        "type": "factory",
        "id": "de92e3a7fabeec8e"
      },
      "id": "de92e3a7fabeec8e",
      "type": "add",
      "after": "76582538cc0c2d84",
      "date": 1678801475115
    },
    {
      "type": "edit",
      "id": "de92e3a7fabeec8e",
      "item": {
        "type": "pagefold",
        "id": "de92e3a7fabeec8e",
        "text": "~"
      },
      "date": 1678801478639
    },
    {
      "item": {
        "type": "factory",
        "id": "e2c8bf4ec9bdd213"
      },
      "id": "e2c8bf4ec9bdd213",
      "type": "add",
      "after": "de92e3a7fabeec8e",
      "date": 1678801479981
    },
    {
      "type": "edit",
      "id": "e2c8bf4ec9bdd213",
      "item": {
        "type": "paragraph",
        "id": "e2c8bf4ec9bdd213",
        "text": "\nSCHMIDT, Karsten, 2018. @thi.ng/rstream-dot. 2018. \n"
      },
      "date": 1678801482081
    },
    {
      "type": "edit",
      "id": "e2c8bf4ec9bdd213",
      "item": {
        "type": "paragraph",
        "id": "e2c8bf4ec9bdd213",
        "text": "SCHMIDT, Karsten, 2018. @thi.ng/rstream-dot. "
      },
      "date": 1678801500218
    },
    {
      "type": "edit",
      "id": "e2c8bf4ec9bdd213",
      "item": {
        "type": "paragraph",
        "id": "e2c8bf4ec9bdd213",
        "text": "SCHMIDT, Karsten, 2018. @thi.ng/rstream-dot. [https://docs.thi.ng/umbrella/rstream-dot/index.html github]"
      },
      "date": 1678801511734
    }
  ]
}