{
  "title": "Dynamic and Distributed",
  "story": [
    {
      "type": "paragraph",
      "id": "07fb655feba1b73d",
      "text": "There are great benefits to the dynamic nature of [[Java]] source code. Indeed they are vital for the concepts that Sun and other major players were focusing on for the delivery of applications and services in software. These are covered in more detail in the next section. The same features might create new problems for the automatic analysis of such source code, and cause many more data sources to be necessary, but by the same token the same techniques can be used to augment the analysis. As Flanagan sums up so well [1]:"
    },
    {
      "type": "markdown",
      "id": "879bf83bd1f908ea",
      "text": "> “When this program is asked to display some type of data that it has never encountered before, it might dynamically download a class from the network that can [[parse]] the data, and then dynamically download another class (probably a Java “bean”) that can display the data within a compound document. A program like this uses distributed resources on the network to dynamically grow and adapt to the needs of its user.” (Flanagan 1997, p.5)"
    },
    {
      "type": "paragraph",
      "id": "7166eecafcd7f81b",
      "text": "There is no reason that analysis and manipulation tools cannot utilise the same techniques that are used for current applications to aid them [4]. With the rapid take-up and propagation of the ideas expressed in the next section it may well become a necessity; regardless of the source language used. After all, Java is just another programming language."
    },
    {
      "type": "pagefold",
      "id": "7e50783382719a4d",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "a6759a43e9bf226b",
      "text": "Knight C (2001): Smell the coffee! Uncovering Java analysis issues. [https://ieeexplore.ieee.org/abstract/document/972677 ieee]"
    },
    {
      "type": "paragraph",
      "id": "5e19b473c11e2303",
      "text": "[1] Flanagan D (1997): Java in a nutshell: a desktop quick reference. 2nd ed. Covers Java 1.1, Cambridge ; Sebastopol, CA: O'Reilly"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Dynamic and Distributed",
        "story": []
      },
      "date": 1714647820658
    },
    {
      "item": {
        "type": "factory",
        "id": "07fb655feba1b73d"
      },
      "id": "07fb655feba1b73d",
      "type": "add",
      "date": 1714647821899
    },
    {
      "type": "edit",
      "id": "07fb655feba1b73d",
      "item": {
        "type": "paragraph",
        "id": "07fb655feba1b73d",
        "text": "There are great benefits to the dynamic nature of Java source code. Indeed they are vital for the current concepts that Sun and other major players are currently focusing on for the delivery of applications and services in software. These are covered in more detail in the next section. The same features might create new problems for the automatic analysis of such source code, and cause many more data sources to be necessary, but by the same token the same techniques can be used to augment the analysis. As Flanagan sums up so well [1]:  “When this program is asked to display some type of data that it has never encountered before, it might dynamically download a class from the network that can parse the data, and then dynamically download another class (probably a Java “bean”) that can display the data within a compound document. A program like this uses distributed resources on the network to dynamically grow and adapt to the needs of its user.” (Flanagan 1997, S.5)  There is no reason that analysis and manipulation tools cannot utilise the same techniques that are used for current applications to aid them [4]. With the rapid take-up and propagation of the ideas expressed in the next section it may well become a necessity; regardless of the source language used. After all, Java is just another programming language."
      },
      "date": 1714647823570
    },
    {
      "type": "edit",
      "id": "07fb655feba1b73d",
      "item": {
        "type": "paragraph",
        "id": "07fb655feba1b73d",
        "text": "There are great benefits to the dynamic nature of Java source code. Indeed they are vital for the current concepts that Sun and other major players are currently focusing on for the delivery of applications and services in software. These are covered in more detail in the next section. The same features might create new problems for the automatic analysis of such source code, and cause many more data sources to be necessary, but by the same token the same techniques can be used to augment the analysis. As Flanagan sums up so well [1]:"
      },
      "date": 1714647841899
    },
    {
      "type": "add",
      "id": "879bf83bd1f908ea",
      "item": {
        "type": "paragraph",
        "id": "879bf83bd1f908ea",
        "text": "> “When this program is asked to display some type of data that it has never encountered before, it might dynamically download a class from the network that can parse the data, and then dynamically download another class (probably a Java “bean”) that can display the data within a compound document. A program like this uses distributed resources on the network to dynamically grow and adapt to the needs of its user.” (Flanagan 1997, p.5)"
      },
      "after": "07fb655feba1b73d",
      "date": 1714647851770
    },
    {
      "type": "add",
      "id": "7166eecafcd7f81b",
      "item": {
        "type": "paragraph",
        "id": "7166eecafcd7f81b",
        "text": "There is no reason that analysis and manipulation tools cannot utilise the same techniques that are used for current applications to aid them [4]. With the rapid take-up and propagation of the ideas expressed in the next section it may well become a necessity; regardless of the source language used. After all, Java is just another programming language."
      },
      "after": "879bf83bd1f908ea",
      "date": 1714647852196
    },
    {
      "type": "edit",
      "id": "879bf83bd1f908ea",
      "item": {
        "type": "markdown",
        "id": "879bf83bd1f908ea",
        "text": "> “When this program is asked to display some type of data that it has never encountered before, it might dynamically download a class from the network that can parse the data, and then dynamically download another class (probably a Java “bean”) that can display the data within a compound document. A program like this uses distributed resources on the network to dynamically grow and adapt to the needs of its user.” (Flanagan 1997, p.5)"
      },
      "date": 1714647857248
    },
    {
      "type": "fork",
      "date": 1714647904054
    },
    {
      "item": {
        "type": "factory",
        "id": "7e50783382719a4d"
      },
      "id": "7e50783382719a4d",
      "type": "add",
      "after": "7166eecafcd7f81b",
      "date": 1714647906072
    },
    {
      "type": "edit",
      "id": "7e50783382719a4d",
      "item": {
        "type": "pagefold",
        "id": "7e50783382719a4d",
        "text": "~"
      },
      "date": 1714647909123
    },
    {
      "item": {
        "type": "factory",
        "id": "5e19b473c11e2303"
      },
      "id": "5e19b473c11e2303",
      "type": "add",
      "after": "7e50783382719a4d",
      "date": 1714647910393
    },
    {
      "type": "edit",
      "id": "5e19b473c11e2303",
      "item": {
        "type": "paragraph",
        "id": "5e19b473c11e2303",
        "text": "Flanagan D (1997): Java in a nutshell: a desktop quick reference. 2nd ed. Covers Java 1.1, Cambridge ; Sebastopol, CA: O'Reilly"
      },
      "date": 1714647915717
    },
    {
      "item": {
        "type": "factory",
        "id": "a6759a43e9bf226b"
      },
      "id": "a6759a43e9bf226b",
      "type": "add",
      "after": "5e19b473c11e2303",
      "date": 1714647923342
    },
    {
      "id": "a6759a43e9bf226b",
      "type": "move",
      "order": [
        "07fb655feba1b73d",
        "879bf83bd1f908ea",
        "7166eecafcd7f81b",
        "7e50783382719a4d",
        "a6759a43e9bf226b",
        "5e19b473c11e2303"
      ],
      "date": 1714647924974
    },
    {
      "type": "edit",
      "id": "a6759a43e9bf226b",
      "item": {
        "type": "paragraph",
        "id": "a6759a43e9bf226b",
        "text": "Knight C (2001): Smell the coffee! Uncovering Java analysis issues., 161--167 [https://ieeexplore.ieee.org/abstract/document/972677]"
      },
      "date": 1714647930708
    },
    {
      "type": "edit",
      "id": "a6759a43e9bf226b",
      "item": {
        "type": "paragraph",
        "id": "a6759a43e9bf226b",
        "text": "Knight C (2001): Smell the coffee! Uncovering Java analysis issues., 161--167 [https://ieeexplore.ieee.org/abstract/document/972677 ieee]"
      },
      "date": 1714647946839
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1714647987718
    },
    {
      "type": "edit",
      "id": "07fb655feba1b73d",
      "item": {
        "type": "paragraph",
        "id": "07fb655feba1b73d",
        "text": "There are great benefits to the dynamic nature of [[Java]] source code. Indeed they are vital for the current concepts that Sun and other major players are currently focusing on for the delivery of applications and services in software. These are covered in more detail in the next section. The same features might create new problems for the automatic analysis of such source code, and cause many more data sources to be necessary, but by the same token the same techniques can be used to augment the analysis. As Flanagan sums up so well [1]:"
      },
      "date": 1714648006238
    },
    {
      "type": "edit",
      "id": "07fb655feba1b73d",
      "item": {
        "type": "paragraph",
        "id": "07fb655feba1b73d",
        "text": "There are great benefits to the dynamic nature of [[Java]] source code. Indeed they are vital for the current concepts that Sun and other major players were focusing on for the delivery of applications and services in software. These are covered in more detail in the next section. The same features might create new problems for the automatic analysis of such source code, and cause many more data sources to be necessary, but by the same token the same techniques can be used to augment the analysis. As Flanagan sums up so well [1]:"
      },
      "date": 1714648026712
    },
    {
      "type": "edit",
      "id": "5e19b473c11e2303",
      "item": {
        "type": "paragraph",
        "id": "5e19b473c11e2303",
        "text": "[1] Flanagan D (1997): Java in a nutshell: a desktop quick reference. 2nd ed. Covers Java 1.1, Cambridge ; Sebastopol, CA: O'Reilly"
      },
      "date": 1714648066987
    },
    {
      "type": "edit",
      "id": "07fb655feba1b73d",
      "item": {
        "type": "paragraph",
        "id": "07fb655feba1b73d",
        "text": "There are great benefits to the dynamic nature of [[Java]] source code. Indeed they are vital for the concepts that Sun and other major players were focusing on for the delivery of applications and services in software. These are covered in more detail in the next section. The same features might create new problems for the automatic analysis of such source code, and cause many more data sources to be necessary, but by the same token the same techniques can be used to augment the analysis. As Flanagan sums up so well [1]:"
      },
      "date": 1714648349950
    },
    {
      "type": "edit",
      "id": "879bf83bd1f908ea",
      "item": {
        "type": "markdown",
        "id": "879bf83bd1f908ea",
        "text": "> “When this program is asked to display some type of data that it has never encountered before, it might dynamically download a class from the network that can [[parse]] the data, and then dynamically download another class (probably a Java “bean”) that can display the data within a compound document. A program like this uses distributed resources on the network to dynamically grow and adapt to the needs of its user.” (Flanagan 1997, p.5)"
      },
      "date": 1714648384302
    },
    {
      "type": "edit",
      "id": "a6759a43e9bf226b",
      "item": {
        "type": "paragraph",
        "id": "a6759a43e9bf226b",
        "text": "Knight C (2001): Smell the coffee! Uncovering Java analysis issues [https://ieeexplore.ieee.org/abstract/document/972677 ieee]"
      },
      "date": 1714673988421
    },
    {
      "type": "edit",
      "id": "a6759a43e9bf226b",
      "item": {
        "type": "paragraph",
        "id": "a6759a43e9bf226b",
        "text": "Knight C (2001): Smell the coffee! Uncovering Java analysis issues. [https://ieeexplore.ieee.org/abstract/document/972677 ieee]"
      },
      "date": 1714673992926
    }
  ]
}