{
  "title": "GPG Encryption",
  "story": [
    {
      "type": "markdown",
      "id": "de15a8592693d0ef",
      "text": "GPG can encrypt pages to be decrypted by any one of multiple recipients:"
    },
    {
      "type": "code",
      "id": "0fde8b0a1e090641",
      "text": "# gpg: enable many people to decrypt a message \ngpg --encrypt \\\n  --recipient alice@example.com \\\n  --recipient bob@example.com \\\nclear-message.txt\n"
    },
    {
      "type": "markdown",
      "id": "9a064d524d70dc23",
      "text": "> GPG encrypts the file once with a symmetric key, then places a header identifying the target keypair and an encrypted version of the symmetric key.\n>\n> [...] When encrypted to multiple recipients, this header is placed multiple times providing a uniquely encrypted version of the same symmetric key for each recipient.\n> \n> [https://stackoverflow.com/a/23725786/1074208 stackoverflow]\n"
    },
    {
      "type": "markdown",
      "id": "04538a8eb80ae845",
      "text": "- [ ] explore browser options for dat & static wiki variants\nCloudFlare built OpenCA using WebCrypto and PKI.js\n[https://blog.cloudflare.com/how-we-built-origin-ca-web-crypto/#webcryptoandpkijs article]\n[https://www.w3.org/2012/webcrypto/ webcrypto]\n[https://pkijs.org/ pki.js]\n[https://caniuse.com/#feat=cryptography caniuse#cryptography]"
    },
    {
      "type": "markdown",
      "id": "277c62e65baedc05",
      "text": "TLS becomes important when transmitting passwords over the internet.  Here is an example configuration for Caddy to include HTTP basic auth in addition to terminating TLS connections for the domain."
    },
    {
      "type": "code",
      "id": "e8ed6cb407a679ce",
      "text": "https://{$AUTH_DOMAIN},\nhttp://{$AUTH_DOMAIN} {\n  gzip\n  basicauth / {$AUTH_NAME} {$AUTH_PASS}\n  proxy / {$ORIGIN} {\n    transparent\n  }\n}\n"
    },
    {
      "type": "markdown",
      "id": "82c39c31c9160d19",
      "text": "This configuration uses a single shared password, so not best practice.  Nevertheless useful for exposing some work: basic auth breaks the wiki sharing.  The client javascript needs to learn to include auth headers when requesting `wiki.example.com/slug.json` from other wikis in the protected federation.\n\n"
    },
    {
      "type": "markdown",
      "id": "1abb71c5573bcc5a",
      "text": "While I was getting the above to work I also learned of a few more recent caddy plugins which might work better than basic auth.\n\nhttps://caddyserver.com/docs/http.jwt\nhttps://caddyserver.com/docs/http.login\nhttps://caddyserver.com/docs/http.authz\n"
    },
    {
      "type": "pagefold",
      "id": "f25b5c68ebf55bec",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "eb842fd909ff90a3",
      "text": "Paul adds, Not sure about gpg - it won't cope with people joining/leaving the group.\nOr maybe it would - but you would need to re-encrypt whenever membership of the group changed, changing the document key as well."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "GPG Encryption",
        "story": []
      },
      "date": 1536449695425
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "de15a8592693d0ef",
        "text": "GPG can encrypt pages to be decrypted by any one of multiple recipients:"
      },
      "id": "de15a8592693d0ef",
      "date": 1536449708595
    },
    {
      "type": "add",
      "item": {
        "type": "code",
        "id": "0fde8b0a1e090641",
        "text": "# gpg: enable many people to decrypt a message \ngpg --encrypt \\\n  --recipient alice@example.com \\\n  --recipient bob@example.com \\\nclear-message.txt\n"
      },
      "after": "de15a8592693d0ef",
      "id": "0fde8b0a1e090641",
      "date": 1536449714815
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "9a064d524d70dc23",
        "text": "> GPG encrypts the file once with a symmetric key, then places a header identifying the target keypair and an encrypted version of the symmetric key.\n>\n> [...] When encrypted to multiple recipients, this header is placed multiple times providing a uniquely encrypted version of the same symmetric key for each recipient.\n> \n> [https://stackoverflow.com/a/23725786/1074208 stackoverflow]\n"
      },
      "after": "0fde8b0a1e090641",
      "id": "9a064d524d70dc23",
      "date": 1536449718428
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "04538a8eb80ae845",
        "text": "- [ ] explore browser options for dat & static wiki variants\nCloudFlare built OpenCA using WebCrypto and PKI.js\n[https://blog.cloudflare.com/how-we-built-origin-ca-web-crypto/#webcryptoandpkijs article]\n[https://www.w3.org/2012/webcrypto/ webcrypto]\n[https://pkijs.org/ pki.js]\n[https://caniuse.com/#feat=cryptography caniuse#cryptography]"
      },
      "after": "9a064d524d70dc23",
      "id": "04538a8eb80ae845",
      "date": 1536449721699
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "277c62e65baedc05",
        "text": "TLS becomes important when transmitting passwords over the internet.  Here is an example configuration for Caddy to include HTTP basic auth in addition to terminating TLS connections for the domain."
      },
      "after": "04538a8eb80ae845",
      "id": "277c62e65baedc05",
      "date": 1536449728119
    },
    {
      "type": "add",
      "item": {
        "type": "code",
        "id": "e8ed6cb407a679ce",
        "text": "https://{$AUTH_DOMAIN},\nhttp://{$AUTH_DOMAIN} {\n  gzip\n  basicauth / {$AUTH_NAME} {$AUTH_PASS}\n  proxy / {$ORIGIN} {\n    transparent\n  }\n}\n"
      },
      "after": "277c62e65baedc05",
      "id": "e8ed6cb407a679ce",
      "date": 1536449731491
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "82c39c31c9160d19",
        "text": "This configuration uses a single shared password, so not best practice.  Nevertheless useful for exposing some work: basic auth breaks the wiki sharing.  The client javascript needs to learn to include auth headers when requesting `wiki.example.com/slug.json` from other wikis in the protected federation.\n\n"
      },
      "after": "e8ed6cb407a679ce",
      "id": "82c39c31c9160d19",
      "date": 1536449737059
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "1abb71c5573bcc5a",
        "text": "While I was getting the above to work I also learned of a few more recent caddy plugins which might work better than basic auth.\n\nhttps://caddyserver.com/docs/http.jwt\nhttps://caddyserver.com/docs/http.login\nhttps://caddyserver.com/docs/http.authz\n"
      },
      "after": "82c39c31c9160d19",
      "id": "1abb71c5573bcc5a",
      "date": 1536449740940
    },
    {
      "type": "add",
      "item": {
        "type": "pagefold",
        "id": "f25b5c68ebf55bec",
        "text": "."
      },
      "after": "1abb71c5573bcc5a",
      "id": "f25b5c68ebf55bec",
      "date": 1536449746318
    },
    {
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "eb842fd909ff90a3",
        "text": "Paul adds, Not sure about gpg - it won't cope with people joining/leaving the group.\nOr maybe it would - but you would need to re-encrypt whenever membership of the group changed, changing the document key as well."
      },
      "after": "1abb71c5573bcc5a",
      "id": "eb842fd909ff90a3",
      "date": 1536449749819
    },
    {
      "type": "move",
      "order": [
        "de15a8592693d0ef",
        "0fde8b0a1e090641",
        "9a064d524d70dc23",
        "04538a8eb80ae845",
        "277c62e65baedc05",
        "e8ed6cb407a679ce",
        "82c39c31c9160d19",
        "1abb71c5573bcc5a",
        "f25b5c68ebf55bec",
        "eb842fd909ff90a3"
      ],
      "id": "f25b5c68ebf55bec",
      "date": 1536449760266
    },
    {
      "type": "fork",
      "site": "path.ward.asia.wiki.org",
      "date": 1672487969683
    }
  ]
}