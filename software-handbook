{
  "title": "Software Handbook",
  "story": [
    {
      "type": "html",
      "text": "Software Handbooks, similar to the handbooks of common\ntechniques used in other engineering disciplines, exist\nfor software in several forms, ranging from very formal",
      "id": "0862154018b4e6ed684aaa93cf08243e"
    },
    {
      "type": "html",
      "text": "(e.g. Collected Algorithms of the ACM, IEEE Transactions\non Software Engineering) collections of formal models, to\nthe practitioner's guides (e.g. book and training course\nexamples, well-documented widely-distributed source code)\nto the very informal (e.g. USENET technical group archives).",
      "id": "727f056a42019504c03efd042782fc11"
    },
    {
      "type": "html",
      "text": "\nMany attempts have been made to standardize handbooks for the\nsoftware engineer, which would describe software artifacts at\nseveral levels of abstraction from Patterns (analysis level) to\nArchitectures (design level) to libraries (code level).  The\nstandards used in the software industry may be at any of these\nlevels of abstraction, i.e. a software handbook may reasonably\ndescribe the ISO 7-layer network model and the MVC model from\nSmalltalk (Patterns), the more detailed APIs given to these\nmodels in, say, TCP/IP or Smalltalk (designs), and the code\nthat implements these, in, say, the GNU Repository (code).\nLittle useful work can be done in software until a developer\nhas absorbed a problem, understood its known solutions, and\nfound some set of resources that help him/her construct a \nnew one.  Unlike bridges or cars, the exact same piece of\nsoftware, built a second time, is worth exactly nothing.\nSoftware handbooks must concentrate on helping developers to\nunderstand what is novel about their problem and solution, \nand to focus their development effort on what is really new.",
      "id": "032d8b124d28158bbf286c4aec270e83"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "08d5dfe618b1776a6967ee4038b66309"
    },
    {
      "type": "html",
      "text": "[[Category Books]]",
      "id": "603f91894e67a8da7d1aa43f8e334c7a"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?SoftwareHandbook c2.com]",
      "id": "610e81e98393375d793e5de3beaad0e2"
    }
  ],
  "journal": [
    {
      "date": 1419633373000,
      "id": "7664e8648f4bee991b2512c6dcedad20",
      "type": "create",
      "item": {
        "title": "Software Handbook",
        "story": [
          {
            "type": "html",
            "text": "Software Handbooks, similar to the handbooks of common\ntechniques used in other engineering disciplines, exist\nfor software in several forms, ranging from very formal",
            "id": "0862154018b4e6ed684aaa93cf08243e"
          },
          {
            "type": "html",
            "text": "(e.g. Collected Algorithms of the ACM, IEEE Transactions\non Software Engineering) collections of formal models, to\nthe practitioner's guides (e.g. book and training course\nexamples, well-documented widely-distributed source code)\nto the very informal (e.g. USENET technical group archives).",
            "id": "727f056a42019504c03efd042782fc11"
          },
          {
            "type": "html",
            "text": "\nMany attempts have been made to standardize handbooks for the\nsoftware engineer, which would describe software artifacts at\nseveral levels of abstraction from Patterns (analysis level) to\nArchitectures (design level) to libraries (code level).  The\nstandards used in the software industry may be at any of these\nlevels of abstraction, i.e. a software handbook may reasonably\ndescribe the ISO 7-layer network model and the MVC model from\nSmalltalk (Patterns), the more detailed APIs given to these\nmodels in, say, TCP/IP or Smalltalk (designs), and the code\nthat implements these, in, say, the GNU Repository (code).\nLittle useful work can be done in software until a developer\nhas absorbed a problem, understood its known solutions, and\nfound some set of resources that help him/her construct a \nnew one.  Unlike bridges or cars, the exact same piece of\nsoftware, built a second time, is worth exactly nothing.\nSoftware handbooks must concentrate on helping developers to\nunderstand what is novel about their problem and solution, \nand to focus their development effort on what is really new.",
            "id": "032d8b124d28158bbf286c4aec270e83"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "08d5dfe618b1776a6967ee4038b66309"
          },
          {
            "type": "html",
            "text": "[[Category Books]]",
            "id": "603f91894e67a8da7d1aa43f8e334c7a"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?SoftwareHandbook c2.com]",
            "id": "610e81e98393375d793e5de3beaad0e2"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628162064655
    }
  ]
}