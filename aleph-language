{
  "title": "Aleph Language",
  "story": [
    {
      "type": "html",
      "text": "This is now called [[Afnix Language]], and it can be found here:  [http://www.afnix.org/ www.afnix.org]",
      "id": "820026c262df658d1355499ea4426a3d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7f688968bd2bc6ebf122d35d14880eb8"
    },
    {
      "type": "html",
      "text": "[[Functional Programming]] language with good support for [[Object Oriented]] programming.\nSee the website [http://www.aleph-lang.org/ www.aleph-lang.org] (''That site has been sold off to the ubiquitous [[Search Engine]] of the [[Broken Link]]...the [[Vulture Search Engine]]). From the website:",
      "id": "3c8deee082c50169ed8b2ede0e2d24ff"
    },
    {
      "type": "html",
      "text": "<i>\"Aleph is a multi-threaded functional programming language with dynamic symbol bindings that support the object oriented paradigm. Aleph features a state of the art runtime engine that supports both 32 and 64 bits platforms. Aleph comes with a rich set of libraries that are designed to be platform independent\"</i>",
      "id": "fda34c2a04e1adc7d4ce9f5e773a6945"
    },
    {
      "type": "html",
      "text": "\nThe latest available release is 0.8.1, from mid-2001, but the project is still being developed, and the author, [[Amaury Darsch]], has assured me he's about to release version 0.9.0, so stay tuned. [[Aleph Language]] is [[Free Software]].",
      "id": "543ecd0f89d942fdc684bc75a82c7b4c"
    },
    {
      "type": "html",
      "text": "\n[[Aleph Language]] release 0.8.1 is a fantastic bundle of programming power. The interpreter/compiler and accompanying libraries compile flawlessly with gcc 2.96, and with just an easy to fix define-collision with gcc-3.2. Performance is very good, and the accompanying tests and examples are well documented. It also bundles (and makes available as a separate package, in PS and PDF) the complete Aleph documentation (in LaTeX, in three volumes (0: installation guide, 1: Programmer's Guide and 3:Library Reference)), of well over 250 pages of documentation, clear and easy to grasp. The 'standard library', so to call it, provides I/O, access to the system, networking abilities (Sockets, UDP, TCP, Mail) plus a Web/CGI library.",
      "id": "c35686ac39ddcc2a513e305e0fbca6f7"
    },
    {
      "type": "html",
      "text": "\n[[Aleph Language]] provides [[Functional Programming]] capabilities by implementing first class functions: <i>lambdas</i> (closures), and <i>gammas</i> (symbol scope limitation); [[Object Oriented]] abilities and a rich set of prefactored classes (list, vector, graph, etc...) in a pretty [[Lisp Language]] syntax, although with a more flexible setup; multithreading with automatic object protection and a whole new [[Regular Expression]] system; the Libraries provide additional power through different objects in clear and well structured namespaces. --[[David De Lis]]",
      "id": "a04a9bcf8d840755c7033f46324a6c50"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7f688968bd2bc6ebf122d35d14880eb8"
    },
    {
      "type": "html",
      "text": "\n[[Hello World]] in [[Aleph Language]]",
      "id": "9be647f6bf5e65a6c6cb74fc62f9db40"
    },
    {
      "type": "code",
      "text": "  println \"Hello World!\"",
      "id": "e5259f533dd6dcbad2bee59f1159bed1"
    },
    {
      "type": "html",
      "text": "\nFactorial:",
      "id": "370b28f5ffc0d8c8d77e7f02a3e1e071"
    },
    {
      "type": "html",
      "text": " classical:",
      "id": "c647ebcda34a884b01d9b654c8b2dd70"
    },
    {
      "type": "code",
      "text": "    trans fact (n) {\n    (if (< n 1) 1\n      (* n (fact (- n 1))) }",
      "id": "ed6bd618dac510766c5943cf87ec853b"
    },
    {
      "type": "html",
      "text": " tail-recursive:",
      "id": "d91ab1c9de804b7b1e5ad0465f084de4"
    },
    {
      "type": "code",
      "text": "    const fact (n) { fact-helper n 1 }\n    const fact-helper (n m) {\n    (if (< n 1)\n      m\n      (fact-helper (- n 1) (* n m))) }",
      "id": "cb91315aee5e53a616e7fa9d263909cb"
    },
    {
      "type": "html",
      "text": "\nA more meaningful example (0109.als in the distribution):",
      "id": "6b230a292934afe32edf604d9a19ae10"
    },
    {
      "type": "code",
      "text": "  # compute the scalar product of two vectors\n  const scalar-product (u v) {\n    trans result 0\n    for (x y) (u v) (result:+= (* x y))\n    eval result\n  }\n  # define 2 vector\n  const v1 (Vector 1 2 3)\n  const v2 (Vector 2 4 6)\n  println \"scale product [1 2 3][2 4 6] = \" (scalar-product v1 v2)",
      "id": "026e35adc1d954bcf9bc01db916acd57"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7f688968bd2bc6ebf122d35d14880eb8"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]]",
      "id": "18fcc7d02c71e79fd30249f1d5ca827b"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?AlephLanguage c2.com]",
      "id": "9b30b8b3d2f0a79c5e3472ab395de3f7"
    }
  ],
  "journal": [
    {
      "date": 1276734441000,
      "id": "9e86f24a8121674fc9425ab4b8b09abf",
      "type": "create",
      "item": {
        "title": "Aleph Language",
        "story": [
          {
            "type": "html",
            "text": "This is now called [[Afnix Language]], and it can be found here:  [http://www.afnix.org/ www.afnix.org]",
            "id": "820026c262df658d1355499ea4426a3d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7f688968bd2bc6ebf122d35d14880eb8"
          },
          {
            "type": "html",
            "text": "[[Functional Programming]] language with good support for [[Object Oriented]] programming.\nSee the website [http://www.aleph-lang.org/ www.aleph-lang.org] (''That site has been sold off to the ubiquitous [[Search Engine]] of the [[Broken Link]]...the [[Vulture Search Engine]]). From the website:",
            "id": "3c8deee082c50169ed8b2ede0e2d24ff"
          },
          {
            "type": "html",
            "text": "<i>\"Aleph is a multi-threaded functional programming language with dynamic symbol bindings that support the object oriented paradigm. Aleph features a state of the art runtime engine that supports both 32 and 64 bits platforms. Aleph comes with a rich set of libraries that are designed to be platform independent\"</i>",
            "id": "fda34c2a04e1adc7d4ce9f5e773a6945"
          },
          {
            "type": "html",
            "text": "\nThe latest available release is 0.8.1, from mid-2001, but the project is still being developed, and the author, [[Amaury Darsch]], has assured me he's about to release version 0.9.0, so stay tuned. [[Aleph Language]] is [[Free Software]].",
            "id": "543ecd0f89d942fdc684bc75a82c7b4c"
          },
          {
            "type": "html",
            "text": "\n[[Aleph Language]] release 0.8.1 is a fantastic bundle of programming power. The interpreter/compiler and accompanying libraries compile flawlessly with gcc 2.96, and with just an easy to fix define-collision with gcc-3.2. Performance is very good, and the accompanying tests and examples are well documented. It also bundles (and makes available as a separate package, in PS and PDF) the complete Aleph documentation (in LaTeX, in three volumes (0: installation guide, 1: Programmer's Guide and 3:Library Reference)), of well over 250 pages of documentation, clear and easy to grasp. The 'standard library', so to call it, provides I/O, access to the system, networking abilities (Sockets, UDP, TCP, Mail) plus a Web/CGI library.",
            "id": "c35686ac39ddcc2a513e305e0fbca6f7"
          },
          {
            "type": "html",
            "text": "\n[[Aleph Language]] provides [[Functional Programming]] capabilities by implementing first class functions: <i>lambdas</i> (closures), and <i>gammas</i> (symbol scope limitation); [[Object Oriented]] abilities and a rich set of prefactored classes (list, vector, graph, etc...) in a pretty [[Lisp Language]] syntax, although with a more flexible setup; multithreading with automatic object protection and a whole new [[Regular Expression]] system; the Libraries provide additional power through different objects in clear and well structured namespaces. --[[David De Lis]]",
            "id": "a04a9bcf8d840755c7033f46324a6c50"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7f688968bd2bc6ebf122d35d14880eb8"
          },
          {
            "type": "html",
            "text": "\n[[Hello World]] in [[Aleph Language]]",
            "id": "9be647f6bf5e65a6c6cb74fc62f9db40"
          },
          {
            "type": "code",
            "text": "  println \"Hello World!\"",
            "id": "e5259f533dd6dcbad2bee59f1159bed1"
          },
          {
            "type": "html",
            "text": "\nFactorial:",
            "id": "370b28f5ffc0d8c8d77e7f02a3e1e071"
          },
          {
            "type": "html",
            "text": " classical:",
            "id": "c647ebcda34a884b01d9b654c8b2dd70"
          },
          {
            "type": "code",
            "text": "    trans fact (n) {\n    (if (< n 1) 1\n      (* n (fact (- n 1))) }",
            "id": "ed6bd618dac510766c5943cf87ec853b"
          },
          {
            "type": "html",
            "text": " tail-recursive:",
            "id": "d91ab1c9de804b7b1e5ad0465f084de4"
          },
          {
            "type": "code",
            "text": "    const fact (n) { fact-helper n 1 }\n    const fact-helper (n m) {\n    (if (< n 1)\n      m\n      (fact-helper (- n 1) (* n m))) }",
            "id": "cb91315aee5e53a616e7fa9d263909cb"
          },
          {
            "type": "html",
            "text": "\nA more meaningful example (0109.als in the distribution):",
            "id": "6b230a292934afe32edf604d9a19ae10"
          },
          {
            "type": "code",
            "text": "  # compute the scalar product of two vectors\n  const scalar-product (u v) {\n    trans result 0\n    for (x y) (u v) (result:+= (* x y))\n    eval result\n  }\n  # define 2 vector\n  const v1 (Vector 1 2 3)\n  const v2 (Vector 2 4 6)\n  println \"scale product [1 2 3][2 4 6] = \" (scalar-product v1 v2)",
            "id": "026e35adc1d954bcf9bc01db916acd57"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7f688968bd2bc6ebf122d35d14880eb8"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]]",
            "id": "18fcc7d02c71e79fd30249f1d5ca827b"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?AlephLanguage c2.com]",
            "id": "9b30b8b3d2f0a79c5e3472ab395de3f7"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1708035615603
    }
  ]
}