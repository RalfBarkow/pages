{
  "title": "2023-03-05",
  "story": [
    {
      "type": "paragraph",
      "id": "e9b10dfe8fad65ba",
      "text": "⇒ [[Multiway System]] ⇒ [[Rule 90]]"
    },
    {
      "type": "paragraph",
      "id": "7daf6d9fc70f66e0",
      "text": "We let the chat thing explain the source code from yesterday. (See [[2023-03-04]])"
    },
    {
      "type": "pagefold",
      "id": "fd946bc970c49e9f",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "87f6b190e0a07736",
      "text": "This JavaScript code generates a pattern of 1's and 0's using the rules of a [[Cellular Automaton]] called the \"[[Rule 90]]\" automaton. The code first defines the rules for the automaton using an object called \"rules\" with keys representing patterns of three cells and values representing the resulting state of the middle cell in the next generation."
    },
    {
      "type": "paragraph",
      "id": "a27893dc2b70f440",
      "text": "Then, an initial state is defined as a string of 1's and 0's with a length of 9 characters. The \"next\" function takes this initial state and generates the next state according to the rules of the automaton. It does this by iterating through each group of three cells in the input state, using the \"slice\" method to extract the pattern of the three cells, and then looking up the corresponding value in the \"rules\" object to determine the value of the middle cell in the next generation. The resulting string of 1's and 0's is returned as the next state.\n\nThe code then creates an HTML canvas and uses the \"fillText\" method of the canvas context to draw the current state on the canvas. It repeats this process for 100 generations, each time updating the current state by calling the \"next\" function. The result is a visualization of the pattern generated by the Rule 90 automaton, with each row of the canvas representing a new generation of cells."
    },
    {
      "type": "pagefold",
      "id": "920a6cfbd84e413d",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "02bdf1e0ab011ba7",
      "text": "⇒ [[Rule 90]]: We have corrected the set of local rules for the time evolution of a one-dimensional elementary [[Cellular Automaton]]."
    },
    {
      "type": "paragraph",
      "id": "958e9efb59b443f8",
      "text": "⇒ [[Doing with Strangers]]"
    },
    {
      "type": "paragraph",
      "id": "989157a47e6dc858",
      "text": "This is new approach that plays to wiki's strengths. I'm writing sample applications now.\nhttp://ward.dojo.fed.wiki/doing-with-strangers.html "
    },
    {
      "type": "roster",
      "id": "85ac1c9f0a7eb1cf",
      "text": "ward.dojo.fed.wiki"
    },
    {
      "type": "reference",
      "id": "42d5152bbedad09d",
      "site": "ward.dojo.fed.wiki",
      "slug": "doing-with-strangers",
      "title": "Doing with Strangers",
      "text": "Here we aspire to do work as well as talk about doing work. To this end we add code and data to our environment. Now we consider how code and data can situate the work we do in the larger context of other's work and the natural and political environments that limits all activity."
    },
    {
      "type": "paragraph",
      "id": "4418736dcaaa7a65",
      "text": "[…] all the observer can ever observe is the network of [[Causal Relationships]] between events—or the causal graph that we’ve been talking about. [https://writings.stephenwolfram.com/2020/04/finally-we-may-have-a-path-to-the-fundamental-theory-of-physics-and-its-beautiful/ stephenwolfram]"
    },
    {
      "type": "reference",
      "id": "3d45422e527736fe",
      "site": "wiki.ralfbarkow.ch",
      "slug": "causal-relationships",
      "title": "Causal Relationships",
      "text": "Under conditions of profilicity, just as with sincerity and authenticity, people and organizations circle around causes like moths around a flame."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-03-05",
        "story": []
      },
      "date": 1678010588188
    },
    {
      "item": {
        "type": "factory",
        "id": "fd946bc970c49e9f"
      },
      "id": "fd946bc970c49e9f",
      "type": "add",
      "date": 1678010589721
    },
    {
      "type": "edit",
      "id": "fd946bc970c49e9f",
      "item": {
        "type": "pagefold",
        "id": "fd946bc970c49e9f",
        "text": "chat.openai"
      },
      "date": 1678010594542
    },
    {
      "item": {
        "type": "factory",
        "id": "87f6b190e0a07736"
      },
      "id": "87f6b190e0a07736",
      "type": "add",
      "after": "fd946bc970c49e9f",
      "date": 1678010596164
    },
    {
      "item": {
        "type": "factory",
        "id": "920a6cfbd84e413d"
      },
      "id": "920a6cfbd84e413d",
      "type": "add",
      "after": "87f6b190e0a07736",
      "date": 1678010599254
    },
    {
      "type": "edit",
      "id": "87f6b190e0a07736",
      "item": {
        "type": "paragraph",
        "id": "87f6b190e0a07736",
        "text": "This JavaScript code generates a pattern of 1's and 0's using the rules of a cellular automaton called the \"Rule 90\" automaton. The code first defines the rules for the automaton using an object called \"rules\" with keys representing patterns of three cells and values representing the resulting state of the middle cell in the next generation.\n\nThen, an initial state is defined as a string of 1's and 0's with a length of 9 characters. The \"next\" function takes this initial state and generates the next state according to the rules of the automaton. It does this by iterating through each group of three cells in the input state, using the \"slice\" method to extract the pattern of the three cells, and then looking up the corresponding value in the \"rules\" object to determine the value of the middle cell in the next generation. The resulting string of 1's and 0's is returned as the next state.\n\nThe code then creates an HTML canvas and uses the \"fillText\" method of the canvas context to draw the current state on the canvas. It repeats this process for 100 generations, each time updating the current state by calling the \"next\" function. The result is a visualization of the pattern generated by the Rule 90 automaton, with each row of the canvas representing a new generation of cells."
      },
      "date": 1678010600805
    },
    {
      "type": "edit",
      "id": "920a6cfbd84e413d",
      "item": {
        "type": "pagefold",
        "id": "920a6cfbd84e413d",
        "text": "~"
      },
      "date": 1678010602271
    },
    {
      "item": {
        "type": "factory",
        "id": "e9b10dfe8fad65ba"
      },
      "id": "e9b10dfe8fad65ba",
      "type": "add",
      "after": "920a6cfbd84e413d",
      "date": 1678010678974
    },
    {
      "id": "e9b10dfe8fad65ba",
      "type": "move",
      "order": [
        "fd946bc970c49e9f",
        "e9b10dfe8fad65ba",
        "87f6b190e0a07736",
        "920a6cfbd84e413d"
      ],
      "date": 1678010681461
    },
    {
      "id": "e9b10dfe8fad65ba",
      "type": "move",
      "order": [
        "e9b10dfe8fad65ba",
        "fd946bc970c49e9f",
        "87f6b190e0a07736",
        "920a6cfbd84e413d"
      ],
      "date": 1678010683001
    },
    {
      "type": "edit",
      "id": "e9b10dfe8fad65ba",
      "item": {
        "type": "paragraph",
        "id": "e9b10dfe8fad65ba",
        "text": "We let the chat thing explain the source code from yesterday."
      },
      "date": 1678010684117
    },
    {
      "item": {
        "type": "factory",
        "id": "02bdf1e0ab011ba7"
      },
      "id": "02bdf1e0ab011ba7",
      "type": "add",
      "after": "920a6cfbd84e413d",
      "date": 1678010737235
    },
    {
      "type": "edit",
      "id": "02bdf1e0ab011ba7",
      "item": {
        "type": "paragraph",
        "id": "02bdf1e0ab011ba7",
        "text": "⇒ [[Rule 90]]"
      },
      "date": 1678010747316
    },
    {
      "item": {
        "type": "factory",
        "id": "ee54f9a6140b796c"
      },
      "id": "ee54f9a6140b796c",
      "type": "add",
      "after": "02bdf1e0ab011ba7",
      "date": 1678011446998
    },
    {
      "type": "edit",
      "id": "ee54f9a6140b796c",
      "item": {
        "type": "image",
        "id": "ee54f9a6140b796c",
        "text": "FIG. 1. Example of a set of local rules for the time evolution of a one-dimensional elementary cellular automaton. The variables at each site may take values 0 or 1. The eight possible states of three adjacent sites are given on the upper line. The lower line then specifies a rule for the time evolution of the cellular automaton by giving the value to be taken by the central site of the three on the next time step. The time evolution of the complete cellular automaton is obtained by simultaneous application of these rules at each site for each time step. The rule given is the modulo-two rule: the value of a site at a particular time step is simply the sum modulo two of the values of its two neighbors at the previous time step. Any possible sequence of eight binary digits specifies a cellular automaton.",
        "size": "wide",
        "width": 416,
        "height": 66,
        "url": "/assets/plugins/image/ded1001361df44c7251cb0376d11ad50.jpg"
      },
      "date": 1678011500001
    },
    {
      "item": {
        "type": "factory",
        "id": "9322c7a2eefb1952"
      },
      "id": "9322c7a2eefb1952",
      "type": "add",
      "after": "ee54f9a6140b796c",
      "date": 1678011543851
    },
    {
      "type": "edit",
      "id": "9322c7a2eefb1952",
      "item": {
        "type": "paragraph",
        "id": "9322c7a2eefb1952",
        "text": "\nWOLFRAM, Stephen, 1983. Statistical mechanics of cellular automata. Reviews of Modern Physics. 1 July 1983. Vol. 55, no. 3, p. 601–644. DOI 10.1103/RevModPhys.55.601. Cellular automata are used as simple mathematical models to investigate self-organization in statistical mechanics. A detailed analysis is given of “elementary” cellular automata consisting of a sequence of sites with values 0 or 1 on a line, with each site evolving deterministically in discrete time steps according to definite rules involving the values of its nearest neighbors. With simple initial configurations, the cellular automata either tend to homogeneous states, or generate self-similar patterns with fractal dimensions ≃ 1.59 or ≃ 1.69. With “random” initial configurations, the irreversible character of the cellular automaton evolution leads to several self-organization phenomena. Statistical properties of the structures generated are found to lie in two universality classes, independent of the details of the initial state or the cellular automaton rules. More complicated cellular automata are briefly considered, and connections with dynamical systems theory and the formal theory of computation are discussed.\n"
      },
      "date": 1678011548158
    },
    {
      "type": "edit",
      "id": "9322c7a2eefb1952",
      "item": {
        "type": "paragraph",
        "id": "9322c7a2eefb1952",
        "text": "WOLFRAM, Stephen, 1983. Statistical mechanics of cellular automata. Reviews of Modern Physics. 1 July 1983. Vol. 55, no. 3, p. 601–644. DOI 10.1103/RevModPhys.55.601. [[Cellular Automata]] are used as simple mathematical models to investigate self-organization in statistical mechanics. A detailed analysis is given of “elementary” cellular automata consisting of a sequence of sites with values 0 or 1 on a line, with each site evolving deterministically in discrete time steps according to definite rules involving the values of its nearest neighbors. With simple initial configurations, the cellular automata either tend to homogeneous states, or generate self-similar patterns with fractal dimensions ≃ 1.59 or ≃ 1.69. With “random” initial configurations, the irreversible character of the cellular automaton evolution leads to several self-organization phenomena. Statistical properties of the structures generated are found to lie in two universality classes, independent of the details of the initial state or the cellular automaton rules. More complicated cellular automata are briefly considered, and connections with dynamical systems theory and the formal theory of computation are discussed.\n"
      },
      "date": 1678011581675
    },
    {
      "type": "edit",
      "id": "ee54f9a6140b796c",
      "item": {
        "type": "image",
        "id": "ee54f9a6140b796c",
        "text": "FIG. 1. Example of a set of local rules for the time evolution of a one-dimensional elementary cellular automaton. ",
        "size": "wide",
        "width": 416,
        "height": 66,
        "url": "/assets/plugins/image/ded1001361df44c7251cb0376d11ad50.jpg"
      },
      "date": 1678011971152
    },
    {
      "type": "edit",
      "id": "9322c7a2eefb1952",
      "item": {
        "type": "paragraph",
        "id": "9322c7a2eefb1952",
        "text": "The variables at each site may take values 0 or 1. The eight possible states of three adjacent sites are given on the upper line. The lower line then specifies a rule for the time evolution of the cellular automaton by giving the value to be taken by the central site of the three on the next time step. The time evolution of the complete cellular automaton is obtained by simultaneous application of these rules at each site for each time step. The rule given is the modulo-two rule: the value of a site at a particular time step is simply the sum modulo two of the values of its two neighbors at the previous time step. Any possible sequence of eight binary digits specifies a cellular automaton."
      },
      "date": 1678011977922
    },
    {
      "type": "add",
      "id": "dad18639cceb2aab",
      "item": {
        "type": "paragraph",
        "id": "dad18639cceb2aab",
        "text": "WOLFRAM, Stephen, 1983. Statistical mechanics of cellular automata. Reviews of Modern Physics. 1 July 1983. Vol. 55, no. 3, p. 601–644. DOI 10.1103/RevModPhys.55.601. [[Cellular Automata]] are used as simple mathematical models to investigate self-organization in statistical mechanics. A detailed analysis is given of “elementary” cellular automata consisting of a sequence of sites with values 0 or 1 on a line, with each site evolving deterministically in discrete time steps according to definite rules involving the values of its nearest neighbors. With simple initial configurations, the cellular automata either tend to homogeneous states, or generate self-similar patterns with fractal dimensions ≃ 1.59 or ≃ 1.69. With “random” initial configurations, the irreversible character of the cellular automaton evolution leads to several self-organization phenomena. Statistical properties of the structures generated are found to lie in two universality classes, independent of the details of the initial state or the cellular automaton rules. More complicated cellular automata are briefly considered, and connections with dynamical systems theory and the formal theory of computation are discussed.\n"
      },
      "after": "9322c7a2eefb1952",
      "date": 1678011978571
    },
    {
      "id": "dad18639cceb2aab",
      "type": "remove",
      "removedTo": {
        "page": "Rule 90"
      },
      "date": 1678013309156
    },
    {
      "id": "ee54f9a6140b796c",
      "type": "remove",
      "removedTo": {
        "page": "Rule 90"
      },
      "date": 1678013325624
    },
    {
      "id": "9322c7a2eefb1952",
      "type": "remove",
      "removedTo": {
        "page": "Rule 90"
      },
      "date": 1678013328706
    },
    {
      "type": "edit",
      "id": "e9b10dfe8fad65ba",
      "item": {
        "type": "paragraph",
        "id": "e9b10dfe8fad65ba",
        "text": "⇒ [[Multiway System]] ⇒ [[Rule 90]]"
      },
      "date": 1678013460093
    },
    {
      "type": "add",
      "id": "7daf6d9fc70f66e0",
      "item": {
        "type": "paragraph",
        "id": "7daf6d9fc70f66e0",
        "text": "We let the chat thing explain the source code from yesterday."
      },
      "after": "e9b10dfe8fad65ba",
      "date": 1678013460746
    },
    {
      "type": "edit",
      "id": "02bdf1e0ab011ba7",
      "item": {
        "type": "paragraph",
        "id": "02bdf1e0ab011ba7",
        "text": "⇒ [[Rule 90]]: Example of a set of local rules for the time evolution of a one-dimensional elementary cellular automaton."
      },
      "date": 1678014309315
    },
    {
      "type": "edit",
      "id": "02bdf1e0ab011ba7",
      "item": {
        "type": "paragraph",
        "id": "02bdf1e0ab011ba7",
        "text": "⇒ [[Rule 90]]: We have corrected the set of local rules for the time evolution of a one-dimensional elementary cellular automaton."
      },
      "date": 1678014341367
    },
    {
      "type": "edit",
      "id": "02bdf1e0ab011ba7",
      "item": {
        "type": "paragraph",
        "id": "02bdf1e0ab011ba7",
        "text": "⇒ [[Rule 90]]: We have corrected the set of local rules for the time evolution of a one-dimensional elementary [[Cellular Automaton]]."
      },
      "date": 1678014361389
    },
    {
      "type": "edit",
      "id": "7daf6d9fc70f66e0",
      "item": {
        "type": "paragraph",
        "id": "7daf6d9fc70f66e0",
        "text": "We let the chat thing explain the source code from yesterday. (See [[2023-03-04]])"
      },
      "date": 1678014613375
    },
    {
      "type": "edit",
      "id": "87f6b190e0a07736",
      "item": {
        "type": "paragraph",
        "id": "87f6b190e0a07736",
        "text": "This JavaScript code generates a pattern of 1's and 0's using the rules of a cellular automaton called the \"[[Rule 90]]\" automaton. The code first defines the rules for the automaton using an object called \"rules\" with keys representing patterns of three cells and values representing the resulting state of the middle cell in the next generation.\n\nThen, an initial state is defined as a string of 1's and 0's with a length of 9 characters. The \"next\" function takes this initial state and generates the next state according to the rules of the automaton. It does this by iterating through each group of three cells in the input state, using the \"slice\" method to extract the pattern of the three cells, and then looking up the corresponding value in the \"rules\" object to determine the value of the middle cell in the next generation. The resulting string of 1's and 0's is returned as the next state.\n\nThe code then creates an HTML canvas and uses the \"fillText\" method of the canvas context to draw the current state on the canvas. It repeats this process for 100 generations, each time updating the current state by calling the \"next\" function. The result is a visualization of the pattern generated by the Rule 90 automaton, with each row of the canvas representing a new generation of cells."
      },
      "date": 1678014647579
    },
    {
      "type": "edit",
      "id": "87f6b190e0a07736",
      "item": {
        "type": "paragraph",
        "id": "87f6b190e0a07736",
        "text": "This JavaScript code generates a pattern of 1's and 0's using the rules of a [[Cellular Automaton]] called the \"[[Rule 90]]\" automaton. The code first defines the rules for the automaton using an object called \"rules\" with keys representing patterns of three cells and values representing the resulting state of the middle cell in the next generation.\n\nThen, an initial state is defined as a string of 1's and 0's with a length of 9 characters. The \"next\" function takes this initial state and generates the next state according to the rules of the automaton. It does this by iterating through each group of three cells in the input state, using the \"slice\" method to extract the pattern of the three cells, and then looking up the corresponding value in the \"rules\" object to determine the value of the middle cell in the next generation. The resulting string of 1's and 0's is returned as the next state.\n\nThe code then creates an HTML canvas and uses the \"fillText\" method of the canvas context to draw the current state on the canvas. It repeats this process for 100 generations, each time updating the current state by calling the \"next\" function. The result is a visualization of the pattern generated by the Rule 90 automaton, with each row of the canvas representing a new generation of cells."
      },
      "date": 1678014673032
    },
    {
      "type": "edit",
      "id": "87f6b190e0a07736",
      "item": {
        "type": "paragraph",
        "id": "87f6b190e0a07736",
        "text": "This JavaScript code generates a pattern of 1's and 0's using the rules of a [[Cellular Automaton]] called the \"[[Rule 90]]\" automaton. The code first defines the rules for the automaton using an object called \"rules\" with keys representing patterns of three cells and values representing the resulting state of the middle cell in the next generation.\n\n"
      },
      "date": 1678014682722
    },
    {
      "type": "add",
      "id": "a27893dc2b70f440",
      "item": {
        "type": "paragraph",
        "id": "a27893dc2b70f440",
        "text": "Then, an initial state is defined as a string of 1's and 0's with a length of 9 characters. The \"next\" function takes this initial state and generates the next state according to the rules of the automaton. It does this by iterating through each group of three cells in the input state, using the \"slice\" method to extract the pattern of the three cells, and then looking up the corresponding value in the \"rules\" object to determine the value of the middle cell in the next generation. The resulting string of 1's and 0's is returned as the next state.\n\nThe code then creates an HTML canvas and uses the \"fillText\" method of the canvas context to draw the current state on the canvas. It repeats this process for 100 generations, each time updating the current state by calling the \"next\" function. The result is a visualization of the pattern generated by the Rule 90 automaton, with each row of the canvas representing a new generation of cells."
      },
      "after": "87f6b190e0a07736",
      "date": 1678014683595
    },
    {
      "type": "edit",
      "id": "87f6b190e0a07736",
      "item": {
        "type": "paragraph",
        "id": "87f6b190e0a07736",
        "text": "This JavaScript code generates a pattern of 1's and 0's using the rules of a [[Cellular Automaton]] called the \"[[Rule 90]]\" automaton. The code first defines the rules for the automaton using an object called \"rules\" with keys representing patterns of three cells and values representing the resulting state of the middle cell in the next generation."
      },
      "date": 1678014687976
    },
    {
      "item": {
        "type": "factory",
        "id": "958e9efb59b443f8"
      },
      "id": "958e9efb59b443f8",
      "type": "add",
      "after": "02bdf1e0ab011ba7",
      "date": 1678015764343
    },
    {
      "type": "edit",
      "id": "958e9efb59b443f8",
      "item": {
        "type": "paragraph",
        "id": "958e9efb59b443f8",
        "text": "Doing with Strangers"
      },
      "date": 1678015767802
    },
    {
      "type": "edit",
      "id": "958e9efb59b443f8",
      "item": {
        "type": "paragraph",
        "id": "958e9efb59b443f8",
        "text": "⇒ [[Doing with Strangers]]"
      },
      "date": 1678015778035
    },
    {
      "item": {
        "type": "factory",
        "id": "989157a47e6dc858"
      },
      "id": "989157a47e6dc858",
      "type": "add",
      "after": "958e9efb59b443f8",
      "date": 1678015948011
    },
    {
      "item": {
        "type": "factory",
        "id": "85ac1c9f0a7eb1cf"
      },
      "id": "85ac1c9f0a7eb1cf",
      "type": "add",
      "after": "989157a47e6dc858",
      "date": 1678015958767
    },
    {
      "type": "edit",
      "id": "989157a47e6dc858",
      "item": {
        "type": "paragraph",
        "id": "989157a47e6dc858",
        "text": "This is new approach that plays to wiki's strengths. I'm writing sample applications now.\nhttp://ward.dojo.fed.wiki/doing-with-strangers.html "
      },
      "date": 1678015961251
    },
    {
      "type": "edit",
      "id": "85ac1c9f0a7eb1cf",
      "item": {
        "type": "roster",
        "id": "85ac1c9f0a7eb1cf",
        "text": "ward.dojo.fed.wiki"
      },
      "date": 1678015962256
    },
    {
      "item": {
        "type": "factory",
        "id": "42d5152bbedad09d"
      },
      "id": "42d5152bbedad09d",
      "type": "add",
      "after": "85ac1c9f0a7eb1cf",
      "date": 1678016004668
    },
    {
      "type": "edit",
      "id": "42d5152bbedad09d",
      "item": {
        "type": "reference",
        "id": "42d5152bbedad09d",
        "site": "ward.dojo.fed.wiki",
        "slug": "doing-with-strangers",
        "title": "Doing with Strangers",
        "text": "Here we aspire to do work as well as talk about doing work. To this end we add code and data to our environment. Now we consider how code and data can situate the work we do in the larger context of other's work and the natural and political environments that limits all activity."
      },
      "date": 1678016009566
    },
    {
      "item": {
        "type": "factory",
        "id": "4418736dcaaa7a65"
      },
      "id": "4418736dcaaa7a65",
      "type": "add",
      "after": "42d5152bbedad09d",
      "date": 1678017655801
    },
    {
      "type": "edit",
      "id": "4418736dcaaa7a65",
      "item": {
        "type": "paragraph",
        "id": "4418736dcaaa7a65",
        "text": "[…] all the observer can ever observe is the network of causal relationships between events—or the causal graph that we’ve been talking about."
      },
      "date": 1678017661156
    },
    {
      "type": "edit",
      "id": "4418736dcaaa7a65",
      "item": {
        "type": "paragraph",
        "id": "4418736dcaaa7a65",
        "text": "[…] all the observer can ever observe is the network of causal relationships between events—or the causal graph that we’ve been talking about. [https://writings.stephenwolfram.com/2020/04/finally-we-may-have-a-path-to-the-fundamental-theory-of-physics-and-its-beautiful/ stephenwolfram]"
      },
      "date": 1678017729276
    },
    {
      "type": "edit",
      "id": "4418736dcaaa7a65",
      "item": {
        "type": "paragraph",
        "id": "4418736dcaaa7a65",
        "text": "[…] all the observer can ever observe is the network of [[Causal Relationship]]s between events—or the causal graph that we’ve been talking about. [https://writings.stephenwolfram.com/2020/04/finally-we-may-have-a-path-to-the-fundamental-theory-of-physics-and-its-beautiful/ stephenwolfram]"
      },
      "date": 1678017830351
    },
    {
      "type": "edit",
      "id": "4418736dcaaa7a65",
      "item": {
        "type": "paragraph",
        "id": "4418736dcaaa7a65",
        "text": "[…] all the observer can ever observe is the network of [[Causal Relationships]] between events—or the causal graph that we’ve been talking about. [https://writings.stephenwolfram.com/2020/04/finally-we-may-have-a-path-to-the-fundamental-theory-of-physics-and-its-beautiful/ stephenwolfram]"
      },
      "date": 1678017837465
    },
    {
      "item": {
        "type": "factory",
        "id": "3d45422e527736fe"
      },
      "id": "3d45422e527736fe",
      "type": "add",
      "after": "4418736dcaaa7a65",
      "date": 1678038849954
    },
    {
      "type": "edit",
      "id": "3d45422e527736fe",
      "item": {
        "type": "reference",
        "id": "3d45422e527736fe",
        "site": "wiki.ralfbarkow.ch",
        "slug": "causal-relationships",
        "title": "Causal Relationships",
        "text": "Under conditions of profilicity, just as with sincerity and authenticity, people and organizations circle around causes like moths around a flame."
      },
      "date": 1678038852605
    }
  ]
}