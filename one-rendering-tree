{
  "title": "One Rendering Tree",
  "story": [
    {
      "type": "markdown",
      "id": "4534db5c94e390ab",
      "text": "Girba, Tudor. “One Rendering [[Tree]].” [https://medium.com/feenk/one-rendering-tree-918eae49bcff Medium], February 7, 2020. "
    },
    {
      "type": "paragraph",
      "id": "194727c21fe6a305",
      "text": "A peek behind the graphical stack of Glamorous Toolkit"
    },
    {
      "type": "markdown",
      "id": "992197634ca15e29",
      "text": "tudor girba — 2022-04-05 via [https://discord.com/channels/729445214812504107/735947900651175998/960819665356070962 discord]\n[…] Bloc is a completely new graphical stack that is not related to the Pharo infrastructure at all. Underneath it relies on [[Skia]], which is the low level graphics support for Firefox and Android. Bloc is vector graphics by design. I am not aware of support for Spec 2, but Bloc offers all sorts of options. As for Roassal3, Bloc is already a visualization engine. Perhaps this might shed some light: [https://medium.com/feenk/one-rendering-tree-918eae49bcff medium]"
    },
    {
      "type": "markdown",
      "id": "a0c689c9084588d4",
      "text": "tudor girba — 2022-06-19 via [https://discord.com/channels/729445214812504107/735947900651175998/988065632761286727 discord]\nImplementing a graphical stack is not an advisable investment for anyone, and even less so for a small team. We did not make this choice lightly. We did it because typical stacks we found around do not allow us to build the interfaces we want (it's still the case today). You can find a brief write up with some examples here: [https://medium.com/feenk/one-rendering-tree-918eae49bcff medium]\n"
    },
    {
      "type": "paragraph",
      "id": "de86dfd5861f0f31",
      "text": "Context: Single Rendering Tree"
    },
    {
      "type": "paragraph",
      "id": "8ecbd6c50c9e4cd4",
      "text": "Implementing Mondrian in\nGlamorous Toolkit"
    },
    {
      "type": "paragraph",
      "id": "0ea0faa5164d912b",
      "text": "ROHRBACH, Cyrill J., 2021. Implementing Mondrian in Glamorous Toolkit Online. Bachelor Thesis. Software Composition Group, Institut für Informatik, University of Bern, Switzerland. [Accessed 1 February 2023]. Available from: https://scg.unibe.ch/archive/projects/Rohr21a.pdf\n"
    },
    {
      "type": "paragraph",
      "id": "c5b367c94e1f7bd9",
      "text": "One important part of [[Glamorous Toolkit]] is its all new graphical stack called [[Bloc]]. The special thing about Bloc is that every element shown to the user, be it some graphic, text or even the environment itself is rendered in one big [[Tree]]."
    },
    {
      "type": "paragraph",
      "id": "152c89cc1e4a8efc",
      "text": "In most development environments visualizations are confined to their own world, a world that is different from the one all the widgets and other parts of the environment are rendered in. This differentiation between the visualization and the environment world leads to poor integration of the visualizations within the environment and makes it hard to combine the two."
    },
    {
      "type": "paragraph",
      "id": "9b172eba82bed6cc",
      "text": "Especially for moldable development, where the environment should be adapted to and developed with the software, it is important that the visualizations, used to help understand the software, do not live in their own world, but are integrated into the environment. Exactly this is achieved with the one rendering tree, as all elements live in the same world and can interact with each other."
    },
    {
      "type": "paragraph",
      "id": "2e1f312fa669c99e",
      "text": "Since all elements can be combined and used in any context, it is necessary to have a way to mark objects according to what they represent, as graph or inspector for example. Normally this is done using higher level models that then interact with or even create the rendering tree. But since this is complicated and incompatible with a single rendering tree Glamorous Toolkit works with [[Annotation]]s instead. The annotations are used to create tiny objects that know the element and extend their interface with specific functionality needed for its context. An element annotated as graph node for example can return all connected edges."
    },
    {
      "type": "paragraph",
      "id": "0bd9ebe054aa6801",
      "text": "[…] Figure 3.2: The rendering tree for all elements displayed in the scene"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "One Rendering Tree",
        "story": []
      },
      "date": 1645344523231
    },
    {
      "item": {
        "type": "factory",
        "id": "c5e14e90a0711c4d"
      },
      "id": "c5e14e90a0711c4d",
      "type": "add",
      "date": 1645344529069
    },
    {
      "type": "edit",
      "id": "c5e14e90a0711c4d",
      "item": {
        "type": "paragraph",
        "id": "c5e14e90a0711c4d",
        "text": "[https://medium.com/feenk/one-rendering-tree-918eae49bcff medium]"
      },
      "date": 1645344538390
    },
    {
      "item": {
        "type": "factory",
        "id": "4534db5c94e390ab"
      },
      "id": "4534db5c94e390ab",
      "type": "add",
      "after": "c5e14e90a0711c4d",
      "date": 1645344581576
    },
    {
      "type": "edit",
      "id": "4534db5c94e390ab",
      "item": {
        "type": "paragraph",
        "id": "4534db5c94e390ab",
        "text": "Girba, Tudor. “One Rendering Tree.” Medium, February 8, 2020. https://medium.com/feenk/one-rendering-tree-918eae49bcff.\n"
      },
      "date": 1645344583004
    },
    {
      "type": "edit",
      "id": "4534db5c94e390ab",
      "item": {
        "type": "markdown",
        "id": "4534db5c94e390ab",
        "text": "Girba, Tudor. “One Rendering Tree.” Medium, February 8, 2020. https://medium.com/feenk/one-rendering-tree-918eae49bcff.\n"
      },
      "date": 1645344589118
    },
    {
      "type": "remove",
      "id": "c5e14e90a0711c4d",
      "date": 1645344605797
    },
    {
      "type": "edit",
      "id": "4534db5c94e390ab",
      "item": {
        "type": "markdown",
        "id": "4534db5c94e390ab",
        "text": "Girba, Tudor. “One Rendering Tree.” [https://medium.com/feenk/one-rendering-tree-918eae49bcff Medium], February 8, 2020. https://medium.com/feenk/one-rendering-tree-918eae49bcff.\n"
      },
      "date": 1645344625859
    },
    {
      "type": "edit",
      "id": "4534db5c94e390ab",
      "item": {
        "type": "markdown",
        "id": "4534db5c94e390ab",
        "text": "Girba, Tudor. “One Rendering Tree.” [https://medium.com/feenk/one-rendering-tree-918eae49bcff Medium], February 7, 2020. https://medium.com/feenk/one-rendering-tree-918eae49bcff.\n"
      },
      "date": 1645344646473
    },
    {
      "type": "edit",
      "id": "4534db5c94e390ab",
      "item": {
        "type": "markdown",
        "id": "4534db5c94e390ab",
        "text": "Girba, Tudor. “One Rendering Tree.” [https://medium.com/feenk/one-rendering-tree-918eae49bcff Medium], February 7, 2020. "
      },
      "date": 1645344659040
    },
    {
      "item": {
        "type": "factory",
        "id": "194727c21fe6a305"
      },
      "id": "194727c21fe6a305",
      "type": "add",
      "after": "4534db5c94e390ab",
      "date": 1650264622768
    },
    {
      "type": "edit",
      "id": "194727c21fe6a305",
      "item": {
        "type": "paragraph",
        "id": "194727c21fe6a305",
        "text": "A peek behind the graphical stack of Glamorous Toolkit"
      },
      "date": 1650264626444
    },
    {
      "item": {
        "type": "factory",
        "id": "992197634ca15e29"
      },
      "id": "992197634ca15e29",
      "type": "add",
      "after": "194727c21fe6a305",
      "date": 1650264632171
    },
    {
      "type": "edit",
      "id": "992197634ca15e29",
      "item": {
        "type": "paragraph",
        "id": "992197634ca15e29",
        "text": "tudor girba — 05.04.2022\nWelcome :). Bloc is a completely new graphical stack that is not related to the Pharo infrastructure at all. Underneath it relies on Skia, which is the low level graphics support for Firefox and Android. Bloc is vector graphics by design. I am not aware of support for Spec 2, but Bloc offers all sorts of options. As for Roassal3, Bloc is already a visualization engine. Perhaps this might shed some light: https://medium.com/feenk/one-rendering-tree-918eae49bcff"
      },
      "date": 1650264635872
    },
    {
      "type": "edit",
      "id": "992197634ca15e29",
      "item": {
        "type": "paragraph",
        "id": "992197634ca15e29",
        "text": "tudor girba — 05.04.2022 via [https://discord.com/channels/729445214812504107/735947900651175998/960819665356070962 discord]\nWelcome :). Bloc is a completely new graphical stack that is not related to the Pharo infrastructure at all. Underneath it relies on Skia, which is the low level graphics support for Firefox and Android. Bloc is vector graphics by design. I am not aware of support for Spec 2, but Bloc offers all sorts of options. As for Roassal3, Bloc is already a visualization engine. Perhaps this might shed some light: https://medium.com/feenk/one-rendering-tree-918eae49bcff"
      },
      "date": 1650264651399
    },
    {
      "type": "edit",
      "id": "992197634ca15e29",
      "item": {
        "type": "paragraph",
        "id": "992197634ca15e29",
        "text": "tudor girba — 2022-04-05 via [https://discord.com/channels/729445214812504107/735947900651175998/960819665356070962 discord]\nWelcome :). Bloc is a completely new graphical stack that is not related to the Pharo infrastructure at all. Underneath it relies on Skia, which is the low level graphics support for Firefox and Android. Bloc is vector graphics by design. I am not aware of support for Spec 2, but Bloc offers all sorts of options. As for Roassal3, Bloc is already a visualization engine. Perhaps this might shed some light: https://medium.com/feenk/one-rendering-tree-918eae49bcff"
      },
      "date": 1650264664891
    },
    {
      "type": "edit",
      "id": "992197634ca15e29",
      "item": {
        "type": "paragraph",
        "id": "992197634ca15e29",
        "text": "tudor girba — 2022-04-05 via [https://discord.com/channels/729445214812504107/735947900651175998/960819665356070962 discord]\nWelcome :). Bloc is a completely new graphical stack that is not related to the Pharo infrastructure at all. Underneath it relies on [[Skia]], which is the low level graphics support for Firefox and Android. Bloc is vector graphics by design. I am not aware of support for Spec 2, but Bloc offers all sorts of options. As for Roassal3, Bloc is already a visualization engine. Perhaps this might shed some light: https://medium.com/feenk/one-rendering-tree-918eae49bcff"
      },
      "date": 1652019986559
    },
    {
      "type": "edit",
      "id": "992197634ca15e29",
      "item": {
        "type": "markdown",
        "id": "992197634ca15e29",
        "text": "tudor girba — 2022-04-05 via [https://discord.com/channels/729445214812504107/735947900651175998/960819665356070962 discord]\nWelcome :). Bloc is a completely new graphical stack that is not related to the Pharo infrastructure at all. Underneath it relies on [[Skia]], which is the low level graphics support for Firefox and Android. Bloc is vector graphics by design. I am not aware of support for Spec 2, but Bloc offers all sorts of options. As for Roassal3, Bloc is already a visualization engine. Perhaps this might shed some light: https://medium.com/feenk/one-rendering-tree-918eae49bcff"
      },
      "date": 1652019999989
    },
    {
      "id": "a0c689c9084588d4",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "a0c689c9084588d4",
        "text": "tudor girba — 2022-06-19 via [https://discord.com/channels/729445214812504107/735947900651175998/988065632761286727 discord]\nImplementing a graphical stack is not an advisable investment for anyone, and even less so for a small team. We did not make this choice lightly. We did it because typical stacks we found around do not allow us to build the interfaces we want (it's still the case today). You can find a brief write up with some examples here: [https://medium.com/feenk/one-rendering-tree-918eae49bcff medium]\n"
      },
      "after": "992197634ca15e29",
      "date": 1655990586153
    },
    {
      "type": "edit",
      "id": "992197634ca15e29",
      "item": {
        "type": "markdown",
        "id": "992197634ca15e29",
        "text": "tudor girba — 2022-04-05 via [https://discord.com/channels/729445214812504107/735947900651175998/960819665356070962 discord]\n[…] Bloc is a completely new graphical stack that is not related to the Pharo infrastructure at all. Underneath it relies on [[Skia]], which is the low level graphics support for Firefox and Android. Bloc is vector graphics by design. I am not aware of support for Spec 2, but Bloc offers all sorts of options. As for Roassal3, Bloc is already a visualization engine. Perhaps this might shed some light: https://medium.com/feenk/one-rendering-tree-918eae49bcff"
      },
      "date": 1655990610697
    },
    {
      "type": "edit",
      "id": "992197634ca15e29",
      "item": {
        "type": "markdown",
        "id": "992197634ca15e29",
        "text": "tudor girba — 2022-04-05 via [https://discord.com/channels/729445214812504107/735947900651175998/960819665356070962 discord]\n[…] Bloc is a completely new graphical stack that is not related to the Pharo infrastructure at all. Underneath it relies on [[Skia]], which is the low level graphics support for Firefox and Android. Bloc is vector graphics by design. I am not aware of support for Spec 2, but Bloc offers all sorts of options. As for Roassal3, Bloc is already a visualization engine. Perhaps this might shed some light: [https://medium.com/feenk/one-rendering-tree-918eae49bcff medium]"
      },
      "date": 1655990649465
    },
    {
      "id": "de86dfd5861f0f31",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "de86dfd5861f0f31",
        "text": "Context: Single Rendering Tree"
      },
      "after": "a0c689c9084588d4",
      "date": 1675286641930
    },
    {
      "id": "8ecbd6c50c9e4cd4",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "8ecbd6c50c9e4cd4",
        "text": "Implementing Mondrian in\nGlamorous Toolkit"
      },
      "after": "de86dfd5861f0f31",
      "date": 1675286645980
    },
    {
      "item": {
        "type": "factory",
        "id": "0ea0faa5164d912b"
      },
      "id": "0ea0faa5164d912b",
      "type": "add",
      "after": "8ecbd6c50c9e4cd4",
      "date": 1675286873466
    },
    {
      "type": "edit",
      "id": "0ea0faa5164d912b",
      "item": {
        "type": "paragraph",
        "id": "0ea0faa5164d912b",
        "text": "\nROHRBACH, Cyrill J., 2021. Implementing Mondrian in Glamorous Toolkit Online. Bachelor Thesis. Software Composition Group, Institut für Informatik, University of Bern, Switzerland. [Accessed 1 February 2023]. Available from: https://scg.unibe.ch/archive/projects/Rohr21a.pdf\n"
      },
      "date": 1675286875978
    },
    {
      "item": {
        "type": "factory",
        "id": "c5b367c94e1f7bd9"
      },
      "id": "c5b367c94e1f7bd9",
      "type": "add",
      "after": "0ea0faa5164d912b",
      "date": 1675286922024
    },
    {
      "type": "edit",
      "id": "c5b367c94e1f7bd9",
      "item": {
        "type": "paragraph",
        "id": "c5b367c94e1f7bd9",
        "text": "One important part of [[Glamorous Toolkit]] is its all new graphical stack called Bloc. The special thing about Bloc is that every element shown to the user, be it some graphic, text or even the environment itself is rendered in one big tree."
      },
      "date": 1675286937454
    },
    {
      "type": "edit",
      "id": "c5b367c94e1f7bd9",
      "item": {
        "type": "paragraph",
        "id": "c5b367c94e1f7bd9",
        "text": "One important part of [[Glamorous Toolkit]] is its all new graphical stack called [[Bloc]]. The special thing about Bloc is that every element shown to the user, be it some graphic, text or even the environment itself is rendered in one big tree."
      },
      "date": 1675286949847
    },
    {
      "type": "edit",
      "id": "c5b367c94e1f7bd9",
      "item": {
        "type": "paragraph",
        "id": "c5b367c94e1f7bd9",
        "text": "One important part of [[Glamorous Toolkit]] is its all new graphical stack called [[Bloc]]. The special thing about Bloc is that every element shown to the user, be it some graphic, text or even the environment itself is rendered in one big [[Tree]]."
      },
      "date": 1675286976860
    },
    {
      "type": "edit",
      "id": "0ea0faa5164d912b",
      "item": {
        "type": "paragraph",
        "id": "0ea0faa5164d912b",
        "text": "ROHRBACH, Cyrill J., 2021. Implementing Mondrian in Glamorous Toolkit Online. Bachelor Thesis. Software Composition Group, Institut für Informatik, University of Bern, Switzerland. [Accessed 1 February 2023]. Available from: https://scg.unibe.ch/archive/projects/Rohr21a.pdf\n"
      },
      "date": 1675287003172
    },
    {
      "item": {
        "type": "factory",
        "id": "152c89cc1e4a8efc"
      },
      "id": "152c89cc1e4a8efc",
      "type": "add",
      "after": "c5b367c94e1f7bd9",
      "date": 1675292475732
    },
    {
      "type": "edit",
      "id": "152c89cc1e4a8efc",
      "item": {
        "type": "paragraph",
        "id": "152c89cc1e4a8efc",
        "text": "In most development environments visualizations are confined to their own world, a world that is different from the one all the widgets and other parts of the environment are rendered in. This differentiation between the visualization and the environment world leads to poor integration of the visualizations within the environment and makes it hard to combine the two."
      },
      "date": 1675292478961
    },
    {
      "item": {
        "type": "factory",
        "id": "9b172eba82bed6cc"
      },
      "id": "9b172eba82bed6cc",
      "type": "add",
      "after": "152c89cc1e4a8efc",
      "date": 1675292487986
    },
    {
      "type": "edit",
      "id": "9b172eba82bed6cc",
      "item": {
        "type": "paragraph",
        "id": "9b172eba82bed6cc",
        "text": "Especially for moldable development, where the environment should be adapted to and developed with the software, it is important that the visualizations, used to help understand the software, do not live in their own world, but are integrated into the environment. Exactly this is achieved with the one rendering tree, as all elements live in the same world and can interact with each other."
      },
      "date": 1675292489333
    },
    {
      "item": {
        "type": "factory",
        "id": "2e1f312fa669c99e"
      },
      "id": "2e1f312fa669c99e",
      "type": "add",
      "after": "9b172eba82bed6cc",
      "date": 1675292499747
    },
    {
      "type": "edit",
      "id": "2e1f312fa669c99e",
      "item": {
        "type": "paragraph",
        "id": "2e1f312fa669c99e",
        "text": "Since all elements can be combined and used in any context, it is necessary to have a way to mark objects according to what they represent, as graph or inspector for example. Normally this is done using higher level models that then interact with or even create the rendering tree. But since this is complicated and incompatible with a single rendering tree Glamorous Toolkit works with annotations instead. The annotations are"
      },
      "date": 1675292502261
    },
    {
      "type": "edit",
      "id": "2e1f312fa669c99e",
      "item": {
        "type": "paragraph",
        "id": "2e1f312fa669c99e",
        "text": "Since all elements can be combined and used in any context, it is necessary to have a way to mark objects according to what they represent, as graph or inspector for example. Normally this is done using higher level models that then interact with or even create the rendering tree. But since this is complicated and incompatible with a single rendering tree Glamorous Toolkit works with annotations instead. The annotations are used to create tiny objects that know the element and extend their interface with specific functionality needed for its context. An element annotated as graph node for example can return all connected edges."
      },
      "date": 1675292512774
    },
    {
      "item": {
        "type": "factory",
        "id": "0bd9ebe054aa6801"
      },
      "id": "0bd9ebe054aa6801",
      "type": "add",
      "after": "2e1f312fa669c99e",
      "date": 1675292528876
    },
    {
      "type": "edit",
      "id": "0bd9ebe054aa6801",
      "item": {
        "type": "paragraph",
        "id": "0bd9ebe054aa6801",
        "text": "[…] Figure 3.2: The rendering tree for all elements displayed in the scene"
      },
      "date": 1675292532543
    },
    {
      "type": "edit",
      "id": "2e1f312fa669c99e",
      "item": {
        "type": "paragraph",
        "id": "2e1f312fa669c99e",
        "text": "Since all elements can be combined and used in any context, it is necessary to have a way to mark objects according to what they represent, as graph or inspector for example. Normally this is done using higher level models that then interact with or even create the rendering tree. But since this is complicated and incompatible with a single rendering tree Glamorous Toolkit works with [[Annotation]]s instead. The annotations are used to create tiny objects that know the element and extend their interface with specific functionality needed for its context. An element annotated as graph node for example can return all connected edges."
      },
      "date": 1675292646078
    },
    {
      "type": "edit",
      "id": "4534db5c94e390ab",
      "item": {
        "type": "markdown",
        "id": "4534db5c94e390ab",
        "text": "Girba, Tudor. “One Rendering [[Tree]].” [https://medium.com/feenk/one-rendering-tree-918eae49bcff Medium], February 7, 2020. "
      },
      "date": 1675826959670
    }
  ]
}