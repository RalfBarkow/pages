{
  "title": "learn2D",
  "story": [
    {
      "type": "paragraph",
      "id": "484e092159df2d01",
      "text": "Explain what this does."
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": "// Code that does it.\n\nconst learn2D = cwise({\n  pre: function defineVar(i, ele, eleN, args) {\n    this.sqrootM = args.sqrootM;\n    // Winner Index Calculation in 'temp array', which is this.sqrootM * this.sqrootM.\n    this.winnerX = args.winnerIndex % this.sqrootM;\n    this.remainder = args.modelNumber % this.sqrootM;\n    this.winnerY = (args.winnerIndex - this.winnerX) / this.sqrootM;\n    // console.log('model numbers ' + args.modelNumber)\n    // console.log('sqt ' + this.sqrootM)\n    // console.log('reminder ' + this.remainder)\n    // console.log('winnerIndex ' + args.winnerIndex)\n    // console.log([this.winnerX, this.winnerY])\n  },\n  args: ['index', 'array', 'array', 'scalar'],\n  body: function learn(i, ele, eleN, args) {\n    // Element Index Calculation in 'temp array', which is this.sqrootM * this.sqrootM.\n    const tempArrayX = i[1] % this.sqrootM;\n    const tempArrayY = (i[1] - tempArrayX) / this.sqrootM;\n    const dist = Math.sqrt(Math.pow((tempArrayX - this.winnerX), 2) + Math.pow((tempArrayY - this.winnerY), 2));\n    // console.log('tempArrayX ' + tempArrayX)\n    // console.log('tempArrayY ' + tempArrayY)\n    // console.log('dist ' + dist)\n    const dimensionalIndex = i[0];\n    const inputElement = args.inputElement.get(0, dimensionalIndex);\n    if (dist <= args.learninglRadius && inputElement !== undefined) {\n        // console.log('dimensionalIndex ' + dimensionalIndex)\n        // console.log('inputElement ' + inputElement)\n      eleN = ele + (args.learningRate * (inputElement - ele));\n    }\n  },\n});\n\n"
    },
    {
      "type": "paragraph",
      "id": "caa626ac93aa7d4c",
      "text": "In the frame below we can view the results."
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
    },
    {
      "type": "paragraph",
      "id": "8155a586f5842b0f",
      "text": "See [[cwise]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "learn2D",
        "story": [
          {
            "type": "paragraph",
            "id": "484e092159df2d01",
            "text": "Explain what this does."
          },
          {
            "type": "code",
            "id": "5eb6b67568179aa3",
            "text": "// Code that does it.\n\nexport async function emit(el) {\n el.innerHTML = 2 + 3\n}\n\n"
          },
          {
            "type": "paragraph",
            "id": "caa626ac93aa7d4c",
            "text": "In the frame below we can view the results."
          },
          {
            "type": "frame",
            "id": "6cf52409eec3988c",
            "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
          },
          {
            "type": "paragraph",
            "id": "8155a586f5842b0f",
            "text": "See also [[Static Import Snippet]]"
          }
        ]
      },
      "date": 1652036765141
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nconst learn2D = cwise({\n  pre: function defineVar(i, ele, eleN, args) {\n    this.sqrootM = args.sqrootM;\n    // Winner Index Calculation in 'temp array', which is this.sqrootM * this.sqrootM.\n    this.winnerX = args.winnerIndex % this.sqrootM;\n    this.remainder = args.modelNumber % this.sqrootM;\n    this.winnerY = (args.winnerIndex - this.winnerX) / this.sqrootM;\n    // console.log('model numbers ' + args.modelNumber)\n    // console.log('sqt ' + this.sqrootM)\n    // console.log('reminder ' + this.remainder)\n    // console.log('winnerIndex ' + args.winnerIndex)\n    // console.log([this.winnerX, this.winnerY])\n  },\n  args: ['index', 'array', 'array', 'scalar'],\n  body: function learn(i, ele, eleN, args) {\n    // Element Index Calculation in 'temp array', which is this.sqrootM * this.sqrootM.\n    const tempArrayX = i[1] % this.sqrootM;\n    const tempArrayY = (i[1] - tempArrayX) / this.sqrootM;\n    const dist = Math.sqrt(Math.pow((tempArrayX - this.winnerX), 2) + Math.pow((tempArrayY - this.winnerY), 2));\n    // console.log('tempArrayX ' + tempArrayX)\n    // console.log('tempArrayY ' + tempArrayY)\n    // console.log('dist ' + dist)\n    const dimensionalIndex = i[0];\n    const inputElement = args.inputElement.get(0, dimensionalIndex);\n    if (dist <= args.learninglRadius && inputElement !== undefined) {\n        // console.log('dimensionalIndex ' + dimensionalIndex)\n        // console.log('inputElement ' + inputElement)\n      eleN = ele + (args.learningRate * (inputElement - ele));\n    }\n  },\n});\n\n"
      },
      "date": 1652036786495
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
      },
      "date": 1652036797990
    },
    {
      "type": "edit",
      "id": "8155a586f5842b0f",
      "item": {
        "type": "paragraph",
        "id": "8155a586f5842b0f",
        "text": "See [[cwise]]"
      },
      "date": 1652037180059
    }
  ]
}