{
  "title": "Dependency Structure Matrix",
  "story": [
    {
      "type": "paragraph",
      "id": "21d473149785612b",
      "text": "Dependency Structure Matrix (DSM), an approach developed in the context of process optimization, has been successfully applied to identify software dependencies among packages and subsystems. "
    },
    {
      "type": "paragraph",
      "id": "36b162d47f5afad6",
      "text": "It exists a couple of algorithms to help organizing the matrix in a form that reflects the architecture and highlights patterns and problematic dependencies between subsystems. However, the existing DSM implementations often miss some important information in their visualization to fully support a reengineering effort. "
    },
    {
      "type": "paragraph",
      "id": "960f0979a499ecfe",
      "text": "In this paper we enhanced DSM with enriched cell contextual information by showing information (i) about the kinds of references made (inheritance, class accesses..), (ii) the proportion of entities (classes/methods) doing references, (iii) the proportion of entities been the target of the references. We distinguish independent cycles and stress the cycles using coloring information. This work has been implemented on top of the Moose open-source reengineering environment and Mondrian. It has been applied to non-trivial case studies such as the Morphic UI frameworks available in Squeak an open-source Smalltalk."
    },
    {
      "type": "paragraph",
      "id": "41d3ca29b4a444ff",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "623ef9ccef48e413",
      "text": "While DSMs are a proven solution to reveal software structure, DSMs have weaknesses too. They lack providing certain information when computed and rendered. DSM current implementations lack a fine grained information without losing their overview ability. Certain algorithms produce blurry cycles with the power of adjacency matrix method in which independent cycles are merged. Moreover detected cycles are not focused on an entity and lack of support for class extension."
    },
    {
      "type": "paragraph",
      "id": "adc6f71b3148f12c",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "92e891bb22e695bb",
      "text": "Blurry Cycles with the Power of [[Adjacency Matrix]] Method"
    },
    {
      "type": "paragraph",
      "id": "05f6d65e27898dbb",
      "text": "A way to identify cycle in DSM is to use the technique based on powering the adjacency matrix. The principle of this approach is to raise a binary DSM to its n-th power to indicate which elements can be traced back to themselves in n steps; thus constituting a cycle [12]. However, the indicated elements do not automatically belong to the same cycle. Indeed, it can exist several cycles with the same number of steps and the power of the adjacency matrix method cannot differentiate these different cycles, so we have blurry cycles."
    },
    {
      "type": "paragraph",
      "id": "fb7df06f01faf171",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "e503e7da2c6b5a27",
      "text": "On Figure 1, we see that the elements A and B constitute a direct cycle and the elements C and D constitute another one. But if we raise the binary DSM (Figure 2(a)) to the square by applying the adjacency matrix technique, a non-zero value appears in the diagonal for every element (Figure 2(b)). These non-zero values mean that any of the elements A, B, C and D are involved in at least one direct cycle but these non-zero values do not show what these direct cycles are made of. Moreover, with the partitioning algorithm based on powering the adjacency matrix, we merge these 4 elements together (Figure 2(c)) which means that in the partitioned matrix these elements will appear as one cycle (Figure 2(d)) - note that the grey zone represent the cycles. So, the partitioned matrix provides a wrong information by indicating a unique cycle (the grey area in Figure 2(d)) whereas the matrix should show two direct cycles as shown in Figure 2(e)."
    },
    {
      "type": "html",
      "id": "e2db9e5f04d7b99f",
      "text": "<img\n  width=\"100%\"\n  src=\"https://wiki.ralfbarkow.ch/assets/pages/2023-01-24/Bildschirmfoto%202023-01-24%20um%2009.28.30.png\"\n>"
    },
    {
      "type": "paragraph",
      "id": "b780e1ac412d742d",
      "text": "So, the power of adjacency matrix method does not allow us to determine precisely the different cycles. However, combining this algorithm with a path searching method identifies correctly all the different cycles. "
    },
    {
      "type": "paragraph",
      "id": "02f4a2cbc92e4bbe",
      "text": "Notice that the DSM software Lattix does not use the power adjacency partitioning algorithm but is using reachability matrix method."
    },
    {
      "type": "paragraph",
      "id": "952190d83116fb88",
      "text": "[…] Figure 2. Limitation of the power of adjacency matrix method […]"
    },
    {
      "type": "pagefold",
      "id": "ee0fc9c937424f3a",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "a0cf34a8ae216dd5",
      "text": "BERGEL, Alexandre, DUCASSE, Stéphane, LAVAL, Jannik and PIERS, Romain, 2008. Enhanced Dependency Structure Matrix for Moose. FAMOOSr. 17 October 2008. \n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Dependency Structure Matrix",
        "story": []
      },
      "date": 1674548346424
    },
    {
      "item": {
        "type": "factory",
        "id": "21d473149785612b"
      },
      "id": "21d473149785612b",
      "type": "add",
      "date": 1674548348145
    },
    {
      "type": "edit",
      "id": "21d473149785612b",
      "item": {
        "type": "paragraph",
        "id": "21d473149785612b",
        "text": "Dependency Structure Matrix (DSM), an approach developed in the context of process optimization, has been successfully applied to identify software dependencies among packages and subsystems. It exists a couple of algorithms to help organizing the matrix in a form that reflects the architecture and highlights patterns and problematic dependencies between subsystems. However, the existing DSM implementations often miss some important information in their visualization to fully support a reengineering effort. In this paper we enhanced DSM with enriched cell contextual information by showing information (i) about the kinds of references made (inheritance, class accesses..), (ii) the proportion of entities (classes/methods) doing references, (iii) the proportion of entities been the target of the references. We distinguish independent cycles and stress the cycles using coloring information. This work has been implemented on top of the Moose open-source reengineering environment and Mondrian. It has been applied to non-trivial case studies such as the Morphic UI frameworks available in Squeak an open-source Smalltalk."
      },
      "date": 1674548353820
    },
    {
      "type": "edit",
      "id": "21d473149785612b",
      "item": {
        "type": "paragraph",
        "id": "21d473149785612b",
        "text": "Dependency Structure Matrix (DSM), an approach developed in the context of process optimization, has been successfully applied to identify software dependencies among packages and subsystems. "
      },
      "date": 1674548368779
    },
    {
      "type": "add",
      "id": "36b162d47f5afad6",
      "item": {
        "type": "paragraph",
        "id": "36b162d47f5afad6",
        "text": "It exists a couple of algorithms to help organizing the matrix in a form that reflects the architecture and highlights patterns and problematic dependencies between subsystems. However, the existing DSM implementations often miss some important information in their visualization to fully support a reengineering effort. In this paper we enhanced DSM with enriched cell contextual information by showing information (i) about the kinds of references made (inheritance, class accesses..), (ii) the proportion of entities (classes/methods) doing references, (iii) the proportion of entities been the target of the references. We distinguish independent cycles and stress the cycles using coloring information. This work has been implemented on top of the Moose open-source reengineering environment and Mondrian. It has been applied to non-trivial case studies such as the Morphic UI frameworks available in Squeak an open-source Smalltalk."
      },
      "after": "21d473149785612b",
      "date": 1674548369256
    },
    {
      "type": "edit",
      "id": "36b162d47f5afad6",
      "item": {
        "type": "paragraph",
        "id": "36b162d47f5afad6",
        "text": "It exists a couple of algorithms to help organizing the matrix in a form that reflects the architecture and highlights patterns and problematic dependencies between subsystems. However, the existing DSM implementations often miss some important information in their visualization to fully support a reengineering effort. "
      },
      "date": 1674548390071
    },
    {
      "type": "add",
      "id": "960f0979a499ecfe",
      "item": {
        "type": "paragraph",
        "id": "960f0979a499ecfe",
        "text": "In this paper we enhanced DSM with enriched cell contextual information by showing information (i) about the kinds of references made (inheritance, class accesses..), (ii) the proportion of entities (classes/methods) doing references, (iii) the proportion of entities been the target of the references. We distinguish independent cycles and stress the cycles using coloring information. This work has been implemented on top of the Moose open-source reengineering environment and Mondrian. It has been applied to non-trivial case studies such as the Morphic UI frameworks available in Squeak an open-source Smalltalk."
      },
      "after": "36b162d47f5afad6",
      "date": 1674548390612
    },
    {
      "item": {
        "type": "factory",
        "id": "ee0fc9c937424f3a"
      },
      "id": "ee0fc9c937424f3a",
      "type": "add",
      "after": "960f0979a499ecfe",
      "date": 1674548471545
    },
    {
      "type": "edit",
      "id": "ee0fc9c937424f3a",
      "item": {
        "type": "pagefold",
        "id": "ee0fc9c937424f3a",
        "text": "~"
      },
      "date": 1674548474428
    },
    {
      "item": {
        "type": "factory",
        "id": "a0cf34a8ae216dd5"
      },
      "id": "a0cf34a8ae216dd5",
      "type": "add",
      "after": "ee0fc9c937424f3a",
      "date": 1674548475954
    },
    {
      "type": "edit",
      "id": "a0cf34a8ae216dd5",
      "item": {
        "type": "paragraph",
        "id": "a0cf34a8ae216dd5",
        "text": "BERGEL, Alexandre, DUCASSE, Stéphane, LAVAL, Jannik and PIERS, Romain, 2008. Enhanced Dependency Structure Matrix for Moose. FAMOOSr. 17 October 2008. \n"
      },
      "date": 1674548489637
    },
    {
      "type": "add",
      "id": "41d3ca29b4a444ff",
      "item": {
        "type": "paragraph",
        "id": "41d3ca29b4a444ff",
        "text": "[…]"
      },
      "after": "960f0979a499ecfe",
      "date": 1674548527899
    },
    {
      "type": "add",
      "id": "92e891bb22e695bb",
      "item": {
        "type": "paragraph",
        "id": "92e891bb22e695bb",
        "text": "Blurry Cycles with the Power of Adjacency Matrix Method"
      },
      "after": "41d3ca29b4a444ff",
      "date": 1674548529127
    },
    {
      "type": "edit",
      "id": "92e891bb22e695bb",
      "item": {
        "type": "paragraph",
        "id": "92e891bb22e695bb",
        "text": "Blurry Cycles with the Power of [[Adjacency Matrix]] Method"
      },
      "date": 1674548547688
    },
    {
      "type": "add",
      "id": "05f6d65e27898dbb",
      "item": {
        "type": "paragraph",
        "id": "05f6d65e27898dbb",
        "text": "A way to identify cycle in DSM is to use the technique based on powering the adjacency matrix. The principle of this approach is to raise a binary DSM to its n-th power to indicate which elements can be traced back to themselves in n steps; thus constituting a cycle [12]. However, the indicated elements do not automatically belong to the same cycle. Indeed, it can exist several cycles with the same number of steps and the power of the adjacency matrix method cannot differentiate these different cycles, so we have blurry cycles"
      },
      "after": "92e891bb22e695bb",
      "date": 1674548565938
    },
    {
      "type": "edit",
      "id": "05f6d65e27898dbb",
      "item": {
        "type": "paragraph",
        "id": "05f6d65e27898dbb",
        "text": "A way to identify cycle in DSM is to use the technique based on powering the adjacency matrix. The principle of this approach is to raise a binary DSM to its n-th power to indicate which elements can be traced back to themselves in n steps; thus constituting a cycle [12]. However, the indicated elements do not automatically belong to the same cycle. Indeed, it can exist several cycles with the same number of steps and the power of the adjacency matrix method cannot differentiate these different cycles, so we have blurry cycles."
      },
      "date": 1674548599318
    },
    {
      "type": "add",
      "id": "fb7df06f01faf171",
      "item": {
        "type": "paragraph",
        "id": "fb7df06f01faf171",
        "text": "[…]"
      },
      "after": "05f6d65e27898dbb",
      "date": 1674548648189
    },
    {
      "type": "add",
      "id": "e503e7da2c6b5a27",
      "item": {
        "type": "paragraph",
        "id": "e503e7da2c6b5a27",
        "text": "On Figure 1, we see that the elements A and B constitute a direct cycle and the elements C and D constitute another one. But if we raise the binary DSM (Figure 2(a)) to the square by applying the adjacency matrix technique, a non-zero value appears in the diagonal for every element (Figure 2(b)). These non-zero values mean that any of the elements A, B, C and D are involved in at least one direct cycle but these non-zero values do not show what these direct cycles are made of. Moreover, with the partitioning algorithm based on powering the adjacency matrix, we merge these 4 elements together (Figure 2(c)) which means that in the partitioned matrix these elements will appear as one cycle (Figure 2(d)) - note that the grey zone represent the cycles. So, the partitioned matrix provides a wrong information by indicating a unique cycle (the grey area in Figure 2(d)) whereas the matrix should show two direct cycles as shown in Figure 2(e)."
      },
      "after": "fb7df06f01faf171",
      "date": 1674548648974
    },
    {
      "type": "add",
      "id": "b780e1ac412d742d",
      "item": {
        "type": "paragraph",
        "id": "b780e1ac412d742d",
        "text": "So, the power of adjacency matrix method does not allow us to determine precisely the different cycles. However, combining this algorithm with a path searching method identifies correctly all the different cycles. "
      },
      "after": "e503e7da2c6b5a27",
      "date": 1674548712999
    },
    {
      "type": "add",
      "id": "02f4a2cbc92e4bbe",
      "item": {
        "type": "paragraph",
        "id": "02f4a2cbc92e4bbe",
        "text": "Notice that the DSM software Lattix does not use the power adjacency partitioning algorithm but is using reachability matrix method."
      },
      "after": "b780e1ac412d742d",
      "date": 1674548714746
    },
    {
      "type": "add",
      "id": "952190d83116fb88",
      "item": {
        "type": "paragraph",
        "id": "952190d83116fb88",
        "text": "[…]"
      },
      "after": "02f4a2cbc92e4bbe",
      "date": 1674548716538
    },
    {
      "type": "edit",
      "id": "952190d83116fb88",
      "item": {
        "type": "paragraph",
        "id": "952190d83116fb88",
        "text": "[…] Figure 2. Limitation of the power of adjacency matrix method […]"
      },
      "date": 1674548747390
    },
    {
      "type": "add",
      "id": "623ef9ccef48e413",
      "item": {
        "type": "paragraph",
        "id": "623ef9ccef48e413",
        "text": "While DSMs are a proven solution to reveal software structure, DSMs have weaknesses too. They lack providing certain information when computed and rendered. DSM current implementations lack a fine grained information without losing their overview ability. Certain algorithms produce blurry cycles with the power of adjacency matrix method in which independent cycles are merged. Moreover detected cycles are not focused on an entity and lack of support for class extension."
      },
      "after": "41d3ca29b4a444ff",
      "date": 1674548805557
    },
    {
      "type": "add",
      "id": "adc6f71b3148f12c",
      "item": {
        "type": "paragraph",
        "id": "adc6f71b3148f12c",
        "text": "[…]"
      },
      "after": "623ef9ccef48e413",
      "date": 1674548807456
    },
    {
      "item": {
        "type": "factory",
        "id": "e2db9e5f04d7b99f"
      },
      "id": "e2db9e5f04d7b99f",
      "type": "add",
      "after": "a0cf34a8ae216dd5",
      "date": 1674548946124
    },
    {
      "type": "edit",
      "id": "e2db9e5f04d7b99f",
      "item": {
        "type": "html",
        "id": "e2db9e5f04d7b99f",
        "text": "<img\n  width=\"100%\"\n  src=\"https://wiki.ralfbarkow.ch/assets/pages/2023-01-24/Bildschirmfoto%202023-01-24%20um%2009.28.30.png\"\n>"
      },
      "date": 1674548959449
    },
    {
      "id": "e2db9e5f04d7b99f",
      "type": "move",
      "order": [
        "21d473149785612b",
        "36b162d47f5afad6",
        "960f0979a499ecfe",
        "41d3ca29b4a444ff",
        "623ef9ccef48e413",
        "adc6f71b3148f12c",
        "92e891bb22e695bb",
        "05f6d65e27898dbb",
        "fb7df06f01faf171",
        "e503e7da2c6b5a27",
        "e2db9e5f04d7b99f",
        "b780e1ac412d742d",
        "02f4a2cbc92e4bbe",
        "952190d83116fb88",
        "ee0fc9c937424f3a",
        "a0cf34a8ae216dd5"
      ],
      "date": 1674548998839
    }
  ]
}