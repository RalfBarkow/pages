{
  "title": "Mime DB",
  "story": [
    {
      "id": "536d4000",
      "type": "paragraph",
      "text": "mime-db. This is a database of all mime types. If you're crazy enough to use this in the browser, you can just grab the JSON file using jsDelivr. [https://www.npmjs.com/package/mime-db npm] [https://www.jsdelivr.com/package/npm/mime-db jsDelivr]"
    },
    {
      "type": "paragraph",
      "id": "a8dca14a9112e55a",
      "text": "It aggregates data from the following sources:"
    },
    {
      "id": "20cde000",
      "type": "paragraph",
      "text": "[http://www.iana.org/assignments/media-types/media-types.xhtml http://www.iana.org/assignments/media-types/media-types.xhtml]\n\n[http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types]    \n\n[http://hg.nginx.org/nginx/raw-file/default/conf/mime.types http://hg.nginx.org/nginx/raw-file/default/conf/mime.types]"
    },
    {
      "type": "paragraph",
      "id": "03544ef05500d765",
      "text": "Mozilla Developer Network offers a subset of mime types that are relevant to web browsers."
    },
    {
      "type": "paragraph",
      "id": "1b9ff0ea278a2e97",
      "text": "[https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types mdn]"
    },
    {
      "type": "paragraph",
      "id": "69591b1d4fa0add2",
      "text": "On 2021-10-30, we saved a copy of MDN's html page in our assets as common-types.html. Below we parse the HTML into an array of file suffix to media type pairs."
    },
    {
      "type": "code",
      "id": "72f67ecf02f2b7bc",
      "text": "const idx = []\nconst parser = new DOMParser()\nconst url = \"/assets/pages/mime-db/common-types.html\"\nconst html = await fetch(url).then(res => res.text())\nconst doc = parser.parseFromString(html, \"text/html\")\nconst codes = doc\n  .querySelectorAll(\"table tr td:nth-child(1) code\")\nfor (let code of codes) {\n  let ext = code.textContent.trim()\n  let mime = code.closest(\"tr\")\n    .querySelector(\"td:nth-child(3) code\")\n    .textContent.trim()\n  idx.push([ext, mime])\n}\n\nexport default idx"
    },
    {
      "type": "paragraph",
      "id": "caa626ac93aa7d4c",
      "text": "In the frame below we can view the results."
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/importjs.html"
    },
    {
      "type": "assets",
      "id": "c3bb99dcbd0681bd",
      "text": "pages/mime-db"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Mime DB",
        "story": []
      },
      "date": 1635609292276
    },
    {
      "id": "536d4000",
      "type": "add",
      "item": {
        "id": "536d4000",
        "type": "paragraph",
        "text": "mime-db. This is a database of all mime types. If you're crazy enough to use this in the browser, you can just grab the JSON file using jsDelivr. [https://www.npmjs.com/package/mime-db npm] [https://www.jsdelivr.com/package/npm/mime-db jsDelivr]"
      },
      "date": 1635609844900,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "id": "a8dca14a9112e55a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a8dca14a9112e55a",
        "text": "It aggregates data from the following sources:"
      },
      "after": "536d4000",
      "date": 1635609848563,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "id": "20cde000",
      "type": "add",
      "item": {
        "id": "20cde000",
        "type": "paragraph",
        "text": "[http://www.iana.org/assignments/media-types/media-types.xhtml http://www.iana.org/assignments/media-types/media-types.xhtml]\n\n[http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types]    \n\n[http://hg.nginx.org/nginx/raw-file/default/conf/mime.types http://hg.nginx.org/nginx/raw-file/default/conf/mime.types]"
      },
      "after": "a8dca14a9112e55a",
      "date": 1635609851611,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1635610115267
    },
    {
      "item": {
        "type": "factory",
        "id": "c3bb99dcbd0681bd"
      },
      "id": "c3bb99dcbd0681bd",
      "type": "add",
      "after": "20cde000",
      "date": 1635610122283
    },
    {
      "type": "edit",
      "id": "c3bb99dcbd0681bd",
      "item": {
        "type": "assets",
        "id": "c3bb99dcbd0681bd",
        "text": "pages/mime-db"
      },
      "date": 1635610129762
    },
    {
      "item": {
        "type": "factory",
        "id": "03544ef05500d765"
      },
      "id": "03544ef05500d765",
      "type": "add",
      "after": "c3bb99dcbd0681bd",
      "date": 1635620761696
    },
    {
      "id": "03544ef05500d765",
      "type": "move",
      "order": [
        "536d4000",
        "a8dca14a9112e55a",
        "20cde000",
        "03544ef05500d765",
        "c3bb99dcbd0681bd"
      ],
      "date": 1635620763700
    },
    {
      "type": "edit",
      "id": "03544ef05500d765",
      "item": {
        "type": "paragraph",
        "id": "03544ef05500d765",
        "text": "Mozilla Developer Network offers a subset of mime types that are relevant to web browsers."
      },
      "date": 1635620857458
    },
    {
      "type": "add",
      "id": "1b9ff0ea278a2e97",
      "item": {
        "type": "paragraph",
        "id": "1b9ff0ea278a2e97",
        "text": "[https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types mdn]"
      },
      "after": "03544ef05500d765",
      "date": 1635620860320
    },
    {
      "item": {
        "type": "factory",
        "id": "8d7af9ac5badcb7c"
      },
      "id": "8d7af9ac5badcb7c",
      "type": "add",
      "after": "c3bb99dcbd0681bd",
      "date": 1635622668646
    },
    {
      "type": "remove",
      "id": "8d7af9ac5badcb7c",
      "date": 1635622678459
    },
    {
      "item": {
        "type": "factory",
        "id": "72f67ecf02f2b7bc"
      },
      "id": "72f67ecf02f2b7bc",
      "type": "add",
      "after": "c3bb99dcbd0681bd",
      "date": 1635622694521
    },
    {
      "type": "edit",
      "id": "72f67ecf02f2b7bc",
      "item": {
        "type": "code",
        "id": "72f67ecf02f2b7bc",
        "text": "const parser = new DOMParser()\nconst url = \"./assets/pages/mime-db/common-types.html\"\nconst html = await fetch(url).then(res => res.text())\nconst doc = parser.parseAsString(html, \"text/html\")\n"
      },
      "date": 1635622808831
    },
    {
      "type": "edit",
      "id": "72f67ecf02f2b7bc",
      "item": {
        "type": "code",
        "id": "72f67ecf02f2b7bc",
        "text": "const parser = new DOMParser()\nconst url = \"./assets/pages/mime-db/common-types.html\"\nconst html = await fetch(url).then(res => res.text())\nconst doc = parser.parseFromString(html, \"text/html\")\n"
      },
      "date": 1635622826182
    },
    {
      "type": "edit",
      "id": "72f67ecf02f2b7bc",
      "item": {
        "type": "code",
        "id": "72f67ecf02f2b7bc",
        "text": "const parser = new DOMParser()\nconst url = \"./assets/pages/mime-db/common-types.html\"\nconst html = await fetch(url).then(res => res.text())\nconst doc = parser.parseFromString(html, \"text/html\")\nconst codes = doc\n  .querySelectorAll(\"table tr td:nth-child(1) code\")\nconst idx = []\nfor (let code of codes) {\n  let ext = code.textContent.trim()\n  let mime = code.closest(\"tr\")\n    .querySelector(\"td:nth-child(3) code\")\n    .textContent.trim()\n  idx.push([ext, mime])\n}\n"
      },
      "date": 1635623114709
    },
    {
      "id": "6cf52409eec3988c",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//localhost/assets/pages/js-snippet-template/importjs.html"
      },
      "after": "72f67ecf02f2b7bc",
      "date": 1635652063850
    },
    {
      "id": "caa626ac93aa7d4c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "caa626ac93aa7d4c",
        "text": "In the frame below we can view the results."
      },
      "after": "72f67ecf02f2b7bc",
      "date": 1635652067558
    },
    {
      "type": "edit",
      "id": "72f67ecf02f2b7bc",
      "item": {
        "type": "code",
        "id": "72f67ecf02f2b7bc",
        "text": "const parser = new DOMParser()\nconst url = \"./assets/pages/mime-db/common-types.html\"\nconst html = await fetch(url).then(res => res.text())\nconst doc = parser.parseFromString(html, \"text/html\")\nconst codes = doc\n  .querySelectorAll(\"table tr td:nth-child(1) code\")\nconst idx = []\nfor (let code of codes) {\n  let ext = code.textContent.trim()\n  let mime = code.closest(\"tr\")\n    .querySelector(\"td:nth-child(3) code\")\n    .textContent.trim()\n  idx.push([ext, mime])\n}\n\nexport default idx"
      },
      "date": 1635652082697
    },
    {
      "type": "edit",
      "id": "72f67ecf02f2b7bc",
      "item": {
        "type": "code",
        "id": "72f67ecf02f2b7bc",
        "text": "const parser = new DOMParser()\nconst url = \"./assets/pages/mime-db/common-types.html\"\nconst html = await fetch(url).then(res => res.text())\nconst doc = parser.parseFromString(html, \"text/html\")\nconst codes = doc\n  .querySelectorAll(\"table tr td:nth-child(1) code\")\nconst idx = []\nidx.push(\"codes.length\", codes.length)\nfor (let code of codes) {\n  let ext = code.textContent.trim()\n  let mime = code.closest(\"tr\")\n    .querySelector(\"td:nth-child(3) code\")\n    .textContent.trim()\n  idx.push([ext, mime])\n}\n\nexport default idx"
      },
      "date": 1635652148378
    },
    {
      "type": "edit",
      "id": "72f67ecf02f2b7bc",
      "item": {
        "type": "code",
        "id": "72f67ecf02f2b7bc",
        "text": "const idx = []\nconst parser = new DOMParser()\nconst url = \"./assets/pages/mime-db/common-types.html\"\nconst html = await fetch(url).then(res => res.text())\nconst doc = parser.parseFromString(html, \"text/html\")\nidx.push(\"doc.prototype\", doc.prototype)\nconst codes = doc\n  .querySelectorAll(\"table tr td:nth-child(1) code\")\nidx.push(\"codes.length\", codes.length)\nfor (let code of codes) {\n  let ext = code.textContent.trim()\n  let mime = code.closest(\"tr\")\n    .querySelector(\"td:nth-child(3) code\")\n    .textContent.trim()\n  idx.push([ext, mime])\n}\n\nexport default idx"
      },
      "date": 1635652203884
    },
    {
      "type": "edit",
      "id": "72f67ecf02f2b7bc",
      "item": {
        "type": "code",
        "id": "72f67ecf02f2b7bc",
        "text": "const idx = []\nconst parser = new DOMParser()\nconst url = \"./assets/pages/mime-db/common-types.html\"\nconst html = await fetch(url).then(res => res.text())\nconst doc = parser.parseFromString(html, \"text/html\")\nidx.push(\"doc.prototype\", doc, doc.prototype)\nconst codes = doc\n  .querySelectorAll(\"table tr td:nth-child(1) code\")\nidx.push(\"codes.length\", codes.length)\nfor (let code of codes) {\n  let ext = code.textContent.trim()\n  let mime = code.closest(\"tr\")\n    .querySelector(\"td:nth-child(3) code\")\n    .textContent.trim()\n  idx.push([ext, mime])\n}\n\nexport default idx"
      },
      "date": 1635652215856
    },
    {
      "type": "edit",
      "id": "72f67ecf02f2b7bc",
      "item": {
        "type": "code",
        "id": "72f67ecf02f2b7bc",
        "text": "const idx = []\nconst parser = new DOMParser()\nconst url = \"./assets/pages/mime-db/common-types.html\"\nlet html, doc\ntry {\n  html = await fetch(url).then(res => res.text())\n  doc = parser.parseFromString(html, \"text/html\")\n} catch(error) {\n  idx.push({url, error})\n} finally {\n  idx.push({html, doc})\n}\nconst codes = doc\n  .querySelectorAll(\"table tr td:nth-child(1) code\")\nidx.push(\"codes.length\", codes.length)\nfor (let code of codes) {\n  let ext = code.textContent.trim()\n  let mime = code.closest(\"tr\")\n    .querySelector(\"td:nth-child(3) code\")\n    .textContent.trim()\n  idx.push([ext, mime])\n}\n\nexport default idx"
      },
      "date": 1635652386054
    },
    {
      "type": "edit",
      "id": "72f67ecf02f2b7bc",
      "item": {
        "type": "code",
        "id": "72f67ecf02f2b7bc",
        "text": "const idx = []\nconst parser = new DOMParser()\nconst url = \"/assets/pages/mime-db/common-types.html\"\nlet html, doc\ntry {\n  html = await fetch(url).then(res => res.text())\n  doc = parser.parseFromString(html, \"text/html\")\n} catch(error) {\n  idx.push({url, error})\n} finally {\n  idx.push({html, doc})\n}\nconst codes = doc\n  .querySelectorAll(\"table tr td:nth-child(1) code\")\nidx.push(\"codes.length\", codes.length)\nfor (let code of codes) {\n  let ext = code.textContent.trim()\n  let mime = code.closest(\"tr\")\n    .querySelector(\"td:nth-child(3) code\")\n    .textContent.trim()\n  idx.push([ext, mime])\n}\n\nexport default idx"
      },
      "date": 1635652402828
    },
    {
      "type": "edit",
      "id": "72f67ecf02f2b7bc",
      "item": {
        "type": "code",
        "id": "72f67ecf02f2b7bc",
        "text": "const idx = []\nconst parser = new DOMParser()\nconst url = \"/assets/pages/mime-db/common-types.html\"\nconst html = await fetch(url).then(res => res.text())\nconst doc = parser.parseFromString(html, \"text/html\")\nconst codes = doc\n  .querySelectorAll(\"table tr td:nth-child(1) code\")\nfor (let code of codes) {\n  let ext = code.textContent.trim()\n  let mime = code.closest(\"tr\")\n    .querySelector(\"td:nth-child(3) code\")\n    .textContent.trim()\n  idx.push([ext, mime])\n}\n\nexport default idx"
      },
      "date": 1635652469852
    },
    {
      "id": "c3bb99dcbd0681bd",
      "type": "move",
      "order": [
        "536d4000",
        "a8dca14a9112e55a",
        "20cde000",
        "03544ef05500d765",
        "1b9ff0ea278a2e97",
        "72f67ecf02f2b7bc",
        "caa626ac93aa7d4c",
        "c3bb99dcbd0681bd",
        "6cf52409eec3988c"
      ],
      "date": 1635652514293
    },
    {
      "id": "c3bb99dcbd0681bd",
      "type": "move",
      "order": [
        "536d4000",
        "a8dca14a9112e55a",
        "20cde000",
        "03544ef05500d765",
        "1b9ff0ea278a2e97",
        "72f67ecf02f2b7bc",
        "caa626ac93aa7d4c",
        "6cf52409eec3988c",
        "c3bb99dcbd0681bd"
      ],
      "date": 1635652519741
    },
    {
      "type": "add",
      "id": "69591b1d4fa0add2",
      "item": {
        "type": "paragraph",
        "id": "69591b1d4fa0add2",
        "text": "On 2021-10-30, we saved a copy of MDN's html page in our assets as common-types.html. Below we parse the HTML into an array of file suffix to media type pairs."
      },
      "after": "1b9ff0ea278a2e97",
      "date": 1635652628018
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/importjs.html"
      },
      "date": 1635653261365,
      "error": {
        "type": "error",
        "msg": "Not Found",
        "response": "Page not found"
      }
    },
    {
      "type": "fork",
      "date": 1635653279132
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1635676093050
    }
  ]
}