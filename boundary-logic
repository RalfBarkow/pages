{
  "title": "Boundary Logic",
  "story": [
    {
      "type": "markdown",
      "id": "c34ff7ff2a129b94",
      "text": "Boundary logic is propositional logic interpreted using boundary notation. It uses two operators as a minimal basis for elementary logic: space provides the *OR* operation; boundaries provide the *NOT* operation"
    },
    {
      "type": "code",
      "id": "2f04d93fd1855762",
      "text": "a OR b is ab \nNOT a is (a)"
    },
    {
      "type": "markdown",
      "id": "131cf03a09560b65",
      "text": "As space, *OR* implicitly has commutative and associative properties. Boundaries denote a space whose contents are logically inverted, the demarcation between what is and what is not. A space without contents, the void, represents the logical *FALSE*. Thus, a boundary around nothing represents *NOT FALSE*, which is *TRUE*. Other propositional connectives can be constructed from this basis:"
    },
    {
      "type": "code",
      "id": "5669d712b0a93948",
      "text": "IF a THEN b is (a) b"
    },
    {
      "type": "paragraph",
      "id": "cb319e9a3b3cae7c",
      "text": "With the semantics of boundary logic understood, manipulating logic is simple. The axioms for boundary logic are shown in Figure 1 using parenthesis to draw boundaries [3]. These axioms were chosen for visual clarity; each requires only erasure to simplify."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Boundary Logic",
        "story": []
      },
      "date": 1659265919036
    },
    {
      "item": {
        "type": "factory",
        "id": "c34ff7ff2a129b94"
      },
      "id": "c34ff7ff2a129b94",
      "type": "add",
      "date": 1659265921871
    },
    {
      "type": "edit",
      "id": "c34ff7ff2a129b94",
      "item": {
        "type": "paragraph",
        "id": "c34ff7ff2a129b94",
        "text": "Boundary logic is propositional logic interpreted using boundary notation. It uses two operators as a minimal basis for elementary logic: space provides the OR operation;boundaries provide the NOT operation"
      },
      "date": 1659265923865
    },
    {
      "type": "edit",
      "id": "c34ff7ff2a129b94",
      "item": {
        "type": "paragraph",
        "id": "c34ff7ff2a129b94",
        "text": "Boundary logic is propositional logic interpreted using boundary notation. It uses two operators as a minimal basis for elementary logic: space provides the *OR* operation;boundaries provide the *NOT* operation"
      },
      "date": 1659265947670
    },
    {
      "type": "edit",
      "id": "c34ff7ff2a129b94",
      "item": {
        "type": "markdown",
        "id": "c34ff7ff2a129b94",
        "text": "Boundary logic is propositional logic interpreted using boundary notation. It uses two operators as a minimal basis for elementary logic: space provides the *OR* operation;boundaries provide the *NOT* operation"
      },
      "date": 1659265949063
    },
    {
      "item": {
        "type": "factory",
        "id": "2f04d93fd1855762"
      },
      "id": "2f04d93fd1855762",
      "type": "add",
      "after": "c34ff7ff2a129b94",
      "date": 1659266087048
    },
    {
      "type": "edit",
      "id": "2f04d93fd1855762",
      "item": {
        "type": "code",
        "id": "2f04d93fd1855762",
        "text": "aORb is ab NOTa is (a)"
      },
      "date": 1659266091889
    },
    {
      "type": "edit",
      "id": "2f04d93fd1855762",
      "item": {
        "type": "code",
        "id": "2f04d93fd1855762",
        "text": "aORb is ab \nNOTa is (a)"
      },
      "date": 1659266099994
    },
    {
      "type": "edit",
      "id": "2f04d93fd1855762",
      "item": {
        "type": "code",
        "id": "2f04d93fd1855762",
        "text": "a *OR* b is ab \nNOTa is (a)"
      },
      "date": 1659266118467
    },
    {
      "type": "edit",
      "id": "2f04d93fd1855762",
      "item": {
        "type": "code",
        "id": "2f04d93fd1855762",
        "text": "a OR b is ab \nNOT a is (a)"
      },
      "date": 1659266127987
    },
    {
      "item": {
        "type": "factory",
        "id": "131cf03a09560b65"
      },
      "id": "131cf03a09560b65",
      "type": "add",
      "after": "2f04d93fd1855762",
      "date": 1659266155037
    },
    {
      "type": "edit",
      "id": "131cf03a09560b65",
      "item": {
        "type": "paragraph",
        "id": "131cf03a09560b65",
        "text": " As space, OR implicitly has commutative and associative properties. Boundaries denote a space whose contents are logically inverted, the demarcation between what is and what is not. A space without contents, the void, represents the logical FALSE. Thus, a boundary around nothing represents NOT FALSE, which is TRUE. Other propositional connectives can be constructed from this basis"
      },
      "date": 1659266157407
    },
    {
      "type": "edit",
      "id": "131cf03a09560b65",
      "item": {
        "type": "paragraph",
        "id": "131cf03a09560b65",
        "text": "As space, *OR* implicitly has commutative and associative properties. Boundaries denote a space whose contents are logically inverted, the demarcation between what is and what is not. A space without contents, the void, represents the logical FALSE. Thus, a boundary around nothing represents NOT FALSE, which is TRUE. Other propositional connectives can be constructed from this basis"
      },
      "date": 1659266168823
    },
    {
      "type": "edit",
      "id": "131cf03a09560b65",
      "item": {
        "type": "paragraph",
        "id": "131cf03a09560b65",
        "text": "As space, *OR* implicitly has commutative and associative properties. Boundaries denote a space whose contents are logically inverted, the demarcation between what is and what is not. A space without contents, the void, represents the logical *FALSE*. Thus, a boundary around nothing represents NOT FALSE, which is TRUE. Other propositional connectives can be constructed from this basis"
      },
      "date": 1659266191271
    },
    {
      "type": "edit",
      "id": "131cf03a09560b65",
      "item": {
        "type": "paragraph",
        "id": "131cf03a09560b65",
        "text": "As space, *OR* implicitly has commutative and associative properties. Boundaries denote a space whose contents are logically inverted, the demarcation between what is and what is not. A space without contents, the void, represents the logical *FALSE*. Thus, a boundary around nothing represents *NOT FALSE*, which is *TRUE*. Other propositional connectives can be constructed from this basis"
      },
      "date": 1659266213683
    },
    {
      "type": "edit",
      "id": "131cf03a09560b65",
      "item": {
        "type": "markdown",
        "id": "131cf03a09560b65",
        "text": "As space, *OR* implicitly has commutative and associative properties. Boundaries denote a space whose contents are logically inverted, the demarcation between what is and what is not. A space without contents, the void, represents the logical *FALSE*. Thus, a boundary around nothing represents *NOT FALSE*, which is *TRUE*. Other propositional connectives can be constructed from this basis"
      },
      "date": 1659266215080
    },
    {
      "item": {
        "type": "factory",
        "id": "5669d712b0a93948"
      },
      "id": "5669d712b0a93948",
      "type": "add",
      "after": "131cf03a09560b65",
      "date": 1659266225480
    },
    {
      "type": "edit",
      "id": "5669d712b0a93948",
      "item": {
        "type": "code",
        "id": "5669d712b0a93948",
        "text": "IF a THEN b is (a)b"
      },
      "date": 1659266236096
    },
    {
      "type": "edit",
      "id": "5669d712b0a93948",
      "item": {
        "type": "code",
        "id": "5669d712b0a93948",
        "text": "IF a THEN b is (a) b"
      },
      "date": 1659266242572
    },
    {
      "type": "edit",
      "id": "131cf03a09560b65",
      "item": {
        "type": "markdown",
        "id": "131cf03a09560b65",
        "text": "As space, *OR* implicitly has commutative and associative properties. Boundaries denote a space whose contents are logically inverted, the demarcation between what is and what is not. A space without contents, the void, represents the logical *FALSE*. Thus, a boundary around nothing represents *NOT FALSE*, which is *TRUE*. Other propositional connectives can be constructed from this basis:"
      },
      "date": 1659266246061
    },
    {
      "item": {
        "type": "factory",
        "id": "cb319e9a3b3cae7c"
      },
      "id": "cb319e9a3b3cae7c",
      "type": "add",
      "after": "5669d712b0a93948",
      "date": 1659266267104
    },
    {
      "type": "edit",
      "id": "cb319e9a3b3cae7c",
      "item": {
        "type": "paragraph",
        "id": "cb319e9a3b3cae7c",
        "text": "With the semantics of boundary logic understood, manipulating logic is simple. The axioms for boundary logic are shown in Figure 1 using parenthesis to draw boundaries [3]. These axioms were c-hosen for visual "
      },
      "date": 1659266269913
    },
    {
      "type": "edit",
      "id": "cb319e9a3b3cae7c",
      "item": {
        "type": "paragraph",
        "id": "cb319e9a3b3cae7c",
        "text": "With the semantics of boundary logic understood, manipulating logic is simple. The axioms for boundary logic are shown in Figure 1 using parenthesis to draw boundaries [3]. These axioms were chosen for visual clarity."
      },
      "date": 1659266291791
    },
    {
      "type": "edit",
      "id": "cb319e9a3b3cae7c",
      "item": {
        "type": "paragraph",
        "id": "cb319e9a3b3cae7c",
        "text": "With the semantics of boundary logic understood, manipulating logic is simple. The axioms for boundary logic are shown in Figure 1 using parenthesis to draw boundaries [3]. These axioms were chosen for visual clarity; each requires only erasure to simplify."
      },
      "date": 1659266316230
    },
    {
      "type": "edit",
      "id": "c34ff7ff2a129b94",
      "item": {
        "type": "markdown",
        "id": "c34ff7ff2a129b94",
        "text": "Boundary logic is propositional logic interpreted using boundary notation. It uses two operators as a minimal basis for elementary logic: space provides the *OR* operation; boundaries provide the *NOT* operation"
      },
      "date": 1673348896201
    }
  ]
}