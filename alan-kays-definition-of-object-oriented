{
  "title": "Alan Kays Definition Of Object Oriented",
  "story": [
    {
      "type": "html",
      "text": "I've been meaning to put up this page for some time now... ",
      "id": "ed3c5138dc5b309b3d692e425458657e"
    },
    {
      "type": "html",
      "text": "\nMuch is mentioned on [[Wards Wiki]] of the definition of OO promulgated by [[Alan Kay]], the inventor of [[Smalltalk Language]].  Many consider it the most authoritative of the [[Definitions For Oo]], on the grounds that [[He Invented The Term]].  (Others disagree, that [[Flame War]] belongs on other pages and not here).",
      "id": "5034b22bab73734e2c7dd090e80c59d7"
    },
    {
      "type": "html",
      "text": "\nThe difficulty is that there seems to be no canonical source for just what Kay considers to be OO and not OO.  He has written and said quite a bit, but there isn't any single reference (that I'm aware of) where it's written down.  In addition, his thoughts on the matter appear to have mutated somewhat over time.  This isn't unusual or wrong, as reasonable people do modify their thinking when presented with new evidence.  But it makes it a bit hard to point to a particular writing and state that <i>it</i> is the authorative definition.",
      "id": "bd315652da1389951f36e12a233a3594"
    },
    {
      "type": "html",
      "text": "\nThe earliest known published reference which might reveal Kay's thinking on the matter (known to me, at any rate) is the paper [[Early History Of Smalltalk]] (which you can download by going to that [[Wiki Page]]).  It contains the following definition (on page 78 if you follow the link...).  As noted below, this is primarily a description of Smalltalk",
      "id": "5e5cbfaaf751adac69cef9e1d179d851"
    },
    {
      "type": "html",
      "text": "\n1.  [[Everything Is An Object]].",
      "id": "5978fe6a57a358d364f0c6ded2fd99bf"
    },
    {
      "type": "html",
      "text": "\n2.  Objects communicate by sending and receiving messages (in terms of objects).",
      "id": "df7aec542c2069edab042e5ef34ec1df"
    },
    {
      "type": "html",
      "text": "\n3.  Objects have their own memory (in terms of objects).",
      "id": "d6ebcf4004123f624db7564ff213b398"
    },
    {
      "type": "html",
      "text": "\n4.  Every object is an instance of a class (which must be an object).",
      "id": "7b4dd3fa1c2cdb7a29f0682643f208bd"
    },
    {
      "type": "html",
      "text": "\n5.  The class holds the shared behavior for its instances (in the form of objects in a program list)",
      "id": "2cbcfddba8b04ec3c6420c30c4b10497"
    },
    {
      "type": "html",
      "text": "\n6.  To eval a program list, control is passed to the first object and the remainder is treated as its message.",
      "id": "874895369a4ce1518fa99cd3f0311e13"
    },
    {
      "type": "html",
      "text": "\nThis definition is derived from early versions of Smalltalk (Smalltalk-72?), and rules 5 and 6 clearly show Smalltalk's Lisp heritage.  Kay remarked as such, noting that rules 4-6 would mutate as Smalltalk developed.",
      "id": "247999eceb16ec257f38f5e1fc716135"
    },
    {
      "type": "html",
      "text": "<b>Objection: on page 78 it is made clear that the above are the design principles behind Smalltalk, but nowhere  it is implied that they should also serve as definition of [[Object Oriented]].</b>",
      "id": "07bccaf25496f2bcd32bf5e3bc8d9e15"
    },
    {
      "type": "html",
      "text": "\nObjection noted.  The purpose of this page is to explore Kay's notion of OO, and the above is one of the verifiable sources we could find--even if it reflects Smalltalk circa 1974 rather than OO as a whole, it demonstrates his thoughts (at one time, at least) on the matter.",
      "id": "8d37acaff227e50ccc5972093d928016"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
    },
    {
      "type": "html",
      "text": "\nThe [[Alan Kay]] definition of OO is largely that given by [[Carl Hewitt]] for the [[Actors Model]] which is a model of computation, not a programming paradigm. [[Alan Kay]] has acknowledged explicitly this derivation.",
      "id": "29c139011a19b456403ce16d328f9d97"
    },
    {
      "type": "html",
      "text": "\nVersions of <i>Smalltalk</i> before Smalltalk-80 were still largely based on the (asynchronous, unidirectional) [[Actors Model]] of computation, but with Smalltalk-80, the developers of [[Smalltalk Language]] switched entirely to the (synchronous, bidirectional) procedural model, while misleadingly retaining the [[Actors Model]] terminology (such as \"messages\" for what essentially are procedure calls rather than one-way notifications).",
      "id": "d3d1643f0d23aa81c14710eef51f64b9"
    },
    {
      "type": "html",
      "text": "\nThis has caused endless terminological difficulties especially when considering that the the other major sources of OO thinking--capability architectures and the SIMULA 67 research--were not in the least inspired by [[Actors Model]] thinking.",
      "id": "31f6120bd76aa964ec5a352d2f049400"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
    },
    {
      "type": "html",
      "text": "<i>So how can you honestly claim that the above is [[Alan Kays Definition Of Object Oriented]] ?</i>",
      "id": "ca6a0e65271943a3a985675cefdce8d6"
    },
    {
      "type": "html",
      "text": " We're trying to discover just <i>what</i> it is.  Many make reference to it, and cite it as <b>the</b> canonical definition.  I will edit the introductory text to clarify this point.",
      "id": "3f050db5bd256173e8c0359d83bdf31f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
    },
    {
      "type": "html",
      "text": "\nA somewhat modified version of [[Alan Kay]]'s definition is given in [[Tim Budd]]s [[An Introduction To Object Oriented Programming]].  Interestingly enough, the source (given in the text of Budd's book) for this definition is [[Early History Of Smalltalk]]; though this definition has some considerable differences from the first.  According to Budd:",
      "id": "b07d2bd093655120bd7c328c7cd2653d"
    },
    {
      "type": "code",
      "text": " \"Alan Kay, considered by some to be the father of object-oriented programming,\n  identified the following characteristics as fundamental to OOP:\"",
      "id": "7ebd001de3fb3787157152a633444d3f"
    },
    {
      "type": "html",
      "text": "\n1.  [[Everything Is An Object]].",
      "id": "5978fe6a57a358d364f0c6ded2fd99bf"
    },
    {
      "type": "html",
      "text": "\n2.  Communication is performed by objects communicating with each other, requesting that objects perform actions.  Objects communicate by sending and receiving <i>messages</i>.  A message is a request for action, bundled with whatever objects may be necessary to complete the task.",
      "id": "58d8c630f6aca5af963ee10a962a13d5"
    },
    {
      "type": "html",
      "text": "\n3.  Objects have their own memory, which consists of other objects.",
      "id": "76583fb4fe94ad632ad902691db8ad8b"
    },
    {
      "type": "html",
      "text": "\n4.  Every object is an instance of a class.  A class simply represents a grouping of similar objects, such as integers or lists.",
      "id": "139e0c0fbc15aaf6d35c6c257bb43fa7"
    },
    {
      "type": "html",
      "text": "\n5.  The class is the repository for <i>behavior</i> associated with an object.  That is, all objects that are instances of the same class can perform the same actions.",
      "id": "3c0cadb7e21eb87cb8ecefdde6439088"
    },
    {
      "type": "html",
      "text": "\nSo far, similar to 1-5 above.  Rule 6 is different.  The reference to lists is removed, instead we have:",
      "id": "49d2e16a645b791b4a0f6bbd6b4f76fd"
    },
    {
      "type": "html",
      "text": "6.  Classes are organized into a singly-rooted tree structure, called the <i>inheritance hierarchy</i>.  Memory and behavior associated with instances of a class are available to any class associated with a descendent in this tree structure.",
      "id": "af43256307966d9d3aaa3b03b4dca936"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
    },
    {
      "type": "html",
      "text": "\n[[Alan Kay]] has more to say about this on [[Alan Kay On Messaging]].  While he doesn't give a newer definition in that message (which is a post to a mailing list, not a scholarly writing), he does seem to de-emphasize the construction of objects themselves, and instead focus on the interface between them.  ",
      "id": "f355a69a6dc3817a286c7892cccace41"
    },
    {
      "type": "html",
      "text": "\nIn this regard, many of the rules listed above might be seen as observations on Smalltalk-80, rather than as prescriptions/proscriptions that all OO languages should follow.  Indeed, many interesting modern OO languages, including [[Self Language]], violate rules 4 and 6 routinely.  [[Common Lisp Object System]] and its decendants ([[Dylan Language]], [[Cecil Language]]) as well as other things ([[Tutorial Dee]]) all dispense with rule 5, and choose to move behavior <i>out</i> of classes.",
      "id": "f8afcdc2dd65fbcbe133cd6d967b1e41"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
    },
    {
      "type": "html",
      "text": "\nAdding fuel to the fire, [[Alan Kay]] is reported to have remarked \"I invented the term object-oriented, and I can tell you that C++ wasn't what I had in mind\".  Whether he was objecting to any specific feature or omission of C++, it's overall quality or philosophy, or simply engaging in a gratuitous flame of the \"competition\" (Java didn't exist at the time [uh, yes it did, this was in the OOPSLA '98] ), it's not clear.  ",
      "id": "ee2322acd0cf62d582247bd23432d882"
    },
    {
      "type": "html",
      "text": "\nIn the article <i>Is Software Engineering an Oxymoron?</i>, Kay writes:  \"Until real software engineering is developed, the next best practice is to develop with a dynamic system that has extreme late binding in all aspects.\"  While this doesn't necessarily constrain the definition of OO in his mind, it is a key statement of philosophy.  C++, of course, does early binding everywhere it can--up to the point of performing [[Static Dispatch]] as a default (you have to ask for [[Dynamic Dispatch]] with the \"virtual\" keyword when you want it. [and even that, as in many other languages like Java, is only single dynamic dispatch. If you want \"late binding everywhere,\" you need a much more powerful dispatch system, e.g. [[Common Lisp Object System]]'s generics]).",
      "id": "ad72afe62cf5d112ea2c5a8a268d8038"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
    },
    {
      "type": "html",
      "text": "I have asked Alan Kay about his definition of \"object oriented\" and he told me in 2003:",
      "id": "281eba611c390342f4e9fd54a9c54b82"
    },
    {
      "type": "html",
      "text": "<i>OOP to me means only messaging, local retention and protection and hiding of state-process, and extreme [[Late Binding]] of all things.</i>",
      "id": "f2c582fef8d9723b2bbe202f382131ea"
    },
    {
      "type": "html",
      "text": "\nSee [http://www.purl.org/stefan_ram/pub/doc_kay_oop_en www.purl.org]",
      "id": "7d7922b73c81a69c46f3593392fc2bc8"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
    },
    {
      "type": "html",
      "text": "\nSee also [[Alan Kay On Objects]]",
      "id": "eba8ac545f6685979695cdc849b2e96b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
    },
    {
      "type": "html",
      "text": "[[Category Object Orientation]]",
      "id": "aa5e033e8bf80135ccb21a9cc889e3bd"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?AlanKaysDefinitionOfObjectOriented c2.com]",
      "id": "ae5f30819c4f6b41be423ae0e393db36"
    }
  ],
  "journal": [
    {
      "date": 1397856530000,
      "id": "de60d65c792200e0355a457baa019386",
      "type": "create",
      "item": {
        "title": "Alan Kays Definition Of Object Oriented",
        "story": [
          {
            "type": "html",
            "text": "I've been meaning to put up this page for some time now... ",
            "id": "ed3c5138dc5b309b3d692e425458657e"
          },
          {
            "type": "html",
            "text": "\nMuch is mentioned on [[Wards Wiki]] of the definition of OO promulgated by [[Alan Kay]], the inventor of [[Smalltalk Language]].  Many consider it the most authoritative of the [[Definitions For Oo]], on the grounds that [[He Invented The Term]].  (Others disagree, that [[Flame War]] belongs on other pages and not here).",
            "id": "5034b22bab73734e2c7dd090e80c59d7"
          },
          {
            "type": "html",
            "text": "\nThe difficulty is that there seems to be no canonical source for just what Kay considers to be OO and not OO.  He has written and said quite a bit, but there isn't any single reference (that I'm aware of) where it's written down.  In addition, his thoughts on the matter appear to have mutated somewhat over time.  This isn't unusual or wrong, as reasonable people do modify their thinking when presented with new evidence.  But it makes it a bit hard to point to a particular writing and state that <i>it</i> is the authorative definition.",
            "id": "bd315652da1389951f36e12a233a3594"
          },
          {
            "type": "html",
            "text": "\nThe earliest known published reference which might reveal Kay's thinking on the matter (known to me, at any rate) is the paper [[Early History Of Smalltalk]] (which you can download by going to that [[Wiki Page]]).  It contains the following definition (on page 78 if you follow the link...).  As noted below, this is primarily a description of Smalltalk",
            "id": "5e5cbfaaf751adac69cef9e1d179d851"
          },
          {
            "type": "html",
            "text": "\n1.  [[Everything Is An Object]].",
            "id": "5978fe6a57a358d364f0c6ded2fd99bf"
          },
          {
            "type": "html",
            "text": "\n2.  Objects communicate by sending and receiving messages (in terms of objects).",
            "id": "df7aec542c2069edab042e5ef34ec1df"
          },
          {
            "type": "html",
            "text": "\n3.  Objects have their own memory (in terms of objects).",
            "id": "d6ebcf4004123f624db7564ff213b398"
          },
          {
            "type": "html",
            "text": "\n4.  Every object is an instance of a class (which must be an object).",
            "id": "7b4dd3fa1c2cdb7a29f0682643f208bd"
          },
          {
            "type": "html",
            "text": "\n5.  The class holds the shared behavior for its instances (in the form of objects in a program list)",
            "id": "2cbcfddba8b04ec3c6420c30c4b10497"
          },
          {
            "type": "html",
            "text": "\n6.  To eval a program list, control is passed to the first object and the remainder is treated as its message.",
            "id": "874895369a4ce1518fa99cd3f0311e13"
          },
          {
            "type": "html",
            "text": "\nThis definition is derived from early versions of Smalltalk (Smalltalk-72?), and rules 5 and 6 clearly show Smalltalk's Lisp heritage.  Kay remarked as such, noting that rules 4-6 would mutate as Smalltalk developed.",
            "id": "247999eceb16ec257f38f5e1fc716135"
          },
          {
            "type": "html",
            "text": "<b>Objection: on page 78 it is made clear that the above are the design principles behind Smalltalk, but nowhere  it is implied that they should also serve as definition of [[Object Oriented]].</b>",
            "id": "07bccaf25496f2bcd32bf5e3bc8d9e15"
          },
          {
            "type": "html",
            "text": "\nObjection noted.  The purpose of this page is to explore Kay's notion of OO, and the above is one of the verifiable sources we could find--even if it reflects Smalltalk circa 1974 rather than OO as a whole, it demonstrates his thoughts (at one time, at least) on the matter.",
            "id": "8d37acaff227e50ccc5972093d928016"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
          },
          {
            "type": "html",
            "text": "\nThe [[Alan Kay]] definition of OO is largely that given by [[Carl Hewitt]] for the [[Actors Model]] which is a model of computation, not a programming paradigm. [[Alan Kay]] has acknowledged explicitly this derivation.",
            "id": "29c139011a19b456403ce16d328f9d97"
          },
          {
            "type": "html",
            "text": "\nVersions of <i>Smalltalk</i> before Smalltalk-80 were still largely based on the (asynchronous, unidirectional) [[Actors Model]] of computation, but with Smalltalk-80, the developers of [[Smalltalk Language]] switched entirely to the (synchronous, bidirectional) procedural model, while misleadingly retaining the [[Actors Model]] terminology (such as \"messages\" for what essentially are procedure calls rather than one-way notifications).",
            "id": "d3d1643f0d23aa81c14710eef51f64b9"
          },
          {
            "type": "html",
            "text": "\nThis has caused endless terminological difficulties especially when considering that the the other major sources of OO thinking--capability architectures and the SIMULA 67 research--were not in the least inspired by [[Actors Model]] thinking.",
            "id": "31f6120bd76aa964ec5a352d2f049400"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
          },
          {
            "type": "html",
            "text": "<i>So how can you honestly claim that the above is [[Alan Kays Definition Of Object Oriented]] ?</i>",
            "id": "ca6a0e65271943a3a985675cefdce8d6"
          },
          {
            "type": "html",
            "text": " We're trying to discover just <i>what</i> it is.  Many make reference to it, and cite it as <b>the</b> canonical definition.  I will edit the introductory text to clarify this point.",
            "id": "3f050db5bd256173e8c0359d83bdf31f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
          },
          {
            "type": "html",
            "text": "\nA somewhat modified version of [[Alan Kay]]'s definition is given in [[Tim Budd]]s [[An Introduction To Object Oriented Programming]].  Interestingly enough, the source (given in the text of Budd's book) for this definition is [[Early History Of Smalltalk]]; though this definition has some considerable differences from the first.  According to Budd:",
            "id": "b07d2bd093655120bd7c328c7cd2653d"
          },
          {
            "type": "code",
            "text": " \"Alan Kay, considered by some to be the father of object-oriented programming,\n  identified the following characteristics as fundamental to OOP:\"",
            "id": "7ebd001de3fb3787157152a633444d3f"
          },
          {
            "type": "html",
            "text": "\n1.  [[Everything Is An Object]].",
            "id": "5978fe6a57a358d364f0c6ded2fd99bf"
          },
          {
            "type": "html",
            "text": "\n2.  Communication is performed by objects communicating with each other, requesting that objects perform actions.  Objects communicate by sending and receiving <i>messages</i>.  A message is a request for action, bundled with whatever objects may be necessary to complete the task.",
            "id": "58d8c630f6aca5af963ee10a962a13d5"
          },
          {
            "type": "html",
            "text": "\n3.  Objects have their own memory, which consists of other objects.",
            "id": "76583fb4fe94ad632ad902691db8ad8b"
          },
          {
            "type": "html",
            "text": "\n4.  Every object is an instance of a class.  A class simply represents a grouping of similar objects, such as integers or lists.",
            "id": "139e0c0fbc15aaf6d35c6c257bb43fa7"
          },
          {
            "type": "html",
            "text": "\n5.  The class is the repository for <i>behavior</i> associated with an object.  That is, all objects that are instances of the same class can perform the same actions.",
            "id": "3c0cadb7e21eb87cb8ecefdde6439088"
          },
          {
            "type": "html",
            "text": "\nSo far, similar to 1-5 above.  Rule 6 is different.  The reference to lists is removed, instead we have:",
            "id": "49d2e16a645b791b4a0f6bbd6b4f76fd"
          },
          {
            "type": "html",
            "text": "6.  Classes are organized into a singly-rooted tree structure, called the <i>inheritance hierarchy</i>.  Memory and behavior associated with instances of a class are available to any class associated with a descendent in this tree structure.",
            "id": "af43256307966d9d3aaa3b03b4dca936"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
          },
          {
            "type": "html",
            "text": "\n[[Alan Kay]] has more to say about this on [[Alan Kay On Messaging]].  While he doesn't give a newer definition in that message (which is a post to a mailing list, not a scholarly writing), he does seem to de-emphasize the construction of objects themselves, and instead focus on the interface between them.  ",
            "id": "f355a69a6dc3817a286c7892cccace41"
          },
          {
            "type": "html",
            "text": "\nIn this regard, many of the rules listed above might be seen as observations on Smalltalk-80, rather than as prescriptions/proscriptions that all OO languages should follow.  Indeed, many interesting modern OO languages, including [[Self Language]], violate rules 4 and 6 routinely.  [[Common Lisp Object System]] and its decendants ([[Dylan Language]], [[Cecil Language]]) as well as other things ([[Tutorial Dee]]) all dispense with rule 5, and choose to move behavior <i>out</i> of classes.",
            "id": "f8afcdc2dd65fbcbe133cd6d967b1e41"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
          },
          {
            "type": "html",
            "text": "\nAdding fuel to the fire, [[Alan Kay]] is reported to have remarked \"I invented the term object-oriented, and I can tell you that C++ wasn't what I had in mind\".  Whether he was objecting to any specific feature or omission of C++, it's overall quality or philosophy, or simply engaging in a gratuitous flame of the \"competition\" (Java didn't exist at the time [uh, yes it did, this was in the OOPSLA '98] ), it's not clear.  ",
            "id": "ee2322acd0cf62d582247bd23432d882"
          },
          {
            "type": "html",
            "text": "\nIn the article <i>Is Software Engineering an Oxymoron?</i>, Kay writes:  \"Until real software engineering is developed, the next best practice is to develop with a dynamic system that has extreme late binding in all aspects.\"  While this doesn't necessarily constrain the definition of OO in his mind, it is a key statement of philosophy.  C++, of course, does early binding everywhere it can--up to the point of performing [[Static Dispatch]] as a default (you have to ask for [[Dynamic Dispatch]] with the \"virtual\" keyword when you want it. [and even that, as in many other languages like Java, is only single dynamic dispatch. If you want \"late binding everywhere,\" you need a much more powerful dispatch system, e.g. [[Common Lisp Object System]]'s generics]).",
            "id": "ad72afe62cf5d112ea2c5a8a268d8038"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
          },
          {
            "type": "html",
            "text": "I have asked Alan Kay about his definition of \"object oriented\" and he told me in 2003:",
            "id": "281eba611c390342f4e9fd54a9c54b82"
          },
          {
            "type": "html",
            "text": "<i>OOP to me means only messaging, local retention and protection and hiding of state-process, and extreme [[Late Binding]] of all things.</i>",
            "id": "f2c582fef8d9723b2bbe202f382131ea"
          },
          {
            "type": "html",
            "text": "\nSee [http://www.purl.org/stefan_ram/pub/doc_kay_oop_en www.purl.org]",
            "id": "7d7922b73c81a69c46f3593392fc2bc8"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
          },
          {
            "type": "html",
            "text": "\nSee also [[Alan Kay On Objects]]",
            "id": "eba8ac545f6685979695cdc849b2e96b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "06efd3fae6d7668dc490cb1edc2e4fd8"
          },
          {
            "type": "html",
            "text": "[[Category Object Orientation]]",
            "id": "aa5e033e8bf80135ccb21a9cc889e3bd"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?AlanKaysDefinitionOfObjectOriented c2.com]",
            "id": "ae5f30819c4f6b41be423ae0e393db36"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1706293267223
    }
  ]
}