{
  "title": "Semantic Clustering",
  "story": [
    {
      "type": "paragraph",
      "id": "976eff6b8d87de6e",
      "text": "Identifying Topics in Source Code"
    },
    {
      "type": "markdown",
      "id": "896b9bb5ddff46db",
      "text": "> **Abstract**. Many of the existing approaches in [[Software Comprehension]] focus on program pro- gram structure or external documentation. However, by analyzing formal information the informal semantics contained in the vocabulary of source code are over- looked. To understand software as a whole, we need to enrich software analysis with the developer knowledge hidden in the code naming. This paper proposes the use of information retrieval to exploit linguistic information found in source code, such as identifier names and comments. We introduce [[Semantic Clustering]], a technique based on [[Latent Semantic Indexing]] and clustering to group source artifacts that use similar vocabulary. We call these groups semantic clusters and we interpret them as linguistic topics that reveal the intention of the code. We compare the topics to each other, identify links between them, provide automatically retrieved labels, and use a visualization to illustrate how they are distributed over the system. Our approach is language independent as it works at the level of identifier names. To validate our approach we applied it on several case studies, two of which we present in this paper.\n>\n> Note: Some of the visualizations presented make heavy use of colors. Please obtain a color copy of the article for better understanding.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Semantic Clustering",
        "story": []
      },
      "date": 1638958176615
    },
    {
      "item": {
        "type": "factory",
        "id": "976eff6b8d87de6e"
      },
      "id": "976eff6b8d87de6e",
      "type": "add",
      "date": 1638958188910
    },
    {
      "type": "edit",
      "id": "976eff6b8d87de6e",
      "item": {
        "type": "paragraph",
        "id": "976eff6b8d87de6e",
        "text": "Identifying Topics in Source Code"
      },
      "date": 1638958190078
    },
    {
      "item": {
        "type": "factory",
        "id": "896b9bb5ddff46db"
      },
      "id": "896b9bb5ddff46db",
      "type": "add",
      "after": "976eff6b8d87de6e",
      "date": 1638958208771
    },
    {
      "type": "edit",
      "id": "896b9bb5ddff46db",
      "item": {
        "type": "markdown",
        "id": "896b9bb5ddff46db",
        "text": "> Many of the existing approaches in Software Comprehension focus on program pro- gram structure or external documentation. However, by analyzing formal informa- tion the informal semantics contained in the vocabulary of source code are over- looked. To understand software as a whole, we need to enrich software analysis with the developer knowledge hidden in the code naming. This paper proposes the use of information retrieval to exploit linguistic information found in source code, such as identifier names and comments. We introduce Semantic Clustering, a technique based on Latent Semantic Indexing and clustering to group source artifacts that use similar vocabulary. We call these groups semantic clusters and we interpret them as linguistic topics that reveal the intention of the code. We compare the topics to each other, identify links between them, provide automatically retrieved labels, and use a visualization to illustrate how they are distributed over the system. Our approach is language independent as it works at the level of identifier names. To validate our approach we applied it on several case studies, two of which we present in this paper.\nNote: Some of the visualizations presented make heavy use of colors. Please obtain a color copy of the article for better understanding.\n"
      },
      "date": 1638958212559
    },
    {
      "type": "edit",
      "id": "896b9bb5ddff46db",
      "item": {
        "type": "markdown",
        "id": "896b9bb5ddff46db",
        "text": "> **Abstract**. Many of the existing approaches in Software Comprehension focus on program pro- gram structure or external documentation. However, by analyzing formal informa- tion the informal semantics contained in the vocabulary of source code are over- looked. To understand software as a whole, we need to enrich software analysis with the developer knowledge hidden in the code naming. This paper proposes the use of information retrieval to exploit linguistic information found in source code, such as identifier names and comments. We introduce Semantic Clustering, a technique based on Latent Semantic Indexing and clustering to group source artifacts that use similar vocabulary. We call these groups semantic clusters and we interpret them as linguistic topics that reveal the intention of the code. We compare the topics to each other, identify links between them, provide automatically retrieved labels, and use a visualization to illustrate how they are distributed over the system. Our approach is language independent as it works at the level of identifier names. To validate our approach we applied it on several case studies, two of which we present in this paper.\nNote: Some of the visualizations presented make heavy use of colors. Please obtain a color copy of the article for better understanding.\n"
      },
      "date": 1638958228744
    },
    {
      "type": "edit",
      "id": "896b9bb5ddff46db",
      "item": {
        "type": "markdown",
        "id": "896b9bb5ddff46db",
        "text": "> **Abstract**. Many of the existing approaches in [[Software Comprehension]] focus on program pro- gram structure or external documentation. However, by analyzing formal informa- tion the informal semantics contained in the vocabulary of source code are over- looked. To understand software as a whole, we need to enrich software analysis with the developer knowledge hidden in the code naming. This paper proposes the use of information retrieval to exploit linguistic information found in source code, such as identifier names and comments. We introduce Semantic Clustering, a technique based on Latent Semantic Indexing and clustering to group source artifacts that use similar vocabulary. We call these groups semantic clusters and we interpret them as linguistic topics that reveal the intention of the code. We compare the topics to each other, identify links between them, provide automatically retrieved labels, and use a visualization to illustrate how they are distributed over the system. Our approach is language independent as it works at the level of identifier names. To validate our approach we applied it on several case studies, two of which we present in this paper.\nNote: Some of the visualizations presented make heavy use of colors. Please obtain a color copy of the article for better understanding.\n"
      },
      "date": 1638958240488
    },
    {
      "type": "edit",
      "id": "896b9bb5ddff46db",
      "item": {
        "type": "markdown",
        "id": "896b9bb5ddff46db",
        "text": "> **Abstract**. Many of the existing approaches in [[Software Comprehension]] focus on program pro- gram structure or external documentation. However, by analyzing formal information the informal semantics contained in the vocabulary of source code are over- looked. To understand software as a whole, we need to enrich software analysis with the developer knowledge hidden in the code naming. This paper proposes the use of information retrieval to exploit linguistic information found in source code, such as identifier names and comments. We introduce Semantic Clustering, a technique based on Latent Semantic Indexing and clustering to group source artifacts that use similar vocabulary. We call these groups semantic clusters and we interpret them as linguistic topics that reveal the intention of the code. We compare the topics to each other, identify links between them, provide automatically retrieved labels, and use a visualization to illustrate how they are distributed over the system. Our approach is language independent as it works at the level of identifier names. To validate our approach we applied it on several case studies, two of which we present in this paper.\nNote: Some of the visualizations presented make heavy use of colors. Please obtain a color copy of the article for better understanding.\n"
      },
      "date": 1638958257892
    },
    {
      "type": "edit",
      "id": "896b9bb5ddff46db",
      "item": {
        "type": "markdown",
        "id": "896b9bb5ddff46db",
        "text": "> **Abstract**. Many of the existing approaches in [[Software Comprehension]] focus on program pro- gram structure or external documentation. However, by analyzing formal information the informal semantics contained in the vocabulary of source code are over- looked. To understand software as a whole, we need to enrich software analysis with the developer knowledge hidden in the code naming. This paper proposes the use of information retrieval to exploit linguistic information found in source code, such as identifier names and comments. We introduce [[Semantic Clustering]], a technique based on [[Latent Semantic Indexing] and clustering to group source artifacts that use similar vocabulary. We call these groups semantic clusters and we interpret them as linguistic topics that reveal the intention of the code. We compare the topics to each other, identify links between them, provide automatically retrieved labels, and use a visualization to illustrate how they are distributed over the system. Our approach is language independent as it works at the level of identifier names. To validate our approach we applied it on several case studies, two of which we present in this paper.\nNote: Some of the visualizations presented make heavy use of colors. Please obtain a color copy of the article for better understanding.\n"
      },
      "date": 1638958297986
    },
    {
      "type": "edit",
      "id": "896b9bb5ddff46db",
      "item": {
        "type": "markdown",
        "id": "896b9bb5ddff46db",
        "text": "> **Abstract**. Many of the existing approaches in [[Software Comprehension]] focus on program pro- gram structure or external documentation. However, by analyzing formal information the informal semantics contained in the vocabulary of source code are over- looked. To understand software as a whole, we need to enrich software analysis with the developer knowledge hidden in the code naming. This paper proposes the use of information retrieval to exploit linguistic information found in source code, such as identifier names and comments. We introduce [[Semantic Clustering]], a technique based on [[Latent Semantic Indexing]] and clustering to group source artifacts that use similar vocabulary. We call these groups semantic clusters and we interpret them as linguistic topics that reveal the intention of the code. We compare the topics to each other, identify links between them, provide automatically retrieved labels, and use a visualization to illustrate how they are distributed over the system. Our approach is language independent as it works at the level of identifier names. To validate our approach we applied it on several case studies, two of which we present in this paper.\nNote: Some of the visualizations presented make heavy use of colors. Please obtain a color copy of the article for better understanding.\n"
      },
      "date": 1638958312476
    },
    {
      "type": "edit",
      "id": "896b9bb5ddff46db",
      "item": {
        "type": "markdown",
        "id": "896b9bb5ddff46db",
        "text": "> **Abstract**. Many of the existing approaches in [[Software Comprehension]] focus on program pro- gram structure or external documentation. However, by analyzing formal information the informal semantics contained in the vocabulary of source code are over- looked. To understand software as a whole, we need to enrich software analysis with the developer knowledge hidden in the code naming. This paper proposes the use of information retrieval to exploit linguistic information found in source code, such as identifier names and comments. We introduce [[Semantic Clustering]], a technique based on [[Latent Semantic Indexing]] and clustering to group source artifacts that use similar vocabulary. We call these groups semantic clusters and we interpret them as linguistic topics that reveal the intention of the code. We compare the topics to each other, identify links between them, provide automatically retrieved labels, and use a visualization to illustrate how they are distributed over the system. Our approach is language independent as it works at the level of identifier names. To validate our approach we applied it on several case studies, two of which we present in this paper.\n>\n> Note: Some of the visualizations presented make heavy use of colors. Please obtain a color copy of the article for better understanding.\n"
      },
      "date": 1638958346384
    }
  ]
}