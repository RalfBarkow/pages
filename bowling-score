{
  "title": "Bowling Score",
  "story": [
    {
      "type": "paragraph",
      "id": "782553f035c8725b",
      "text": "I can't go bowling without recalling my discovery in beginning programming when I coded a scoring algorithm with a simple loop by looking ahead at the next frame rather than carrying incomplete bonuses forward and then back-patching results as is done when scoring in realtime."
    },
    {
      "type": "paragraph",
      "id": "5da88befaf230767",
      "text": "Specifically, when scoring a strike, one applies the bonus of adding in the sum of the next two balls thrown. These could be thrown in the next frame, or the next two frames. This means bonuses can pile up creating a dynamic representation problem for the programmer."
    },
    {
      "type": "paragraph",
      "id": "44a1589c12dc16fa",
      "text": "I remember struggling with this logic when I realized I could just look ahead to the future frames while scoring the current frame. I checked the programming assignment. Nothing was said about scoring in realtime. The assignment called for reading the pins for each ball into an array. There it was, all the information for all time."
    },
    {
      "type": "code",
      "id": "66f92290f4a032fb",
      "text": "score = (j) ->\n  pins[j][0] + (pins[j][1] or 0)\nbonus = (j) ->\n  if pins[j][0] == 10\n    pins[j+1][0] + (pins[j+1][1] or pins[j+2][0])\n  else if score(j) == 10\n    pins[j+1][0]\n  else 0"
    },
    {
      "type": "paragraph",
      "id": "c82bd710a331ea2a",
      "text": "See [[Bowling Score Spiked]]."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Bowling Score"
      },
      "date": 1353780818860
    },
    {
      "item": {
        "type": "factory",
        "id": "daad3d26e5f552fc"
      },
      "id": "daad3d26e5f552fc",
      "type": "add",
      "date": 1353780825118
    },
    {
      "type": "edit",
      "id": "daad3d26e5f552fc",
      "item": {
        "type": "paragraph",
        "id": "daad3d26e5f552fc",
        "text": "See [[Bowling Score Spiked]]."
      },
      "date": 1353780838944
    },
    {
      "item": {
        "type": "factory",
        "id": "782553f035c8725b"
      },
      "id": "782553f035c8725b",
      "type": "add",
      "after": "daad3d26e5f552fc",
      "date": 1353780859018
    },
    {
      "type": "edit",
      "id": "782553f035c8725b",
      "item": {
        "type": "paragraph",
        "id": "782553f035c8725b",
        "text": "I can't go bowling without recalling my discovery in beginning programming when I coded a scoring algorithm with a simple loop by looking ahead at the next frame rather than carrying incomplete bonuses forward and then back-patching results as is done when scoring in realtime."
      },
      "date": 1353780924358
    },
    {
      "type": "move",
      "order": [
        "782553f035c8725b",
        "daad3d26e5f552fc"
      ],
      "id": "782553f035c8725b",
      "date": 1353780930257
    },
    {
      "item": {
        "type": "paragraph",
        "id": "5da88befaf230767",
        "text": ""
      },
      "id": "5da88befaf230767",
      "type": "add",
      "after": "782553f035c8725b",
      "date": 1353780952413
    },
    {
      "type": "edit",
      "id": "5da88befaf230767",
      "item": {
        "type": "paragraph",
        "id": "5da88befaf230767",
        "text": "Specifically, when scoring a strike, one applies the bonus of adding in the sum of the next two balls thrown. These could be thrown in the next frame, or the next two frames. This means bonuses can pile up creating a dynamic representation problem for the programmer."
      },
      "date": 1353781117436
    },
    {
      "item": {
        "type": "paragraph",
        "id": "44a1589c12dc16fa",
        "text": ""
      },
      "id": "44a1589c12dc16fa",
      "type": "add",
      "after": "5da88befaf230767",
      "date": 1353781117944
    },
    {
      "type": "edit",
      "id": "44a1589c12dc16fa",
      "item": {
        "type": "paragraph",
        "id": "44a1589c12dc16fa",
        "text": "I remember struggling with this logic when I realized I could just look ahead to the future frames while scoring the current frame. I checked the programming assignment. Nothing was said about scoring in realtime. The assignment called for reading the pins for each ball into an array. There it was, all the information for all time."
      },
      "date": 1353781368505
    },
    {
      "item": {
        "type": "factory",
        "id": "66f92290f4a032fb"
      },
      "id": "66f92290f4a032fb",
      "type": "add",
      "after": "daad3d26e5f552fc",
      "date": 1353783920147
    },
    {
      "type": "edit",
      "id": "66f92290f4a032fb",
      "item": {
        "type": "code",
        "id": "66f92290f4a032fb",
        "text": "score = (j) ->\n  pins[j][0] + pins[j][1] or 0\nbonus = (j) ->\n  if pins[j][0] == 10\n    pins[j+1][0] + pins[j+1][1] or pins[j+2][0]\n  else if score(j) == 10\n    pins[j+1][0]\n  else 0"
      },
      "date": 1353783925569
    },
    {
      "type": "move",
      "order": [
        "782553f035c8725b",
        "5da88befaf230767",
        "44a1589c12dc16fa",
        "66f92290f4a032fb",
        "daad3d26e5f552fc"
      ],
      "id": "66f92290f4a032fb",
      "date": 1353784013996
    },
    {
      "type": "edit",
      "id": "66f92290f4a032fb",
      "item": {
        "type": "code",
        "id": "66f92290f4a032fb",
        "text": "score = (j) ->\n  pins[j][0] + (pins[j][1] or 0)\nbonus = (j) ->\n  if pins[j][0] == 10\n    pins[j+1][0] + (pins[j+1][1] or pins[j+2][0])\n  else if score(j) == 10\n    pins[j+1][0]\n  else 0"
      },
      "date": 1353785177524
    },
    {
      "type": "edit",
      "id": "daad3d26e5f552fc",
      "item": {
        "type": "paragraph",
        "id": "daad3d26e5f552fc",
        "text": "In CoffeeScript I represent each frame as an array of one or two integers corresponding to each ball thrown. "
      },
      "date": 1353807640884
    },
    {
      "item": {
        "type": "paragraph",
        "id": "c82bd710a331ea2a",
        "text": "See [[Bowling Score Spiked]]."
      },
      "id": "c82bd710a331ea2a",
      "type": "add",
      "after": "daad3d26e5f552fc",
      "date": 1353807641393
    },
    {
      "item": {
        "type": "factory",
        "id": "4880e78bf505ff8f"
      },
      "id": "4880e78bf505ff8f",
      "type": "add",
      "after": "c82bd710a331ea2a",
      "date": 1353807659028
    },
    {
      "type": "edit",
      "id": "4880e78bf505ff8f",
      "item": {
        "type": "paragraph",
        "id": "4880e78bf505ff8f",
        "text": "pins = [[1,4], [4,5], [6,4], [5,5], [10], [0,1], [7,3], [6,4], [10], [2,8], [6]]"
      },
      "date": 1353807665240
    },
    {
      "type": "remove",
      "id": "4880e78bf505ff8f",
      "date": 1353807670566
    },
    {
      "item": {
        "type": "factory",
        "id": "c5ec0b981e27e19b"
      },
      "id": "c5ec0b981e27e19b",
      "type": "add",
      "after": "c82bd710a331ea2a",
      "date": 1353807672969
    },
    {
      "type": "edit",
      "id": "c5ec0b981e27e19b",
      "item": {
        "type": "code",
        "id": "c5ec0b981e27e19b",
        "text": "pins = [[1,4], [4,5], [6,4], [5,5], [10], [0,1], [7,3], [6,4], [10], [2,8], [6]]"
      },
      "date": 1353807677393
    },
    {
      "type": "edit",
      "id": "c5ec0b981e27e19b",
      "item": {
        "type": "code",
        "id": "c5ec0b981e27e19b",
        "text": "pins = [[1,4], [4,5], [6,4], [5,5], [10],\n  [0,1], [7,3], [6,4], [10], [2,8], [6]]"
      },
      "date": 1353807722079
    },
    {
      "type": "move",
      "order": [
        "782553f035c8725b",
        "5da88befaf230767",
        "44a1589c12dc16fa",
        "66f92290f4a032fb",
        "daad3d26e5f552fc",
        "c5ec0b981e27e19b",
        "c82bd710a331ea2a"
      ],
      "id": "c5ec0b981e27e19b",
      "date": 1353807742503
    },
    {
      "type": "remove",
      "id": "c5ec0b981e27e19b",
      "date": 1353807763581
    },
    {
      "type": "remove",
      "id": "daad3d26e5f552fc",
      "date": 1353807766964
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org",
      "date": 1641133157450
    }
  ]
}