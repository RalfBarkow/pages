{
  "title": "Character",
  "story": [
    {
      "type": "paragraph",
      "id": "c0112696a1945f9c",
      "text": "I represent a character by storing its associated Unicode. The first 256 characters are created uniquely, so that all instances of latin1 characters ($R, for example) are identical.\n\nThe code point is based on Unicode. Since Unicode is 21-bit wide character set, we have several bits available for other information.  As the Unicode Standard  states, a Unicode code point doesn't carry the language information.  This is going to be a problem with the languages so called CJK (Chinese, Japanese, Korean.  Or often CJKV including Vietnamese).  Since the characters of those languages are unified and given the same code point, it is impossible to display a bare Unicode code point in an inspector or such tools.  To utilize the extra available bits, we use them for identifying the languages.  Since the old implementation uses the bits to identify the character encoding, the bits are sometimes called \"encoding tag\" or neutrally \"leading char\", but the bits rigidly denotes the concept of languages."
    },
    {
      "type": "paragraph",
      "id": "c65ee44dd290d90b",
      "text": "The other languages can have the language tag if you like.  This will help to break the large default font (font set) into separately loadable chunk of fonts.  However, it is open to the each native speakers and writers to decide how to define the character equality, since the same Unicode code point may have different language tag thus simple #= comparison may return false."
    },
    {
      "type": "paragraph",
      "id": "c28bd6331105b4cd",
      "text": "I represent a character by storing its associated ASCII code (extended to 256 codes). My instances are created uniquely, so that all instances of a character ($R, for example) are identical."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Character",
        "story": []
      },
      "date": 1704211665105
    },
    {
      "item": {
        "type": "factory",
        "id": "c0112696a1945f9c"
      },
      "id": "c0112696a1945f9c",
      "type": "add",
      "date": 1704211666415
    },
    {
      "type": "edit",
      "id": "c0112696a1945f9c",
      "item": {
        "type": "paragraph",
        "id": "c0112696a1945f9c",
        "text": "I represent a character by storing its associated Unicode. The first 256 characters are created uniquely, so that all instances of latin1 characters ($R, for example) are identical.\n\nThe code point is based on Unicode. Since Unicode is 21-bit wide character set, we have several bits available for other information.  As the Unicode Standard  states, a Unicode code point doesn't carry the language information.  This is going to be a problem with the languages so called CJK (Chinese, Japanese, Korean.  Or often CJKV including Vietnamese).  Since the characters of those languages are unified and given the same code point, it is impossible to display a bare Unicode code point in an inspector or such tools.  To utilize the extra available bits, we use them for identifying the languages.  Since the old implementation uses the bits to identify the character encoding, the bits are sometimes called \"encoding tag\" or neutrally \"leading char\", but the bits rigidly denotes the concept of languages.\n\nThe other languages can have the language tag if you like.  This will help to break the large default font (font set) into separately loadable chunk of fonts.  However, it is open to the each native speakers and writers to decide how to define the character equality, since the same Unicode code point may have different language tag thus simple #= comparison may return false.\n\nI represent a character by storing its associated ASCII code (extended to 256 codes). My instances are created uniquely, so that all instances of a character ($R, for example) are identical."
      },
      "date": 1704211668008
    },
    {
      "type": "edit",
      "id": "c0112696a1945f9c",
      "item": {
        "type": "paragraph",
        "id": "c0112696a1945f9c",
        "text": "I represent a character by storing its associated Unicode. The first 256 characters are created uniquely, so that all instances of latin1 characters ($R, for example) are identical.\n\nThe code point is based on Unicode. Since Unicode is 21-bit wide character set, we have several bits available for other information.  As the Unicode Standard  states, a Unicode code point doesn't carry the language information.  This is going to be a problem with the languages so called CJK (Chinese, Japanese, Korean.  Or often CJKV including Vietnamese).  Since the characters of those languages are unified and given the same code point, it is impossible to display a bare Unicode code point in an inspector or such tools.  To utilize the extra available bits, we use them for identifying the languages.  Since the old implementation uses the bits to identify the character encoding, the bits are sometimes called \"encoding tag\" or neutrally \"leading char\", but the bits rigidly denotes the concept of languages.\n\nThe other languages can have the language tag if you like.  This will help to break the large default font (font set) into separately loadable chunk of fonts.  However, it is open to the each native speakers and writers to decide how to define the character equality, since the same Unicode code point may have different language tag thus simple #= comparison may return false."
      },
      "date": 1704211754967
    },
    {
      "type": "add",
      "id": "c28bd6331105b4cd",
      "item": {
        "type": "paragraph",
        "id": "c28bd6331105b4cd",
        "text": "I represent a character by storing its associated ASCII code (extended to 256 codes). My instances are created uniquely, so that all instances of a character ($R, for example) are identical."
      },
      "after": "c0112696a1945f9c",
      "date": 1704211756951
    },
    {
      "type": "edit",
      "id": "c0112696a1945f9c",
      "item": {
        "type": "paragraph",
        "id": "c0112696a1945f9c",
        "text": "I represent a character by storing its associated Unicode. The first 256 characters are created uniquely, so that all instances of latin1 characters ($R, for example) are identical.\n\nThe code point is based on Unicode. Since Unicode is 21-bit wide character set, we have several bits available for other information.  As the Unicode Standard  states, a Unicode code point doesn't carry the language information.  This is going to be a problem with the languages so called CJK (Chinese, Japanese, Korean.  Or often CJKV including Vietnamese).  Since the characters of those languages are unified and given the same code point, it is impossible to display a bare Unicode code point in an inspector or such tools.  To utilize the extra available bits, we use them for identifying the languages.  Since the old implementation uses the bits to identify the character encoding, the bits are sometimes called \"encoding tag\" or neutrally \"leading char\", but the bits rigidly denotes the concept of languages."
      },
      "date": 1704211760408
    },
    {
      "type": "add",
      "id": "c65ee44dd290d90b",
      "item": {
        "type": "paragraph",
        "id": "c65ee44dd290d90b",
        "text": "The other languages can have the language tag if you like.  This will help to break the large default font (font set) into separately loadable chunk of fonts.  However, it is open to the each native speakers and writers to decide how to define the character equality, since the same Unicode code point may have different language tag thus simple #= comparison may return false."
      },
      "after": "c0112696a1945f9c",
      "date": 1704211761137
    }
  ]
}