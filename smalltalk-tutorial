{
  "title": "Smalltalk Tutorial",
  "story": [
    {
      "type": "html",
      "text": "<b>[[Smalltalk Tutorial]]</b>",
      "id": "6065d391e39dd026cda1a8c5eb0cd41e"
    },
    {
      "type": "html",
      "text": "<i>Step One:</i> point your browser at\n[http://www.squeak.org www.squeak.org]",
      "id": "69baf85e19596e225431a164714ce771"
    },
    {
      "type": "html",
      "text": "\ndownload a copy of [[Squeak Smalltalk]] for your platform.",
      "id": "797f0e901f771fea7b3ea52e6343146a"
    },
    {
      "type": "html",
      "text": "\ninstall it, open up a morphic world, find the menu with the web browser in it.",
      "id": "f20f6885a20df0839779548c9e3d1135"
    },
    {
      "type": "html",
      "text": "\ncome back here.",
      "id": "49e10e46f8ba950f0ad56e13619bd306"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7ea942257985f509089bdd9f1c1f5ab8"
    },
    {
      "type": "html",
      "text": "<i>Step Two:</i>",
      "id": "a72bcf6663382f9114491400614109e3"
    },
    {
      "type": "html",
      "text": "<b>[[[Experienced Smalltalker]] post: [[Hints And Exercises]]]</b>",
      "id": "1d2e11eef6312794c833f9ffd0b2d2cb"
    },
    {
      "type": "html",
      "text": "<i>There are quite a few people who </i>",
      "id": "b6aa3242a0dd8c93524553c03fc315d1"
    },
    {
      "type": "html",
      "text": "<i>read Wiki regularly</i>",
      "id": "10483e5b6acc23003b646696d82c504c"
    },
    {
      "type": "html",
      "text": "<i>would like to learn [[Smalltalk Language]]</i>",
      "id": "ff7d23bf172775d27c9509f99f7f4304"
    },
    {
      "type": "html",
      "text": "<i>haven't the faintest idea where to start</i>",
      "id": "0b0cfdc8241db15a79a401322637b0d8"
    },
    {
      "type": "html",
      "text": "<i>or, need challenges that will help them discover the language.</i>",
      "id": "0623e12c2c217012239f2cdd87b7e372"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7ea942257985f509089bdd9f1c1f5ab8"
    },
    {
      "type": "html",
      "text": "See [http://wiki.cs.uiuc.edu/VisualWorks/Help+for+novices wiki.cs.uiuc.edu]\nand [http://wiki.cs.uiuc.edu/VisualWorks/Tutorials+and+courses wiki.cs.uiuc.edu]",
      "id": "995d15c22fe278811b845f0de488ee10"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7ea942257985f509089bdd9f1c1f5ab8"
    },
    {
      "type": "html",
      "text": "<i>This was posted some time ago to the [[Silicon Valley Patterns Group]] mailing list by [[James Saywer]]...</i>  There's a pdf version available at: [http://www.jera.com/techinfo/readingSmalltalk.pdf www.jera.com]",
      "id": "d03a0588b4d52958947a8d3a8d3d997e"
    },
    {
      "type": "html",
      "text": "\nMy presentation is based on the way I tackle\nany language:",
      "id": "845b14e851c32e981c10c164bef5d6df"
    },
    {
      "type": "html",
      "text": " examine the character set and tokens",
      "id": "7b43f91e6be11880eede2a168f366d33"
    },
    {
      "type": "html",
      "text": " examine the reserved words",
      "id": "5a455627cc33cf71aeb933383f56f164"
    },
    {
      "type": "html",
      "text": " examine each unique syntactic form",
      "id": "1c9ad1b8c07172a77be3956b56375fc7"
    },
    {
      "type": "html",
      "text": " examine each unique semantic form",
      "id": "536eb91290ecbf51606c3dfba2c0b318"
    },
    {
      "type": "html",
      "text": " examine the libraries <i>this is the 20% that requires 80% of the effort, [[Hints And Exercises]] please</i>",
      "id": "a4e7049871247dc09772887167161487"
    },
    {
      "type": "html",
      "text": "\nSo here goes.",
      "id": "4a6bcbc84809122fe8c473f0d043dc82"
    },
    {
      "type": "html",
      "text": "<b>Standard character set.</b>\nThe special characters are:",
      "id": "fd9a1d30a8c466ff9b22c19cfbb75471"
    },
    {
      "type": "html",
      "text": ": ^ . []|() ' \" ; #",
      "id": "39a477ac645318a1ff67278257fd4123"
    },
    {
      "type": "html",
      "text": "\nThe tokens are:",
      "id": "80e9c9dfefb4661b27fd8ffa9a76edc7"
    },
    {
      "type": "html",
      "text": "{identifier}",
      "id": "161d1eec7b45ad6745cef338aebfcb9d"
    },
    {
      "type": "html",
      "text": "{number}",
      "id": "dfe690e1e00fa1413e9f23205052ab84"
    },
    {
      "type": "html",
      "text": "{string}",
      "id": "5b29a336efdfe6750b25b8a9898e3124"
    },
    {
      "type": "html",
      "text": "{comment}",
      "id": "b463c41c1061da320ea59c7017c6f73b"
    },
    {
      "type": "html",
      "text": "{binaryOperator}",
      "id": "a29ad61cf0dc6d0bf2582a5d68898bb6"
    },
    {
      "type": "html",
      "text": "{keyword}",
      "id": "cfe262a6b94c3ba5a31055e74908ad95"
    },
    {
      "type": "html",
      "text": "{specialToken}",
      "id": "d3f0f28f9cca3b26ce74aa595753da45"
    },
    {
      "type": "html",
      "text": "\nIdentifiers are the same as you'd expect, except that we useCapitalLettersLikeThis rather_than_underscores.",
      "id": "7d8b67f41a1b87323b301d2adbebf5fd"
    },
    {
      "type": "code",
      "text": " Numbers are also as you'd expect.",
      "id": "7ee03c039821dd5fbcb3950d5814aa07"
    },
    {
      "type": "html",
      "text": "'Strings are enclosed in single quotes'",
      "id": "105472c1ece8e1bede10300639b196eb"
    },
    {
      "type": "html",
      "text": "\"Comments are enclosed in double quotes\"",
      "id": "625aea57883a00543defc75376a153e1"
    },
    {
      "type": "html",
      "text": "\nBinary operators are composed of one or two characters. The characters which can form a <i>{binaryOperator}</i>\nvary a little bit between implementations, but for the purpose of *reading* Smalltalk, you can assume that any non-alphaNumeric character which is not in the above list of special characters forms a <i>{binaryOperator}</i>.",
      "id": "e76ec14a0cdabebed8e3a3526e9470e7"
    },
    {
      "type": "html",
      "text": "+ is a {binaryOperator}.",
      "id": "8f272854e21501511aaf9eafabaad78d"
    },
    {
      "type": "html",
      "text": "++ is a {binary operator}.",
      "id": "286dd513afb1a394f254d6c6bae7debf"
    },
    {
      "type": "html",
      "text": "?* is a {binaryOperator}.",
      "id": "20a1ef762291f2ee1f5b8d32afa9316e"
    },
    {
      "type": "html",
      "text": "-> is a {binaryOperator}.",
      "id": "472741924881f5abe5510f7e7abebf88"
    },
    {
      "type": "html",
      "text": "\nA <i>{keyword}</i> is just an identifier with a colon on the end of it, e.g. ",
      "id": "069693c68b4b2e033bb25950c55e54df"
    },
    {
      "type": "code",
      "text": " anyIdentifierLikeThis:",
      "id": "697bf790cc694179966b0a586a29720d"
    },
    {
      "type": "html",
      "text": "\nis a keyword. In Smalltalk, a keyword is only special in the sense that it is part of a \"keyword message\". It is a distinct kind of token (different from an identifier or a string)\nbut it's meaning is not special. Some languages have 'keywords' like BEGIN and END with builtin special meanings. 'Keyword' in Smalltalk is not this sort of thing, it's strictly a syntactic form.",
      "id": "a301ff41a104525866a13e5b7a8d5926"
    },
    {
      "type": "html",
      "text": "<i>{[[Special Tokens]]}</i> are just the remaining tokens, the separator characters for parsing the language. openParenthesis is a '{specialToken}', carat is a <i>{specialToken}</i>, etc.",
      "id": "be2f2d76f483b1420f3483914d89c274"
    },
    {
      "type": "html",
      "text": "<b>there are five reserved words:</b>",
      "id": "9ff3cdb2216198d4f8017954780752c8"
    },
    {
      "type": "html",
      "text": "nil",
      "id": "bb679f6f5c74b310ad1958fe6faf6808"
    },
    {
      "type": "html",
      "text": "false",
      "id": "ab09c4d7c5af163e0fdbc3a6307510c2"
    },
    {
      "type": "html",
      "text": "true",
      "id": "c9810473a82876aa6712a0550f6052ff"
    },
    {
      "type": "html",
      "text": "self",
      "id": "6b90b20b515c15370a1858ffa668a304"
    },
    {
      "type": "html",
      "text": "super",
      "id": "e28b0141145163196fee898b46ea3632"
    },
    {
      "type": "html",
      "text": "\nnil is the value of any variable which hasn't yet been initialized. It is also the value of any variable whose initialization has been forgotten. It *should* be used to mean \"I have no idea\", \"Has never had a value\", or \"If it ever had a value, someone has since asked that we behave as if it never had one; therefore - I have no idea\".",
      "id": "d071b61870698e1a3a6f333186d93966"
    },
    {
      "type": "html",
      "text": "\nIt is sometimes incorrectly used for things that should be [[Null Object]]s or [[Exceptional Value]]s",
      "id": "d9b8fedf984c03b2672c600c520384e7"
    },
    {
      "type": "html",
      "text": "\ntrue and false are singleton instances of the classes True and False, respectively.",
      "id": "5455a1e7390578b2b3c3bc3ccf089752"
    },
    {
      "type": "html",
      "text": "\nself refers to the object whose class contains the method you are presently reading, when you are reading one and encounter the word 'self'. If the object's class has no such method, you must be reading the 'nearest' superclass which does have such a method.",
      "id": "668c7af70cd91a76154cd68c151028ce"
    },
    {
      "type": "html",
      "text": "\nsuper refers to the same object as self.",
      "id": "efdf58862a10f822687f699cf25388ee"
    },
    {
      "type": "html",
      "text": "\nRead that last sentence 100 times, until you accept it as fact, then move on.",
      "id": "09cc6d6398234e71fd2af8da440f3477"
    },
    {
      "type": "html",
      "text": "\nSo why have two names for one thing? This is a little hard to follow until you get used to it. 'super' is the same object as self, but when you try to figure out which method the object will execute in response to the message being sent, pretend the object's class didn't have such a method. In other words, if the object's class does have a method for the message you're sending, don't use it. *Always* start looking for the method in the object's superclass.",
      "id": "9e548009be7cbe6fafb5f3e98fdf21e3"
    },
    {
      "type": "html",
      "text": "\nThis is so you can extend your superclass' behavior\nwithout having to rewrite it. For example,",
      "id": "05de775bfa636e09b8a9051e9540c497"
    },
    {
      "type": "code",
      "text": "  do the same thing as the superclass, and then some:",
      "id": "141f8e8480e137b0db629e72ee832df6"
    },
    {
      "type": "code",
      "text": " >>aMethod",
      "id": "eb3eb7baad5e74640a5674f84c77a62a"
    },
    {
      "type": "code",
      "text": " super aMethod.\n self doSomeMoreStuff.",
      "id": "ba2b11b37252b6c5063c7839fb82b7af"
    },
    {
      "type": "html",
      "text": "\nor, do some new stuff, follow it up with whatever the superclass does:",
      "id": "e207e472c32abce40b9faf7baf3ca90b"
    },
    {
      "type": "code",
      "text": " >>aMethod",
      "id": "eb3eb7baad5e74640a5674f84c77a62a"
    },
    {
      "type": "code",
      "text": " self doSomeStuff.\n super aMethod.",
      "id": "64b98980f2150f79b2b6d8d27cb29374"
    },
    {
      "type": "html",
      "text": "\nThese are all reserved because the compiler, optimizer, and VM know about them.",
      "id": "2f1a5b45579933bcc80c09eda4460f35"
    },
    {
      "type": "html",
      "text": "<b>there is one overriding, but previously unfamiliar pair of concepts at work in Smalltalk:</b>",
      "id": "1215325156fb297a1b65bff700ff6d23"
    },
    {
      "type": "html",
      "text": " <b>everything</b> is an object.",
      "id": "9c89da4abb7c450ff960200b6218f307"
    },
    {
      "type": "html",
      "text": " <b>all code</b> takes the single conceptual form:",
      "id": "6235c1dbfa1427c3dba3a2167dfdb279"
    },
    {
      "type": "code",
      "text": " object messageSentToIt.",
      "id": "895d053fd675f4bdfc3d43e5f2a54fb4"
    },
    {
      "type": "html",
      "text": "\nIf you want to continue working in C++, Java, etc.then make very certain you do not understand what this means. If it starts to make sense to you then by all means stop reading Smalltalk, you are in serious danger. More on this later",
      "id": "070102aaed6e8dd1041341697e109de0"
    },
    {
      "type": "html",
      "text": "<b>there are 6 syntactic forms:</b>",
      "id": "6348bba1d52abcf508240aa2de3341ac"
    },
    {
      "type": "html",
      "text": "\n1 unary message send",
      "id": "61d8aeb580ddb08d069cb878123ac5d2"
    },
    {
      "type": "code",
      "text": " object isSentThisUnaryMessage.",
      "id": "4b02d684725698381b77f02ad1e7a7f4"
    },
    {
      "type": "html",
      "text": "2 binary message send",
      "id": "0d4b5dfd349847a7bf378135b59135d6"
    },
    {
      "type": "code",
      "text": " object {isSentThisBinaryOperator} withThisObjectAsOperand.",
      "id": "ef8472ace32184cea4352c19fcb2d0bf"
    },
    {
      "type": "html",
      "text": "3 keyword message send",
      "id": "4be3db412abdf92ec81a6fdf25ba7f7f"
    },
    {
      "type": "html",
      "text": "object isSentThisKeywordMessage:<br>withThisObjectAsParameter.",
      "id": "2179ef2067fcfaa88cd3ed4158ee3f6e"
    },
    {
      "type": "html",
      "text": "object isSent:<br>thisObject and: thisOtherObject.",
      "id": "206e1d371d137da7ff7435dddcb6fe64"
    },
    {
      "type": "html",
      "text": "object is:<br>sent this: message with: 4 parameters: ok.",
      "id": "5fadf89d2c43269b3f5deaefe507b974"
    },
    {
      "type": "html",
      "text": "object is:<br>sent this message: with parameters: (1 + 2).",
      "id": "f14fc66b46ed6f32f9e704f7b8ac83ec"
    },
    {
      "type": "html",
      "text": "object is:<br>(sent this) message: (with) parameters: (3).",
      "id": "08bc4fdf3e91ed4c323be9be4a1fecc2"
    },
    {
      "type": "html",
      "text": "\nThese are a little bit weirder, until you catch on.Keyword messages written as C function calls would look like this: ",
      "id": "edf93c131e87153695780a754380ae27"
    },
    {
      "type": "code",
      "text": " isSentThisKeywordMessage(object,andParameter);\n isSentAnd(object,thisObject,thisOtherObject);\n isThisWithParameters(object,sent,message,4,ok);\n isMessageParameters(object,this(sent),with,(1+2));\n isMessageParameters(object,(this(sent)),(with),(3));",
      "id": "17b39d8426b2b75a992bd983c1af4cd6"
    },
    {
      "type": "html",
      "text": "\nWhich is sort of why we *refer* to keyword messages, descriptively, like this:",
      "id": "c06febefe5103f169bf4bda0a236f63b"
    },
    {
      "type": "code",
      "text": " isSentThisKeywordMessage:\n isSent:and: \n is:this:with:parameters:\n is:message:parameters:",
      "id": "7abc01fa2949252d1e91f842ee74fe36"
    },
    {
      "type": "html",
      "text": "\neven though we actually write them as shown earlier.",
      "id": "de17258c89f86f80e1860a143f4d684e"
    },
    {
      "type": "html",
      "text": "\nNote that a parameter, or the operand of a binary message, can be either an object, or the result of sending a message to an object.",
      "id": "3a88092b1e7775a5807871bc3a5f68e9"
    },
    {
      "type": "html",
      "text": "\nJust as in C, where a parameter, or the operand of an operator, can be either",
      "id": "266b83a1f5143a8bb6864b3272640754"
    },
    {
      "type": "code",
      "text": "  :an object  a literal, a constant, a variable, a pointer\n  :the result of...  an expression, or a function call",
      "id": "01c77e8f5f9e2b1a2ccbf14c1429ab89"
    },
    {
      "type": "html",
      "text": "\n4 a block (a.k.a. closure, or block closure}",
      "id": "df5280de09621245aba0dc99681218fc"
    },
    {
      "type": "code",
      "text": " [thisObject willGetThisUnaryMessageSentToIt]",
      "id": "226867cdf7aff2e5f1ee2bcb9049ee9c"
    },
    {
      "type": "code",
      "text": " [:anyObject| anyObject willGetThisMessage]",
      "id": "b1d321317ae7dafaf49a9e46576ce606"
    },
    {
      "type": "html",
      "text": "[:first :second| thisObject gets:<br>first and: second]",
      "id": "5ff1e8828bc3e59cea29fb0a73e2cd98"
    },
    {
      "type": "html",
      "text": "[:first :second| first gets:<br>thisObject and: second]",
      "id": "44101a7c65c3090f4eb3b28e580fdc11"
    },
    {
      "type": "html",
      "text": "\nA block can be thought of as the only instance of an impromptu class with no superclass and exactly one method.(Not actually true, but think of it this way until you really need to understand otherwise).",
      "id": "28746d06663ad934d25a8e7bd7a257a3"
    },
    {
      "type": "html",
      "text": "<b>Q</b> What is the 'one method'?",
      "id": "3cd43564248e8634f4f42a73c6e9a72a"
    },
    {
      "type": "html",
      "text": "<b>A</b> Depends on the number of parameters.If the block has no parameters,",
      "id": "f4fed31bb2abcf7e02b13b45cd6148ea"
    },
    {
      "type": "code",
      "text": " [ \"parameter less block\" ]",
      "id": "55554987d4b880c4b62a8a4157472405"
    },
    {
      "type": "html",
      "text": "\nthen its only known method is:",
      "id": "6b3cc3f82d3b20686eb0c9a9d58c0f68"
    },
    {
      "type": "code",
      "text": " value",
      "id": "3cdc6ab575472dfed10273c9c0c74dfe"
    },
    {
      "type": "html",
      "text": "\nIf the block has one parameter,",
      "id": "709adcecfa0b67a840af408db617720e"
    },
    {
      "type": "html",
      "text": "[:x| \"a one parameter block\"]",
      "id": "d3fa139c2fb4278daebdc6f40b9613af"
    },
    {
      "type": "html",
      "text": "\nthen its only known method is:",
      "id": "6b3cc3f82d3b20686eb0c9a9d58c0f68"
    },
    {
      "type": "html",
      "text": "value:<br>actualParameter",
      "id": "3bd4423b0b8be0e051c074c611bf722a"
    },
    {
      "type": "html",
      "text": "\nIf the block has two parameters:",
      "id": "37d9cbcdb11c3817e585c88c124a3be3"
    },
    {
      "type": "code",
      "text": " [:x :y| \"a two parameter block\"]",
      "id": "a8e570f25c78d2e46854188c6a546a80"
    },
    {
      "type": "html",
      "text": "\nthen its only known method is:",
      "id": "6b3cc3f82d3b20686eb0c9a9d58c0f68"
    },
    {
      "type": "html",
      "text": "value:<br>firstActual value: secondActual",
      "id": "6104dce4b3bea52a1e36a6fc117d217a"
    },
    {
      "type": "html",
      "text": "\nand so on.",
      "id": "ea02acfd1d43096720337cc5cfca38b6"
    },
    {
      "type": "html",
      "text": "<b>Examples:</b>",
      "id": "d1bee987b4d63f2b92f88294f78a92ba"
    },
    {
      "type": "code",
      "text": " [object messageSent] ",
      "id": "45fae330f47de9b1ddebbe5be6b94079"
    },
    {
      "type": "html",
      "text": "\nWhen this block receives the unary 'value' message, the unary message 'messageSent' will be sent to the object 'object'.",
      "id": "123da611203679bc217fbdce409b5772"
    },
    {
      "type": "code",
      "text": " [some code] value.",
      "id": "62eb0ad8a181e647e9deec69df3eb345"
    },
    {
      "type": "html",
      "text": "\nThe 'value' message causes the block to 'execute' \"some code\".",
      "id": "e595e830be811a4c67dfbbc67faedae2"
    },
    {
      "type": "html",
      "text": "[:one| \"any code can be in here\"] value:<br>object",
      "id": "d3aada7c1e2eebbdfc239c27f761b6ca"
    },
    {
      "type": "html",
      "text": "\nThe 'value: object' message causes the formal parameter 'one' to be bound with the actual parameter 'object', and the code then \"executes\".",
      "id": "244c5c44ab1dd2fc549c3976a4650cde"
    },
    {
      "type": "html",
      "text": "\n5 return a value (a.k.a. early out)",
      "id": "4cf97fe8b14a831ea89835319f40c545"
    },
    {
      "type": "code",
      "text": " ^resultingObject.",
      "id": "9da31e0dd4f37c64b5d75c0a58eadb85"
    },
    {
      "type": "html",
      "text": "\nEvery method contains at least one of these, even if you can't see it. Usually, you can see it, and it is the last line of the method. If you can't see it, pretend you saw",
      "id": "b6a0cbcbc0cb54d43c338d563efa186e"
    },
    {
      "type": "code",
      "text": " ^self.",
      "id": "56951de6ad3c947098d1cc4b5fee1544"
    },
    {
      "type": "html",
      "text": "\nas the last line of the method. The other use for this thing is the \"early out\", as in",
      "id": "d54cec7e1272a8c411f5ef4c086db0a1"
    },
    {
      "type": "html",
      "text": "object isNil ifTrue:<br>[^thisObject].",
      "id": "563c8fb6cccb484fdcff2e13ddcc4ce1"
    },
    {
      "type": "code",
      "text": " object getsThisMessage.\n ^self.",
      "id": "9aece24b88f8c49e80755ff2dcc8b65b"
    },
    {
      "type": "html",
      "text": "\n6 method definition",
      "id": "0b1abd1f80f9fe343416e5b8460413b5"
    },
    {
      "type": "html",
      "text": "\nWhen using a browser, you don't actually see this syntactic form, but when Smalltalk is being described outside it's own environment, the following syntax is used to indicate the definition of a method:",
      "id": "93c9ef39fc8fdcf10fca1ba47a9ca296"
    },
    {
      "type": "code",
      "text": " ClassName>>methodSelector",
      "id": "b93eecbe29a4e98d734e01c12b500cf1"
    },
    {
      "type": "code",
      "text": " anObject getsThisMessage.\n ^resultingObject.",
      "id": "da52c72a2bf2596bac3738c0c4fd7c2d"
    },
    {
      "type": "html",
      "text": "\nThis means that the class named \"[[Class Name]]\" has a method definition for the unary message \"methodSelector\" and it's definition is as shown.",
      "id": "3e11d11e285a320c9b4b1125a9d06008"
    },
    {
      "type": "code",
      "text": " ClassName>>+ operand",
      "id": "f4da1a6d359a7d21e5836da31d9c2344"
    },
    {
      "type": "code",
      "text": " instanceVariable := instanceVariable + operand.\n ^self.",
      "id": "3000a144cc717964f511367e1ec35176"
    },
    {
      "type": "html",
      "text": "\nThis means that the class named \"[[Class Name]]\" has a method definition for the binary message \"+ operand\" and it's definition is as shown.",
      "id": "afc962bf955f3f21837e97e7ad178ed3"
    },
    {
      "type": "html",
      "text": "[[Class Name]]>>keyword:<br>object message: text",
      "id": "6bf6c98498a8a60ec993b409aecf41dd"
    },
    {
      "type": "code",
      "text": " Transcript \n   nextPut: object\n   ; nextPut: ' '\n   ; nextPutAll: text\n   ; nextPut: cr\n   .",
      "id": "47339b4b512df9783a32db3faa3b38ad"
    },
    {
      "type": "html",
      "text": "\nThis means that the class named \"[[Class Name]]\" has a method definition for the 2 parameter keyword message \"keyword:message:\" and it's definition is as shown.",
      "id": "c76076cfced012fc520766de92dcd043"
    },
    {
      "type": "html",
      "text": "\n7 Ok, I lied, there are seven syntactic forms.In that last example you see some semi-colons. The semi-colon is shorthand for",
      "id": "66d0c83bebb0fed380ce2afaa5f2d1d6"
    },
    {
      "type": "html",
      "text": "\nsend this next message to the same object (the one that received the last message).",
      "id": "3021e41be54a20435574f46e65603e5f"
    },
    {
      "type": "html",
      "text": "\nHence, the above example means",
      "id": "d0462fe3d2f04f764e6908cc115fd6c0"
    },
    {
      "type": "html",
      "text": " send the \"nextPut:\" keyword message to the object named \"Transcript\",",
      "id": "7dd9f8f092cdef43e9dfb3b1c7c747f5"
    },
    {
      "type": "html",
      "text": " then send another \"nextPut:\" message to the same object (i.e. Transcript),",
      "id": "a49e9727b2e6115951577ada5b3b0aa6"
    },
    {
      "type": "html",
      "text": " then send a \"nextPutAll:\" message to that same object,",
      "id": "443baeeeb1a8a66818216cba0981da99"
    },
    {
      "type": "html",
      "text": " then send another \"nextPut:\" message to it. ",
      "id": "3a67aa594f1f8f152c35cd1dc2f0038b"
    },
    {
      "type": "html",
      "text": " Finally, return yourself as the result of this method.",
      "id": "44bc029ac774e55aa61209de1fe7f191"
    },
    {
      "type": "html",
      "text": "\nThat's it!",
      "id": "f368a4531f3480410e36b5d9615343e2"
    },
    {
      "type": "html",
      "text": "\nLet me repeat - That's it! That's the entire language.The only thing left is to learn the library, and the tricks and idioms of the language.",
      "id": "2ac465dbb3bc6bc395c80ab84207a636"
    },
    {
      "type": "html",
      "text": "\nNow the astute reader will likely say something like",
      "id": "41c5587b9a039da0697dd89471a2f46b"
    },
    {
      "type": "html",
      "text": "\nWait a minute. You didn't cover Control-Flow.You didn't cover variables, types, allocation and deallocation, pointers, templates, virtual member functions, etc. etc. etc.",
      "id": "ae58fb625678fde3d56e9ef6909a1268"
    },
    {
      "type": "html",
      "text": "\nWell, such a reader would be wrong. I covered all of that. Ok, ok, you win. I never said anything about variables. That's because they have no syntactic form, other than assignment",
      "id": "843905035a3d2322384303983d14484b"
    },
    {
      "type": "code",
      "text": " instVar1 := 'aString'.",
      "id": "29a4b60a7259bea74a4fb05102d3fae7"
    },
    {
      "type": "html",
      "text": "\nand the notation for temporaries",
      "id": "2961d1cfee9ca569d265e0fb01934bbe"
    },
    {
      "type": "code",
      "text": " | aTemp anotherTemp |",
      "id": "f7d609c135513af21a2110765c7572c4"
    },
    {
      "type": "html",
      "text": "\nOther than this, you define instanceVariables by typing their names into a special place in the browser, and classVariables into a different special place. There is no syntactic form that goes with it, as it's not part of the \"code\".",
      "id": "32ab61189e24746517419f41601f0372"
    },
    {
      "type": "html",
      "text": "\nThere are no types, and no 'builtin' syntactic specialties like arithmetic, casting, dereferencing, etc. There is allocation, but it is always a message send: [[Class Name]] new\nand there is no deallocation. When the last reference to an object ceases to exist, the object is garbage collected. You couldn't cause a *(VOID *)(0) if you wanted to.",
      "id": "f0da13dbbf6bf64ff21a555d7164abbe"
    },
    {
      "type": "html",
      "text": "\nNone of the rest of that stuff exists either.",
      "id": "84285a9d45c0056a5091777fdeae7f54"
    },
    {
      "type": "html",
      "text": "\nFalse, you say. You didn't go over the special syntax for control flow.",
      "id": "5f6e7bfed24449207b1d32154b27bf5c"
    },
    {
      "type": "html",
      "text": "\nYes I did. There isn't any. Turns out you don't need such a concept as control flow littering up your syntax.",
      "id": "bf77619082ecf081430443f4af055a66"
    },
    {
      "type": "html",
      "text": "\nOh, don't be ridiculous, of course you do. It's completely special.",
      "id": "c3753391b9766743125acd4aed9b4d6a"
    },
    {
      "type": "html",
      "text": "\nSorry to disappoint you. Remember when I said \"think of blocks as if they only have one method\"? Here's where the truth comes out. Blocks also respond to a few other messages, like:",
      "id": "d970ecfbd367c51e289edde89ee959b1"
    },
    {
      "type": "html",
      "text": "[ ] whileTrue:<br>[ ]",
      "id": "3c01fdca721a92b1e95d5ded7943f4b1"
    },
    {
      "type": "html",
      "text": "\nWhich means:",
      "id": "dcdb08018e53c764d0d9e10addead2c4"
    },
    {
      "type": "html",
      "text": "\nsend a message to an object.",
      "id": "2401e5f9dc532bb4e2400d23faf986b5"
    },
    {
      "type": "html",
      "text": "\nLiterally ",
      "id": "9a45886c3f1d8f591e0ca6ed0fcfe29e"
    },
    {
      "type": "html",
      "text": "\nsend the keyword message",
      "id": "2c89baa6000ae4edb6ec093f95fa1bd6"
    },
    {
      "type": "code",
      "text": "   whileTrue:",
      "id": "b909906ce1d857300a95255ffbd35a77"
    },
    {
      "type": "html",
      "text": "(with it's parameter (the second block)) to an object (the first block).",
      "id": "863b07eeb685dcda65bce48ce47c165e"
    },
    {
      "type": "html",
      "text": "\nWhat do you suppose a block does when it gets such a message?",
      "id": "5046079ddb3627b0a771fee6dae00ff8"
    },
    {
      "type": "html",
      "text": "\nThe first block evaluates itself. (sends itself the 'value' message). If the result is true,  it sends a 'value' message  to the second block, and then starts over. Otherwise, it just quits, and returns 'false'.",
      "id": "f21a296140e7c5a3a8cf8594c148c30f"
    },
    {
      "type": "html",
      "text": "\nOf course Booleans also have methods for similar looking messages:",
      "id": "763ba766851a855ae0897a5a9bfabb2e"
    },
    {
      "type": "html",
      "text": "False>>ifTrue:<br>aBlock",
      "id": "a9ad0331e9e198de41926fd7f7e5f786"
    },
    {
      "type": "code",
      "text": "   ^false",
      "id": "6ccbda94df3afeb604186c0bf251b233"
    },
    {
      "type": "html",
      "text": "False>>ifFalse:<br>aBlock",
      "id": "054ce32da6bafbba11dbd4f473476485"
    },
    {
      "type": "code",
      "text": "   ^aBlock value",
      "id": "dc814f0cbd6cc1f279dbd3aafba46b10"
    },
    {
      "type": "html",
      "text": "\nFalse is a class, which has methods for these two messages. Since every object which is an instance of class False is by definition logically false, there is nothing to test. It effectively ignores requests to do something \"ifTrue:\" and always does the thing when asked to do something \"ifFalse:\".",
      "id": "47ae460fd31a574b3d921c61cb8ba3a3"
    },
    {
      "type": "html",
      "text": "(Don't think about this one too much, it will hurt you. You'll start to think Smalltalk might not be as slow as some think it is.) ",
      "id": "4080a1c4be2f32a15d9e9f39ab15ffb0"
    },
    {
      "type": "html",
      "text": "\nCheckout the library to see how variations on this simple theme build up every control structure you've ever thought of.",
      "id": "b7b2520119cee17ea3aeebc92198d5d5"
    },
    {
      "type": "html",
      "text": "\nExcept one.",
      "id": "3461b9f92086d65181f5bcaf45022f82"
    },
    {
      "type": "html",
      "text": "\nNobody ever put a SWITCH/CASE type of semantic form into the library.",
      "id": "aa3b4b066e689838853e5abf3ce0d6d1"
    },
    {
      "type": "html",
      "text": "\nDrives beginners nuts.",
      "id": "d9c06327b41598e2669c800a6f040cbd"
    },
    {
      "type": "html",
      "text": "\nLater you discover that your methods are always too short to care about such a thing, and when they seem to want for one, it means your design is not taking advantage of polymorphism the way it should.",
      "id": "88ce68e337e7468702318a68f698a968"
    },
    {
      "type": "html",
      "text": "\nSo you fix that instead...",
      "id": "28aa599985c0dccb514f42a1f71268d1"
    },
    {
      "type": "html",
      "text": "\nOne last piece of syntactic sugar to deal with.",
      "id": "b87b56439b7f27fcda06ee2ec5aaa181"
    },
    {
      "type": "code",
      "text": " 'ThisIsAString'",
      "id": "07ccfa0c47e017c31874de2a9e51fcf7"
    },
    {
      "type": "code",
      "text": " #ThisIsASymbol",
      "id": "1924fae31f81aa29e0e73da60cf0a866"
    },
    {
      "type": "html",
      "text": "\nThese behave pretty much the same, except that the latter is guaranteed to be a Singleton, with a unique hash value. Useful for table lookups and such, but otherwise you can ignore it.",
      "id": "d2ae99f0d2182f441bc02ab0a6f13637"
    },
    {
      "type": "html",
      "text": "\nHope this helps your attempts to read Smalltalk.",
      "id": "483a9bc77cd1e0d003ab8f4b9fc50dd0"
    },
    {
      "type": "html",
      "text": "\nBut be careful! The minute you get an inkling of what this all means, you'll find it very difficult to continue to use whatever language you're using now...\nBar none.",
      "id": "757c8958f0e9f1b8dda8099d2394f7ea"
    },
    {
      "type": "html",
      "text": "\nYou've been warned ;-)",
      "id": "55f3845fcadf43d08c9f958c7a90d4ae"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7ea942257985f509089bdd9f1c1f5ab8"
    },
    {
      "type": "html",
      "text": "\nOnce upon a time there was a book entitled \"A Quick Trip to Objectland\" that had the all-time best Smalltalk tutorial for newbies.  The book is unfortunately out of print, and was based on Smalltalk/V when it was still $100, and it was (maybe annoyingly) quirky.  I no long have a copy.  But the idea was a series of exercises mostly done in workspaces where Smalltalk told you how it worked.  The exercises made maximum use of the interactivity and reflectiveness of the Smalltalk environment.  ",
      "id": "3cd8f7dd05a037b5cb89c30d0b98eb2d"
    },
    {
      "type": "html",
      "text": "\nThe book has a second addition which came out in December 2001.  It is now based on Squeak and was a very good browse in the bookstore this morning. I'll probably go back for it soon. --[[Sean Oleary]]",
      "id": "6c9c0e521e120ce80466f4dc43d83bb9"
    },
    {
      "type": "html",
      "text": "<i>Squeak: A Quick Trip to [[Object Land]]</i> by [[Gene Korienek]], [[Tom Wrensch]], [[Doug Dechow]]. ISBN: 0201731142",
      "id": "c059931aaae10a45cfa5d0f00df81ea8"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7ea942257985f509089bdd9f1c1f5ab8"
    },
    {
      "type": "html",
      "text": "\nCheck out the tutorial at: \n[http://www.object-arts.com/EducationCentre/BeginnersGuide/BeginnersGuide.htm www.object-arts.com]",
      "id": "e6e03a2f204e8f27368c3b9a5893c9c8"
    },
    {
      "type": "html",
      "text": "\nIt has one of the clearest descriptions of the Smalltalk language's concepts and constructs that I've seen.  I tried many of the samples in the first section in Squeak, and they worked.",
      "id": "045e6c2d1dc5a7d22796c843d20a20f9"
    },
    {
      "type": "html",
      "text": "\n[[Michael Chean]]",
      "id": "e54fbbe0086d5219dacb94dfde1bb8f2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "7ea942257985f509089bdd9f1c1f5ab8"
    },
    {
      "type": "html",
      "text": "[[Category Smalltalk]]",
      "id": "5ff1955366d2700a7d84b826a896c797"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?SmalltalkTutorial c2.com]",
      "id": "70f46660d7027b96b36157d5cb7766c0"
    }
  ],
  "journal": [
    {
      "date": 1049153680000,
      "id": "93c1836d9ba74f676402966a095cdf7b",
      "type": "create",
      "item": {
        "title": "Smalltalk Tutorial",
        "story": [
          {
            "type": "html",
            "text": "<b>[[Smalltalk Tutorial]]</b>",
            "id": "6065d391e39dd026cda1a8c5eb0cd41e"
          },
          {
            "type": "html",
            "text": "<i>Step One:</i> point your browser at\n[http://www.squeak.org www.squeak.org]",
            "id": "69baf85e19596e225431a164714ce771"
          },
          {
            "type": "html",
            "text": "\ndownload a copy of [[Squeak Smalltalk]] for your platform.",
            "id": "797f0e901f771fea7b3ea52e6343146a"
          },
          {
            "type": "html",
            "text": "\ninstall it, open up a morphic world, find the menu with the web browser in it.",
            "id": "f20f6885a20df0839779548c9e3d1135"
          },
          {
            "type": "html",
            "text": "\ncome back here.",
            "id": "49e10e46f8ba950f0ad56e13619bd306"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7ea942257985f509089bdd9f1c1f5ab8"
          },
          {
            "type": "html",
            "text": "<i>Step Two:</i>",
            "id": "a72bcf6663382f9114491400614109e3"
          },
          {
            "type": "html",
            "text": "<b>[[[Experienced Smalltalker]] post: [[Hints And Exercises]]]</b>",
            "id": "1d2e11eef6312794c833f9ffd0b2d2cb"
          },
          {
            "type": "html",
            "text": "<i>There are quite a few people who </i>",
            "id": "b6aa3242a0dd8c93524553c03fc315d1"
          },
          {
            "type": "html",
            "text": "<i>read Wiki regularly</i>",
            "id": "10483e5b6acc23003b646696d82c504c"
          },
          {
            "type": "html",
            "text": "<i>would like to learn [[Smalltalk Language]]</i>",
            "id": "ff7d23bf172775d27c9509f99f7f4304"
          },
          {
            "type": "html",
            "text": "<i>haven't the faintest idea where to start</i>",
            "id": "0b0cfdc8241db15a79a401322637b0d8"
          },
          {
            "type": "html",
            "text": "<i>or, need challenges that will help them discover the language.</i>",
            "id": "0623e12c2c217012239f2cdd87b7e372"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7ea942257985f509089bdd9f1c1f5ab8"
          },
          {
            "type": "html",
            "text": "See [http://wiki.cs.uiuc.edu/VisualWorks/Help+for+novices wiki.cs.uiuc.edu]\nand [http://wiki.cs.uiuc.edu/VisualWorks/Tutorials+and+courses wiki.cs.uiuc.edu]",
            "id": "995d15c22fe278811b845f0de488ee10"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7ea942257985f509089bdd9f1c1f5ab8"
          },
          {
            "type": "html",
            "text": "<i>This was posted some time ago to the [[Silicon Valley Patterns Group]] mailing list by [[James Saywer]]...</i>  There's a pdf version available at: [http://www.jera.com/techinfo/readingSmalltalk.pdf www.jera.com]",
            "id": "d03a0588b4d52958947a8d3a8d3d997e"
          },
          {
            "type": "html",
            "text": "\nMy presentation is based on the way I tackle\nany language:",
            "id": "845b14e851c32e981c10c164bef5d6df"
          },
          {
            "type": "html",
            "text": " examine the character set and tokens",
            "id": "7b43f91e6be11880eede2a168f366d33"
          },
          {
            "type": "html",
            "text": " examine the reserved words",
            "id": "5a455627cc33cf71aeb933383f56f164"
          },
          {
            "type": "html",
            "text": " examine each unique syntactic form",
            "id": "1c9ad1b8c07172a77be3956b56375fc7"
          },
          {
            "type": "html",
            "text": " examine each unique semantic form",
            "id": "536eb91290ecbf51606c3dfba2c0b318"
          },
          {
            "type": "html",
            "text": " examine the libraries <i>this is the 20% that requires 80% of the effort, [[Hints And Exercises]] please</i>",
            "id": "a4e7049871247dc09772887167161487"
          },
          {
            "type": "html",
            "text": "\nSo here goes.",
            "id": "4a6bcbc84809122fe8c473f0d043dc82"
          },
          {
            "type": "html",
            "text": "<b>Standard character set.</b>\nThe special characters are:",
            "id": "fd9a1d30a8c466ff9b22c19cfbb75471"
          },
          {
            "type": "html",
            "text": ": ^ . []|() ' \" ; #",
            "id": "39a477ac645318a1ff67278257fd4123"
          },
          {
            "type": "html",
            "text": "\nThe tokens are:",
            "id": "80e9c9dfefb4661b27fd8ffa9a76edc7"
          },
          {
            "type": "html",
            "text": "{identifier}",
            "id": "161d1eec7b45ad6745cef338aebfcb9d"
          },
          {
            "type": "html",
            "text": "{number}",
            "id": "dfe690e1e00fa1413e9f23205052ab84"
          },
          {
            "type": "html",
            "text": "{string}",
            "id": "5b29a336efdfe6750b25b8a9898e3124"
          },
          {
            "type": "html",
            "text": "{comment}",
            "id": "b463c41c1061da320ea59c7017c6f73b"
          },
          {
            "type": "html",
            "text": "{binaryOperator}",
            "id": "a29ad61cf0dc6d0bf2582a5d68898bb6"
          },
          {
            "type": "html",
            "text": "{keyword}",
            "id": "cfe262a6b94c3ba5a31055e74908ad95"
          },
          {
            "type": "html",
            "text": "{specialToken}",
            "id": "d3f0f28f9cca3b26ce74aa595753da45"
          },
          {
            "type": "html",
            "text": "\nIdentifiers are the same as you'd expect, except that we useCapitalLettersLikeThis rather_than_underscores.",
            "id": "7d8b67f41a1b87323b301d2adbebf5fd"
          },
          {
            "type": "code",
            "text": " Numbers are also as you'd expect.",
            "id": "7ee03c039821dd5fbcb3950d5814aa07"
          },
          {
            "type": "html",
            "text": "'Strings are enclosed in single quotes'",
            "id": "105472c1ece8e1bede10300639b196eb"
          },
          {
            "type": "html",
            "text": "\"Comments are enclosed in double quotes\"",
            "id": "625aea57883a00543defc75376a153e1"
          },
          {
            "type": "html",
            "text": "\nBinary operators are composed of one or two characters. The characters which can form a <i>{binaryOperator}</i>\nvary a little bit between implementations, but for the purpose of *reading* Smalltalk, you can assume that any non-alphaNumeric character which is not in the above list of special characters forms a <i>{binaryOperator}</i>.",
            "id": "e76ec14a0cdabebed8e3a3526e9470e7"
          },
          {
            "type": "html",
            "text": "+ is a {binaryOperator}.",
            "id": "8f272854e21501511aaf9eafabaad78d"
          },
          {
            "type": "html",
            "text": "++ is a {binary operator}.",
            "id": "286dd513afb1a394f254d6c6bae7debf"
          },
          {
            "type": "html",
            "text": "?* is a {binaryOperator}.",
            "id": "20a1ef762291f2ee1f5b8d32afa9316e"
          },
          {
            "type": "html",
            "text": "-> is a {binaryOperator}.",
            "id": "472741924881f5abe5510f7e7abebf88"
          },
          {
            "type": "html",
            "text": "\nA <i>{keyword}</i> is just an identifier with a colon on the end of it, e.g. ",
            "id": "069693c68b4b2e033bb25950c55e54df"
          },
          {
            "type": "code",
            "text": " anyIdentifierLikeThis:",
            "id": "697bf790cc694179966b0a586a29720d"
          },
          {
            "type": "html",
            "text": "\nis a keyword. In Smalltalk, a keyword is only special in the sense that it is part of a \"keyword message\". It is a distinct kind of token (different from an identifier or a string)\nbut it's meaning is not special. Some languages have 'keywords' like BEGIN and END with builtin special meanings. 'Keyword' in Smalltalk is not this sort of thing, it's strictly a syntactic form.",
            "id": "a301ff41a104525866a13e5b7a8d5926"
          },
          {
            "type": "html",
            "text": "<i>{[[Special Tokens]]}</i> are just the remaining tokens, the separator characters for parsing the language. openParenthesis is a '{specialToken}', carat is a <i>{specialToken}</i>, etc.",
            "id": "be2f2d76f483b1420f3483914d89c274"
          },
          {
            "type": "html",
            "text": "<b>there are five reserved words:</b>",
            "id": "9ff3cdb2216198d4f8017954780752c8"
          },
          {
            "type": "html",
            "text": "nil",
            "id": "bb679f6f5c74b310ad1958fe6faf6808"
          },
          {
            "type": "html",
            "text": "false",
            "id": "ab09c4d7c5af163e0fdbc3a6307510c2"
          },
          {
            "type": "html",
            "text": "true",
            "id": "c9810473a82876aa6712a0550f6052ff"
          },
          {
            "type": "html",
            "text": "self",
            "id": "6b90b20b515c15370a1858ffa668a304"
          },
          {
            "type": "html",
            "text": "super",
            "id": "e28b0141145163196fee898b46ea3632"
          },
          {
            "type": "html",
            "text": "\nnil is the value of any variable which hasn't yet been initialized. It is also the value of any variable whose initialization has been forgotten. It *should* be used to mean \"I have no idea\", \"Has never had a value\", or \"If it ever had a value, someone has since asked that we behave as if it never had one; therefore - I have no idea\".",
            "id": "d071b61870698e1a3a6f333186d93966"
          },
          {
            "type": "html",
            "text": "\nIt is sometimes incorrectly used for things that should be [[Null Object]]s or [[Exceptional Value]]s",
            "id": "d9b8fedf984c03b2672c600c520384e7"
          },
          {
            "type": "html",
            "text": "\ntrue and false are singleton instances of the classes True and False, respectively.",
            "id": "5455a1e7390578b2b3c3bc3ccf089752"
          },
          {
            "type": "html",
            "text": "\nself refers to the object whose class contains the method you are presently reading, when you are reading one and encounter the word 'self'. If the object's class has no such method, you must be reading the 'nearest' superclass which does have such a method.",
            "id": "668c7af70cd91a76154cd68c151028ce"
          },
          {
            "type": "html",
            "text": "\nsuper refers to the same object as self.",
            "id": "efdf58862a10f822687f699cf25388ee"
          },
          {
            "type": "html",
            "text": "\nRead that last sentence 100 times, until you accept it as fact, then move on.",
            "id": "09cc6d6398234e71fd2af8da440f3477"
          },
          {
            "type": "html",
            "text": "\nSo why have two names for one thing? This is a little hard to follow until you get used to it. 'super' is the same object as self, but when you try to figure out which method the object will execute in response to the message being sent, pretend the object's class didn't have such a method. In other words, if the object's class does have a method for the message you're sending, don't use it. *Always* start looking for the method in the object's superclass.",
            "id": "9e548009be7cbe6fafb5f3e98fdf21e3"
          },
          {
            "type": "html",
            "text": "\nThis is so you can extend your superclass' behavior\nwithout having to rewrite it. For example,",
            "id": "05de775bfa636e09b8a9051e9540c497"
          },
          {
            "type": "code",
            "text": "  do the same thing as the superclass, and then some:",
            "id": "141f8e8480e137b0db629e72ee832df6"
          },
          {
            "type": "code",
            "text": " >>aMethod",
            "id": "eb3eb7baad5e74640a5674f84c77a62a"
          },
          {
            "type": "code",
            "text": " super aMethod.\n self doSomeMoreStuff.",
            "id": "ba2b11b37252b6c5063c7839fb82b7af"
          },
          {
            "type": "html",
            "text": "\nor, do some new stuff, follow it up with whatever the superclass does:",
            "id": "e207e472c32abce40b9faf7baf3ca90b"
          },
          {
            "type": "code",
            "text": " >>aMethod",
            "id": "eb3eb7baad5e74640a5674f84c77a62a"
          },
          {
            "type": "code",
            "text": " self doSomeStuff.\n super aMethod.",
            "id": "64b98980f2150f79b2b6d8d27cb29374"
          },
          {
            "type": "html",
            "text": "\nThese are all reserved because the compiler, optimizer, and VM know about them.",
            "id": "2f1a5b45579933bcc80c09eda4460f35"
          },
          {
            "type": "html",
            "text": "<b>there is one overriding, but previously unfamiliar pair of concepts at work in Smalltalk:</b>",
            "id": "1215325156fb297a1b65bff700ff6d23"
          },
          {
            "type": "html",
            "text": " <b>everything</b> is an object.",
            "id": "9c89da4abb7c450ff960200b6218f307"
          },
          {
            "type": "html",
            "text": " <b>all code</b> takes the single conceptual form:",
            "id": "6235c1dbfa1427c3dba3a2167dfdb279"
          },
          {
            "type": "code",
            "text": " object messageSentToIt.",
            "id": "895d053fd675f4bdfc3d43e5f2a54fb4"
          },
          {
            "type": "html",
            "text": "\nIf you want to continue working in C++, Java, etc.then make very certain you do not understand what this means. If it starts to make sense to you then by all means stop reading Smalltalk, you are in serious danger. More on this later",
            "id": "070102aaed6e8dd1041341697e109de0"
          },
          {
            "type": "html",
            "text": "<b>there are 6 syntactic forms:</b>",
            "id": "6348bba1d52abcf508240aa2de3341ac"
          },
          {
            "type": "html",
            "text": "\n1 unary message send",
            "id": "61d8aeb580ddb08d069cb878123ac5d2"
          },
          {
            "type": "code",
            "text": " object isSentThisUnaryMessage.",
            "id": "4b02d684725698381b77f02ad1e7a7f4"
          },
          {
            "type": "html",
            "text": "2 binary message send",
            "id": "0d4b5dfd349847a7bf378135b59135d6"
          },
          {
            "type": "code",
            "text": " object {isSentThisBinaryOperator} withThisObjectAsOperand.",
            "id": "ef8472ace32184cea4352c19fcb2d0bf"
          },
          {
            "type": "html",
            "text": "3 keyword message send",
            "id": "4be3db412abdf92ec81a6fdf25ba7f7f"
          },
          {
            "type": "html",
            "text": "object isSentThisKeywordMessage:<br>withThisObjectAsParameter.",
            "id": "2179ef2067fcfaa88cd3ed4158ee3f6e"
          },
          {
            "type": "html",
            "text": "object isSent:<br>thisObject and: thisOtherObject.",
            "id": "206e1d371d137da7ff7435dddcb6fe64"
          },
          {
            "type": "html",
            "text": "object is:<br>sent this: message with: 4 parameters: ok.",
            "id": "5fadf89d2c43269b3f5deaefe507b974"
          },
          {
            "type": "html",
            "text": "object is:<br>sent this message: with parameters: (1 + 2).",
            "id": "f14fc66b46ed6f32f9e704f7b8ac83ec"
          },
          {
            "type": "html",
            "text": "object is:<br>(sent this) message: (with) parameters: (3).",
            "id": "08bc4fdf3e91ed4c323be9be4a1fecc2"
          },
          {
            "type": "html",
            "text": "\nThese are a little bit weirder, until you catch on.Keyword messages written as C function calls would look like this: ",
            "id": "edf93c131e87153695780a754380ae27"
          },
          {
            "type": "code",
            "text": " isSentThisKeywordMessage(object,andParameter);\n isSentAnd(object,thisObject,thisOtherObject);\n isThisWithParameters(object,sent,message,4,ok);\n isMessageParameters(object,this(sent),with,(1+2));\n isMessageParameters(object,(this(sent)),(with),(3));",
            "id": "17b39d8426b2b75a992bd983c1af4cd6"
          },
          {
            "type": "html",
            "text": "\nWhich is sort of why we *refer* to keyword messages, descriptively, like this:",
            "id": "c06febefe5103f169bf4bda0a236f63b"
          },
          {
            "type": "code",
            "text": " isSentThisKeywordMessage:\n isSent:and: \n is:this:with:parameters:\n is:message:parameters:",
            "id": "7abc01fa2949252d1e91f842ee74fe36"
          },
          {
            "type": "html",
            "text": "\neven though we actually write them as shown earlier.",
            "id": "de17258c89f86f80e1860a143f4d684e"
          },
          {
            "type": "html",
            "text": "\nNote that a parameter, or the operand of a binary message, can be either an object, or the result of sending a message to an object.",
            "id": "3a88092b1e7775a5807871bc3a5f68e9"
          },
          {
            "type": "html",
            "text": "\nJust as in C, where a parameter, or the operand of an operator, can be either",
            "id": "266b83a1f5143a8bb6864b3272640754"
          },
          {
            "type": "code",
            "text": "  :an object  a literal, a constant, a variable, a pointer\n  :the result of...  an expression, or a function call",
            "id": "01c77e8f5f9e2b1a2ccbf14c1429ab89"
          },
          {
            "type": "html",
            "text": "\n4 a block (a.k.a. closure, or block closure}",
            "id": "df5280de09621245aba0dc99681218fc"
          },
          {
            "type": "code",
            "text": " [thisObject willGetThisUnaryMessageSentToIt]",
            "id": "226867cdf7aff2e5f1ee2bcb9049ee9c"
          },
          {
            "type": "code",
            "text": " [:anyObject| anyObject willGetThisMessage]",
            "id": "b1d321317ae7dafaf49a9e46576ce606"
          },
          {
            "type": "html",
            "text": "[:first :second| thisObject gets:<br>first and: second]",
            "id": "5ff1e8828bc3e59cea29fb0a73e2cd98"
          },
          {
            "type": "html",
            "text": "[:first :second| first gets:<br>thisObject and: second]",
            "id": "44101a7c65c3090f4eb3b28e580fdc11"
          },
          {
            "type": "html",
            "text": "\nA block can be thought of as the only instance of an impromptu class with no superclass and exactly one method.(Not actually true, but think of it this way until you really need to understand otherwise).",
            "id": "28746d06663ad934d25a8e7bd7a257a3"
          },
          {
            "type": "html",
            "text": "<b>Q</b> What is the 'one method'?",
            "id": "3cd43564248e8634f4f42a73c6e9a72a"
          },
          {
            "type": "html",
            "text": "<b>A</b> Depends on the number of parameters.If the block has no parameters,",
            "id": "f4fed31bb2abcf7e02b13b45cd6148ea"
          },
          {
            "type": "code",
            "text": " [ \"parameter less block\" ]",
            "id": "55554987d4b880c4b62a8a4157472405"
          },
          {
            "type": "html",
            "text": "\nthen its only known method is:",
            "id": "6b3cc3f82d3b20686eb0c9a9d58c0f68"
          },
          {
            "type": "code",
            "text": " value",
            "id": "3cdc6ab575472dfed10273c9c0c74dfe"
          },
          {
            "type": "html",
            "text": "\nIf the block has one parameter,",
            "id": "709adcecfa0b67a840af408db617720e"
          },
          {
            "type": "html",
            "text": "[:x| \"a one parameter block\"]",
            "id": "d3fa139c2fb4278daebdc6f40b9613af"
          },
          {
            "type": "html",
            "text": "\nthen its only known method is:",
            "id": "6b3cc3f82d3b20686eb0c9a9d58c0f68"
          },
          {
            "type": "html",
            "text": "value:<br>actualParameter",
            "id": "3bd4423b0b8be0e051c074c611bf722a"
          },
          {
            "type": "html",
            "text": "\nIf the block has two parameters:",
            "id": "37d9cbcdb11c3817e585c88c124a3be3"
          },
          {
            "type": "code",
            "text": " [:x :y| \"a two parameter block\"]",
            "id": "a8e570f25c78d2e46854188c6a546a80"
          },
          {
            "type": "html",
            "text": "\nthen its only known method is:",
            "id": "6b3cc3f82d3b20686eb0c9a9d58c0f68"
          },
          {
            "type": "html",
            "text": "value:<br>firstActual value: secondActual",
            "id": "6104dce4b3bea52a1e36a6fc117d217a"
          },
          {
            "type": "html",
            "text": "\nand so on.",
            "id": "ea02acfd1d43096720337cc5cfca38b6"
          },
          {
            "type": "html",
            "text": "<b>Examples:</b>",
            "id": "d1bee987b4d63f2b92f88294f78a92ba"
          },
          {
            "type": "code",
            "text": " [object messageSent] ",
            "id": "45fae330f47de9b1ddebbe5be6b94079"
          },
          {
            "type": "html",
            "text": "\nWhen this block receives the unary 'value' message, the unary message 'messageSent' will be sent to the object 'object'.",
            "id": "123da611203679bc217fbdce409b5772"
          },
          {
            "type": "code",
            "text": " [some code] value.",
            "id": "62eb0ad8a181e647e9deec69df3eb345"
          },
          {
            "type": "html",
            "text": "\nThe 'value' message causes the block to 'execute' \"some code\".",
            "id": "e595e830be811a4c67dfbbc67faedae2"
          },
          {
            "type": "html",
            "text": "[:one| \"any code can be in here\"] value:<br>object",
            "id": "d3aada7c1e2eebbdfc239c27f761b6ca"
          },
          {
            "type": "html",
            "text": "\nThe 'value: object' message causes the formal parameter 'one' to be bound with the actual parameter 'object', and the code then \"executes\".",
            "id": "244c5c44ab1dd2fc549c3976a4650cde"
          },
          {
            "type": "html",
            "text": "\n5 return a value (a.k.a. early out)",
            "id": "4cf97fe8b14a831ea89835319f40c545"
          },
          {
            "type": "code",
            "text": " ^resultingObject.",
            "id": "9da31e0dd4f37c64b5d75c0a58eadb85"
          },
          {
            "type": "html",
            "text": "\nEvery method contains at least one of these, even if you can't see it. Usually, you can see it, and it is the last line of the method. If you can't see it, pretend you saw",
            "id": "b6a0cbcbc0cb54d43c338d563efa186e"
          },
          {
            "type": "code",
            "text": " ^self.",
            "id": "56951de6ad3c947098d1cc4b5fee1544"
          },
          {
            "type": "html",
            "text": "\nas the last line of the method. The other use for this thing is the \"early out\", as in",
            "id": "d54cec7e1272a8c411f5ef4c086db0a1"
          },
          {
            "type": "html",
            "text": "object isNil ifTrue:<br>[^thisObject].",
            "id": "563c8fb6cccb484fdcff2e13ddcc4ce1"
          },
          {
            "type": "code",
            "text": " object getsThisMessage.\n ^self.",
            "id": "9aece24b88f8c49e80755ff2dcc8b65b"
          },
          {
            "type": "html",
            "text": "\n6 method definition",
            "id": "0b1abd1f80f9fe343416e5b8460413b5"
          },
          {
            "type": "html",
            "text": "\nWhen using a browser, you don't actually see this syntactic form, but when Smalltalk is being described outside it's own environment, the following syntax is used to indicate the definition of a method:",
            "id": "93c9ef39fc8fdcf10fca1ba47a9ca296"
          },
          {
            "type": "code",
            "text": " ClassName>>methodSelector",
            "id": "b93eecbe29a4e98d734e01c12b500cf1"
          },
          {
            "type": "code",
            "text": " anObject getsThisMessage.\n ^resultingObject.",
            "id": "da52c72a2bf2596bac3738c0c4fd7c2d"
          },
          {
            "type": "html",
            "text": "\nThis means that the class named \"[[Class Name]]\" has a method definition for the unary message \"methodSelector\" and it's definition is as shown.",
            "id": "3e11d11e285a320c9b4b1125a9d06008"
          },
          {
            "type": "code",
            "text": " ClassName>>+ operand",
            "id": "f4da1a6d359a7d21e5836da31d9c2344"
          },
          {
            "type": "code",
            "text": " instanceVariable := instanceVariable + operand.\n ^self.",
            "id": "3000a144cc717964f511367e1ec35176"
          },
          {
            "type": "html",
            "text": "\nThis means that the class named \"[[Class Name]]\" has a method definition for the binary message \"+ operand\" and it's definition is as shown.",
            "id": "afc962bf955f3f21837e97e7ad178ed3"
          },
          {
            "type": "html",
            "text": "[[Class Name]]>>keyword:<br>object message: text",
            "id": "6bf6c98498a8a60ec993b409aecf41dd"
          },
          {
            "type": "code",
            "text": " Transcript \n   nextPut: object\n   ; nextPut: ' '\n   ; nextPutAll: text\n   ; nextPut: cr\n   .",
            "id": "47339b4b512df9783a32db3faa3b38ad"
          },
          {
            "type": "html",
            "text": "\nThis means that the class named \"[[Class Name]]\" has a method definition for the 2 parameter keyword message \"keyword:message:\" and it's definition is as shown.",
            "id": "c76076cfced012fc520766de92dcd043"
          },
          {
            "type": "html",
            "text": "\n7 Ok, I lied, there are seven syntactic forms.In that last example you see some semi-colons. The semi-colon is shorthand for",
            "id": "66d0c83bebb0fed380ce2afaa5f2d1d6"
          },
          {
            "type": "html",
            "text": "\nsend this next message to the same object (the one that received the last message).",
            "id": "3021e41be54a20435574f46e65603e5f"
          },
          {
            "type": "html",
            "text": "\nHence, the above example means",
            "id": "d0462fe3d2f04f764e6908cc115fd6c0"
          },
          {
            "type": "html",
            "text": " send the \"nextPut:\" keyword message to the object named \"Transcript\",",
            "id": "7dd9f8f092cdef43e9dfb3b1c7c747f5"
          },
          {
            "type": "html",
            "text": " then send another \"nextPut:\" message to the same object (i.e. Transcript),",
            "id": "a49e9727b2e6115951577ada5b3b0aa6"
          },
          {
            "type": "html",
            "text": " then send a \"nextPutAll:\" message to that same object,",
            "id": "443baeeeb1a8a66818216cba0981da99"
          },
          {
            "type": "html",
            "text": " then send another \"nextPut:\" message to it. ",
            "id": "3a67aa594f1f8f152c35cd1dc2f0038b"
          },
          {
            "type": "html",
            "text": " Finally, return yourself as the result of this method.",
            "id": "44bc029ac774e55aa61209de1fe7f191"
          },
          {
            "type": "html",
            "text": "\nThat's it!",
            "id": "f368a4531f3480410e36b5d9615343e2"
          },
          {
            "type": "html",
            "text": "\nLet me repeat - That's it! That's the entire language.The only thing left is to learn the library, and the tricks and idioms of the language.",
            "id": "2ac465dbb3bc6bc395c80ab84207a636"
          },
          {
            "type": "html",
            "text": "\nNow the astute reader will likely say something like",
            "id": "41c5587b9a039da0697dd89471a2f46b"
          },
          {
            "type": "html",
            "text": "\nWait a minute. You didn't cover Control-Flow.You didn't cover variables, types, allocation and deallocation, pointers, templates, virtual member functions, etc. etc. etc.",
            "id": "ae58fb625678fde3d56e9ef6909a1268"
          },
          {
            "type": "html",
            "text": "\nWell, such a reader would be wrong. I covered all of that. Ok, ok, you win. I never said anything about variables. That's because they have no syntactic form, other than assignment",
            "id": "843905035a3d2322384303983d14484b"
          },
          {
            "type": "code",
            "text": " instVar1 := 'aString'.",
            "id": "29a4b60a7259bea74a4fb05102d3fae7"
          },
          {
            "type": "html",
            "text": "\nand the notation for temporaries",
            "id": "2961d1cfee9ca569d265e0fb01934bbe"
          },
          {
            "type": "code",
            "text": " | aTemp anotherTemp |",
            "id": "f7d609c135513af21a2110765c7572c4"
          },
          {
            "type": "html",
            "text": "\nOther than this, you define instanceVariables by typing their names into a special place in the browser, and classVariables into a different special place. There is no syntactic form that goes with it, as it's not part of the \"code\".",
            "id": "32ab61189e24746517419f41601f0372"
          },
          {
            "type": "html",
            "text": "\nThere are no types, and no 'builtin' syntactic specialties like arithmetic, casting, dereferencing, etc. There is allocation, but it is always a message send: [[Class Name]] new\nand there is no deallocation. When the last reference to an object ceases to exist, the object is garbage collected. You couldn't cause a *(VOID *)(0) if you wanted to.",
            "id": "f0da13dbbf6bf64ff21a555d7164abbe"
          },
          {
            "type": "html",
            "text": "\nNone of the rest of that stuff exists either.",
            "id": "84285a9d45c0056a5091777fdeae7f54"
          },
          {
            "type": "html",
            "text": "\nFalse, you say. You didn't go over the special syntax for control flow.",
            "id": "5f6e7bfed24449207b1d32154b27bf5c"
          },
          {
            "type": "html",
            "text": "\nYes I did. There isn't any. Turns out you don't need such a concept as control flow littering up your syntax.",
            "id": "bf77619082ecf081430443f4af055a66"
          },
          {
            "type": "html",
            "text": "\nOh, don't be ridiculous, of course you do. It's completely special.",
            "id": "c3753391b9766743125acd4aed9b4d6a"
          },
          {
            "type": "html",
            "text": "\nSorry to disappoint you. Remember when I said \"think of blocks as if they only have one method\"? Here's where the truth comes out. Blocks also respond to a few other messages, like:",
            "id": "d970ecfbd367c51e289edde89ee959b1"
          },
          {
            "type": "html",
            "text": "[ ] whileTrue:<br>[ ]",
            "id": "3c01fdca721a92b1e95d5ded7943f4b1"
          },
          {
            "type": "html",
            "text": "\nWhich means:",
            "id": "dcdb08018e53c764d0d9e10addead2c4"
          },
          {
            "type": "html",
            "text": "\nsend a message to an object.",
            "id": "2401e5f9dc532bb4e2400d23faf986b5"
          },
          {
            "type": "html",
            "text": "\nLiterally ",
            "id": "9a45886c3f1d8f591e0ca6ed0fcfe29e"
          },
          {
            "type": "html",
            "text": "\nsend the keyword message",
            "id": "2c89baa6000ae4edb6ec093f95fa1bd6"
          },
          {
            "type": "code",
            "text": "   whileTrue:",
            "id": "b909906ce1d857300a95255ffbd35a77"
          },
          {
            "type": "html",
            "text": "(with it's parameter (the second block)) to an object (the first block).",
            "id": "863b07eeb685dcda65bce48ce47c165e"
          },
          {
            "type": "html",
            "text": "\nWhat do you suppose a block does when it gets such a message?",
            "id": "5046079ddb3627b0a771fee6dae00ff8"
          },
          {
            "type": "html",
            "text": "\nThe first block evaluates itself. (sends itself the 'value' message). If the result is true,  it sends a 'value' message  to the second block, and then starts over. Otherwise, it just quits, and returns 'false'.",
            "id": "f21a296140e7c5a3a8cf8594c148c30f"
          },
          {
            "type": "html",
            "text": "\nOf course Booleans also have methods for similar looking messages:",
            "id": "763ba766851a855ae0897a5a9bfabb2e"
          },
          {
            "type": "html",
            "text": "False>>ifTrue:<br>aBlock",
            "id": "a9ad0331e9e198de41926fd7f7e5f786"
          },
          {
            "type": "code",
            "text": "   ^false",
            "id": "6ccbda94df3afeb604186c0bf251b233"
          },
          {
            "type": "html",
            "text": "False>>ifFalse:<br>aBlock",
            "id": "054ce32da6bafbba11dbd4f473476485"
          },
          {
            "type": "code",
            "text": "   ^aBlock value",
            "id": "dc814f0cbd6cc1f279dbd3aafba46b10"
          },
          {
            "type": "html",
            "text": "\nFalse is a class, which has methods for these two messages. Since every object which is an instance of class False is by definition logically false, there is nothing to test. It effectively ignores requests to do something \"ifTrue:\" and always does the thing when asked to do something \"ifFalse:\".",
            "id": "47ae460fd31a574b3d921c61cb8ba3a3"
          },
          {
            "type": "html",
            "text": "(Don't think about this one too much, it will hurt you. You'll start to think Smalltalk might not be as slow as some think it is.) ",
            "id": "4080a1c4be2f32a15d9e9f39ab15ffb0"
          },
          {
            "type": "html",
            "text": "\nCheckout the library to see how variations on this simple theme build up every control structure you've ever thought of.",
            "id": "b7b2520119cee17ea3aeebc92198d5d5"
          },
          {
            "type": "html",
            "text": "\nExcept one.",
            "id": "3461b9f92086d65181f5bcaf45022f82"
          },
          {
            "type": "html",
            "text": "\nNobody ever put a SWITCH/CASE type of semantic form into the library.",
            "id": "aa3b4b066e689838853e5abf3ce0d6d1"
          },
          {
            "type": "html",
            "text": "\nDrives beginners nuts.",
            "id": "d9c06327b41598e2669c800a6f040cbd"
          },
          {
            "type": "html",
            "text": "\nLater you discover that your methods are always too short to care about such a thing, and when they seem to want for one, it means your design is not taking advantage of polymorphism the way it should.",
            "id": "88ce68e337e7468702318a68f698a968"
          },
          {
            "type": "html",
            "text": "\nSo you fix that instead...",
            "id": "28aa599985c0dccb514f42a1f71268d1"
          },
          {
            "type": "html",
            "text": "\nOne last piece of syntactic sugar to deal with.",
            "id": "b87b56439b7f27fcda06ee2ec5aaa181"
          },
          {
            "type": "code",
            "text": " 'ThisIsAString'",
            "id": "07ccfa0c47e017c31874de2a9e51fcf7"
          },
          {
            "type": "code",
            "text": " #ThisIsASymbol",
            "id": "1924fae31f81aa29e0e73da60cf0a866"
          },
          {
            "type": "html",
            "text": "\nThese behave pretty much the same, except that the latter is guaranteed to be a Singleton, with a unique hash value. Useful for table lookups and such, but otherwise you can ignore it.",
            "id": "d2ae99f0d2182f441bc02ab0a6f13637"
          },
          {
            "type": "html",
            "text": "\nHope this helps your attempts to read Smalltalk.",
            "id": "483a9bc77cd1e0d003ab8f4b9fc50dd0"
          },
          {
            "type": "html",
            "text": "\nBut be careful! The minute you get an inkling of what this all means, you'll find it very difficult to continue to use whatever language you're using now...\nBar none.",
            "id": "757c8958f0e9f1b8dda8099d2394f7ea"
          },
          {
            "type": "html",
            "text": "\nYou've been warned ;-)",
            "id": "55f3845fcadf43d08c9f958c7a90d4ae"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7ea942257985f509089bdd9f1c1f5ab8"
          },
          {
            "type": "html",
            "text": "\nOnce upon a time there was a book entitled \"A Quick Trip to Objectland\" that had the all-time best Smalltalk tutorial for newbies.  The book is unfortunately out of print, and was based on Smalltalk/V when it was still $100, and it was (maybe annoyingly) quirky.  I no long have a copy.  But the idea was a series of exercises mostly done in workspaces where Smalltalk told you how it worked.  The exercises made maximum use of the interactivity and reflectiveness of the Smalltalk environment.  ",
            "id": "3cd8f7dd05a037b5cb89c30d0b98eb2d"
          },
          {
            "type": "html",
            "text": "\nThe book has a second addition which came out in December 2001.  It is now based on Squeak and was a very good browse in the bookstore this morning. I'll probably go back for it soon. --[[Sean Oleary]]",
            "id": "6c9c0e521e120ce80466f4dc43d83bb9"
          },
          {
            "type": "html",
            "text": "<i>Squeak: A Quick Trip to [[Object Land]]</i> by [[Gene Korienek]], [[Tom Wrensch]], [[Doug Dechow]]. ISBN: 0201731142",
            "id": "c059931aaae10a45cfa5d0f00df81ea8"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7ea942257985f509089bdd9f1c1f5ab8"
          },
          {
            "type": "html",
            "text": "\nCheck out the tutorial at: \n[http://www.object-arts.com/EducationCentre/BeginnersGuide/BeginnersGuide.htm www.object-arts.com]",
            "id": "e6e03a2f204e8f27368c3b9a5893c9c8"
          },
          {
            "type": "html",
            "text": "\nIt has one of the clearest descriptions of the Smalltalk language's concepts and constructs that I've seen.  I tried many of the samples in the first section in Squeak, and they worked.",
            "id": "045e6c2d1dc5a7d22796c843d20a20f9"
          },
          {
            "type": "html",
            "text": "\n[[Michael Chean]]",
            "id": "e54fbbe0086d5219dacb94dfde1bb8f2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "7ea942257985f509089bdd9f1c1f5ab8"
          },
          {
            "type": "html",
            "text": "[[Category Smalltalk]]",
            "id": "5ff1955366d2700a7d84b826a896c797"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?SmalltalkTutorial c2.com]",
            "id": "70f46660d7027b96b36157d5cb7766c0"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1626999518178
    }
  ]
}