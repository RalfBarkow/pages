{
  "title": "Live Serialization",
  "story": [
    {
      "type": "markdown",
      "id": "a33e3381c2c3dcbd",
      "text": "The fact that both sides of the conversation are objects in live Smalltalk systems affords many optimizations that aren’t possible when serializing objects to a static file. For this reason, we call this live serialization. \n"
    },
    {
      "type": "markdown",
      "id": "1b5bc79600e63ba5",
      "text": "For example, when transferring a compiled method between systems, if the method’s literals are objects which already exist in the receiving system, we may write references to them rather than serializing them.\n"
    },
    {
      "type": "markdown",
      "id": "713785d71b81e6c4",
      "text": "We can also take special measures when the receiving system is missing the classes whose instances we want to transfer. Instead of assuming in advance that the receiving system lacks the classes whose instances we’re transferring, and including them in our payload, as a static serialization file would, we can transfer such classes only on demand. This yields much higher accuracy in object transfer, and far fewer bytes sent over the wire. Since live serialization is part of a complete remote messaging protocol, any messages at all can be sent from either side to complete an object transfer.\n"
    },
    {
      "type": "markdown",
      "id": "cff9283d6730d556",
      "text": "With a receiver, selector, and parameters specified, the receiving system can perform the message sent from the sending system. Each object in the system is responsible for serializing itself over a [[Tether]]. If the answer to the remote message is a literal object, like a symbol or integer, it will write the bytes of its value on the Tether instance handling the message. If the answer isn’t a literal object, by default it will write a reference to itself. Developers can choose to pass objects by value or by reference as they see fit."
    },
    {
      "type": "markdown",
      "id": "e48bc5a7d7f42d94",
      "text": "⇒ [[Scheduling]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Live Serialization",
        "story": []
      },
      "date": 1676867765276
    },
    {
      "id": "a33e3381c2c3dcbd",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "a33e3381c2c3dcbd",
        "text": "The fact that both sides of the conversation are objects in live Smalltalk systems affords many optimizations that aren’t possible when serializing objects to a static file. For this reason, we call this live serialization. \n"
      },
      "attribution": {
        "page": "2023-02-20"
      },
      "date": 1676867767982
    },
    {
      "id": "1b5bc79600e63ba5",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "1b5bc79600e63ba5",
        "text": "For example, when transferring a compiled method between systems, if the method’s literals are objects which already exist in the receiving system, we may write references to them rather than serializing them.\n"
      },
      "after": "a33e3381c2c3dcbd",
      "attribution": {
        "page": "2023-02-20"
      },
      "date": 1676867770365
    },
    {
      "id": "713785d71b81e6c4",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "713785d71b81e6c4",
        "text": "We can also take special measures when the receiving system is missing the classes whose instances we want to transfer. Instead of assuming in advance that the receiving system lacks the classes whose instances we’re transferring, and including them in our payload, as a static serialization file would, we can transfer such classes only on demand. This yields much higher accuracy in object transfer, and far fewer bytes sent over the wire. Since live serialization is part of a complete remote messaging protocol, any messages at all can be sent from either side to complete an object transfer.\n"
      },
      "after": "1b5bc79600e63ba5",
      "attribution": {
        "page": "2023-02-20"
      },
      "date": 1676867772649
    },
    {
      "id": "cff9283d6730d556",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "cff9283d6730d556",
        "text": "With a receiver, selector, and parameters specified, the receiving system can perform the message sent from the sending system. Each object in the system is responsible for serializing itself over a [[Tether]]. If the answer to the remote message is a literal object, like a symbol or integer, it will write the bytes of its value on the Tether instance handling the message. If the answer isn’t a literal object, by default it will write a reference to itself. Developers can choose to pass objects by value or by reference as they see fit."
      },
      "after": "713785d71b81e6c4",
      "attribution": {
        "page": "2023-02-20"
      },
      "date": 1676867775124
    },
    {
      "id": "e48bc5a7d7f42d94",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "e48bc5a7d7f42d94",
        "text": "Next: [[Scheduling]]"
      },
      "after": "cff9283d6730d556",
      "attribution": {
        "page": "2023-02-20"
      },
      "date": 1676867777932
    },
    {
      "type": "edit",
      "id": "e48bc5a7d7f42d94",
      "item": {
        "type": "markdown",
        "id": "e48bc5a7d7f42d94",
        "text": "⇒ [[Scheduling]]"
      },
      "date": 1676867788902
    }
  ]
}