{
  "title": "Mixins For Cee Plus Plus",
  "story": [
    {
      "type": "html",
      "text": "Here are some examples of [[Mix In]]s for [[Cee Plus Plus]]",
      "id": "3118e2df47abbf9c9f3b3afb147b16a1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ed0cd833b96644359e2ce0c9b89856d3"
    },
    {
      "type": "html",
      "text": "In the context of C++ [[[Cee Plus Plus]]] the term mixin is usually used to match [[Bjarne Stroustrup]]'s definition:",
      "id": "960831f69b6e467c31fe97960e19c708"
    },
    {
      "type": "html",
      "text": "<i>A class that provides some - but not all - of the implementation for a virtual base class is often called a \"mixin\".</i>",
      "id": "0eddd35c164ae8a8ab7f5792ac8f62ad"
    },
    {
      "type": "html",
      "text": "\nYou can for example have a virtual abstract base class that defines the interfaces for the import and export of values and a flock of derived classes that implement different means to either export or import, but not both. Then you can combine these second-layer classes to form different concrete classes.",
      "id": "3fdc903675a4ee9448598ca23f87c1aa"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ed0cd833b96644359e2ce0c9b89856d3"
    },
    {
      "type": "html",
      "text": "\nI believe that it's possible to [[Mix In]] from above (parent classes) or [[Mix In]] from below ([[Abstract Subclass]]es).  The above example shows an example of [[Mix In]] from the parent classes through [[Multiple Inheritance]].  For [[Cee Plus Plus]], [[Abstract Subclass]]es written by [[Using Templates]].",
      "id": "a2aae4f765ad7a9460c518ec70ddb712"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ed0cd833b96644359e2ce0c9b89856d3"
    },
    {
      "type": "html",
      "text": "<b>Examples for [[Mix In]] through [[Abstract Subclass]]</b>",
      "id": "2441e620d7f656dfee7e79740aaa4b2c"
    },
    {
      "type": "html",
      "text": "\nThe following code implements the [[Singleton Pattern]]",
      "id": "f91f6450806e66cc98bddc74236e5df0"
    },
    {
      "type": "code",
      "text": " template<class S''''''ingletonClass>",
      "id": "8a30d3a5e86f14757565d6e086d57b44"
    },
    {
      "type": "html",
      "text": "class Singleton :<br>public S<b></b>ingletonClass",
      "id": "c31d35b922e0c1947b0f317266efaacb"
    },
    {
      "type": "code",
      "text": " {\n  public:\n    /** Singleton creation function */\n    static Singleton & instance()\n    {\n      if(_instance.get() == NULL)\n      {\n        _instance = auto_ptr<Singleton<S''''''ingletonClass> >(new Singleton);\n        assert(_instance.get() != NULL);\n      }\n      return *_instance;\n    }",
      "id": "18f6f7a732f723c6bafcf2b22f94a39c"
    },
    {
      "type": "code",
      "text": "  protected:\n    /** Singleton instance holder */\n    static auto_ptr<Singleton<S''''''ingletonClass> > _instance;\n };",
      "id": "3bf6160f954668a34dc68e015ad40132"
    },
    {
      "type": "code",
      "text": " /** static instance definition */",
      "id": "7eba815790d20e8a6895f4dc8cb4eb35"
    },
    {
      "type": "code",
      "text": " template<class S''''''ingletonClass> auto_ptr<Singleton<S''''''ingletonClass> > Singleton<S''''''ingletonClass>::_instance;",
      "id": "6c9f8ab27f627eb13280c3148c59caee"
    },
    {
      "type": "html",
      "text": "\nIf we have a class called M<b></b>yClass:",
      "id": "ffda91550daa4fcfefb7b3d46b5c4988"
    },
    {
      "type": "code",
      "text": " class M''''''yClass\n {\n  public:\n    virtual void bar();\n    virtual ~M''''''yClass();\n  protected:\n    M''''''yClass();\n };",
      "id": "0c295e67f8759233f1cc939eb60c9b9c"
    },
    {
      "type": "html",
      "text": "\nThe constructor can either be public or protected depending on the need.  A protected constructor can ensure that the class will only be possible to be constructed by subclasses in this case the Singleton [[Mix In]].",
      "id": "b5a5ce8370a1f3994d6bbb008fd61577"
    },
    {
      "type": "html",
      "text": "\nThe [[Mix In]] can be used like:",
      "id": "281e3282827dfd55a29c6d2567190a5b"
    },
    {
      "type": "code",
      "text": " void foo()\n {\n   Singleton<M''''''yClass>::instance().bar();\n }",
      "id": "c2ea8352215fe0827a5742325960a28d"
    },
    {
      "type": "html",
      "text": "\nor",
      "id": "4c440fcb7e16a00caa61c7ad9a2e9ff7"
    },
    {
      "type": "html",
      "text": "class S<b></b>ingletonMyClass :<br>public Singleton<M<b></b>yClass>",
      "id": "fdec79303125d2b6c6c46185e24067be"
    },
    {
      "type": "code",
      "text": " {\n };",
      "id": "9519e9f7dde39ec5483646e260836bcf"
    },
    {
      "type": "code",
      "text": " void foo()\n {\n   S''''''ingletonMyClass::instance().bar();\n }",
      "id": "5cc96fd646e09afeb55bf09352573f27"
    },
    {
      "type": "html",
      "text": "\nThe STL's auto_ptr is used to ensure proper destruction.  In this example, the abstract method this [[Mix In]] requires from the parent class is the default constructor.  The disadvantage is that it is harder to pass parameters through constructor, but the advantage is [[Once And Only Once]] because any class can be a singleton by mixing in the [[Abstract Subclass]] without rewriting the same code.",
      "id": "f876e186d22c9c94f2e58bdc024ec32e"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?MixinsForCeePlusPlus c2.com]",
      "id": "e694473f9859456a4366cc1d8de850ca"
    }
  ],
  "journal": [
    {
      "date": 1123096986000,
      "id": "8579b31c4080efbd93d533bbaf20e552",
      "type": "create",
      "item": {
        "title": "Mixins For Cee Plus Plus",
        "story": [
          {
            "type": "html",
            "text": "Here are some examples of [[Mix In]]s for [[Cee Plus Plus]]",
            "id": "3118e2df47abbf9c9f3b3afb147b16a1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ed0cd833b96644359e2ce0c9b89856d3"
          },
          {
            "type": "html",
            "text": "In the context of C++ [[[Cee Plus Plus]]] the term mixin is usually used to match [[Bjarne Stroustrup]]'s definition:",
            "id": "960831f69b6e467c31fe97960e19c708"
          },
          {
            "type": "html",
            "text": "<i>A class that provides some - but not all - of the implementation for a virtual base class is often called a \"mixin\".</i>",
            "id": "0eddd35c164ae8a8ab7f5792ac8f62ad"
          },
          {
            "type": "html",
            "text": "\nYou can for example have a virtual abstract base class that defines the interfaces for the import and export of values and a flock of derived classes that implement different means to either export or import, but not both. Then you can combine these second-layer classes to form different concrete classes.",
            "id": "3fdc903675a4ee9448598ca23f87c1aa"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ed0cd833b96644359e2ce0c9b89856d3"
          },
          {
            "type": "html",
            "text": "\nI believe that it's possible to [[Mix In]] from above (parent classes) or [[Mix In]] from below ([[Abstract Subclass]]es).  The above example shows an example of [[Mix In]] from the parent classes through [[Multiple Inheritance]].  For [[Cee Plus Plus]], [[Abstract Subclass]]es written by [[Using Templates]].",
            "id": "a2aae4f765ad7a9460c518ec70ddb712"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ed0cd833b96644359e2ce0c9b89856d3"
          },
          {
            "type": "html",
            "text": "<b>Examples for [[Mix In]] through [[Abstract Subclass]]</b>",
            "id": "2441e620d7f656dfee7e79740aaa4b2c"
          },
          {
            "type": "html",
            "text": "\nThe following code implements the [[Singleton Pattern]]",
            "id": "f91f6450806e66cc98bddc74236e5df0"
          },
          {
            "type": "code",
            "text": " template<class S''''''ingletonClass>",
            "id": "8a30d3a5e86f14757565d6e086d57b44"
          },
          {
            "type": "html",
            "text": "class Singleton :<br>public S<b></b>ingletonClass",
            "id": "c31d35b922e0c1947b0f317266efaacb"
          },
          {
            "type": "code",
            "text": " {\n  public:\n    /** Singleton creation function */\n    static Singleton & instance()\n    {\n      if(_instance.get() == NULL)\n      {\n        _instance = auto_ptr<Singleton<S''''''ingletonClass> >(new Singleton);\n        assert(_instance.get() != NULL);\n      }\n      return *_instance;\n    }",
            "id": "18f6f7a732f723c6bafcf2b22f94a39c"
          },
          {
            "type": "code",
            "text": "  protected:\n    /** Singleton instance holder */\n    static auto_ptr<Singleton<S''''''ingletonClass> > _instance;\n };",
            "id": "3bf6160f954668a34dc68e015ad40132"
          },
          {
            "type": "code",
            "text": " /** static instance definition */",
            "id": "7eba815790d20e8a6895f4dc8cb4eb35"
          },
          {
            "type": "code",
            "text": " template<class S''''''ingletonClass> auto_ptr<Singleton<S''''''ingletonClass> > Singleton<S''''''ingletonClass>::_instance;",
            "id": "6c9f8ab27f627eb13280c3148c59caee"
          },
          {
            "type": "html",
            "text": "\nIf we have a class called M<b></b>yClass:",
            "id": "ffda91550daa4fcfefb7b3d46b5c4988"
          },
          {
            "type": "code",
            "text": " class M''''''yClass\n {\n  public:\n    virtual void bar();\n    virtual ~M''''''yClass();\n  protected:\n    M''''''yClass();\n };",
            "id": "0c295e67f8759233f1cc939eb60c9b9c"
          },
          {
            "type": "html",
            "text": "\nThe constructor can either be public or protected depending on the need.  A protected constructor can ensure that the class will only be possible to be constructed by subclasses in this case the Singleton [[Mix In]].",
            "id": "b5a5ce8370a1f3994d6bbb008fd61577"
          },
          {
            "type": "html",
            "text": "\nThe [[Mix In]] can be used like:",
            "id": "281e3282827dfd55a29c6d2567190a5b"
          },
          {
            "type": "code",
            "text": " void foo()\n {\n   Singleton<M''''''yClass>::instance().bar();\n }",
            "id": "c2ea8352215fe0827a5742325960a28d"
          },
          {
            "type": "html",
            "text": "\nor",
            "id": "4c440fcb7e16a00caa61c7ad9a2e9ff7"
          },
          {
            "type": "html",
            "text": "class S<b></b>ingletonMyClass :<br>public Singleton<M<b></b>yClass>",
            "id": "fdec79303125d2b6c6c46185e24067be"
          },
          {
            "type": "code",
            "text": " {\n };",
            "id": "9519e9f7dde39ec5483646e260836bcf"
          },
          {
            "type": "code",
            "text": " void foo()\n {\n   S''''''ingletonMyClass::instance().bar();\n }",
            "id": "5cc96fd646e09afeb55bf09352573f27"
          },
          {
            "type": "html",
            "text": "\nThe STL's auto_ptr is used to ensure proper destruction.  In this example, the abstract method this [[Mix In]] requires from the parent class is the default constructor.  The disadvantage is that it is harder to pass parameters through constructor, but the advantage is [[Once And Only Once]] because any class can be a singleton by mixing in the [[Abstract Subclass]] without rewriting the same code.",
            "id": "f876e186d22c9c94f2e58bdc024ec32e"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?MixinsForCeePlusPlus c2.com]",
            "id": "e694473f9859456a4366cc1d8de850ca"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1631860180335
    }
  ]
}