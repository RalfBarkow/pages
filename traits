{
  "title": "Traits",
  "story": [
    {
      "type": "markdown",
      "id": "8bf746afcd06b5ad",
      "text": "Traits are pure units of [[Behavior]] that can be composed to form classes or other **traits**. The trait composition mechanism is an alternative to multiple or mixin inheritance in which **the composer has full control over the trait composition**. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
    },
    {
      "type": "pagefold",
      "id": "068507cbad713c1b",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "a477dcafb6a527a2",
      "text": "\"Maybe **Traits** can be used here to represent multiple concepts.\" – serge.st via [https://discord.com/channels/223421264751099906/301695389176692736/967794730199027792 discord]"
    },
    {
      "type": "markdown",
      "id": "65929caf66a74198",
      "text": "here ⇒ HemalVarambhia — 2022-04-24\nMathematical fields - set over which + and × are defined\n> In summary, the [[Complex Numbers]] form a rich structure that is simultaneously an algebraically closed field, a commutative algebra over the reals, and a Euclidean vector space of dimension two. [https://discord.com/channels/223421264751099906/301695389176692736/967787200865501225 discord]"
    },
    {
      "type": "pagefold",
      "id": "ed175b3ebbb60c89",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "7780dbaf0e13f11b",
      "text": "We think **Traits** can do the job of [[Interfaces]] (or similar concept with different name) in other languages, it just seems that in [[Smalltalk]] there is decades of inertia in stylistically using sub-classing as the only hammer for the job, a large majority of the time. Maybe 'dog-food' some software-assessment/moldable development architectural checks/constraints at feenk to slowly but steadily increase the use of well defined Traits, specially in parts of Gt that users would modify (which sounds like potentially everywhere. We are not using terms like 'always' or 'never' or 'none', as we know parts of Gt do use Traits, but second that more would be very useful for users."
    },
    {
      "type": "pagefold",
      "id": "0f2c6a38f9e728ab",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "555a67c2396956d4",
      "text": "The [[Pharo]] as one particular Smalltalk implementation slightly changed the language metamodel in version 7 by an introduction of [[Stateful Traits]]. It was not possible to cover it with the [[FAMIX]] meta-model."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Traits",
        "story": []
      },
      "date": 1629796517469
    },
    {
      "item": {
        "type": "factory",
        "id": "8bf746afcd06b5ad"
      },
      "id": "8bf746afcd06b5ad",
      "type": "add",
      "date": 1629796519235
    },
    {
      "type": "edit",
      "id": "8bf746afcd06b5ad",
      "item": {
        "type": "markdown",
        "id": "8bf746afcd06b5ad",
        "text": "[https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page] – "
      },
      "date": 1629796541208
    },
    {
      "type": "edit",
      "id": "8bf746afcd06b5ad",
      "item": {
        "type": "markdown",
        "id": "8bf746afcd06b5ad",
        "text": "[https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page] – Traits are pure units of behavior that can be composed to form classes or other traits. The trait composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance."
      },
      "date": 1629796552714
    },
    {
      "item": {
        "type": "factory",
        "id": "7780dbaf0e13f11b"
      },
      "id": "7780dbaf0e13f11b",
      "type": "add",
      "after": "8bf746afcd06b5ad",
      "date": 1631861338606
    },
    {
      "type": "edit",
      "id": "7780dbaf0e13f11b",
      "item": {
        "type": "markdown",
        "id": "7780dbaf0e13f11b",
        "text": "We think"
      },
      "date": 1631861343246
    },
    {
      "type": "edit",
      "id": "7780dbaf0e13f11b",
      "item": {
        "type": "markdown",
        "id": "7780dbaf0e13f11b",
        "text": "We think [[Traits]] can do the job of [[Interfaces]] (or similar concept with different name) in other languages, it just seems that in [[Smalltalk]] there is decades of inertia in stylistically using sub-classing as the only hammer for the job, a large majority of the time. Maybe 'dog-food' some software-assessment/moldable development architectural checks/constraints at feenk to slowly but steadily increase the use of well defined Traits, specially in parts of Gt that users would modify (which sounds like potentially everywhere. We are not using terms like 'always' or 'never' or 'none', as we know parts of Gt do use Traits, but second that more would be very useful for users."
      },
      "date": 1631861433907
    },
    {
      "id": "555a67c2396956d4",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "555a67c2396956d4",
        "text": "The [[Pharo]] as one particular Smalltalk implementation slightly changed the language metamodel in version 7 by an introduction of stateful traits. It was not possible to cover it with the FAMIX meta-model. It was impossible to describe languages like SQL, various types of domain specific languages nor data without significant ad-hoc extensions to the FAMIX meta-model. "
      },
      "after": "7780dbaf0e13f11b",
      "date": 1644223033013
    },
    {
      "item": {
        "type": "factory",
        "id": "0f2c6a38f9e728ab"
      },
      "id": "0f2c6a38f9e728ab",
      "type": "add",
      "after": "555a67c2396956d4",
      "date": 1644223041419
    },
    {
      "type": "edit",
      "id": "0f2c6a38f9e728ab",
      "item": {
        "type": "pagefold",
        "id": "0f2c6a38f9e728ab",
        "text": "~"
      },
      "date": 1644223045092
    },
    {
      "id": "0f2c6a38f9e728ab",
      "type": "move",
      "order": [
        "8bf746afcd06b5ad",
        "7780dbaf0e13f11b",
        "0f2c6a38f9e728ab",
        "555a67c2396956d4"
      ],
      "date": 1644223047184
    },
    {
      "type": "edit",
      "id": "555a67c2396956d4",
      "item": {
        "type": "paragraph",
        "id": "555a67c2396956d4",
        "text": "The [[Pharo]] as one particular Smalltalk implementation slightly changed the language metamodel in version 7 by an introduction of stateful [[traits]]. It was not possible to cover it with the FAMIX meta-model. It was impossible to describe languages like SQL, various types of domain specific languages nor data without significant ad-hoc extensions to the FAMIX meta-model. "
      },
      "date": 1644223062100
    },
    {
      "type": "edit",
      "id": "555a67c2396956d4",
      "item": {
        "type": "paragraph",
        "id": "555a67c2396956d4",
        "text": "The [[Pharo]] as one particular Smalltalk implementation slightly changed the language metamodel in version 7 by an introduction of stateful [[traits]]. It was not possible to cover it with the [[FAMIX]] meta-model."
      },
      "date": 1644223115714
    },
    {
      "type": "edit",
      "id": "8bf746afcd06b5ad",
      "item": {
        "type": "markdown",
        "id": "8bf746afcd06b5ad",
        "text": "Traits are pure units of behavior that can be composed to form classes or other traits. The trait composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
      },
      "date": 1645018330987
    },
    {
      "type": "edit",
      "id": "8bf746afcd06b5ad",
      "item": {
        "type": "markdown",
        "id": "8bf746afcd06b5ad",
        "text": "Traits are pure units of behavior that can be composed to form classes or other [[traits]]. The trait composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
      },
      "date": 1645018348618
    },
    {
      "type": "edit",
      "id": "8bf746afcd06b5ad",
      "item": {
        "type": "markdown",
        "id": "8bf746afcd06b5ad",
        "text": "Traits are pure units of [[behavior]] that can be composed to form classes or other [[traits]]. The trait composition mechanism is an alternative to multiple or mixin inheritance in which the composer has full control over the trait composition. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
      },
      "date": 1651217673816
    },
    {
      "item": {
        "type": "factory",
        "id": "ed175b3ebbb60c89"
      },
      "id": "ed175b3ebbb60c89",
      "type": "add",
      "after": "555a67c2396956d4",
      "date": 1652204559730
    },
    {
      "type": "edit",
      "id": "ed175b3ebbb60c89",
      "item": {
        "type": "pagefold",
        "id": "ed175b3ebbb60c89",
        "text": "~"
      },
      "date": 1652204562840
    },
    {
      "id": "ed175b3ebbb60c89",
      "type": "move",
      "order": [
        "8bf746afcd06b5ad",
        "ed175b3ebbb60c89",
        "7780dbaf0e13f11b",
        "0f2c6a38f9e728ab",
        "555a67c2396956d4"
      ],
      "date": 1652204570150
    },
    {
      "item": {
        "type": "factory",
        "id": "a477dcafb6a527a2"
      },
      "id": "a477dcafb6a527a2",
      "type": "add",
      "after": "555a67c2396956d4",
      "date": 1652204572610
    },
    {
      "id": "a477dcafb6a527a2",
      "type": "move",
      "order": [
        "8bf746afcd06b5ad",
        "a477dcafb6a527a2",
        "ed175b3ebbb60c89",
        "7780dbaf0e13f11b",
        "0f2c6a38f9e728ab",
        "555a67c2396956d4"
      ],
      "date": 1652204576607
    },
    {
      "item": {
        "type": "factory",
        "id": "068507cbad713c1b"
      },
      "id": "068507cbad713c1b",
      "type": "add",
      "after": "555a67c2396956d4",
      "date": 1652204579363
    },
    {
      "type": "edit",
      "id": "068507cbad713c1b",
      "item": {
        "type": "pagefold",
        "id": "068507cbad713c1b",
        "text": "~"
      },
      "date": 1652204582520
    },
    {
      "id": "068507cbad713c1b",
      "type": "move",
      "order": [
        "8bf746afcd06b5ad",
        "068507cbad713c1b",
        "a477dcafb6a527a2",
        "ed175b3ebbb60c89",
        "7780dbaf0e13f11b",
        "0f2c6a38f9e728ab",
        "555a67c2396956d4"
      ],
      "date": 1652204586019
    },
    {
      "type": "edit",
      "id": "a477dcafb6a527a2",
      "item": {
        "type": "paragraph",
        "id": "a477dcafb6a527a2",
        "text": "\"Maybe Traits can be used here to represent multiple concepts.\" – "
      },
      "date": 1652204600590
    },
    {
      "type": "edit",
      "id": "a477dcafb6a527a2",
      "item": {
        "type": "paragraph",
        "id": "a477dcafb6a527a2",
        "text": "\"Maybe Traits can be used here to represent multiple concepts.\" – serge.st"
      },
      "date": 1652204611750
    },
    {
      "type": "edit",
      "id": "a477dcafb6a527a2",
      "item": {
        "type": "paragraph",
        "id": "a477dcafb6a527a2",
        "text": "\"Maybe Traits can be used here to represent multiple concepts.\" – serge.st via [https://discord.com/channels/223421264751099906/301695389176692736/967794730199027792 discord]"
      },
      "date": 1652204626942
    },
    {
      "type": "add",
      "id": "65929caf66a74198",
      "item": {
        "type": "paragraph",
        "id": "65929caf66a74198",
        "text": "here – HemalVarambhia — 24.04.2022\nMathematical fields - set over which + and × are defined\nIn summary, the complex numbers form a rich structure that is simultaneously an algebraically closed field, a commutative algebra over the reals, and a Euclidean vector space of dimension two."
      },
      "after": "a477dcafb6a527a2",
      "date": 1652204662609
    },
    {
      "type": "edit",
      "id": "65929caf66a74198",
      "item": {
        "type": "paragraph",
        "id": "65929caf66a74198",
        "text": "here ⇒ HemalVarambhia — 24.04.2022\nMathematical fields - set over which + and × are defined\nIn summary, the complex numbers form a rich structure that is simultaneously an algebraically closed field, a commutative algebra over the reals, and a Euclidean vector space of dimension two."
      },
      "date": 1652204675520
    },
    {
      "type": "edit",
      "id": "65929caf66a74198",
      "item": {
        "type": "paragraph",
        "id": "65929caf66a74198",
        "text": "here ⇒ HemalVarambhia — 2022-04-24\nMathematical fields - set over which + and × are defined\nIn summary, the complex numbers form a rich structure that is simultaneously an algebraically closed field, a commutative algebra over the reals, and a Euclidean vector space of dimension two."
      },
      "date": 1652204688926
    },
    {
      "type": "edit",
      "id": "65929caf66a74198",
      "item": {
        "type": "paragraph",
        "id": "65929caf66a74198",
        "text": "here ⇒ HemalVarambhia — 2022-04-24\nMathematical fields - set over which + and × are defined\n> In summary, the complex numbers form a rich structure that is simultaneously an algebraically closed field, a commutative algebra over the reals, and a Euclidean vector space of dimension two."
      },
      "date": 1652204698813
    },
    {
      "type": "edit",
      "id": "65929caf66a74198",
      "item": {
        "type": "markdown",
        "id": "65929caf66a74198",
        "text": "here ⇒ HemalVarambhia — 2022-04-24\nMathematical fields - set over which + and × are defined\n> In summary, the complex numbers form a rich structure that is simultaneously an algebraically closed field, a commutative algebra over the reals, and a Euclidean vector space of dimension two."
      },
      "date": 1652204700284
    },
    {
      "type": "edit",
      "id": "65929caf66a74198",
      "item": {
        "type": "markdown",
        "id": "65929caf66a74198",
        "text": "here ⇒ HemalVarambhia — 2022-04-24\nMathematical fields - set over which + and × are defined\n> In summary, the complex numbers form a rich structure that is simultaneously an algebraically closed field, a commutative algebra over the reals, and a Euclidean vector space of dimension two. [https://discord.com/channels/223421264751099906/301695389176692736/967787200865501225 discord]"
      },
      "date": 1652204743667
    },
    {
      "type": "edit",
      "id": "a477dcafb6a527a2",
      "item": {
        "type": "paragraph",
        "id": "a477dcafb6a527a2",
        "text": "\"Maybe [[Traits]] can be used here to represent multiple concepts.\" – serge.st via [https://discord.com/channels/223421264751099906/301695389176692736/967794730199027792 discord]"
      },
      "date": 1652204758198
    },
    {
      "type": "edit",
      "id": "65929caf66a74198",
      "item": {
        "type": "markdown",
        "id": "65929caf66a74198",
        "text": "here ⇒ HemalVarambhia — 2022-04-24\nMathematical fields - set over which + and × are defined\n> In summary, the [[complex numbers]] form a rich structure that is simultaneously an algebraically closed field, a commutative algebra over the reals, and a Euclidean vector space of dimension two. [https://discord.com/channels/223421264751099906/301695389176692736/967787200865501225 discord]"
      },
      "date": 1652204787322
    },
    {
      "type": "edit",
      "id": "8bf746afcd06b5ad",
      "item": {
        "type": "markdown",
        "id": "8bf746afcd06b5ad",
        "text": "Traits are pure units of [[behavior]] that can be composed to form classes or other [[traits]]. The trait composition mechanism is an alternative to multiple or mixin inheritance in which **the composer has full control over the trait composition**. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
      },
      "date": 1662261326746
    },
    {
      "type": "edit",
      "id": "555a67c2396956d4",
      "item": {
        "type": "paragraph",
        "id": "555a67c2396956d4",
        "text": "The [[Pharo]] as one particular Smalltalk implementation slightly changed the language metamodel in version 7 by an introduction of [[stateful traits]]. It was not possible to cover it with the [[FAMIX]] meta-model."
      },
      "date": 1662261472493
    },
    {
      "type": "edit",
      "id": "555a67c2396956d4",
      "item": {
        "type": "paragraph",
        "id": "555a67c2396956d4",
        "text": "The [[Pharo]] as one particular Smalltalk implementation slightly changed the language metamodel in version 7 by an introduction of [[\nStateful Traits]]. It was not possible to cover it with the [[FAMIX]] meta-model."
      },
      "date": 1662261504928
    },
    {
      "type": "edit",
      "id": "555a67c2396956d4",
      "item": {
        "type": "paragraph",
        "id": "555a67c2396956d4",
        "text": "The [[Pharo]] as one particular Smalltalk implementation slightly changed the language metamodel in version 7 by an introduction of [[Stateful Traits]]. It was not possible to cover it with the [[FAMIX]] meta-model."
      },
      "date": 1662261512848
    },
    {
      "type": "edit",
      "id": "8bf746afcd06b5ad",
      "item": {
        "type": "markdown",
        "id": "8bf746afcd06b5ad",
        "text": "Traits are pure units of [[behavior]] that can be composed to form classes or other **traits**. The trait composition mechanism is an alternative to multiple or mixin inheritance in which **the composer has full control over the trait composition**. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
      },
      "date": 1662262528671
    },
    {
      "type": "edit",
      "id": "a477dcafb6a527a2",
      "item": {
        "type": "paragraph",
        "id": "a477dcafb6a527a2",
        "text": "\"Maybe **Traits** can be used here to represent multiple concepts.\" – serge.st via [https://discord.com/channels/223421264751099906/301695389176692736/967794730199027792 discord]"
      },
      "date": 1662262622012
    },
    {
      "type": "edit",
      "id": "a477dcafb6a527a2",
      "item": {
        "type": "markdown",
        "id": "a477dcafb6a527a2",
        "text": "\"Maybe **Traits** can be used here to represent multiple concepts.\" – serge.st via [https://discord.com/channels/223421264751099906/301695389176692736/967794730199027792 discord]"
      },
      "date": 1662262623781
    },
    {
      "type": "edit",
      "id": "7780dbaf0e13f11b",
      "item": {
        "type": "markdown",
        "id": "7780dbaf0e13f11b",
        "text": "We think **Traits** can do the job of [[Interfaces]] (or similar concept with different name) in other languages, it just seems that in [[Smalltalk]] there is decades of inertia in stylistically using sub-classing as the only hammer for the job, a large majority of the time. Maybe 'dog-food' some software-assessment/moldable development architectural checks/constraints at feenk to slowly but steadily increase the use of well defined Traits, specially in parts of Gt that users would modify (which sounds like potentially everywhere. We are not using terms like 'always' or 'never' or 'none', as we know parts of Gt do use Traits, but second that more would be very useful for users."
      },
      "date": 1662262637072
    },
    {
      "type": "edit",
      "id": "8bf746afcd06b5ad",
      "item": {
        "type": "markdown",
        "id": "8bf746afcd06b5ad",
        "text": "Traits are pure units of [[Behavior]] that can be composed to form classes or other **traits**. The trait composition mechanism is an alternative to multiple or mixin inheritance in which **the composer has full control over the trait composition**. It enables more reuse than single inheritance without introducing the drawbacks of multiple or mixin inheritance. [https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Traits.md#traits page]"
      },
      "date": 1662262956870
    },
    {
      "type": "edit",
      "id": "65929caf66a74198",
      "item": {
        "type": "markdown",
        "id": "65929caf66a74198",
        "text": "here ⇒ HemalVarambhia — 2022-04-24\nMathematical fields - set over which + and × are defined\n> In summary, the [[Complex Numbers]] form a rich structure that is simultaneously an algebraically closed field, a commutative algebra over the reals, and a Euclidean vector space of dimension two. [https://discord.com/channels/223421264751099906/301695389176692736/967787200865501225 discord]"
      },
      "date": 1662262977982
    }
  ]
}