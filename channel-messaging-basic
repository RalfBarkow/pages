{
  "title": "Channel Messaging Basic",
  "story": [
    {
      "type": "paragraph",
      "id": "80a6c059fa00493b",
      "text": "The [[Channel Messaging API]] allows two separate scripts running in different [[Browsing Context]]s attached to the same document (e.g., two <iframe> elements, the main document and a single <iframe>, or two documents via a SharedWorker) to communicate directly, passing messages between each other through two-way channels (or pipes) with a port at each end. [https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging mdn]"
    },
    {
      "type": "paragraph",
      "id": "973405a8f26e3405",
      "text": "Note: For more information and ideas, the [[Ports]] as the basis of an [[Object-Capability Model]] on the Web section of the spec is a useful read. [https://html.spec.whatwg.org/multipage/web-messaging.html#ports-as-the-basis-of-an-object-capability-model-on-the-web page]"
    },
    {
      "type": "paragraph",
      "id": "cc2d0c36356e65a6",
      "text": "To get you started, we have published a couple of demos on GitHub. First, check our channel messaging basic demo ([https://mdn.github.io/dom-examples/channel-messaging-basic/ run it live too]), which shows a really simple single message transfer between a page and an embedded <iframe>. [https://github.com/mdn/dom-examples/tree/main/channel-messaging-basic github]"
    },
    {
      "type": "markdown",
      "id": "f6d930b6173f058c",
      "text": "# Assets"
    },
    {
      "type": "assets",
      "id": "a5f0070e84998f1a",
      "text": "pages/channel-messaging-basic"
    },
    {
      "type": "paragraph",
      "id": "deb5d73612bd7987",
      "text": "We copy the script code from index.html into a code snippet to evaluate it within the 2 [[JS Snippet Template]] frames below (based on importjs.html copied to page1.html and page2.html)."
    },
    {
      "type": "code",
      "id": "a15db36716f7cc10",
      "text": "const channel = new MessageChannel();\nconst outputPage1 = document.getElementById('outputPage1');\nconst outputPage2 = document.getElementById('outputPage2');\n"
    },
    {
      "type": "paragraph",
      "id": "e35c7aaeb132b384",
      "text": "We get \"can't access property \"addEventListener\", iframe is null\"."
    },
    {
      "type": "paragraph",
      "id": "a5180569683e4ba1",
      "text": "See \"Cannot read property 'addEventListener' of null\" [https://stackoverflow.com/questions/26107125/cannot-read-property-addeventlistener-of-null stackoverflow]"
    },
    {
      "type": "paragraph",
      "id": "21ddb188e1128674",
      "text": "The [[JS Snippet Template]] gives us a div with id output. So we change the code for the const output above to use getElementById. Now we can use the debugger to check if output is within the scope of the JS Snippet Template frame. We see the text \"waiting\" (from the pre element with the id show)"
    },
    {
      "type": "code",
      "id": "e245aaca92bd9749",
      "text": "function onMessage(e) {\n  console.log(\"(onMessage) reached.\");\n        outputPage1.innerHTML = e.data;\n        outputPage2.innerHTML = e.data;\n      }"
    },
    {
      "type": "code",
      "id": "ff7891074803e47a",
      "text": "// Listen for messages on port1\nchannel.port1.onmessage = onMessage;",
      "alias": "be33076321a1377b"
    },
    {
      "type": "code",
      "id": "45f4d4507ca74813",
      "text": "// Transfer port2 to the outputPage2\noutputPage2.postMessage(\"Hello from the main page!\", \"*\", [\n          channel.port2,\n        ]);"
    },
    {
      "type": "pagefold",
      "id": "86e0f61f94dd7f79",
      "text": "JS Snippet Template – page 1"
    },
    {
      "type": "frame",
      "id": "d689a261fa0114de",
      "text": "http://localhost:3000/assets/pages/channel-messaging-basic/page1.html"
    },
    {
      "type": "pagefold",
      "id": "885af6723f8ef98e",
      "text": "JS Snippet Template – page 2"
    },
    {
      "type": "frame",
      "id": "05d29aed01c71f34",
      "text": "http://localhost:3000/assets/pages/channel-messaging-basic/page2.html"
    },
    {
      "type": "paragraph",
      "id": "939832e6ea52d96c",
      "text": "The text \"iFrame body\" comes for a p with class output within page2.html."
    },
    {
      "type": "paragraph",
      "id": "eaefe5947f4d4529",
      "text": "We refactor the code above to use page2 instead of iframe and change the code of page2.html to be able to use getElementById \"page2Output\"."
    },
    {
      "type": "markdown",
      "id": "033c03b7373a6fdd",
      "text": "# Event listener"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Channel Messaging Basic",
        "story": []
      },
      "date": 1711359451549
    },
    {
      "item": {
        "type": "assets",
        "id": "a5f0070e84998f1a",
        "text": "pages/channel-messaging-basic"
      },
      "id": "a5f0070e84998f1a",
      "type": "add",
      "date": 1711359453209
    },
    {
      "type": "edit",
      "id": "a5f0070e84998f1a",
      "item": {
        "type": "assets",
        "id": "a5f0070e84998f1a",
        "text": "pages/channel-messaging-basic"
      },
      "date": 1711359474115
    },
    {
      "item": {
        "type": "paragraph",
        "id": "80a6c059fa00493b",
        "text": "The [[Channel Messaging API]] allows two separate scripts running in different browsing contexts attached to the same document (e.g., two <iframe> elements, the main document and a single <iframe>, or two documents via a SharedWorker) to communicate directly, passing messages between each other through two-way channels (or pipes) with a port at each end."
      },
      "id": "80a6c059fa00493b",
      "type": "add",
      "after": "a5f0070e84998f1a",
      "date": 1711359626903
    },
    {
      "id": "80a6c059fa00493b",
      "type": "move",
      "order": [
        "80a6c059fa00493b",
        "a5f0070e84998f1a"
      ],
      "date": 1711359628745
    },
    {
      "type": "edit",
      "id": "80a6c059fa00493b",
      "item": {
        "type": "paragraph",
        "id": "80a6c059fa00493b",
        "text": "The [[Channel Messaging API]] allows two separate scripts running in different browsing contexts attached to the same document (e.g., two <iframe> elements, the main document and a single <iframe>, or two documents via a SharedWorker) to communicate directly, passing messages between each other through two-way channels (or pipes) with a port at each end."
      },
      "date": 1711359630028
    },
    {
      "type": "edit",
      "id": "80a6c059fa00493b",
      "item": {
        "type": "paragraph",
        "id": "80a6c059fa00493b",
        "text": "The [[Channel Messaging API]] allows two separate scripts running in different browsing contexts attached to the same document (e.g., two <iframe> elements, the main document and a single <iframe>, or two documents via a SharedWorker) to communicate directly, passing messages between each other through two-way channels (or pipes) with a port at each end."
      },
      "date": 1711359639230
    },
    {
      "type": "add",
      "id": "cc2d0c36356e65a6",
      "item": {
        "type": "paragraph",
        "id": "cc2d0c36356e65a6",
        "text": "To get you started, we have published a couple of demos on GitHub. First, check our channel messaging basic demo (run it live too), which shows a really simple single message transfer between a page and an embedded <iframe>."
      },
      "after": "80a6c059fa00493b",
      "date": 1711359666721
    },
    {
      "type": "add",
      "id": "973405a8f26e3405",
      "item": {
        "type": "paragraph",
        "id": "973405a8f26e3405",
        "text": "Note: For more information and ideas, the Ports as the basis of an object-capability model on the Web section of the spec is a useful read. [https://html.spec.whatwg.org/multipage/web-messaging.html#ports-as-the-basis-of-an-object-capability-model-on-the-web page]"
      },
      "after": "80a6c059fa00493b",
      "date": 1711359773851
    },
    {
      "type": "edit",
      "id": "973405a8f26e3405",
      "item": {
        "type": "paragraph",
        "id": "973405a8f26e3405",
        "text": "Note: For more information and ideas, the Ports as the basis of an object-capability model on the Web section of the spec is a useful read. [https://html.spec.whatwg.org/multipage/web-messaging.html#ports-as-the-basis-of-an-object-capability-model-on-the-web page]"
      },
      "date": 1711359794193
    },
    {
      "type": "fork",
      "date": 1711359851716,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1711359873866
    },
    {
      "item": {
        "type": "factory",
        "id": "0bdfb02c4eb512ef"
      },
      "id": "0bdfb02c4eb512ef",
      "type": "add",
      "after": "a5f0070e84998f1a",
      "date": 1711359875211
    },
    {
      "type": "edit",
      "id": "0bdfb02c4eb512ef",
      "item": {
        "type": "paragraph",
        "id": "0bdfb02c4eb512ef",
        "text": "index.html"
      },
      "date": 1711359879236
    },
    {
      "item": {
        "type": "factory",
        "id": "20510a7cddf4ae37"
      },
      "id": "20510a7cddf4ae37",
      "type": "add",
      "after": "0bdfb02c4eb512ef",
      "date": 1711359880933
    },
    {
      "type": "edit",
      "id": "20510a7cddf4ae37",
      "item": {
        "type": "html",
        "id": "20510a7cddf4ae37",
        "text": "<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>Channel messaging demo</title>\n  </head>\n  <body>\n    <h1>Channel messaging demo</h1>\n    <p class=\"output\">My body</p>\n    <iframe src=\"page2.html\" width=\"480\" height=\"320\"></iframe>\n    <script>\n     const channel = new MessageChannel();\n     const output = document.querySelector('.output');\n     const iframe = document.querySelector('iframe');\n\n      // Wait for the iframe to load\n      iframe.addEventListener(\"load\", onLoad);\n\n      function onLoad() {\n        // Listen for messages on port1\n        channel.port1.onmessage = onMessage;\n        // Transfer port2 to the iframe\n        iframe.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n          channel.port2,\n        ]);\n      }\n\n      // Handle messages received on port1\n      function onMessage(e) {\n        output.innerHTML = e.data;\n      }\n    </script>\n  </body>\n</html>\n"
      },
      "date": 1711359883683
    },
    {
      "item": {
        "type": "factory",
        "id": "018643057269e5ac"
      },
      "id": "018643057269e5ac",
      "type": "add",
      "after": "20510a7cddf4ae37",
      "date": 1711359890121
    },
    {
      "type": "edit",
      "id": "018643057269e5ac",
      "item": {
        "type": "paragraph",
        "id": "018643057269e5ac",
        "text": "page2.html"
      },
      "date": 1711359896383
    },
    {
      "item": {
        "type": "factory",
        "id": "e5de83ac89ad6524"
      },
      "id": "e5de83ac89ad6524",
      "type": "add",
      "after": "018643057269e5ac",
      "date": 1711359906912
    },
    {
      "type": "edit",
      "id": "e5de83ac89ad6524",
      "item": {
        "type": "html",
        "id": "e5de83ac89ad6524",
        "text": "<!DOCTYPE html>\n<html lang=\"en-US\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width\" />\n    <title>My page title</title>\n  </head>\n  <body>\n    <p class=\"output\">iFrame body</p>\n    <script>\n      const output = document.querySelector(\".output\");\n\n      window.addEventListener(\"message\", onMessage);\n\n      function onMessage(e) {\n        output.innerHTML = e.data;\n        // Use the transfered port to post a message back to the main frame\n        e.ports[0].postMessage(\"Message back from the IFrame\");\n      }\n    </script>\n  </body>\n</html>\n"
      },
      "date": 1711359909149
    },
    {
      "item": {
        "type": "factory",
        "id": "b5b86973908025ba"
      },
      "id": "b5b86973908025ba",
      "type": "add",
      "after": "e5de83ac89ad6524",
      "date": 1711359936719
    },
    {
      "id": "b5b86973908025ba",
      "type": "move",
      "order": [
        "80a6c059fa00493b",
        "973405a8f26e3405",
        "cc2d0c36356e65a6",
        "a5f0070e84998f1a",
        "0bdfb02c4eb512ef",
        "20510a7cddf4ae37",
        "018643057269e5ac",
        "b5b86973908025ba",
        "e5de83ac89ad6524"
      ],
      "date": 1711359939719
    },
    {
      "type": "remove",
      "id": "018643057269e5ac",
      "date": 1711359944281
    },
    {
      "type": "edit",
      "id": "b5b86973908025ba",
      "item": {
        "type": "pagefold",
        "id": "b5b86973908025ba",
        "text": "page2.html"
      },
      "date": 1711359945331
    },
    {
      "item": {
        "type": "factory",
        "id": "dc6138857140e59a"
      },
      "id": "dc6138857140e59a",
      "type": "add",
      "after": "e5de83ac89ad6524",
      "date": 1711359952875
    },
    {
      "id": "dc6138857140e59a",
      "type": "move",
      "order": [
        "80a6c059fa00493b",
        "973405a8f26e3405",
        "cc2d0c36356e65a6",
        "a5f0070e84998f1a",
        "0bdfb02c4eb512ef",
        "dc6138857140e59a",
        "20510a7cddf4ae37",
        "b5b86973908025ba",
        "e5de83ac89ad6524"
      ],
      "date": 1711359958503
    },
    {
      "type": "remove",
      "id": "0bdfb02c4eb512ef",
      "date": 1711359964736
    },
    {
      "type": "edit",
      "id": "dc6138857140e59a",
      "item": {
        "type": "pagefold",
        "id": "dc6138857140e59a",
        "text": "index.html"
      },
      "date": 1711359965501
    },
    {
      "item": {
        "type": "factory",
        "id": "f6d930b6173f058c"
      },
      "id": "f6d930b6173f058c",
      "type": "add",
      "after": "e5de83ac89ad6524",
      "date": 1711360058279
    },
    {
      "type": "edit",
      "id": "f6d930b6173f058c",
      "item": {
        "type": "markdown",
        "id": "f6d930b6173f058c",
        "text": "# Assets"
      },
      "date": 1711360067738
    },
    {
      "id": "a5f0070e84998f1a",
      "type": "move",
      "order": [
        "80a6c059fa00493b",
        "973405a8f26e3405",
        "cc2d0c36356e65a6",
        "dc6138857140e59a",
        "20510a7cddf4ae37",
        "b5b86973908025ba",
        "e5de83ac89ad6524",
        "f6d930b6173f058c",
        "a5f0070e84998f1a"
      ],
      "date": 1711360070998
    },
    {
      "id": "f6d930b6173f058c",
      "type": "move",
      "order": [
        "80a6c059fa00493b",
        "973405a8f26e3405",
        "cc2d0c36356e65a6",
        "f6d930b6173f058c",
        "dc6138857140e59a",
        "20510a7cddf4ae37",
        "b5b86973908025ba",
        "e5de83ac89ad6524",
        "a5f0070e84998f1a"
      ],
      "date": 1711360078961
    },
    {
      "id": "a5f0070e84998f1a",
      "type": "move",
      "order": [
        "80a6c059fa00493b",
        "973405a8f26e3405",
        "cc2d0c36356e65a6",
        "f6d930b6173f058c",
        "a5f0070e84998f1a",
        "dc6138857140e59a",
        "20510a7cddf4ae37",
        "b5b86973908025ba",
        "e5de83ac89ad6524"
      ],
      "date": 1711360082011
    },
    {
      "type": "edit",
      "id": "80a6c059fa00493b",
      "item": {
        "type": "paragraph",
        "id": "80a6c059fa00493b",
        "text": "The [[Channel Messaging API]] allows two separate scripts running in different browsing contexts attached to the same document (e.g., two <iframe> elements, the main document and a single <iframe>, or two documents via a SharedWorker) to communicate directly, passing messages between each other through two-way channels (or pipes) with a port at each end. [https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging page]"
      },
      "date": 1711360137231
    },
    {
      "type": "edit",
      "id": "80a6c059fa00493b",
      "item": {
        "type": "paragraph",
        "id": "80a6c059fa00493b",
        "text": "The [[Channel Messaging API]] allows two separate scripts running in different browsing contexts attached to the same document (e.g., two <iframe> elements, the main document and a single <iframe>, or two documents via a SharedWorker) to communicate directly, passing messages between each other through two-way channels (or pipes) with a port at each end. [https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging mdn]"
      },
      "date": 1711360141810
    },
    {
      "type": "edit",
      "id": "cc2d0c36356e65a6",
      "item": {
        "type": "paragraph",
        "id": "cc2d0c36356e65a6",
        "text": "To get you started, we have published a couple of demos on GitHub. First, check our channel messaging basic demo ([https://mdn.github.io/dom-examples/channel-messaging-basic/ run it live too]), which shows a really simple single message transfer between a page and an embedded <iframe>."
      },
      "date": 1711360176619
    },
    {
      "item": {
        "type": "factory",
        "id": "a15db36716f7cc10"
      },
      "id": "a15db36716f7cc10",
      "type": "add",
      "after": "e5de83ac89ad6524",
      "date": 1711360280048
    },
    {
      "id": "a15db36716f7cc10",
      "type": "move",
      "order": [
        "80a6c059fa00493b",
        "973405a8f26e3405",
        "cc2d0c36356e65a6",
        "f6d930b6173f058c",
        "a5f0070e84998f1a",
        "dc6138857140e59a",
        "20510a7cddf4ae37",
        "a15db36716f7cc10",
        "b5b86973908025ba",
        "e5de83ac89ad6524"
      ],
      "date": 1711360282817
    },
    {
      "type": "edit",
      "id": "a15db36716f7cc10",
      "item": {
        "type": "code",
        "id": "a15db36716f7cc10",
        "text": "const channel = new MessageChannel();\n     const output = document.querySelector('.output');\n     const iframe = document.querySelector('iframe');\n\n      // Wait for the iframe to load\n      iframe.addEventListener(\"load\", onLoad);\n\n      function onLoad() {\n        // Listen for messages on port1\n        channel.port1.onmessage = onMessage;\n        // Transfer port2 to the iframe\n        iframe.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n          channel.port2,\n        ]);\n      }\n\n      // Handle messages received on port1\n      function onMessage(e) {\n        output.innerHTML = e.data;\n      }"
      },
      "date": 1711360284641
    },
    {
      "item": {
        "type": "factory",
        "id": "86e0f61f94dd7f79"
      },
      "id": "86e0f61f94dd7f79",
      "type": "add",
      "after": "e5de83ac89ad6524",
      "date": 1711360306965
    },
    {
      "type": "edit",
      "id": "86e0f61f94dd7f79",
      "item": {
        "type": "pagefold",
        "id": "86e0f61f94dd7f79",
        "text": "JS Snippet Template"
      },
      "date": 1711360346154
    },
    {
      "item": {
        "type": "factory",
        "id": "d689a261fa0114de"
      },
      "id": "d689a261fa0114de",
      "type": "add",
      "after": "86e0f61f94dd7f79",
      "date": 1711360358357
    },
    {
      "type": "edit",
      "id": "d689a261fa0114de",
      "item": {
        "type": "frame",
        "id": "d689a261fa0114de",
        "text": "//localhost:3000/assets/pages/js-snippet-template/importjs.html"
      },
      "date": 1711360372771
    },
    {
      "item": {
        "type": "factory",
        "id": "a5180569683e4ba1"
      },
      "id": "a5180569683e4ba1",
      "type": "add",
      "after": "d689a261fa0114de",
      "date": 1711360420851
    },
    {
      "type": "edit",
      "id": "a5180569683e4ba1",
      "item": {
        "type": "paragraph",
        "id": "a5180569683e4ba1",
        "text": "Cannot read property 'addEventListener' of null"
      },
      "date": 1711360423710
    },
    {
      "item": {
        "type": "factory",
        "id": "deb5d73612bd7987"
      },
      "id": "deb5d73612bd7987",
      "type": "add",
      "after": "a5180569683e4ba1",
      "date": 1711360438704
    },
    {
      "type": "edit",
      "id": "deb5d73612bd7987",
      "item": {
        "type": "paragraph",
        "id": "deb5d73612bd7987",
        "text": "We copy the script code from index.html to a code snippet."
      },
      "date": 1711360457285
    },
    {
      "id": "deb5d73612bd7987",
      "type": "move",
      "order": [
        "80a6c059fa00493b",
        "973405a8f26e3405",
        "cc2d0c36356e65a6",
        "f6d930b6173f058c",
        "a5f0070e84998f1a",
        "dc6138857140e59a",
        "20510a7cddf4ae37",
        "deb5d73612bd7987",
        "a15db36716f7cc10",
        "b5b86973908025ba",
        "e5de83ac89ad6524",
        "86e0f61f94dd7f79",
        "d689a261fa0114de",
        "a5180569683e4ba1"
      ],
      "date": 1711360470135
    },
    {
      "type": "edit",
      "id": "deb5d73612bd7987",
      "item": {
        "type": "paragraph",
        "id": "deb5d73612bd7987",
        "text": "We copy the script code from index.html to a code snippet to evalue it in the JS Snippet Template frame below."
      },
      "date": 1711360504647
    },
    {
      "type": "edit",
      "id": "deb5d73612bd7987",
      "item": {
        "type": "paragraph",
        "id": "deb5d73612bd7987",
        "text": "We copy the script code from index.html into a code snippet to evaluate it within the [[JS Snippet Template]] frame below."
      },
      "date": 1711360541267
    },
    {
      "type": "add",
      "id": "e35c7aaeb132b384",
      "item": {
        "type": "paragraph",
        "id": "e35c7aaeb132b384",
        "text": "We get \"can't access property \"addEventListener\", iframe is null\"."
      },
      "after": "deb5d73612bd7987",
      "date": 1711360589390
    },
    {
      "id": "e35c7aaeb132b384",
      "type": "move",
      "order": [
        "80a6c059fa00493b",
        "973405a8f26e3405",
        "cc2d0c36356e65a6",
        "f6d930b6173f058c",
        "a5f0070e84998f1a",
        "dc6138857140e59a",
        "20510a7cddf4ae37",
        "deb5d73612bd7987",
        "a15db36716f7cc10",
        "e35c7aaeb132b384",
        "b5b86973908025ba",
        "e5de83ac89ad6524",
        "86e0f61f94dd7f79",
        "d689a261fa0114de",
        "a5180569683e4ba1"
      ],
      "date": 1711360593606
    },
    {
      "id": "a5180569683e4ba1",
      "type": "move",
      "order": [
        "80a6c059fa00493b",
        "973405a8f26e3405",
        "cc2d0c36356e65a6",
        "f6d930b6173f058c",
        "a5f0070e84998f1a",
        "dc6138857140e59a",
        "20510a7cddf4ae37",
        "deb5d73612bd7987",
        "a15db36716f7cc10",
        "e35c7aaeb132b384",
        "a5180569683e4ba1",
        "b5b86973908025ba",
        "e5de83ac89ad6524",
        "86e0f61f94dd7f79",
        "d689a261fa0114de"
      ],
      "date": 1711360601565
    },
    {
      "type": "edit",
      "id": "a5180569683e4ba1",
      "item": {
        "type": "paragraph",
        "id": "a5180569683e4ba1",
        "text": "See \"Cannot read property 'addEventListener' of null\""
      },
      "date": 1711360614418
    },
    {
      "type": "edit",
      "id": "a5180569683e4ba1",
      "item": {
        "type": "paragraph",
        "id": "a5180569683e4ba1",
        "text": "See \"Cannot read property 'addEventListener' of null\" [https://stackoverflow.com/questions/26107125/cannot-read-property-addeventlistener-of-null stackoverflow]"
      },
      "date": 1711360627263
    },
    {
      "type": "edit",
      "id": "a15db36716f7cc10",
      "item": {
        "type": "code",
        "id": "a15db36716f7cc10",
        "text": "const channel = new MessageChannel();\nconst output = document.querySelector('.output');\nconst iframe = document.querySelector('iframe');\n\n// Wait for the iframe to load\niframe.addEventListener(\"load\", onLoad);\n\nfunction onLoad() {\n  // Listen for messages on port1\n  channel.port1.onmessage = onMessage;\n  // Transfer port2 to the iframe\n  iframe.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n    channel.port2,\n  ]);\n}\n\n// Handle messages received on port1\nfunction onMessage(e) {\n  output.innerHTML = e.data;\n}"
      },
      "date": 1711360740817
    },
    {
      "type": "edit",
      "id": "deb5d73612bd7987",
      "item": {
        "type": "paragraph",
        "id": "deb5d73612bd7987",
        "text": "We copy the script code from index.html into a code snippet to evaluate it within the [[JS Snippet Template]] frame below. (importjs.html)"
      },
      "date": 1711360847675
    },
    {
      "type": "add",
      "id": "21ddb188e1128674",
      "item": {
        "type": "paragraph",
        "id": "21ddb188e1128674",
        "text": "The [[JS Snippet Template]] gives us a div with id output. So we change the code for the const output above to use getElementById."
      },
      "after": "a5180569683e4ba1",
      "date": 1711360899968
    },
    {
      "type": "edit",
      "id": "a15db36716f7cc10",
      "item": {
        "type": "code",
        "id": "a15db36716f7cc10",
        "text": "const channel = new MessageChannel();\nconst output = document.getElementById('output');\nconst iframe = document.querySelector('iframe');\n\n// Wait for the iframe to load\niframe.addEventListener(\"load\", onLoad);\n\nfunction onLoad() {\n  // Listen for messages on port1\n  channel.port1.onmessage = onMessage;\n  // Transfer port2 to the iframe\n  iframe.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n    channel.port2,\n  ]);\n}\n\n// Handle messages received on port1\nfunction onMessage(e) {\n  output.innerHTML = e.data;\n}"
      },
      "date": 1711360921290
    },
    {
      "type": "edit",
      "id": "21ddb188e1128674",
      "item": {
        "type": "paragraph",
        "id": "21ddb188e1128674",
        "text": "The [[JS Snippet Template]] gives us a div with id output. So we change the code for the const output above to use getElementById. Now we can verify with the Debugger that output is within the JS Snippet Template showing the \"waiting\" text."
      },
      "date": 1711361068744
    },
    {
      "type": "edit",
      "id": "21ddb188e1128674",
      "item": {
        "type": "paragraph",
        "id": "21ddb188e1128674",
        "text": "The [[JS Snippet Template]] gives us a div with id output. So we change the code for the const output above to use getElementById. Now we can check with the Debugger that output is within the JS Snippet Template showing the \"waiting\" text."
      },
      "date": 1711361106614
    },
    {
      "type": "edit",
      "id": "21ddb188e1128674",
      "item": {
        "type": "paragraph",
        "id": "21ddb188e1128674",
        "text": "The [[JS Snippet Template]] gives us a div with id output. So we change the code for the const output above to use getElementById. Now we can check with the Debugger that output is within the JS Snippet Template showing the \"waiting\" text inside the pre element with id show."
      },
      "date": 1711361169956
    },
    {
      "type": "edit",
      "id": "21ddb188e1128674",
      "item": {
        "type": "paragraph",
        "id": "21ddb188e1128674",
        "text": "The [[JS Snippet Template]] gives us a div with id output. So we change the code for the const output above to use getElementById. Now we can check with the Debugger that output is within the JS Snippet Template frame. We see the text \"waiting\"."
      },
      "date": 1711361224289
    },
    {
      "type": "edit",
      "id": "21ddb188e1128674",
      "item": {
        "type": "paragraph",
        "id": "21ddb188e1128674",
        "text": "The [[JS Snippet Template]] gives us a div with id output. So we change the code for the const output above to use getElementById. Now we can check with the Debugger that output is within the JS Snippet Template frame. We see the text \"waiting\" (coming from the pre element with id show)."
      },
      "date": 1711361258909
    },
    {
      "type": "edit",
      "id": "21ddb188e1128674",
      "item": {
        "type": "paragraph",
        "id": "21ddb188e1128674",
        "text": "The [[JS Snippet Template]] gives us a div with id output. So we change the code for the const output above to use getElementById. Now we can use the debugger to check if output is within the scope of the JS Snippet template. We see the text \"waiting\" (from the pre element with the id show)"
      },
      "date": 1711361299664
    },
    {
      "type": "edit",
      "id": "21ddb188e1128674",
      "item": {
        "type": "paragraph",
        "id": "21ddb188e1128674",
        "text": "The [[JS Snippet Template]] gives us a div with id output. So we change the code for the const output above to use getElementById. Now we can use the debugger to check if output is within the scope of the JS Snippet Template frame. We see the text \"waiting\" (from the pre element with the id show)"
      },
      "date": 1711361316817
    },
    {
      "item": {
        "type": "factory",
        "id": "885af6723f8ef98e"
      },
      "id": "885af6723f8ef98e",
      "type": "add",
      "after": "d689a261fa0114de",
      "date": 1711361572270
    },
    {
      "type": "edit",
      "id": "885af6723f8ef98e",
      "item": {
        "type": "pagefold",
        "id": "885af6723f8ef98e",
        "text": "page2.html in a frame"
      },
      "date": 1711361580289
    },
    {
      "item": {
        "type": "factory",
        "id": "05d29aed01c71f34"
      },
      "id": "05d29aed01c71f34",
      "type": "add",
      "after": "885af6723f8ef98e",
      "date": 1711361582134
    },
    {
      "type": "edit",
      "id": "05d29aed01c71f34",
      "item": {
        "type": "frame",
        "id": "05d29aed01c71f34",
        "text": "http://localhost:3000/assets/pages/channel-messaging-basic/page2.html"
      },
      "date": 1711361584068
    },
    {
      "item": {
        "type": "factory",
        "id": "939832e6ea52d96c"
      },
      "id": "939832e6ea52d96c",
      "type": "add",
      "after": "05d29aed01c71f34",
      "date": 1711361742901
    },
    {
      "type": "edit",
      "id": "939832e6ea52d96c",
      "item": {
        "type": "paragraph",
        "id": "939832e6ea52d96c",
        "text": "The text \""
      },
      "date": 1711361749747
    },
    {
      "type": "edit",
      "id": "939832e6ea52d96c",
      "item": {
        "type": "paragraph",
        "id": "939832e6ea52d96c",
        "text": "The text \"iFrame body\" comes for a p with class output within page2.html."
      },
      "date": 1711361775890
    },
    {
      "item": {
        "type": "factory",
        "id": "eaefe5947f4d4529"
      },
      "id": "eaefe5947f4d4529",
      "type": "add",
      "after": "939832e6ea52d96c",
      "date": 1711361830245
    },
    {
      "type": "edit",
      "id": "eaefe5947f4d4529",
      "item": {
        "type": "paragraph",
        "id": "eaefe5947f4d4529",
        "text": "We refactor the code above to use page2 instead of iframe."
      },
      "date": 1711361852696
    },
    {
      "type": "edit",
      "id": "a15db36716f7cc10",
      "item": {
        "type": "code",
        "id": "a15db36716f7cc10",
        "text": "const channel = new MessageChannel();\nconst output = document.getElementById('output');\nconst page2 = document.querySelector('iframe');\n\n// Wait for the iframe to load\npage2.addEventListener(\"load\", onLoad);\n\nfunction onLoad() {\n  // Listen for messages on port1\n  channel.port1.onmessage = onMessage;\n  // Transfer port2 to the iframe\n  page2.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n    channel.port2,\n  ]);\n}\n\n// Handle messages received on port1\nfunction onMessage(e) {\n  output.innerHTML = e.data;\n}"
      },
      "date": 1711361887171
    },
    {
      "type": "edit",
      "id": "eaefe5947f4d4529",
      "item": {
        "type": "paragraph",
        "id": "eaefe5947f4d4529",
        "text": "We refactor the code above to use page2 instead of iframe and change the code of page2.html to be able to "
      },
      "date": 1711361913922
    },
    {
      "type": "edit",
      "id": "eaefe5947f4d4529",
      "item": {
        "type": "paragraph",
        "id": "eaefe5947f4d4529",
        "text": "We refactor the code above to use page2 instead of iframe and change the code of page2.html to be able to use getElementById page2Output."
      },
      "date": 1711361938973
    },
    {
      "type": "edit",
      "id": "eaefe5947f4d4529",
      "item": {
        "type": "paragraph",
        "id": "eaefe5947f4d4529",
        "text": "We refactor the code above to use page2 instead of iframe and change the code of page2.html to be able to use getElementById \"page2Output\"."
      },
      "date": 1711362033821
    },
    {
      "type": "edit",
      "id": "a15db36716f7cc10",
      "item": {
        "type": "code",
        "id": "a15db36716f7cc10",
        "text": "const channel = new MessageChannel();\nconst output = document.getElementById('output');\nconst page2 = document.getElementById('page2Output');\n\n// Wait for the iframe to load\npage2.addEventListener(\"load\", onLoad);\n\nfunction onLoad() {\n  // Listen for messages on port1\n  channel.port1.onmessage = onMessage;\n  // Transfer port2 to the iframe\n  page2.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n    channel.port2,\n  ]);\n}\n\n// Handle messages received on port1\nfunction onMessage(e) {\n  output.innerHTML = e.data;\n}"
      },
      "date": 1711362048547
    },
    {
      "id": "033c03b7373a6fdd",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "033c03b7373a6fdd",
        "text": "# Event listener"
      },
      "after": "eaefe5947f4d4529",
      "attribution": {
        "page": "Paragraph Recommendation Viewer",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1711362874999
    },
    {
      "item": {
        "type": "code",
        "id": "4d67d15c02f5437f",
        "text": " window.addEventListener(\"message\", onMessage);\n\n      function onMessage(e) {\n        output.innerHTML = e.data;\n        // Use the transfered port to post a message back to the main frame\n        e.ports[0].postMessage(\"Message back from the IFrame\");\n      }"
      },
      "id": "4d67d15c02f5437f",
      "type": "add",
      "after": "033c03b7373a6fdd",
      "date": 1711363115610
    },
    {
      "type": "edit",
      "id": "4d67d15c02f5437f",
      "item": {
        "type": "code",
        "id": "4d67d15c02f5437f",
        "text": " window.addEventListener(\"message\", onMessage);\n\n      function onMessage(e) {\n        output.innerHTML = e.data;\n        // Use the transfered port to post a message back to the main frame\n        e.ports[0].postMessage(\"Message back from the IFrame\");\n      }"
      },
      "date": 1711363117731,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1711363157715
    },
    {
      "type": "edit",
      "id": "a15db36716f7cc10",
      "item": {
        "type": "code",
        "id": "a15db36716f7cc10",
        "text": "const channel = new MessageChannel();\nconst output = document.getElementById('output');\nconst page2 = document.getElementById('page2Output');\n\n// Wait for the iframe to load\npage2.addEventListener(\"load\", onLoad);\n\nfunction onLoad() {\n  // Listen for messages on port1\n  channel.port1.onmessage = onMessagePort1;\n  // Transfer port2 to the iframe\n  page2.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n    channel.port2,\n  ]);\n}\n\n// Handle messages received on port1\nfunction onMessagePort1(e) {\n  output.innerHTML = e.data;\n}"
      },
      "date": 1711363358050
    },
    {
      "type": "edit",
      "id": "4d67d15c02f5437f",
      "item": {
        "type": "code",
        "id": "4d67d15c02f5437f",
        "text": " window.addEventListener(\"message\", onMessagePort2);\n\n      function onMessagePort2(e) {\n        output.innerHTML = e.data;\n        // Use the transfered port to post a message back to the main frame\n        e.ports[0].postMessage(\"Message back from the IFrame\");\n      }"
      },
      "date": 1711363405019
    },
    {
      "type": "edit",
      "id": "a15db36716f7cc10",
      "item": {
        "type": "code",
        "id": "a15db36716f7cc10",
        "text": "const channel = new MessageChannel();\nconst output = document.getElementById('output');\nconst page2 = document.getElementById('outputPage2');\n"
      },
      "date": 1711363600756
    },
    {
      "type": "edit",
      "id": "4d67d15c02f5437f",
      "item": {
        "type": "code",
        "id": "4d67d15c02f5437f",
        "text": "window.addEventListener(\"message\", handler)\n       window.parent.postMessage({ action:\"sendFrameContext\" }, \"*\")\n\n       function handler ({data}) {\n         if (data.action == \"frameContext\") {\n           window.removeEventListener(\"message\", handler)\n           const {slug, item, page} = data\n           let code = page.story.filter(it => it.type == 'code').map(it => it.text)\n           if (code.length) { render(code.join(\"\\n\")) }\n         }\n       }"
      },
      "date": 1711363844803
    },
    {
      "type": "edit",
      "id": "d689a261fa0114de",
      "item": {
        "type": "frame",
        "id": "d689a261fa0114de",
        "text": "http://localhost:3000/assets/pages/channel-messaging-basic/page1.html"
      },
      "date": 1711363857457
    },
    {
      "type": "edit",
      "id": "a15db36716f7cc10",
      "item": {
        "type": "code",
        "id": "a15db36716f7cc10",
        "text": "const channel = new MessageChannel();\nconst outputPage1 = document.getElementById('outputPage1');\nconst outputPage2 = document.getElementById('outputPage2');\n"
      },
      "date": 1711363900157
    },
    {
      "type": "remove",
      "id": "4d67d15c02f5437f",
      "date": 1711364106457
    },
    {
      "type": "edit",
      "id": "deb5d73612bd7987",
      "item": {
        "type": "paragraph",
        "id": "deb5d73612bd7987",
        "text": "We copy the script code from index.html into a code snippet to evaluate it within the 2 [[JS Snippet Template]] frames below (based on importjs.html copied to page1.html and page2.html)"
      },
      "date": 1711364649740
    },
    {
      "type": "edit",
      "id": "deb5d73612bd7987",
      "item": {
        "type": "paragraph",
        "id": "deb5d73612bd7987",
        "text": "We copy the script code from index.html into a code snippet to evaluate it within the 2 [[JS Snippet Template]] frames below (based on importjs.html copied to page1.html and page2.html)."
      },
      "date": 1711364660970
    },
    {
      "id": "be33076321a1377b",
      "type": "add",
      "item": {
        "type": "code",
        "id": "be33076321a1377b",
        "text": ".addEventListener(\"load\", onLoad);\n"
      },
      "after": "a15db36716f7cc10",
      "attribution": {
        "page": "scratch"
      },
      "date": 1711364706427
    },
    {
      "type": "edit",
      "id": "be33076321a1377b",
      "item": {
        "type": "code",
        "id": "be33076321a1377b",
        "text": "outputPage1.addEventListener(\"load\", onLoad);\n"
      },
      "date": 1711364713745
    },
    {
      "type": "edit",
      "id": "be33076321a1377b",
      "item": {
        "type": "code",
        "id": "be33076321a1377b",
        "text": "outputPage2.addEventListener(\"load\", onLoad);\n"
      },
      "date": 1711364828109,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1711364849816
    },
    {
      "id": "be33076321a1377b",
      "type": "move",
      "order": [
        "80a6c059fa00493b",
        "973405a8f26e3405",
        "cc2d0c36356e65a6",
        "f6d930b6173f058c",
        "a5f0070e84998f1a",
        "dc6138857140e59a",
        "20510a7cddf4ae37",
        "deb5d73612bd7987",
        "a15db36716f7cc10",
        "e35c7aaeb132b384",
        "a5180569683e4ba1",
        "21ddb188e1128674",
        "b5b86973908025ba",
        "e5de83ac89ad6524",
        "86e0f61f94dd7f79",
        "d689a261fa0114de",
        "885af6723f8ef98e",
        "05d29aed01c71f34",
        "939832e6ea52d96c",
        "eaefe5947f4d4529",
        "033c03b7373a6fdd",
        "be33076321a1377b"
      ],
      "date": 1711364970781
    },
    {
      "type": "edit",
      "id": "cc2d0c36356e65a6",
      "item": {
        "type": "paragraph",
        "id": "cc2d0c36356e65a6",
        "text": "To get you started, we have published a couple of demos on GitHub. First, check our channel messaging basic demo ([https://mdn.github.io/dom-examples/channel-messaging-basic/ run it live too]), which shows a really simple single message transfer between a page and an embedded <iframe>. [https://github.com/mdn/dom-examples/tree/main/channel-messaging-basic github]"
      },
      "date": 1711365063303
    },
    {
      "id": "ff7891074803e47a",
      "type": "add",
      "item": {
        "type": "code",
        "id": "ff7891074803e47a",
        "text": "function onLoad() {\n          // Listen for messages on port1\n          channel.port1.onmessage = onMessage;\n        \n          // Transfer port2 to the iframe\n          outputPage1.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n            channel.port2,]);\n        };",
        "alias": "be33076321a1377b"
      },
      "after": "21ddb188e1128674",
      "attribution": {
        "page": "scratch"
      },
      "date": 1711365839542
    },
    {
      "id": "e245aaca92bd9749",
      "type": "add",
      "item": {
        "type": "code",
        "id": "e245aaca92bd9749",
        "text": "function onMessage(e) {\n        outputPage1.innerHTML = e.data;\n        outputPage2.innerHTML = e.data;\n      }"
      },
      "after": "ff7891074803e47a",
      "attribution": {
        "page": "scratch"
      },
      "date": 1711366108023
    },
    {
      "type": "edit",
      "id": "be33076321a1377b",
      "item": {
        "type": "code",
        "id": "be33076321a1377b",
        "text": "outputPage1.addEventListener(\"load\", onLoad);\n"
      },
      "date": 1711366576007
    },
    {
      "type": "edit",
      "id": "86e0f61f94dd7f79",
      "item": {
        "type": "pagefold",
        "id": "86e0f61f94dd7f79",
        "text": "JS Snippet Template – page 1"
      },
      "date": 1711366708608
    },
    {
      "type": "edit",
      "id": "885af6723f8ef98e",
      "item": {
        "type": "pagefold",
        "id": "885af6723f8ef98e",
        "text": "JS Snippet Template – page 2"
      },
      "date": 1711366713568
    },
    {
      "type": "remove",
      "id": "e5de83ac89ad6524",
      "date": 1711366952735
    },
    {
      "type": "remove",
      "id": "b5b86973908025ba",
      "date": 1711366955240
    },
    {
      "type": "remove",
      "id": "20510a7cddf4ae37",
      "date": 1711367012214
    },
    {
      "type": "remove",
      "id": "dc6138857140e59a",
      "date": 1711367014031
    },
    {
      "type": "edit",
      "id": "ff7891074803e47a",
      "item": {
        "type": "code",
        "id": "ff7891074803e47a",
        "text": "function onLoad() {\n  console.log(\"(onLoad) reached\");\n          // Listen for messages on port1\n          channel.port1.onmessage = onMessage;\n        \n          // Transfer port2 to the iframe\n          outputPage1.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n            channel.port2,]);\n        };",
        "alias": "be33076321a1377b"
      },
      "date": 1711367450905
    },
    {
      "type": "edit",
      "id": "e245aaca92bd9749",
      "item": {
        "type": "code",
        "id": "e245aaca92bd9749",
        "text": "function onMessage(e) {\n  console.log(\"(onMessage) reached.\");\n        outputPage1.innerHTML = e.data;\n        outputPage2.innerHTML = e.data;\n      }"
      },
      "date": 1711367588436
    },
    {
      "type": "edit",
      "id": "be33076321a1377b",
      "item": {
        "type": "code",
        "id": "be33076321a1377b",
        "text": "outputPage1.addEventListener(\"message\", onLoad);\n"
      },
      "date": 1711367697274
    },
    {
      "type": "edit",
      "id": "ff7891074803e47a",
      "item": {
        "type": "code",
        "id": "ff7891074803e47a",
        "text": "outputPage1.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n            channel.port2,]);",
        "alias": "be33076321a1377b"
      },
      "date": 1711367871310
    },
    {
      "type": "edit",
      "id": "ff7891074803e47a",
      "item": {
        "type": "code",
        "id": "ff7891074803e47a",
        "text": "channel.port1.onmessage = onMessage;\n\noutputPage1.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n            channel.port2,]);",
        "alias": "be33076321a1377b"
      },
      "date": 1711368115092
    },
    {
      "id": "e245aaca92bd9749",
      "type": "move",
      "order": [
        "80a6c059fa00493b",
        "973405a8f26e3405",
        "cc2d0c36356e65a6",
        "f6d930b6173f058c",
        "a5f0070e84998f1a",
        "deb5d73612bd7987",
        "a15db36716f7cc10",
        "e35c7aaeb132b384",
        "a5180569683e4ba1",
        "21ddb188e1128674",
        "e245aaca92bd9749",
        "ff7891074803e47a",
        "86e0f61f94dd7f79",
        "d689a261fa0114de",
        "885af6723f8ef98e",
        "05d29aed01c71f34",
        "939832e6ea52d96c",
        "eaefe5947f4d4529",
        "033c03b7373a6fdd",
        "be33076321a1377b"
      ],
      "date": 1711368130335
    },
    {
      "type": "edit",
      "id": "ff7891074803e47a",
      "item": {
        "type": "code",
        "id": "ff7891074803e47a",
        "text": "channel.port1.onmessage = onMessage;\n\n//outputPage1.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n            channel.port2,]);",
        "alias": "be33076321a1377b"
      },
      "date": 1711368172845
    },
    {
      "type": "edit",
      "id": "ff7891074803e47a",
      "item": {
        "type": "code",
        "id": "ff7891074803e47a",
        "text": "channel.port1.onmessage = onMessage;",
        "alias": "be33076321a1377b"
      },
      "date": 1711368188865
    },
    {
      "type": "remove",
      "id": "be33076321a1377b",
      "date": 1711368202985
    },
    {
      "type": "edit",
      "id": "ff7891074803e47a",
      "item": {
        "type": "code",
        "id": "ff7891074803e47a",
        "text": "// Listen for messages on port1\nchannel.port1.onmessage = onMessage;",
        "alias": "be33076321a1377b"
      },
      "date": 1711368535192
    },
    {
      "id": "45f4d4507ca74813",
      "type": "add",
      "item": {
        "type": "code",
        "id": "45f4d4507ca74813",
        "text": "// Transfer port2 to the iframe\n        iframe.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n          channel.port2,\n        ]);"
      },
      "after": "ff7891074803e47a",
      "attribution": {
        "page": "scratch"
      },
      "date": 1711368584023
    },
    {
      "type": "edit",
      "id": "45f4d4507ca74813",
      "item": {
        "type": "code",
        "id": "45f4d4507ca74813",
        "text": "// Transfer port2 to the outputPage2\noutputPage2.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\n          channel.port2,\n        ]);"
      },
      "date": 1711368625020
    },
    {
      "type": "edit",
      "id": "45f4d4507ca74813",
      "item": {
        "type": "code",
        "id": "45f4d4507ca74813",
        "text": "// Transfer port2 to the outputPage2\noutputPage2.postMessage(\"Hello from the main page!\", \"*\", [\n          channel.port2,\n        ]);"
      },
      "date": 1711368710542
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1711398931997
    },
    {
      "type": "edit",
      "id": "80a6c059fa00493b",
      "item": {
        "type": "paragraph",
        "id": "80a6c059fa00493b",
        "text": "The [[Channel Messaging API]] allows two separate scripts running in different [[Browsing Context]]s attached to the same document (e.g., two <iframe> elements, the main document and a single <iframe>, or two documents via a SharedWorker) to communicate directly, passing messages between each other through two-way channels (or pipes) with a port at each end. [https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging mdn]"
      },
      "date": 1711436694744
    },
    {
      "type": "edit",
      "id": "973405a8f26e3405",
      "item": {
        "type": "paragraph",
        "id": "973405a8f26e3405",
        "text": "Note: For more information and ideas, the [[Ports]] as the basis of an [[Object-capability Model]] on the Web section of the spec is a useful read. [https://html.spec.whatwg.org/multipage/web-messaging.html#ports-as-the-basis-of-an-object-capability-model-on-the-web page]"
      },
      "date": 1711436767088
    },
    {
      "type": "edit",
      "id": "973405a8f26e3405",
      "item": {
        "type": "paragraph",
        "id": "973405a8f26e3405",
        "text": "Note: For more information and ideas, the [[Ports]] as the basis of an [[Object-Capability Model]] on the Web section of the spec is a useful read. [https://html.spec.whatwg.org/multipage/web-messaging.html#ports-as-the-basis-of-an-object-capability-model-on-the-web page]"
      },
      "date": 1711436778915
    }
  ]
}