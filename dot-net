{
  "title": "Dot Net",
  "story": [
    {
      "type": "html",
      "text": "Colloquial name for the [[Common Language Infrastructure]]/[[Common Language Runtime]] (and probably several other [[Common Language Something]] abbreviations that i can't think of right now).",
      "id": "016f89d9c88e690793808be5536838fa"
    },
    {
      "type": "html",
      "text": "\nSee [[Microsoft Dot Net]] for [[Micro Soft]]'s implementation, and [[Mono Project]] and [[Portable Dot Net]] for [[Open Source]]/[[Free Software]] implementations.",
      "id": "8a425a660d57fd3e545c0705cc3f737e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "<b>When Should We Use .NET ?</b>",
      "id": "3c2639474e507e9a10ede45f98b8c486"
    },
    {
      "type": "html",
      "text": " <i>When you boss asks you whether you are with him, or want to seek better opportunities elsewhere </i>:)",
      "id": "3017a761e12596a5b4b15c965f08e7d0"
    },
    {
      "type": "html",
      "text": "\nThis is the most important or at least the very first question to be answered of all. But here, just as everywhere else, silence reigns. I've been raising the why-question for over a year now, but got only two answers, both of 'm not very convincing:",
      "id": "bda58999ac3e18f5c58d8ab6cd205f3d"
    },
    {
      "type": "html",
      "text": " <i>because everyone's going to use it</i>",
      "id": "2dcc8552edbb703acaa3c92ce8ea805f"
    },
    {
      "type": "html",
      "text": " <i>because Uncle Bill wants us to</i>",
      "id": "a04f3e7226eac434882cf20248744a63"
    },
    {
      "type": "html",
      "text": "\nWdW",
      "id": "6a072f462894f91e50510e8d42e3618f"
    },
    {
      "type": "html",
      "text": "\nOk, if you want some real answers from Microsoft, use .NET...: ",
      "id": "e43b26f2337ef3c8797ece34a1377717"
    },
    {
      "type": "html",
      "text": " because you get stuff done faster - building stuff is easier",
      "id": "60ee2b36d22f1338d4d8838334781ba6"
    },
    {
      "type": "html",
      "text": " because what you build runs more reliably and faster ",
      "id": "a873b9532411d52973b00496457e7719"
    },
    {
      "type": "html",
      "text": "\nThese are essentially the same reasons people moved from C++ to Java.  Now hold on, I hear all you C++ weenies saying, \"wha?  Java faster than C++?\"  and the answer is, \"Sure!\" in many cases.  And the same applies to .NET.  Complicated things get much simpler in the managed runtime of .NET, and therefore run more reliably.  Also, because the common language runtime does lots of work for you, in an optimized way, oftentimes real world apps will be faster.  a micro-benchmark like linpack will still be faster in C++, but most real-world apps will run better in a managed environment.  ",
      "id": "d0845094b543bd9a6143246062ae81a3"
    },
    {
      "type": "html",
      "text": "\nThis is borne out by customer experience.  .NET 1.0 was introduced in February 2002, 1.1 in April 2003, and 2.0 in November 2005.  In all cases customers began using it because they get stuff done faster, and the stuff they get done, works better. ",
      "id": "fc4b0a53c3c4a7d7a75c1c83d073b9e1"
    },
    {
      "type": "html",
      "text": "\nIf you listen to [[Miguel De Icaza]], progenitor of Mono, he selected the .NET model because it fostered re-use.  ",
      "id": "fa802dc9f265047996c2b3c88321888c"
    },
    {
      "type": "html",
      "text": "--[[Dino Chiesa]]",
      "id": "e39ffc928c62ee20c2a826200f483230"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "<b>When Should We Not Use .NET?</b>",
      "id": "b06a267f610b9312d301b4fa6f4ff8fb"
    },
    {
      "type": "html",
      "text": " <i>When [[Bill Gates]] tells us he has the [[Next Big Thing]] ready</i>",
      "id": "17f99527ccfd3c03386c62614111d07e"
    },
    {
      "type": "html",
      "text": "\nAgain, for some real answers from Microsoft, don't use .NET when...:",
      "id": "59229781674b6d7243314d42bf916ecc"
    },
    {
      "type": "html",
      "text": " you want maximum possible performance and you are comfortable with C++",
      "id": "dd0b0aec69bb0cf6314d83a82cc0880f"
    },
    {
      "type": "html",
      "text": " you are building device drivers (in which case use C++)",
      "id": "9dea85380531d0246bc30549ffb60246"
    },
    {
      "type": "html",
      "text": " you want maximum performance in database logic (in which case use T-SQL)",
      "id": "df529b382aa1d9602b8a80fb500fd7b0"
    },
    {
      "type": "html",
      "text": " you don't want your executable to be decompiled (as in reverse-engineered)",
      "id": "d1da5c286ae1fc0a3bc0d672e15c3469"
    },
    {
      "type": "html",
      "text": "\nOtherwise, .NET is the mainstream model for applications that run on Windows clients, devices, and servers. ",
      "id": "321880bc247e813fe3d91d8f8c385e30"
    },
    {
      "type": "html",
      "text": "--[[Dino Chiesa]]",
      "id": "e39ffc928c62ee20c2a826200f483230"
    },
    {
      "type": "html",
      "text": "<i>heh, I initially read 'in other words' for otherwise</i>",
      "id": "c571d3f5b9d157901777061806ea09d4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "( rant removed, because [[Bad Code Can Be Written In Any Language]] ).",
      "id": "5694ce71a0193fb8c4c95db33346dcdf"
    },
    {
      "type": "html",
      "text": "\nPlease point me to some programs which use [[Dot Net]] that do anything useful? i.e. what exactly is the point, in real world terms? (bill-me for Smilies, bill-me for emotioncons? bill-me for conversations? Through a virtual machine of some sort, versus through TCP/IP? Sorry, I'm missing something here.). ",
      "id": "cdeffa06abe62a237df560805922a14f"
    },
    {
      "type": "html",
      "text": "\nThe point is, it's easier to build.  Some examples of real things built on .NET:",
      "id": "54ad8ffa6a2cad49ab7694de9ce00389"
    },
    {
      "type": "html",
      "text": " Snap<b></b>Stream's BeyondTV - PVR built entirely in managed code. ",
      "id": "974809566ecd393105b2203d6bb247c9"
    },
    {
      "type": "html",
      "text": " Paint.NET - open source photo editing package built in .NET, see [http://www.eecs.wsu.edu/paint.net/ www.eecs.wsu.edu]",
      "id": "a6713e2faab9b836897e6688744dd1ea"
    },
    {
      "type": "html",
      "text": " Broderbund [[Print Shop]] 20 Deluxe and  [[Print Shop]] 20 Professional Publisher Deluxe ",
      "id": "d3e95d80859ce51dfe7ee2850a38077a"
    },
    {
      "type": "html",
      "text": " Autodesk's AutoCAD 2005 ",
      "id": "32773bce6a234be911582a768f932a00"
    },
    {
      "type": "html",
      "text": " SVCD2DVD - see [http://www.svcd2dvd.com/ www.svcd2dvd.com]",
      "id": "7c41f93d363e46a96d4c7fa2ddd7e486"
    },
    {
      "type": "html",
      "text": " Dot<b></b>Net<b></b>Nuke - portal built on .NET and ASP.NET",
      "id": "bd96531e796106d289c480e9fb750659"
    },
    {
      "type": "html",
      "text": " Rss<b></b>Bandit - free RSS aggregator , see [http://www.rssbandit.org/ www.rssbandit.org]",
      "id": "6a437191908f864885cbf9c2a40a5ed7"
    },
    {
      "type": "html",
      "text": " Community<b></b>Server - portal, forums, blogs, gallery; see [http://communityserver.org/default.aspx communityserver.org]",
      "id": "b376f03be7527aa48605674bdc28d972"
    },
    {
      "type": "html",
      "text": " SQL Server Reporting Services ",
      "id": "9d20cf7d1ea6c0150cb9b181c5175efd"
    },
    {
      "type": "html",
      "text": " Jet<b></b>Brains Omea Reader - see [http://www.jetbrains.com/omea/download/reader.html www.jetbrains.com]",
      "id": "80a21a17ad0fd0ce71d6668b837c69fc"
    },
    {
      "type": "html",
      "text": " Windows UDDI Services - part of Windows, built in .NET",
      "id": "94561d6f353b132e378cfc2232dbfe4b"
    },
    {
      "type": "html",
      "text": " Office 2003 Business Contact Manager - part of Office, built in .NET",
      "id": "2705ca5f705a04d232214bf6391335bf"
    },
    {
      "type": "html",
      "text": " GB PVR - personal video recorder (currently free) - [http://www.gbpvr.com/ www.gbpvr.com]",
      "id": "c07051319df901da7cf316104847c1c0"
    },
    {
      "type": "html",
      "text": " Windows Media Center - extensions almost entirely built in .NET",
      "id": "51d4c1b9e2bf018636a9e3f70b4718e8"
    },
    {
      "type": "html",
      "text": " other PVRs too",
      "id": "c7b6278c8eb297c2999a900db205bca0"
    },
    {
      "type": "html",
      "text": " [[Sharp Develop]] - open source IDE built entirely in .NET, see sourceforge.net/projects/sharpdevelop",
      "id": "d31c2f762a637b3e07b602c594f19eb4"
    },
    {
      "type": "html",
      "text": " [[Hg Lab]] - source control management system for [[Mercurial Version Control]] with push and pull server, streaming support, repository browser, [[Active Directory]] integration and a whole slew of other goodies - [http://hglabhq.com hglabhq.com]",
      "id": "2d75716db78098723efac163d4294dd6"
    },
    {
      "type": "html",
      "text": " [[Flex Wiki]] - open source Wiki built in C# (and running on .NET), see sourceforge.net/projects/flexwiki/",
      "id": "d096755b8440546f50d2cc829a46282b"
    },
    {
      "type": "html",
      "text": " a number of other wiki's too",
      "id": "0679e86753bba99eb9ac69175f54149c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "<b>Frequently and Not So Frequently Asked Questions</b>",
      "id": "80f72d71841b3abd04dfb686e54e7550"
    },
    {
      "type": "html",
      "text": "\nQ. <b>Is [[Microsoft Dot Net]] just a fancy term for Client/Server?</b>",
      "id": "c3cd5f66e320862fa7a4b7a93367d24d"
    },
    {
      "type": "html",
      "text": "\nA.  No.  .NET implies managed code, a common language runtime and base class library.  ",
      "id": "a6e2f72a6da2fcbdae10665d1335cade"
    },
    {
      "type": "html",
      "text": "\nQ. <b>Is [[Microsoft Dot Net]] better thought of as a system of federated services (on servers) for clients?</b>",
      "id": "74a187f295c6411d171842a4f9bfad52"
    },
    {
      "type": "html",
      "text": "\nA. No.  There was a thing called [[Microsoft Hailstorm]], which was intended to be a federation of services.  But that did not happen.  It was announced around the same time as the .NET Framework, but never delivered. ",
      "id": "ca96832630b53abf4ce45a6946ac079a"
    },
    {
      "type": "html",
      "text": "\nQ. <b>Why the confusion around [[Microsoft Dot Net]] ? </b>",
      "id": "2caef80b431be356a419f3444b92262d"
    },
    {
      "type": "html",
      "text": "\nA.  Probably because Microsoft attached the .NET moniker to every product that got revised within a certain window, and so the marketing term had no value or meaning.  But since then .NET has been \"pulled back\" to refer primarily to the common language runtime, the base class library, and the associated technology. ",
      "id": "37937f8188181a33b2cc1ac83f0ff0bb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "<b>Discussion about Reformatting this Page</b>",
      "id": "7d7eae2061cbbe23465d548c22b8454f"
    },
    {
      "type": "html",
      "text": "<i>note: this page currently has 171 [[Back Link]]s, whereas [[Microsoft Dot Net]] has 104. One of them should probably be refactored out, but not without someone updating the relevant pages - replace references to [[Dot Net]] used in a vendor-agnostic context with links to [[Common Language Runtime]] or [[Common Language Infrastructure]], maybe, and references where it's used to refer to Microsoft's implementation with links to [[Microsoft Dot Net]]?</i> --[[Mike Roome]]",
      "id": "c35509d52e16c82ffac3b354cb6f8736"
    },
    {
      "type": "html",
      "text": " [[Microsoft Dot Net]] is a mouthful, and I also use [[Dot Net]] in the same page later on. If I edit a page that discusses a generic technology, and I want to introduce an MS perspective, then I would be tempted to use the full name the first time around. I think for searching related topics one should probably look at it from [[Category Dot Net]], then go through [[Dot Net]] links for additional entries. I would not use [[Microsoft Dot Net]]  What do you think, Mike?  -- [[David Liu]] ",
      "id": "f45c8067701d579f6cf5ad475245e97e"
    },
    {
      "type": "html",
      "text": "\nGiven the existence of GNU pNET and Mono, [[Microsoft Dot Net]] would not be an accurate [[Wiki Name]].  Granted, .NET is specifically a microsoft term (when it's not a TLD) but it's become pretty much generic",
      "id": "33d871b112aa46db9c31715683a97c0e"
    },
    {
      "type": "html",
      "text": " I take your point, but at this moment (2004) [[Dot Net]] from nonMicrosoft sources is not commercially viable (or am I wrong?). When we start seeing other versions of [[Dot Net]] being used in Fortune 500 companies then it is time to re-examine the names used here. -- [[David Liu]]",
      "id": "aef2b9487c48936410bfe19dad4fa9d4"
    },
    {
      "type": "html",
      "text": " I suggest for now it is sufficient to mention that other [[Dot Net]] initiatives exist (outside MS), and these efforts are laudable. -- dl ",
      "id": "dceff61b4acc2f016a116f1840643f23"
    },
    {
      "type": "html",
      "text": " I think the Mono guys would be very unhappy with that statement, they have released 1.0 as of June, and I've heard it's pretty damn good.",
      "id": "50f760ef971d6e9837c279b2ea58b8bd"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "<i>because you get stuff done faster - building stuff is easier</i>",
      "id": "3302e5d38ec0c1fb2f94797441a7d790"
    },
    {
      "type": "html",
      "text": "\nCould you go into a little more detail?\nIs this entirely because of [[Managed Code]], or is there something else involved?",
      "id": "1a6f08b8d724a4c54b7cf11b02b1ba49"
    },
    {
      "type": "html",
      "text": "<i>In all cases customers began using it because they get stuff done faster, and the stuff they get done, works better.</i>",
      "id": "c1b5c92611bc8558f79027ba83c3f2ef"
    },
    {
      "type": "html",
      "text": "\n[[In All My Years Ive Never]] seen anyone <i>begin</i> using something for those reasons.\nPeople begin using a new tool because they <i>suspect</i> this tool might help them do stuff faster/better.\nI'll probably begin using [[Dot Net]] next week.\nI might use it for a few weeks and then decide I get no benefit from it, and toss it.\nOr I might decide it's kinda nice and keep it.\nThere's really no way for me to tell right now. That's why I'm doing the experiment.\nI *am* pretty sure, ahead of time, that it won't let me develop an order-of-magnitude faster,\nbecause the [[No Silver Bullet]] essay by [[Fred Brooks]] has pretty much convinced me that's not possible.\nIt would be nice, if I knew what sort of more subtle 5% and 10% improvements to look for in this experiment.\nWhat tasks am I'm doing right now that this Dot Net lets me skip over, so I can focus on more important stuff?",
      "id": "2c13b4a42d6d9fbd6bf8f21102e08a60"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "\nI started using .NET back in 2004, when it could have been described as an \"emerging\" platform. I dove in the deep end, and rewrote our main product - a high-end 3D game engine and tools - in C#, and was pleasantly surprised. I'd never even consider writing complex game code in C++ again.",
      "id": "97e6b697fd17d6de3fd2e2106ee34537"
    },
    {
      "type": "html",
      "text": ".NET 2.0 made things even better, and now .NET 3.5 with C#3 is incredible.",
      "id": "21dff2e4d8282ba90efb92156d2aea1e"
    },
    {
      "type": "html",
      "text": "\nI think the biggest wins here are:",
      "id": "a13b2dbc1bdd34188cc071767e2af4a8"
    },
    {
      "type": "html",
      "text": " If you simply cannot write through a stray pointer (because there are none!), all those *really nasty* memory bugs go away. You don't need the debugger nearly as much.",
      "id": "02693d0053b295fe409c78cf741726bb"
    },
    {
      "type": "html",
      "text": " The library is (for the most part) decent. Sure, there have been the occasional [[Brain Fart]] contributions from Uncle Bill (Managed DirectX and its successor, XNA, are definitely two of them)... but the basic stuff - strings, collections, networking - are very usable. The newest stuff (\"[[Microsoft Linq]]\") is also interesting... we've found we like all the new library support it adds, but shun the SQL-like syntax.",
      "id": "099a45dd76fe103999b06f63e806720f"
    },
    {
      "type": "html",
      "text": " If you need to do interop with legacy stuff - COM, native DLLs, etc - it's generally painless. For the really tricky cases, (COM without a useful typelib, a la DirectX) C++/CLI is great.",
      "id": "c5fb8ea154d5d8afcdda26056faae1eb"
    },
    {
      "type": "html",
      "text": " The performance is great. Its good enough to build cutting-edge 3D games in - I know, because we've done it. Maybe 5% hit, but the productivity benefits are worth so much more than that.",
      "id": "7d4f6d5321d8b770228959fc0fdf464c"
    },
    {
      "type": "html",
      "text": "\nAll in all, for anything but the most constrained embedded development, I'd recommend it. Well done to Uncle Bill on this one.",
      "id": "1cde0163b6448b113ddbb22d03b5e82a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "I haven't written a high-end 3D game engine, but I think XNA is pretty good, certainly good enough for a hobbyist game programmer.",
      "id": "acb60f395bcb35af39c610c9e4204172"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "<b>Configuration Hell</b>",
      "id": "5136fb251cd2328729f1ea903d28a66b"
    },
    {
      "type": "html",
      "text": "\nI'm trying to switch to dot-net, and am having tons of headaches trying to get even basic Hello World programs to run the same on test and production server. (That's why I've been so quiet of late.) I've googled all over for tips and add funny bureaucratic tags, remove funny bureaucratic tags, etc. and still the sucker won't run right on both. I've never had this kind of crap using [[Cold Fusion]] for almost a decade. Version 6 CF apps usually ran just fine on version 9 on both test and production without a single fricken change to the source code, and the few that did need changes were obvious to track down. It makes DLL-hell look good in comparison. Changes in dot-net source fix one thing and break another in a diff environment. Dot-net appears to be a potpourri of disparate and different-schedule-of-change components forced together under the polluted glue known as \"dot net\". Arrrgggg. -t",
      "id": "c81ac9cbeae14b9881753baf15384467"
    },
    {
      "type": "html",
      "text": "<i>You mean you're trying to switch to ASP.NET?  *.NET is a much, much bigger world than just the webby stuff.  It's kinda like how the Java world is much bigger than just JSP.  In fact, it's exactly like that.</i>",
      "id": "40f3a8387bb25fa2a5178ea536dcb686"
    },
    {
      "type": "html",
      "text": " [[Edit Hint]]: feel free to move it to a more appropriate topic.",
      "id": "8ebe0f4ed157bac558c809e7bde11941"
    },
    {
      "type": "html",
      "text": "<i>I solved all my ASP.NET problems by using PHP.  Almost simultaneously, my office-mate solved all his PHP problems by using ASP.NET.  I'm not sure what to make of that, except to note that there seem to be UNIX people who can get things done with PHP whilst Microsoft things break, and there seem to be Windows people who get things done with ASP.NET whilst UNIX things break.  Maybe you're a UNIX person?</i>",
      "id": "0f3e7f6180f953a1718a0621619b3771"
    },
    {
      "type": "html",
      "text": "\nUnfortunately, I didn't have a choice of language/tool. It's what the shop uses. I'd much rather use PHP if given a choice. (I've used PHP before, but I still prefer CF's less type-tag oriented typing system to PHP's). And ASP.NET does remind me of Java in many ways. When MS clones something out of fear, they really do clone it. Part of the problem is that I need \"conditional controls\". If your controls are static, then ASP.NET makes things fairly easy via click and drag. However, key parts of this app are not static. Their display order changes and are mixed object \"types\" such that a \"repeater\" control won't work. MS in general makes things easy if you do it THEIR way, but convoluted if you wander off the beaten path. And, why the hell does it take 5 classes to issue an SQL query and loop through the results? Should only be 2 classes for common queries and 3 under special circumstances.",
      "id": "11ec98bc057417bc77dc5fe778377c0b"
    },
    {
      "type": "html",
      "text": "\n[[Cold Fusion Language]] was easy to learn to use and remember data-wise because most queries were done via something similar to following construct:",
      "id": "0c7e3f00c9d06605a1d83470bcc50db1"
    },
    {
      "type": "code",
      "text": " <cfQuery name=\"myQuery\" configurationClausesPlaceHolder...>\n   SELECT * FROM foo \n   WHERE bar = #integerSqlParam(myID)#\n </cfQuery>\n ...\n <cfLoop query=\"myQuery\">\n    <!--- Comment: Do something with each record --->\n </cfLoop>",
      "id": "ba0c14766a49564412bfb446d1780a2b"
    },
    {
      "type": "html",
      "text": "\nIt wouldn't matter if the data came from MS-Access, [[My Sql]], Oracle, etc., the construct remains pretty much the same. The vendor- or configuration-specific differences were all in the \"configurationClausesPlaceHolder...\" attributes, not in the general data handling interface and root classes.  I don't see anything similar in the Dot.Net framework unless one writes it themselves using the gajillion different ways to do it for each vendor or RAM configuration. It's a similar issue to that near the bottom of [[Java Io Classes Are Impossible To Understand]] which revolves around whether configuration details should be \"parent\" over a more general interface. (The above does have a few downsides I will admit, but only for blue-moon needs. Also, much of the DB setup is done in the DB configuration console, not in code in newer versions, but this is a concept illustration, not a CF version critique.) -t",
      "id": "7c8a059e1845ddb3b56e077d68dea9b5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "Does anybody have any suggestions for make apps be <b>DB-vendor neutral</b> so it's possible to switch in one place rather than hard-wire the code to a particular DB brand? The built-in data-source controls don't seem to support such that I can find that works well with other data-centric controls. I've only found very round-about bloaty ways. Is this a trick to lock people into their DB brands? -t",
      "id": "57d9f12fad686d127a549cbe44203e5f"
    },
    {
      "type": "html",
      "text": "\nHere's an article about using the Sql-data-connector with ODBC pre-configurations, but in my case I'm using OLE and can't change to ODBC. One of these days I'll try to see if it can be rigged for OLE.",
      "id": "cce24cf510355dabb6d7fe3b52f29a95"
    },
    {
      "type": "html",
      "text": "\n[http://msdn.microsoft.com/en-us/library/35c54x95%28v=vs.80%29.aspx msdn.microsoft.com]",
      "id": "4b5f7eb62e48eb4cadd7d1c16c42156a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "<b>Opaque Widgets</b>",
      "id": "acfd9bd14bb6d59c019d8543105405b6"
    },
    {
      "type": "html",
      "text": "\nDoes anyone know how to \"escape into HTML mode\" in a method in the App_Code folder? Using bunches of Print statements is not a friendly way to emit HTML. It's as if functions/methods are 2nd-class citizens. This kind of thing was a no-brainer in \"scriptish\" web languages.",
      "id": "5986d15f0fe09e9ed150e3f9b8ef0e5b"
    },
    {
      "type": "html",
      "text": "<i>You'll need to be more specific about what you are trying to do.  If it's what I think it is, then you can't as there is no \"HTML mode\".  However, there should be objects that you can use that take care of all the print stuff for you.</i>",
      "id": "1c8b6e9a6b2a9850d75ba77db2949244"
    },
    {
      "type": "html",
      "text": "\nFor example, in PHP you can do this:",
      "id": "94f81031147b1c8017a72573199b7717"
    },
    {
      "type": "code",
      "text": "  function drawRow(row) {\n    ?>\n    <tr class=\"myRowFmt\">\n       <td>Thing</td>\n       <td><?php=$row['first_name']?></td>\n       <td><?php=$row['last_name']?></td>\n       <td><?php=$row['IQ']?></td>\n    </tr>\n    <?php\n  }",
      "id": "e78d1281c6fcaabbc5c4bd31bc1d09e6"
    },
    {
      "type": "html",
      "text": "\nSimilarly, in [[Cold Fusion Language]] you can do:",
      "id": "1f0c59a1bf993da956c013a4d34a16f8"
    },
    {
      "type": "code",
      "text": "  <cfFunction name=\"drawRow\" output=\"yes\">\n    <cfArgument name=\"myRow\">\n    <tr class=\"myRowFmt\">\n       <td>Thing</td>\n       <td>#myRow.first_name#</td>\n       <td>#myRow.last_name#</td>\n       <td>#myRow.IQ#</td>\n    </tr>\n  </cfFunction>\n  <!-- note: the output=yes parameter allows one to directly embed variables without extra tags -->",
      "id": "5dc7f2294be0578d60bf60b8e74b8a2a"
    },
    {
      "type": "html",
      "text": "\nIt can make code a lot easier to read than \"print\" statements if a lot of HTML is being used. It is true one can create function/method wrappers such as \"drawCell\", but sometimes for intricate output it's very helpful to have the fine control of direct HTML. It's more WYSIWYG. (This example doesn't really illustrate the value of simplification. I'll see if I can present a better one later.) -t",
      "id": "31057f69a3ca85cd181efffe2c9517ae"
    },
    {
      "type": "html",
      "text": "<i>No need for another example.  As far as I can tell, my original response was correct.  You simply can't do that.  But, I still don't see why you need \"print\" statements or \"drawCell\" wrappers.  You could be using the objects already provided by .NET (e.g. [[Table Row]], [[Table Cell]]) and let ASP take care of the rendering (the \"print\" and \"drawCell\" stuff.)</i>",
      "id": "b8f75979d2e7bdb69f1bd6fd87f5706c"
    },
    {
      "type": "html",
      "text": "\nI haven't figured out yet how to \"intercept\" and adjust those. They are too blunt out of the box. I need conditionals etc. to fine-tune and tweak values and attributes dynamically. Just dumping cell values from the table into auto-row-objects as-is often produces ugly and/or misleading output. It usually needs a tweaking stage.  Sure, they \"take care of the rendering\" for you, but in their own wrong or unexpected way, like a new maid who's never seen your house before.",
      "id": "3a9a7a4247fb07028b8e63a78a840cc8"
    },
    {
      "type": "html",
      "text": "\nAlso, they seem limited. For example, the built-in drop-down list has no equivalent to OPTGROUP (the last time I checked). I keep running into walls where they get me 80% there but I thrash around trying to get the other 20% ([[Eighty Twenty Rule]]). Similarly, their image button widget works fine if you hard-wire in each picture, but I needed to do it dynamically from a folder listing and couldn't figure out how to do that in a timely manner. Their ID's had to be known to the compiler up front. The framework designers were all too happy to expect everyone is okay to hard-wire in everything. There's a big learning and/or re-coding [[Discontinuity Spike]] going from the drag-and-drop widget's built-in behavior to fine control via code.",
      "id": "a562395cbc3b48d59a1f81a14d551d59"
    },
    {
      "type": "html",
      "text": "\nIt's been easier just to create my own damned web objects/library. And when I web around to find the work-around's when they exist, they are often very clunky and counter-intuitive. Maybe I am going about it all wrong, but not sure where. It's too much like Java's libraries: deep, obscure, round-about, and bureaucratic when you want to do something outside of the base-line usage or defaults. I just want a baloney sandwich, not go to butcher school.",
      "id": "9e2d0ccaa73d34ac082b9d453dc94b45"
    },
    {
      "type": "html",
      "text": "\nOthers have said that's how MS locks into their world: you spend so much effort trying to get their stuff to work like you or the customer wants that you don't want to leave MS and \"waste\" that investment in MS tool fiddling experience. I can tweak my own web objects in ten minutes when it takes 4+ hours of googling and/or trial-and-error to force MS's built-in's to do it right. Plus, my own web libraries and techniques can usually work in just about any language because I'm leveraging the [[Html Stack]], which most every language has to use anyhow for web stuff. If I change to another language, that knowledge still applies. Using MS's libraries only applies to MS's stacks. If you are born and die with MS, that might be okay. It's certainly what MS wants to happen.",
      "id": "cab21eb8270b002cd86ea69942c95382"
    },
    {
      "type": "html",
      "text": "\nMaybe I'm just a better programmer than I am a configuration googler (relative speaking); and export configurators find the opposite? Or do they just live with MS's ugly defaults and limits such that users just live with half-baked sluge, doing their own form of trial-and-error dance? I'm not a perfectionist, but I do want to avoid phone-calls and help-tickets from confused and angry users. My own web objects are rarely longer than two pages of code and are well-commented. Even the most complex rarely takes more than 45 minutes to grok and change (or copy and customize). An MS object issue takes roundly an average of 2 hours work around or fix. Maybe if I did asp.net for 5 years the time would become comparable. But then some other newfangled language or fad will probably displace it.",
      "id": "3d431b3d77a1ca69c72fced7842e25cf"
    },
    {
      "type": "html",
      "text": "\nAnd what would all the google-configurator's do if the product came from a smaller software company such that the web workarounds were few and far-between? I guess market-share gives you more freedom to suck.",
      "id": "091ff0c8f0ad8e4859e66acf961b77b6"
    },
    {
      "type": "html",
      "text": "\nAs described in [[Helpers Instead Of Wrappers]], it's usually best to date your objects/abstractions/frameworks, <i>not</i> marry them. MS forces you to marry them, and Bill Gates is not very good in bed. (See also \"Click-able Thumbnail Anecdote\" in that topic.)",
      "id": "7a88ef5b4549de5628c8ce5d5aae34eb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "Another thing I miss from [[Cold Fusion]] is the CFdump command for troubleshooting. One can use it to display (dump) an array/query/structure. PHP has similar automatic textual serialization of arrays. I haven't found the equiv in dot.net yet. (Or does each structure have to re-invent it to supply it?)",
      "id": "6aef3a680a9941820200bf8bb475cda5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "Re: 'As far as I can tell, my original response was correct. <b>You simply can't do that</b>. But, I still don't see why you need \"print\" statements or \"drawCell\" wrappers...'  [emph. added]",
      "id": "e4905dee935f8146e258322eba8f14f9"
    },
    {
      "type": "html",
      "text": "\nRegardless of the outcome of the \"need\" debate; to me it's pretty stupid and pre-limiting to only allow the HTML-friendly mode in the outer layer of abstraction or call tree. <b>Why hard-wire such a limit into a language stack?</b> It's just plain stupid -- an arbitrary wall. I'm calling MS on that one. [[Dot Net]] was supposed to fix dumb limits and arbitrary shit over VB-classic. They blew their opportunity. It's either a glaring mistake, or a way to obtain [[Vendor Lock]]. If you want people to take your language seriously and trust you with years of blood, sweat, and tears creating and maintaining source-code, you cannot jack it up like that.  Thank You for letting me rant on this. --top",
      "id": "45a001228af1710a7bcebc094c71567d"
    },
    {
      "type": "html",
      "text": "<i>What makes you think that only HTML friendly mode is required in the outer layer of abstraction?  I've done plenty of things in .NET that don't involve HTML at all.  It's only ASP.NET that really requires it, but that's not surprising since that's its purpose.</i>",
      "id": "5a7633e9f867fbce2a53fdce91295a3c"
    },
    {
      "type": "html",
      "text": "\nI'm not understanding that statement. I want HTML-friendly mode as an <i>option</i> for inner calls, regardless of whether it's used or not for a particular function/method. I never said it should always be used.",
      "id": "e21406b49c69175676e5b99d112c8e2c"
    },
    {
      "type": "html",
      "text": "<i>I see I made a mistake about what you wanted.  I thought you were claiming that .NET requires HTML at the outer layer, not that you want HTML in the inner layer.  That said, is there some reason [[String Builder]] won't do what you want?</i>",
      "id": "a7516e83da489c9ca9603d4d1ac14291"
    },
    {
      "type": "html",
      "text": "\nFor one, you lose WYSIWYG ability in the IDE. Second, if you use the built-in widgets, then it's not easy to \"escape into strings\" in the lower levels. They don't seem to have hooks for that. In for a penny, in for a pound. At least colleagues and I haven't figure out an easy way to do such. It makes for some really ugly work-arounds.",
      "id": "ece0cb48542e11ba1630b5f436c8e1e7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "<b>Database Config</b>",
      "id": "8fdabb3505cd9f7282d5b803444538a6"
    },
    {
      "type": "html",
      "text": "\nOn a similar vain to the above, it appears MS <b>hard-wires</b> database control also for most of its widgets. For example, I haven't found a way to select/determine the database source at run-time based on a connection string (which looks something like \"database=mybase,driver=sqlserver,username=foo,etc\") except in self-rolled widgets. It is possible to give a connection string a reference name in the \"web.config\" file and use that name in MS's widgets, but not change the reference name nor the connection string dynamically at run-time. (The reference name is not a \"normal\" variable that I can tell.) Maybe <b>dynamic languages have spoiled me</b> or ruined my thinking somehow, or I'm missing some special knowledge or skill to deal with Java-style-clones. These things are no-brainers in most dynamic languages, so why are they a pain to find or solve in ASP [[Dot Net]]? Is it a <i>necessary</i> sacrifice to obtain Intellisense (IDE assistance pop-ups)? -top",
      "id": "bf7f353cc091175ca6a7c444a3e77cbe"
    },
    {
      "type": "html",
      "text": "<i>Is there some reason the [[Connection String]] property doesn't work for you?</i>",
      "id": "db5771a2744b67d4be944f25e5254368"
    },
    {
      "type": "html",
      "text": "\nI couldn't get it to work with built-in widgets. Sure, it's probably doable somehow, but not intuitive the way it is in dynamic languages. In general, the \"static\" way to do things in [[Dot Net]] seems to vary much from the dynamic way to do the same thing such that one has to <b>dig and fuss and recode to change from static to dynamic</b>. There is no switch-over hump in good dynamic languages because there's no static version to begin with. -t",
      "id": "20a79cbdfc2d0995f7dd01e0ddcd826b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "An example of rolling your own web component is as follows: you have a form where a name/value pair takes up either an entire row, or half a row for smaller fields. I often roll app-specific calls that may resemble:",
      "id": "fdd4516462e248fd62c2f6caff38e7b1"
    },
    {
      "type": "code",
      "text": "  @<table class=\"mystyle\">\n  // first sample row\n  fullField(\"Title\", titleVar);\n  '\n  // 2nd sample row\n  leftField(\"First\", firstName);\n  rightField(\"Last\", lastName, required=true);\n  '\n  // 3rd sample row\n  fullField(\"Street Addr.\", street);\n  '\n  // 4th sample row\n  leftField(\"City\", city);\n  rightField(\"Zip\", zipCode);\n  '\n  Etc...\n  @</table>",
      "id": "b67fdef4ec69baed17b9e6ce7f778980"
    },
    {
      "type": "html",
      "text": "(Tick-marks are a work-around for a wiki render bug.)",
      "id": "b2d0e8003a9762b4a9e4330fbb71810a"
    },
    {
      "type": "html",
      "text": "\nThe functions take care of all the cell formatting for me, hiding it away. It's compact and easy to follow; an example of [[Work Backward From Pseudo Code]]. [[Dot Net]] makes this kind of thing more difficult. True, it may reduce pre-run validation ability, such as miss-matched pairs, but I'll take that as a trade-off. I place code-readability over machine checking.",
      "id": "e8bb33c4c63488202a976f8b388636cb"
    },
    {
      "type": "html",
      "text": "\nNote that one is not obligated to use the short-cut functions for formatting. If a specific row needs special treatment, then make custom code for that one. ",
      "id": "8f01f6df191967b94c8981b2dc439673"
    },
    {
      "type": "html",
      "text": "\nAlso note that it may be better to make the layout type be an attribute rather than part of the function name, such as \"layout=[left|right|full]\". Generally one tunes the interface to their environment anyhow.",
      "id": "d07266b8d9d730142c0dc975b7e4c682"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9a5ea14081ceabca81eaff947a70287c"
    },
    {
      "type": "html",
      "text": "[[Category Dot Net]]",
      "id": "5be4e5f7f9eab3594a7f34f419031c9f"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?DotNet c2.com]",
      "id": "5189900a556efb79778349e6a5da276b"
    }
  ],
  "journal": [
    {
      "date": 1364254617000,
      "id": "a744569345267d89b9922459f9f9317d",
      "type": "create",
      "item": {
        "title": "Dot Net",
        "story": [
          {
            "type": "html",
            "text": "Colloquial name for the [[Common Language Infrastructure]]/[[Common Language Runtime]] (and probably several other [[Common Language Something]] abbreviations that i can't think of right now).",
            "id": "016f89d9c88e690793808be5536838fa"
          },
          {
            "type": "html",
            "text": "\nSee [[Microsoft Dot Net]] for [[Micro Soft]]'s implementation, and [[Mono Project]] and [[Portable Dot Net]] for [[Open Source]]/[[Free Software]] implementations.",
            "id": "8a425a660d57fd3e545c0705cc3f737e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "<b>When Should We Use .NET ?</b>",
            "id": "3c2639474e507e9a10ede45f98b8c486"
          },
          {
            "type": "html",
            "text": " <i>When you boss asks you whether you are with him, or want to seek better opportunities elsewhere </i>:)",
            "id": "3017a761e12596a5b4b15c965f08e7d0"
          },
          {
            "type": "html",
            "text": "\nThis is the most important or at least the very first question to be answered of all. But here, just as everywhere else, silence reigns. I've been raising the why-question for over a year now, but got only two answers, both of 'm not very convincing:",
            "id": "bda58999ac3e18f5c58d8ab6cd205f3d"
          },
          {
            "type": "html",
            "text": " <i>because everyone's going to use it</i>",
            "id": "2dcc8552edbb703acaa3c92ce8ea805f"
          },
          {
            "type": "html",
            "text": " <i>because Uncle Bill wants us to</i>",
            "id": "a04f3e7226eac434882cf20248744a63"
          },
          {
            "type": "html",
            "text": "\nWdW",
            "id": "6a072f462894f91e50510e8d42e3618f"
          },
          {
            "type": "html",
            "text": "\nOk, if you want some real answers from Microsoft, use .NET...: ",
            "id": "e43b26f2337ef3c8797ece34a1377717"
          },
          {
            "type": "html",
            "text": " because you get stuff done faster - building stuff is easier",
            "id": "60ee2b36d22f1338d4d8838334781ba6"
          },
          {
            "type": "html",
            "text": " because what you build runs more reliably and faster ",
            "id": "a873b9532411d52973b00496457e7719"
          },
          {
            "type": "html",
            "text": "\nThese are essentially the same reasons people moved from C++ to Java.  Now hold on, I hear all you C++ weenies saying, \"wha?  Java faster than C++?\"  and the answer is, \"Sure!\" in many cases.  And the same applies to .NET.  Complicated things get much simpler in the managed runtime of .NET, and therefore run more reliably.  Also, because the common language runtime does lots of work for you, in an optimized way, oftentimes real world apps will be faster.  a micro-benchmark like linpack will still be faster in C++, but most real-world apps will run better in a managed environment.  ",
            "id": "d0845094b543bd9a6143246062ae81a3"
          },
          {
            "type": "html",
            "text": "\nThis is borne out by customer experience.  .NET 1.0 was introduced in February 2002, 1.1 in April 2003, and 2.0 in November 2005.  In all cases customers began using it because they get stuff done faster, and the stuff they get done, works better. ",
            "id": "fc4b0a53c3c4a7d7a75c1c83d073b9e1"
          },
          {
            "type": "html",
            "text": "\nIf you listen to [[Miguel De Icaza]], progenitor of Mono, he selected the .NET model because it fostered re-use.  ",
            "id": "fa802dc9f265047996c2b3c88321888c"
          },
          {
            "type": "html",
            "text": "--[[Dino Chiesa]]",
            "id": "e39ffc928c62ee20c2a826200f483230"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "<b>When Should We Not Use .NET?</b>",
            "id": "b06a267f610b9312d301b4fa6f4ff8fb"
          },
          {
            "type": "html",
            "text": " <i>When [[Bill Gates]] tells us he has the [[Next Big Thing]] ready</i>",
            "id": "17f99527ccfd3c03386c62614111d07e"
          },
          {
            "type": "html",
            "text": "\nAgain, for some real answers from Microsoft, don't use .NET when...:",
            "id": "59229781674b6d7243314d42bf916ecc"
          },
          {
            "type": "html",
            "text": " you want maximum possible performance and you are comfortable with C++",
            "id": "dd0b0aec69bb0cf6314d83a82cc0880f"
          },
          {
            "type": "html",
            "text": " you are building device drivers (in which case use C++)",
            "id": "9dea85380531d0246bc30549ffb60246"
          },
          {
            "type": "html",
            "text": " you want maximum performance in database logic (in which case use T-SQL)",
            "id": "df529b382aa1d9602b8a80fb500fd7b0"
          },
          {
            "type": "html",
            "text": " you don't want your executable to be decompiled (as in reverse-engineered)",
            "id": "d1da5c286ae1fc0a3bc0d672e15c3469"
          },
          {
            "type": "html",
            "text": "\nOtherwise, .NET is the mainstream model for applications that run on Windows clients, devices, and servers. ",
            "id": "321880bc247e813fe3d91d8f8c385e30"
          },
          {
            "type": "html",
            "text": "--[[Dino Chiesa]]",
            "id": "e39ffc928c62ee20c2a826200f483230"
          },
          {
            "type": "html",
            "text": "<i>heh, I initially read 'in other words' for otherwise</i>",
            "id": "c571d3f5b9d157901777061806ea09d4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "( rant removed, because [[Bad Code Can Be Written In Any Language]] ).",
            "id": "5694ce71a0193fb8c4c95db33346dcdf"
          },
          {
            "type": "html",
            "text": "\nPlease point me to some programs which use [[Dot Net]] that do anything useful? i.e. what exactly is the point, in real world terms? (bill-me for Smilies, bill-me for emotioncons? bill-me for conversations? Through a virtual machine of some sort, versus through TCP/IP? Sorry, I'm missing something here.). ",
            "id": "cdeffa06abe62a237df560805922a14f"
          },
          {
            "type": "html",
            "text": "\nThe point is, it's easier to build.  Some examples of real things built on .NET:",
            "id": "54ad8ffa6a2cad49ab7694de9ce00389"
          },
          {
            "type": "html",
            "text": " Snap<b></b>Stream's BeyondTV - PVR built entirely in managed code. ",
            "id": "974809566ecd393105b2203d6bb247c9"
          },
          {
            "type": "html",
            "text": " Paint.NET - open source photo editing package built in .NET, see [http://www.eecs.wsu.edu/paint.net/ www.eecs.wsu.edu]",
            "id": "a6713e2faab9b836897e6688744dd1ea"
          },
          {
            "type": "html",
            "text": " Broderbund [[Print Shop]] 20 Deluxe and  [[Print Shop]] 20 Professional Publisher Deluxe ",
            "id": "d3e95d80859ce51dfe7ee2850a38077a"
          },
          {
            "type": "html",
            "text": " Autodesk's AutoCAD 2005 ",
            "id": "32773bce6a234be911582a768f932a00"
          },
          {
            "type": "html",
            "text": " SVCD2DVD - see [http://www.svcd2dvd.com/ www.svcd2dvd.com]",
            "id": "7c41f93d363e46a96d4c7fa2ddd7e486"
          },
          {
            "type": "html",
            "text": " Dot<b></b>Net<b></b>Nuke - portal built on .NET and ASP.NET",
            "id": "bd96531e796106d289c480e9fb750659"
          },
          {
            "type": "html",
            "text": " Rss<b></b>Bandit - free RSS aggregator , see [http://www.rssbandit.org/ www.rssbandit.org]",
            "id": "6a437191908f864885cbf9c2a40a5ed7"
          },
          {
            "type": "html",
            "text": " Community<b></b>Server - portal, forums, blogs, gallery; see [http://communityserver.org/default.aspx communityserver.org]",
            "id": "b376f03be7527aa48605674bdc28d972"
          },
          {
            "type": "html",
            "text": " SQL Server Reporting Services ",
            "id": "9d20cf7d1ea6c0150cb9b181c5175efd"
          },
          {
            "type": "html",
            "text": " Jet<b></b>Brains Omea Reader - see [http://www.jetbrains.com/omea/download/reader.html www.jetbrains.com]",
            "id": "80a21a17ad0fd0ce71d6668b837c69fc"
          },
          {
            "type": "html",
            "text": " Windows UDDI Services - part of Windows, built in .NET",
            "id": "94561d6f353b132e378cfc2232dbfe4b"
          },
          {
            "type": "html",
            "text": " Office 2003 Business Contact Manager - part of Office, built in .NET",
            "id": "2705ca5f705a04d232214bf6391335bf"
          },
          {
            "type": "html",
            "text": " GB PVR - personal video recorder (currently free) - [http://www.gbpvr.com/ www.gbpvr.com]",
            "id": "c07051319df901da7cf316104847c1c0"
          },
          {
            "type": "html",
            "text": " Windows Media Center - extensions almost entirely built in .NET",
            "id": "51d4c1b9e2bf018636a9e3f70b4718e8"
          },
          {
            "type": "html",
            "text": " other PVRs too",
            "id": "c7b6278c8eb297c2999a900db205bca0"
          },
          {
            "type": "html",
            "text": " [[Sharp Develop]] - open source IDE built entirely in .NET, see sourceforge.net/projects/sharpdevelop",
            "id": "d31c2f762a637b3e07b602c594f19eb4"
          },
          {
            "type": "html",
            "text": " [[Hg Lab]] - source control management system for [[Mercurial Version Control]] with push and pull server, streaming support, repository browser, [[Active Directory]] integration and a whole slew of other goodies - [http://hglabhq.com hglabhq.com]",
            "id": "2d75716db78098723efac163d4294dd6"
          },
          {
            "type": "html",
            "text": " [[Flex Wiki]] - open source Wiki built in C# (and running on .NET), see sourceforge.net/projects/flexwiki/",
            "id": "d096755b8440546f50d2cc829a46282b"
          },
          {
            "type": "html",
            "text": " a number of other wiki's too",
            "id": "0679e86753bba99eb9ac69175f54149c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "<b>Frequently and Not So Frequently Asked Questions</b>",
            "id": "80f72d71841b3abd04dfb686e54e7550"
          },
          {
            "type": "html",
            "text": "\nQ. <b>Is [[Microsoft Dot Net]] just a fancy term for Client/Server?</b>",
            "id": "c3cd5f66e320862fa7a4b7a93367d24d"
          },
          {
            "type": "html",
            "text": "\nA.  No.  .NET implies managed code, a common language runtime and base class library.  ",
            "id": "a6e2f72a6da2fcbdae10665d1335cade"
          },
          {
            "type": "html",
            "text": "\nQ. <b>Is [[Microsoft Dot Net]] better thought of as a system of federated services (on servers) for clients?</b>",
            "id": "74a187f295c6411d171842a4f9bfad52"
          },
          {
            "type": "html",
            "text": "\nA. No.  There was a thing called [[Microsoft Hailstorm]], which was intended to be a federation of services.  But that did not happen.  It was announced around the same time as the .NET Framework, but never delivered. ",
            "id": "ca96832630b53abf4ce45a6946ac079a"
          },
          {
            "type": "html",
            "text": "\nQ. <b>Why the confusion around [[Microsoft Dot Net]] ? </b>",
            "id": "2caef80b431be356a419f3444b92262d"
          },
          {
            "type": "html",
            "text": "\nA.  Probably because Microsoft attached the .NET moniker to every product that got revised within a certain window, and so the marketing term had no value or meaning.  But since then .NET has been \"pulled back\" to refer primarily to the common language runtime, the base class library, and the associated technology. ",
            "id": "37937f8188181a33b2cc1ac83f0ff0bb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "<b>Discussion about Reformatting this Page</b>",
            "id": "7d7eae2061cbbe23465d548c22b8454f"
          },
          {
            "type": "html",
            "text": "<i>note: this page currently has 171 [[Back Link]]s, whereas [[Microsoft Dot Net]] has 104. One of them should probably be refactored out, but not without someone updating the relevant pages - replace references to [[Dot Net]] used in a vendor-agnostic context with links to [[Common Language Runtime]] or [[Common Language Infrastructure]], maybe, and references where it's used to refer to Microsoft's implementation with links to [[Microsoft Dot Net]]?</i> --[[Mike Roome]]",
            "id": "c35509d52e16c82ffac3b354cb6f8736"
          },
          {
            "type": "html",
            "text": " [[Microsoft Dot Net]] is a mouthful, and I also use [[Dot Net]] in the same page later on. If I edit a page that discusses a generic technology, and I want to introduce an MS perspective, then I would be tempted to use the full name the first time around. I think for searching related topics one should probably look at it from [[Category Dot Net]], then go through [[Dot Net]] links for additional entries. I would not use [[Microsoft Dot Net]]  What do you think, Mike?  -- [[David Liu]] ",
            "id": "f45c8067701d579f6cf5ad475245e97e"
          },
          {
            "type": "html",
            "text": "\nGiven the existence of GNU pNET and Mono, [[Microsoft Dot Net]] would not be an accurate [[Wiki Name]].  Granted, .NET is specifically a microsoft term (when it's not a TLD) but it's become pretty much generic",
            "id": "33d871b112aa46db9c31715683a97c0e"
          },
          {
            "type": "html",
            "text": " I take your point, but at this moment (2004) [[Dot Net]] from nonMicrosoft sources is not commercially viable (or am I wrong?). When we start seeing other versions of [[Dot Net]] being used in Fortune 500 companies then it is time to re-examine the names used here. -- [[David Liu]]",
            "id": "aef2b9487c48936410bfe19dad4fa9d4"
          },
          {
            "type": "html",
            "text": " I suggest for now it is sufficient to mention that other [[Dot Net]] initiatives exist (outside MS), and these efforts are laudable. -- dl ",
            "id": "dceff61b4acc2f016a116f1840643f23"
          },
          {
            "type": "html",
            "text": " I think the Mono guys would be very unhappy with that statement, they have released 1.0 as of June, and I've heard it's pretty damn good.",
            "id": "50f760ef971d6e9837c279b2ea58b8bd"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "<i>because you get stuff done faster - building stuff is easier</i>",
            "id": "3302e5d38ec0c1fb2f94797441a7d790"
          },
          {
            "type": "html",
            "text": "\nCould you go into a little more detail?\nIs this entirely because of [[Managed Code]], or is there something else involved?",
            "id": "1a6f08b8d724a4c54b7cf11b02b1ba49"
          },
          {
            "type": "html",
            "text": "<i>In all cases customers began using it because they get stuff done faster, and the stuff they get done, works better.</i>",
            "id": "c1b5c92611bc8558f79027ba83c3f2ef"
          },
          {
            "type": "html",
            "text": "\n[[In All My Years Ive Never]] seen anyone <i>begin</i> using something for those reasons.\nPeople begin using a new tool because they <i>suspect</i> this tool might help them do stuff faster/better.\nI'll probably begin using [[Dot Net]] next week.\nI might use it for a few weeks and then decide I get no benefit from it, and toss it.\nOr I might decide it's kinda nice and keep it.\nThere's really no way for me to tell right now. That's why I'm doing the experiment.\nI *am* pretty sure, ahead of time, that it won't let me develop an order-of-magnitude faster,\nbecause the [[No Silver Bullet]] essay by [[Fred Brooks]] has pretty much convinced me that's not possible.\nIt would be nice, if I knew what sort of more subtle 5% and 10% improvements to look for in this experiment.\nWhat tasks am I'm doing right now that this Dot Net lets me skip over, so I can focus on more important stuff?",
            "id": "2c13b4a42d6d9fbd6bf8f21102e08a60"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "\nI started using .NET back in 2004, when it could have been described as an \"emerging\" platform. I dove in the deep end, and rewrote our main product - a high-end 3D game engine and tools - in C#, and was pleasantly surprised. I'd never even consider writing complex game code in C++ again.",
            "id": "97e6b697fd17d6de3fd2e2106ee34537"
          },
          {
            "type": "html",
            "text": ".NET 2.0 made things even better, and now .NET 3.5 with C#3 is incredible.",
            "id": "21dff2e4d8282ba90efb92156d2aea1e"
          },
          {
            "type": "html",
            "text": "\nI think the biggest wins here are:",
            "id": "a13b2dbc1bdd34188cc071767e2af4a8"
          },
          {
            "type": "html",
            "text": " If you simply cannot write through a stray pointer (because there are none!), all those *really nasty* memory bugs go away. You don't need the debugger nearly as much.",
            "id": "02693d0053b295fe409c78cf741726bb"
          },
          {
            "type": "html",
            "text": " The library is (for the most part) decent. Sure, there have been the occasional [[Brain Fart]] contributions from Uncle Bill (Managed DirectX and its successor, XNA, are definitely two of them)... but the basic stuff - strings, collections, networking - are very usable. The newest stuff (\"[[Microsoft Linq]]\") is also interesting... we've found we like all the new library support it adds, but shun the SQL-like syntax.",
            "id": "099a45dd76fe103999b06f63e806720f"
          },
          {
            "type": "html",
            "text": " If you need to do interop with legacy stuff - COM, native DLLs, etc - it's generally painless. For the really tricky cases, (COM without a useful typelib, a la DirectX) C++/CLI is great.",
            "id": "c5fb8ea154d5d8afcdda26056faae1eb"
          },
          {
            "type": "html",
            "text": " The performance is great. Its good enough to build cutting-edge 3D games in - I know, because we've done it. Maybe 5% hit, but the productivity benefits are worth so much more than that.",
            "id": "7d4f6d5321d8b770228959fc0fdf464c"
          },
          {
            "type": "html",
            "text": "\nAll in all, for anything but the most constrained embedded development, I'd recommend it. Well done to Uncle Bill on this one.",
            "id": "1cde0163b6448b113ddbb22d03b5e82a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "I haven't written a high-end 3D game engine, but I think XNA is pretty good, certainly good enough for a hobbyist game programmer.",
            "id": "acb60f395bcb35af39c610c9e4204172"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "<b>Configuration Hell</b>",
            "id": "5136fb251cd2328729f1ea903d28a66b"
          },
          {
            "type": "html",
            "text": "\nI'm trying to switch to dot-net, and am having tons of headaches trying to get even basic Hello World programs to run the same on test and production server. (That's why I've been so quiet of late.) I've googled all over for tips and add funny bureaucratic tags, remove funny bureaucratic tags, etc. and still the sucker won't run right on both. I've never had this kind of crap using [[Cold Fusion]] for almost a decade. Version 6 CF apps usually ran just fine on version 9 on both test and production without a single fricken change to the source code, and the few that did need changes were obvious to track down. It makes DLL-hell look good in comparison. Changes in dot-net source fix one thing and break another in a diff environment. Dot-net appears to be a potpourri of disparate and different-schedule-of-change components forced together under the polluted glue known as \"dot net\". Arrrgggg. -t",
            "id": "c81ac9cbeae14b9881753baf15384467"
          },
          {
            "type": "html",
            "text": "<i>You mean you're trying to switch to ASP.NET?  *.NET is a much, much bigger world than just the webby stuff.  It's kinda like how the Java world is much bigger than just JSP.  In fact, it's exactly like that.</i>",
            "id": "40f3a8387bb25fa2a5178ea536dcb686"
          },
          {
            "type": "html",
            "text": " [[Edit Hint]]: feel free to move it to a more appropriate topic.",
            "id": "8ebe0f4ed157bac558c809e7bde11941"
          },
          {
            "type": "html",
            "text": "<i>I solved all my ASP.NET problems by using PHP.  Almost simultaneously, my office-mate solved all his PHP problems by using ASP.NET.  I'm not sure what to make of that, except to note that there seem to be UNIX people who can get things done with PHP whilst Microsoft things break, and there seem to be Windows people who get things done with ASP.NET whilst UNIX things break.  Maybe you're a UNIX person?</i>",
            "id": "0f3e7f6180f953a1718a0621619b3771"
          },
          {
            "type": "html",
            "text": "\nUnfortunately, I didn't have a choice of language/tool. It's what the shop uses. I'd much rather use PHP if given a choice. (I've used PHP before, but I still prefer CF's less type-tag oriented typing system to PHP's). And ASP.NET does remind me of Java in many ways. When MS clones something out of fear, they really do clone it. Part of the problem is that I need \"conditional controls\". If your controls are static, then ASP.NET makes things fairly easy via click and drag. However, key parts of this app are not static. Their display order changes and are mixed object \"types\" such that a \"repeater\" control won't work. MS in general makes things easy if you do it THEIR way, but convoluted if you wander off the beaten path. And, why the hell does it take 5 classes to issue an SQL query and loop through the results? Should only be 2 classes for common queries and 3 under special circumstances.",
            "id": "11ec98bc057417bc77dc5fe778377c0b"
          },
          {
            "type": "html",
            "text": "\n[[Cold Fusion Language]] was easy to learn to use and remember data-wise because most queries were done via something similar to following construct:",
            "id": "0c7e3f00c9d06605a1d83470bcc50db1"
          },
          {
            "type": "code",
            "text": " <cfQuery name=\"myQuery\" configurationClausesPlaceHolder...>\n   SELECT * FROM foo \n   WHERE bar = #integerSqlParam(myID)#\n </cfQuery>\n ...\n <cfLoop query=\"myQuery\">\n    <!--- Comment: Do something with each record --->\n </cfLoop>",
            "id": "ba0c14766a49564412bfb446d1780a2b"
          },
          {
            "type": "html",
            "text": "\nIt wouldn't matter if the data came from MS-Access, [[My Sql]], Oracle, etc., the construct remains pretty much the same. The vendor- or configuration-specific differences were all in the \"configurationClausesPlaceHolder...\" attributes, not in the general data handling interface and root classes.  I don't see anything similar in the Dot.Net framework unless one writes it themselves using the gajillion different ways to do it for each vendor or RAM configuration. It's a similar issue to that near the bottom of [[Java Io Classes Are Impossible To Understand]] which revolves around whether configuration details should be \"parent\" over a more general interface. (The above does have a few downsides I will admit, but only for blue-moon needs. Also, much of the DB setup is done in the DB configuration console, not in code in newer versions, but this is a concept illustration, not a CF version critique.) -t",
            "id": "7c8a059e1845ddb3b56e077d68dea9b5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "Does anybody have any suggestions for make apps be <b>DB-vendor neutral</b> so it's possible to switch in one place rather than hard-wire the code to a particular DB brand? The built-in data-source controls don't seem to support such that I can find that works well with other data-centric controls. I've only found very round-about bloaty ways. Is this a trick to lock people into their DB brands? -t",
            "id": "57d9f12fad686d127a549cbe44203e5f"
          },
          {
            "type": "html",
            "text": "\nHere's an article about using the Sql-data-connector with ODBC pre-configurations, but in my case I'm using OLE and can't change to ODBC. One of these days I'll try to see if it can be rigged for OLE.",
            "id": "cce24cf510355dabb6d7fe3b52f29a95"
          },
          {
            "type": "html",
            "text": "\n[http://msdn.microsoft.com/en-us/library/35c54x95%28v=vs.80%29.aspx msdn.microsoft.com]",
            "id": "4b5f7eb62e48eb4cadd7d1c16c42156a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "<b>Opaque Widgets</b>",
            "id": "acfd9bd14bb6d59c019d8543105405b6"
          },
          {
            "type": "html",
            "text": "\nDoes anyone know how to \"escape into HTML mode\" in a method in the App_Code folder? Using bunches of Print statements is not a friendly way to emit HTML. It's as if functions/methods are 2nd-class citizens. This kind of thing was a no-brainer in \"scriptish\" web languages.",
            "id": "5986d15f0fe09e9ed150e3f9b8ef0e5b"
          },
          {
            "type": "html",
            "text": "<i>You'll need to be more specific about what you are trying to do.  If it's what I think it is, then you can't as there is no \"HTML mode\".  However, there should be objects that you can use that take care of all the print stuff for you.</i>",
            "id": "1c8b6e9a6b2a9850d75ba77db2949244"
          },
          {
            "type": "html",
            "text": "\nFor example, in PHP you can do this:",
            "id": "94f81031147b1c8017a72573199b7717"
          },
          {
            "type": "code",
            "text": "  function drawRow(row) {\n    ?>\n    <tr class=\"myRowFmt\">\n       <td>Thing</td>\n       <td><?php=$row['first_name']?></td>\n       <td><?php=$row['last_name']?></td>\n       <td><?php=$row['IQ']?></td>\n    </tr>\n    <?php\n  }",
            "id": "e78d1281c6fcaabbc5c4bd31bc1d09e6"
          },
          {
            "type": "html",
            "text": "\nSimilarly, in [[Cold Fusion Language]] you can do:",
            "id": "1f0c59a1bf993da956c013a4d34a16f8"
          },
          {
            "type": "code",
            "text": "  <cfFunction name=\"drawRow\" output=\"yes\">\n    <cfArgument name=\"myRow\">\n    <tr class=\"myRowFmt\">\n       <td>Thing</td>\n       <td>#myRow.first_name#</td>\n       <td>#myRow.last_name#</td>\n       <td>#myRow.IQ#</td>\n    </tr>\n  </cfFunction>\n  <!-- note: the output=yes parameter allows one to directly embed variables without extra tags -->",
            "id": "5dc7f2294be0578d60bf60b8e74b8a2a"
          },
          {
            "type": "html",
            "text": "\nIt can make code a lot easier to read than \"print\" statements if a lot of HTML is being used. It is true one can create function/method wrappers such as \"drawCell\", but sometimes for intricate output it's very helpful to have the fine control of direct HTML. It's more WYSIWYG. (This example doesn't really illustrate the value of simplification. I'll see if I can present a better one later.) -t",
            "id": "31057f69a3ca85cd181efffe2c9517ae"
          },
          {
            "type": "html",
            "text": "<i>No need for another example.  As far as I can tell, my original response was correct.  You simply can't do that.  But, I still don't see why you need \"print\" statements or \"drawCell\" wrappers.  You could be using the objects already provided by .NET (e.g. [[Table Row]], [[Table Cell]]) and let ASP take care of the rendering (the \"print\" and \"drawCell\" stuff.)</i>",
            "id": "b8f75979d2e7bdb69f1bd6fd87f5706c"
          },
          {
            "type": "html",
            "text": "\nI haven't figured out yet how to \"intercept\" and adjust those. They are too blunt out of the box. I need conditionals etc. to fine-tune and tweak values and attributes dynamically. Just dumping cell values from the table into auto-row-objects as-is often produces ugly and/or misleading output. It usually needs a tweaking stage.  Sure, they \"take care of the rendering\" for you, but in their own wrong or unexpected way, like a new maid who's never seen your house before.",
            "id": "3a9a7a4247fb07028b8e63a78a840cc8"
          },
          {
            "type": "html",
            "text": "\nAlso, they seem limited. For example, the built-in drop-down list has no equivalent to OPTGROUP (the last time I checked). I keep running into walls where they get me 80% there but I thrash around trying to get the other 20% ([[Eighty Twenty Rule]]). Similarly, their image button widget works fine if you hard-wire in each picture, but I needed to do it dynamically from a folder listing and couldn't figure out how to do that in a timely manner. Their ID's had to be known to the compiler up front. The framework designers were all too happy to expect everyone is okay to hard-wire in everything. There's a big learning and/or re-coding [[Discontinuity Spike]] going from the drag-and-drop widget's built-in behavior to fine control via code.",
            "id": "a562395cbc3b48d59a1f81a14d551d59"
          },
          {
            "type": "html",
            "text": "\nIt's been easier just to create my own damned web objects/library. And when I web around to find the work-around's when they exist, they are often very clunky and counter-intuitive. Maybe I am going about it all wrong, but not sure where. It's too much like Java's libraries: deep, obscure, round-about, and bureaucratic when you want to do something outside of the base-line usage or defaults. I just want a baloney sandwich, not go to butcher school.",
            "id": "9e2d0ccaa73d34ac082b9d453dc94b45"
          },
          {
            "type": "html",
            "text": "\nOthers have said that's how MS locks into their world: you spend so much effort trying to get their stuff to work like you or the customer wants that you don't want to leave MS and \"waste\" that investment in MS tool fiddling experience. I can tweak my own web objects in ten minutes when it takes 4+ hours of googling and/or trial-and-error to force MS's built-in's to do it right. Plus, my own web libraries and techniques can usually work in just about any language because I'm leveraging the [[Html Stack]], which most every language has to use anyhow for web stuff. If I change to another language, that knowledge still applies. Using MS's libraries only applies to MS's stacks. If you are born and die with MS, that might be okay. It's certainly what MS wants to happen.",
            "id": "cab21eb8270b002cd86ea69942c95382"
          },
          {
            "type": "html",
            "text": "\nMaybe I'm just a better programmer than I am a configuration googler (relative speaking); and export configurators find the opposite? Or do they just live with MS's ugly defaults and limits such that users just live with half-baked sluge, doing their own form of trial-and-error dance? I'm not a perfectionist, but I do want to avoid phone-calls and help-tickets from confused and angry users. My own web objects are rarely longer than two pages of code and are well-commented. Even the most complex rarely takes more than 45 minutes to grok and change (or copy and customize). An MS object issue takes roundly an average of 2 hours work around or fix. Maybe if I did asp.net for 5 years the time would become comparable. But then some other newfangled language or fad will probably displace it.",
            "id": "3d431b3d77a1ca69c72fced7842e25cf"
          },
          {
            "type": "html",
            "text": "\nAnd what would all the google-configurator's do if the product came from a smaller software company such that the web workarounds were few and far-between? I guess market-share gives you more freedom to suck.",
            "id": "091ff0c8f0ad8e4859e66acf961b77b6"
          },
          {
            "type": "html",
            "text": "\nAs described in [[Helpers Instead Of Wrappers]], it's usually best to date your objects/abstractions/frameworks, <i>not</i> marry them. MS forces you to marry them, and Bill Gates is not very good in bed. (See also \"Click-able Thumbnail Anecdote\" in that topic.)",
            "id": "7a88ef5b4549de5628c8ce5d5aae34eb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "Another thing I miss from [[Cold Fusion]] is the CFdump command for troubleshooting. One can use it to display (dump) an array/query/structure. PHP has similar automatic textual serialization of arrays. I haven't found the equiv in dot.net yet. (Or does each structure have to re-invent it to supply it?)",
            "id": "6aef3a680a9941820200bf8bb475cda5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "Re: 'As far as I can tell, my original response was correct. <b>You simply can't do that</b>. But, I still don't see why you need \"print\" statements or \"drawCell\" wrappers...'  [emph. added]",
            "id": "e4905dee935f8146e258322eba8f14f9"
          },
          {
            "type": "html",
            "text": "\nRegardless of the outcome of the \"need\" debate; to me it's pretty stupid and pre-limiting to only allow the HTML-friendly mode in the outer layer of abstraction or call tree. <b>Why hard-wire such a limit into a language stack?</b> It's just plain stupid -- an arbitrary wall. I'm calling MS on that one. [[Dot Net]] was supposed to fix dumb limits and arbitrary shit over VB-classic. They blew their opportunity. It's either a glaring mistake, or a way to obtain [[Vendor Lock]]. If you want people to take your language seriously and trust you with years of blood, sweat, and tears creating and maintaining source-code, you cannot jack it up like that.  Thank You for letting me rant on this. --top",
            "id": "45a001228af1710a7bcebc094c71567d"
          },
          {
            "type": "html",
            "text": "<i>What makes you think that only HTML friendly mode is required in the outer layer of abstraction?  I've done plenty of things in .NET that don't involve HTML at all.  It's only ASP.NET that really requires it, but that's not surprising since that's its purpose.</i>",
            "id": "5a7633e9f867fbce2a53fdce91295a3c"
          },
          {
            "type": "html",
            "text": "\nI'm not understanding that statement. I want HTML-friendly mode as an <i>option</i> for inner calls, regardless of whether it's used or not for a particular function/method. I never said it should always be used.",
            "id": "e21406b49c69175676e5b99d112c8e2c"
          },
          {
            "type": "html",
            "text": "<i>I see I made a mistake about what you wanted.  I thought you were claiming that .NET requires HTML at the outer layer, not that you want HTML in the inner layer.  That said, is there some reason [[String Builder]] won't do what you want?</i>",
            "id": "a7516e83da489c9ca9603d4d1ac14291"
          },
          {
            "type": "html",
            "text": "\nFor one, you lose WYSIWYG ability in the IDE. Second, if you use the built-in widgets, then it's not easy to \"escape into strings\" in the lower levels. They don't seem to have hooks for that. In for a penny, in for a pound. At least colleagues and I haven't figure out an easy way to do such. It makes for some really ugly work-arounds.",
            "id": "ece0cb48542e11ba1630b5f436c8e1e7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "<b>Database Config</b>",
            "id": "8fdabb3505cd9f7282d5b803444538a6"
          },
          {
            "type": "html",
            "text": "\nOn a similar vain to the above, it appears MS <b>hard-wires</b> database control also for most of its widgets. For example, I haven't found a way to select/determine the database source at run-time based on a connection string (which looks something like \"database=mybase,driver=sqlserver,username=foo,etc\") except in self-rolled widgets. It is possible to give a connection string a reference name in the \"web.config\" file and use that name in MS's widgets, but not change the reference name nor the connection string dynamically at run-time. (The reference name is not a \"normal\" variable that I can tell.) Maybe <b>dynamic languages have spoiled me</b> or ruined my thinking somehow, or I'm missing some special knowledge or skill to deal with Java-style-clones. These things are no-brainers in most dynamic languages, so why are they a pain to find or solve in ASP [[Dot Net]]? Is it a <i>necessary</i> sacrifice to obtain Intellisense (IDE assistance pop-ups)? -top",
            "id": "bf7f353cc091175ca6a7c444a3e77cbe"
          },
          {
            "type": "html",
            "text": "<i>Is there some reason the [[Connection String]] property doesn't work for you?</i>",
            "id": "db5771a2744b67d4be944f25e5254368"
          },
          {
            "type": "html",
            "text": "\nI couldn't get it to work with built-in widgets. Sure, it's probably doable somehow, but not intuitive the way it is in dynamic languages. In general, the \"static\" way to do things in [[Dot Net]] seems to vary much from the dynamic way to do the same thing such that one has to <b>dig and fuss and recode to change from static to dynamic</b>. There is no switch-over hump in good dynamic languages because there's no static version to begin with. -t",
            "id": "20a79cbdfc2d0995f7dd01e0ddcd826b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "An example of rolling your own web component is as follows: you have a form where a name/value pair takes up either an entire row, or half a row for smaller fields. I often roll app-specific calls that may resemble:",
            "id": "fdd4516462e248fd62c2f6caff38e7b1"
          },
          {
            "type": "code",
            "text": "  @<table class=\"mystyle\">\n  // first sample row\n  fullField(\"Title\", titleVar);\n  '\n  // 2nd sample row\n  leftField(\"First\", firstName);\n  rightField(\"Last\", lastName, required=true);\n  '\n  // 3rd sample row\n  fullField(\"Street Addr.\", street);\n  '\n  // 4th sample row\n  leftField(\"City\", city);\n  rightField(\"Zip\", zipCode);\n  '\n  Etc...\n  @</table>",
            "id": "b67fdef4ec69baed17b9e6ce7f778980"
          },
          {
            "type": "html",
            "text": "(Tick-marks are a work-around for a wiki render bug.)",
            "id": "b2d0e8003a9762b4a9e4330fbb71810a"
          },
          {
            "type": "html",
            "text": "\nThe functions take care of all the cell formatting for me, hiding it away. It's compact and easy to follow; an example of [[Work Backward From Pseudo Code]]. [[Dot Net]] makes this kind of thing more difficult. True, it may reduce pre-run validation ability, such as miss-matched pairs, but I'll take that as a trade-off. I place code-readability over machine checking.",
            "id": "e8bb33c4c63488202a976f8b388636cb"
          },
          {
            "type": "html",
            "text": "\nNote that one is not obligated to use the short-cut functions for formatting. If a specific row needs special treatment, then make custom code for that one. ",
            "id": "8f01f6df191967b94c8981b2dc439673"
          },
          {
            "type": "html",
            "text": "\nAlso note that it may be better to make the layout type be an attribute rather than part of the function name, such as \"layout=[left|right|full]\". Generally one tunes the interface to their environment anyhow.",
            "id": "d07266b8d9d730142c0dc975b7e4c682"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9a5ea14081ceabca81eaff947a70287c"
          },
          {
            "type": "html",
            "text": "[[Category Dot Net]]",
            "id": "5be4e5f7f9eab3594a7f34f419031c9f"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?DotNet c2.com]",
            "id": "5189900a556efb79778349e6a5da276b"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1664289827577
    }
  ]
}