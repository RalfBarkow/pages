{
  "title": "r.type",
  "story": [
    {
      "type": "markdown",
      "id": "9f06d62050645781",
      "text": "In the current implementation, `r.type = () => x.word()`, the `x.word()` function matches words based on the regular expression `/^[A-Za-z][A-Za-z0-9_]*/`. This regex matches words that start with a letter (uppercase or lowercase) followed by zero or more occurrences of letters, digits, or underscores. \n\nHowever, this regex does not allow labels to start with a digit. So, labels like \"702127fad3ec880f\" or \"5aa9624700f4dd96\" would not be recognized as valid labels by the Cypher parser with the current implementation."
    },
    {
      "type": "markdown",
      "id": "8b1696266be2cf28",
      "text": "In the suggested modification, `r.type = () => match(/^[A-Za-z0-9][A-Za-z0-9_]*/) && x.sp()`, the regular expression `/^[A-Za-z0-9][A-Za-z0-9_]*/` is used instead. This regex allows labels to start with a letter (uppercase or lowercase), or a digit, followed by any combination of letters, digits, or underscores. [https://github.com/RalfBarkow/assets/commit/80ec980b609ef234fe6923fb3e8c39d0e30c84f7 commit]"
    },
    {
      "type": "markdown",
      "id": "97f8308de0bf4428",
      "text": "So, with the suggested modification, labels like \"702127fad3ec880f\" or \"5aa9624700f4dd96\" would be recognized as valid labels by the Cypher parser."
    },
    {
      "type": "pagefold",
      "id": "24cc396ef8567348",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "45ae76e84e7e128d",
      "site": "wiki.ralfbarkow.ch",
      "slug": "cypher",
      "title": "Cypher",
      "text": "The syntax of the Cypher [[query]] language. [https://neo4j.com/docs/cypher-manual/current/syntax/ page]"
    },
    {
      "type": "reference",
      "id": "0a79942fc2c90b22",
      "site": "wiki.ralfbarkow.ch",
      "slug": "cypherjs",
      "title": "cypher.js",
      "text": "See [[Property Graphs as Javascript Module]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "r.type",
        "story": []
      },
      "date": 1712291963749
    },
    {
      "item": {
        "type": "factory",
        "id": "9f06d62050645781"
      },
      "id": "9f06d62050645781",
      "type": "add",
      "date": 1712291975348
    },
    {
      "type": "edit",
      "id": "9f06d62050645781",
      "item": {
        "type": "markdown",
        "id": "9f06d62050645781",
        "text": "In the current implementation, `r.type = () => x.word()`, the `x.word()` function matches words based on the regular expression `/^[A-Za-z][A-Za-z0-9_]*$/`. This regex matches words that start with a letter (uppercase or lowercase) followed by zero or more occurrences of letters, digits, or underscores. \n\nHowever, this regex does not allow labels to start with a digit. So, labels like \"702127fad3ec880f\" or \"5aa9624700f4dd96\" would not be recognized as valid labels by the Cypher parser with the current implementation.\n\nIn the suggested modification, `r.type = () => match(/^[_A-Za-z0-9][A-Za-z0-9_]*$/) && x.sp()`, the regular expression `/^[_A-Za-z0-9][A-Za-z0-9_]*$/` is used instead. This regex allows labels to start with an underscore, a letter (uppercase or lowercase), or a digit, followed by any combination of letters, digits, or underscores.\n\nSo, with the suggested modification, labels like \"702127fad3ec880f\" or \"5aa9624700f4dd96\" would be recognized as valid labels by the Cypher parser."
      },
      "date": 1712291977557
    },
    {
      "item": {
        "type": "factory",
        "id": "24cc396ef8567348"
      },
      "id": "24cc396ef8567348",
      "type": "add",
      "after": "9f06d62050645781",
      "date": 1712292024636
    },
    {
      "type": "edit",
      "id": "24cc396ef8567348",
      "item": {
        "type": "pagefold",
        "id": "24cc396ef8567348",
        "text": "~"
      },
      "date": 1712292027687
    },
    {
      "item": {
        "type": "factory",
        "id": "45ae76e84e7e128d"
      },
      "id": "45ae76e84e7e128d",
      "type": "add",
      "after": "24cc396ef8567348",
      "date": 1712292033229
    },
    {
      "type": "edit",
      "id": "45ae76e84e7e128d",
      "item": {
        "type": "reference",
        "id": "45ae76e84e7e128d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "cypher",
        "title": "Cypher",
        "text": "The syntax of the **Cypher** [[query]] language. [https://neo4j.com/docs/cypher-manual/current/syntax/ page]"
      },
      "date": 1712292036474
    },
    {
      "type": "edit",
      "id": "45ae76e84e7e128d",
      "item": {
        "type": "reference",
        "id": "45ae76e84e7e128d",
        "site": "wiki.ralfbarkow.ch",
        "slug": "cypher",
        "title": "Cypher",
        "text": "The syntax of the Cypher [[query]] language. [https://neo4j.com/docs/cypher-manual/current/syntax/ page]"
      },
      "date": 1712292048141
    },
    {
      "item": {
        "type": "factory",
        "id": "0a79942fc2c90b22"
      },
      "id": "0a79942fc2c90b22",
      "type": "add",
      "after": "45ae76e84e7e128d",
      "date": 1712292217712
    },
    {
      "type": "edit",
      "id": "0a79942fc2c90b22",
      "item": {
        "type": "reference",
        "id": "0a79942fc2c90b22",
        "site": "wiki.ralfbarkow.ch",
        "slug": "cypherjs",
        "title": "cypher.js",
        "text": "export function parse(text, log=()=>{}) {"
      },
      "date": 1712292220264
    },
    {
      "type": "edit",
      "id": "9f06d62050645781",
      "item": {
        "type": "markdown",
        "id": "9f06d62050645781",
        "text": "In the current implementation, `r.type = () => x.word()`, the `x.word()` function matches words based on the regular expression `/^[A-Za-z][A-Za-z0-9_]*/`. This regex matches words that start with a letter (uppercase or lowercase) followed by zero or more occurrences of letters, digits, or underscores. \n\nHowever, this regex does not allow labels to start with a digit. So, labels like \"702127fad3ec880f\" or \"5aa9624700f4dd96\" would not be recognized as valid labels by the Cypher parser with the current implementation.\n\nIn the suggested modification, `r.type = () => match(/^[_A-Za-z0-9][A-Za-z0-9_]*$/) && x.sp()`, the regular expression `/^[_A-Za-z0-9][A-Za-z0-9_]*$/` is used instead. This regex allows labels to start with an underscore, a letter (uppercase or lowercase), or a digit, followed by any combination of letters, digits, or underscores.\n\nSo, with the suggested modification, labels like \"702127fad3ec880f\" or \"5aa9624700f4dd96\" would be recognized as valid labels by the Cypher parser."
      },
      "date": 1712296228557
    },
    {
      "type": "edit",
      "id": "9f06d62050645781",
      "item": {
        "type": "markdown",
        "id": "9f06d62050645781",
        "text": "In the current implementation, `r.type = () => x.word()`, the `x.word()` function matches words based on the regular expression `/^[A-Za-z][A-Za-z0-9_]*/`. This regex matches words that start with a letter (uppercase or lowercase) followed by zero or more occurrences of letters, digits, or underscores. \n\nHowever, this regex does not allow labels to start with a digit. So, labels like \"702127fad3ec880f\" or \"5aa9624700f4dd96\" would not be recognized as valid labels by the Cypher parser with the current implementation."
      },
      "date": 1712296348844
    },
    {
      "type": "add",
      "id": "8b1696266be2cf28",
      "item": {
        "type": "markdown",
        "id": "8b1696266be2cf28",
        "text": "In the suggested modification, `r.type = () => match(/^[A-Za-z0-9][A-Za-z0-9_]*/) && x.sp()`, the regular expression `/^[A-Za-z0-9][A-Za-z0-9_]*/` is used instead. This regex allows labels to start with an underscore, a letter (uppercase or lowercase), or a digit, followed by any combination of letters, digits, or underscores."
      },
      "after": "9f06d62050645781",
      "date": 1712296408003
    },
    {
      "type": "add",
      "id": "97f8308de0bf4428",
      "item": {
        "type": "markdown",
        "id": "97f8308de0bf4428",
        "text": "So, with the suggested modification, labels like \"702127fad3ec880f\" or \"5aa9624700f4dd96\" would be recognized as valid labels by the Cypher parser."
      },
      "after": "8b1696266be2cf28",
      "date": 1712296418744
    },
    {
      "type": "edit",
      "id": "8b1696266be2cf28",
      "item": {
        "type": "markdown",
        "id": "8b1696266be2cf28",
        "text": "In the suggested modification, `r.type = () => match(/^[A-Za-z0-9][A-Za-z0-9_]*/) && x.sp()`, the regular expression `/^[A-Za-z0-9][A-Za-z0-9_]*/` is used instead. This regex allows labels to start with an underscore, a letter (uppercase or lowercase), or a digit, followed by any combination of letters, digits, or underscores. [https://github.com/RalfBarkow/assets/commit/80ec980b609ef234fe6923fb3e8c39d0e30c84f7 commit]"
      },
      "date": 1712296450142
    },
    {
      "type": "edit",
      "id": "8b1696266be2cf28",
      "item": {
        "type": "markdown",
        "id": "8b1696266be2cf28",
        "text": "In the suggested modification, `r.type = () => match(/^[A-Za-z0-9][A-Za-z0-9_]*/) && x.sp()`, the regular expression `/^[A-Za-z0-9][A-Za-z0-9_]*/` is used instead. This regex allows labels to start with a letter (uppercase or lowercase), or a digit, followed by any combination of letters, digits, or underscores. [https://github.com/RalfBarkow/assets/commit/80ec980b609ef234fe6923fb3e8c39d0e30c84f7 commit]"
      },
      "date": 1712296541323
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1712296647754
    },
    {
      "type": "edit",
      "id": "0a79942fc2c90b22",
      "item": {
        "type": "reference",
        "id": "0a79942fc2c90b22",
        "site": "wiki.ralfbarkow.ch",
        "slug": "cypherjs",
        "title": "cypher.js",
        "text": "See [[Property Graphs as Javascript Module]]"
      },
      "date": 1712296860610
    }
  ]
}