{
  "title": "dotify.js",
  "story": [
    {
      "type": "paragraph",
      "id": "e6bb7c265ad277da",
      "text": "[[Render]] a [[Graph]] as dot input to [[Graphviz]]"
    },
    {
      "type": "code",
      "id": "b66e5be1d268480d",
      "text": "// render graph as dot input to graphviz\n\nexport function dotify(complex) {\n  const {graph, merged} = complex\n  const nodes = graph.nodes.map((node,id) => {\n    const icon = node.props.url ? \" ðŸ”—\" : \"\"\n    const label = `${node.type}\\n${node.props.name}${icon}`\n    return `${id} [label=\"${label}\" ${node.props.url?`URL=\"${node.props.url}\" target=\"_blank\"`:''}]`\n  })\n  const edges = graph.rels.map(rel => {\n    return `${rel.from}->${rel.to} [label=\"${rel.type}\" labeltooltip=\"${rel.props.source}\"]`\n  })\n  return [\n    'digraph {',\n    'node [shape=box style=filled fillcolor=gold]',\n    'rankdir=TB',\n    ...merged.nids,\n    'node [fillcolor=lightgreen]',\n    ...nodes,\n    ...edges,\n    '}'].join(\"\\n\")\n}"
    },
    {
      "type": "paragraph",
      "id": "5c2398726e22f940",
      "text": "â‡’ [[Super Collaborator]] â‡’ [[graph.js]] â‡’ [[cypher.js]]"
    },
    {
      "type": "markdown",
      "id": "c961e1bceafb8080",
      "text": "The `dotify` function seems to be generating DOT language code for rendering a graph using Graphviz. Here's a brief breakdown of what it does:\n\n1. It takes a `complex` object as input, which contains `graph` and `merged` properties.\n2. It extracts nodes and edges information from the `graph` property.\n3. For each node, it generates a DOT representation with a label containing the node's type, name, and an icon if there's a URL associated with it.\n4. For each edge, it generates a DOT representation with a label and a tooltip for the edge type and source properties respectively.\n5. It constructs the DOT language output by combining node definitions, edge definitions, and additional DOT syntax.\n6. Finally, it returns the complete DOT representation as a string.\n\n(ChatGPT 3.5)"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "dotify.js",
        "story": []
      },
      "date": 1664083225818
    },
    {
      "item": {
        "type": "factory",
        "id": "b66e5be1d268480d"
      },
      "id": "b66e5be1d268480d",
      "type": "add",
      "date": 1664083231031
    },
    {
      "type": "edit",
      "id": "b66e5be1d268480d",
      "item": {
        "type": "code",
        "id": "b66e5be1d268480d",
        "text": "// render graph as dot input to graphviz\n\nexport function dotify(complex) {\n  const {graph, merged} = complex\n  const nodes = graph.nodes.map((node,id) => {\n    const icon = node.props.url ? \" ðŸ”—\" : \"\"\n    const label = `${node.type}\\n${node.props.name}${icon}`\n    return `${id} [label=\"${label}\" ${node.props.url?`URL=\"${node.props.url}\" target=\"_blank\"`:''}]`\n  })\n  const edges = graph.rels.map(rel => {\n    return `${rel.from}->${rel.to} [label=\"${rel.type}\" labeltooltip=\"${rel.props.source}\"]`\n  })\n  return [\n    'digraph {',\n    'node [shape=box style=filled fillcolor=gold]',\n    'rankdir=TB',\n    ...merged.nids,\n    'node [fillcolor=lightgreen]',\n    ...nodes,\n    ...edges,\n    '}'].join(\"\\n\")\n}"
      },
      "date": 1664083232926
    },
    {
      "item": {
        "type": "factory",
        "id": "1daa79e2552747da"
      },
      "id": "1daa79e2552747da",
      "type": "add",
      "after": "b66e5be1d268480d",
      "date": 1664083273745
    },
    {
      "type": "edit",
      "id": "1daa79e2552747da",
      "item": {
        "type": "assets",
        "id": "1daa79e2552747da",
        "text": "pages/super-collaborator"
      },
      "date": 1664083284544
    },
    {
      "item": {
        "type": "factory",
        "id": "5c2398726e22f940"
      },
      "id": "5c2398726e22f940",
      "type": "add",
      "after": "1daa79e2552747da",
      "date": 1664083305822
    },
    {
      "type": "edit",
      "id": "5c2398726e22f940",
      "item": {
        "type": "paragraph",
        "id": "5c2398726e22f940",
        "text": "â€“ [[graph.js]]"
      },
      "date": 1664083317906
    },
    {
      "type": "edit",
      "id": "5c2398726e22f940",
      "item": {
        "type": "paragraph",
        "id": "5c2398726e22f940",
        "text": "â‡’  [[graph.js]]"
      },
      "date": 1664083343025
    },
    {
      "item": {
        "type": "factory",
        "id": "cd45e938eb944dfc"
      },
      "id": "cd45e938eb944dfc",
      "type": "add",
      "after": "5c2398726e22f940",
      "date": 1664083372095
    },
    {
      "type": "edit",
      "id": "cd45e938eb944dfc",
      "item": {
        "type": "graphviz",
        "id": "cd45e938eb944dfc",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1664083379596
    },
    {
      "type": "edit",
      "id": "5c2398726e22f940",
      "item": {
        "type": "paragraph",
        "id": "5c2398726e22f940",
        "text": "â‡’ [[graph.js]] â‡’ [[cypher.js]]"
      },
      "date": 1664083404171
    },
    {
      "id": "1daa79e2552747da",
      "type": "move",
      "order": [
        "b66e5be1d268480d",
        "5c2398726e22f940",
        "cd45e938eb944dfc",
        "1daa79e2552747da"
      ],
      "date": 1664083607149
    },
    {
      "item": {
        "type": "factory",
        "id": "e6bb7c265ad277da"
      },
      "id": "e6bb7c265ad277da",
      "type": "add",
      "after": "1daa79e2552747da",
      "date": 1669097353941
    },
    {
      "id": "e6bb7c265ad277da",
      "type": "move",
      "order": [
        "b66e5be1d268480d",
        "5c2398726e22f940",
        "cd45e938eb944dfc",
        "e6bb7c265ad277da",
        "1daa79e2552747da"
      ],
      "date": 1669097357161
    },
    {
      "id": "e6bb7c265ad277da",
      "type": "move",
      "order": [
        "e6bb7c265ad277da",
        "b66e5be1d268480d",
        "5c2398726e22f940",
        "cd45e938eb944dfc",
        "1daa79e2552747da"
      ],
      "date": 1669097379659
    },
    {
      "type": "edit",
      "id": "e6bb7c265ad277da",
      "item": {
        "type": "paragraph",
        "id": "e6bb7c265ad277da",
        "text": "[[render]]"
      },
      "date": 1669097387470
    },
    {
      "type": "edit",
      "id": "e6bb7c265ad277da",
      "item": {
        "type": "paragraph",
        "id": "e6bb7c265ad277da",
        "text": "[[Render]] a [[Graph]] as dot input to [[Graphviz]]"
      },
      "date": 1669097426577
    },
    {
      "type": "edit",
      "id": "5c2398726e22f940",
      "item": {
        "type": "paragraph",
        "id": "5c2398726e22f940",
        "text": "â‡’ [[Super Colaborator]] â‡’ [[graph.js]] â‡’ [[cypher.js]]"
      },
      "date": 1669097570062
    },
    {
      "type": "edit",
      "id": "5c2398726e22f940",
      "item": {
        "type": "paragraph",
        "id": "5c2398726e22f940",
        "text": "â‡’ [[Super Collaborator]] â‡’ [[graph.js]] â‡’ [[cypher.js]]"
      },
      "date": 1669097601773
    },
    {
      "item": {
        "type": "factory",
        "id": "c961e1bceafb8080"
      },
      "id": "c961e1bceafb8080",
      "type": "add",
      "after": "1daa79e2552747da",
      "date": 1713938707612
    },
    {
      "type": "edit",
      "id": "c961e1bceafb8080",
      "item": {
        "type": "markdown",
        "id": "c961e1bceafb8080",
        "text": "The `dotify` function seems to be generating DOT language code for rendering a graph using Graphviz. Here's a brief breakdown of what it does:\n\n1. It takes a `complex` object as input, which contains `graph` and `merged` properties.\n2. It extracts nodes and edges information from the `graph` property.\n3. For each node, it generates a DOT representation with a label containing the node's type, name, and an icon if there's a URL associated with it.\n4. For each edge, it generates a DOT representation with a label and a tooltip for the edge type and source properties respectively.\n5. It constructs the DOT language output by combining node definitions, edge definitions, and additional DOT syntax.\n6. Finally, it returns the complete DOT representation as a string.\n\n(ChatGPT 3.5)"
      },
      "date": 1713938725602
    },
    {
      "type": "remove",
      "id": "1daa79e2552747da",
      "date": 1713938763264
    },
    {
      "type": "remove",
      "id": "cd45e938eb944dfc",
      "date": 1713938770191
    }
  ]
}