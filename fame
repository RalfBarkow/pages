{
  "title": "Fame",
  "story": [
    {
      "type": "markdown",
      "id": "8d1131f0bad388d8",
      "text": "*Complete meta-environment*. In the previous paper, we focused on meta-descriptions for one application alone. In this paper, we present [[Fame]], a complete metaenvironment, that extends the complete Smalltalk environment. Not only domain classes, but also system classes from the standard libraries may be decorated with descriptions and can thus be serialized or browsed using the same infrastructure and UI. In particular, while EMOF is self-described on paper, it is now self-described in our implementation."
    },
    {
      "type": "pagefold",
      "id": "26151583d5e72f4c",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "442ad355986c2f64",
      "text": "DUCASSE, Stéphane, GIRBA, Tudor, KUHN, Adrian and RENGGLI, Lukas, 2009. Meta-environment and executable meta-language using smalltalk: an experience report. Software & Systems Modeling. February 2009. Vol. 8, no. 1, p. 5–19. DOI 10.1007/s10270-008-0081-4, p. 6"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Fame",
        "story": []
      },
      "date": 1654038685344
    },
    {
      "item": {
        "type": "factory",
        "id": "8d1131f0bad388d8"
      },
      "id": "8d1131f0bad388d8",
      "type": "add",
      "date": 1654038705535
    },
    {
      "type": "edit",
      "id": "8d1131f0bad388d8",
      "item": {
        "type": "paragraph",
        "id": "8d1131f0bad388d8",
        "text": "Complete meta-environment. In the previous paper, we focused on meta-descriptions for one application alone. In this paper, we present Fame, a complete metaenvironment, that extends the complete Smalltalk environment. Not only domain classes, but also system classes from the standard libraries may be decorated with descriptions and can thus be serialized or browsed using the same infrastructure and UI. In particular, while EMOF is self-described on paper, it is now self-described in our implementation."
      },
      "date": 1654038707362
    },
    {
      "item": {
        "type": "factory",
        "id": "26151583d5e72f4c"
      },
      "id": "26151583d5e72f4c",
      "type": "add",
      "after": "8d1131f0bad388d8",
      "date": 1654038724404
    },
    {
      "type": "edit",
      "id": "26151583d5e72f4c",
      "item": {
        "type": "pagefold",
        "id": "26151583d5e72f4c",
        "text": "~"
      },
      "date": 1654038728751
    },
    {
      "item": {
        "type": "factory",
        "id": "442ad355986c2f64"
      },
      "id": "442ad355986c2f64",
      "type": "add",
      "after": "26151583d5e72f4c",
      "date": 1654038730053
    },
    {
      "type": "edit",
      "id": "442ad355986c2f64",
      "item": {
        "type": "paragraph",
        "id": "442ad355986c2f64",
        "text": "\nDUCASSE, Stéphane, GIRBA, Tudor, KUHN, Adrian and RENGGLI, Lukas, 2009. Meta-environment and executable meta-language using smalltalk: an experience report. Software & Systems Modeling. February 2009. Vol. 8, no. 1, p. 5–19. DOI 10.1007/s10270-008-0081-4. Object-oriented modelling languages such as EMOF are often used to specify domain speciﬁc metamodels. However, these modelling languages lack the ability to describe behavior or operational semantics. Several approaches have used a subset of Java mixed with OCL as executable meta-languages. In this experience report we show how we use Smalltalk as an executable meta-language in the context of the Moose reengineering environment. We present how we implemented EMOF and its behavioral aspects. Over the last decade we validated this approach through incrementally building a meta-described reengineering environment. Such an approach bridges the gap between a code-oriented view and a meta-model driven one. It avoids the creation of yet another language and reuses the infrastructure and run-time of the underlying implementation language. It offers an uniform way of letting developers focus on their tasks while at the same time allowing them to meta-describe their domain model. The advantage of our approach is that developers use the same tools and environment they use for their regular tasks. Still the approach is not Smalltalk speciﬁc but can be applied to language offering an introspective API such as Ruby, Python, CLOS, Java and C#.\n"
      },
      "date": 1654038731459
    },
    {
      "type": "edit",
      "id": "442ad355986c2f64",
      "item": {
        "type": "paragraph",
        "id": "442ad355986c2f64",
        "text": "DUCASSE, Stéphane, GIRBA, Tudor, KUHN, Adrian and RENGGLI, Lukas, 2009. Meta-environment and executable meta-language using smalltalk: an experience report. Software & Systems Modeling. February 2009. Vol. 8, no. 1, p. 5–19. DOI 10.1007/s10270-008-0081-4. "
      },
      "date": 1654038746120
    },
    {
      "type": "edit",
      "id": "442ad355986c2f64",
      "item": {
        "type": "paragraph",
        "id": "442ad355986c2f64",
        "text": "DUCASSE, Stéphane, GIRBA, Tudor, KUHN, Adrian and RENGGLI, Lukas, 2009. Meta-environment and executable meta-language using smalltalk: an experience report. Software & Systems Modeling. February 2009. Vol. 8, no. 1, p. 5–19. DOI 10.1007/s10270-008-0081-4, p. 6"
      },
      "date": 1654038764321
    },
    {
      "type": "edit",
      "id": "8d1131f0bad388d8",
      "item": {
        "type": "paragraph",
        "id": "8d1131f0bad388d8",
        "text": "Complete meta-environment. In the previous paper, we focused on meta-descriptions for one application alone. In this paper, we present [[Fame]], a complete metaenvironment, that extends the complete Smalltalk environment. Not only domain classes, but also system classes from the standard libraries may be decorated with descriptions and can thus be serialized or browsed using the same infrastructure and UI. In particular, while EMOF is self-described on paper, it is now self-described in our implementation."
      },
      "date": 1654038774253
    },
    {
      "type": "edit",
      "id": "8d1131f0bad388d8",
      "item": {
        "type": "paragraph",
        "id": "8d1131f0bad388d8",
        "text": "*Complete meta-environment*. In the previous paper, we focused on meta-descriptions for one application alone. In this paper, we present [[Fame]], a complete metaenvironment, that extends the complete Smalltalk environment. Not only domain classes, but also system classes from the standard libraries may be decorated with descriptions and can thus be serialized or browsed using the same infrastructure and UI. In particular, while EMOF is self-described on paper, it is now self-described in our implementation."
      },
      "date": 1654038838375
    },
    {
      "type": "edit",
      "id": "8d1131f0bad388d8",
      "item": {
        "type": "markdown",
        "id": "8d1131f0bad388d8",
        "text": "*Complete meta-environment*. In the previous paper, we focused on meta-descriptions for one application alone. In this paper, we present [[Fame]], a complete metaenvironment, that extends the complete Smalltalk environment. Not only domain classes, but also system classes from the standard libraries may be decorated with descriptions and can thus be serialized or browsed using the same infrastructure and UI. In particular, while EMOF is self-described on paper, it is now self-described in our implementation."
      },
      "date": 1654038840120
    }
  ]
}