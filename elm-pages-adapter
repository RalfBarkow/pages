{
  "title": "Elm-Pages Adapter",
  "story": [
    {
      "type": "paragraph",
      "id": "9e2a7ec8e23d6837",
      "text": "The idea of adapters is that they are responsible for turning the output of the [[elm-pages]] build into the right setup for a specific hosting provider. (i.e. adapting the output) [https://elm-pages-v3.netlify.app/docs/adapters docs]"
    },
    {
      "type": "reference",
      "id": "21d7665d86dbb612",
      "site": "wiki.ralfbarkow.ch",
      "slug": "elm-pages-realworld",
      "title": "elm-pages-realworld",
      "text": "[[Realworld]] implementation with [[elm-pages]] v3. [https://github.com/dillonkearns/elm-pages-realworld/ github], [https://realworld.elm-spa.dev/ site] is using server-rendered routes. If you're building a purely static site (no server-rendered routes), then you just copy the dist folder to the appropriate place for your hosting setup.\n"
    },
    {
      "type": "paragraph",
      "id": "d34c8cdce983d933",
      "text": "If you have server-rendered routes, then you'll need an adapter script to copy files to the appropriate places. It will have to execute some NodeJS code to give you the rendered HTML for each page on-demand since the routes aren't pre-built in that case."
    },
    {
      "type": "paragraph",
      "id": "a8e26efb1fe76827",
      "text": "The adapter script in the realworld app does this setup to put files in the appropriate places to run as Netlify serverless functions: [https://github.com/dillonkearns/elm-pages-realworld/blob/main/adapter.mjs adapter.mjs]"
    },
    {
      "type": "paragraph",
      "id": "c85dfeb0d2aa9d24",
      "text": "Let [[Dillon Kearns]] know if you have questions on how the adapter script works [https://elmlang.slack.com/archives/CNSNETV37/p1682550536951939?thread_ts=1682528259.748959&cid=CNSNETV37 slack], he hasn't written docs for it yet so the example is the only documentation at the moment."
    },
    {
      "type": "pagefold",
      "id": "14328059c2f8aed6",
      "text": "chat.openai"
    },
    {
      "type": "paragraph",
      "id": "44bd902d8c8bf48a",
      "text": "This is a JavaScript source code that exports a function named run. The run function accepts an object that contains several parameters.\n\nWhen this function is called, it will copy a file, write files, and write content to a file. Additionally, it throws an error when certain conditions are met.\n\nThe run function creates two directories named functions/render and functions/server-render using the ensureDirSync function.\n\nThen, the function copies the file specified by the renderFunctionFilePath parameter to two new locations: ./functions/render/elm-pages-cli.cjs and ./functions/server-render/elm-pages-cli.cjs.\n\nNext, the function writes content to two files: ./functions/render/index.mjs and ./functions/server-render/index.mjs. The content of these files is generated by calling the rendererCode function with true and false arguments, respectively.\n\nAfterward, the function filters the apiRoutePatterns array to include only elements whose kind property is \"prerender-with-fallback\" or \"serverless\". It then ensures that each pathPattern property in the filtered array does not contain an element whose kind property is \"hybrid\". If the filtered array contains an invalid element, the function throws an error.\n\nThe function then maps over the filtered array and returns a string for each element. The string contains a redirect path based on the kind property of the element.\n\nThe function also filters the routePatterns array to include only elements whose kind property is \"prerender-with-fallback\" or \"serverless\". It then maps over the filtered array and returns a string for each element. The string contains a redirect path based on the kind property of the element. Additionally, the string contains another redirect path that includes the path content.dat.\n\nFinally, the function joins the array of strings returned from the map method with newline characters and appends the resulting string to the string generated by the apiRouteRedirects method call. The resulting string is written to a file named dist/_redirects.\n\nThe ensureValidRoutePatternsForNetlify function filters an array of objects and throws an error if any element's pathPattern property contains an object whose kind property is \"hybrid\".\n\nThe isServerSide function returns true if an object's kind property is \"prerender-with-fallback\" or \"serverless\", and false otherwise.\n\nThe rendererCode function generates a string that contains JavaScript code. The generated code exports a function named handler. The handler function accepts two arguments: an event object and a context object. When the handler function is called, it calls the renderer.render function with various arguments. The renderer.render function is imported from the elm-pages/generator/src/render.js module. The renderResult returned from the renderer.render function is then used to construct an HTTP response that is returned from the handler function."
    },
    {
      "type": "pagefold",
      "id": "94a77eb6a3a3a39b",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "03fe8841bd7e6575",
      "site": "wiki.ralfbarkow.ch",
      "slug": "elm-and-ai",
      "title": "Elm and AI",
      "text": "Can we get strong guarantees from AI tools that are known to hallucinate? We discuss some strategies, and ways that [[Elm]] might be a great target for AI assistance."
    },
    {
      "type": "paragraph",
      "id": "6367ecef9ba895f4",
      "text": "Community Experiments for v3 Adapters #378 [https://github.com/dillonkearns/elm-pages/discussions/378 page]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Elm-Pages Adapter",
        "story": []
      },
      "date": 1682563485481
    },
    {
      "item": {
        "type": "factory",
        "id": "9e2a7ec8e23d6837"
      },
      "id": "9e2a7ec8e23d6837",
      "type": "add",
      "date": 1682563497668
    },
    {
      "type": "edit",
      "id": "9e2a7ec8e23d6837",
      "item": {
        "type": "paragraph",
        "id": "9e2a7ec8e23d6837",
        "text": "The idea of adapters is that they are responsible for turning the output of the elm-pages build into the right setup for a specific hosting provider."
      },
      "date": 1682563499191
    },
    {
      "type": "edit",
      "id": "9e2a7ec8e23d6837",
      "item": {
        "type": "paragraph",
        "id": "9e2a7ec8e23d6837",
        "text": "The idea of adapters is that they are responsible for turning the output of the [[elm-pages]] build into the right setup for a specific hosting provider."
      },
      "date": 1682563511927
    },
    {
      "item": {
        "type": "factory",
        "id": "d3b8a0d84585012f"
      },
      "id": "d3b8a0d84585012f",
      "type": "add",
      "after": "9e2a7ec8e23d6837",
      "date": 1682563550929
    },
    {
      "type": "edit",
      "id": "d3b8a0d84585012f",
      "item": {
        "type": "paragraph",
        "id": "d3b8a0d84585012f",
        "text": "The [[realworld]] example is using server-rendered routes. If you're building a purely static site (no server-rendered routes), then you just copy the dist folder to the appropriate place for your hosting setup.\n"
      },
      "date": 1682563564660
    },
    {
      "type": "add",
      "id": "d34c8cdce983d933",
      "item": {
        "type": "paragraph",
        "id": "d34c8cdce983d933",
        "text": "If you have server-rendered routes, then you'll need an adapter script to copy files to the appropriate places. It will have to execute some NodeJS code to give you the rendered HTML for each page on-demand since the routes aren't pre-built in that case."
      },
      "after": "d3b8a0d84585012f",
      "date": 1682563565261
    },
    {
      "item": {
        "type": "factory",
        "id": "a8e26efb1fe76827"
      },
      "id": "a8e26efb1fe76827",
      "type": "add",
      "after": "d34c8cdce983d933",
      "date": 1682563584926
    },
    {
      "id": "21d7665d86dbb612",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "21d7665d86dbb612",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-pages-realworld",
        "title": "elm-pages-realworld",
        "text": "[[Realworld]] implementation with [[elm-pages]] v3. [https://github.com/dillonkearns/elm-pages-realworld/ github], [https://realworld.elm-spa.dev/ site]"
      },
      "after": "9e2a7ec8e23d6837",
      "attribution": {
        "page": "Realworld"
      },
      "date": 1682563589122
    },
    {
      "type": "edit",
      "id": "d3b8a0d84585012f",
      "item": {
        "type": "paragraph",
        "id": "d3b8a0d84585012f",
        "text": "The [[Realworld]] example is using server-rendered routes. If you're building a purely static site (no server-rendered routes), then you just copy the dist folder to the appropriate place for your hosting setup.\n"
      },
      "date": 1682563596310
    },
    {
      "type": "edit",
      "id": "d3b8a0d84585012f",
      "item": {
        "type": "paragraph",
        "id": "d3b8a0d84585012f",
        "text": "The [[Realworld]] example "
      },
      "date": 1682563627936
    },
    {
      "type": "edit",
      "id": "21d7665d86dbb612",
      "item": {
        "type": "reference",
        "id": "21d7665d86dbb612",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-pages-realworld",
        "title": "elm-pages-realworld",
        "text": "[[Realworld]] implementation with [[elm-pages]] v3. [https://github.com/dillonkearns/elm-pages-realworld/ github], [https://realworld.elm-spa.dev/ site] is using server-rendered routes. If you're building a purely static site (no server-rendered routes), then you just copy the dist folder to the appropriate place for your hosting setup.\n"
      },
      "date": 1682563630361
    },
    {
      "type": "remove",
      "id": "d3b8a0d84585012f",
      "date": 1682563634749
    },
    {
      "type": "edit",
      "id": "a8e26efb1fe76827",
      "item": {
        "type": "paragraph",
        "id": "a8e26efb1fe76827",
        "text": "The adapter script in the realworld app does this setup to put files in the appropriate places to run as Netlify serverless functions: https://github.com/dillonkearns/elm-pages-realworld/blob/main/adapter.mjs"
      },
      "date": 1682563710669
    },
    {
      "type": "edit",
      "id": "9e2a7ec8e23d6837",
      "item": {
        "type": "paragraph",
        "id": "9e2a7ec8e23d6837",
        "text": "The idea of adapters is that they are responsible for turning the output of the [[elm-pages]] build into the right setup for a specific hosting provider. (i.e. adapting the output)"
      },
      "date": 1682563723546
    },
    {
      "type": "edit",
      "id": "a8e26efb1fe76827",
      "item": {
        "type": "paragraph",
        "id": "a8e26efb1fe76827",
        "text": "The adapter script in the realworld app does this setup to put files in the appropriate places to run as Netlify serverless functions: [https://github.com/dillonkearns/elm-pages-realworld/blob/main/adapter.mjs adapter.mjs]"
      },
      "date": 1682563817162
    },
    {
      "item": {
        "type": "factory",
        "id": "14328059c2f8aed6"
      },
      "id": "14328059c2f8aed6",
      "type": "add",
      "after": "a8e26efb1fe76827",
      "date": 1682563842791
    },
    {
      "type": "edit",
      "id": "14328059c2f8aed6",
      "item": {
        "type": "pagefold",
        "id": "14328059c2f8aed6",
        "text": "~"
      },
      "date": 1682563845778
    },
    {
      "item": {
        "type": "factory",
        "id": "44bd902d8c8bf48a"
      },
      "id": "44bd902d8c8bf48a",
      "type": "add",
      "after": "14328059c2f8aed6",
      "date": 1682563877174
    },
    {
      "type": "edit",
      "id": "44bd902d8c8bf48a",
      "item": {
        "type": "paragraph",
        "id": "44bd902d8c8bf48a",
        "text": "This is a JavaScript source code that exports a function named run. The run function accepts an object that contains several parameters.\n\nWhen this function is called, it will copy a file, write files, and write content to a file. Additionally, it throws an error when certain conditions are met.\n\nThe run function creates two directories named functions/render and functions/server-render using the ensureDirSync function.\n\nThen, the function copies the file specified by the renderFunctionFilePath parameter to two new locations: ./functions/render/elm-pages-cli.cjs and ./functions/server-render/elm-pages-cli.cjs.\n\nNext, the function writes content to two files: ./functions/render/index.mjs and ./functions/server-render/index.mjs. The content of these files is generated by calling the rendererCode function with true and false arguments, respectively.\n\nAfterward, the function filters the apiRoutePatterns array to include only elements whose kind property is \"prerender-with-fallback\" or \"serverless\". It then ensures that each pathPattern property in the filtered array does not contain an element whose kind property is \"hybrid\". If the filtered array contains an invalid element, the function throws an error.\n\nThe function then maps over the filtered array and returns a string for each element. The string contains a redirect path based on the kind property of the element.\n\nThe function also filters the routePatterns array to include only elements whose kind property is \"prerender-with-fallback\" or \"serverless\". It then maps over the filtered array and returns a string for each element. The string contains a redirect path based on the kind property of the element. Additionally, the string contains another redirect path that includes the path content.dat.\n\nFinally, the function joins the array of strings returned from the map method with newline characters and appends the resulting string to the string generated by the apiRouteRedirects method call. The resulting string is written to a file named dist/_redirects.\n\nThe ensureValidRoutePatternsForNetlify function filters an array of objects and throws an error if any element's pathPattern property contains an object whose kind property is \"hybrid\".\n\nThe isServerSide function returns true if an object's kind property is \"prerender-with-fallback\" or \"serverless\", and false otherwise.\n\nThe rendererCode function generates a string that contains JavaScript code. The generated code exports a function named handler. The handler function accepts two arguments: an event object and a context object. When the handler function is called, it calls the renderer.render function with various arguments. The renderer.render function is imported from the elm-pages/generator/src/render.js module. The renderResult returned from the renderer.render function is then used to construct an HTTP response that is returned from the handler function."
      },
      "date": 1682563879121
    },
    {
      "type": "edit",
      "id": "14328059c2f8aed6",
      "item": {
        "type": "pagefold",
        "id": "14328059c2f8aed6",
        "text": "chat.openai"
      },
      "date": 1682563894387
    },
    {
      "type": "add",
      "id": "c85dfeb0d2aa9d24",
      "item": {
        "type": "paragraph",
        "id": "c85dfeb0d2aa9d24",
        "text": "Let [[Dillon Kearns]] know if you have questions on how the adapter script works, I haven't written docs for it yet so the example is the only documentation at the moment."
      },
      "after": "a8e26efb1fe76827",
      "date": 1682564016563
    },
    {
      "type": "edit",
      "id": "c85dfeb0d2aa9d24",
      "item": {
        "type": "paragraph",
        "id": "c85dfeb0d2aa9d24",
        "text": "Let [[Dillon Kearns]] know if you have questions on how the adapter script works [https://elmlang.slack.com/archives/CNSNETV37/p1682550536951939?thread_ts=1682528259.748959&cid=CNSNETV37 slack], I haven't written docs for it yet so the example is the only documentation at the moment."
      },
      "date": 1682564064511
    },
    {
      "type": "edit",
      "id": "c85dfeb0d2aa9d24",
      "item": {
        "type": "paragraph",
        "id": "c85dfeb0d2aa9d24",
        "text": "Let [[Dillon Kearns]] know if you have questions on how the adapter script works [https://elmlang.slack.com/archives/CNSNETV37/p1682550536951939?thread_ts=1682528259.748959&cid=CNSNETV37 slack], he hasn't written docs for it yet so the example is the only documentation at the moment."
      },
      "date": 1682564175754
    },
    {
      "item": {
        "type": "factory",
        "id": "94a77eb6a3a3a39b"
      },
      "id": "94a77eb6a3a3a39b",
      "type": "add",
      "after": "44bd902d8c8bf48a",
      "date": 1682564218446
    },
    {
      "type": "edit",
      "id": "94a77eb6a3a3a39b",
      "item": {
        "type": "pagefold",
        "id": "94a77eb6a3a3a39b",
        "text": "~"
      },
      "date": 1682564222243
    },
    {
      "id": "03fe8841bd7e6575",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "03fe8841bd7e6575",
        "site": "wiki.ralfbarkow.ch",
        "slug": "elm-and-ai",
        "title": "Elm and AI",
        "text": "Can we get strong guarantees from AI tools that are known to hallucinate? We discuss some strategies, and ways that [[Elm]] might be a great target for AI assistance."
      },
      "after": "94a77eb6a3a3a39b",
      "attribution": {
        "page": "Dillon Kearns"
      },
      "date": 1682564227365
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1682564543622
    },
    {
      "type": "fork",
      "site": "code.dreyeck.ch",
      "date": 1690362413254
    },
    {
      "item": {
        "type": "factory",
        "id": "6367ecef9ba895f4"
      },
      "id": "6367ecef9ba895f4",
      "type": "add",
      "after": "03fe8841bd7e6575",
      "date": 1690363289603
    },
    {
      "type": "edit",
      "id": "6367ecef9ba895f4",
      "item": {
        "type": "paragraph",
        "id": "6367ecef9ba895f4",
        "text": "Community Experiments for v3 Adapters #378"
      },
      "date": 1690363324005
    },
    {
      "type": "edit",
      "id": "6367ecef9ba895f4",
      "item": {
        "type": "paragraph",
        "id": "6367ecef9ba895f4",
        "text": "Community Experiments for v3 Adapters #378 [https://github.com/dillonkearns/elm-pages/discussions/378 page]"
      },
      "date": 1690363332690
    },
    {
      "type": "fork",
      "site": "elm.dreyeck.ch",
      "date": 1690367081638
    },
    {
      "type": "edit",
      "id": "9e2a7ec8e23d6837",
      "item": {
        "type": "paragraph",
        "id": "9e2a7ec8e23d6837",
        "text": "The idea of adapters is that they are responsible for turning the output of the [[elm-pages]] build into the right setup for a specific hosting provider. (i.e. adapting the output) [https://elm-pages-v3.netlify.app/docs/adapters docs]"
      },
      "date": 1690367296365
    }
  ]
}