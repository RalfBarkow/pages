{
  "title": "Fragile Manifesto",
  "story": [
    {
      "type": "html",
      "text": "A humorous response to the [[Agile Manifesto]], written by [[Scott Ambler]] and submitted to the August edition of [[Software Development Magazine]].  Sadly in many cases it is more truth than fiction.",
      "id": "03e96a0299ece35aa51b70149dc5fbf3"
    },
    {
      "type": "html",
      "text": "\n[http://www.drdobbs.com/architecture-and-design/the-fragile-manifesto/184414888 www.drdobbs.com]",
      "id": "98b5c8165d65a54489a2192356fee6f0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9f3e1f5050adbaed7e0bb3dd18bb3389"
    },
    {
      "type": "html",
      "text": "Scott concludes : <i>As you may have gathered, this has all been an April Fools' joke.</i> No joke. I've been involved in several projects for which my management expected me to adopt exactly the strategy exposed with exactly the same rationale. That's not fiction, that's history. Or sociology.",
      "id": "ddab50d9102ebc11c85725c202aa115d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9f3e1f5050adbaed7e0bb3dd18bb3389"
    },
    {
      "type": "html",
      "text": "<i>Another instance, reposted without permission from elsewhere in cyberspace:</i>",
      "id": "039b4676d634d74140650793feda20ee"
    },
    {
      "type": "html",
      "text": "<b>The Fr</b><b>Agile Manifesto (Version 2.2)</b>",
      "id": "704fc7ba8a86f042ccb89d8490d4d072"
    },
    {
      "type": "html",
      "text": "\nWe are uncovering more profitable ways of developing software by doing it fast and making lots of money.",
      "id": "df1534f03472011c5e20fa598f25933c"
    },
    {
      "type": "html",
      "text": "\nThrough this work we have come to value:",
      "id": "a7d40f7d5673b9036a3b1c2603ac0c8f"
    },
    {
      "type": "html",
      "text": "     Profits and deadlines over individuals, interactions, processes and tools.",
      "id": "b27e5d491603b83a0010ad289757d769"
    },
    {
      "type": "html",
      "text": "     Mostly working software over elegant software",
      "id": "6103f256a3b2f521b5e7efa6db9eda62"
    },
    {
      "type": "html",
      "text": "     Customers whose checks clear over customer collaboration directly with development",
      "id": "1ae983cdf1ae19015aae1071131d9f17"
    },
    {
      "type": "html",
      "text": "     Responding to changing directives based on market research over following a technical plan",
      "id": "290e16c3cdacaca0679288028e520d87"
    },
    {
      "type": "html",
      "text": "\nThat is, while there is value in the secondary items, we value the primary items more.",
      "id": "3a615798cead9c877d370885815d143d"
    },
    {
      "type": "html",
      "text": "\nWe follow these principles:",
      "id": "b4762fbae194e46045cd36bee7811b80"
    },
    {
      "type": "html",
      "text": "\nOur highest priority is to satisfy the customer through rapid and on\ntime delivery of software that mostly works, and to provide affordable",
      "id": "19493d734390eb23dca15cbcc3fe10a5"
    },
    {
      "type": "html",
      "text": "(but profitable) customer service in those cases where it doesn't work\nout.",
      "id": "d6704799ac6b33c6c417048ca558f7ad"
    },
    {
      "type": "html",
      "text": "\nWe code to the requirements, because the development cycle is too short\nto implement any changes (unless those changes are absolutely\nnecessary). If there are no requirements, we do the best we can.",
      "id": "4bdcf573a2d3b57e92f9b35f7fbb4578"
    },
    {
      "type": "html",
      "text": "\nWe deliver working software frequently, every few months. Not during\nactual development, because customers or other departments might ask for\nchanges that would make meeting deadlines harder if they knew what we\nwere really developing. Developers must never communicate directly with\ncustomers. Under no circumstances should developers ever communicate\ndirectly with sales or marketing unless fighting over a parking space.",
      "id": "3b08f72772d23ef56dd2b34634579a48"
    },
    {
      "type": "html",
      "text": "\nBusiness people and developers must work together every now and again\nthroughout the project. But not too often, because programmers don't\nlike meetings and it wastes time that could be spent hacking in code for\nthe latest marketing checkbox.",
      "id": "4c86737b5c979c2e31c0c4af86cdc038"
    },
    {
      "type": "html",
      "text": "\nDevelopment must not provide code or executables to test until the\nofficial test cycle begins. To do so earlier might result in feedback,\nand we all know what that sounds like. Feedback slows development\nbecause we might develop the wrong thing, and if we had feedback we\nmight have to start over. It's much easier to say, \"It's too late in\nthis cycle to change that.\"",
      "id": "bdabae97f8f813e82a1e3e3f8fe64659"
    },
    {
      "type": "html",
      "text": "\nBuild projects around individuals who like to get paid. They'll do what\nyou ask without much pushback. Give them a computer and supervise them\ncontinuously until the job gets done.",
      "id": "cf9f7918e1c7108314533ce77115c5cf"
    },
    {
      "type": "html",
      "text": "\nThe most efficient and effective method of conveying information to and\nwithin a development team is to ask for surprise demonstrations with\nonly a few minutes notice.",
      "id": "d2d977d15a464d463ded1c8e0311ca7c"
    },
    {
      "type": "html",
      "text": "\nKind of working software is the primary measure of progress. Integration\nshould be delayed until late in the process so that nobody gets\ndistracted by other people's work. This recognizes that all developers\nthink that all other developer's work is crap. Avoiding technical\narguments is key to the Fr<b></b>Agile process.",
      "id": "f8f1becd06ce7263a2966c1eedd95a27"
    },
    {
      "type": "html",
      "text": "\nFr<b></b>Agile processes promote not putting too much effort into development\nand even less into design. The sponsors, developers, and users should be\nable to maintain a constant pace indefinitely. Except when they must\nwork overtime during integration, and then we recognize them publicly\nfor their extra effort in keeping management looking good.",
      "id": "655f8b266ac5031473452a0d714861cc"
    },
    {
      "type": "html",
      "text": "\nEvery developer is responsible for their own work, and is not strongly\nencouraged to share code with one another; communication takes time, and\nmakes meeting deadlines harder. It's cheaper to rewrite code over and\nover than to have valuable programming time spent talking about esoteric\nsubjects like \"architecture\". Every programmer should use only the tools\nand class libraries that they are already familiar with, because\nlearning stuff takes time away from meeting deadlines.",
      "id": "0e039aaa4d2ec91c421cc2ad7ad99ef9"
    },
    {
      "type": "html",
      "text": "\nSimplicity is important, but maximizing the amount of work done is\nessential. Doing your own design and implementation independently of\nother programmers helps to ensure that your code can't get more complex\nthan you can understand by yourself.",
      "id": "ec619728b1c765de5e3611ab4559a3da"
    },
    {
      "type": "html",
      "text": "\nThe best architectures, requirements, and designs emerge from\nself-organizing teams. But we recognize that you don't need any of these\nto make buckets of money. This is especially the case if individual\nprograms don't get too large and unwieldy. The program as \"object\" keeps\nprograms from getting out of hand.",
      "id": "cf3582ff9ee9b221144b12e6b9e0d4fb"
    },
    {
      "type": "html",
      "text": "\nMeetings of any kind involving developers are to be avoided if at all\npossible. Meetings take time away from producing code. Communication\nbetween programmers can only lead to coding standards and architecture,\nwhich only distract programmers from the immediate task at hand;\nbuilding programs that reach the market first so they can be sold\nquickly and profitably. There is no shame in being second, but there is\nno profit either. The first vendor to lock in the customer base wins.",
      "id": "d6c59faae09e673768122aa90d693052"
    },
    {
      "type": "html",
      "text": "\nKeep projects small. No project should require more than two man years\nof development. If projects accidentally get large due to their\npopularity, release maintenance releases with gradual evolutionary\nimprovements or break it up into separate individually maintainable\nproducts.",
      "id": "b737ede90a1f108d8e97b0ed44fe0495"
    },
    {
      "type": "html",
      "text": "\nUnder no circumstances ever throw away old code. We recognize the value\nof code that's kind of worked for many years. It's been tested by\nhundreds of users and it's been sort of fixed over the years. That gives\nit value. New code will have new bugs. Never, under any circumstances\nrefactor code unless absolutely necessary.",
      "id": "cfaac68f877a71df845e0d2976e881ad"
    },
    {
      "type": "html",
      "text": "\nChange and retraining are expensive. New development technologies should\nbe adopted only when the old development technologies are no longer\nviable. Only those technologies that are widely accepted by the entire\nsoftware development industry should be entertained. Choosing a new\ndevelopment technology is primarily a business function, not a technical\none.",
      "id": "6849c6dfe8e441ea5f08fb636fd37ff7"
    },
    {
      "type": "html",
      "text": "\nAvoid the implementation of standard file formats and data interchange\nmethodologies insofar as is possible. If you create a migration path for\nyour customers to escape, many will undoubtedly do so over time. Obscure\nbinary file formats are our friends.",
      "id": "c2c3db91bc1e3ca23a591ab9c0076fc3"
    },
    {
      "type": "html",
      "text": "\nAlways pick projects that are neither too vertical (such as internal\nenterprise applications), nor too horizontal. Find a niche market where\nthe customers are non-technical. This is important to avoid competition\nfrom those pesky open source communists in Europe.",
      "id": "60009ff387dc95c86e776046964d5f8f"
    },
    {
      "type": "html",
      "text": "\nBranching code in your revision control system is a great way to stay\nout of the other programmer's way. Time wasting multi file refactoring\nis thus discouraged, because it would make merging branches later too\ndifficult.",
      "id": "40f33994c1420d9351aca4eadf0c0ca6"
    },
    {
      "type": "html",
      "text": "\nWe value swamp guides over architects. Building a four lane highway\nacross the swamp tomorrow is less important than keeping the alligators\nfrom chewing body parts off today.",
      "id": "32db499e7db3415cbf7ef3549ab7513e"
    },
    {
      "type": "html",
      "text": "\nAlways remember that while the programmers down the street working for\nthe struggling startup are writing elegant code, our paychecks are\nactually signed.",
      "id": "03c4ca6be33ac43d500df9c5e8265e3e"
    },
    {
      "type": "html",
      "text": "--[[Kelly Anderson]]",
      "id": "9254c1cf1ddf406faa65b5c994262497"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?FragileManifesto c2.com]",
      "id": "32435f5bd90d91864890c4e0067f2ba2"
    }
  ],
  "journal": [
    {
      "date": 1381943581000,
      "id": "a8e0bf16d7539a652309ad91bc19a848",
      "type": "create",
      "item": {
        "title": "Fragile Manifesto",
        "story": [
          {
            "type": "html",
            "text": "A humorous response to the [[Agile Manifesto]], written by [[Scott Ambler]] and submitted to the August edition of [[Software Development Magazine]].  Sadly in many cases it is more truth than fiction.",
            "id": "03e96a0299ece35aa51b70149dc5fbf3"
          },
          {
            "type": "html",
            "text": "\n[http://www.drdobbs.com/architecture-and-design/the-fragile-manifesto/184414888 www.drdobbs.com]",
            "id": "98b5c8165d65a54489a2192356fee6f0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9f3e1f5050adbaed7e0bb3dd18bb3389"
          },
          {
            "type": "html",
            "text": "Scott concludes : <i>As you may have gathered, this has all been an April Fools' joke.</i> No joke. I've been involved in several projects for which my management expected me to adopt exactly the strategy exposed with exactly the same rationale. That's not fiction, that's history. Or sociology.",
            "id": "ddab50d9102ebc11c85725c202aa115d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9f3e1f5050adbaed7e0bb3dd18bb3389"
          },
          {
            "type": "html",
            "text": "<i>Another instance, reposted without permission from elsewhere in cyberspace:</i>",
            "id": "039b4676d634d74140650793feda20ee"
          },
          {
            "type": "html",
            "text": "<b>The Fr</b><b>Agile Manifesto (Version 2.2)</b>",
            "id": "704fc7ba8a86f042ccb89d8490d4d072"
          },
          {
            "type": "html",
            "text": "\nWe are uncovering more profitable ways of developing software by doing it fast and making lots of money.",
            "id": "df1534f03472011c5e20fa598f25933c"
          },
          {
            "type": "html",
            "text": "\nThrough this work we have come to value:",
            "id": "a7d40f7d5673b9036a3b1c2603ac0c8f"
          },
          {
            "type": "html",
            "text": "     Profits and deadlines over individuals, interactions, processes and tools.",
            "id": "b27e5d491603b83a0010ad289757d769"
          },
          {
            "type": "html",
            "text": "     Mostly working software over elegant software",
            "id": "6103f256a3b2f521b5e7efa6db9eda62"
          },
          {
            "type": "html",
            "text": "     Customers whose checks clear over customer collaboration directly with development",
            "id": "1ae983cdf1ae19015aae1071131d9f17"
          },
          {
            "type": "html",
            "text": "     Responding to changing directives based on market research over following a technical plan",
            "id": "290e16c3cdacaca0679288028e520d87"
          },
          {
            "type": "html",
            "text": "\nThat is, while there is value in the secondary items, we value the primary items more.",
            "id": "3a615798cead9c877d370885815d143d"
          },
          {
            "type": "html",
            "text": "\nWe follow these principles:",
            "id": "b4762fbae194e46045cd36bee7811b80"
          },
          {
            "type": "html",
            "text": "\nOur highest priority is to satisfy the customer through rapid and on\ntime delivery of software that mostly works, and to provide affordable",
            "id": "19493d734390eb23dca15cbcc3fe10a5"
          },
          {
            "type": "html",
            "text": "(but profitable) customer service in those cases where it doesn't work\nout.",
            "id": "d6704799ac6b33c6c417048ca558f7ad"
          },
          {
            "type": "html",
            "text": "\nWe code to the requirements, because the development cycle is too short\nto implement any changes (unless those changes are absolutely\nnecessary). If there are no requirements, we do the best we can.",
            "id": "4bdcf573a2d3b57e92f9b35f7fbb4578"
          },
          {
            "type": "html",
            "text": "\nWe deliver working software frequently, every few months. Not during\nactual development, because customers or other departments might ask for\nchanges that would make meeting deadlines harder if they knew what we\nwere really developing. Developers must never communicate directly with\ncustomers. Under no circumstances should developers ever communicate\ndirectly with sales or marketing unless fighting over a parking space.",
            "id": "3b08f72772d23ef56dd2b34634579a48"
          },
          {
            "type": "html",
            "text": "\nBusiness people and developers must work together every now and again\nthroughout the project. But not too often, because programmers don't\nlike meetings and it wastes time that could be spent hacking in code for\nthe latest marketing checkbox.",
            "id": "4c86737b5c979c2e31c0c4af86cdc038"
          },
          {
            "type": "html",
            "text": "\nDevelopment must not provide code or executables to test until the\nofficial test cycle begins. To do so earlier might result in feedback,\nand we all know what that sounds like. Feedback slows development\nbecause we might develop the wrong thing, and if we had feedback we\nmight have to start over. It's much easier to say, \"It's too late in\nthis cycle to change that.\"",
            "id": "bdabae97f8f813e82a1e3e3f8fe64659"
          },
          {
            "type": "html",
            "text": "\nBuild projects around individuals who like to get paid. They'll do what\nyou ask without much pushback. Give them a computer and supervise them\ncontinuously until the job gets done.",
            "id": "cf9f7918e1c7108314533ce77115c5cf"
          },
          {
            "type": "html",
            "text": "\nThe most efficient and effective method of conveying information to and\nwithin a development team is to ask for surprise demonstrations with\nonly a few minutes notice.",
            "id": "d2d977d15a464d463ded1c8e0311ca7c"
          },
          {
            "type": "html",
            "text": "\nKind of working software is the primary measure of progress. Integration\nshould be delayed until late in the process so that nobody gets\ndistracted by other people's work. This recognizes that all developers\nthink that all other developer's work is crap. Avoiding technical\narguments is key to the Fr<b></b>Agile process.",
            "id": "f8f1becd06ce7263a2966c1eedd95a27"
          },
          {
            "type": "html",
            "text": "\nFr<b></b>Agile processes promote not putting too much effort into development\nand even less into design. The sponsors, developers, and users should be\nable to maintain a constant pace indefinitely. Except when they must\nwork overtime during integration, and then we recognize them publicly\nfor their extra effort in keeping management looking good.",
            "id": "655f8b266ac5031473452a0d714861cc"
          },
          {
            "type": "html",
            "text": "\nEvery developer is responsible for their own work, and is not strongly\nencouraged to share code with one another; communication takes time, and\nmakes meeting deadlines harder. It's cheaper to rewrite code over and\nover than to have valuable programming time spent talking about esoteric\nsubjects like \"architecture\". Every programmer should use only the tools\nand class libraries that they are already familiar with, because\nlearning stuff takes time away from meeting deadlines.",
            "id": "0e039aaa4d2ec91c421cc2ad7ad99ef9"
          },
          {
            "type": "html",
            "text": "\nSimplicity is important, but maximizing the amount of work done is\nessential. Doing your own design and implementation independently of\nother programmers helps to ensure that your code can't get more complex\nthan you can understand by yourself.",
            "id": "ec619728b1c765de5e3611ab4559a3da"
          },
          {
            "type": "html",
            "text": "\nThe best architectures, requirements, and designs emerge from\nself-organizing teams. But we recognize that you don't need any of these\nto make buckets of money. This is especially the case if individual\nprograms don't get too large and unwieldy. The program as \"object\" keeps\nprograms from getting out of hand.",
            "id": "cf3582ff9ee9b221144b12e6b9e0d4fb"
          },
          {
            "type": "html",
            "text": "\nMeetings of any kind involving developers are to be avoided if at all\npossible. Meetings take time away from producing code. Communication\nbetween programmers can only lead to coding standards and architecture,\nwhich only distract programmers from the immediate task at hand;\nbuilding programs that reach the market first so they can be sold\nquickly and profitably. There is no shame in being second, but there is\nno profit either. The first vendor to lock in the customer base wins.",
            "id": "d6c59faae09e673768122aa90d693052"
          },
          {
            "type": "html",
            "text": "\nKeep projects small. No project should require more than two man years\nof development. If projects accidentally get large due to their\npopularity, release maintenance releases with gradual evolutionary\nimprovements or break it up into separate individually maintainable\nproducts.",
            "id": "b737ede90a1f108d8e97b0ed44fe0495"
          },
          {
            "type": "html",
            "text": "\nUnder no circumstances ever throw away old code. We recognize the value\nof code that's kind of worked for many years. It's been tested by\nhundreds of users and it's been sort of fixed over the years. That gives\nit value. New code will have new bugs. Never, under any circumstances\nrefactor code unless absolutely necessary.",
            "id": "cfaac68f877a71df845e0d2976e881ad"
          },
          {
            "type": "html",
            "text": "\nChange and retraining are expensive. New development technologies should\nbe adopted only when the old development technologies are no longer\nviable. Only those technologies that are widely accepted by the entire\nsoftware development industry should be entertained. Choosing a new\ndevelopment technology is primarily a business function, not a technical\none.",
            "id": "6849c6dfe8e441ea5f08fb636fd37ff7"
          },
          {
            "type": "html",
            "text": "\nAvoid the implementation of standard file formats and data interchange\nmethodologies insofar as is possible. If you create a migration path for\nyour customers to escape, many will undoubtedly do so over time. Obscure\nbinary file formats are our friends.",
            "id": "c2c3db91bc1e3ca23a591ab9c0076fc3"
          },
          {
            "type": "html",
            "text": "\nAlways pick projects that are neither too vertical (such as internal\nenterprise applications), nor too horizontal. Find a niche market where\nthe customers are non-technical. This is important to avoid competition\nfrom those pesky open source communists in Europe.",
            "id": "60009ff387dc95c86e776046964d5f8f"
          },
          {
            "type": "html",
            "text": "\nBranching code in your revision control system is a great way to stay\nout of the other programmer's way. Time wasting multi file refactoring\nis thus discouraged, because it would make merging branches later too\ndifficult.",
            "id": "40f33994c1420d9351aca4eadf0c0ca6"
          },
          {
            "type": "html",
            "text": "\nWe value swamp guides over architects. Building a four lane highway\nacross the swamp tomorrow is less important than keeping the alligators\nfrom chewing body parts off today.",
            "id": "32db499e7db3415cbf7ef3549ab7513e"
          },
          {
            "type": "html",
            "text": "\nAlways remember that while the programmers down the street working for\nthe struggling startup are writing elegant code, our paychecks are\nactually signed.",
            "id": "03c4ca6be33ac43d500df9c5e8265e3e"
          },
          {
            "type": "html",
            "text": "--[[Kelly Anderson]]",
            "id": "9254c1cf1ddf406faa65b5c994262497"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?FragileManifesto c2.com]",
            "id": "32435f5bd90d91864890c4e0067f2ba2"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1627242767874
    }
  ]
}