{
  "title": "Nice Language",
  "story": [
    {
      "type": "html",
      "text": "[http://nice.sourceforge.net nice.sourceforge.net]",
      "id": "7c1658a474efa5abb5a886e24a082618"
    },
    {
      "type": "html",
      "text": "\nThe [[Nice Language]] is an extension of the [[Java Language]]. It has advanced features like [[Parametric Polymorphism]], [[Multiple Dispatch]], [[Higher Order Function]]s, [[Design By Contract]], tuples, [[Keyword Parameter Passing]] and [[Optional Parameters]]. Unique features also include [[Abstract Interface]]s and a type system preventing [[Null Pointer Exception]]s at compile time. The compiler is [[Open Source]], and the design of the language is open to public review and contributions.",
      "id": "fe765eadaca3b1530098f6d25c4aaa10"
    },
    {
      "type": "html",
      "text": "\nLike many [[Other Languages For The Java Vm]], allows full access to the Java libs.",
      "id": "6fca51c3a2d5d74b6a2d40ddc1623c1e"
    },
    {
      "type": "html",
      "text": "<i>nice</i>",
      "id": "ab34bccd5098357da410bc3e6dc4f5bc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "f00eef74e45d394b0a096df50ebaceb4"
    },
    {
      "type": "html",
      "text": "Clever. It feels a lot like the [[Dylan Language]], but with static typing, [[Parametric Polymorphism]], and [[Java Virtual Machine]] integration. Not a bad language, as such things go, but some of the syntax feels a bit more verbose than necessary. Not the ultimate language, but nice. So to speak.",
      "id": "85eb265fa3f8829694d3453e75b82c36"
    },
    {
      "type": "html",
      "text": "\nA design decision for Nice is to stay close to Java, except when introducing a difference provides a clear advantage. This is supposed to make learning the language easier, but also comes with the price of some legacy, especially in the syntax. Is this what you are referring to, or is the verbosity in the syntax of the Nice-specific features? Could you give examples? -- [[Daniel Bonniot]]",
      "id": "fd7ebefccabee6b336faf4a7c9c1a183"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "f00eef74e45d394b0a096df50ebaceb4"
    },
    {
      "type": "html",
      "text": "Interesting. An especially unique feature is the idea of an [[Abstract Interface]]. As everyone knows, a normal interface tags an object as having a given set of methods and is part of the object's type, but doesn't provide the methods. In Nice, an abstract interface doesn't affect the object's type; rather, it simply tags the object as having the methods. This becomes uniquely useful with method generics. See the Nice manual. In short, it provides something that looks very much like [[Aspect Oriented Programming]].",
      "id": "8a1512e234513a662325af0a2ec55437"
    },
    {
      "type": "html",
      "text": "\nIt looks like an [[Abstract Interface]] is like the \"Concepts\" which were proposed for (and removed from) C++0x?  -- [[Ron Romero]]",
      "id": "17453b6f211e00af3d7f1084c7902d5b"
    },
    {
      "type": "html",
      "text": "<i>I guess this is generally known as a [[Mix In]]</i> ?",
      "id": "279c49e856666aeefe6662d9b87bc84a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "f00eef74e45d394b0a096df50ebaceb4"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]]",
      "id": "630e5c335c25e350583684272eb105aa"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?NiceLanguage c2.com]",
      "id": "93c002c3764c99220f659c2bc43a2459"
    }
  ],
  "journal": [
    {
      "date": 1271366779000,
      "id": "88d952c57fa6247c91ac5fea026cac29",
      "type": "create",
      "item": {
        "title": "Nice Language",
        "story": [
          {
            "type": "html",
            "text": "[http://nice.sourceforge.net nice.sourceforge.net]",
            "id": "7c1658a474efa5abb5a886e24a082618"
          },
          {
            "type": "html",
            "text": "\nThe [[Nice Language]] is an extension of the [[Java Language]]. It has advanced features like [[Parametric Polymorphism]], [[Multiple Dispatch]], [[Higher Order Function]]s, [[Design By Contract]], tuples, [[Keyword Parameter Passing]] and [[Optional Parameters]]. Unique features also include [[Abstract Interface]]s and a type system preventing [[Null Pointer Exception]]s at compile time. The compiler is [[Open Source]], and the design of the language is open to public review and contributions.",
            "id": "fe765eadaca3b1530098f6d25c4aaa10"
          },
          {
            "type": "html",
            "text": "\nLike many [[Other Languages For The Java Vm]], allows full access to the Java libs.",
            "id": "6fca51c3a2d5d74b6a2d40ddc1623c1e"
          },
          {
            "type": "html",
            "text": "<i>nice</i>",
            "id": "ab34bccd5098357da410bc3e6dc4f5bc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "f00eef74e45d394b0a096df50ebaceb4"
          },
          {
            "type": "html",
            "text": "Clever. It feels a lot like the [[Dylan Language]], but with static typing, [[Parametric Polymorphism]], and [[Java Virtual Machine]] integration. Not a bad language, as such things go, but some of the syntax feels a bit more verbose than necessary. Not the ultimate language, but nice. So to speak.",
            "id": "85eb265fa3f8829694d3453e75b82c36"
          },
          {
            "type": "html",
            "text": "\nA design decision for Nice is to stay close to Java, except when introducing a difference provides a clear advantage. This is supposed to make learning the language easier, but also comes with the price of some legacy, especially in the syntax. Is this what you are referring to, or is the verbosity in the syntax of the Nice-specific features? Could you give examples? -- [[Daniel Bonniot]]",
            "id": "fd7ebefccabee6b336faf4a7c9c1a183"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "f00eef74e45d394b0a096df50ebaceb4"
          },
          {
            "type": "html",
            "text": "Interesting. An especially unique feature is the idea of an [[Abstract Interface]]. As everyone knows, a normal interface tags an object as having a given set of methods and is part of the object's type, but doesn't provide the methods. In Nice, an abstract interface doesn't affect the object's type; rather, it simply tags the object as having the methods. This becomes uniquely useful with method generics. See the Nice manual. In short, it provides something that looks very much like [[Aspect Oriented Programming]].",
            "id": "8a1512e234513a662325af0a2ec55437"
          },
          {
            "type": "html",
            "text": "\nIt looks like an [[Abstract Interface]] is like the \"Concepts\" which were proposed for (and removed from) C++0x?  -- [[Ron Romero]]",
            "id": "17453b6f211e00af3d7f1084c7902d5b"
          },
          {
            "type": "html",
            "text": "<i>I guess this is generally known as a [[Mix In]]</i> ?",
            "id": "279c49e856666aeefe6662d9b87bc84a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "f00eef74e45d394b0a096df50ebaceb4"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]]",
            "id": "630e5c335c25e350583684272eb105aa"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?NiceLanguage c2.com]",
            "id": "93c002c3764c99220f659c2bc43a2459"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1707800931349
    }
  ]
}