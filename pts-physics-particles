{
  "title": "Pts Physics Particles",
  "story": [
    {
      "type": "markdown",
      "id": "d6a477c834e317dd",
      "text": "**Demo**: Particles colliding with each other in space. Move the pointer to hit them like billiard balls. [https://ptsjs.org/demo/?name=physics.particles ptsjs.org/demo]\n"
    },
    {
      "type": "frame",
      "id": "0a61665557e7f9e2",
      "text": "//wiki.ralfbarkow.ch/assets/pages/pts-demos/run-pts.html\nHEIGHT 160"
    },
    {
      "type": "markdown",
      "id": "8a1152f77f06ddf9",
      "text": "view/edit code:"
    },
    {
      "type": "code",
      "id": "1d6c28883680fb63",
      "text": "// Source code licensed under Apache License 2.0. \n// Copyright © 2017 William Ngan. (https://github.com/williamngan/pts)\n\nwindow.demoDescription = \"Particles colliding with each other in space. Move the pointer to hit them like billiard balls.\";\n\nPts.quickStart( \"#pt\", \"#123\" );\n\n//// Demo code starts (anonymous function wrapper is optional) ---\n\n(function() {\n\n  var world;\n\n  space.add( {\n\n    start: (bound, space) => {\n\n      // Create world and 100 random points\n      world = new World( space.innerBound, 1, 0 );\n      let pts = Create.distributeRandom( space.innerBound, 100 );\n      \n      // Create particles and hit them with a random impulse\n      for (let i=0, len=pts.length; i<len; i++) {\n        let p = new Particle( pts[i] ).size( (i===0) ? 30 : 3+Math.random()*space.size.x/50 );\n        p.hit( Num.randomRange(-50,50), Num.randomRange(-25, 25) );\n        world.add( p );\n      }\n\n      world.particle( 0 ).lock = true; // lock it to move it by pointer later on\n\n    },\n\n\n    animate: (time, ftime) => {\n      world.drawParticles( (p, i) => {\n        let color = (i===0) ? \"#fff\" : [\"#ff2d5d\", \"#42dc8e\", \"#2e43eb\", \"#ffe359\"][i%4];\n        form.fillOnly( color ).point( p, p.radius, \"circle\" ) \n      });\n\n      world.update( ftime );\n    },\n\n\n    action:( type, px, py) => {\n      if (type == \"move\") {\n        world.particle( 0 ).position = new Pt(px, py);\n      }\n    },\n\n    resize: (bound, evt) => {\n      if (world) world.bound = space.innerBound;\n    }\n  });\n  \n  space.bindMouse().bindTouch();\n  space.play();\n\n})();"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Pts Physics Particles",
        "story": []
      },
      "date": 1652627987790
    },
    {
      "item": {
        "type": "factory",
        "id": "932468e5f4bd0348"
      },
      "id": "932468e5f4bd0348",
      "type": "add",
      "date": 1652627990577
    },
    {
      "type": "remove",
      "id": "932468e5f4bd0348",
      "date": 1652627996302
    },
    {
      "item": {
        "type": "factory",
        "id": "1d6c28883680fb63"
      },
      "id": "1d6c28883680fb63",
      "type": "add",
      "date": 1652628040738
    },
    {
      "type": "edit",
      "id": "1d6c28883680fb63",
      "item": {
        "type": "code",
        "id": "1d6c28883680fb63",
        "text": "Pts.quickStart( \"#pt\", \"#123\" );\n\n//// Demo code starts (anonymous function wrapper is optional) ---\n\n(function() {\n\n  var world;\n\n  space.add( {\n\n    start: (bound, space) => {\n\n      // Create world and 100 random points\n      world = new World( space.innerBound, 1, 0 );\n      let pts = Create.distributeRandom( space.innerBound, 100 );\n      \n      // Create particles and hit them with a random impulse\n      for (let i=0, len=pts.length; i<len; i++) {\n        let p = new Particle( pts[i] ).size( (i===0) ? 30 : 3+Math.random()*space.size.x/50 );\n        p.hit( Num.randomRange(-50,50), Num.randomRange(-25, 25) );\n        world.add( p );\n      }\n\n      world.particle( 0 ).lock = true; // lock it to move it by pointer later on\n\n    },\n\n\n    animate: (time, ftime) => {\n      world.drawParticles( (p, i) => {\n        let color = (i===0) ? \"#fff\" : [\"#ff2d5d\", \"#42dc8e\", \"#2e43eb\", \"#ffe359\"][i%4];\n        form.fillOnly( color ).point( p, p.radius, \"circle\" ) \n      });\n\n      world.update( ftime );\n    },\n\n\n    action:( type, px, py) => {\n      if (type == \"move\") {\n        world.particle( 0 ).position = new Pt(px, py);\n      }\n    },\n\n    resize: (bound, evt) => {\n      if (world) world.bound = space.innerBound;\n    }\n  });"
      },
      "date": 1652628043414
    },
    {
      "item": {
        "type": "factory",
        "id": "0a61665557e7f9e2"
      },
      "id": "0a61665557e7f9e2",
      "type": "add",
      "after": "1d6c28883680fb63",
      "date": 1652628049348
    },
    {
      "type": "edit",
      "id": "0a61665557e7f9e2",
      "item": {
        "type": "frame",
        "id": "0a61665557e7f9e2",
        "text": "//wiki.ralfbarkow.ch/assets/pages/pts-demos/run-pts.html\nHEIGHT 160"
      },
      "date": 1652628051547
    },
    {
      "type": "edit",
      "id": "1d6c28883680fb63",
      "item": {
        "type": "code",
        "id": "1d6c28883680fb63",
        "text": "Pts.quickStart( \"#pt\", \"#123\" );\n\n//// Demo code starts (anonymous function wrapper is optional) ---\n\n\n\n  var world;\n\n  space.add( {\n\n    start: (bound, space) => {\n\n      // Create world and 100 random points\n      world = new World( space.innerBound, 1, 0 );\n      let pts = Create.distributeRandom( space.innerBound, 100 );\n      \n      // Create particles and hit them with a random impulse\n      for (let i=0, len=pts.length; i<len; i++) {\n        let p = new Particle( pts[i] ).size( (i===0) ? 30 : 3+Math.random()*space.size.x/50 );\n        p.hit( Num.randomRange(-50,50), Num.randomRange(-25, 25) );\n        world.add( p );\n      }\n\n      world.particle( 0 ).lock = true; // lock it to move it by pointer later on\n\n    },\n\n\n    animate: (time, ftime) => {\n      world.drawParticles( (p, i) => {\n        let color = (i===0) ? \"#fff\" : [\"#ff2d5d\", \"#42dc8e\", \"#2e43eb\", \"#ffe359\"][i%4];\n        form.fillOnly( color ).point( p, p.radius, \"circle\" ) \n      });\n\n      world.update( ftime );\n    },\n\n\n    action:( type, px, py) => {\n      if (type == \"move\") {\n        world.particle( 0 ).position = new Pt(px, py);\n      }\n    },\n\n    resize: (bound, evt) => {\n      if (world) world.bound = space.innerBound;\n    }\n  };"
      },
      "date": 1652628070479
    },
    {
      "type": "edit",
      "id": "1d6c28883680fb63",
      "item": {
        "type": "code",
        "id": "1d6c28883680fb63",
        "text": "Pts.quickStart( \"#pt\", \"#123\" );\n\n//// Demo code starts (anonymous function wrapper is optional) ---\n\n(function() {\n\n  var world;\n\n  space.add( {\n\n    start: (bound, space) => {\n\n      // Create world and 100 random points\n      world = new World( space.innerBound, 1, 0 );\n      let pts = Create.distributeRandom( space.innerBound, 100 );\n      \n      // Create particles and hit them with a random impulse\n      for (let i=0, len=pts.length; i<len; i++) {\n        let p = new Particle( pts[i] ).size( (i===0) ? 30 : 3+Math.random()*space.size.x/50 );\n        p.hit( Num.randomRange(-50,50), Num.randomRange(-25, 25) );\n        world.add( p );\n      }\n\n      world.particle( 0 ).lock = true; // lock it to move it by pointer later on\n\n    },\n\n\n    animate: (time, ftime) => {\n      world.drawParticles( (p, i) => {\n        let color = (i===0) ? \"#fff\" : [\"#ff2d5d\", \"#42dc8e\", \"#2e43eb\", \"#ffe359\"][i%4];\n        form.fillOnly( color ).point( p, p.radius, \"circle\" ) \n      });\n\n      world.update( ftime );\n    },\n\n\n    action:( type, px, py) => {\n      if (type == \"move\") {\n        world.particle( 0 ).position = new Pt(px, py);\n      }\n    },\n\n    resize: (bound, evt) => {\n      if (world) world.bound = space.innerBound;\n    }\n  });\n  \n  space.bindMouse().bindTouch();\n  space.play();\n\n})();"
      },
      "date": 1652628126125
    },
    {
      "id": "0a61665557e7f9e2",
      "type": "move",
      "order": [
        "0a61665557e7f9e2",
        "1d6c28883680fb63"
      ],
      "date": 1652637247302
    },
    {
      "item": {
        "type": "factory",
        "id": "57b4bebcba29a1a7"
      },
      "id": "57b4bebcba29a1a7",
      "type": "add",
      "after": "1d6c28883680fb63",
      "date": 1652637336417
    },
    {
      "id": "57b4bebcba29a1a7",
      "type": "move",
      "order": [
        "57b4bebcba29a1a7",
        "0a61665557e7f9e2",
        "1d6c28883680fb63"
      ],
      "date": 1652637347205
    },
    {
      "type": "edit",
      "id": "57b4bebcba29a1a7",
      "item": {
        "type": "paragraph",
        "id": "57b4bebcba29a1a7",
        "text": "– [https://ptsjs.org/demo/?name=physics.particles ptsjs.org/demo]"
      },
      "date": 1652637378570
    },
    {
      "type": "add",
      "id": "d6a477c834e317dd",
      "item": {
        "type": "paragraph",
        "id": "d6a477c834e317dd",
        "text": "Demo: Particles colliding with each other in space. Move the pointer to hit them like billiard balls."
      },
      "after": "57b4bebcba29a1a7",
      "date": 1652637441100
    },
    {
      "id": "d6a477c834e317dd",
      "type": "move",
      "order": [
        "d6a477c834e317dd",
        "57b4bebcba29a1a7",
        "0a61665557e7f9e2",
        "1d6c28883680fb63"
      ],
      "date": 1652637457387
    },
    {
      "type": "remove",
      "id": "57b4bebcba29a1a7",
      "date": 1652637466117
    },
    {
      "type": "edit",
      "id": "d6a477c834e317dd",
      "item": {
        "type": "paragraph",
        "id": "d6a477c834e317dd",
        "text": "Demo: Particles colliding with each other in space. Move the pointer to hit them like billiard balls [https://ptsjs.org/demo/?name=physics.particles ptsjs.org/demo]"
      },
      "date": 1652637468239
    },
    {
      "type": "edit",
      "id": "d6a477c834e317dd",
      "item": {
        "type": "paragraph",
        "id": "d6a477c834e317dd",
        "text": "Demo: Particles colliding with each other in space. Move the pointer to hit them like billiard balls. [https://ptsjs.org/demo/?name=physics.particles ptsjs.org/demo]"
      },
      "date": 1652637476798
    },
    {
      "type": "edit",
      "id": "d6a477c834e317dd",
      "item": {
        "type": "paragraph",
        "id": "d6a477c834e317dd",
        "text": "**Demo**: Particles colliding with each other in space. Move the pointer to hit them like billiard balls. [https://ptsjs.org/demo/?name=physics.particles ptsjs.org/demo]"
      },
      "date": 1652637502295
    },
    {
      "type": "edit",
      "id": "d6a477c834e317dd",
      "item": {
        "type": "markdown",
        "id": "d6a477c834e317dd",
        "text": "**Demo**: Particles colliding with each other in space. Move the pointer to hit them like billiard balls. [https://ptsjs.org/demo/?name=physics.particles ptsjs.org/demo]"
      },
      "date": 1652637504332
    },
    {
      "type": "edit",
      "id": "d6a477c834e317dd",
      "item": {
        "type": "markdown",
        "id": "d6a477c834e317dd",
        "text": "**Demo**: Particles colliding with each other in space. Move the pointer to hit them like billiard balls. [https://ptsjs.org/demo/?name=physics.particles ptsjs.org/demo]\n"
      },
      "date": 1652637563654
    },
    {
      "type": "add",
      "id": "8a1152f77f06ddf9",
      "item": {
        "type": "markdown",
        "id": "8a1152f77f06ddf9",
        "text": "view/edit code:"
      },
      "after": "d6a477c834e317dd",
      "date": 1652637565229
    },
    {
      "id": "8a1152f77f06ddf9",
      "type": "move",
      "order": [
        "d6a477c834e317dd",
        "0a61665557e7f9e2",
        "8a1152f77f06ddf9",
        "1d6c28883680fb63"
      ],
      "date": 1652637567674
    },
    {
      "type": "edit",
      "id": "1d6c28883680fb63",
      "item": {
        "type": "code",
        "id": "1d6c28883680fb63",
        "text": "// Source code licensed under Apache License 2.0. \n// Copyright © 2017 William Ngan. (https://github.com/williamngan/pts)\n\nwindow.demoDescription = \"Particles colliding with each other in space. Move the pointer to hit them like billiard balls.\";\n\nPts.quickStart( \"#pt\", \"#123\" );\n\n//// Demo code starts (anonymous function wrapper is optional) ---\n\n(function() {\n\n  var world;\n\n  space.add( {\n\n    start: (bound, space) => {\n\n      // Create world and 100 random points\n      world = new World( space.innerBound, 1, 0 );\n      let pts = Create.distributeRandom( space.innerBound, 100 );\n      \n      // Create particles and hit them with a random impulse\n      for (let i=0, len=pts.length; i<len; i++) {\n        let p = new Particle( pts[i] ).size( (i===0) ? 30 : 3+Math.random()*space.size.x/50 );\n        p.hit( Num.randomRange(-50,50), Num.randomRange(-25, 25) );\n        world.add( p );\n      }\n\n      world.particle( 0 ).lock = true; // lock it to move it by pointer later on\n\n    },\n\n\n    animate: (time, ftime) => {\n      world.drawParticles( (p, i) => {\n        let color = (i===0) ? \"#fff\" : [\"#ff2d5d\", \"#42dc8e\", \"#2e43eb\", \"#ffe359\"][i%4];\n        form.fillOnly( color ).point( p, p.radius, \"circle\" ) \n      });\n\n      world.update( ftime );\n    },\n\n\n    action:( type, px, py) => {\n      if (type == \"move\") {\n        world.particle( 0 ).position = new Pt(px, py);\n      }\n    },\n\n    resize: (bound, evt) => {\n      if (world) world.bound = space.innerBound;\n    }\n  });\n  \n  space.bindMouse().bindTouch();\n  space.play();\n\n})();"
      },
      "date": 1652647120866
    }
  ]
}