{
  "title": "2023-08-31",
  "story": [
    {
      "type": "paragraph",
      "id": "1b2378adcb99c95e",
      "text": "⇐ [[View Route Module]] ⇒ [[Wire]] Issue ⇒ Json Decoding Error"
    },
    {
      "type": "paragraph",
      "id": "264998451e5a872b",
      "text": "Focus:"
    },
    {
      "type": "paragraph",
      "id": "839b91af74945d0d",
      "text": "- Wiki.Data.journal Unknown must not contain kernel type `Value` from elm/json:Json.Encode"
    },
    {
      "type": "code",
      "id": "9c013c8889a10fd8",
      "text": "type Event\n    = Create CreateEvent\n    | Add AddEvent\n    | Edit EditEvent\n"
    },
    {
      "type": "paragraph",
      "id": "08bcffe5d389c58e",
      "text": "We removed \"    | Unknown Decode.Value\n\" from type Event. [https://github.com/dreyeck/blog/blob/d5ea36fa756d6b2a881a194982ac9d252a541cb5/elm-pages-starter-express/src/Wiki.elm#L172-L176 code]"
    },
    {
      "type": "code",
      "id": "cf6be46f209c3e53",
      "text": "eventDecoder : Decode.Decoder Event\neventDecoder =\n    Decode.oneOf\n        [ Decode.map Create createEventDecoder\n        , Decode.map Add addEventDecoder\n\n        -- , Decode.map Edit editEventDecoder\n        -- Add decoders for other journal event variants as needed\n        ]\n"
    },
    {
      "type": "paragraph",
      "id": "23c162ffcb07c53e",
      "text": "We removed \"        , Decode.map Unknown Decode.value\n\" from eventDecoder. [https://github.com/dreyeck/blog/blob/d5ea36fa756d6b2a881a194982ac9d252a541cb5/elm-pages-starter-express/src/Wiki.elm#L178-L187 code]"
    },
    {
      "type": "paragraph",
      "id": "3805c17de3a07227",
      "text": "We removed \"        \n        Unknown _ ->\n            Encode.null\n\" from journalEncoder. [https://github.com/dreyeck/blog/blob/d5ea36fa756d6b2a881a194982ac9d252a541cb5/elm-pages-starter-express/src/Wiki.elm#L219 code]"
    },
    {
      "type": "paragraph",
      "id": "882685649324fc74",
      "text": "This [https://github.com/dreyeck/blog/commit/d5ea36fa756d6b2a881a194982ac9d252a541cb5 commit] fixes the [[Wire]] issue and we get a Json Decoding Error, e.g. at json.journal[11], which is good."
    },
    {
      "type": "image",
      "id": "7682946f0c1b4e35",
      "text": "at json.journal[11]",
      "size": "wide",
      "width": 430,
      "height": 577,
      "url": "/assets/plugins/image/63ee41e53be604b05b634fb26abc5203.jpg"
    },
    {
      "type": "code",
      "id": "6da906ab1ecdcfe1",
      "text": "-- JSON DECODING ERROR --------------- \n\nThe Json.Decode.oneOf at json.journal[11] failed in the following 2 ways:\n\n\n\n(1) Problem with the given value:\n    \n    {\n            \"type\": \"fork\",\n            \"date\": 1682670773032\n        }\n    \n    Expecting an OBJECT with a field named `item`\n\n\n\n(2) Problem with the given value:\n    \n    {\n            \"type\": \"fork\",\n            \"date\": 1682670773032\n        }\n    \n    Expecting an OBJECT with a field named `item`"
    },
    {
      "type": "paragraph",
      "id": "b75ca31a68bed55d",
      "text": "While we get the above detailed error message on the localhost dev server, blog.dreyeck.ch, the experimental production server, shows us the following error message – and surprise: an additional button \"0\":"
    },
    {
      "type": "image",
      "id": "417aa683ee31c16d",
      "text": "Page not found. Maybe try another URL?",
      "size": "wide",
      "width": 430,
      "height": 144,
      "url": "/assets/plugins/image/d717d073cacbef351414b2293405301e.jpg"
    },
    {
      "type": "paragraph",
      "id": "a6ac320432784bf5",
      "text": "Next:"
    },
    {
      "type": "paragraph",
      "id": "2b53c98c96334be2",
      "text": "Previous master for Wiki.elm is vite-elm-dojo. [https://github.com/RalfBarkow/vite-elm-dojo github]"
    },
    {
      "type": "paragraph",
      "id": "e4c84d9c07a9bbcc",
      "text": "Move the tests from vite-elm-dojo to the blog project. [https://github.com/dreyeck/blog github]"
    },
    {
      "type": "paragraph",
      "id": "4a8cfeee84a18f4a",
      "text": "✗ handle Unknown <internals>"
    },
    {
      "type": "paragraph",
      "id": "2483b53f75047d9a",
      "text": "Add the missing journal event types:"
    },
    {
      "type": "markdown",
      "id": "fa69092fe5a45f5b",
      "text": "- [ ] move\n- [ ] fork\n- [ ] remove"
    },
    {
      "type": "pagefold",
      "id": "a8db4d79e1d3e5a6",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "59e0416015fd151d",
      "text": "⇒ [[Jeff Miller]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$16934246883887tDCJl:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n\"Typescript Transcripts\" page as a transcript index […]"
    },
    {
      "type": "reference",
      "id": "8b9157b74bb859de",
      "site": "jeff.dojo.fed.wiki",
      "slug": "typescript-transcripts",
      "title": "Typescript Transcripts",
      "text": "[[Robert Sterbal]] suggests that a reverse chronological list of the formatted transcripts would be useful for folks who would like to catch up. (2023-08-30)."
    },
    {
      "type": "reference",
      "id": "af42f0db23d0e2d9",
      "site": "jeff.dojo.fed.wiki",
      "slug": "typescript-2023-08-30",
      "title": "Typescript 2023-08-30",
      "text": "Text extraction. See [[Typescript Archive]]"
    },
    {
      "type": "reference",
      "id": "43d5f61c6422cbb0",
      "site": "jeff.dojo.fed.wiki",
      "slug": "typescript-index-2023-08-30",
      "title": "Typescript Index 2023-08-30",
      "text": "Keyword Index. See [[Typescript 2023-08-30]]"
    },
    {
      "type": "paragraph",
      "id": "407dff3a7ba8f494",
      "text": "⇒ [[Miraheze]] [https://miraheze.org/ site]"
    },
    {
      "type": "markdown",
      "id": "e24b6c452851f4ab",
      "text": "> Im Juli 2015 starteten [[John Lewis]] und [[Ferran Tufan]] eine neue Wiki-Farm unter dem Namen Miraheze. Mithilfe von Crowdfunding und privaten Investments konnte Miraheze im August 2015 offiziell live gehen. Über die Jahre ist das Projekt deutlich zu einem der größten und wiedererkennbarsten Wiki-Farmen mit Spezialisierung in MediaWiki gewachsen. Trotz des Erfolgs und dieser Evolution hat sich ein Aspekt von Miraheze niemals geändert &ndash; die formale Existenz. Im November 2019 wurde Miraheze zu einer im Vereinigten Königreich als Miraheze Limited registrierten Non-Profit-Organisation. "
    },
    {
      "type": "paragraph",
      "id": "ffbf1e7009afdfb1",
      "text": "⇒ [[Zen To Done]] [https://sterbalssundrystudies.miraheze.org/wiki/Category:ZTD page] ⇒ Changing a single [[Habit]]"
    },
    {
      "type": "paragraph",
      "id": "7b37f7a0dda5e09a",
      "text": "[[Focus]], [[Tetralemma]] ⇒ [[Ganz im Gegenteil]] (‘Wholeness’ in the Opposite) ⇒  Eine Übung zur [[Glaubenspolaritätenaufstellung]]: We would like to make it a wiki template with a (dialog) form. ⇒ [[Lateral Thinking]] ⇒ [[Existence]]"
    },
    {
      "type": "paragraph",
      "id": "375f88e1a1745a57",
      "text": "⇒ [[The Art of PostgreSQL]] [https://theartofpostgresql.com/blog/ page] ⇐ [[Typescript 2023-08-30]]"
    },
    {
      "type": "paragraph",
      "id": "8a910543734bf9cf",
      "text": "FONTAINE, Dimitri, 2020. The Art of PostgreSQL: Turn Thousands of Lines of Code Into Simple Queries. [https://public.nikhil.io/3C0FC878-6E4D-4E8B-94EA-4FE71EF5F600.pdf pdf]"
    },
    {
      "type": "markdown",
      "text": "10:21:52 From Jeff Miller\nI'm co-reading \"The Art of Postgres\" and clearly it's \"anything you can program, I can SQL better\".\n(probably at the 80% level, anyway)\n",
      "id": "59104990139758518272"
    },
    {
      "type": "markdown",
      "text": "10:26:57 From Jeff Miller\nYes, that looks like the one! I have a job seeking / skill learning partner, and we are reading through The Art of PostgreSQL together.\n",
      "id": "29797637607731564544"
    },
    {
      "type": "paragraph",
      "id": "995571279fe2877e",
      "text": "The [[Lamdera]] JS runtime uses the node pg package, but Postgres isn’t used in the TEA runtime, only in the Msg log store layer. [https://discourse.elm-lang.org/t/history-of-oak-lamdera/9199 page]"
    },
    {
      "type": "paragraph",
      "id": "4d115958427c9478",
      "text": "node-postgres: Non-blocking PostgreSQL client for Node.js. Pure JavaScript and optional native libpq bindings. [https://www.npmjs.com/package/pg npm]"
    },
    {
      "type": "paragraph",
      "id": "6ca2e65489fc8938",
      "text": "⇒ [[Lamdera Data Storage]] ⇒ [[Write-Ahead-Log]] ⇒ [[Journal]] as persited messages ⇒ fedwiki/wiki-client · lib/addToJournal.coffee [https://github.com/search?q=org%3Afedwiki%20addToJournal&type=code search], [https://github.com/fedwiki/wiki-client/blob/c892b0dd0c5efb593a4eed8833266b047571fbeb/lib/addToJournal.coffee#L2 code]"
    },
    {
      "type": "markdown",
      "id": "7d783bf30a1a0f50",
      "text": "> The `addToJournal` function is called when the origin server response that the network operation is complete. "
    },
    {
      "type": "code",
      "id": "dd3d3b59b590730a",
      "text": "module Journal exposing (addToJournal)\n\nimport Html exposing (Html, a, div, text)\nimport Html.Attributes exposing (class, data, href, target, title, style)\nimport String exposing (fromInt)\nimport Dict exposing (empty, insert)\nimport Maybe exposing (withDefault)\nimport List exposing (map)\nimport Json.Decode as Decode exposing (Decoder)\nimport Json.Encode as Encode exposing (Value)\n\ntype alias Action =\n    { type_ : String\n    , symbol : String\n    , id : String\n    , date : String\n    , attribution : Maybe Attribution\n    , removedTo : Maybe String\n    , site : Maybe String\n    }\n\ntype alias Attribution =\n    { site : Maybe String\n    }\n\ntype Model =\n    { journal : List Action\n    }\n\ntype Msg\n    = NoOp\n\naddToJournal : Model -> Action -> Html Msg\naddToJournal model action =\n    let\n        actionSymbol =\n            if action.type_ == \"add\" then\n                case action.attribution of\n                    Just attr ->\n                        case attr.site of\n                            Just site ->\n                                (actionSymbolForType site \"copyIn\")\n\n                            Nothing ->\n                                actionSymbol\n\n                    Nothing ->\n                        actionSymbol\n\n            else if action.type_ == \"remove\" then\n                case action.removedTo of\n                    Just _ ->\n                        actionSymbolForType \"copyOut\"\n\n                    Nothing ->\n                        actionSymbol\n\n            else\n                actionSymbol\n    in\n    div []\n        [ a [ class (\"action \" ++ action.type_ |> withDefault \"separator\")\n            , title (formatActionTitle action)\n            , data \"id\" action.id\n            , data \"date\" action.date\n            , data \"action\" (encodeAction action)\n            ]\n            [ text actionSymbol ]\n        ]\n\nactionSymbolForType : String -> String -> String\nactionSymbolForType site defaultSymbol =\n    case site of\n        \"add\" ->\n            defaultSymbol\n\n        \"remove\" ->\n            defaultSymbol\n\n        _ ->\n            site\n\nencodeAction : Action -> String\nencodeAction action =\n    Encode.encode 0 (actionEncoder action)\n\nactionEncoder : Action -> Encode.Value\nactionEncoder action =\n    Encode.object\n        [ ( \"type_\", Encode.string action.type_ )\n        , ( \"symbol\", Encode.string action.symbol )\n        , ( \"id\", Encode.string action.id )\n        , ( \"date\", Encode.string action.date )\n        , ( \"attribution\", encodeAttribution action.attribution )\n        , ( \"removedTo\", encodeRemovedTo action.removedTo )\n        , ( \"site\", encodeSite action.site )\n        ]\n\nencodeAttribution : Maybe Attribution -> Encode.Value\nencodeAttribution attribution =\n    case attribution of\n        Just attr ->\n            Encode.object [ ( \"site\", encodeSite attr.site ) ]\n\n        Nothing ->\n            Encode.null\n\nencodeRemovedTo : Maybe String -> Encode.Value\nencodeRemovedTo removedTo =\n    case removedTo of\n        Just to ->\n            Encode.string to\n\n        Nothing ->\n            Encode.null\n\nencodeSite : Maybe String -> Encode.Value\nencodeSite site =\n    case site of\n        Just s ->\n            Encode.string s\n\n        Nothing ->\n            Encode.null\n\nformatActionTitle : Action -> String\nformatActionTitle action =\n    -- Implement your logic for formatting the action title here.\n    -- You can use action fields like action.type_, action.id, etc.\n    \"\"\n\ninit : Model\ninit =\n    { journal = [] }\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        NoOp ->\n            model\n\nview : Model -> Html Msg\nview model =\n    -- Implement your view here.\n    div [] []\n\nmain : Program () Model Msg\nmain =\n    Html.program\n        { init = init\n        , update = update\n        , view = view\n        , subscriptions = \\_ -> Sub.none\n        }\n"
    },
    {
      "type": "paragraph",
      "id": "fe28f9bfde52be73",
      "text": "Please note that I've (ChatGPT August 3 Version) made some assumptions and simplifications in this [[Elm]] code to illustrate the structure. You should adapt it to fit your specific needs, especially the implementation of formatActionTitle and the view in the view function. Additionally, you may need to update the encoders and decoders to match your data structures."
    },
    {
      "type": "pagefold",
      "id": "c0a49fd749c61109",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "23b55c53e71c8d29",
      "text": "[https://mastodon.top/@thejoliesfleurs/110949401109596348 post]"
    },
    {
      "type": "image",
      "id": "3208e5394b90bbb6",
      "text": "[https://cdn.fosstodon.org/cache/media_attachments/files/110/949/410/547/058/153/small/6bd45b2508424754.png png]",
      "size": "wide",
      "width": 430,
      "height": 167,
      "url": "/assets/plugins/image/f721bbefa15aa4507f9b107f56d0543c.jpg"
    },
    {
      "type": "paragraph",
      "id": "dbf92811ef4363c2",
      "text": "⇒ [[Open Collective]] Introduction [https://docs.opencollective.com/help/about/introduction page] > Talks\n"
    },
    {
      "type": "video",
      "id": "c7a78c690a872d40",
      "text": "YOUTUBE kZleX383-VQ\nCollaborating with Money - [[Alanna Irving]] at New Frontiers Nov 2018"
    },
    {
      "type": "pagefold",
      "id": "93041ef4c29de732",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "c3add8fbc1d3a102",
      "text": "⇒ [[Seasonal Behaviour]]"
    },
    {
      "type": "paragraph",
      "id": "bbb128b7c6267a58",
      "text": "⇒ [[Computation vs Configuration]]"
    },
    {
      "type": "paragraph",
      "id": "f298c8fdfcaf096c",
      "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692799954540dKtHd:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWikipedia has a good description of what I take \"functional\" to mean. [https://en.wikipedia.org/wiki/Pure_function wikipedia]"
    },
    {
      "type": "paragraph",
      "id": "d10c9c4fae87576f",
      "text": "When I collaborate with Thompson, we read each others wiki often starting with [[Recent Changes]]. We would not be operating in a functional way in that our implicit goal is to change how each other thinks.\nIf Thompson shares a dataset, and I write a page extracting interesting information from that page, I would expect to be able to share that page and have him see the same result as I have. Otherwise we have not basis for conversation. \nThompson might observe a limitation in my analysis that I can easily correct. He should become aware of my revision but his lineup should not change in how it computes without him choosing to do so. I think we do this well enough now with twins and recall from history. We must be careful to not break these mechanism.\nI'm leaning toward a general rule something like all changes to a lineup come from the engaged user. All computation within a lineup (and certainly within a page) should be exactly determined by the pages and their lineup that the engaged user has chosen.\nThe Bikeshare plugin reads and computes with an external database. [http://plugins.dojo.fed.wiki/about-bikeshare-plugin.html page]"
    },
    {
      "type": "reference",
      "id": "afc8ab0428e79cba",
      "site": "plugins.dojo.fed.wiki",
      "slug": "about-bikeshare-plugin",
      "title": "About Bikeshare Plugin",
      "text": "This plugin will fetch status information from city bikeshare programs to be rendered as map markers. [https://github.com/WardCunningham/wiki-plugin-bikeshare github]"
    },
    {
      "type": "code",
      "id": "da922fa28bda2346",
      "text": "https://gbfs.citibikenyc.com/gbfs/en/station_information.json"
    },
    {
      "type": "paragraph",
      "id": "36a2f15cdd0af389",
      "text": "Right now for me it reports 4090 bike share stations in New York City. I would not expect this number to change on its own. If I checked tomorrow I might not be surprised to see 4091 stations, so long as I reloaded the page. This does raise the question, if Thompson and I were making cycling plans for NYC would we make the same choices? If I captured the bike share database as an asset and recommend Thompson use my data, not the current data from NYC, then we would know what we are talking about but we would be living in the past too. Hmm. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692800964632LHOrt:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
    },
    {
      "type": "paragraph",
      "id": "0130a9be00f16f79",
      "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692801677749THmpr:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n(This is crazy. I keep reloading the bikeshare page to see if the station count changes. It hasn't yet.)"
    },
    {
      "type": "markdown",
      "id": "86fe1a83b15a00f4",
      "text": "> I'm leaning toward a general rule something like all changes to a lineup come from the engaged user. All computation within a lineup (and certainly within a page) should be exactly determined by the pages and their lineup that the engaged user has chosen."
    },
    {
      "type": "paragraph",
      "id": "9431a80c81ed5296",
      "text": "This alone requires some attention to details that we have overlooked. I know I have seen page that get wrong result until they are reloaded where plugins run in a different order."
    },
    {
      "type": "paragraph",
      "id": "3a34fc6d30b2c273",
      "text": "paul90 via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692801791758CxAeI:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nUsing the above example, if the results are being generated by a script in a frame, even if the data is held in the page the script is not – and likely not versioned. So, the results generated is not just determined by the forked page/data."
    },
    {
      "type": "paragraph",
      "id": "c54ccba5595ae814",
      "text": "⇒ [[Lamdera Data Storage]] ⇒ [[Write-Ahead-Log]] ⇒ [[Journal]] as persited messages ⇒ fedwiki/wiki-client · lib/addToJournal.coffee [https://github.com/search?q=org%3Afedwiki%20addToJournal&type=code search], [https://github.com/fedwiki/wiki-client/blob/c892b0dd0c5efb593a4eed8833266b047571fbeb/lib/addToJournal.coffee#L2 code]"
    },
    {
      "type": "paragraph",
      "id": "0e586c394b209cde",
      "text": "[[SQLite and WAL]]"
    },
    {
      "type": "pagefold",
      "id": "d2ee6d0900ca25e3",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "5e015ab852a520f1",
      "text": "⇒ [[elm-test]]"
    },
    {
      "type": "paragraph",
      "id": "48b78a673ebd1bed",
      "text": "expectedPage"
    },
    {
      "type": "paragraph",
      "id": "ed5e3c155c40b1ad",
      "text": "Click to create this page."
    },
    {
      "type": "paragraph",
      "id": "f432fec9989d316a",
      "text": "create new blank page"
    },
    {
      "type": "paragraph",
      "id": "c541ff3d2c9fe62c",
      "text": "JSON for Create New Page Test: "
    },
    {
      "type": "code",
      "id": "ce2e8bb097266c4b",
      "text": "{\n  \"title\": \"Create New Page Test\",\n  \"story\": [],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693492328369\n    }\n  ]\n}"
    },
    {
      "type": "paragraph",
      "id": "d787690c8ccef785",
      "text": "This is the jsonString of the decoder test \"Create\"."
    },
    {
      "type": "paragraph",
      "id": "31fd81b22d33968b",
      "text": "I am trying to reconstruct what I was thinking when I created the test cases. ;-)"
    },
    {
      "type": "paragraph",
      "id": "4a40db19fa4cfd7b",
      "text": "expectedPage is"
    },
    {
      "type": "code",
      "id": "35b69d1f133fca89",
      "text": "type alias Page =\n    { title : String\n    , story : List Story\n    , journal : List Event\n    }"
    },
    {
      "type": "paragraph",
      "id": "77b60ffc1ae7fccc",
      "text": "and for the decoder test case \"create\" I have made the following:"
    },
    {
      "type": "code",
      "id": "3db4b679d5a9155c",
      "text": "Page\n  -- TITLE\n  \n  \"Create New Page Test\"\n  \n  -- STORY\n  \n  []\n  \n  -- JOURNAL\n  \n  [ Create\n  \n      { type_ = \"create\"\n  \n      , item = { title = \"Create New Page Test\", story = EmptyStory }\n  \n      , date = 1685700575889\n  \n      }\n  \n  ]"
    },
    {
      "type": "paragraph",
      "id": "58c58bc6ee9209f7",
      "text": "\"Add Factory\""
    },
    {
      "type": "paragraph",
      "id": "e0c98635a2b56a58",
      "text": "JSON for Create New Page Test:"
    },
    {
      "type": "code",
      "id": "34cf96b4abc209c5",
      "text": "{\n  \"title\": \"Create New Page Test\",\n  \"story\": [\n    {\n      \"type\": \"factory\",\n      \"id\": \"9cb6a63004c67583\"\n    }\n  ],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693492328369\n    },\n    {\n      \"item\": {\n        \"type\": \"factory\",\n        \"id\": \"9cb6a63004c67583\"\n      },\n      \"id\": \"9cb6a63004c67583\",\n      \"type\": \"add\",\n      \"date\": 1693494385411\n    }\n  ]\n}"
    },
    {
      "type": "paragraph",
      "id": "bbfcb83a27ee8c33",
      "text": "add paragpraph -> item type factory id/id–twin type add"
    },
    {
      "type": "paragraph",
      "id": "524060b743c3f54c",
      "text": "jsonString:"
    },
    {
      "type": "code",
      "id": "53d323bf56613257",
      "text": "{\n  \"title\": \"Create New Page Test\",\n  \"story\": [\n    {\n      \"type\": \"paragraph\",\n      \"id\": \"bb853a441261d42d\",\n      \"text\": \"double-clicked to edit and type this text.\"\n    }\n  ],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693495851475\n    },\n    {\n      \"item\": {\n        \"type\": \"factory\",\n        \"id\": \"bb853a441261d42d\"\n      },\n      \"id\": \"bb853a441261d42d\",\n      \"type\": \"add\",\n      \"date\": 1693495853813\n    },\n    {\n      \"type\": \"edit\",\n      \"id\": \"bb853a441261d42d\",\n      \"item\": {\n        \"type\": \"paragraph\",\n        \"id\": \"bb853a441261d42d\",\n        \"text\": \"double-clicked to edit and type this text.\"\n      },\n      \"date\": 1693495880350\n    }\n  ]\n}"
    },
    {
      "type": "paragraph",
      "id": "660e9e63e3cc56b7",
      "text": "Minimal \"remove\": item type remove id"
    },
    {
      "type": "code",
      "id": "3910bfd2082210f5",
      "text": "{\n  \"title\": \"Create New Page Test\",\n  \"story\": [],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693492328369\n    },\n    {\n      \"item\": {\n        \"type\": \"paragraph\",\n        \"id\": \"9cb6a63004c67583\",\n        \"text\": \"\"\n      },\n      \"id\": \"9cb6a63004c67583\",\n      \"type\": \"add\",\n      \"date\": 1693494385411\n    },\n    {\n      \"type\": \"remove\",\n      \"id\": \"9cb6a63004c67583\",\n      \"date\": 1693494658695\n    }\n  ]\n}"
    },
    {
      "type": "paragraph",
      "id": "f42ae38659c3cd89",
      "text": "type edit id\n      item\n        type paragraph id \n        \"text\": \"…\""
    },
    {
      "type": "paragraph",
      "id": "35a8e7012cdd4ca6",
      "text": "Edit and AddFactory are confused?!"
    },
    {
      "type": "image",
      "id": "a1feaab0de8bae8c",
      "text": "Bildschirmfoto 2023-08-31 um 19.29.27",
      "size": "wide",
      "width": 430,
      "height": 279,
      "url": "/assets/plugins/image/b7cd70686cbbbe552b1535e99366718b.jpg"
    },
    {
      "type": "reference",
      "id": "3c07086cb80eedeb",
      "site": "wiki.ralfbarkow.ch",
      "slug": "wikispec-story",
      "title": "WikiSpec Story",
      "text": "[…]  refactor: [[Story]] is now a type too (was: type alias) [https://github.com/RalfBarkow/vite-elm-dojo/commit/0dec352606a639acf0f1c5a99ea1d3c09d1316fa commit]"
    },
    {
      "type": "paragraph",
      "id": "b9a56ea38aa9211a",
      "text": "Json.Decode.oneOf [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#oneOf page] –  Try a bunch of different decoders. This can be useful if the JSON may come in a couple different formats."
    },
    {
      "type": "code",
      "id": "2853ca7d31669cf9",
      "text": "eventDecoder : Decode.Decoder Event\neventDecoder =\n    Decode.oneOf\n        [ Decode.map Create createEventDecoder\n        , Decode.map AddFactory addFactoryEventDecoder\n        , Decode.map Edit editEventDecoder\n\n        -- Add decoders for other journal event variants as needed\n        ]\n"
    },
    {
      "type": "paragraph",
      "id": "b46303b9b72e082a",
      "text": "The code above makes ✗ Add Factory (decoder) and ✗ Add Paragraph (decoder) tests fail."
    },
    {
      "type": "paragraph",
      "id": "049835917cc48d9f",
      "text": "In both cases, the issue might not necessarily be in your Elm code but could be related to the test data you're providing. Double-check that your test data accurately reflects the scenarios you're testing. If you believe the issue is within your Elm code, please provide more details about your test data and how you're running the tests so that I (ChatGPT August 3 Version) can provide further assistance."
    },
    {
      "type": "code",
      "id": "d74df99329456547",
      "text": "https://wiki.ralfbarkow.ch/create-new-page-test.json"
    },
    {
      "type": "paragraph",
      "id": "cad7c4523707f1c2",
      "text": "⇒ [[Create New Page Test]] after \"+\"/\"add paragraph\" has been clicked."
    },
    {
      "type": "paragraph",
      "id": "70adf620c60c313d",
      "text": "We fix storyDecoder by adding \", Decode.map Factory addFactoryItemDecoder\": [https://github.com/dreyeck/blog/commit/17361252d2b9948a64116e684192b51b30877b8a commit]\n"
    },
    {
      "type": "code",
      "id": "edb9b9ecb45d70b5",
      "text": "storyDecoder : Decode.Decoder Story\nstoryDecoder =\n    Decode.oneOf\n        [ Decode.map Future futureEventDecoder\n        , Decode.map Factory addFactoryItemDecoder\n        , Decode.map Paragraph paragraphItemDecoder\n        , Decode.map (\\_ -> EmptyStory) (Decode.succeed EmptyStory)\n        ]\n"
    },
    {
      "type": "paragraph",
      "id": "639cc5b9510c47a1",
      "text": "⇒ [[Conventional Commits]]"
    },
    {
      "type": "paragraph",
      "id": "f429be7c4ddc5152",
      "text": " fix(storyDecoder, eventDecoder): Add Paragraph (decoder) test (GREEN phase) [https://github.com/dreyeck/blog/commit/f284354a30615f43417e15aa871fe7ff20dbbff7 commit]"
    },
    {
      "type": "pagefold",
      "id": "71a5054fdf5bbd2c",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "045f0f4638aa4f8a",
      "text": "Juicing JSON, andThen some [https://medium.com/wat-the-elm-ist/juicing-json-andthen-some-684d69d900e2 page]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-08-31",
        "story": []
      },
      "date": 1693459733557
    },
    {
      "id": "1b2378adcb99c95e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "1b2378adcb99c95e",
        "text": "⇒ [[View Route Module]] ⇒ [[BackendTask.allowFatal]] ⇒ [[FatalError]]"
      },
      "attribution": {
        "page": "2023-08-30"
      },
      "date": 1693459740428
    },
    {
      "type": "edit",
      "id": "1b2378adcb99c95e",
      "item": {
        "type": "paragraph",
        "id": "1b2378adcb99c95e",
        "text": "⇒ [[View Route Module]]"
      },
      "date": 1693459747381
    },
    {
      "type": "edit",
      "id": "1b2378adcb99c95e",
      "item": {
        "type": "paragraph",
        "id": "1b2378adcb99c95e",
        "text": "⇒ [[View Route Module]]: Json Decoding Error"
      },
      "date": 1693459756330
    },
    {
      "type": "edit",
      "id": "1b2378adcb99c95e",
      "item": {
        "type": "paragraph",
        "id": "1b2378adcb99c95e",
        "text": "⇒ [[View Route Module]] ⇒ [[Wire]] Issue: Json Decoding Error"
      },
      "date": 1693459786595
    },
    {
      "item": {
        "type": "factory",
        "id": "9c013c8889a10fd8"
      },
      "id": "9c013c8889a10fd8",
      "type": "add",
      "after": "1b2378adcb99c95e",
      "date": 1693459897526
    },
    {
      "type": "edit",
      "id": "9c013c8889a10fd8",
      "item": {
        "type": "code",
        "id": "9c013c8889a10fd8",
        "text": "type Event\n    = Create CreateEvent\n    | Add AddEvent\n    | Edit EditEvent\n"
      },
      "date": 1693459899279
    },
    {
      "item": {
        "type": "factory",
        "id": "cf6be46f209c3e53"
      },
      "id": "cf6be46f209c3e53",
      "type": "add",
      "after": "9c013c8889a10fd8",
      "date": 1693459911890
    },
    {
      "type": "edit",
      "id": "cf6be46f209c3e53",
      "item": {
        "type": "code",
        "id": "cf6be46f209c3e53",
        "text": "eventDecoder : Decode.Decoder Event\neventDecoder =\n    Decode.oneOf\n        [ Decode.map Create createEventDecoder\n        , Decode.map Add addEventDecoder\n\n        -- , Decode.map Edit editEventDecoder\n        -- Add decoders for other journal event variants as needed\n        ]\n"
      },
      "date": 1693459913859
    },
    {
      "item": {
        "type": "factory",
        "id": "3805c17de3a07227"
      },
      "id": "3805c17de3a07227",
      "type": "add",
      "after": "cf6be46f209c3e53",
      "date": 1693459951207
    },
    {
      "type": "edit",
      "id": "3805c17de3a07227",
      "item": {
        "type": "paragraph",
        "id": "3805c17de3a07227",
        "text": "journalEncoder […]"
      },
      "date": 1693459954864
    },
    {
      "item": {
        "type": "factory",
        "id": "6da906ab1ecdcfe1"
      },
      "id": "6da906ab1ecdcfe1",
      "type": "add",
      "after": "3805c17de3a07227",
      "date": 1693459987689
    },
    {
      "type": "edit",
      "id": "6da906ab1ecdcfe1",
      "item": {
        "type": "code",
        "id": "6da906ab1ecdcfe1",
        "text": "-- JSON DECODING ERROR --------------- \n\nThe Json.Decode.oneOf at json.journal[11] failed in the following 2 ways:\n\n\n\n(1) Problem with the given value:\n    \n    {\n            \"type\": \"fork\",\n            \"date\": 1682670773032\n        }\n    \n    Expecting an OBJECT with a field named `item`\n\n\n\n(2) Problem with the given value:\n    \n    {\n            \"type\": \"fork\",\n            \"date\": 1682670773032\n        }\n    \n    Expecting an OBJECT with a field named `item`"
      },
      "date": 1693459989432
    },
    {
      "item": {
        "type": "factory",
        "id": "7682946f0c1b4e35"
      },
      "id": "7682946f0c1b4e35",
      "type": "add",
      "after": "6da906ab1ecdcfe1",
      "date": 1693460201737
    },
    {
      "type": "edit",
      "id": "7682946f0c1b4e35",
      "item": {
        "type": "image",
        "id": "7682946f0c1b4e35",
        "text": "Uploaded image",
        "size": "wide",
        "width": 430,
        "height": 577,
        "url": "/assets/plugins/image/63ee41e53be604b05b634fb26abc5203.jpg"
      },
      "date": 1693460240270
    },
    {
      "type": "edit",
      "id": "7682946f0c1b4e35",
      "item": {
        "type": "image",
        "id": "7682946f0c1b4e35",
        "text": "at json.journal[11]",
        "size": "wide",
        "width": 430,
        "height": 577,
        "url": "/assets/plugins/image/63ee41e53be604b05b634fb26abc5203.jpg"
      },
      "date": 1693460321925
    },
    {
      "id": "7682946f0c1b4e35",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "9c013c8889a10fd8",
        "cf6be46f209c3e53",
        "3805c17de3a07227",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1"
      ],
      "date": 1693460336994
    },
    {
      "id": "839b91af74945d0d",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "839b91af74945d0d",
        "text": "-- WIRE ISSUES ---------------  ⇒ [[View Route Module]]\n\nI found one or more Route Modules with Data types that contain functions.\n\n- Wiki.Data.journal Unknown must not contain kernel type `Value` from elm/json:Json.Encode\n\nSee <https://dashboard.lamdera.app/docs/wire> [https://dashboard.lamdera.app/docs/wire page] for more info. ⇒ [[Wire]]\n"
      },
      "after": "1b2378adcb99c95e",
      "attribution": {
        "page": "2023-08-30"
      },
      "date": 1693460391060
    },
    {
      "type": "edit",
      "id": "839b91af74945d0d",
      "item": {
        "type": "paragraph",
        "id": "839b91af74945d0d",
        "text": "- Wiki.Data.journal Unknown must not contain kernel type `Value` from elm/json:Json.Encode"
      },
      "date": 1693460400983
    },
    {
      "item": {
        "type": "factory",
        "id": "08bcffe5d389c58e"
      },
      "id": "08bcffe5d389c58e",
      "type": "add",
      "after": "6da906ab1ecdcfe1",
      "date": 1693460496165
    },
    {
      "id": "08bcffe5d389c58e",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "3805c17de3a07227",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1"
      ],
      "date": 1693460503148
    },
    {
      "type": "edit",
      "id": "08bcffe5d389c58e",
      "item": {
        "type": "paragraph",
        "id": "08bcffe5d389c58e",
        "text": "We remove \"    | Unknown Decode.Value\n\" from type Event."
      },
      "date": 1693460520853
    },
    {
      "type": "edit",
      "id": "08bcffe5d389c58e",
      "item": {
        "type": "paragraph",
        "id": "08bcffe5d389c58e",
        "text": "We removed \"    | Unknown Decode.Value\n\" from type Event."
      },
      "date": 1693460535361
    },
    {
      "type": "add",
      "id": "23c162ffcb07c53e",
      "item": {
        "type": "paragraph",
        "id": "23c162ffcb07c53e",
        "text": "eventDecoder"
      },
      "after": "08bcffe5d389c58e",
      "date": 1693460632950
    },
    {
      "id": "23c162ffcb07c53e",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1"
      ],
      "date": 1693460635689
    },
    {
      "type": "edit",
      "id": "23c162ffcb07c53e",
      "item": {
        "type": "paragraph",
        "id": "23c162ffcb07c53e",
        "text": "We removed \"        , Decode.map Unknown Decode.value\n\" from eventDecoder."
      },
      "date": 1693460657251
    },
    {
      "type": "edit",
      "id": "3805c17de3a07227",
      "item": {
        "type": "paragraph",
        "id": "3805c17de3a07227",
        "text": "We removed \"        -- Add encoders for other journal event variants as needed\n        Unknown _ ->\n            Encode.null\n\" from journalEncoder."
      },
      "date": 1693460746240
    },
    {
      "type": "edit",
      "id": "3805c17de3a07227",
      "item": {
        "type": "paragraph",
        "id": "3805c17de3a07227",
        "text": "We removed \"        \n        Unknown _ ->\n            Encode.null\n\" from journalEncoder."
      },
      "date": 1693460752657
    },
    {
      "type": "add",
      "id": "882685649324fc74",
      "item": {
        "type": "paragraph",
        "id": "882685649324fc74",
        "text": "This fixed the "
      },
      "after": "3805c17de3a07227",
      "date": 1693460828729
    },
    {
      "type": "edit",
      "id": "882685649324fc74",
      "item": {
        "type": "paragraph",
        "id": "882685649324fc74",
        "text": "This fixes the Wire issue and we get a Json Decoding Error, e.g. at json.journal[11], which is good."
      },
      "date": 1693460915675
    },
    {
      "type": "edit",
      "id": "882685649324fc74",
      "item": {
        "type": "paragraph",
        "id": "882685649324fc74",
        "text": "This fixes the Wire issue and we get a Json Decoding Error, e.g. at json.journal[11], which is good."
      },
      "date": 1693460931953
    },
    {
      "type": "edit",
      "id": "882685649324fc74",
      "item": {
        "type": "paragraph",
        "id": "882685649324fc74",
        "text": "This fixes the Wire issue and we get a Json Decoding Error, e.g. at json.journal[11], which is good."
      },
      "date": 1693460967244
    },
    {
      "type": "edit",
      "id": "882685649324fc74",
      "item": {
        "type": "paragraph",
        "id": "882685649324fc74",
        "text": "This fixes the Wire issue and we get a Json Decoding Error, e.g. at json.journal[11], which is good."
      },
      "date": 1693460986161
    },
    {
      "type": "edit",
      "id": "882685649324fc74",
      "item": {
        "type": "paragraph",
        "id": "882685649324fc74",
        "text": "This fixes the Wire issue and we get a Json Decoding Error, e.g. at json.journal[11], which is good."
      },
      "date": 1693460993817
    },
    {
      "type": "edit",
      "id": "882685649324fc74",
      "item": {
        "type": "paragraph",
        "id": "882685649324fc74",
        "text": "This fixes the Wire issue and we get a Json Decoding Error, e.g. at json.journal[11], which is good."
      },
      "date": 1693461017971
    },
    {
      "type": "edit",
      "id": "882685649324fc74",
      "item": {
        "type": "paragraph",
        "id": "882685649324fc74",
        "text": "This fixes the Wire issue and we get a Json Decoding Error, e.g. at json.journal[11], which is good."
      },
      "date": 1693461041011
    },
    {
      "type": "fork",
      "date": 1693461143065
    },
    {
      "type": "edit",
      "id": "1b2378adcb99c95e",
      "item": {
        "type": "paragraph",
        "id": "1b2378adcb99c95e",
        "text": "⇒ [[View Route Module]] ⇒ [[Wire]] Issue ⇒ Json Decoding Error"
      },
      "date": 1693461173007
    },
    {
      "type": "add",
      "id": "264998451e5a872b",
      "item": {
        "type": "paragraph",
        "id": "264998451e5a872b",
        "text": "Focus:"
      },
      "after": "1b2378adcb99c95e",
      "date": 1693461211421
    },
    {
      "type": "fork",
      "date": 1693461246728
    },
    {
      "item": {
        "type": "factory",
        "id": "417aa683ee31c16d"
      },
      "id": "417aa683ee31c16d",
      "type": "add",
      "after": "6da906ab1ecdcfe1",
      "date": 1693461941460
    },
    {
      "type": "edit",
      "id": "417aa683ee31c16d",
      "item": {
        "type": "image",
        "id": "417aa683ee31c16d",
        "text": "Page not found. Maybe try another URL?",
        "size": "wide",
        "width": 430,
        "height": 144,
        "url": "/assets/plugins/image/d717d073cacbef351414b2293405301e.jpg"
      },
      "date": 1693461979109
    },
    {
      "item": {
        "type": "factory",
        "id": "b75ca31a68bed55d"
      },
      "id": "b75ca31a68bed55d",
      "type": "add",
      "after": "417aa683ee31c16d",
      "date": 1693462092339
    },
    {
      "type": "edit",
      "id": "b75ca31a68bed55d",
      "item": {
        "type": "paragraph",
        "id": "b75ca31a68bed55d",
        "text": "While we get the above detailed error message with the dev server, blog.dreyeck.ch, the production server, shows us the following error message - and surprise: an additional button."
      },
      "date": 1693462094648
    },
    {
      "id": "b75ca31a68bed55d",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d"
      ],
      "date": 1693462095937
    },
    {
      "type": "edit",
      "id": "b75ca31a68bed55d",
      "item": {
        "type": "paragraph",
        "id": "b75ca31a68bed55d",
        "text": "While we get the above detailed error message with the dev server, blog.dreyeck.ch, the experimental production server, shows us the following error message - and surprise: an additional button."
      },
      "date": 1693462113266
    },
    {
      "type": "edit",
      "id": "b75ca31a68bed55d",
      "item": {
        "type": "paragraph",
        "id": "b75ca31a68bed55d",
        "text": "While we get the above detailed error message with on the localhost dev server, blog.dreyeck.ch, the experimental production server, shows us the following error message - and surprise: an additional button."
      },
      "date": 1693462137880
    },
    {
      "type": "edit",
      "id": "b75ca31a68bed55d",
      "item": {
        "type": "paragraph",
        "id": "b75ca31a68bed55d",
        "text": "While we get the above detailed error message with on the localhost dev server, blog.dreyeck.ch, the experimental production server, shows us the following error message – and surprise: an additional button."
      },
      "date": 1693462152028
    },
    {
      "type": "edit",
      "id": "b75ca31a68bed55d",
      "item": {
        "type": "paragraph",
        "id": "b75ca31a68bed55d",
        "text": "While we get the above detailed error message with on the localhost dev server, blog.dreyeck.ch, the experimental production server, shows us the following error message – and surprise: an additional button \"0\"."
      },
      "date": 1693462162790
    },
    {
      "type": "edit",
      "id": "b75ca31a68bed55d",
      "item": {
        "type": "paragraph",
        "id": "b75ca31a68bed55d",
        "text": "While we get the above detailed error message with on the localhost dev server, blog.dreyeck.ch, the experimental production server, shows us the following error message – and surprise: an additional button \"0\":"
      },
      "date": 1693462170429
    },
    {
      "type": "edit",
      "id": "b75ca31a68bed55d",
      "item": {
        "type": "paragraph",
        "id": "b75ca31a68bed55d",
        "text": "While we get the above detailed error message  on the localhost dev server, blog.dreyeck.ch, the experimental production server, shows us the following error message – and surprise: an additional button \"0\":"
      },
      "date": 1693462181147
    },
    {
      "type": "edit",
      "id": "b75ca31a68bed55d",
      "item": {
        "type": "paragraph",
        "id": "b75ca31a68bed55d",
        "text": "While we get the above detailed error message on the localhost dev server, blog.dreyeck.ch, the experimental production server, shows us the following error message – and surprise: an additional button \"0\":"
      },
      "date": 1693462184488
    },
    {
      "type": "edit",
      "id": "882685649324fc74",
      "item": {
        "type": "paragraph",
        "id": "882685649324fc74",
        "text": "This [https://github.com/dreyeck/blog/commit/d5ea36fa756d6b2a881a194982ac9d252a541cb5 commit] fixes the Wire issue and we get a Json Decoding Error, e.g. at json.journal[11], which is good."
      },
      "date": 1693462312036
    },
    {
      "type": "edit",
      "id": "08bcffe5d389c58e",
      "item": {
        "type": "paragraph",
        "id": "08bcffe5d389c58e",
        "text": "We removed \"    | Unknown Decode.Value\n\" from type Event. [https://github.com/dreyeck/blog/blob/d5ea36fa756d6b2a881a194982ac9d252a541cb5/elm-pages-starter-express/src/Wiki.elm#L172-L176 code]"
      },
      "date": 1693462676587
    },
    {
      "type": "edit",
      "id": "23c162ffcb07c53e",
      "item": {
        "type": "paragraph",
        "id": "23c162ffcb07c53e",
        "text": "We removed \"        , Decode.map Unknown Decode.value\n\" from eventDecoder. [https://github.com/dreyeck/blog/blob/d5ea36fa756d6b2a881a194982ac9d252a541cb5/elm-pages-starter-express/src/Wiki.elm#L178-L187 code]"
      },
      "date": 1693462777787
    },
    {
      "type": "edit",
      "id": "3805c17de3a07227",
      "item": {
        "type": "paragraph",
        "id": "3805c17de3a07227",
        "text": "We removed \"        \n        Unknown _ ->\n            Encode.null\n\" from journalEncoder. [https://github.com/dreyeck/blog/blob/d5ea36fa756d6b2a881a194982ac9d252a541cb5/elm-pages-starter-express/src/Wiki.elm#L219 code]"
      },
      "date": 1693462835466
    },
    {
      "item": {
        "type": "paragraph",
        "id": "a6ac320432784bf5",
        "text": "Next:"
      },
      "id": "a6ac320432784bf5",
      "type": "add",
      "after": "417aa683ee31c16d",
      "date": 1693462989817
    },
    {
      "type": "edit",
      "id": "a6ac320432784bf5",
      "item": {
        "type": "paragraph",
        "id": "a6ac320432784bf5",
        "text": "Next:"
      },
      "date": 1693462993008
    },
    {
      "type": "add",
      "id": "2b53c98c96334be2",
      "item": {
        "type": "paragraph",
        "id": "2b53c98c96334be2",
        "text": "Previous master for Wiki.elm is vite-elm-dojo. [https://github.com/RalfBarkow/vite-elm-dojo github]"
      },
      "after": "a6ac320432784bf5",
      "date": 1693463006841
    },
    {
      "type": "add",
      "id": "e4c84d9c07a9bbcc",
      "item": {
        "type": "paragraph",
        "id": "e4c84d9c07a9bbcc",
        "text": "Move the tests from vite-elm-dojo to the blog project. [https://github.com/dreyeck/blog github]"
      },
      "after": "2b53c98c96334be2",
      "date": 1693463037525
    },
    {
      "type": "edit",
      "id": "e4c84d9c07a9bbcc",
      "item": {
        "type": "paragraph",
        "id": "e4c84d9c07a9bbcc",
        "text": "Move the tests from vite-elm-dojo to the blog project. [https://github.com/dreyeck/blog github]"
      },
      "date": 1693463044037
    },
    {
      "id": "4a8cfeee84a18f4a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4a8cfeee84a18f4a",
        "text": "✗ handle Unknown <internals>"
      },
      "after": "e4c84d9c07a9bbcc",
      "attribution": {
        "page": "2023-08-30"
      },
      "date": 1693463088315
    },
    {
      "type": "edit",
      "id": "4a8cfeee84a18f4a",
      "item": {
        "type": "paragraph",
        "id": "4a8cfeee84a18f4a",
        "text": "✗ handle Unknown <internals>"
      },
      "date": 1693463112925
    },
    {
      "type": "add",
      "id": "2483b53f75047d9a",
      "item": {
        "type": "paragraph",
        "id": "2483b53f75047d9a",
        "text": "Add the missing journal event types:"
      },
      "after": "4a8cfeee84a18f4a",
      "date": 1693463125218
    },
    {
      "id": "fa69092fe5a45f5b",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "fa69092fe5a45f5b",
        "text": "- [ ] move\n- [ ] fork\n- [ ] remove"
      },
      "after": "2483b53f75047d9a",
      "attribution": {
        "page": "2023-08-30"
      },
      "date": 1693463130615
    },
    {
      "type": "edit",
      "id": "fa69092fe5a45f5b",
      "item": {
        "type": "markdown",
        "id": "fa69092fe5a45f5b",
        "text": "- [ ] move\n- [ ] fork\n- [ ] remove"
      },
      "date": 1693463135469
    },
    {
      "type": "edit",
      "id": "a6ac320432784bf5",
      "item": {
        "type": "paragraph",
        "id": "a6ac320432784bf5",
        "text": "Next:"
      },
      "date": 1693463238022
    },
    {
      "type": "edit",
      "id": "a6ac320432784bf5",
      "item": {
        "type": "paragraph",
        "id": "a6ac320432784bf5",
        "text": "Next:"
      },
      "date": 1693463243467
    },
    {
      "type": "edit",
      "id": "a6ac320432784bf5",
      "item": {
        "type": "paragraph",
        "id": "a6ac320432784bf5",
        "text": "Next:"
      },
      "date": 1693463263623
    },
    {
      "type": "edit",
      "id": "2b53c98c96334be2",
      "item": {
        "type": "paragraph",
        "id": "2b53c98c96334be2",
        "text": "Previous master for Wiki.elm is vite-elm-dojo. [https://github.com/RalfBarkow/vite-elm-dojo github]"
      },
      "date": 1693463289234
    },
    {
      "type": "edit",
      "id": "e4c84d9c07a9bbcc",
      "item": {
        "type": "paragraph",
        "id": "e4c84d9c07a9bbcc",
        "text": "Move the tests from vite-elm-dojo to the blog project. [https://github.com/dreyeck/blog github]"
      },
      "date": 1693463322448
    },
    {
      "type": "fork",
      "date": 1693463346333
    },
    {
      "type": "edit",
      "id": "1b2378adcb99c95e",
      "item": {
        "type": "paragraph",
        "id": "1b2378adcb99c95e",
        "text": "⇐ [[View Route Module]] ⇒ [[Wire]] Issue ⇒ Json Decoding Error"
      },
      "date": 1693463769773
    },
    {
      "type": "edit",
      "id": "882685649324fc74",
      "item": {
        "type": "paragraph",
        "id": "882685649324fc74",
        "text": "This [https://github.com/dreyeck/blog/commit/d5ea36fa756d6b2a881a194982ac9d252a541cb5 commit] fixes the [[Wire]] issue and we get a Json Decoding Error, e.g. at json.journal[11], which is good."
      },
      "date": 1693464009094
    },
    {
      "item": {
        "type": "factory",
        "id": "a8db4d79e1d3e5a6"
      },
      "id": "a8db4d79e1d3e5a6",
      "type": "add",
      "after": "fa69092fe5a45f5b",
      "date": 1693464471984
    },
    {
      "type": "edit",
      "id": "a8db4d79e1d3e5a6",
      "item": {
        "type": "pagefold",
        "id": "a8db4d79e1d3e5a6",
        "text": "~"
      },
      "date": 1693464475810
    },
    {
      "item": {
        "type": "factory",
        "id": "59e0416015fd151d"
      },
      "id": "59e0416015fd151d",
      "type": "add",
      "after": "a8db4d79e1d3e5a6",
      "date": 1693464480882
    },
    {
      "type": "edit",
      "id": "59e0416015fd151d",
      "item": {
        "type": "paragraph",
        "id": "59e0416015fd151d",
        "text": "⇒ [[Jeff Miller]] via []\n\"Typescript Transcripts\" page as a transcript index (thanks Robert for the prompt!)"
      },
      "date": 1693464505028
    },
    {
      "type": "edit",
      "id": "59e0416015fd151d",
      "item": {
        "type": "paragraph",
        "id": "59e0416015fd151d",
        "text": "⇒ [[Jeff Miller]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$16934246883887tDCJl:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n\"Typescript Transcripts\" page as a transcript index (thanks Robert for the prompt!)"
      },
      "date": 1693464515257
    },
    {
      "item": {
        "type": "factory",
        "id": "8b9157b74bb859de"
      },
      "id": "8b9157b74bb859de",
      "type": "add",
      "after": "59e0416015fd151d",
      "date": 1693464520000
    },
    {
      "type": "edit",
      "id": "8b9157b74bb859de",
      "item": {
        "type": "reference",
        "id": "8b9157b74bb859de",
        "site": "jeff.dojo.fed.wiki",
        "slug": "typescript-transcripts",
        "title": "Typescript Transcripts",
        "text": "Robert Sterbal suggests that a reverse chronological list of the formatted transcripts would be useful for folks who would like to catch up. (2023-08-30)."
      },
      "date": 1693464528528
    },
    {
      "type": "edit",
      "id": "59e0416015fd151d",
      "item": {
        "type": "paragraph",
        "id": "59e0416015fd151d",
        "text": "⇒ [[Jeff Miller]] via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$16934246883887tDCJl:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n\"Typescript Transcripts\" page as a transcript index […]"
      },
      "date": 1693464839405
    },
    {
      "type": "edit",
      "id": "8b9157b74bb859de",
      "item": {
        "type": "reference",
        "id": "8b9157b74bb859de",
        "site": "jeff.dojo.fed.wiki",
        "slug": "typescript-transcripts",
        "title": "Typescript Transcripts",
        "text": "[[Robert Sterbal]] suggests that a reverse chronological list of the formatted transcripts would be useful for folks who would like to catch up. (2023-08-30)."
      },
      "date": 1693465066398
    },
    {
      "item": {
        "type": "factory",
        "id": "af42f0db23d0e2d9"
      },
      "id": "af42f0db23d0e2d9",
      "type": "add",
      "after": "8b9157b74bb859de",
      "date": 1693465095265
    },
    {
      "type": "edit",
      "id": "af42f0db23d0e2d9",
      "item": {
        "type": "reference",
        "id": "af42f0db23d0e2d9",
        "site": "jeff.dojo.fed.wiki",
        "slug": "typescript-2023-08-30",
        "title": "Typescript 2023-08-30",
        "text": "Text extraction. See [[Typescript Archive]]"
      },
      "date": 1693465101108
    },
    {
      "item": {
        "type": "factory",
        "id": "43d5f61c6422cbb0"
      },
      "id": "43d5f61c6422cbb0",
      "type": "add",
      "after": "af42f0db23d0e2d9",
      "date": 1693465109945
    },
    {
      "type": "edit",
      "id": "43d5f61c6422cbb0",
      "item": {
        "type": "reference",
        "id": "43d5f61c6422cbb0",
        "site": "jeff.dojo.fed.wiki",
        "slug": "typescript-index-2023-08-30",
        "title": "Typescript Index 2023-08-30",
        "text": "Keyword Index. See [[Typescript 2023-08-30]]"
      },
      "date": 1693465114818
    },
    {
      "item": {
        "type": "factory",
        "id": "407dff3a7ba8f494"
      },
      "id": "407dff3a7ba8f494",
      "type": "add",
      "after": "43d5f61c6422cbb0",
      "date": 1693465432412
    },
    {
      "type": "edit",
      "id": "407dff3a7ba8f494",
      "item": {
        "type": "paragraph",
        "id": "407dff3a7ba8f494",
        "text": "⇒ [[Miraheze]]"
      },
      "date": 1693465440841
    },
    {
      "type": "edit",
      "id": "407dff3a7ba8f494",
      "item": {
        "type": "paragraph",
        "id": "407dff3a7ba8f494",
        "text": "⇒ [[Miraheze]] [https://miraheze.org/ site]"
      },
      "date": 1693465449911
    },
    {
      "item": {
        "type": "factory",
        "id": "e24b6c452851f4ab"
      },
      "id": "e24b6c452851f4ab",
      "type": "add",
      "after": "407dff3a7ba8f494",
      "date": 1693465512144
    },
    {
      "type": "edit",
      "id": "e24b6c452851f4ab",
      "item": {
        "type": "paragraph",
        "id": "e24b6c452851f4ab",
        "text": "> Im Juli 2015 starteten John Lewis und Ferran Tufan eine neue Wiki-Farm unter dem Namen Miraheze. Mithilfe von Crowdfunding und privaten Investments konnte Miraheze im August 2015 offiziell live gehen. Über die Jahre ist das Projekt deutlich zu einem der größten und wiedererkennbarsten Wiki-Farmen mit Spezialisierung in MediaWiki gewachsen. Trotz des Erfolgs und dieser Evolution hat sich ein Aspekt von Miraheze niemals geändert &ndash; die formale Existenz. Im November 2019 wurde Miraheze zu einer im Vereinigten Königreich als Miraheze Limited registrierten Non-Profit-Organisation. "
      },
      "date": 1693465516205
    },
    {
      "type": "edit",
      "id": "e24b6c452851f4ab",
      "item": {
        "type": "markdown",
        "id": "e24b6c452851f4ab",
        "text": "> Im Juli 2015 starteten John Lewis und Ferran Tufan eine neue Wiki-Farm unter dem Namen Miraheze. Mithilfe von Crowdfunding und privaten Investments konnte Miraheze im August 2015 offiziell live gehen. Über die Jahre ist das Projekt deutlich zu einem der größten und wiedererkennbarsten Wiki-Farmen mit Spezialisierung in MediaWiki gewachsen. Trotz des Erfolgs und dieser Evolution hat sich ein Aspekt von Miraheze niemals geändert &ndash; die formale Existenz. Im November 2019 wurde Miraheze zu einer im Vereinigten Königreich als Miraheze Limited registrierten Non-Profit-Organisation. "
      },
      "date": 1693465518308
    },
    {
      "type": "edit",
      "id": "e24b6c452851f4ab",
      "item": {
        "type": "markdown",
        "id": "e24b6c452851f4ab",
        "text": "> Im Juli 2015 starteten [[John Lewis]] und [[Ferran Tufan]] eine neue Wiki-Farm unter dem Namen Miraheze. Mithilfe von Crowdfunding und privaten Investments konnte Miraheze im August 2015 offiziell live gehen. Über die Jahre ist das Projekt deutlich zu einem der größten und wiedererkennbarsten Wiki-Farmen mit Spezialisierung in MediaWiki gewachsen. Trotz des Erfolgs und dieser Evolution hat sich ein Aspekt von Miraheze niemals geändert &ndash; die formale Existenz. Im November 2019 wurde Miraheze zu einer im Vereinigten Königreich als Miraheze Limited registrierten Non-Profit-Organisation. "
      },
      "date": 1693465538310
    },
    {
      "item": {
        "type": "factory",
        "id": "ffbf1e7009afdfb1"
      },
      "id": "ffbf1e7009afdfb1",
      "type": "add",
      "after": "e24b6c452851f4ab",
      "date": 1693465615257
    },
    {
      "type": "edit",
      "id": "ffbf1e7009afdfb1",
      "item": {
        "type": "paragraph",
        "id": "ffbf1e7009afdfb1",
        "text": "⇒ [[Zen To Done]]"
      },
      "date": 1693465624363
    },
    {
      "type": "edit",
      "id": "ffbf1e7009afdfb1",
      "item": {
        "type": "paragraph",
        "id": "ffbf1e7009afdfb1",
        "text": "⇒ [[Zen To Done]] [https://sterbalssundrystudies.miraheze.org/wiki/Category:ZTD page]"
      },
      "date": 1693465633573
    },
    {
      "item": {
        "type": "factory",
        "id": "375f88e1a1745a57"
      },
      "id": "375f88e1a1745a57",
      "type": "add",
      "after": "ffbf1e7009afdfb1",
      "date": 1693465828808
    },
    {
      "type": "edit",
      "id": "375f88e1a1745a57",
      "item": {
        "type": "paragraph",
        "id": "375f88e1a1745a57",
        "text": "The Art of PostgreSQL"
      },
      "date": 1693465832209
    },
    {
      "type": "edit",
      "id": "375f88e1a1745a57",
      "item": {
        "type": "paragraph",
        "id": "375f88e1a1745a57",
        "text": "⇒ [[The Art of PostgreSQL]] "
      },
      "date": 1693465841994
    },
    {
      "type": "edit",
      "id": "375f88e1a1745a57",
      "item": {
        "type": "paragraph",
        "id": "375f88e1a1745a57",
        "text": "⇒ [[The Art of PostgreSQL]] [https://theartofpostgresql.com/blog/ page]"
      },
      "date": 1693465851830
    },
    {
      "type": "add",
      "id": "8a910543734bf9cf",
      "item": {
        "type": "paragraph",
        "id": "8a910543734bf9cf",
        "text": "\nFONTAINE, Dimitri, 2020. The Art of PostgreSQL: Turn Thousands of Lines of Code Into Simple Queries. . Lulu. com. \n"
      },
      "after": "375f88e1a1745a57",
      "date": 1693466984362
    },
    {
      "type": "edit",
      "id": "8a910543734bf9cf",
      "item": {
        "type": "paragraph",
        "id": "8a910543734bf9cf",
        "text": "FONTAINE, Dimitri, 2020. The Art of PostgreSQL: Turn Thousands of Lines of Code Into Simple Queries."
      },
      "date": 1693466996345
    },
    {
      "id": "59104990139758518272",
      "type": "add",
      "item": {
        "type": "markdown",
        "text": "10:21:52 From Jeff Miller\nI'm co-reading \"The Art of Postgres\" and clearly it's \"anything you can program, I can SQL better\".\n(probably at the 80% level, anyway)\n",
        "id": "59104990139758518272"
      },
      "after": "8a910543734bf9cf",
      "attribution": {
        "page": "Typescript 2023-08-30"
      },
      "date": 1693467020197
    },
    {
      "type": "edit",
      "id": "375f88e1a1745a57",
      "item": {
        "type": "paragraph",
        "id": "375f88e1a1745a57",
        "text": "⇒ [[The Art of PostgreSQL]] [https://theartofpostgresql.com/blog/ page] ⇐ [[Typescript 2023-08-30]]"
      },
      "date": 1693467043772
    },
    {
      "type": "edit",
      "id": "8a910543734bf9cf",
      "item": {
        "type": "paragraph",
        "id": "8a910543734bf9cf",
        "text": "FONTAINE, Dimitri, 2020. The Art of PostgreSQL: Turn Thousands of Lines of Code Into Simple Queries. [https://public.nikhil.io/3C0FC878-6E4D-4E8B-94EA-4FE71EF5F600.pdf pdf]"
      },
      "date": 1693467119625
    },
    {
      "id": "29797637607731564544",
      "type": "add",
      "item": {
        "type": "markdown",
        "text": "10:26:57 From Jeff Miller\nYes, that looks like the one! I have a job seeking / skill learning partner, and we are reading through The Art of PostgreSQL together.\n",
        "id": "29797637607731564544"
      },
      "after": "59104990139758518272",
      "attribution": {
        "page": "Typescript 2023-08-30"
      },
      "date": 1693467165013
    },
    {
      "id": "995571279fe2877e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "995571279fe2877e",
        "text": "The Lamdera JS runtime uses the node pg package 6, but Postgres isn’t used in the TEA runtime, only in the Msg log store layer."
      },
      "after": "29797637607731564544",
      "attribution": {
        "page": "Oak"
      },
      "date": 1693471490727
    },
    {
      "type": "edit",
      "id": "995571279fe2877e",
      "item": {
        "type": "paragraph",
        "id": "995571279fe2877e",
        "text": "The Lamdera JS runtime uses the node pg package 6, but Postgres isn’t used in the TEA runtime, only in the Msg log store layer. [https://discourse.elm-lang.org/t/history-of-oak-lamdera/9199 page]"
      },
      "date": 1693471500314
    },
    {
      "type": "add",
      "id": "4d115958427c9478",
      "item": {
        "type": "paragraph",
        "id": "4d115958427c9478",
        "text": "node-postgres"
      },
      "after": "995571279fe2877e",
      "date": 1693471517362
    },
    {
      "type": "edit",
      "id": "4d115958427c9478",
      "item": {
        "type": "paragraph",
        "id": "4d115958427c9478",
        "text": "node-postgres [https://www.npmjs.com/package/pg npm]"
      },
      "date": 1693471525895
    },
    {
      "type": "edit",
      "id": "4d115958427c9478",
      "item": {
        "type": "paragraph",
        "id": "4d115958427c9478",
        "text": "node-postgres: Non-blocking PostgreSQL client for Node.js. Pure JavaScript and optional native libpq bindings. [https://www.npmjs.com/package/pg npm]"
      },
      "date": 1693471540347
    },
    {
      "type": "edit",
      "id": "995571279fe2877e",
      "item": {
        "type": "paragraph",
        "id": "995571279fe2877e",
        "text": "The Lamdera JS runtime uses the node pg package , but Postgres isn’t used in the TEA runtime, only in the Msg log store layer. [https://discourse.elm-lang.org/t/history-of-oak-lamdera/9199 page]"
      },
      "date": 1693471566752
    },
    {
      "type": "edit",
      "id": "995571279fe2877e",
      "item": {
        "type": "paragraph",
        "id": "995571279fe2877e",
        "text": "The [[Lamdera]] JS runtime uses the node pg package , but Postgres isn’t used in the TEA runtime, only in the Msg log store layer. [https://discourse.elm-lang.org/t/history-of-oak-lamdera/9199 page]"
      },
      "date": 1693471879633
    },
    {
      "item": {
        "type": "factory",
        "id": "6ca2e65489fc8938"
      },
      "id": "6ca2e65489fc8938",
      "type": "add",
      "after": "4d115958427c9478",
      "date": 1693471964356
    },
    {
      "type": "edit",
      "id": "6ca2e65489fc8938",
      "item": {
        "type": "paragraph",
        "id": "6ca2e65489fc8938",
        "text": "[[Lamdera Data Storage]]"
      },
      "date": 1693471968094
    },
    {
      "type": "edit",
      "id": "6ca2e65489fc8938",
      "item": {
        "type": "paragraph",
        "id": "6ca2e65489fc8938",
        "text": "⇒ [[Lamdera Data Storage]] ⇒ [[Write-Ahead-Log]]"
      },
      "date": 1693472090625
    },
    {
      "type": "edit",
      "id": "995571279fe2877e",
      "item": {
        "type": "paragraph",
        "id": "995571279fe2877e",
        "text": "The [[Lamdera]] JS runtime uses the node pg package, but Postgres isn’t used in the TEA runtime, only in the Msg log store layer. [https://discourse.elm-lang.org/t/history-of-oak-lamdera/9199 page]"
      },
      "date": 1693472103361
    },
    {
      "item": {
        "type": "factory",
        "id": "a4e43220629150e6"
      },
      "id": "a4e43220629150e6",
      "type": "add",
      "after": "6ca2e65489fc8938",
      "date": 1693472764541
    },
    {
      "type": "edit",
      "id": "a4e43220629150e6",
      "item": {
        "type": "paragraph",
        "id": "a4e43220629150e6",
        "text": "Journal as persited messages"
      },
      "date": 1693472774184
    },
    {
      "type": "edit",
      "id": "a4e43220629150e6",
      "item": {
        "type": "paragraph",
        "id": "a4e43220629150e6",
        "text": "[[Journal]] as persited messages"
      },
      "date": 1693472793446
    },
    {
      "item": {
        "type": "factory",
        "id": "dd3d3b59b590730a"
      },
      "id": "dd3d3b59b590730a",
      "type": "add",
      "after": "a4e43220629150e6",
      "date": 1693473276497
    },
    {
      "type": "edit",
      "id": "dd3d3b59b590730a",
      "item": {
        "type": "code",
        "id": "dd3d3b59b590730a",
        "text": "module Journal exposing (addToJournal)\n\nimport Html exposing (Html, a, div, text)\nimport Html.Attributes exposing (class, data, href, target, title, style)\nimport String exposing (fromInt)\nimport Dict exposing (empty, insert)\nimport Maybe exposing (withDefault)\nimport List exposing (map)\nimport Json.Decode as Decode exposing (Decoder)\nimport Json.Encode as Encode exposing (Value)\n\ntype alias Action =\n    { type_ : String\n    , symbol : String\n    , id : String\n    , date : String\n    , attribution : Maybe Attribution\n    , removedTo : Maybe String\n    , site : Maybe String\n    }\n\ntype alias Attribution =\n    { site : Maybe String\n    }\n\ntype Model =\n    { journal : List Action\n    }\n\ntype Msg\n    = NoOp\n\naddToJournal : Model -> Action -> Html Msg\naddToJournal model action =\n    let\n        actionSymbol =\n            if action.type_ == \"add\" then\n                case action.attribution of\n                    Just attr ->\n                        case attr.site of\n                            Just site ->\n                                (actionSymbolForType site \"copyIn\")\n\n                            Nothing ->\n                                actionSymbol\n\n                    Nothing ->\n                        actionSymbol\n\n            else if action.type_ == \"remove\" then\n                case action.removedTo of\n                    Just _ ->\n                        actionSymbolForType \"copyOut\"\n\n                    Nothing ->\n                        actionSymbol\n\n            else\n                actionSymbol\n    in\n    div []\n        [ a [ class (\"action \" ++ action.type_ |> withDefault \"separator\")\n            , title (formatActionTitle action)\n            , data \"id\" action.id\n            , data \"date\" action.date\n            , data \"action\" (encodeAction action)\n            ]\n            [ text actionSymbol ]\n        ]\n\nactionSymbolForType : String -> String -> String\nactionSymbolForType site defaultSymbol =\n    case site of\n        \"add\" ->\n            defaultSymbol\n\n        \"remove\" ->\n            defaultSymbol\n\n        _ ->\n            site\n\nencodeAction : Action -> String\nencodeAction action =\n    Encode.encode 0 (actionEncoder action)\n\nactionEncoder : Action -> Encode.Value\nactionEncoder action =\n    Encode.object\n        [ ( \"type_\", Encode.string action.type_ )\n        , ( \"symbol\", Encode.string action.symbol )\n        , ( \"id\", Encode.string action.id )\n        , ( \"date\", Encode.string action.date )\n        , ( \"attribution\", encodeAttribution action.attribution )\n        , ( \"removedTo\", encodeRemovedTo action.removedTo )\n        , ( \"site\", encodeSite action.site )\n        ]\n\nencodeAttribution : Maybe Attribution -> Encode.Value\nencodeAttribution attribution =\n    case attribution of\n        Just attr ->\n            Encode.object [ ( \"site\", encodeSite attr.site ) ]\n\n        Nothing ->\n            Encode.null\n\nencodeRemovedTo : Maybe String -> Encode.Value\nencodeRemovedTo removedTo =\n    case removedTo of\n        Just to ->\n            Encode.string to\n\n        Nothing ->\n            Encode.null\n\nencodeSite : Maybe String -> Encode.Value\nencodeSite site =\n    case site of\n        Just s ->\n            Encode.string s\n\n        Nothing ->\n            Encode.null\n\nformatActionTitle : Action -> String\nformatActionTitle action =\n    -- Implement your logic for formatting the action title here.\n    -- You can use action fields like action.type_, action.id, etc.\n    \"\"\n\ninit : Model\ninit =\n    { journal = [] }\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        NoOp ->\n            model\n\nview : Model -> Html Msg\nview model =\n    -- Implement your view here.\n    div [] []\n\nmain : Program () Model Msg\nmain =\n    Html.program\n        { init = init\n        , update = update\n        , view = view\n        , subscriptions = \\_ -> Sub.none\n        }\n"
      },
      "date": 1693473278620
    },
    {
      "item": {
        "type": "factory",
        "id": "fe28f9bfde52be73"
      },
      "id": "fe28f9bfde52be73",
      "type": "add",
      "after": "dd3d3b59b590730a",
      "date": 1693473299965
    },
    {
      "type": "edit",
      "id": "fe28f9bfde52be73",
      "item": {
        "type": "paragraph",
        "id": "fe28f9bfde52be73",
        "text": "Please note that I've made some assumptions and simplifications in this Elm code to illustrate the structure. You should adapt it to fit your specific needs, especially the implementation of formatActionTitle and the view in the view function. Additionally, you may need to update the encoders and decoders to match your data structures."
      },
      "date": 1693473303463
    },
    {
      "type": "edit",
      "id": "fe28f9bfde52be73",
      "item": {
        "type": "paragraph",
        "id": "fe28f9bfde52be73",
        "text": "Please note that I've (ChatGPT August 3 Version) made some assumptions and simplifications in this Elm code to illustrate the structure. You should adapt it to fit your specific needs, especially the implementation of formatActionTitle and the view in the view function. Additionally, you may need to update the encoders and decoders to match your data structures."
      },
      "date": 1693473324960
    },
    {
      "type": "edit",
      "id": "fe28f9bfde52be73",
      "item": {
        "type": "paragraph",
        "id": "fe28f9bfde52be73",
        "text": "Please note that I've (ChatGPT August 3 Version) made some assumptions and simplifications in this [[Elm]] code to illustrate the structure. You should adapt it to fit your specific needs, especially the implementation of formatActionTitle and the view in the view function. Additionally, you may need to update the encoders and decoders to match your data structures."
      },
      "date": 1693473362457
    },
    {
      "id": "7d783bf30a1a0f50",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "7d783bf30a1a0f50",
        "text": "The `addToJournal` function is called when the origin server response that the network operation is complete. [https://github.com/search?q=org%3Afedwiki%20addToJournal&type=code search], [https://github.com/fedwiki/wiki-client/blob/c892b0dd0c5efb593a4eed8833266b047571fbeb/lib/addToJournal.coffee#L2 code]"
      },
      "after": "a4e43220629150e6",
      "attribution": {
        "page": "Journal"
      },
      "date": 1693473371165
    },
    {
      "type": "edit",
      "id": "7d783bf30a1a0f50",
      "item": {
        "type": "markdown",
        "id": "7d783bf30a1a0f50",
        "text": "> The `addToJournal` function is called when the origin server response that the network operation is complete. [https://github.com/search?q=org%3Afedwiki%20addToJournal&type=code search], [https://github.com/fedwiki/wiki-client/blob/c892b0dd0c5efb593a4eed8833266b047571fbeb/lib/addToJournal.coffee#L2 code]"
      },
      "date": 1693473375104
    },
    {
      "type": "remove",
      "id": "a4e43220629150e6",
      "date": 1693473394983
    },
    {
      "type": "edit",
      "id": "6ca2e65489fc8938",
      "item": {
        "type": "paragraph",
        "id": "6ca2e65489fc8938",
        "text": "⇒ [[Lamdera Data Storage]] ⇒ [[Write-Ahead-Log]] ⇒ [[Journal]] as persited messages"
      },
      "date": 1693473396037
    },
    {
      "type": "edit",
      "id": "6ca2e65489fc8938",
      "item": {
        "type": "paragraph",
        "id": "6ca2e65489fc8938",
        "text": "⇒ [[Lamdera Data Storage]] ⇒ [[Write-Ahead-Log]] ⇒ [[Journal]] as persited messages ⇒ fedwiki/wiki-client · lib/addToJournal.coffee"
      },
      "date": 1693473425875
    },
    {
      "type": "edit",
      "id": "7d783bf30a1a0f50",
      "item": {
        "type": "markdown",
        "id": "7d783bf30a1a0f50",
        "text": "> The `addToJournal` function is called when the origin server response that the network operation is complete. "
      },
      "date": 1693473444433
    },
    {
      "type": "edit",
      "id": "6ca2e65489fc8938",
      "item": {
        "type": "paragraph",
        "id": "6ca2e65489fc8938",
        "text": "⇒ [[Lamdera Data Storage]] ⇒ [[Write-Ahead-Log]] ⇒ [[Journal]] as persited messages ⇒ fedwiki/wiki-client · lib/addToJournal.coffee [https://github.com/search?q=org%3Afedwiki%20addToJournal&type=code search], [https://github.com/fedwiki/wiki-client/blob/c892b0dd0c5efb593a4eed8833266b047571fbeb/lib/addToJournal.coffee#L2 code]"
      },
      "date": 1693473446183
    },
    {
      "type": "add",
      "id": "7b37f7a0dda5e09a",
      "item": {
        "type": "paragraph",
        "id": "7b37f7a0dda5e09a",
        "text": "[[Focus]]"
      },
      "after": "ffbf1e7009afdfb1",
      "date": 1693473921245
    },
    {
      "type": "edit",
      "id": "7b37f7a0dda5e09a",
      "item": {
        "type": "paragraph",
        "id": "7b37f7a0dda5e09a",
        "text": "[[Focus]], [[Tetralemma]]"
      },
      "date": 1693473945782
    },
    {
      "type": "edit",
      "id": "7b37f7a0dda5e09a",
      "item": {
        "type": "paragraph",
        "id": "7b37f7a0dda5e09a",
        "text": "[[Focus]], [[Tetralemma]], [[Ganz im Gegentei]]"
      },
      "date": 1693474043612
    },
    {
      "type": "edit",
      "id": "7b37f7a0dda5e09a",
      "item": {
        "type": "paragraph",
        "id": "7b37f7a0dda5e09a",
        "text": "[[Focus]], [[Tetralemma]], [[Ganz im Gegenteil]]"
      },
      "date": 1693474047849
    },
    {
      "type": "edit",
      "id": "ffbf1e7009afdfb1",
      "item": {
        "type": "paragraph",
        "id": "ffbf1e7009afdfb1",
        "text": "⇒ [[Zen To Done]] [https://sterbalssundrystudies.miraheze.org/wiki/Category:ZTD page] ⇒ Changing a single [[Habit]]"
      },
      "date": 1693474075097
    },
    {
      "id": "4f349d360b4816a2",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4f349d360b4816a2",
        "text": "⇒ [[Ganz im Gegenteil]] ⇒  Eine Übung zur [[Glaubenspolaritätenaufstellung]]: We would like to make it a wiki template with a (dialog) form."
      },
      "after": "7b37f7a0dda5e09a",
      "attribution": {
        "page": "2023-08-19"
      },
      "date": 1693474131239
    },
    {
      "id": "a6ee9997b0c81266",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a6ee9997b0c81266",
        "text": "⇒ [[Lateral Thinking]] ⇒ [[Ganz im Gegenteil]] (‘Wholeness’ in the Opposite) ⇒ [[Existence]]"
      },
      "after": "4f349d360b4816a2",
      "attribution": {
        "page": "2023-08-20"
      },
      "date": 1693474157520
    },
    {
      "type": "remove",
      "id": "a6ee9997b0c81266",
      "date": 1693474160758
    },
    {
      "type": "edit",
      "id": "4f349d360b4816a2",
      "item": {
        "type": "paragraph",
        "id": "4f349d360b4816a2",
        "text": "⇒ [[Ganz im Gegenteil]] (‘Wholeness’ in the Opposite) ⇒  Eine Übung zur [[Glaubenspolaritätenaufstellung]]: We would like to make it a wiki template with a (dialog) form. ⇒ [[Lateral Thinking]] ⇒ [[Existence]]"
      },
      "date": 1693474188108
    },
    {
      "type": "remove",
      "id": "4f349d360b4816a2",
      "date": 1693474198637
    },
    {
      "type": "edit",
      "id": "7b37f7a0dda5e09a",
      "item": {
        "type": "paragraph",
        "id": "7b37f7a0dda5e09a",
        "text": "[[Focus]], [[Tetralemma]] ⇒ [[Ganz im Gegenteil]] (‘Wholeness’ in the Opposite) ⇒  Eine Übung zur [[Glaubenspolaritätenaufstellung]]: We would like to make it a wiki template with a (dialog) form. ⇒ [[Lateral Thinking]] ⇒ [[Existence]]"
      },
      "date": 1693474203422
    },
    {
      "item": {
        "type": "factory",
        "id": "c0a49fd749c61109"
      },
      "id": "c0a49fd749c61109",
      "type": "add",
      "after": "fe28f9bfde52be73",
      "date": 1693476041431
    },
    {
      "type": "edit",
      "id": "c0a49fd749c61109",
      "item": {
        "type": "pagefold",
        "id": "c0a49fd749c61109",
        "text": "~"
      },
      "date": 1693476045909
    },
    {
      "item": {
        "type": "factory",
        "id": "23b55c53e71c8d29"
      },
      "id": "23b55c53e71c8d29",
      "type": "add",
      "after": "c0a49fd749c61109",
      "date": 1693476047091
    },
    {
      "type": "edit",
      "id": "23b55c53e71c8d29",
      "item": {
        "type": "paragraph",
        "id": "23b55c53e71c8d29",
        "text": "[https://mastodon.top/@thejoliesfleurs/110949401109596348 post]"
      },
      "date": 1693476055736
    },
    {
      "item": {
        "type": "factory",
        "id": "3208e5394b90bbb6"
      },
      "id": "3208e5394b90bbb6",
      "type": "add",
      "after": "23b55c53e71c8d29",
      "date": 1693476057125
    },
    {
      "type": "edit",
      "id": "3208e5394b90bbb6",
      "item": {
        "type": "image",
        "id": "3208e5394b90bbb6",
        "text": "Uploaded image",
        "size": "wide",
        "width": 430,
        "height": 167,
        "url": "/assets/plugins/image/f721bbefa15aa4507f9b107f56d0543c.jpg"
      },
      "date": 1693476106944
    },
    {
      "type": "edit",
      "id": "3208e5394b90bbb6",
      "item": {
        "type": "image",
        "id": "3208e5394b90bbb6",
        "text": "[https://cdn.fosstodon.org/cache/media_attachments/files/110/949/410/547/058/153/small/6bd45b2508424754.png png]",
        "size": "wide",
        "width": 430,
        "height": 167,
        "url": "/assets/plugins/image/f721bbefa15aa4507f9b107f56d0543c.jpg"
      },
      "date": 1693476138070
    },
    {
      "item": {
        "type": "factory",
        "id": "c7a78c690a872d40"
      },
      "id": "c7a78c690a872d40",
      "type": "add",
      "after": "3208e5394b90bbb6",
      "date": 1693477768235
    },
    {
      "type": "edit",
      "id": "c7a78c690a872d40",
      "item": {
        "type": "video",
        "id": "c7a78c690a872d40",
        "text": "YOUTUBE kZleX383-VQ"
      },
      "date": 1693477784391
    },
    {
      "type": "edit",
      "id": "c7a78c690a872d40",
      "item": {
        "type": "video",
        "id": "c7a78c690a872d40",
        "text": "YOUTUBE kZleX383-VQ\nCollaborating with Money - Alanna Irving at New Frontiers Nov 2018"
      },
      "date": 1693477796119
    },
    {
      "type": "edit",
      "id": "c7a78c690a872d40",
      "item": {
        "type": "video",
        "id": "c7a78c690a872d40",
        "text": "YOUTUBE kZleX383-VQ\nCollaborating with Money - [[Alanna Irving]] at New Frontiers Nov 2018"
      },
      "date": 1693477806719
    },
    {
      "item": {
        "type": "factory",
        "id": "dbf92811ef4363c2"
      },
      "id": "dbf92811ef4363c2",
      "type": "add",
      "after": "c7a78c690a872d40",
      "date": 1693477817968
    },
    {
      "type": "edit",
      "id": "dbf92811ef4363c2",
      "item": {
        "type": "paragraph",
        "id": "dbf92811ef4363c2",
        "text": "[https://docs.opencollective.com/help/about/introduction page]"
      },
      "date": 1693477825104
    },
    {
      "id": "dbf92811ef4363c2",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40"
      ],
      "date": 1693477828464
    },
    {
      "type": "edit",
      "id": "dbf92811ef4363c2",
      "item": {
        "type": "paragraph",
        "id": "dbf92811ef4363c2",
        "text": "Introduction [https://docs.opencollective.com/help/about/introduction page]"
      },
      "date": 1693477840234
    },
    {
      "type": "edit",
      "id": "dbf92811ef4363c2",
      "item": {
        "type": "paragraph",
        "id": "dbf92811ef4363c2",
        "text": "⇒ [[Open Collective]] Introduction [https://docs.opencollective.com/help/about/introduction page] "
      },
      "date": 1693477883711
    },
    {
      "type": "edit",
      "id": "dbf92811ef4363c2",
      "item": {
        "type": "paragraph",
        "id": "dbf92811ef4363c2",
        "text": "⇒ [[Open Collective]] Introduction [https://docs.opencollective.com/help/about/introduction page] > Talks\n"
      },
      "date": 1693477909105
    },
    {
      "item": {
        "type": "factory",
        "id": "93041ef4c29de732"
      },
      "id": "93041ef4c29de732",
      "type": "add",
      "after": "c7a78c690a872d40",
      "date": 1693478352419
    },
    {
      "type": "edit",
      "id": "93041ef4c29de732",
      "item": {
        "type": "pagefold",
        "id": "93041ef4c29de732",
        "text": "~"
      },
      "date": 1693478354702
    },
    {
      "item": {
        "type": "factory",
        "id": "c3add8fbc1d3a102"
      },
      "id": "c3add8fbc1d3a102",
      "type": "add",
      "after": "93041ef4c29de732",
      "date": 1693478356987
    },
    {
      "type": "edit",
      "id": "c3add8fbc1d3a102",
      "item": {
        "type": "paragraph",
        "id": "c3add8fbc1d3a102",
        "text": "\nCAETANO-ANOLLÉS, Kelsey, HERNANDEZ, Nicolas, MUGHAL, Fizza, TOMASZEWSKI, Tre and CAETANO-ANOLLÉS, Gustavo, 2021. The seasonal behaviour of COVID-19 and its galectin-like culprit of the viral spik. Methods in Microbiology. Online. 1 November 2021. [Accessed 3 February 2022]. Available from: https://europepmc.org/articles/PMC8590929Seasonal behaviour is an attribute of many viral diseases. Like other ‘winter’ RNA viruses, infections caused by the causative agent of COVID-19, SARS-CoV-2, appear to exhibit significant seasonal changes. Here we discuss the seasonal behaviour of COVID-19, emerging viral phenotypes, viral evolution, and how the mutational landscape of the virus affects the seasonal attributes of the disease. We propose that the multiple seasonal drivers behind infectious disease spread (and the spread of COVID-19 specifically) are in ‘trade-off’ relationships and can be better described within a framework of a ‘triangle of viral persistence’ modulated by the environment, physiology, and behaviour. This ‘trade-off’ exists as one trait cannot increase without a decrease in another. We also propose that molecular components of the virus can act as sensors of environment and physiology, and could represent molecular culprits of seasonality. We searched for flexible protein structures capable of being modulated by the environment and identified a galectin-like fold within the N-terminal domain of the spike protein of SARS-CoV-2 as a potential candidate. Tracking the prevalence of mutations in this structure resulted in the identification of a hemisphere-dependent seasonal pattern driven by mutational bursts. We propose that the galectin-like structure is a frequent target of mutations because it helps the virus evade or modulate the physiological responses of the host to further its spread and survival. The flexible regions of the N-terminal domain should now become a focus for mitigation through vaccines and therapeutics and for prediction and informed public health decision making.\n"
      },
      "date": 1693478358372
    },
    {
      "type": "edit",
      "id": "c3add8fbc1d3a102",
      "item": {
        "type": "paragraph",
        "id": "c3add8fbc1d3a102",
        "text": "CAETANO-ANOLLÉS, Kelsey, HERNANDEZ, Nicolas, MUGHAL, Fizza, TOMASZEWSKI, Tre and CAETANO-ANOLLÉS, Gustavo, 2021. The seasonal behaviour of COVID-19 and its galectin-like culprit of the viral spik. Methods in Microbiology. Online. 1 November 2021. [Accessed 3 February 2022]. Available from: https://europepmc.org/articles/PMC8590929"
      },
      "date": 1693478372202
    },
    {
      "type": "add",
      "id": "213b3441c96187fd",
      "item": {
        "type": "paragraph",
        "id": "213b3441c96187fd",
        "text": "Seasonal behaviour is an attribute of many viral diseases. Like other ‘winter’ RNA viruses, infections caused by the causative agent of COVID-19, SARS-CoV-2, appear to exhibit significant seasonal changes. Here we discuss the seasonal behaviour of COVID-19, emerging viral phenotypes, viral evolution, and how the mutational landscape of the virus affects the seasonal attributes of the disease. We propose that the multiple seasonal drivers behind infectious disease spread (and the spread of COVID-19 specifically) are in ‘trade-off’ relationships and can be better described within a framework of a ‘triangle of viral persistence’ modulated by the environment, physiology, and behaviour. This ‘trade-off’ exists as one trait cannot increase without a decrease in another. We also propose that molecular components of the virus can act as sensors of environment and physiology, and could represent molecular culprits of seasonality. We searched for flexible protein structures capable of being modulated by the environment and identified a galectin-like fold within the N-terminal domain of the spike protein of SARS-CoV-2 as a potential candidate. Tracking the prevalence of mutations in this structure resulted in the identification of a hemisphere-dependent seasonal pattern driven by mutational bursts. We propose that the galectin-like structure is a frequent target of mutations because it helps the virus evade or modulate the physiological responses of the host to further its spread and survival. The flexible regions of the N-terminal domain should now become a focus for mitigation through vaccines and therapeutics and for prediction and informed public health decision making."
      },
      "after": "c3add8fbc1d3a102",
      "date": 1693478372608
    },
    {
      "type": "edit",
      "id": "c3add8fbc1d3a102",
      "item": {
        "type": "paragraph",
        "id": "c3add8fbc1d3a102",
        "text": "⇒ [[Seasonal Behaviour]]"
      },
      "date": 1693478398257
    },
    {
      "type": "add",
      "id": "2f45434d81b7d55e",
      "item": {
        "type": "paragraph",
        "id": "2f45434d81b7d55e",
        "text": "CAETANO-ANOLLÉS, Kelsey, HERNANDEZ, Nicolas, MUGHAL, Fizza, TOMASZEWSKI, Tre and CAETANO-ANOLLÉS, Gustavo, 2021. The seasonal behaviour of COVID-19 and its galectin-like culprit of the viral spik. Methods in Microbiology. Online. 1 November 2021. [Accessed 3 February 2022]. Available from: https://europepmc.org/articles/PMC8590929"
      },
      "after": "c3add8fbc1d3a102",
      "date": 1693478398666
    },
    {
      "id": "213b3441c96187fd",
      "type": "remove",
      "removedTo": {
        "page": "Seasonal Behaviour"
      },
      "date": 1693478407414
    },
    {
      "id": "2f45434d81b7d55e",
      "type": "remove",
      "removedTo": {
        "page": "Seasonal Behaviour"
      },
      "date": 1693478417615
    },
    {
      "item": {
        "type": "factory",
        "id": "130307b6a1200135"
      },
      "id": "130307b6a1200135",
      "type": "add",
      "after": "c3add8fbc1d3a102",
      "date": 1693478495429
    },
    {
      "type": "edit",
      "id": "130307b6a1200135",
      "item": {
        "type": "paragraph",
        "id": "130307b6a1200135",
        "text": "Ward via [matrix]\nWhat if we distinguish computation from configuration. The computation should be deterministic and responsive to the configuration under the engaged user's control. The computation may not be purely functional. For example the Datalog plugin collects data on a schedule that is configured on a page. The page also offers the logged in user a start/stop button. But when started the computation can (and does) continue for years. I post process Datalog data in my pingdom clone to report hourly and daily uptime statistics. This calculation should be deterministic depending only on the logged data. An IO Monoid comes in here somehow but this I don't understand.\nhttp://ward.asia.wiki.org/ping-wiki-servers.htm"
      },
      "date": 1693478505159
    },
    {
      "type": "edit",
      "id": "130307b6a1200135",
      "item": {
        "type": "paragraph",
        "id": "130307b6a1200135",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$169280466211muXkr:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWhat if we distinguish computation from configuration. The computation should be deterministic and responsive to the configuration under the engaged user's control. The computation may not be purely functional. For example the Datalog plugin collects data on a schedule that is configured on a page. The page also offers the logged in user a start/stop button. But when started the computation can (and does) continue for years. I post process Datalog data in my pingdom clone to report hourly and daily uptime statistics. This calculation should be deterministic depending only on the logged data. An IO Monoid comes in here somehow but this I don't understand.\nhttp://ward.asia.wiki.org/ping-wiki-servers.htm"
      },
      "date": 1693478516869
    },
    {
      "type": "add",
      "id": "bbb128b7c6267a58",
      "item": {
        "type": "paragraph",
        "id": "bbb128b7c6267a58",
        "text": "⇒ [[Computation vs Configuration]]"
      },
      "after": "c3add8fbc1d3a102",
      "date": 1693478544361
    },
    {
      "id": "130307b6a1200135",
      "type": "remove",
      "removedTo": {
        "page": "Computation vs Configuration"
      },
      "date": 1693478549220
    },
    {
      "item": {
        "type": "factory",
        "id": "f298c8fdfcaf096c"
      },
      "id": "f298c8fdfcaf096c",
      "type": "add",
      "after": "bbb128b7c6267a58",
      "date": 1693478839796
    },
    {
      "type": "edit",
      "id": "f298c8fdfcaf096c",
      "item": {
        "type": "paragraph",
        "id": "f298c8fdfcaf096c",
        "text": "Ward\nWikipedia has a good description of what I take \"functional\" to mean. https://en.wikipedia.org/wiki/Pure_function\nWhen I collaborate with Thompson, we read each others wiki often starting with Recent Changes. We would not be operating in a functional way in that our implicit goal is to change how each other thinks.\nIf Thompson shares a dataset, and I write a page extracting interesting information from that page, I would expect to be able to share that page and have him see the same result as I have. Otherwise we have not basis for conversation. \nThompson might observe a limitation in my analysis that I can easily correct. He should become aware of my revision but his lineup should not change in how it computes without him choosing to do so. I think we do this well enough now with twins and recall from history. We must be careful to not break these mechanism.\nI'm leaning toward a general rule something like all changes to a lineup come from the engaged user. All computation within a lineup (and certainly within a page) should be exactly determined by the pages and their lineup that the engaged user has chosen.\nThe Bikeshare plugin reads and computes with an external database. http://plugins.dojo.fed.wiki/about-bikeshare-plugin.html"
      },
      "date": 1693478841277
    },
    {
      "type": "edit",
      "id": "f298c8fdfcaf096c",
      "item": {
        "type": "paragraph",
        "id": "f298c8fdfcaf096c",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692799954540dKtHd:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWikipedia has a good description of what I take \"functional\" to mean. https://en.wikipedia.org/wiki/Pure_function\nWhen I collaborate with Thompson, we read each others wiki often starting with Recent Changes. We would not be operating in a functional way in that our implicit goal is to change how each other thinks.\nIf Thompson shares a dataset, and I write a page extracting interesting information from that page, I would expect to be able to share that page and have him see the same result as I have. Otherwise we have not basis for conversation. \nThompson might observe a limitation in my analysis that I can easily correct. He should become aware of my revision but his lineup should not change in how it computes without him choosing to do so. I think we do this well enough now with twins and recall from history. We must be careful to not break these mechanism.\nI'm leaning toward a general rule something like all changes to a lineup come from the engaged user. All computation within a lineup (and certainly within a page) should be exactly determined by the pages and their lineup that the engaged user has chosen.\nThe Bikeshare plugin reads and computes with an external database. http://plugins.dojo.fed.wiki/about-bikeshare-plugin.html"
      },
      "date": 1693478855178
    },
    {
      "type": "edit",
      "id": "f298c8fdfcaf096c",
      "item": {
        "type": "paragraph",
        "id": "f298c8fdfcaf096c",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692799954540dKtHd:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWikipedia has a good description of what I take \"functional\" to mean. [https://en.wikipedia.org/wiki/Pure_function wikipedia]\nWhen I collaborate with Thompson, we read each others wiki often starting with Recent Changes. We would not be operating in a functional way in that our implicit goal is to change how each other thinks.\nIf Thompson shares a dataset, and I write a page extracting interesting information from that page, I would expect to be able to share that page and have him see the same result as I have. Otherwise we have not basis for conversation. \nThompson might observe a limitation in my analysis that I can easily correct. He should become aware of my revision but his lineup should not change in how it computes without him choosing to do so. I think we do this well enough now with twins and recall from history. We must be careful to not break these mechanism.\nI'm leaning toward a general rule something like all changes to a lineup come from the engaged user. All computation within a lineup (and certainly within a page) should be exactly determined by the pages and their lineup that the engaged user has chosen.\nThe Bikeshare plugin reads and computes with an external database. http://plugins.dojo.fed.wiki/about-bikeshare-plugin.html"
      },
      "date": 1693478872160
    },
    {
      "type": "edit",
      "id": "f298c8fdfcaf096c",
      "item": {
        "type": "paragraph",
        "id": "f298c8fdfcaf096c",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692799954540dKtHd:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWikipedia has a good description of what I take \"functional\" to mean. [https://en.wikipedia.org/wiki/Pure_function wikipedia]"
      },
      "date": 1693478895157
    },
    {
      "type": "add",
      "id": "d10c9c4fae87576f",
      "item": {
        "type": "paragraph",
        "id": "d10c9c4fae87576f",
        "text": "When I collaborate with Thompson, we read each others wiki often starting with [[Recent Changes]]. We would not be operating in a functional way in that our implicit goal is to change how each other thinks.\nIf Thompson shares a dataset, and I write a page extracting interesting information from that page, I would expect to be able to share that page and have him see the same result as I have. Otherwise we have not basis for conversation. \nThompson might observe a limitation in my analysis that I can easily correct. He should become aware of my revision but his lineup should not change in how it computes without him choosing to do so. I think we do this well enough now with twins and recall from history. We must be careful to not break these mechanism.\nI'm leaning toward a general rule something like all changes to a lineup come from the engaged user. All computation within a lineup (and certainly within a page) should be exactly determined by the pages and their lineup that the engaged user has chosen.\nThe Bikeshare plugin reads and computes with an external database. http://plugins.dojo.fed.wiki/about-bikeshare-plugin.html"
      },
      "after": "f298c8fdfcaf096c",
      "date": 1693478905893
    },
    {
      "type": "edit",
      "id": "d10c9c4fae87576f",
      "item": {
        "type": "paragraph",
        "id": "d10c9c4fae87576f",
        "text": "When I collaborate with Thompson, we read each others wiki often starting with [[Recent Changes]]. We would not be operating in a functional way in that our implicit goal is to change how each other thinks.\nIf Thompson shares a dataset, and I write a page extracting interesting information from that page, I would expect to be able to share that page and have him see the same result as I have. Otherwise we have not basis for conversation. \nThompson might observe a limitation in my analysis that I can easily correct. He should become aware of my revision but his lineup should not change in how it computes without him choosing to do so. I think we do this well enough now with twins and recall from history. We must be careful to not break these mechanism.\nI'm leaning toward a general rule something like all changes to a lineup come from the engaged user. All computation within a lineup (and certainly within a page) should be exactly determined by the pages and their lineup that the engaged user has chosen.\nThe Bikeshare plugin reads and computes with an external database. [http://plugins.dojo.fed.wiki/about-bikeshare-plugin.html page]"
      },
      "date": 1693478976430
    },
    {
      "item": {
        "type": "factory",
        "id": "afc8ab0428e79cba"
      },
      "id": "afc8ab0428e79cba",
      "type": "add",
      "after": "d10c9c4fae87576f",
      "date": 1693479074448
    },
    {
      "type": "edit",
      "id": "afc8ab0428e79cba",
      "item": {
        "type": "reference",
        "id": "afc8ab0428e79cba",
        "site": "plugins.dojo.fed.wiki",
        "slug": "about-bikeshare-plugin",
        "title": "About Bikeshare Plugin",
        "text": "This plugin will fetch status information from city bikeshare programs to be rendered as map markers. [https://github.com/WardCunningham/wiki-plugin-bikeshare github]"
      },
      "date": 1693479078297
    },
    {
      "item": {
        "type": "factory",
        "id": "36a2f15cdd0af389"
      },
      "id": "36a2f15cdd0af389",
      "type": "add",
      "after": "afc8ab0428e79cba",
      "date": 1693479181143
    },
    {
      "type": "edit",
      "id": "36a2f15cdd0af389",
      "item": {
        "type": "paragraph",
        "id": "36a2f15cdd0af389",
        "text": "Right now for me it reports 4090 bike share stations in New York City. I would not expect this number to change on its own. If I checked tomorrow I might not be surprised to see 4091 stations, so long as I reloaded the page. This does raise the question, if Thompson and I were making cycling plans for NYC would we make the same choices? If I captured the bike share database as an asset and recommend Thompson use my data, not the current data from NYC, then we would know what we are talking about but we would be living in the past too. Hmm."
      },
      "date": 1693479183995
    },
    {
      "item": {
        "type": "factory",
        "id": "da922fa28bda2346"
      },
      "id": "da922fa28bda2346",
      "type": "add",
      "after": "36a2f15cdd0af389",
      "date": 1693479261459
    },
    {
      "id": "da922fa28bda2346",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389"
      ],
      "date": 1693479264542
    },
    {
      "type": "edit",
      "id": "da922fa28bda2346",
      "item": {
        "type": "code",
        "id": "da922fa28bda2346",
        "text": "https://gbfs.citibikenyc.com/gbfs/en/station_information.json"
      },
      "date": 1693479267394
    },
    {
      "type": "edit",
      "id": "36a2f15cdd0af389",
      "item": {
        "type": "paragraph",
        "id": "36a2f15cdd0af389",
        "text": "Right now for me it reports 4090 bike share stations in New York City. I would not expect this number to change on its own. If I checked tomorrow I might not be surprised to see 4091 stations, so long as I reloaded the page. This does raise the question, if Thompson and I were making cycling plans for NYC would we make the same choices? If I captured the bike share database as an asset and recommend Thompson use my data, not the current data from NYC, then we would know what we are talking about but we would be living in the past too. Hmm. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692800964632LHOrt:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "date": 1693479337513
    },
    {
      "type": "add",
      "id": "0130a9be00f16f79",
      "item": {
        "type": "paragraph",
        "id": "0130a9be00f16f79",
        "text": "Ward\n(This is crazy. I keep reloading the bikeshare page to see if the station count changes. It hasn't yet.)\nI'm leaning toward a general rule something like all changes to a lineup come from the engaged user. All computation within a lineup (and certainly within a page) should be exactly determined by the pages and their lineup that the engaged user has chosen.\n\nThis alone requires some attention to details that we have overlooked. I know I have seen page that get wrong result until they are reloaded where plugins run in a different order."
      },
      "after": "36a2f15cdd0af389",
      "date": 1693479423278
    },
    {
      "type": "edit",
      "id": "0130a9be00f16f79",
      "item": {
        "type": "paragraph",
        "id": "0130a9be00f16f79",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692801677749THmpr:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n(This is crazy. I keep reloading the bikeshare page to see if the station count changes. It hasn't yet.)"
      },
      "date": 1693479446588
    },
    {
      "type": "add",
      "id": "86fe1a83b15a00f4",
      "item": {
        "type": "paragraph",
        "id": "86fe1a83b15a00f4",
        "text": "> I'm leaning toward a general rule something like all changes to a lineup come from the engaged user. All computation within a lineup (and certainly within a page) should be exactly determined by the pages and their lineup that the engaged user has chosen.\n\nThis alone requires some attention to details that we have overlooked. I know I have seen page that get wrong result until they are reloaded where plugins run in a different order."
      },
      "after": "0130a9be00f16f79",
      "date": 1693479453336
    },
    {
      "type": "edit",
      "id": "86fe1a83b15a00f4",
      "item": {
        "type": "paragraph",
        "id": "86fe1a83b15a00f4",
        "text": "> I'm leaning toward a general rule something like all changes to a lineup come from the engaged user. All computation within a lineup (and certainly within a page) should be exactly determined by the pages and their lineup that the engaged user has chosen.\n\nThis alone requires some attention to details that we"
      },
      "date": 1693479464626
    },
    {
      "type": "add",
      "id": "3e42989b96757d23",
      "item": {
        "type": "paragraph",
        "id": "3e42989b96757d23",
        "text": "have overlooked. I know I have seen page that get wrong result until they are reloaded where plugins run in a different order."
      },
      "after": "86fe1a83b15a00f4",
      "date": 1693479467631
    },
    {
      "type": "remove",
      "id": "3e42989b96757d23",
      "date": 1693479482104
    },
    {
      "type": "edit",
      "id": "86fe1a83b15a00f4",
      "item": {
        "type": "paragraph",
        "id": "86fe1a83b15a00f4",
        "text": "> I'm leaning toward a general rule something like all changes to a lineup come from the engaged user. All computation within a lineup (and certainly within a page) should be exactly determined by the pages and their lineup that the engaged user has chosen."
      },
      "date": 1693479486737
    },
    {
      "type": "add",
      "id": "9431a80c81ed5296",
      "item": {
        "type": "paragraph",
        "id": "9431a80c81ed5296",
        "text": "This alone requires some attention to details that we have overlooked. I know I have seen page that get wrong result until they are reloaded where plugins run in a different order."
      },
      "after": "86fe1a83b15a00f4",
      "date": 1693479487378
    },
    {
      "type": "edit",
      "id": "86fe1a83b15a00f4",
      "item": {
        "type": "markdown",
        "id": "86fe1a83b15a00f4",
        "text": "> I'm leaning toward a general rule something like all changes to a lineup come from the engaged user. All computation within a lineup (and certainly within a page) should be exactly determined by the pages and their lineup that the engaged user has chosen."
      },
      "date": 1693479488678
    },
    {
      "type": "add",
      "id": "3a34fc6d30b2c273",
      "item": {
        "type": "paragraph",
        "id": "3a34fc6d30b2c273",
        "text": "paul90 via [matrix]\nUsing the above example, if the results are being generated by a script in a frame, even if the data is held in the page the script is not - and likely not versioned. So, the results generated is not just determined by the forked page/data."
      },
      "after": "9431a80c81ed5296",
      "date": 1693479522927
    },
    {
      "type": "edit",
      "id": "3a34fc6d30b2c273",
      "item": {
        "type": "paragraph",
        "id": "3a34fc6d30b2c273",
        "text": "https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692801791758CxAeI:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st paul90 via [matrix]\nUsing the above example, if the results are being generated by a script in a frame, even if the data is held in the page the script is not - and likely not versioned. So, the results generated is not just determined by the forked page/data."
      },
      "date": 1693479532242
    },
    {
      "type": "edit",
      "id": "3a34fc6d30b2c273",
      "item": {
        "type": "paragraph",
        "id": "3a34fc6d30b2c273",
        "text": "[https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692801791758CxAeI:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st paul90 via matrix]\nUsing the above example, if the results are being generated by a script in a frame, even if the data is held in the page the script is not - and likely not versioned. So, the results generated is not just determined by the forked page/data."
      },
      "date": 1693479559546
    },
    {
      "type": "edit",
      "id": "3a34fc6d30b2c273",
      "item": {
        "type": "paragraph",
        "id": "3a34fc6d30b2c273",
        "text": "paul90 via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692801791758CxAeI:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nUsing the above example, if the results are being generated by a script in a frame, even if the data is held in the page the script is not - and likely not versioned. So, the results generated is not just determined by the forked page/data."
      },
      "date": 1693479583604
    },
    {
      "type": "edit",
      "id": "3a34fc6d30b2c273",
      "item": {
        "type": "paragraph",
        "id": "3a34fc6d30b2c273",
        "text": "paul90 via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1692801791758CxAeI:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nUsing the above example, if the results are being generated by a script in a frame, even if the data is held in the page the script is not – and likely not versioned. So, the results generated is not just determined by the forked page/data."
      },
      "date": 1693479614236
    },
    {
      "item": {
        "type": "factory",
        "id": "c54ccba5595ae814"
      },
      "id": "c54ccba5595ae814",
      "type": "add",
      "after": "3a34fc6d30b2c273",
      "date": 1693479687672
    },
    {
      "type": "edit",
      "id": "c54ccba5595ae814",
      "item": {
        "type": "paragraph",
        "id": "c54ccba5595ae814",
        "text": "⇒ [[Lamdera Data Storage]] ⇒ [[Write-Ahead-Log]] ⇒ [[Journal]] as persited messages ⇒ fedwiki/wiki-client · lib/addToJournal.coffee [https://github.com/search?q=org%3Afedwiki%20addToJournal&type=code search], [https://github.com/fedwiki/wiki-client/blob/c892b0dd0c5efb593a4eed8833266b047571fbeb/lib/addToJournal.coffee#L2 code]"
      },
      "date": 1693479689161
    },
    {
      "item": {
        "type": "factory",
        "id": "0e586c394b209cde"
      },
      "id": "0e586c394b209cde",
      "type": "add",
      "after": "c54ccba5595ae814",
      "date": 1693481402034
    },
    {
      "type": "edit",
      "id": "0e586c394b209cde",
      "item": {
        "type": "paragraph",
        "id": "0e586c394b209cde",
        "text": "[[SQlite and WAL]]"
      },
      "date": 1693481415947
    },
    {
      "type": "edit",
      "id": "0e586c394b209cde",
      "item": {
        "type": "paragraph",
        "id": "0e586c394b209cde",
        "text": "[[SQLite and WAL]]"
      },
      "date": 1693481423075
    },
    {
      "item": {
        "type": "factory",
        "id": "d2ee6d0900ca25e3"
      },
      "id": "d2ee6d0900ca25e3",
      "type": "add",
      "after": "0e586c394b209cde",
      "date": 1693488990451
    },
    {
      "type": "edit",
      "id": "d2ee6d0900ca25e3",
      "item": {
        "type": "pagefold",
        "id": "d2ee6d0900ca25e3",
        "text": "~"
      },
      "date": 1693488995573
    },
    {
      "item": {
        "type": "factory",
        "id": "5e015ab852a520f1"
      },
      "id": "5e015ab852a520f1",
      "type": "add",
      "after": "d2ee6d0900ca25e3",
      "date": 1693489009218
    },
    {
      "type": "edit",
      "id": "5e015ab852a520f1",
      "item": {
        "type": "paragraph",
        "id": "5e015ab852a520f1",
        "text": "⇒ [[elm-test]]"
      },
      "date": 1693489022276
    },
    {
      "type": "add",
      "id": "48b78a673ebd1bed",
      "item": {
        "type": "paragraph",
        "id": "48b78a673ebd1bed",
        "text": "expectedPage"
      },
      "after": "5e015ab852a520f1",
      "date": 1693492240761
    },
    {
      "type": "add",
      "id": "ed5e3c155c40b1ad",
      "item": {
        "type": "paragraph",
        "id": "ed5e3c155c40b1ad",
        "text": "Click to create this page."
      },
      "after": "48b78a673ebd1bed",
      "date": 1693492321902
    },
    {
      "type": "add",
      "id": "f432fec9989d316a",
      "item": {
        "type": "paragraph",
        "id": "f432fec9989d316a",
        "text": "create new blank page"
      },
      "after": "ed5e3c155c40b1ad",
      "date": 1693492326412
    },
    {
      "item": {
        "type": "factory",
        "id": "ce2e8bb097266c4b"
      },
      "id": "ce2e8bb097266c4b",
      "type": "add",
      "after": "f432fec9989d316a",
      "date": 1693492338795
    },
    {
      "item": {
        "type": "factory",
        "id": "d787690c8ccef785"
      },
      "id": "d787690c8ccef785",
      "type": "add",
      "after": "ce2e8bb097266c4b",
      "date": 1693492339878
    },
    {
      "type": "edit",
      "id": "ce2e8bb097266c4b",
      "item": {
        "type": "code",
        "id": "ce2e8bb097266c4b",
        "text": "JSON for Create New Page Test\n\n{\n  \"title\": \"Create New Page Test\",\n  \"story\": [],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693492328369\n    }\n  ]\n}"
      },
      "date": 1693492343918
    },
    {
      "type": "edit",
      "id": "ce2e8bb097266c4b",
      "item": {
        "type": "code",
        "id": "ce2e8bb097266c4b",
        "text": "{\n  \"title\": \"Create New Page Test\",\n  \"story\": [],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693492328369\n    }\n  ]\n}"
      },
      "date": 1693492365113
    },
    {
      "type": "add",
      "id": "c541ff3d2c9fe62c",
      "item": {
        "type": "paragraph",
        "id": "c541ff3d2c9fe62c",
        "text": "JSON for Create New Page Test: "
      },
      "after": "f432fec9989d316a",
      "date": 1693492367474
    },
    {
      "type": "edit",
      "id": "d787690c8ccef785",
      "item": {
        "type": "paragraph",
        "id": "d787690c8ccef785",
        "text": "This is the jsonString"
      },
      "date": 1693492404988
    },
    {
      "type": "edit",
      "id": "d787690c8ccef785",
      "item": {
        "type": "paragraph",
        "id": "d787690c8ccef785",
        "text": "This is the jsonString of the decoder"
      },
      "date": 1693492415654
    },
    {
      "type": "edit",
      "id": "d787690c8ccef785",
      "item": {
        "type": "paragraph",
        "id": "d787690c8ccef785",
        "text": "This is the jsonString of the decoder test \"Create\"."
      },
      "date": 1693492426958
    },
    {
      "type": "add",
      "id": "31fd81b22d33968b",
      "item": {
        "type": "paragraph",
        "id": "31fd81b22d33968b",
        "text": "I am trying to reconstruct what I was thinking when I created the test cases."
      },
      "after": "d787690c8ccef785",
      "date": 1693493029958
    },
    {
      "type": "edit",
      "id": "31fd81b22d33968b",
      "item": {
        "type": "paragraph",
        "id": "31fd81b22d33968b",
        "text": "I am trying to reconstruct what I was thinking when I created the test cases. ;-)"
      },
      "date": 1693493043556
    },
    {
      "type": "add",
      "id": "4a40db19fa4cfd7b",
      "item": {
        "type": "paragraph",
        "id": "4a40db19fa4cfd7b",
        "text": "expectedPage is type alias Page =\n    { title : String\n    , story : List Story\n    , journal : List Event\n    }"
      },
      "after": "31fd81b22d33968b",
      "date": 1693493633578
    },
    {
      "type": "edit",
      "id": "4a40db19fa4cfd7b",
      "item": {
        "type": "paragraph",
        "id": "4a40db19fa4cfd7b",
        "text": "expectedPage is "
      },
      "date": 1693493643836
    },
    {
      "item": {
        "type": "factory",
        "id": "35b69d1f133fca89"
      },
      "id": "35b69d1f133fca89",
      "type": "add",
      "after": "4a40db19fa4cfd7b",
      "date": 1693493647151
    },
    {
      "type": "edit",
      "id": "35b69d1f133fca89",
      "item": {
        "type": "code",
        "id": "35b69d1f133fca89",
        "text": "type alias Page =\n    { title : String\n    , story : List Story\n    , journal : List Event\n    }"
      },
      "date": 1693493650602
    },
    {
      "item": {
        "type": "factory",
        "id": "b07eb1104fd118ed"
      },
      "id": "b07eb1104fd118ed",
      "type": "add",
      "after": "35b69d1f133fca89",
      "date": 1693493790470
    },
    {
      "type": "remove",
      "id": "b07eb1104fd118ed",
      "date": 1693493795551
    },
    {
      "item": {
        "type": "factory",
        "id": "3db4b679d5a9155c"
      },
      "id": "3db4b679d5a9155c",
      "type": "add",
      "after": "35b69d1f133fca89",
      "date": 1693493799319
    },
    {
      "type": "edit",
      "id": "3db4b679d5a9155c",
      "item": {
        "type": "code",
        "id": "3db4b679d5a9155c",
        "text": "Page\n  -- TITLE\n  \n  \"Create New Page Test\"\n  \n  -- STORY\n  \n  []\n  \n  -- JOURNAL\n  \n  [ Create\n  \n      { type_ = \"create\"\n  \n      , item = { title = \"Create New Page Test\", story = EmptyStory }\n  \n      , date = 1685700575889\n  \n      }\n  \n  ]"
      },
      "date": 1693493803456
    },
    {
      "type": "edit",
      "id": "4a40db19fa4cfd7b",
      "item": {
        "type": "paragraph",
        "id": "4a40db19fa4cfd7b",
        "text": "expectedPage is"
      },
      "date": 1693493985686
    },
    {
      "type": "add",
      "id": "77b60ffc1ae7fccc",
      "item": {
        "type": "paragraph",
        "id": "77b60ffc1ae7fccc",
        "text": "and in the case of the test case \"create\" I have created the following:"
      },
      "after": "4a40db19fa4cfd7b",
      "date": 1693493986543
    },
    {
      "id": "77b60ffc1ae7fccc",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c"
      ],
      "date": 1693493988125
    },
    {
      "type": "edit",
      "id": "77b60ffc1ae7fccc",
      "item": {
        "type": "paragraph",
        "id": "77b60ffc1ae7fccc",
        "text": "and for the test case \"create\" I have created the following:"
      },
      "date": 1693494290206
    },
    {
      "type": "edit",
      "id": "77b60ffc1ae7fccc",
      "item": {
        "type": "paragraph",
        "id": "77b60ffc1ae7fccc",
        "text": "and for the test case \"create\" I have made the following:"
      },
      "date": 1693494331043
    },
    {
      "type": "edit",
      "id": "77b60ffc1ae7fccc",
      "item": {
        "type": "paragraph",
        "id": "77b60ffc1ae7fccc",
        "text": "and for the decoder test case \"create\" I have made the following:"
      },
      "date": 1693494373285
    },
    {
      "item": {
        "type": "factory",
        "id": "58c58bc6ee9209f7"
      },
      "id": "58c58bc6ee9209f7",
      "type": "add",
      "after": "3db4b679d5a9155c",
      "date": 1693494515318
    },
    {
      "type": "edit",
      "id": "58c58bc6ee9209f7",
      "item": {
        "type": "paragraph",
        "id": "58c58bc6ee9209f7",
        "text": "\"Add Factory\""
      },
      "date": 1693494545187
    },
    {
      "item": {
        "type": "factory",
        "id": "321bdb2df3fe9c65"
      },
      "id": "321bdb2df3fe9c65",
      "type": "add",
      "after": "58c58bc6ee9209f7",
      "date": 1693494560623
    },
    {
      "type": "edit",
      "id": "321bdb2df3fe9c65",
      "item": {
        "type": "audio",
        "id": "321bdb2df3fe9c65",
        "text": "JSON for Create New Page Test\n\n{\n  \"title\": \"Create New Page Test\",\n  \"story\": [\n    {\n      \"type\": \"factory\",\n      \"id\": \"9cb6a63004c67583\"\n    }\n  ],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693492328369\n    },\n    {\n      \"item\": {\n        \"type\": \"factory\",\n        \"id\": \"9cb6a63004c67583\"\n      },\n      \"id\": \"9cb6a63004c67583\",\n      \"type\": \"add\",\n      \"date\": 1693494385411\n    }\n  ]\n}"
      },
      "date": 1693494563769
    },
    {
      "type": "remove",
      "id": "321bdb2df3fe9c65",
      "date": 1693494570725
    },
    {
      "item": {
        "type": "factory",
        "id": "34cf96b4abc209c5"
      },
      "id": "34cf96b4abc209c5",
      "type": "add",
      "after": "58c58bc6ee9209f7",
      "date": 1693494574562
    },
    {
      "type": "edit",
      "id": "34cf96b4abc209c5",
      "item": {
        "type": "code",
        "id": "34cf96b4abc209c5",
        "text": "{\n  \"title\": \"Create New Page Test\",\n  \"story\": [\n    {\n      \"type\": \"factory\",\n      \"id\": \"9cb6a63004c67583\"\n    }\n  ],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693492328369\n    },\n    {\n      \"item\": {\n        \"type\": \"factory\",\n        \"id\": \"9cb6a63004c67583\"\n      },\n      \"id\": \"9cb6a63004c67583\",\n      \"type\": \"add\",\n      \"date\": 1693494385411\n    }\n  ]\n}"
      },
      "date": 1693494594278
    },
    {
      "type": "add",
      "id": "e0c98635a2b56a58",
      "item": {
        "type": "paragraph",
        "id": "e0c98635a2b56a58",
        "text": "JSON for Create New Page Test:"
      },
      "after": "58c58bc6ee9209f7",
      "date": 1693494596764
    },
    {
      "item": {
        "type": "factory",
        "id": "3910bfd2082210f5"
      },
      "id": "3910bfd2082210f5",
      "type": "add",
      "after": "34cf96b4abc209c5",
      "date": 1693494685225
    },
    {
      "type": "edit",
      "id": "3910bfd2082210f5",
      "item": {
        "type": "code",
        "id": "3910bfd2082210f5",
        "text": "{\n  \"title\": \"Create New Page Test\",\n  \"story\": [],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693492328369\n    },\n    {\n      \"item\": {\n        \"type\": \"paragraph\",\n        \"id\": \"9cb6a63004c67583\",\n        \"text\": \"\"\n      },\n      \"id\": \"9cb6a63004c67583\",\n      \"type\": \"add\",\n      \"date\": 1693494385411\n    },\n    {\n      \"type\": \"remove\",\n      \"id\": \"9cb6a63004c67583\",\n      \"date\": 1693494658695\n    }\n  ]\n}"
      },
      "date": 1693494688022
    },
    {
      "item": {
        "type": "factory",
        "id": "bbfcb83a27ee8c33"
      },
      "id": "bbfcb83a27ee8c33",
      "type": "add",
      "after": "3910bfd2082210f5",
      "date": 1693494712557
    },
    {
      "id": "bbfcb83a27ee8c33",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "3910bfd2082210f5"
      ],
      "date": 1693494718675
    },
    {
      "type": "edit",
      "id": "bbfcb83a27ee8c33",
      "item": {
        "type": "paragraph",
        "id": "bbfcb83a27ee8c33",
        "text": "Minimal \"remove\":"
      },
      "date": 1693494725867
    },
    {
      "type": "edit",
      "id": "bbfcb83a27ee8c33",
      "item": {
        "type": "paragraph",
        "id": "bbfcb83a27ee8c33",
        "text": "\"item\": {\n        \"type\": \"factory\",\n        \"id\": \"c9ce7d5388b005a8\"\n      },\n      \"id\": \"c9ce7d5388b005a8\",\n      \"type\": \"add\","
      },
      "date": 1693495130680
    },
    {
      "type": "add",
      "id": "660e9e63e3cc56b7",
      "item": {
        "type": "paragraph",
        "id": "660e9e63e3cc56b7",
        "text": "Minimal \"remove\":"
      },
      "after": "bbfcb83a27ee8c33",
      "date": 1693495184395
    },
    {
      "type": "edit",
      "id": "bbfcb83a27ee8c33",
      "item": {
        "type": "paragraph",
        "id": "bbfcb83a27ee8c33",
        "text": "add paragpraph -> item type factory id/id type add\n        \"id\": \"c9ce7d5388b005a8\"\n      },\n      \"id\": \"c9ce7d5388b005a8\",\n      \"type\": \"add\","
      },
      "date": 1693495474702
    },
    {
      "type": "edit",
      "id": "bbfcb83a27ee8c33",
      "item": {
        "type": "paragraph",
        "id": "bbfcb83a27ee8c33",
        "text": "add paragpraph -> item type factory id/id–twin type add\n     "
      },
      "date": 1693495520260
    },
    {
      "type": "edit",
      "id": "660e9e63e3cc56b7",
      "item": {
        "type": "paragraph",
        "id": "660e9e63e3cc56b7",
        "text": "Minimal \"remove\": item type remove id"
      },
      "date": 1693495557854
    },
    {
      "item": {
        "type": "factory",
        "id": "f42ae38659c3cd89"
      },
      "id": "f42ae38659c3cd89",
      "type": "add",
      "after": "3910bfd2082210f5",
      "date": 1693495643060
    },
    {
      "type": "edit",
      "id": "f42ae38659c3cd89",
      "item": {
        "type": "paragraph",
        "id": "f42ae38659c3cd89",
        "text": "type edit id\n      item\n        type paragraph id \n        \"text\": \"…\""
      },
      "date": 1693495728871
    },
    {
      "item": {
        "type": "factory",
        "id": "53d323bf56613257"
      },
      "id": "53d323bf56613257",
      "type": "add",
      "after": "f42ae38659c3cd89",
      "date": 1693495931796
    },
    {
      "id": "53d323bf56613257",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89"
      ],
      "date": 1693495938281
    },
    {
      "type": "edit",
      "id": "53d323bf56613257",
      "item": {
        "type": "code",
        "id": "53d323bf56613257",
        "text": "{\n  \"title\": \"Create New Page Test\",\n  \"story\": [\n    {\n      \"type\": \"paragraph\",\n      \"id\": \"bb853a441261d42d\",\n      \"text\": \"double-clicked to edit and type this text.\"\n    }\n  ],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693495851475\n    },\n    {\n      \"item\": {\n        \"type\": \"paragraph\",\n        \"id\": \"bb853a441261d42d\",\n        \"text\": \"double-clicked to edit and type this text.\"\n      },\n      \"id\": \"bb853a441261d42d\",\n      \"type\": \"add\",\n      \"date\": 1693495853813\n    },\n    {\n      \"type\": \"edit\",\n      \"id\": \"bb853a441261d42d\",\n      \"item\": {\n        \"type\": \"paragraph\",\n        \"id\": \"bb853a441261d42d\",\n        \"text\": \"double-clicked to edit and type this text.\"\n      },\n      \"date\": 1693495880350\n    }\n  ]\n}"
      },
      "date": 1693495940683
    },
    {
      "type": "edit",
      "id": "53d323bf56613257",
      "item": {
        "type": "code",
        "id": "53d323bf56613257",
        "text": "{\n  \"title\": \"Create New Page Test\",\n  \"story\": [\n    {\n      \"type\": \"paragraph\",\n      \"id\": \"bb853a441261d42d\",\n      \"text\": \"double-clicked to edit and typed this text.\"\n    }\n  ],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693495851475\n    },\n    {\n      \"item\": {\n        \"type\": \"paragraph\",\n        \"id\": \"bb853a441261d42d\",\n        \"text\": \"double-clicked to edit and type this text.\"\n      },\n      \"id\": \"bb853a441261d42d\",\n      \"type\": \"add\",\n      \"date\": 1693495853813\n    },\n    {\n      \"type\": \"edit\",\n      \"id\": \"bb853a441261d42d\",\n      \"item\": {\n        \"type\": \"paragraph\",\n        \"id\": \"bb853a441261d42d\",\n        \"text\": \"double-clicked to edit and type this text.\"\n      },\n      \"date\": 1693495880350\n    }\n  ]\n}"
      },
      "date": 1693495953821
    },
    {
      "type": "edit",
      "id": "53d323bf56613257",
      "item": {
        "type": "code",
        "id": "53d323bf56613257",
        "text": "{\n  \"title\": \"Create New Page Test\",\n  \"story\": [\n    {\n      \"type\": \"paragraph\",\n      \"id\": \"bb853a441261d42d\",\n      \"text\": \"double-clicked to edit and entered this text.\"\n    }\n  ],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693495851475\n    },\n    {\n      \"item\": {\n        \"type\": \"paragraph\",\n        \"id\": \"bb853a441261d42d\",\n        \"text\": \"double-clicked to edit and type this text.\"\n      },\n      \"id\": \"bb853a441261d42d\",\n      \"type\": \"add\",\n      \"date\": 1693495853813\n    },\n    {\n      \"type\": \"edit\",\n      \"id\": \"bb853a441261d42d\",\n      \"item\": {\n        \"type\": \"paragraph\",\n        \"id\": \"bb853a441261d42d\",\n        \"text\": \"double-clicked to edit and entered this text.\"\n      },\n      \"date\": 1693495880350\n    }\n  ]\n}"
      },
      "date": 1693495984043
    },
    {
      "type": "edit",
      "id": "bbfcb83a27ee8c33",
      "item": {
        "type": "paragraph",
        "id": "bbfcb83a27ee8c33",
        "text": "add paragpraph -> item type factory id/id–twin type add"
      },
      "date": 1693496133813
    },
    {
      "type": "add",
      "id": "524060b743c3f54c",
      "item": {
        "type": "paragraph",
        "id": "524060b743c3f54c",
        "text": "jsonString:"
      },
      "after": "bbfcb83a27ee8c33",
      "date": 1693496136452
    },
    {
      "type": "edit",
      "id": "53d323bf56613257",
      "item": {
        "type": "code",
        "id": "53d323bf56613257",
        "text": "{\n  \"title\": \"Create New Page Test\",\n  \"story\": [\n    {\n      \"type\": \"paragraph\",\n      \"id\": \"bb853a441261d42d\",\n      \"text\": \"double-clicked to edit and type this text.\"\n    }\n  ],\n  \"journal\": [\n    {\n      \"type\": \"create\",\n      \"item\": {\n        \"title\": \"Create New Page Test\",\n        \"story\": []\n      },\n      \"date\": 1693495851475\n    },\n    {\n      \"item\": {\n        \"type\": \"factory\",\n        \"id\": \"bb853a441261d42d\"\n      },\n      \"id\": \"bb853a441261d42d\",\n      \"type\": \"add\",\n      \"date\": 1693495853813\n    },\n    {\n      \"type\": \"edit\",\n      \"id\": \"bb853a441261d42d\",\n      \"item\": {\n        \"type\": \"paragraph\",\n        \"id\": \"bb853a441261d42d\",\n        \"text\": \"double-clicked to edit and type this text.\"\n      },\n      \"date\": 1693495880350\n    }\n  ]\n}"
      },
      "date": 1693498183294
    },
    {
      "item": {
        "type": "factory",
        "id": "35a8e7012cdd4ca6"
      },
      "id": "35a8e7012cdd4ca6",
      "type": "add",
      "after": "f42ae38659c3cd89",
      "date": 1693504423926
    },
    {
      "type": "edit",
      "id": "35a8e7012cdd4ca6",
      "item": {
        "type": "paragraph",
        "id": "35a8e7012cdd4ca6",
        "text": "Edit and AddFactory werden verwechselt?!"
      },
      "date": 1693504438460
    },
    {
      "type": "edit",
      "id": "35a8e7012cdd4ca6",
      "item": {
        "type": "paragraph",
        "id": "35a8e7012cdd4ca6",
        "text": "Edit and AddFactory are confused?!"
      },
      "date": 1693504446939
    },
    {
      "item": {
        "type": "factory",
        "id": "a1feaab0de8bae8c"
      },
      "id": "a1feaab0de8bae8c",
      "type": "add",
      "after": "35a8e7012cdd4ca6",
      "date": 1693504501257
    },
    {
      "type": "edit",
      "id": "a1feaab0de8bae8c",
      "item": {
        "type": "image",
        "id": "a1feaab0de8bae8c",
        "text": "Bildschirmfoto 2023-08-31 um 19.29.27",
        "size": "wide",
        "width": 430,
        "height": 279,
        "url": "/assets/plugins/image/b7cd70686cbbbe552b1535e99366718b.jpg"
      },
      "date": 1693504519249
    },
    {
      "item": {
        "type": "factory",
        "id": "3c07086cb80eedeb"
      },
      "id": "3c07086cb80eedeb",
      "type": "add",
      "after": "a1feaab0de8bae8c",
      "date": 1693504651519
    },
    {
      "type": "edit",
      "id": "3c07086cb80eedeb",
      "item": {
        "type": "reference",
        "id": "3c07086cb80eedeb",
        "site": "wiki.ralfbarkow.ch",
        "slug": "wikispec-story",
        "title": "WikiSpec Story",
        "text": "[…]  refactor: [[Story]] is now a type too (was: type alias) [https://github.com/RalfBarkow/vite-elm-dojo/commit/0dec352606a639acf0f1c5a99ea1d3c09d1316fa commit]"
      },
      "date": 1693504654325
    },
    {
      "item": {
        "type": "factory",
        "id": "2853ca7d31669cf9"
      },
      "id": "2853ca7d31669cf9",
      "type": "add",
      "after": "3c07086cb80eedeb",
      "date": 1693504839074
    },
    {
      "type": "edit",
      "id": "2853ca7d31669cf9",
      "item": {
        "type": "code",
        "id": "2853ca7d31669cf9",
        "text": "eventDecoder : Decode.Decoder Event\neventDecoder =\n    Decode.oneOf\n        [ Decode.map Create createEventDecoder\n        , Decode.map Edit editEventDecoder\n        , Decode.map AddFactory addFactoryEventDecoder\n\n        -- Add decoders for other journal event variants as needed\n        ]\n\n"
      },
      "date": 1693504843374
    },
    {
      "item": {
        "type": "factory",
        "id": "7172f4e98b12d73b"
      },
      "id": "7172f4e98b12d73b",
      "type": "add",
      "after": "2853ca7d31669cf9",
      "date": 1693504878570
    },
    {
      "type": "edit",
      "id": "7172f4e98b12d73b",
      "item": {
        "type": "paragraph",
        "id": "7172f4e98b12d73b",
        "text": "Order under oneOf is relevant! This code lets "
      },
      "date": 1693504904634
    },
    {
      "type": "edit",
      "id": "7172f4e98b12d73b",
      "item": {
        "type": "paragraph",
        "id": "7172f4e98b12d73b",
        "text": "Order under oneOf is relevant! This code lets fail ✗ Add Factory (decoder)."
      },
      "date": 1693504924969
    },
    {
      "type": "edit",
      "id": "7172f4e98b12d73b",
      "item": {
        "type": "paragraph",
        "id": "7172f4e98b12d73b",
        "text": "Order under oneOf is relevant! This code makes ✗ Add Factory (decoder) fail."
      },
      "date": 1693504942105
    },
    {
      "item": {
        "type": "factory",
        "id": "e28020a6586d1882"
      },
      "id": "e28020a6586d1882",
      "type": "add",
      "after": "7172f4e98b12d73b",
      "date": 1693509307407
    },
    {
      "type": "edit",
      "id": "e28020a6586d1882",
      "item": {
        "type": "code",
        "id": "e28020a6586d1882",
        "text": "eventDecoder : Decode.Decoder Event\neventDecoder =\n    Decode.map3 createEventDecoder editEventDecoder addFactoryEventDecoder\n"
      },
      "date": 1693509310940
    },
    {
      "type": "edit",
      "id": "e28020a6586d1882",
      "item": {
        "type": "code",
        "id": "e28020a6586d1882",
        "text": "eventDecoder : Decode.Decoder Event\neventDecoder =\n    Decode.customDecoder customDecodeEvent\n\ncustomDecodeEvent : Decode.Decoder Event\ncustomDecodeEvent =\n    Decode.field \"type\" Decode.string |> Decode.andThen decodeEventType\n\ndecodeEventType : String -> Decode.Decoder Event\ndecodeEventType eventType =\n    case eventType of\n        \"Create\" ->\n            Decode.map Create createEventDecoder\n\n        \"Edit\" ->\n            Decode.map Edit editEventDecoder\n\n        \"AddFactory\" ->\n            Decode.map AddFactory addFactoryEventDecoder\n\n        _ ->\n            Decode.fail \"Unknown event type\"\n"
      },
      "date": 1693509584630
    },
    {
      "type": "edit",
      "id": "e28020a6586d1882",
      "item": {
        "type": "code",
        "id": "e28020a6586d1882",
        "text": "eventDecoder : Decode.Decoder Event\neventDecoder =\n    Decode.custom customDecodeEvent\n\ncustomDecodeEvent : Decode.Decoder Event\ncustomDecodeEvent =\n    Decode.field \"type\" Decode.string |> Decode.andThen decodeEventType\n\ndecodeEventType : String -> Decode.Decoder Event\ndecodeEventType eventType =\n    case eventType of\n        \"Create\" ->\n            Decode.map Create createEventDecoder\n\n        \"Edit\" ->\n            Decode.map Edit editEventDecoder\n\n        \"AddFactory\" ->\n            Decode.map AddFactory addFactoryEventDecoder\n\n        _ ->\n            Decode.fail \"Unknown event type\"\n"
      },
      "date": 1693509723180
    },
    {
      "type": "edit",
      "id": "e28020a6586d1882",
      "item": {
        "type": "code",
        "id": "e28020a6586d1882",
        "text": "import Json.Decode as Decode exposing (Decoder, andThen, field, string, map, fail)\n\neventDecoder : Decoder Event\neventDecoder =\n    field \"type\" string\n        |> andThen decodeEvent\n\ndecodeEvent : String -> Decoder Event\ndecodeEvent eventType =\n    case eventType of\n        \"Create\" ->\n            map Create createEventDecoder\n\n        \"Edit\" ->\n            map Edit editEventDecoder\n\n        \"AddFactory\" ->\n            map AddFactory addFactoryEventDecoder\n\n        _ ->\n            fail \"Unknown event type\"\n"
      },
      "date": 1693509774900
    },
    {
      "type": "remove",
      "id": "e28020a6586d1882",
      "date": 1693510115957
    },
    {
      "item": {
        "type": "factory",
        "id": "2fe6f33cb70932f6"
      },
      "id": "2fe6f33cb70932f6",
      "type": "add",
      "after": "7172f4e98b12d73b",
      "date": 1693510882961
    },
    {
      "type": "edit",
      "id": "2fe6f33cb70932f6",
      "item": {
        "type": "code",
        "id": "2fe6f33cb70932f6",
        "text": "eventDecoder =\n    Decode.oneOf\n        [ Decode.map Create createEventDecoder\n        , Decode.map Edit editEventDecoder\n        , Decode.map AddFactory addFactoryEventDecoder\n\n        -- Add decoders for other journal event variants as needed\n        ]\n"
      },
      "date": 1693510886030
    },
    {
      "type": "edit",
      "id": "7172f4e98b12d73b",
      "item": {
        "type": "paragraph",
        "id": "7172f4e98b12d73b",
        "text": "Order under oneOf is relevant! This code makes ✗ Add Factory (decoder) fail. And"
      },
      "date": 1693510902319
    },
    {
      "type": "add",
      "id": "f725ff226b5ef1a0",
      "item": {
        "type": "paragraph",
        "id": "f725ff226b5ef1a0",
        "text": "makes ✗ Add Factory (decoder) fail."
      },
      "after": "7172f4e98b12d73b",
      "date": 1693510912065
    },
    {
      "id": "f725ff226b5ef1a0",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "524060b743c3f54c",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89",
        "35a8e7012cdd4ca6",
        "a1feaab0de8bae8c",
        "3c07086cb80eedeb",
        "2853ca7d31669cf9",
        "7172f4e98b12d73b",
        "2fe6f33cb70932f6",
        "f725ff226b5ef1a0"
      ],
      "date": 1693510914214
    },
    {
      "type": "edit",
      "id": "2fe6f33cb70932f6",
      "item": {
        "type": "code",
        "id": "2fe6f33cb70932f6",
        "text": "eventDecoder =\n    Decode.oneOf\n        [ Decode.map Create createEventDecoder\n        , Decode.map AddFactory addFactoryEventDecoder\n        , Decode.map Edit editEventDecoder\n\n        -- Add decoders for other journal event variants as needed\n        ]\n"
      },
      "date": 1693510968222
    },
    {
      "type": "edit",
      "id": "f725ff226b5ef1a0",
      "item": {
        "type": "paragraph",
        "id": "f725ff226b5ef1a0",
        "text": "makes ✗ Add Paragraph (decoder) fail."
      },
      "date": 1693510985342
    },
    {
      "type": "edit",
      "id": "7172f4e98b12d73b",
      "item": {
        "type": "paragraph",
        "id": "7172f4e98b12d73b",
        "text": "Order under oneOf is relevant! The code above makes ✗ Add Factory (decoder) fail. And"
      },
      "date": 1693511019021
    },
    {
      "type": "add",
      "id": "b9a56ea38aa9211a",
      "item": {
        "type": "paragraph",
        "id": "b9a56ea38aa9211a",
        "text": "andThen [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#andThen page]"
      },
      "after": "f725ff226b5ef1a0",
      "date": 1693512336517
    },
    {
      "type": "edit",
      "id": "b9a56ea38aa9211a",
      "item": {
        "type": "paragraph",
        "id": "b9a56ea38aa9211a",
        "text": "Json.Decode.andThen [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#andThen page]"
      },
      "date": 1693512356980
    },
    {
      "type": "edit",
      "id": "b9a56ea38aa9211a",
      "item": {
        "type": "paragraph",
        "id": "b9a56ea38aa9211a",
        "text": "Json.Decode.andThen [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#andThen page] – "
      },
      "date": 1693512385193
    },
    {
      "type": "edit",
      "id": "b9a56ea38aa9211a",
      "item": {
        "type": "paragraph",
        "id": "b9a56ea38aa9211a",
        "text": "Json.Decode.andThen [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#andThen page] –  Create decoders that depend on previous results. If you are creating versioned data, you might do something like this:"
      },
      "date": 1693512396222
    },
    {
      "item": {
        "type": "factory",
        "id": "1445b539b2fe3f2b"
      },
      "id": "1445b539b2fe3f2b",
      "type": "add",
      "after": "b9a56ea38aa9211a",
      "date": 1693512453521
    },
    {
      "type": "edit",
      "id": "1445b539b2fe3f2b",
      "item": {
        "type": "code",
        "id": "1445b539b2fe3f2b",
        "text": "eventDecoder : Decode.Decoder Event\neventDecoder =\n    Decode.field \"type\" Decode.string\n        |> Decode.andThen eventTypeDecoder\n\n\neventTypeDecoder type_ =\n    case type_ of\n        \"create\" ->\n            createEventDecoder\n\n        \"add\" ->\n            addFactoryEventDecoder\n\n\n"
      },
      "date": 1693512457630
    },
    {
      "type": "add",
      "id": "045f0f4638aa4f8a",
      "item": {
        "type": "paragraph",
        "id": "045f0f4638aa4f8a",
        "text": "Juicing JSON, andThen some"
      },
      "after": "b9a56ea38aa9211a",
      "date": 1693512982347
    },
    {
      "id": "045f0f4638aa4f8a",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "524060b743c3f54c",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89",
        "35a8e7012cdd4ca6",
        "a1feaab0de8bae8c",
        "3c07086cb80eedeb",
        "2853ca7d31669cf9",
        "7172f4e98b12d73b",
        "2fe6f33cb70932f6",
        "f725ff226b5ef1a0",
        "b9a56ea38aa9211a",
        "1445b539b2fe3f2b",
        "045f0f4638aa4f8a"
      ],
      "date": 1693512984448
    },
    {
      "type": "edit",
      "id": "045f0f4638aa4f8a",
      "item": {
        "type": "paragraph",
        "id": "045f0f4638aa4f8a",
        "text": "Juicing JSON, andThen some [https://medium.com/wat-the-elm-ist/juicing-json-andthen-some-684d69d900e2 page]"
      },
      "date": 1693512998204
    },
    {
      "item": {
        "type": "factory",
        "id": "bdcb0c1c60f7dffb"
      },
      "id": "bdcb0c1c60f7dffb",
      "type": "add",
      "after": "045f0f4638aa4f8a",
      "date": 1693514378703
    },
    {
      "type": "edit",
      "id": "bdcb0c1c60f7dffb",
      "item": {
        "type": "code",
        "id": "bdcb0c1c60f7dffb",
        "text": "journalDecoder : Decoder Event\njournalDecoder =\n    Decode.oneOf\n        [ Decode.map4 Create\n            (Decode.field \"type\" (Decode.string |> Decode.andThen decodeEventType \"create\"))\n            (Decode.field \"item\" storyItemDecoder)\n            (Decode.field \"date\" Decode.int)\n        , Decode.map4 AddFactory\n            (Decode.field \"type\" (Decode.string |> Decode.andThen decodeEventType \"add\"))\n            (Decode.field \"item\" addFactoryItemDecoder)\n            (Decode.field \"id\" Decode.string)\n            (Decode.field \"date\" Decode.int)\n        , Decode.map4 Edit\n            (Decode.field \"type\" (Decode.string |> Decode.andThen decodeEventType \"edit\"))\n            (Decode.field \"id\" Decode.string)\n            (Decode.field \"item\" paragraphItemDecoder)\n            (Decode.field \"date\" Decode.int)\n        -- Add more decoders for other journal event variants as needed\n        ]\n\ndecodeEventType : String -> String -> Decode.Decoder String\ndecodeEventType expectedType actualType =\n    if expectedType == actualType then\n        Decode.succeed actualType\n    else\n        Decode.fail (\"Expected type '\" ++ expectedType ++ \"', but got '\" ++ actualType ++ \"'\")\n\n-- Define the storyItemDecoder, addFactoryItemDecoder, and paragraphItemDecoder functions here for decoding the respective item types.\n\n"
      },
      "date": 1693514382538
    },
    {
      "item": {
        "type": "factory",
        "id": "5bf0dc39208b3394"
      },
      "id": "5bf0dc39208b3394",
      "type": "add",
      "after": "bdcb0c1c60f7dffb",
      "date": 1693514550301
    },
    {
      "type": "edit",
      "id": "5bf0dc39208b3394",
      "item": {
        "type": "paragraph",
        "id": "5bf0dc39208b3394",
        "text": "In this decoder:"
      },
      "date": 1693514552652
    },
    {
      "type": "add",
      "id": "4a99b4e1d2864962",
      "item": {
        "type": "paragraph",
        "id": "4a99b4e1d2864962",
        "text": "\nWe use Decode.oneOf to try multiple decoders in order, one for each event variant.\nFor each event variant (e.g., Create, AddFactory, Edit), we use Decode.map4 to map the decoded values to the respective constructor functions. The arguments to Decode.map4 correspond to the fields of each event type.\nWe use Decode.field to decode each field in the JSON object and provide the appropriate decoding functions (e.g., Decode.string, Decode.int, storyItemDecoder, addFactoryItemDecoder, and paragraphItemDecoder) for each field.\nThe decodeEventType function checks if the \"type\" field in the JSON matches the expected type and returns it. If not, it fails with an error message.\nPlease note that you need to define the storyItemDecoder, addFactoryItemDecoder, and paragraphItemDecoder functions based on your actual data structures for the item field in each event type."
      },
      "after": "5bf0dc39208b3394",
      "date": 1693514571836
    },
    {
      "type": "edit",
      "id": "4a99b4e1d2864962",
      "item": {
        "type": "paragraph",
        "id": "4a99b4e1d2864962",
        "text": "We use Decode.oneOf to try multiple decoders in order, one for each event variant."
      },
      "date": 1693514580471
    },
    {
      "type": "add",
      "id": "d4e8f77ca72b0aa0",
      "item": {
        "type": "paragraph",
        "id": "d4e8f77ca72b0aa0",
        "text": "For each event variant (e.g., Create, AddFactory, Edit), we use Decode.map4 to map the decoded values to the respective constructor functions. The arguments to Decode.map4 correspond to the fields of each event type."
      },
      "after": "4a99b4e1d2864962",
      "date": 1693514583174
    },
    {
      "type": "add",
      "id": "24c1190344e011c2",
      "item": {
        "type": "paragraph",
        "id": "24c1190344e011c2",
        "text": "We use Decode.field to decode each field in the JSON object and provide the appropriate decoding functions (e.g., Decode.string, Decode.int, storyItemDecoder, addFactoryItemDecoder, and paragraphItemDecoder) for each field."
      },
      "after": "d4e8f77ca72b0aa0",
      "date": 1693514585624
    },
    {
      "type": "add",
      "id": "33abfa5b728078bc",
      "item": {
        "type": "paragraph",
        "id": "33abfa5b728078bc",
        "text": "The decodeEventType function checks if the \"type\" field in the JSON matches the expected type and returns it. If not, it fails with an error message.\nPlease note that you need to define the storyItemDecoder, addFactoryItemDecoder, and paragraphItemDecoder functions based on your actual data structures for the item field in each event type."
      },
      "after": "24c1190344e011c2",
      "date": 1693514587642
    },
    {
      "type": "edit",
      "id": "33abfa5b728078bc",
      "item": {
        "type": "paragraph",
        "id": "33abfa5b728078bc",
        "text": "The decodeEventType function checks if the \"type\" field in the JSON matches the expected type and returns it. If not, it fails with an error message."
      },
      "date": 1693514602394
    },
    {
      "type": "add",
      "id": "e582ba4872871d9b",
      "item": {
        "type": "paragraph",
        "id": "e582ba4872871d9b",
        "text": "Please note that you need to define the storyItemDecoder, addFactoryItemDecoder, and paragraphItemDecoder functions based on your actual data structures for the item field in each event type."
      },
      "after": "33abfa5b728078bc",
      "date": 1693514603156
    },
    {
      "type": "add",
      "id": "7d7772998f5bfdd5",
      "item": {
        "type": "paragraph",
        "id": "7d7772998f5bfdd5",
        "text": "Is there a function for conditional decoding?"
      },
      "after": "e582ba4872871d9b",
      "date": 1693515757199
    },
    {
      "type": "add",
      "id": "c4f2227fb6fda958",
      "item": {
        "type": "paragraph",
        "id": "c4f2227fb6fda958",
        "text": "In Elm's `Json.Decode` module, there isn't a built-in function specifically called \"conditional decoding.\" However, you can achieve conditional decoding by using functions like `Decode.andThen` and `Decode.oneOf` in combination with custom decoding functions.\n\nHere's a general approach to implement conditional decoding:\n\n1. Use `Decode.field` or `Decode.at` to extract the relevant JSON value based on a condition.\n2. Use `Decode.andThen` to apply a custom decoding function based on the condition.\n3. Inside the custom decoding function, you can implement your conditional logic and return the appropriate decoder.\n\nHere's an example of how you might use this approach:\n\n```elm\nimport Json.Decode exposing (Decoder, int, string, andThen, oneOf, succeed)\n\ntype Person\n    = Adult String Int\n    | Child String\n\npersonDecoder : Decoder Person\npersonDecoder =\n    andThen decodePersonType (Decode.field \"type\" string)\n\ndecodePersonType : String -> Decoder Person\ndecodePersonType personType =\n    case personType of\n        \"adult\" ->\n            succeed Adult\n                |> andThen (\\name -> Decode.field \"age\" int |> map (\\age -> Adult name age))\n\n        \"child\" ->\n            Decode.field \"name\" string\n                |> map Child\n\n        _ ->\n            fail (\"Unknown person type: \" ++ personType)\n\n-- Usage\njson1 : String\njson1 = \"\"\"\n    { \"type\": \"adult\", \"name\": \"Alice\", \"age\": 30 }\n\"\"\"\n\njson2 : String\njson2 = \"\"\"\n    { \"type\": \"child\", \"name\": \"Bob\" }\n\"\"\"\n\ndecodeJson1 : Result String Person\ndecodeJson1 =\n    Json.Decode.decodeString personDecoder json1\n\ndecodeJson2 : Result String Person\ndecodeJson2 =\n    Json.Decode.decodeString personDecoder json2\n```\n\nIn this example, we have a JSON object with a \"type\" field that determines whether it's an \"adult\" or a \"child.\" We use `andThen` and a custom decoding function, `decodePersonType`, to conditionally choose the appropriate decoder based on the \"type\" field.\n\nThis approach allows you to implement custom conditional decoding logic based on the JSON data you receive. You can adjust the custom decoding function and conditions as needed for your specific use case."
      },
      "after": "7d7772998f5bfdd5",
      "date": 1693515792568
    },
    {
      "type": "edit",
      "id": "c4f2227fb6fda958",
      "item": {
        "type": "paragraph",
        "id": "c4f2227fb6fda958",
        "text": "In Elm's `Json.Decode` module, there isn't a built-in function specifically called \"conditional decoding.\" However, you can achieve conditional decoding by using functions like `Decode.andThen` and `Decode.oneOf` in combination with custom decoding functions.\n\nHere's a general approach to implement conditional decoding:"
      },
      "date": 1693515818919
    },
    {
      "type": "add",
      "id": "2d0acd2fee7abcf7",
      "item": {
        "type": "paragraph",
        "id": "2d0acd2fee7abcf7",
        "text": "1. Use `Decode.field` or `Decode.at` to extract the relevant JSON value based on a condition.\n2. Use `Decode.andThen` to apply a custom decoding"
      },
      "after": "c4f2227fb6fda958",
      "date": 1693515821361
    },
    {
      "type": "add",
      "id": "88e2ead893fbb9da",
      "item": {
        "type": "paragraph",
        "id": "88e2ead893fbb9da",
        "text": "function based on the condition."
      },
      "after": "2d0acd2fee7abcf7",
      "date": 1693515823969
    },
    {
      "type": "add",
      "id": "90c85d61029fa16f",
      "item": {
        "type": "paragraph",
        "id": "90c85d61029fa16f",
        "text": "3. Inside the custom decoding function, you can implement your conditional logic and return the appropriate decoder.\n\nHere's an example of how you might use this approach:\n\n```elm\nimport Json.Decode exposing (Decoder, int, string, andThen, oneOf, succeed)\n\ntype Person\n    = Adult String Int\n    | Child String\n\npersonDecoder : Decoder Person\npersonDecoder =\n    andThen decodePersonType (Decode.field \"type\" string)\n\ndecodePersonType : String -> Decoder Person\ndecodePersonType personType =\n    case personType of\n        \"adult\" ->\n            succeed Adult\n                |> andThen (\\name -> Decode.field \"age\" int |> map (\\age -> Adult name age))\n\n        \"child\" ->\n            Decode.field \"name\" string\n                |> map Child\n\n        _ ->\n            fail (\"Unknown person type: \" ++ personType)\n\n-- Usage\njson1 : String\njson1 = \"\"\"\n    { \"type\": \"adult\", \"name\": \"Alice\", \"age\": 30 }\n\"\"\"\n\njson2 : String\njson2 = \"\"\"\n    { \"type\": \"child\", \"name\": \"Bob\" }\n\"\"\"\n\ndecodeJson1 : Result String Person\ndecodeJson1 =\n    Json.Decode.decodeString personDecoder json1\n\ndecodeJson2 : Result String Person\ndecodeJson2 =\n    Json.Decode.decodeString personDecoder json2\n```\n\nIn this example, we have a JSON object with a \"type\" field that determines whether it's an \"adult\" or a \"child.\" We use `andThen` and a custom decoding function, `decodePersonType`, to conditionally choose the appropriate decoder based on the \"type\" field.\n\nThis approach allows you to implement custom conditional decoding logic based on the JSON data you receive. You can adjust the custom decoding function and conditions as needed for your specific use case."
      },
      "after": "88e2ead893fbb9da",
      "date": 1693515825236
    },
    {
      "type": "remove",
      "id": "88e2ead893fbb9da",
      "date": 1693515826669
    },
    {
      "type": "edit",
      "id": "2d0acd2fee7abcf7",
      "item": {
        "type": "paragraph",
        "id": "2d0acd2fee7abcf7",
        "text": "1. Use `Decode.field` or `Decode.at` to extract the relevant JSON value based on a condition.\n2. Use `Decode.andThen` to apply a custom decoding function based on the condition."
      },
      "date": 1693515829181
    },
    {
      "type": "edit",
      "id": "2d0acd2fee7abcf7",
      "item": {
        "type": "paragraph",
        "id": "2d0acd2fee7abcf7",
        "text": "1. Use `Decode.field` or `Decode.at` to extract the relevant JSON value based on a condition."
      },
      "date": 1693515835922
    },
    {
      "type": "add",
      "id": "a75e2e6a72e06bb5",
      "item": {
        "type": "paragraph",
        "id": "a75e2e6a72e06bb5",
        "text": "2. Use `Decode.andThen` to apply a custom decoding function based on the condition."
      },
      "after": "2d0acd2fee7abcf7",
      "date": 1693515836500
    },
    {
      "type": "edit",
      "id": "90c85d61029fa16f",
      "item": {
        "type": "paragraph",
        "id": "90c85d61029fa16f",
        "text": "3. Inside the custom decoding function, you can implement your conditional logic and return the appropriate decoder.\n\nHere's an example of how you might use this approach:\n\n```elm\nimport Json.Decode exposing (Decoder, int, string, andThen, oneOf, succeed)\n\ntype Person\n    = Adult String Int\n    | Child String\n\npersonDecoder : Decoder Person\npersonDecoder =\n    andThen decodePersonType (Decode.field \"type\" string)\n\ndecodePersonType : String -> Decoder Person\ndecodePersonType personType =\n    case personType of\n        \"adult\" ->\n            succeed Adult\n                |> andThen (\\name -> Decode.field \"age\" int |> map (\\age -> Adult name age))\n\n        \"child\" ->\n            Decode.field \"name\" string\n                |> map Child\n\n        _ ->\n            fail (\"Unknown person type: \" ++ personType)\n\n-- Usage\njson1 : String\njson1 = \"\"\"\n    { \"type\": \"adult\", \"name\": \"Alice\", \"age\": 30 }\n\"\"\"\n\njson2 : String\njson2 = \"\"\"\n    { \"type\": \"child\", \"name\": \"Bob\" }\n\"\"\"\n\ndecodeJson1 : Result String Person\ndecodeJson1 =\n    Json.Decode.decodeString personDecoder json1\n\ndecodeJson2 : Result String Person\ndecodeJson2 =\n    Json.Decode.decodeString personDecoder json2\n```\n\nIn this example, we have a JSON object with a \"type\" field that determines whether it's an \"adult\" or a \"child.\" We use `andThen` and a custom decoding function, `decodePersonType`, to conditionally choose the appropriate decoder based on the \"type\" field."
      },
      "date": 1693515847118
    },
    {
      "type": "add",
      "id": "f6483e075d9cab21",
      "item": {
        "type": "paragraph",
        "id": "f6483e075d9cab21",
        "text": "This approach allows you to implement custom conditional decoding logic based on the JSON data you receive. You can adjust the custom decoding function and conditions as needed for your specific use case."
      },
      "after": "90c85d61029fa16f",
      "date": 1693515848822
    },
    {
      "type": "edit",
      "id": "90c85d61029fa16f",
      "item": {
        "type": "paragraph",
        "id": "90c85d61029fa16f",
        "text": "3. Inside the custom decoding function, you can implement your conditional logic and return the appropriate decoder.\n\nHere's an example of how you might use this approach:\n\n```elm\nimport Json.Decode exposing (Decoder, int, string, andThen, oneOf, succeed)\n\ntype Person\n    = Adult String Int\n    | Child String\n\npersonDecoder : Decoder Person\npersonDecoder =\n    andThen decodePersonType (Decode.field \"type\" string)\n\ndecodePersonType : String -> Decoder Person\ndecodePersonType personType =\n    case personType of\n        \"adult\" ->\n            succeed Adult\n                |> andThen (\\name -> Decode.field \"age\" int |> map (\\age -> Adult name age))\n\n        \"child\" ->\n            Decode.field \"name\" string\n                |> map Child\n\n        _ ->\n            fail (\"Unknown person type: \" ++ personType)\n\n-- Usage\njson1 : String\njson1 = \"\"\"\n    { \"type\": \"adult\", \"name\": \"Alice\", \"age\": 30 }\n\"\"\"\n\njson2 : String\njson2 = \"\"\"\n    { \"type\": \"child\", \"name\": \"Bob\" }\n\"\"\"\n\ndecodeJson1 : Result String Person\ndecodeJson1 =\n    Json.Decode.decodeString personDecoder json1\n\ndecodeJson2 : Result String Person\ndecodeJson2 =\n    Json.Decode.decodeString personDecoder json2\n```"
      },
      "date": 1693515852166
    },
    {
      "type": "add",
      "id": "c0fa295f5d7fa117",
      "item": {
        "type": "paragraph",
        "id": "c0fa295f5d7fa117",
        "text": "In this example, we have a JSON object with a \"type\" field that determines whether it's an \"adult\" or a \"child.\" We use `andThen` and a custom decoding function, `decodePersonType`, to conditionally choose the appropriate decoder based on the \"type\" field."
      },
      "after": "90c85d61029fa16f",
      "date": 1693515853458
    },
    {
      "type": "remove",
      "id": "90c85d61029fa16f",
      "date": 1693515860584
    },
    {
      "item": {
        "type": "factory",
        "id": "21b265cc22358ec9"
      },
      "id": "21b265cc22358ec9",
      "type": "add",
      "after": "f6483e075d9cab21",
      "date": 1693515860711
    },
    {
      "id": "21b265cc22358ec9",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "524060b743c3f54c",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89",
        "35a8e7012cdd4ca6",
        "a1feaab0de8bae8c",
        "3c07086cb80eedeb",
        "2853ca7d31669cf9",
        "7172f4e98b12d73b",
        "2fe6f33cb70932f6",
        "f725ff226b5ef1a0",
        "b9a56ea38aa9211a",
        "1445b539b2fe3f2b",
        "045f0f4638aa4f8a",
        "bdcb0c1c60f7dffb",
        "5bf0dc39208b3394",
        "4a99b4e1d2864962",
        "d4e8f77ca72b0aa0",
        "24c1190344e011c2",
        "33abfa5b728078bc",
        "e582ba4872871d9b",
        "7d7772998f5bfdd5",
        "c4f2227fb6fda958",
        "2d0acd2fee7abcf7",
        "a75e2e6a72e06bb5",
        "21b265cc22358ec9",
        "c0fa295f5d7fa117",
        "f6483e075d9cab21"
      ],
      "date": 1693515864251
    },
    {
      "type": "edit",
      "id": "21b265cc22358ec9",
      "item": {
        "type": "code",
        "id": "21b265cc22358ec9",
        "text": "3. Inside the custom decoding function, you can implement your conditional logic and return the appropriate decoder.\n\nHere's an example of how you might use this approach:\n\n```elm\nimport Json.Decode exposing (Decoder, int, string, andThen, oneOf, succeed)\n\ntype Person\n    = Adult String Int\n    | Child String\n\npersonDecoder : Decoder Person\npersonDecoder =\n    andThen decodePersonType (Decode.field \"type\" string)\n\ndecodePersonType : String -> Decoder Person\ndecodePersonType personType =\n    case personType of\n        \"adult\" ->\n            succeed Adult\n                |> andThen (\\name -> Decode.field \"age\" int |> map (\\age -> Adult name age))\n\n        \"child\" ->\n            Decode.field \"name\" string\n                |> map Child\n\n        _ ->\n            fail (\"Unknown person type: \" ++ personType)\n\n-- Usage\njson1 : String\njson1 = \"\"\"\n    { \"type\": \"adult\", \"name\": \"Alice\", \"age\": 30 }\n\"\"\"\n\njson2 : String\njson2 = \"\"\"\n    { \"type\": \"child\", \"name\": \"Bob\" }\n\"\"\"\n\ndecodeJson1 : Result String Person\ndecodeJson1 =\n    Json.Decode.decodeString personDecoder json1\n\ndecodeJson2 : Result String Person\ndecodeJson2 =\n    Json.Decode.decodeString personDecoder json2\n```"
      },
      "date": 1693515866086
    },
    {
      "type": "edit",
      "id": "21b265cc22358ec9",
      "item": {
        "type": "code",
        "id": "21b265cc22358ec9",
        "text": "\n\nHere's an example of how you might use this approach:\n\n```elm\nimport Json.Decode exposing (Decoder, int, string, andThen, oneOf, succeed)\n\ntype Person\n    = Adult String Int\n    | Child String\n\npersonDecoder : Decoder Person\npersonDecoder =\n    andThen decodePersonType (Decode.field \"type\" string)\n\ndecodePersonType : String -> Decoder Person\ndecodePersonType personType =\n    case personType of\n        \"adult\" ->\n            succeed Adult\n                |> andThen (\\name -> Decode.field \"age\" int |> map (\\age -> Adult name age))\n\n        \"child\" ->\n            Decode.field \"name\" string\n                |> map Child\n\n        _ ->\n            fail (\"Unknown person type: \" ++ personType)\n\n-- Usage\njson1 : String\njson1 = \"\"\"\n    { \"type\": \"adult\", \"name\": \"Alice\", \"age\": 30 }\n\"\"\"\n\njson2 : String\njson2 = \"\"\"\n    { \"type\": \"child\", \"name\": \"Bob\" }\n\"\"\"\n\ndecodeJson1 : Result String Person\ndecodeJson1 =\n    Json.Decode.decodeString personDecoder json1\n\ndecodeJson2 : Result String Person\ndecodeJson2 =\n    Json.Decode.decodeString personDecoder json2\n```"
      },
      "date": 1693515873524
    },
    {
      "type": "add",
      "id": "9f320c68d1cb6d23",
      "item": {
        "type": "paragraph",
        "id": "9f320c68d1cb6d23",
        "text": "3. Inside the custom decoding function, you can implement your conditional logic and return the appropriate decoder."
      },
      "after": "a75e2e6a72e06bb5",
      "date": 1693515876425
    },
    {
      "type": "edit",
      "id": "21b265cc22358ec9",
      "item": {
        "type": "code",
        "id": "21b265cc22358ec9",
        "text": "import Json.Decode exposing (Decoder, int, string, andThen, oneOf, succeed)\n\ntype Person\n    = Adult String Int\n    | Child String\n\npersonDecoder : Decoder Person\npersonDecoder =\n    andThen decodePersonType (Decode.field \"type\" string)\n\ndecodePersonType : String -> Decoder Person\ndecodePersonType personType =\n    case personType of\n        \"adult\" ->\n            succeed Adult\n                |> andThen (\\name -> Decode.field \"age\" int |> map (\\age -> Adult name age))\n\n        \"child\" ->\n            Decode.field \"name\" string\n                |> map Child\n\n        _ ->\n            fail (\"Unknown person type: \" ++ personType)\n\n-- Usage\njson1 : String\njson1 = \"\"\"\n    { \"type\": \"adult\", \"name\": \"Alice\", \"age\": 30 }\n\"\"\"\n\njson2 : String\njson2 = \"\"\"\n    { \"type\": \"child\", \"name\": \"Bob\" }\n\"\"\"\n\ndecodeJson1 : Result String Person\ndecodeJson1 =\n    Json.Decode.decodeString personDecoder json1\n\ndecodeJson2 : Result String Person\ndecodeJson2 =\n    Json.Decode.decodeString personDecoder json2\n```"
      },
      "date": 1693515894998
    },
    {
      "type": "add",
      "id": "a05031579e637dfe",
      "item": {
        "type": "paragraph",
        "id": "a05031579e637dfe",
        "text": "Here's an example of how you might use this approach:\n"
      },
      "after": "9f320c68d1cb6d23",
      "date": 1693515900434
    },
    {
      "type": "edit",
      "id": "a05031579e637dfe",
      "item": {
        "type": "paragraph",
        "id": "a05031579e637dfe",
        "text": "Here's an example of how you might use this approach:"
      },
      "date": 1693515903192
    },
    {
      "type": "edit",
      "id": "2853ca7d31669cf9",
      "item": {
        "type": "code",
        "id": "2853ca7d31669cf9",
        "text": "eventDecoder : Decode.Decoder Event\neventDecoder =\n    Decode.oneOf\n        [ Decode.map Create createEventDecoder\n        , Decode.map AddFactory addFactoryEventDecoder\n        , Decode.map Edit editEventDecoder\n\n        -- Add decoders for other journal event variants as needed\n        ]\n"
      },
      "date": 1693518388817
    },
    {
      "type": "remove",
      "id": "7172f4e98b12d73b",
      "date": 1693518410482
    },
    {
      "type": "remove",
      "id": "2fe6f33cb70932f6",
      "date": 1693518412430
    },
    {
      "type": "remove",
      "id": "f725ff226b5ef1a0",
      "date": 1693518414865
    },
    {
      "type": "edit",
      "id": "b9a56ea38aa9211a",
      "item": {
        "type": "paragraph",
        "id": "b9a56ea38aa9211a",
        "text": "Json.Decode.andThen [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#andThen page] –  Create decoders that depend on previous results. "
      },
      "date": 1693518439100
    },
    {
      "id": "b9a56ea38aa9211a",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "524060b743c3f54c",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89",
        "35a8e7012cdd4ca6",
        "a1feaab0de8bae8c",
        "3c07086cb80eedeb",
        "b9a56ea38aa9211a",
        "2853ca7d31669cf9",
        "1445b539b2fe3f2b",
        "045f0f4638aa4f8a",
        "bdcb0c1c60f7dffb",
        "5bf0dc39208b3394",
        "4a99b4e1d2864962",
        "d4e8f77ca72b0aa0",
        "24c1190344e011c2",
        "33abfa5b728078bc",
        "e582ba4872871d9b",
        "7d7772998f5bfdd5",
        "c4f2227fb6fda958",
        "2d0acd2fee7abcf7",
        "a75e2e6a72e06bb5",
        "9f320c68d1cb6d23",
        "a05031579e637dfe",
        "21b265cc22358ec9",
        "c0fa295f5d7fa117",
        "f6483e075d9cab21"
      ],
      "date": 1693518441944
    },
    {
      "type": "remove",
      "id": "1445b539b2fe3f2b",
      "date": 1693518445049
    },
    {
      "type": "remove",
      "id": "bdcb0c1c60f7dffb",
      "date": 1693518450830
    },
    {
      "type": "remove",
      "id": "5bf0dc39208b3394",
      "date": 1693518453214
    },
    {
      "type": "remove",
      "id": "4a99b4e1d2864962",
      "date": 1693518455457
    },
    {
      "type": "remove",
      "id": "d4e8f77ca72b0aa0",
      "date": 1693518456890
    },
    {
      "type": "remove",
      "id": "24c1190344e011c2",
      "date": 1693518458433
    },
    {
      "type": "remove",
      "id": "33abfa5b728078bc",
      "date": 1693518460434
    },
    {
      "type": "remove",
      "id": "e582ba4872871d9b",
      "date": 1693518461957
    },
    {
      "type": "remove",
      "id": "7d7772998f5bfdd5",
      "date": 1693518464708
    },
    {
      "type": "remove",
      "id": "c4f2227fb6fda958",
      "date": 1693518466280
    },
    {
      "type": "remove",
      "id": "2d0acd2fee7abcf7",
      "date": 1693518468042
    },
    {
      "type": "remove",
      "id": "a75e2e6a72e06bb5",
      "date": 1693518470014
    },
    {
      "type": "remove",
      "id": "9f320c68d1cb6d23",
      "date": 1693518471716
    },
    {
      "type": "remove",
      "id": "a05031579e637dfe",
      "date": 1693518475248
    },
    {
      "type": "remove",
      "id": "21b265cc22358ec9",
      "date": 1693518477232
    },
    {
      "type": "remove",
      "id": "c0fa295f5d7fa117",
      "date": 1693518478741
    },
    {
      "type": "remove",
      "id": "f6483e075d9cab21",
      "date": 1693518480164
    },
    {
      "type": "edit",
      "id": "b9a56ea38aa9211a",
      "item": {
        "type": "paragraph",
        "id": "b9a56ea38aa9211a",
        "text": "Json.Decode.oneOf [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#oneOfl page] –  Create decoders that depend on previous results. "
      },
      "date": 1693518517046
    },
    {
      "type": "edit",
      "id": "b9a56ea38aa9211a",
      "item": {
        "type": "paragraph",
        "id": "b9a56ea38aa9211a",
        "text": "Json.Decode.oneOf [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#oneOfpage] –  Create decoders that depend on previous results. "
      },
      "date": 1693518540727
    },
    {
      "type": "edit",
      "id": "b9a56ea38aa9211a",
      "item": {
        "type": "paragraph",
        "id": "b9a56ea38aa9211a",
        "text": "Json.Decode.oneOf [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#oneOf page] –  Create decoders that depend on previous results. "
      },
      "date": 1693518545236
    },
    {
      "type": "edit",
      "id": "b9a56ea38aa9211a",
      "item": {
        "type": "paragraph",
        "id": "b9a56ea38aa9211a",
        "text": "Json.Decode.oneOf [https://package.elm-lang.org/packages/elm/json/latest/Json-Decode#oneOf page] –  Try a bunch of different decoders. This can be useful if the JSON may come in a couple different formats."
      },
      "date": 1693518569904
    },
    {
      "item": {
        "type": "factory",
        "id": "71a5054fdf5bbd2c"
      },
      "id": "71a5054fdf5bbd2c",
      "type": "add",
      "after": "045f0f4638aa4f8a",
      "date": 1693518588382
    },
    {
      "id": "71a5054fdf5bbd2c",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "524060b743c3f54c",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89",
        "35a8e7012cdd4ca6",
        "a1feaab0de8bae8c",
        "3c07086cb80eedeb",
        "b9a56ea38aa9211a",
        "2853ca7d31669cf9",
        "71a5054fdf5bbd2c",
        "045f0f4638aa4f8a"
      ],
      "date": 1693518592019
    },
    {
      "type": "edit",
      "id": "71a5054fdf5bbd2c",
      "item": {
        "type": "pagefold",
        "id": "71a5054fdf5bbd2c",
        "text": "~"
      },
      "date": 1693518597433
    },
    {
      "type": "add",
      "id": "b46303b9b72e082a",
      "item": {
        "type": "paragraph",
        "id": "b46303b9b72e082a",
        "text": "makes ✗ Add Factory (decoder)"
      },
      "after": "b9a56ea38aa9211a",
      "date": 1693518636089
    },
    {
      "id": "b46303b9b72e082a",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "524060b743c3f54c",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89",
        "35a8e7012cdd4ca6",
        "a1feaab0de8bae8c",
        "3c07086cb80eedeb",
        "b9a56ea38aa9211a",
        "2853ca7d31669cf9",
        "b46303b9b72e082a",
        "71a5054fdf5bbd2c",
        "045f0f4638aa4f8a"
      ],
      "date": 1693518638067
    },
    {
      "type": "edit",
      "id": "b46303b9b72e082a",
      "item": {
        "type": "paragraph",
        "id": "b46303b9b72e082a",
        "text": "The code above makes ✗ Add Factory (decoder) and fail."
      },
      "date": 1693518653703
    },
    {
      "type": "edit",
      "id": "b46303b9b72e082a",
      "item": {
        "type": "paragraph",
        "id": "b46303b9b72e082a",
        "text": "The code above makes ✗ Add Factory (decoder) and ✗ Add Paragraph (decoder)fail."
      },
      "date": 1693518661221
    },
    {
      "type": "edit",
      "id": "b46303b9b72e082a",
      "item": {
        "type": "paragraph",
        "id": "b46303b9b72e082a",
        "text": "The code above makes ✗ Add Factory (decoder) and ✗ Add Paragraph (decoder) fail."
      },
      "date": 1693518666338
    },
    {
      "type": "add",
      "id": "049835917cc48d9f",
      "item": {
        "type": "paragraph",
        "id": "049835917cc48d9f",
        "text": "n both cases, the issue might not necessarily be in your Elm code but could be related to the test data you're providing. Double-check that your test data accurately reflects the scenarios you're testing. If you believe the issue is within your Elm code, please provide more details about your test data and how you're running the tests so that I can provide further assistance."
      },
      "after": "b46303b9b72e082a",
      "date": 1693518818723
    },
    {
      "type": "edit",
      "id": "049835917cc48d9f",
      "item": {
        "type": "paragraph",
        "id": "049835917cc48d9f",
        "text": "In both cases, the issue might not necessarily be in your Elm code but could be related to the test data you're providing. Double-check that your test data accurately reflects the scenarios you're testing. If you believe the issue is within your Elm code, please provide more details about your test data and how you're running the tests so that I can provide further assistance."
      },
      "date": 1693518822939
    },
    {
      "type": "edit",
      "id": "049835917cc48d9f",
      "item": {
        "type": "paragraph",
        "id": "049835917cc48d9f",
        "text": "In both cases, the issue might not necessarily be in your Elm code but could be related to the test data you're providing. Double-check that your test data accurately reflects the scenarios you're testing. If you believe the issue is within your Elm code, please provide more details about your test data and how you're running the tests so that I can provide further assistance. ()"
      },
      "date": 1693518837978
    },
    {
      "type": "edit",
      "id": "049835917cc48d9f",
      "item": {
        "type": "paragraph",
        "id": "049835917cc48d9f",
        "text": "In both cases, the issue might not necessarily be in your Elm code but could be related to the test data you're providing. Double-check that your test data accurately reflects the scenarios you're testing. If you believe the issue is within your Elm code, please provide more details about your test data and how you're running the tests so that I can provide further assistance. (ChatGPT August 3 Version)"
      },
      "date": 1693518848634
    },
    {
      "type": "edit",
      "id": "049835917cc48d9f",
      "item": {
        "type": "paragraph",
        "id": "049835917cc48d9f",
        "text": "In both cases, the issue might not necessarily be in your Elm code but could be related to the test data you're providing. Double-check that your test data accurately reflects the scenarios you're testing. If you believe the issue is within your Elm code, please provide more details about your test data and how you're running the tests so that I (ChatGPT August 3 Version)can provide further assistance. "
      },
      "date": 1693518884782
    },
    {
      "type": "edit",
      "id": "049835917cc48d9f",
      "item": {
        "type": "paragraph",
        "id": "049835917cc48d9f",
        "text": "In both cases, the issue might not necessarily be in your Elm code but could be related to the test data you're providing. Double-check that your test data accurately reflects the scenarios you're testing. If you believe the issue is within your Elm code, please provide more details about your test data and how you're running the tests so that I (ChatGPT August 3 Version) can provide further assistance. "
      },
      "date": 1693518890472
    },
    {
      "item": {
        "type": "factory",
        "id": "41d001b42826ae99"
      },
      "id": "41d001b42826ae99",
      "type": "add",
      "after": "045f0f4638aa4f8a",
      "date": 1693518995746
    },
    {
      "id": "41d001b42826ae99",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "524060b743c3f54c",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89",
        "35a8e7012cdd4ca6",
        "a1feaab0de8bae8c",
        "3c07086cb80eedeb",
        "b9a56ea38aa9211a",
        "2853ca7d31669cf9",
        "b46303b9b72e082a",
        "049835917cc48d9f",
        "41d001b42826ae99",
        "71a5054fdf5bbd2c",
        "045f0f4638aa4f8a"
      ],
      "date": 1693519000006
    },
    {
      "type": "remove",
      "id": "41d001b42826ae99",
      "date": 1693519005901
    },
    {
      "item": {
        "type": "factory",
        "id": "d74df99329456547"
      },
      "id": "d74df99329456547",
      "type": "add",
      "after": "045f0f4638aa4f8a",
      "date": 1693519008336
    },
    {
      "id": "d74df99329456547",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "524060b743c3f54c",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89",
        "35a8e7012cdd4ca6",
        "a1feaab0de8bae8c",
        "3c07086cb80eedeb",
        "b9a56ea38aa9211a",
        "2853ca7d31669cf9",
        "b46303b9b72e082a",
        "049835917cc48d9f",
        "d74df99329456547",
        "71a5054fdf5bbd2c",
        "045f0f4638aa4f8a"
      ],
      "date": 1693519011935
    },
    {
      "type": "edit",
      "id": "d74df99329456547",
      "item": {
        "type": "code",
        "id": "d74df99329456547",
        "text": "https://wiki.ralfbarkow.ch/create-new-page-test.json"
      },
      "date": 1693519013717
    },
    {
      "type": "edit",
      "id": "049835917cc48d9f",
      "item": {
        "type": "paragraph",
        "id": "049835917cc48d9f",
        "text": "In both cases, the issue might not necessarily be in your Elm code but could be related to the test data you're providing. Double-check that your test data accurately reflects the scenarios you're testing. If you believe the issue is within your Elm code, please provide more details about your test data and how you're running the tests so that I (ChatGPT August 3 Version) can provide further assistance."
      },
      "date": 1693519244639
    },
    {
      "type": "add",
      "id": "777835e31335d584",
      "item": {
        "type": "paragraph",
        "id": "777835e31335d584",
        "text": "add paragraph"
      },
      "after": "049835917cc48d9f",
      "date": 1693519249192
    },
    {
      "id": "777835e31335d584",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "524060b743c3f54c",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89",
        "35a8e7012cdd4ca6",
        "a1feaab0de8bae8c",
        "3c07086cb80eedeb",
        "b9a56ea38aa9211a",
        "2853ca7d31669cf9",
        "b46303b9b72e082a",
        "049835917cc48d9f",
        "d74df99329456547",
        "777835e31335d584",
        "71a5054fdf5bbd2c",
        "045f0f4638aa4f8a"
      ],
      "date": 1693519251480
    },
    {
      "type": "add",
      "id": "639cc5b9510c47a1",
      "item": {
        "type": "paragraph",
        "id": "639cc5b9510c47a1",
        "text": "[[Conventional Commits]]"
      },
      "after": "777835e31335d584",
      "date": 1693519973813
    },
    {
      "type": "edit",
      "id": "639cc5b9510c47a1",
      "item": {
        "type": "paragraph",
        "id": "639cc5b9510c47a1",
        "text": "⇒ [[Conventional Commits]]"
      },
      "date": 1693519991480
    },
    {
      "type": "add",
      "id": "f429be7c4ddc5152",
      "item": {
        "type": "paragraph",
        "id": "f429be7c4ddc5152",
        "text": "fix: Add Factory (decoder) (GREEN phase)"
      },
      "after": "639cc5b9510c47a1",
      "date": 1693520092125
    },
    {
      "type": "add",
      "id": "cad7c4523707f1c2",
      "item": {
        "type": "paragraph",
        "id": "cad7c4523707f1c2",
        "text": "[[create-new-page]]"
      },
      "after": "777835e31335d584",
      "date": 1693520104156
    },
    {
      "type": "edit",
      "id": "cad7c4523707f1c2",
      "item": {
        "type": "paragraph",
        "id": "cad7c4523707f1c2",
        "text": "[[create-new-page-test"
      },
      "date": 1693520111453
    },
    {
      "type": "add",
      "id": "03acb3a76598875d",
      "item": {
        "type": "paragraph",
        "id": "03acb3a76598875d",
        "text": "]]"
      },
      "after": "cad7c4523707f1c2",
      "date": 1693520113006
    },
    {
      "type": "remove",
      "id": "03acb3a76598875d",
      "date": 1693520118107
    },
    {
      "type": "edit",
      "id": "cad7c4523707f1c2",
      "item": {
        "type": "paragraph",
        "id": "cad7c4523707f1c2",
        "text": "[[create-new-page-test]]"
      },
      "date": 1693520118599
    },
    {
      "id": "777835e31335d584",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "524060b743c3f54c",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89",
        "35a8e7012cdd4ca6",
        "a1feaab0de8bae8c",
        "3c07086cb80eedeb",
        "b9a56ea38aa9211a",
        "2853ca7d31669cf9",
        "b46303b9b72e082a",
        "049835917cc48d9f",
        "d74df99329456547",
        "cad7c4523707f1c2",
        "639cc5b9510c47a1",
        "f429be7c4ddc5152",
        "777835e31335d584",
        "71a5054fdf5bbd2c",
        "045f0f4638aa4f8a"
      ],
      "date": 1693520169359
    },
    {
      "id": "777835e31335d584",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "524060b743c3f54c",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89",
        "35a8e7012cdd4ca6",
        "a1feaab0de8bae8c",
        "3c07086cb80eedeb",
        "b9a56ea38aa9211a",
        "2853ca7d31669cf9",
        "b46303b9b72e082a",
        "049835917cc48d9f",
        "d74df99329456547",
        "777835e31335d584",
        "cad7c4523707f1c2",
        "639cc5b9510c47a1",
        "f429be7c4ddc5152",
        "71a5054fdf5bbd2c",
        "045f0f4638aa4f8a"
      ],
      "date": 1693520173092
    },
    {
      "type": "edit",
      "id": "cad7c4523707f1c2",
      "item": {
        "type": "paragraph",
        "id": "cad7c4523707f1c2",
        "text": "⇒ [[Create New Page Test]]"
      },
      "date": 1693520201775
    },
    {
      "type": "edit",
      "id": "cad7c4523707f1c2",
      "item": {
        "type": "paragraph",
        "id": "cad7c4523707f1c2",
        "text": "⇒ [[Create New Page Test]] after add paragraph"
      },
      "date": 1693520215692
    },
    {
      "type": "remove",
      "id": "777835e31335d584",
      "date": 1693520216556
    },
    {
      "type": "edit",
      "id": "cad7c4523707f1c2",
      "item": {
        "type": "paragraph",
        "id": "cad7c4523707f1c2",
        "text": "⇒ [[Create New Page Test]] after \"+\"/\"add paragraph\" clicked"
      },
      "date": 1693520248103
    },
    {
      "type": "edit",
      "id": "cad7c4523707f1c2",
      "item": {
        "type": "paragraph",
        "id": "cad7c4523707f1c2",
        "text": "⇒ [[Create New Page Test]] after \"+\"/\"add paragraph\" has been clicked."
      },
      "date": 1693520279713
    },
    {
      "item": {
        "type": "factory",
        "id": "edb9b9ecb45d70b5"
      },
      "id": "edb9b9ecb45d70b5",
      "type": "add",
      "after": "045f0f4638aa4f8a",
      "date": 1693520320237
    },
    {
      "id": "edb9b9ecb45d70b5",
      "type": "move",
      "order": [
        "1b2378adcb99c95e",
        "264998451e5a872b",
        "839b91af74945d0d",
        "9c013c8889a10fd8",
        "08bcffe5d389c58e",
        "cf6be46f209c3e53",
        "23c162ffcb07c53e",
        "3805c17de3a07227",
        "882685649324fc74",
        "7682946f0c1b4e35",
        "6da906ab1ecdcfe1",
        "b75ca31a68bed55d",
        "417aa683ee31c16d",
        "a6ac320432784bf5",
        "2b53c98c96334be2",
        "e4c84d9c07a9bbcc",
        "4a8cfeee84a18f4a",
        "2483b53f75047d9a",
        "fa69092fe5a45f5b",
        "a8db4d79e1d3e5a6",
        "59e0416015fd151d",
        "8b9157b74bb859de",
        "af42f0db23d0e2d9",
        "43d5f61c6422cbb0",
        "407dff3a7ba8f494",
        "e24b6c452851f4ab",
        "ffbf1e7009afdfb1",
        "7b37f7a0dda5e09a",
        "375f88e1a1745a57",
        "8a910543734bf9cf",
        "59104990139758518272",
        "29797637607731564544",
        "995571279fe2877e",
        "4d115958427c9478",
        "6ca2e65489fc8938",
        "7d783bf30a1a0f50",
        "dd3d3b59b590730a",
        "fe28f9bfde52be73",
        "c0a49fd749c61109",
        "23b55c53e71c8d29",
        "3208e5394b90bbb6",
        "dbf92811ef4363c2",
        "c7a78c690a872d40",
        "93041ef4c29de732",
        "c3add8fbc1d3a102",
        "bbb128b7c6267a58",
        "f298c8fdfcaf096c",
        "d10c9c4fae87576f",
        "afc8ab0428e79cba",
        "da922fa28bda2346",
        "36a2f15cdd0af389",
        "0130a9be00f16f79",
        "86fe1a83b15a00f4",
        "9431a80c81ed5296",
        "3a34fc6d30b2c273",
        "c54ccba5595ae814",
        "0e586c394b209cde",
        "d2ee6d0900ca25e3",
        "5e015ab852a520f1",
        "48b78a673ebd1bed",
        "ed5e3c155c40b1ad",
        "f432fec9989d316a",
        "c541ff3d2c9fe62c",
        "ce2e8bb097266c4b",
        "d787690c8ccef785",
        "31fd81b22d33968b",
        "4a40db19fa4cfd7b",
        "35b69d1f133fca89",
        "77b60ffc1ae7fccc",
        "3db4b679d5a9155c",
        "58c58bc6ee9209f7",
        "e0c98635a2b56a58",
        "34cf96b4abc209c5",
        "bbfcb83a27ee8c33",
        "524060b743c3f54c",
        "53d323bf56613257",
        "660e9e63e3cc56b7",
        "3910bfd2082210f5",
        "f42ae38659c3cd89",
        "35a8e7012cdd4ca6",
        "a1feaab0de8bae8c",
        "3c07086cb80eedeb",
        "b9a56ea38aa9211a",
        "2853ca7d31669cf9",
        "b46303b9b72e082a",
        "049835917cc48d9f",
        "d74df99329456547",
        "cad7c4523707f1c2",
        "edb9b9ecb45d70b5",
        "639cc5b9510c47a1",
        "f429be7c4ddc5152",
        "71a5054fdf5bbd2c",
        "045f0f4638aa4f8a"
      ],
      "date": 1693520324672
    },
    {
      "type": "edit",
      "id": "edb9b9ecb45d70b5",
      "item": {
        "type": "code",
        "id": "edb9b9ecb45d70b5",
        "text": "storyDecoder : Decode.Decoder Story\nstoryDecoder =\n    Decode.oneOf\n        [ Decode.map Future futureEventDecoder\n        , Decode.map Factory addFactoryItemDecoder\n        , Decode.map Paragraph paragraphItemDecoder\n        , Decode.map (\\_ -> EmptyStory) (Decode.succeed EmptyStory)\n        ]\n"
      },
      "date": 1693520326396
    },
    {
      "type": "add",
      "id": "70adf620c60c313d",
      "item": {
        "type": "paragraph",
        "id": "70adf620c60c313d",
        "text": "We fix storyDecoder by adding         , Decode.map Factory addFactoryItemDecoder\n"
      },
      "after": "cad7c4523707f1c2",
      "date": 1693520386685
    },
    {
      "type": "edit",
      "id": "70adf620c60c313d",
      "item": {
        "type": "paragraph",
        "id": "70adf620c60c313d",
        "text": "We fix storyDecoder by adding \", Decode.map Factory addFactoryItemDecoder\":\n"
      },
      "date": 1693520404660
    },
    {
      "type": "edit",
      "id": "f429be7c4ddc5152",
      "item": {
        "type": "paragraph",
        "id": "f429be7c4ddc5152",
        "text": "fix(storyDecoder): Add Factory (decoder) (GREEN phase)"
      },
      "date": 1693520532453
    },
    {
      "type": "edit",
      "id": "f429be7c4ddc5152",
      "item": {
        "type": "paragraph",
        "id": "f429be7c4ddc5152",
        "text": "fix(storyDecoder): Add Factory (decoder) test (GREEN phase)"
      },
      "date": 1693520542476
    },
    {
      "type": "edit",
      "id": "b46303b9b72e082a",
      "item": {
        "type": "paragraph",
        "id": "b46303b9b72e082a",
        "text": "The code above makes ✗ Add Factory (decoder) and ✗ Add Paragraph (decoder) tests fail."
      },
      "date": 1693522461396
    },
    {
      "type": "edit",
      "id": "70adf620c60c313d",
      "item": {
        "type": "paragraph",
        "id": "70adf620c60c313d",
        "text": "We fix storyDecoder by adding \", Decode.map Factory addFactoryItemDecoder\": [https://github.com/dreyeck/blog/commit/17361252d2b9948a64116e684192b51b30877b8a commit]\n"
      },
      "date": 1693522589326
    },
    {
      "type": "edit",
      "id": "f429be7c4ddc5152",
      "item": {
        "type": "paragraph",
        "id": "f429be7c4ddc5152",
        "text": "fix(storyDecoder): Add Factory (decoder) test (GREEN phase) [https://github.com/dreyeck/blog/commit/f284354a30615f43417e15aa871fe7ff20dbbff7 commit]"
      },
      "date": 1693522706063
    },
    {
      "type": "edit",
      "id": "f429be7c4ddc5152",
      "item": {
        "type": "paragraph",
        "id": "f429be7c4ddc5152",
        "text": " fix(storyDecoder, eventDecoder): Add Paragraph (decoder) test (GREEN …\n\n…phase) [https://github.com/dreyeck/blog/commit/f284354a30615f43417e15aa871fe7ff20dbbff7 commit]"
      },
      "date": 1693523550528
    },
    {
      "type": "edit",
      "id": "f429be7c4ddc5152",
      "item": {
        "type": "paragraph",
        "id": "f429be7c4ddc5152",
        "text": " fix(storyDecoder, eventDecoder): Add Paragraph (decoder) test (GREEN phase) [https://github.com/dreyeck/blog/commit/f284354a30615f43417e15aa871fe7ff20dbbff7 commit]"
      },
      "date": 1693523556907
    }
  ]
}