{
  "title": "NEST by John Waters",
  "story": [
    {
      "type": "markdown",
      "id": "aa68da434d77f97f",
      "text": "This is a description of a very simple ad hoc DBMS for open money and open measures tool sets.\n"
    },
    {
      "type": "markdown",
      "id": "600688d0e6e54e14",
      "text": "[https://nests.lrc.org.uk/ John's Website]"
    },
    {
      "type": "markdown",
      "id": "8cf50d974488df72",
      "text": "\nThis takes a minimalist approach, intended to support modelling, simulation and experimentation rather than a \"live\" system, and to serve as executable documentation to illustrate open money/measures principles.\n\nNevertheless, it may also serve to provide support for a real-world solution in the shorter term.\n\nRecursively nested namespaces each contain any number of named entities of the following types:\n\nnamespace - enclosing any entity type;\nprimary identities - a user identity registered uniquely within a namespaces (its registry);\nsecondary identity - an alias of a primary identities registered (with authorization) within another namespace;\ncurrency - a definition of a variable type associated with a set of accounts;\naccount - an instance of a currency owned by a primary identity or secondary identity;\nfunctions and operations on currency types; and\nsteward - a user exercising an authorization and supervisory role over\na currency and its users;\na namespace and the entities registered within it; and (by extension)\nthe entities (of whatever type) within the namespaces nested below it (the children/descendants) along with their stewards.\nCurrencies fall into two main sets:\n\nsimple currencies (characteristic of open money types), falling into two main sets:\nscalar; and\nmoney/monies - scalar values the instances (accounts) of which are operated upon in pairs (simultaneous addition to one and subtraction from the other by the same amount - a payment).\ncompound currencies (characteristic of open measures types), falling into several subsets:\nvectors (all elements are of the same type);\ntriggers - defining conditions for the invocation of functions;\nn-tuples (elements may be of any type and not necessarily of the same type);\ntime-series (pointers to bulk storage of time series ensembles); and\ntriggers (criteria for the initiation of actions).\nFunctions extend the basic operations associated with simple scalar currencies to work with vector and compound currencies.\n\nThis is a work in progress. For more detail see:\n\nNESTS in a nutshell (PDF)\nForthcoming changes to NESTS structure and internal representation.\nNESTS structure and internal representation.\nNESTS currencies and accounts internal representation.\nEntity dependencies.\nNESTS transaction loop.\nSimple payment options.\nSome components of a NESTS hub.\nSome simple use cases.\nA note on the movement, extension, excision and other modifications to namespace trees.\nA note on federation and stewardship.\nA note on scalability and distribution.\nShorter-term development roadmap for NESTS.\nNESTS CLI - list of command-line functions.\nNESTS simple Web interface.\nSome practical limitations imposed by the technology.\nThe source code (Python implementation - incomplete, and very much a work in progress)\nSee also openmoney.github.io/specification/ and openmoney.github.io/roadmap/ for more information.\n\nTomorrow, and tomorrow, and tomorrow, creeps in this petty pace from day to day, to the last syllable of recorded time ...\n\nVersion 0.0.16a - 2022-05-26 16.20 - Copyright © 2022, 2021 John Waters"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "NEST by John Waters",
        "story": []
      },
      "date": 1676156626873
    },
    {
      "type": "remove",
      "id": "db5c516f75881b1b",
      "date": 1676156631064
    },
    {
      "item": {
        "type": "factory",
        "id": "aa68da434d77f97f"
      },
      "id": "aa68da434d77f97f",
      "type": "add",
      "date": 1676156632597
    },
    {
      "type": "edit",
      "id": "aa68da434d77f97f",
      "item": {
        "type": "markdown",
        "id": "aa68da434d77f97f",
        "text": "This is a description of a very simple ad hoc DBMS for open money and open measures tool sets.\n\nThis takes a minimalist approach, intended to support modelling, simulation and experimentation rather than a \"live\" system, and to serve as executable documentation to illustrate open money/measures principles.\n\nNevertheless, it may also serve to provide support for a real-world solution in the shorter term.\n\nRecursively nested namespaces each contain any number of named entities of the following types:\n\nnamespace - enclosing any entity type;\nprimary identities - a user identity registered uniquely within a namespaces (its registry);\nsecondary identity - an alias of a primary identities registered (with authorization) within another namespace;\ncurrency - a definition of a variable type associated with a set of accounts;\naccount - an instance of a currency owned by a primary identity or secondary identity;\nfunctions and operations on currency types; and\nsteward - a user exercising an authorization and supervisory role over\na currency and its users;\na namespace and the entities registered within it; and (by extension)\nthe entities (of whatever type) within the namespaces nested below it (the children/descendants) along with their stewards.\nCurrencies fall into two main sets:\n\nsimple currencies (characteristic of open money types), falling into two main sets:\nscalar; and\nmoney/monies - scalar values the instances (accounts) of which are operated upon in pairs (simultaneous addition to one and subtraction from the other by the same amount - a payment).\ncompound currencies (characteristic of open measures types), falling into several subsets:\nvectors (all elements are of the same type);\ntriggers - defining conditions for the invocation of functions;\nn-tuples (elements may be of any type and not necessarily of the same type);\ntime-series (pointers to bulk storage of time series ensembles); and\ntriggers (criteria for the initiation of actions).\nFunctions extend the basic operations associated with simple scalar currencies to work with vector and compound currencies.\n\nThis is a work in progress. For more detail see:\n\nNESTS in a nutshell (PDF)\nForthcoming changes to NESTS structure and internal representation.\nNESTS structure and internal representation.\nNESTS currencies and accounts internal representation.\nEntity dependencies.\nNESTS transaction loop.\nSimple payment options.\nSome components of a NESTS hub.\nSome simple use cases.\nA note on the movement, extension, excision and other modifications to namespace trees.\nA note on federation and stewardship.\nA note on scalability and distribution.\nShorter-term development roadmap for NESTS.\nNESTS CLI - list of command-line functions.\nNESTS simple Web interface.\nSome practical limitations imposed by the technology.\nThe source code (Python implementation - incomplete, and very much a work in progress)\nSee also openmoney.github.io/specification/ and openmoney.github.io/roadmap/ for more information.\n\nTomorrow, and tomorrow, and tomorrow, creeps in this petty pace from day to day, to the last syllable of recorded time ...\n\nVersion 0.0.16a - 2022-05-26 16.20 - Copyright © 2022, 2021 John Waters"
      },
      "date": 1676156641487
    },
    {
      "item": {
        "type": "factory",
        "id": "600688d0e6e54e14"
      },
      "id": "600688d0e6e54e14",
      "type": "add",
      "after": "aa68da434d77f97f",
      "date": 1676156681916
    },
    {
      "type": "edit",
      "id": "600688d0e6e54e14",
      "item": {
        "type": "markdown",
        "id": "600688d0e6e54e14",
        "text": "[https://nests.lrc.org.uk/ John's Website]"
      },
      "date": 1676156706751
    },
    {
      "type": "edit",
      "id": "aa68da434d77f97f",
      "item": {
        "type": "markdown",
        "id": "aa68da434d77f97f",
        "text": "This is a description of a very simple ad hoc DBMS for open money and open measures tool sets.\n"
      },
      "date": 1676156715432
    },
    {
      "type": "add",
      "id": "8cf50d974488df72",
      "item": {
        "type": "markdown",
        "id": "8cf50d974488df72",
        "text": "\nThis takes a minimalist approach, intended to support modelling, simulation and experimentation rather than a \"live\" system, and to serve as executable documentation to illustrate open money/measures principles.\n\nNevertheless, it may also serve to provide support for a real-world solution in the shorter term.\n\nRecursively nested namespaces each contain any number of named entities of the following types:\n\nnamespace - enclosing any entity type;\nprimary identities - a user identity registered uniquely within a namespaces (its registry);\nsecondary identity - an alias of a primary identities registered (with authorization) within another namespace;\ncurrency - a definition of a variable type associated with a set of accounts;\naccount - an instance of a currency owned by a primary identity or secondary identity;\nfunctions and operations on currency types; and\nsteward - a user exercising an authorization and supervisory role over\na currency and its users;\na namespace and the entities registered within it; and (by extension)\nthe entities (of whatever type) within the namespaces nested below it (the children/descendants) along with their stewards.\nCurrencies fall into two main sets:\n\nsimple currencies (characteristic of open money types), falling into two main sets:\nscalar; and\nmoney/monies - scalar values the instances (accounts) of which are operated upon in pairs (simultaneous addition to one and subtraction from the other by the same amount - a payment).\ncompound currencies (characteristic of open measures types), falling into several subsets:\nvectors (all elements are of the same type);\ntriggers - defining conditions for the invocation of functions;\nn-tuples (elements may be of any type and not necessarily of the same type);\ntime-series (pointers to bulk storage of time series ensembles); and\ntriggers (criteria for the initiation of actions).\nFunctions extend the basic operations associated with simple scalar currencies to work with vector and compound currencies.\n\nThis is a work in progress. For more detail see:\n\nNESTS in a nutshell (PDF)\nForthcoming changes to NESTS structure and internal representation.\nNESTS structure and internal representation.\nNESTS currencies and accounts internal representation.\nEntity dependencies.\nNESTS transaction loop.\nSimple payment options.\nSome components of a NESTS hub.\nSome simple use cases.\nA note on the movement, extension, excision and other modifications to namespace trees.\nA note on federation and stewardship.\nA note on scalability and distribution.\nShorter-term development roadmap for NESTS.\nNESTS CLI - list of command-line functions.\nNESTS simple Web interface.\nSome practical limitations imposed by the technology.\nThe source code (Python implementation - incomplete, and very much a work in progress)\nSee also openmoney.github.io/specification/ and openmoney.github.io/roadmap/ for more information.\n\nTomorrow, and tomorrow, and tomorrow, creeps in this petty pace from day to day, to the last syllable of recorded time ...\n\nVersion 0.0.16a - 2022-05-26 16.20 - Copyright © 2022, 2021 John Waters"
      },
      "after": "aa68da434d77f97f",
      "date": 1676156716749
    },
    {
      "id": "600688d0e6e54e14",
      "type": "move",
      "order": [
        "aa68da434d77f97f",
        "600688d0e6e54e14",
        "8cf50d974488df72"
      ],
      "date": 1676156725970
    },
    {
      "type": "fork",
      "site": "marc.tries.fed.wiki",
      "date": 1677072453568
    }
  ]
}