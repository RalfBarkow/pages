{
  "title": "FatalError",
  "story": [
    {
      "type": "paragraph",
      "id": "a7153f0c2538a774",
      "text": "The [[Elm]] language doesn't have the concept of exceptions or special control flow for errors. It just has Custom Types, and by convention types like Result and the Err variant are used to represent possible failure states and combine together different error states. [https://package.elm-lang.org/packages/dillonkearns/elm-pages/10.0.1/FatalError page]"
    },
    {
      "type": "paragraph",
      "id": "1e958e0e26275930",
      "text": "[[elm-pages]] doesn't change that, Elm still doesn't have special exception control flow at the language level. It does have a type, which is just a regular old Elm type, called FatalError. Why? Because this plain old Elm type does have one special characteristic - the elm-pages framework knows how to turn it into an error message. This becomes interesting because an elm-pages app has several places that accept a value of type BackendTask FatalError.FatalError value. This design lets the elm-pages framework do some of the work for you."
    },
    {
      "type": "paragraph",
      "id": "3b0aa3ba31fada2a",
      "text": "[…]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "FatalError",
        "story": []
      },
      "date": 1693393291857
    },
    {
      "item": {
        "type": "factory",
        "id": "a7153f0c2538a774"
      },
      "id": "a7153f0c2538a774",
      "type": "add",
      "date": 1693393294578
    },
    {
      "type": "edit",
      "id": "a7153f0c2538a774",
      "item": {
        "type": "paragraph",
        "id": "a7153f0c2538a774",
        "text": "The [[Elm]] language doesn't have the concept of exceptions or special control flow for errors. It just has Custom Types, and by convention types like Result and the Err variant are used to represent possible failure states and combine together different error states."
      },
      "date": 1693393300695
    },
    {
      "type": "edit",
      "id": "a7153f0c2538a774",
      "item": {
        "type": "paragraph",
        "id": "a7153f0c2538a774",
        "text": "The [[Elm]] language doesn't have the concept of exceptions or special control flow for errors. It just has Custom Types, and by convention types like Result and the Err variant are used to represent possible failure states and combine together different error states. [https://package.elm-lang.org/packages/dillonkearns/elm-pages/10.0.1/FatalError page]"
      },
      "date": 1693393317723
    },
    {
      "item": {
        "type": "factory",
        "id": "1e958e0e26275930"
      },
      "id": "1e958e0e26275930",
      "type": "add",
      "after": "a7153f0c2538a774",
      "date": 1693393328878
    },
    {
      "type": "edit",
      "id": "1e958e0e26275930",
      "item": {
        "type": "paragraph",
        "id": "1e958e0e26275930",
        "text": "elm-pages doesn't change that, Elm still doesn't have special exception control flow at the language level. It does have a type, which is just a regular old Elm type, called FatalError. Why? Because this plain old Elm type does have one special characteristic - the elm-pages framework knows how to turn it into an error message. This becomes interesting because an elm-pages app has several places that accept a value of type BackendTask FatalError.FatalError value. This design lets the elm-pages framework do some of the work for you."
      },
      "date": 1693393331444
    },
    {
      "type": "edit",
      "id": "1e958e0e26275930",
      "item": {
        "type": "paragraph",
        "id": "1e958e0e26275930",
        "text": "[[elm-pages]] doesn't change that, Elm still doesn't have special exception control flow at the language level. It does have a type, which is just a regular old Elm type, called FatalError. Why? Because this plain old Elm type does have one special characteristic - the elm-pages framework knows how to turn it into an error message. This becomes interesting because an elm-pages app has several places that accept a value of type BackendTask FatalError.FatalError value. This design lets the elm-pages framework do some of the work for you."
      },
      "date": 1693393339284
    },
    {
      "type": "add",
      "id": "3b0aa3ba31fada2a",
      "item": {
        "type": "paragraph",
        "id": "3b0aa3ba31fada2a",
        "text": "[…]"
      },
      "after": "1e958e0e26275930",
      "date": 1693393373150
    }
  ]
}