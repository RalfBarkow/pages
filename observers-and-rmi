{
  "title": "Observers And Rmi",
  "story": [
    {
      "type": "html",
      "text": "hello!",
      "id": "83a72d3457c72bee974077f79f6ceb5a"
    },
    {
      "type": "html",
      "text": "\nA while ago I posted the claim on the [[Remote Method Invocation]] mailing list that I had implemented a system using RMI where the Stubs could cache data and implement their own behavior--not something you can normally do because the stubs are automatically generated.  You can of course write your own wrappers on RMI [[Stub Object]]s but the rmi transport layer will not instantiate your wrappers so you have to do a lot of housekeeping to manage two different kinds of [[Proxy Object]]s, the thin stub and the intelligent proxy.",
      "id": "0cfd4d6e7292d47cd0394c44e8fc06b4"
    },
    {
      "type": "html",
      "text": "\nMy solution basically has rmi instantiating your proxy objects, which are themselves wrappers on the thin stubs.  The distinction is transparent to clients of these objects.",
      "id": "c9f4e99a7048e28ce64adae914c547b6"
    },
    {
      "type": "html",
      "text": "\nFurthermore the solution utilizes a generic messaging system to broadcast changes from implementations to their intelligent proxies to keep them synchronized.",
      "id": "c0f7e81b5af3f0642d9dc2183ae8e984"
    },
    {
      "type": "html",
      "text": "\nI got several responses from people who wanted to know more.  I sent this overview to them.  I don't know how useful this is, but if I got more encouragement I might write a paper on it. ",
      "id": "4696c9495adabd752da88f680107e880"
    },
    {
      "type": "html",
      "text": "\nHere's the overview:",
      "id": "4facdea1279e6ecedbfd66f3e382e58a"
    },
    {
      "type": "html",
      "text": "\nFirst, I modified the rmi compiler so that it compiled stubs to files named XXX_ThinStub.java instead of XXX_Stub.java.  The trick here is that the rmi code still tries to instantiate XXX_Stub classes to create the stubs.  This allows you to insert your own wrapper class on [[Thin Stub]] which does the correct remote dispatching.",
      "id": "0bdc2ed10c45d93b69942baa3e408191"
    },
    {
      "type": "html",
      "text": "\nIn my XXX_Stub classes, I intercept calls to addObserver, etc., which I forward to a local dispatcher.  This local dispatcher subscribes to changes on this object using a traditional publish/subscribe mechanism (in our case, Tibco's Rendezvous).  Other changes are passed through.",
      "id": "2bac523c02687b6dfe63f5810a086f8b"
    },
    {
      "type": "html",
      "text": "\nOn the server side, implementation objects have a notifyObservers() method which notifies local observers but also \"publishes\" the changes to the network so that subscribers, on behalf of their local observers, can forward the notification.",
      "id": "b87e2eda54750b014885d0f019dbc55c"
    },
    {
      "type": "html",
      "text": "\nThe end result was observable objects whose actual location was transparent to observers.  Observable objects had to implement Remote, but Observers didn't.",
      "id": "25151e9ddfb0c19eeb14a002177cd597"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9ea3f1b84e2c5bde392ee8c0eaa16798"
    },
    {
      "type": "html",
      "text": "\nTake a look at the article, [http://www.javaworld.com/javaworld/jw-11-2000/jw-1110-smartproxy.html www.javaworld.com], for a way of accomplishing the same thing, without changing the rmi compiler or doing post-code-generation editing.",
      "id": "103dae910e7da08ff8c7c3d64590fcc7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9ea3f1b84e2c5bde392ee8c0eaa16798"
    },
    {
      "type": "html",
      "text": "\n[[Rmi Patterns]]",
      "id": "b3f502de8cf789881a34987ea26a95c6"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ObserversAndRmi c2.com]",
      "id": "6d73445789993e995754001edbaa7707"
    }
  ],
  "journal": [
    {
      "date": 1063226351000,
      "id": "32843624672c0d75cbb8f7d3646f1c7a",
      "type": "create",
      "item": {
        "title": "Observers And Rmi",
        "story": [
          {
            "type": "html",
            "text": "hello!",
            "id": "83a72d3457c72bee974077f79f6ceb5a"
          },
          {
            "type": "html",
            "text": "\nA while ago I posted the claim on the [[Remote Method Invocation]] mailing list that I had implemented a system using RMI where the Stubs could cache data and implement their own behavior--not something you can normally do because the stubs are automatically generated.  You can of course write your own wrappers on RMI [[Stub Object]]s but the rmi transport layer will not instantiate your wrappers so you have to do a lot of housekeeping to manage two different kinds of [[Proxy Object]]s, the thin stub and the intelligent proxy.",
            "id": "0cfd4d6e7292d47cd0394c44e8fc06b4"
          },
          {
            "type": "html",
            "text": "\nMy solution basically has rmi instantiating your proxy objects, which are themselves wrappers on the thin stubs.  The distinction is transparent to clients of these objects.",
            "id": "c9f4e99a7048e28ce64adae914c547b6"
          },
          {
            "type": "html",
            "text": "\nFurthermore the solution utilizes a generic messaging system to broadcast changes from implementations to their intelligent proxies to keep them synchronized.",
            "id": "c0f7e81b5af3f0642d9dc2183ae8e984"
          },
          {
            "type": "html",
            "text": "\nI got several responses from people who wanted to know more.  I sent this overview to them.  I don't know how useful this is, but if I got more encouragement I might write a paper on it. ",
            "id": "4696c9495adabd752da88f680107e880"
          },
          {
            "type": "html",
            "text": "\nHere's the overview:",
            "id": "4facdea1279e6ecedbfd66f3e382e58a"
          },
          {
            "type": "html",
            "text": "\nFirst, I modified the rmi compiler so that it compiled stubs to files named XXX_ThinStub.java instead of XXX_Stub.java.  The trick here is that the rmi code still tries to instantiate XXX_Stub classes to create the stubs.  This allows you to insert your own wrapper class on [[Thin Stub]] which does the correct remote dispatching.",
            "id": "0bdc2ed10c45d93b69942baa3e408191"
          },
          {
            "type": "html",
            "text": "\nIn my XXX_Stub classes, I intercept calls to addObserver, etc., which I forward to a local dispatcher.  This local dispatcher subscribes to changes on this object using a traditional publish/subscribe mechanism (in our case, Tibco's Rendezvous).  Other changes are passed through.",
            "id": "2bac523c02687b6dfe63f5810a086f8b"
          },
          {
            "type": "html",
            "text": "\nOn the server side, implementation objects have a notifyObservers() method which notifies local observers but also \"publishes\" the changes to the network so that subscribers, on behalf of their local observers, can forward the notification.",
            "id": "b87e2eda54750b014885d0f019dbc55c"
          },
          {
            "type": "html",
            "text": "\nThe end result was observable objects whose actual location was transparent to observers.  Observable objects had to implement Remote, but Observers didn't.",
            "id": "25151e9ddfb0c19eeb14a002177cd597"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9ea3f1b84e2c5bde392ee8c0eaa16798"
          },
          {
            "type": "html",
            "text": "\nTake a look at the article, [http://www.javaworld.com/javaworld/jw-11-2000/jw-1110-smartproxy.html www.javaworld.com], for a way of accomplishing the same thing, without changing the rmi compiler or doing post-code-generation editing.",
            "id": "103dae910e7da08ff8c7c3d64590fcc7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9ea3f1b84e2c5bde392ee8c0eaa16798"
          },
          {
            "type": "html",
            "text": "\n[[Rmi Patterns]]",
            "id": "b3f502de8cf789881a34987ea26a95c6"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ObserversAndRmi c2.com]",
            "id": "6d73445789993e995754001edbaa7707"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1651574229978
    }
  ]
}