{
  "title": "Cocoa Framework",
  "story": [
    {
      "type": "html",
      "text": "Apple's present-day name for the [[Next Step]] / [[Open Step]] / [[Gnu Step]] / [[Yellow Box]] class frameworks. An advanced [[Object Oriented]] framework for rapid application development. One of three major APIs (Cocoa, Carbon, Java) for programming on [[Mac Osx]].",
      "id": "3838090aa4795c191394feb122a57715"
    },
    {
      "type": "html",
      "text": "\nThe class framework is supported by [[Interface Builder]], a graphical user interface design program, which supports archiving serialized objects inside the interface description files.",
      "id": "40648a41f2b26c6a3287d34bbeeaa24f"
    },
    {
      "type": "html",
      "text": "\nUses the [[Delegate Pattern]] and [[Model Delegate]] pattern pervasively, as supported by [[Objective Cee]] and Java. [[Objective Cee]] has builtin message passing and messages are real data types, making this style of programming particularly easy. ",
      "id": "11aa4016e5477fc7111681d1acf9671f"
    },
    {
      "type": "html",
      "text": "\nSmalltalk programmers sometimes complain that it lacks a rich collection hierarchy. It has bags, sets, arrays, and dictionaries but they don't inherit from any common ancestors. Strings are not arrays and it uses C numbers and characters for the most part.",
      "id": "02e4935f2539cd7dcefdd7774974d248"
    },
    {
      "type": "html",
      "text": "\nThe framework is usually considered weak on XML support and networking, but open source libraries are available in those areas.",
      "id": "fadded3400e39be3515d8dd40a01266a"
    },
    {
      "type": "html",
      "text": "<i>Is the XML support still considered weak? Apple added a bunch of NSXML* classes recently, so perhaps this is no longer true</i>",
      "id": "d34defb972fa9d4a1047d96f53a234be"
    },
    {
      "type": "html",
      "text": "\nA new database access framework is expected in the form of [[Core Data]], to ship with the next release of [[Mac Osx]] (\"Tiger\") in early 2005.",
      "id": "47eae6ee2834016e5f52122b504dbc58"
    },
    {
      "type": "html",
      "text": "\n[http://developer.apple.com/cocoa/index.html developer.apple.com]",
      "id": "62fb29c4845210c6d4e832e6a47d2c8b"
    },
    {
      "type": "html",
      "text": "\nO'Reilly book: Learning Cocoa, [http://www.oreilly.com/catalog/learncocoa/ www.oreilly.com], ISBN 0-596-00160-6",
      "id": "98c54423fe8cb4a1206b3a6463812c4b"
    },
    {
      "type": "html",
      "text": "\nAaron Hillegass wrote a better book called Cocoa Programming for Mac OS X ISBN 0201726831 [http://www.bignerdranch.com/Book/ www.bignerdranch.com]",
      "id": "cea05457cc37c60d39febc58d4d5795b"
    },
    {
      "type": "html",
      "text": "\nUnrelated to [[Cocoa World]], the graphical programming-by-example environment aimed at children developed by Apple R&D in the 90s (which was itself formerly known as [[Kid Sim]]).",
      "id": "e4e8bdf574cccfc71363d6aea3bcba4f"
    },
    {
      "type": "html",
      "text": "<b>Language bindings</b>",
      "id": "38c371b94f52299fd1d2f8193fdcfb41"
    },
    {
      "type": "html",
      "text": "\nThe framework is designed to be programmed using [[Objective Cee]], but Apple provides a bridge to Java (not used by many programmers) and [[Apple Script]] (through [[Apple Script Studio]]).",
      "id": "6a2fb24bb66e418d708e248c94215080"
    },
    {
      "type": "html",
      "text": "\n[[Nu Language]] handles native Cocoa objects without needing a binding (or, if you prefer, the binding is trivial).",
      "id": "ea1814a8c55ed3de5ebd06ea3dba7640"
    },
    {
      "type": "html",
      "text": "\nThird-party bindings are available for the following languages:",
      "id": "0d4d6aa721136553dd9c410520a1163f"
    },
    {
      "type": "html",
      "text": " Python [http://pyobjc.sourceforge.net pyobjc.sourceforge.net]",
      "id": "fd0fb74c43e53dfce2b8e181b49b6698"
    },
    {
      "type": "html",
      "text": " OpenMCL ([http://openmcl.clozure.com/ openmcl.clozure.com]) is a ANSI Common Lisp implementation with an experimental Cocoa interface.",
      "id": "aefe94014d0c266c36fe9b7ce03422ee"
    },
    {
      "type": "html",
      "text": " [[Fscript Language]] is a Smalltalk implementation that uses Cocoa classes.",
      "id": "8959a24b1254fbc68ed4ad4fa28909fe"
    },
    {
      "type": "html",
      "text": " perl [http://camelbones.sourceforge.net/ camelbones.sourceforge.net]",
      "id": "11d682a4ff70239a9d007bd3dc68af1e"
    },
    {
      "type": "html",
      "text": " Ruby [http://rubycocoa.sourceforge.net/doc rubycocoa.sourceforge.net]",
      "id": "5c54e5ffcb8834fecdd958749b15702c"
    },
    {
      "type": "html",
      "text": " Eiffel [http://www.maceiffel.com/ www.maceiffel.com]",
      "id": "464ce093d2bcac88d4fba3a1953005e5"
    },
    {
      "type": "html",
      "text": " Haskell [http://hoc.sourceforge.net/ hoc.sourceforge.net]",
      "id": "e3729194e472b0323b25977e0cb3110d"
    },
    {
      "type": "html",
      "text": "<b>Discussion</b>",
      "id": "a17257907c65989b2c18b3be17e9e048"
    },
    {
      "type": "html",
      "text": "\nIt discourages users from inheriting from Cocoa classes except for NSObject and NSView. Recently they added NSWindowController and NSDocument and designed them to be inherited. The earlier scheme used delegation everywhere a programmer would want to use inheritance, which many people considered a good thing.",
      "id": "f6f5a94078ad165fd1697df64361a0bd"
    },
    {
      "type": "html",
      "text": "\nI would consider it a few years old compared to other frameworks. It has no support for Corba or OLE. It's distributed objects implementation has been ignored in favor of using [[Apple Script]]. ",
      "id": "e530233d1f13c842be41d4c69fc8c103"
    },
    {
      "type": "html",
      "text": "<i>The Cocoa distributed objects system would have never worked with the existing non-Cocoa applications (like Photoshop or Word). And why does lack of support for Corba/OLE make Cocoa \"a few years old\"? How can you measure the age of a library, except by stating the time that it was initially written or last updated? </i>",
      "id": "1857318a7632dc461369ffa63a688a89"
    },
    {
      "type": "html",
      "text": "\nIt has a really good object archiving scheme that it uses when designing the UI in Interface Builder. This is one of its strong points. It also has a nice plugin system that I really have not seen used very much except for OS X's System Preferences where you can add your own preference panel if you have an app that runs with no UI. Sadly the Finder (Desktop) is not yet written in Cocoa. Hopefully they will rewrite it and add some plugins so people can customize it a little.",
      "id": "8517df025da96506f8204a245d779758"
    },
    {
      "type": "html",
      "text": "\nIt used to have a related framework called [[Enterprise Objects Framework]] (EOF) that handled database access. They have since killed the Objective C version and moved to Java. Cocoa is also available for Java by the way. I don't know anyone using it since Cocoa for Java is only on Mac OS X and Obj C is way better. Next (creators of Cocoa) at one time was going to ditch Obj C in favor of Java. This idea got dumped and they now recommend using Obj C.",
      "id": "3e8aaabcc1527ea6248c8d8a0ce01690"
    },
    {
      "type": "html",
      "text": "\nIn summary, at one time it had database access, distributed objects, good plugins, and a good UI creator. It also ran on Windows, Sun, and Next OS so you could actually write once and run on all those systems and it actually ran fast. They've since gotten rid of database access, distributed objects, and Windows and Sun compatibility. The only major thing they are adding is [[Apple Script]] support, which hasn't reached its full potential yet (recordability and easy interapplication communications). At this point I think Cocoa used to be a lot cooler, and now has a lot of kludge. Can any old [[Open Step]] programmers comment on this. These are the opinions of a Mac OS and Smalltalk programmer, not an old Next programmer.",
      "id": "16c63c7f47adbc1c4ee66f5820560c58"
    },
    {
      "type": "html",
      "text": "\nIn Summary (a contrasting view) it has database libraries ([[Core Data]], NSUserDefaults, NSPropertyList, third party SQL libraries, and others), the best distributed objects system I have ever used (2 lines of code to make a named object accessable system wide, 1 line to access it from a remote piece of code be that in another thread, process, or across a network), great plugin support (for those who want a plugin-based application, some apps that have it include: [[Address Book]], iCal, [[Ex Code]], [[Interface Builder]], and there are many more), and [[Interface Builder]] which not only lets you build interfaces graphically but has guides that help you to conform to the [[Human Interface Guidlines]] and archives real objects, not xml which is parsed to create interfaces... It supports many languages including (but not limited to) ObjC, Java, perl, ruby, python, eiffel, FScript and more. The framework is usable on Macs, and Windows (yes [[Web Objects]] and [[Yellow Box]] for windows lisences can still be purchased at the Apple website). They have recently added [[Web Kit]], which allows for html rendering (check out [[Dash Board]] on the apple site for some of what they use it for), as well as a DOM model for XML, and [[Java Script]] interpreter. In short, it used to be kind of an in the shadow thing that only really ran on NeXT machines, but now it has piles of new features (Bindings, [[Web Kit]], [[Spot Light]]), is easy to develop in, runs in many places, from many programming languages, has multiple implementations ([[Gnu Step]], [[Open Step]] etc.) and did I mention that it only looks to get better. These are the opinions of a Mac OS and ex-C++ programmer, not an old [[Next Step]] programmer.",
      "id": "0ea9a9ebf1063081ee7ebccd09909743"
    },
    {
      "type": "html",
      "text": "\nWell, speaking as an old NeXT programmer, I'd still say I think Cocoa is absolutely fantastic. True, it is quite a shame that there is no modern-day EOF equivalent which is easily accessible (without messing with all the Java/ObjC bridge nastiness), but Apple has improved it (and the IDE - [[Interface Builder]] etc) in quite a few ways. It's still the nicest UI layer that I've come across. The newer bindings technology recently added is also interesting (it adopts ideas previously used in [[Web Objects]] and the old GUI layers of EOF).",
      "id": "ae49184c3714d6935ebdb37e21fde9f9"
    },
    {
      "type": "html",
      "text": "\nOld is a relative term. In any case, [[Enterprise Objects Framework]] is making a comeback in [[Core Data]]. ",
      "id": "580fabaef3fcabf6f676d2c5e81c6b0a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "d13d07554f163259a7dcc335a0dd809b"
    },
    {
      "type": "html",
      "text": "[[Category Framework]]",
      "id": "0043ba0c46b173397efffdfda61502b8"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CocoaFramework c2.com]",
      "id": "0cf719476f14c7a244c10d71d4913f6d"
    }
  ],
  "journal": [
    {
      "date": 1293738372000,
      "id": "348bd0cfff2d1a9ffba20521ac934c5b",
      "type": "create",
      "item": {
        "title": "Cocoa Framework",
        "story": [
          {
            "type": "html",
            "text": "Apple's present-day name for the [[Next Step]] / [[Open Step]] / [[Gnu Step]] / [[Yellow Box]] class frameworks. An advanced [[Object Oriented]] framework for rapid application development. One of three major APIs (Cocoa, Carbon, Java) for programming on [[Mac Osx]].",
            "id": "3838090aa4795c191394feb122a57715"
          },
          {
            "type": "html",
            "text": "\nThe class framework is supported by [[Interface Builder]], a graphical user interface design program, which supports archiving serialized objects inside the interface description files.",
            "id": "40648a41f2b26c6a3287d34bbeeaa24f"
          },
          {
            "type": "html",
            "text": "\nUses the [[Delegate Pattern]] and [[Model Delegate]] pattern pervasively, as supported by [[Objective Cee]] and Java. [[Objective Cee]] has builtin message passing and messages are real data types, making this style of programming particularly easy. ",
            "id": "11aa4016e5477fc7111681d1acf9671f"
          },
          {
            "type": "html",
            "text": "\nSmalltalk programmers sometimes complain that it lacks a rich collection hierarchy. It has bags, sets, arrays, and dictionaries but they don't inherit from any common ancestors. Strings are not arrays and it uses C numbers and characters for the most part.",
            "id": "02e4935f2539cd7dcefdd7774974d248"
          },
          {
            "type": "html",
            "text": "\nThe framework is usually considered weak on XML support and networking, but open source libraries are available in those areas.",
            "id": "fadded3400e39be3515d8dd40a01266a"
          },
          {
            "type": "html",
            "text": "<i>Is the XML support still considered weak? Apple added a bunch of NSXML* classes recently, so perhaps this is no longer true</i>",
            "id": "d34defb972fa9d4a1047d96f53a234be"
          },
          {
            "type": "html",
            "text": "\nA new database access framework is expected in the form of [[Core Data]], to ship with the next release of [[Mac Osx]] (\"Tiger\") in early 2005.",
            "id": "47eae6ee2834016e5f52122b504dbc58"
          },
          {
            "type": "html",
            "text": "\n[http://developer.apple.com/cocoa/index.html developer.apple.com]",
            "id": "62fb29c4845210c6d4e832e6a47d2c8b"
          },
          {
            "type": "html",
            "text": "\nO'Reilly book: Learning Cocoa, [http://www.oreilly.com/catalog/learncocoa/ www.oreilly.com], ISBN 0-596-00160-6",
            "id": "98c54423fe8cb4a1206b3a6463812c4b"
          },
          {
            "type": "html",
            "text": "\nAaron Hillegass wrote a better book called Cocoa Programming for Mac OS X ISBN 0201726831 [http://www.bignerdranch.com/Book/ www.bignerdranch.com]",
            "id": "cea05457cc37c60d39febc58d4d5795b"
          },
          {
            "type": "html",
            "text": "\nUnrelated to [[Cocoa World]], the graphical programming-by-example environment aimed at children developed by Apple R&D in the 90s (which was itself formerly known as [[Kid Sim]]).",
            "id": "e4e8bdf574cccfc71363d6aea3bcba4f"
          },
          {
            "type": "html",
            "text": "<b>Language bindings</b>",
            "id": "38c371b94f52299fd1d2f8193fdcfb41"
          },
          {
            "type": "html",
            "text": "\nThe framework is designed to be programmed using [[Objective Cee]], but Apple provides a bridge to Java (not used by many programmers) and [[Apple Script]] (through [[Apple Script Studio]]).",
            "id": "6a2fb24bb66e418d708e248c94215080"
          },
          {
            "type": "html",
            "text": "\n[[Nu Language]] handles native Cocoa objects without needing a binding (or, if you prefer, the binding is trivial).",
            "id": "ea1814a8c55ed3de5ebd06ea3dba7640"
          },
          {
            "type": "html",
            "text": "\nThird-party bindings are available for the following languages:",
            "id": "0d4d6aa721136553dd9c410520a1163f"
          },
          {
            "type": "html",
            "text": " Python [http://pyobjc.sourceforge.net pyobjc.sourceforge.net]",
            "id": "fd0fb74c43e53dfce2b8e181b49b6698"
          },
          {
            "type": "html",
            "text": " OpenMCL ([http://openmcl.clozure.com/ openmcl.clozure.com]) is a ANSI Common Lisp implementation with an experimental Cocoa interface.",
            "id": "aefe94014d0c266c36fe9b7ce03422ee"
          },
          {
            "type": "html",
            "text": " [[Fscript Language]] is a Smalltalk implementation that uses Cocoa classes.",
            "id": "8959a24b1254fbc68ed4ad4fa28909fe"
          },
          {
            "type": "html",
            "text": " perl [http://camelbones.sourceforge.net/ camelbones.sourceforge.net]",
            "id": "11d682a4ff70239a9d007bd3dc68af1e"
          },
          {
            "type": "html",
            "text": " Ruby [http://rubycocoa.sourceforge.net/doc rubycocoa.sourceforge.net]",
            "id": "5c54e5ffcb8834fecdd958749b15702c"
          },
          {
            "type": "html",
            "text": " Eiffel [http://www.maceiffel.com/ www.maceiffel.com]",
            "id": "464ce093d2bcac88d4fba3a1953005e5"
          },
          {
            "type": "html",
            "text": " Haskell [http://hoc.sourceforge.net/ hoc.sourceforge.net]",
            "id": "e3729194e472b0323b25977e0cb3110d"
          },
          {
            "type": "html",
            "text": "<b>Discussion</b>",
            "id": "a17257907c65989b2c18b3be17e9e048"
          },
          {
            "type": "html",
            "text": "\nIt discourages users from inheriting from Cocoa classes except for NSObject and NSView. Recently they added NSWindowController and NSDocument and designed them to be inherited. The earlier scheme used delegation everywhere a programmer would want to use inheritance, which many people considered a good thing.",
            "id": "f6f5a94078ad165fd1697df64361a0bd"
          },
          {
            "type": "html",
            "text": "\nI would consider it a few years old compared to other frameworks. It has no support for Corba or OLE. It's distributed objects implementation has been ignored in favor of using [[Apple Script]]. ",
            "id": "e530233d1f13c842be41d4c69fc8c103"
          },
          {
            "type": "html",
            "text": "<i>The Cocoa distributed objects system would have never worked with the existing non-Cocoa applications (like Photoshop or Word). And why does lack of support for Corba/OLE make Cocoa \"a few years old\"? How can you measure the age of a library, except by stating the time that it was initially written or last updated? </i>",
            "id": "1857318a7632dc461369ffa63a688a89"
          },
          {
            "type": "html",
            "text": "\nIt has a really good object archiving scheme that it uses when designing the UI in Interface Builder. This is one of its strong points. It also has a nice plugin system that I really have not seen used very much except for OS X's System Preferences where you can add your own preference panel if you have an app that runs with no UI. Sadly the Finder (Desktop) is not yet written in Cocoa. Hopefully they will rewrite it and add some plugins so people can customize it a little.",
            "id": "8517df025da96506f8204a245d779758"
          },
          {
            "type": "html",
            "text": "\nIt used to have a related framework called [[Enterprise Objects Framework]] (EOF) that handled database access. They have since killed the Objective C version and moved to Java. Cocoa is also available for Java by the way. I don't know anyone using it since Cocoa for Java is only on Mac OS X and Obj C is way better. Next (creators of Cocoa) at one time was going to ditch Obj C in favor of Java. This idea got dumped and they now recommend using Obj C.",
            "id": "3e8aaabcc1527ea6248c8d8a0ce01690"
          },
          {
            "type": "html",
            "text": "\nIn summary, at one time it had database access, distributed objects, good plugins, and a good UI creator. It also ran on Windows, Sun, and Next OS so you could actually write once and run on all those systems and it actually ran fast. They've since gotten rid of database access, distributed objects, and Windows and Sun compatibility. The only major thing they are adding is [[Apple Script]] support, which hasn't reached its full potential yet (recordability and easy interapplication communications). At this point I think Cocoa used to be a lot cooler, and now has a lot of kludge. Can any old [[Open Step]] programmers comment on this. These are the opinions of a Mac OS and Smalltalk programmer, not an old Next programmer.",
            "id": "16c63c7f47adbc1c4ee66f5820560c58"
          },
          {
            "type": "html",
            "text": "\nIn Summary (a contrasting view) it has database libraries ([[Core Data]], NSUserDefaults, NSPropertyList, third party SQL libraries, and others), the best distributed objects system I have ever used (2 lines of code to make a named object accessable system wide, 1 line to access it from a remote piece of code be that in another thread, process, or across a network), great plugin support (for those who want a plugin-based application, some apps that have it include: [[Address Book]], iCal, [[Ex Code]], [[Interface Builder]], and there are many more), and [[Interface Builder]] which not only lets you build interfaces graphically but has guides that help you to conform to the [[Human Interface Guidlines]] and archives real objects, not xml which is parsed to create interfaces... It supports many languages including (but not limited to) ObjC, Java, perl, ruby, python, eiffel, FScript and more. The framework is usable on Macs, and Windows (yes [[Web Objects]] and [[Yellow Box]] for windows lisences can still be purchased at the Apple website). They have recently added [[Web Kit]], which allows for html rendering (check out [[Dash Board]] on the apple site for some of what they use it for), as well as a DOM model for XML, and [[Java Script]] interpreter. In short, it used to be kind of an in the shadow thing that only really ran on NeXT machines, but now it has piles of new features (Bindings, [[Web Kit]], [[Spot Light]]), is easy to develop in, runs in many places, from many programming languages, has multiple implementations ([[Gnu Step]], [[Open Step]] etc.) and did I mention that it only looks to get better. These are the opinions of a Mac OS and ex-C++ programmer, not an old [[Next Step]] programmer.",
            "id": "0ea9a9ebf1063081ee7ebccd09909743"
          },
          {
            "type": "html",
            "text": "\nWell, speaking as an old NeXT programmer, I'd still say I think Cocoa is absolutely fantastic. True, it is quite a shame that there is no modern-day EOF equivalent which is easily accessible (without messing with all the Java/ObjC bridge nastiness), but Apple has improved it (and the IDE - [[Interface Builder]] etc) in quite a few ways. It's still the nicest UI layer that I've come across. The newer bindings technology recently added is also interesting (it adopts ideas previously used in [[Web Objects]] and the old GUI layers of EOF).",
            "id": "ae49184c3714d6935ebdb37e21fde9f9"
          },
          {
            "type": "html",
            "text": "\nOld is a relative term. In any case, [[Enterprise Objects Framework]] is making a comeback in [[Core Data]]. ",
            "id": "580fabaef3fcabf6f676d2c5e81c6b0a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "d13d07554f163259a7dcc335a0dd809b"
          },
          {
            "type": "html",
            "text": "[[Category Framework]]",
            "id": "0043ba0c46b173397efffdfda61502b8"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CocoaFramework c2.com]",
            "id": "0cf719476f14c7a244c10d71d4913f6d"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1655986993322
    }
  ]
}