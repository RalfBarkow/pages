{
  "title": "Special-K",
  "story": [
    {
      "type": "paragraph",
      "id": "f6067a5cb7376fa8",
      "text": "30:45 [[Special-K]] [https://beyondloom.com/tools/specialk.html page] – A subset of K mapped to a subset of GLSL Fragment Shaders\n/ see [https://www.khronos.org/files/opengles_shading_language.pdf pdf]"
    },
    {
      "type": "audio",
      "id": "d0804d90c6625bcd",
      "text": "https://chrt.fm/track/5594D5/static1.squarespace.com/static/607a5a4ecbc7ae6b49698947/t/63a4b892eaff4244acfbf88d/1672902375442/Episode43+final.mp3/original/Episode43+final.mp3"
    },
    {
      "type": "paragraph",
      "id": "9cdb3a3e337bfe06",
      "text": "basically writing a program that draws one big triangle that fills the whole screen, and then you post process it with fragment shaders in order to make it look like absolutely anything."
    },
    {
      "type": "paragraph",
      "id": "3bae19ebd15e9807",
      "text": "37:07 [[Decker]]"
    },
    {
      "type": "paragraph",
      "id": "a3b1fec3b3aad658",
      "text": "So Decker is kind of... It's the everything machine. It on a very superficial level Decker is this environment that looks sort of like a presentation tool like PowerPoint or something. You have cards that are,  comprise a deck and you can flip between the cards. You can draw on the cards using a bunch of tools that gives it kind of a Mac Paint or MS Paint style feeling and you can also put widgets on cards. Widgets are these interactive elements. There are five different flavors of them, but the most important one is the  button. You can put buttons on cards. When you click on the buttons things happen. In the simplest case, clicking on a button just brings you to another cart. So it's kind of this hypertext like system that's very free flowing and free form. You could you immediately start to to think about how like, well, you know I could organize my notes for things in sort of a nonlinear way. Or I could explain a topic, make something sort of like a website where I can navigate around in this. But beyond just having navigation as a result of interacting with these widgets. You have a full scripting language that can control, you know, you can make new widgets. You can change the properties of widgets. You can draw stuff on the screen. You can play sounds. You have a full flexibility to kind of manipulate this environment and and build things in it. So it becomes sort of, again on on like a superficial level, it kind of feels like interface builder [18] or like Visual Basic or something. You can just drag things out, make a little application. And the reason that this has some applicability to this podcast, as I mentioned earlier, is that the scripting language that you have for controlling this thing and building stuff which is called Lil. Is a very ... It's sort of designed to resemble Lua, which is a popular mainstream imperative programming language. Because that way it's sort of unassuming, and it's not too scary for people. You don't get this immediate knee-jerk revulsion from people. But it's actually much closer to q in terms of its semantics and the primitives that it gives you. It can, on a superficial level, seem like, oh it's just a very simple imperative language. But really, it's a functional programming language. Everything is an expression. All of the built in types are or value types. You do immutable operations on lists and dictionaries. It has tail call optimization or elimination I should say. It has lexical scope and closure, but then you know you dig a little bit deeper. It has a a query language built into its syntax that's in many ways similar to to qSQL a little bit more limited, a little bit more simple. And so you have this kind of database programming capability built into it, and that's also reflected in the environment. One of the widgets that you can create is called a grid widget that just represents a a reification of a table of data you can display on the screen. And low is also a vector oriented language in the sense that it has uniform operator precedence. It has automatic spreading of the the arithmetic primitives to  lists and dicts. It has a small set of operators that are generalized appropriately to a full set of data types and the sort of dynamic system it has many of the same primitives as q or k. So it's kind of, you know, it's like a wading pool into a lot of these ideas. You can ease yourself in to thinking about operating on data in a holistic way in this language that has very low barriers to entry. And as in [[iKe]] having these nice vector semantics and some of these primitives works really well for doing graphics programming there. It also works very well and the Decker environment. Sorry there's a question."
    },
    {
      "type": "factory",
      "id": "533ddaf3048393d2"
    },
    {
      "type": "paragraph",
      "id": "7957271c9f9e91c0",
      "text": "00:48:19 [JE]\n\nAbsolutely. [[Decker]] is not Hypercard clone, it doesn't. You're not ever going to run Hypercard stacks in this. It does a lot of things very differently, but in in broad strokes it is very similar to Hypercard. Which was sort of it's the everything program for for early Macs. It's really important to understand that so many of the ideas in Hypercard significantly predate web browsers. And almost everything that early web browsers did was a clumsier or limited version of Hypercard, except it's delivered over a network. That's kind of the the one difference. But you were saying."
    },
    {
      "type": "paragraph",
      "id": "6d635098f3b980d9",
      "text": "51:05 […] Because the the idea of Decker is not really that it's supposed to be a like a classroom with a stern teacher who wraps your fingers if you do things wrong. It's an environment where you can just play. There are no wrong answers, as long as you're you're tinkering and and making something and expressing yourself creatively. And in fact, there's a lot of stuff you can do with Decker that doesn't involve writing any code at all. And I hope that some of the people that that play with it will be people who do not think of themselves as programmers. And maybe overtime we'll learn a little bit of programming, but they don't have to go off the deep end to to find use and and enjoyment in the tool."
    },
    {
      "type": "paragraph",
      "id": "96e1245ecbbc33e6",
      "text": "[…] to start playing to create animations"
    },
    {
      "type": "paragraph",
      "id": "c9843d07c0565fdd",
      "text": "[…] I hope that I've carried forward in the design of Lil from Vector languages. Is the idea of solving problems directly in the language."
    },
    {
      "type": "paragraph",
      "id": "bdecde181a3cb9e3",
      "text": "[…] It's a desktop application that you can export a (single file) HTML version of your deck [from] that includes all of the editing tools and the whole runtime and environment. It doesn't lose anything in the translation."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Special-K",
        "story": []
      },
      "date": 1712137193404
    },
    {
      "id": "f6067a5cb7376fa8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f6067a5cb7376fa8",
        "text": "30:45 [[Special-K]] [https://beyondloom.com/tools/specialk.html page] – A subset of K mapped to a subset of GLSL Fragment Shaders\n/ see [https://www.khronos.org/files/opengles_shading_language.pdf pdf]"
      },
      "attribution": {
        "page": "iKe"
      },
      "date": 1712137196610
    },
    {
      "id": "9cdb3a3e337bfe06",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9cdb3a3e337bfe06",
        "text": "basically writing a program that draws one big triangle that fills the whole screen, and then you post process it with fragment shaders in order to make it look like absolutely anything."
      },
      "after": "f6067a5cb7376fa8",
      "attribution": {
        "page": "iKe"
      },
      "date": 1712137199644
    },
    {
      "id": "d0804d90c6625bcd",
      "type": "add",
      "item": {
        "type": "audio",
        "id": "d0804d90c6625bcd",
        "text": "https://chrt.fm/track/5594D5/static1.squarespace.com/static/607a5a4ecbc7ae6b49698947/t/63a4b892eaff4244acfbf88d/1672902375442/Episode43+final.mp3/original/Episode43+final.mp3"
      },
      "after": "f6067a5cb7376fa8",
      "attribution": {
        "page": "iKe"
      },
      "date": 1712137205988
    },
    {
      "item": {
        "type": "factory",
        "id": "3bae19ebd15e9807"
      },
      "id": "3bae19ebd15e9807",
      "type": "add",
      "after": "9cdb3a3e337bfe06",
      "date": 1712137577278
    },
    {
      "type": "edit",
      "id": "3bae19ebd15e9807",
      "item": {
        "type": "paragraph",
        "id": "3bae19ebd15e9807",
        "text": "37:07 [[Decker]]"
      },
      "date": 1712137586353
    },
    {
      "item": {
        "type": "factory",
        "id": "a3b1fec3b3aad658"
      },
      "id": "a3b1fec3b3aad658",
      "type": "add",
      "after": "3bae19ebd15e9807",
      "date": 1712137768877
    },
    {
      "type": "edit",
      "id": "a3b1fec3b3aad658",
      "item": {
        "type": "paragraph",
        "id": "a3b1fec3b3aad658",
        "text": "So Decker is kind of... It's the everything machine. It on a very superficial level Decker is this environment that looks sort of like a presentation tool like PowerPoint or something. You have cards that are,  comprise a deck and you can flip between the cards. You can draw on the cards using a bunch of tools that gives it kind of a Mac Paint or MS Paint style feeling and you can also put widgets on cards. Widgets are these interactive elements. There are five different flavors of them, but the most important one is the  button. You can put buttons on cards. When you click on the buttons things happen. In the simplest case, clicking on a button just brings you to another cart. So it's kind of this hypertext like system that's very free flowing and free form. You could you immediately start to to think about how like, well, you know I could organize my notes for things in sort of a nonlinear way. Or I could explain a topic, make something sort of like a website where I can navigate around in this. But beyond just having navigation as a result of interacting with these widgets. You have a full scripting language that can control, you know, you can make new widgets. You can change the properties of widgets. You can draw stuff on the screen. You can play sounds. You have a full flexibility to kind of manipulate this environment and and build things in it. So it becomes sort of, again on on like a superficial level, it kind of feels like interface builder [18] or like Visual Basic or something. You can just drag things out, make a little application. And the reason that this has some applicability to this podcast, as I mentioned earlier, is that the scripting language that you have for controlling this thing and building stuff which is called Lil. Is a very ... It's sort of designed to resemble Lua, which is a popular mainstream imperative programming language. Because that way it's sort of unassuming, and it's not too scary for people. You don't get this immediate knee-jerk revulsion from people. But it's actually much closer to q in terms of its semantics and the primitives that it gives you. It can, on a superficial level, seem like, oh it's just a very simple imperative language. But really, it's a functional programming language. Everything is an expression. All of the built in types are or value types. You do immutable operations on lists and dictionaries. It has tail call optimization or elimination I should say. It has lexical scope and closure, but then you know you dig a little bit deeper. It has a a query language built into its syntax that's in many ways similar to to qSQL a little bit more limited, a little bit more simple. And so you have this kind of database programming capability built into it, and that's also reflected in the environment. One of the widgets that you can create is called a grid widget that just represents a a reification of a table of data you can display on the screen. And low is also a vector oriented language in the sense that it has uniform operator precedence. It has automatic spreading of the the arithmetic primitives to  lists and dicts. It has a small set of operators that are generalized appropriately to a full set of data types and the sort of dynamic system it has many of the same primitives as q or k. So it's kind of, you know, it's like a wading pool into a lot of these ideas. You can ease yourself in to thinking about operating on data in a holistic way in this language that has very low barriers to entry. And as in iKe having these nice vector semantics and some of these primitives works really well for doing graphics programming there. It also works very well and the Decker environment. Sorry there's a question."
      },
      "date": 1712137770564
    },
    {
      "type": "edit",
      "id": "a3b1fec3b3aad658",
      "item": {
        "type": "paragraph",
        "id": "a3b1fec3b3aad658",
        "text": "So Decker is kind of... It's the everything machine. It on a very superficial level Decker is this environment that looks sort of like a presentation tool like PowerPoint or something. You have cards that are,  comprise a deck and you can flip between the cards. You can draw on the cards using a bunch of tools that gives it kind of a Mac Paint or MS Paint style feeling and you can also put widgets on cards. Widgets are these interactive elements. There are five different flavors of them, but the most important one is the  button. You can put buttons on cards. When you click on the buttons things happen. In the simplest case, clicking on a button just brings you to another cart. So it's kind of this hypertext like system that's very free flowing and free form. You could you immediately start to to think about how like, well, you know I could organize my notes for things in sort of a nonlinear way. Or I could explain a topic, make something sort of like a website where I can navigate around in this. But beyond just having navigation as a result of interacting with these widgets. You have a full scripting language that can control, you know, you can make new widgets. You can change the properties of widgets. You can draw stuff on the screen. You can play sounds. You have a full flexibility to kind of manipulate this environment and and build things in it. So it becomes sort of, again on on like a superficial level, it kind of feels like interface builder [18] or like Visual Basic or something. You can just drag things out, make a little application. And the reason that this has some applicability to this podcast, as I mentioned earlier, is that the scripting language that you have for controlling this thing and building stuff which is called Lil. Is a very ... It's sort of designed to resemble Lua, which is a popular mainstream imperative programming language. Because that way it's sort of unassuming, and it's not too scary for people. You don't get this immediate knee-jerk revulsion from people. But it's actually much closer to q in terms of its semantics and the primitives that it gives you. It can, on a superficial level, seem like, oh it's just a very simple imperative language. But really, it's a functional programming language. Everything is an expression. All of the built in types are or value types. You do immutable operations on lists and dictionaries. It has tail call optimization or elimination I should say. It has lexical scope and closure, but then you know you dig a little bit deeper. It has a a query language built into its syntax that's in many ways similar to to qSQL a little bit more limited, a little bit more simple. And so you have this kind of database programming capability built into it, and that's also reflected in the environment. One of the widgets that you can create is called a grid widget that just represents a a reification of a table of data you can display on the screen. And low is also a vector oriented language in the sense that it has uniform operator precedence. It has automatic spreading of the the arithmetic primitives to  lists and dicts. It has a small set of operators that are generalized appropriately to a full set of data types and the sort of dynamic system it has many of the same primitives as q or k. So it's kind of, you know, it's like a wading pool into a lot of these ideas. You can ease yourself in to thinking about operating on data in a holistic way in this language that has very low barriers to entry. And as in [[iKe]] having these nice vector semantics and some of these primitives works really well for doing graphics programming there. It also works very well and the Decker environment. Sorry there's a question."
      },
      "date": 1712137885559
    },
    {
      "item": {
        "type": "factory",
        "id": "533ddaf3048393d2"
      },
      "id": "533ddaf3048393d2",
      "type": "add",
      "after": "a3b1fec3b3aad658",
      "date": 1712138328281
    },
    {
      "item": {
        "type": "factory",
        "id": "7957271c9f9e91c0"
      },
      "id": "7957271c9f9e91c0",
      "type": "add",
      "after": "533ddaf3048393d2",
      "date": 1712138333968
    },
    {
      "type": "edit",
      "id": "7957271c9f9e91c0",
      "item": {
        "type": "paragraph",
        "id": "7957271c9f9e91c0",
        "text": "00:48:19 [JE]\n\nAbsolutely. Decker is not Hypercard clone, it doesn't. You're not ever going to run Hypercard stacks in this. It does a lot of things very differently, but in in broad strokes it is very similar to Hypercard. Which was sort of it's the everything program for for early Macs. It's really important to understand that so many of the ideas in Hypercard significantly predate web browsers. And almost everything that early web browsers did was a clumsier or limited version of Hypercard, except it's delivered over a network. That's kind of the the one difference. But you were saying."
      },
      "date": 1712138335840
    },
    {
      "item": {
        "type": "factory",
        "id": "6d635098f3b980d9"
      },
      "id": "6d635098f3b980d9",
      "type": "add",
      "after": "7957271c9f9e91c0",
      "date": 1712138805509
    },
    {
      "type": "edit",
      "id": "6d635098f3b980d9",
      "item": {
        "type": "paragraph",
        "id": "6d635098f3b980d9",
        "text": "53:19 […] Because the the idea of Decker is not really that it's supposed to be a like a classroom with a stern teacher who wraps your fingers if you do things wrong. It's an environment where you can just play. There are no wrong answers, as long as you're you're tinkering and and making something and expressing yourself creatively. And in fact, there's a lot of stuff you can do with Decker that doesn't involve writing any code at all. And I hope that some of the people that that play with it will be people who do not think of themselves as programmers. And maybe overtime we'll learn a little bit of programming, but they don't have to go off the deep end to to find use and and enjoyment in the tool."
      },
      "date": 1712138834388
    },
    {
      "type": "edit",
      "id": "6d635098f3b980d9",
      "item": {
        "type": "paragraph",
        "id": "6d635098f3b980d9",
        "text": "51:00 […] Because the the idea of Decker is not really that it's supposed to be a like a classroom with a stern teacher who wraps your fingers if you do things wrong. It's an environment where you can just play. There are no wrong answers, as long as you're you're tinkering and and making something and expressing yourself creatively. And in fact, there's a lot of stuff you can do with Decker that doesn't involve writing any code at all. And I hope that some of the people that that play with it will be people who do not think of themselves as programmers. And maybe overtime we'll learn a little bit of programming, but they don't have to go off the deep end to to find use and and enjoyment in the tool."
      },
      "date": 1712138900785
    },
    {
      "type": "edit",
      "id": "6d635098f3b980d9",
      "item": {
        "type": "paragraph",
        "id": "6d635098f3b980d9",
        "text": "51:05 […] Because the the idea of Decker is not really that it's supposed to be a like a classroom with a stern teacher who wraps your fingers if you do things wrong. It's an environment where you can just play. There are no wrong answers, as long as you're you're tinkering and and making something and expressing yourself creatively. And in fact, there's a lot of stuff you can do with Decker that doesn't involve writing any code at all. And I hope that some of the people that that play with it will be people who do not think of themselves as programmers. And maybe overtime we'll learn a little bit of programming, but they don't have to go off the deep end to to find use and and enjoyment in the tool."
      },
      "date": 1712138918695
    },
    {
      "item": {
        "type": "factory",
        "id": "96e1245ecbbc33e6"
      },
      "id": "96e1245ecbbc33e6",
      "type": "add",
      "after": "6d635098f3b980d9",
      "date": 1712139107807
    },
    {
      "type": "edit",
      "id": "96e1245ecbbc33e6",
      "item": {
        "type": "paragraph",
        "id": "96e1245ecbbc33e6",
        "text": "[…] to start playing to create animations"
      },
      "date": 1712139115757
    },
    {
      "item": {
        "type": "factory",
        "id": "c9843d07c0565fdd"
      },
      "id": "c9843d07c0565fdd",
      "type": "add",
      "after": "96e1245ecbbc33e6",
      "date": 1712139213355
    },
    {
      "type": "edit",
      "id": "c9843d07c0565fdd",
      "item": {
        "type": "paragraph",
        "id": "c9843d07c0565fdd",
        "text": "[…] I hope that I've carried forward in the design of Lil from Vector languages. Is the idea of solving problems directly in the language."
      },
      "date": 1712139219303
    },
    {
      "type": "add",
      "id": "bdecde181a3cb9e3",
      "item": {
        "type": "paragraph",
        "id": "bdecde181a3cb9e3",
        "text": "[…] It's a desktop application that you can export a (single file) HTML version of your deck [from] that includes all of the editing tools and the whole runtime and environment. It doesn't lose anything in the translation "
      },
      "after": "c9843d07c0565fdd",
      "date": 1712139365138
    },
    {
      "type": "edit",
      "id": "bdecde181a3cb9e3",
      "item": {
        "type": "paragraph",
        "id": "bdecde181a3cb9e3",
        "text": "[…] It's a desktop application that you can export a (single file) HTML version of your deck [from] that includes all of the editing tools and the whole runtime and environment. It doesn't lose anything in the translation."
      },
      "date": 1712139376968
    },
    {
      "type": "edit",
      "id": "7957271c9f9e91c0",
      "item": {
        "type": "paragraph",
        "id": "7957271c9f9e91c0",
        "text": "00:48:19 [JE]\n\nAbsolutely. [[Decker]] is not Hypercard clone, it doesn't. You're not ever going to run Hypercard stacks in this. It does a lot of things very differently, but in in broad strokes it is very similar to Hypercard. Which was sort of it's the everything program for for early Macs. It's really important to understand that so many of the ideas in Hypercard significantly predate web browsers. And almost everything that early web browsers did was a clumsier or limited version of Hypercard, except it's delivered over a network. That's kind of the the one difference. But you were saying."
      },
      "date": 1712139502535
    }
  ]
}