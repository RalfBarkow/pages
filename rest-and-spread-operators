{
  "title": "Rest and Spread Operators",
  "story": [
    {
      "type": "paragraph",
      "id": "2dd36a07e324d51c",
      "text": "[[JavaScript]] has always had the feature of allowing functions to be passes fewer or more parameters than formally specified in the function declaration without any problems. Default Parameters, as discussed earlier, help you accept fewer values as parameters and still have the other parameters assigned a value."
    },
    {
      "type": "paragraph",
      "id": "16aeeca5f98b3279",
      "text": "Many modern programming languages provide the ability for the function to accept a variable number of parameters. ES6 introduces this much needed feature to JavaScript with [[Rest Parameters]]. You now have the ability to pass a function a dynamic number of parameters very easily. If you wanted to do this in ES5 you would have to put all the values in a data container data type like an array. The Rest Parameters simplify this entire process."
    },
    {
      "type": "paragraph",
      "id": "3199efdbf5d1991a",
      "text": "Note: Do not confuse this term to the web services concept of REST. This has nothing to do with REST in web services. Rest here refers to gathering up parameters and putting them all into a single array. Spread refers to spreading out the elements of an array (or even a string)."
    },
    {
      "type": "paragraph",
      "id": "369862e0fe9d0008",
      "text": "Let’s look at an example,"
    },
    {
      "type": "code",
      "id": "1a40bd97798eb95a",
      "text": "var showCollections = function (id, ...collection) { console.log(collection instanceof Array); }; showCollections(42, \"movies\", \"music\"); // true"
    },
    {
      "type": "paragraph",
      "id": "d1fa274946af9ad3",
      "text": "The ... symbol is the rest symbol. It precedes a named parameter. This named parameter will become an Array that will just gather up all the remaining parameters passed to the function. Hence here, Collections is set to an array. To make this more clear if we execute the above program this way,"
    },
    {
      "type": "code",
      "id": "6ca2367395b01584",
      "text": "var showCollections = function (id, ...collection) { console.log(collection); }; showCollections(42, \"movies\", \"music\"); // [\"movies\", \"music\"]"
    },
    {
      "type": "paragraph",
      "id": "d108b7fc55e4ee7b",
      "text": "The Rest parameter gathers up all the remaining parameters after the id parameter and makes it into an array called collection. Excluding the first defined parameter ‘id, ’ everything will be placed in the Array."
    },
    {
      "type": "paragraph",
      "id": "141313d649dbc7fe",
      "text": "If we call the same function by passing it just one value which is the id, it logs out an empty array []. "
    },
    {
      "type": "paragraph",
      "id": "50ad06a14cf21f3e",
      "text": "Let’s look the length property of the function. If we call showCollections.length, it will give us the number of parameters in the function."
    },
    {
      "type": "code",
      "id": "2f03cdb7a56925a4",
      "text": "var showCollections = function (id, ...collection) {}; console.log(showCollections.length); // 1"
    },
    {
      "type": "paragraph",
      "id": "7b6b56eab99701a1",
      "text": "The length property ignores the Rest parameter. In this case, it is 1. The length property of the function only counts the number of named parameters excluding the rest parameter. Now let's look at the case where we check the arguments.length inside the function:"
    },
    {
      "type": "code",
      "id": "86a7a3ceab21957b",
      "text": "var showCollections = function (id, ...collection) { console.log(arguments.length); }; showCollections(123, \"movies\", \"music\"); // 3"
    },
    {
      "type": "paragraph",
      "id": "0d6b08af7ad3ee4e",
      "text": "We already had an arguments object, which we can use to check all the parameters passed to a function without having to define each parameter specifically. Remember we can have both named and unnamed parameters in a function. In this case, even though we have two parameters in the function definition, arguments object is going to refer back to the original function call and three is the number of arguments passed to the function."
    },
    {
      "type": "paragraph",
      "id": "496c4d7ddc4c5086",
      "text": "In the ES4 specification, Rest parameters were meant to replace arguments and arguments object was completely done away with, but ES4 never came into being and in ES6, this concept was reintroduced, but this time the 'arguments' has not been removed from the language."
    },
    {
      "type": "paragraph",
      "id": "845c3c1dafefdc29",
      "text": "We can use the Rest operator in a function constructor. Check the following where we are creating a new function that has a rest parameter and returns the very first argument that is passed into it."
    },
    {
      "type": "code",
      "id": "73087c8daefeb256",
      "text": "var getFirst = new Function(\"...args\", \"return args[0]\"); console.log(getFirst(1, 2)); // 1"
    },
    {
      "type": "markdown",
      "id": "ba422a1b328282bb",
      "text": "# The Spread Operator"
    },
    {
      "type": "paragraph",
      "id": "fe0da019230c4e49",
      "text": "The spread operator, which is also denoted by ... before an array, does essentially the reverse operation of a rest operator. It spreads out an array and passes the values into the specified function. Consider the following example: […]"
    },
    {
      "type": "pagefold",
      "id": "810ff3007de0a727",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "9c99e0f11c342a22",
      "text": "GROVER, Deepak and KUNDURU, Hanu Prateek, 2017. ES6 for humans: the latest standard of JavaScript: ES2015 and beyond. New York, NY: Apress, Springer Science+Business Media. For professionals by professionals. ISBN 978-1-4842-2623-0. \n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Rest and Spread Operators",
        "story": []
      },
      "date": 1679988104414
    },
    {
      "item": {
        "type": "factory",
        "id": "2dd36a07e324d51c"
      },
      "id": "2dd36a07e324d51c",
      "type": "add",
      "date": 1679988113640
    },
    {
      "type": "edit",
      "id": "2dd36a07e324d51c",
      "item": {
        "type": "paragraph",
        "id": "2dd36a07e324d51c",
        "text": "JavaScript has always had the feature of allowing functions to be passes fewer or more parameters than formally specified in the function declaration without any problems. Default Parameters, as discussed earlier, help you accept fewer values as parameters and still have the other parameters assigned a value."
      },
      "date": 1679988115273
    },
    {
      "item": {
        "type": "factory",
        "id": "810ff3007de0a727"
      },
      "id": "810ff3007de0a727",
      "type": "add",
      "after": "2dd36a07e324d51c",
      "date": 1679988117763
    },
    {
      "type": "edit",
      "id": "810ff3007de0a727",
      "item": {
        "type": "pagefold",
        "id": "810ff3007de0a727",
        "text": "~"
      },
      "date": 1679988120931
    },
    {
      "item": {
        "type": "factory",
        "id": "9c99e0f11c342a22"
      },
      "id": "9c99e0f11c342a22",
      "type": "add",
      "after": "810ff3007de0a727",
      "date": 1679988138176
    },
    {
      "type": "edit",
      "id": "9c99e0f11c342a22",
      "item": {
        "type": "paragraph",
        "id": "9c99e0f11c342a22",
        "text": "GROVER, Deepak and KUNDURU, Hanu Prateek, 2017. ES6 for humans: the latest standard of JavaScript: ES2015 and beyond. New York, NY: Apress, Springer Science+Business Media. For professionals by professionals. ISBN 978-1-4842-2623-0. \n"
      },
      "date": 1679988150517
    },
    {
      "type": "edit",
      "id": "2dd36a07e324d51c",
      "item": {
        "type": "paragraph",
        "id": "2dd36a07e324d51c",
        "text": "[[JavaScript]] has always had the feature of allowing functions to be passes fewer or more parameters than formally specified in the function declaration without any problems. Default Parameters, as discussed earlier, help you accept fewer values as parameters and still have the other parameters assigned a value."
      },
      "date": 1679988167383
    },
    {
      "item": {
        "type": "factory",
        "id": "16aeeca5f98b3279"
      },
      "id": "16aeeca5f98b3279",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988199887
    },
    {
      "id": "16aeeca5f98b3279",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988201391
    },
    {
      "type": "edit",
      "id": "16aeeca5f98b3279",
      "item": {
        "type": "paragraph",
        "id": "16aeeca5f98b3279",
        "text": "Many modern programming languages provide the ability for the function to accept a variable number of parameters. ES6 introduces this much needed feature to JavaScript with Rest Parameters. You now have the ability to pass a function a dynamic number of parameters very easily. If you wanted to do this in ES5 you would have to put all the values in a data container data type like an array. The Rest Parameters simplify this entire process."
      },
      "date": 1679988202648
    },
    {
      "type": "edit",
      "id": "16aeeca5f98b3279",
      "item": {
        "type": "paragraph",
        "id": "16aeeca5f98b3279",
        "text": "Many modern programming languages provide the ability for the function to accept a variable number of parameters. ES6 introduces this much needed feature to JavaScript with [[Rest Parameters]]. You now have the ability to pass a function a dynamic number of parameters very easily. If you wanted to do this in ES5 you would have to put all the values in a data container data type like an array. The Rest Parameters simplify this entire process."
      },
      "date": 1679988225322
    },
    {
      "type": "add",
      "id": "3199efdbf5d1991a",
      "item": {
        "type": "paragraph",
        "id": "3199efdbf5d1991a",
        "text": "Note Do not confuse this term to the web services concept of reSt. this has nothing to do with reSt in web services. rest here refers to gathering up parameters and putting them all into a single array. Spread refers to spreading out the elements of an array (or even a string)."
      },
      "after": "16aeeca5f98b3279",
      "date": 1679988261557
    },
    {
      "type": "edit",
      "id": "3199efdbf5d1991a",
      "item": {
        "type": "paragraph",
        "id": "3199efdbf5d1991a",
        "text": "Note Do not confuse this term to the web services concept of REST. this has nothing to do with reSt in web services. rest here refers to gathering up parameters and putting them all into a single array. Spread refers to spreading out the elements of an array (or even a string)."
      },
      "date": 1679988275804
    },
    {
      "type": "edit",
      "id": "3199efdbf5d1991a",
      "item": {
        "type": "paragraph",
        "id": "3199efdbf5d1991a",
        "text": "Note Do not confuse this term to the web services concept of REST. this has nothing to do with REST in web services. rest here refers to gathering up parameters and putting them all into a single array. Spread refers to spreading out the elements of an array (or even a string)."
      },
      "date": 1679988285192
    },
    {
      "type": "edit",
      "id": "3199efdbf5d1991a",
      "item": {
        "type": "paragraph",
        "id": "3199efdbf5d1991a",
        "text": "Note Do not confuse this term to the web services concept of REST. this has nothing to do with REST in web services. Rest here refers to gathering up parameters and putting them all into a single array. Spread refers to spreading out the elements of an array (or even a string)."
      },
      "date": 1679988295494
    },
    {
      "item": {
        "type": "factory",
        "id": "369862e0fe9d0008"
      },
      "id": "369862e0fe9d0008",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988323695
    },
    {
      "id": "369862e0fe9d0008",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988325139
    },
    {
      "type": "edit",
      "id": "369862e0fe9d0008",
      "item": {
        "type": "paragraph",
        "id": "369862e0fe9d0008",
        "text": "Let’s look at an example,"
      },
      "date": 1679988326177
    },
    {
      "item": {
        "type": "factory",
        "id": "1a40bd97798eb95a"
      },
      "id": "1a40bd97798eb95a",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988327884
    },
    {
      "id": "1a40bd97798eb95a",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988329489
    },
    {
      "type": "edit",
      "id": "1a40bd97798eb95a",
      "item": {
        "type": "code",
        "id": "1a40bd97798eb95a",
        "text": "var showCollections = function (id, ...collection) { console.log(collection instanceof Array); }; showCollections(42, \"movies\", \"music\"); // true"
      },
      "date": 1679988338278
    },
    {
      "item": {
        "type": "factory",
        "id": "d1fa274946af9ad3"
      },
      "id": "d1fa274946af9ad3",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988362983
    },
    {
      "id": "d1fa274946af9ad3",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "d1fa274946af9ad3",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988364844
    },
    {
      "type": "edit",
      "id": "d1fa274946af9ad3",
      "item": {
        "type": "paragraph",
        "id": "d1fa274946af9ad3",
        "text": "The ... symbol is the rest symbol. It precedes a named parameter. This named parameter will become an Array that will just gather up all the remaining parameters passed to the function. Hence here, Collections is set to an array. To make this more clear if we execute the above program this way,"
      },
      "date": 1679988366125
    },
    {
      "item": {
        "type": "factory",
        "id": "6ca2367395b01584"
      },
      "id": "6ca2367395b01584",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988396399
    },
    {
      "id": "6ca2367395b01584",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "d1fa274946af9ad3",
        "6ca2367395b01584",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988397949
    },
    {
      "type": "edit",
      "id": "6ca2367395b01584",
      "item": {
        "type": "code",
        "id": "6ca2367395b01584",
        "text": "var showCollections = function (id, ...collection) { console.log(collection); }; showCollections(42, \"movies\", \"music\"); // [\"movies\", \"music\"]"
      },
      "date": 1679988399586
    },
    {
      "item": {
        "type": "factory",
        "id": "d108b7fc55e4ee7b"
      },
      "id": "d108b7fc55e4ee7b",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988433423
    },
    {
      "id": "d108b7fc55e4ee7b",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "d1fa274946af9ad3",
        "6ca2367395b01584",
        "d108b7fc55e4ee7b",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988435314
    },
    {
      "type": "edit",
      "id": "d108b7fc55e4ee7b",
      "item": {
        "type": "paragraph",
        "id": "d108b7fc55e4ee7b",
        "text": "The Rest parameter gathers up all the remaining parameters after the id parameter and makes it into an array called collection. Excluding the first defined parameter ‘id, ’ everything will be placed in the Array."
      },
      "date": 1679988436514
    },
    {
      "type": "add",
      "id": "141313d649dbc7fe",
      "item": {
        "type": "paragraph",
        "id": "141313d649dbc7fe",
        "text": "If we call the same function by passing it just one value which is the id, it logs out an empty array []. Let’s look the length property of the function. If we call showCollections.length, it will give us the number of parameters in the function."
      },
      "after": "d108b7fc55e4ee7b",
      "date": 1679988458077
    },
    {
      "type": "edit",
      "id": "141313d649dbc7fe",
      "item": {
        "type": "paragraph",
        "id": "141313d649dbc7fe",
        "text": "If we call the same function by passing it just one value which is the id, it logs out an empty array []. "
      },
      "date": 1679988463537
    },
    {
      "type": "add",
      "id": "50ad06a14cf21f3e",
      "item": {
        "type": "paragraph",
        "id": "50ad06a14cf21f3e",
        "text": "Let’s look the length property of the function. If we call showCollections.length, it will give us the number of parameters in the function."
      },
      "after": "141313d649dbc7fe",
      "date": 1679988463913
    },
    {
      "item": {
        "type": "factory",
        "id": "2f03cdb7a56925a4"
      },
      "id": "2f03cdb7a56925a4",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988482696
    },
    {
      "id": "2f03cdb7a56925a4",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "d1fa274946af9ad3",
        "6ca2367395b01584",
        "d108b7fc55e4ee7b",
        "141313d649dbc7fe",
        "50ad06a14cf21f3e",
        "2f03cdb7a56925a4",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988484589
    },
    {
      "type": "edit",
      "id": "2f03cdb7a56925a4",
      "item": {
        "type": "code",
        "id": "2f03cdb7a56925a4",
        "text": "var showCollections = function (id, ...collection) {}; console.log(showCollections.length); // 1"
      },
      "date": 1679988486318
    },
    {
      "item": {
        "type": "factory",
        "id": "7b6b56eab99701a1"
      },
      "id": "7b6b56eab99701a1",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988496453
    },
    {
      "id": "7b6b56eab99701a1",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "d1fa274946af9ad3",
        "6ca2367395b01584",
        "d108b7fc55e4ee7b",
        "141313d649dbc7fe",
        "50ad06a14cf21f3e",
        "2f03cdb7a56925a4",
        "7b6b56eab99701a1",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988498329
    },
    {
      "type": "edit",
      "id": "7b6b56eab99701a1",
      "item": {
        "type": "paragraph",
        "id": "7b6b56eab99701a1",
        "text": "The length property ignores the Rest parameter. In this case, it is 1. The length property of the function only counts the number of named parameters excluding the rest parameter. Now let's look at the case where we check the arguments.length inside the function:"
      },
      "date": 1679988500023
    },
    {
      "item": {
        "type": "factory",
        "id": "86a7a3ceab21957b"
      },
      "id": "86a7a3ceab21957b",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988519482
    },
    {
      "id": "86a7a3ceab21957b",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "d1fa274946af9ad3",
        "6ca2367395b01584",
        "d108b7fc55e4ee7b",
        "141313d649dbc7fe",
        "50ad06a14cf21f3e",
        "2f03cdb7a56925a4",
        "7b6b56eab99701a1",
        "86a7a3ceab21957b",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988521175
    },
    {
      "type": "edit",
      "id": "86a7a3ceab21957b",
      "item": {
        "type": "code",
        "id": "86a7a3ceab21957b",
        "text": "var showCollections = function (id, ...collection) { console.log(arguments.length); }; showCollections(123, \"movies\", \"music\"); // 3"
      },
      "date": 1679988522935
    },
    {
      "item": {
        "type": "factory",
        "id": "0d6b08af7ad3ee4e"
      },
      "id": "0d6b08af7ad3ee4e",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988535452
    },
    {
      "id": "0d6b08af7ad3ee4e",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "d1fa274946af9ad3",
        "6ca2367395b01584",
        "d108b7fc55e4ee7b",
        "141313d649dbc7fe",
        "50ad06a14cf21f3e",
        "2f03cdb7a56925a4",
        "7b6b56eab99701a1",
        "86a7a3ceab21957b",
        "0d6b08af7ad3ee4e",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988537075
    },
    {
      "type": "edit",
      "id": "0d6b08af7ad3ee4e",
      "item": {
        "type": "paragraph",
        "id": "0d6b08af7ad3ee4e",
        "text": "We already had an arguments object, which we can use to check all the parameters passed to a function without having to define each parameter specifically. Remember we can have both named and unnamed parameters in a function. In this case, even though we have two parameters in the function definition, arguments object is going to refer back to the original function call and three is the number of arguments passed to the function."
      },
      "date": 1679988538379
    },
    {
      "item": {
        "type": "factory",
        "id": "496c4d7ddc4c5086"
      },
      "id": "496c4d7ddc4c5086",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988571800
    },
    {
      "id": "496c4d7ddc4c5086",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "d1fa274946af9ad3",
        "6ca2367395b01584",
        "d108b7fc55e4ee7b",
        "141313d649dbc7fe",
        "50ad06a14cf21f3e",
        "2f03cdb7a56925a4",
        "7b6b56eab99701a1",
        "86a7a3ceab21957b",
        "0d6b08af7ad3ee4e",
        "496c4d7ddc4c5086",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988574078
    },
    {
      "type": "edit",
      "id": "496c4d7ddc4c5086",
      "item": {
        "type": "paragraph",
        "id": "496c4d7ddc4c5086",
        "text": "In the ES4 specification, Rest parameters were meant to replace arguments and arguments object was completely done away with, but ES4 never came into being and in ES6, this concept was reintroduced, but this time the 'arguments' has not been removed from the language."
      },
      "date": 1679988575645
    },
    {
      "item": {
        "type": "factory",
        "id": "845c3c1dafefdc29"
      },
      "id": "845c3c1dafefdc29",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988595346
    },
    {
      "id": "845c3c1dafefdc29",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "d1fa274946af9ad3",
        "6ca2367395b01584",
        "d108b7fc55e4ee7b",
        "141313d649dbc7fe",
        "50ad06a14cf21f3e",
        "2f03cdb7a56925a4",
        "7b6b56eab99701a1",
        "86a7a3ceab21957b",
        "0d6b08af7ad3ee4e",
        "496c4d7ddc4c5086",
        "845c3c1dafefdc29",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988597421
    },
    {
      "type": "edit",
      "id": "845c3c1dafefdc29",
      "item": {
        "type": "paragraph",
        "id": "845c3c1dafefdc29",
        "text": "We can use the Rest operator in a function constructor. Check the following where we are creating a new function that has a rest parameter and returns the very first argument that is passed into it."
      },
      "date": 1679988599135
    },
    {
      "item": {
        "type": "factory",
        "id": "73087c8daefeb256"
      },
      "id": "73087c8daefeb256",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988609791
    },
    {
      "id": "73087c8daefeb256",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "d1fa274946af9ad3",
        "6ca2367395b01584",
        "d108b7fc55e4ee7b",
        "141313d649dbc7fe",
        "50ad06a14cf21f3e",
        "2f03cdb7a56925a4",
        "7b6b56eab99701a1",
        "86a7a3ceab21957b",
        "0d6b08af7ad3ee4e",
        "496c4d7ddc4c5086",
        "845c3c1dafefdc29",
        "73087c8daefeb256",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988611245
    },
    {
      "type": "edit",
      "id": "73087c8daefeb256",
      "item": {
        "type": "code",
        "id": "73087c8daefeb256",
        "text": "var getFirst = new Function(\"...args\", \"return args[0]\"); console.log(getFirst(1, 2)); // 1"
      },
      "date": 1679988613202
    },
    {
      "item": {
        "type": "factory",
        "id": "ba422a1b328282bb"
      },
      "id": "ba422a1b328282bb",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988660586
    },
    {
      "id": "ba422a1b328282bb",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "d1fa274946af9ad3",
        "6ca2367395b01584",
        "d108b7fc55e4ee7b",
        "141313d649dbc7fe",
        "50ad06a14cf21f3e",
        "2f03cdb7a56925a4",
        "7b6b56eab99701a1",
        "86a7a3ceab21957b",
        "0d6b08af7ad3ee4e",
        "496c4d7ddc4c5086",
        "845c3c1dafefdc29",
        "73087c8daefeb256",
        "ba422a1b328282bb",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988662172
    },
    {
      "type": "edit",
      "id": "ba422a1b328282bb",
      "item": {
        "type": "paragraph",
        "id": "ba422a1b328282bb",
        "text": "The Spread Operator"
      },
      "date": 1679988663628
    },
    {
      "item": {
        "type": "factory",
        "id": "fe0da019230c4e49"
      },
      "id": "fe0da019230c4e49",
      "type": "add",
      "after": "9c99e0f11c342a22",
      "date": 1679988670438
    },
    {
      "id": "fe0da019230c4e49",
      "type": "move",
      "order": [
        "2dd36a07e324d51c",
        "16aeeca5f98b3279",
        "3199efdbf5d1991a",
        "369862e0fe9d0008",
        "1a40bd97798eb95a",
        "d1fa274946af9ad3",
        "6ca2367395b01584",
        "d108b7fc55e4ee7b",
        "141313d649dbc7fe",
        "50ad06a14cf21f3e",
        "2f03cdb7a56925a4",
        "7b6b56eab99701a1",
        "86a7a3ceab21957b",
        "0d6b08af7ad3ee4e",
        "496c4d7ddc4c5086",
        "845c3c1dafefdc29",
        "73087c8daefeb256",
        "ba422a1b328282bb",
        "fe0da019230c4e49",
        "810ff3007de0a727",
        "9c99e0f11c342a22"
      ],
      "date": 1679988671911
    },
    {
      "type": "edit",
      "id": "fe0da019230c4e49",
      "item": {
        "type": "paragraph",
        "id": "fe0da019230c4e49",
        "text": "The spread operator, which is also denoted by ... before an array, does essentially the reverse operation of a rest operator. It spreads out an array and passes the values into the specified function. Consider the following example: […]"
      },
      "date": 1679988675953
    },
    {
      "type": "edit",
      "id": "ba422a1b328282bb",
      "item": {
        "type": "paragraph",
        "id": "ba422a1b328282bb",
        "text": "# The Spread Operator"
      },
      "date": 1679988782195
    },
    {
      "type": "edit",
      "id": "ba422a1b328282bb",
      "item": {
        "type": "markdown",
        "id": "ba422a1b328282bb",
        "text": "# The Spread Operator"
      },
      "date": 1679988783509
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1679988939844
    },
    {
      "type": "edit",
      "id": "3199efdbf5d1991a",
      "item": {
        "type": "paragraph",
        "id": "3199efdbf5d1991a",
        "text": "Note: Do not confuse this term to the web services concept of REST. this has nothing to do with REST in web services. Rest here refers to gathering up parameters and putting them all into a single array. Spread refers to spreading out the elements of an array (or even a string)."
      },
      "date": 1679989665111
    },
    {
      "type": "fork",
      "site": "code.dreyeck.ch",
      "date": 1679989733180
    },
    {
      "type": "edit",
      "id": "3199efdbf5d1991a",
      "item": {
        "type": "paragraph",
        "id": "3199efdbf5d1991a",
        "text": "Note: Do not confuse this term to the web services concept of REST. This has nothing to do with REST in web services. Rest here refers to gathering up parameters and putting them all into a single array. Spread refers to spreading out the elements of an array (or even a string)."
      },
      "date": 1679990525610
    }
  ]
}