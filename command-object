{
  "title": "Command Object",
  "story": [
    {
      "type": "html",
      "text": "[[Category Pattern]]:\nThis is [[Command Pattern]] in [[Design Patterns]], the [[Gang Of Four]] book.",
      "id": "4e3aa0a6809b42619bf5baf1b91a57cb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e8f68b55fdd533df9da7f90c076baa02"
    },
    {
      "type": "html",
      "text": "A computer is instructed to do things by way of commands. The usual intention is for these commands to be performed immediately. However, there are often occasions where one would like to issue instructions referring to the commands themselves.",
      "id": "8df837b53a9f49bb00fb5892e7e09622"
    },
    {
      "type": "html",
      "text": "<b>Therefore:</b>\nMake an object that represents a command. The most elemental responsibility of a command object is to perform the operations intended by an instruction. Additional responsibilities might include...",
      "id": "553621ec5e9f92c1cdf7a79c6c471e3f"
    },
    {
      "type": "html",
      "text": " undoing the operations",
      "id": "b8e18d3c0a94c154f817a45c27a833d6"
    },
    {
      "type": "html",
      "text": " performing the operations in a different context, possibly in a different process, machine, or time schedule (batching)",
      "id": "ecf1489caa0b25553c13f50a5e7f5e2b"
    },
    {
      "type": "html",
      "text": " simulating the effect of the operations",
      "id": "e88c25af74822dbfe778a861456af077"
    },
    {
      "type": "html",
      "text": "\nThe simulation is handy when a command is difficult to undo. For example, an editor with a one level undo might simulate global text substitutions (which can be hard to undo) until a subsequent command replaces it in the undo buffer. For those whose programming language doesn't provide threading, running batched [[Command Object]] can give you pseudo-threading.",
      "id": "63c4299aa24a9490d8f9b0448d88b15f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e8f68b55fdd533df9da7f90c076baa02"
    },
    {
      "type": "html",
      "text": "Tell me, could an entry object returned [?] from a Collection.add() method allowing the caller to replace or delete the added object without a reference to the original Collection (i.e., would entry.replaceWith(anObject), entry.delete(), etc.) be considered a use of this pattern? ",
      "id": "9a1d737e739fa4100c8d599cf8ac1f8e"
    },
    {
      "type": "html",
      "text": "-- [[William Underwood]]",
      "id": "f3acafc499f50e264dc0e099b10f8e46"
    },
    {
      "type": "html",
      "text": "<i>No/Yes. Why would you be returning anObject from a Collection.add()? Also, the 'without a reference to the original Collection' would be irrelevant but could break OO principles of visibility and scope and quite badly couple the [[Command Object]] to the collection.</i>",
      "id": "acd3a064100754fbaaf51043c2b6132c"
    },
    {
      "type": "html",
      "text": "<i>However the following would be a perfectly valid implementation</i>",
      "id": "4c175038a60040cea35be9ac7d4d0305"
    },
    {
      "type": "code",
      "text": " CommandObject aCommandObject = new CommandObject() ;\n aCollection.add( aCommandObject ) ;\n ...\n aCommandObject.execute() ;",
      "id": "da82dddf6d474f708a619ddf4be9b867"
    },
    {
      "type": "html",
      "text": "<i>-- [[Martin Spamer]]</i>",
      "id": "bc49b1678785e0668fe1f54ed03e7594"
    },
    {
      "type": "html",
      "text": "<i>What's the name of the command? doSomethingWithSomeObjectInSomeCollection? Each problem in coming up with a name indicates a problem in your design. The command pattern applies to some command, say eatMe(), with methods like eatMe.do(), eatMe.undo(), eatMe.simulate().</i>",
      "id": "c25c0d82261e52ae29dd8bd932c10437"
    },
    {
      "type": "html",
      "text": "<i>-- [[Jim Balter]]</i>",
      "id": "b539eac7b9d949a5bc7b685216f7ba30"
    },
    {
      "type": "html",
      "text": "\nI should have been more specific... it was more of an 'Anybody else ever try this?' remark...",
      "id": "ff0d3d41ced17c5f107c3891c1e0a5bd"
    },
    {
      "type": "html",
      "text": "\nI actually use this all the time: in one project, a list of video clips is stored in a collection. It is possible that it could be moved to a different collection at some point, so it's useful if it doesn't know which collection it's in. The clip therefore receives a command object to delete itself from the collection which handles this detail. This object is exposed so that the user interface for a clip can handle deleting that particular clip without any knowledge of the collection, while still giving final responsibility for deleting the clip to the collection it's in.",
      "id": "b23ee4c91dd884e4decce8e71f7b524b"
    },
    {
      "type": "html",
      "text": "-- [[William Underwood]]",
      "id": "f3acafc499f50e264dc0e099b10f8e46"
    },
    {
      "type": "html",
      "text": "\nThis is one of my favorite patterns. I'm wondering if anyone has considered using this pattern as a mechanism of recording actions for later replay in unit testing scenarios. One of the things that I have been doing is building an adapter to the underlying model which executes the commands on the model providing the usual undo functionality. What I am hoping to do when I get the time is plug a \"recorder\" onto the side of the base adapter class which records the commands (and their activities) and records that into a file/database/whatever which can then be used for reply.",
      "id": "1a606cae79e4eaeeda5ccef1c2c55c4a"
    },
    {
      "type": "html",
      "text": "\nThis would be good not only for unit testing, but potentially auditing as well. Does anyone else have [[Command Object Model View Controller Cross Breeding Programme]]?",
      "id": "a302d65c290fe80d03ad456549978dab"
    },
    {
      "type": "html",
      "text": "-- [[Mitch Denny]]",
      "id": "951ca568eb80c566c9330eae1b90a15a"
    },
    {
      "type": "html",
      "text": "\nYes, I designed and constructed a framework in java for developing Web Applications and using the [[Command Pattern]] to implement the Controller from MVC. The Controller was implemented such that the Commands where decoupled from HTTP and could also be used directly. Though was this intended so that the project had the option of replacing its [[Thin Client]] with a [[Rich Client]], a side-effect was that we could use a driver, which was actually used for load testing (rather than unit test which used Junit). Struts uses a very similar approach.",
      "id": "bb608487343ad62afb4e0ccc9a223492"
    },
    {
      "type": "html",
      "text": "-- [[Martin Spamer]]",
      "id": "0d5d1628ccb1d577b05ad59f7f1fca56"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e8f68b55fdd533df9da7f90c076baa02"
    },
    {
      "type": "html",
      "text": "May be useful in... [[Database Deadlock Avoidance Patterns]]",
      "id": "857fc22553785ab88293fb26e5e22458"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e8f68b55fdd533df9da7f90c076baa02"
    },
    {
      "type": "html",
      "text": "See also [[Threaded Command Object]]",
      "id": "2ee86522d67f2d63e0df89b6b809188a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e8f68b55fdd533df9da7f90c076baa02"
    },
    {
      "type": "html",
      "text": "The [[Mac App]] version of [[Command Object]] was one of many pieces of architecture contributed to [[Bruce Anderson]]'s first [[Architecture Handbook Workshop]]. ",
      "id": "3a903fa9292dfee12c07c8db177b9caf"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "e8f68b55fdd533df9da7f90c076baa02"
    },
    {
      "type": "html",
      "text": "\nIt seems to me that the [[Page Controller]] pattern in Fowler's Patterns of Enterprise Application Architecture could be implemented with a specialized [[Command Object]]. This makes me wonder if you could consider a [[Page Controller Object]] pattern as a \"subclass\" of the [[Command Object]] pattern, and that makes me wonder if design patterns could be logically arranged in an inheritance hierarchy. Has anyone else considered this?",
      "id": "7ae75e92bf3d142bcd4a67225f62ac6a"
    },
    {
      "type": "html",
      "text": "-- [[Ryan Springer]]",
      "id": "8f9331a1ffa7907ce4fc56917342bb33"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CommandObject c2.com]",
      "id": "b3f50bce7067cbe83274a9e75a700b27"
    }
  ],
  "journal": [
    {
      "date": 1401534128000,
      "id": "60bfc9bca1543dd0c19093766a8fcef0",
      "type": "create",
      "item": {
        "title": "Command Object",
        "story": [
          {
            "type": "html",
            "text": "[[Category Pattern]]:\nThis is [[Command Pattern]] in [[Design Patterns]], the [[Gang Of Four]] book.",
            "id": "4e3aa0a6809b42619bf5baf1b91a57cb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e8f68b55fdd533df9da7f90c076baa02"
          },
          {
            "type": "html",
            "text": "A computer is instructed to do things by way of commands. The usual intention is for these commands to be performed immediately. However, there are often occasions where one would like to issue instructions referring to the commands themselves.",
            "id": "8df837b53a9f49bb00fb5892e7e09622"
          },
          {
            "type": "html",
            "text": "<b>Therefore:</b>\nMake an object that represents a command. The most elemental responsibility of a command object is to perform the operations intended by an instruction. Additional responsibilities might include...",
            "id": "553621ec5e9f92c1cdf7a79c6c471e3f"
          },
          {
            "type": "html",
            "text": " undoing the operations",
            "id": "b8e18d3c0a94c154f817a45c27a833d6"
          },
          {
            "type": "html",
            "text": " performing the operations in a different context, possibly in a different process, machine, or time schedule (batching)",
            "id": "ecf1489caa0b25553c13f50a5e7f5e2b"
          },
          {
            "type": "html",
            "text": " simulating the effect of the operations",
            "id": "e88c25af74822dbfe778a861456af077"
          },
          {
            "type": "html",
            "text": "\nThe simulation is handy when a command is difficult to undo. For example, an editor with a one level undo might simulate global text substitutions (which can be hard to undo) until a subsequent command replaces it in the undo buffer. For those whose programming language doesn't provide threading, running batched [[Command Object]] can give you pseudo-threading.",
            "id": "63c4299aa24a9490d8f9b0448d88b15f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e8f68b55fdd533df9da7f90c076baa02"
          },
          {
            "type": "html",
            "text": "Tell me, could an entry object returned [?] from a Collection.add() method allowing the caller to replace or delete the added object without a reference to the original Collection (i.e., would entry.replaceWith(anObject), entry.delete(), etc.) be considered a use of this pattern? ",
            "id": "9a1d737e739fa4100c8d599cf8ac1f8e"
          },
          {
            "type": "html",
            "text": "-- [[William Underwood]]",
            "id": "f3acafc499f50e264dc0e099b10f8e46"
          },
          {
            "type": "html",
            "text": "<i>No/Yes. Why would you be returning anObject from a Collection.add()? Also, the 'without a reference to the original Collection' would be irrelevant but could break OO principles of visibility and scope and quite badly couple the [[Command Object]] to the collection.</i>",
            "id": "acd3a064100754fbaaf51043c2b6132c"
          },
          {
            "type": "html",
            "text": "<i>However the following would be a perfectly valid implementation</i>",
            "id": "4c175038a60040cea35be9ac7d4d0305"
          },
          {
            "type": "code",
            "text": " CommandObject aCommandObject = new CommandObject() ;\n aCollection.add( aCommandObject ) ;\n ...\n aCommandObject.execute() ;",
            "id": "da82dddf6d474f708a619ddf4be9b867"
          },
          {
            "type": "html",
            "text": "<i>-- [[Martin Spamer]]</i>",
            "id": "bc49b1678785e0668fe1f54ed03e7594"
          },
          {
            "type": "html",
            "text": "<i>What's the name of the command? doSomethingWithSomeObjectInSomeCollection? Each problem in coming up with a name indicates a problem in your design. The command pattern applies to some command, say eatMe(), with methods like eatMe.do(), eatMe.undo(), eatMe.simulate().</i>",
            "id": "c25c0d82261e52ae29dd8bd932c10437"
          },
          {
            "type": "html",
            "text": "<i>-- [[Jim Balter]]</i>",
            "id": "b539eac7b9d949a5bc7b685216f7ba30"
          },
          {
            "type": "html",
            "text": "\nI should have been more specific... it was more of an 'Anybody else ever try this?' remark...",
            "id": "ff0d3d41ced17c5f107c3891c1e0a5bd"
          },
          {
            "type": "html",
            "text": "\nI actually use this all the time: in one project, a list of video clips is stored in a collection. It is possible that it could be moved to a different collection at some point, so it's useful if it doesn't know which collection it's in. The clip therefore receives a command object to delete itself from the collection which handles this detail. This object is exposed so that the user interface for a clip can handle deleting that particular clip without any knowledge of the collection, while still giving final responsibility for deleting the clip to the collection it's in.",
            "id": "b23ee4c91dd884e4decce8e71f7b524b"
          },
          {
            "type": "html",
            "text": "-- [[William Underwood]]",
            "id": "f3acafc499f50e264dc0e099b10f8e46"
          },
          {
            "type": "html",
            "text": "\nThis is one of my favorite patterns. I'm wondering if anyone has considered using this pattern as a mechanism of recording actions for later replay in unit testing scenarios. One of the things that I have been doing is building an adapter to the underlying model which executes the commands on the model providing the usual undo functionality. What I am hoping to do when I get the time is plug a \"recorder\" onto the side of the base adapter class which records the commands (and their activities) and records that into a file/database/whatever which can then be used for reply.",
            "id": "1a606cae79e4eaeeda5ccef1c2c55c4a"
          },
          {
            "type": "html",
            "text": "\nThis would be good not only for unit testing, but potentially auditing as well. Does anyone else have [[Command Object Model View Controller Cross Breeding Programme]]?",
            "id": "a302d65c290fe80d03ad456549978dab"
          },
          {
            "type": "html",
            "text": "-- [[Mitch Denny]]",
            "id": "951ca568eb80c566c9330eae1b90a15a"
          },
          {
            "type": "html",
            "text": "\nYes, I designed and constructed a framework in java for developing Web Applications and using the [[Command Pattern]] to implement the Controller from MVC. The Controller was implemented such that the Commands where decoupled from HTTP and could also be used directly. Though was this intended so that the project had the option of replacing its [[Thin Client]] with a [[Rich Client]], a side-effect was that we could use a driver, which was actually used for load testing (rather than unit test which used Junit). Struts uses a very similar approach.",
            "id": "bb608487343ad62afb4e0ccc9a223492"
          },
          {
            "type": "html",
            "text": "-- [[Martin Spamer]]",
            "id": "0d5d1628ccb1d577b05ad59f7f1fca56"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e8f68b55fdd533df9da7f90c076baa02"
          },
          {
            "type": "html",
            "text": "May be useful in... [[Database Deadlock Avoidance Patterns]]",
            "id": "857fc22553785ab88293fb26e5e22458"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e8f68b55fdd533df9da7f90c076baa02"
          },
          {
            "type": "html",
            "text": "See also [[Threaded Command Object]]",
            "id": "2ee86522d67f2d63e0df89b6b809188a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e8f68b55fdd533df9da7f90c076baa02"
          },
          {
            "type": "html",
            "text": "The [[Mac App]] version of [[Command Object]] was one of many pieces of architecture contributed to [[Bruce Anderson]]'s first [[Architecture Handbook Workshop]]. ",
            "id": "3a903fa9292dfee12c07c8db177b9caf"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "e8f68b55fdd533df9da7f90c076baa02"
          },
          {
            "type": "html",
            "text": "\nIt seems to me that the [[Page Controller]] pattern in Fowler's Patterns of Enterprise Application Architecture could be implemented with a specialized [[Command Object]]. This makes me wonder if you could consider a [[Page Controller Object]] pattern as a \"subclass\" of the [[Command Object]] pattern, and that makes me wonder if design patterns could be logically arranged in an inheritance hierarchy. Has anyone else considered this?",
            "id": "7ae75e92bf3d142bcd4a67225f62ac6a"
          },
          {
            "type": "html",
            "text": "-- [[Ryan Springer]]",
            "id": "8f9331a1ffa7907ce4fc56917342bb33"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CommandObject c2.com]",
            "id": "b3f50bce7067cbe83274a9e75a700b27"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1654017115013
    }
  ]
}