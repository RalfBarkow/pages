{
  "title": "Open Policy Agent",
  "story": [
    {
      "type": "paragraph",
      "id": "9a431e62ef5194c8",
      "text": "The [[Open Policy Agent]] (OPA, pronounced “oh-pa”) is an open source, general-purpose policy engine that unifies policy enforcement across the stack. OPA provides a high-level declarative language that lets you specify policy as code and simple APIs to offload policy decision-making from your software. You can use OPA to enforce policies in microservices, Kubernetes, CI/CD pipelines, API gateways, and more. [https://www.openpolicyagent.org/docs/latest/ page]\n"
    },
    {
      "type": "markdown",
      "id": "ca85e22088000015",
      "text": "Open Policy Agent (OPA) is a generic policy engine to allow/deny actions on many systems, think authorization/audit for all sorts of systems. [https://discord.com/channels/729445214812504107/801795843115319336/997948228391678105 discord] It gets input as JSON, uses a DSL to define policies and returns allow/deny response for other systems to act on those. You mention [[Rego]] (the declarative DSL that tests inputs against policies) is implemented in Golang, but seems what you may want is to build a parser in GT that understands Rego, and potentially a way to test inputs against policies, so Gt would talk to a policy engine hosted locally or somewhere else, similar to how you can prototype stuff with (https://play.openpolicyagent.org/). Is this close to the direction that intersts you? Is there a specific end in mind you have around how potentially Gtoolkit can help with Rego/OPA? Is there a need that other systems/tools don't do well?\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Open Policy Agent",
        "story": []
      },
      "date": 1650879956661
    },
    {
      "item": {
        "type": "factory",
        "id": "9a431e62ef5194c8"
      },
      "id": "9a431e62ef5194c8",
      "type": "add",
      "date": 1650880138689
    },
    {
      "type": "edit",
      "id": "9a431e62ef5194c8",
      "item": {
        "type": "paragraph",
        "id": "9a431e62ef5194c8",
        "text": "The Open Policy Agent (OPA, pronounced “oh-pa”) is an open source, general-purpose policy engine that unifies policy enforcement across the stack. OPA provides a high-level declarative language that lets you specify policy as code and simple APIs to offload policy decision-making from your software. You can use OPA to enforce policies in microservices, Kubernetes, CI/CD pipelines, API gateways, and more.\n"
      },
      "date": 1650880139955
    },
    {
      "type": "edit",
      "id": "9a431e62ef5194c8",
      "item": {
        "type": "paragraph",
        "id": "9a431e62ef5194c8",
        "text": "The Open Policy Agent (OPA, pronounced “oh-pa”) is an open source, general-purpose policy engine that unifies policy enforcement across the stack. OPA provides a high-level declarative language that lets you specify policy as code and simple APIs to offload policy decision-making from your software. You can use OPA to enforce policies in microservices, Kubernetes, CI/CD pipelines, API gateways, and more. [https://www.openpolicyagent.org/docs/latest/ page]\n"
      },
      "date": 1650880163070
    },
    {
      "type": "edit",
      "id": "9a431e62ef5194c8",
      "item": {
        "type": "paragraph",
        "id": "9a431e62ef5194c8",
        "text": "The [[Open Policy Agent]] (OPA, pronounced “oh-pa”) is an open source, general-purpose policy engine that unifies policy enforcement across the stack. OPA provides a high-level declarative language that lets you specify policy as code and simple APIs to offload policy decision-making from your software. You can use OPA to enforce policies in microservices, Kubernetes, CI/CD pipelines, API gateways, and more. [https://www.openpolicyagent.org/docs/latest/ page]\n"
      },
      "date": 1650880173654
    },
    {
      "item": {
        "type": "factory",
        "id": "ca85e22088000015"
      },
      "id": "ca85e22088000015",
      "type": "add",
      "after": "9a431e62ef5194c8",
      "date": 1658844407597
    },
    {
      "type": "edit",
      "id": "ca85e22088000015",
      "item": {
        "type": "paragraph",
        "id": "ca85e22088000015",
        "text": "pen Policy Agent (OPA) is a generic policy engine to allow/deny actions on many systems, think authorization/audit for all sorts of systems. It gets input as JSON, uses a DSL to define policies and returns allow/deny response for other systems to act on those. You mention Rego (the declarative DSL that tests inputs against policies) is implemented in Golang, but seems what you may want is to build a parser in GT that understands Rego, and potentially a way to test inputs against policies, so Gt would talk to a policy engine hosted locally or somewhere else, similar to how you can prototype stuff with (https://play.openpolicyagent.org/). Is this close to the direction that intersts you? Is there a specific end in mind you have around how potentially Gtoolkit can help with Rego/OPA? Is there a need that other systems/tools don't do well?\n\nIf you want/need a parser/syntax highlighter for Rego, one can probably built, inspired from https://github.com/open-policy-agent/vscode-opa/blob/master/syntaxes/Rego.tmLanguage . And generally looking at the code of that VS Code extension it calls the opa binary (somewhere in your system) to perform a lot of it's features. Seeing how that works can give you ideas of anything you would want to mimic in Gt"
      },
      "date": 1658844409077
    },
    {
      "type": "edit",
      "id": "ca85e22088000015",
      "item": {
        "type": "paragraph",
        "id": "ca85e22088000015",
        "text": "Open Policy Agent (OPA) is a generic policy engine to allow/deny actions on many systems, think authorization/audit for all sorts of systems. It gets input as JSON, uses a DSL to define policies and returns allow/deny response for other systems to act on those. You mention Rego (the declarative DSL that tests inputs against policies) is implemented in Golang, but seems what you may want is to build a parser in GT that understands Rego, and potentially a way to test inputs against policies, so Gt would talk to a policy engine hosted locally or somewhere else, similar to how you can prototype stuff with (https://play.openpolicyagent.org/). Is this close to the direction that intersts you? Is there a specific end in mind you have around how potentially Gtoolkit can help with Rego/OPA? Is there a need that other systems/tools don't do well?\n\nIf you want/need a parser/syntax highlighter for Rego, one can probably built, inspired from https://github.com/open-policy-agent/vscode-opa/blob/master/syntaxes/Rego.tmLanguage . And generally looking at the code of that VS Code extension it calls the opa binary (somewhere in your system) to perform a lot of it's features. Seeing how that works can give you ideas of anything you would want to mimic in Gt"
      },
      "date": 1658844417363
    },
    {
      "type": "edit",
      "id": "ca85e22088000015",
      "item": {
        "type": "markdown",
        "id": "ca85e22088000015",
        "text": "Open Policy Agent (OPA) is a generic policy engine to allow/deny actions on many systems, think authorization/audit for all sorts of systems. It gets input as JSON, uses a DSL to define policies and returns allow/deny response for other systems to act on those. You mention Rego (the declarative DSL that tests inputs against policies) is implemented in Golang, but seems what you may want is to build a parser in GT that understands Rego, and potentially a way to test inputs against policies, so Gt would talk to a policy engine hosted locally or somewhere else, similar to how you can prototype stuff with (https://play.openpolicyagent.org/). Is this close to the direction that intersts you? Is there a specific end in mind you have around how potentially Gtoolkit can help with Rego/OPA? Is there a need that other systems/tools don't do well?\n\nIf you want/need a parser/syntax highlighter for Rego, one can probably built, inspired from https://github.com/open-policy-agent/vscode-opa/blob/master/syntaxes/Rego.tmLanguage . And generally looking at the code of that VS Code extension it calls the opa binary (somewhere in your system) to perform a lot of it's features. Seeing how that works can give you ideas of anything you would want to mimic in Gt"
      },
      "date": 1658844468219
    },
    {
      "type": "edit",
      "id": "ca85e22088000015",
      "item": {
        "type": "markdown",
        "id": "ca85e22088000015",
        "text": "Open Policy Agent (OPA) is a generic policy engine to allow/deny actions on many systems, think authorization/audit for all sorts of systems. [https://discord.com/channels/729445214812504107/801795843115319336/997948228391678105 discord] It gets input as JSON, uses a DSL to define policies and returns allow/deny response for other systems to act on those. You mention Rego (the declarative DSL that tests inputs against policies) is implemented in Golang, but seems what you may want is to build a parser in GT that understands Rego, and potentially a way to test inputs against policies, so Gt would talk to a policy engine hosted locally or somewhere else, similar to how you can prototype stuff with (https://play.openpolicyagent.org/). Is this close to the direction that intersts you? Is there a specific end in mind you have around how potentially Gtoolkit can help with Rego/OPA? Is there a need that other systems/tools don't do well?\n\nIf you want/need a parser/syntax highlighter for Rego, one can probably built, inspired from https://github.com/open-policy-agent/vscode-opa/blob/master/syntaxes/Rego.tmLanguage . And generally looking at the code of that VS Code extension it calls the opa binary (somewhere in your system) to perform a lot of it's features. Seeing how that works can give you ideas of anything you would want to mimic in Gt"
      },
      "date": 1658844522093
    },
    {
      "type": "edit",
      "id": "ca85e22088000015",
      "item": {
        "type": "markdown",
        "id": "ca85e22088000015",
        "text": "Open Policy Agent (OPA) is a generic policy engine to allow/deny actions on many systems, think authorization/audit for all sorts of systems. [https://discord.com/channels/729445214812504107/801795843115319336/997948228391678105 discord] It gets input as JSON, uses a DSL to define policies and returns allow/deny response for other systems to act on those. You mention [[Rego]] (the declarative DSL that tests inputs against policies) is implemented in Golang, but seems what you may want is to build a parser in GT that understands Rego, and potentially a way to test inputs against policies, so Gt would talk to a policy engine hosted locally or somewhere else, similar to how you can prototype stuff with (https://play.openpolicyagent.org/). Is this close to the direction that intersts you? Is there a specific end in mind you have around how potentially Gtoolkit can help with Rego/OPA? Is there a need that other systems/tools don't do well?\n\nIf you want/need a parser/syntax highlighter for Rego, one can probably built, inspired from https://github.com/open-policy-agent/vscode-opa/blob/master/syntaxes/Rego.tmLanguage . And generally looking at the code of that VS Code extension it calls the opa binary (somewhere in your system) to perform a lot of it's features. Seeing how that works can give you ideas of anything you would want to mimic in Gt"
      },
      "date": 1658844543838
    },
    {
      "type": "edit",
      "id": "ca85e22088000015",
      "item": {
        "type": "markdown",
        "id": "ca85e22088000015",
        "text": "Open Policy Agent (OPA) is a generic policy engine to allow/deny actions on many systems, think authorization/audit for all sorts of systems. [https://discord.com/channels/729445214812504107/801795843115319336/997948228391678105 discord] It gets input as JSON, uses a DSL to define policies and returns allow/deny response for other systems to act on those. You mention [[Rego]] (the declarative DSL that tests inputs against policies) is implemented in Golang, but seems what you may want is to build a parser in GT that understands Rego, and potentially a way to test inputs against policies, so Gt would talk to a policy engine hosted locally or somewhere else, similar to how you can prototype stuff with (https://play.openpolicyagent.org/). Is this close to the direction that intersts you? Is there a specific end in mind you have around how potentially Gtoolkit can help with Rego/OPA? Is there a need that other systems/tools don't do well?\n"
      },
      "date": 1658844597569
    },
    {
      "type": "add",
      "id": "d6226f9fb58937fe",
      "item": {
        "type": "markdown",
        "id": "d6226f9fb58937fe",
        "text": "\nIf you want/need a parser/syntax highlighter for Rego, one can probably built, inspired from https://github.com/open-policy-agent/vscode-opa/blob/master/syntaxes/Rego.tmLanguage . And generally looking at the code of that VS Code extension it calls the opa binary (somewhere in your system) to perform a lot of it's features. Seeing how that works can give you ideas of anything you would want to mimic in Gt"
      },
      "after": "ca85e22088000015",
      "date": 1658844598193
    },
    {
      "id": "d6226f9fb58937fe",
      "type": "remove",
      "date": 1658844600238
    }
  ]
}