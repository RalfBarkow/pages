{
  "title": "Collective Code Ownership",
  "story": [
    {
      "type": "html",
      "text": "Alternative to [[Code Stewardship]].",
      "id": "5fa9b43b9259e93ff3f2ec43bd07c093"
    },
    {
      "type": "html",
      "text": "\n[[Extreme Programming]] considers code to belong to the project, not to an individual engineer. As engineers develop required functionality, they may browse into <i>and modify</i> any class. They are responsible for keeping all the [[Unit Test]]s running (and writing new ones for new functionality). They take on the same integrity-preserving duties as the class owner in a [[Code Ownership]] situation.",
      "id": "df92e8d188eb6b7f037da10dc874acfb"
    },
    {
      "type": "html",
      "text": "\nWorking in this mode lets a responsible team move quickly to add new functionality while keeping responsibility in the right objects. [[Code Ownership]] creates dependencies and bottlenecks when implementing [[User Stories]]. We avoid code ownership, because it conflicts with commitment from the [[Planning Game]]. (\"Code is nothing, stories are everything!\")",
      "id": "375292af211fed943a356680a27c2027"
    },
    {
      "type": "html",
      "text": "\nThe ability to make this work requires at least:",
      "id": "30829b3c9c5ee91aa8b97b578ff12557"
    },
    {
      "type": "html",
      "text": " all engineers use the same [[Coding Standard]]s;",
      "id": "99eb2b71f97c0943340086abdb7a4744"
    },
    {
      "type": "html",
      "text": " code management tools to detect and resolve conflicts (CVS!);",
      "id": "cd7f07655be66d1fcc56a152b80c5b9c"
    },
    {
      "type": "html",
      "text": " a comprehensive suite of [[Unit Test]]s to ensure quality;",
      "id": "2f90baadafb00f5edfe136dcaafa2d94"
    },
    {
      "type": "html",
      "text": " powerful browsing and [[Refactoring Tools]] to find references to old methods and replace them with the new;",
      "id": "12fb71da4e9e755ddeab71ed91405fa5"
    },
    {
      "type": "html",
      "text": " [[Continuous Integration]] (or nearly that) so that conflicts are rare (also CVS).",
      "id": "cb21eb6330ce68883b108fc2792f2538"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c17f7bba225bb0059945fbce2812a5a0"
    },
    {
      "type": "html",
      "text": "\nOkay, this is where I see the scaling difficulties coming in. Collective ownership of anything doesn't scale. If Bill and Ted own a radio, and Bill wants to listen to one station while Ted wants to listen to another, they need some system for resolving their difference.",
      "id": "2a982c2e2411f0d4bfde45c1fe7a8d27"
    },
    {
      "type": "html",
      "text": "\nIn software, it's easy to clone a radio. Bill can listen to what he wants and Ted can listen to what he wants. But if Bill and Ted are trying to use their radio programs as input to a design decision (say, what kind of guitars to buy for use in Wyld Stallyns ... in software, say, what kind of GUI to build, or what database product to use) then you have trouble brewing. Multiply the situation by 100 developers and a year-long project full of crucial decisions, and you have a [[Tragedy Of The Commons]].",
      "id": "17f10ed0f23d39c75cdd6e82ba2f61b3"
    },
    {
      "type": "html",
      "text": "\nSo there are a number of ways of resolving this:",
      "id": "37f1b8b05d7273e029a90d3b6059d74e"
    },
    {
      "type": "html",
      "text": " keep the project small. You don't need 100 developers; you need 10 good ones. Or better, 3 good ones. If you can't do that ...",
      "id": "711e58d2ef950dc4f53cf4acfb85543d"
    },
    {
      "type": "html",
      "text": " decompose the requirements onto teams, each of which has internal [[Collective Code Ownership]]. This works great so long as the problem domain is well understood. But where it's not, the left hand and the right hand have a habit of wrong-footing each other; interfaces become bones of contention; politics occurs; management takes an interest so you have to ...",
      "id": "f40061f7034c4d24040bcb272a4f56c0"
    },
    {
      "type": "html",
      "text": " define a project hierarchy. Plan release-schedules and document analyses. [[Collective Code Ownership]] gets buried under an avalanche of memos, meetings and managers.",
      "id": "094cfe277d24e6714e27e3998b33de4e"
    },
    {
      "type": "html",
      "text": "\nSo this last bit is where I think a [[Stone Society]] could be useful. Make interface alternatives, tool purchasing, human-resourcing, standards and design decisions subject to Auction. Let development groups form and unform naturally as Sub-Societies. Use Services to fund internal infrastructure projects. Replace politics with a free market.",
      "id": "212969724f1baba09eaa181b3f54a834"
    },
    {
      "type": "html",
      "text": "-- [[Peter Merel]]",
      "id": "eac577064b619355f54299e78c199aad"
    },
    {
      "type": "html",
      "text": "<i>You think an unusual form of democratic voting will eliminate politics? -- [[Jeff Grigg]]</i>",
      "id": "b5fe3ace0877cfaf8ce7ef2d63a76f74"
    },
    {
      "type": "html",
      "text": "\nConsider [[Code Stewardship]]. It works well, and with low overhead. -- [[Dave Smith]]",
      "id": "81fcd2c9c005ae4acab6ef12dd456d0d"
    },
    {
      "type": "html",
      "text": "\nContrary to what Peter maintains, decomposing into subsystems and practicing [[Collective Code Ownership]] inside the subteams can work quite well. We work with a large System and four different labs on the same project (~30 developers). Subsystem integration is done once a week. If we have to make a change to some part of the system in order to implement a feature, we request the change from the other team. Most of the time, the change can be done without breaking the interface between the subsystems. In that case, we postpone our work to the next build. If the change has to be done NOW or the change is breaking, we get the code changes before the next build and integrate it into our local copy of the other team's code. If we make a mistake and the build breaks at integration time, we have to fix it then. This almost never happens. The team leaders negotiate which changes are done for a particular build if some conflict arises. A published work plan keeps everyone informed when to expect some change they require. The whole thing sounds complicated, but in practice it most often amounts to writing an email (\"can I have this API in the next build?\" \"Yeah, sure\"). -- [[Thomas Maeder]]",
      "id": "f2156477d7afa21746a44e2aec4a0c16"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c17f7bba225bb0059945fbce2812a5a0"
    },
    {
      "type": "html",
      "text": "From [[Thoughtful Reactions To Xp]]:",
      "id": "db39ee92bbe8ff67cc0335011dc22072"
    },
    {
      "type": "html",
      "text": " Thrashing can occur by conflicting refactoring efforts. People can get upset with the changes.",
      "id": "b1c2fb904701a6a89a48ac3f136a4849"
    },
    {
      "type": "html",
      "text": " The constant rotation of pairs keeps everyone in touch and reduces ruffled feathers. XP teams have strict [[Coding Standard]]s, so refactoring back and forth won't happen. I've never seen team players thrashing the code. ",
      "id": "82f6da6ce55a09ab85eef738027fa7e2"
    },
    {
      "type": "html",
      "text": " One of the reasons communism failed is because there is no concept of ownership and therefore less motivation for or no pride in one's work.",
      "id": "701625f54da2850e577ae9a348c6f48b"
    },
    {
      "type": "html",
      "text": " Please don't stretch this one too far. Collective ownership works because the group is smallish and they really do own the code - not some elite on their behalf.",
      "id": "28b61910ea9b37810d0d264d41dfe3e1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c17f7bba225bb0059945fbce2812a5a0"
    },
    {
      "type": "html",
      "text": "I was thinking about [[Collective Code Ownership]] a little while, and I wonder: If I don't like doing GUI, but I'm really good at the other tiers, should I be rotated into GUI pairs anyway? My gut instinct is to say, \"No\", with a caveat. There may be grotty parts of the system that everyone fears working on. In this case, I'd imagine the group should encourage pairs to bite the bullet and do it anyway, and then the next time a grotty issue came up, the volunteers would be free from the responsibility of having to work on it. -- [[John Duncan]]",
      "id": "885d300c2626d6f1bcab3e83f3e1a533"
    },
    {
      "type": "html",
      "text": "<i>Within XP problem is solved that [[Programmer Chooses Tasks]]. </i>",
      "id": "c57a10176c747a0ddfeb00889330084e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c17f7bba225bb0059945fbce2812a5a0"
    },
    {
      "type": "html",
      "text": "[[Kent The Beck]] writes in [[Smalltalk Best Practice Patterns]] (p.14) that \"The next bottleneck in software engineering is human communication. When we say that 70 percent of the development budget is spent on maintenance, we mean that the poor maintainers have to wade through piles of documentation and code to <i>discover the intent</i> [emphasis added] of the original programmer. The advent of widespread reuse exacerbates the problem. No longer is one maintainer the audience for one developer. <i>Hundreds, thousands, or hundreds of thousands of elaborators are trying to understand the intent of an abstractor</i> [emphasis added].\"",
      "id": "4c6d00723434e6bdc3ca4e92e6636ecd"
    },
    {
      "type": "html",
      "text": "\n[[Fred Brooks]] writes in [[The Mythical Man Month]] (p.42) that he \"will contend that conceptual integrity is <i>the</i> most important consideration in system design.\"",
      "id": "74c0cec14a2f5c396532b2ccb0c06364"
    },
    {
      "type": "html",
      "text": "\nSo I have a question for the [[Collective Code Ownership]] advocates. How, in a [[Collective Code Ownership]] scenario, is [[Conceptual Integrity]] preserved? How is it ensured that elaborators working on classes created by an initial abstractor understand the intent of that abstractor? Is it ensured by reliance on shared understanding of, and commitment to, a [[System Metaphor]] and some coding standards? Is [[Conceptual Integrity]] subordinate to the refactoring motivations of the day?",
      "id": "c7df01d66f1b93edd3a9fd813e85fe09"
    },
    {
      "type": "html",
      "text": "\nThe reason I ask is because preservation of [[Conceptual Integrity]] is usually presented as one of the arguments for [[Code Ownership]]. If I remember right, the [[Envy Developer]] manuals even presented this argument as rationale for some of the philosophical decisions evident in the tool's design. IMHO [[Code Stewardship]], with some kind of apprenticing of future elaborators to original abstractors (if possible), may be the solution that balances the forces. Thoughts? -- [[Randy Stafford]]",
      "id": "56ed1d7e5140767cbcf10c434325d490"
    },
    {
      "type": "html",
      "text": "\nI would argue that [[Conceptual Integrity]] is independent of [[Code Ownership]]. Regardless of how you divide up the code for development, everyone on the team, now and in the future, needs to have a common understanding of the purpose of the project and approaches being used. Tying together individual modules, each with their own \"[[Conceptual Integrity]]\" won't do it. Everyone needs to be in agreement across the project. -- [[Wayne Mack]]",
      "id": "4521f37576d978b80b4902c54661e6f0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c17f7bba225bb0059945fbce2812a5a0"
    },
    {
      "type": "html",
      "text": "In our extreme lab, we do use collective code ownership. Sitting in the same room eliminates the communication delay between potentially competing factions for a piece of code, and speeds delivery of modifications. We rotate pairs purposely, and while the methodology says that the developers choose the tasks, occasionally we throw in the requirement that \"For today, you must choose a task involving the part of the system you know the least about.\" We find that this avoids weak spots among the team quite nicely, and we get no \"information sinks\" because one person concentrates on a particular aspect of the application. -- [[Andrew Chronister]]",
      "id": "40b629c519966ff62bea3ff69230bd74"
    },
    {
      "type": "html",
      "text": "--\nCollective code ownership sometimes is just a code word phrase for management saying that you can be tossed out at any time. ie: Someone else knows what your doing, and if you don't toe the line, we can easily replace you. ",
      "id": "cb30408625f1aa8de6fd26886fbb5735"
    },
    {
      "type": "html",
      "text": "\nCode ownership also ignores the fact that programmers have different skills. Getting the internet wizard to do the graphics is silly. And vice versa. Surround me with other good programmer's, and code sharing is as natural as breathing. Surround me with idiots, politicians, or the owner's brain-dead nephew, and I'm going to protect the tricky bits, not out of ego, but because I don't want their paws mucking around and destroying things. 'Last Project Failed' doesn't look good on my resume.",
      "id": "f5aa96c345d2a1c1a58fdb0c815959ab"
    },
    {
      "type": "html",
      "text": "\nAnother thing, management then figures that if the old pro is gone for a few days, the junior programmer can just jump into his code and keep going. This just doesn't work. ",
      "id": "065ad9f34c14527fdb55cb67d168770b"
    },
    {
      "type": "html",
      "text": "\n3 or 4 guys, [[Collective Code Ownership]] works. If they all depend on the venture for their bread and butter, even better. But get more than 1 manager and 7+ programmers, and it's all just another methodology.",
      "id": "14c8ac3895a2cbb8b9c35ad1919f998d"
    },
    {
      "type": "html",
      "text": "\nHow can you all work together in the same room? Again, 3 or 4 guys that get along, have known each other for some time, or instantly 'hit it off', it works. Get 12 guys thrown together, someone's going to start the politics. The noise is unbearably when you're trying to get into the zone.",
      "id": "27ea49430d7f551d9f19c08a65c5ad66"
    },
    {
      "type": "html",
      "text": "\n[[Collective Code Ownership]] sounds almost Marxist. GOOD programmers are craftsmen. They deserve some respect for their individual skills and effort. Linus keeps the kernel to himself.",
      "id": "530d49e5caa497b944f44d8ca6cc004e"
    },
    {
      "type": "html",
      "text": "\nAnd let's think about this for a minute. With everyone working on everything, there is [[No Ultimate Responsibility]]. Passing the buck runs rampant.",
      "id": "31c1cccc7624b38449c673de40fbdc94"
    },
    {
      "type": "html",
      "text": " \"I thought HE was going to fix that.\" ",
      "id": "2b750a66aa928e72d64866681d7f5f75"
    },
    {
      "type": "html",
      "text": " \"Oh, that wasn't me who screwed that up\" and now the major client is suing.\"",
      "id": "86877fb7578c7b99f752d952a5869bf5"
    },
    {
      "type": "html",
      "text": "\nI've seen a lot of methodologies come and go. If it were possible to codify up the knowledge of a good programmer, someone would have written it up into a piece of software called 'Programmer 2000' and we'd all be out of work.",
      "id": "262dfed51da90839b146339447db0ddc"
    },
    {
      "type": "html",
      "text": "-- An old programmer",
      "id": "61274e729f0a645cac48b0aa3e10c66d"
    },
    {
      "type": "html",
      "text": "<i>From what I read in [[Extreme Programming Applied]], [[Collective Code Ownership]] doesn't mean [[No Code Ownership]]. Therefore, if someone breaks the code, it's his responsibility to fix it. And he can't commit change until it passes [[Unit Test]].</i>",
      "id": "a980c4047009c9bf116da53109e84208"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c17f7bba225bb0059945fbce2812a5a0"
    },
    {
      "type": "html",
      "text": "[[Extreme Programming]] relies on the TEAM concept. A team is not a group. [[De Marco]] perfectly describes what a team is. So I believe that collective code ownership works very well in a team and does not work in a simple group. Naturally, a team cannot be created in a group exceeding 7-9 members; it cannot be created if the group contains a critical number of morons or idiots. It cannot be created if members are physically separated. Peopleware contains a full list of reasons that prevent a team \"gelling\". No team - no collective code ownership, and I believe no [[Extreme Project]].",
      "id": "8eaddda199a428810f8dfdbbb819d73c"
    },
    {
      "type": "html",
      "text": "\nRegarding responsibility - team owns responsibility. This is not \"I thought HE was going to fix that.\" It is \"This is my fault because I did not make sure we fixed everything we had to\".",
      "id": "1bdb6b5409087c1ddb33b3913331180a"
    },
    {
      "type": "html",
      "text": "-- [[Roman Eremin]]",
      "id": "2e589a4c796ef1383a10c048648c3e60"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c17f7bba225bb0059945fbce2812a5a0"
    },
    {
      "type": "html",
      "text": "See also [[The Cathedral And The Bazaar]], [[Just Stop Caring]]",
      "id": "1e4e40e4d391b058c049917456163eab"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CollectiveCodeOwnership c2.com]",
      "id": "83157e88cfa136bb145f81a90134fca6"
    }
  ],
  "journal": [
    {
      "date": 1335238878000,
      "id": "8cd5af1c2c2d0f4daa1d1b33a54b1251",
      "type": "create",
      "item": {
        "title": "Collective Code Ownership",
        "story": [
          {
            "type": "html",
            "text": "Alternative to [[Code Stewardship]].",
            "id": "5fa9b43b9259e93ff3f2ec43bd07c093"
          },
          {
            "type": "html",
            "text": "\n[[Extreme Programming]] considers code to belong to the project, not to an individual engineer. As engineers develop required functionality, they may browse into <i>and modify</i> any class. They are responsible for keeping all the [[Unit Test]]s running (and writing new ones for new functionality). They take on the same integrity-preserving duties as the class owner in a [[Code Ownership]] situation.",
            "id": "df92e8d188eb6b7f037da10dc874acfb"
          },
          {
            "type": "html",
            "text": "\nWorking in this mode lets a responsible team move quickly to add new functionality while keeping responsibility in the right objects. [[Code Ownership]] creates dependencies and bottlenecks when implementing [[User Stories]]. We avoid code ownership, because it conflicts with commitment from the [[Planning Game]]. (\"Code is nothing, stories are everything!\")",
            "id": "375292af211fed943a356680a27c2027"
          },
          {
            "type": "html",
            "text": "\nThe ability to make this work requires at least:",
            "id": "30829b3c9c5ee91aa8b97b578ff12557"
          },
          {
            "type": "html",
            "text": " all engineers use the same [[Coding Standard]]s;",
            "id": "99eb2b71f97c0943340086abdb7a4744"
          },
          {
            "type": "html",
            "text": " code management tools to detect and resolve conflicts (CVS!);",
            "id": "cd7f07655be66d1fcc56a152b80c5b9c"
          },
          {
            "type": "html",
            "text": " a comprehensive suite of [[Unit Test]]s to ensure quality;",
            "id": "2f90baadafb00f5edfe136dcaafa2d94"
          },
          {
            "type": "html",
            "text": " powerful browsing and [[Refactoring Tools]] to find references to old methods and replace them with the new;",
            "id": "12fb71da4e9e755ddeab71ed91405fa5"
          },
          {
            "type": "html",
            "text": " [[Continuous Integration]] (or nearly that) so that conflicts are rare (also CVS).",
            "id": "cb21eb6330ce68883b108fc2792f2538"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c17f7bba225bb0059945fbce2812a5a0"
          },
          {
            "type": "html",
            "text": "\nOkay, this is where I see the scaling difficulties coming in. Collective ownership of anything doesn't scale. If Bill and Ted own a radio, and Bill wants to listen to one station while Ted wants to listen to another, they need some system for resolving their difference.",
            "id": "2a982c2e2411f0d4bfde45c1fe7a8d27"
          },
          {
            "type": "html",
            "text": "\nIn software, it's easy to clone a radio. Bill can listen to what he wants and Ted can listen to what he wants. But if Bill and Ted are trying to use their radio programs as input to a design decision (say, what kind of guitars to buy for use in Wyld Stallyns ... in software, say, what kind of GUI to build, or what database product to use) then you have trouble brewing. Multiply the situation by 100 developers and a year-long project full of crucial decisions, and you have a [[Tragedy Of The Commons]].",
            "id": "17f10ed0f23d39c75cdd6e82ba2f61b3"
          },
          {
            "type": "html",
            "text": "\nSo there are a number of ways of resolving this:",
            "id": "37f1b8b05d7273e029a90d3b6059d74e"
          },
          {
            "type": "html",
            "text": " keep the project small. You don't need 100 developers; you need 10 good ones. Or better, 3 good ones. If you can't do that ...",
            "id": "711e58d2ef950dc4f53cf4acfb85543d"
          },
          {
            "type": "html",
            "text": " decompose the requirements onto teams, each of which has internal [[Collective Code Ownership]]. This works great so long as the problem domain is well understood. But where it's not, the left hand and the right hand have a habit of wrong-footing each other; interfaces become bones of contention; politics occurs; management takes an interest so you have to ...",
            "id": "f40061f7034c4d24040bcb272a4f56c0"
          },
          {
            "type": "html",
            "text": " define a project hierarchy. Plan release-schedules and document analyses. [[Collective Code Ownership]] gets buried under an avalanche of memos, meetings and managers.",
            "id": "094cfe277d24e6714e27e3998b33de4e"
          },
          {
            "type": "html",
            "text": "\nSo this last bit is where I think a [[Stone Society]] could be useful. Make interface alternatives, tool purchasing, human-resourcing, standards and design decisions subject to Auction. Let development groups form and unform naturally as Sub-Societies. Use Services to fund internal infrastructure projects. Replace politics with a free market.",
            "id": "212969724f1baba09eaa181b3f54a834"
          },
          {
            "type": "html",
            "text": "-- [[Peter Merel]]",
            "id": "eac577064b619355f54299e78c199aad"
          },
          {
            "type": "html",
            "text": "<i>You think an unusual form of democratic voting will eliminate politics? -- [[Jeff Grigg]]</i>",
            "id": "b5fe3ace0877cfaf8ce7ef2d63a76f74"
          },
          {
            "type": "html",
            "text": "\nConsider [[Code Stewardship]]. It works well, and with low overhead. -- [[Dave Smith]]",
            "id": "81fcd2c9c005ae4acab6ef12dd456d0d"
          },
          {
            "type": "html",
            "text": "\nContrary to what Peter maintains, decomposing into subsystems and practicing [[Collective Code Ownership]] inside the subteams can work quite well. We work with a large System and four different labs on the same project (~30 developers). Subsystem integration is done once a week. If we have to make a change to some part of the system in order to implement a feature, we request the change from the other team. Most of the time, the change can be done without breaking the interface between the subsystems. In that case, we postpone our work to the next build. If the change has to be done NOW or the change is breaking, we get the code changes before the next build and integrate it into our local copy of the other team's code. If we make a mistake and the build breaks at integration time, we have to fix it then. This almost never happens. The team leaders negotiate which changes are done for a particular build if some conflict arises. A published work plan keeps everyone informed when to expect some change they require. The whole thing sounds complicated, but in practice it most often amounts to writing an email (\"can I have this API in the next build?\" \"Yeah, sure\"). -- [[Thomas Maeder]]",
            "id": "f2156477d7afa21746a44e2aec4a0c16"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c17f7bba225bb0059945fbce2812a5a0"
          },
          {
            "type": "html",
            "text": "From [[Thoughtful Reactions To Xp]]:",
            "id": "db39ee92bbe8ff67cc0335011dc22072"
          },
          {
            "type": "html",
            "text": " Thrashing can occur by conflicting refactoring efforts. People can get upset with the changes.",
            "id": "b1c2fb904701a6a89a48ac3f136a4849"
          },
          {
            "type": "html",
            "text": " The constant rotation of pairs keeps everyone in touch and reduces ruffled feathers. XP teams have strict [[Coding Standard]]s, so refactoring back and forth won't happen. I've never seen team players thrashing the code. ",
            "id": "82f6da6ce55a09ab85eef738027fa7e2"
          },
          {
            "type": "html",
            "text": " One of the reasons communism failed is because there is no concept of ownership and therefore less motivation for or no pride in one's work.",
            "id": "701625f54da2850e577ae9a348c6f48b"
          },
          {
            "type": "html",
            "text": " Please don't stretch this one too far. Collective ownership works because the group is smallish and they really do own the code - not some elite on their behalf.",
            "id": "28b61910ea9b37810d0d264d41dfe3e1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c17f7bba225bb0059945fbce2812a5a0"
          },
          {
            "type": "html",
            "text": "I was thinking about [[Collective Code Ownership]] a little while, and I wonder: If I don't like doing GUI, but I'm really good at the other tiers, should I be rotated into GUI pairs anyway? My gut instinct is to say, \"No\", with a caveat. There may be grotty parts of the system that everyone fears working on. In this case, I'd imagine the group should encourage pairs to bite the bullet and do it anyway, and then the next time a grotty issue came up, the volunteers would be free from the responsibility of having to work on it. -- [[John Duncan]]",
            "id": "885d300c2626d6f1bcab3e83f3e1a533"
          },
          {
            "type": "html",
            "text": "<i>Within XP problem is solved that [[Programmer Chooses Tasks]]. </i>",
            "id": "c57a10176c747a0ddfeb00889330084e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c17f7bba225bb0059945fbce2812a5a0"
          },
          {
            "type": "html",
            "text": "[[Kent The Beck]] writes in [[Smalltalk Best Practice Patterns]] (p.14) that \"The next bottleneck in software engineering is human communication. When we say that 70 percent of the development budget is spent on maintenance, we mean that the poor maintainers have to wade through piles of documentation and code to <i>discover the intent</i> [emphasis added] of the original programmer. The advent of widespread reuse exacerbates the problem. No longer is one maintainer the audience for one developer. <i>Hundreds, thousands, or hundreds of thousands of elaborators are trying to understand the intent of an abstractor</i> [emphasis added].\"",
            "id": "4c6d00723434e6bdc3ca4e92e6636ecd"
          },
          {
            "type": "html",
            "text": "\n[[Fred Brooks]] writes in [[The Mythical Man Month]] (p.42) that he \"will contend that conceptual integrity is <i>the</i> most important consideration in system design.\"",
            "id": "74c0cec14a2f5c396532b2ccb0c06364"
          },
          {
            "type": "html",
            "text": "\nSo I have a question for the [[Collective Code Ownership]] advocates. How, in a [[Collective Code Ownership]] scenario, is [[Conceptual Integrity]] preserved? How is it ensured that elaborators working on classes created by an initial abstractor understand the intent of that abstractor? Is it ensured by reliance on shared understanding of, and commitment to, a [[System Metaphor]] and some coding standards? Is [[Conceptual Integrity]] subordinate to the refactoring motivations of the day?",
            "id": "c7df01d66f1b93edd3a9fd813e85fe09"
          },
          {
            "type": "html",
            "text": "\nThe reason I ask is because preservation of [[Conceptual Integrity]] is usually presented as one of the arguments for [[Code Ownership]]. If I remember right, the [[Envy Developer]] manuals even presented this argument as rationale for some of the philosophical decisions evident in the tool's design. IMHO [[Code Stewardship]], with some kind of apprenticing of future elaborators to original abstractors (if possible), may be the solution that balances the forces. Thoughts? -- [[Randy Stafford]]",
            "id": "56ed1d7e5140767cbcf10c434325d490"
          },
          {
            "type": "html",
            "text": "\nI would argue that [[Conceptual Integrity]] is independent of [[Code Ownership]]. Regardless of how you divide up the code for development, everyone on the team, now and in the future, needs to have a common understanding of the purpose of the project and approaches being used. Tying together individual modules, each with their own \"[[Conceptual Integrity]]\" won't do it. Everyone needs to be in agreement across the project. -- [[Wayne Mack]]",
            "id": "4521f37576d978b80b4902c54661e6f0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c17f7bba225bb0059945fbce2812a5a0"
          },
          {
            "type": "html",
            "text": "In our extreme lab, we do use collective code ownership. Sitting in the same room eliminates the communication delay between potentially competing factions for a piece of code, and speeds delivery of modifications. We rotate pairs purposely, and while the methodology says that the developers choose the tasks, occasionally we throw in the requirement that \"For today, you must choose a task involving the part of the system you know the least about.\" We find that this avoids weak spots among the team quite nicely, and we get no \"information sinks\" because one person concentrates on a particular aspect of the application. -- [[Andrew Chronister]]",
            "id": "40b629c519966ff62bea3ff69230bd74"
          },
          {
            "type": "html",
            "text": "--\nCollective code ownership sometimes is just a code word phrase for management saying that you can be tossed out at any time. ie: Someone else knows what your doing, and if you don't toe the line, we can easily replace you. ",
            "id": "cb30408625f1aa8de6fd26886fbb5735"
          },
          {
            "type": "html",
            "text": "\nCode ownership also ignores the fact that programmers have different skills. Getting the internet wizard to do the graphics is silly. And vice versa. Surround me with other good programmer's, and code sharing is as natural as breathing. Surround me with idiots, politicians, or the owner's brain-dead nephew, and I'm going to protect the tricky bits, not out of ego, but because I don't want their paws mucking around and destroying things. 'Last Project Failed' doesn't look good on my resume.",
            "id": "f5aa96c345d2a1c1a58fdb0c815959ab"
          },
          {
            "type": "html",
            "text": "\nAnother thing, management then figures that if the old pro is gone for a few days, the junior programmer can just jump into his code and keep going. This just doesn't work. ",
            "id": "065ad9f34c14527fdb55cb67d168770b"
          },
          {
            "type": "html",
            "text": "\n3 or 4 guys, [[Collective Code Ownership]] works. If they all depend on the venture for their bread and butter, even better. But get more than 1 manager and 7+ programmers, and it's all just another methodology.",
            "id": "14c8ac3895a2cbb8b9c35ad1919f998d"
          },
          {
            "type": "html",
            "text": "\nHow can you all work together in the same room? Again, 3 or 4 guys that get along, have known each other for some time, or instantly 'hit it off', it works. Get 12 guys thrown together, someone's going to start the politics. The noise is unbearably when you're trying to get into the zone.",
            "id": "27ea49430d7f551d9f19c08a65c5ad66"
          },
          {
            "type": "html",
            "text": "\n[[Collective Code Ownership]] sounds almost Marxist. GOOD programmers are craftsmen. They deserve some respect for their individual skills and effort. Linus keeps the kernel to himself.",
            "id": "530d49e5caa497b944f44d8ca6cc004e"
          },
          {
            "type": "html",
            "text": "\nAnd let's think about this for a minute. With everyone working on everything, there is [[No Ultimate Responsibility]]. Passing the buck runs rampant.",
            "id": "31c1cccc7624b38449c673de40fbdc94"
          },
          {
            "type": "html",
            "text": " \"I thought HE was going to fix that.\" ",
            "id": "2b750a66aa928e72d64866681d7f5f75"
          },
          {
            "type": "html",
            "text": " \"Oh, that wasn't me who screwed that up\" and now the major client is suing.\"",
            "id": "86877fb7578c7b99f752d952a5869bf5"
          },
          {
            "type": "html",
            "text": "\nI've seen a lot of methodologies come and go. If it were possible to codify up the knowledge of a good programmer, someone would have written it up into a piece of software called 'Programmer 2000' and we'd all be out of work.",
            "id": "262dfed51da90839b146339447db0ddc"
          },
          {
            "type": "html",
            "text": "-- An old programmer",
            "id": "61274e729f0a645cac48b0aa3e10c66d"
          },
          {
            "type": "html",
            "text": "<i>From what I read in [[Extreme Programming Applied]], [[Collective Code Ownership]] doesn't mean [[No Code Ownership]]. Therefore, if someone breaks the code, it's his responsibility to fix it. And he can't commit change until it passes [[Unit Test]].</i>",
            "id": "a980c4047009c9bf116da53109e84208"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c17f7bba225bb0059945fbce2812a5a0"
          },
          {
            "type": "html",
            "text": "[[Extreme Programming]] relies on the TEAM concept. A team is not a group. [[De Marco]] perfectly describes what a team is. So I believe that collective code ownership works very well in a team and does not work in a simple group. Naturally, a team cannot be created in a group exceeding 7-9 members; it cannot be created if the group contains a critical number of morons or idiots. It cannot be created if members are physically separated. Peopleware contains a full list of reasons that prevent a team \"gelling\". No team - no collective code ownership, and I believe no [[Extreme Project]].",
            "id": "8eaddda199a428810f8dfdbbb819d73c"
          },
          {
            "type": "html",
            "text": "\nRegarding responsibility - team owns responsibility. This is not \"I thought HE was going to fix that.\" It is \"This is my fault because I did not make sure we fixed everything we had to\".",
            "id": "1bdb6b5409087c1ddb33b3913331180a"
          },
          {
            "type": "html",
            "text": "-- [[Roman Eremin]]",
            "id": "2e589a4c796ef1383a10c048648c3e60"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c17f7bba225bb0059945fbce2812a5a0"
          },
          {
            "type": "html",
            "text": "See also [[The Cathedral And The Bazaar]], [[Just Stop Caring]]",
            "id": "1e4e40e4d391b058c049917456163eab"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CollectiveCodeOwnership c2.com]",
            "id": "83157e88cfa136bb145f81a90134fca6"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628171135346
    }
  ]
}