{
  "title": "Sideways Composition",
  "story": [
    {
      "type": "markdown",
      "id": "e1ba44bd44de283e",
      "text": "Optimizing Sideways Composition: Fast Context-oriented Programming in ContextPyPy. [https://dl.acm.org/doi/abs/10.1145/2951965.2951967 acm]"
    },
    {
      "type": "markdown",
      "id": "316f560d3e85ad2a",
      "text": "> **Abstract**. The prevalent way of code sharing in many current object systems is static and/or single inheritance; both are limiting in situations that call for multi-dimensional decomposition. Sideways composition provides a technique to reduce their limitations. Context-oriented programming (COP) notably applies sideways composition to achieve better modularity. However, most COP implementations have a substantial performance overhead. This is partly because **weaving** and execution of layered methods violate assumptions that common language implementations hold about lookup. Meta-tracing just-in-time (JIT) compilers have unique characteristics that can alleviate the performance overhead, as they can treat lookup differently.\n\n> We show that meta-tracing JIT compilers are good at optimizing sideways composition and give initial, supporting results. Furthermore, we suggest that explicit communication with the JIT compiler in a COP implementation can improve performance further.\n"
    },
    {
      "type": "paragraph",
      "id": "8f9eb63e89c0553c",
      "text": "Sideways composition provides a technique to avoid some of the limitations of static, single inheritance object-oriented systems where multi-dimensional composition of behavior is desirable. In particular, context-oriented programming applies sideways composition to improve modularity. COP as a modularity mechanism to dynamically adapt behavior at runtime has been demonstrated to be useful in a variety of scenarios. Beyond its original motivation for dynamically adapting systems based on environmental factors such as battery level, geolocation, or time of day [9], COP has also been applied to provide safety in the development of live systems [12] or to let multiple conflicting versions of programming interfaces co-exist [7]."
    },
    {
      "type": "pagefold",
      "id": "ac0a6d09347ca66d",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "d0bff3f69ed15939",
      "text": "\nPIUMARTA, Ian, [no date]. Efficient sideways composition in COLAs via “Lieberman” prototypes. . P. 5. \n"
    },
    {
      "type": "markdown",
      "id": "72b76615585731e6",
      "text": "> Compared to inheritance, delegation is the more flexible and general of the two techniques. However, they both have their place within an object model: inheritance for sharing of implementation state (and the methods that act upon it) for a single prototype (within a hierarchy of related prototype families), and delegation for **sideways composition** of (independent and previously unrelated) prototypes into a single logical composite object. This is the position adopted (and implemented) for sideways composition of COLA objects."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Sideways Composition",
        "story": []
      },
      "date": 1653500185347
    },
    {
      "item": {
        "type": "factory",
        "id": "e1ba44bd44de283e"
      },
      "id": "e1ba44bd44de283e",
      "type": "add",
      "date": 1653500231194
    },
    {
      "type": "edit",
      "id": "e1ba44bd44de283e",
      "item": {
        "type": "paragraph",
        "id": "e1ba44bd44de283e",
        "text": "– https://dl.acm.org/doi/abs/10.1145/2951965.2951967"
      },
      "date": 1653500233701
    },
    {
      "type": "edit",
      "id": "e1ba44bd44de283e",
      "item": {
        "type": "markdown",
        "id": "e1ba44bd44de283e",
        "text": "– https://dl.acm.org/doi/abs/10.1145/2951965.2951967"
      },
      "date": 1653500234751
    },
    {
      "item": {
        "type": "factory",
        "id": "316f560d3e85ad2a"
      },
      "id": "316f560d3e85ad2a",
      "type": "add",
      "after": "e1ba44bd44de283e",
      "date": 1653500797279
    },
    {
      "type": "edit",
      "id": "316f560d3e85ad2a",
      "item": {
        "type": "markdown",
        "id": "316f560d3e85ad2a",
        "text": "> ABSTRACT\n\nThe prevalent way of code sharing in many current object systems is static and/or single inheritance; both are limiting in situations that call for multi-dimensional decomposition. Sideways composition provides a technique to reduce their limitations. Context-oriented programming (COP) notably applies sideways composition to achieve better modularity. However, most COP implementations have a substantial performance overhead. This is partly because weaving and execution of layered methods violate assumptions that common language implementations hold about lookup. Meta-tracing just-in-time (JIT) compilers have unique characteristics that can alleviate the performance overhead, as they can treat lookup differently.\n\nWe show that meta-tracing JIT compilers are good at optimizing sideways composition and give initial, supporting results. Furthermore, we suggest that explicit communication with the JIT compiler in a COP implementation can improve performance further.\n"
      },
      "date": 1653500800473
    },
    {
      "type": "edit",
      "id": "316f560d3e85ad2a",
      "item": {
        "type": "markdown",
        "id": "316f560d3e85ad2a",
        "text": "> **Abstract**. The prevalent way of code sharing in many current object systems is static and/or single inheritance; both are limiting in situations that call for multi-dimensional decomposition. Sideways composition provides a technique to reduce their limitations. Context-oriented programming (COP) notably applies sideways composition to achieve better modularity. However, most COP implementations have a substantial performance overhead. This is partly because weaving and execution of layered methods violate assumptions that common language implementations hold about lookup. Meta-tracing just-in-time (JIT) compilers have unique characteristics that can alleviate the performance overhead, as they can treat lookup differently.\n\nWe show that meta-tracing JIT compilers are good at optimizing sideways composition and give initial, supporting results. Furthermore, we suggest that explicit communication with the JIT compiler in a COP implementation can improve performance further.\n"
      },
      "date": 1653500824881
    },
    {
      "type": "edit",
      "id": "316f560d3e85ad2a",
      "item": {
        "type": "markdown",
        "id": "316f560d3e85ad2a",
        "text": "> **Abstract**. The prevalent way of code sharing in many current object systems is static and/or single inheritance; both are limiting in situations that call for multi-dimensional decomposition. Sideways composition provides a technique to reduce their limitations. Context-oriented programming (COP) notably applies sideways composition to achieve better modularity. However, most COP implementations have a substantial performance overhead. This is partly because weaving and execution of layered methods violate assumptions that common language implementations hold about lookup. Meta-tracing just-in-time (JIT) compilers have unique characteristics that can alleviate the performance overhead, as they can treat lookup differently.\n\n> We show that meta-tracing JIT compilers are good at optimizing sideways composition and give initial, supporting results. Furthermore, we suggest that explicit communication with the JIT compiler in a COP implementation can improve performance further.\n"
      },
      "date": 1653500831636
    },
    {
      "item": {
        "type": "factory",
        "id": "8f9eb63e89c0553c"
      },
      "id": "8f9eb63e89c0553c",
      "type": "add",
      "after": "316f560d3e85ad2a",
      "date": 1653500898654
    },
    {
      "type": "edit",
      "id": "8f9eb63e89c0553c",
      "item": {
        "type": "paragraph",
        "id": "8f9eb63e89c0553c",
        "text": "Sideways composition provides a technique to avoid some of the limitations of static, single inheritance object-oriented systems where multi-dimensional composition of behavior Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, or to redistribute to lists, contact the Owner/Author(s). Request permissions from permissions@acm.org or Publications Dept., ACM, Inc., fax +1 (212) 869-0481. COP’16, July 17-22 2016, Rome, Italy Copyright © 2016 held by owner/author(s). Publication rights licensed to ACM. ACM 978-1-4503-4440-1/16/07. . . $15.00 DOI: http://dx.doi.org/10.1145/2951965.2951967 is desirable. In particular, context-oriented programming applies sideways composition to improve modularity. cop as a modularity mechanism to dynamically adapt behavior at runtime has been demonstrated to be useful in a variety of scenarios. Beyond its original motivation for dynamically adapting systems based on environmental factors such as battery level, geolocation, or time of day [9], cop has also been applied to provide safety in the development of live systems [12] or to let multiple conflicting versions of programming interfaces co-exist [7]."
      },
      "date": 1653500902675
    },
    {
      "type": "edit",
      "id": "8f9eb63e89c0553c",
      "item": {
        "type": "paragraph",
        "id": "8f9eb63e89c0553c",
        "text": "Sideways composition provides a technique to avoid some of the limitations of static, single inheritance object-oriented systems where multi-dimensional composition of behavior is desirable. In particular, context-oriented programming applies sideways composition to improve modularity. cop as a modularity mechanism to dynamically adapt behavior at runtime has been demonstrated to be useful in a variety of scenarios. Beyond its original motivation for dynamically adapting systems based on environmental factors such as battery level, geolocation, or time of day [9], cop has also been applied to provide safety in the development of live systems [12] or to let multiple conflicting versions of programming interfaces co-exist [7]."
      },
      "date": 1653500937874
    },
    {
      "type": "edit",
      "id": "8f9eb63e89c0553c",
      "item": {
        "type": "paragraph",
        "id": "8f9eb63e89c0553c",
        "text": "Sideways composition provides a technique to avoid some of the limitations of static, single inheritance object-oriented systems where multi-dimensional composition of behavior is desirable. In particular, context-oriented programming applies sideways composition to improve modularity. cop as a modularity mechanism to dynamically adapt behavior at runtime has been demonstrated to be useful in a variety of scenarios. Beyond its original motivation for dynamically adapting systems based on environmental factors such as battery level, geolocation, or time of day [9], COP has also been applied to provide safety in the development of live systems [12] or to let multiple conflicting versions of programming interfaces co-exist [7]."
      },
      "date": 1653500955284
    },
    {
      "type": "edit",
      "id": "8f9eb63e89c0553c",
      "item": {
        "type": "paragraph",
        "id": "8f9eb63e89c0553c",
        "text": "Sideways composition provides a technique to avoid some of the limitations of static, single inheritance object-oriented systems where multi-dimensional composition of behavior is desirable. In particular, context-oriented programming applies sideways composition to improve modularity. COP as a modularity mechanism to dynamically adapt behavior at runtime has been demonstrated to be useful in a variety of scenarios. Beyond its original motivation for dynamically adapting systems based on environmental factors such as battery level, geolocation, or time of day [9], COP has also been applied to provide safety in the development of live systems [12] or to let multiple conflicting versions of programming interfaces co-exist [7]."
      },
      "date": 1653500969338
    },
    {
      "item": {
        "type": "factory",
        "id": "d0bff3f69ed15939"
      },
      "id": "d0bff3f69ed15939",
      "type": "add",
      "after": "8f9eb63e89c0553c",
      "date": 1653515890228
    },
    {
      "type": "edit",
      "id": "d0bff3f69ed15939",
      "item": {
        "type": "paragraph",
        "id": "d0bff3f69ed15939",
        "text": "\nPIUMARTA, Ian, [no date]. Efficient sideways composition in COLAs via “Lieberman” prototypes. . P. 5. \n"
      },
      "date": 1653515893383
    },
    {
      "item": {
        "type": "factory",
        "id": "72b76615585731e6"
      },
      "id": "72b76615585731e6",
      "type": "add",
      "after": "d0bff3f69ed15939",
      "date": 1653516068403
    },
    {
      "type": "edit",
      "id": "72b76615585731e6",
      "item": {
        "type": "markdown",
        "id": "72b76615585731e6",
        "text": "> Compared to inheritance, delegation is the more flexible and general of the two techniques. However, they both have their place within an object model: inheritance for sharing of implementation state (and the methods that act upon it) for a single prototype (within a hierarchy of related prototype families), and delegation for sideways composition of (independent and previously unrelated) prototypes into a single logical composite object. This is the position adopted (and implemented) for sideways composition of COLA objects."
      },
      "date": 1653516072231
    },
    {
      "type": "edit",
      "id": "72b76615585731e6",
      "item": {
        "type": "markdown",
        "id": "72b76615585731e6",
        "text": "> Compared to inheritance, delegation is the more flexible and general of the two techniques. However, they both have their place within an object model: inheritance for sharing of implementation state (and the methods that act upon it) for a single prototype (within a hierarchy of related prototype families), and delegation for [[sideways composition]] of (independent and previously unrelated) prototypes into a single logical composite object. This is the position adopted (and implemented) for sideways composition of COLA objects."
      },
      "date": 1653516116630
    },
    {
      "item": {
        "type": "factory",
        "id": "ac0a6d09347ca66d"
      },
      "id": "ac0a6d09347ca66d",
      "type": "add",
      "after": "72b76615585731e6",
      "date": 1653516137650
    },
    {
      "type": "edit",
      "id": "ac0a6d09347ca66d",
      "item": {
        "type": "pagefold",
        "id": "ac0a6d09347ca66d",
        "text": "~"
      },
      "date": 1653516141448
    },
    {
      "id": "ac0a6d09347ca66d",
      "type": "move",
      "order": [
        "e1ba44bd44de283e",
        "316f560d3e85ad2a",
        "8f9eb63e89c0553c",
        "ac0a6d09347ca66d",
        "d0bff3f69ed15939",
        "72b76615585731e6"
      ],
      "date": 1653516145195
    },
    {
      "type": "edit",
      "id": "e1ba44bd44de283e",
      "item": {
        "type": "markdown",
        "id": "e1ba44bd44de283e",
        "text": "Optimizing Sideways Composition: Fast Context-oriented Programming in ContextPyPy. [https://dl.acm.org/doi/abs/10.1145/2951965.2951967 acm]"
      },
      "date": 1662257935747
    },
    {
      "type": "edit",
      "id": "316f560d3e85ad2a",
      "item": {
        "type": "markdown",
        "id": "316f560d3e85ad2a",
        "text": "> **Abstract**. The prevalent way of code sharing in many current object systems is static and/or single inheritance; both are limiting in situations that call for multi-dimensional decomposition. Sideways composition provides a technique to reduce their limitations. Context-oriented programming (COP) notably applies sideways composition to achieve better modularity. However, most COP implementations have a substantial performance overhead. This is partly because **weaving** and execution of layered methods violate assumptions that common language implementations hold about lookup. Meta-tracing just-in-time (JIT) compilers have unique characteristics that can alleviate the performance overhead, as they can treat lookup differently.\n\n> We show that meta-tracing JIT compilers are good at optimizing sideways composition and give initial, supporting results. Furthermore, we suggest that explicit communication with the JIT compiler in a COP implementation can improve performance further.\n"
      },
      "date": 1662257979851
    },
    {
      "type": "edit",
      "id": "72b76615585731e6",
      "item": {
        "type": "markdown",
        "id": "72b76615585731e6",
        "text": "> Compared to inheritance, delegation is the more flexible and general of the two techniques. However, they both have their place within an object model: inheritance for sharing of implementation state (and the methods that act upon it) for a single prototype (within a hierarchy of related prototype families), and delegation for **sideways composition** of (independent and previously unrelated) prototypes into a single logical composite object. This is the position adopted (and implemented) for sideways composition of COLA objects."
      },
      "date": 1662258035906
    }
  ]
}