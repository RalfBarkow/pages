{
  "title": "Test Types Instead Of Dispatch Profile Code",
  "story": [
    {
      "type": "html",
      "text": "<i>(From [[Test Types Instead Of Dispatch]])</i>",
      "id": "9fb10348fd6131edc79e7acf6db4d232"
    },
    {
      "type": "html",
      "text": "\nBefore we jump to any conclusions about the results of this code, we need Sunir to come verify that it is a fair test.",
      "id": "bdef1944ed23036ae9ae1b2b057957e0"
    },
    {
      "type": "html",
      "text": "<i>It isn't. I'll have to carve out some time to demonstrate what I mean, but that isn't likely to happen while I have a deadline next week ;) --ss</i>",
      "id": "6b7e4dae756961ef878aeedfe661fdd6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "42d2ff7cbe5c8f5469c9e19e6a37e61f"
    },
    {
      "type": "html",
      "text": "<b>In dispatch.cpp:</b>",
      "id": "3ea7c78eb4b628b184318019e5b68416"
    },
    {
      "type": "code",
      "text": "  #include<iostream>\n  #include<ctime>",
      "id": "016bc589a8dd2942767caed3a3ec2385"
    },
    {
      "type": "code",
      "text": "  class Timeable {\n  public:\n    clock_t run() {\n        clock_t start = ::clock();\n        \n        for (int i = 0; i < 5000000; i++)\n            reallyRun(); // (Template pattern)",
      "id": "188123b8edb444fd9d72b7126389c6ec"
    },
    {
      "type": "code",
      "text": "        clock_t end = ::clock();",
      "id": "86dd75929a328043dd0d910e905a9360"
    },
    {
      "type": "code",
      "text": "        return end - start;\n    }",
      "id": "2d3f3ce07cfa3abc3228f956f52e2f9a"
    },
    {
      "type": "code",
      "text": "    virtual void reallyRun() = 0;\n  };",
      "id": "14822abb6fcf35dcc6ecc90150bef8d5"
    },
    {
      "type": "html",
      "text": "class N<b></b>ormalDispatchTimer:<br>public Timeable {",
      "id": "cd891854cef4889f311f43d174abaa90"
    },
    {
      "type": "code",
      "text": "  public:\n    class N''''''ormalClass {\n    public:\n        virtual void run() = 0;\n    };",
      "id": "cbf8a955f586ea1198bc7fa6f5893e47"
    },
    {
      "type": "code",
      "text": "    // It would probably work with just one derived class, but just in case...\n    class F''''''irstNormalClass:  public N''''''ormalClass {\n    public:\n        void run() { /* */ }\n    };",
      "id": "173caf03b553b6f408bf135512136e18"
    },
    {
      "type": "html",
      "text": "class S<b></b>econdNormalClass:<br>public N<b></b>ormalClass {",
      "id": "041178dc96adf4b8754c7559a227c603"
    },
    {
      "type": "code",
      "text": "    public:\n        void run() { /* */ }\n    };",
      "id": "67367334c67705198504cc8fe8af0467"
    },
    {
      "type": "code",
      "text": "    void reallyRun() {\n        first.run();\n        second.run();\n    }",
      "id": "abb40b26aeb4d199f232942d62401d30"
    },
    {
      "type": "code",
      "text": "  private:\n    \n    F''''''irstNormalClass  first;\n    S''''''econdNormalClass second;\n  };",
      "id": "1133f3c12457f9d22f2ff3cd76f3db00"
    },
    {
      "type": "html",
      "text": "class M<b></b>anualDispatchTimer:<br>public Timeable {",
      "id": "d9c927dcfaa13276f14c52c47e3346bb"
    },
    {
      "type": "code",
      "text": "  public:\n    void reallyRun() {\n        runOn(&first);\n        runOn(&second);\n    }",
      "id": "81498dee9bd582ee94f41762e8212a44"
    },
    {
      "type": "code",
      "text": "    class M''''''anualClass {\n    public:\n        enum TYPE {\n            F''''''irstType,\n            S''''''econdType,\n        };",
      "id": "7a4e9c5df09ee9768fb5e7b6184672cd"
    },
    {
      "type": "code",
      "text": "        unsigned char type;\n    };",
      "id": "d31f52d698a93f132f2c12fbc5ea9426"
    },
    {
      "type": "html",
      "text": "class F<b></b>irstManualClass:<br>public M<b></b>anualClass {",
      "id": "5f7c9ac5633257acdf0014f9e466a258"
    },
    {
      "type": "code",
      "text": "    public:\n        F''''''irstManualClass(): type(F''''''irstType) { }",
      "id": "76cff00869151e168c5e436861c27b23"
    },
    {
      "type": "code",
      "text": "        unsigned char type;",
      "id": "39e978d42e5fad5aa422191107f646f4"
    },
    {
      "type": "code",
      "text": "        int someData;\n    };",
      "id": "801e83b94fc2de553f8feab75a870f9b"
    },
    {
      "type": "html",
      "text": "class S<b></b>econdManualClass:<br>public M<b></b>anualClass {",
      "id": "2481dc428b5fa313abad2ab1bcbea7bd"
    },
    {
      "type": "code",
      "text": "    public:\n        S''''''econdManualClass(): type(S''''''econdType) { }",
      "id": "3eb44ab15c69f0ebd1ba1dabaf35c17c"
    },
    {
      "type": "code",
      "text": "        unsigned char type;",
      "id": "39e978d42e5fad5aa422191107f646f4"
    },
    {
      "type": "code",
      "text": "        int someOtherData;\n    };",
      "id": "f02cd8c0315522c97ce3e4c8473af0e6"
    },
    {
      "type": "code",
      "text": "    inline void runOn(M''''''anualClass* mcp) {\n        int x;\n        if (M''''''anualClass::F''''''irstType == mcp->type)\n            x = ((F''''''irstManualClass*)mcp)->someData;\n        else if (M''''''anualClass::S''''''econdType == mcp->type)\n            x = ((S''''''econdManualClass*)mcp)->someOtherData;\n    }",
      "id": "623a7477c7838adec552ede0d9e5f9c8"
    },
    {
      "type": "code",
      "text": "  private:\n    F''''''irstManualClass  first;\n    S''''''econdManualClass second;\n  };",
      "id": "2afe90698fb1dc672fbed6cb22ef0bc4"
    },
    {
      "type": "code",
      "text": "  int main() {\n    std::cout\n        << \"Normal: \"\n        << N''''''ormalDispatchTimer().run()\n        << std::endl\n        << \"Manual: \"\n        << M''''''anualDispatchTimer().run()\n        << std::endl;\n  }",
      "id": "8359bb298e4e7e802459935e117c7f5b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "42d2ff7cbe5c8f5469c9e19e6a37e61f"
    },
    {
      "type": "html",
      "text": "<b>In the Makefile:</b>",
      "id": "8168aa7fa40f702d9004fcf784738b65"
    },
    {
      "type": "html",
      "text": "default:<br>plain optimized",
      "id": "37d7f3bcfd38ee2cbb843af8f5cdb3f0"
    },
    {
      "type": "code",
      "text": "    ./plain\n    ./optimized",
      "id": "9948081f62b095403c818a8292be4f60"
    },
    {
      "type": "html",
      "text": "plain:<br>*.cpp",
      "id": "8b22e094092bdf9405cb254be7144129"
    },
    {
      "type": "code",
      "text": "    g++ $< -o plain",
      "id": "1bc25e24670744ca8d81b69062f001dd"
    },
    {
      "type": "html",
      "text": "optimized:<br>*.cpp",
      "id": "7313948e353cf577d599f7a12728a7b3"
    },
    {
      "type": "code",
      "text": "    g++ -O3 $< -o optimized",
      "id": "e4a623a15031a632e97f9564043af46c"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?TestTypesInsteadOfDispatchProfileCode c2.com]",
      "id": "53e52a8896e5ae7def6f1ca94c147814"
    }
  ],
  "journal": [
    {
      "date": 991806295000,
      "id": "7dc2e56f9d96c23cd82d5548c65c62cd",
      "type": "create",
      "item": {
        "title": "Test Types Instead Of Dispatch Profile Code",
        "story": [
          {
            "type": "html",
            "text": "<i>(From [[Test Types Instead Of Dispatch]])</i>",
            "id": "9fb10348fd6131edc79e7acf6db4d232"
          },
          {
            "type": "html",
            "text": "\nBefore we jump to any conclusions about the results of this code, we need Sunir to come verify that it is a fair test.",
            "id": "bdef1944ed23036ae9ae1b2b057957e0"
          },
          {
            "type": "html",
            "text": "<i>It isn't. I'll have to carve out some time to demonstrate what I mean, but that isn't likely to happen while I have a deadline next week ;) --ss</i>",
            "id": "6b7e4dae756961ef878aeedfe661fdd6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "42d2ff7cbe5c8f5469c9e19e6a37e61f"
          },
          {
            "type": "html",
            "text": "<b>In dispatch.cpp:</b>",
            "id": "3ea7c78eb4b628b184318019e5b68416"
          },
          {
            "type": "code",
            "text": "  #include<iostream>\n  #include<ctime>",
            "id": "016bc589a8dd2942767caed3a3ec2385"
          },
          {
            "type": "code",
            "text": "  class Timeable {\n  public:\n    clock_t run() {\n        clock_t start = ::clock();\n        \n        for (int i = 0; i < 5000000; i++)\n            reallyRun(); // (Template pattern)",
            "id": "188123b8edb444fd9d72b7126389c6ec"
          },
          {
            "type": "code",
            "text": "        clock_t end = ::clock();",
            "id": "86dd75929a328043dd0d910e905a9360"
          },
          {
            "type": "code",
            "text": "        return end - start;\n    }",
            "id": "2d3f3ce07cfa3abc3228f956f52e2f9a"
          },
          {
            "type": "code",
            "text": "    virtual void reallyRun() = 0;\n  };",
            "id": "14822abb6fcf35dcc6ecc90150bef8d5"
          },
          {
            "type": "html",
            "text": "class N<b></b>ormalDispatchTimer:<br>public Timeable {",
            "id": "cd891854cef4889f311f43d174abaa90"
          },
          {
            "type": "code",
            "text": "  public:\n    class N''''''ormalClass {\n    public:\n        virtual void run() = 0;\n    };",
            "id": "cbf8a955f586ea1198bc7fa6f5893e47"
          },
          {
            "type": "code",
            "text": "    // It would probably work with just one derived class, but just in case...\n    class F''''''irstNormalClass:  public N''''''ormalClass {\n    public:\n        void run() { /* */ }\n    };",
            "id": "173caf03b553b6f408bf135512136e18"
          },
          {
            "type": "html",
            "text": "class S<b></b>econdNormalClass:<br>public N<b></b>ormalClass {",
            "id": "041178dc96adf4b8754c7559a227c603"
          },
          {
            "type": "code",
            "text": "    public:\n        void run() { /* */ }\n    };",
            "id": "67367334c67705198504cc8fe8af0467"
          },
          {
            "type": "code",
            "text": "    void reallyRun() {\n        first.run();\n        second.run();\n    }",
            "id": "abb40b26aeb4d199f232942d62401d30"
          },
          {
            "type": "code",
            "text": "  private:\n    \n    F''''''irstNormalClass  first;\n    S''''''econdNormalClass second;\n  };",
            "id": "1133f3c12457f9d22f2ff3cd76f3db00"
          },
          {
            "type": "html",
            "text": "class M<b></b>anualDispatchTimer:<br>public Timeable {",
            "id": "d9c927dcfaa13276f14c52c47e3346bb"
          },
          {
            "type": "code",
            "text": "  public:\n    void reallyRun() {\n        runOn(&first);\n        runOn(&second);\n    }",
            "id": "81498dee9bd582ee94f41762e8212a44"
          },
          {
            "type": "code",
            "text": "    class M''''''anualClass {\n    public:\n        enum TYPE {\n            F''''''irstType,\n            S''''''econdType,\n        };",
            "id": "7a4e9c5df09ee9768fb5e7b6184672cd"
          },
          {
            "type": "code",
            "text": "        unsigned char type;\n    };",
            "id": "d31f52d698a93f132f2c12fbc5ea9426"
          },
          {
            "type": "html",
            "text": "class F<b></b>irstManualClass:<br>public M<b></b>anualClass {",
            "id": "5f7c9ac5633257acdf0014f9e466a258"
          },
          {
            "type": "code",
            "text": "    public:\n        F''''''irstManualClass(): type(F''''''irstType) { }",
            "id": "76cff00869151e168c5e436861c27b23"
          },
          {
            "type": "code",
            "text": "        unsigned char type;",
            "id": "39e978d42e5fad5aa422191107f646f4"
          },
          {
            "type": "code",
            "text": "        int someData;\n    };",
            "id": "801e83b94fc2de553f8feab75a870f9b"
          },
          {
            "type": "html",
            "text": "class S<b></b>econdManualClass:<br>public M<b></b>anualClass {",
            "id": "2481dc428b5fa313abad2ab1bcbea7bd"
          },
          {
            "type": "code",
            "text": "    public:\n        S''''''econdManualClass(): type(S''''''econdType) { }",
            "id": "3eb44ab15c69f0ebd1ba1dabaf35c17c"
          },
          {
            "type": "code",
            "text": "        unsigned char type;",
            "id": "39e978d42e5fad5aa422191107f646f4"
          },
          {
            "type": "code",
            "text": "        int someOtherData;\n    };",
            "id": "f02cd8c0315522c97ce3e4c8473af0e6"
          },
          {
            "type": "code",
            "text": "    inline void runOn(M''''''anualClass* mcp) {\n        int x;\n        if (M''''''anualClass::F''''''irstType == mcp->type)\n            x = ((F''''''irstManualClass*)mcp)->someData;\n        else if (M''''''anualClass::S''''''econdType == mcp->type)\n            x = ((S''''''econdManualClass*)mcp)->someOtherData;\n    }",
            "id": "623a7477c7838adec552ede0d9e5f9c8"
          },
          {
            "type": "code",
            "text": "  private:\n    F''''''irstManualClass  first;\n    S''''''econdManualClass second;\n  };",
            "id": "2afe90698fb1dc672fbed6cb22ef0bc4"
          },
          {
            "type": "code",
            "text": "  int main() {\n    std::cout\n        << \"Normal: \"\n        << N''''''ormalDispatchTimer().run()\n        << std::endl\n        << \"Manual: \"\n        << M''''''anualDispatchTimer().run()\n        << std::endl;\n  }",
            "id": "8359bb298e4e7e802459935e117c7f5b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "42d2ff7cbe5c8f5469c9e19e6a37e61f"
          },
          {
            "type": "html",
            "text": "<b>In the Makefile:</b>",
            "id": "8168aa7fa40f702d9004fcf784738b65"
          },
          {
            "type": "html",
            "text": "default:<br>plain optimized",
            "id": "37d7f3bcfd38ee2cbb843af8f5cdb3f0"
          },
          {
            "type": "code",
            "text": "    ./plain\n    ./optimized",
            "id": "9948081f62b095403c818a8292be4f60"
          },
          {
            "type": "html",
            "text": "plain:<br>*.cpp",
            "id": "8b22e094092bdf9405cb254be7144129"
          },
          {
            "type": "code",
            "text": "    g++ $< -o plain",
            "id": "1bc25e24670744ca8d81b69062f001dd"
          },
          {
            "type": "html",
            "text": "optimized:<br>*.cpp",
            "id": "7313948e353cf577d599f7a12728a7b3"
          },
          {
            "type": "code",
            "text": "    g++ -O3 $< -o optimized",
            "id": "e4a623a15031a632e97f9564043af46c"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?TestTypesInsteadOfDispatchProfileCode c2.com]",
            "id": "53e52a8896e5ae7def6f1ca94c147814"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1699944446460
    }
  ]
}