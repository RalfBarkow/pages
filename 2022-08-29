{
  "title": "2022-08-29",
  "story": [
    {
      "type": "markdown",
      "id": "9a98869ba1745267",
      "text": "bhaugen via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1661693772212730rpIbl:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] @Ward and all, I am the colleague that Mike mentioned up thread. So thanks Mike, and thank you Ward for the fascinating demo.\n\nWe are working on the https://www.valueflo.ws/ vocabulary for economic network coordination. Here are some of the current implementations: https://www.valueflo.ws/appendix/usedfor/#holochain-ecosystem â‡’ [[Holochain Ecosystem]]\n\nHere are some of the current message formats: http://valueflows.pythonanywhere.com/\n\nWe would also be delighted to work with somebody on a plain text message format if anybody wanted to do so and had a live network that wanted to use it. Don't know if that would interest Fedwiki, but maybe there's a network or two around Portland?\n\nHere's an intro to Valueflows: https://mikorizal.org/Valueflows_intro_v2.pdf\n"
    },
    {
      "type": "markdown",
      "id": "fb4df7635bbb1ea7",
      "text": "mike_hales: [â€¦] So, there definitely is a way forward with the 2nd of my queries above: passing values between an agent somewhere in the web and wiki ðŸ™‚ How about the 1st: interacting with a graph on a wiki page by direct manipulation (click-drag nodes, add & link nodes, etc). Or some tacit way of generating graphviz script rather than explicit coding?\n"
    },
    {
      "type": "markdown",
      "id": "0ef836782a355711",
      "text": "bhaugen: has an example he might show of this happening in a valueflo.ws interface, to interactively compose a network map.\n"
    },
    {
      "type": "markdown",
      "id": "38fd540406a599f5",
      "text": "Ward@Ward:matrix.org\nI've skimmed the valueflow.ws doc and the Pie Story within. \n"
    },
    {
      "type": "markdown",
      "id": "8cb227da322c7930",
      "text": "â‡’ [[Guidance]]"
    },
    {
      "type": "markdown",
      "id": "bbd5a2793e6c4304",
      "text": "mike_hales:  When folks here are using Arrows alongside wiki, is the transfer of graph data a live feed via an api? Or a batch/manual cut&paste?\n"
    },
    {
      "type": "markdown",
      "id": "1b74f17ddf59f944",
      "text": "Ward@Ward:matrix.org\nâ‡’ [[Arrows]] offers a format that we read. We get it in JSON, SVG or URL form. Each has its strength and weakness. The URL really has the JSON form hidden in it. The SVG will more directly display but is harder to connect downstream processes. \n"
    },
    {
      "type": "markdown",
      "id": "9ec548b1e1b74d0a",
      "text": "â‡’ [[Property Graph]] and [[Fact Modeling]]."
    },
    {
      "type": "graphviz",
      "id": "a562a4ed8a188f0c",
      "text": "DOT FROM lambda-browsing"
    },
    {
      "type": "pagefold",
      "id": "300e4d1a20e2c34b",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "7c68cc1e19afd0cb",
      "text": "Backup Ukraine. [https://learn.poly.cam/backup-ukraine page]"
    },
    {
      "type": "paragraph",
      "id": "b8ae265c3fab52b3",
      "text": "Polycam Learn. [https://learn.poly.cam/ site]"
    },
    {
      "type": "video",
      "id": "23e13c75cadfca7a",
      "text": "YOUTUBE Sk5i35XCiXI\nPlanning Your Capture: LiDAR"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-08-29",
        "story": []
      },
      "date": 1661732366982
    },
    {
      "item": {
        "type": "factory",
        "id": "9a98869ba1745267"
      },
      "id": "9a98869ba1745267",
      "type": "add",
      "date": 1661732378810
    },
    {
      "type": "fork",
      "date": 1661732405286
    },
    {
      "type": "edit",
      "id": "9a98869ba1745267",
      "item": {
        "type": "paragraph",
        "id": "9a98869ba1745267",
        "text": "bhaugen\nWard@Ward:matrix.org\nmike_hales\n: you may find this video interesting. The whole process: plugin to server to microprocessor and back are under control of the plugin markup. This means it runs only when the window is open. We do let the server run user requested computations and report back when the user is interested. I'll show an example of that next.\nWard and all, I am the colleague that Mike mentioned up thread. So thanks Mike, and thank you Ward for the fascinating demo.\n\nWe are working on the https://www.valueflo.ws/ vocabulary for economic network coordination. Here are some of the current implementations: https://www.valueflo.ws/appendix/usedfor/#holochain-ecosystem\n\nHere are some of the current message formats: http://valueflows.pythonanywhere.com/\n\nWe would also be delighted to work with somebody on a plain text message format if anybody wanted to do so and had a live network that wanted to use it. Don't know if that would interest Fedwiki, but maybe there's a network or two around Portland?\n\nHere's an intro to Valueflows: https://mikorizal.org/Valueflows_intro_v2.pdf"
      },
      "date": 1661732410986
    },
    {
      "type": "edit",
      "id": "9a98869ba1745267",
      "item": {
        "type": "paragraph",
        "id": "9a98869ba1745267",
        "text": "bhaugen via [matrix]\n@\nWard and all, I am the colleague that Mike mentioned up thread. So thanks Mike, and thank you Ward for the fascinating demo.\n\nWe are working on the https://www.valueflo.ws/ vocabulary for economic network coordination. Here are some of the current implementations: https://www.valueflo.ws/appendix/usedfor/#holochain-ecosystem\n\nHere are some of the current message formats: http://valueflows.pythonanywhere.com/\n\nWe would also be delighted to work with somebody on a plain text message format if anybody wanted to do so and had a live network that wanted to use it. Don't know if that would interest Fedwiki, but maybe there's a network or two around Portland?\n\nHere's an intro to Valueflows: https://mikorizal.org/Valueflows_intro_v2.pdf"
      },
      "date": 1661732468474
    },
    {
      "type": "edit",
      "id": "9a98869ba1745267",
      "item": {
        "type": "paragraph",
        "id": "9a98869ba1745267",
        "text": "bhaugen via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1661693772212730rpIbl:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n@\nWard and all, I am the colleague that Mike mentioned up thread. So thanks Mike, and thank you Ward for the fascinating demo.\n\nWe are working on the https://www.valueflo.ws/ vocabulary for economic network coordination. Here are some of the current implementations: https://www.valueflo.ws/appendix/usedfor/#holochain-ecosystem\n\nHere are some of the current message formats: http://valueflows.pythonanywhere.com/\n\nWe would also be delighted to work with somebody on a plain text message format if anybody wanted to do so and had a live network that wanted to use it. Don't know if that would interest Fedwiki, but maybe there's a network or two around Portland?\n\nHere's an intro to Valueflows: https://mikorizal.org/Valueflows_intro_v2.pdf"
      },
      "date": 1661732485268
    },
    {
      "type": "edit",
      "id": "9a98869ba1745267",
      "item": {
        "type": "markdown",
        "id": "9a98869ba1745267",
        "text": "bhaugen via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1661693772212730rpIbl:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\n@\nWard and all, I am the colleague that Mike mentioned up thread. So thanks Mike, and thank you Ward for the fascinating demo.\n\nWe are working on the https://www.valueflo.ws/ vocabulary for economic network coordination. Here are some of the current implementations: https://www.valueflo.ws/appendix/usedfor/#holochain-ecosystem\n\nHere are some of the current message formats: http://valueflows.pythonanywhere.com/\n\nWe would also be delighted to work with somebody on a plain text message format if anybody wanted to do so and had a live network that wanted to use it. Don't know if that would interest Fedwiki, but maybe there's a network or two around Portland?\n\nHere's an intro to Valueflows: https://mikorizal.org/Valueflows_intro_v2.pdf"
      },
      "date": 1661732487910
    },
    {
      "type": "edit",
      "id": "9a98869ba1745267",
      "item": {
        "type": "markdown",
        "id": "9a98869ba1745267",
        "text": "bhaugen via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1661693772212730rpIbl:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] @Ward and all, I am the colleague that Mike mentioned up thread. So thanks Mike, and thank you Ward for the fascinating demo.\n\nWe are working on the https://www.valueflo.ws/ vocabulary for economic network coordination. Here are some of the current implementations: https://www.valueflo.ws/appendix/usedfor/#holochain-ecosystem\n\nHere are some of the current message formats: http://valueflows.pythonanywhere.com/\n\nWe would also be delighted to work with somebody on a plain text message format if anybody wanted to do so and had a live network that wanted to use it. Don't know if that would interest Fedwiki, but maybe there's a network or two around Portland?\n\nHere's an intro to Valueflows: https://mikorizal.org/Valueflows_intro_v2.pdf"
      },
      "date": 1661733091916
    },
    {
      "type": "edit",
      "id": "9a98869ba1745267",
      "item": {
        "type": "markdown",
        "id": "9a98869ba1745267",
        "text": "bhaugen via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1661693772212730rpIbl:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] @Ward and all, I am the colleague that Mike mentioned up thread. So thanks Mike, and thank you Ward for the fascinating demo.\n\nWe are working on the https://www.valueflo.ws/ vocabulary for economic network coordination. Here are some of the current implementations: https://www.valueflo.ws/appendix/usedfor/#holochain-ecosystem â€“ [[Holochain Ecosystem]]\n\nHere are some of the current message formats: http://valueflows.pythonanywhere.com/\n\nWe would also be delighted to work with somebody on a plain text message format if anybody wanted to do so and had a live network that wanted to use it. Don't know if that would interest Fedwiki, but maybe there's a network or two around Portland?\n\nHere's an intro to Valueflows: https://mikorizal.org/Valueflows_intro_v2.pdf"
      },
      "date": 1661733123308
    },
    {
      "type": "edit",
      "id": "9a98869ba1745267",
      "item": {
        "type": "markdown",
        "id": "9a98869ba1745267",
        "text": "bhaugen via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1661693772212730rpIbl:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] @Ward and all, I am the colleague that Mike mentioned up thread. So thanks Mike, and thank you Ward for the fascinating demo.\n\nWe are working on the https://www.valueflo.ws/ vocabulary for economic network coordination. Here are some of the current implementations: https://www.valueflo.ws/appendix/usedfor/#holochain-ecosystem â‡’ [[Holochain Ecosystem]]\n\nHere are some of the current message formats: http://valueflows.pythonanywhere.com/\n\nWe would also be delighted to work with somebody on a plain text message format if anybody wanted to do so and had a live network that wanted to use it. Don't know if that would interest Fedwiki, but maybe there's a network or two around Portland?\n\nHere's an intro to Valueflows: https://mikorizal.org/Valueflows_intro_v2.pdf"
      },
      "date": 1661733137238
    },
    {
      "item": {
        "type": "factory",
        "id": "300e4d1a20e2c34b"
      },
      "id": "300e4d1a20e2c34b",
      "type": "add",
      "after": "9a98869ba1745267",
      "date": 1661750778188
    },
    {
      "type": "edit",
      "id": "300e4d1a20e2c34b",
      "item": {
        "type": "pagefold",
        "id": "300e4d1a20e2c34b",
        "text": "~"
      },
      "date": 1661750782908
    },
    {
      "item": {
        "type": "factory",
        "id": "7c68cc1e19afd0cb"
      },
      "id": "7c68cc1e19afd0cb",
      "type": "add",
      "after": "300e4d1a20e2c34b",
      "date": 1661750784511
    },
    {
      "type": "edit",
      "id": "7c68cc1e19afd0cb",
      "item": {
        "type": "paragraph",
        "id": "7c68cc1e19afd0cb",
        "text": "Backup Ukraine"
      },
      "date": 1661750794303
    },
    {
      "type": "edit",
      "id": "7c68cc1e19afd0cb",
      "item": {
        "type": "paragraph",
        "id": "7c68cc1e19afd0cb",
        "text": "Backup Ukraine. [https://learn.poly.cam/backup-ukraine page]"
      },
      "date": 1661750882508
    },
    {
      "type": "add",
      "id": "b8ae265c3fab52b3",
      "item": {
        "type": "paragraph",
        "id": "b8ae265c3fab52b3",
        "text": "Polycam Learn. "
      },
      "after": "7c68cc1e19afd0cb",
      "date": 1661750928672
    },
    {
      "type": "edit",
      "id": "b8ae265c3fab52b3",
      "item": {
        "type": "paragraph",
        "id": "b8ae265c3fab52b3",
        "text": "Polycam Learn. [https://learn.poly.cam/ site]"
      },
      "date": 1661750940489
    },
    {
      "item": {
        "type": "factory",
        "id": "23e13c75cadfca7a"
      },
      "id": "23e13c75cadfca7a",
      "type": "add",
      "after": "b8ae265c3fab52b3",
      "date": 1661752165258
    },
    {
      "type": "edit",
      "id": "23e13c75cadfca7a",
      "item": {
        "type": "video",
        "id": "23e13c75cadfca7a",
        "text": "YOUTUBE Sk5i35XCiXI"
      },
      "date": 1661752178278
    },
    {
      "type": "edit",
      "id": "23e13c75cadfca7a",
      "item": {
        "type": "video",
        "id": "23e13c75cadfca7a",
        "text": "YOUTUBE Sk5i35XCiXI\nPlanning Your Capture: LiDAR"
      },
      "date": 1661752222260
    },
    {
      "type": "edit",
      "id": "9a98869ba1745267",
      "item": {
        "type": "markdown",
        "id": "9a98869ba1745267",
        "text": "bhaugen via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$1661693772212730rpIbl:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] @Ward and all, I am the colleague that Mike mentioned up thread. So thanks Mike, and thank you Ward for the fascinating demo.\n\nWe are working on the https://www.valueflo.ws/ vocabulary for economic network coordination. Here are some of the current implementations: https://www.valueflo.ws/appendix/usedfor/#holochain-ecosystem â‡’ [[Holochain Ecosystem]]\n\nHere are some of the current message formats: http://valueflows.pythonanywhere.com/\n\nWe would also be delighted to work with somebody on a plain text message format if anybody wanted to do so and had a live network that wanted to use it. Don't know if that would interest Fedwiki, but maybe there's a network or two around Portland?\n\nHere's an intro to Valueflows: https://mikorizal.org/Valueflows_intro_v2.pdf\n"
      },
      "date": 1661753119454
    },
    {
      "type": "add",
      "id": "fb4df7635bbb1ea7",
      "item": {
        "type": "markdown",
        "id": "fb4df7635bbb1ea7",
        "text": "mike_hales\nmike_hales\nGreat stuff \nWard\n thanks. I expected that kinda thing to be in the can ðŸ˜‰\nSo, there definitely is a way forward with the 2nd of my queries above: passing values between an agent somewhere in the web and wiki ðŸ™‚ How about the 1st: interacting with a graph on a wiki page by direct manipulation (click-drag nodes, add & link nodes, etc). Or some tacit way of generating graphviz script rather than explicit coding?\nbhaugen: has an example he might show of this happening in a valueflo.ws interface, to interactively compose a network map.\nWard@Ward:matrix.org\nI've skimmed the valueflow.ws doc and the Pie Story within. I will have to read more carefully to understand Resources, Events, Agents at the level I understand Pierson's Ideal, Organization, Action tetrahedron. We made some effort to capture instances from real life based on spreadsheets but found this tedious and error prone. We are much more excited about a schema based endless-form interaction. Once you name a thing of one kind it asks how that connects to other things along directions suggested by the schema. I found Ideal, Organization, Action provided suitable guidance for authoring small graphs I called Haiku. The power comes from selective assembly from a repertoire of possibly related Haiku.\nOne could think of this as pulling out new nodes from an existing graph. The Arrows app (https://arrows.app/) does the graphical pulling thing pretty well but lacks the guidance that gets one wondering.\nmike_hales\nWhen folks here are using Arrows alongside wiki, is the transfer of graph data a live feed via an api? Or a batch/manual cut&paste?\nWard@Ward:matrix.org\nArrows offers a format that we read. We get it in JSON, SVG or URL form. Each has its strength and weakness. The URL really has the JSON form hidden in it. The SVG will more directly display but is harder to connect downstream processes. \nArrows is intended to talk to Neo4j, a property graph database. I've read blog posts that compare property graph to triple store and find them pretty much identical. Like in Animal Farm, they are all equal, but some more equal than others. Which representation is preferred depends on the author."
      },
      "after": "9a98869ba1745267",
      "date": 1661753120502
    },
    {
      "type": "edit",
      "id": "fb4df7635bbb1ea7",
      "item": {
        "type": "markdown",
        "id": "fb4df7635bbb1ea7",
        "text": "mike_hales\nmike_hales\nGreat stuff \nWard\n thanks. I expected that kinda thing to be in the can ðŸ˜‰\nSo, there definitely is a way forward with the 2nd of my queries above: passing values between an agent somewhere in the web and wiki ðŸ™‚ How about the 1st: interacting with a graph on a wiki page by direct manipulation (click-drag nodes, add & link nodes, etc). Or some tacit way of generating graphviz script rather than explicit coding?\nbhaugen: has an example he might show of this happening in a valueflo.ws interface, to interactively compose a network map.\n"
      },
      "date": 1661753262455
    },
    {
      "type": "add",
      "id": "38fd540406a599f5",
      "item": {
        "type": "markdown",
        "id": "38fd540406a599f5",
        "text": "Ward@Ward:matrix.org\nI've skimmed the valueflow.ws doc and the Pie Story within. I will have to read more carefully to understand Resources, Events, Agents at the level I understand Pierson's Ideal, Organization, Action tetrahedron. We made some effort to capture instances from real life based on spreadsheets but found this tedious and error prone. We are much more excited about a schema based endless-form interaction. Once you name a thing of one kind it asks how that connects to other things along directions suggested by the schema. I found Ideal, Organization, Action provided suitable guidance for authoring small graphs I called Haiku. The power comes from selective assembly from a repertoire of possibly related Haiku.\nOne could think of this as pulling out new nodes from an existing graph. The Arrows app (https://arrows.app/) does the graphical pulling thing pretty well but lacks the guidance that gets one wondering.\n\n"
      },
      "after": "fb4df7635bbb1ea7",
      "date": 1661753268016
    },
    {
      "type": "add",
      "id": "bbd5a2793e6c4304",
      "item": {
        "type": "markdown",
        "id": "bbd5a2793e6c4304",
        "text": "mike_hales\nWhen folks here are using Arrows alongside wiki, is the transfer of graph data a live feed via an api? Or a batch/manual cut&paste?\nWard@Ward:matrix.org\nArrows offers a format that we read. We get it in JSON, SVG or URL form. Each has its strength and weakness. The URL really has the JSON form hidden in it. The SVG will more directly display but is harder to connect downstream processes. \nArrows is intended to talk to Neo4j, a property graph database. I've read blog posts that compare property graph to triple store and find them pretty much identical. Like in Animal Farm, they are all equal, but some more equal than others. Which representation is preferred depends on the author."
      },
      "after": "38fd540406a599f5",
      "date": 1661753273130
    },
    {
      "type": "edit",
      "id": "38fd540406a599f5",
      "item": {
        "type": "markdown",
        "id": "38fd540406a599f5",
        "text": "Ward@Ward:matrix.org\nI've skimmed the valueflow.ws doc and the Pie Story within. I will have to read more carefully to understand Resources, Events, Agents at the level I understand Pierson's Ideal, Organization, Action tetrahedron. We made some effort to capture instances from real life based on spreadsheets but found this tedious and error prone. We are much more excited about a schema based endless-form interaction. Once you name a thing of one kind it asks how that connects to other things along directions suggested by the schema. I found Ideal, Organization, Action provided suitable guidance for authoring small graphs I called Haiku. The power comes from selective assembly from a repertoire of possibly related Haiku.\nOne could think of this as pulling out new nodes from an existing graph. The Arrows app (https://arrows.app/) does the graphical pulling thing pretty well but lacks the [[guidance that gets one wondering]].\n\n"
      },
      "date": 1661753332482
    },
    {
      "type": "edit",
      "id": "38fd540406a599f5",
      "item": {
        "type": "markdown",
        "id": "38fd540406a599f5",
        "text": "Ward@Ward:matrix.org\nI've skimmed the valueflow.ws doc and the Pie Story within. I will have to read more carefully to understand Resources, Events, Agents at the level I understand Pierson's Ideal, Organization, Action tetrahedron. We made some effort to capture instances from real life based on spreadsheets but found this tedious and error prone. We are much more excited about a schema based endless-form interaction. Once you name a thing of one kind it asks how that connects to other things along directions suggested by the schema. I found Ideal, Organization, Action provided suitable guidance for authoring small graphs I called Haiku. The power comes from selective assembly from a repertoire of possibly related Haiku.\nOne could think of this as pulling out new nodes from an existing graph. The Arrows app (https://arrows.app/) does the graphical pulling thing pretty well but lacks the [[Guidance]] that gets one wondering.\n\n"
      },
      "date": 1661753356420
    },
    {
      "type": "edit",
      "id": "38fd540406a599f5",
      "item": {
        "type": "markdown",
        "id": "38fd540406a599f5",
        "text": "Ward@Ward:matrix.org\nI've skimmed the valueflow.ws doc and the Pie Story within. \n"
      },
      "date": 1661753394461
    },
    {
      "type": "add",
      "id": "f684fa3699eab5bd",
      "item": {
        "type": "markdown",
        "id": "f684fa3699eab5bd",
        "text": "We will have to read more carefully to understand Resources, Events, Agents at the level I understand Pierson's Ideal, Organization, Action tetrahedron. We made some effort to capture instances from real life based on spreadsheets but found this tedious and error prone. We are much more excited about a schema based endless-form interaction. Once you name a thing of one kind it asks how that connects to other things along directions suggested by the schema. I found Ideal, Organization, Action provided suitable guidance for authoring small graphs I called Haiku. The power comes from selective assembly from a repertoire of possibly related Haiku.\nOne could think of this as pulling out new nodes from an existing graph. The Arrows app (https://arrows.app/) does the graphical pulling thing pretty well but lacks the [[Guidance]] that gets one wondering.\n\n"
      },
      "after": "38fd540406a599f5",
      "date": 1661753396476
    },
    {
      "type": "add",
      "id": "8cb227da322c7930",
      "item": {
        "type": "markdown",
        "id": "8cb227da322c7930",
        "text": "[[Guidance]]"
      },
      "after": "38fd540406a599f5",
      "date": 1661753411018
    },
    {
      "id": "f684fa3699eab5bd",
      "type": "remove",
      "date": 1661753413933
    },
    {
      "type": "edit",
      "id": "8cb227da322c7930",
      "item": {
        "type": "markdown",
        "id": "8cb227da322c7930",
        "text": "â‡’ [[Guidance]]"
      },
      "date": 1661753595054
    },
    {
      "type": "edit",
      "id": "fb4df7635bbb1ea7",
      "item": {
        "type": "markdown",
        "id": "fb4df7635bbb1ea7",
        "text": "mike_hales: [â€¦] So, there definitely is a way forward with the 2nd of my queries above: passing values between an agent somewhere in the web and wiki ðŸ™‚ How about the 1st: interacting with a graph on a wiki page by direct manipulation (click-drag nodes, add & link nodes, etc). Or some tacit way of generating graphviz script rather than explicit coding?\n"
      },
      "date": 1661753758826
    },
    {
      "type": "add",
      "id": "0ef836782a355711",
      "item": {
        "type": "markdown",
        "id": "0ef836782a355711",
        "text": "bhaugen: has an example he might show of this happening in a valueflo.ws interface, to interactively compose a network map.\n"
      },
      "after": "fb4df7635bbb1ea7",
      "date": 1661753759752
    },
    {
      "type": "edit",
      "id": "bbd5a2793e6c4304",
      "item": {
        "type": "markdown",
        "id": "bbd5a2793e6c4304",
        "text": "mike_hales:  When folks here are using Arrows alongside wiki, is the transfer of graph data a live feed via an api? Or a batch/manual cut&paste?\n"
      },
      "date": 1661753857027
    },
    {
      "type": "add",
      "id": "1b74f17ddf59f944",
      "item": {
        "type": "markdown",
        "id": "1b74f17ddf59f944",
        "text": "Ward@Ward:matrix.org\n[[Arrows]] offers a format that we read. We get it in JSON, SVG or URL form. Each has its strength and weakness. The URL really has the JSON form hidden in it. The SVG will more directly display but is harder to connect downstream processes. \nArrows is intended to talk to Neo4j, a property graph database. I've read blog posts that compare property graph to triple store and find them pretty much identical. Like in Animal Farm, they are all equal, but some more equal than others. Which representation is preferred depends on the author."
      },
      "after": "bbd5a2793e6c4304",
      "date": 1661753865259
    },
    {
      "type": "edit",
      "id": "1b74f17ddf59f944",
      "item": {
        "type": "markdown",
        "id": "1b74f17ddf59f944",
        "text": "Ward@Ward:matrix.org\n[[Arrows]] offers a format that we read. We get it in JSON, SVG or URL form. Each has its strength and weakness. The URL really has the JSON form hidden in it. The SVG will more directly display but is harder to connect downstream processes. \n"
      },
      "date": 1661753902227
    },
    {
      "type": "add",
      "id": "6cabb26eb473acb4",
      "item": {
        "type": "markdown",
        "id": "6cabb26eb473acb4",
        "text": "Arrows is intended to talk to Neo4j, a property graph database. I've read blog posts that compare property graph to triple store and find them pretty much identical. Like in Animal Farm, they are all equal, but some more equal than others. Which representation is preferred depends on the author."
      },
      "after": "1b74f17ddf59f944",
      "date": 1661753917016
    },
    {
      "type": "edit",
      "id": "1b74f17ddf59f944",
      "item": {
        "type": "markdown",
        "id": "1b74f17ddf59f944",
        "text": "Ward@Ward:matrix.org\nâ‡’ [[Arrows]] offers a format that we read. We get it in JSON, SVG or URL form. Each has its strength and weakness. The URL really has the JSON form hidden in it. The SVG will more directly display but is harder to connect downstream processes. \n"
      },
      "date": 1661753930667
    },
    {
      "id": "6cabb26eb473acb4",
      "type": "remove",
      "date": 1661753937703
    },
    {
      "type": "add",
      "id": "9ec548b1e1b74d0a",
      "item": {
        "type": "markdown",
        "id": "9ec548b1e1b74d0a",
        "text": "â‡’ [[Property Graph]] and [[Fact Modeling]]."
      },
      "after": "1b74f17ddf59f944",
      "date": 1661754248339
    },
    {
      "item": {
        "type": "factory",
        "id": "a562a4ed8a188f0c"
      },
      "id": "a562a4ed8a188f0c",
      "type": "add",
      "after": "23e13c75cadfca7a",
      "date": 1661754253149
    },
    {
      "id": "a562a4ed8a188f0c",
      "type": "move",
      "order": [
        "9a98869ba1745267",
        "fb4df7635bbb1ea7",
        "0ef836782a355711",
        "38fd540406a599f5",
        "8cb227da322c7930",
        "bbd5a2793e6c4304",
        "1b74f17ddf59f944",
        "9ec548b1e1b74d0a",
        "a562a4ed8a188f0c",
        "300e4d1a20e2c34b",
        "7c68cc1e19afd0cb",
        "b8ae265c3fab52b3",
        "23e13c75cadfca7a"
      ],
      "date": 1661754259880
    },
    {
      "type": "edit",
      "id": "a562a4ed8a188f0c",
      "item": {
        "type": "graphviz",
        "id": "a562a4ed8a188f0c",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1661754269667
    }
  ]
}