{
  "title": "Distributing The Interface And The Application",
  "story": [
    {
      "type": "paragraph",
      "id": "b9cc5cabf4ab4890",
      "text": "The interface facilities in existing systems like X |Scheifler and Gettys, 19861 are designed to have many users on many machines (processors). The machines have a client/server relationship with the interface running on the server and the applications running on the clients. Users require one server but may connect to any number of clients. In this model, which tasks should be performed by the client and which should be done by the server (i.e., the partitioning of the application and the interface) is not always clear. For example, who is responsible for updating the display when part of it is destroyed?"
    },
    {
      "type": "paragraph",
      "id": "4a4fae35054de9a3",
      "text": "These systems require the designers to partition their product into application and interface parts which are distributed over the client and server. [[Eva]], on the other hand, encourages but does not require this partitioning and can distribute both the application and the interface over many machines. Eva is used in a single user, multiprocessor environment similar to that found in Adagio [Tanner, et al., 1985]. Because the components of Eva are Actors [Hewitt, Bishop and Steiger, 1973] (light weight processes) they are well defined and concrete. Each component is a self-contained object which has its own resources (including processing power) and communicates with other objects using a message passing protocol (e.g., Harmony [Gentleman 85]). This increased modularity makes it easy to incorporate new hardware into the system."
    },
    {
      "type": "paragraph",
      "id": "4d3870c0daba9c7f",
      "text": "⇒ [[Models, Views and Controllers]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Distributing The Interface And The Application",
        "story": []
      },
      "date": 1655960367329
    },
    {
      "item": {
        "type": "factory",
        "id": "b9cc5cabf4ab4890"
      },
      "id": "b9cc5cabf4ab4890",
      "type": "add",
      "date": 1655960375829
    },
    {
      "type": "edit",
      "id": "b9cc5cabf4ab4890",
      "item": {
        "type": "paragraph",
        "id": "b9cc5cabf4ab4890",
        "text": "The interface facilities in existing systems like X |Scheifler and Gettys, 19861 are designed to have many users on many machines (processors). The machines have a client/server relationship with the interface running on the server and the applications running on the clients. Users require one server but may connect to any number of clients. In this model, which tasks should be performed by the client and which should be done by the server (i.e., the partitioning of the application and the interface) is not always clear. For example, who is responsible for updating the display when part of it is destroyed?"
      },
      "date": 1655960377097
    },
    {
      "item": {
        "type": "factory",
        "id": "4a4fae35054de9a3"
      },
      "id": "4a4fae35054de9a3",
      "type": "add",
      "after": "b9cc5cabf4ab4890",
      "date": 1655960410942
    },
    {
      "type": "edit",
      "id": "4a4fae35054de9a3",
      "item": {
        "type": "paragraph",
        "id": "4a4fae35054de9a3",
        "text": "These systems require the designers to partition their product into application and interface parts which are distributed over the client and server. Eva, on the other hand, encourages but does not require this partitioning and can distribute both the application and the interface over many machines. Eva is used in a single user, multiprocessor environment similar to that found in Adagio [Tanner, et al., 1985]. Because the components of Eva are Actors [Hewitt, Bishop an$ Steiger, 1973] (light weight processes) they are well defined and concrete. Each component is a self-contained object which has its own resources (including processing power) and communicates with other objects using a message passing protocol (e.g., Harmony [Gentleman 85]). This increased modularity makes it easy to incorporate new hardware into the system."
      },
      "date": 1655960412481
    },
    {
      "type": "edit",
      "id": "4a4fae35054de9a3",
      "item": {
        "type": "paragraph",
        "id": "4a4fae35054de9a3",
        "text": "These systems require the designers to partition their product into application and interface parts which are distributed over the client and server. [[Eva]], on the other hand, encourages but does not require this partitioning and can distribute both the application and the interface over many machines. Eva is used in a single user, multiprocessor environment similar to that found in Adagio [Tanner, et al., 1985]. Because the components of Eva are Actors [Hewitt, Bishop an$ Steiger, 1973] (light weight processes) they are well defined and concrete. Each component is a self-contained object which has its own resources (including processing power) and communicates with other objects using a message passing protocol (e.g., Harmony [Gentleman 85]). This increased modularity makes it easy to incorporate new hardware into the system."
      },
      "date": 1655960438559
    },
    {
      "type": "edit",
      "id": "4a4fae35054de9a3",
      "item": {
        "type": "paragraph",
        "id": "4a4fae35054de9a3",
        "text": "These systems require the designers to partition their product into application and interface parts which are distributed over the client and server. [[Eva]], on the other hand, encourages but does not require this partitioning and can distribute both the application and the interface over many machines. Eva is used in a single user, multiprocessor environment similar to that found in Adagio [Tanner, et al., 1985]. Because the components of Eva are Actors [Hewitt, Bishop and Steiger, 1973] (light weight processes) they are well defined and concrete. Each component is a self-contained object which has its own resources (including processing power) and communicates with other objects using a message passing protocol (e.g., Harmony [Gentleman 85]). This increased modularity makes it easy to incorporate new hardware into the system."
      },
      "date": 1655960492529
    },
    {
      "item": {
        "type": "factory",
        "id": "4d3870c0daba9c7f"
      },
      "id": "4d3870c0daba9c7f",
      "type": "add",
      "after": "4a4fae35054de9a3",
      "date": 1655960523898
    },
    {
      "type": "edit",
      "id": "4d3870c0daba9c7f",
      "item": {
        "type": "paragraph",
        "id": "4d3870c0daba9c7f",
        "text": "⇒ [[Models, Views and Controllers]]"
      },
      "date": 1655960536348
    }
  ]
}