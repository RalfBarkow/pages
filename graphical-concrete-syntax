{
  "title": "Graphical Concrete Syntax",
  "story": [
    {
      "type": "paragraph",
      "id": "dc21b489ffded830",
      "text": "Model Driven Development and Domain Specific Languages are two trends in software engineering which cause a proliferation of modeling languages when used together. New modeling languages need a precise specification of their syntax and semantics to gain acceptance. While metamodeling is a comprehensive mean for defining the [[abstract syntax]], i.e. the concepts of a modeling language, most language specifications are held informally for the description of the semantic and for the (graphical) concrete syntax. This chapter is tackling the problem of defining graphical syntaxes on top of a metamodel stating abstract syntax using a two-step process: specification and realization. For the specification part, we propose to build a second metamodel to express concrete syntax. Declarative relationships put in relation metamodel for the abstract syntax and metamodel for concrete syntax. Regarding realization, we propose to define in a constructive way shape of graphical elements using the XML-based standard [[Scalable Vector Graphics]] ([[SVG]]). Thus, the graphical representation of a model is an SVG document that may automatically be controlled using the Document Object Model (DOM) technology. In this part, we also identify a set of predefined components making use of DOM that can participate to the SVG shapes for specifying possible user interactions. Relationship between representation, defined in the specification step, and concrete syntax, defined in the realization step, is performed by events triggering action language scripts, such that the complete specification is machine understandable."
    },
    {
      "type": "paragraph",
      "id": "7c8b51d4112f4a2a",
      "text": "This chapter was partly published in the Model Driven Architecture - Foundations and Applications, First European Conference 2005 [FB05] and is complemented by the bachelor semester projects [Hon05] and [RH06]."
    },
    {
      "type": "paragraph",
      "id": "037a5be9f649f9ca",
      "text": "[…] The specification step states the representation data and data coherence rules, and the task of icon definition and user interaction is let to the realization step. Do do so, we propose to define icons using the SVG language for two-dimensional vector graphics. User interactions may be defined in libraries of predefined DOM components capable to alter the representation. Relation between the specification and the realization is achieved through an event system: the execution of a DOM component may trigger an action on the representation data, and an alteration of the representation data may be listened by the icons. Finally, we should end up with a specification including abstract syntax, specification of concrete syntax and realization of concrete syntax. The complete specification may be interpretable by a tool, so that can be offered a CASE tool (i.e. a graphical modeling tool) for a such developed language."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Graphical Concrete Syntax",
        "story": []
      },
      "date": 1652307641565
    },
    {
      "item": {
        "type": "factory",
        "id": "dc21b489ffded830"
      },
      "id": "dc21b489ffded830",
      "type": "add",
      "date": 1652307652671
    },
    {
      "type": "edit",
      "id": "dc21b489ffded830",
      "item": {
        "type": "paragraph",
        "id": "dc21b489ffded830",
        "text": "Model Driven Development and Domain Specific Languages are two trends in software engineering which cause a proliferation of modeling languages when used together. New modeling languages need a precise specification of their syntax and semantics to gain acceptance. While metamodeling is a comprehensive mean for defining the abstract syntax, i.e. the concepts of a modeling language, most language specifications are held informally for the description of the semantic and for the (graphical) concrete syntax. This chapter is tackling the problem of defining graphical syntaxes on top of a metamodel stating abstract syntax using a two-step process: specification and realization. For the specification part, we propose to build a second metamodel to express concrete syntax. Declarative relationships put in relation metamodel for the abstract syntax and metamodel for concrete syntax. Regarding realization, we propose to define in a constructive way shape of graphical elements using the XML-based standard Scalable Vector Graphics (SVG). Thus, the graphical representation of a model is an SVG document that may automatically be controlled using the Document Object Model (DOM) technology. In this part, we also identify a set of predefined components making use of DOM that can participate to the SVG shapes for specifying possible user interactions. Relationship between representation, defined in the specification step, and concrete syntax, defined in the realization step, is performed by events triggering action language scripts, such that the complete specification is machine understandable."
      },
      "date": 1652307653916
    },
    {
      "type": "edit",
      "id": "dc21b489ffded830",
      "item": {
        "type": "paragraph",
        "id": "dc21b489ffded830",
        "text": "Model Driven Development and Domain Specific Languages are two trends in software engineering which cause a proliferation of modeling languages when used together. New modeling languages need a precise specification of their syntax and semantics to gain acceptance. While metamodeling is a comprehensive mean for defining the [[abstract syntax]], i.e. the concepts of a modeling language, most language specifications are held informally for the description of the semantic and for the (graphical) concrete syntax. This chapter is tackling the problem of defining graphical syntaxes on top of a metamodel stating abstract syntax using a two-step process: specification and realization. For the specification part, we propose to build a second metamodel to express concrete syntax. Declarative relationships put in relation metamodel for the abstract syntax and metamodel for concrete syntax. Regarding realization, we propose to define in a constructive way shape of graphical elements using the XML-based standard Scalable Vector Graphics (SVG). Thus, the graphical representation of a model is an SVG document that may automatically be controlled using the Document Object Model (DOM) technology. In this part, we also identify a set of predefined components making use of DOM that can participate to the SVG shapes for specifying possible user interactions. Relationship between representation, defined in the specification step, and concrete syntax, defined in the realization step, is performed by events triggering action language scripts, such that the complete specification is machine understandable."
      },
      "date": 1652307689918
    },
    {
      "type": "edit",
      "id": "dc21b489ffded830",
      "item": {
        "type": "paragraph",
        "id": "dc21b489ffded830",
        "text": "Model Driven Development and Domain Specific Languages are two trends in software engineering which cause a proliferation of modeling languages when used together. New modeling languages need a precise specification of their syntax and semantics to gain acceptance. While metamodeling is a comprehensive mean for defining the [[abstract syntax]], i.e. the concepts of a modeling language, most language specifications are held informally for the description of the semantic and for the (graphical) concrete syntax. This chapter is tackling the problem of defining graphical syntaxes on top of a metamodel stating abstract syntax using a two-step process: specification and realization. For the specification part, we propose to build a second metamodel to express concrete syntax. Declarative relationships put in relation metamodel for the abstract syntax and metamodel for concrete syntax. Regarding realization, we propose to define in a constructive way shape of graphical elements using the XML-based standard [[Scalable Vector Graphics]] ([[SVG]]). Thus, the graphical representation of a model is an SVG document that may automatically be controlled using the Document Object Model (DOM) technology. In this part, we also identify a set of predefined components making use of DOM that can participate to the SVG shapes for specifying possible user interactions. Relationship between representation, defined in the specification step, and concrete syntax, defined in the realization step, is performed by events triggering action language scripts, such that the complete specification is machine understandable."
      },
      "date": 1652307737371
    },
    {
      "item": {
        "type": "factory",
        "id": "7c8b51d4112f4a2a"
      },
      "id": "7c8b51d4112f4a2a",
      "type": "add",
      "after": "dc21b489ffded830",
      "date": 1652307768363
    },
    {
      "type": "edit",
      "id": "7c8b51d4112f4a2a",
      "item": {
        "type": "paragraph",
        "id": "7c8b51d4112f4a2a",
        "text": "This chapter was partly published in the Model Driven Architecture - Foundations and Applications, First European Conference 2005 [FB05] and is complemented by the bachelor semester projects [Hon05] and [RH06]."
      },
      "date": 1652307769806
    },
    {
      "item": {
        "type": "factory",
        "id": "037a5be9f649f9ca"
      },
      "id": "037a5be9f649f9ca",
      "type": "add",
      "after": "7c8b51d4112f4a2a",
      "date": 1652307808011
    },
    {
      "type": "edit",
      "id": "037a5be9f649f9ca",
      "item": {
        "type": "paragraph",
        "id": "037a5be9f649f9ca",
        "text": "[…] The specification step states the representation data and data coherence rules, and the task of icon definition and user interaction is let to the realization step. Do do so, we propose to define icons using the SVG language for two-dimensional vector graphics. User interactions may be defined in libraries of predefined DOM components capable to alter the representation. Relation between the specification and the realization is achieved through an event system: the execution of a DOM component may trigger an action on the representation data, and an alteration of the representation data may be listened by the icons. Finally, we should end up with a specification including abstract syntax, specification of concrete syntax and realization of concrete syntax. The complete specification may be interpretable by a tool, so that can be offered a CASE tool (i.e. a graphical modeling tool) for a such developed language."
      },
      "date": 1652307816601
    }
  ]
}