{
  "title": "Aspect Oriented Examples",
  "story": [
    {
      "type": "html",
      "text": " A query operation. In one aspect, you describe how to delegate the query to other queries. In another aspect you describe the evaluation strategy: early evaluation (i.e. add a member attribute), cached or late evaluation. Writing queries this way allows you to ignore questions of efficiency and concentrate on the function.  A DFD can be useful for viewing the query chain in the absence of any evaluation strategy. -- [[Dave Whipp]]",
      "id": "ce6e350400082a061a55ea31f4666d7f"
    },
    {
      "type": "html",
      "text": " The presentations at [http://www.parc.com/research/csl/projects/aspectj/default.html www.parc.com], which present AOP and AspectJ together. They combine good illustrations with source code and screenshots of, for instance, how AspectJ allowed them to add a debugging \"trace\" to a Java-based videogame. Shows how AspectJ integrates with IDEs, javadoc, etc. -- [[Larry Obrien]]",
      "id": "e6bb3ad79eb22e99c551c864220d7bc4"
    },
    {
      "type": "html",
      "text": " The examples of aspects the slides use are (a) concurrency properties--e.g. whether deadlock occurs is not a property of any one line of code; (b) bandwidth requirements--specifically, they want to treat large (parts of) objects differently from small ones irrespective of any other modularization criteria. They draw analogies with static versus dynamic properties of a wooden bridge, and time/voltage versus frequency spectra in Fourier analysis.  -- [[Dave Harris]]",
      "id": "1c953d6d8cec97bb701bb22aec6615a5"
    },
    {
      "type": "html",
      "text": " A bean aspect.  [http://dev.eclipse.org/viewcvs/indextech.cgi/~checkout~/aspectj-home/doc/progguide/ch03s05.html dev.eclipse.org].  The connection aspect is what you'd want to be looking at.  -- [[Brian Bray]], [[Anonymous Donor]]s",
      "id": "e06fa2259887de95c2f19523771b467b"
    },
    {
      "type": "html",
      "text": " See [http://aosd.net/technology/research.php aosd.net] for a list of projects working on different variations of AOP. -- [[Stanley Knutson]]",
      "id": "14ad0f6fdeb8559b3ffbf1bfe1065b14"
    },
    {
      "type": "html",
      "text": "\nPerhaps we could use an easy, canonical example of why someone might need AOP. Here's my attempt:",
      "id": "48984046b43ac829270af6749ee395fa"
    },
    {
      "type": "html",
      "text": "\nThree months into a project, the user asks for highly specific logging. For some reason, they want to log instantiation of a bunch of different classes, but these classes are spread out across all sorts of domains. You can't use inheritance, since they all inherit from different objects.",
      "id": "3dc68f8822b84e014f72db0027166450"
    },
    {
      "type": "html",
      "text": "\nThe AOP way to solve this is:",
      "id": "124f942b8fc2c105e61a995e07eee88a"
    },
    {
      "type": "html",
      "text": " Write your logging code in a sort-of meta-language.",
      "id": "4c8043004f9c538f8b28070ee948e20a"
    },
    {
      "type": "html",
      "text": " Have your build process include a code-weaver, which parses your meta-language and changes the necessary parts of your source code before compilation.",
      "id": "f984e6326cee9c6291c469b01a2fbff1"
    },
    {
      "type": "html",
      "text": "\nThis way, you've solved the problem without abusing inheritance, and without having to change 50 classes by hand.",
      "id": "633a363c2799baa6190131ad1559bd3e"
    },
    {
      "type": "html",
      "text": "\nThe canonical examples are pretty compelling (logging, synchronization, billing, security access across class boundaries) but there are any number of possibilities. I realized a need for something like this approximately two years ago when developing a S<b></b>martProxy and S<b></b>martSkeleton class for a family of servers but didn't have a name for what I was looking for. These classes would handle dynamic failover completely transparently to the calling code. It worked but involved wrapping and maintaining the interfaces over time which became a real pain.",
      "id": "7d1488c6b25223406aa96e1699dcc288"
    },
    {
      "type": "html",
      "text": "\nWith an aspect, I could have defined before() and after() advice (using AspectJ-speak) that caught and re-routed any failed attempt whatever method was being called, return to the primary server when it was restarted, etc. It would have taken about 20 lines of code compared to 20 lines of code * the number of interfaces * the number of methods in the interfaces. It would move with interface changes over time and support evolution of the advised behavior(perhaps adding rolling back of transactions if no server were available to satisfy the call).",
      "id": "50a5ca8adc5b28c63d2ce466e9ca3120"
    },
    {
      "type": "html",
      "text": "\nAnother example: If you are creating an ASP-based service, you could easily instrument your code to charge certain rates for time spent in value-added code and different rates or nothing at all for time spent in JDK core code. Whatever your billing policy was it could easily change over time with minimal impact.",
      "id": "7a92995df053cc0c31cd4dfd133b50b5"
    },
    {
      "type": "html",
      "text": "-- B<b></b>rianSletten",
      "id": "8567e4781dbac8bf27b65d6dd26a0112"
    },
    {
      "type": "html",
      "text": "\nLet me try to make this a bit more concrete. I have written a text editor which have around 20 \"transformations\" which the user can apply on the selected text. If no text is selected, it often makes sense to apply the \"transformation\" to the current character, word or line.",
      "id": "84b5a7aebdb629c245eac950eba0203a"
    },
    {
      "type": "html",
      "text": "\nSo instead of having each of these transformations start by checking if text is selected, and if not, select the proper unit, I would prefer to put this in as a BEFORE() -- likewise, if text wasn't selected, not text should be selected after the transformation, this however require that some state info can be transferred from my BEFORE() to my AFTER(). Furthermore, the BEFORE()-code somehow needs to know which buffer the transformation is supposed to work on (so that it can select in this buffer).",
      "id": "09e328e9b1493a9b36b83161d06c7ba5"
    },
    {
      "type": "html",
      "text": " This, I'm sorry, this is exactly where OOP and AOP come from and lead to. You shouldn't be repeatedly writing the selection-checking code inside each transformation object, it should be called before you do a transformation. You can do this easily (and cleanly) with the most simple of imperative languages, you do not need a new paradigm. You never did.",
      "id": "7528e8799a61ce5719332333f5939624"
    },
    {
      "type": "html",
      "text": "\nThere are other examples where BEFORE()/AFTER()-code becomes useful. For example, normally the run-loop is running, it gets e.g. some input from the user, which results in a method being invoked on my controller -- this may lead to all sorts of nested method invocations, but whatever method is the first, should \"merge\" the undo stack on exit, so that all the work done, is undone as a single event.",
      "id": "d93452236f4d8ab83c79177487d31485"
    },
    {
      "type": "html",
      "text": "\nThere are many different entries to my controller, so this would require some sort of nesting counter which was incremented in BEFORE() and decremented in AFTER(), and if zero, it would \"merge\" the new entries on the undo stack.",
      "id": "dfcca905c6f38fff32724a9fbcfa938c"
    },
    {
      "type": "html",
      "text": "\nSo all in all I am very hooked on this AOP, but so far I have not figured out if it will ever work in real life (for other than add debug traces to each function or other relatively \"simple\" stuff, which I can more or less already do by defining \"{\" to \"{ BEFORE();\" and \"}\" to \"AFTER;}\" :-)",
      "id": "8a63b473a1706202d9494ebc15ef9240"
    },
    {
      "type": "html",
      "text": "\nSo could something comment on what the expected state of AOP is in e.g. 2010, and if it will ever see its way into existing languages like [[Cee Plus Plus]]? -- [[Anonymous Donor]]",
      "id": "4b0f8d135894f2849580073676415e52"
    },
    {
      "type": "html",
      "text": "\nCould someone provide different examples to clarify AOP?  I am writing from the perspective of one who knows absolutely nothing about AOP but a little about OO patterns.  Having only the above examples, I do not see why AOP is new or advantageous, at least in environments that support inner classes.  Consider the S<b></b>martProxy example above.  Couldn't you do the following (in Java or .NET, anyway)? ",
      "id": "8105c83dcaa4b135ea5ea323307d33c8"
    },
    {
      "type": "html",
      "text": " Declare an abstract class with a public foo() method.  ",
      "id": "d1dd344113b7ddda61402b7919a97968"
    },
    {
      "type": "html",
      "text": " Write the foo() method to be three calls:<br>before(), foohook(), and after(). ",
      "id": "91c59fe460bfbf5821279b3565d56183"
    },
    {
      "type": "html",
      "text": " Make foohook() an overridable method that acts just like foo(), i.e., it has the same signature, and the arguments to foo() are passed through to foohook().",
      "id": "0d597652acc144fba976f78df21a6c52"
    },
    {
      "type": "html",
      "text": " The class contains implementations of before() and after().",
      "id": "95113d3540c27ec0825e9fd722c80a75"
    },
    {
      "type": "html",
      "text": "Then, each time you need something to be wrapped by calls to before() and after(), create an anonymous inner class that subclasses foo's class and overrides foohook().  The override will be wrapped.  [There's a little more work to be done to give foo() a general signature, but I think the point stands.]  ",
      "id": "850911e6b50522e4eeb628d891304fc5"
    },
    {
      "type": "html",
      "text": "\nThus, the problem of \"20 lines of code * the number of interfaces * the number of methods in the interfaces\" doesn't motivate me to investigate AOP, since it seems a solvable problem.",
      "id": "874c168ff16e61a6debe9a955cb45e07"
    },
    {
      "type": "html",
      "text": " You're halfway there; for the rest, rather obviously, \"the only difference is that there is no cat.\"",
      "id": "07cb32c045cb18b9ee53a41b0bf45790"
    },
    {
      "type": "html",
      "text": "\nPerhaps there are subtleties of the deadlock problem, or some other example? -- another [[Anonymous Donor]]",
      "id": "e7c66d4007e41a3ef8bffca02a3ddd3f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9dcba7a8b287f68eb0e4f469b8a5d115"
    },
    {
      "type": "html",
      "text": "This sounds an awful lot decorators (somewhat related to the [[Decorator Pattern]]) in [[Python Language]]. Short example (not from the [[Real World]]):",
      "id": "a446f72d9fe91531043ed1ee14654d7a"
    },
    {
      "type": "code",
      "text": "    def makeDec(bar):\n        def _decorator(func):\n            def _wrapper(*args, **kwargs):\n                print \"pre\", func.__name__, bar, args\n                ret = func(bar, *args, **kwargs)\n                print \"post\", func.__name__, bar, args, ret\n                return ret\n            return _wrapper\n        return _decorator",
      "id": "3ebcebf6d089a7d870acef7cf5c9d787"
    },
    {
      "type": "code",
      "text": "    #following is the same as:\n    #def decorated(...): #...code here\n    #decorated = makeDec(42)(decorated)",
      "id": "5ee4ff9be3fe2ecb7d1899a2cacb3972"
    },
    {
      "type": "code",
      "text": "    @makeDec(42)\n    def decorated(a, b):\n        return a * b",
      "id": "1e25333a3212ca25e0f442c8b3fbca89"
    },
    {
      "type": "code",
      "text": "    print decorated(5)\n    #prints \"pre decorated 42 [5]\\npost decorated 42 [5] 210\"",
      "id": "8b925f3a7a392e3d1bbbbb37095b92e1"
    },
    {
      "type": "html",
      "text": "\nThe way I see it, add metaclasses and/or some other hacks to the mix, and you basically have AOP. -- yet another [[Anonymous Donor]]",
      "id": "b376cfecc8a2c00090c49eac06a88a34"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "9dcba7a8b287f68eb0e4f469b8a5d115"
    },
    {
      "type": "html",
      "text": "[[Category Aspect Orientation]]",
      "id": "bbe57371fc616315b16d7b8def541dde"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?AspectOrientedExamples c2.com]",
      "id": "0146b2cd5075f3e2a7c5047077d8dd59"
    }
  ],
  "journal": [
    {
      "date": 1416498974000,
      "id": "025f26e62972a4ebfa78691d37119607",
      "type": "create",
      "item": {
        "title": "Aspect Oriented Examples",
        "story": [
          {
            "type": "html",
            "text": " A query operation. In one aspect, you describe how to delegate the query to other queries. In another aspect you describe the evaluation strategy: early evaluation (i.e. add a member attribute), cached or late evaluation. Writing queries this way allows you to ignore questions of efficiency and concentrate on the function.  A DFD can be useful for viewing the query chain in the absence of any evaluation strategy. -- [[Dave Whipp]]",
            "id": "ce6e350400082a061a55ea31f4666d7f"
          },
          {
            "type": "html",
            "text": " The presentations at [http://www.parc.com/research/csl/projects/aspectj/default.html www.parc.com], which present AOP and AspectJ together. They combine good illustrations with source code and screenshots of, for instance, how AspectJ allowed them to add a debugging \"trace\" to a Java-based videogame. Shows how AspectJ integrates with IDEs, javadoc, etc. -- [[Larry Obrien]]",
            "id": "e6bb3ad79eb22e99c551c864220d7bc4"
          },
          {
            "type": "html",
            "text": " The examples of aspects the slides use are (a) concurrency properties--e.g. whether deadlock occurs is not a property of any one line of code; (b) bandwidth requirements--specifically, they want to treat large (parts of) objects differently from small ones irrespective of any other modularization criteria. They draw analogies with static versus dynamic properties of a wooden bridge, and time/voltage versus frequency spectra in Fourier analysis.  -- [[Dave Harris]]",
            "id": "1c953d6d8cec97bb701bb22aec6615a5"
          },
          {
            "type": "html",
            "text": " A bean aspect.  [http://dev.eclipse.org/viewcvs/indextech.cgi/~checkout~/aspectj-home/doc/progguide/ch03s05.html dev.eclipse.org].  The connection aspect is what you'd want to be looking at.  -- [[Brian Bray]], [[Anonymous Donor]]s",
            "id": "e06fa2259887de95c2f19523771b467b"
          },
          {
            "type": "html",
            "text": " See [http://aosd.net/technology/research.php aosd.net] for a list of projects working on different variations of AOP. -- [[Stanley Knutson]]",
            "id": "14ad0f6fdeb8559b3ffbf1bfe1065b14"
          },
          {
            "type": "html",
            "text": "\nPerhaps we could use an easy, canonical example of why someone might need AOP. Here's my attempt:",
            "id": "48984046b43ac829270af6749ee395fa"
          },
          {
            "type": "html",
            "text": "\nThree months into a project, the user asks for highly specific logging. For some reason, they want to log instantiation of a bunch of different classes, but these classes are spread out across all sorts of domains. You can't use inheritance, since they all inherit from different objects.",
            "id": "3dc68f8822b84e014f72db0027166450"
          },
          {
            "type": "html",
            "text": "\nThe AOP way to solve this is:",
            "id": "124f942b8fc2c105e61a995e07eee88a"
          },
          {
            "type": "html",
            "text": " Write your logging code in a sort-of meta-language.",
            "id": "4c8043004f9c538f8b28070ee948e20a"
          },
          {
            "type": "html",
            "text": " Have your build process include a code-weaver, which parses your meta-language and changes the necessary parts of your source code before compilation.",
            "id": "f984e6326cee9c6291c469b01a2fbff1"
          },
          {
            "type": "html",
            "text": "\nThis way, you've solved the problem without abusing inheritance, and without having to change 50 classes by hand.",
            "id": "633a363c2799baa6190131ad1559bd3e"
          },
          {
            "type": "html",
            "text": "\nThe canonical examples are pretty compelling (logging, synchronization, billing, security access across class boundaries) but there are any number of possibilities. I realized a need for something like this approximately two years ago when developing a S<b></b>martProxy and S<b></b>martSkeleton class for a family of servers but didn't have a name for what I was looking for. These classes would handle dynamic failover completely transparently to the calling code. It worked but involved wrapping and maintaining the interfaces over time which became a real pain.",
            "id": "7d1488c6b25223406aa96e1699dcc288"
          },
          {
            "type": "html",
            "text": "\nWith an aspect, I could have defined before() and after() advice (using AspectJ-speak) that caught and re-routed any failed attempt whatever method was being called, return to the primary server when it was restarted, etc. It would have taken about 20 lines of code compared to 20 lines of code * the number of interfaces * the number of methods in the interfaces. It would move with interface changes over time and support evolution of the advised behavior(perhaps adding rolling back of transactions if no server were available to satisfy the call).",
            "id": "50a5ca8adc5b28c63d2ce466e9ca3120"
          },
          {
            "type": "html",
            "text": "\nAnother example: If you are creating an ASP-based service, you could easily instrument your code to charge certain rates for time spent in value-added code and different rates or nothing at all for time spent in JDK core code. Whatever your billing policy was it could easily change over time with minimal impact.",
            "id": "7a92995df053cc0c31cd4dfd133b50b5"
          },
          {
            "type": "html",
            "text": "-- B<b></b>rianSletten",
            "id": "8567e4781dbac8bf27b65d6dd26a0112"
          },
          {
            "type": "html",
            "text": "\nLet me try to make this a bit more concrete. I have written a text editor which have around 20 \"transformations\" which the user can apply on the selected text. If no text is selected, it often makes sense to apply the \"transformation\" to the current character, word or line.",
            "id": "84b5a7aebdb629c245eac950eba0203a"
          },
          {
            "type": "html",
            "text": "\nSo instead of having each of these transformations start by checking if text is selected, and if not, select the proper unit, I would prefer to put this in as a BEFORE() -- likewise, if text wasn't selected, not text should be selected after the transformation, this however require that some state info can be transferred from my BEFORE() to my AFTER(). Furthermore, the BEFORE()-code somehow needs to know which buffer the transformation is supposed to work on (so that it can select in this buffer).",
            "id": "09e328e9b1493a9b36b83161d06c7ba5"
          },
          {
            "type": "html",
            "text": " This, I'm sorry, this is exactly where OOP and AOP come from and lead to. You shouldn't be repeatedly writing the selection-checking code inside each transformation object, it should be called before you do a transformation. You can do this easily (and cleanly) with the most simple of imperative languages, you do not need a new paradigm. You never did.",
            "id": "7528e8799a61ce5719332333f5939624"
          },
          {
            "type": "html",
            "text": "\nThere are other examples where BEFORE()/AFTER()-code becomes useful. For example, normally the run-loop is running, it gets e.g. some input from the user, which results in a method being invoked on my controller -- this may lead to all sorts of nested method invocations, but whatever method is the first, should \"merge\" the undo stack on exit, so that all the work done, is undone as a single event.",
            "id": "d93452236f4d8ab83c79177487d31485"
          },
          {
            "type": "html",
            "text": "\nThere are many different entries to my controller, so this would require some sort of nesting counter which was incremented in BEFORE() and decremented in AFTER(), and if zero, it would \"merge\" the new entries on the undo stack.",
            "id": "dfcca905c6f38fff32724a9fbcfa938c"
          },
          {
            "type": "html",
            "text": "\nSo all in all I am very hooked on this AOP, but so far I have not figured out if it will ever work in real life (for other than add debug traces to each function or other relatively \"simple\" stuff, which I can more or less already do by defining \"{\" to \"{ BEFORE();\" and \"}\" to \"AFTER;}\" :-)",
            "id": "8a63b473a1706202d9494ebc15ef9240"
          },
          {
            "type": "html",
            "text": "\nSo could something comment on what the expected state of AOP is in e.g. 2010, and if it will ever see its way into existing languages like [[Cee Plus Plus]]? -- [[Anonymous Donor]]",
            "id": "4b0f8d135894f2849580073676415e52"
          },
          {
            "type": "html",
            "text": "\nCould someone provide different examples to clarify AOP?  I am writing from the perspective of one who knows absolutely nothing about AOP but a little about OO patterns.  Having only the above examples, I do not see why AOP is new or advantageous, at least in environments that support inner classes.  Consider the S<b></b>martProxy example above.  Couldn't you do the following (in Java or .NET, anyway)? ",
            "id": "8105c83dcaa4b135ea5ea323307d33c8"
          },
          {
            "type": "html",
            "text": " Declare an abstract class with a public foo() method.  ",
            "id": "d1dd344113b7ddda61402b7919a97968"
          },
          {
            "type": "html",
            "text": " Write the foo() method to be three calls:<br>before(), foohook(), and after(). ",
            "id": "91c59fe460bfbf5821279b3565d56183"
          },
          {
            "type": "html",
            "text": " Make foohook() an overridable method that acts just like foo(), i.e., it has the same signature, and the arguments to foo() are passed through to foohook().",
            "id": "0d597652acc144fba976f78df21a6c52"
          },
          {
            "type": "html",
            "text": " The class contains implementations of before() and after().",
            "id": "95113d3540c27ec0825e9fd722c80a75"
          },
          {
            "type": "html",
            "text": "Then, each time you need something to be wrapped by calls to before() and after(), create an anonymous inner class that subclasses foo's class and overrides foohook().  The override will be wrapped.  [There's a little more work to be done to give foo() a general signature, but I think the point stands.]  ",
            "id": "850911e6b50522e4eeb628d891304fc5"
          },
          {
            "type": "html",
            "text": "\nThus, the problem of \"20 lines of code * the number of interfaces * the number of methods in the interfaces\" doesn't motivate me to investigate AOP, since it seems a solvable problem.",
            "id": "874c168ff16e61a6debe9a955cb45e07"
          },
          {
            "type": "html",
            "text": " You're halfway there; for the rest, rather obviously, \"the only difference is that there is no cat.\"",
            "id": "07cb32c045cb18b9ee53a41b0bf45790"
          },
          {
            "type": "html",
            "text": "\nPerhaps there are subtleties of the deadlock problem, or some other example? -- another [[Anonymous Donor]]",
            "id": "e7c66d4007e41a3ef8bffca02a3ddd3f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9dcba7a8b287f68eb0e4f469b8a5d115"
          },
          {
            "type": "html",
            "text": "This sounds an awful lot decorators (somewhat related to the [[Decorator Pattern]]) in [[Python Language]]. Short example (not from the [[Real World]]):",
            "id": "a446f72d9fe91531043ed1ee14654d7a"
          },
          {
            "type": "code",
            "text": "    def makeDec(bar):\n        def _decorator(func):\n            def _wrapper(*args, **kwargs):\n                print \"pre\", func.__name__, bar, args\n                ret = func(bar, *args, **kwargs)\n                print \"post\", func.__name__, bar, args, ret\n                return ret\n            return _wrapper\n        return _decorator",
            "id": "3ebcebf6d089a7d870acef7cf5c9d787"
          },
          {
            "type": "code",
            "text": "    #following is the same as:\n    #def decorated(...): #...code here\n    #decorated = makeDec(42)(decorated)",
            "id": "5ee4ff9be3fe2ecb7d1899a2cacb3972"
          },
          {
            "type": "code",
            "text": "    @makeDec(42)\n    def decorated(a, b):\n        return a * b",
            "id": "1e25333a3212ca25e0f442c8b3fbca89"
          },
          {
            "type": "code",
            "text": "    print decorated(5)\n    #prints \"pre decorated 42 [5]\\npost decorated 42 [5] 210\"",
            "id": "8b925f3a7a392e3d1bbbbb37095b92e1"
          },
          {
            "type": "html",
            "text": "\nThe way I see it, add metaclasses and/or some other hacks to the mix, and you basically have AOP. -- yet another [[Anonymous Donor]]",
            "id": "b376cfecc8a2c00090c49eac06a88a34"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "9dcba7a8b287f68eb0e4f469b8a5d115"
          },
          {
            "type": "html",
            "text": "[[Category Aspect Orientation]]",
            "id": "bbe57371fc616315b16d7b8def541dde"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?AspectOrientedExamples c2.com]",
            "id": "0146b2cd5075f3e2a7c5047077d8dd59"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707907442568
    }
  ]
}