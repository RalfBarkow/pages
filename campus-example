{
  "title": "Campus Example",
  "story": [
    {
      "type": "html",
      "text": "A schema for a database for a hypothetical campus enrolment and grade tracking system that can be used to compare paradigms, languages, and schema design concepts.  It makes a fairly good example because most people in IT are familiar with campus activities, having gone to college, and thus time is not spent describing how the domain works.",
      "id": "cd627f5f3f008008d8438ffbeb5cbdb1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1859add2931d1c3c70cb6dd1a5756e9e"
    },
    {
      "type": "html",
      "text": "\nDraft Schema:",
      "id": "cae8f2b97f1b9592eb10aee482d4d44d"
    },
    {
      "type": "html",
      "text": "Table:<br>Class",
      "id": "4d4287e41cbec4c76efa092a38750ab4"
    },
    {
      "type": "code",
      "text": "  ------------\n  classID  // autonumber\n  courseRef\n  semesterRef  // a code like YYYYss may be sufficient \n  instructorRef  // FK to People table\n  \n  Table: Courses\n  --------------\n  courseID\n  courseTitle\n  units  // Unit weight of course (use \"1\" for campuses not using this convention)\n  \n  Table: coursesTaken\n  -------------\n  takenID  // autonumber\n  personRef  // FK to People table\n  classRef  // FK to Class table\n  grade\n  \n  Table: People\n  -------------\n  personID\n  formality  // Mr. Mrs. Dr. Etc.\n  FirstMI\n  lastName\n  canTeach  // If can be a teacher\n  contactRef  // FK to Contact\n  \n  Table: Contact  \n  --------------\n  contactID\n  alias    // in case goes by alt name\n  addrLine1\n  addrLine2\n  addrLine3  // See note below about internationalization\n  state         // some disagree with this and zip. See below.\n  zip\n  country\n  phone\n  otherContactInfo  // pager, fax, phone-2, etc.\n  \n  Table: courseCategories  // links courses to categories\n  -----------------------\n  courseRef\n  categRef\n  cC_note\n  \n  Table: Categories  \n  -----------------------\n  categID  // autonumber\n  categTitle\n  categDescrip\n  \n  Table: Prerequisites\n  --------------------\n  courseRef\n  categRef",
      "id": "d4bac3c966f76b26d698da04fff42498"
    },
    {
      "type": "html",
      "text": "\nSee [[Constant Table]] for tips on handling grade codes and other constants.",
      "id": "900ec98610c9d1e352599f21749ee8d6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1859add2931d1c3c70cb6dd1a5756e9e"
    },
    {
      "type": "html",
      "text": "Note: Prerequisites may need something more sophisticated than mere set tables, such as Boolean expressions and minimum grade. This is an issue that needs to be further developed per campus.",
      "id": "c0822fc3aef3d07e2f884be04934fa1d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1859add2931d1c3c70cb6dd1a5756e9e"
    },
    {
      "type": "html",
      "text": "<i>Is this database concerned with the difference between a student (currently) taking a course, and a student who has (already) taken a course? If so, I can't see anything here to help decide that. </i>",
      "id": "384b338074515c0f48451c5b4c90932b"
    },
    {
      "type": "html",
      "text": "\nI assumed nothing goes into the record until course is finished. However, perhaps this can be rolled into an [[Enrolled In]] table of some sorts. Perhaps just use a \"CE\" grade (above) for \"currently enrolled\".",
      "id": "70c1763d3a79ebecbcb417c28baeaeda"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1859add2931d1c3c70cb6dd1a5756e9e"
    },
    {
      "type": "html",
      "text": "<i>Note that the Contact table displays a common [[American Cultural Assumption]] about address formats. Do you really need \"city\", \"state_province\" and \"zipCode\" to be separate fields and not just combined as \"addrLine3\"? If you are allowing \"country\" as a field, you are implying that this database is not restricted to the USA, so I suggest you should allow more flexible addressing </i>",
      "id": "87479890d05b2d5cab67d34adff9b6d0"
    },
    {
      "type": "html",
      "text": "\nThe \"world-friendly\" address issue can get rather involved. But if say 90%+ of all addresses are in the US, then going all-out to address that issue is overkill IMO. I agree with a 3rd address line for such though. But if this campus was in the US, I would have State and Zipcode in there also.",
      "id": "88578a08680317223667738f9c2bc84a"
    },
    {
      "type": "html",
      "text": "Google \"i18n\" for more info on internalization. ",
      "id": "4077072e5fb8fc13cbe756a6f1d27d62"
    },
    {
      "type": "html",
      "text": "(Somebody deleted this section for some reason. I put it back. If you move it somewhere, please include a link here. Please be more careful about deletions.)",
      "id": "e58b095b4a1d1dd3f5487997f4df7b5f"
    },
    {
      "type": "html",
      "text": "\nHaving worked with contact information for student and fundraising software, not having a separate address table is a mistake. Situations where people have campus address (office numbers for the TA's, who are instructors AND students and some times from overseas of course)), off campus addresses, summer addresses, parent addresses and post graduation addresses to name a few. In addition with the proliferation of electronic communications, there is a need for landline phone numbers, cell phone numbers, fax, email etc. My solution would look more like (my comments in parens):",
      "id": "60cfb9183b668f44b93bbbeb4d7f5baa"
    },
    {
      "type": "html",
      "text": "\nADDRESSES",
      "id": "fd862798e3c8e46b06883ff66517f12a"
    },
    {
      "type": "html",
      "text": "---",
      "id": "a63354e6ba6cde0715963807a29cf106"
    },
    {
      "type": "code",
      "text": "  address_id (int, pk)\n  entity_id (int, fk to entity link table)\n  Addresstypecode (int fk to addresstype table)\n  Address Field (large text/char field, I have seen some horrendous addresses in Wales!)\n  Postal Code (could be US zip code or other code)\n  Country code\n  address begin date\n  address end date\n  Special Handling Notes (memo field)",
      "id": "b2652bd4dbe39154ccedaff93d8682f3"
    },
    {
      "type": "html",
      "text": "\nCONTACTS (for a lack of a better term)",
      "id": "975fab151f9504e08eecf6a14eea2aa2"
    },
    {
      "type": "html",
      "text": "---",
      "id": "a63354e6ba6cde0715963807a29cf106"
    },
    {
      "type": "code",
      "text": "  comm_id (pk)\n  entity_id (int, fk to entity link table)\n  Contacttypecode (fk link to contact types table)\n  landline (could be phone or fax)\n  internet (usually email)",
      "id": "2893f0831311f37fc30df70307029af3"
    },
    {
      "type": "html",
      "text": "\nRelationships for the entities to the addresses (student or faculty) would be many-to-many (e.g. students and faculty can be married to each other or \nshare lodging. This may seem like over kill but I have seen horribly normalized databases which have forced bizarre workarounds in code. Or worse people starting shadow database (often in spreadsheets) to track what the database system cannot. -- Pedro Lopez",
      "id": "861eded341234d952b3150dc3976c173"
    },
    {
      "type": "html",
      "text": "\nI don't see the need for a separate record for each contact device (cell, email, etc.). Could you please clarify that? In addition to the common phone and email columns, I generally have a big \"otherContact\" text column with for open-ended descriptions of all the other doodads that people communicate with these days. We don't need to create a dedicated column for each one, and a row for each one is overkill IMO. An example dump from a given contact record may resemble:",
      "id": "0719c5ff22674406c267529991f93d41"
    },
    {
      "type": "html",
      "text": "Day Phone:<br>\"123-555-1234\"",
      "id": "90a6b8efc9d2b0731e7acab9b782a85a"
    },
    {
      "type": "html",
      "text": "Evening Phone:<br>\"123-555-2837\"",
      "id": "408f669f110f48e8d3d34caaaf3601cb"
    },
    {
      "type": "html",
      "text": "Email:<br>\"susie33@aol.com\"",
      "id": "a0fd32f6465bc17a364895b224e914ab"
    },
    {
      "type": "html",
      "text": "Other Contact:<br>\"Cell: 543-555-9292, beeper: 777-555-3221, Fax: ... IM: blah...\"",
      "id": "98a743d4f56c1c1f0f9342b8bc76207c"
    },
    {
      "type": "html",
      "text": "Keep in mind there may be a separate contact record for Susie's parent(s) and/or other addresses. But they don't necessarily have to populate phone numbers in them.",
      "id": "33e7f999875be11c2f217abe0180b3e6"
    },
    {
      "type": "html",
      "text": "<i>Then, what happens if the boss asks for a list of all of the contacts with a Fax number, to send out a broadcast fax (just as an example)? You'd have to query the database for \"Other Contact\" LIKE \"%Fax:%\", hoping that everyone spelled it right, then parse it out. And then later, after the boss gets a bunch of complaints, he or she tells you to add another field onto each record so that students can opt out of receiving broadcast faxes but still keep their number in for solicited faxes. It'd be far easier if they started as separate records, or at least, if your database supports an array of records field type, to use that.</i>",
      "id": "91b625ada2c4ab1c78766d2e5aa2be11"
    },
    {
      "type": "html",
      "text": " A lot of different \"what-if's\" can pop up. The decision about which path to take is similar to \"investment trees\" which use probability trees to make the best decision based on given probabilities of future events. These issues are common in \"[[Yag Ni]] fights\". (Related: [[Decision Math And Yagni]]) My experience would say not to make a dedicated \"slot\" for it unless there's a reasonable chance of it being needed, such as automated faxing or paging etc. having happened in the past. -t",
      "id": "45b863af1ba3a4ce0fe86d0c64c2f664"
    },
    {
      "type": "html",
      "text": "\nRelated: [[Party Pattern]] (Perhaps move this there, or to the renamed [[Contact And Address Models]])",
      "id": "dcb7d73106f4e34b3236771b047f4f8a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1859add2931d1c3c70cb6dd1a5756e9e"
    },
    {
      "type": "html",
      "text": "\nRe: semesterRef column.",
      "id": "22f56e616f1f904662a88391a6c33909"
    },
    {
      "type": "html",
      "text": "<i>probably needs better code, like 2003fall or 2004spring [verbose is not bad]</i>",
      "id": "41ae0f09d5a3c774d85a8e373cb2e28a"
    },
    {
      "type": "html",
      "text": "\nBut it might not sort properly. Perhaps we should have another table to define the full names, or just use a library function to expand it to English.",
      "id": "8e707ee124c48184e11b5c8d52d09d10"
    },
    {
      "type": "html",
      "text": "<i>On the other hand, you could simply use a sorting function suited to the data.</i>",
      "id": "de40a622e7b39a1df3f8971d8fd22d36"
    },
    {
      "type": "html",
      "text": "\nThe existing crop of RDBMS generally don't permit that and it is wasteful to do it in the app IMO. But, it is not outside of relational theory to have defined relational functions. Perhaps if we split it into Year and Semester we could write a trigger to automatically fill a sorting code. But anyhow, I think the data is easier to work with if we keep it one code, at least for the key. Perhaps we can do this:",
      "id": "e59f6ea5662722f2fd502e2e55ef87ef"
    },
    {
      "type": "html",
      "text": "Table:<br>Semesters",
      "id": "635060624b2586f3811fefd8b7b9284a"
    },
    {
      "type": "code",
      "text": "  -----------------\n  semesterID  // auto-gen integer or shortcut code like YYYYS\n  semYear  // Ex: \"2002\"\n  semSequence  // 1=winter, 2=spring, etc.\n  semDescript  // Ex: \"Spring, 2002\"",
      "id": "b19156737011e18f49712ea28dfcc91c"
    },
    {
      "type": "html",
      "text": "\nThis way we don't have to try to make a code that is both super-readable yet computer-friendly. Note that we may later add semester-related attributes such as studentCount, revenue, etc.",
      "id": "c178e2ec7ea118abdd91a0801423d7b1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1859add2931d1c3c70cb6dd1a5756e9e"
    },
    {
      "type": "html",
      "text": "\nOn comp.object, somebody doing OO modeling against a similar example suggested having a Transcript object and have GPA be a method of Transcript.",
      "id": "d3a95199b258e6f61bb8ef01ce821f56"
    },
    {
      "type": "html",
      "text": "<i>I find that kind of icky. For one, you have to think of possible associations to figure out what object/class the GPA is attached to. It could also be attached to a Student object, no? Second, what if we only wanted to calculate GPA for a year or so? Or GPA for a group of students for research? In \"pure\" OO we would have to code up some manual iteration over the students or transcripts. I would rather do a query than instantiate  each student just to gather their GPA. (Note that we need to do a summary of a summary in order to avoid weighting some students more than others. Although SQL often does not handle double-level summaries very well, a \"good\" relational language could. [[Sql Flaws]]. We may also need a [[Grade Value]] table to translate grades into numeric values.)</i>",
      "id": "a8da0695fb7dfc4e59d01b21f3c280d5"
    },
    {
      "type": "html",
      "text": "\nStudent would presumably have a getTranscript() method, so we could say student.getTranscript().getGPA() to get a student's GPA; if we wanted, we could define a [[Law Of Demeter]]-style getGPA() convenience method on Student which got the transcript and asked it for the GPA. For time-restricted GPAs, we could have a method on Transcript to get a sub-transcript for a particular year (or date range, or set of courses, or whatever), and then just ask that for its GPA. For a group of students, i'd put them in a list, then, since i'm using the [[Python Language]], say:",
      "id": "bb6a2cea94f15a2c99756c5597315045"
    },
    {
      "type": "html",
      "text": "totalGPA = reduce( lambda a, b:<br>a + b, map( Student.getGPA, students ) )",
      "id": "4fe593875fae6fa767d17292aacb4385"
    },
    {
      "type": "html",
      "text": "\nIf this code runs on a different machine to the one on which the objects live, we have a [[Remote Iteration Issue]] here. Therefore, it doesn't. Machines other than the object-home which which to know about GPA totals have to remotely call GPA-totalling procedure on the object-home.",
      "id": "193dff69ecc4381ab2287ee28b45f276"
    },
    {
      "type": "html",
      "text": "<i>You then end up reinventing a query system. We are back to the classic [[Reinventing The Database In Application]] [[Holy War]].</i>",
      "id": "b30deddcfe801cbe8044cdeeb6c692dd"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1859add2931d1c3c70cb6dd1a5756e9e"
    },
    {
      "type": "html",
      "text": "\n2 things:  people have roles, such as teacher, student, etc. A canTeach attribute is a partial solution. Also, college students often have 2 addresses, so this could be captured too. Fun.",
      "id": "b7be96a8c07b7cbd08c366efcd34b108"
    },
    {
      "type": "html",
      "text": "<i>Do you have a specific requirement scenario in mind where \"canTeach\" is insufficient? Also, if people need a second address, then just add a second reference to the People table (\"contactRef2\"). That is a relatively minor addition. A more complicated change requirement would be a request for open-ended quantities of addresses (contacts). But I don't see a realistic need for that so far.</i>",
      "id": "f2a5b2ff9a954fb0791c82cc450f0fb2"
    },
    {
      "type": "html",
      "text": "\nYes, this seems to be a really lightweight example here. Perhaps another 1st or 2nd year CS student trying to get some help on an assignment?",
      "id": "dfe031959912215922e7982f2455d5ce"
    },
    {
      "type": "html",
      "text": "<i>You are welcome to add requirements, as addendums perhaps, to it. The reasons I suggest addendums so that we can perhaps do some [[Code Change Impact Analysis]] on it. Note that if we make examples too involved, then perhaps fewer readers can get involved. It is the classic tradeoff between realism and grokability time. Further, I think 2 addresses is plenty sufficient for say 99 percent of the students. I suggest perhaps having a large \"notes\" column in the Student or People table to explain any odd circumstances and/or extra addresses. It is not practical to fully automate such oddities IMO. [[Tail Wags Dog]].</i>",
      "id": "efde63d282398c3f781de58f8b16aa65"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1859add2931d1c3c70cb6dd1a5756e9e"
    },
    {
      "type": "html",
      "text": "\nI am curious. How many would rather split the People table into say Students and Faculty, and why?",
      "id": "563660bf2712c0e746ac9f9ad8acf742"
    },
    {
      "type": "html",
      "text": "<i>I would not. I would keep People but add some kind of Roles table. An entry in People can have multiple Roles. Instead of simple canTeach flag, there'd be a relation. That is, if there is a requirement that leads to that complexity.</i> --[[Steven Newton]]",
      "id": "1cf7aea3b5b0373b637c1ea4bdf49d9a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1859add2931d1c3c70cb6dd1a5756e9e"
    },
    {
      "type": "html",
      "text": "\nIf somebody wishes to turn this into a requirements document, then one can generally take each of the entities involved and apply this patter to them:",
      "id": "bcf9a35c908f0429102878d95fb1e43c"
    },
    {
      "type": "html",
      "text": "\nFor entity X, we want to be able to",
      "id": "0ce45e06b94c390051c08723665824c1"
    },
    {
      "type": "html",
      "text": " add a new X",
      "id": "72d2a508db401bd9c4fedc94db9a933d"
    },
    {
      "type": "html",
      "text": " list X's using [[Query By Example]]",
      "id": "4037c4eeea2db80ca302d38339d7b41b"
    },
    {
      "type": "html",
      "text": " change an X as selected by list in #2",
      "id": "706172e13cfd0376ae09eac397972833"
    },
    {
      "type": "html",
      "text": " delete an X as selected by list in #2, after preview",
      "id": "4f239cc3013ab5d754bf157990cbef71"
    },
    {
      "type": "html",
      "text": "\nIn other words, typical [[Crud Screen]]s. For the many-to-many tables, it would be something like, \"Be able to assign or unassign an X to a Y where X and Y are the two entities being cross-linked. Display descriptions in addition to ID's.",
      "id": "1aeed8a9e2700f1bde8daa1d92ed6d1c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1859add2931d1c3c70cb6dd1a5756e9e"
    },
    {
      "type": "html",
      "text": "\nSuggested Use Cases",
      "id": "2d72968c5fbefb3999c840751954b326"
    },
    {
      "type": "html",
      "text": " Enter student grades (at end of quarter/semester)",
      "id": "5d94877914775467eb065cdb4679ed0f"
    },
    {
      "type": "html",
      "text": " Print/display report cards per student",
      "id": "2b68bce2d22ec892c87f5a69d86b027f"
    },
    {
      "type": "html",
      "text": " Print/display transcripts per student and optionally all students for a quarter/semester",
      "id": "29f3d05c4a39fa03d94b0d88fa9714dc"
    },
    {
      "type": "html",
      "text": " Print/display grades per class",
      "id": "a2b1d2f921755a9608bb78f4ec2b22f1"
    },
    {
      "type": "html",
      "text": " Remove student grades with audit trail",
      "id": "5578c6bbb25ab6eb6d5f9dfda137c026"
    },
    {
      "type": "html",
      "text": " Revise student grades with audit trail",
      "id": "d4f92a452fec7ade4f7f9652c55f9511"
    },
    {
      "type": "html",
      "text": " Reassign student to new class (e.g. student drops 8am class for 2pm class)",
      "id": "16a3942812f46d1f4426a9b737988ac8"
    },
    {
      "type": "html",
      "text": " Change student name (e.g. in case of marriage or adoption) with audit trail",
      "id": "f7a4c15b19499dc20d48bd2f1b0783cc"
    },
    {
      "type": "html",
      "text": " Change faculty name with audit trail",
      "id": "22c896885fe8c4bfd5d20d46465e8a76"
    },
    {
      "type": "html",
      "text": " Class load report per instructor (important to make sure instructors don't end up too many students per week)",
      "id": "226d1ac46ea0d49f5029c2aa0e920019"
    },
    {
      "type": "html",
      "text": " Class load per student (in case overloaded students need special permission, or student with a low work load lose financial aid or scholarships)",
      "id": "cd0741950f9e2ac6dbd27f2006b01cd5"
    },
    {
      "type": "html",
      "text": "-[[Anonymous Donor]]",
      "id": "113615f6c6c0d5d24b25fff8ef92a232"
    },
    {
      "type": "html",
      "text": "\nNotice that there is a lot of repetition here. Generally with each entity (class, student, grade, etc.) one will want to add, change, delete, list, search, and print/report on just about every one to some degree. Thus, it's best to have a framework that provides most of that for us with relatively little coding. Related: [[Database Verbs]]. One could perhaps describe the requirements as such:",
      "id": "47c42bfcdd4a75adb7d29f1a9da4a494"
    },
    {
      "type": "code",
      "text": "  entities = list{students, teachers, courses, classes, grades, degrees, admin, etc.}\n  for each entity in entities perform: {\n    Add\n    Change\n    Delete\n    List\n    Sort\n    Search\n    Print\n    Summarize\n    Audit changes (log)\n    Secure/verify usage\n  } ",
      "id": "be047f324a435f33fdcf3a77fd07dfd4"
    },
    {
      "type": "html",
      "text": "\"Summarize\" could get combinationally tricky because one may want to see each of the entities from each of the other entities' perspective, such as grades per student, grades per teacher, grades per course, classes per student etc. Security may also requiring dealing with a lot of interweaving. This is typical with CRUD applications: future reports, views, etc. often cannot be anticipated up front. One often starts off with the basics so that each entity is <i>at least</i> searchable and editable to a minimum degree, and then tune or add to it for work-flow convenience per department, etc. One department or user may end up saying, \"I have to visit 4 different screens (entities) for these kinds of transactions, which I do a lot of. If you can combine such and such information onto one screen, then it would save me time.\" Some of these requests we may know up front, some not. But at least having the <i>minimum</i> set for each entity allows work to get done, just not necessarily in an optimized way. Everything is editable. -t",
      "id": "12b1f8a233128aa134de76ae8a47d101"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1859add2931d1c3c70cb6dd1a5756e9e"
    },
    {
      "type": "html",
      "text": "See also: [[The Top Challenge]]",
      "id": "36ec8b1513c9eaa16fd028900556ab81"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1859add2931d1c3c70cb6dd1a5756e9e"
    },
    {
      "type": "html",
      "text": "[[Category Example]]",
      "id": "9d09383870cd11b9a7f71c9d6a66552e"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CampusExample c2.com]",
      "id": "c6e2d3e1167b455c6f0e4103bcfc8977"
    }
  ],
  "journal": [
    {
      "date": 1412765150000,
      "id": "d6b9daaaedd79f51b851295573ba703f",
      "type": "create",
      "item": {
        "title": "Campus Example",
        "story": [
          {
            "type": "html",
            "text": "A schema for a database for a hypothetical campus enrolment and grade tracking system that can be used to compare paradigms, languages, and schema design concepts.  It makes a fairly good example because most people in IT are familiar with campus activities, having gone to college, and thus time is not spent describing how the domain works.",
            "id": "cd627f5f3f008008d8438ffbeb5cbdb1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1859add2931d1c3c70cb6dd1a5756e9e"
          },
          {
            "type": "html",
            "text": "\nDraft Schema:",
            "id": "cae8f2b97f1b9592eb10aee482d4d44d"
          },
          {
            "type": "html",
            "text": "Table:<br>Class",
            "id": "4d4287e41cbec4c76efa092a38750ab4"
          },
          {
            "type": "code",
            "text": "  ------------\n  classID  // autonumber\n  courseRef\n  semesterRef  // a code like YYYYss may be sufficient \n  instructorRef  // FK to People table\n  \n  Table: Courses\n  --------------\n  courseID\n  courseTitle\n  units  // Unit weight of course (use \"1\" for campuses not using this convention)\n  \n  Table: coursesTaken\n  -------------\n  takenID  // autonumber\n  personRef  // FK to People table\n  classRef  // FK to Class table\n  grade\n  \n  Table: People\n  -------------\n  personID\n  formality  // Mr. Mrs. Dr. Etc.\n  FirstMI\n  lastName\n  canTeach  // If can be a teacher\n  contactRef  // FK to Contact\n  \n  Table: Contact  \n  --------------\n  contactID\n  alias    // in case goes by alt name\n  addrLine1\n  addrLine2\n  addrLine3  // See note below about internationalization\n  state         // some disagree with this and zip. See below.\n  zip\n  country\n  phone\n  otherContactInfo  // pager, fax, phone-2, etc.\n  \n  Table: courseCategories  // links courses to categories\n  -----------------------\n  courseRef\n  categRef\n  cC_note\n  \n  Table: Categories  \n  -----------------------\n  categID  // autonumber\n  categTitle\n  categDescrip\n  \n  Table: Prerequisites\n  --------------------\n  courseRef\n  categRef",
            "id": "d4bac3c966f76b26d698da04fff42498"
          },
          {
            "type": "html",
            "text": "\nSee [[Constant Table]] for tips on handling grade codes and other constants.",
            "id": "900ec98610c9d1e352599f21749ee8d6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1859add2931d1c3c70cb6dd1a5756e9e"
          },
          {
            "type": "html",
            "text": "Note: Prerequisites may need something more sophisticated than mere set tables, such as Boolean expressions and minimum grade. This is an issue that needs to be further developed per campus.",
            "id": "c0822fc3aef3d07e2f884be04934fa1d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1859add2931d1c3c70cb6dd1a5756e9e"
          },
          {
            "type": "html",
            "text": "<i>Is this database concerned with the difference between a student (currently) taking a course, and a student who has (already) taken a course? If so, I can't see anything here to help decide that. </i>",
            "id": "384b338074515c0f48451c5b4c90932b"
          },
          {
            "type": "html",
            "text": "\nI assumed nothing goes into the record until course is finished. However, perhaps this can be rolled into an [[Enrolled In]] table of some sorts. Perhaps just use a \"CE\" grade (above) for \"currently enrolled\".",
            "id": "70c1763d3a79ebecbcb417c28baeaeda"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1859add2931d1c3c70cb6dd1a5756e9e"
          },
          {
            "type": "html",
            "text": "<i>Note that the Contact table displays a common [[American Cultural Assumption]] about address formats. Do you really need \"city\", \"state_province\" and \"zipCode\" to be separate fields and not just combined as \"addrLine3\"? If you are allowing \"country\" as a field, you are implying that this database is not restricted to the USA, so I suggest you should allow more flexible addressing </i>",
            "id": "87479890d05b2d5cab67d34adff9b6d0"
          },
          {
            "type": "html",
            "text": "\nThe \"world-friendly\" address issue can get rather involved. But if say 90%+ of all addresses are in the US, then going all-out to address that issue is overkill IMO. I agree with a 3rd address line for such though. But if this campus was in the US, I would have State and Zipcode in there also.",
            "id": "88578a08680317223667738f9c2bc84a"
          },
          {
            "type": "html",
            "text": "Google \"i18n\" for more info on internalization. ",
            "id": "4077072e5fb8fc13cbe756a6f1d27d62"
          },
          {
            "type": "html",
            "text": "(Somebody deleted this section for some reason. I put it back. If you move it somewhere, please include a link here. Please be more careful about deletions.)",
            "id": "e58b095b4a1d1dd3f5487997f4df7b5f"
          },
          {
            "type": "html",
            "text": "\nHaving worked with contact information for student and fundraising software, not having a separate address table is a mistake. Situations where people have campus address (office numbers for the TA's, who are instructors AND students and some times from overseas of course)), off campus addresses, summer addresses, parent addresses and post graduation addresses to name a few. In addition with the proliferation of electronic communications, there is a need for landline phone numbers, cell phone numbers, fax, email etc. My solution would look more like (my comments in parens):",
            "id": "60cfb9183b668f44b93bbbeb4d7f5baa"
          },
          {
            "type": "html",
            "text": "\nADDRESSES",
            "id": "fd862798e3c8e46b06883ff66517f12a"
          },
          {
            "type": "html",
            "text": "---",
            "id": "a63354e6ba6cde0715963807a29cf106"
          },
          {
            "type": "code",
            "text": "  address_id (int, pk)\n  entity_id (int, fk to entity link table)\n  Addresstypecode (int fk to addresstype table)\n  Address Field (large text/char field, I have seen some horrendous addresses in Wales!)\n  Postal Code (could be US zip code or other code)\n  Country code\n  address begin date\n  address end date\n  Special Handling Notes (memo field)",
            "id": "b2652bd4dbe39154ccedaff93d8682f3"
          },
          {
            "type": "html",
            "text": "\nCONTACTS (for a lack of a better term)",
            "id": "975fab151f9504e08eecf6a14eea2aa2"
          },
          {
            "type": "html",
            "text": "---",
            "id": "a63354e6ba6cde0715963807a29cf106"
          },
          {
            "type": "code",
            "text": "  comm_id (pk)\n  entity_id (int, fk to entity link table)\n  Contacttypecode (fk link to contact types table)\n  landline (could be phone or fax)\n  internet (usually email)",
            "id": "2893f0831311f37fc30df70307029af3"
          },
          {
            "type": "html",
            "text": "\nRelationships for the entities to the addresses (student or faculty) would be many-to-many (e.g. students and faculty can be married to each other or \nshare lodging. This may seem like over kill but I have seen horribly normalized databases which have forced bizarre workarounds in code. Or worse people starting shadow database (often in spreadsheets) to track what the database system cannot. -- Pedro Lopez",
            "id": "861eded341234d952b3150dc3976c173"
          },
          {
            "type": "html",
            "text": "\nI don't see the need for a separate record for each contact device (cell, email, etc.). Could you please clarify that? In addition to the common phone and email columns, I generally have a big \"otherContact\" text column with for open-ended descriptions of all the other doodads that people communicate with these days. We don't need to create a dedicated column for each one, and a row for each one is overkill IMO. An example dump from a given contact record may resemble:",
            "id": "0719c5ff22674406c267529991f93d41"
          },
          {
            "type": "html",
            "text": "Day Phone:<br>\"123-555-1234\"",
            "id": "90a6b8efc9d2b0731e7acab9b782a85a"
          },
          {
            "type": "html",
            "text": "Evening Phone:<br>\"123-555-2837\"",
            "id": "408f669f110f48e8d3d34caaaf3601cb"
          },
          {
            "type": "html",
            "text": "Email:<br>\"susie33@aol.com\"",
            "id": "a0fd32f6465bc17a364895b224e914ab"
          },
          {
            "type": "html",
            "text": "Other Contact:<br>\"Cell: 543-555-9292, beeper: 777-555-3221, Fax: ... IM: blah...\"",
            "id": "98a743d4f56c1c1f0f9342b8bc76207c"
          },
          {
            "type": "html",
            "text": "Keep in mind there may be a separate contact record for Susie's parent(s) and/or other addresses. But they don't necessarily have to populate phone numbers in them.",
            "id": "33e7f999875be11c2f217abe0180b3e6"
          },
          {
            "type": "html",
            "text": "<i>Then, what happens if the boss asks for a list of all of the contacts with a Fax number, to send out a broadcast fax (just as an example)? You'd have to query the database for \"Other Contact\" LIKE \"%Fax:%\", hoping that everyone spelled it right, then parse it out. And then later, after the boss gets a bunch of complaints, he or she tells you to add another field onto each record so that students can opt out of receiving broadcast faxes but still keep their number in for solicited faxes. It'd be far easier if they started as separate records, or at least, if your database supports an array of records field type, to use that.</i>",
            "id": "91b625ada2c4ab1c78766d2e5aa2be11"
          },
          {
            "type": "html",
            "text": " A lot of different \"what-if's\" can pop up. The decision about which path to take is similar to \"investment trees\" which use probability trees to make the best decision based on given probabilities of future events. These issues are common in \"[[Yag Ni]] fights\". (Related: [[Decision Math And Yagni]]) My experience would say not to make a dedicated \"slot\" for it unless there's a reasonable chance of it being needed, such as automated faxing or paging etc. having happened in the past. -t",
            "id": "45b863af1ba3a4ce0fe86d0c64c2f664"
          },
          {
            "type": "html",
            "text": "\nRelated: [[Party Pattern]] (Perhaps move this there, or to the renamed [[Contact And Address Models]])",
            "id": "dcb7d73106f4e34b3236771b047f4f8a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1859add2931d1c3c70cb6dd1a5756e9e"
          },
          {
            "type": "html",
            "text": "\nRe: semesterRef column.",
            "id": "22f56e616f1f904662a88391a6c33909"
          },
          {
            "type": "html",
            "text": "<i>probably needs better code, like 2003fall or 2004spring [verbose is not bad]</i>",
            "id": "41ae0f09d5a3c774d85a8e373cb2e28a"
          },
          {
            "type": "html",
            "text": "\nBut it might not sort properly. Perhaps we should have another table to define the full names, or just use a library function to expand it to English.",
            "id": "8e707ee124c48184e11b5c8d52d09d10"
          },
          {
            "type": "html",
            "text": "<i>On the other hand, you could simply use a sorting function suited to the data.</i>",
            "id": "de40a622e7b39a1df3f8971d8fd22d36"
          },
          {
            "type": "html",
            "text": "\nThe existing crop of RDBMS generally don't permit that and it is wasteful to do it in the app IMO. But, it is not outside of relational theory to have defined relational functions. Perhaps if we split it into Year and Semester we could write a trigger to automatically fill a sorting code. But anyhow, I think the data is easier to work with if we keep it one code, at least for the key. Perhaps we can do this:",
            "id": "e59f6ea5662722f2fd502e2e55ef87ef"
          },
          {
            "type": "html",
            "text": "Table:<br>Semesters",
            "id": "635060624b2586f3811fefd8b7b9284a"
          },
          {
            "type": "code",
            "text": "  -----------------\n  semesterID  // auto-gen integer or shortcut code like YYYYS\n  semYear  // Ex: \"2002\"\n  semSequence  // 1=winter, 2=spring, etc.\n  semDescript  // Ex: \"Spring, 2002\"",
            "id": "b19156737011e18f49712ea28dfcc91c"
          },
          {
            "type": "html",
            "text": "\nThis way we don't have to try to make a code that is both super-readable yet computer-friendly. Note that we may later add semester-related attributes such as studentCount, revenue, etc.",
            "id": "c178e2ec7ea118abdd91a0801423d7b1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1859add2931d1c3c70cb6dd1a5756e9e"
          },
          {
            "type": "html",
            "text": "\nOn comp.object, somebody doing OO modeling against a similar example suggested having a Transcript object and have GPA be a method of Transcript.",
            "id": "d3a95199b258e6f61bb8ef01ce821f56"
          },
          {
            "type": "html",
            "text": "<i>I find that kind of icky. For one, you have to think of possible associations to figure out what object/class the GPA is attached to. It could also be attached to a Student object, no? Second, what if we only wanted to calculate GPA for a year or so? Or GPA for a group of students for research? In \"pure\" OO we would have to code up some manual iteration over the students or transcripts. I would rather do a query than instantiate  each student just to gather their GPA. (Note that we need to do a summary of a summary in order to avoid weighting some students more than others. Although SQL often does not handle double-level summaries very well, a \"good\" relational language could. [[Sql Flaws]]. We may also need a [[Grade Value]] table to translate grades into numeric values.)</i>",
            "id": "a8da0695fb7dfc4e59d01b21f3c280d5"
          },
          {
            "type": "html",
            "text": "\nStudent would presumably have a getTranscript() method, so we could say student.getTranscript().getGPA() to get a student's GPA; if we wanted, we could define a [[Law Of Demeter]]-style getGPA() convenience method on Student which got the transcript and asked it for the GPA. For time-restricted GPAs, we could have a method on Transcript to get a sub-transcript for a particular year (or date range, or set of courses, or whatever), and then just ask that for its GPA. For a group of students, i'd put them in a list, then, since i'm using the [[Python Language]], say:",
            "id": "bb6a2cea94f15a2c99756c5597315045"
          },
          {
            "type": "html",
            "text": "totalGPA = reduce( lambda a, b:<br>a + b, map( Student.getGPA, students ) )",
            "id": "4fe593875fae6fa767d17292aacb4385"
          },
          {
            "type": "html",
            "text": "\nIf this code runs on a different machine to the one on which the objects live, we have a [[Remote Iteration Issue]] here. Therefore, it doesn't. Machines other than the object-home which which to know about GPA totals have to remotely call GPA-totalling procedure on the object-home.",
            "id": "193dff69ecc4381ab2287ee28b45f276"
          },
          {
            "type": "html",
            "text": "<i>You then end up reinventing a query system. We are back to the classic [[Reinventing The Database In Application]] [[Holy War]].</i>",
            "id": "b30deddcfe801cbe8044cdeeb6c692dd"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1859add2931d1c3c70cb6dd1a5756e9e"
          },
          {
            "type": "html",
            "text": "\n2 things:  people have roles, such as teacher, student, etc. A canTeach attribute is a partial solution. Also, college students often have 2 addresses, so this could be captured too. Fun.",
            "id": "b7be96a8c07b7cbd08c366efcd34b108"
          },
          {
            "type": "html",
            "text": "<i>Do you have a specific requirement scenario in mind where \"canTeach\" is insufficient? Also, if people need a second address, then just add a second reference to the People table (\"contactRef2\"). That is a relatively minor addition. A more complicated change requirement would be a request for open-ended quantities of addresses (contacts). But I don't see a realistic need for that so far.</i>",
            "id": "f2a5b2ff9a954fb0791c82cc450f0fb2"
          },
          {
            "type": "html",
            "text": "\nYes, this seems to be a really lightweight example here. Perhaps another 1st or 2nd year CS student trying to get some help on an assignment?",
            "id": "dfe031959912215922e7982f2455d5ce"
          },
          {
            "type": "html",
            "text": "<i>You are welcome to add requirements, as addendums perhaps, to it. The reasons I suggest addendums so that we can perhaps do some [[Code Change Impact Analysis]] on it. Note that if we make examples too involved, then perhaps fewer readers can get involved. It is the classic tradeoff between realism and grokability time. Further, I think 2 addresses is plenty sufficient for say 99 percent of the students. I suggest perhaps having a large \"notes\" column in the Student or People table to explain any odd circumstances and/or extra addresses. It is not practical to fully automate such oddities IMO. [[Tail Wags Dog]].</i>",
            "id": "efde63d282398c3f781de58f8b16aa65"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1859add2931d1c3c70cb6dd1a5756e9e"
          },
          {
            "type": "html",
            "text": "\nI am curious. How many would rather split the People table into say Students and Faculty, and why?",
            "id": "563660bf2712c0e746ac9f9ad8acf742"
          },
          {
            "type": "html",
            "text": "<i>I would not. I would keep People but add some kind of Roles table. An entry in People can have multiple Roles. Instead of simple canTeach flag, there'd be a relation. That is, if there is a requirement that leads to that complexity.</i> --[[Steven Newton]]",
            "id": "1cf7aea3b5b0373b637c1ea4bdf49d9a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1859add2931d1c3c70cb6dd1a5756e9e"
          },
          {
            "type": "html",
            "text": "\nIf somebody wishes to turn this into a requirements document, then one can generally take each of the entities involved and apply this patter to them:",
            "id": "bcf9a35c908f0429102878d95fb1e43c"
          },
          {
            "type": "html",
            "text": "\nFor entity X, we want to be able to",
            "id": "0ce45e06b94c390051c08723665824c1"
          },
          {
            "type": "html",
            "text": " add a new X",
            "id": "72d2a508db401bd9c4fedc94db9a933d"
          },
          {
            "type": "html",
            "text": " list X's using [[Query By Example]]",
            "id": "4037c4eeea2db80ca302d38339d7b41b"
          },
          {
            "type": "html",
            "text": " change an X as selected by list in #2",
            "id": "706172e13cfd0376ae09eac397972833"
          },
          {
            "type": "html",
            "text": " delete an X as selected by list in #2, after preview",
            "id": "4f239cc3013ab5d754bf157990cbef71"
          },
          {
            "type": "html",
            "text": "\nIn other words, typical [[Crud Screen]]s. For the many-to-many tables, it would be something like, \"Be able to assign or unassign an X to a Y where X and Y are the two entities being cross-linked. Display descriptions in addition to ID's.",
            "id": "1aeed8a9e2700f1bde8daa1d92ed6d1c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1859add2931d1c3c70cb6dd1a5756e9e"
          },
          {
            "type": "html",
            "text": "\nSuggested Use Cases",
            "id": "2d72968c5fbefb3999c840751954b326"
          },
          {
            "type": "html",
            "text": " Enter student grades (at end of quarter/semester)",
            "id": "5d94877914775467eb065cdb4679ed0f"
          },
          {
            "type": "html",
            "text": " Print/display report cards per student",
            "id": "2b68bce2d22ec892c87f5a69d86b027f"
          },
          {
            "type": "html",
            "text": " Print/display transcripts per student and optionally all students for a quarter/semester",
            "id": "29f3d05c4a39fa03d94b0d88fa9714dc"
          },
          {
            "type": "html",
            "text": " Print/display grades per class",
            "id": "a2b1d2f921755a9608bb78f4ec2b22f1"
          },
          {
            "type": "html",
            "text": " Remove student grades with audit trail",
            "id": "5578c6bbb25ab6eb6d5f9dfda137c026"
          },
          {
            "type": "html",
            "text": " Revise student grades with audit trail",
            "id": "d4f92a452fec7ade4f7f9652c55f9511"
          },
          {
            "type": "html",
            "text": " Reassign student to new class (e.g. student drops 8am class for 2pm class)",
            "id": "16a3942812f46d1f4426a9b737988ac8"
          },
          {
            "type": "html",
            "text": " Change student name (e.g. in case of marriage or adoption) with audit trail",
            "id": "f7a4c15b19499dc20d48bd2f1b0783cc"
          },
          {
            "type": "html",
            "text": " Change faculty name with audit trail",
            "id": "22c896885fe8c4bfd5d20d46465e8a76"
          },
          {
            "type": "html",
            "text": " Class load report per instructor (important to make sure instructors don't end up too many students per week)",
            "id": "226d1ac46ea0d49f5029c2aa0e920019"
          },
          {
            "type": "html",
            "text": " Class load per student (in case overloaded students need special permission, or student with a low work load lose financial aid or scholarships)",
            "id": "cd0741950f9e2ac6dbd27f2006b01cd5"
          },
          {
            "type": "html",
            "text": "-[[Anonymous Donor]]",
            "id": "113615f6c6c0d5d24b25fff8ef92a232"
          },
          {
            "type": "html",
            "text": "\nNotice that there is a lot of repetition here. Generally with each entity (class, student, grade, etc.) one will want to add, change, delete, list, search, and print/report on just about every one to some degree. Thus, it's best to have a framework that provides most of that for us with relatively little coding. Related: [[Database Verbs]]. One could perhaps describe the requirements as such:",
            "id": "47c42bfcdd4a75adb7d29f1a9da4a494"
          },
          {
            "type": "code",
            "text": "  entities = list{students, teachers, courses, classes, grades, degrees, admin, etc.}\n  for each entity in entities perform: {\n    Add\n    Change\n    Delete\n    List\n    Sort\n    Search\n    Print\n    Summarize\n    Audit changes (log)\n    Secure/verify usage\n  } ",
            "id": "be047f324a435f33fdcf3a77fd07dfd4"
          },
          {
            "type": "html",
            "text": "\"Summarize\" could get combinationally tricky because one may want to see each of the entities from each of the other entities' perspective, such as grades per student, grades per teacher, grades per course, classes per student etc. Security may also requiring dealing with a lot of interweaving. This is typical with CRUD applications: future reports, views, etc. often cannot be anticipated up front. One often starts off with the basics so that each entity is <i>at least</i> searchable and editable to a minimum degree, and then tune or add to it for work-flow convenience per department, etc. One department or user may end up saying, \"I have to visit 4 different screens (entities) for these kinds of transactions, which I do a lot of. If you can combine such and such information onto one screen, then it would save me time.\" Some of these requests we may know up front, some not. But at least having the <i>minimum</i> set for each entity allows work to get done, just not necessarily in an optimized way. Everything is editable. -t",
            "id": "12b1f8a233128aa134de76ae8a47d101"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1859add2931d1c3c70cb6dd1a5756e9e"
          },
          {
            "type": "html",
            "text": "See also: [[The Top Challenge]]",
            "id": "36ec8b1513c9eaa16fd028900556ab81"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1859add2931d1c3c70cb6dd1a5756e9e"
          },
          {
            "type": "html",
            "text": "[[Category Example]]",
            "id": "9d09383870cd11b9a7f71c9d6a66552e"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CampusExample c2.com]",
            "id": "c6e2d3e1167b455c6f0e4103bcfc8977"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1707719847498
    }
  ]
}