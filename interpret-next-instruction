{
  "title": "Interpret Next Instruction",
  "story": [
    {
      "type": "paragraph",
      "id": "a24abd24afcdebc4",
      "text": "Smalltalk-80 decomposed program execution into an artful collaboration between objects waiting for only the most interested to discover."
    },
    {
      "type": "paragraph",
      "id": "2a468906dd01cabd",
      "text": "Smalltalk was a great environment to explore in the 80's because it was already 10 years old but still amazingly simple and self-consistent. "
    },
    {
      "type": "paragraph",
      "id": "d20e9c251911c7fe",
      "text": "For example, I had cooked up a diagram notation that was useful for explaining division of responsibilities between mutually dispatching objects. One day, in casual conversation, we asked, \"what browser or inspector already knows enough to draw these diagrams for us?\" The fact that we could even pose this question says something about the intellectual integrity present in the system.\n\n"
    },
    {
      "type": "paragraph",
      "id": "4f1d12fbe08727a9",
      "text": "After a few minutes thought we realized only the debugger knew enough to capture the trace nature present in my diagrams. We turn immediately to the source code and found the method:\n\n"
    },
    {
      "type": "code",
      "id": "fe5dff6209695a67",
      "text": "aContext interpretNextInstructionFor anObserver"
    },
    {
      "type": "paragraph",
      "id": "01ea9727f2ae32b6",
      "text": "There it was. All of the complexity of object-oriented program interpretation separated into functional parts. The debugger was just one observer present in the system. Other callers included a simulator and a code formatter. We subclassed Debugger as DiagrammingDebugger and then added what we wanted to the screen.\n\n"
    },
    {
      "type": "paragraph",
      "id": "fe0f0185d0c8d40c",
      "text": "The CASE'87 paper described this and another tool we built for ourselves and used every day. Kent flew to Boston and presented. The attendees showed absolutely no interest in this work. The fact that any programmer should need to understand anything was not within the \"computer aided software engineering\" agenda."
    },
    {
      "type": "paragraph",
      "id": "90b49c6311f23432",
      "text": "See [[Expanding the Role of Tools]]"
    },
    {
      "type": "paragraph",
      "id": "fd44999d54705899",
      "text": "CRC Cards were another manifestation of the same thing: how to think about programs that share responsibilities.\n\n"
    },
    {
      "type": "paragraph",
      "id": "7e724365edc3ac97",
      "text": "We later contextualized this to software patterns. What are the divisions of responsibilities that we see all of the time."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Interpret Next Instruction",
        "story": []
      },
      "date": 1464365550786
    },
    {
      "item": {
        "type": "factory",
        "id": "2a468906dd01cabd"
      },
      "id": "2a468906dd01cabd",
      "type": "add",
      "date": 1464365587007
    },
    {
      "type": "edit",
      "id": "2a468906dd01cabd",
      "item": {
        "type": "paragraph",
        "id": "2a468906dd01cabd",
        "text": "Smalltalk was a great environment to explore in the 80's because it was already 10 years old but still amazingly simple and self-consistent. "
      },
      "date": 1464365598783
    },
    {
      "type": "add",
      "id": "d20e9c251911c7fe",
      "item": {
        "type": "paragraph",
        "id": "d20e9c251911c7fe",
        "text": "For example, I had cooked up a diagram notation that was useful for explaining division of responsibilities between mutually dispatching objects. One day, in casual conversation, we asked, \"what browser or inspector already knows enough to draw these diagrams for us?\" The fact that we could even pose this question says something about the intellectual integrity present in the system.\n\n"
      },
      "after": "2a468906dd01cabd",
      "date": 1464365605524
    },
    {
      "type": "add",
      "id": "4f1d12fbe08727a9",
      "item": {
        "type": "paragraph",
        "id": "4f1d12fbe08727a9",
        "text": "After a few minutes thought we realized only the debugger knew enough to capture the trace nature present in my diagrams. We turn immediately to the source code and found the method:\n\n"
      },
      "after": "d20e9c251911c7fe",
      "date": 1464365675520
    },
    {
      "type": "add",
      "id": "01ea9727f2ae32b6",
      "item": {
        "type": "paragraph",
        "id": "01ea9727f2ae32b6",
        "text": "There it was. All of the complexity of object-oriented program interpretation separated into functional parts. The debugger was just one observer present in the system. Other callers included a simulator and a code formatter. We subclassed Debugger as DiagrammingDebugger and then added what we wanted to the screen.\n\n"
      },
      "after": "4f1d12fbe08727a9",
      "date": 1464365681266
    },
    {
      "type": "add",
      "id": "fe0f0185d0c8d40c",
      "item": {
        "type": "paragraph",
        "id": "fe0f0185d0c8d40c",
        "text": "The CASE'87 paper described this and another tool we built for ourselves and used every day. Kent flew to Boston and presented. The attendees showed absolutely no interest in this work. The fact that any programmer should need to understand anything was not within the \"computer aided software engineering\" agenda.\n\n"
      },
      "after": "01ea9727f2ae32b6",
      "date": 1464365686039
    },
    {
      "type": "add",
      "id": "fd44999d54705899",
      "item": {
        "type": "paragraph",
        "id": "fd44999d54705899",
        "text": "CRC Cards were another manifestation of the same thing: how to think about programs that share responsibilities.\n\n"
      },
      "after": "fe0f0185d0c8d40c",
      "date": 1464365689588
    },
    {
      "type": "add",
      "id": "7e724365edc3ac97",
      "item": {
        "type": "paragraph",
        "id": "7e724365edc3ac97",
        "text": "We later contextualized this to software patterns. What are the divisions of responsibilities that we see all of the time."
      },
      "after": "fd44999d54705899",
      "date": 1464365691022
    },
    {
      "item": {
        "type": "factory",
        "id": "fe5dff6209695a67"
      },
      "id": "fe5dff6209695a67",
      "type": "add",
      "after": "7e724365edc3ac97",
      "date": 1464365692979
    },
    {
      "type": "edit",
      "id": "fe5dff6209695a67",
      "item": {
        "type": "code",
        "id": "fe5dff6209695a67",
        "text": "aContext interpretNextInstructionFor anObserver"
      },
      "date": 1464365698353
    },
    {
      "type": "move",
      "order": [
        "2a468906dd01cabd",
        "d20e9c251911c7fe",
        "4f1d12fbe08727a9",
        "fe5dff6209695a67",
        "01ea9727f2ae32b6",
        "fe0f0185d0c8d40c",
        "fd44999d54705899",
        "7e724365edc3ac97"
      ],
      "id": "fe5dff6209695a67",
      "date": 1464365702587
    },
    {
      "type": "edit",
      "id": "fe0f0185d0c8d40c",
      "item": {
        "type": "paragraph",
        "id": "fe0f0185d0c8d40c",
        "text": "The CASE'87 paper described this and another tool we built for ourselves and used every day. Kent flew to Boston and presented. The attendees showed absolutely no interest in this work. The fact that any programmer should need to understand anything was not within the \"computer aided software engineering\" agenda. See [[Expanding the Role of Tools]]"
      },
      "date": 1464365740585
    },
    {
      "type": "edit",
      "id": "fe0f0185d0c8d40c",
      "item": {
        "type": "paragraph",
        "id": "fe0f0185d0c8d40c",
        "text": "The CASE'87 paper described this and another tool we built for ourselves and used every day. Kent flew to Boston and presented. The attendees showed absolutely no interest in this work. The fact that any programmer should need to understand anything was not within the \"computer aided software engineering\" agenda."
      },
      "date": 1464365749074
    },
    {
      "type": "add",
      "id": "90b49c6311f23432",
      "item": {
        "type": "paragraph",
        "id": "90b49c6311f23432",
        "text": "See [[Expanding the Role of Tools]]"
      },
      "after": "fe0f0185d0c8d40c",
      "date": 1464365749848
    },
    {
      "type": "add",
      "id": "a24abd24afcdebc4",
      "item": {
        "type": "paragraph",
        "id": "a24abd24afcdebc4",
        "text": "Smalltalk-80 decomposed program execution into an artful collaboration between objects waiting for only the most interested to discover."
      },
      "after": "2a468906dd01cabd",
      "date": 1464365849786
    },
    {
      "type": "move",
      "order": [
        "a24abd24afcdebc4",
        "2a468906dd01cabd",
        "d20e9c251911c7fe",
        "4f1d12fbe08727a9",
        "fe5dff6209695a67",
        "01ea9727f2ae32b6",
        "fe0f0185d0c8d40c",
        "90b49c6311f23432",
        "fd44999d54705899",
        "7e724365edc3ac97"
      ],
      "id": "a24abd24afcdebc4",
      "date": 1464365852547
    },
    {
      "type": "fork",
      "site": "tools.bay.wiki.org",
      "date": 1627568590940
    }
  ]
}