{
  "title": "Deno vs NPM",
  "story": [
    {
      "type": "paragraph",
      "id": "cee373eaa8015506",
      "text": "We reflect on the relative merits of two approaches to package management in the server-side JavaScript ecosystem."
    },
    {
      "type": "paragraph",
      "id": "16e51af3c57d233c",
      "text": "NPM"
    },
    {
      "type": "paragraph",
      "id": "5ffc2ef1ca0df810",
      "text": "Installs thousands upon thousands of files due to each dependency requiring its own directory and at least two files."
    },
    {
      "type": "paragraph",
      "id": "8254adad6a85aa31",
      "text": "Referenced versions are controlled by each project and specified in a single location within the project (package.json). Whenever a version of a package needs to be updated, it need only be updated in a single place per project."
    },
    {
      "type": "paragraph",
      "id": "dfd358a5b7ef1eb3",
      "text": "Package.json provides a flexible means of specifying which version of a dependency are acceptable. This in theory allows for a large project tree to pull in a minimal number of versions of a given dependency. In practice, many versions of common dependency often exist in a single project tree."
    },
    {
      "type": "paragraph",
      "id": "59e1522d1f3e4901",
      "text": "NPM relies on centralized package registries. Virtually all public use goes through the version run by the company behind NPM, but there is support for running private registries."
    },
    {
      "type": "paragraph",
      "id": "e991cc8e8388bc75",
      "text": "NPM requires a separate install step and stores dependencies in a project local directory."
    },
    {
      "type": "paragraph",
      "id": "eeefa2a63cc61021",
      "text": "NPM provides a way to override the version of an included dependency in an installation local way (npm link)."
    },
    {
      "type": "paragraph",
      "id": "66933705d573e9b6",
      "text": "Deno"
    },
    {
      "type": "paragraph",
      "id": "f198a365c03b213b",
      "text": "Far fewer files need to be installed as each dependency can be as little as a single file."
    },
    {
      "type": "paragraph",
      "id": "f61f6a635513063f",
      "text": "Versions are embedded in the dependency's URL. A project the makes widespread use of a dependency must update the version in each referenced file whenever that dependency's version is updated."
    },
    {
      "type": "paragraph",
      "id": "8f1d46526281fb6d",
      "text": "There is no means to specify a range of acceptable versions when importing a dependency. This is simpler than the alternative, but does mean that the only mechanism to reduce the number of downloaded versions of a dependency is to synchronized on the version used through a project tree."
    },
    {
      "type": "paragraph",
      "id": "3fb3bbfc2e3257f3",
      "text": "Packages can be distributed via any web accessible URL. There is no need for a centralized registry outside of providing a means to discover new packages."
    },
    {
      "type": "paragraph",
      "id": "acb30eb4ee3067cc",
      "text": "Deno automatically installs any needed dependencies when running a Deno program. These dependencies are installed in a user specific global directory. Updates to dependencies require extra commands be run by the user."
    },
    {
      "type": "paragraph",
      "id": "e9f5bc2b9cfe8cbf",
      "text": "Does Deno provide a way to override the version of a dependency used or all dependencies forced to use the version from the location specified in the import statement? At this point, we believe the latter to be true."
    },
    {
      "type": "pagefold",
      "id": "18fa0b0712789ae4",
      "text": ".\n"
    },
    {
      "type": "markdown",
      "id": "32f1fe4c7a15aad4",
      "text": "Also see [[Deno Versions]]\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Deno vs NPM",
        "story": []
      },
      "date": 1583072759239
    },
    {
      "item": {
        "type": "factory",
        "id": "cee373eaa8015506"
      },
      "id": "cee373eaa8015506",
      "type": "add",
      "date": 1583072760532
    },
    {
      "type": "edit",
      "id": "cee373eaa8015506",
      "item": {
        "type": "paragraph",
        "id": "cee373eaa8015506",
        "text": "We reflect on the relative merits of two approaches to package management in the server-side JavaScript ecosystem."
      },
      "date": 1583072800881
    },
    {
      "type": "add",
      "id": "16e51af3c57d233c",
      "item": {
        "type": "paragraph",
        "id": "16e51af3c57d233c",
        "text": "NPM"
      },
      "after": "cee373eaa8015506",
      "date": 1583072806119
    },
    {
      "type": "add",
      "id": "5ffc2ef1ca0df810",
      "item": {
        "type": "paragraph",
        "id": "5ffc2ef1ca0df810",
        "text": "Installs thousands upon thousands of files due to each dependency requiring its own directory and at least two files."
      },
      "after": "16e51af3c57d233c",
      "date": 1583072879032
    },
    {
      "type": "add",
      "id": "8254adad6a85aa31",
      "item": {
        "type": "paragraph",
        "id": "8254adad6a85aa31",
        "text": "Referenced versions are controlled by each project and specified in a single location within the project (package.json)."
      },
      "after": "5ffc2ef1ca0df810",
      "date": 1583072913344
    },
    {
      "type": "add",
      "id": "66933705d573e9b6",
      "item": {
        "type": "paragraph",
        "id": "66933705d573e9b6",
        "text": "Deno"
      },
      "after": "8254adad6a85aa31",
      "date": 1583072915664
    },
    {
      "type": "add",
      "id": "f198a365c03b213b",
      "item": {
        "type": "paragraph",
        "id": "f198a365c03b213b",
        "text": "Far fewer files need to be installed as each dependency can be as little as a single file."
      },
      "after": "66933705d573e9b6",
      "date": 1583072952501
    },
    {
      "type": "add",
      "id": "f61f6a635513063f",
      "item": {
        "type": "paragraph",
        "id": "f61f6a635513063f",
        "text": "Versions are embedded in the dependency's URL. A project the makes widespread use of a dependency must update the version in each referenced file whenever that dependency's version is updated."
      },
      "after": "f198a365c03b213b",
      "date": 1583073102812
    },
    {
      "type": "edit",
      "id": "8254adad6a85aa31",
      "item": {
        "type": "paragraph",
        "id": "8254adad6a85aa31",
        "text": "Referenced versions are controlled by each project and specified in a single location within the project (package.json). Whenever a version of a package needs to be updated, it need only be updated in a single place per project."
      },
      "date": 1583073152029
    },
    {
      "type": "add",
      "id": "dfd358a5b7ef1eb3",
      "item": {
        "type": "paragraph",
        "id": "dfd358a5b7ef1eb3",
        "text": "Package.json provides a flexible means of specifying which version of a dependency are acceptable. This in theory allows for a large project tree to pull in a minimal number of versions of a given dependency. In practice, many versions of common dependency often exist in a single project tree."
      },
      "after": "8254adad6a85aa31",
      "date": 1583073275929
    },
    {
      "type": "add",
      "id": "8f1d46526281fb6d",
      "item": {
        "type": "paragraph",
        "id": "8f1d46526281fb6d",
        "text": "There is no means to specify a range of acceptable versions when importing a dependency. This is simpler than the alternative, but does mean that the only mechanism to reduce the number of downloaded versions of a dependency is to synchronized on the version used through a project tree."
      },
      "after": "f61f6a635513063f",
      "date": 1583073443608
    },
    {
      "type": "add",
      "id": "59e1522d1f3e4901",
      "item": {
        "type": "paragraph",
        "id": "59e1522d1f3e4901",
        "text": "NPM relies on centralized package registries. Virtually all public use goes through the version run by the company behind NPM, but there is support for running private registries."
      },
      "after": "dfd358a5b7ef1eb3",
      "date": 1583073593590
    },
    {
      "type": "add",
      "id": "3fb3bbfc2e3257f3",
      "item": {
        "type": "paragraph",
        "id": "3fb3bbfc2e3257f3",
        "text": "Packages can be distributed via any web accessible URL. There is no need for a centralized registry outside of providing a means to discover new packages."
      },
      "after": "8f1d46526281fb6d",
      "date": 1583073667327
    },
    {
      "type": "add",
      "id": "e991cc8e8388bc75",
      "item": {
        "type": "paragraph",
        "id": "e991cc8e8388bc75",
        "text": "NPM requires a separate install step and stores dependencies in a project local directory."
      },
      "after": "59e1522d1f3e4901",
      "date": 1583074492868
    },
    {
      "type": "add",
      "id": "acb30eb4ee3067cc",
      "item": {
        "type": "paragraph",
        "id": "acb30eb4ee3067cc",
        "text": "Deno automatically installs any needed dependencies when running a Deno program. These dependencies are installed in a user specific global directory. Updates to dependencies require extra commands be run by the user."
      },
      "after": "3fb3bbfc2e3257f3",
      "date": 1583074622796
    },
    {
      "type": "add",
      "id": "eeefa2a63cc61021",
      "item": {
        "type": "paragraph",
        "id": "eeefa2a63cc61021",
        "text": "NPM provides a way to override the version of an included dependency in an installation local way (npm link)."
      },
      "after": "e991cc8e8388bc75",
      "date": 1583074841361
    },
    {
      "type": "add",
      "id": "e9f5bc2b9cfe8cbf",
      "item": {
        "type": "paragraph",
        "id": "e9f5bc2b9cfe8cbf",
        "text": "Does Deno provide a way to override the version of a dependency used or all dependencies forced to use the version from the location specified in the import statement?"
      },
      "after": "acb30eb4ee3067cc",
      "date": 1583074963358
    },
    {
      "type": "edit",
      "id": "e9f5bc2b9cfe8cbf",
      "item": {
        "type": "paragraph",
        "id": "e9f5bc2b9cfe8cbf",
        "text": "Does Deno provide a way to override the version of a dependency used or all dependencies forced to use the version from the location specified in the import statement? At this point, we believe the latter to be true."
      },
      "date": 1583074991798
    },
    {
      "type": "fork",
      "site": "fed.wiki.randombits.xyz",
      "date": 1583194457577
    },
    {
      "item": {
        "type": "factory",
        "id": "18fa0b0712789ae4"
      },
      "id": "18fa0b0712789ae4",
      "type": "add",
      "after": "e9f5bc2b9cfe8cbf",
      "date": 1583194650233
    },
    {
      "type": "edit",
      "id": "18fa0b0712789ae4",
      "item": {
        "type": "pagefold",
        "id": "18fa0b0712789ae4",
        "text": ".\n"
      },
      "date": 1583194662063
    },
    {
      "item": {
        "type": "factory",
        "id": "32f1fe4c7a15aad4"
      },
      "id": "32f1fe4c7a15aad4",
      "type": "add",
      "after": "18fa0b0712789ae4",
      "date": 1583194667953
    },
    {
      "type": "edit",
      "id": "32f1fe4c7a15aad4",
      "item": {
        "type": "markdown",
        "id": "32f1fe4c7a15aad4",
        "text": "Also see [[Deno Versions]]\n"
      },
      "date": 1583194687177
    },
    {
      "type": "fork",
      "site": "clive.tries.fed.wiki",
      "date": 1667835912620
    }
  ]
}