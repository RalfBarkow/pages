{
  "title": "2023-12-19",
  "story": [
    {
      "type": "paragraph",
      "id": "5050750b60bd1849",
      "text": "CLARK, William AV, 1991. Residential preferences and neighborhood racial segregation: A test of the [[Schelling Segregation Model]]. Demography. 1991. Vol. 28, p. 1–19. \n"
    },
    {
      "type": "pagefold",
      "id": "c35d84e6fdbd674f",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "0c532a857d9e689d",
      "text": "# Agree on a [[Consensual Use of Words]]"
    },
    {
      "type": "paragraph",
      "id": "a0c7fc4765ba27f1",
      "text": "The challenge to the collaborators is to settle on agreeable usage of words pressed into this [?] additional service. As this [[Agreement]] is unlikely, see [[Die Gewalt der Zwei-Seiten-Form]] (the violence of the [[two-sided form]])."
    },
    {
      "type": "paragraph",
      "id": "f9e99fb271f14fa0",
      "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170293394842693XJWxB:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] I'm assuming that there will be [[Tension]]s that will need to be worked out over time and finally […]."
    },
    {
      "type": "markdown",
      "id": "0e8d529d62d54475",
      "text": "> I've built such a tool. You can try it out on the indexing I have done for my dojo pages."
    },
    {
      "type": "reference",
      "id": "d30c931ba3767c5d",
      "site": "ward.dojo.fed.wiki",
      "slug": "dojo-demonstration-tags",
      "title": "Dojo Demonstration Tags",
      "text": "We use simple evocative words to tag paragraphs for quick access to richly complicated ideas [⇒ [[Access to an Idea]]]. This only works when we accept some [[Ambiguity]] for how we use single words and make some effort to apply words [[consistently]] within the corpus we are tagging."
    },
    {
      "type": "reference",
      "id": "c8f1e7e76ec906a6",
      "site": "ward.dojo.fed.wiki",
      "slug": "item-tag-aggregator",
      "title": "Item Tag Aggregator",
      "text": "We study both frequent and rare tags from one or more item tag surveys. Add more references to surveys to be aggregated. [https://github.com/WardCunningham/assets/blob/master/pages/item-tag-aggregator/aggregate.html github]"
    },
    {
      "type": "paragraph",
      "id": "1dd6eb7d9f25a94e",
      "text": "Click a tag like \"search\" or \"survey\". Notice that the glossary definitions pop up on the top of the list of tagged paragraphs"
    },
    {
      "type": "markdown",
      "id": "2fdd944f2b5bba27",
      "text": "http://papers.dreyeck.ch/view/welcome-visitors/view/item-tag-aggregator/view/system--9"
    },
    {
      "type": "reference",
      "id": "2899789fb074916b",
      "site": "traits.code.dreyeck.ch",
      "slug": "tag-ontologies",
      "title": "Tag ontologies",
      "text": "It is about time we write down these experiments and thoughts, and research others work to see how they compare. This page is a start."
    },
    {
      "type": "reference",
      "id": "17a3ce9af69037b5",
      "site": "wiki.ralfbarkow.ch",
      "slug": "som",
      "title": "SOM",
      "text": "Among the architectures and algorithms suggested for artificial neural networks, the Self-Organizing Map has the special property of effectively creating spatially organized \"internal representa­tions\" of various features of input signals and their abstractions."
    },
    {
      "type": "pagefold",
      "id": "09274e142b1eb9d1",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "36ef358a59eacafc",
      "text": "[[RGTraitDefinition]] is the concrete representation of a [[Trait]] (no class)"
    },
    {
      "type": "paragraph",
      "id": "afe769b2dcf69430",
      "text": "Tagging of traits with the intention of creating [[Tags Map]]. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170297099164aWOcX:dreyeck.freedombox.rocks?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] [http://traits.code.dreyeck.ch/ traits]"
    },
    {
      "type": "paragraph",
      "id": "e96d3c5ba73d78ea",
      "text": "[[RPackageConflictError]]"
    },
    {
      "type": "paragraph",
      "id": "8180d3b915aad2bf",
      "text": "[[TBlScrollable]]"
    },
    {
      "type": "paragraph",
      "id": "064ed0e37223156e",
      "text": "[[Trait]]: My instances are the traits used to create traited classes.\nThe traits can be combined in different ways check [[TaAbstractComposition]] to see the different possible operations.\n\nI am a subclass of [[Class]], and I implement the specific [[Behavior]] for traits.\nSo, the traits are polymorphic with classes.\n\nI support stateful traits. \nAlso Traits uses other metaclass to implement the behavior, check [[MetaclassForTraits]]."
    },
    {
      "type": "paragraph",
      "id": "9e84052f3380edc8",
      "text": "Also a nice diagram [https://raw.githubusercontent.com/wiki/pharo-project/pharo/figures/traits.png png] can be seen evaluating:"
    },
    {
      "type": "code",
      "id": "32d233dd4f18a886",
      "text": "((ZnEasy getPng: 'https://raw.githubusercontent.com/wiki/pharo-project/pharo/figures/traits.png') \n\tasMorph resize: 800@800; openInWindow) "
    },
    {
      "type": "image",
      "id": "6531052eb0a968f6",
      "text": "[[Trait]]",
      "size": "wide",
      "width": 419,
      "height": 198,
      "url": "/assets/plugins/image/9ced74153edefc5ad6e1ef755ccbf0f6.jpg"
    },
    {
      "type": "pagefold",
      "id": "2467b2d39f8b4dbb",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "23375d522f174002",
      "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170296526644250UhOEo:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWe asked ourselves a while back if there was any value in connecting our sites with the Activity Pub \"fediverse\". I think we concluded that it was a forced-fit. But there is much of that going on so maybe time to think more about this.\n\nI'm unsure what [[Flipboard]] is all about but …"
    },
    {
      "type": "pagefold",
      "id": "a3062e85742a97e3",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "8bbb19dfd232595a",
      "text": "ennoausberlin — 17.12.2023 17:10 via [https://discord.com/channels/729445214812504107/736333725788274819/1185977319354007562 discord]\nHello. I am reading  [[Simon Wardley]]'s book about [[Wardley Map]]s and want to understand what the Visible pipelines and Link to features of the Snippet are related to."
    },
    {
      "type": "paragraph",
      "id": "0e59d40751465bd9",
      "text": "tudor girba — 17.12.2023 18:06\nThe concept of a pipeline was created after the book was written and represents an OR.\n\nThe link is about linking a node in the map with another Lepiter page. For examples, this supports the idea that “every node is a map”. But more interesting is that we can link nodes to all sorts of other narratives."
    },
    {
      "type": "paragraph",
      "id": "5dad1212305a94b2",
      "text": "ennoausberlin\n — \n17.12.2023 18:24 via [https://discord.com/channels/729445214812504107/736333725788274819/1185995901660057672 discord]\nThat link approach sounds like the idea from the book that a single node in a certain map can be an entire map from another persons [[Perspective]]. An example lepiter page would be nice to describe these two things. >> perspective\n"
    },
    {
      "type": "pagefold",
      "id": "cadfe6aa0863e278",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "e2c7bfba79c12861",
      "text": "Konrad Hinsen via [https://discord.com/channels/729445214812504107/736333725788274819/1186321199677054996 discord]\nWhat's the best way to figure out where generated classes and methods have been generated?\nExample: I am trying to figure out how to get my custom Lepiter annotations handled during [[HTML Export]]. I started by stepping through the treatment of gtPage annotations, and I ended up looking at trait TLeAnnotationParseNodeVisitor:\n…"
    },
    {
      "type": "paragraph",
      "id": "ac54ff939eb1e488",
      "text": "[[SmaCCGLRParser]] is an abstract superclass for all [[GLR]] generated parsers in [[SmaCC]]."
    },
    {
      "type": "paragraph",
      "id": "452c379d7ac97131",
      "text": "IRWIN, Warwick and CHURCHER, Neville, 2001. A generated parser of c++. NZ Journal of Computing. 2001. Vol. 8, no. 3, p. 26–37. [https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=6b4a7298b5a5be39afede5f63b62022674125d54 pdf] [Accessed 19 December 2023]. \n"
    },
    {
      "type": "paragraph",
      "id": "0c0dc6223aa17d07",
      "text": "We find that Tomita ([[GLR]]) parsing – more widely known in the field of [[Natural Language Processing]] is better suited than conventional approaches to the task of parsing C++. A Tomita parser generator requires no artificial modification of the grammar and emits a parser that processes actual C++ source code in nearlinear time and allows syntactic analysis to be separated from semantic analysis."
    },
    {
      "type": "paragraph",
      "id": "a0b9cc20316333f9",
      "text": "[19] M. Johnson, “The [[Computational Complexity]] of [[GLR]] [[Parsing]]”, in M. Tomita, Editor, [[Generalized LR Parsing]], Kluwer Academic Publishers, 1991."
    },
    {
      "type": "pagefold",
      "id": "ea960eeb4b9ef3a4",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "c9395e9efc055286",
      "text": "Carmen Armenti via [https://discord.com/channels/729445214812504107/769202224299245568/1160274819330355250 discord]\nI have a class which extends [[BlParallelAnimation]] that allows me to achieve the animation in the video attached."
    },
    {
      "type": "video",
      "id": "809debcdd912ed8e",
      "text": "HTML5 mp4 https://cdn.discordapp.com/attachments/769202224299245568/1160274818466328656/BlParallelAnimation.mov?ex=65905a21&is=657de521&hm=1e1bec1507cf213ce96f785ac72a6997cfcfe69eab2e6fbce3b37456627d0367&\n[[BlParallelAnimation]] "
    },
    {
      "type": "paragraph",
      "id": "f4b42e0530b539e3",
      "text": "Nothing more than what BlParallelAnimation would allow me to do, but I meant to synchronise other events to the animations – reason why I created a subclass –, one for each animation added to BlParallelAnimation. Before doing that I wanted to understand thoroughly how a BlParallelAnimation works. So I created a subclass overriding the method doStep – method that as far as I understood is the one that runs the animations added to a BlParallelAnimation – and I added a Transcript show to it. The thing is I was expecting to have in the Transcript one timestamp for each animation is in BlParallelAnimation, but I get more than the number of animations, it seems to print the timestamp of each update."
    },
    {
      "type": "video",
      "id": "797d77d7c2ef8c85",
      "text": "HTML5 mp4 https://wiki.ralfbarkow.ch/assets/pages/blanimationexamples/BlAnimationExamples.mov\nbouncingText"
    },
    {
      "type": "paragraph",
      "id": "a52bcf887d4f5701",
      "text": "botwhytho via [https://discord.com/channels/729445214812504107/769202224299245568/1160325750705098782 discord]\nThanks for posting video. Still not clear what the issue is. Is the issue synchronizing animations with sound?  To your earlier message about animations with delay, seems like you have that working and there are examples in the image that do this (see [[BlAnimationExamples]]>>#bouncingText).\nI'd consider using Announcements and event handlers to trigger different things and keep them in sync. Have you used these before?"
    },
    {
      "type": "pagefold",
      "id": "2616e22274ce2b36",
      "text": "~"
    },
    {
      "type": "image",
      "id": "09b2abab28f23dc2",
      "text": "[[Type]]",
      "size": "wide",
      "width": 419,
      "height": 263,
      "url": "/assets/plugins/image/c916d1efee9a39c603f2c15b27a81e53.jpg"
    },
    {
      "type": "paragraph",
      "id": "0f52d75cd616b75d",
      "text": "Types and Traits …"
    },
    {
      "type": "image",
      "id": "e6c25959bcfc8e30",
      "text": "Type Comment",
      "size": "wide",
      "width": 430,
      "height": 268,
      "url": "/assets/plugins/image/6ce76d65062993522b08752ec6860e20.jpg"
    },
    {
      "type": "markdown",
      "id": "3c540d6b74e7e1ce",
      "text": "See [[Events and Causal Dependence]]\n> […], we just said that any element created by applying a rule should be **new and distinct from all others**. If we were implementing the model, this might then make us imagine that the element would have a [[Name]] based on some global counter, or a [[UUID]]."
    },
    {
      "type": "reference",
      "id": "9067efe9db03e6e9",
      "site": "wiki.ralfbarkow.ch",
      "slug": "distinctions-labels-and-smalltalk",
      "title": "Distinctions, Labels, and Smalltalk",
      "text": "In [[Smalltalk]], objects are distinctions. Since everything in Smalltalk is an object, then everything in Smalltalk is a [[Distinction]]."
    },
    {
      "type": "markdown",
      "id": "50a7b5ffb2fa6b53",
      "text": "> Note that [[Assignment]] should not be interpreted as loading a value into some named memory cells. Naming an object should not be seen along the lines of modifying the object to hold its name either. On the contrary, the [[Act of Giving a Name]] should be thought of in terms of remembering an object by means of a [[Label]] [⇒ [[Slug]]]. Also, since a distinction is not the private property of the name either, you are free to give a distinction as many names as you want."
    },
    {
      "type": "markdown",
      "id": "969b84c01dcaa125",
      "text": "# References"
    },
    {
      "type": "paragraph",
      "id": "1a2c599509f97f88",
      "text": "[[CDTImporterType]]>>#messageType"
    },
    {
      "type": "paragraph",
      "id": "bab74663f0723154",
      "text": "[[SmaCCRewrite]]>>#matchPresenter ⇒ [[SpNotebookPresenter]]"
    },
    {
      "type": "code",
      "id": "8feec19dddec310b",
      "text": "matchPresenter\n\t| notebook code pattern index |\n\tmatch class type = #Type\n\t\tifTrue:\n\t\t\t[ index := 1.\n\t\t\tcode := match.\n\t\t\tpattern := SmaCCRewriteTreeMatch new ]\n\t\tifFalse:\n\t\t\t[ index := 2.\n\t\t\tcode := SmaCCRewriteTypeMatch new.\n\t\t\tpattern := match ].\n\tnotebook := SpNotebookPresenter new.\n\tnotebook addPage: (SpNotebookPage title: 'Code' provider: [ self matchCodePresenterFor: code ]).\n\tnotebook addPage: (SpNotebookPage title: 'Pattern' provider: [ self matchPatternPresenterFor: pattern ]).\n\tnotebook selectPageIndex: index.\n\tnotebook\n\t\twhenSelectedPageChangedDo: [ :each | self match: (notebook selectedPageIndex = 1 ifTrue: [ code ] ifFalse: [ pattern ]) ].\n\t^ notebook"
    },
    {
      "type": "paragraph",
      "id": "5603b7f2e511928c",
      "text": "⇒ [[Provider]]"
    },
    {
      "type": "paragraph",
      "id": "c5d0b2bc34e58c86",
      "text": "[[SmaCCRewriteTypeMatch]] class>>#type"
    },
    {
      "type": "paragraph",
      "id": "490f9e4254a95f22",
      "text": "[[WinitMainThreadEventLoop]]>>#gtInfoFor:"
    },
    {
      "type": "code",
      "id": "4961f7f4879c5036",
      "text": "gtInfoFor: aView\n\t<gtView>\n\n\t^ ({\n\t\t#'Type' -> self type.\n\t\t#'Redraw listeners' -> self amountOfRedrawListeners.\n\t\t#'Resize listeners' -> self amountOfResizeListeners.\n\t } asOrderedDictionary gtItemsFor: aView)\n\t\t\ttitle: 'Info';\n\t\t\tpriority: 7"
    },
    {
      "type": "paragraph",
      "id": "43c892c58f632b4d",
      "text": "⇒ [[Glutin]]"
    },
    {
      "type": "image",
      "id": "faff741fd0a7f6df",
      "text": "Type References",
      "size": "wide",
      "width": 430,
      "height": 269,
      "url": "/assets/plugins/image/49fd0a1eae838a966886f2120056c04f.jpg"
    },
    {
      "type": "pagefold",
      "id": "b00f14b7be2bc77c",
      "text": "~"
    },
    {
      "type": "image",
      "id": "502f23a565f51a5f",
      "text": "[[SmaCCParserError]]: [[Token]] not expected",
      "size": "wide",
      "width": 430,
      "height": 269,
      "url": "/assets/plugins/image/41795b39bc44fa0c666b7063fbd13c71.jpg"
    },
    {
      "type": "image",
      "id": "04f12abab9185aef",
      "text": "[[GLR]]",
      "size": "wide",
      "width": 430,
      "height": 268,
      "url": "/assets/plugins/image/9a19f2450a5e2956eaf3a6ca65a980e3.jpg"
    },
    {
      "type": "paragraph",
      "id": "74f3a3437e6ef204",
      "text": "The idea would be to initially treat all snippet types as code. And to fall back to text (or another type) if  the [[Expectation]] is disappointed ([[Token]] not expected)."
    },
    {
      "type": "image",
      "id": "660ddf7586cdd27d",
      "text": "[[SpNotebookPresenter]]",
      "size": "wide",
      "width": 430,
      "height": 269,
      "url": "/assets/plugins/image/b4e2ff4d9e2b165b5899c8c4685df6c6.jpg"
    },
    {
      "type": "paragraph",
      "id": "0a936fabe9d207fb",
      "text": "[[Spec]] is a framework in [[Pharo]] for describing user interfaces. [https://github.com/pharo-spec/Spec github]"
    },
    {
      "type": "paragraph",
      "id": "061bf19273261e3b",
      "text": "Building the [[Memory Game]] graphical elements with [[Bloc]] [https://book.gtoolkit.com/building-the-memory-game-graphical-element-53lj10cpol7ee2fpyyjfzhs2o page]"
    },
    {
      "type": "pagefold",
      "id": "a5330880d10ba281",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "85c86514eff6a9f4",
      "text": "[[Compose an Economy]]"
    },
    {
      "type": "image",
      "id": "1f6ea917dd7ecd9d",
      "text": "RHEINBERGER, Hans-Jörg, 2022. Historische Epistemologie zur Einführung.",
      "size": "thumbnail",
      "width": 183,
      "height": 259,
      "url": "/assets/plugins/image/0f0a7790a21740b2f1bb4b570bd0847c.jpg"
    },
    {
      "type": "paragraph",
      "id": "8999366db4374886",
      "text": "RHEINBERGER, Hans-Jörg, 2022. Historische Epistemologie zur Einführung. 4., korr. Aufl. Hamburg: Junius. Zur Einführung, 336. ISBN 978-3-88506-636-1"
    },
    {
      "type": "paragraph",
      "id": "98ec258f76bb2956",
      "text": "RHEINBERGER, Von Hans-Jörg, 2011. Historische Epistemologie. [https://www.mpiwg-berlin.mpg.de/sites/default/files/migrated/fs17_rheinberger_de_web.pdf pdf]"
    },
    {
      "type": "markdown",
      "id": "e8b80d3e8d02158c",
      "text": "> Die Vorstellung von Wissenschaft als Prozess löste die zwanghafte Sicht auf Wissenschaft als System ab."
    },
    {
      "type": "paragraph",
      "id": "7e343e9925238d9e",
      "text": "The idea of [[Science as a Process]] replaced the obsessive view of [[Science as a System]]."
    },
    {
      "type": "paragraph",
      "id": "0a61d7d9ab86710c",
      "text": "See [[Process (Prozess)]]. vs. [[System]] ([[Science]])"
    },
    {
      "type": "markdown",
      "id": "5c8607673b8e0b9c",
      "text": "> We should not conceive of “process” as a simple succession of one event after another. Instead, it is the organization of these events into [[Sequence]]s, so that selections that have already been realized and selections that are expected together provide the conditions for a selection realized in a particular moment. \n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-12-19",
        "story": []
      },
      "date": 1702940400
    },
    {
      "item": {
        "type": "factory",
        "id": "0c532a857d9e689d"
      },
      "id": "0c532a857d9e689d",
      "type": "add",
      "date": 1702964289278
    },
    {
      "type": "edit",
      "id": "0c532a857d9e689d",
      "item": {
        "type": "paragraph",
        "id": "0c532a857d9e689d",
        "text": "The challenge to the collaborators is to settle on agreeable usage of words pressed into this additional service. I'm assuming that there will be tensions that will need to be worked out over time and finally a corpus specific glossary, or maybe multiple glossaries, recording their decisions.\n\nI've built such a tool. You can try it out on the indexing I have done for my dojo pages.\n\nhttp://ward.dojo.fed.wiki/view/dojo-demonstration-tags/view/item-tag-aggregator\n\nClick a tag like \"search\" or \"survey\". Notice that the glossary definitions pop up on the top of the list of tagged paragraphs"
      },
      "date": 1702964317008
    },
    {
      "item": {
        "type": "factory",
        "id": "c35d84e6fdbd674f"
      },
      "id": "c35d84e6fdbd674f",
      "type": "add",
      "after": "0c532a857d9e689d",
      "date": 1702964334816
    },
    {
      "type": "edit",
      "id": "c35d84e6fdbd674f",
      "item": {
        "type": "pagefold",
        "id": "c35d84e6fdbd674f",
        "text": "~"
      },
      "date": 1702964785424
    },
    {
      "item": {
        "type": "factory",
        "id": "5050750b60bd1849"
      },
      "id": "5050750b60bd1849",
      "type": "add",
      "after": "c35d84e6fdbd674f",
      "date": 1702964786942
    },
    {
      "type": "edit",
      "id": "5050750b60bd1849",
      "item": {
        "type": "paragraph",
        "id": "5050750b60bd1849",
        "text": "\nCLARK, William AV, 1991. Residential preferences and neighborhood racial segregation: A test of the Schelling segregation model. Demography. 1991. Vol. 28, p. 1–19. \n"
      },
      "date": 1702964789080
    },
    {
      "id": "5050750b60bd1849",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "0c532a857d9e689d",
        "c35d84e6fdbd674f"
      ],
      "date": 1702964794398
    },
    {
      "id": "c35d84e6fdbd674f",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "c35d84e6fdbd674f",
        "0c532a857d9e689d"
      ],
      "date": 1702964797279
    },
    {
      "type": "edit",
      "id": "5050750b60bd1849",
      "item": {
        "type": "paragraph",
        "id": "5050750b60bd1849",
        "text": "CLARK, William AV, 1991. Residential preferences and neighborhood racial segregation: A test of the Schelling segregation model. Demography. 1991. Vol. 28, p. 1–19. \n"
      },
      "date": 1702966514074
    },
    {
      "type": "edit",
      "id": "5050750b60bd1849",
      "item": {
        "type": "paragraph",
        "id": "5050750b60bd1849",
        "text": "CLARK, William AV, 1991. Residential preferences and neighborhood racial segregation: A test of the [[Schelling Segregation Model]]. Demography. 1991. Vol. 28, p. 1–19. \n"
      },
      "date": 1702966539958
    },
    {
      "type": "edit",
      "id": "0c532a857d9e689d",
      "item": {
        "type": "paragraph",
        "id": "0c532a857d9e689d",
        "text": "The challenge to the collaborators is to settle on agreeable usage of words pressed into this additional service."
      },
      "date": 1702966622547
    },
    {
      "type": "add",
      "id": "f9e99fb271f14fa0",
      "item": {
        "type": "paragraph",
        "id": "f9e99fb271f14fa0",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170293394842693XJWxB:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] I'm assuming that there will be tensions that will need to be worked out over time and finally a corpus specific glossary, or maybe multiple glossaries, recording their decisions.\n\nI've built such a tool. You can try it out on the indexing I have done for my dojo pages.\n\nhttp://ward.dojo.fed.wiki/view/dojo-demonstration-tags/view/item-tag-aggregator\n\nClick a tag like \"search\" or \"survey\". Notice that the glossary definitions pop up on the top of the list of tagged paragraphs"
      },
      "after": "0c532a857d9e689d",
      "date": 1702966631863
    },
    {
      "type": "edit",
      "id": "0c532a857d9e689d",
      "item": {
        "type": "paragraph",
        "id": "0c532a857d9e689d",
        "text": "# Agree on a Consensual Use of Words"
      },
      "date": 1702966762175
    },
    {
      "type": "add",
      "id": "a0c7fc4765ba27f1",
      "item": {
        "type": "paragraph",
        "id": "a0c7fc4765ba27f1",
        "text": "The challenge to the collaborators is to settle on agreeable usage of words pressed into this additional service."
      },
      "after": "0c532a857d9e689d",
      "date": 1702966762567
    },
    {
      "type": "edit",
      "id": "0c532a857d9e689d",
      "item": {
        "type": "paragraph",
        "id": "0c532a857d9e689d",
        "text": "# [[Agree on a Consensual Use of Words]]"
      },
      "date": 1702966770044
    },
    {
      "type": "edit",
      "id": "0c532a857d9e689d",
      "item": {
        "type": "paragraph",
        "id": "0c532a857d9e689d",
        "text": "# Agree on a [[Consensual Use of Words]]"
      },
      "date": 1702966786448
    },
    {
      "type": "edit",
      "id": "0c532a857d9e689d",
      "item": {
        "type": "markdown",
        "id": "0c532a857d9e689d",
        "text": "# Agree on a [[Consensual Use of Words]]"
      },
      "date": 1702966788503
    },
    {
      "type": "edit",
      "id": "f9e99fb271f14fa0",
      "item": {
        "type": "paragraph",
        "id": "f9e99fb271f14fa0",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170293394842693XJWxB:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] I'm assuming that there will be tensions that will need to be worked out over time and finally a corpus specific glossary, or maybe multiple glossaries, recording their decisions."
      },
      "date": 1702967095712
    },
    {
      "type": "add",
      "id": "0e8d529d62d54475",
      "item": {
        "type": "paragraph",
        "id": "0e8d529d62d54475",
        "text": "I've built such a tool. You can try it out on the indexing I have done for my dojo pages.\n\nhttp://ward.dojo.fed.wiki/view/dojo-demonstration-tags/view/item-tag-aggregator\n\nClick a tag like \"search\" or \"survey\". Notice that the glossary definitions pop up on the top of the list of tagged paragraphs"
      },
      "after": "f9e99fb271f14fa0",
      "date": 1702967100240
    },
    {
      "type": "edit",
      "id": "f9e99fb271f14fa0",
      "item": {
        "type": "paragraph",
        "id": "f9e99fb271f14fa0",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170293394842693XJWxB:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] I'm assuming that there will be [[Tension]]s that will need to be worked out over time and finally a corpus specific glossary, or maybe multiple glossaries, recording their decisions."
      },
      "date": 1702967110391
    },
    {
      "item": {
        "type": "factory",
        "id": "09274e142b1eb9d1"
      },
      "id": "09274e142b1eb9d1",
      "type": "add",
      "after": "0e8d529d62d54475",
      "date": 1702967460384
    },
    {
      "type": "edit",
      "id": "09274e142b1eb9d1",
      "item": {
        "type": "pagefold",
        "id": "09274e142b1eb9d1",
        "text": "~"
      },
      "date": 1702967463208
    },
    {
      "item": {
        "type": "factory",
        "id": "c455425d49f08086"
      },
      "id": "c455425d49f08086",
      "type": "add",
      "after": "09274e142b1eb9d1",
      "date": 1702967465448
    },
    {
      "type": "edit",
      "id": "c455425d49f08086",
      "item": {
        "type": "image",
        "id": "c455425d49f08086",
        "text": "[[BlocPac-Scrollable]]",
        "size": "wide",
        "width": 419,
        "height": 291,
        "url": "/assets/plugins/image/169970ba15762cfa52c4b06de19a6370.jpg"
      },
      "date": 1702967480804
    },
    {
      "item": {
        "type": "factory",
        "id": "36ef358a59eacafc"
      },
      "id": "36ef358a59eacafc",
      "type": "add",
      "after": "c455425d49f08086",
      "date": 1702967547609
    },
    {
      "type": "edit",
      "id": "36ef358a59eacafc",
      "item": {
        "type": "paragraph",
        "id": "36ef358a59eacafc",
        "text": "RGTraitDefinition is the concrete representation of a trait (no class)"
      },
      "date": 1702967549954
    },
    {
      "item": {
        "type": "factory",
        "id": "1e4a3e9fe6dc8778"
      },
      "id": "1e4a3e9fe6dc8778",
      "type": "add",
      "after": "36ef358a59eacafc",
      "date": 1702967750091
    },
    {
      "type": "edit",
      "id": "1e4a3e9fe6dc8778",
      "item": {
        "type": "paragraph",
        "id": "1e4a3e9fe6dc8778",
        "text": "[[Tags Map]]"
      },
      "date": 1702967760599
    },
    {
      "item": {
        "type": "factory",
        "id": "e96d3c5ba73d78ea"
      },
      "id": "e96d3c5ba73d78ea",
      "type": "add",
      "after": "1e4a3e9fe6dc8778",
      "date": 1702968031740
    },
    {
      "type": "edit",
      "id": "e96d3c5ba73d78ea",
      "item": {
        "type": "paragraph",
        "id": "e96d3c5ba73d78ea",
        "text": "[[RPackageConflictError]]"
      },
      "date": 1702968036115
    },
    {
      "type": "add",
      "id": "8180d3b915aad2bf",
      "item": {
        "type": "paragraph",
        "id": "8180d3b915aad2bf",
        "text": "[[TBlScrollable]]"
      },
      "after": "e96d3c5ba73d78ea",
      "date": 1702968284926
    },
    {
      "item": {
        "type": "factory",
        "id": "2fdd944f2b5bba27"
      },
      "id": "2fdd944f2b5bba27",
      "type": "add",
      "after": "8180d3b915aad2bf",
      "date": 1702969686887
    },
    {
      "type": "edit",
      "id": "2fdd944f2b5bba27",
      "item": {
        "type": "paragraph",
        "id": "2fdd944f2b5bba27",
        "text": "http://papers.dreyeck.ch/view/welcome-visitors/view/item-tag-aggregator/view/system--9"
      },
      "date": 1702969689877
    },
    {
      "id": "2fdd944f2b5bba27",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "c35d84e6fdbd674f",
        "0c532a857d9e689d",
        "a0c7fc4765ba27f1",
        "f9e99fb271f14fa0",
        "0e8d529d62d54475",
        "2fdd944f2b5bba27",
        "09274e142b1eb9d1",
        "c455425d49f08086",
        "36ef358a59eacafc",
        "1e4a3e9fe6dc8778",
        "e96d3c5ba73d78ea",
        "8180d3b915aad2bf"
      ],
      "date": 1702969695407
    },
    {
      "type": "edit",
      "id": "2fdd944f2b5bba27",
      "item": {
        "type": "markdown",
        "id": "2fdd944f2b5bba27",
        "text": "http://papers.dreyeck.ch/view/welcome-visitors/view/item-tag-aggregator/view/system--9"
      },
      "date": 1702969696596
    },
    {
      "type": "edit",
      "id": "0e8d529d62d54475",
      "item": {
        "type": "paragraph",
        "id": "0e8d529d62d54475",
        "text": "I've built such a tool. You can try it out on the indexing I have done for my dojo pages."
      },
      "date": 1702969774796
    },
    {
      "type": "add",
      "id": "842731bc3f05aaa5",
      "item": {
        "type": "paragraph",
        "id": "842731bc3f05aaa5",
        "text": "http://ward.dojo.fed.wiki/view/dojo-demonstration-tags/view/item-tag-aggregator"
      },
      "after": "0e8d529d62d54475",
      "date": 1702969778694
    },
    {
      "type": "add",
      "id": "1dd6eb7d9f25a94e",
      "item": {
        "type": "paragraph",
        "id": "1dd6eb7d9f25a94e",
        "text": "Click a tag like \"search\" or \"survey\". Notice that the glossary definitions pop up on the top of the list of tagged paragraphs"
      },
      "after": "842731bc3f05aaa5",
      "date": 1702969780003
    },
    {
      "id": "d30c931ba3767c5d",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "d30c931ba3767c5d",
        "site": "ward.dojo.fed.wiki",
        "slug": "dojo-demonstration-tags",
        "title": "Dojo Demonstration Tags",
        "text": "We use simple evocative words to tag paragraphs for quick access to richly complicated ideas. This only works when we accept some ambiguity for how we use single words and make some effort to apply words consistently within the corpus we are tagging."
      },
      "after": "0e8d529d62d54475",
      "attribution": {
        "page": "Consensual Use of Words"
      },
      "date": 1702969782968
    },
    {
      "id": "c8f1e7e76ec906a6",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "c8f1e7e76ec906a6",
        "site": "ward.dojo.fed.wiki",
        "slug": "item-tag-aggregator",
        "title": "Item Tag Aggregator",
        "text": "We study both frequent and rare tags from one or more item tag surveys. Add more references to surveys to be aggregated. [https://github.com/WardCunningham/assets/blob/master/pages/item-tag-aggregator/aggregate.html github]"
      },
      "after": "d30c931ba3767c5d",
      "attribution": {
        "page": "Consensual Use of Words"
      },
      "date": 1702969785338
    },
    {
      "type": "remove",
      "id": "842731bc3f05aaa5",
      "date": 1702969787715
    },
    {
      "item": {
        "type": "factory",
        "id": "09b2abab28f23dc2"
      },
      "id": "09b2abab28f23dc2",
      "type": "add",
      "after": "8180d3b915aad2bf",
      "date": 1702969884193
    },
    {
      "type": "edit",
      "id": "09b2abab28f23dc2",
      "item": {
        "type": "image",
        "id": "09b2abab28f23dc2",
        "text": "[[Type]]",
        "size": "wide",
        "width": 419,
        "height": 263,
        "url": "/assets/plugins/image/c916d1efee9a39c603f2c15b27a81e53.jpg"
      },
      "date": 1702969907618
    },
    {
      "item": {
        "type": "factory",
        "id": "f367fa97ddce1781"
      },
      "id": "f367fa97ddce1781",
      "type": "add",
      "after": "09b2abab28f23dc2",
      "date": 1702969993359
    },
    {
      "type": "edit",
      "id": "f367fa97ddce1781",
      "item": {
        "type": "paragraph",
        "id": "f367fa97ddce1781",
        "text": "[[Trait]]"
      },
      "date": 1702969997793
    },
    {
      "item": {
        "type": "factory",
        "id": "064ed0e37223156e"
      },
      "id": "064ed0e37223156e",
      "type": "add",
      "after": "f367fa97ddce1781",
      "date": 1702970021449
    },
    {
      "type": "edit",
      "id": "064ed0e37223156e",
      "item": {
        "type": "paragraph",
        "id": "064ed0e37223156e",
        "text": "My instances are the traits used to create traited classes.\nThe traits can be combined in different ways check TaAbstractComposition to see the different possible operations.\n\nI am a subclass of Class, and I implement the specific behavior for traits.\nSo, the traits are polymorphic with classes.\n\nI support stateful traits. \nAlso Traits uses other metaclass to implement the behavior, check MetaclassForTraits. \n\nAlso a nice diagram can be seen evaluating:\n\n((ZnEasy getPng: 'https://raw.githubusercontent.com/wiki/pharo-project/pharo/figures/traits.png') \n\tasMorph resize: 800@800; openInWindow) "
      },
      "date": 1702970023738
    },
    {
      "item": {
        "type": "factory",
        "id": "32d233dd4f18a886"
      },
      "id": "32d233dd4f18a886",
      "type": "add",
      "after": "064ed0e37223156e",
      "date": 1702970028536
    },
    {
      "type": "edit",
      "id": "064ed0e37223156e",
      "item": {
        "type": "paragraph",
        "id": "064ed0e37223156e",
        "text": "My instances are the traits used to create traited classes.\nThe traits can be combined in different ways check TaAbstractComposition to see the different possible operations.\n\nI am a subclass of Class, and I implement the specific behavior for traits.\nSo, the traits are polymorphic with classes.\n\nI support stateful traits. \nAlso Traits uses other metaclass to implement the behavior, check MetaclassForTraits. \n\nAlso a nice diagram can be seen evaluating:"
      },
      "date": 1702970039766
    },
    {
      "type": "edit",
      "id": "32d233dd4f18a886",
      "item": {
        "type": "code",
        "id": "32d233dd4f18a886",
        "text": "((ZnEasy getPng: 'https://raw.githubusercontent.com/wiki/pharo-project/pharo/figures/traits.png') \n\tasMorph resize: 800@800; openInWindow) "
      },
      "date": 1702970040569
    },
    {
      "type": "edit",
      "id": "064ed0e37223156e",
      "item": {
        "type": "paragraph",
        "id": "064ed0e37223156e",
        "text": "My instances are the traits used to create traited classes.\nThe traits can be combined in different ways check TaAbstractComposition to see the different possible operations.\n\nI am a subclass of Class, and I implement the specific behavior for traits.\nSo, the traits are polymorphic with classes.\n\nI support stateful traits. \nAlso Traits uses other metaclass to implement the behavior, check MetaclassForTraits."
      },
      "date": 1702970058669
    },
    {
      "type": "add",
      "id": "9e84052f3380edc8",
      "item": {
        "type": "paragraph",
        "id": "9e84052f3380edc8",
        "text": "Also a nice diagram [https://raw.githubusercontent.com/wiki/pharo-project/pharo/figures/traits.png png] can be seen evaluating:"
      },
      "after": "064ed0e37223156e",
      "date": 1702970068222
    },
    {
      "item": {
        "type": "factory",
        "id": "6531052eb0a968f6"
      },
      "id": "6531052eb0a968f6",
      "type": "add",
      "after": "32d233dd4f18a886",
      "date": 1702970085857
    },
    {
      "type": "edit",
      "id": "6531052eb0a968f6",
      "item": {
        "type": "image",
        "id": "6531052eb0a968f6",
        "text": "Uploaded image",
        "size": "wide",
        "width": 419,
        "height": 198,
        "url": "/assets/plugins/image/9ced74153edefc5ad6e1ef755ccbf0f6.jpg"
      },
      "date": 1702970103866
    },
    {
      "type": "edit",
      "id": "6531052eb0a968f6",
      "item": {
        "type": "image",
        "id": "6531052eb0a968f6",
        "text": "[[Trait]]",
        "size": "wide",
        "width": 419,
        "height": 198,
        "url": "/assets/plugins/image/9ced74153edefc5ad6e1ef755ccbf0f6.jpg"
      },
      "date": 1702970142640
    },
    {
      "id": "c455425d49f08086",
      "type": "remove",
      "removedTo": {
        "page": "TBlScrollable"
      },
      "date": 1702970809054
    },
    {
      "item": {
        "type": "factory",
        "id": "afe769b2dcf69430"
      },
      "id": "afe769b2dcf69430",
      "type": "add",
      "after": "6531052eb0a968f6",
      "date": 1702971463191
    },
    {
      "id": "afe769b2dcf69430",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "c35d84e6fdbd674f",
        "0c532a857d9e689d",
        "a0c7fc4765ba27f1",
        "f9e99fb271f14fa0",
        "0e8d529d62d54475",
        "d30c931ba3767c5d",
        "c8f1e7e76ec906a6",
        "1dd6eb7d9f25a94e",
        "2fdd944f2b5bba27",
        "afe769b2dcf69430",
        "09274e142b1eb9d1",
        "36ef358a59eacafc",
        "1e4a3e9fe6dc8778",
        "e96d3c5ba73d78ea",
        "8180d3b915aad2bf",
        "09b2abab28f23dc2",
        "f367fa97ddce1781",
        "064ed0e37223156e",
        "9e84052f3380edc8",
        "32d233dd4f18a886",
        "6531052eb0a968f6"
      ],
      "date": 1702971470079
    },
    {
      "type": "edit",
      "id": "afe769b2dcf69430",
      "item": {
        "type": "paragraph",
        "id": "afe769b2dcf69430",
        "text": "Tagging of traits with the intention of creating tag maps."
      },
      "date": 1702971471933
    },
    {
      "type": "edit",
      "id": "afe769b2dcf69430",
      "item": {
        "type": "paragraph",
        "id": "afe769b2dcf69430",
        "text": "Tagging of traits with the intention of creating tag maps. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170297099164aWOcX:dreyeck.freedombox.rocks?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]"
      },
      "date": 1702971498922
    },
    {
      "item": {
        "type": "factory",
        "id": "2467b2d39f8b4dbb"
      },
      "id": "2467b2d39f8b4dbb",
      "type": "add",
      "after": "6531052eb0a968f6",
      "date": 1702971536226
    },
    {
      "type": "edit",
      "id": "2467b2d39f8b4dbb",
      "item": {
        "type": "pagefold",
        "id": "2467b2d39f8b4dbb",
        "text": "~"
      },
      "date": 1702971539023
    },
    {
      "item": {
        "type": "factory",
        "id": "23375d522f174002"
      },
      "id": "23375d522f174002",
      "type": "add",
      "after": "2467b2d39f8b4dbb",
      "date": 1702971540514
    },
    {
      "type": "edit",
      "id": "23375d522f174002",
      "item": {
        "type": "paragraph",
        "id": "23375d522f174002",
        "text": "Ward\nWe asked ourselves a while back if there was any value in connecting our sites with the Activity Pub \"fediverse\". I think we concluded that it was a forced-fit. But there is much of that going on so maybe time to think more about this.\n\nI'm unsure what Flipboard is all about but it is held in high regard by folks I admire. They seem to think Flipboard is federating in an admirably careful way. Here are some notes on the process: https://medium.com/@mmccue/flipboard-begins-to-federate-4a80d6bdc209"
      },
      "date": 1702971542899
    },
    {
      "type": "edit",
      "id": "23375d522f174002",
      "item": {
        "type": "paragraph",
        "id": "23375d522f174002",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170296526644250UhOEo:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWe asked ourselves a while back if there was any value in connecting our sites with the Activity Pub \"fediverse\". I think we concluded that it was a forced-fit. But there is much of that going on so maybe time to think more about this.\n\nI'm unsure what Flipboard is all about but it is held in high regard by folks I admire. They seem to think Flipboard is federating in an admirably careful way. Here are some notes on the process: https://medium.com/@mmccue/flipboard-begins-to-federate-4a80d6bdc209"
      },
      "date": 1702971561353
    },
    {
      "type": "edit",
      "id": "23375d522f174002",
      "item": {
        "type": "paragraph",
        "id": "23375d522f174002",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170296526644250UhOEo:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWe asked ourselves a while back if there was any value in connecting our sites with the Activity Pub \"fediverse\". I think we concluded that it was a forced-fit. But there is much of that going on so maybe time to think more about this.\n\nI'm unsure what [[Flipboard]] is all about but it is held in high regard by folks I admire. They seem to think Flipboard is federating in an admirably careful way. Here are some notes on the process: https://medium.com/@mmccue/flipboard-begins-to-federate-4a80d6bdc209"
      },
      "date": 1702971582077
    },
    {
      "item": {
        "type": "factory",
        "id": "2899789fb074916b"
      },
      "id": "2899789fb074916b",
      "type": "add",
      "after": "23375d522f174002",
      "date": 1702973600819
    },
    {
      "id": "2899789fb074916b",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "c35d84e6fdbd674f",
        "0c532a857d9e689d",
        "a0c7fc4765ba27f1",
        "f9e99fb271f14fa0",
        "0e8d529d62d54475",
        "d30c931ba3767c5d",
        "c8f1e7e76ec906a6",
        "1dd6eb7d9f25a94e",
        "2fdd944f2b5bba27",
        "afe769b2dcf69430",
        "2899789fb074916b",
        "09274e142b1eb9d1",
        "36ef358a59eacafc",
        "1e4a3e9fe6dc8778",
        "e96d3c5ba73d78ea",
        "8180d3b915aad2bf",
        "09b2abab28f23dc2",
        "f367fa97ddce1781",
        "064ed0e37223156e",
        "9e84052f3380edc8",
        "32d233dd4f18a886",
        "6531052eb0a968f6",
        "2467b2d39f8b4dbb",
        "23375d522f174002"
      ],
      "date": 1702973609876
    },
    {
      "type": "edit",
      "id": "2899789fb074916b",
      "item": {
        "type": "reference",
        "id": "2899789fb074916b",
        "site": "traits.code.dreyeck.ch",
        "slug": "tag-ontologies",
        "title": "Tag ontologies",
        "text": "It is about time we write down these experiments and thoughts, and research others work to see how they compare. This page is a start."
      },
      "date": 1702973614238
    },
    {
      "type": "edit",
      "id": "d30c931ba3767c5d",
      "item": {
        "type": "reference",
        "id": "d30c931ba3767c5d",
        "site": "ward.dojo.fed.wiki",
        "slug": "dojo-demonstration-tags",
        "title": "Dojo Demonstration Tags",
        "text": "We use simple evocative words to tag paragraphs for quick access to richly complicated ideas [⇒ [[Access to an Idea]]]. This only works when we accept some ambiguity for how we use single words and make some effort to apply words consistently within the corpus we are tagging."
      },
      "date": 1702974440524
    },
    {
      "item": {
        "type": "factory",
        "id": "17a3ce9af69037b5"
      },
      "id": "17a3ce9af69037b5",
      "type": "add",
      "after": "23375d522f174002",
      "date": 1702974719105
    },
    {
      "type": "edit",
      "id": "17a3ce9af69037b5",
      "item": {
        "type": "reference",
        "id": "17a3ce9af69037b5",
        "site": "wiki.ralfbarkow.ch",
        "slug": "som",
        "title": "SOM",
        "text": "Among the architectures and algorithms suggested for artificial neural networks, the Self-Organizing Map has the special property of effectively creating spatially organized \"internal representa­tions\" of various features of input signals and their abstractions."
      },
      "date": 1702974727997
    },
    {
      "id": "17a3ce9af69037b5",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "c35d84e6fdbd674f",
        "0c532a857d9e689d",
        "a0c7fc4765ba27f1",
        "f9e99fb271f14fa0",
        "0e8d529d62d54475",
        "d30c931ba3767c5d",
        "c8f1e7e76ec906a6",
        "1dd6eb7d9f25a94e",
        "2fdd944f2b5bba27",
        "afe769b2dcf69430",
        "2899789fb074916b",
        "17a3ce9af69037b5",
        "09274e142b1eb9d1",
        "36ef358a59eacafc",
        "1e4a3e9fe6dc8778",
        "e96d3c5ba73d78ea",
        "8180d3b915aad2bf",
        "09b2abab28f23dc2",
        "f367fa97ddce1781",
        "064ed0e37223156e",
        "9e84052f3380edc8",
        "32d233dd4f18a886",
        "6531052eb0a968f6",
        "2467b2d39f8b4dbb",
        "23375d522f174002"
      ],
      "date": 1702974743116
    },
    {
      "item": {
        "type": "factory",
        "id": "a3062e85742a97e3"
      },
      "id": "a3062e85742a97e3",
      "type": "add",
      "after": "23375d522f174002",
      "date": 1702977824793
    },
    {
      "type": "edit",
      "id": "a3062e85742a97e3",
      "item": {
        "type": "pagefold",
        "id": "a3062e85742a97e3",
        "text": "~"
      },
      "date": 1702977829188
    },
    {
      "item": {
        "type": "factory",
        "id": "8bbb19dfd232595a"
      },
      "id": "8bbb19dfd232595a",
      "type": "add",
      "after": "a3062e85742a97e3",
      "date": 1702977830557
    },
    {
      "type": "edit",
      "id": "8bbb19dfd232595a",
      "item": {
        "type": "paragraph",
        "id": "8bbb19dfd232595a",
        "text": "ennoausberlin — 17.12.2023 17:10\nHello. I am reading  Simon Wardleys book about Wardley maps and want to understand what the Visible pipelines and Link to features of the Snippet are related to\ntudor girba — 17.12.2023 18:06\nThe concept of a pipeline was created after the book was written and represents an OR.\n\nThe link is about linking a node in the map with another Lepiter page. For examples, this supports the idea that “every node is a map”. But more interesting is that we can link nodes to all sorts of other narratives."
      },
      "date": 1702977832326
    },
    {
      "type": "edit",
      "id": "23375d522f174002",
      "item": {
        "type": "paragraph",
        "id": "23375d522f174002",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170296526644250UhOEo:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix]\nWe asked ourselves a while back if there was any value in connecting our sites with the Activity Pub \"fediverse\". I think we concluded that it was a forced-fit. But there is much of that going on so maybe time to think more about this.\n\nI'm unsure what [[Flipboard]] is all about but …"
      },
      "date": 1702977849792
    },
    {
      "type": "edit",
      "id": "8bbb19dfd232595a",
      "item": {
        "type": "paragraph",
        "id": "8bbb19dfd232595a",
        "text": "ennoausberlin — 17.12.2023 17:10\nHello. I am reading  Simon Wardleys book about Wardley maps and want to understand what the Visible pipelines and Link to features of the Snippet are related to"
      },
      "date": 1702978725631
    },
    {
      "type": "add",
      "id": "0e59d40751465bd9",
      "item": {
        "type": "paragraph",
        "id": "0e59d40751465bd9",
        "text": "tudor girba — 17.12.2023 18:06\nThe concept of a pipeline was created after the book was written and represents an OR.\n\nThe link is about linking a node in the map with another Lepiter page. For examples, this supports the idea that “every node is a map”. But more interesting is that we can link nodes to all sorts of other narratives."
      },
      "after": "8bbb19dfd232595a",
      "date": 1702978726946
    },
    {
      "type": "edit",
      "id": "8bbb19dfd232595a",
      "item": {
        "type": "paragraph",
        "id": "8bbb19dfd232595a",
        "text": "ennoausberlin — 17.12.2023 17:10 via [https://discord.com/channels/729445214812504107/736333725788274819/1185977319354007562 discord]\nHello. I am reading  Simon Wardleys book about Wardley maps and want to understand what the Visible pipelines and Link to features of the Snippet are related to"
      },
      "date": 1702978733564
    },
    {
      "item": {
        "type": "factory",
        "id": "5dad1212305a94b2"
      },
      "id": "5dad1212305a94b2",
      "type": "add",
      "after": "0e59d40751465bd9",
      "date": 1702978773422
    },
    {
      "type": "edit",
      "id": "5dad1212305a94b2",
      "item": {
        "type": "paragraph",
        "id": "5dad1212305a94b2",
        "text": "ennoausberlin\n — \n17.12.2023 18:24\nThat link approach sounds like the idea from the book that a single node in a certain map can be an entire map from another persons perspective. An example lepiter page would be nice to describe these two things\n"
      },
      "date": 1702978775128
    },
    {
      "type": "edit",
      "id": "5dad1212305a94b2",
      "item": {
        "type": "paragraph",
        "id": "5dad1212305a94b2",
        "text": "ennoausberlin\n — \n17.12.2023 18:24 via [https://discord.com/channels/729445214812504107/736333725788274819/1185995901660057672 discord]\nThat link approach sounds like the idea from the book that a single node in a certain map can be an entire map from another persons perspective. An example lepiter page would be nice to describe these two things\n"
      },
      "date": 1702978808258
    },
    {
      "item": {
        "type": "factory",
        "id": "cadfe6aa0863e278"
      },
      "id": "cadfe6aa0863e278",
      "type": "add",
      "after": "5dad1212305a94b2",
      "date": 1702978859266
    },
    {
      "type": "edit",
      "id": "cadfe6aa0863e278",
      "item": {
        "type": "pagefold",
        "id": "cadfe6aa0863e278",
        "text": "~"
      },
      "date": 1702978861727
    },
    {
      "item": {
        "type": "factory",
        "id": "e2c7bfba79c12861"
      },
      "id": "e2c7bfba79c12861",
      "type": "add",
      "after": "cadfe6aa0863e278",
      "date": 1702978863091
    },
    {
      "type": "edit",
      "id": "e2c7bfba79c12861",
      "item": {
        "type": "paragraph",
        "id": "e2c7bfba79c12861",
        "text": "Konrad Hinsen\n — \ngestern um 15:56 Uhr\nWhat's the best way to figure out where generated classes and methods have been generated?\nExample: I am trying to figure out how to get my custom Lepiter annotations handled during HTML export. I started by stepping through the treatment of gtPage annotations, and I ended up looking at trait TLeAnnotationParseNodeVisitor:\nBild"
      },
      "date": 1702978866088
    },
    {
      "type": "edit",
      "id": "e2c7bfba79c12861",
      "item": {
        "type": "paragraph",
        "id": "e2c7bfba79c12861",
        "text": "Konrad Hinsen\n — \ngestern um 15:56 Uhr via [https://discord.com/channels/729445214812504107/736333725788274819/1186321199677054996 discord]\nWhat's the best way to figure out where generated classes and methods have been generated?\nExample: I am trying to figure out how to get my custom Lepiter annotations handled during HTML export. I started by stepping through the treatment of gtPage annotations, and I ended up looking at trait TLeAnnotationParseNodeVisitor:\nBild"
      },
      "date": 1702978885757
    },
    {
      "item": {
        "type": "factory",
        "id": "3d2a66ed8279fb6d"
      },
      "id": "3d2a66ed8279fb6d",
      "type": "add",
      "after": "e2c7bfba79c12861",
      "date": 1702978955396
    },
    {
      "type": "edit",
      "id": "3d2a66ed8279fb6d",
      "item": {
        "type": "html",
        "id": "3d2a66ed8279fb6d",
        "text": "<img src=\"https://media.discordapp.net/attachments/736333725788274819/1186321199190528071/Screenshot_2023-12-18_at_15.56.36.png?ex=6592d2b6&is=65805db6&hm=b8c7db27672ac42dc14c1f864a49cd6b92ea58fe7d503f18f69e5dceac18e0f9&=&format=webp&quality=lossless&width=1232&height=1060\" width=\"100%\">"
      },
      "date": 1702978971093
    },
    {
      "type": "edit",
      "id": "e2c7bfba79c12861",
      "item": {
        "type": "paragraph",
        "id": "e2c7bfba79c12861",
        "text": "Konrad Hinsen\n — \ngestern um 15:56 Uhr via [https://discord.com/channels/729445214812504107/736333725788274819/1186321199677054996 discord]\nWhat's the best way to figure out where generated classes and methods have been generated?\nExample: I am trying to figure out how to get my custom Lepiter annotations handled during [[HTML Export]]. I started by stepping through the treatment of gtPage annotations, and I ended up looking at trait TLeAnnotationParseNodeVisitor:\nBild"
      },
      "date": 1702979033401
    },
    {
      "id": "3d2a66ed8279fb6d",
      "type": "remove",
      "removedTo": {
        "page": "HTML Export"
      },
      "date": 1702979064949
    },
    {
      "type": "edit",
      "id": "e2c7bfba79c12861",
      "item": {
        "type": "paragraph",
        "id": "e2c7bfba79c12861",
        "text": "Konrad Hinsen\n — \ngestern um 15:56 Uhr via [https://discord.com/channels/729445214812504107/736333725788274819/1186321199677054996 discord]\nWhat's the best way to figure out where generated classes and methods have been generated?\nExample: I am trying to figure out how to get my custom Lepiter annotations handled during [[HTML Export]]. I started by stepping through the treatment of gtPage annotations, and I ended up looking at trait TLeAnnotationParseNodeVisitor:\n…"
      },
      "date": 1702979072557
    },
    {
      "item": {
        "type": "factory",
        "id": "ac54ff939eb1e488"
      },
      "id": "ac54ff939eb1e488",
      "type": "add",
      "after": "e2c7bfba79c12861",
      "date": 1702981214705
    },
    {
      "type": "edit",
      "id": "ac54ff939eb1e488",
      "item": {
        "type": "paragraph",
        "id": "ac54ff939eb1e488",
        "text": "[[SmaCCGLRParser]] is an abstract superclass for all GLR generated parsers in SmaCC."
      },
      "date": 1702981225403
    },
    {
      "item": {
        "type": "factory",
        "id": "452c379d7ac97131"
      },
      "id": "452c379d7ac97131",
      "type": "add",
      "after": "ac54ff939eb1e488",
      "date": 1702981568730
    },
    {
      "item": {
        "type": "factory",
        "id": "0c0dc6223aa17d07"
      },
      "id": "0c0dc6223aa17d07",
      "type": "add",
      "after": "452c379d7ac97131",
      "date": 1702981570556
    },
    {
      "type": "edit",
      "id": "452c379d7ac97131",
      "item": {
        "type": "paragraph",
        "id": "452c379d7ac97131",
        "text": "\nIRWIN, Warwick and CHURCHER, Neville, 2001. A generated parser of c++. NZ Journal of Computing. Online. 2001. Vol. 8, no. 3, p. 26–37. Available from: https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=6b4a7298b5a5be39afede5f63b62022674125d54 [Accessed 19 December 2023]. \n"
      },
      "date": 1702981589331
    },
    {
      "type": "edit",
      "id": "452c379d7ac97131",
      "item": {
        "type": "paragraph",
        "id": "452c379d7ac97131",
        "text": "IRWIN, Warwick and CHURCHER, Neville, 2001. A generated parser of c++. NZ Journal of Computing. 2001. Vol. 8, no. 3, p. 26–37. [https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=6b4a7298b5a5be39afede5f63b62022674125d54 page] [Accessed 19 December 2023]. \n"
      },
      "date": 1702981618086
    },
    {
      "type": "edit",
      "id": "452c379d7ac97131",
      "item": {
        "type": "paragraph",
        "id": "452c379d7ac97131",
        "text": "IRWIN, Warwick and CHURCHER, Neville, 2001. A generated parser of c++. NZ Journal of Computing. 2001. Vol. 8, no. 3, p. 26–37. [https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=6b4a7298b5a5be39afede5f63b62022674125d54 pdf] [Accessed 19 December 2023]. \n"
      },
      "date": 1702981628994
    },
    {
      "type": "edit",
      "id": "0c0dc6223aa17d07",
      "item": {
        "type": "paragraph",
        "id": "0c0dc6223aa17d07",
        "text": "We find that Tomita (GLR) parsing – more widely known in the field of [[Natural Language Processing]] is better suited than conventional approaches to the task of parsing C++. A Tomita parser generator requires no artificial modification of the grammar and emits a parser that processes actual C++ source code in nearlinear time and allows syntactic analysis to be separated from semantic analysis."
      },
      "date": 1702981660998
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1702981792311
    },
    {
      "type": "edit",
      "id": "e2c7bfba79c12861",
      "item": {
        "type": "paragraph",
        "id": "e2c7bfba79c12861",
        "text": "Konrad Hinsen via [https://discord.com/channels/729445214812504107/736333725788274819/1186321199677054996 discord]\nWhat's the best way to figure out where generated classes and methods have been generated?\nExample: I am trying to figure out how to get my custom Lepiter annotations handled during [[HTML Export]]. I started by stepping through the treatment of gtPage annotations, and I ended up looking at trait TLeAnnotationParseNodeVisitor:\n…"
      },
      "date": 1702981818957
    },
    {
      "type": "add",
      "id": "a0b9cc20316333f9",
      "item": {
        "type": "paragraph",
        "id": "a0b9cc20316333f9",
        "text": "[19] M. Johnson, “The Computational Complexity of GLR Parsing”, in M. Tomita, Editor, Generalized LR Parsing,Kluwer Academic Publishers, 1991."
      },
      "after": "0c0dc6223aa17d07",
      "date": 1702981942910
    },
    {
      "item": {
        "type": "factory",
        "id": "612eb68e025cfe11"
      },
      "id": "612eb68e025cfe11",
      "type": "add",
      "after": "a0b9cc20316333f9",
      "date": 1702982425497
    },
    {
      "type": "edit",
      "id": "612eb68e025cfe11",
      "item": {
        "type": "paragraph",
        "id": "612eb68e025cfe11",
        "text": "TOMITA, Masaru, 1991. Generalized LR parsing. Springer Science & Business Media. Available from: https://books.google.ch/books?hl=de&lr=&id=PvZiZiVqwHcC&oi=fnd&pg=PR7&dq=%5B19%5D+M.+Johnson,+%E2%80%9CThe+Computational+Complexity+of+GLR+Parsing%E2%80%9D,+in+M.+Tomita,+Editor,+Generalized+LR+Parsing,Kluwer+Academic+Publishers,+1991.&ots=dwxeicjKSO&sig=CgRd0rAD0ysbKpCUFRfPimCKS64 [Accessed 19 December 2023]. \n"
      },
      "date": 1702982435301
    },
    {
      "type": "edit",
      "id": "612eb68e025cfe11",
      "item": {
        "type": "paragraph",
        "id": "612eb68e025cfe11",
        "text": "TOMITA, Masaru, 1991. Generalized LR parsing. Springer Science & Business Media. [Accessed 19 December 2023]. \n"
      },
      "date": 1702982453111
    },
    {
      "type": "edit",
      "id": "a0b9cc20316333f9",
      "item": {
        "type": "paragraph",
        "id": "a0b9cc20316333f9",
        "text": "[19] M. Johnson, “The Computational Complexity of GLR Parsing”, in M. Tomita, Editor, [[Generalized LR Parsing]], Kluwer Academic Publishers, 1991."
      },
      "date": 1702982498169
    },
    {
      "id": "612eb68e025cfe11",
      "type": "remove",
      "removedTo": {
        "page": "Generalized LR Parsing"
      },
      "date": 1702982517613
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1702983971624
    },
    {
      "type": "edit",
      "id": "36ef358a59eacafc",
      "item": {
        "type": "paragraph",
        "id": "36ef358a59eacafc",
        "text": "[[RGTraitDefinition]] is the concrete representation of a trait (no class)"
      },
      "date": 1702985824837
    },
    {
      "item": {
        "type": "factory",
        "id": "ea960eeb4b9ef3a4"
      },
      "id": "ea960eeb4b9ef3a4",
      "type": "add",
      "after": "a0b9cc20316333f9",
      "date": 1702986511716
    },
    {
      "type": "edit",
      "id": "ea960eeb4b9ef3a4",
      "item": {
        "type": "pagefold",
        "id": "ea960eeb4b9ef3a4",
        "text": "~"
      },
      "date": 1702986515980
    },
    {
      "item": {
        "type": "factory",
        "id": "c9395e9efc055286"
      },
      "id": "c9395e9efc055286",
      "type": "add",
      "after": "ea960eeb4b9ef3a4",
      "date": 1702986523008
    },
    {
      "type": "edit",
      "id": "c9395e9efc055286",
      "item": {
        "type": "paragraph",
        "id": "c9395e9efc055286",
        "text": "Carmen Armenti — 07.10.2023 19:57\nI have a class which extends BlParallelAnimation that allows me to achieve the animation in the video attached. Nothing more than what BlParallelAnimation would allow me to do, but I meant to synchronise other events to the animations - reason why I created a subclass -, one for each animation added to BlParallelAnimation. Before doing that I wanted to understand thoroughly how a BlParallelAnimation works. So I created a subclass overriding the method doStep - method that as far as I understood is the one that runs the animations added to a BlParallelAnimation - and I added a Transcript show to it. The thing is I was expecting to have in the Transcript one timestamp for each animation is in BlParallelAnimation, but I get more than the number of animations, it seems to print the timestamp of each update"
      },
      "date": 1702986526721
    },
    {
      "type": "edit",
      "id": "c9395e9efc055286",
      "item": {
        "type": "paragraph",
        "id": "c9395e9efc055286",
        "text": "Carmen Armenti via [https://discord.com/channels/729445214812504107/769202224299245568/1160274819330355250 discord]\nI have a class which extends BlParallelAnimation that allows me to achieve the animation in the video attached. Nothing more than what BlParallelAnimation would allow me to do, but I meant to synchronise other events to the animations - reason why I created a subclass -, one for each animation added to BlParallelAnimation. Before doing that I wanted to understand thoroughly how a BlParallelAnimation works. So I created a subclass overriding the method doStep - method that as far as I understood is the one that runs the animations added to a BlParallelAnimation - and I added a Transcript show to it. The thing is I was expecting to have in the Transcript one timestamp for each animation is in BlParallelAnimation, but I get more than the number of animations, it seems to print the timestamp of each update"
      },
      "date": 1702986544856
    },
    {
      "type": "edit",
      "id": "c9395e9efc055286",
      "item": {
        "type": "paragraph",
        "id": "c9395e9efc055286",
        "text": "Carmen Armenti via [https://discord.com/channels/729445214812504107/769202224299245568/1160274819330355250 discord]\nI have a class which extends [[BlParallelAnimation]] that allows me to achieve the animation in the video attached. Nothing more than what BlParallelAnimation would allow me to do, but I meant to synchronise other events to the animations - reason why I created a subclass -, one for each animation added to BlParallelAnimation. Before doing that I wanted to understand thoroughly how a BlParallelAnimation works. So I created a subclass overriding the method doStep - method that as far as I understood is the one that runs the animations added to a BlParallelAnimation - and I added a Transcript show to it. The thing is I was expecting to have in the Transcript one timestamp for each animation is in BlParallelAnimation, but I get more than the number of animations, it seems to print the timestamp of each update"
      },
      "date": 1702986558894
    },
    {
      "item": {
        "type": "factory",
        "id": "809debcdd912ed8e"
      },
      "id": "809debcdd912ed8e",
      "type": "add",
      "after": "c9395e9efc055286",
      "date": 1702986611303
    },
    {
      "type": "edit",
      "id": "809debcdd912ed8e",
      "item": {
        "type": "video",
        "id": "809debcdd912ed8e",
        "text": "HTML5 mp4 https://cdn.discordapp.com/attachments/769202224299245568/1160274818466328656/BlParallelAnimation.mov?ex=65905a21&is=657de521&hm=1e1bec1507cf213ce96f785ac72a6997cfcfe69eab2e6fbce3b37456627d0367&"
      },
      "date": 1702986619256
    },
    {
      "type": "edit",
      "id": "c9395e9efc055286",
      "item": {
        "type": "paragraph",
        "id": "c9395e9efc055286",
        "text": "Carmen Armenti via [https://discord.com/channels/729445214812504107/769202224299245568/1160274819330355250 discord]\nI have a class which extends [[BlParallelAnimation]] that allows me to achieve the animation in the video attached."
      },
      "date": 1702986638210
    },
    {
      "type": "add",
      "id": "f4b42e0530b539e3",
      "item": {
        "type": "paragraph",
        "id": "f4b42e0530b539e3",
        "text": "Nothing more than what BlParallelAnimation would allow me to do, but I meant to synchronise other events to the animations - reason why I created a subclass -, one for each animation added to BlParallelAnimation. Before doing that I wanted to understand thoroughly how a BlParallelAnimation works. So I created a subclass overriding the method doStep - method that as far as I understood is the one that runs the animations added to a BlParallelAnimation - and I added a Transcript show to it. The thing is I was expecting to have in the Transcript one timestamp for each animation is in BlParallelAnimation, but I get more than the number of animations, it seems to print the timestamp of each update"
      },
      "after": "c9395e9efc055286",
      "date": 1702986639034
    },
    {
      "id": "809debcdd912ed8e",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "c35d84e6fdbd674f",
        "0c532a857d9e689d",
        "a0c7fc4765ba27f1",
        "f9e99fb271f14fa0",
        "0e8d529d62d54475",
        "d30c931ba3767c5d",
        "c8f1e7e76ec906a6",
        "1dd6eb7d9f25a94e",
        "2fdd944f2b5bba27",
        "afe769b2dcf69430",
        "2899789fb074916b",
        "17a3ce9af69037b5",
        "09274e142b1eb9d1",
        "36ef358a59eacafc",
        "1e4a3e9fe6dc8778",
        "e96d3c5ba73d78ea",
        "8180d3b915aad2bf",
        "09b2abab28f23dc2",
        "f367fa97ddce1781",
        "064ed0e37223156e",
        "9e84052f3380edc8",
        "32d233dd4f18a886",
        "6531052eb0a968f6",
        "2467b2d39f8b4dbb",
        "23375d522f174002",
        "a3062e85742a97e3",
        "8bbb19dfd232595a",
        "0e59d40751465bd9",
        "5dad1212305a94b2",
        "cadfe6aa0863e278",
        "e2c7bfba79c12861",
        "ac54ff939eb1e488",
        "452c379d7ac97131",
        "0c0dc6223aa17d07",
        "a0b9cc20316333f9",
        "ea960eeb4b9ef3a4",
        "c9395e9efc055286",
        "809debcdd912ed8e",
        "f4b42e0530b539e3"
      ],
      "date": 1702986645312
    },
    {
      "type": "edit",
      "id": "f4b42e0530b539e3",
      "item": {
        "type": "paragraph",
        "id": "f4b42e0530b539e3",
        "text": "Nothing more than what BlParallelAnimation would allow me to do, but I meant to synchronise other events to the animations - reason why I created a subclass -, one for each animation added to BlParallelAnimation. Before doing that I wanted to understand thoroughly how a BlParallelAnimation works. So I created a subclass overriding the method doStep - method that as far as I understood is the one that runs the animations added to a BlParallelAnimation - and I added a Transcript show to it. The thing is I was expecting to have in the Transcript one timestamp for each animation is in BlParallelAnimation, but I get more than the number of animations, it seems to print the timestamp of each update."
      },
      "date": 1702986789898
    },
    {
      "type": "add",
      "id": "a52bcf887d4f5701",
      "item": {
        "type": "paragraph",
        "id": "a52bcf887d4f5701",
        "text": "botwhytho — 07.10.2023 23:20\nThanks for posting video. Still not clear what the issue is. Is the issue synchronizing animations with sound?  To your earlier message about animations with delay, seems like you have that working and there are examples in the image that do this (see BlAnimationExamples>>#bouncingText).\nI'd consider using Announcements and event handlers to trigger different things and keep them in sync. Have you used these before?"
      },
      "after": "f4b42e0530b539e3",
      "date": 1702986812433
    },
    {
      "type": "edit",
      "id": "a52bcf887d4f5701",
      "item": {
        "type": "paragraph",
        "id": "a52bcf887d4f5701",
        "text": "botwhytho via [https://discord.com/channels/729445214812504107/769202224299245568/1160325750705098782 discord]\nThanks for posting video. Still not clear what the issue is. Is the issue synchronizing animations with sound?  To your earlier message about animations with delay, seems like you have that working and there are examples in the image that do this (see BlAnimationExamples>>#bouncingText).\nI'd consider using Announcements and event handlers to trigger different things and keep them in sync. Have you used these before?"
      },
      "date": 1702986836373
    },
    {
      "type": "edit",
      "id": "a52bcf887d4f5701",
      "item": {
        "type": "paragraph",
        "id": "a52bcf887d4f5701",
        "text": "botwhytho via [https://discord.com/channels/729445214812504107/769202224299245568/1160325750705098782 discord]\nThanks for posting video. Still not clear what the issue is. Is the issue synchronizing animations with sound?  To your earlier message about animations with delay, seems like you have that working and there are examples in the image that do this (see [[BlAnimationExamples]]>>#bouncingText).\nI'd consider using Announcements and event handlers to trigger different things and keep them in sync. Have you used these before?"
      },
      "date": 1702986874581
    },
    {
      "id": "797d77d7c2ef8c85",
      "type": "add",
      "item": {
        "type": "video",
        "id": "797d77d7c2ef8c85",
        "text": "HTML5 mp4 https://wiki.ralfbarkow.ch/assets/pages/blanimationexamples/BlAnimationExamples.mov\nbouncingText"
      },
      "after": "a52bcf887d4f5701",
      "attribution": {
        "page": "BlAnimationExamples"
      },
      "date": 1702987737451
    },
    {
      "type": "edit",
      "id": "809debcdd912ed8e",
      "item": {
        "type": "video",
        "id": "809debcdd912ed8e",
        "text": "HTML5 mp4 https://cdn.discordapp.com/attachments/769202224299245568/1160274818466328656/BlParallelAnimation.mov?ex=65905a21&is=657de521&hm=1e1bec1507cf213ce96f785ac72a6997cfcfe69eab2e6fbce3b37456627d0367&\n[[BlParallelAnimation]] "
      },
      "date": 1702987779761
    },
    {
      "id": "797d77d7c2ef8c85",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "c35d84e6fdbd674f",
        "0c532a857d9e689d",
        "a0c7fc4765ba27f1",
        "f9e99fb271f14fa0",
        "0e8d529d62d54475",
        "d30c931ba3767c5d",
        "c8f1e7e76ec906a6",
        "1dd6eb7d9f25a94e",
        "2fdd944f2b5bba27",
        "afe769b2dcf69430",
        "2899789fb074916b",
        "17a3ce9af69037b5",
        "09274e142b1eb9d1",
        "36ef358a59eacafc",
        "1e4a3e9fe6dc8778",
        "e96d3c5ba73d78ea",
        "8180d3b915aad2bf",
        "09b2abab28f23dc2",
        "f367fa97ddce1781",
        "064ed0e37223156e",
        "9e84052f3380edc8",
        "32d233dd4f18a886",
        "6531052eb0a968f6",
        "2467b2d39f8b4dbb",
        "23375d522f174002",
        "a3062e85742a97e3",
        "8bbb19dfd232595a",
        "0e59d40751465bd9",
        "5dad1212305a94b2",
        "cadfe6aa0863e278",
        "e2c7bfba79c12861",
        "ac54ff939eb1e488",
        "452c379d7ac97131",
        "0c0dc6223aa17d07",
        "a0b9cc20316333f9",
        "ea960eeb4b9ef3a4",
        "c9395e9efc055286",
        "809debcdd912ed8e",
        "f4b42e0530b539e3",
        "797d77d7c2ef8c85",
        "a52bcf887d4f5701"
      ],
      "date": 1702988156688
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1702988207603
    },
    {
      "item": {
        "type": "factory",
        "id": "2616e22274ce2b36"
      },
      "id": "2616e22274ce2b36",
      "type": "add",
      "after": "a52bcf887d4f5701",
      "date": 1702988937862
    },
    {
      "type": "edit",
      "id": "2616e22274ce2b36",
      "item": {
        "type": "pagefold",
        "id": "2616e22274ce2b36",
        "text": "~"
      },
      "date": 1702988947462
    },
    {
      "id": "09b2abab28f23dc2",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "c35d84e6fdbd674f",
        "0c532a857d9e689d",
        "a0c7fc4765ba27f1",
        "f9e99fb271f14fa0",
        "0e8d529d62d54475",
        "d30c931ba3767c5d",
        "c8f1e7e76ec906a6",
        "1dd6eb7d9f25a94e",
        "2fdd944f2b5bba27",
        "afe769b2dcf69430",
        "2899789fb074916b",
        "17a3ce9af69037b5",
        "09274e142b1eb9d1",
        "36ef358a59eacafc",
        "1e4a3e9fe6dc8778",
        "e96d3c5ba73d78ea",
        "8180d3b915aad2bf",
        "f367fa97ddce1781",
        "064ed0e37223156e",
        "9e84052f3380edc8",
        "32d233dd4f18a886",
        "6531052eb0a968f6",
        "2467b2d39f8b4dbb",
        "23375d522f174002",
        "a3062e85742a97e3",
        "8bbb19dfd232595a",
        "0e59d40751465bd9",
        "5dad1212305a94b2",
        "cadfe6aa0863e278",
        "e2c7bfba79c12861",
        "ac54ff939eb1e488",
        "452c379d7ac97131",
        "0c0dc6223aa17d07",
        "a0b9cc20316333f9",
        "ea960eeb4b9ef3a4",
        "c9395e9efc055286",
        "809debcdd912ed8e",
        "f4b42e0530b539e3",
        "797d77d7c2ef8c85",
        "a52bcf887d4f5701",
        "09b2abab28f23dc2",
        "2616e22274ce2b36"
      ],
      "date": 1702988977964
    },
    {
      "id": "2616e22274ce2b36",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "c35d84e6fdbd674f",
        "0c532a857d9e689d",
        "a0c7fc4765ba27f1",
        "f9e99fb271f14fa0",
        "0e8d529d62d54475",
        "d30c931ba3767c5d",
        "c8f1e7e76ec906a6",
        "1dd6eb7d9f25a94e",
        "2fdd944f2b5bba27",
        "afe769b2dcf69430",
        "2899789fb074916b",
        "17a3ce9af69037b5",
        "09274e142b1eb9d1",
        "36ef358a59eacafc",
        "1e4a3e9fe6dc8778",
        "e96d3c5ba73d78ea",
        "8180d3b915aad2bf",
        "f367fa97ddce1781",
        "064ed0e37223156e",
        "9e84052f3380edc8",
        "32d233dd4f18a886",
        "6531052eb0a968f6",
        "2467b2d39f8b4dbb",
        "23375d522f174002",
        "a3062e85742a97e3",
        "8bbb19dfd232595a",
        "0e59d40751465bd9",
        "5dad1212305a94b2",
        "cadfe6aa0863e278",
        "e2c7bfba79c12861",
        "ac54ff939eb1e488",
        "452c379d7ac97131",
        "0c0dc6223aa17d07",
        "a0b9cc20316333f9",
        "ea960eeb4b9ef3a4",
        "c9395e9efc055286",
        "809debcdd912ed8e",
        "f4b42e0530b539e3",
        "797d77d7c2ef8c85",
        "a52bcf887d4f5701",
        "2616e22274ce2b36",
        "09b2abab28f23dc2"
      ],
      "date": 1702988987552
    },
    {
      "item": {
        "type": "factory",
        "id": "0f52d75cd616b75d"
      },
      "id": "0f52d75cd616b75d",
      "type": "add",
      "after": "09b2abab28f23dc2",
      "date": 1702989030808
    },
    {
      "type": "edit",
      "id": "0f52d75cd616b75d",
      "item": {
        "type": "paragraph",
        "id": "0f52d75cd616b75d",
        "text": "Types and Traits …"
      },
      "date": 1702989040158
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1702989261570
    },
    {
      "item": {
        "type": "factory",
        "id": "e6c25959bcfc8e30"
      },
      "id": "e6c25959bcfc8e30",
      "type": "add",
      "after": "0f52d75cd616b75d",
      "date": 1702990339246
    },
    {
      "type": "edit",
      "id": "e6c25959bcfc8e30",
      "item": {
        "type": "image",
        "id": "e6c25959bcfc8e30",
        "text": "Uploaded image",
        "size": "wide",
        "width": 430,
        "height": 268,
        "url": "/assets/plugins/image/6ce76d65062993522b08752ec6860e20.jpg"
      },
      "date": 1702990371683
    },
    {
      "item": {
        "type": "factory",
        "id": "1a2c599509f97f88"
      },
      "id": "1a2c599509f97f88",
      "type": "add",
      "after": "e6c25959bcfc8e30",
      "date": 1702990402399
    },
    {
      "type": "edit",
      "id": "1a2c599509f97f88",
      "item": {
        "type": "paragraph",
        "id": "1a2c599509f97f88",
        "text": "[[CDTImporterType]]>>#messageType"
      },
      "date": 1702990411300
    },
    {
      "type": "edit",
      "id": "e6c25959bcfc8e30",
      "item": {
        "type": "image",
        "id": "e6c25959bcfc8e30",
        "text": "Type Comment",
        "size": "wide",
        "width": 430,
        "height": 268,
        "url": "/assets/plugins/image/6ce76d65062993522b08752ec6860e20.jpg"
      },
      "date": 1702990432978
    },
    {
      "item": {
        "type": "factory",
        "id": "c596c7dbee6d33db"
      },
      "id": "c596c7dbee6d33db",
      "type": "add",
      "after": "1a2c599509f97f88",
      "date": 1702990437829
    },
    {
      "id": "c596c7dbee6d33db",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "c35d84e6fdbd674f",
        "0c532a857d9e689d",
        "a0c7fc4765ba27f1",
        "f9e99fb271f14fa0",
        "0e8d529d62d54475",
        "d30c931ba3767c5d",
        "c8f1e7e76ec906a6",
        "1dd6eb7d9f25a94e",
        "2fdd944f2b5bba27",
        "afe769b2dcf69430",
        "2899789fb074916b",
        "17a3ce9af69037b5",
        "09274e142b1eb9d1",
        "36ef358a59eacafc",
        "1e4a3e9fe6dc8778",
        "e96d3c5ba73d78ea",
        "8180d3b915aad2bf",
        "f367fa97ddce1781",
        "064ed0e37223156e",
        "9e84052f3380edc8",
        "32d233dd4f18a886",
        "6531052eb0a968f6",
        "2467b2d39f8b4dbb",
        "23375d522f174002",
        "a3062e85742a97e3",
        "8bbb19dfd232595a",
        "0e59d40751465bd9",
        "5dad1212305a94b2",
        "cadfe6aa0863e278",
        "e2c7bfba79c12861",
        "ac54ff939eb1e488",
        "452c379d7ac97131",
        "0c0dc6223aa17d07",
        "a0b9cc20316333f9",
        "ea960eeb4b9ef3a4",
        "c9395e9efc055286",
        "809debcdd912ed8e",
        "f4b42e0530b539e3",
        "797d77d7c2ef8c85",
        "a52bcf887d4f5701",
        "2616e22274ce2b36",
        "09b2abab28f23dc2",
        "0f52d75cd616b75d",
        "e6c25959bcfc8e30",
        "c596c7dbee6d33db",
        "1a2c599509f97f88"
      ],
      "date": 1702990440433
    },
    {
      "type": "edit",
      "id": "c596c7dbee6d33db",
      "item": {
        "type": "paragraph",
        "id": "c596c7dbee6d33db",
        "text": "References:"
      },
      "date": 1702990443878
    },
    {
      "type": "add",
      "id": "bab74663f0723154",
      "item": {
        "type": "paragraph",
        "id": "bab74663f0723154",
        "text": "[[SmaCCRewrite]]>>#matchPresenter"
      },
      "after": "1a2c599509f97f88",
      "date": 1702990495918
    },
    {
      "type": "edit",
      "id": "bab74663f0723154",
      "item": {
        "type": "paragraph",
        "id": "bab74663f0723154",
        "text": "[[SmaCCRewrite]]>>#matchPresenter ⇒ [[SpNotebookPresenter]]"
      },
      "date": 1702990514805
    },
    {
      "item": {
        "type": "factory",
        "id": "8feec19dddec310b"
      },
      "id": "8feec19dddec310b",
      "type": "add",
      "after": "bab74663f0723154",
      "date": 1702990636354
    },
    {
      "type": "edit",
      "id": "8feec19dddec310b",
      "item": {
        "type": "code",
        "id": "8feec19dddec310b",
        "text": "matchPresenter\n\t| notebook code pattern index |\n\tmatch class type = #Type\n\t\tifTrue:\n\t\t\t[ index := 1.\n\t\t\tcode := match.\n\t\t\tpattern := SmaCCRewriteTreeMatch new ]\n\t\tifFalse:\n\t\t\t[ index := 2.\n\t\t\tcode := SmaCCRewriteTypeMatch new.\n\t\t\tpattern := match ].\n\tnotebook := SpNotebookPresenter new.\n\tnotebook addPage: (SpNotebookPage title: 'Code' provider: [ self matchCodePresenterFor: code ]).\n\tnotebook addPage: (SpNotebookPage title: 'Pattern' provider: [ self matchPatternPresenterFor: pattern ]).\n\tnotebook selectPageIndex: index.\n\tnotebook\n\t\twhenSelectedPageChangedDo: [ :each | self match: (notebook selectedPageIndex = 1 ifTrue: [ code ] ifFalse: [ pattern ]) ].\n\t^ notebook"
      },
      "date": 1702990638576
    },
    {
      "item": {
        "type": "factory",
        "id": "5603b7f2e511928c"
      },
      "id": "5603b7f2e511928c",
      "type": "add",
      "after": "8feec19dddec310b",
      "date": 1702990665929
    },
    {
      "type": "edit",
      "id": "5603b7f2e511928c",
      "item": {
        "type": "paragraph",
        "id": "5603b7f2e511928c",
        "text": "⇒ [[Provider]]"
      },
      "date": 1702990677014
    },
    {
      "item": {
        "type": "factory",
        "id": "c5d0b2bc34e58c86"
      },
      "id": "c5d0b2bc34e58c86",
      "type": "add",
      "after": "5603b7f2e511928c",
      "date": 1702990719869
    },
    {
      "type": "edit",
      "id": "c5d0b2bc34e58c86",
      "item": {
        "type": "paragraph",
        "id": "c5d0b2bc34e58c86",
        "text": "[[SmaCCRewriteTypeMatch]] class>>#type"
      },
      "date": 1702990729228
    },
    {
      "type": "add",
      "id": "490f9e4254a95f22",
      "item": {
        "type": "paragraph",
        "id": "490f9e4254a95f22",
        "text": "[[WinitMainThreadEventLoop>>#gtInfoFor:"
      },
      "after": "c5d0b2bc34e58c86",
      "date": 1702990752007
    },
    {
      "type": "edit",
      "id": "490f9e4254a95f22",
      "item": {
        "type": "paragraph",
        "id": "490f9e4254a95f22",
        "text": "[[WinitMainThreadEventLoop]]>>#gtInfoFor:"
      },
      "date": 1702990772800
    },
    {
      "item": {
        "type": "factory",
        "id": "4961f7f4879c5036"
      },
      "id": "4961f7f4879c5036",
      "type": "add",
      "after": "490f9e4254a95f22",
      "date": 1702990780559
    },
    {
      "type": "edit",
      "id": "4961f7f4879c5036",
      "item": {
        "type": "code",
        "id": "4961f7f4879c5036",
        "text": "gtInfoFor: aView\n\t<gtView>\n\n\t^ ({\n\t\t#'Type' -> self type.\n\t\t#'Redraw listeners' -> self amountOfRedrawListeners.\n\t\t#'Resize listeners' -> self amountOfResizeListeners.\n\t } asOrderedDictionary gtItemsFor: aView)\n\t\t\ttitle: 'Info';\n\t\t\tpriority: 7"
      },
      "date": 1702990782474
    },
    {
      "item": {
        "type": "factory",
        "id": "43c892c58f632b4d"
      },
      "id": "43c892c58f632b4d",
      "type": "add",
      "after": "4961f7f4879c5036",
      "date": 1702990856499
    },
    {
      "type": "edit",
      "id": "43c892c58f632b4d",
      "item": {
        "type": "paragraph",
        "id": "43c892c58f632b4d",
        "text": "⇒ [[Glutin]]"
      },
      "date": 1702990864959
    },
    {
      "type": "edit",
      "id": "c596c7dbee6d33db",
      "item": {
        "type": "paragraph",
        "id": "c596c7dbee6d33db",
        "text": "# References"
      },
      "date": 1702990975885
    },
    {
      "type": "edit",
      "id": "c596c7dbee6d33db",
      "item": {
        "type": "markdown",
        "id": "c596c7dbee6d33db",
        "text": "# References"
      },
      "date": 1702990977233
    },
    {
      "item": {
        "type": "factory",
        "id": "faff741fd0a7f6df"
      },
      "id": "faff741fd0a7f6df",
      "type": "add",
      "after": "43c892c58f632b4d",
      "date": 1702991066114
    },
    {
      "type": "edit",
      "id": "faff741fd0a7f6df",
      "item": {
        "type": "image",
        "id": "faff741fd0a7f6df",
        "text": "Type References",
        "size": "wide",
        "width": 430,
        "height": 269,
        "url": "/assets/plugins/image/49fd0a1eae838a966886f2120056c04f.jpg"
      },
      "date": 1702991079135
    },
    {
      "item": {
        "type": "factory",
        "id": "b00f14b7be2bc77c"
      },
      "id": "b00f14b7be2bc77c",
      "type": "add",
      "after": "faff741fd0a7f6df",
      "date": 1702991495153
    },
    {
      "item": {
        "type": "factory",
        "id": "502f23a565f51a5f"
      },
      "id": "502f23a565f51a5f",
      "type": "add",
      "after": "b00f14b7be2bc77c",
      "date": 1702991499898
    },
    {
      "type": "edit",
      "id": "502f23a565f51a5f",
      "item": {
        "type": "image",
        "id": "502f23a565f51a5f",
        "text": "Uploaded image",
        "size": "wide",
        "width": 430,
        "height": 269,
        "url": "/assets/plugins/image/41795b39bc44fa0c666b7063fbd13c71.jpg"
      },
      "date": 1702991510281
    },
    {
      "type": "edit",
      "id": "502f23a565f51a5f",
      "item": {
        "type": "image",
        "id": "502f23a565f51a5f",
        "text": "[[SmaCCParserError]]: Token not expected",
        "size": "wide",
        "width": 430,
        "height": 269,
        "url": "/assets/plugins/image/41795b39bc44fa0c666b7063fbd13c71.jpg"
      },
      "date": 1702991525284
    },
    {
      "type": "edit",
      "id": "502f23a565f51a5f",
      "item": {
        "type": "image",
        "id": "502f23a565f51a5f",
        "text": "[[SmaCCParserError]]: [[Token]] not expected",
        "size": "wide",
        "width": 430,
        "height": 269,
        "url": "/assets/plugins/image/41795b39bc44fa0c666b7063fbd13c71.jpg"
      },
      "date": 1702991531923
    },
    {
      "item": {
        "type": "factory",
        "id": "04f12abab9185aef"
      },
      "id": "04f12abab9185aef",
      "type": "add",
      "after": "502f23a565f51a5f",
      "date": 1702991647411
    },
    {
      "type": "edit",
      "id": "04f12abab9185aef",
      "item": {
        "type": "image",
        "id": "04f12abab9185aef",
        "text": "Uploaded image",
        "size": "wide",
        "width": 430,
        "height": 268,
        "url": "/assets/plugins/image/9a19f2450a5e2956eaf3a6ca65a980e3.jpg"
      },
      "date": 1702991654976
    },
    {
      "type": "edit",
      "id": "04f12abab9185aef",
      "item": {
        "type": "image",
        "id": "04f12abab9185aef",
        "text": "[[glr]]",
        "size": "wide",
        "width": 430,
        "height": 268,
        "url": "/assets/plugins/image/9a19f2450a5e2956eaf3a6ca65a980e3.jpg"
      },
      "date": 1702991673645
    },
    {
      "type": "edit",
      "id": "04f12abab9185aef",
      "item": {
        "type": "image",
        "id": "04f12abab9185aef",
        "text": "[[GLR]",
        "size": "wide",
        "width": 430,
        "height": 268,
        "url": "/assets/plugins/image/9a19f2450a5e2956eaf3a6ca65a980e3.jpg"
      },
      "date": 1702991683080
    },
    {
      "type": "edit",
      "id": "04f12abab9185aef",
      "item": {
        "type": "image",
        "id": "04f12abab9185aef",
        "text": "[[GLR]]",
        "size": "wide",
        "width": 430,
        "height": 268,
        "url": "/assets/plugins/image/9a19f2450a5e2956eaf3a6ca65a980e3.jpg"
      },
      "date": 1702991687919
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1702991800916
    },
    {
      "type": "edit",
      "id": "5dad1212305a94b2",
      "item": {
        "type": "paragraph",
        "id": "5dad1212305a94b2",
        "text": "ennoausberlin\n — \n17.12.2023 18:24 via [https://discord.com/channels/729445214812504107/736333725788274819/1185995901660057672 discord]\nThat link approach sounds like the idea from the book that a single node in a certain map can be an entire map from another persons [[Perspective]]. An example lepiter page would be nice to describe these two things\n"
      },
      "date": 1702991868796
    },
    {
      "type": "edit",
      "id": "5dad1212305a94b2",
      "item": {
        "type": "paragraph",
        "id": "5dad1212305a94b2",
        "text": "ennoausberlin\n — \n17.12.2023 18:24 via [https://discord.com/channels/729445214812504107/736333725788274819/1185995901660057672 discord]\nThat link approach sounds like the idea from the book that a single node in a certain map can be an entire map from another persons [[Perspective]]. An example lepiter page would be nice to describe these two things.\n"
      },
      "date": 1702991876687
    },
    {
      "type": "edit",
      "id": "5dad1212305a94b2",
      "item": {
        "type": "paragraph",
        "id": "5dad1212305a94b2",
        "text": "ennoausberlin\n — \n17.12.2023 18:24 via [https://discord.com/channels/729445214812504107/736333725788274819/1185995901660057672 discord]\nThat link approach sounds like the idea from the book that a single node in a certain map can be an entire map from another persons [[Perspective]]. An example lepiter page would be nice to describe these two things. >> perspective\n"
      },
      "date": 1702991922763
    },
    {
      "type": "edit",
      "id": "b00f14b7be2bc77c",
      "item": {
        "type": "pagefold",
        "id": "b00f14b7be2bc77c",
        "text": "~"
      },
      "date": 1702991942998
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1702992166430
    },
    {
      "item": {
        "type": "factory",
        "id": "74f3a3437e6ef204"
      },
      "id": "74f3a3437e6ef204",
      "type": "add",
      "after": "04f12abab9185aef",
      "date": 1702992188214
    },
    {
      "type": "edit",
      "id": "74f3a3437e6ef204",
      "item": {
        "type": "paragraph",
        "id": "74f3a3437e6ef204",
        "text": "Die Idee wäre, alle Snippet Types zunächst als Code aufzufassen. Und bei Enttäuschung der Erwartung auf Text (oder einen der anderen Types) zurückzufallen."
      },
      "date": 1702992239170
    },
    {
      "type": "edit",
      "id": "74f3a3437e6ef204",
      "item": {
        "type": "paragraph",
        "id": "74f3a3437e6ef204",
        "text": "The idea would be to initially treat all snippet types as code. And to fall back on text (or one of the other types) if the expectation is disappointed."
      },
      "date": 1702992253361
    },
    {
      "type": "edit",
      "id": "74f3a3437e6ef204",
      "item": {
        "type": "paragraph",
        "id": "74f3a3437e6ef204",
        "text": "The idea would be to initially treat all snippet types as code. And to fall back on text (or one of the other types) if the expectation is disappointed ([Token]] not expected)."
      },
      "date": 1702992285794
    },
    {
      "type": "edit",
      "id": "74f3a3437e6ef204",
      "item": {
        "type": "paragraph",
        "id": "74f3a3437e6ef204",
        "text": "The idea would be to initially treat all snippet types as code. And to fall back on text (or one of the other types) if the expectation is disappointed ([[Token]] not expected)."
      },
      "date": 1702992291462
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1702992326318
    },
    {
      "type": "edit",
      "id": "74f3a3437e6ef204",
      "item": {
        "type": "paragraph",
        "id": "74f3a3437e6ef204",
        "text": "The idea would be to initially treat all snippet types as code. And to fall back on text (or any of the other types) if the expectation is disappointed ([[Token]] not expected)."
      },
      "date": 1702992409459
    },
    {
      "type": "edit",
      "id": "74f3a3437e6ef204",
      "item": {
        "type": "paragraph",
        "id": "74f3a3437e6ef204",
        "text": "The idea would be to initially treat all snippet types as code. And to fall back on text (or any of the other types) if the [[Expectation]] is disappointed ([[Token]] not expected)."
      },
      "date": 1702992530264
    },
    {
      "type": "edit",
      "id": "c596c7dbee6d33db",
      "item": {
        "type": "markdown",
        "id": "c596c7dbee6d33db",
        "text": "> See Events and Causal Dependence [wiki](http://wiki.ralfbarkow.ch/view/events-and-causal-dependence/view/name)\nAny element created by applying a rule should be **new and distinct from all others**. If we were implementing the model, this might then make us imagine that the element would have a [[Name]] based on some global counter, or a [[UUID]]."
      },
      "date": 1702992617407
    },
    {
      "type": "add",
      "id": "969b84c01dcaa125",
      "item": {
        "type": "markdown",
        "id": "969b84c01dcaa125",
        "text": "# References"
      },
      "after": "c596c7dbee6d33db",
      "date": 1702992617896
    },
    {
      "type": "edit",
      "id": "c596c7dbee6d33db",
      "item": {
        "type": "markdown",
        "id": "c596c7dbee6d33db",
        "text": "> See [[Events and Causal Dependence]]\nAny element created by applying a rule should be **new and distinct from all others**. If we were implementing the model, this might then make us imagine that the element would have a [[Name]] based on some global counter, or a [[UUID]]."
      },
      "date": 1702992637306
    },
    {
      "id": "3c540d6b74e7e1ce",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "3c540d6b74e7e1ce",
        "text": "When we introduced our models in section 2, we just said that any element created by applying a rule should be **new and distinct from all others**. If we were implementing the model, this might then make us imagine that the element would have a [[Name]] based on some global counter, or a [[UUID]]."
      },
      "after": "c596c7dbee6d33db",
      "attribution": {
        "page": "Events and Causal Dependence"
      },
      "date": 1702992652531
    },
    {
      "type": "edit",
      "id": "3c540d6b74e7e1ce",
      "item": {
        "type": "markdown",
        "id": "3c540d6b74e7e1ce",
        "text": "[…], we just said that any element created by applying a rule should be **new and distinct from all others**. If we were implementing the model, this might then make us imagine that the element would have a [[Name]] based on some global counter, or a [[UUID]]."
      },
      "date": 1702992677597
    },
    {
      "type": "edit",
      "id": "3c540d6b74e7e1ce",
      "item": {
        "type": "markdown",
        "id": "3c540d6b74e7e1ce",
        "text": "> See [[Events and Causal Dependence]]\n[…], we just said that any element created by applying a rule should be **new and distinct from all others**. If we were implementing the model, this might then make us imagine that the element would have a [[Name]] based on some global counter, or a [[UUID]]."
      },
      "date": 1702992690019
    },
    {
      "type": "remove",
      "id": "c596c7dbee6d33db",
      "date": 1702992692231
    },
    {
      "id": "9067efe9db03e6e9",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "9067efe9db03e6e9",
        "site": "wiki.ralfbarkow.ch",
        "slug": "distinctions-labels-and-smalltalk",
        "title": "Distinctions, Labels, and Smalltalk",
        "text": "If we look at this in terms of the piece of paper analogy, instance variables inside an object are circles inside an enclosing circle. To distinguish between instance variables in the context of an object, we typically name them just like we name circles."
      },
      "after": "3c540d6b74e7e1ce",
      "attribution": {
        "page": "scratch"
      },
      "date": 1702993025962
    },
    {
      "type": "edit",
      "id": "9067efe9db03e6e9",
      "item": {
        "type": "reference",
        "id": "9067efe9db03e6e9",
        "site": "wiki.ralfbarkow.ch",
        "slug": "distinctions-labels-and-smalltalk",
        "title": "Distinctions, Labels, and Smalltalk",
        "text": "In [[Smalltalk]], objects *are* distinctions. Since everything in Smalltalk is an object, then everything in Smalltalk is a [[Distinction]]."
      },
      "date": 1702993074718
    },
    {
      "type": "edit",
      "id": "9067efe9db03e6e9",
      "item": {
        "type": "reference",
        "id": "9067efe9db03e6e9",
        "site": "wiki.ralfbarkow.ch",
        "slug": "distinctions-labels-and-smalltalk",
        "title": "Distinctions, Labels, and Smalltalk",
        "text": "In [[Smalltalk]], objects 'are' distinctions. Since everything in Smalltalk is an object, then everything in Smalltalk is a [[Distinction]]."
      },
      "date": 1702993089297
    },
    {
      "type": "edit",
      "id": "9067efe9db03e6e9",
      "item": {
        "type": "reference",
        "id": "9067efe9db03e6e9",
        "site": "wiki.ralfbarkow.ch",
        "slug": "distinctions-labels-and-smalltalk",
        "title": "Distinctions, Labels, and Smalltalk",
        "text": "In [[Smalltalk]], objects are distinctions. Since everything in Smalltalk is an object, then everything in Smalltalk is a [[Distinction]]."
      },
      "date": 1702993111688
    },
    {
      "id": "50a7b5ffb2fa6b53",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "50a7b5ffb2fa6b53",
        "text": "Note that assignment should not be interpreted as loading a value into some named memory cells. Naming an object should not be seen along the lines of modifying the object to hold its name either. On the contrary, the act of giving a name should be thought of in terms of remembering an object by means of a label. Also, since a distinction is not the private property of the name either, you are free to give a distinction as many names as you want."
      },
      "after": "9067efe9db03e6e9",
      "attribution": {
        "page": "Distinctions, Labels, and Smalltalk"
      },
      "date": 1702993294163
    },
    {
      "type": "edit",
      "id": "50a7b5ffb2fa6b53",
      "item": {
        "type": "markdown",
        "id": "50a7b5ffb2fa6b53",
        "text": "> Note that assignment should not be interpreted as loading a value into some named memory cells. Naming an object should not be seen along the lines of modifying the object to hold its name either. On the contrary, the act of giving a name should be thought of in terms of remembering an object by means of a label. Also, since a distinction is not the private property of the name either, you are free to give a distinction as many names as you want."
      },
      "date": 1702993298744
    },
    {
      "type": "edit",
      "id": "50a7b5ffb2fa6b53",
      "item": {
        "type": "markdown",
        "id": "50a7b5ffb2fa6b53",
        "text": "> Note that [[Assignment]] should not be interpreted as loading a value into some named memory cells. Naming an object should not be seen along the lines of modifying the object to hold its name either. On the contrary, the act of giving a name should be thought of in terms of remembering an object by means of a label. Also, since a distinction is not the private property of the name either, you are free to give a distinction as many names as you want."
      },
      "date": 1702993309476
    },
    {
      "type": "edit",
      "id": "50a7b5ffb2fa6b53",
      "item": {
        "type": "markdown",
        "id": "50a7b5ffb2fa6b53",
        "text": "> Note that [[Assignment]] should not be interpreted as loading a value into some named memory cells. Naming an object should not be seen along the lines of modifying the object to hold its name either. On the contrary, the [[Act of Giving a Name]] should be thought of in terms of remembering an object by means of a label. Also, since a distinction is not the private property of the name either, you are free to give a distinction as many names as you want."
      },
      "date": 1702993401948
    },
    {
      "type": "edit",
      "id": "50a7b5ffb2fa6b53",
      "item": {
        "type": "markdown",
        "id": "50a7b5ffb2fa6b53",
        "text": "> Note that [[Assignment]] should not be interpreted as loading a value into some named memory cells. Naming an object should not be seen along the lines of modifying the object to hold its name either. On the contrary, the [[Act of Giving a Name]] should be thought of in terms of remembering an object by means of a [[Label]] [⇒ [[Slug]]]. Also, since a distinction is not the private property of the name either, you are free to give a distinction as many names as you want."
      },
      "date": 1702993731492
    },
    {
      "item": {
        "type": "factory",
        "id": "660ddf7586cdd27d"
      },
      "id": "660ddf7586cdd27d",
      "type": "add",
      "after": "74f3a3437e6ef204",
      "date": 1702993996309
    },
    {
      "type": "edit",
      "id": "660ddf7586cdd27d",
      "item": {
        "type": "image",
        "id": "660ddf7586cdd27d",
        "text": "SpNotebookPresenter",
        "size": "wide",
        "width": 430,
        "height": 269,
        "url": "/assets/plugins/image/b4e2ff4d9e2b165b5899c8c4685df6c6.jpg"
      },
      "date": 1702994015486
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1702994158925
    },
    {
      "type": "edit",
      "id": "74f3a3437e6ef204",
      "item": {
        "type": "paragraph",
        "id": "74f3a3437e6ef204",
        "text": "The idea would be to initially treat all snippet types as code. And to fall back to text (or another types) if  the [[Expectation]] is disappointed ([[Token]] not expected)."
      },
      "date": 1702994492053
    },
    {
      "type": "edit",
      "id": "74f3a3437e6ef204",
      "item": {
        "type": "paragraph",
        "id": "74f3a3437e6ef204",
        "text": "The idea would be to initially treat all snippet types as code. And to fall back to text (or another type) if  the [[Expectation]] is disappointed ([[Token]] not expected)."
      },
      "date": 1702994512589
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1702994577397
    },
    {
      "type": "edit",
      "id": "a0c7fc4765ba27f1",
      "item": {
        "type": "paragraph",
        "id": "a0c7fc4765ba27f1",
        "text": "The challenge to the collaborators is to settle on agreeable usage of words pressed into this additional service. [⇒ [[Die Gewalt der Zwei-Seiten-Form]]]"
      },
      "date": 1702994708416
    },
    {
      "type": "edit",
      "id": "a0c7fc4765ba27f1",
      "item": {
        "type": "paragraph",
        "id": "a0c7fc4765ba27f1",
        "text": "The challenge to the collaborators is to settle on agreeable usage of words pressed into this additional service. As this is unlikely, see [[Die Gewalt der Zwei-Seiten-Form]]."
      },
      "date": 1702994778331
    },
    {
      "type": "edit",
      "id": "a0c7fc4765ba27f1",
      "item": {
        "type": "paragraph",
        "id": "a0c7fc4765ba27f1",
        "text": "The challenge to the collaborators is to settle on agreeable usage of words pressed into this additional service. As this [[Agreement]] is unlikely, see [[Die Gewalt der Zwei-Seiten-Form]]."
      },
      "date": 1702994831953
    },
    {
      "type": "edit",
      "id": "a0c7fc4765ba27f1",
      "item": {
        "type": "paragraph",
        "id": "a0c7fc4765ba27f1",
        "text": "The challenge to the collaborators is to settle on agreeable usage of words pressed into this additional service. As this [[Agreement]] is unlikely, see [[Die Gewalt der Zwei-Seiten-Form]] (the violence of the two-sided form)."
      },
      "date": 1702994934460
    },
    {
      "type": "edit",
      "id": "a0c7fc4765ba27f1",
      "item": {
        "type": "paragraph",
        "id": "a0c7fc4765ba27f1",
        "text": "The challenge to the collaborators is to settle on agreeable usage of words pressed into this additional service. As this [[Agreement]] is unlikely, see [[Die Gewalt der Zwei-Seiten-Form]] (the violence of the [[two-sided form]])."
      },
      "date": 1702994944420
    },
    {
      "type": "edit",
      "id": "f9e99fb271f14fa0",
      "item": {
        "type": "paragraph",
        "id": "f9e99fb271f14fa0",
        "text": "Ward via [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170293394842693XJWxB:matrix.org?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] I'm assuming that there will be [[Tension]]s that will need to be worked out over time and finally […]."
      },
      "date": 1702995012449
    },
    {
      "type": "edit",
      "id": "a0c7fc4765ba27f1",
      "item": {
        "type": "paragraph",
        "id": "a0c7fc4765ba27f1",
        "text": "The challenge to the collaborators is to settle on agreeable usage of words pressed into this [?] additional service. As this [[Agreement]] is unlikely, see [[Die Gewalt der Zwei-Seiten-Form]] (the violence of the [[two-sided form]])."
      },
      "date": 1702995036186
    },
    {
      "type": "edit",
      "id": "d30c931ba3767c5d",
      "item": {
        "type": "reference",
        "id": "d30c931ba3767c5d",
        "site": "ward.dojo.fed.wiki",
        "slug": "dojo-demonstration-tags",
        "title": "Dojo Demonstration Tags",
        "text": "We use simple evocative words to tag paragraphs for quick access to richly complicated ideas [⇒ [[Access to an Idea]]]. This only works when we accept some [[Ambiguity]] for how we use single words and make some effort to apply words consistently within the corpus we are tagging."
      },
      "date": 1702995103474
    },
    {
      "type": "edit",
      "id": "0e8d529d62d54475",
      "item": {
        "type": "paragraph",
        "id": "0e8d529d62d54475",
        "text": "> I've built such a tool. You can try it out on the indexing I have done for my dojo pages."
      },
      "date": 1702995142487
    },
    {
      "type": "edit",
      "id": "0e8d529d62d54475",
      "item": {
        "type": "markdown",
        "id": "0e8d529d62d54475",
        "text": "> I've built such a tool. You can try it out on the indexing I have done for my dojo pages."
      },
      "date": 1702995143656
    },
    {
      "type": "edit",
      "id": "d30c931ba3767c5d",
      "item": {
        "type": "reference",
        "id": "d30c931ba3767c5d",
        "site": "ward.dojo.fed.wiki",
        "slug": "dojo-demonstration-tags",
        "title": "Dojo Demonstration Tags",
        "text": "We use simple evocative words to tag paragraphs for quick access to richly complicated ideas [⇒ [[Access to an Idea]]]. This only works when we accept some [[Ambiguity]] for how we use single words and make some effort to apply words [[consistently]] within the corpus we are tagging."
      },
      "date": 1702995204251
    },
    {
      "type": "edit",
      "id": "afe769b2dcf69430",
      "item": {
        "type": "paragraph",
        "id": "afe769b2dcf69430",
        "text": "Tagging of traits with the intention of creating tag maps. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170297099164aWOcX:dreyeck.freedombox.rocks?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] [http://traits.dreyeck.ch/ traits]"
      },
      "date": 1702995367827
    },
    {
      "type": "edit",
      "id": "afe769b2dcf69430",
      "item": {
        "type": "paragraph",
        "id": "afe769b2dcf69430",
        "text": "Tagging of traits with the intention of creating tag maps. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170297099164aWOcX:dreyeck.freedombox.rocks?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] [http://traits.code.dreyeck.ch/ traits]"
      },
      "date": 1702995391225
    },
    {
      "id": "afe769b2dcf69430",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "c35d84e6fdbd674f",
        "0c532a857d9e689d",
        "a0c7fc4765ba27f1",
        "f9e99fb271f14fa0",
        "0e8d529d62d54475",
        "d30c931ba3767c5d",
        "c8f1e7e76ec906a6",
        "1dd6eb7d9f25a94e",
        "2fdd944f2b5bba27",
        "2899789fb074916b",
        "17a3ce9af69037b5",
        "09274e142b1eb9d1",
        "36ef358a59eacafc",
        "afe769b2dcf69430",
        "1e4a3e9fe6dc8778",
        "e96d3c5ba73d78ea",
        "8180d3b915aad2bf",
        "f367fa97ddce1781",
        "064ed0e37223156e",
        "9e84052f3380edc8",
        "32d233dd4f18a886",
        "6531052eb0a968f6",
        "2467b2d39f8b4dbb",
        "23375d522f174002",
        "a3062e85742a97e3",
        "8bbb19dfd232595a",
        "0e59d40751465bd9",
        "5dad1212305a94b2",
        "cadfe6aa0863e278",
        "e2c7bfba79c12861",
        "ac54ff939eb1e488",
        "452c379d7ac97131",
        "0c0dc6223aa17d07",
        "a0b9cc20316333f9",
        "ea960eeb4b9ef3a4",
        "c9395e9efc055286",
        "809debcdd912ed8e",
        "f4b42e0530b539e3",
        "797d77d7c2ef8c85",
        "a52bcf887d4f5701",
        "2616e22274ce2b36",
        "09b2abab28f23dc2",
        "0f52d75cd616b75d",
        "e6c25959bcfc8e30",
        "3c540d6b74e7e1ce",
        "9067efe9db03e6e9",
        "50a7b5ffb2fa6b53",
        "969b84c01dcaa125",
        "1a2c599509f97f88",
        "bab74663f0723154",
        "8feec19dddec310b",
        "5603b7f2e511928c",
        "c5d0b2bc34e58c86",
        "490f9e4254a95f22",
        "4961f7f4879c5036",
        "43c892c58f632b4d",
        "faff741fd0a7f6df",
        "b00f14b7be2bc77c",
        "502f23a565f51a5f",
        "04f12abab9185aef",
        "74f3a3437e6ef204",
        "660ddf7586cdd27d"
      ],
      "date": 1702995432138
    },
    {
      "type": "remove",
      "id": "1e4a3e9fe6dc8778",
      "date": 1702995437310
    },
    {
      "type": "edit",
      "id": "afe769b2dcf69430",
      "item": {
        "type": "paragraph",
        "id": "afe769b2dcf69430",
        "text": "Tagging of traits with the intention of creating [[Tags Map]]. [https://matrix.to/#/!ORfrUEFeWFcHAMLFLr:matrix.org/$170297099164aWOcX:dreyeck.freedombox.rocks?via=matrix.org&via=matrix.allmende.io&via=chat.weho.st matrix] [http://traits.code.dreyeck.ch/ traits]"
      },
      "date": 1702995441918
    },
    {
      "type": "remove",
      "id": "f367fa97ddce1781",
      "date": 1702995461944
    },
    {
      "type": "edit",
      "id": "36ef358a59eacafc",
      "item": {
        "type": "paragraph",
        "id": "36ef358a59eacafc",
        "text": "[[RGTraitDefinition]] is the concrete representation of a [[Trait]] (no class)"
      },
      "date": 1702995464135
    },
    {
      "type": "edit",
      "id": "064ed0e37223156e",
      "item": {
        "type": "paragraph",
        "id": "064ed0e37223156e",
        "text": "[[Trait]]: My instances are the traits used to create traited classes.\nThe traits can be combined in different ways check TaAbstractComposition to see the different possible operations.\n\nI am a subclass of Class, and I implement the specific behavior for traits.\nSo, the traits are polymorphic with classes.\n\nI support stateful traits. \nAlso Traits uses other metaclass to implement the behavior, check MetaclassForTraits."
      },
      "date": 1702995593881
    },
    {
      "type": "edit",
      "id": "064ed0e37223156e",
      "item": {
        "type": "paragraph",
        "id": "064ed0e37223156e",
        "text": "[[Trait]]: My instances are the traits used to create traited classes.\nThe traits can be combined in different ways check [[TaAbstractComposition]] to see the different possible operations.\n\nI am a subclass of Class, and I implement the specific behavior for traits.\nSo, the traits are polymorphic with classes.\n\nI support stateful traits. \nAlso Traits uses other metaclass to implement the behavior, check MetaclassForTraits."
      },
      "date": 1702995641584
    },
    {
      "type": "edit",
      "id": "064ed0e37223156e",
      "item": {
        "type": "paragraph",
        "id": "064ed0e37223156e",
        "text": "[[Trait]]: My instances are the traits used to create traited classes.\nThe traits can be combined in different ways check [[TaAbstractComposition]] to see the different possible operations.\n\nI am a subclass of [[Class]], and I implement the specific behavior for traits.\nSo, the traits are polymorphic with classes.\n\nI support stateful traits. \nAlso Traits uses other metaclass to implement the behavior, check MetaclassForTraits."
      },
      "date": 1702995659906
    },
    {
      "type": "edit",
      "id": "064ed0e37223156e",
      "item": {
        "type": "paragraph",
        "id": "064ed0e37223156e",
        "text": "[[Trait]]: My instances are the traits used to create traited classes.\nThe traits can be combined in different ways check [[TaAbstractComposition]] to see the different possible operations.\n\nI am a subclass of [[Class]], and I implement the specific [[Behavior]] for traits.\nSo, the traits are polymorphic with classes.\n\nI support stateful traits. \nAlso Traits uses other metaclass to implement the behavior, check MetaclassForTraits."
      },
      "date": 1702995673602
    },
    {
      "type": "edit",
      "id": "064ed0e37223156e",
      "item": {
        "type": "paragraph",
        "id": "064ed0e37223156e",
        "text": "[[Trait]]: My instances are the traits used to create traited classes.\nThe traits can be combined in different ways check [[TaAbstractComposition]] to see the different possible operations.\n\nI am a subclass of [[Class]], and I implement the specific [[Behavior]] for traits.\nSo, the traits are polymorphic with classes.\n\nI support stateful traits. \nAlso Traits uses other metaclass to implement the behavior, check [[MetaclassForTraits]]."
      },
      "date": 1702995687475
    },
    {
      "type": "edit",
      "id": "8bbb19dfd232595a",
      "item": {
        "type": "paragraph",
        "id": "8bbb19dfd232595a",
        "text": "ennoausberlin — 17.12.2023 17:10 via [https://discord.com/channels/729445214812504107/736333725788274819/1185977319354007562 discord]\nHello. I am reading  [[Simon Wardley]]'s book about Wardley maps and want to understand what the Visible pipelines and Link to features of the Snippet are related to"
      },
      "date": 1702995724250
    },
    {
      "type": "edit",
      "id": "8bbb19dfd232595a",
      "item": {
        "type": "paragraph",
        "id": "8bbb19dfd232595a",
        "text": "ennoausberlin — 17.12.2023 17:10 via [https://discord.com/channels/729445214812504107/736333725788274819/1185977319354007562 discord]\nHello. I am reading  [[Simon Wardley]]'s book about [[Wardley Map]]s and want to understand what the Visible pipelines and Link to features of the Snippet are related to"
      },
      "date": 1702995743535
    },
    {
      "type": "edit",
      "id": "8bbb19dfd232595a",
      "item": {
        "type": "paragraph",
        "id": "8bbb19dfd232595a",
        "text": "ennoausberlin — 17.12.2023 17:10 via [https://discord.com/channels/729445214812504107/736333725788274819/1185977319354007562 discord]\nHello. I am reading  [[Simon Wardley]]'s book about [[Wardley Map]]s and want to understand what the Visible pipelines and Link to features of the Snippet are related to."
      },
      "date": 1702995762808
    },
    {
      "type": "edit",
      "id": "ac54ff939eb1e488",
      "item": {
        "type": "paragraph",
        "id": "ac54ff939eb1e488",
        "text": "[[SmaCCGLRParser]] is an abstract superclass for all [[GLR]] generated parsers in SmaCC."
      },
      "date": 1702995840562
    },
    {
      "type": "edit",
      "id": "ac54ff939eb1e488",
      "item": {
        "type": "paragraph",
        "id": "ac54ff939eb1e488",
        "text": "[[SmaCCGLRParser]] is an abstract superclass for all [[GLR]] generated parsers in [[SmaCC]]."
      },
      "date": 1702995851537
    },
    {
      "type": "edit",
      "id": "0c0dc6223aa17d07",
      "item": {
        "type": "paragraph",
        "id": "0c0dc6223aa17d07",
        "text": "We find that Tomita ([[GLR]]) parsing – more widely known in the field of [[Natural Language Processing]] is better suited than conventional approaches to the task of parsing C++. A Tomita parser generator requires no artificial modification of the grammar and emits a parser that processes actual C++ source code in nearlinear time and allows syntactic analysis to be separated from semantic analysis."
      },
      "date": 1702995871986
    },
    {
      "type": "edit",
      "id": "a0b9cc20316333f9",
      "item": {
        "type": "paragraph",
        "id": "a0b9cc20316333f9",
        "text": "[19] M. Johnson, “The [[Computational Complexity]] of [[GLR]] [[Parsing]]”, in M. Tomita, Editor, [[Generalized LR Parsing]], Kluwer Academic Publishers, 1991."
      },
      "date": 1702995913834
    },
    {
      "type": "edit",
      "id": "f4b42e0530b539e3",
      "item": {
        "type": "paragraph",
        "id": "f4b42e0530b539e3",
        "text": "Nothing more than what BlParallelAnimation would allow me to do, but I meant to synchronise other events to the animations – reason why I created a subclass –, one for each animation added to BlParallelAnimation. Before doing that I wanted to understand thoroughly how a BlParallelAnimation works. So I created a subclass overriding the method doStep – method that as far as I understood is the one that runs the animations added to a BlParallelAnimation – and I added a Transcript show to it. The thing is I was expecting to have in the Transcript one timestamp for each animation is in BlParallelAnimation, but I get more than the number of animations, it seems to print the timestamp of each update."
      },
      "date": 1702995969601
    },
    {
      "type": "edit",
      "id": "3c540d6b74e7e1ce",
      "item": {
        "type": "markdown",
        "id": "3c540d6b74e7e1ce",
        "text": "See [[Events and Causal Dependence]]\n> […], we just said that any element created by applying a rule should be **new and distinct from all others**. If we were implementing the model, this might then make us imagine that the element would have a [[Name]] based on some global counter, or a [[UUID]]."
      },
      "date": 1702996117477
    },
    {
      "type": "edit",
      "id": "660ddf7586cdd27d",
      "item": {
        "type": "image",
        "id": "660ddf7586cdd27d",
        "text": "[[SpNotebookPresenter]]",
        "size": "wide",
        "width": 430,
        "height": 269,
        "url": "/assets/plugins/image/b4e2ff4d9e2b165b5899c8c4685df6c6.jpg"
      },
      "date": 1702996340231
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703001385396
    },
    {
      "item": {
        "type": "factory",
        "id": "a5330880d10ba281"
      },
      "id": "a5330880d10ba281",
      "type": "add",
      "after": "660ddf7586cdd27d",
      "date": 1703001468896
    },
    {
      "type": "edit",
      "id": "a5330880d10ba281",
      "item": {
        "type": "pagefold",
        "id": "a5330880d10ba281",
        "text": "~"
      },
      "date": 1703001472726
    },
    {
      "id": "0a936fabe9d207fb",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "0a936fabe9d207fb",
        "text": "[[Spec]] is a framework in [[Pharo]] for describing user interfaces. [https://github.com/pharo-spec/Spec github]"
      },
      "after": "660ddf7586cdd27d",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703001477952
    },
    {
      "id": "85c86514eff6a9f4",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "85c86514eff6a9f4",
        "text": "[[Compose an Economy]]"
      },
      "after": "a5330880d10ba281",
      "attribution": {
        "page": "scratch"
      },
      "date": 1703001481202
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703001555247
    },
    {
      "type": "add",
      "id": "061bf19273261e3b",
      "item": {
        "type": "paragraph",
        "id": "061bf19273261e3b",
        "text": "Building the Memory Game graphical elements with [[Bloc]]"
      },
      "after": "0a936fabe9d207fb",
      "date": 1703001849611
    },
    {
      "type": "edit",
      "id": "061bf19273261e3b",
      "item": {
        "type": "paragraph",
        "id": "061bf19273261e3b",
        "text": "Building the Memory Game graphical elements with [[Bloc]] [https://book.gtoolkit.com/building-the-memory-game-graphical-element-53lj10cpol7ee2fpyyjfzhs2o page]"
      },
      "date": 1703001857493
    },
    {
      "type": "edit",
      "id": "061bf19273261e3b",
      "item": {
        "type": "paragraph",
        "id": "061bf19273261e3b",
        "text": "Building the [[Memory Game]] graphical elements with [[Bloc]] [https://book.gtoolkit.com/building-the-memory-game-graphical-element-53lj10cpol7ee2fpyyjfzhs2o page]"
      },
      "date": 1703001867100
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703011121210
    },
    {
      "item": {
        "type": "factory",
        "id": "8999366db4374886"
      },
      "id": "8999366db4374886",
      "type": "add",
      "after": "85c86514eff6a9f4",
      "date": 1703011124038
    },
    {
      "item": {
        "type": "factory",
        "id": "1f6ea917dd7ecd9d"
      },
      "id": "1f6ea917dd7ecd9d",
      "type": "add",
      "after": "8999366db4374886",
      "date": 1703011132891
    },
    {
      "type": "edit",
      "id": "1f6ea917dd7ecd9d",
      "item": {
        "type": "image",
        "id": "1f6ea917dd7ecd9d",
        "text": "Uploaded image",
        "size": "thumbnail",
        "width": 183,
        "height": 259,
        "url": "/assets/plugins/image/0f0a7790a21740b2f1bb4b570bd0847c.jpg"
      },
      "date": 1703011170287
    },
    {
      "type": "edit",
      "id": "8999366db4374886",
      "item": {
        "type": "paragraph",
        "id": "8999366db4374886",
        "text": "RHEINBERGER, Hans-Jörg, 2022. Historische Epistemologie zur Einführung. 4., korr. Aufl. Hamburg: Junius. Zur Einführung, 336. ISBN 978-3-88506-636-1\n"
      },
      "date": 1703011172874
    },
    {
      "type": "edit",
      "id": "1f6ea917dd7ecd9d",
      "item": {
        "type": "image",
        "id": "1f6ea917dd7ecd9d",
        "text": "RHEINBERGER, Hans-Jörg, 2022. Historische Epistemologie zur Einführung.",
        "size": "thumbnail",
        "width": 183,
        "height": 259,
        "url": "/assets/plugins/image/0f0a7790a21740b2f1bb4b570bd0847c.jpg"
      },
      "date": 1703011236859
    },
    {
      "id": "1f6ea917dd7ecd9d",
      "type": "move",
      "order": [
        "5050750b60bd1849",
        "c35d84e6fdbd674f",
        "0c532a857d9e689d",
        "a0c7fc4765ba27f1",
        "f9e99fb271f14fa0",
        "0e8d529d62d54475",
        "d30c931ba3767c5d",
        "c8f1e7e76ec906a6",
        "1dd6eb7d9f25a94e",
        "2fdd944f2b5bba27",
        "2899789fb074916b",
        "17a3ce9af69037b5",
        "09274e142b1eb9d1",
        "36ef358a59eacafc",
        "afe769b2dcf69430",
        "e96d3c5ba73d78ea",
        "8180d3b915aad2bf",
        "064ed0e37223156e",
        "9e84052f3380edc8",
        "32d233dd4f18a886",
        "6531052eb0a968f6",
        "2467b2d39f8b4dbb",
        "23375d522f174002",
        "a3062e85742a97e3",
        "8bbb19dfd232595a",
        "0e59d40751465bd9",
        "5dad1212305a94b2",
        "cadfe6aa0863e278",
        "e2c7bfba79c12861",
        "ac54ff939eb1e488",
        "452c379d7ac97131",
        "0c0dc6223aa17d07",
        "a0b9cc20316333f9",
        "ea960eeb4b9ef3a4",
        "c9395e9efc055286",
        "809debcdd912ed8e",
        "f4b42e0530b539e3",
        "797d77d7c2ef8c85",
        "a52bcf887d4f5701",
        "2616e22274ce2b36",
        "09b2abab28f23dc2",
        "0f52d75cd616b75d",
        "e6c25959bcfc8e30",
        "3c540d6b74e7e1ce",
        "9067efe9db03e6e9",
        "50a7b5ffb2fa6b53",
        "969b84c01dcaa125",
        "1a2c599509f97f88",
        "bab74663f0723154",
        "8feec19dddec310b",
        "5603b7f2e511928c",
        "c5d0b2bc34e58c86",
        "490f9e4254a95f22",
        "4961f7f4879c5036",
        "43c892c58f632b4d",
        "faff741fd0a7f6df",
        "b00f14b7be2bc77c",
        "502f23a565f51a5f",
        "04f12abab9185aef",
        "74f3a3437e6ef204",
        "660ddf7586cdd27d",
        "0a936fabe9d207fb",
        "061bf19273261e3b",
        "a5330880d10ba281",
        "85c86514eff6a9f4",
        "1f6ea917dd7ecd9d",
        "8999366db4374886"
      ],
      "date": 1703011241577
    },
    {
      "type": "edit",
      "id": "8999366db4374886",
      "item": {
        "type": "paragraph",
        "id": "8999366db4374886",
        "text": "RHEINBERGER, Hans-Jörg, 2022. Historische Epistemologie zur Einführung. 4., korr. Aufl. Hamburg: Junius. Zur Einführung, 336. ISBN 978-3-88506-636-1"
      },
      "date": 1703011270174
    },
    {
      "type": "add",
      "id": "98ec258f76bb2956",
      "item": {
        "type": "paragraph",
        "id": "98ec258f76bb2956",
        "text": "RHEINBERGER, Von Hans-Jörg, [kein Datum]. Historische Epistemologie. \n"
      },
      "after": "8999366db4374886",
      "date": 1703011274599
    },
    {
      "type": "edit",
      "id": "98ec258f76bb2956",
      "item": {
        "type": "paragraph",
        "id": "98ec258f76bb2956",
        "text": "RHEINBERGER, Von Hans-Jörg, [kein Datum]. Historische Epistemologie. [https://www.mpiwg-berlin.mpg.de/sites/default/files/migrated/fs17_rheinberger_de_web.pdf pdf]\n"
      },
      "date": 1703011299397
    },
    {
      "type": "edit",
      "id": "98ec258f76bb2956",
      "item": {
        "type": "paragraph",
        "id": "98ec258f76bb2956",
        "text": "RHEINBERGER, Von Hans-Jörg, 2011. Historische Epistemologie. [https://www.mpiwg-berlin.mpg.de/sites/default/files/migrated/fs17_rheinberger_de_web.pdf pdf]\n"
      },
      "date": 1703011358851
    },
    {
      "type": "edit",
      "id": "98ec258f76bb2956",
      "item": {
        "type": "paragraph",
        "id": "98ec258f76bb2956",
        "text": "RHEINBERGER, Von Hans-Jörg, 2011. Historische Epistemologie. [https://www.mpiwg-berlin.mpg.de/sites/default/files/migrated/fs17_rheinberger_de_web.pdf pdf]"
      },
      "date": 1703011383037
    },
    {
      "type": "add",
      "id": "e8b80d3e8d02158c",
      "item": {
        "type": "paragraph",
        "id": "e8b80d3e8d02158c",
        "text": "> Die Vorstellung von Wissenschaft als Prozess löste die zwanghafte Sicht auf Wissenschaft als System ab."
      },
      "after": "98ec258f76bb2956",
      "date": 1703011384935
    },
    {
      "type": "edit",
      "id": "e8b80d3e8d02158c",
      "item": {
        "type": "markdown",
        "id": "e8b80d3e8d02158c",
        "text": "> Die Vorstellung von Wissenschaft als Prozess löste die zwanghafte Sicht auf Wissenschaft als System ab."
      },
      "date": 1703011386144
    },
    {
      "item": {
        "type": "factory",
        "id": "7e343e9925238d9e"
      },
      "id": "7e343e9925238d9e",
      "type": "add",
      "after": "e8b80d3e8d02158c",
      "date": 1703011426594
    },
    {
      "type": "edit",
      "id": "7e343e9925238d9e",
      "item": {
        "type": "paragraph",
        "id": "7e343e9925238d9e",
        "text": "The idea of science as a process replaced the obsessive view of science as a system."
      },
      "date": 1703011430836
    },
    {
      "type": "edit",
      "id": "7e343e9925238d9e",
      "item": {
        "type": "paragraph",
        "id": "7e343e9925238d9e",
        "text": "The idea of [[Science as a Process]] replaced the obsessive view of science as a system."
      },
      "date": 1703011474560
    },
    {
      "type": "edit",
      "id": "7e343e9925238d9e",
      "item": {
        "type": "paragraph",
        "id": "7e343e9925238d9e",
        "text": "The idea of [[Science as a Process]] replaced the obsessive view of [[Science as a System]]."
      },
      "date": 1703011499724
    },
    {
      "item": {
        "type": "factory",
        "id": "0a61d7d9ab86710c"
      },
      "id": "0a61d7d9ab86710c",
      "type": "add",
      "after": "7e343e9925238d9e",
      "date": 1703011529136
    },
    {
      "type": "edit",
      "id": "0a61d7d9ab86710c",
      "item": {
        "type": "paragraph",
        "id": "0a61d7d9ab86710c",
        "text": "[[Process]] vs. [[System] ([[Science]])"
      },
      "date": 1703011554982
    },
    {
      "type": "edit",
      "id": "0a61d7d9ab86710c",
      "item": {
        "type": "paragraph",
        "id": "0a61d7d9ab86710c",
        "text": "[[Process]] vs. [[System]] ([[Science]])"
      },
      "date": 1703011561711
    },
    {
      "id": "af479bbb757da695",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "af479bbb757da695",
        "text": "See [[Process (Prozess)]]."
      },
      "after": "0a61d7d9ab86710c",
      "attribution": {
        "page": "Process"
      },
      "date": 1703011580581
    },
    {
      "type": "remove",
      "id": "af479bbb757da695",
      "date": 1703011610062
    },
    {
      "type": "edit",
      "id": "0a61d7d9ab86710c",
      "item": {
        "type": "paragraph",
        "id": "0a61d7d9ab86710c",
        "text": "See [[Process (Prozess)]]. vs. [[System]] ([[Science]])"
      },
      "date": 1703011613936
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1703014216782
    },
    {
      "id": "5c8607673b8e0b9c",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "5c8607673b8e0b9c",
        "text": "We should not conceive of “process” as a simple succession of one event after another. Instead, it is the organization of these events into sequences, so that selections that have already been realized and selections that are expected together provide the conditions for a selection realized in a particular moment. \n"
      },
      "after": "0a61d7d9ab86710c",
      "attribution": {
        "page": "Process (Prozess)"
      },
      "date": 1703014561507
    },
    {
      "type": "edit",
      "id": "5c8607673b8e0b9c",
      "item": {
        "type": "markdown",
        "id": "5c8607673b8e0b9c",
        "text": "> We should not conceive of “process” as a simple succession of one event after another. Instead, it is the organization of these events into sequences, so that selections that have already been realized and selections that are expected together provide the conditions for a selection realized in a particular moment. \n"
      },
      "date": 1703014565742
    },
    {
      "type": "edit",
      "id": "5c8607673b8e0b9c",
      "item": {
        "type": "markdown",
        "id": "5c8607673b8e0b9c",
        "text": "> We should not conceive of “process” as a simple succession of one event after another. Instead, it is the organization of these events into [[sequences]], so that selections that have already been realized and selections that are expected together provide the conditions for a selection realized in a particular moment. \n"
      },
      "date": 1703014598948
    },
    {
      "type": "edit",
      "id": "5c8607673b8e0b9c",
      "item": {
        "type": "markdown",
        "id": "5c8607673b8e0b9c",
        "text": "> We should not conceive of “process” as a simple succession of one event after another. Instead, it is the organization of these events into [[Sequence]]s, so that selections that have already been realized and selections that are expected together provide the conditions for a selection realized in a particular moment. \n"
      },
      "date": 1703014615063
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1703102684711
    }
  ]
}