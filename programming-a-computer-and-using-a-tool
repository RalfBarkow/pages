{
  "title": "Programming a Computer and Using a Tool",
  "story": [
    {
      "type": "paragraph",
      "id": "02eae9212df53254",
      "text": "[[Alan Kay]]: I don’t know who first made the parallel between programming a computer and using a tool, but it was certainly implicit in [[Jack Licklider]]'s thoughts about “Man-Machine Symbiosis” as he set up the ARPA IPTO research projects in the early sixties. In 1962. [[Ivan Sutherland]]'s Sketchpad became the exemplar to this day for what interactive computing should be like—including having the enduser be able to reshape the tool.\n"
    },
    {
      "type": "paragraph",
      "id": "d9162b1680b2fb35",
      "text": "The idea that programming should be set up so it could be metaphorically like writing is harder to track down, but you could see it in [[Cliff Shaw]]’s JOSS from the same early period. Besides being the first real “end-user” language, and the first attempt at a really \"user-friendly\" interface, it included a special terminal design adapted from a high-quality IBM electric typewriter that printed in two colors in lower and upper case on drilled fanfold 8* 11 paper so that the output was a direct extension of one's notebook.\n"
    },
    {
      "type": "paragraph",
      "id": "66e99de1b6035c2d",
      "text": "The vague term \"[[Computer Literacy]]\" also surfaced in the sixties, and in its strongest sense reflected a belief that the computer was going to be more like the book than a swiss army knife. Being able to “read\" and “write in it would be as universally necessary as reading and writing became after Gutenberg. The [[Dynabook]] idea was a prime focus during (his time as (he kind of (hing computers were going to turn into, forced by engineering possibility and sociological necessity.\n"
    },
    {
      "type": "paragraph",
      "id": "f1dd965c27aad5f0",
      "text": "The analogy to reading was the easiest to see. If \"reading\" is the skill to be able to understand and use messages represented as gestures in a medium whose conventions are in close agreement between writer and reader, then the equivalent of reading on a computer would require the invention of a user-interface language that could universally frame the works of many thousands of authors whose interests would range far beyond those of the interface designers. \"Writing\" on the other hand requires the end-users to somehow construct the same kinds of things that they had been reading—a much more difficult skill.\n"
    },
    {
      "type": "paragraph",
      "id": "a1ceb18562d5e26c",
      "text": "At first (his was so analogous to designing a programming language that many \"interactive\" interfaces were designed—some trying to improve on JOSS’ dialogue scheme, while others attempted to build artificially intelligent agents that could turn advice into generalized actions. McCarthy’s \"[[Advice Taker]]” idea had a huge influence on everyone’s ideas. The notion of \"programming by example\" arose—perhaps the earliest was Teitelman's PILOT system, in which he tried to build an advice taking system (using a pattern matching production system) that could recapitulate the early Al theses at MIT.\n"
    },
    {
      "type": "paragraph",
      "id": "9f29b1b64cc22d44",
      "text": "[[Wally Feurzig]] and [[Seymour Papert]] had a different notion about the place of computer \"reading\" and \"writing\": that like the reading and writing of books, it wasn't just about getting and conveying information, but the very act of learning and doing them expands one’s horizons and adds new ways of thinking about the world. In other words, programming could be good for people, and thus some effort should be put into designing systems that would have pedagogical benefit for both children and adults.\n"
    },
    {
      "type": "paragraph",
      "id": "e6d3fbc146ebe85a",
      "text": "These ideas resonated strongly with me, partly because of my background in music, biology and mathematics. Computer processes coordinating in time go beyond Kepler’s music of the spheres to a \"music of metaphysics\". A very similar metaphor is that of cellular and developmental biology which goes far beyond the classical Newtonism of 19th century science to a much more involved and inherently nonlinear systems organization. To have a medium that could be read and written at this new level of complexity—a level in which many of the \"gotchas\" of our civilization and science reside—seemed tremendously important. And still does."
    },
    {
      "type": "paragraph",
      "id": "5b36952de81200a0",
      "text": "Many such considerations eventually led to the realization that \"it wasn’t a language. but an environment\", and this led directly in the early seventies to the overlapping window and pointing interface coextensive with objects that could send messages to each other and thus model any dynamic system. But the \"writing\" problem still remained—in part, because it was not even clear what the writing problem was."
    },
    {
      "type": "paragraph",
      "id": "ad9bd02a7d638ea6",
      "text": "The interface design was strongly influenced by the multiple mentality ideas of [[Jerome Bruner]], in which the \"middle\" mentality, the iconic one. was the bridge between infancy and adolescence. Inspired by a few early examples—such as [[Paul Kovner]]'s AMBIT-G—we decided to concentrate our research on iconic programming. Still not knowing what it meant, we dealt with it in the traditional manner for handling very difficult problems. Namely, give them to graduate students and tell them they are easy."
    },
    {
      "type": "paragraph",
      "id": "83a72e4e023723d4",
      "text": "The first of these was [[Dave Smith]], and his PYGMALION became the new exemplar for what iconic programming by example might mean. A host of others from our group followed—including [[Alan Boming]]’s Thinglab. Laura Gould and Bill Finzer’s [[Programming By Rehearsal]]. Dan Halbert’s SmallStar. and Dan Ingalls' Ariel (a later version was called FABRIK). By this time a community had formed with Henry Lieberman’s TINKER taking an important new path.\n"
    },
    {
      "type": "paragraph",
      "id": "0704cbbc9fcb6232",
      "text": "Today, we have windowed interfaces everywhere, and even a number of iconic object-construction kits. We have macro capture systems of every kind, and scripting languages. But we don't have \"end-user programming\". Nor do we have “programming by example\"."
    },
    {
      "type": "paragraph",
      "id": "ad04bcc78dc87dc6",
      "text": "One of the problems is range. By this I mean that when we teach children English, it is not our intent to teach them a pidgin language, but to gradually reveal the whole thing: the language that Jefferson and Russell wrote in. and with a few style shifts, the language that Shakespeare wrote in. In other words we want learners of English not just to be able to accomplish simple vocational goals, but to be able to aspire to the full range of expression the language makes possible. In computer terms, the range of aspiration should extend at least to the kinds of applications purchased from professionals. By comparison, systems like and almost everything we do can be replaced with vicarious experience, we have to decide to do the activities that make us into actualized humans. We have to decide to exercise, to not eat too much fat and sugar, to learn, to read, to explore, to experiment, to make, to love, to think. In short, to exist."
    },
    {
      "type": "paragraph",
      "id": "72119dbe3898815b",
      "text": "Difficulties are annoying and we like to remove them. But we have to be careful to only remove the gratuitous ones. As for the others—those whose surmounting makes us grow stronger in mind and body—we have to decide to leave those in and face them.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Programming a Computer and Using a Tool",
        "story": []
      },
      "date": 1713044684619
    },
    {
      "item": {
        "type": "factory",
        "id": "02eae9212df53254"
      },
      "id": "02eae9212df53254",
      "type": "add",
      "date": 1713044686750
    },
    {
      "type": "edit",
      "id": "02eae9212df53254",
      "item": {
        "type": "paragraph",
        "id": "02eae9212df53254",
        "text": "[[Alan Kay]]: "
      },
      "date": 1713044695327
    },
    {
      "type": "edit",
      "id": "02eae9212df53254",
      "item": {
        "type": "paragraph",
        "id": "02eae9212df53254",
        "text": "[[Alan Kay]]: I don’t know who first made the parallel between programming a computer and using a tool, but it was certainly implicit in Jack Licklider's thoughts about “man-machine symbiosis” as he set up the ARPA IPTO research projects in the early sixties. In 1962. Ivan Sutherland's Sketchpad became the exemplar to this day for what interactive computing should be like—including having the enduser be able to reshape the tool.\n"
      },
      "date": 1713044702612
    },
    {
      "type": "edit",
      "id": "02eae9212df53254",
      "item": {
        "type": "paragraph",
        "id": "02eae9212df53254",
        "text": "[[Alan Kay]]: I don’t know who first made the parallel between programming a computer and using a tool, but it was certainly implicit in [[Jack Licklider]]'s thoughts about “man-machine symbiosis” as he set up the ARPA IPTO research projects in the early sixties. In 1962. Ivan Sutherland's Sketchpad became the exemplar to this day for what interactive computing should be like—including having the enduser be able to reshape the tool.\n"
      },
      "date": 1713044728650
    },
    {
      "type": "edit",
      "id": "02eae9212df53254",
      "item": {
        "type": "paragraph",
        "id": "02eae9212df53254",
        "text": "[[Alan Kay]]: I don’t know who first made the parallel between programming a computer and using a tool, but it was certainly implicit in [[Jack Licklider]]'s thoughts about “Man-Machine Symbiosis” as he set up the ARPA IPTO research projects in the early sixties. In 1962. Ivan Sutherland's Sketchpad became the exemplar to this day for what interactive computing should be like—including having the enduser be able to reshape the tool.\n"
      },
      "date": 1713044754086
    },
    {
      "type": "edit",
      "id": "02eae9212df53254",
      "item": {
        "type": "paragraph",
        "id": "02eae9212df53254",
        "text": "[[Alan Kay]]: I don’t know who first made the parallel between programming a computer and using a tool, but it was certainly implicit in [[Jack Licklider]]'s thoughts about “Man-Machine Symbiosis” as he set up the ARPA IPTO research projects in the early sixties. In 1962. [[Ivan Sutherland]]'s Sketchpad became the exemplar to this day for what interactive computing should be like—including having the enduser be able to reshape the tool.\n"
      },
      "date": 1713044770151
    },
    {
      "item": {
        "type": "factory",
        "id": "d9162b1680b2fb35"
      },
      "id": "d9162b1680b2fb35",
      "type": "add",
      "after": "02eae9212df53254",
      "date": 1713044785366
    },
    {
      "type": "edit",
      "id": "d9162b1680b2fb35",
      "item": {
        "type": "paragraph",
        "id": "d9162b1680b2fb35",
        "text": "The idea that programming should be set up so it could be metaphorically like writing is harder to track down, but you could see it in Cliff Shaw’s JOSS from the same early period. Besides being the first real “end-user” language, and the first attempt at a really \"user-friendly\" interface, it included a special terminal design adapted from a high-quality IBM electric typewriter that printed in two colors in lower and upper case on drilled fanfold 8* 11 paper so that the output was a direct extension of one's notebook.\n"
      },
      "date": 1713044786926
    },
    {
      "type": "edit",
      "id": "d9162b1680b2fb35",
      "item": {
        "type": "paragraph",
        "id": "d9162b1680b2fb35",
        "text": "The idea that programming should be set up so it could be metaphorically like writing is harder to track down, but you could see it in [[Cliff Shaw]]’s JOSS from the same early period. Besides being the first real “end-user” language, and the first attempt at a really \"user-friendly\" interface, it included a special terminal design adapted from a high-quality IBM electric typewriter that printed in two colors in lower and upper case on drilled fanfold 8* 11 paper so that the output was a direct extension of one's notebook.\n"
      },
      "date": 1713044804693
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1713044873979
    },
    {
      "item": {
        "type": "factory",
        "id": "66e99de1b6035c2d"
      },
      "id": "66e99de1b6035c2d",
      "type": "add",
      "after": "d9162b1680b2fb35",
      "date": 1713044981465
    },
    {
      "type": "edit",
      "id": "66e99de1b6035c2d",
      "item": {
        "type": "paragraph",
        "id": "66e99de1b6035c2d",
        "text": "The vague term \"computer literacy\" also surfaced in the sixties, and in its strongest sense reflected a belief that the computer was going to be more like the book than a swiss army knife. Being able to “read\" and “write in it would be as universally necessary as reading and writing became after Gutenberg. The Dynabook idea was a prime focus during (his time as (he kind of (hing computers were going to turn into, forced by engineering possibility and sociological necessity.\n"
      },
      "date": 1713044983413
    },
    {
      "type": "edit",
      "id": "66e99de1b6035c2d",
      "item": {
        "type": "paragraph",
        "id": "66e99de1b6035c2d",
        "text": "The vague term \"[[Computer Literacy]]\" also surfaced in the sixties, and in its strongest sense reflected a belief that the computer was going to be more like the book than a swiss army knife. Being able to “read\" and “write in it would be as universally necessary as reading and writing became after Gutenberg. The Dynabook idea was a prime focus during (his time as (he kind of (hing computers were going to turn into, forced by engineering possibility and sociological necessity.\n"
      },
      "date": 1713044998183
    },
    {
      "type": "edit",
      "id": "66e99de1b6035c2d",
      "item": {
        "type": "paragraph",
        "id": "66e99de1b6035c2d",
        "text": "The vague term \"[[Computer Literacy]]\" also surfaced in the sixties, and in its strongest sense reflected a belief that the computer was going to be more like the book than a swiss army knife. Being able to “read\" and “write in it would be as universally necessary as reading and writing became after Gutenberg. The [[Dynabook]] idea was a prime focus during (his time as (he kind of (hing computers were going to turn into, forced by engineering possibility and sociological necessity.\n"
      },
      "date": 1713045029784
    },
    {
      "item": {
        "type": "factory",
        "id": "f1dd965c27aad5f0"
      },
      "id": "f1dd965c27aad5f0",
      "type": "add",
      "after": "66e99de1b6035c2d",
      "date": 1713045039336
    },
    {
      "type": "edit",
      "id": "f1dd965c27aad5f0",
      "item": {
        "type": "paragraph",
        "id": "f1dd965c27aad5f0",
        "text": "The analogy to reading was the easiest to see. If \"reading\" is the skill to be able to understand and use messages represented as gestures in a medium whose conventions are in close agreement between writer and reader, then the equivalent of reading on a computer would require the invention of a user-interface language that could universally frame the works of many thousands of authors whose interests would range far beyond those of the interface designers. \"Writing\" on the other hand requires the end-users to somehow construct the same kinds of things that they had been reading—a much more difficult skill.\n"
      },
      "date": 1713045040886
    },
    {
      "item": {
        "type": "factory",
        "id": "a1ceb18562d5e26c"
      },
      "id": "a1ceb18562d5e26c",
      "type": "add",
      "after": "f1dd965c27aad5f0",
      "date": 1713045074333
    },
    {
      "type": "edit",
      "id": "a1ceb18562d5e26c",
      "item": {
        "type": "paragraph",
        "id": "a1ceb18562d5e26c",
        "text": "At first (his was so analogous to designing a programming language that many \"interactive\" interfaces were designed—some trying to improve on JOSS’ dialogue scheme, while others attempted to build artificially intelligent agents that could turn advice into generalized actions. McCarthy’s \"advice taker ” idea had a huge influence on everyone’s ideas. The notion of \"programming by example\" arose—perhaps the earliest was Teitelman's PILOT system, in which he tried to build an advice taking system (using a pattern matching production system) that could recapitulate the early Al theses at MIT.\n"
      },
      "date": 1713045075890
    },
    {
      "type": "edit",
      "id": "a1ceb18562d5e26c",
      "item": {
        "type": "paragraph",
        "id": "a1ceb18562d5e26c",
        "text": "At first (his was so analogous to designing a programming language that many \"interactive\" interfaces were designed—some trying to improve on JOSS’ dialogue scheme, while others attempted to build artificially intelligent agents that could turn advice into generalized actions. McCarthy’s \"[[Advice Taker]]” idea had a huge influence on everyone’s ideas. The notion of \"programming by example\" arose—perhaps the earliest was Teitelman's PILOT system, in which he tried to build an advice taking system (using a pattern matching production system) that could recapitulate the early Al theses at MIT.\n"
      },
      "date": 1713045102218
    },
    {
      "item": {
        "type": "factory",
        "id": "9f29b1b64cc22d44"
      },
      "id": "9f29b1b64cc22d44",
      "type": "add",
      "after": "a1ceb18562d5e26c",
      "date": 1713045126225
    },
    {
      "type": "edit",
      "id": "9f29b1b64cc22d44",
      "item": {
        "type": "paragraph",
        "id": "9f29b1b64cc22d44",
        "text": "[[Wally Feurzig]] and [[Seymour Papert]] had a different notion about the place of computer \"reading\" and \"writing\": that like the reading and writing of books, it wasn't just about getting and conveying information, but the very act of learning and doing them expands one’s horizons and adds new ways of thinking about the world. In other words, programming could be good for people, and thus some effort should be put into designing systems that would have pedagogical benefit for both children and adults.\n"
      },
      "date": 1713045140281
    },
    {
      "item": {
        "type": "factory",
        "id": "e6d3fbc146ebe85a"
      },
      "id": "e6d3fbc146ebe85a",
      "type": "add",
      "after": "9f29b1b64cc22d44",
      "date": 1713045183649
    },
    {
      "type": "edit",
      "id": "e6d3fbc146ebe85a",
      "item": {
        "type": "paragraph",
        "id": "e6d3fbc146ebe85a",
        "text": "These ideas resonated strongly with me. partly because of my background in music, biology and mathematics. Computer processes coordinating in time go beyond Kepler’s music of the spheres to a \"music of metaphysics\". A very similar metaphor is that of cellular and developmental biology which goes far beyond the classical Newtonism of 19th century science to a much more involved and inherently nonlinear systems organization. To have a medium that could be read and written at this new level of complexity—a level in which many of the \"gotchas\" of our civilization and science reside—seemed tremendously important. And still does.\n"
      },
      "date": 1713045185305
    },
    {
      "type": "edit",
      "id": "e6d3fbc146ebe85a",
      "item": {
        "type": "paragraph",
        "id": "e6d3fbc146ebe85a",
        "text": "These ideas resonated strongly with me, partly because of my background in music, biology and mathematics. Computer processes coordinating in time go beyond Kepler’s music of the spheres to a \"music of metaphysics\". A very similar metaphor is that of cellular and developmental biology which goes far beyond the classical Newtonism of 19th century science to a much more involved and inherently nonlinear systems organization. To have a medium that could be read and written at this new level of complexity—a level in which many of the \"gotchas\" of our civilization and science reside—seemed tremendously important. And still does.\n"
      },
      "date": 1713045263723
    },
    {
      "type": "edit",
      "id": "e6d3fbc146ebe85a",
      "item": {
        "type": "paragraph",
        "id": "e6d3fbc146ebe85a",
        "text": "These ideas resonated strongly with me, partly because of my background in music, biology and mathematics. Computer processes coordinating in time go beyond Kepler’s music of the spheres to a \"music of metaphysics\". A very similar metaphor is that of cellular and developmental biology which goes far beyond the classical Newtonism of 19th century science to a much more involved and inherently nonlinear systems organization. To have a medium that could be read and written at this new level of complexity—a level in which many of the \"gotchas\" of our civilization and science reside—seemed tremendously important. And still does."
      },
      "date": 1713045347280
    },
    {
      "type": "add",
      "id": "5b36952de81200a0",
      "item": {
        "type": "paragraph",
        "id": "5b36952de81200a0",
        "text": "Many such considerations eventually led to the realization that \"it wasn’t a language. but an environment\", and this led directly in the early seventies to the overlapping window and pointing interface coextensive with objects that could send messages to each other and thus model any dynamic system. But the \"writing\" problem still remained—in part, because it was not even clear what the writing problem was.\n"
      },
      "after": "e6d3fbc146ebe85a",
      "date": 1713045348023
    },
    {
      "type": "edit",
      "id": "5b36952de81200a0",
      "item": {
        "type": "paragraph",
        "id": "5b36952de81200a0",
        "text": "Many such considerations eventually led to the realization that \"it wasn’t a language. but an environment\", and this led directly in the early seventies to the overlapping window and pointing interface coextensive with objects that could send messages to each other and thus model any dynamic system. But the \"writing\" problem still remained—in part, because it was not even clear what the writing problem was."
      },
      "date": 1713045375010
    },
    {
      "type": "add",
      "id": "ad9bd02a7d638ea6",
      "item": {
        "type": "paragraph",
        "id": "ad9bd02a7d638ea6",
        "text": "The interface design was strongly influenced by the multiple mentality ideas of Jerome Bruner, in which the \"middle\" mentality, the iconic one. was the bridge between infancy and adolescence. Inspired by a few early examples—such as Paul Kovner's AMBIT-G—we decided to concentrate our research on iconic programming. Still not knowing what it meant, we dealt with it in the traditional manner for handling very difficult problems. Namely, give them to graduate students and tell them they are easy.\n"
      },
      "after": "5b36952de81200a0",
      "date": 1713045375722
    },
    {
      "type": "edit",
      "id": "ad9bd02a7d638ea6",
      "item": {
        "type": "paragraph",
        "id": "ad9bd02a7d638ea6",
        "text": "The interface design was strongly influenced by the multiple mentality ideas of [[Jerome Bruner]], in which the \"middle\" mentality, the iconic one. was the bridge between infancy and adolescence. Inspired by a few early examples—such as Paul Kovner's AMBIT-G—we decided to concentrate our research on iconic programming. Still not knowing what it meant, we dealt with it in the traditional manner for handling very difficult problems. Namely, give them to graduate students and tell them they are easy.\n"
      },
      "date": 1713045389209
    },
    {
      "type": "edit",
      "id": "ad9bd02a7d638ea6",
      "item": {
        "type": "paragraph",
        "id": "ad9bd02a7d638ea6",
        "text": "The interface design was strongly influenced by the multiple mentality ideas of [[Jerome Bruner]], in which the \"middle\" mentality, the iconic one. was the bridge between infancy and adolescence. Inspired by a few early examples—such as [[Paul Kovner]]'s AMBIT-G—we decided to concentrate our research on iconic programming. Still not knowing what it meant, we dealt with it in the traditional manner for handling very difficult problems. Namely, give them to graduate students and tell them they are easy.\n"
      },
      "date": 1713045413779
    },
    {
      "type": "edit",
      "id": "ad9bd02a7d638ea6",
      "item": {
        "type": "paragraph",
        "id": "ad9bd02a7d638ea6",
        "text": "The interface design was strongly influenced by the multiple mentality ideas of [[Jerome Bruner]], in which the \"middle\" mentality, the iconic one. was the bridge between infancy and adolescence. Inspired by a few early examples—such as [[Paul Kovner]]'s AMBIT-G—we decided to concentrate our research on iconic programming. Still not knowing what it meant, we dealt with it in the traditional manner for handling very difficult problems. Namely, give them to graduate students and tell them they are easy."
      },
      "date": 1713045431414
    },
    {
      "type": "add",
      "id": "83a72e4e023723d4",
      "item": {
        "type": "paragraph",
        "id": "83a72e4e023723d4",
        "text": "The first of these was Dave Smith, and his PYGMALION became the new exemplar for what iconic programming by example might mean. A host of others from our group followed—including Alan Boming’s Thinglab. Laura Gould and Bill Finzer’s Programming By Rehearsal. Dan Halbert’s SmallStar. and Dan Ingalls' Ariel (a later version was called FABRIK). By this time a community had formed with Henry Lieberman’s TINKER taking an important new path.\n"
      },
      "after": "ad9bd02a7d638ea6",
      "date": 1713045432357
    },
    {
      "type": "edit",
      "id": "83a72e4e023723d4",
      "item": {
        "type": "paragraph",
        "id": "83a72e4e023723d4",
        "text": "The first of these was [[Dave Smith]], and his PYGMALION became the new exemplar for what iconic programming by example might mean. A host of others from our group followed—including Alan Boming’s Thinglab. Laura Gould and Bill Finzer’s Programming By Rehearsal. Dan Halbert’s SmallStar. and Dan Ingalls' Ariel (a later version was called FABRIK). By this time a community had formed with Henry Lieberman’s TINKER taking an important new path.\n"
      },
      "date": 1713045443078
    },
    {
      "type": "edit",
      "id": "83a72e4e023723d4",
      "item": {
        "type": "paragraph",
        "id": "83a72e4e023723d4",
        "text": "The first of these was [[Dave Smith]], and his PYGMALION became the new exemplar for what iconic programming by example might mean. A host of others from our group followed—including [[Alan Boming]]’s Thinglab. Laura Gould and Bill Finzer’s Programming By Rehearsal. Dan Halbert’s SmallStar. and Dan Ingalls' Ariel (a later version was called FABRIK). By this time a community had formed with Henry Lieberman’s TINKER taking an important new path.\n"
      },
      "date": 1713045473317
    },
    {
      "type": "edit",
      "id": "83a72e4e023723d4",
      "item": {
        "type": "paragraph",
        "id": "83a72e4e023723d4",
        "text": "The first of these was [[Dave Smith]], and his PYGMALION became the new exemplar for what iconic programming by example might mean. A host of others from our group followed—including [[Alan Boming]]’s Thinglab. Laura Gould and Bill Finzer’s [[Programming By Rehearsal]]. Dan Halbert’s SmallStar. and Dan Ingalls' Ariel (a later version was called FABRIK). By this time a community had formed with Henry Lieberman’s TINKER taking an important new path.\n"
      },
      "date": 1713045486628
    },
    {
      "item": {
        "type": "factory",
        "id": "0704cbbc9fcb6232"
      },
      "id": "0704cbbc9fcb6232",
      "type": "add",
      "after": "83a72e4e023723d4",
      "date": 1713045507286
    },
    {
      "type": "edit",
      "id": "0704cbbc9fcb6232",
      "item": {
        "type": "paragraph",
        "id": "0704cbbc9fcb6232",
        "text": "Today, we have windowed interfaces everywhere, and even a number of iconic object-construction kits. We have macro capture systems of every kind, and scripting languages. But we don't have \"end-user programming\". Nor do we have “programming by example\".\n"
      },
      "date": 1713045509686
    },
    {
      "type": "edit",
      "id": "0704cbbc9fcb6232",
      "item": {
        "type": "paragraph",
        "id": "0704cbbc9fcb6232",
        "text": "Today, we have windowed interfaces everywhere, and even a number of iconic object-construction kits. We have macro capture systems of every kind, and scripting languages. But we don't have \"end-user programming\". Nor do we have “programming by example\"."
      },
      "date": 1713045575016
    },
    {
      "type": "add",
      "id": "ad04bcc78dc87dc6",
      "item": {
        "type": "paragraph",
        "id": "ad04bcc78dc87dc6",
        "text": "One of the problems is range. By this I mean that when we teach children English, it is not our intent to teach them a pidgin language, but to gradually reveal the whole thing: the language that Jefferson and Russell wrote in. and with a few style shifts, the language that Shakespeare wrote in. In other words we want learners of English not just to be able to accomplish simple vocational goals, but to be able to aspire to the full range of expression the language makes possible. In computer terms, the range of aspiration should extend at least to the kinds of applications purchased from professionals. By comparison, systems like and almost everything we do can be replaced with vicarious experience, we have to decide to do the activities that make us into actualized humans. We have to decide to exercise, to not eat too much fat and sugar, to learn, to read, to explore, to experiment, to make, to love, to think. In short, to exist.\n"
      },
      "after": "0704cbbc9fcb6232",
      "date": 1713045575863
    },
    {
      "type": "edit",
      "id": "ad04bcc78dc87dc6",
      "item": {
        "type": "paragraph",
        "id": "ad04bcc78dc87dc6",
        "text": "One of the problems is range. By this I mean that when we teach children English, it is not our intent to teach them a pidgin language, but to gradually reveal the whole thing: the language that Jefferson and Russell wrote in. and with a few style shifts, the language that Shakespeare wrote in. In other words we want learners of English not just to be able to accomplish simple vocational goals, but to be able to aspire to the full range of expression the language makes possible. In computer terms, the range of aspiration should extend at least to the kinds of applications purchased from professionals. By comparison, systems like and almost everything we do can be replaced with vicarious experience, we have to decide to do the activities that make us into actualized humans. We have to decide to exercise, to not eat too much fat and sugar, to learn, to read, to explore, to experiment, to make, to love, to think. In short, to exist."
      },
      "date": 1713045634142
    },
    {
      "type": "add",
      "id": "72119dbe3898815b",
      "item": {
        "type": "paragraph",
        "id": "72119dbe3898815b",
        "text": "Difficulties are annoying and we like to remove them. But we have to be careful to only remove the gratuitous ones. As for the others—those whose surmounting makes us grow stronger in mind and body—we have to decide to leave those in and face them.\n"
      },
      "after": "ad04bcc78dc87dc6",
      "date": 1713045634917
    }
  ]
}