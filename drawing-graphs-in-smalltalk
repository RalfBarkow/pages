{
  "title": "Drawing Graphs in Smalltalk",
  "story": [
    {
      "type": "factory",
      "id": "84ade8c51c40f133"
    },
    {
      "type": "markdown",
      "id": "4bd9636c9c0047aa",
      "text": "http://coweb.cc.gatech.edu/cs2340/6372"
    },
    {
      "type": "markdown",
      "id": "249aa71f904c24fd",
      "text": "[[Vertex]] - a point on a graph\n[[Edge]] - an edge/line connecting 2 Vertices.\n[[Weight]] - the weight or distance between two Vertices, usally stored with the edge.\n\nIn order to store a graph and be able to interprate it we need some whay to store the information.  There are many methods to do this, the 2 most popular are adjacency list and edge list.\n\nAdjacecy list - for each vertex we keep a list of all other points that are next to it.  This method requires that we either have a vertex class or a 2d arraylist.  Both of these methods are very usefull in larger programs, and bigger applications. But for what im going to show you in smalltalk, this unnecessary and overkill.\n\nEdge list - this is merely a list of edges, i.e. 2 vertices and a weight.  This can be done with a single Array (Ordered Collection).\n\nSo now that we have the basic concepts down we can begin talking about the process.  This tutorial will cover the following steps:\n\n1] create a usable edge list for your graph\n2] create a list of points and edges to chart\n3] draw the now defined points and edges to the screen (using a view)\n\nAs you may have guessed steps 1 and 3 are trivial but 2 may require some work.\n\nfor the remainder of this tutorial we will use the following graph\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Drawing Graphs in Smalltalk",
        "story": []
      },
      "date": 1649916183616
    },
    {
      "item": {
        "type": "factory",
        "id": "84ade8c51c40f133"
      },
      "id": "84ade8c51c40f133",
      "type": "add",
      "date": 1649916221325
    },
    {
      "item": {
        "type": "factory",
        "id": "4bd9636c9c0047aa"
      },
      "id": "4bd9636c9c0047aa",
      "type": "add",
      "after": "84ade8c51c40f133",
      "date": 1649916222895
    },
    {
      "type": "edit",
      "id": "4bd9636c9c0047aa",
      "item": {
        "type": "paragraph",
        "id": "4bd9636c9c0047aa",
        "text": "http://coweb.cc.gatech.edu/cs2340/6372"
      },
      "date": 1649916226135
    },
    {
      "type": "edit",
      "id": "4bd9636c9c0047aa",
      "item": {
        "type": "markdown",
        "id": "4bd9636c9c0047aa",
        "text": "http://coweb.cc.gatech.edu/cs2340/6372"
      },
      "date": 1649916227345
    },
    {
      "item": {
        "type": "factory",
        "id": "63ac83bd2a002e95"
      },
      "id": "63ac83bd2a002e95",
      "type": "add",
      "after": "4bd9636c9c0047aa",
      "date": 1649916304629
    },
    {
      "type": "remove",
      "id": "63ac83bd2a002e95",
      "date": 1649916306534
    },
    {
      "item": {
        "type": "factory",
        "id": "249aa71f904c24fd"
      },
      "id": "249aa71f904c24fd",
      "type": "add",
      "after": "4bd9636c9c0047aa",
      "date": 1649916308914
    },
    {
      "type": "edit",
      "id": "249aa71f904c24fd",
      "item": {
        "type": "paragraph",
        "id": "249aa71f904c24fd",
        "text": "Vertex - a point on a graph\nEdge - an edge/line connecting 2 Vertices.\nWeight - the weight or distance between two Vertices, usally stored with the edge.\n\nIn order to store a graph and be able to interprate it we need some whay to store the information.  There are many methods to do this, the 2 most popular are adjacency list and edge list.\n\nAdjacecy list - for each vertex we keep a list of all other points that are next to it.  This method requires that we either have a vertex class or a 2d arraylist.  Both of these methods are very usefull in larger programs, and bigger applications. But for what im going to show you in smalltalk, this unnecessary and overkill.\n\nEdge list - this is merely a list of edges, i.e. 2 vertices and a weight.  This can be done with a single Array (Ordered Collection).\n\nSo now that we have the basic concepts down we can begin talking about the process.  This tutorial will cover the following steps:\n\n1] create a usable edge list for your graph\n2] create a list of points and edges to chart\n3] draw the now defined points and edges to the screen (using a view)\n\nAs you may have guessed steps 1 and 3 are trivial but 2 may require some work.\n\nfor the remainder of this tutorial we will use the following graph\n"
      },
      "date": 1649916311679
    },
    {
      "type": "edit",
      "id": "249aa71f904c24fd",
      "item": {
        "type": "markdown",
        "id": "249aa71f904c24fd",
        "text": "Vertex - a point on a graph\nEdge - an edge/line connecting 2 Vertices.\nWeight - the weight or distance between two Vertices, usally stored with the edge.\n\nIn order to store a graph and be able to interprate it we need some whay to store the information.  There are many methods to do this, the 2 most popular are adjacency list and edge list.\n\nAdjacecy list - for each vertex we keep a list of all other points that are next to it.  This method requires that we either have a vertex class or a 2d arraylist.  Both of these methods are very usefull in larger programs, and bigger applications. But for what im going to show you in smalltalk, this unnecessary and overkill.\n\nEdge list - this is merely a list of edges, i.e. 2 vertices and a weight.  This can be done with a single Array (Ordered Collection).\n\nSo now that we have the basic concepts down we can begin talking about the process.  This tutorial will cover the following steps:\n\n1] create a usable edge list for your graph\n2] create a list of points and edges to chart\n3] draw the now defined points and edges to the screen (using a view)\n\nAs you may have guessed steps 1 and 3 are trivial but 2 may require some work.\n\nfor the remainder of this tutorial we will use the following graph\n"
      },
      "date": 1649916314032
    },
    {
      "type": "edit",
      "id": "249aa71f904c24fd",
      "item": {
        "type": "markdown",
        "id": "249aa71f904c24fd",
        "text": "[[Vertex]] - a point on a graph\n[[Edge]] - an edge/line connecting 2 Vertices.\n[[Weight]] - the weight or distance between two Vertices, usally stored with the edge.\n\nIn order to store a graph and be able to interprate it we need some whay to store the information.  There are many methods to do this, the 2 most popular are adjacency list and edge list.\n\nAdjacecy list - for each vertex we keep a list of all other points that are next to it.  This method requires that we either have a vertex class or a 2d arraylist.  Both of these methods are very usefull in larger programs, and bigger applications. But for what im going to show you in smalltalk, this unnecessary and overkill.\n\nEdge list - this is merely a list of edges, i.e. 2 vertices and a weight.  This can be done with a single Array (Ordered Collection).\n\nSo now that we have the basic concepts down we can begin talking about the process.  This tutorial will cover the following steps:\n\n1] create a usable edge list for your graph\n2] create a list of points and edges to chart\n3] draw the now defined points and edges to the screen (using a view)\n\nAs you may have guessed steps 1 and 3 are trivial but 2 may require some work.\n\nfor the remainder of this tutorial we will use the following graph\n"
      },
      "date": 1649917219518
    }
  ]
}