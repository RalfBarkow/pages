{
  "title": "Parse a String with the Grammar",
  "story": [
    {
      "type": "paragraph",
      "id": "83ab158952568a79",
      "text": "MainSpec.elm test case [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/tests/MainSpec.elm#L8-L22 code]"
    },
    {
      "type": "code",
      "id": "b5eab3649c24c1f9",
      "text": "suite : Test\nsuite =\n    describe \"Parsing Expression Grammar (PEG)\"\n        [ test \"should parse 'abc' and convert it to all upper case 'ABC' with an action.\" <|\n            \\() ->\n                let\n                    expected =\n                        Ok \"ABC\"\n\n                    actual =\n                        result\n                in\n                Expect.equal actual expected\n        ]\n"
    },
    {
      "type": "markdown",
      "id": "56e429f68bdc0077",
      "text": "We focus on `result`. [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L23-L38 code]"
    },
    {
      "type": "code",
      "id": "bb2f02b804d7af55",
      "text": "{-| Parse a string with the grammar\n-}\nresult : Result Error String\nresult =\n    let\n        actions _ found _ =\n            Ok (String.toUpper found)\n\n        predicate _ _ state =\n            ( True, state )\n    in\n    grammarString\n        |> fromString\n        |> Result.andThen (\\grammar -> parse grammar \"\" actions predicate \"abc\")\n\n"
    },
    {
      "type": "markdown",
      "id": "1e683425006f88da",
      "text": "and the `main` function [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L39-L49 code]  evaluates the result of parsing:"
    },
    {
      "type": "code",
      "id": "2fb8139b38576b5d",
      "text": "{-| Check if the parse succeeded\n-}\nmain : Html.Html msg\nmain =\n    case result of\n        Ok value ->\n            Html.text (\"Parsed value: \" ++ value)\n\n        Err error ->\n            Html.text (\"Parse error: \" ++ error.message ++ \" at position \" ++ String.fromInt error.position)\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Parse a String with the Grammar",
        "story": []
      },
      "date": 1696433825038
    },
    {
      "id": "83ab158952568a79",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "83ab158952568a79",
        "text": "â‡’ [[Parse a String with the Grammar]] [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/tests/MainSpec.elm#L8-L22 code]"
      },
      "attribution": {
        "page": "2023-10-04"
      },
      "date": 1696433835450
    },
    {
      "type": "edit",
      "id": "83ab158952568a79",
      "item": {
        "type": "paragraph",
        "id": "83ab158952568a79",
        "text": "MainSpec.elm test case [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/tests/MainSpec.elm#L8-L22 code]"
      },
      "date": 1696433866596
    },
    {
      "id": "b5eab3649c24c1f9",
      "type": "add",
      "item": {
        "type": "code",
        "id": "b5eab3649c24c1f9",
        "text": "suite : Test\nsuite =\n    describe \"Parsing Expression Grammar (PEG)\"\n        [ test \"should parse 'abc' and convert it to all upper case 'ABC' with an action.\" <|\n            \\() ->\n                let\n                    expected =\n                        Ok \"ABC\"\n\n                    actual =\n                        result\n                in\n                Expect.equal actual expected\n        ]\n"
      },
      "after": "83ab158952568a79",
      "attribution": {
        "page": "2023-10-04"
      },
      "date": 1696433885199
    },
    {
      "id": "56e429f68bdc0077",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "56e429f68bdc0077",
        "text": "We focus on `result`. [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L23-L38 code]"
      },
      "after": "b5eab3649c24c1f9",
      "attribution": {
        "page": "2023-10-04"
      },
      "date": 1696433889196
    },
    {
      "id": "bb2f02b804d7af55",
      "type": "add",
      "item": {
        "type": "code",
        "id": "bb2f02b804d7af55",
        "text": "{-| Parse a string with the grammar\n-}\nresult : Result Error String\nresult =\n    let\n        actions _ found _ =\n            Ok (String.toUpper found)\n\n        predicate _ _ state =\n            ( True, state )\n    in\n    grammarString\n        |> fromString\n        |> Result.andThen (\\grammar -> parse grammar \"\" actions predicate \"abc\")\n\n"
      },
      "after": "56e429f68bdc0077",
      "attribution": {
        "page": "2023-10-04"
      },
      "date": 1696433898650
    },
    {
      "id": "1e683425006f88da",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "1e683425006f88da",
        "text": "and the `main` function [https://github.com/RalfBarkow/vite-elm-dojo/blob/70ec0e3129afa2bebc2ae1084d8422093c8ed406/src/Main.elm#L39-L49 code]  evaluates the result of parsing:"
      },
      "after": "bb2f02b804d7af55",
      "attribution": {
        "page": "2023-10-04"
      },
      "date": 1696433903546
    },
    {
      "id": "2fb8139b38576b5d",
      "type": "add",
      "item": {
        "type": "code",
        "id": "2fb8139b38576b5d",
        "text": "{-| Check if the parse succeeded\n-}\nmain : Html.Html msg\nmain =\n    case result of\n        Ok value ->\n            Html.text (\"Parsed value: \" ++ value)\n\n        Err error ->\n            Html.text (\"Parse error: \" ++ error.message ++ \" at position \" ++ String.fromInt error.position)\n"
      },
      "after": "1e683425006f88da",
      "attribution": {
        "page": "2023-10-04"
      },
      "date": 1696433911378
    }
  ]
}