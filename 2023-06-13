{
  "title": "2023-06-13",
  "story": [
    {
      "type": "paragraph",
      "id": "c2a49bc73e78cf9a",
      "text": "⇒ [[The Elm Architecture]] ⇒ test(Main): GREEN \"clickButton 'Parse JSON'\" [https://github.com/RalfBarkow/vite-elm-dojo/commit/0301362d39544fc82529c66a81dea388bb0bedb5 commit]"
    },
    {
      "type": "markdown",
      "id": "30a9ed4fc253ed24",
      "text": "> with avh4/elm-program-test\n* https://github.com/avh4/elm-program-test\n* https://elm-program-test.netlify.app\n* https://package.elm-lang.org/packages/avh4/elm-program-test/latest"
    },
    {
      "type": "paragraph",
      "id": "736480dc0d8fd3eb",
      "text": "Test.Html from the elm-explorations/test package [https://package.elm-lang.org/packages/elm-explorations/test/latest/Test-Html-Query page] make it possible to write unit tests for functions that return Html msg, but often (especially when your view is complicated enough to need to be tested) good test coverage requires testing the interactions between your view and your update functions (which communicate via the Model and Msgs, as explained in \"An Introduction to Elm: [[The Elm Architecture]]\"). [https://elm-program-test.netlify.app/html.html#introducing-the-example-program page]"
    },
    {
      "type": "html",
      "id": "44a801b847122c39",
      "text": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg xmlns=\"http://www.w3.org/2000/svg\"\n     version=\"1.1\" baseProfile=\"full\" width=\"640px\"\n     height=\"440px\" viewBox=\"50 0 640 440\" preserveAspectRatio=\"xMidYMid meet\" style=\"zoom: 1;\">\n    <g font-family='-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'>\n\n        <rect fill=\"none\" stroke=\"#007fff\" stroke-width=\"2\" stroke-dasharray=\"5,5\" x=\"262\" y=\"50\" width=\"368\" height=\"365\" rx=\"20\" ry=\"20\"/>\n        <text fill=\"#007fff\" x=\"375\" y=\"39\" font-size=\"18\" text-anchor=\"middle\" font-style=\"italic\">elm-program-test tests</text>\n\n        <g transform=\"translate(156,79)\">\n            <rect fill=\"#ffffff\" stroke=\"#666\" stroke-width=\"5\" width=\"90\" height=\"246\"/>\n            <text fill=\"#666\" x=\"10\" y=\"27\" font-size=\"20\">Elm</text>\n            <text fill=\"#666\" x=\"10\" y=\"47\" font-size=\"20\">runtime</text>\n        </g>\n\n        <g transform=\"translate(274,0)\">\n            <rect fill=\"#ffffff\" stroke=\"#000000\" stroke-width=\"5\" y=\"63\" width=\"342\" height=\"200\"/>\n            <text fill=\"#000000\" text-anchor=\"middle\" font-size=\"24\" y=\"93\" x=\"40\">Main</text>\n\n            <g transform=\"translate(-10,40)\">\n                <g transform=\"translate(37,126)\">\n                    <rect fill=\"#ffffff\" stroke=\"#000000\" stroke-width=\"5\" width=\"60\" height=\"75\"/>\n                    <text fill=\"#000000\" x=\"30\" y=\"25\" font-size=\"24\" text-anchor=\"middle\">init</text>\n                </g>\n\n                <g transform=\"translate(125,126)\">\n                    <rect fill=\"#ffffff\" stroke=\"#000000\" stroke-width=\"5\" width=\"80\" height=\"75\"/>\n                    <text fill=\"#000000\" x=\"40\" y=\"25\" font-size=\"24\" text-anchor=\"middle\">update</text>\n                    <rect fill=\"none\" stroke=\"#ff7f00\" stroke-width=\"2\" stroke-dasharray=\"5,5\" x=\"-10\" y=\"-10\" width=\"100\" height=\"95\" rx=\"10\" ry=\"10\"/>\n                </g>\n\n                <g transform=\"translate(244,126)\">\n                    <rect fill=\"#ffffff\" stroke=\"#000000\" stroke-width=\"5\" width=\"80\" height=\"75\"/>\n                    <text fill=\"#000000\" x=\"40\" y=\"25\" font-size=\"24\" text-anchor=\"middle\">view</text>\n                    <rect fill=\"none\" stroke=\"#ff7f00\" stroke-width=\"2\" stroke-dasharray=\"5,5\" x=\"-10\" y=\"-10\" width=\"100\" height=\"95\" rx=\"10\" ry=\"10\"/>\n                </g>\n\n                <g transform=\"translate(120,-25)\">\n                    <text fill=\"#ff7f00\" y=\"89\" font-size=\"18\" font-style=\"italic\">update/view unit tests</text>\n                    <text fill=\"#ff7f00\" y=\"109\" font-size=\"18\" font-style=\"italic\">no longer needed</text>\n                    <text fill=\"#ff7f00\" y=\"129\" font-size=\"18\" font-style=\"italic\">with elm-program-test</text>\n                </g>\n            </g>\n        </g>\n\n        <g transform=\"translate(296,230)\">\n            <rect fill=\"#ffffff\" stroke=\"#000000\" stroke-width=\"5\" y=\"83\" width=\"117\" height=\"73\"/>\n            <text fill=\"#ff7f7f\" x=\"0\" y=\"63\" font-size=\"18\" font-style=\"italic\">module unit tests</text>\n            <rect fill=\"none\" stroke=\"#ff7f7f\" stroke-width=\"2\" stroke-dasharray=\"5,5\" x=\"-10\" y=\"73\" width=\"137\" height=\"93\" rx=\"10\" ry=\"10\"/>\n\n            <text text-anchor=\"middle\" font-size=\"48\" y=\"124\" x=\"170\" fill=\"#000000\">...</text>\n        </g>\n    </g>\n</svg>\n"
    },
    {
      "type": "paragraph",
      "id": "ec77971e00dd5764",
      "text": "⇒ [[Decode JSON in Elm]] ⇒ [[2023-06-12]]: In the Msg type of Main.elm I want to add a new variant to represent a message to be created by the eventDecoder function in case of an Unknown event and received by Main's update function. ⇒ test(Main): RED add \"handle UnknownEvent\" [https://github.com/RalfBarkow/vite-elm-dojo/commit/6cef9acfa09f895c8c03cd0a369ba50a5eebb2e4 commit]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-06-13",
        "story": []
      },
      "date": 1686642339659
    },
    {
      "item": {
        "type": "factory",
        "id": "c2a49bc73e78cf9a"
      },
      "id": "c2a49bc73e78cf9a",
      "type": "add",
      "date": 1686642341117
    },
    {
      "type": "edit",
      "id": "c2a49bc73e78cf9a",
      "item": {
        "type": "paragraph",
        "id": "c2a49bc73e78cf9a",
        "text": "⇒ test(Main): GREEN \"clickButton 'Parse JSON'\" "
      },
      "date": 1686642352386
    },
    {
      "type": "edit",
      "id": "c2a49bc73e78cf9a",
      "item": {
        "type": "paragraph",
        "id": "c2a49bc73e78cf9a",
        "text": "⇒ test(Main): GREEN \"clickButton 'Parse JSON'\" [https://github.com/RalfBarkow/vite-elm-dojo/commit/0301362d39544fc82529c66a81dea388bb0bedb5 commit]"
      },
      "date": 1686642381754
    },
    {
      "item": {
        "type": "factory",
        "id": "30a9ed4fc253ed24"
      },
      "id": "30a9ed4fc253ed24",
      "type": "add",
      "after": "c2a49bc73e78cf9a",
      "date": 1686642397366
    },
    {
      "type": "edit",
      "id": "30a9ed4fc253ed24",
      "item": {
        "type": "paragraph",
        "id": "30a9ed4fc253ed24",
        "text": "> with avh4/elm-program-test\nhttps://github.com/avh4/elm-program-test\nhttps://elm-program-test.netlify.app\nhttps://package.elm-lang.org/packages/avh4/elm-program-test/latest"
      },
      "date": 1686642400222
    },
    {
      "type": "edit",
      "id": "30a9ed4fc253ed24",
      "item": {
        "type": "markdown",
        "id": "30a9ed4fc253ed24",
        "text": "> with avh4/elm-program-test\nhttps://github.com/avh4/elm-program-test\nhttps://elm-program-test.netlify.app\nhttps://package.elm-lang.org/packages/avh4/elm-program-test/latest"
      },
      "date": 1686642401980
    },
    {
      "item": {
        "type": "factory",
        "id": "4d54213c3d5eb063"
      },
      "id": "4d54213c3d5eb063",
      "type": "add",
      "after": "30a9ed4fc253ed24",
      "date": 1686642480896
    },
    {
      "type": "edit",
      "id": "4d54213c3d5eb063",
      "item": {
        "type": "paragraph",
        "id": "4d54213c3d5eb063",
        "text": "⇒ [[The Elm Architecture]]"
      },
      "date": 1686642488091
    },
    {
      "type": "remove",
      "id": "4d54213c3d5eb063",
      "date": 1686642499401
    },
    {
      "type": "edit",
      "id": "c2a49bc73e78cf9a",
      "item": {
        "type": "paragraph",
        "id": "c2a49bc73e78cf9a",
        "text": "⇒ [[The Elm Architecture]] ⇒ test(Main): GREEN \"clickButton 'Parse JSON'\" [https://github.com/RalfBarkow/vite-elm-dojo/commit/0301362d39544fc82529c66a81dea388bb0bedb5 commit]"
      },
      "date": 1686642503691
    },
    {
      "item": {
        "type": "factory",
        "id": "736480dc0d8fd3eb"
      },
      "id": "736480dc0d8fd3eb",
      "type": "add",
      "after": "30a9ed4fc253ed24",
      "date": 1686642528401
    },
    {
      "type": "edit",
      "id": "736480dc0d8fd3eb",
      "item": {
        "type": "paragraph",
        "id": "736480dc0d8fd3eb",
        "text": "Test.Html from the elm-explorations/test package (opens new window) make it possible to write unit tests for functions that return Html msg, but often (especially when your view is complicated enough to need to be tested) good test coverage requires testing the interactions between your view and your update functions (which communicate via the Model and Msgs, as explained in \"An Introduction to Elm: The Elm Architecture\" (opens new window))."
      },
      "date": 1686642530587
    },
    {
      "type": "edit",
      "id": "736480dc0d8fd3eb",
      "item": {
        "type": "paragraph",
        "id": "736480dc0d8fd3eb",
        "text": "Test.Html from the elm-explorations/test package (opens new window) make it possible to write unit tests for functions that return Html msg, but often (especially when your view is complicated enough to need to be tested) good test coverage requires testing the interactions between your view and your update functions (which communicate via the Model and Msgs, as explained in \"An Introduction to Elm: [[The Elm Architecture]]\" (opens new window)). [https://elm-program-test.netlify.app/html.html#introducing-the-example-program page]"
      },
      "date": 1686642554338
    },
    {
      "item": {
        "type": "factory",
        "id": "44a801b847122c39"
      },
      "id": "44a801b847122c39",
      "type": "add",
      "after": "736480dc0d8fd3eb",
      "date": 1686642649487
    },
    {
      "type": "edit",
      "id": "44a801b847122c39",
      "item": {
        "type": "html",
        "id": "44a801b847122c39",
        "text": "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg xmlns=\"http://www.w3.org/2000/svg\"\n     version=\"1.1\" baseProfile=\"full\" width=\"640px\"\n     height=\"440px\" viewBox=\"50 0 640 440\" preserveAspectRatio=\"xMidYMid meet\" style=\"zoom: 1;\">\n    <g font-family='-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'>\n\n        <rect fill=\"none\" stroke=\"#007fff\" stroke-width=\"2\" stroke-dasharray=\"5,5\" x=\"262\" y=\"50\" width=\"368\" height=\"365\" rx=\"20\" ry=\"20\"/>\n        <text fill=\"#007fff\" x=\"375\" y=\"39\" font-size=\"18\" text-anchor=\"middle\" font-style=\"italic\">elm-program-test tests</text>\n\n        <g transform=\"translate(156,79)\">\n            <rect fill=\"#ffffff\" stroke=\"#666\" stroke-width=\"5\" width=\"90\" height=\"246\"/>\n            <text fill=\"#666\" x=\"10\" y=\"27\" font-size=\"20\">Elm</text>\n            <text fill=\"#666\" x=\"10\" y=\"47\" font-size=\"20\">runtime</text>\n        </g>\n\n        <g transform=\"translate(274,0)\">\n            <rect fill=\"#ffffff\" stroke=\"#000000\" stroke-width=\"5\" y=\"63\" width=\"342\" height=\"200\"/>\n            <text fill=\"#000000\" text-anchor=\"middle\" font-size=\"24\" y=\"93\" x=\"40\">Main</text>\n\n            <g transform=\"translate(-10,40)\">\n                <g transform=\"translate(37,126)\">\n                    <rect fill=\"#ffffff\" stroke=\"#000000\" stroke-width=\"5\" width=\"60\" height=\"75\"/>\n                    <text fill=\"#000000\" x=\"30\" y=\"25\" font-size=\"24\" text-anchor=\"middle\">init</text>\n                </g>\n\n                <g transform=\"translate(125,126)\">\n                    <rect fill=\"#ffffff\" stroke=\"#000000\" stroke-width=\"5\" width=\"80\" height=\"75\"/>\n                    <text fill=\"#000000\" x=\"40\" y=\"25\" font-size=\"24\" text-anchor=\"middle\">update</text>\n                    <rect fill=\"none\" stroke=\"#ff7f00\" stroke-width=\"2\" stroke-dasharray=\"5,5\" x=\"-10\" y=\"-10\" width=\"100\" height=\"95\" rx=\"10\" ry=\"10\"/>\n                </g>\n\n                <g transform=\"translate(244,126)\">\n                    <rect fill=\"#ffffff\" stroke=\"#000000\" stroke-width=\"5\" width=\"80\" height=\"75\"/>\n                    <text fill=\"#000000\" x=\"40\" y=\"25\" font-size=\"24\" text-anchor=\"middle\">view</text>\n                    <rect fill=\"none\" stroke=\"#ff7f00\" stroke-width=\"2\" stroke-dasharray=\"5,5\" x=\"-10\" y=\"-10\" width=\"100\" height=\"95\" rx=\"10\" ry=\"10\"/>\n                </g>\n\n                <g transform=\"translate(120,-25)\">\n                    <text fill=\"#ff7f00\" y=\"89\" font-size=\"18\" font-style=\"italic\">update/view unit tests</text>\n                    <text fill=\"#ff7f00\" y=\"109\" font-size=\"18\" font-style=\"italic\">no longer needed</text>\n                    <text fill=\"#ff7f00\" y=\"129\" font-size=\"18\" font-style=\"italic\">with elm-program-test</text>\n                </g>\n            </g>\n        </g>\n\n        <g transform=\"translate(296,230)\">\n            <rect fill=\"#ffffff\" stroke=\"#000000\" stroke-width=\"5\" y=\"83\" width=\"117\" height=\"73\"/>\n            <text fill=\"#ff7f7f\" x=\"0\" y=\"63\" font-size=\"18\" font-style=\"italic\">module unit tests</text>\n            <rect fill=\"none\" stroke=\"#ff7f7f\" stroke-width=\"2\" stroke-dasharray=\"5,5\" x=\"-10\" y=\"73\" width=\"137\" height=\"93\" rx=\"10\" ry=\"10\"/>\n\n            <text text-anchor=\"middle\" font-size=\"48\" y=\"124\" x=\"170\" fill=\"#000000\">...</text>\n        </g>\n    </g>\n</svg>\n"
      },
      "date": 1686642657759
    },
    {
      "id": "44a801b847122c39",
      "type": "move",
      "order": [
        "c2a49bc73e78cf9a",
        "30a9ed4fc253ed24",
        "44a801b847122c39",
        "736480dc0d8fd3eb"
      ],
      "date": 1686642697500
    },
    {
      "type": "edit",
      "id": "736480dc0d8fd3eb",
      "item": {
        "type": "paragraph",
        "id": "736480dc0d8fd3eb",
        "text": "Test.Html from the elm-explorations/test package make it possible to write unit tests for functions that return Html msg, but often (especially when your view is complicated enough to need to be tested) good test coverage requires testing the interactions between your view and your update functions (which communicate via the Model and Msgs, as explained in \"An Introduction to Elm: [[The Elm Architecture]]\" (opens new window)). [https://elm-program-test.netlify.app/html.html#introducing-the-example-program page]"
      },
      "date": 1686642725274
    },
    {
      "id": "736480dc0d8fd3eb",
      "type": "move",
      "order": [
        "c2a49bc73e78cf9a",
        "30a9ed4fc253ed24",
        "736480dc0d8fd3eb",
        "44a801b847122c39"
      ],
      "date": 1686642750961
    },
    {
      "type": "edit",
      "id": "736480dc0d8fd3eb",
      "item": {
        "type": "paragraph",
        "id": "736480dc0d8fd3eb",
        "text": "Test.Html from the elm-explorations/test package [https://package.elm-lang.org/packages/elm-explorations/test/latest/Test-Html-Query page] make it possible to write unit tests for functions that return Html msg, but often (especially when your view is complicated enough to need to be tested) good test coverage requires testing the interactions between your view and your update functions (which communicate via the Model and Msgs, as explained in \"An Introduction to Elm: [[The Elm Architecture]]\" (opens new window)). [https://elm-program-test.netlify.app/html.html#introducing-the-example-program page]"
      },
      "date": 1686642783691
    },
    {
      "type": "edit",
      "id": "736480dc0d8fd3eb",
      "item": {
        "type": "paragraph",
        "id": "736480dc0d8fd3eb",
        "text": "Test.Html from the elm-explorations/test package [https://package.elm-lang.org/packages/elm-explorations/test/latest/Test-Html-Query page] make it possible to write unit tests for functions that return Html msg, but often (especially when your view is complicated enough to need to be tested) good test coverage requires testing the interactions between your view and your update functions (which communicate via the Model and Msgs, as explained in \"An Introduction to Elm: [[The Elm Architecture]]\"). [https://elm-program-test.netlify.app/html.html#introducing-the-example-program page]"
      },
      "date": 1686642811466
    },
    {
      "id": "ec77971e00dd5764",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "⇒ [[Decode JSON in Elm]]: In the Msg type of Main.elm I want to add a new variant to represent a message to be created by the eventDecoder function in case of an Unknown event and received by Main's update function."
      },
      "after": "44a801b847122c39",
      "attribution": {
        "page": "2023-06-12"
      },
      "date": 1686642993233
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "⇒ [[Decode JSON in Elm]] ⇒ [[2023-06-12]]: In the Msg type of Main.elm I want to add a new variant to represent a message to be created by the eventDecoder function in case of an Unknown event and received by Main's update function."
      },
      "date": 1686643037706
    },
    {
      "type": "edit",
      "id": "30a9ed4fc253ed24",
      "item": {
        "type": "markdown",
        "id": "30a9ed4fc253ed24",
        "text": "> with avh4/elm-program-test\n* https://github.com/avh4/elm-program-test\n* https://elm-program-test.netlify.app\n* https://package.elm-lang.org/packages/avh4/elm-program-test/latest"
      },
      "date": 1686652333501
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "⇒ [[Decode JSON in Elm]] ⇒ [[2023-06-12]]: In the Msg type of Main.elm I want to add a new variant to represent a message to be created by the eventDecoder function in case of an Unknown event and received by Main's update function. ⇒ test(Main): RED add \"handle UnknownEvent\" "
      },
      "date": 1686659138505
    },
    {
      "type": "edit",
      "id": "ec77971e00dd5764",
      "item": {
        "type": "paragraph",
        "id": "ec77971e00dd5764",
        "text": "⇒ [[Decode JSON in Elm]] ⇒ [[2023-06-12]]: In the Msg type of Main.elm I want to add a new variant to represent a message to be created by the eventDecoder function in case of an Unknown event and received by Main's update function. ⇒ test(Main): RED add \"handle UnknownEvent\" [https://github.com/RalfBarkow/vite-elm-dojo/commit/6cef9acfa09f895c8c03cd0a369ba50a5eebb2e4 commit]"
      },
      "date": 1686659165652
    }
  ]
}