{
  "title": "Smalltalk Best Practice Patterns",
  "story": [
    {
      "type": "html",
      "text": "[[Category Book]]: <i>Smalltalk Best Practice Patterns</i> by [[Kent Beck]], Prentice Hall, 1997, ISBN:0-13-476904-X. (save $6.00 at bookpool [http://www.bookpool.com/.x/6rmifodx2r/sm/013476904X www.bookpool.com])",
      "id": "87cda952e760f88eeaad77c5110ea356"
    },
    {
      "type": "html",
      "text": "\nI got tired of going to clients and seeing them make the\nsame stupid mistakes over and over again.  Isn't this what\npatterns are supposed to address?",
      "id": "03454be01ed65e33bfa04772228a1e6e"
    },
    {
      "type": "html",
      "text": "\nI started writing patterns in my [[Smalltalk Report]] column\nthat tried to tell people what I did that kept me out of\ntrouble.  To my mind, most programming is not about going\nup on the mountaintop, being struck by lightning, and \nbringing down \"the answer\" carved on stone tablets.  Most\nprogramming is applying yesterday's solutions to today's\nproblems. Most of the time a client is convinced I am a\ngenius, I've just applied a pattern that they don't know.\nI'm not a great programmer, I'm a pretty good programmer\nwith great habits.",
      "id": "8fe5fbb51d3b0757fe4aa5f5840af110"
    },
    {
      "type": "html",
      "text": "\nHence, the Best Practice Patterns.  I will be publishing\nthem in book form[1] over the next few years.  I expect to \ndivide the patterns up into digestible chunks that address\na coherent need, like user interface design and implementation\nor project management.",
      "id": "b5b0a23cad5282500168e5606fa13ca7"
    },
    {
      "type": "html",
      "text": "-- [[Kent Beck]]",
      "id": "f0685cb0cc12c0fb05bead50ddc2ffb0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ee9e61b672bd333f7725df048e61fc79"
    },
    {
      "type": "html",
      "text": "This is a really cool book.  I consider myself an intermediate-level Smalltalk programmer, and reading this book was one of the major forces that boosted me out of apprenticeship.  I particularly like the chapter on the Collections classes: it's the first explanation I've seen that concentrates on \"why\" rather than \"what\".  For instance, the writeup on Array explains how to decide whether an Array or an [[Ordered Collection]] is the most appropriate fit.  The entire chapter organizes the Collections and their methods into a coherent world-view; after reading it, I feel I have a much better understanding of which tool to use for which task.",
      "id": "673f58bce6f5e50e27e243c3659a48fe"
    },
    {
      "type": "html",
      "text": "-- [[Betsy Hanes Perry]]",
      "id": "37af962ba3407d543b278af578bd69e1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ee9e61b672bd333f7725df048e61fc79"
    },
    {
      "type": "html",
      "text": "I've found it kind of fun to open this book every once in a while in the bookstore to see if I can figure out a bit of Smalltalk from it.  I know that it isn't the best way the pick up a language on a ten minute a week budget, but the brief examples and very direct writing style have helped me get a feel for the language (in what little time I have) that I don't get from opening one of the big tomes.  I'll probably buy it when I am committed to actually learning the language.  -- [[Michael Feathers]]",
      "id": "67c68b57994677ec6d9ceb4d5aff85bf"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ee9e61b672bd333f7725df048e61fc79"
    },
    {
      "type": "html",
      "text": "\nBuy it anyway. I reckon about 50% of it is completely Smalltalk-specific but the other 50% is just good programming practice whatever the language. [[Intention Revealing Selector]] is one that should be given to every new developer that joins Microsoft.",
      "id": "032eed629441b4e2f2501a52d868f9ad"
    },
    {
      "type": "html",
      "text": "--[[Paul Dyson]]",
      "id": "80661c8c0a9a728166e1e158b56d0fa3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ee9e61b672bd333f7725df048e61fc79"
    },
    {
      "type": "html",
      "text": "\nMichael, I did sort of the opposite. I fooled around with [[Dolphin Smalltalk]] a <i>tiny</i> bit several months back, but not enough to learn it. In the meantime, I had been looking at Kent's book here and there in bookstores. I finally picked it up a month ago. I had read enough bits of it to know it wouldn't be wasted on a Java programmer. But it also inspired me to learn more Smalltalk! --[[Kiel Hodges]]",
      "id": "82710fb15f4dde4535a0143749ca7e94"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ee9e61b672bd333f7725df048e61fc79"
    },
    {
      "type": "html",
      "text": "\nYou obviously have good taste in books, Sam :-), and dang! you're going to be good in a few weeks. My head hurts from just thinking about cramming $500 worth of books into it. --[[Alistair Cockburn]]",
      "id": "027d963a3a0b0294faacd0808a8ec100"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ee9e61b672bd333f7725df048e61fc79"
    },
    {
      "type": "html",
      "text": "Just to second some of the above - read this <i>whatever</i> language you program in. --[[David Harvey]]",
      "id": "33be1aa55b732b96fcf025ad2b6ede9f"
    },
    {
      "type": "html",
      "text": "<i>Just don't read it to find Squeak-style programs to type in ;-) --PCP</i>",
      "id": "e534ba8cd30847a089ef3ec08dc04367"
    },
    {
      "type": "html",
      "text": "\nBTW, anyone have any idea why the defacto standard changed from having an abstract class named <i>I<b></b>ndexedCollection</i> to the later trend of having an abstract <i>S<b></b>equenceableCollection</i>? I know it's not important, but I was just curious about what caused this change in most library implementations? --rad",
      "id": "97141c6818467b73db2573be5390b319"
    },
    {
      "type": "html",
      "text": "<i>Since arrays and linked lists are the two, competing, primal data structures in [[Computer Science]]...? --[[Phl Ip]]</i>",
      "id": "837622f0adcb2e4dab8b127239b84d9c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ee9e61b672bd333f7725df048e61fc79"
    },
    {
      "type": "html",
      "text": "I agree that a lot of this book is applicable to other languages.  I bought it after reading so many recommendations.  To me <i>style and idioms</i> might be more accurate than <i>patterns</i>.  I've found it particularly applicable to the [[Suneido Language]], which is very similar to Smalltalk in philosophy, if not implementation. --[[Andrew Mc Kinlay]]",
      "id": "b7bd412035ad721a3c91326a98cc9849"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ee9e61b672bd333f7725df048e61fc79"
    },
    {
      "type": "html",
      "text": "I cannot thank enough [[Kent Beck]] and this book. This book has changed my way of programming and has changed my thoughts on programming fundamentally. I almost read this book in tears. I think this book is not to read but to live -- you should rechew the book and confirm it in the context of your daily life, uh programming life as well. This book can look very simple and common sense, but that's the power of this book. Apply the practices daily, and you'll see the simplicity accomplishes the complexity. --[[June Kim]]",
      "id": "b75edc2c7f355ade303412722c18c973"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ee9e61b672bd333f7725df048e61fc79"
    },
    {
      "type": "html",
      "text": "In [[Smalltalk Best Practice Patterns]] [[Kent Beck]] writes:",
      "id": "f99a52e1ca9f6360ca524f6ae568df15"
    },
    {
      "type": "html",
      "text": "<i>A simple criteria I use all the time is checking rates of change. I learned this criteria from something [[Brad Cox]] said a long time ago. I've since generalized it to -- don't put two rates of change together. Don't have part of a method that changes in every subclass with parts that don't change. Don't have some instance variables whose values change every second in the same object with instance variables whose values change once in a month. Don't have a collection where some elements are added and removed every second and some elements are added and removed once a month. Don't have code in an object that has to change for every piece of hardware, and code that has to change for every operating system. How do you avoid this problem? You got it, lots of little pieces.</i>",
      "id": "13467bb499e7c2bc7e8a2f2bf5f16598"
    },
    {
      "type": "html",
      "text": "\nCan anyone elucidate this criterion? Give examples for its use?",
      "id": "09397baaeed2fafa3ed7255f35888204"
    },
    {
      "type": "html",
      "text": "\nI can confirm that this applies to codelines in parallel development efforts.\nIn parallel development, there may be more than one \"active\" line of code\nchanges going on. The most common case is when one codeline is being used for \nmaintenance-only and the other is used for new development.",
      "id": "7737a2eac8cce5f61126976e570d0344"
    },
    {
      "type": "html",
      "text": "\nIn this situation, and in many others regarding parallel (not concurrent, but <i>parallel</i>) development, one of the motivating factors to branch of a new codeline is because the two efforts have incompatible [[Rates Of Change]]: The group on the development codeline may be working on significant changes/additions to functionality; while the maintenance line is used for bugfixes with a quick\nturnaround time. The frequency of integration (or relative volatility/stability of the codeline after each integration) often needs to be different, and the\nmore frequent integrations unduly disrupt the folks doing the new development (even though they may not even be touching the same pieces of code).",
      "id": "c78d05790bc12d5552bf8fca134ca433"
    },
    {
      "type": "html",
      "text": "\nWith separate codelines each group can integrate and create new baselines at their own needed frequency, and the one can integrate with changes from the other at their own pace. (PLEASE let us <i>not</i> start a \"[[Continuous Integration]] is better\" war on this page; This is a different context from XP and each practice fits very well within its own context ;-)",
      "id": "ff2d57c821f9bf6b6791d4fecb0f8b9f"
    },
    {
      "type": "html",
      "text": "\nSo it is an exceedingly common [[Parallel Development]] \"best practice\" to use separate, parallel codelines for pieces of development effort that have incompatible [[Rates Of Change]]. --[[Brad Appleton]]",
      "id": "340a3b6e080f6d5766d30e02ac569490"
    },
    {
      "type": "html",
      "text": "<i>This observer believes that Beck is not addressing parallel codelines in the quote above. Beck is referring to the code, saying for example that all the instance variables in an object should change at roughly the same rate. Brad is talking about the coding, i.e. parallel codelines for development efforts with different [[Rates Of Change]]. Brad answers whether parallel codelines are good with \"yes\", dubbing it a \"best practice\". </i>",
      "id": "065c233773928355f12a1bbec37b69f7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "ee9e61b672bd333f7725df048e61fc79"
    },
    {
      "type": "html",
      "text": "[[Category Smalltalk]], [[Category Groups Of Patterns]]",
      "id": "5cc29caa87de7f89d0c22090ec4dba9a"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?SmalltalkBestPracticePatterns c2.com]",
      "id": "24b1004dd10e3e5f890d1ecfef3bb40e"
    }
  ],
  "journal": [
    {
      "date": 1359022460000,
      "id": "6af6e1ecd78c278a22694caca780cf15",
      "type": "create",
      "item": {
        "title": "Smalltalk Best Practice Patterns",
        "story": [
          {
            "type": "html",
            "text": "[[Category Book]]: <i>Smalltalk Best Practice Patterns</i> by [[Kent Beck]], Prentice Hall, 1997, ISBN:0-13-476904-X. (save $6.00 at bookpool [http://www.bookpool.com/.x/6rmifodx2r/sm/013476904X www.bookpool.com])",
            "id": "87cda952e760f88eeaad77c5110ea356"
          },
          {
            "type": "html",
            "text": "\nI got tired of going to clients and seeing them make the\nsame stupid mistakes over and over again.  Isn't this what\npatterns are supposed to address?",
            "id": "03454be01ed65e33bfa04772228a1e6e"
          },
          {
            "type": "html",
            "text": "\nI started writing patterns in my [[Smalltalk Report]] column\nthat tried to tell people what I did that kept me out of\ntrouble.  To my mind, most programming is not about going\nup on the mountaintop, being struck by lightning, and \nbringing down \"the answer\" carved on stone tablets.  Most\nprogramming is applying yesterday's solutions to today's\nproblems. Most of the time a client is convinced I am a\ngenius, I've just applied a pattern that they don't know.\nI'm not a great programmer, I'm a pretty good programmer\nwith great habits.",
            "id": "8fe5fbb51d3b0757fe4aa5f5840af110"
          },
          {
            "type": "html",
            "text": "\nHence, the Best Practice Patterns.  I will be publishing\nthem in book form[1] over the next few years.  I expect to \ndivide the patterns up into digestible chunks that address\na coherent need, like user interface design and implementation\nor project management.",
            "id": "b5b0a23cad5282500168e5606fa13ca7"
          },
          {
            "type": "html",
            "text": "-- [[Kent Beck]]",
            "id": "f0685cb0cc12c0fb05bead50ddc2ffb0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ee9e61b672bd333f7725df048e61fc79"
          },
          {
            "type": "html",
            "text": "This is a really cool book.  I consider myself an intermediate-level Smalltalk programmer, and reading this book was one of the major forces that boosted me out of apprenticeship.  I particularly like the chapter on the Collections classes: it's the first explanation I've seen that concentrates on \"why\" rather than \"what\".  For instance, the writeup on Array explains how to decide whether an Array or an [[Ordered Collection]] is the most appropriate fit.  The entire chapter organizes the Collections and their methods into a coherent world-view; after reading it, I feel I have a much better understanding of which tool to use for which task.",
            "id": "673f58bce6f5e50e27e243c3659a48fe"
          },
          {
            "type": "html",
            "text": "-- [[Betsy Hanes Perry]]",
            "id": "37af962ba3407d543b278af578bd69e1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ee9e61b672bd333f7725df048e61fc79"
          },
          {
            "type": "html",
            "text": "I've found it kind of fun to open this book every once in a while in the bookstore to see if I can figure out a bit of Smalltalk from it.  I know that it isn't the best way the pick up a language on a ten minute a week budget, but the brief examples and very direct writing style have helped me get a feel for the language (in what little time I have) that I don't get from opening one of the big tomes.  I'll probably buy it when I am committed to actually learning the language.  -- [[Michael Feathers]]",
            "id": "67c68b57994677ec6d9ceb4d5aff85bf"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ee9e61b672bd333f7725df048e61fc79"
          },
          {
            "type": "html",
            "text": "\nBuy it anyway. I reckon about 50% of it is completely Smalltalk-specific but the other 50% is just good programming practice whatever the language. [[Intention Revealing Selector]] is one that should be given to every new developer that joins Microsoft.",
            "id": "032eed629441b4e2f2501a52d868f9ad"
          },
          {
            "type": "html",
            "text": "--[[Paul Dyson]]",
            "id": "80661c8c0a9a728166e1e158b56d0fa3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ee9e61b672bd333f7725df048e61fc79"
          },
          {
            "type": "html",
            "text": "\nMichael, I did sort of the opposite. I fooled around with [[Dolphin Smalltalk]] a <i>tiny</i> bit several months back, but not enough to learn it. In the meantime, I had been looking at Kent's book here and there in bookstores. I finally picked it up a month ago. I had read enough bits of it to know it wouldn't be wasted on a Java programmer. But it also inspired me to learn more Smalltalk! --[[Kiel Hodges]]",
            "id": "82710fb15f4dde4535a0143749ca7e94"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ee9e61b672bd333f7725df048e61fc79"
          },
          {
            "type": "html",
            "text": "\nYou obviously have good taste in books, Sam :-), and dang! you're going to be good in a few weeks. My head hurts from just thinking about cramming $500 worth of books into it. --[[Alistair Cockburn]]",
            "id": "027d963a3a0b0294faacd0808a8ec100"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ee9e61b672bd333f7725df048e61fc79"
          },
          {
            "type": "html",
            "text": "Just to second some of the above - read this <i>whatever</i> language you program in. --[[David Harvey]]",
            "id": "33be1aa55b732b96fcf025ad2b6ede9f"
          },
          {
            "type": "html",
            "text": "<i>Just don't read it to find Squeak-style programs to type in ;-) --PCP</i>",
            "id": "e534ba8cd30847a089ef3ec08dc04367"
          },
          {
            "type": "html",
            "text": "\nBTW, anyone have any idea why the defacto standard changed from having an abstract class named <i>I<b></b>ndexedCollection</i> to the later trend of having an abstract <i>S<b></b>equenceableCollection</i>? I know it's not important, but I was just curious about what caused this change in most library implementations? --rad",
            "id": "97141c6818467b73db2573be5390b319"
          },
          {
            "type": "html",
            "text": "<i>Since arrays and linked lists are the two, competing, primal data structures in [[Computer Science]]...? --[[Phl Ip]]</i>",
            "id": "837622f0adcb2e4dab8b127239b84d9c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ee9e61b672bd333f7725df048e61fc79"
          },
          {
            "type": "html",
            "text": "I agree that a lot of this book is applicable to other languages.  I bought it after reading so many recommendations.  To me <i>style and idioms</i> might be more accurate than <i>patterns</i>.  I've found it particularly applicable to the [[Suneido Language]], which is very similar to Smalltalk in philosophy, if not implementation. --[[Andrew Mc Kinlay]]",
            "id": "b7bd412035ad721a3c91326a98cc9849"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ee9e61b672bd333f7725df048e61fc79"
          },
          {
            "type": "html",
            "text": "I cannot thank enough [[Kent Beck]] and this book. This book has changed my way of programming and has changed my thoughts on programming fundamentally. I almost read this book in tears. I think this book is not to read but to live -- you should rechew the book and confirm it in the context of your daily life, uh programming life as well. This book can look very simple and common sense, but that's the power of this book. Apply the practices daily, and you'll see the simplicity accomplishes the complexity. --[[June Kim]]",
            "id": "b75edc2c7f355ade303412722c18c973"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ee9e61b672bd333f7725df048e61fc79"
          },
          {
            "type": "html",
            "text": "In [[Smalltalk Best Practice Patterns]] [[Kent Beck]] writes:",
            "id": "f99a52e1ca9f6360ca524f6ae568df15"
          },
          {
            "type": "html",
            "text": "<i>A simple criteria I use all the time is checking rates of change. I learned this criteria from something [[Brad Cox]] said a long time ago. I've since generalized it to -- don't put two rates of change together. Don't have part of a method that changes in every subclass with parts that don't change. Don't have some instance variables whose values change every second in the same object with instance variables whose values change once in a month. Don't have a collection where some elements are added and removed every second and some elements are added and removed once a month. Don't have code in an object that has to change for every piece of hardware, and code that has to change for every operating system. How do you avoid this problem? You got it, lots of little pieces.</i>",
            "id": "13467bb499e7c2bc7e8a2f2bf5f16598"
          },
          {
            "type": "html",
            "text": "\nCan anyone elucidate this criterion? Give examples for its use?",
            "id": "09397baaeed2fafa3ed7255f35888204"
          },
          {
            "type": "html",
            "text": "\nI can confirm that this applies to codelines in parallel development efforts.\nIn parallel development, there may be more than one \"active\" line of code\nchanges going on. The most common case is when one codeline is being used for \nmaintenance-only and the other is used for new development.",
            "id": "7737a2eac8cce5f61126976e570d0344"
          },
          {
            "type": "html",
            "text": "\nIn this situation, and in many others regarding parallel (not concurrent, but <i>parallel</i>) development, one of the motivating factors to branch of a new codeline is because the two efforts have incompatible [[Rates Of Change]]: The group on the development codeline may be working on significant changes/additions to functionality; while the maintenance line is used for bugfixes with a quick\nturnaround time. The frequency of integration (or relative volatility/stability of the codeline after each integration) often needs to be different, and the\nmore frequent integrations unduly disrupt the folks doing the new development (even though they may not even be touching the same pieces of code).",
            "id": "c78d05790bc12d5552bf8fca134ca433"
          },
          {
            "type": "html",
            "text": "\nWith separate codelines each group can integrate and create new baselines at their own needed frequency, and the one can integrate with changes from the other at their own pace. (PLEASE let us <i>not</i> start a \"[[Continuous Integration]] is better\" war on this page; This is a different context from XP and each practice fits very well within its own context ;-)",
            "id": "ff2d57c821f9bf6b6791d4fecb0f8b9f"
          },
          {
            "type": "html",
            "text": "\nSo it is an exceedingly common [[Parallel Development]] \"best practice\" to use separate, parallel codelines for pieces of development effort that have incompatible [[Rates Of Change]]. --[[Brad Appleton]]",
            "id": "340a3b6e080f6d5766d30e02ac569490"
          },
          {
            "type": "html",
            "text": "<i>This observer believes that Beck is not addressing parallel codelines in the quote above. Beck is referring to the code, saying for example that all the instance variables in an object should change at roughly the same rate. Brad is talking about the coding, i.e. parallel codelines for development efforts with different [[Rates Of Change]]. Brad answers whether parallel codelines are good with \"yes\", dubbing it a \"best practice\". </i>",
            "id": "065c233773928355f12a1bbec37b69f7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "ee9e61b672bd333f7725df048e61fc79"
          },
          {
            "type": "html",
            "text": "[[Category Smalltalk]], [[Category Groups Of Patterns]]",
            "id": "5cc29caa87de7f89d0c22090ec4dba9a"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?SmalltalkBestPracticePatterns c2.com]",
            "id": "24b1004dd10e3e5f890d1ecfef3bb40e"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1627081444245
    }
  ]
}