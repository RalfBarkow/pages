{
  "title": "Memoization via Representables",
  "story": [
    {
      "type": "paragraph",
      "id": "791afaa3e3fe737b",
      "text": "What is the most basic [[Container]] type a language can have? Some people may answer vectors, others would go with hash tables, but in this post [[Iago Leal de Freitas]] is arguing in favor of functions. [https://iagoleal.com/posts/representable-memoize/ post]"
    },
    {
      "type": "paragraph",
      "id": "b038850638cf5953",
      "text": "Yes, functions. Even though they aren’t generally seem as a data structure per se, we will see that most containers are in fact a way to represent a function with a given storage layout. To illustrate this “functions are containers” idea, let’s take a look at an application that tightly couples both concepts: [[Memoization]]. "
    },
    {
      "type": "image",
      "id": "0d120315c1c18147",
      "text": "[[Sequence]]s are functions that do not forget",
      "size": "wide",
      "width": 416,
      "height": 127,
      "url": "/assets/plugins/image/21ae1e03cf3fe3c59d3b67f998ba3906.jpg"
    },
    {
      "type": "paragraph",
      "id": "917598b6f7ee7853",
      "text": "Now consider the datatype of infinite streams as in the previous \"The Lazy Way to Solve Differential Equations\" [https://iagoleal.com/posts/calculus-symbolic-ode/ post]: […]"
    },
    {
      "type": "paragraph",
      "id": "c3b1e0d07efe84aa",
      "text": "For Trees, we index using a breadth-first approach."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Memoization via Representables",
        "story": []
      },
      "date": 1680002442616
    },
    {
      "id": "614930082e40d63e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "614930082e40d63e",
        "text": "Sequences are functions that do not forget"
      },
      "attribution": {
        "page": "2023-03-28"
      },
      "date": 1680002446484
    },
    {
      "item": {
        "type": "factory",
        "id": "791afaa3e3fe737b"
      },
      "id": "791afaa3e3fe737b",
      "type": "add",
      "after": "614930082e40d63e",
      "date": 1680002491089
    },
    {
      "type": "edit",
      "id": "791afaa3e3fe737b",
      "item": {
        "type": "paragraph",
        "id": "791afaa3e3fe737b",
        "text": "https://iagoleal.com/posts/representable-memoize/"
      },
      "date": 1680002492479
    },
    {
      "id": "791afaa3e3fe737b",
      "type": "move",
      "order": [
        "791afaa3e3fe737b",
        "614930082e40d63e"
      ],
      "date": 1680002493630
    },
    {
      "type": "edit",
      "id": "791afaa3e3fe737b",
      "item": {
        "type": "paragraph",
        "id": "791afaa3e3fe737b",
        "text": "[https://iagoleal.com/posts/representable-memoize/ post]"
      },
      "date": 1680002503839
    },
    {
      "type": "edit",
      "id": "791afaa3e3fe737b",
      "item": {
        "type": "paragraph",
        "id": "791afaa3e3fe737b",
        "text": "What is the most basic container type a language can have? Some people may answer vectors, others would go with hash tables, but in this post I am arguing in favor of functions. Yes, functions. Even though they aren’t generally seem as a data structure per se, we will see that most containers are in fact a way to represent a function with a given storage layout. To illustrate this “functions are containers” idea, let’s take a look at an application that tightly couples both concepts: memoization. [https://iagoleal.com/posts/representable-memoize/ post]"
      },
      "date": 1680002518026
    },
    {
      "type": "edit",
      "id": "791afaa3e3fe737b",
      "item": {
        "type": "paragraph",
        "id": "791afaa3e3fe737b",
        "text": "What is the most basic container type a language can have? Some people may answer vectors, others would go with hash tables, but in this post [[Iago Leal de Freitas]] is arguing in favor of functions. Yes, functions. Even though they aren’t generally seem as a data structure per se, we will see that most containers are in fact a way to represent a function with a given storage layout. To illustrate this “functions are containers” idea, let’s take a look at an application that tightly couples both concepts: memoization. [https://iagoleal.com/posts/representable-memoize/ post]"
      },
      "date": 1680002560984
    },
    {
      "type": "edit",
      "id": "791afaa3e3fe737b",
      "item": {
        "type": "paragraph",
        "id": "791afaa3e3fe737b",
        "text": "What is the most basic container type a language can have? Some people may answer vectors, others would go with hash tables, but in this post [[Iago Leal de Freitas]] is arguing in favor of functions. "
      },
      "date": 1680002567892
    },
    {
      "type": "add",
      "id": "b038850638cf5953",
      "item": {
        "type": "paragraph",
        "id": "b038850638cf5953",
        "text": "Yes, functions. Even though they aren’t generally seem as a data structure per se, we will see that most containers are in fact a way to represent a function with a given storage layout. To illustrate this “functions are containers” idea, let’s take a look at an application that tightly couples both concepts: memoization. "
      },
      "after": "791afaa3e3fe737b",
      "date": 1680002573318
    },
    {
      "type": "edit",
      "id": "791afaa3e3fe737b",
      "item": {
        "type": "paragraph",
        "id": "791afaa3e3fe737b",
        "text": "What is the most basic container type a language can have? Some people may answer vectors, others would go with hash tables, but in this post [[Iago Leal de Freitas]] is arguing in favor of functions. [https://iagoleal.com/posts/representable-memoize/ post]"
      },
      "date": 1680002575169
    },
    {
      "type": "edit",
      "id": "614930082e40d63e",
      "item": {
        "type": "paragraph",
        "id": "614930082e40d63e",
        "text": "[[Sequence]]s are functions that do not forget"
      },
      "date": 1680002702252
    },
    {
      "type": "edit",
      "id": "791afaa3e3fe737b",
      "item": {
        "type": "paragraph",
        "id": "791afaa3e3fe737b",
        "text": "What is the most basic [[Container]] type a language can have? Some people may answer vectors, others would go with hash tables, but in this post [[Iago Leal de Freitas]] is arguing in favor of functions. [https://iagoleal.com/posts/representable-memoize/ post]"
      },
      "date": 1680002756836
    },
    {
      "type": "edit",
      "id": "b038850638cf5953",
      "item": {
        "type": "paragraph",
        "id": "b038850638cf5953",
        "text": "Yes, functions. Even though they aren’t generally seem as a data structure per se, we will see that most containers are in fact a way to represent a function with a given storage layout. To illustrate this “functions are containers” idea, let’s take a look at an application that tightly couples both concepts: [[Memoization]]. "
      },
      "date": 1680002815305
    },
    {
      "item": {
        "type": "factory",
        "id": "0d120315c1c18147"
      },
      "id": "0d120315c1c18147",
      "type": "add",
      "after": "614930082e40d63e",
      "date": 1680003634314
    },
    {
      "type": "edit",
      "id": "0d120315c1c18147",
      "item": {
        "type": "image",
        "id": "0d120315c1c18147",
        "text": "Uploaded image",
        "size": "wide",
        "width": 416,
        "height": 127,
        "url": "/assets/plugins/image/21ae1e03cf3fe3c59d3b67f998ba3906.jpg"
      },
      "date": 1680003644691
    },
    {
      "type": "remove",
      "id": "614930082e40d63e",
      "date": 1680003650158
    },
    {
      "type": "edit",
      "id": "0d120315c1c18147",
      "item": {
        "type": "image",
        "id": "0d120315c1c18147",
        "text": "[[Sequence]]s are functions that do not forget",
        "size": "wide",
        "width": 416,
        "height": 127,
        "url": "/assets/plugins/image/21ae1e03cf3fe3c59d3b67f998ba3906.jpg"
      },
      "date": 1680003658500
    },
    {
      "item": {
        "type": "factory",
        "id": "917598b6f7ee7853"
      },
      "id": "917598b6f7ee7853",
      "type": "add",
      "after": "0d120315c1c18147",
      "date": 1680003695345
    },
    {
      "type": "edit",
      "id": "917598b6f7ee7853",
      "item": {
        "type": "paragraph",
        "id": "917598b6f7ee7853",
        "text": "Now consider the datatype of infinite streams as in the previous post: […]"
      },
      "date": 1680003699685
    },
    {
      "type": "edit",
      "id": "917598b6f7ee7853",
      "item": {
        "type": "paragraph",
        "id": "917598b6f7ee7853",
        "text": "Now consider the datatype of infinite streams as in the previous \"The Lazy Way to Solve Differential Equations\" post: […]"
      },
      "date": 1680003755209
    },
    {
      "type": "edit",
      "id": "917598b6f7ee7853",
      "item": {
        "type": "paragraph",
        "id": "917598b6f7ee7853",
        "text": "Now consider the datatype of infinite streams as in the previous \"The Lazy Way to Solve Differential Equations\" [https://iagoleal.com/posts/calculus-symbolic-ode/ post]: […]"
      },
      "date": 1680003768287
    },
    {
      "item": {
        "type": "factory",
        "id": "c3b1e0d07efe84aa"
      },
      "id": "c3b1e0d07efe84aa",
      "type": "add",
      "after": "917598b6f7ee7853",
      "date": 1680004601752
    },
    {
      "type": "edit",
      "id": "c3b1e0d07efe84aa",
      "item": {
        "type": "paragraph",
        "id": "c3b1e0d07efe84aa",
        "text": "For Trees, we index using a breadth-first approach"
      },
      "date": 1680004604670
    },
    {
      "type": "edit",
      "id": "c3b1e0d07efe84aa",
      "item": {
        "type": "paragraph",
        "id": "c3b1e0d07efe84aa",
        "text": "For Trees, we index using a breadth-first approach."
      },
      "date": 1680004615972
    }
  ]
}