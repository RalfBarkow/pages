{
  "title": "reflect",
  "story": [
    {
      "type": "markdown",
      "id": "07106d49f9c92641",
      "text": "* [[Conceptual Hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on **Multiple Inheritance** and **Mixins**, since traits are entirely divorced from the inheritance hierarchy."
    },
    {
      "type": "graphviz",
      "id": "93427393477f9dde",
      "text": "DOT FROM lambda-browsing"
    },
    {
      "type": "paragraph",
      "id": "0ef8c6af0fd04bac",
      "text": "⇒ [[The Art of the Interpreter]]"
    },
    {
      "type": "paragraph",
      "id": "cecea0759be2bef5",
      "text": "⇒ [[construct]] ⇒ [[Composite Class]]"
    },
    {
      "type": "paragraph",
      "id": "a4da781c822c32f3",
      "text": "⇒ [[Mixins and Javascript]]\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "reflect",
        "story": []
      },
      "date": 1662262105021
    },
    {
      "id": "07106d49f9c92641",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "**Traits make it possible for inheritance to be used to [[reflect]] conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on multiple inheritance and mixins, since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262113183
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* conceptual hierarchy "
      },
      "date": 1662262136755
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[conceptual hierarchy]]\n⇒ [[Stateful Traits]]"
      },
      "date": 1662262170800
    },
    {
      "id": "31f9015ba6f77188",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "31f9015ba6f77188",
        "text": "**Traits make it possible for inheritance to be used to [[reflect]] conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on multiple inheritance and mixins, since traits are entirely divorced from the inheritance hierarchy.",
        "alias": "07106d49f9c92641"
      },
      "after": "07106d49f9c92641",
      "date": 1662262200006
    },
    {
      "type": "edit",
      "id": "31f9015ba6f77188",
      "item": {
        "type": "markdown",
        "id": "31f9015ba6f77188",
        "text": "> **Traits make it possible for inheritance to be used to [[reflect]] conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on multiple inheritance and mixins, since traits are entirely divorced from the inheritance hierarchy.",
        "alias": "07106d49f9c92641"
      },
      "date": 1662262204046
    },
    {
      "type": "remove",
      "id": "31f9015ba6f77188",
      "date": 1662262211039
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[conceptual hierarchy]]\n⇒ [[Stateful Traits]]\n> **Traits make it possible for inheritance to be used to [[reflect]] conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on multiple inheritance and mixins, since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262213619
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[conceptual hierarchy]]\n⇒ [[Stateful Traits]]\n> **Traits make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on multiple inheritance and mixins, since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262227204
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[conceptual hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on multiple inheritance and mixins, since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262251079
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[conceptual hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on [[multiple inheritance]] and [[mixins]], since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262294000
    },
    {
      "item": {
        "type": "factory",
        "id": "93427393477f9dde"
      },
      "id": "93427393477f9dde",
      "type": "add",
      "after": "07106d49f9c92641",
      "date": 1662262319620
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[conceptual hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on [[Multiple Inheritance]] and [[Mixins]], since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262321425
    },
    {
      "type": "edit",
      "id": "93427393477f9dde",
      "item": {
        "type": "graphviz",
        "id": "93427393477f9dde",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1662262337314
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[Conceptual Hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on [[Multiple Inheritance]] and [[Mixins]], since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262355818
    },
    {
      "item": {
        "type": "factory",
        "id": "0ef8c6af0fd04bac"
      },
      "id": "0ef8c6af0fd04bac",
      "type": "add",
      "after": "93427393477f9dde",
      "date": 1662263071820
    },
    {
      "type": "edit",
      "id": "0ef8c6af0fd04bac",
      "item": {
        "type": "paragraph",
        "id": "0ef8c6af0fd04bac",
        "text": "⇒ [[The Art of the Interpreter]]"
      },
      "date": 1662263083807
    },
    {
      "item": {
        "type": "factory",
        "id": "cecea0759be2bef5"
      },
      "id": "cecea0759be2bef5",
      "type": "add",
      "after": "0ef8c6af0fd04bac",
      "date": 1662263209690
    },
    {
      "type": "edit",
      "id": "cecea0759be2bef5",
      "item": {
        "type": "paragraph",
        "id": "cecea0759be2bef5",
        "text": "⇒ [[construct]]"
      },
      "date": 1662263227430
    },
    {
      "type": "edit",
      "id": "cecea0759be2bef5",
      "item": {
        "type": "paragraph",
        "id": "cecea0759be2bef5",
        "text": "⇒ [[construct]] ⇒ [Composite Class]]"
      },
      "date": 1662263243555
    },
    {
      "type": "edit",
      "id": "cecea0759be2bef5",
      "item": {
        "type": "paragraph",
        "id": "cecea0759be2bef5",
        "text": "⇒ [[construct]] ⇒ [[Composite Class]]"
      },
      "date": 1662263363743
    },
    {
      "id": "a4da781c822c32f3",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a4da781c822c32f3",
        "text": "⇒ [[Mix In]] ⇒ [[Mixins and Javascript]]\n"
      },
      "after": "cecea0759be2bef5",
      "date": 1662263422431
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[Conceptual Hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on **Multiple Inheritance** and [[Mixins]], since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662263485106
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[Conceptual Hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on **Multiple Inheritance** and **Mixins**, since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662263549821
    },
    {
      "type": "edit",
      "id": "a4da781c822c32f3",
      "item": {
        "type": "paragraph",
        "id": "a4da781c822c32f3",
        "text": "⇒ [[Mixins and Javascript]]\n"
      },
      "date": 1662263569635
    }
  ]
}