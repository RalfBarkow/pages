{
  "title": "reflect",
  "story": [
    {
      "type": "reference",
      "id": "da3f188491a8b60c",
      "site": "wiki.ralfbarkow.ch",
      "slug": "berlegung",
      "title": "Überlegung",
      "text": "\"Reflecting\", radically carried out, can mean nothing else than folding the course of thoughts into a Möbius strip. And the Möbius dizziness is experienced by everyone who tries to think about something (whatever) radically. Maybe this is connected with the fact that we think with two hands, back and forth between the right and the left one. But the two hands can only be brought to coincide with each other in the fourth dimension, by a möbius-like rotation. Much easily this is "
    },
    {
      "type": "reference",
      "id": "093bfcc6e7114eed",
      "site": "wiki.ralfbarkow.ch",
      "slug": "properties-of-parallel-distributed-models",
      "title": "Properties of Parallel Distributed Models",
      "text": "[[Parallel Distributed Models]] have several appealing qualities. They are based on four basic properties of distributed representations: …"
    },
    {
      "type": "paragraph",
      "id": "a18f6e3016326fae",
      "text": "From the first two properties it follows that the [[Representation]]s can reflect the [[Meaning]]s of the [[Concept]]s for which they stand. Because they are continuous, it is possible to represent shades of meaning, and cate­gory memberships become a matter of degree. "
    },
    {
      "type": "markdown",
      "id": "07106d49f9c92641",
      "text": "* [[Conceptual Hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on **Multiple Inheritance** and **Mixins**, since traits are entirely divorced from the inheritance hierarchy."
    },
    {
      "type": "graphviz",
      "id": "93427393477f9dde",
      "text": "DOT FROM lambda-browsing"
    },
    {
      "type": "paragraph",
      "id": "0ef8c6af0fd04bac",
      "text": "⇒ [[The Art of the Interpreter]]"
    },
    {
      "type": "paragraph",
      "id": "cecea0759be2bef5",
      "text": "⇒ [[construct]] ⇒ [[Composite Class]]"
    },
    {
      "type": "paragraph",
      "id": "a4da781c822c32f3",
      "text": "⇒ [[Mixins and Javascript]]\n"
    },
    {
      "type": "pagefold",
      "id": "a23aab3a3690b089",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "0fe4126f4d1aa41b",
      "text": "reflect | BrE rɪˈflɛkt, AmE rəˈflɛk(t) |\nA transitive verb\n1 (throw back) reflektieren\n▸ bask in sb's reflected glory\nsich in jmds. Ruhm sonnen\n2 (reproduce) spiegeln (figurative) widerspiegeln ‹Ansichten, Gefühle, Werte›\n▸ be reflected\nsich spiegeln\n3 (contemplate) nachdenken über (+ Akk.)\n▸ reflect what/how …\nüberlegen, was/wie …\nB intransitive verb\n(meditate) nachdenken\nPHRASAL VERBS\nreflect on\n▶ reflect upon\nreflect upon\ntransitive verb\n1 (consider, contemplate) nachdenken über (+ Akk.) abwägen ‹Konsequenzen›\n2 reflect credit/discredit upon sb/sth\nein gutes/schlechtes Licht auf jmdn./etw. werfen\n3 (bring discredit on) diskreditieren\n▸ reflect upon sb's sincerity\nan jmds. Aufrichtigkeit (Dat.) zweifeln lassen\n▸ reflect badly upon sb/sth\nauf jmdn./etw. ein schlechtes Licht werfen\n4 (bring credit on) reflect well upon sb/sth\njmdn./etw. in einem guten Licht erscheinen lassen\n5 (cast doubt or reproach on) in Zweifel ziehen"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "reflect",
        "story": []
      },
      "date": 1662262105021
    },
    {
      "id": "07106d49f9c92641",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "**Traits make it possible for inheritance to be used to [[reflect]] conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on multiple inheritance and mixins, since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262113183
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* conceptual hierarchy "
      },
      "date": 1662262136755
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[conceptual hierarchy]]\n⇒ [[Stateful Traits]]"
      },
      "date": 1662262170800
    },
    {
      "id": "31f9015ba6f77188",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "31f9015ba6f77188",
        "text": "**Traits make it possible for inheritance to be used to [[reflect]] conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on multiple inheritance and mixins, since traits are entirely divorced from the inheritance hierarchy.",
        "alias": "07106d49f9c92641"
      },
      "after": "07106d49f9c92641",
      "date": 1662262200006
    },
    {
      "type": "edit",
      "id": "31f9015ba6f77188",
      "item": {
        "type": "markdown",
        "id": "31f9015ba6f77188",
        "text": "> **Traits make it possible for inheritance to be used to [[reflect]] conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on multiple inheritance and mixins, since traits are entirely divorced from the inheritance hierarchy.",
        "alias": "07106d49f9c92641"
      },
      "date": 1662262204046
    },
    {
      "type": "remove",
      "id": "31f9015ba6f77188",
      "date": 1662262211039
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[conceptual hierarchy]]\n⇒ [[Stateful Traits]]\n> **Traits make it possible for inheritance to be used to [[reflect]] conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on multiple inheritance and mixins, since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262213619
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[conceptual hierarchy]]\n⇒ [[Stateful Traits]]\n> **Traits make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on multiple inheritance and mixins, since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262227204
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[conceptual hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on multiple inheritance and mixins, since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262251079
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[conceptual hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on [[multiple inheritance]] and [[mixins]], since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262294000
    },
    {
      "item": {
        "type": "factory",
        "id": "93427393477f9dde"
      },
      "id": "93427393477f9dde",
      "type": "add",
      "after": "07106d49f9c92641",
      "date": 1662262319620
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[conceptual hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on [[Multiple Inheritance]] and [[Mixins]], since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262321425
    },
    {
      "type": "edit",
      "id": "93427393477f9dde",
      "item": {
        "type": "graphviz",
        "id": "93427393477f9dde",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1662262337314
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[Conceptual Hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on [[Multiple Inheritance]] and [[Mixins]], since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662262355818
    },
    {
      "item": {
        "type": "factory",
        "id": "0ef8c6af0fd04bac"
      },
      "id": "0ef8c6af0fd04bac",
      "type": "add",
      "after": "93427393477f9dde",
      "date": 1662263071820
    },
    {
      "type": "edit",
      "id": "0ef8c6af0fd04bac",
      "item": {
        "type": "paragraph",
        "id": "0ef8c6af0fd04bac",
        "text": "⇒ [[The Art of the Interpreter]]"
      },
      "date": 1662263083807
    },
    {
      "item": {
        "type": "factory",
        "id": "cecea0759be2bef5"
      },
      "id": "cecea0759be2bef5",
      "type": "add",
      "after": "0ef8c6af0fd04bac",
      "date": 1662263209690
    },
    {
      "type": "edit",
      "id": "cecea0759be2bef5",
      "item": {
        "type": "paragraph",
        "id": "cecea0759be2bef5",
        "text": "⇒ [[construct]]"
      },
      "date": 1662263227430
    },
    {
      "type": "edit",
      "id": "cecea0759be2bef5",
      "item": {
        "type": "paragraph",
        "id": "cecea0759be2bef5",
        "text": "⇒ [[construct]] ⇒ [Composite Class]]"
      },
      "date": 1662263243555
    },
    {
      "type": "edit",
      "id": "cecea0759be2bef5",
      "item": {
        "type": "paragraph",
        "id": "cecea0759be2bef5",
        "text": "⇒ [[construct]] ⇒ [[Composite Class]]"
      },
      "date": 1662263363743
    },
    {
      "id": "a4da781c822c32f3",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a4da781c822c32f3",
        "text": "⇒ [[Mix In]] ⇒ [[Mixins and Javascript]]\n"
      },
      "after": "cecea0759be2bef5",
      "date": 1662263422431
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[Conceptual Hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on **Multiple Inheritance** and [[Mixins]], since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662263485106
    },
    {
      "type": "edit",
      "id": "07106d49f9c92641",
      "item": {
        "type": "markdown",
        "id": "07106d49f9c92641",
        "text": "* [[Conceptual Hierarchy]]\n⇒ [[Stateful Traits]]\n> **[[Traits]] make it possible for inheritance to be used to reflect conceptual hierarchy rather than for code reuse.** Duplicated code can be factored out as traits, rather than being jimmied into a class hierarchy in awkward locations. At the same time, traits largely avoid the fragility problems introduced by approaches based on **Multiple Inheritance** and **Mixins**, since traits are entirely divorced from the inheritance hierarchy."
      },
      "date": 1662263549821
    },
    {
      "type": "edit",
      "id": "a4da781c822c32f3",
      "item": {
        "type": "paragraph",
        "id": "a4da781c822c32f3",
        "text": "⇒ [[Mixins and Javascript]]\n"
      },
      "date": 1662263569635
    },
    {
      "item": {
        "type": "factory",
        "id": "de3be83ae597e522"
      },
      "id": "de3be83ae597e522",
      "type": "add",
      "after": "a4da781c822c32f3",
      "date": 1673878294649
    },
    {
      "id": "093bfcc6e7114eed",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "093bfcc6e7114eed",
        "site": "wiki.ralfbarkow.ch",
        "slug": "properties-of-parallel-distributed-models",
        "title": "Properties of Parallel Distributed Models",
        "text": "[[Parallel Distributed Models]] have several appealing qualities. They are based on four basic properties of distributed representations: …"
      },
      "after": "a4da781c822c32f3",
      "date": 1673878299787
    },
    {
      "type": "remove",
      "id": "de3be83ae597e522",
      "date": 1673878303561
    },
    {
      "id": "093bfcc6e7114eed",
      "type": "move",
      "order": [
        "07106d49f9c92641",
        "093bfcc6e7114eed",
        "93427393477f9dde",
        "0ef8c6af0fd04bac",
        "cecea0759be2bef5",
        "a4da781c822c32f3"
      ],
      "date": 1673878322735
    },
    {
      "id": "a18f6e3016326fae",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a18f6e3016326fae",
        "text": "From the first two properties it follows that the representations can [[reflect]] the meanings of the concepts for which they stand. Because they are continuous, it is possible to represent shades of meaning, and cate­gory memberships become a matter of degree. "
      },
      "after": "093bfcc6e7114eed",
      "date": 1673878340633
    },
    {
      "type": "edit",
      "id": "a18f6e3016326fae",
      "item": {
        "type": "paragraph",
        "id": "a18f6e3016326fae",
        "text": "From the first two properties it follows that the representations can reflect the [[Meaning]]s of the concepts for which they stand. Because they are continuous, it is possible to represent shades of meaning, and cate­gory memberships become a matter of degree. "
      },
      "date": 1673878358249
    },
    {
      "type": "edit",
      "id": "a18f6e3016326fae",
      "item": {
        "type": "paragraph",
        "id": "a18f6e3016326fae",
        "text": "From the first two properties it follows that the representations can reflect the [[Meaning]]s of the [[Concept]]s for which they stand. Because they are continuous, it is possible to represent shades of meaning, and cate­gory memberships become a matter of degree. "
      },
      "date": 1673878421496
    },
    {
      "id": "093bfcc6e7114eed",
      "type": "move",
      "order": [
        "093bfcc6e7114eed",
        "07106d49f9c92641",
        "a18f6e3016326fae",
        "93427393477f9dde",
        "0ef8c6af0fd04bac",
        "cecea0759be2bef5",
        "a4da781c822c32f3"
      ],
      "date": 1673878453925
    },
    {
      "id": "a18f6e3016326fae",
      "type": "move",
      "order": [
        "093bfcc6e7114eed",
        "a18f6e3016326fae",
        "07106d49f9c92641",
        "93427393477f9dde",
        "0ef8c6af0fd04bac",
        "cecea0759be2bef5",
        "a4da781c822c32f3"
      ],
      "date": 1673878456503
    },
    {
      "type": "edit",
      "id": "a18f6e3016326fae",
      "item": {
        "type": "paragraph",
        "id": "a18f6e3016326fae",
        "text": "From the first two properties it follows that the [[Representation]]s can reflect the [[Meaning]]s of the [[Concept]]s for which they stand. Because they are continuous, it is possible to represent shades of meaning, and cate­gory memberships become a matter of degree. "
      },
      "date": 1673878603004
    },
    {
      "item": {
        "type": "factory",
        "id": "a23aab3a3690b089"
      },
      "id": "a23aab3a3690b089",
      "type": "add",
      "after": "a4da781c822c32f3",
      "date": 1676476639246
    },
    {
      "type": "edit",
      "id": "a23aab3a3690b089",
      "item": {
        "type": "pagefold",
        "id": "a23aab3a3690b089",
        "text": "~"
      },
      "date": 1676476642664
    },
    {
      "item": {
        "type": "factory",
        "id": "0fe4126f4d1aa41b"
      },
      "id": "0fe4126f4d1aa41b",
      "type": "add",
      "after": "a23aab3a3690b089",
      "date": 1676476644039
    },
    {
      "type": "edit",
      "id": "0fe4126f4d1aa41b",
      "item": {
        "type": "markdown",
        "id": "0fe4126f4d1aa41b",
        "text": "reflect | BrE rɪˈflɛkt, AmE rəˈflɛk(t) |\nA transitive verb\n1 (throw back) reflektieren\n▸ bask in sb's reflected glory\nsich in jmds. Ruhm sonnen\n2 (reproduce) spiegeln (figurative) widerspiegeln ‹Ansichten, Gefühle, Werte›\n▸ be reflected\nsich spiegeln\n3 (contemplate) nachdenken über (+ Akk.)\n▸ reflect what/how …\nüberlegen, was/wie …\nB intransitive verb\n(meditate) nachdenken\nPHRASAL VERBS\nreflect on\n▶ reflect upon\nreflect upon\ntransitive verb\n1 (consider, contemplate) nachdenken über (+ Akk.) abwägen ‹Konsequenzen›\n2 reflect credit/discredit upon sb/sth\nein gutes/schlechtes Licht auf jmdn./etw. werfen\n3 (bring discredit on) diskreditieren\n▸ reflect upon sb's sincerity\nan jmds. Aufrichtigkeit (Dat.) zweifeln lassen\n▸ reflect badly upon sb/sth\nauf jmdn./etw. ein schlechtes Licht werfen\n4 (bring credit on) reflect well upon sb/sth\njmdn./etw. in einem guten Licht erscheinen lassen\n5 (cast doubt or reproach on) in Zweifel ziehen"
      },
      "date": 1676476645743
    },
    {
      "item": {
        "type": "factory",
        "id": "da3f188491a8b60c"
      },
      "id": "da3f188491a8b60c",
      "type": "add",
      "after": "0fe4126f4d1aa41b",
      "date": 1676476656674
    },
    {
      "type": "edit",
      "id": "da3f188491a8b60c",
      "item": {
        "type": "reference",
        "id": "da3f188491a8b60c",
        "site": "wiki.ralfbarkow.ch",
        "slug": "berlegung",
        "title": "Überlegung",
        "text": "[[reflect]]"
      },
      "date": 1676476658954
    },
    {
      "id": "da3f188491a8b60c",
      "type": "move",
      "order": [
        "da3f188491a8b60c",
        "093bfcc6e7114eed",
        "a18f6e3016326fae",
        "07106d49f9c92641",
        "93427393477f9dde",
        "0ef8c6af0fd04bac",
        "cecea0759be2bef5",
        "a4da781c822c32f3",
        "a23aab3a3690b089",
        "0fe4126f4d1aa41b"
      ],
      "date": 1676476671562
    },
    {
      "type": "edit",
      "id": "da3f188491a8b60c",
      "item": {
        "type": "reference",
        "id": "da3f188491a8b60c",
        "site": "wiki.ralfbarkow.ch",
        "slug": "berlegung",
        "title": "Überlegung",
        "text": "\"Reflecting\", radically carried out, can mean nothing else than folding the course of thoughts into a Möbius strip. And the Möbius dizziness is experienced by everyone who tries to think about something (whatever) radically. Maybe this is connected with the fact that we think with two hands, back and forth between the right and the left one. But the two hands can only be brought to coincide with each other in the fourth dimension, by a möbius-like rotation. Much easily this is "
      },
      "date": 1676476697534
    }
  ]
}