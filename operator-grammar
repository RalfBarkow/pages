{
  "title": "Operator Grammar",
  "story": [
    {
      "type": "paragraph",
      "id": "316c3e89c2ee3131",
      "text": "[…] we require that all arguments be de­ limited by at least one token; such a grammar Floyd [1963] calls an operator grammar. (Pratt, [[Top Down Operator Precedence]], p. 46.)"
    },
    {
      "type": "paragraph",
      "id": "4d161fb789ea0a48",
      "text": "FLOYD, Robert W., 1963. Syntactic analysis and operator precedence. Journal of the ACM (JACM). 1963. Vol. 10, no. 3, p. 316–333. \n"
    },
    {
      "type": "paragraph",
      "id": "19c6122fb0e90655",
      "text": "Three increasingly restricted types of formal grammar are phrase structure grammars, operator grammars and precedence grammars. Precedence grammars form models of mathematical and algorithmic languages which may be analyzed mechanically by a simple procedure based on a matrix representation of a precedence relation between character pairs."
    },
    {
      "type": "pagefold",
      "id": "7cc28f4bb55c78e6",
      "text": "ChatGPT September 25 Version"
    },
    {
      "type": "markdown",
      "id": "06e09a99d354137c",
      "text": "A \"matrix representation of a precedence relation between character pairs\" is a way of organizing information to define the relative order or priority of different characters. This representation uses a two-dimensional grid (matrix) where each cell indicates whether one character has a higher precedence than another.\n\nHere's a breakdown of this concept:\n\n1. **Matrix**: A matrix is a grid-like arrangement of elements. In this context, it's a 2D array where each element represents a relationship between two characters.\n\n2. **Precedence Relation**: Precedence refers to the priority or order in which things should be considered or evaluated. In the context of characters, it means determining which character should come before or after another.\n\n3. **Character Pairs**: Each cell in the matrix corresponds to a pair of characters. For example, if you have a list of characters (e.g., A, B, C, D), then the matrix will have rows and columns representing each character, and each cell (i, j) will indicate the relation between character i and character j.\n\n4. **True/False Values**: The cells of the matrix contain Boolean values (True or False). These values indicate whether character i has higher precedence than character j. For example, if matrix[1][2] is True, it means character at index 1 has higher precedence than character at index 2.\n\n5. **Transitive Relation**: The matrix must satisfy the transitive property. If A has higher precedence than B, and B has higher precedence than C, then A must also have higher precedence than C.\n\n6. **Reflexive Property**: The matrix is often symmetric, meaning if A has higher precedence than B, then B will have lower precedence than A. This is because precedence is typically a symmetric relation.\n\nFor example, consider the characters A, B, C, and D. If we have the following matrix:"
    },
    {
      "type": "code",
      "id": "6396bb2153f83d48",
      "text": "[[ False, True, False, True ],\n [ False, False, True, True ],\n [ True, False, False, True ],\n [ False, False, False, False ]]\n"
    },
    {
      "type": "markdown",
      "id": "646ccbcc71884e51",
      "text": "This matrix indicates:\n\n- A has higher precedence than B.\n- B has higher precedence than C and D.\n- C has higher precedence than A.\n- D has no defined precedence relation with any other character.\n\nThis information can be used to determine if a given string of characters follows the specified precedence relations. For example, in the string \"ABCD\", the characters maintain the specified precedence relations."
    },
    {
      "type": "pagefold",
      "id": "de2de0dae1f5e4ad",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "da3ddfdcf660b300",
      "site": "wiki.ralfbarkow.ch",
      "slug": "schelme-cells",
      "title": "Schelme Cells",
      "text": "2D array (spreadsheet) demo. [https://bburdette.github.io/cellme/arraycelldemo.html page] ⇐ [[Matrix]] is a grid-like arrangement of elements. In this context, it's a 2D array where each element represents a relationship between two characters."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Operator Grammar",
        "story": []
      },
      "date": 1696228938323
    },
    {
      "id": "316c3e89c2ee3131",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "316c3e89c2ee3131",
        "text": "Accordingly we require that all arguments be de­ limited by at least one token; such a grammar Floyd [1963] calls an operator grammar. (Pratt, „Top down operator precedence“.)"
      },
      "attribution": {
        "page": "2023-10-02"
      },
      "date": 1696228945077
    },
    {
      "type": "edit",
      "id": "316c3e89c2ee3131",
      "item": {
        "type": "paragraph",
        "id": "316c3e89c2ee3131",
        "text": "Accordingly we require that all arguments be de­ limited by at least one token; such a grammar Floyd [1963] calls an operator grammar. (Pratt, „Top down operator precedence“, p. 46.)"
      },
      "date": 1696228962791
    },
    {
      "type": "edit",
      "id": "316c3e89c2ee3131",
      "item": {
        "type": "paragraph",
        "id": "316c3e89c2ee3131",
        "text": "Accordingly we require that all arguments be de­ limited by at least one token; such a grammar Floyd [1963] calls an operator grammar. (Pratt, [[Top Down Operator Precedence]], p. 46.)"
      },
      "date": 1696229065865
    },
    {
      "type": "edit",
      "id": "316c3e89c2ee3131",
      "item": {
        "type": "paragraph",
        "id": "316c3e89c2ee3131",
        "text": "[…] we require that all arguments be de­ limited by at least one token; such a grammar Floyd [1963] calls an operator grammar. (Pratt, [[Top Down Operator Precedence]], p. 46.)"
      },
      "date": 1696229081578
    },
    {
      "id": "4d161fb789ea0a48",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4d161fb789ea0a48",
        "text": "FLOYD, Robert W., 1963. Syntactic analysis and operator precedence. Journal of the ACM (JACM). 1963. Vol. 10, no. 3, p. 316–333. \n"
      },
      "after": "316c3e89c2ee3131",
      "attribution": {
        "page": "2023-10-02"
      },
      "date": 1696229094216
    },
    {
      "id": "19c6122fb0e90655",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "19c6122fb0e90655",
        "text": "Three increasingly restricted types of formal grammar are phrase structure grammars, operator grammars and precedence grammars. Precedence grammars form models of mathematical and algorithmic languages which may be analyzed mechanically by a simple procedure based on a matrix representation of a precedence relation between character pairs."
      },
      "after": "4d161fb789ea0a48",
      "attribution": {
        "page": "2023-10-02"
      },
      "date": 1696229098073
    },
    {
      "item": {
        "type": "factory",
        "id": "223b8d7567779211"
      },
      "id": "223b8d7567779211",
      "type": "add",
      "after": "19c6122fb0e90655",
      "date": 1696230688509
    },
    {
      "type": "edit",
      "id": "223b8d7567779211",
      "item": {
        "type": "paragraph",
        "id": "223b8d7567779211",
        "text": "[https://stackoverflow.com/questions/71717840/propositions-parser-using-recursion-in-elm stackoverflow]"
      },
      "date": 1696230697702
    },
    {
      "type": "edit",
      "id": "223b8d7567779211",
      "item": {
        "type": "paragraph",
        "id": "223b8d7567779211",
        "text": "Propositions Parser using recursion in Elm [https://stackoverflow.com/questions/71717840/propositions-parser-using-recursion-in-elm stackoverflow]"
      },
      "date": 1696230711234
    },
    {
      "id": "223b8d7567779211",
      "type": "remove",
      "removedTo": {
        "page": "2023-10-02"
      },
      "date": 1696230740133
    },
    {
      "item": {
        "type": "factory",
        "id": "06e09a99d354137c"
      },
      "id": "06e09a99d354137c",
      "type": "add",
      "after": "19c6122fb0e90655",
      "date": 1696266410536
    },
    {
      "type": "edit",
      "id": "06e09a99d354137c",
      "item": {
        "type": "markdown",
        "id": "06e09a99d354137c",
        "text": "A \"matrix representation of a precedence relation between character pairs\" is a way of organizing information to define the relative order or priority of different characters. This representation uses a two-dimensional grid (matrix) where each cell indicates whether one character has a higher precedence than another.\n\nHere's a breakdown of this concept:\n\n1. **Matrix**: A matrix is a grid-like arrangement of elements. In this context, it's a 2D array where each element represents a relationship between two characters.\n\n2. **Precedence Relation**: Precedence refers to the priority or order in which things should be considered or evaluated. In the context of characters, it means determining which character should come before or after another.\n\n3. **Character Pairs**: Each cell in the matrix corresponds to a pair of characters. For example, if you have a list of characters (e.g., A, B, C, D), then the matrix will have rows and columns representing each character, and each cell (i, j) will indicate the relation between character i and character j.\n\n4. **True/False Values**: The cells of the matrix contain Boolean values (True or False). These values indicate whether character i has higher precedence than character j. For example, if matrix[1][2] is True, it means character at index 1 has higher precedence than character at index 2.\n\n5. **Transitive Relation**: The matrix must satisfy the transitive property. If A has higher precedence than B, and B has higher precedence than C, then A must also have higher precedence than C.\n\n6. **Reflexive Property**: The matrix is often symmetric, meaning if A has higher precedence than B, then B will have lower precedence than A. This is because precedence is typically a symmetric relation.\n\nFor example, consider the characters A, B, C, and D. If we have the following matrix:\n\n```\n[[ False, True, False, True ],\n [ False, False, True, True ],\n [ True, False, False, True ],\n [ False, False, False, False ]]\n```\n\nThis matrix indicates:\n\n- A has higher precedence than B.\n- B has higher precedence than C and D.\n- C has higher precedence than A.\n- D has no defined precedence relation with any other character.\n\nThis information can be used to determine if a given string of characters follows the specified precedence relations. For example, in the string \"ABCD\", the characters maintain the specified precedence relations."
      },
      "date": 1696266412993
    },
    {
      "item": {
        "type": "factory",
        "id": "7cc28f4bb55c78e6"
      },
      "id": "7cc28f4bb55c78e6",
      "type": "add",
      "after": "06e09a99d354137c",
      "date": 1696266437364
    },
    {
      "id": "7cc28f4bb55c78e6",
      "type": "move",
      "order": [
        "316c3e89c2ee3131",
        "4d161fb789ea0a48",
        "19c6122fb0e90655",
        "7cc28f4bb55c78e6",
        "06e09a99d354137c"
      ],
      "date": 1696266442680
    },
    {
      "type": "edit",
      "id": "7cc28f4bb55c78e6",
      "item": {
        "type": "pagefold",
        "id": "7cc28f4bb55c78e6",
        "text": " ChatGPT September 25 Version"
      },
      "date": 1696266444692
    },
    {
      "type": "edit",
      "id": "7cc28f4bb55c78e6",
      "item": {
        "type": "pagefold",
        "id": "7cc28f4bb55c78e6",
        "text": "ChatGPT September 25 Version"
      },
      "date": 1696266448276
    },
    {
      "item": {
        "type": "factory",
        "id": "de2de0dae1f5e4ad"
      },
      "id": "de2de0dae1f5e4ad",
      "type": "add",
      "after": "06e09a99d354137c",
      "date": 1696266489992
    },
    {
      "type": "edit",
      "id": "de2de0dae1f5e4ad",
      "item": {
        "type": "pagefold",
        "id": "de2de0dae1f5e4ad",
        "text": "~"
      },
      "date": 1696266493445
    },
    {
      "item": {
        "type": "factory",
        "id": "da3ddfdcf660b300"
      },
      "id": "da3ddfdcf660b300",
      "type": "add",
      "after": "de2de0dae1f5e4ad",
      "date": 1696266494911
    },
    {
      "type": "edit",
      "id": "da3ddfdcf660b300",
      "item": {
        "type": "reference",
        "id": "da3ddfdcf660b300",
        "site": "wiki.ralfbarkow.ch",
        "slug": "schelme-cells",
        "title": "Schelme Cells",
        "text": "elm-sheet, schelme based spreadsheet. [https://github.com/bburdette/cellme github] by [[Ben Burdette]]"
      },
      "date": 1696266497180
    },
    {
      "type": "edit",
      "id": "da3ddfdcf660b300",
      "item": {
        "type": "reference",
        "id": "da3ddfdcf660b300",
        "site": "wiki.ralfbarkow.ch",
        "slug": "schelme-cells",
        "title": "Schelme Cells",
        "text": "2D array (spreadsheet) demo. [https://bburdette.github.io/cellme/arraycelldemo.html page]"
      },
      "date": 1696266512113
    },
    {
      "type": "edit",
      "id": "da3ddfdcf660b300",
      "item": {
        "type": "reference",
        "id": "da3ddfdcf660b300",
        "site": "wiki.ralfbarkow.ch",
        "slug": "schelme-cells",
        "title": "Schelme Cells",
        "text": "2D array (spreadsheet) demo. [https://bburdette.github.io/cellme/arraycelldemo.html page] ⇐ [[Matrix]]"
      },
      "date": 1696266662148
    },
    {
      "type": "edit",
      "id": "da3ddfdcf660b300",
      "item": {
        "type": "reference",
        "id": "da3ddfdcf660b300",
        "site": "wiki.ralfbarkow.ch",
        "slug": "schelme-cells",
        "title": "Schelme Cells",
        "text": "2D array (spreadsheet) demo. [https://bburdette.github.io/cellme/arraycelldemo.html page] ⇐ [[Matrix]] is a grid-like arrangement of elements. In this context, it's a 2D array where each element represents a relationship between two characters."
      },
      "date": 1696266704735
    },
    {
      "type": "edit",
      "id": "06e09a99d354137c",
      "item": {
        "type": "markdown",
        "id": "06e09a99d354137c",
        "text": "A \"matrix representation of a precedence relation between character pairs\" is a way of organizing information to define the relative order or priority of different characters. This representation uses a two-dimensional grid (matrix) where each cell indicates whether one character has a higher precedence than another.\n\nHere's a breakdown of this concept:\n\n1. **Matrix**: A matrix is a grid-like arrangement of elements. In this context, it's a 2D array where each element represents a relationship between two characters.\n\n2. **Precedence Relation**: Precedence refers to the priority or order in which things should be considered or evaluated. In the context of characters, it means determining which character should come before or after another.\n\n3. **Character Pairs**: Each cell in the matrix corresponds to a pair of characters. For example, if you have a list of characters (e.g., A, B, C, D), then the matrix will have rows and columns representing each character, and each cell (i, j) will indicate the relation between character i and character j.\n\n4. **True/False Values**: The cells of the matrix contain Boolean values (True or False). These values indicate whether character i has higher precedence than character j. For example, if matrix[1][2] is True, it means character at index 1 has higher precedence than character at index 2.\n\n5. **Transitive Relation**: The matrix must satisfy the transitive property. If A has higher precedence than B, and B has higher precedence than C, then A must also have higher precedence than C.\n\n6. **Reflexive Property**: The matrix is often symmetric, meaning if A has higher precedence than B, then B will have lower precedence than A. This is because precedence is typically a symmetric relation.\n\nFor example, consider the characters A, B, C, and D. If we have the following matrix:"
      },
      "date": 1696266783357
    },
    {
      "type": "add",
      "id": "646ccbcc71884e51",
      "item": {
        "type": "markdown",
        "id": "646ccbcc71884e51",
        "text": "```\n[[ False, True, False, True ],\n [ False, False, True, True ],\n [ True, False, False, True ],\n [ False, False, False, False ]]\n```\n\nThis matrix indicates:\n\n- A has higher precedence than B.\n- B has higher precedence than C and D.\n- C has higher precedence than A.\n- D has no defined precedence relation with any other character.\n\nThis information can be used to determine if a given string of characters follows the specified precedence relations. For example, in the string \"ABCD\", the characters maintain the specified precedence relations."
      },
      "after": "06e09a99d354137c",
      "date": 1696266786976
    },
    {
      "item": {
        "type": "factory",
        "id": "6396bb2153f83d48"
      },
      "id": "6396bb2153f83d48",
      "type": "add",
      "after": "da3ddfdcf660b300",
      "date": 1696266787074
    },
    {
      "id": "6396bb2153f83d48",
      "type": "move",
      "order": [
        "316c3e89c2ee3131",
        "4d161fb789ea0a48",
        "19c6122fb0e90655",
        "7cc28f4bb55c78e6",
        "06e09a99d354137c",
        "6396bb2153f83d48",
        "646ccbcc71884e51",
        "de2de0dae1f5e4ad",
        "da3ddfdcf660b300"
      ],
      "date": 1696266791009
    },
    {
      "type": "edit",
      "id": "646ccbcc71884e51",
      "item": {
        "type": "markdown",
        "id": "646ccbcc71884e51",
        "text": "This matrix indicates:\n\n- A has higher precedence than B.\n- B has higher precedence than C and D.\n- C has higher precedence than A.\n- D has no defined precedence relation with any other character.\n\nThis information can be used to determine if a given string of characters follows the specified precedence relations. For example, in the string \"ABCD\", the characters maintain the specified precedence relations."
      },
      "date": 1696266801566
    },
    {
      "type": "edit",
      "id": "6396bb2153f83d48",
      "item": {
        "type": "code",
        "id": "6396bb2153f83d48",
        "text": "[[ False, True, False, True ],\n [ False, False, True, True ],\n [ True, False, False, True ],\n [ False, False, False, False ]]\n"
      },
      "date": 1696266808460
    }
  ]
}