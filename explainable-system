{
  "title": "Explainable System",
  "story": [
    {
      "type": "paragraph",
      "id": "4d1b0c844403d072",
      "text": "[…] Each of these views is achieved with just a few lines of code, and leads to the Ludo game becoming an explainable system that can be explored in ways that are far richer and more intuitive than by trying to read source code. (paper draft)"
    },
    {
      "type": "paragraph",
      "id": "e2f3bf516428e3ac",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "68ce8784c2e77d1a",
      "text": "At the top of the map [of moldable development patterns, Figure 2] we have “Explainable System,” which is not a pattern per se, but rather the [[Goal]] of [[Moldable Development]]. An explainable system is a software system whose domain model has been exposed with the help of numerous custom tools [8]."
    },
    {
      "type": "markdown",
      "id": "0b7586031ed4f9ce",
      "text": "# References"
    },
    {
      "type": "paragraph",
      "id": "bb84b45e6b0c2d24",
      "text": "[8] Oscar Nierstrasz and Tudor Gîrba. 2022. Making Systems Explainable. In VISSOFT’22: Proceedings of the 10th IEEE Working Conference on Software Visualization. IEEE. [https://doi.org/10.1109/VISSOFT55257.2022.00009 doi] [https://www.computer.org/csdl/proceedings-article/vissoft/2022/809200a001/1JeEA5yFSAU pay]"
    },
    {
      "type": "paragraph",
      "id": "cebf6e29e5e2d406",
      "text": "What makes software systems explainable?As we develop and maintain software, we have questions to ask about the code, but piecing together the answers remains hard. The main interface the classical IDE offers is a text editor for the source code. Code, documentation, and the running system are disconnected. In this keynote presentation, we will show how software systems can be made explainable with the help of three interacting technologies: (i) live notebooks that can be used to create narratives that link documentation, source code, and running applications, (ii) example methods that not only perform tests, but produce live examples that can be used within narratives, to explain use cases, scenarios and features, and (iii) a moldable inspector that can be easily extended with live custom views to answer domain-specific questions about software systems.With the help of running examples we will show in the keynotes presentation how these technologies work together to provide a radically different kind of development experience."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Explainable System",
        "story": []
      },
      "date": 1705704640912
    },
    {
      "item": {
        "type": "factory",
        "id": "4d1b0c844403d072"
      },
      "id": "4d1b0c844403d072",
      "type": "add",
      "date": 1705704642091
    },
    {
      "type": "edit",
      "id": "4d1b0c844403d072",
      "item": {
        "type": "paragraph",
        "id": "4d1b0c844403d072",
        "text": "[…] Each of these views is achieved with just a few lines of code, and leads to the Ludo game becoming an explainable system that can be explored in ways that are far richer and more intuitive than by trying to read source code."
      },
      "date": 1705704645703
    },
    {
      "type": "edit",
      "id": "4d1b0c844403d072",
      "item": {
        "type": "paragraph",
        "id": "4d1b0c844403d072",
        "text": "[…] Each of these views is achieved with just a few lines of code, and leads to the Ludo game becoming an explainable system that can be explored in ways that are far richer and more intuitive than by trying to read source code. (paper draft)"
      },
      "date": 1705704692180
    },
    {
      "item": {
        "type": "factory",
        "id": "e2f3bf516428e3ac"
      },
      "id": "e2f3bf516428e3ac",
      "type": "add",
      "after": "4d1b0c844403d072",
      "date": 1705704752828
    },
    {
      "type": "edit",
      "id": "e2f3bf516428e3ac",
      "item": {
        "type": "paragraph",
        "id": "e2f3bf516428e3ac",
        "text": "[…]"
      },
      "date": 1705704755668
    },
    {
      "type": "add",
      "id": "68ce8784c2e77d1a",
      "item": {
        "type": "paragraph",
        "id": "68ce8784c2e77d1a",
        "text": "At the top of the map we have “Explainable System,” which is not a pattern per se, but rather the goal of moldable development. An explainable system is a software system whose domain model has been exposed with the help of numerous custom tools [8]."
      },
      "after": "e2f3bf516428e3ac",
      "date": 1705704756592
    },
    {
      "type": "edit",
      "id": "68ce8784c2e77d1a",
      "item": {
        "type": "paragraph",
        "id": "68ce8784c2e77d1a",
        "text": "At the top of the map [of moldable development patterns.] we have “Explainable System,” which is not a pattern per se, but rather the goal of moldable development. An explainable system is a software system whose domain model has been exposed with the help of numerous custom tools [8]."
      },
      "date": 1705704772239
    },
    {
      "type": "edit",
      "id": "68ce8784c2e77d1a",
      "item": {
        "type": "paragraph",
        "id": "68ce8784c2e77d1a",
        "text": "At the top of the map [of moldable development patterns, ] we have “Explainable System,” which is not a pattern per se, but rather the goal of moldable development. An explainable system is a software system whose domain model has been exposed with the help of numerous custom tools [8]."
      },
      "date": 1705704788496
    },
    {
      "type": "edit",
      "id": "68ce8784c2e77d1a",
      "item": {
        "type": "paragraph",
        "id": "68ce8784c2e77d1a",
        "text": "At the top of the map [of moldable development patterns, Figure 2] we have “Explainable System,” which is not a pattern per se, but rather the goal of moldable development. An explainable system is a software system whose domain model has been exposed with the help of numerous custom tools [8]."
      },
      "date": 1705704796662
    },
    {
      "id": "0b7586031ed4f9ce",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "0b7586031ed4f9ce",
        "text": "# References"
      },
      "after": "68ce8784c2e77d1a",
      "attribution": {
        "page": "EuroPLoP Project Diary"
      },
      "date": 1705704813802
    },
    {
      "item": {
        "type": "factory",
        "id": "bb84b45e6b0c2d24"
      },
      "id": "bb84b45e6b0c2d24",
      "type": "add",
      "after": "0b7586031ed4f9ce",
      "date": 1705704835329
    },
    {
      "type": "edit",
      "id": "bb84b45e6b0c2d24",
      "item": {
        "type": "paragraph",
        "id": "bb84b45e6b0c2d24",
        "text": "[8] Oscar Nierstrasz and Tudor Gîrba. 2022. Making Systems Explainable. In VISSOFT’22: Proceedings of the 10th IEEE Working Conference on Software Visualization. IEEE. [https://doi.org/10.1109/VISSOFT55257.2022.00009 doi]"
      },
      "date": 1705704851191
    },
    {
      "item": {
        "type": "factory",
        "id": "cebf6e29e5e2d406"
      },
      "id": "cebf6e29e5e2d406",
      "type": "add",
      "after": "bb84b45e6b0c2d24",
      "date": 1705705058163
    },
    {
      "type": "edit",
      "id": "cebf6e29e5e2d406",
      "item": {
        "type": "paragraph",
        "id": "cebf6e29e5e2d406",
        "text": "What makes software systems explainable?As we develop and maintain software, we have questions to ask about the code, but piecing together the answers remains hard. The main interface the classical IDE offers is a text editor for the source code. Code, documentation, and the running system are disconnected.In this keynote presentation, we will show how software systems can be made explainable with the help of three interacting technologies: (i) live notebooks that can be used to create narratives that link documentation, source code, and running applications, (ii) example methods that not only perform tests, but produce live examples that can be used within narratives, to explain use cases, scenarios and features, and (iii) a moldable inspector that can be easily extended with live custom views to answer domain-specific questions about software systems.With the help of running examples we will show in the keynotes presentation how these technologies work together to provide a radically different kind of development experience."
      },
      "date": 1705705059755
    },
    {
      "type": "edit",
      "id": "cebf6e29e5e2d406",
      "item": {
        "type": "paragraph",
        "id": "cebf6e29e5e2d406",
        "text": "What makes software systems explainable?As we develop and maintain software, we have questions to ask about the code, but piecing together the answers remains hard. The main interface the classical IDE offers is a text editor for the source code. Code, documentation, and the running system are disconnected. In this keynote presentation, we will show how software systems can be made explainable with the help of three interacting technologies: (i) live notebooks that can be used to create narratives that link documentation, source code, and running applications, (ii) example methods that not only perform tests, but produce live examples that can be used within narratives, to explain use cases, scenarios and features, and (iii) a moldable inspector that can be easily extended with live custom views to answer domain-specific questions about software systems.With the help of running examples we will show in the keynotes presentation how these technologies work together to provide a radically different kind of development experience."
      },
      "date": 1705705133390
    },
    {
      "type": "edit",
      "id": "bb84b45e6b0c2d24",
      "item": {
        "type": "paragraph",
        "id": "bb84b45e6b0c2d24",
        "text": "[8] Oscar Nierstrasz and Tudor Gîrba. 2022. Making Systems Explainable. In VISSOFT’22: Proceedings of the 10th IEEE Working Conference on Software Visualization. IEEE. [https://doi.org/10.1109/VISSOFT55257.2022.00009 doi] [https://www.computer.org/csdl/proceedings-article/vissoft/2022/809200a001/1JeEA5yFSAU pay]"
      },
      "date": 1705705395577
    },
    {
      "type": "edit",
      "id": "68ce8784c2e77d1a",
      "item": {
        "type": "paragraph",
        "id": "68ce8784c2e77d1a",
        "text": "At the top of the map [of moldable development patterns, Figure 2] we have “Explainable System,” which is not a pattern per se, but rather the [[Goal]] of [[Moldable Development]]. An explainable system is a software system whose domain model has been exposed with the help of numerous custom tools [8]."
      },
      "date": 1705705471613
    },
    {
      "type": "fork",
      "site": "mold.dreyeck.ch",
      "date": 1705707687466
    }
  ]
}