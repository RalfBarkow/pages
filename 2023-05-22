{
  "title": "2023-05-22",
  "story": [
    {
      "type": "paragraph",
      "id": "5f21e39444857879",
      "text": "⇒ [[services.nginx]]: Support both HTTP and HTTPS in a single virtualHost #25533 [https://github.com/NixOS/nixpkgs/issues/25533 github]"
    },
    {
      "type": "code",
      "id": "6dff3e57c205af44",
      "text": "  services.nginx = {\n    enable = true;\n    recommendedProxySettings = false;\n    recommendedTlsSettings = true;\n    virtualHosts = {\n      \"wiki.ralfbarkow.ch\" = {\n        enableACME = true;\n        enableSSL = true;\n        extraConfig = ''\n          listen 80;\n        '';\n        locations.\"/\" = {\n          proxyPass = \"http://127.0.0.1:3000\";\n          proxyWebsockets = true; \n        };\n      };\n"
    },
    {
      "type": "paragraph",
      "id": "d5901e6a7dec5b57",
      "text": "Reasons for a page to use SSL"
    },
    {
      "type": "paragraph",
      "id": "1c731eff66c5df94",
      "text": "Reasons for a page to not use SSL:"
    },
    {
      "type": "markdown",
      "id": "e53d9917d4c0346d",
      "text": "https://parser.dreyeck.ch/view/parser search failed: error"
    },
    {
      "type": "paragraph",
      "id": "8957595bf3410fed",
      "text": "⇒ add full internet toggle to footer #294 [https://github.com/fedwiki/wiki-client/pull/294 github]"
    },
    {
      "type": "markdown",
      "id": "ed5845bf358b9fd9",
      "text": "> The full federation is only visible when the origin javascript comes from an http site. "
    },
    {
      "type": "reference",
      "id": "a4bc35964f5931a6",
      "site": "glossary.asia.wiki.org",
      "slug": "origin",
      "title": "Origin",
      "text": "The Origin is the site from which we started browsing the federated wiki within a given tab. The origin is first among equals wielding some unexpected power over our experience."
    },
    {
      "type": "markdown",
      "id": "7afac1148afaf0c4",
      "text": "> We don't know if it is possible to dynamically detect what protocols are supported by a given server. "
    },
    {
      "type": "paragraph",
      "id": "21b0c4a439e8e064",
      "text": "Client-side code can complement the server-side setup by conditionally rendering forms or displaying error messages based on the protocol detected by the client."
    },
    {
      "type": "paragraph",
      "id": "e067d51d82b8d6b9",
      "text": "Robert Best commented on Mar 22 [https://github.com/fedwiki/wiki-client/pull/294#issuecomment-1478881283 github]"
    },
    {
      "type": "markdown",
      "id": "209ff6fd387edd77",
      "text": "> Could a wiki be set up using passportjs (generic OAuth), and treafik or caddy, to only allow authentication over HTTPS, but redirect all visitors by default to HTTP if they aren't logged in (So the neighborhood and everything works)... but then as soon as the padlock is clicked, if on HTTP, then redirect to HTTPS for log in (since it would only be possible over HTTPS)"
    },
    {
      "type": "paragraph",
      "id": "cb074fd8fb7f4e66",
      "text": "HANCOCK, Alexis, 2021. HTTPS Is Actually Everywhere. Electronic Frontier Foundation. Online. 21 September 2021. [Accessed 22 May 2023]. [https://www.eff.org/deeplinks/2021/09/https-actually-everywhere post] For more than 10 years, EFF’s HTTPS Everywhere browser extension has provided a much-needed service to users: encrypting their browser communications with websites and making sure they benefit from the protection of HTTPS wherever possible. Since we started offering HTTPS Everywhere, the battle to...\n"
    },
    {
      "type": "paragraph",
      "id": "9440a09eef8d6036",
      "text": "⇒ [[HTTPS Only Wiki]] [https://github.com/fedwiki/wiki-client/pull/294#issuecomment-1328229357 github]"
    },
    {
      "type": "paragraph",
      "id": "35c3d6bc179fd6d6",
      "text": "Reading cookies via HTTPS that were set using HTTP [https://stackoverflow.com/questions/2163828/reading-cookies-via-https-that-were-set-using-http stackoverflow]"
    },
    {
      "type": "markdown",
      "id": "4f203ca680cd38be",
      "text": "> Cookies set with the \"Secure\" keyword will only be sent by the browser when connecting by a secure means (HTTPS). Apart from that there is no distinction - if \"secure\" is absent, the cookie may be sent over an insecure connection."
    },
    {
      "type": "pagefold",
      "id": "a91310901f5882fa",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "434ee8cdc7076b80",
      "text": "⇒ [[Glasperlenspiel]]: 3:47:12"
    },
    {
      "type": "paragraph",
      "id": "bf2dc4002dc2ce51",
      "text": "Page 110\n\nEs bleibe nicht unerwahnt, da auch Plinio Designori unter dem Einfluf seines Antagonisten erhebliche Wandlungen und Entwicklungen erfuhr, und zwar nicht nur im Sinn ei- ner Erziehung zur Lauterung seiner Kampfmethoden. Wahrend des kollegialen und kampferischen Austausches jener Schuljahre sah er seinen Gegenspieler sich in stetiger Steigerung zum vorbildlichen Kastalier entwickeln, es trat ihm der Geist der Provinz in der Gestalt des Freundes im- mer sichtbarer und lebendiger entgegen, und ebenso wie er jenen bis zu einem gewissen Garungsgrade mit der Atmo- sphare seiner Welt infiziert hatte, atmete er selbst die kasta- lische Luft und erlag ihrem Reiz und Einflu&. Im letzten Jahr seiner Schulzeit, nach einer zweistiindigen Disputation iiber die Ideale des Ménchtums und deren Gefahren, welche sie im Beisein der obersten Glasperlenspiel-Klasse ausge- kampft hatten, nahm er Josef zu einem Spaziergang mit und machte ihm auf diesem Gang ein Gestandnis, das wir nach einem Brief Ferromontes zitieren: »Ich wei natiirlich langst, Josef, da du der frommglaubige Glasperlenspieler und Provinzheilige nicht bist, dessen Rolle du so ausge- zeichnet spielst. Jeder von uns beiden steht an exponierter Stelle in einem Kampf, und jeder von uns weif ja wohl, daf das, wogegen er kampft, zu Recht existiert und seine unbe- strittenen Werte hat. Du stehst auf der Seite der Hochzucht des Geistes, ich auf der Seite des natiirlichen Lebens. In uns- rem Kampf hast du gelernt, die Gefahren des natiirlichen Lebens aufzuspiiren und aufs Korn zu nehmen; dein Amt ist es, darauf hinzuweisen, wie das natiirliche, naive Leben ohne geistige Zucht zum Sumpf werden und ins Tierische und noch weiter zuriickfiihren mu&. Und ich wieder muf "
    },
    {
      "type": "pagefold",
      "id": "bbd14b82cc202999",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "b17ba77324a12648",
      "text": "⇒ [[Parser]]"
    },
    {
      "type": "paragraph",
      "id": "d28a4161529f677b",
      "text": "⇒ [[Elm and Vite]]"
    },
    {
      "type": "roster",
      "id": "d9e2ffb9a092f060",
      "text": "elm.dreyeck.ch"
    },
    {
      "type": "paragraph",
      "id": "382ea9b906e170ea",
      "text": "currying: gypsydave5 — [https://discord.com/channels/223421264751099906/305208145020715019/909778402943316008 discord]\n@Garklein - not by default (afaik) @Dave Mason has extended Pharo to include currying and other FP ideas https://github.com/dvmason/Pharo-Functional."
    },
    {
      "type": "paragraph",
      "id": "1526c0ad1460a298",
      "text": "⇒ [[Dave Mason]]: [https://github.com/dvmason/Pharo-Functional github]"
    },
    {
      "type": "paragraph",
      "id": "6fdbcb73f3f76eb8",
      "text": "⇒ [[Niko Schwarz]]: Point-free programming in Smalltalk [https://smalltalkthoughts.blogspot.com/2011/08/point-free-programming-in-smalltalk.html post]"
    },
    {
      "type": "pagefold",
      "id": "53012f4bba7634f6",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "eb6611315dca193a",
      "text": "⇒ [[Clojure]] is a dialect of Lisp that runs on the JVM. [https://hub.docker.com/_/clojure docker] ⇒ [[Electric Clojure]] ⇒ [[Lamdera]] [https://discourse.elm-lang.org/t/lamdera-a-year-in-review-v1-0-0-paid-plans-carbon-mission-and-more/7584 discourse]"
    },
    {
      "type": "paragraph",
      "id": "51b73fb9919fe17f",
      "text": "⇒ [[DAG]]: HU, Kekun, ZENG, Guosun, DING, Shuang and JIANG, Huowen, 2019. Cluster-Scheduling Big Graph Traversal Task for Parallel Processing in Heterogeneous Cloud Based on DAG Transformation. IEEE Access. 2019. Vol. 7, p. 77070–77082. DOI 10.1109/ACCESS.2019.2921477. Task scheduling is the key to the full utilization of heterogeneous cloud capabilities for parallel processing of big graphs. Most graph processing systems adopt single-granularity scheduling mechanisms without considering the heterogeneity of the cloud, leading to poor performance. To alleviate it by learning from the excellent directed acyclic graph (DAG)-based scheduling techniques accumulated in traditional parallel computing, we first present a streaming DAG-construction heuristic. It transforms a big graph along with graph traversal algorithms to be carried out into a DAG. We then propose a three-phase heterogeneous-aware cluster-scheduling algorithm to schedule the DAG into a heterogeneous cloud for parallel processing. In the first phase, we design a parallel linear clustering algorithm to cluster the DAG into a series of linear clusters with different granularities. In the second phase, we design a heterogeneous-aware load balancing algorithm to map these clusters to different computational nodes of the cloud. In the last phase, we design a task ordering algorithm to assigns these clusters as-early-as-possible start times. The experimental results show that our scheme can generate high-quality schedules and improve the efficiency and performance of parallel processing of big graphs in the heterogeneous cloud."
    },
    {
      "type": "paragraph",
      "id": "9e146af81557f708",
      "text": "⇒ [[Dustin Getz]]: UIs are streaming DAGs [https://hyperfiddle.notion.site/UIs-are-streaming-DAGs-e181461681a8452bb9c7a9f10f507991 post]"
    },
    {
      "type": "video",
      "id": "ec7a81e69aa83177",
      "text": "YOUTUBE fq4_W4vLA6g\nUIs are streaming DAGs - Dustin Getz"
    },
    {
      "type": "paragraph",
      "id": "7058b1494c27a3b4",
      "text": "[https://youtu.be/fq4_W4vLA6g?t=21 0:21] – There are client side DOM effects and server side queries."
    },
    {
      "type": "paragraph",
      "id": "fe7af5c231af35b4",
      "text": "[https://youtu.be/fq4_W4vLA6g?t=68 1:08] – actually the macro is compiling the function body into something else. We compile it into a [[DAG]]."
    },
    {
      "type": "paragraph",
      "id": "8fde41f43d297c9b",
      "text": "[https://youtu.be/fq4_W4vLA6g?t=244 4:04] – How can lexical scope cross to the server? Recall that photon functions are DAGs. When the input has a new value, the event will propagate and reflow the downstream dag. Sometimes crossing over a web socket."
    },
    {
      "type": "paragraph",
      "id": "e4f4b51d912eece0",
      "text": "HUDAK, Paul and QUICK, Donya, 2018. The [[Haskell]] school of music: from signals to symphonies. Cambridge, United Kingdom ; New York, NY: Cambridge University Press. ISBN 978-1-108-41675-7. "
    },
    {
      "type": "paragraph",
      "id": "a33327ae1f40943b",
      "text": "Signals vs Streams [https://clojureverse.org/t/signals-vs-streams/9840/2 clojureverse.org]"
    },
    {
      "type": "markdown",
      "id": "9a36244c5a98293f",
      "text": "> Signals can skip duplicate values."
    },
    {
      "type": "paragraph",
      "id": "4c47d1590ee0bed8",
      "text": "Electric Clojure – a signals DSL for fullstack web UI [https://clojureverse.org/t/electric-clojure-a-signals-dsl-for-fullstack-web-ui/9788 post], [https://news.ycombinator.com/item?id=28630209 hn], [https://hyperfiddle.notion.site/Reactive-Clojure-You-don-t-need-a-web-framework-you-need-a-web-language-44b5bfa526be4af282863f34fa1cfffc post]"
    },
    {
      "type": "paragraph",
      "id": "5d3c17f36be46764",
      "text": "Emacs IDE setup [https://hyperfiddle.github.io/#/page/emacs%20ide%20setup page]"
    },
    {
      "type": "paragraph",
      "id": "0badf61bdad6aceb",
      "text": "Doom Emacs Documentation [https://docs.doomemacs.org/latest/ page]"
    },
    {
      "type": "paragraph",
      "id": "1bcd30832b20c4a3",
      "text": "electric-xtdb-starter [https://github.com/hyperfiddle/electric-xtdb-starter github]"
    },
    {
      "type": "paragraph",
      "id": "e8eddca184efd617",
      "text": "shadow-cljs [https://github.com/thheller/shadow-cljs github]"
    },
    {
      "type": "code",
      "id": "0286af1133eaa8ca",
      "text": "npx shadow-cljs watch frontend\nrgb@mbp-rgb> npx shadow-cljs watch frontend       ~/Projects/RalfBarkow/electric-xtdb-starter\nNeed to install the following packages:\n  shadow-cljs@2.23.3\nOk to proceed? (y) \nnpm WARN deprecated querystring@0.2.0: The querystring API is considered Legacy. new code should use the URLSearchParams API instead.\n------------------------------------------------------------------------------\n\n   WARNING: shadow-cljs not installed in project.\n   See https://shadow-cljs.github.io/docs/UsersGuide.html#project-install\n\n------------------------------------------------------------------------------\nshadow-cljs - config: /Users/rgb/Projects/RalfBarkow/electric-xtdb-starter/shadow-cljs.edn\nshadow-cljs - starting via \"clojure\"\nExecutable 'clojure' not found on system path.\n[1] rgb@mbp-rgb>                                  ~/Projects/RalfBarkow/electric-xtdb-starter"
    },
    {
      "type": "paragraph",
      "id": "4b7aac38160ebc03",
      "text": "Calva: A Clojure & ClojureScript IDE in Visual Studio Code [https://github.com/BetterThanTomorrow/calva#calva-a-clojure--clojurescript-ide-in-visual-studio-code github], [https://calva.io/getting-started/ page]"
    },
    {
      "type": "video",
      "id": "d05ce02b47fee3a3",
      "text": "YOUTUBE O6GrXXhCzCc\nGet Started with Clojure in VS Code"
    },
    {
      "type": "pagefold",
      "id": "3b6ec9038cf90bdd",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "29d8683254140b20",
      "text": "Store data on pages and those pages persist:"
    },
    {
      "type": "reference",
      "id": "e175b8833c76aa5e",
      "site": "found.ward.fed.wiki",
      "slug": "an-evolution-in-aggregation",
      "title": "An Evolution in Aggregation",
      "text": "Federated wiki is a database of sorts since we can put data on pages and those pages persist. Here we look at recent progress aggregating data from pages based on real experience with geolocated images."
    },
    {
      "type": "reference",
      "id": "e4673456373dd1f4",
      "site": "code.fed.wiki.org",
      "slug": "ward-cunningham",
      "title": "Ward Cunningham",
      "text": "I'm well known for my contributions to the developing practice of object-oriented programming."
    },
    {
      "type": "markdown",
      "id": "57c26ddf8daac953",
      "text": "> My vision is to do for numbers what I’ve done for words: give them depth and meaning that ordinary people can depend on every day. This can change the world."
    },
    {
      "type": "reference",
      "id": "932e15e237979d14",
      "site": "code.fed.wiki",
      "slug": "windmill-problem",
      "title": "Windmill Problem",
      "text": "Grant Sanderson savors the surprisingly difficult problem 2 from the 2011 International Mathematical Olympiad and its surprisingly easy to understand solution. [https://www.imo-official.org/problems/IMO2011SL.pdf pdf] [https://www.3blue1brown.com/about blog]"
    },
    {
      "type": "markdown",
      "id": "7f010f37a0766eeb",
      "text": "> [https://youtu.be/M64HUIJFTZM?t=459 7:39] –  As a general problem-solving tip, whenever you have a vague idea that feels productive, you should of course find a way to be more exact about what you mean, preferably putting numbers to it, then ask questions about those numbers. In our example, one way to formalize the idea of a “middle” is to count how many points ..."
    },
    {
      "type": "paragraph",
      "id": "1ed7672e9e60ad53",
      "text": "Smalltalk with numbers [https://rmod-files.lille.inria.fr/FreeBooks/Joy/5.pdf pdf] ⇒ [[Ivan Tomek]]"
    },
    {
      "type": "paragraph",
      "id": "846817e6b9e9c09f",
      "text": "⇒ [[DAG]] ⇒ [[Path]] ⇒ [[Cusp Catastrophe]] ⇒ [[Evidencing New Psych Forms]]"
    },
    {
      "type": "reference",
      "id": "acfbf7fab4cfcfaf",
      "site": "wiki.ralfbarkow.ch",
      "slug": "evidencing-new-psych-forms",
      "title": "Evidencing New Psych Forms",
      "text": "While human life is certainly a manifestation of biology, social relations (culture) are the origin of what distinguishes humans from other animals (Vygotsky, 1997b)."
    },
    {
      "type": "pagefold",
      "id": "fef34772379eb257",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "643489b5615b3873",
      "text": "⇒ [[reclaim]]: POST /auth/reclaim/ HTTP/1.1\nLine-based text data"
    },
    {
      "type": "paragraph",
      "id": "91f01bc711ea84aa",
      "text": "[[OAuth 2.0]] [https://oauth.net/2/ site], [https://github.com/fedwiki/wiki-security-passportjs/blob/master/docs/config-oauth2.md wiki-security-passportjs]"
    },
    {
      "type": "paragraph",
      "id": "b98edaeeeeba97da",
      "text": ""
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-05-22",
        "story": []
      },
      "date": 1684735587393
    },
    {
      "item": {
        "type": "factory",
        "id": "6dff3e57c205af44"
      },
      "id": "6dff3e57c205af44",
      "type": "add",
      "date": 1684735588949
    },
    {
      "type": "edit",
      "id": "6dff3e57c205af44",
      "item": {
        "type": "code",
        "id": "6dff3e57c205af44",
        "text": "  services.nginx = {\n    enable = true;\n    recommendedProxySettings = false;\n    recommendedTlsSettings = true;\n    virtualHosts = {\n      \"wiki.ralfbarkow.ch\" = {\n        enableACME = true;\n        enableSSL = true;\n        extraConfig = ''\n          listen 80;\n        '';\n        locations.\"/\" = {\n          proxyPass = \"http://127.0.0.1:3000\";\n          proxyWebsockets = true; # needed if you need to use WebSocket\n        };\n      };\n"
      },
      "date": 1684735591394
    },
    {
      "item": {
        "type": "factory",
        "id": "5f21e39444857879"
      },
      "id": "5f21e39444857879",
      "type": "add",
      "after": "6dff3e57c205af44",
      "date": 1684735634106
    },
    {
      "id": "5f21e39444857879",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44"
      ],
      "date": 1684735636036
    },
    {
      "type": "edit",
      "id": "5f21e39444857879",
      "item": {
        "type": "paragraph",
        "id": "5f21e39444857879",
        "text": "⇒ [[services.nginx]]: Support both HTTP and HTTPS in a single virtualHost #25533 "
      },
      "date": 1684735663291
    },
    {
      "type": "edit",
      "id": "5f21e39444857879",
      "item": {
        "type": "paragraph",
        "id": "5f21e39444857879",
        "text": "⇒ [[services.nginx]]: Support both HTTP and HTTPS in a single virtualHost #25533 [https://github.com/NixOS/nixpkgs/issues/25533 github]"
      },
      "date": 1684735696840
    },
    {
      "item": {
        "type": "factory",
        "id": "d5901e6a7dec5b57"
      },
      "id": "d5901e6a7dec5b57",
      "type": "add",
      "after": "6dff3e57c205af44",
      "date": 1684737882035
    },
    {
      "type": "edit",
      "id": "d5901e6a7dec5b57",
      "item": {
        "type": "paragraph",
        "id": "d5901e6a7dec5b57",
        "text": "https://parser.dreyeck.ch/view/welcome-visitors/view/parser"
      },
      "date": 1684737889037
    },
    {
      "type": "edit",
      "id": "d5901e6a7dec5b57",
      "item": {
        "type": "paragraph",
        "id": "d5901e6a7dec5b57",
        "text": "reasons for a page to use SSL"
      },
      "date": 1684737904532
    },
    {
      "type": "add",
      "id": "e53d9917d4c0346d",
      "item": {
        "type": "paragraph",
        "id": "e53d9917d4c0346d",
        "text": "https://parser.dreyeck.ch/view/welcome-visitors/view/parser"
      },
      "after": "d5901e6a7dec5b57",
      "date": 1684737906392
    },
    {
      "type": "edit",
      "id": "d5901e6a7dec5b57",
      "item": {
        "type": "paragraph",
        "id": "d5901e6a7dec5b57",
        "text": "Reasons for a page to use SSL"
      },
      "date": 1684737913503
    },
    {
      "type": "add",
      "id": "1c731eff66c5df94",
      "item": {
        "type": "paragraph",
        "id": "1c731eff66c5df94",
        "text": "Reasons for a page to not use SSL"
      },
      "after": "d5901e6a7dec5b57",
      "date": 1684737918921
    },
    {
      "type": "edit",
      "id": "1c731eff66c5df94",
      "item": {
        "type": "paragraph",
        "id": "1c731eff66c5df94",
        "text": "Reasons for a page to not use SSL:"
      },
      "date": 1684737932372
    },
    {
      "type": "edit",
      "id": "e53d9917d4c0346d",
      "item": {
        "type": "paragraph",
        "id": "e53d9917d4c0346d",
        "text": "https://parser.dreyeck.ch/view/parser"
      },
      "date": 1684737945819
    },
    {
      "type": "edit",
      "id": "e53d9917d4c0346d",
      "item": {
        "type": "paragraph",
        "id": "e53d9917d4c0346d",
        "text": "https://parser.dreyeck.ch/view/parser search failed: error"
      },
      "date": 1684737956385
    },
    {
      "item": {
        "type": "factory",
        "id": "8957595bf3410fed"
      },
      "id": "8957595bf3410fed",
      "type": "add",
      "after": "e53d9917d4c0346d",
      "date": 1684738073666
    },
    {
      "type": "edit",
      "id": "8957595bf3410fed",
      "item": {
        "type": "paragraph",
        "id": "8957595bf3410fed",
        "text": "\nadd full internet toggle to footer #294 "
      },
      "date": 1684738076534
    },
    {
      "type": "edit",
      "id": "8957595bf3410fed",
      "item": {
        "type": "paragraph",
        "id": "8957595bf3410fed",
        "text": "add full internet toggle to footer #294 [https://github.com/fedwiki/wiki-client/pull/294 github]"
      },
      "date": 1684738089515
    },
    {
      "item": {
        "type": "factory",
        "id": "7afac1148afaf0c4"
      },
      "id": "7afac1148afaf0c4",
      "type": "add",
      "after": "8957595bf3410fed",
      "date": 1684738211426
    },
    {
      "item": {
        "type": "factory",
        "id": "21b0c4a439e8e064"
      },
      "id": "21b0c4a439e8e064",
      "type": "add",
      "after": "7afac1148afaf0c4",
      "date": 1684738213548
    },
    {
      "type": "edit",
      "id": "21b0c4a439e8e064",
      "item": {
        "type": "paragraph",
        "id": "21b0c4a439e8e064",
        "text": "Client-side code can complement the server-side setup by conditionally rendering forms or displaying error messages based on the protocol detected by the client."
      },
      "date": 1684738235458
    },
    {
      "type": "edit",
      "id": "7afac1148afaf0c4",
      "item": {
        "type": "markdown",
        "id": "7afac1148afaf0c4",
        "text": "> We don't know if it is possible to dynamically detect what protocols are supported by a given server. "
      },
      "date": 1684738249097
    },
    {
      "item": {
        "type": "factory",
        "id": "e067d51d82b8d6b9"
      },
      "id": "e067d51d82b8d6b9",
      "type": "add",
      "after": "21b0c4a439e8e064",
      "date": 1684738493516
    },
    {
      "type": "edit",
      "id": "e067d51d82b8d6b9",
      "item": {
        "type": "paragraph",
        "id": "e067d51d82b8d6b9",
        "text": "Robert Best"
      },
      "date": 1684738498009
    },
    {
      "type": "edit",
      "id": "e067d51d82b8d6b9",
      "item": {
        "type": "paragraph",
        "id": "e067d51d82b8d6b9",
        "text": "Robert Best commented on Mar 22"
      },
      "date": 1684738513375
    },
    {
      "type": "edit",
      "id": "e067d51d82b8d6b9",
      "item": {
        "type": "paragraph",
        "id": "e067d51d82b8d6b9",
        "text": "Robert Best commented on Mar 22 [https://github.com/fedwiki/wiki-client/pull/294#issuecomment-1478881283 github]"
      },
      "date": 1684738539882
    },
    {
      "item": {
        "type": "factory",
        "id": "209ff6fd387edd77"
      },
      "id": "209ff6fd387edd77",
      "type": "add",
      "after": "e067d51d82b8d6b9",
      "date": 1684738556975
    },
    {
      "type": "edit",
      "id": "209ff6fd387edd77",
      "item": {
        "type": "markdown",
        "id": "209ff6fd387edd77",
        "text": "> Could a wiki be set up using passportjs (generic OAuth), and treafik or caddy, to only allow authentication over HTTPS, but redirect all visitors by default to HTTP if they aren't logged in (So the neighborhood and everything works)... but then as soon as the padlock is clicked, if on HTTP, then redirect to HTTPS for log in (since it would only be possible over HTTPS)"
      },
      "date": 1684738559647
    },
    {
      "item": {
        "type": "factory",
        "id": "cb074fd8fb7f4e66"
      },
      "id": "cb074fd8fb7f4e66",
      "type": "add",
      "after": "209ff6fd387edd77",
      "date": 1684738898413
    },
    {
      "type": "edit",
      "id": "cb074fd8fb7f4e66",
      "item": {
        "type": "paragraph",
        "id": "cb074fd8fb7f4e66",
        "text": "\nHANCOCK, Alexis, 2021. HTTPS Is Actually Everywhere. Electronic Frontier Foundation. Online. 21 September 2021. [Accessed 22 May 2023]. Available from: https://www.eff.org/deeplinks/2021/09/https-actually-everywhere For more than 10 years, EFF’s HTTPS Everywhere browser extension has provided a much-needed service to users: encrypting their browser communications with websites and making sure they benefit from the protection of HTTPS wherever possible. Since we started offering HTTPS Everywhere, the battle to...\n"
      },
      "date": 1684738907181
    },
    {
      "type": "edit",
      "id": "cb074fd8fb7f4e66",
      "item": {
        "type": "paragraph",
        "id": "cb074fd8fb7f4e66",
        "text": "HANCOCK, Alexis, 2021. HTTPS Is Actually Everywhere. Electronic Frontier Foundation. Online. 21 September 2021. [Accessed 22 May 2023]. [ "
      },
      "date": 1684739160076
    },
    {
      "type": "edit",
      "id": "cb074fd8fb7f4e66",
      "item": {
        "type": "paragraph",
        "id": "cb074fd8fb7f4e66",
        "text": "HANCOCK, Alexis, 2021. HTTPS Is Actually Everywhere. Electronic Frontier Foundation. Online. 21 September 2021. [Accessed 22 May 2023]. [https://www.eff.org/deeplinks/2021/09/https-actually-everywhere post] For more than 10 years, EFF’s HTTPS Everywhere browser extension has provided a much-needed service to users: encrypting their browser communications with websites and making sure they benefit from the protection of HTTPS wherever possible. Since we started offering HTTPS Everywhere, the battle to...\n"
      },
      "date": 1684739166171
    },
    {
      "item": {
        "type": "factory",
        "id": "9440a09eef8d6036"
      },
      "id": "9440a09eef8d6036",
      "type": "add",
      "after": "cb074fd8fb7f4e66",
      "date": 1684739228693
    },
    {
      "type": "edit",
      "id": "9440a09eef8d6036",
      "item": {
        "type": "paragraph",
        "id": "9440a09eef8d6036",
        "text": "Re: https only wiki"
      },
      "date": 1684739233281
    },
    {
      "type": "edit",
      "id": "9440a09eef8d6036",
      "item": {
        "type": "paragraph",
        "id": "9440a09eef8d6036",
        "text": "Re: https only wiki [https://github.com/fedwiki/wiki-client/pull/294#issuecomment-1328229357 github]"
      },
      "date": 1684739248388
    },
    {
      "type": "add",
      "id": "98d1e9d8900ebb1e",
      "item": {
        "type": "paragraph",
        "id": "98d1e9d8900ebb1e",
        "text": "As Paul wrote in this comment: \"The real problem is people deploying https only wiki. That problem can only be addressed by getting them to switch to supporting http in their installations, and not redirecting from http to https. And maybe adding an automatic redirect from https to http if the user is not the wiki owner – and subjecting people to endless redirection if a site refuses to allow http!\""
      },
      "after": "9440a09eef8d6036",
      "date": 1684739319307
    },
    {
      "type": "edit",
      "id": "98d1e9d8900ebb1e",
      "item": {
        "type": "paragraph",
        "id": "98d1e9d8900ebb1e",
        "text": "As Paul wrote in this comment [https://github.com/fedwiki/wiki-client/pull/294#issuecomment-1328229357 github]: \"The real problem is people deploying https only wiki. That problem can only be addressed by getting them to switch to supporting http in their installations, and not redirecting from http to https. And maybe adding an automatic redirect from https to http if the user is not the wiki owner – and subjecting people to endless redirection if a site refuses to allow http!\""
      },
      "date": 1684739393725
    },
    {
      "type": "edit",
      "id": "e53d9917d4c0346d",
      "item": {
        "type": "markdown",
        "id": "e53d9917d4c0346d",
        "text": "https://parser.dreyeck.ch/view/parser search failed: error"
      },
      "date": 1684739869672
    },
    {
      "item": {
        "type": "factory",
        "id": "a91310901f5882fa"
      },
      "id": "a91310901f5882fa",
      "type": "add",
      "after": "98d1e9d8900ebb1e",
      "date": 1684740636425
    },
    {
      "type": "edit",
      "id": "a91310901f5882fa",
      "item": {
        "type": "pagefold",
        "id": "a91310901f5882fa",
        "text": "~"
      },
      "date": 1684740640311
    },
    {
      "item": {
        "type": "factory",
        "id": "434ee8cdc7076b80"
      },
      "id": "434ee8cdc7076b80",
      "type": "add",
      "after": "a91310901f5882fa",
      "date": 1684740702635
    },
    {
      "type": "edit",
      "id": "434ee8cdc7076b80",
      "item": {
        "type": "paragraph",
        "id": "434ee8cdc7076b80",
        "text": "⇒ [[Glasperlenspiel]]"
      },
      "date": 1684740717135
    },
    {
      "type": "edit",
      "id": "434ee8cdc7076b80",
      "item": {
        "type": "paragraph",
        "id": "434ee8cdc7076b80",
        "text": "⇒ [[Glasperlenspiel]]: 3:47:12"
      },
      "date": 1684740731223
    },
    {
      "item": {
        "type": "factory",
        "id": "bf2dc4002dc2ce51"
      },
      "id": "bf2dc4002dc2ce51",
      "type": "add",
      "after": "434ee8cdc7076b80",
      "date": 1684740834658
    },
    {
      "type": "edit",
      "id": "bf2dc4002dc2ce51",
      "item": {
        "type": "paragraph",
        "id": "bf2dc4002dc2ce51",
        "text": "Page 110\n\nEs bleibe nicht unerwahnt, da auch Plinio Designori unter dem Einfluf seines Antagonisten erhebliche Wandlungen und Entwicklungen erfuhr, und zwar nicht nur im Sinn ei- ner Erziehung zur Lauterung seiner Kampfmethoden. Wahrend des kollegialen und kampferischen Austausches jener Schuljahre sah er seinen Gegenspieler sich in stetiger Steigerung zum vorbildlichen Kastalier entwickeln, es trat ihm der Geist der Provinz in der Gestalt des Freundes im- mer sichtbarer und lebendiger entgegen, und ebenso wie er jenen bis zu einem gewissen Garungsgrade mit der Atmo- sphare seiner Welt infiziert hatte, atmete er selbst die kasta- lische Luft und erlag ihrem Reiz und Einflu&. Im letzten Jahr seiner Schulzeit, nach einer zweistiindigen Disputation iiber die Ideale des Ménchtums und deren Gefahren, welche sie im Beisein der obersten Glasperlenspiel-Klasse ausge- kampft hatten, nahm er Josef zu einem Spaziergang mit und machte ihm auf diesem Gang ein Gestandnis, das wir nach einem Brief Ferromontes zitieren: »Ich wei natiirlich langst, Josef, da du der frommglaubige Glasperlenspieler und Provinzheilige nicht bist, dessen Rolle du so ausge- zeichnet spielst. Jeder von uns beiden steht an exponierter Stelle in einem Kampf, und jeder von uns weif ja wohl, daf das, wogegen er kampft, zu Recht existiert und seine unbe- strittenen Werte hat. Du stehst auf der Seite der Hochzucht des Geistes, ich auf der Seite des natiirlichen Lebens. In uns- rem Kampf hast du gelernt, die Gefahren des natiirlichen Lebens aufzuspiiren und aufs Korn zu nehmen; dein Amt ist es, darauf hinzuweisen, wie das natiirliche, naive Leben ohne geistige Zucht zum Sumpf werden und ins Tierische und noch weiter zuriickfiihren mu&. Und ich wieder muf "
      },
      "date": 1684740836554
    },
    {
      "item": {
        "type": "factory",
        "id": "bbd14b82cc202999"
      },
      "id": "bbd14b82cc202999",
      "type": "add",
      "after": "bf2dc4002dc2ce51",
      "date": 1684740860191
    },
    {
      "type": "edit",
      "id": "bbd14b82cc202999",
      "item": {
        "type": "pagefold",
        "id": "bbd14b82cc202999",
        "text": "~"
      },
      "date": 1684740863110
    },
    {
      "item": {
        "type": "factory",
        "id": "b17ba77324a12648"
      },
      "id": "b17ba77324a12648",
      "type": "add",
      "after": "bbd14b82cc202999",
      "date": 1684740865071
    },
    {
      "type": "edit",
      "id": "b17ba77324a12648",
      "item": {
        "type": "paragraph",
        "id": "b17ba77324a12648",
        "text": "⇒ [[Parser]]"
      },
      "date": 1684740881600
    },
    {
      "type": "edit",
      "id": "9440a09eef8d6036",
      "item": {
        "type": "paragraph",
        "id": "9440a09eef8d6036",
        "text": "Re: [[HTTPS Only Wiki]] [https://github.com/fedwiki/wiki-client/pull/294#issuecomment-1328229357 github]"
      },
      "date": 1684754332070
    },
    {
      "id": "98d1e9d8900ebb1e",
      "type": "remove",
      "removedTo": {
        "page": "HTTPS Only Wiki"
      },
      "date": 1684754342947
    },
    {
      "type": "add",
      "id": "35c3d6bc179fd6d6",
      "item": {
        "type": "paragraph",
        "id": "35c3d6bc179fd6d6",
        "text": "https://stackoverflow.com/questions/2163828/reading-cookies-via-https-that-were-set-using-http"
      },
      "after": "9440a09eef8d6036",
      "date": 1684756709953
    },
    {
      "type": "edit",
      "id": "9440a09eef8d6036",
      "item": {
        "type": "paragraph",
        "id": "9440a09eef8d6036",
        "text": "⇒ [[HTTPS Only Wiki]] [https://github.com/fedwiki/wiki-client/pull/294#issuecomment-1328229357 github]"
      },
      "date": 1684756721720
    },
    {
      "type": "edit",
      "id": "35c3d6bc179fd6d6",
      "item": {
        "type": "paragraph",
        "id": "35c3d6bc179fd6d6",
        "text": "[https://stackoverflow.com/questions/2163828/reading-cookies-via-https-that-were-set-using-http stackoverflow]"
      },
      "date": 1684756739754
    },
    {
      "type": "add",
      "id": "4f203ca680cd38be",
      "item": {
        "type": "paragraph",
        "id": "4f203ca680cd38be",
        "text": "> \n\nCookies set with the \"Secure\" keyword will only be sent by the browser when connecting by a secure means (HTTPS). Apart from that there is no distinction - if \"secure\" is absent, the cookie may be sent over an insecure connection."
      },
      "after": "35c3d6bc179fd6d6",
      "date": 1684756870514
    },
    {
      "type": "edit",
      "id": "4f203ca680cd38be",
      "item": {
        "type": "paragraph",
        "id": "4f203ca680cd38be",
        "text": "> Cookies set with the \"Secure\" keyword will only be sent by the browser when connecting by a secure means (HTTPS). Apart from that there is no distinction - if \"secure\" is absent, the cookie may be sent over an insecure connection."
      },
      "date": 1684756878196
    },
    {
      "type": "edit",
      "id": "4f203ca680cd38be",
      "item": {
        "type": "markdown",
        "id": "4f203ca680cd38be",
        "text": "> Cookies set with the \"Secure\" keyword will only be sent by the browser when connecting by a secure means (HTTPS). Apart from that there is no distinction - if \"secure\" is absent, the cookie may be sent over an insecure connection."
      },
      "date": 1684756879587
    },
    {
      "type": "edit",
      "id": "35c3d6bc179fd6d6",
      "item": {
        "type": "paragraph",
        "id": "35c3d6bc179fd6d6",
        "text": "Reading cookies via HTTPS that were set using HTTP [https://stackoverflow.com/questions/2163828/reading-cookies-via-https-that-were-set-using-http stackoverflow]"
      },
      "date": 1684756906754
    },
    {
      "type": "add",
      "id": "ed5845bf358b9fd9",
      "item": {
        "type": "paragraph",
        "id": "ed5845bf358b9fd9",
        "text": "> The full federation is only visible when the origin javascript comes from an http site. "
      },
      "after": "8957595bf3410fed",
      "date": 1684757150634
    },
    {
      "type": "edit",
      "id": "ed5845bf358b9fd9",
      "item": {
        "type": "markdown",
        "id": "ed5845bf358b9fd9",
        "text": "> The full federation is only visible when the origin javascript comes from an http site. "
      },
      "date": 1684757151712
    },
    {
      "item": {
        "type": "factory",
        "id": "a4bc35964f5931a6"
      },
      "id": "a4bc35964f5931a6",
      "type": "add",
      "after": "b17ba77324a12648",
      "date": 1684757183585
    },
    {
      "id": "a4bc35964f5931a6",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648"
      ],
      "date": 1684757190356
    },
    {
      "type": "edit",
      "id": "a4bc35964f5931a6",
      "item": {
        "type": "reference",
        "id": "a4bc35964f5931a6",
        "site": "glossary.asia.wiki.org",
        "slug": "origin",
        "title": "Origin",
        "text": "The Origin is the site from which we started browsing the federated wiki within a given tab. The origin is first among equals wielding some unexpected power over our experience."
      },
      "date": 1684757192826
    },
    {
      "type": "edit",
      "id": "8957595bf3410fed",
      "item": {
        "type": "paragraph",
        "id": "8957595bf3410fed",
        "text": "⇒ add full internet toggle to footer #294 [https://github.com/fedwiki/wiki-client/pull/294 github]"
      },
      "date": 1684757268398
    },
    {
      "type": "add",
      "id": "1526c0ad1460a298",
      "item": {
        "type": "paragraph",
        "id": "1526c0ad1460a298",
        "text": "[[Dave Mason]]"
      },
      "after": "b17ba77324a12648",
      "date": 1684758160127
    },
    {
      "type": "edit",
      "id": "1526c0ad1460a298",
      "item": {
        "type": "paragraph",
        "id": "1526c0ad1460a298",
        "text": "⇒ [[Dave Mason]]"
      },
      "date": 1684758168107
    },
    {
      "type": "add",
      "id": "382ea9b906e170ea",
      "item": {
        "type": "paragraph",
        "id": "382ea9b906e170ea",
        "text": "currying"
      },
      "after": "b17ba77324a12648",
      "date": 1684758201578
    },
    {
      "type": "edit",
      "id": "382ea9b906e170ea",
      "item": {
        "type": "paragraph",
        "id": "382ea9b906e170ea",
        "text": "currying: gypsydave5 — 15.11.2021 13:14\n@Garklein - not by default (afaik) @Dave Mason has extended Pharo to include currying and other FP ideas https://github.com/dvmason/Pharo-Functional."
      },
      "date": 1684758273634
    },
    {
      "type": "edit",
      "id": "382ea9b906e170ea",
      "item": {
        "type": "paragraph",
        "id": "382ea9b906e170ea",
        "text": "currying: gypsydave5 — [https://discord.com/channels/223421264751099906/305208145020715019/909778402943316008 discord]\n@Garklein - not by default (afaik) @Dave Mason has extended Pharo to include currying and other FP ideas https://github.com/dvmason/Pharo-Functional."
      },
      "date": 1684758310895
    },
    {
      "type": "edit",
      "id": "1526c0ad1460a298",
      "item": {
        "type": "paragraph",
        "id": "1526c0ad1460a298",
        "text": "⇒ [[Dave Mason]]: [https://github.com/dvmason/Pharo-Functional github]"
      },
      "date": 1684758332790
    },
    {
      "type": "edit",
      "id": "b98edaeeeeba97da",
      "item": {
        "type": "paragraph",
        "id": "b98edaeeeeba97da",
        "text": "⇒ [[NikolaiSuslov]] — 09.05.2023 15:56\nHello all Croquet lovers! Want to share an early prototype of implementing the Croquet VM in the novel reactive DSL Electric - Clojure programming language.What is already intriguing, that in <200 LoC mostly all parts of the classic Croquet VM (VWF reference implementation) are working, including Reflector server, Virtual Time, Future message sending etc. VM is distributed in a network-transparent single Electric application as a streaming DAG.\nhttps://github.com/NikolaySuslov/krestianstvo-electric"
      },
      "date": 1684758549628
    },
    {
      "type": "edit",
      "id": "b98edaeeeeba97da",
      "item": {
        "type": "paragraph",
        "id": "b98edaeeeeba97da",
        "text": "⇒ [[NikolaiSuslov]] — 09.05.2023 15:56\nHello all Croquet lovers! Want to share an early prototype of implementing the Croquet VM in the novel reactive DSL Electric - Clojure programming language.What is already intriguing, that in <200 LoC mostly all parts of the classic Croquet VM (VWF reference implementation) are working, including Reflector server, Virtual Time, Future message sending etc. VM is distributed in a network-transparent single Electric application as a streaming DAG.\n[https://github.com/NikolaySuslov/krestianstvo-electric github]"
      },
      "date": 1684758563911
    },
    {
      "type": "edit",
      "id": "b98edaeeeeba97da",
      "item": {
        "type": "paragraph",
        "id": "b98edaeeeeba97da",
        "text": "⇒ [[NikolaiSuslov]] — [https://discord.com/channels/694586717247635488/984210689503662140/1105493613590356058 discord] [[2023-05-09]] 15:56\nHello all Croquet lovers! Want to share an early prototype of implementing the Croquet VM in the novel reactive DSL Electric - Clojure programming language.What is already intriguing, that in <200 LoC mostly all parts of the classic Croquet VM (VWF reference implementation) are working, including Reflector server, Virtual Time, Future message sending etc. VM is distributed in a network-transparent single Electric application as a streaming DAG.\n[https://github.com/NikolaySuslov/krestianstvo-electric github]"
      },
      "date": 1684758847870
    },
    {
      "type": "edit",
      "id": "b98edaeeeeba97da",
      "item": {
        "type": "paragraph",
        "id": "b98edaeeeeba97da",
        "text": "⇒ [[NikolaiSuslov]] — [[2023-05-09]] 15:56 [https://discord.com/channels/694586717247635488/984210689503662140/1105493613590356058 discord]\nHello all Croquet lovers! Want to share an early prototype of implementing the Croquet VM in the novel reactive DSL Electric - Clojure programming language.What is already intriguing, that in <200 LoC mostly all parts of the classic Croquet VM (VWF reference implementation) are working, including Reflector server, Virtual Time, Future message sending etc. VM is distributed in a network-transparent single Electric application as a streaming DAG.\n[https://github.com/NikolaySuslov/krestianstvo-electric github]"
      },
      "date": 1684758866583
    },
    {
      "type": "edit",
      "id": "b98edaeeeeba97da",
      "item": {
        "type": "paragraph",
        "id": "b98edaeeeeba97da",
        "text": "⇒ [[NikolaiSuslov]] — [[2023-05-09]] 15:56 [https://discord.com/channels/694586717247635488/984210689503662140/1105493613590356058 discord]\nHello all Croquet lovers! Want to share an early prototype of implementing the Croquet VM in the novel reactive DSL Electric - Clojure programming language. What is already intriguing, that in <200 LoC mostly all parts of the classic Croquet VM (VWF reference implementation) are working, including Reflector server, Virtual Time, Future message sending etc. VM is distributed in a network-transparent single Electric application as a streaming DAG.\n[https://github.com/NikolaySuslov/krestianstvo-electric github]"
      },
      "date": 1684758893271
    },
    {
      "item": {
        "type": "factory",
        "id": "eb6611315dca193a"
      },
      "id": "eb6611315dca193a",
      "type": "add",
      "after": "b98edaeeeeba97da",
      "date": 1684759068953
    },
    {
      "type": "edit",
      "id": "eb6611315dca193a",
      "item": {
        "type": "paragraph",
        "id": "eb6611315dca193a",
        "text": "⇒ [[Clojure]] is a dialect of Lisp that runs on the JVM."
      },
      "date": 1684759082114
    },
    {
      "type": "edit",
      "id": "eb6611315dca193a",
      "item": {
        "type": "paragraph",
        "id": "eb6611315dca193a",
        "text": "⇒ [[Clojure]] is a dialect of Lisp that runs on the JVM. [https://hub.docker.com/_/clojure docker]"
      },
      "date": 1684759103490
    },
    {
      "type": "add",
      "id": "6fdbcb73f3f76eb8",
      "item": {
        "type": "paragraph",
        "id": "6fdbcb73f3f76eb8",
        "text": "Point-free programming in Smalltalk"
      },
      "after": "1526c0ad1460a298",
      "date": 1684759137743
    },
    {
      "type": "edit",
      "id": "6fdbcb73f3f76eb8",
      "item": {
        "type": "paragraph",
        "id": "6fdbcb73f3f76eb8",
        "text": "Point-free programming in Smalltalk [https://smalltalkthoughts.blogspot.com/2011/08/point-free-programming-in-smalltalk.html post]"
      },
      "date": 1684759154146
    },
    {
      "type": "edit",
      "id": "6fdbcb73f3f76eb8",
      "item": {
        "type": "paragraph",
        "id": "6fdbcb73f3f76eb8",
        "text": "⇒ [[Niko Schwarz]]: Point-free programming in Smalltalk [https://smalltalkthoughts.blogspot.com/2011/08/point-free-programming-in-smalltalk.html post]"
      },
      "date": 1684759196561
    },
    {
      "type": "edit",
      "id": "b98edaeeeeba97da",
      "item": {
        "type": "paragraph",
        "id": "b98edaeeeeba97da",
        "text": "⇒ [[Nikolai Suslov]] — [[2023-05-09]] 15:56 [https://discord.com/channels/694586717247635488/984210689503662140/1105493613590356058 discord]\nHello all Croquet lovers! Want to share an early prototype of implementing the Croquet VM in the novel reactive DSL Electric - Clojure programming language. What is already intriguing, that in <200 LoC mostly all parts of the classic Croquet VM (VWF reference implementation) are working, including Reflector server, Virtual Time, Future message sending etc. VM is distributed in a network-transparent single Electric application as a streaming DAG.\n[https://github.com/NikolaySuslov/krestianstvo-electric github]"
      },
      "date": 1684759490984
    },
    {
      "item": {
        "type": "factory",
        "id": "53012f4bba7634f6"
      },
      "id": "53012f4bba7634f6",
      "type": "add",
      "after": "eb6611315dca193a",
      "date": 1684759604971
    },
    {
      "type": "edit",
      "id": "53012f4bba7634f6",
      "item": {
        "type": "pagefold",
        "id": "53012f4bba7634f6",
        "text": "~"
      },
      "date": 1684759608367
    },
    {
      "item": {
        "type": "factory",
        "id": "d28a4161529f677b"
      },
      "id": "d28a4161529f677b",
      "type": "add",
      "after": "53012f4bba7634f6",
      "date": 1684759616634
    },
    {
      "type": "edit",
      "id": "d28a4161529f677b",
      "item": {
        "type": "paragraph",
        "id": "d28a4161529f677b",
        "text": "⇒ [[Elm and Vite]]"
      },
      "date": 1684759625039
    },
    {
      "id": "eb6611315dca193a",
      "type": "move",
      "order": [
        "53012f4bba7634f6",
        "d28a4161529f677b",
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "eb6611315dca193a"
      ],
      "date": 1684761293634
    },
    {
      "id": "d28a4161529f677b",
      "type": "move",
      "order": [
        "53012f4bba7634f6",
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "eb6611315dca193a",
        "d28a4161529f677b"
      ],
      "date": 1684761310091
    },
    {
      "id": "d28a4161529f677b",
      "type": "move",
      "order": [
        "53012f4bba7634f6",
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "eb6611315dca193a"
      ],
      "date": 1684761355120
    },
    {
      "id": "53012f4bba7634f6",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "eb6611315dca193a",
        "53012f4bba7634f6"
      ],
      "date": 1684761365511
    },
    {
      "item": {
        "type": "factory",
        "id": "d9e2ffb9a092f060"
      },
      "id": "d9e2ffb9a092f060",
      "type": "add",
      "after": "53012f4bba7634f6",
      "date": 1684761377228
    },
    {
      "type": "edit",
      "id": "d9e2ffb9a092f060",
      "item": {
        "type": "roster",
        "id": "d9e2ffb9a092f060",
        "text": "elm.dreyeck.ch"
      },
      "date": 1684761380274
    },
    {
      "id": "d9e2ffb9a092f060",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "eb6611315dca193a",
        "53012f4bba7634f6"
      ],
      "date": 1684761385883
    },
    {
      "id": "b98edaeeeeba97da",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "b98edaeeeeba97da",
        "text": "⇒ [[NikolaiSuslov]] — [[2023-05-09]] 15:56 [https://discord.com/channels/694586717247635488/984210689503662140/1105493613590356058 discord]\nHello all Croquet lovers! Want to share an early prototype of implementing the Croquet VM in the novel reactive DSL Electric - Clojure programming language. What is already intriguing, that in <200 LoC mostly all parts of the classic Croquet VM (VWF reference implementation) are working, including Reflector server, Virtual Time, Future message sending etc. VM is distributed in a network-transparent single Electric application as a streaming DAG.\n[https://github.com/NikolaySuslov/krestianstvo-electric github]"
      },
      "after": "6fdbcb73f3f76eb8",
      "attribution": {
        "page": "2023-05-09"
      },
      "date": 1684761785763
    },
    {
      "id": "53012f4bba7634f6",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "53012f4bba7634f6",
        "b98edaeeeeba97da",
        "eb6611315dca193a"
      ],
      "date": 1684761798635
    },
    {
      "item": {
        "type": "factory",
        "id": "3b6ec9038cf90bdd"
      },
      "id": "3b6ec9038cf90bdd",
      "type": "add",
      "after": "eb6611315dca193a",
      "date": 1684763299260
    },
    {
      "type": "edit",
      "id": "3b6ec9038cf90bdd",
      "item": {
        "type": "pagefold",
        "id": "3b6ec9038cf90bdd",
        "text": "~"
      },
      "date": 1684763302243
    },
    {
      "item": {
        "type": "factory",
        "id": "435155f617c76a36"
      },
      "id": "435155f617c76a36",
      "type": "add",
      "after": "3b6ec9038cf90bdd",
      "date": 1684763378587
    },
    {
      "type": "edit",
      "id": "435155f617c76a36",
      "item": {
        "type": "roster",
        "id": "435155f617c76a36",
        "text": "found.ward.fed.wik"
      },
      "date": 1684763414697
    },
    {
      "item": {
        "type": "factory",
        "id": "e175b8833c76aa5e"
      },
      "id": "e175b8833c76aa5e",
      "type": "add",
      "after": "435155f617c76a36",
      "date": 1684763452201
    },
    {
      "type": "edit",
      "id": "e175b8833c76aa5e",
      "item": {
        "type": "reference",
        "id": "e175b8833c76aa5e",
        "site": "found.ward.fed.wiki",
        "slug": "an-evolution-in-aggregation",
        "title": "An Evolution in Aggregation",
        "text": "Federated wiki is a database of sorts since we can put data on pages and those pages persist. Here we look at recent progress aggregating data from pages based on real experience with geolocated images."
      },
      "date": 1684763457817
    },
    {
      "type": "remove",
      "id": "435155f617c76a36",
      "date": 1684763468306
    },
    {
      "item": {
        "type": "factory",
        "id": "932e15e237979d14"
      },
      "id": "932e15e237979d14",
      "type": "add",
      "after": "e175b8833c76aa5e",
      "date": 1684763697311
    },
    {
      "type": "edit",
      "id": "932e15e237979d14",
      "item": {
        "type": "reference",
        "id": "932e15e237979d14",
        "site": "code.fed.wiki",
        "slug": "windmill-problem",
        "title": "Windmill Problem",
        "text": "Grant Sanderson savors the surprisingly difficult problem 2 from the 2011 International Mathematical Olympiad and its surprisingly easy to understand solution. [https://www.imo-official.org/problems/IMO2011SL.pdf pdf] [https://www.3blue1brown.com/about blog]"
      },
      "date": 1684763704037
    },
    {
      "item": {
        "type": "factory",
        "id": "e4673456373dd1f4"
      },
      "id": "e4673456373dd1f4",
      "type": "add",
      "after": "932e15e237979d14",
      "date": 1684764021375
    },
    {
      "type": "edit",
      "id": "e4673456373dd1f4",
      "item": {
        "type": "reference",
        "id": "e4673456373dd1f4",
        "site": "code.fed.wiki.org",
        "slug": "ward-cunningham",
        "title": "Ward Cunningham",
        "text": "I'm well known for my contributions to the developing practice of object-oriented programming."
      },
      "date": 1684764027293
    },
    {
      "id": "e4673456373dd1f4",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "53012f4bba7634f6",
        "b98edaeeeeba97da",
        "eb6611315dca193a",
        "3b6ec9038cf90bdd",
        "e175b8833c76aa5e",
        "e4673456373dd1f4",
        "932e15e237979d14"
      ],
      "date": 1684764037666
    },
    {
      "item": {
        "type": "factory",
        "id": "7f010f37a0766eeb"
      },
      "id": "7f010f37a0766eeb",
      "type": "add",
      "after": "932e15e237979d14",
      "date": 1684764118553
    },
    {
      "type": "edit",
      "id": "7f010f37a0766eeb",
      "item": {
        "type": "paragraph",
        "id": "7f010f37a0766eeb",
        "text": "\n7:39\nAs a general problem-solving tip, whenever you have a vague idea that feels productive, find a way to be more exact about what you mean, preferably putting numbers to it, then ask questions about those numbers. In our example, one way to formalize the idea of a “middle” is to count how many points ..."
      },
      "date": 1684764120950
    },
    {
      "type": "edit",
      "id": "7f010f37a0766eeb",
      "item": {
        "type": "paragraph",
        "id": "7f010f37a0766eeb",
        "text": "[https://youtu.be/M64HUIJFTZM?t=459 7:39] – \nAs a general problem-solving tip, whenever you have a vague idea that feels productive, find a way to be more exact about what you mean, preferably putting numbers to it, then ask questions about those numbers. In our example, one way to formalize the idea of a “middle” is to count how many points ..."
      },
      "date": 1684764137264
    },
    {
      "type": "edit",
      "id": "7f010f37a0766eeb",
      "item": {
        "type": "paragraph",
        "id": "7f010f37a0766eeb",
        "text": "[https://youtu.be/M64HUIJFTZM?t=459 7:39] – \nAs a general problem-solving tip, whenever you have a vague idea that feels productive, you should find a way to be more exact about what you mean, preferably putting numbers to it, then ask questions about those numbers. In our example, one way to formalize the idea of a “middle” is to count how many points ..."
      },
      "date": 1684764162383
    },
    {
      "type": "edit",
      "id": "7f010f37a0766eeb",
      "item": {
        "type": "paragraph",
        "id": "7f010f37a0766eeb",
        "text": "[https://youtu.be/M64HUIJFTZM?t=459 7:39] – \nAs a general problem-solving tip, whenever you have a vague idea that feels productive, you should of course find a way to be more exact about what you mean, preferably putting numbers to it, then ask questions about those numbers. In our example, one way to formalize the idea of a “middle” is to count how many points ..."
      },
      "date": 1684764189762
    },
    {
      "item": {
        "type": "factory",
        "id": "57c26ddf8daac953"
      },
      "id": "57c26ddf8daac953",
      "type": "add",
      "after": "7f010f37a0766eeb",
      "date": 1684764244916
    },
    {
      "id": "57c26ddf8daac953",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "53012f4bba7634f6",
        "b98edaeeeeba97da",
        "eb6611315dca193a",
        "3b6ec9038cf90bdd",
        "e175b8833c76aa5e",
        "e4673456373dd1f4",
        "57c26ddf8daac953",
        "932e15e237979d14",
        "7f010f37a0766eeb"
      ],
      "date": 1684764248071
    },
    {
      "type": "edit",
      "id": "57c26ddf8daac953",
      "item": {
        "type": "markdown",
        "id": "57c26ddf8daac953",
        "text": "> My vision is to do for numbers what I’ve done for words: give them depth and meaning that ordinary people can depend on every day. This can change the world."
      },
      "date": 1684764251665
    },
    {
      "type": "edit",
      "id": "7f010f37a0766eeb",
      "item": {
        "type": "paragraph",
        "id": "7f010f37a0766eeb",
        "text": "> [https://youtu.be/M64HUIJFTZM?t=459 7:39] – \nAs a general problem-solving tip, whenever you have a vague idea that feels productive, you should of course find a way to be more exact about what you mean, preferably putting numbers to it, then ask questions about those numbers. In our example, one way to formalize the idea of a “middle” is to count how many points ..."
      },
      "date": 1684764274323
    },
    {
      "type": "edit",
      "id": "7f010f37a0766eeb",
      "item": {
        "type": "markdown",
        "id": "7f010f37a0766eeb",
        "text": "> [https://youtu.be/M64HUIJFTZM?t=459 7:39] – \nAs a general problem-solving tip, whenever you have a vague idea that feels productive, you should of course find a way to be more exact about what you mean, preferably putting numbers to it, then ask questions about those numbers. In our example, one way to formalize the idea of a “middle” is to count how many points ..."
      },
      "date": 1684764275325
    },
    {
      "type": "edit",
      "id": "7f010f37a0766eeb",
      "item": {
        "type": "markdown",
        "id": "7f010f37a0766eeb",
        "text": "> [https://youtu.be/M64HUIJFTZM?t=459 7:39] –  As a general problem-solving tip, whenever you have a vague idea that feels productive, you should of course find a way to be more exact about what you mean, preferably putting numbers to it, then ask questions about those numbers. In our example, one way to formalize the idea of a “middle” is to count how many points ..."
      },
      "date": 1684764280463
    },
    {
      "type": "add",
      "id": "29d8683254140b20",
      "item": {
        "type": "paragraph",
        "id": "29d8683254140b20",
        "text": "Store data on pages and those pages persist"
      },
      "after": "eb6611315dca193a",
      "date": 1684764386632
    },
    {
      "id": "29d8683254140b20",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "53012f4bba7634f6",
        "b98edaeeeeba97da",
        "eb6611315dca193a",
        "3b6ec9038cf90bdd",
        "29d8683254140b20",
        "e175b8833c76aa5e",
        "e4673456373dd1f4",
        "57c26ddf8daac953",
        "932e15e237979d14",
        "7f010f37a0766eeb"
      ],
      "date": 1684764389294
    },
    {
      "type": "edit",
      "id": "29d8683254140b20",
      "item": {
        "type": "paragraph",
        "id": "29d8683254140b20",
        "text": "Store data on pages and those pages persist:"
      },
      "date": 1684764392029
    },
    {
      "type": "add",
      "id": "51b73fb9919fe17f",
      "item": {
        "type": "paragraph",
        "id": "51b73fb9919fe17f",
        "text": "\nHU, Kekun, ZENG, Guosun, DING, Shuang and JIANG, Huowen, 2019. Cluster-Scheduling Big Graph Traversal Task for Parallel Processing in Heterogeneous Cloud Based on DAG Transformation. IEEE Access. 2019. Vol. 7, p. 77070–77082. DOI 10.1109/ACCESS.2019.2921477. Task scheduling is the key to the full utilization of heterogeneous cloud capabilities for parallel processing of big graphs. Most graph processing systems adopt single-granularity scheduling mechanisms without considering the heterogeneity of the cloud, leading to poor performance. To alleviate it by learning from the excellent directed acyclic graph (DAG)-based scheduling techniques accumulated in traditional parallel computing, we first present a streaming DAG-construction heuristic. It transforms a big graph along with graph traversal algorithms to be carried out into a DAG. We then propose a three-phase heterogeneous-aware cluster-scheduling algorithm to schedule the DAG into a heterogeneous cloud for parallel processing. In the first phase, we design a parallel linear clustering algorithm to cluster the DAG into a series of linear clusters with different granularities. In the second phase, we design a heterogeneous-aware load balancing algorithm to map these clusters to different computational nodes of the cloud. In the last phase, we design a task ordering algorithm to assigns these clusters as-early-as-possible start times. The experimental results show that our scheme can generate high-quality schedules and improve the efficiency and performance of parallel processing of big graphs in the heterogeneous cloud.\n"
      },
      "after": "eb6611315dca193a",
      "date": 1684764615330
    },
    {
      "type": "edit",
      "id": "51b73fb9919fe17f",
      "item": {
        "type": "paragraph",
        "id": "51b73fb9919fe17f",
        "text": "HU, Kekun, ZENG, Guosun, DING, Shuang and JIANG, Huowen, 2019. Cluster-Scheduling Big Graph Traversal Task for Parallel Processing in Heterogeneous Cloud Based on DAG Transformation. IEEE Access. 2019. Vol. 7, p. 77070–77082. DOI 10.1109/ACCESS.2019.2921477. Task scheduling is the key to the full utilization of heterogeneous cloud capabilities for parallel processing of big graphs. Most graph processing systems adopt single-granularity scheduling mechanisms without considering the heterogeneity of the cloud, leading to poor performance. To alleviate it by learning from the excellent directed acyclic graph (DAG)-based scheduling techniques accumulated in traditional parallel computing, we first present a streaming DAG-construction heuristic. It transforms a big graph along with graph traversal algorithms to be carried out into a DAG. We then propose a three-phase heterogeneous-aware cluster-scheduling algorithm to schedule the DAG into a heterogeneous cloud for parallel processing. In the first phase, we design a parallel linear clustering algorithm to cluster the DAG into a series of linear clusters with different granularities. In the second phase, we design a heterogeneous-aware load balancing algorithm to map these clusters to different computational nodes of the cloud. In the last phase, we design a task ordering algorithm to assigns these clusters as-early-as-possible start times. The experimental results show that our scheme can generate high-quality schedules and improve the efficiency and performance of parallel processing of big graphs in the heterogeneous cloud.\n"
      },
      "date": 1684764623369
    },
    {
      "item": {
        "type": "factory",
        "id": "1ed7672e9e60ad53"
      },
      "id": "1ed7672e9e60ad53",
      "type": "add",
      "after": "7f010f37a0766eeb",
      "date": 1684764767343
    },
    {
      "type": "edit",
      "id": "1ed7672e9e60ad53",
      "item": {
        "type": "paragraph",
        "id": "1ed7672e9e60ad53",
        "text": "Smalltalk with numbers"
      },
      "date": 1684764775010
    },
    {
      "type": "edit",
      "id": "1ed7672e9e60ad53",
      "item": {
        "type": "paragraph",
        "id": "1ed7672e9e60ad53",
        "text": "Smalltalk with numbers [https://rmod-files.lille.inria.fr/FreeBooks/Joy/5.pdf pdf]"
      },
      "date": 1684764831054
    },
    {
      "type": "edit",
      "id": "1ed7672e9e60ad53",
      "item": {
        "type": "paragraph",
        "id": "1ed7672e9e60ad53",
        "text": "Smalltalk with numbers [https://rmod-files.lille.inria.fr/FreeBooks/Joy/5.pdf pdf] [[Ivan Tomek]]"
      },
      "date": 1684764848010
    },
    {
      "type": "edit",
      "id": "1ed7672e9e60ad53",
      "item": {
        "type": "paragraph",
        "id": "1ed7672e9e60ad53",
        "text": "Smalltalk with numbers [https://rmod-files.lille.inria.fr/FreeBooks/Joy/5.pdf pdf] ⇒ [[Ivan Tomek]]"
      },
      "date": 1684764856722
    },
    {
      "type": "add",
      "id": "846817e6b9e9c09f",
      "item": {
        "type": "paragraph",
        "id": "846817e6b9e9c09f",
        "text": "⇒ [[Path]]"
      },
      "after": "1ed7672e9e60ad53",
      "date": 1684764957120
    },
    {
      "item": {
        "type": "factory",
        "id": "acfbf7fab4cfcfaf"
      },
      "id": "acfbf7fab4cfcfaf",
      "type": "add",
      "after": "846817e6b9e9c09f",
      "date": 1684765269437
    },
    {
      "type": "edit",
      "id": "acfbf7fab4cfcfaf",
      "item": {
        "type": "reference",
        "id": "acfbf7fab4cfcfaf",
        "site": "wiki.ralfbarkow.ch",
        "slug": "evidencing-new-psych-forms",
        "title": "Evidencing New Psych Forms",
        "text": "While human life is certainly a manifestation of biology, social relations (culture) are the origin of what distinguishes humans from other animals (Vygotsky, 1997b)."
      },
      "date": 1684765272092
    },
    {
      "type": "edit",
      "id": "846817e6b9e9c09f",
      "item": {
        "type": "paragraph",
        "id": "846817e6b9e9c09f",
        "text": "⇒ [[Path]] ⇒ [[Cusp Catastrophe]]"
      },
      "date": 1684765312384
    },
    {
      "type": "edit",
      "id": "846817e6b9e9c09f",
      "item": {
        "type": "paragraph",
        "id": "846817e6b9e9c09f",
        "text": "⇒ [[Path]] ⇒ [[Cusp Catastrophe]] ⇒ [[Evidencing New Psych Forms]]"
      },
      "date": 1684765405911
    },
    {
      "type": "edit",
      "id": "846817e6b9e9c09f",
      "item": {
        "type": "paragraph",
        "id": "846817e6b9e9c09f",
        "text": "⇒ [[DAG]] ⇒ [[Path]] ⇒ [[Cusp Catastrophe]] ⇒ [[Evidencing New Psych Forms]]"
      },
      "date": 1684765456716
    },
    {
      "item": {
        "type": "factory",
        "id": "fef34772379eb257"
      },
      "id": "fef34772379eb257",
      "type": "add",
      "after": "acfbf7fab4cfcfaf",
      "date": 1684776926631
    },
    {
      "type": "edit",
      "id": "fef34772379eb257",
      "item": {
        "type": "pagefold",
        "id": "fef34772379eb257",
        "text": "~"
      },
      "date": 1684776929837
    },
    {
      "item": {
        "type": "factory",
        "id": "643489b5615b3873"
      },
      "id": "643489b5615b3873",
      "type": "add",
      "after": "fef34772379eb257",
      "date": 1684776931659
    },
    {
      "type": "edit",
      "id": "643489b5615b3873",
      "item": {
        "type": "paragraph",
        "id": "643489b5615b3873",
        "text": "POST /auth/reclaim/ HTTP/1.1\nLine-based text data"
      },
      "date": 1684776934369
    },
    {
      "type": "edit",
      "id": "643489b5615b3873",
      "item": {
        "type": "paragraph",
        "id": "643489b5615b3873",
        "text": "⇒ [[reclaim]]: POST /auth/reclaim/ HTTP/1.1\nLine-based text data"
      },
      "date": 1684776965780
    },
    {
      "item": {
        "type": "factory",
        "id": "91f01bc711ea84aa"
      },
      "id": "91f01bc711ea84aa",
      "type": "add",
      "after": "643489b5615b3873",
      "date": 1684782486267
    },
    {
      "type": "edit",
      "id": "91f01bc711ea84aa",
      "item": {
        "type": "paragraph",
        "id": "91f01bc711ea84aa",
        "text": "[[OAuth 2.0]]"
      },
      "date": 1684782491366
    },
    {
      "type": "edit",
      "id": "91f01bc711ea84aa",
      "item": {
        "type": "paragraph",
        "id": "91f01bc711ea84aa",
        "text": "[[OAuth 2.0]] [https://oauth.net/2/ site]"
      },
      "date": 1684782509066
    },
    {
      "type": "edit",
      "id": "91f01bc711ea84aa",
      "item": {
        "type": "paragraph",
        "id": "91f01bc711ea84aa",
        "text": "[[OAuth 2.0]] [https://oauth.net/2/ site], [https://github.com/fedwiki/wiki-security-passportjs/blob/master/docs/config-oauth2.md wiki-security-passportjs]"
      },
      "date": 1684782550334
    },
    {
      "type": "add",
      "id": "caedaba78e04a644",
      "item": {
        "type": "paragraph",
        "id": "caedaba78e04a644",
        "text": "Electric Clojure"
      },
      "after": "eb6611315dca193a",
      "date": 1684786564016
    },
    {
      "type": "edit",
      "id": "caedaba78e04a644",
      "item": {
        "type": "paragraph",
        "id": "caedaba78e04a644",
        "text": "⇒ [[Electric Clojure]]"
      },
      "date": 1684786573376
    },
    {
      "type": "remove",
      "id": "caedaba78e04a644",
      "date": 1684786578529
    },
    {
      "type": "edit",
      "id": "eb6611315dca193a",
      "item": {
        "type": "paragraph",
        "id": "eb6611315dca193a",
        "text": "⇒ [[Clojure]] is a dialect of Lisp that runs on the JVM. [https://hub.docker.com/_/clojure docker] ⇒ [[Electric Clojure]]"
      },
      "date": 1684786580599
    },
    {
      "type": "edit",
      "id": "eb6611315dca193a",
      "item": {
        "type": "paragraph",
        "id": "eb6611315dca193a",
        "text": "⇒ [[Clojure]] is a dialect of Lisp that runs on the JVM. [https://hub.docker.com/_/clojure docker] ⇒ [[Electric Clojure]] ⇒ [[Lambdera]]"
      },
      "date": 1684786704193
    },
    {
      "type": "edit",
      "id": "eb6611315dca193a",
      "item": {
        "type": "paragraph",
        "id": "eb6611315dca193a",
        "text": "⇒ [[Clojure]] is a dialect of Lisp that runs on the JVM. [https://hub.docker.com/_/clojure docker] ⇒ [[Electric Clojure]] ⇒ [[Lamdera]]"
      },
      "date": 1684786758854
    },
    {
      "type": "edit",
      "id": "eb6611315dca193a",
      "item": {
        "type": "paragraph",
        "id": "eb6611315dca193a",
        "text": "⇒ [[Clojure]] is a dialect of Lisp that runs on the JVM. [https://hub.docker.com/_/clojure docker] ⇒ [[Electric Clojure]] ⇒ [[Lamdera]] [https://discourse.elm-lang.org/t/lamdera-a-year-in-review-v1-0-0-paid-plans-carbon-mission-and-more/7584 discourse]"
      },
      "date": 1684786773854
    },
    {
      "type": "edit",
      "id": "b98edaeeeeba97da",
      "item": {
        "type": "paragraph",
        "id": "b98edaeeeeba97da",
        "text": "⇒ [[NikolaiSuslov]] — [[2023-05-09]] 15:56 [https://discord.com/channels/694586717247635488/984210689503662140/1105493613590356058 discord]\nHello all Croquet lovers! Want to share an early prototype of implementing the Croquet VM in the novel reactive DSL Electric - Clojure programming language. What is already intriguing, that in <200 LoC mostly all parts of the classic Croquet VM (VWF reference implementation) are working, including Reflector server, Virtual Time, Future message sending etc. VM is distributed in a network-transparent single Electric application as a streaming [[DAG]].\n[https://github.com/NikolaySuslov/krestianstvo-electric github]"
      },
      "date": 1684786893397
    },
    {
      "type": "edit",
      "id": "51b73fb9919fe17f",
      "item": {
        "type": "paragraph",
        "id": "51b73fb9919fe17f",
        "text": "⇒ [[DAG]]: HU, Kekun, ZENG, Guosun, DING, Shuang and JIANG, Huowen, 2019. Cluster-Scheduling Big Graph Traversal Task for Parallel Processing in Heterogeneous Cloud Based on DAG Transformation. IEEE Access. 2019. Vol. 7, p. 77070–77082. DOI 10.1109/ACCESS.2019.2921477. Task scheduling is the key to the full utilization of heterogeneous cloud capabilities for parallel processing of big graphs. Most graph processing systems adopt single-granularity scheduling mechanisms without considering the heterogeneity of the cloud, leading to poor performance. To alleviate it by learning from the excellent directed acyclic graph (DAG)-based scheduling techniques accumulated in traditional parallel computing, we first present a streaming DAG-construction heuristic. It transforms a big graph along with graph traversal algorithms to be carried out into a DAG. We then propose a three-phase heterogeneous-aware cluster-scheduling algorithm to schedule the DAG into a heterogeneous cloud for parallel processing. In the first phase, we design a parallel linear clustering algorithm to cluster the DAG into a series of linear clusters with different granularities. In the second phase, we design a heterogeneous-aware load balancing algorithm to map these clusters to different computational nodes of the cloud. In the last phase, we design a task ordering algorithm to assigns these clusters as-early-as-possible start times. The experimental results show that our scheme can generate high-quality schedules and improve the efficiency and performance of parallel processing of big graphs in the heterogeneous cloud.\n"
      },
      "date": 1684786906094
    },
    {
      "item": {
        "type": "factory",
        "id": "7f20ae52dd94085b"
      },
      "id": "7f20ae52dd94085b",
      "type": "add",
      "after": "91f01bc711ea84aa",
      "date": 1684786970528
    },
    {
      "id": "7f20ae52dd94085b",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "7f20ae52dd94085b",
        "53012f4bba7634f6",
        "b98edaeeeeba97da",
        "eb6611315dca193a",
        "51b73fb9919fe17f",
        "3b6ec9038cf90bdd",
        "29d8683254140b20",
        "e175b8833c76aa5e",
        "e4673456373dd1f4",
        "57c26ddf8daac953",
        "932e15e237979d14",
        "7f010f37a0766eeb",
        "1ed7672e9e60ad53",
        "846817e6b9e9c09f",
        "acfbf7fab4cfcfaf",
        "fef34772379eb257",
        "643489b5615b3873",
        "91f01bc711ea84aa"
      ],
      "date": 1684786992550
    },
    {
      "type": "edit",
      "id": "7f20ae52dd94085b",
      "item": {
        "type": "video",
        "id": "7f20ae52dd94085b",
        "text": "https://user-images.githubusercontent.com/124158/236840769-66ac1328-136d-4a66-b01c-456ea58b71c9.mp4"
      },
      "date": 1684786995266
    },
    {
      "item": {
        "type": "factory",
        "id": "0c7b90221b65692d"
      },
      "id": "0c7b90221b65692d",
      "type": "add",
      "after": "91f01bc711ea84aa",
      "date": 1684787004109
    },
    {
      "id": "0c7b90221b65692d",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "0c7b90221b65692d",
        "7f20ae52dd94085b",
        "53012f4bba7634f6",
        "b98edaeeeeba97da",
        "eb6611315dca193a",
        "51b73fb9919fe17f",
        "3b6ec9038cf90bdd",
        "29d8683254140b20",
        "e175b8833c76aa5e",
        "e4673456373dd1f4",
        "57c26ddf8daac953",
        "932e15e237979d14",
        "7f010f37a0766eeb",
        "1ed7672e9e60ad53",
        "846817e6b9e9c09f",
        "acfbf7fab4cfcfaf",
        "fef34772379eb257",
        "643489b5615b3873",
        "91f01bc711ea84aa"
      ],
      "date": 1684787015802
    },
    {
      "type": "edit",
      "id": "0c7b90221b65692d",
      "item": {
        "type": "audio",
        "id": "0c7b90221b65692d",
        "text": "https://user-images.githubusercontent.com/124158/236840769-66ac1328-136d-4a66-b01c-456ea58b71c9.mp4"
      },
      "date": 1684787017566
    },
    {
      "type": "fork",
      "date": 1684787433581
    },
    {
      "type": "remove",
      "id": "b98edaeeeeba97da",
      "date": 1684788554462
    },
    {
      "type": "edit",
      "id": "51b73fb9919fe17f",
      "item": {
        "type": "paragraph",
        "id": "51b73fb9919fe17f",
        "text": "⇒ [[DAG]]: HU, Kekun, ZENG, Guosun, DING, Shuang and JIANG, Huowen, 2019. Cluster-Scheduling Big Graph Traversal Task for Parallel Processing in Heterogeneous Cloud Based on DAG Transformation. IEEE Access. 2019. Vol. 7, p. 77070–77082. DOI 10.1109/ACCESS.2019.2921477. Task scheduling is the key to the full utilization of heterogeneous cloud capabilities for parallel processing of big graphs. Most graph processing systems adopt single-granularity scheduling mechanisms without considering the heterogeneity of the cloud, leading to poor performance. To alleviate it by learning from the excellent directed acyclic graph (DAG)-based scheduling techniques accumulated in traditional parallel computing, we first present a streaming DAG-construction heuristic. It transforms a big graph along with graph traversal algorithms to be carried out into a DAG. We then propose a three-phase heterogeneous-aware cluster-scheduling algorithm to schedule the DAG into a heterogeneous cloud for parallel processing. In the first phase, we design a parallel linear clustering algorithm to cluster the DAG into a series of linear clusters with different granularities. In the second phase, we design a heterogeneous-aware load balancing algorithm to map these clusters to different computational nodes of the cloud. In the last phase, we design a task ordering algorithm to assigns these clusters as-early-as-possible start times. The experimental results show that our scheme can generate high-quality schedules and improve the efficiency and performance of parallel processing of big graphs in the heterogeneous cloud."
      },
      "date": 1684788569900
    },
    {
      "type": "add",
      "id": "9e146af81557f708",
      "item": {
        "type": "paragraph",
        "id": "9e146af81557f708",
        "text": "UIs are streaming DAGs [https://hyperfiddle.notion.site/UIs-are-streaming-DAGs-e181461681a8452bb9c7a9f10f507991 post]"
      },
      "after": "51b73fb9919fe17f",
      "date": 1684788580413
    },
    {
      "type": "edit",
      "id": "9e146af81557f708",
      "item": {
        "type": "paragraph",
        "id": "9e146af81557f708",
        "text": "UIs are streaming DAGs [https://hyperfiddle.notion.site/UIs-are-streaming-DAGs-e181461681a8452bb9c7a9f10f507991 post]"
      },
      "date": 1684788595515
    },
    {
      "item": {
        "type": "video",
        "id": "ec7a81e69aa83177",
        "text": "YOUTUBE fq4_W4vLA6g"
      },
      "id": "ec7a81e69aa83177",
      "type": "add",
      "after": "91f01bc711ea84aa",
      "date": 1684789039433
    },
    {
      "id": "ec7a81e69aa83177",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "0c7b90221b65692d",
        "7f20ae52dd94085b",
        "53012f4bba7634f6",
        "b98edaeeeeba97da",
        "eb6611315dca193a",
        "51b73fb9919fe17f",
        "9e146af81557f708",
        "ec7a81e69aa83177",
        "3b6ec9038cf90bdd",
        "29d8683254140b20",
        "e175b8833c76aa5e",
        "e4673456373dd1f4",
        "57c26ddf8daac953",
        "932e15e237979d14",
        "7f010f37a0766eeb",
        "1ed7672e9e60ad53",
        "846817e6b9e9c09f",
        "acfbf7fab4cfcfaf",
        "fef34772379eb257",
        "643489b5615b3873",
        "91f01bc711ea84aa"
      ],
      "date": 1684789049561,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "edit",
      "id": "ec7a81e69aa83177",
      "item": {
        "type": "video",
        "id": "ec7a81e69aa83177",
        "text": "YOUTUBE fq4_W4vLA6g"
      },
      "date": 1684789060680
    },
    {
      "type": "fork",
      "date": 1684789063934
    },
    {
      "type": "edit",
      "id": "6dff3e57c205af44",
      "item": {
        "type": "code",
        "id": "6dff3e57c205af44",
        "text": "  services.nginx = {\n    enable = true;\n    recommendedProxySettings = false;\n    recommendedTlsSettings = true;\n    virtualHosts = {\n      \"wiki.ralfbarkow.ch\" = {\n        enableACME = true;\n        enableSSL = true;\n        extraConfig = ''\n          listen 80;\n        '';\n        locations.\"/\" = {\n          proxyPass = \"http://127.0.0.1:3000\";\n          proxyWebsockets = true; \n        };\n      };\n"
      },
      "date": 1684789080350
    },
    {
      "type": "edit",
      "id": "9e146af81557f708",
      "item": {
        "type": "paragraph",
        "id": "9e146af81557f708",
        "text": "⇒ [[Dustin Getz]]: UIs are streaming DAGs [https://hyperfiddle.notion.site/UIs-are-streaming-DAGs-e181461681a8452bb9c7a9f10f507991 post]"
      },
      "date": 1684789107242
    },
    {
      "type": "edit",
      "id": "ec7a81e69aa83177",
      "item": {
        "type": "video",
        "id": "ec7a81e69aa83177",
        "text": "YOUTUBE fq4_W4vLA6g\nUIs are streaming DAGs - Dustin Getz"
      },
      "date": 1684789153213
    },
    {
      "type": "add",
      "id": "7058b1494c27a3b4",
      "item": {
        "type": "paragraph",
        "id": "7058b1494c27a3b4",
        "text": "https://youtu.be/fq4_W4vLA6g?t=21"
      },
      "after": "9e146af81557f708",
      "date": 1684789369364
    },
    {
      "id": "7058b1494c27a3b4",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "0c7b90221b65692d",
        "7f20ae52dd94085b",
        "53012f4bba7634f6",
        "eb6611315dca193a",
        "51b73fb9919fe17f",
        "9e146af81557f708",
        "ec7a81e69aa83177",
        "7058b1494c27a3b4",
        "3b6ec9038cf90bdd",
        "29d8683254140b20",
        "e175b8833c76aa5e",
        "e4673456373dd1f4",
        "57c26ddf8daac953",
        "932e15e237979d14",
        "7f010f37a0766eeb",
        "1ed7672e9e60ad53",
        "846817e6b9e9c09f",
        "acfbf7fab4cfcfaf",
        "fef34772379eb257",
        "643489b5615b3873",
        "91f01bc711ea84aa",
        "b98edaeeeeba97da"
      ],
      "date": 1684789372479
    },
    {
      "type": "edit",
      "id": "7058b1494c27a3b4",
      "item": {
        "type": "paragraph",
        "id": "7058b1494c27a3b4",
        "text": "[https://youtu.be/fq4_W4vLA6g?t=21 0:21] – There are client side DOM effects and server side queries."
      },
      "date": 1684789395515
    },
    {
      "type": "add",
      "id": "fe7af5c231af35b4",
      "item": {
        "type": "paragraph",
        "id": "fe7af5c231af35b4",
        "text": "\n1:08\nactually the macro is compiling the function body into something else.\n1:12\nWe compile it into a DAG."
      },
      "after": "7058b1494c27a3b4",
      "date": 1684789484442
    },
    {
      "type": "edit",
      "id": "fe7af5c231af35b4",
      "item": {
        "type": "paragraph",
        "id": "fe7af5c231af35b4",
        "text": "[https://youtu.be/fq4_W4vLA6g?t=68 1:08] – actually the macro is compiling the function body into something else.\n1:12\nWe compile it into a DAG."
      },
      "date": 1684789503161
    },
    {
      "type": "edit",
      "id": "fe7af5c231af35b4",
      "item": {
        "type": "paragraph",
        "id": "fe7af5c231af35b4",
        "text": "[https://youtu.be/fq4_W4vLA6g?t=68 1:08] – actually the macro is compiling the function body into something else. We compile it into a [[DAG]]."
      },
      "date": 1684789514608
    },
    {
      "type": "remove",
      "id": "7f20ae52dd94085b",
      "date": 1684789859556
    },
    {
      "type": "remove",
      "id": "0c7b90221b65692d",
      "date": 1684789861502
    },
    {
      "type": "add",
      "id": "8fde41f43d297c9b",
      "item": {
        "type": "paragraph",
        "id": "8fde41f43d297c9b",
        "text": "\n4:04\nHow can lexical scope cross to the server? Recall that photon functions are DAGs. When the input has a new value, the event will propagate and reflow the downstream dag. Sometimes crossing over a web socket."
      },
      "after": "fe7af5c231af35b4",
      "date": 1684789907065
    },
    {
      "type": "edit",
      "id": "8fde41f43d297c9b",
      "item": {
        "type": "paragraph",
        "id": "8fde41f43d297c9b",
        "text": "[https://youtu.be/fq4_W4vLA6g?t=244 4:04] – How can lexical scope cross to the server? Recall that photon functions are DAGs. When the input has a new value, the event will propagate and reflow the downstream dag. Sometimes crossing over a web socket."
      },
      "date": 1684789932588
    },
    {
      "type": "add",
      "id": "e4f4b51d912eece0",
      "item": {
        "type": "paragraph",
        "id": "e4f4b51d912eece0",
        "text": "\nHUDAK, Paul and QUICK, Donya, 2018. The Haskell school of music: from signals to symphonies. . Cambridge, United Kingdom ; New York, NY: Cambridge University Press. ISBN 978-1-108-41675-7. ML74.4.H37 H84 2018\n"
      },
      "after": "8fde41f43d297c9b",
      "date": 1684790805775
    },
    {
      "type": "edit",
      "id": "e4f4b51d912eece0",
      "item": {
        "type": "paragraph",
        "id": "e4f4b51d912eece0",
        "text": "HUDAK, Paul and QUICK, Donya, 2018. The Haskell school of music: from signals to symphonies. Cambridge, United Kingdom ; New York, NY: Cambridge University Press. ISBN 978-1-108-41675-7. \n"
      },
      "date": 1684790818317
    },
    {
      "type": "edit",
      "id": "e4f4b51d912eece0",
      "item": {
        "type": "paragraph",
        "id": "e4f4b51d912eece0",
        "text": "HUDAK, Paul and QUICK, Donya, 2018. The [[Haskell]] school of music: from signals to symphonies. Cambridge, United Kingdom ; New York, NY: Cambridge University Press. ISBN 978-1-108-41675-7. \n"
      },
      "date": 1684790839436
    },
    {
      "type": "edit",
      "id": "e4f4b51d912eece0",
      "item": {
        "type": "paragraph",
        "id": "e4f4b51d912eece0",
        "text": "HUDAK, Paul and QUICK, Donya, 2018. The [[Haskell]] school of music: from signals to symphonies. Cambridge, United Kingdom ; New York, NY: Cambridge University Press. ISBN 978-1-108-41675-7. "
      },
      "date": 1684791372068
    },
    {
      "type": "add",
      "id": "a33327ae1f40943b",
      "item": {
        "type": "paragraph",
        "id": "a33327ae1f40943b",
        "text": "Signals vs Streams"
      },
      "after": "e4f4b51d912eece0",
      "date": 1684791374013
    },
    {
      "type": "add",
      "id": "9a36244c5a98293f",
      "item": {
        "type": "paragraph",
        "id": "9a36244c5a98293f",
        "text": "> Signals can skip duplicate values."
      },
      "after": "a33327ae1f40943b",
      "date": 1684791384702
    },
    {
      "type": "edit",
      "id": "9a36244c5a98293f",
      "item": {
        "type": "markdown",
        "id": "9a36244c5a98293f",
        "text": "> Signals can skip duplicate values."
      },
      "date": 1684791386090
    },
    {
      "type": "edit",
      "id": "a33327ae1f40943b",
      "item": {
        "type": "paragraph",
        "id": "a33327ae1f40943b",
        "text": "Signals vs Streams [https://clojureverse.org/t/signals-vs-streams/9840/2 clojureverse.org]"
      },
      "date": 1684791408501
    },
    {
      "item": {
        "type": "factory",
        "id": "4c47d1590ee0bed8"
      },
      "id": "4c47d1590ee0bed8",
      "type": "add",
      "after": "b98edaeeeeba97da",
      "date": 1684791447536
    },
    {
      "id": "4c47d1590ee0bed8",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "53012f4bba7634f6",
        "eb6611315dca193a",
        "51b73fb9919fe17f",
        "9e146af81557f708",
        "ec7a81e69aa83177",
        "7058b1494c27a3b4",
        "fe7af5c231af35b4",
        "8fde41f43d297c9b",
        "e4f4b51d912eece0",
        "a33327ae1f40943b",
        "9a36244c5a98293f",
        "4c47d1590ee0bed8",
        "3b6ec9038cf90bdd",
        "29d8683254140b20",
        "e175b8833c76aa5e",
        "e4673456373dd1f4",
        "57c26ddf8daac953",
        "932e15e237979d14",
        "7f010f37a0766eeb",
        "1ed7672e9e60ad53",
        "846817e6b9e9c09f",
        "acfbf7fab4cfcfaf",
        "fef34772379eb257",
        "643489b5615b3873",
        "91f01bc711ea84aa",
        "b98edaeeeeba97da"
      ],
      "date": 1684791452445
    },
    {
      "type": "edit",
      "id": "4c47d1590ee0bed8",
      "item": {
        "type": "paragraph",
        "id": "4c47d1590ee0bed8",
        "text": "Electric Clojure – a signals DSL for fullstack web UI"
      },
      "date": 1684791454807
    },
    {
      "type": "edit",
      "id": "4c47d1590ee0bed8",
      "item": {
        "type": "paragraph",
        "id": "4c47d1590ee0bed8",
        "text": "Electric Clojure – a signals DSL for fullstack web UI [https://clojureverse.org/t/electric-clojure-a-signals-dsl-for-fullstack-web-ui/9788 post]"
      },
      "date": 1684791477881
    },
    {
      "type": "edit",
      "id": "4c47d1590ee0bed8",
      "item": {
        "type": "paragraph",
        "id": "4c47d1590ee0bed8",
        "text": "Electric Clojure – a signals DSL for fullstack web UI [https://clojureverse.org/t/electric-clojure-a-signals-dsl-for-fullstack-web-ui/9788 post], [https://news.ycombinator.com/item?id=28630209 hn]"
      },
      "date": 1684791534918
    },
    {
      "type": "edit",
      "id": "4c47d1590ee0bed8",
      "item": {
        "type": "paragraph",
        "id": "4c47d1590ee0bed8",
        "text": "Electric Clojure – a signals DSL for fullstack web UI [https://clojureverse.org/t/electric-clojure-a-signals-dsl-for-fullstack-web-ui/9788 post], [https://news.ycombinator.com/item?id=28630209 hn], [https://hyperfiddle.notion.site/Reactive-Clojure-You-don-t-need-a-web-framework-you-need-a-web-language-44b5bfa526be4af282863f34fa1cfffc post]"
      },
      "date": 1684791562968
    },
    {
      "type": "add",
      "id": "5d3c17f36be46764",
      "item": {
        "type": "paragraph",
        "id": "5d3c17f36be46764",
        "text": "Emacs IDE setup"
      },
      "after": "4c47d1590ee0bed8",
      "date": 1684791724540
    },
    {
      "type": "edit",
      "id": "5d3c17f36be46764",
      "item": {
        "type": "paragraph",
        "id": "5d3c17f36be46764",
        "text": "Emacs IDE setup [https://hyperfiddle.github.io/#/page/emacs%20ide%20setup page]"
      },
      "date": 1684791737785
    },
    {
      "type": "add",
      "id": "0badf61bdad6aceb",
      "item": {
        "type": "paragraph",
        "id": "0badf61bdad6aceb",
        "text": "Doom Emacs Documentation"
      },
      "after": "5d3c17f36be46764",
      "date": 1684791800628
    },
    {
      "type": "edit",
      "id": "0badf61bdad6aceb",
      "item": {
        "type": "paragraph",
        "id": "0badf61bdad6aceb",
        "text": "Doom Emacs Documentation [https://docs.doomemacs.org/latest/ page]"
      },
      "date": 1684791812436
    },
    {
      "type": "add",
      "id": "1bcd30832b20c4a3",
      "item": {
        "type": "paragraph",
        "id": "1bcd30832b20c4a3",
        "text": "electric-xtdb-starter"
      },
      "after": "0badf61bdad6aceb",
      "date": 1684791861764
    },
    {
      "type": "edit",
      "id": "1bcd30832b20c4a3",
      "item": {
        "type": "paragraph",
        "id": "1bcd30832b20c4a3",
        "text": "electric-xtdb-starter [https://github.com/hyperfiddle/electric-xtdb-starter github]"
      },
      "date": 1684791871342
    },
    {
      "type": "add",
      "id": "e8eddca184efd617",
      "item": {
        "type": "paragraph",
        "id": "e8eddca184efd617",
        "text": "shadow-cljs "
      },
      "after": "1bcd30832b20c4a3",
      "date": 1684791962557
    },
    {
      "type": "edit",
      "id": "e8eddca184efd617",
      "item": {
        "type": "paragraph",
        "id": "e8eddca184efd617",
        "text": "shadow-cljs [https://github.com/thheller/shadow-cljs github]"
      },
      "date": 1684791982496
    },
    {
      "item": {
        "type": "factory",
        "id": "0286af1133eaa8ca"
      },
      "id": "0286af1133eaa8ca",
      "type": "add",
      "after": "b98edaeeeeba97da",
      "date": 1684792056221
    },
    {
      "id": "0286af1133eaa8ca",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "53012f4bba7634f6",
        "eb6611315dca193a",
        "51b73fb9919fe17f",
        "9e146af81557f708",
        "ec7a81e69aa83177",
        "7058b1494c27a3b4",
        "fe7af5c231af35b4",
        "8fde41f43d297c9b",
        "e4f4b51d912eece0",
        "a33327ae1f40943b",
        "9a36244c5a98293f",
        "4c47d1590ee0bed8",
        "5d3c17f36be46764",
        "0badf61bdad6aceb",
        "1bcd30832b20c4a3",
        "e8eddca184efd617",
        "0286af1133eaa8ca",
        "3b6ec9038cf90bdd",
        "29d8683254140b20",
        "e175b8833c76aa5e",
        "e4673456373dd1f4",
        "57c26ddf8daac953",
        "932e15e237979d14",
        "7f010f37a0766eeb",
        "1ed7672e9e60ad53",
        "846817e6b9e9c09f",
        "acfbf7fab4cfcfaf",
        "fef34772379eb257",
        "643489b5615b3873",
        "91f01bc711ea84aa",
        "b98edaeeeeba97da"
      ],
      "date": 1684792062837
    },
    {
      "type": "edit",
      "id": "0286af1133eaa8ca",
      "item": {
        "type": "code",
        "id": "0286af1133eaa8ca",
        "text": "npx shadow-cljs watch frontend\nrgb@mbp-rgb> npx shadow-cljs watch frontend       ~/Projects/RalfBarkow/electric-xtdb-starter\nNeed to install the following packages:\n  shadow-cljs@2.23.3\nOk to proceed? (y) \nnpm WARN deprecated querystring@0.2.0: The querystring API is considered Legacy. new code should use the URLSearchParams API instead.\n------------------------------------------------------------------------------\n\n   WARNING: shadow-cljs not installed in project.\n   See https://shadow-cljs.github.io/docs/UsersGuide.html#project-install\n\n------------------------------------------------------------------------------\nshadow-cljs - config: /Users/rgb/Projects/RalfBarkow/electric-xtdb-starter/shadow-cljs.edn\nshadow-cljs - starting via \"clojure\"\nExecutable 'clojure' not found on system path.\n[1] rgb@mbp-rgb>                                  ~/Projects/RalfBarkow/electric-xtdb-starter"
      },
      "date": 1684792065062
    },
    {
      "item": {
        "type": "factory",
        "id": "4b7aac38160ebc03"
      },
      "id": "4b7aac38160ebc03",
      "type": "add",
      "after": "b98edaeeeeba97da",
      "date": 1684792188868
    },
    {
      "id": "4b7aac38160ebc03",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "53012f4bba7634f6",
        "eb6611315dca193a",
        "51b73fb9919fe17f",
        "9e146af81557f708",
        "ec7a81e69aa83177",
        "7058b1494c27a3b4",
        "fe7af5c231af35b4",
        "8fde41f43d297c9b",
        "e4f4b51d912eece0",
        "a33327ae1f40943b",
        "9a36244c5a98293f",
        "4c47d1590ee0bed8",
        "5d3c17f36be46764",
        "0badf61bdad6aceb",
        "1bcd30832b20c4a3",
        "e8eddca184efd617",
        "0286af1133eaa8ca",
        "4b7aac38160ebc03",
        "3b6ec9038cf90bdd",
        "29d8683254140b20",
        "e175b8833c76aa5e",
        "e4673456373dd1f4",
        "57c26ddf8daac953",
        "932e15e237979d14",
        "7f010f37a0766eeb",
        "1ed7672e9e60ad53",
        "846817e6b9e9c09f",
        "acfbf7fab4cfcfaf",
        "fef34772379eb257",
        "643489b5615b3873",
        "91f01bc711ea84aa",
        "b98edaeeeeba97da"
      ],
      "date": 1684792195394
    },
    {
      "type": "edit",
      "id": "4b7aac38160ebc03",
      "item": {
        "type": "paragraph",
        "id": "4b7aac38160ebc03",
        "text": "Calva: A Clojure & ClojureScript IDE in Visual Studio Code"
      },
      "date": 1684792198103
    },
    {
      "type": "edit",
      "id": "4b7aac38160ebc03",
      "item": {
        "type": "paragraph",
        "id": "4b7aac38160ebc03",
        "text": "Calva: A Clojure & ClojureScript IDE in Visual Studio Code [https://github.com/BetterThanTomorrow/calva#calva-a-clojure--clojurescript-ide-in-visual-studio-code github]"
      },
      "date": 1684792217025
    },
    {
      "item": {
        "type": "factory",
        "id": "d05ce02b47fee3a3"
      },
      "id": "d05ce02b47fee3a3",
      "type": "add",
      "after": "b98edaeeeeba97da",
      "date": 1684792259747
    },
    {
      "type": "edit",
      "id": "d05ce02b47fee3a3",
      "item": {
        "type": "video",
        "id": "d05ce02b47fee3a3",
        "text": "https://youtu.be/"
      },
      "date": 1684792267488
    },
    {
      "type": "edit",
      "id": "d05ce02b47fee3a3",
      "item": {
        "type": "video",
        "id": "d05ce02b47fee3a3",
        "text": "YOUTUBE O6GrXXhCzCc"
      },
      "date": 1684792278388
    },
    {
      "id": "d05ce02b47fee3a3",
      "type": "move",
      "order": [
        "5f21e39444857879",
        "6dff3e57c205af44",
        "d5901e6a7dec5b57",
        "1c731eff66c5df94",
        "e53d9917d4c0346d",
        "8957595bf3410fed",
        "ed5845bf358b9fd9",
        "a4bc35964f5931a6",
        "7afac1148afaf0c4",
        "21b0c4a439e8e064",
        "e067d51d82b8d6b9",
        "209ff6fd387edd77",
        "cb074fd8fb7f4e66",
        "9440a09eef8d6036",
        "35c3d6bc179fd6d6",
        "4f203ca680cd38be",
        "a91310901f5882fa",
        "434ee8cdc7076b80",
        "bf2dc4002dc2ce51",
        "bbd14b82cc202999",
        "b17ba77324a12648",
        "d28a4161529f677b",
        "d9e2ffb9a092f060",
        "382ea9b906e170ea",
        "1526c0ad1460a298",
        "6fdbcb73f3f76eb8",
        "53012f4bba7634f6",
        "eb6611315dca193a",
        "51b73fb9919fe17f",
        "9e146af81557f708",
        "ec7a81e69aa83177",
        "7058b1494c27a3b4",
        "fe7af5c231af35b4",
        "8fde41f43d297c9b",
        "e4f4b51d912eece0",
        "a33327ae1f40943b",
        "9a36244c5a98293f",
        "4c47d1590ee0bed8",
        "5d3c17f36be46764",
        "0badf61bdad6aceb",
        "1bcd30832b20c4a3",
        "e8eddca184efd617",
        "0286af1133eaa8ca",
        "4b7aac38160ebc03",
        "d05ce02b47fee3a3",
        "3b6ec9038cf90bdd",
        "29d8683254140b20",
        "e175b8833c76aa5e",
        "e4673456373dd1f4",
        "57c26ddf8daac953",
        "932e15e237979d14",
        "7f010f37a0766eeb",
        "1ed7672e9e60ad53",
        "846817e6b9e9c09f",
        "acfbf7fab4cfcfaf",
        "fef34772379eb257",
        "643489b5615b3873",
        "91f01bc711ea84aa",
        "b98edaeeeeba97da"
      ],
      "date": 1684792287569
    },
    {
      "type": "edit",
      "id": "d05ce02b47fee3a3",
      "item": {
        "type": "video",
        "id": "d05ce02b47fee3a3",
        "text": "YOUTUBE O6GrXXhCzCc\nGet Started with Clojure in VS Code"
      },
      "date": 1684792303660
    },
    {
      "type": "edit",
      "id": "4b7aac38160ebc03",
      "item": {
        "type": "paragraph",
        "id": "4b7aac38160ebc03",
        "text": "Calva: A Clojure & ClojureScript IDE in Visual Studio Code [https://github.com/BetterThanTomorrow/calva#calva-a-clojure--clojurescript-ide-in-visual-studio-code github], [https://calva.io/getting-started/ page]"
      },
      "date": 1684792352797
    }
  ]
}