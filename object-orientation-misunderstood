{
  "title": "Object Orientation Misunderstood",
  "story": [
    {
      "type": "paragraph",
      "id": "b8a6676fa98e4b3f",
      "text": "Object orientation is still being misunderstood and there are strong arguments that it is going on wrong direction [1]. For more than two decades, object orientation is under heavy critics [2][3]. Apart from suggesting to use a completely different paradigm such as functional programming, there are various attempts to extend it by mainly [[Traits]], [[Mixins]] and role constructs to a level which will at last enable it to evolve towards the original vision of Alan Kay who coined the term:"
    },
    {
      "type": "markdown",
      "id": "c67fd7f33b3abeab",
      "text": "> “In computer terms, Smalltalk is a recursion on the notion of computer itself. Instead of dividing “computer stuff” into things each less strong than the whole -like data structures, procedures and functions which are the usual paraphernalia of programming languages- each Smalltalk object is a recursion on the entire possibilities of the computer. Thus its semantics are a bit like having thousands and thousands of computers all hooked together by a very fast network.” [4] \n"
    },
    {
      "type": "markdown",
      "id": "55ec5706288ee95c",
      "text": "Alan Kay's original vision of object orientation which is to hook millions of computers together by a very fast network has never been so close to be realized than today. Popularity of micro services architecture is a bold sign that his vision to decentralize the data and capabilities of systems as a web of small, independent and self-contained units of computation in strong coordination is gaining wide-spread acceptance.\n\n"
    },
    {
      "type": "markdown",
      "id": "86e371c16b8f1903",
      "text": "The main problem with object orientation as we know it, is that, it is not really object but class oriented\nat its core. The only core way to extend the objects (as instances of classes) is to inherit from a base class\nwhich is quite usable for most but not all occasions -even- in the data perspective. However, extension\nby inheritance approach is really a big mismatch with behavior perspective. Since we have only this core\nmechanism to differentiate both data and behavior of the objects (which are designated as instances of a class),\nthe inevitable result is a massive dispersion of behavior code in various subclasses. This is against readability principle [5] which leads to other systemic problems, at least testability.\n"
    },
    {
      "type": "markdown",
      "id": "819bbb9e00a3f785",
      "text": "There have been many improvements to fix this problem: interfaces, aspect orientation, traits [6] based language extensions for roles and contexts, JAWIRO [7], OT/J [8]. Most of these solve some part of the problem very well, and they provide rich set of features, but none of them include the constraints and provide a complete conceptual framework for modeling behavioral code to give function its natural form which is depicted as data communication in DCI execution model with all relevant concepts like contexts, roles, role methods, role object contracts as defined in DCI glossary [9].\n"
    },
    {
      "type": "markdown",
      "id": "778e5d387acce3aa",
      "text": "Concepts of context and role which have been studied for over two decades is the key to the solution, **and lateral or systems thinking** [10] is the key principle behind it. If we can capture the form of function [11] and specify that form to support well formed safe coordination of so called mini-computing blocks, we will have roles, contexts, and contracts as the new mechanism instead of relying only on inheritance to safely hook these mini-computing blocks. Behavior is now a first-class citizen as data, none of them is sub to the other."
    },
    {
      "type": "pagefold",
      "id": "46e448ef928d9303",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "d72cc43bf39e7b15",
      "text": "SERKAN BALEK, Cevat and ERDOĞAN, Nadia, 2019. [[Restful Contexts]]. In: Proceedings of the International Conference on Modern research in Engineering, Technology & Science. Online. Acavent. 29 March 2019. [Accessed 27 September 2022]. ISBN 978-609-8239-40-9. DOI 10.33422/icmets.2019.03.209. "
    },
    {
      "type": "paragraph",
      "id": "a61573c61f1a9d1b",
      "text": "10. L. Mononen, “Systems thinking and its contribution to understanding future designer thinking”, in Design for Next : Proceedings of the 12th European Academy of Design Conference (pp. S4529-S4538). Design Journal, Vol. 20, 2017 [https://www.tandfonline.com/doi/pdf/10.1080/14606925.2017.1352949 pdf]"
    },
    {
      "type": "markdown",
      "id": "e367aff9b0d27d2c",
      "text": "> **Abstract**: Design is changing in a radical way. The object of design is transforming from tangible objects into services and furthermore, into systems. Increasingly, new insights arise from the interfaces between diverse disciplines – such as art, science and technology – which through various discourses and paradigms have been specialized and driven apart. This discussion paper pinpoints the so-called systems thinkers, hybrid-people, whose methods and habits of work are constituted by the reconciliation of different disciplines. The article aims to bring more understanding to the kind of thinking that is needed in the complex and dynamic environment in which we create and use design today. This discussion paper aims to critically understand the advantages and limitations of applying systems thinking to design. The paper attempts to ponder the question of, what a systems view of the world can offer to the future of design thinking."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Object Orientation Misunderstood",
        "story": []
      },
      "date": 1664291839489
    },
    {
      "item": {
        "type": "factory",
        "id": "b8a6676fa98e4b3f"
      },
      "id": "b8a6676fa98e4b3f",
      "type": "add",
      "date": 1664291850267
    },
    {
      "type": "edit",
      "id": "b8a6676fa98e4b3f",
      "item": {
        "type": "paragraph",
        "id": "b8a6676fa98e4b3f",
        "text": "Object orientation is still being misunderstood and there are strong arguments that it is going on wrong direction [1]. For more than two decades, object orientation is under heavy critics [2][3]. Apart from suggesting to use a completely different paradigm such as functional programming, there are various attempts to extend it by mainly traits, mixins and role constructs to a level which will at last enable it to evolve towards the original vision of Alan Kay who coined the term:"
      },
      "date": 1664291851910
    },
    {
      "type": "edit",
      "id": "b8a6676fa98e4b3f",
      "item": {
        "type": "paragraph",
        "id": "b8a6676fa98e4b3f",
        "text": "Object orientation is still being misunderstood and there are strong arguments that it is going on wrong direction [1]. For more than two decades, object orientation is under heavy critics [2][3]. Apart from suggesting to use a completely different paradigm such as functional programming, there are various attempts to extend it by mainly [[traits]], [[mixins]] and role constructs to a level which will at last enable it to evolve towards the original vision of Alan Kay who coined the term:"
      },
      "date": 1664291879314
    },
    {
      "type": "edit",
      "id": "b8a6676fa98e4b3f",
      "item": {
        "type": "paragraph",
        "id": "b8a6676fa98e4b3f",
        "text": "Object orientation is still being misunderstood and there are strong arguments that it is going on wrong direction [1]. For more than two decades, object orientation is under heavy critics [2][3]. Apart from suggesting to use a completely different paradigm such as functional programming, there are various attempts to extend it by mainly [[Traits]], [[Mixins]] and role constructs to a level which will at last enable it to evolve towards the original vision of Alan Kay who coined the term:"
      },
      "date": 1664291893458
    },
    {
      "item": {
        "type": "factory",
        "id": "46e448ef928d9303"
      },
      "id": "46e448ef928d9303",
      "type": "add",
      "after": "b8a6676fa98e4b3f",
      "date": 1664291924327
    },
    {
      "type": "edit",
      "id": "46e448ef928d9303",
      "item": {
        "type": "pagefold",
        "id": "46e448ef928d9303",
        "text": "~"
      },
      "date": 1664291928873
    },
    {
      "item": {
        "type": "factory",
        "id": "d72cc43bf39e7b15"
      },
      "id": "d72cc43bf39e7b15",
      "type": "add",
      "after": "46e448ef928d9303",
      "date": 1664291930353
    },
    {
      "type": "edit",
      "id": "d72cc43bf39e7b15",
      "item": {
        "type": "paragraph",
        "id": "d72cc43bf39e7b15",
        "text": "Serkan Balek und Erdoğan, „[[Restful Contexts]]“; Patkar, „Supporting Multiple Stakeholders in Agile Development“."
      },
      "date": 1664291939859
    },
    {
      "type": "edit",
      "id": "d72cc43bf39e7b15",
      "item": {
        "type": "paragraph",
        "id": "d72cc43bf39e7b15",
        "text": "\nSERKAN BALEK, Cevat and ERDOĞAN, Nadia, 2019. Restful Contexts. In: Proceedings of the International Conference on Modern research in Engineering, Technology & Science. Online. Acavent. 29 March 2019. [Accessed 27 September 2022]. ISBN 978-609-8239-40-9. DOI 10.33422/icmets.2019.03.209. "
      },
      "date": 1664291969821
    },
    {
      "type": "edit",
      "id": "d72cc43bf39e7b15",
      "item": {
        "type": "paragraph",
        "id": "d72cc43bf39e7b15",
        "text": "SERKAN BALEK, Cevat and ERDOĞAN, Nadia, 2019. [[Restful Contexts]]. In: Proceedings of the International Conference on Modern research in Engineering, Technology & Science. Online. Acavent. 29 March 2019. [Accessed 27 September 2022]. ISBN 978-609-8239-40-9. DOI 10.33422/icmets.2019.03.209. "
      },
      "date": 1664291980465
    },
    {
      "type": "add",
      "id": "c67fd7f33b3abeab",
      "item": {
        "type": "paragraph",
        "id": "c67fd7f33b3abeab",
        "text": "> “In computer terms, Smalltalk is a recursion on the notion of computer itself. Instead of dividing “computer stuff” into things each less strong than the whole -like data structures, procedures and functions which are the usual paraphernalia of programming languages- each Smalltalk object is a recursion on the entire possibilities of the computer. Thus its semantics are a bit like having thousands and thousands of computers all hooked together by a very fast network.” [4] "
      },
      "after": "b8a6676fa98e4b3f",
      "date": 1664292016882
    },
    {
      "type": "edit",
      "id": "c67fd7f33b3abeab",
      "item": {
        "type": "markdown",
        "id": "c67fd7f33b3abeab",
        "text": "> “In computer terms, Smalltalk is a recursion on the notion of computer itself. Instead of dividing “computer stuff” into things each less strong than the whole -like data structures, procedures and functions which are the usual paraphernalia of programming languages- each Smalltalk object is a recursion on the entire possibilities of the computer. Thus its semantics are a bit like having thousands and thousands of computers all hooked together by a very fast network.” [4] "
      },
      "date": 1664292018230
    },
    {
      "type": "edit",
      "id": "c67fd7f33b3abeab",
      "item": {
        "type": "markdown",
        "id": "c67fd7f33b3abeab",
        "text": "> “In computer terms, Smalltalk is a recursion on the notion of computer itself. Instead of dividing “computer stuff” into things each less strong than the whole -like data structures, procedures and functions which are the usual paraphernalia of programming languages- each Smalltalk object is a recursion on the entire possibilities of the computer. Thus its semantics are a bit like having thousands and thousands of computers all hooked together by a very fast network.” [4] \n"
      },
      "date": 1664292052004
    },
    {
      "type": "add",
      "id": "55ec5706288ee95c",
      "item": {
        "type": "markdown",
        "id": "55ec5706288ee95c",
        "text": "Alan Kay's original vision of object orientation which is to hook millions of computers together by a very fast network has never been so close to be realized than today. Popularity of micro services architecture is a bold sign that his vision to decentralize the data and capabilities of systems as a web of small, independent and self-contained units of computation in strong coordination is gaining wide-spread acceptance.\n"
      },
      "after": "c67fd7f33b3abeab",
      "date": 1664292052781
    },
    {
      "type": "edit",
      "id": "55ec5706288ee95c",
      "item": {
        "type": "markdown",
        "id": "55ec5706288ee95c",
        "text": "Alan Kay's original vision of object orientation which is to hook millions of computers together by a very fast network has never been so close to be realized than today. Popularity of micro services architecture is a bold sign that his vision to decentralize the data and capabilities of systems as a web of small, independent and self-contained units of computation in strong coordination is gaining wide-spread acceptance.\n\n"
      },
      "date": 1664292084573
    },
    {
      "type": "add",
      "id": "86e371c16b8f1903",
      "item": {
        "type": "markdown",
        "id": "86e371c16b8f1903",
        "text": "The main problem with object orientation as we know it, is that, it is not really object but class oriented\nat its core. The only core way to extend the objects (as instances of classes) is to inherit from a base class\nwhich is quite usable for most but not all occasions -even- in the data perspective. However, extension\nby inheritance approach is really a big mismatch with behavior perspective. Since we have only this core\nmechanism to differentiate both data and behavior of the objects (which are designated as instances of a class),\nthe inevitable result is a massive dispersion of behavior code in various subclasses. This is against readability principle [5] which leads to other systemic problems, at least testability."
      },
      "after": "55ec5706288ee95c",
      "date": 1664292085133
    },
    {
      "type": "edit",
      "id": "86e371c16b8f1903",
      "item": {
        "type": "markdown",
        "id": "86e371c16b8f1903",
        "text": "The main problem with object orientation as we know it, is that, it is not really object but class oriented\nat its core. The only core way to extend the objects (as instances of classes) is to inherit from a base class\nwhich is quite usable for most but not all occasions -even- in the data perspective. However, extension\nby inheritance approach is really a big mismatch with behavior perspective. Since we have only this core\nmechanism to differentiate both data and behavior of the objects (which are designated as instances of a class),\nthe inevitable result is a massive dispersion of behavior code in various subclasses. This is against readability principle [5] which leads to other systemic problems, at least testability.\n"
      },
      "date": 1664292126712
    },
    {
      "type": "add",
      "id": "819bbb9e00a3f785",
      "item": {
        "type": "markdown",
        "id": "819bbb9e00a3f785",
        "text": "There have been many improvements to fix this problem: interfaces, aspect orientation, traits [6] based language extensions for roles and contexts, JAWIRO [7], OT/J [8]. Most of these solve some part of the problem very well, and they provide rich set of features, but none of them include the constraints and provide a complete conceptual framework for modeling behavioral code to give function its natural form which is depicted as data communication in DCI execution model with all relevant concepts like contexts, roles, role methods, role object contracts as defined in DCI glossary [9]."
      },
      "after": "86e371c16b8f1903",
      "date": 1664292127347
    },
    {
      "type": "edit",
      "id": "819bbb9e00a3f785",
      "item": {
        "type": "markdown",
        "id": "819bbb9e00a3f785",
        "text": "There have been many improvements to fix this problem: interfaces, aspect orientation, traits [6] based language extensions for roles and contexts, JAWIRO [7], OT/J [8]. Most of these solve some part of the problem very well, and they provide rich set of features, but none of them include the constraints and provide a complete conceptual framework for modeling behavioral code to give function its natural form which is depicted as data communication in DCI execution model with all relevant concepts like contexts, roles, role methods, role object contracts as defined in DCI glossary [9].\n"
      },
      "date": 1664292163679
    },
    {
      "type": "add",
      "id": "778e5d387acce3aa",
      "item": {
        "type": "markdown",
        "id": "778e5d387acce3aa",
        "text": "Concepts of context and role which have been studied for over two decades is the key to the solution, and lateral or systems thinking [10] is the key principle behind it. If we can capture the form of function [11] and specify that form to support well formed safe coordination of so called mini-computing blocks, we will have roles, contexts, and contracts as the new mechanism instead of relying only on inheritance to safely hook these mini-computing blocks. Behavior is now a first-class citizen as data, none of them is sub to the other."
      },
      "after": "819bbb9e00a3f785",
      "date": 1664292164270
    },
    {
      "type": "edit",
      "id": "778e5d387acce3aa",
      "item": {
        "type": "markdown",
        "id": "778e5d387acce3aa",
        "text": "Concepts of context and role which have been studied for over two decades is the key to the solution, **and lateral or systems thinking** [10] is the key principle behind it. If we can capture the form of function [11] and specify that form to support well formed safe coordination of so called mini-computing blocks, we will have roles, contexts, and contracts as the new mechanism instead of relying only on inheritance to safely hook these mini-computing blocks. Behavior is now a first-class citizen as data, none of them is sub to the other."
      },
      "date": 1664292193726
    },
    {
      "item": {
        "type": "factory",
        "id": "a61573c61f1a9d1b"
      },
      "id": "a61573c61f1a9d1b",
      "type": "add",
      "after": "d72cc43bf39e7b15",
      "date": 1664292214427
    },
    {
      "type": "edit",
      "id": "a61573c61f1a9d1b",
      "item": {
        "type": "paragraph",
        "id": "a61573c61f1a9d1b",
        "text": "10. L. Mononen, “Systems thinking and its contribution to understanding future designer thinking”, in Design for Next : Proceedings of the 12th European Academy of Design Conference (pp. S4529-S4538). Design Journal, Vol. 20, 2017"
      },
      "date": 1664292215782
    },
    {
      "type": "edit",
      "id": "a61573c61f1a9d1b",
      "item": {
        "type": "paragraph",
        "id": "a61573c61f1a9d1b",
        "text": "10. L. Mononen, “Systems thinking and its contribution to understanding future designer thinking”, in Design for Next : Proceedings of the 12th European Academy of Design Conference (pp. S4529-S4538). Design Journal, Vol. 20, 2017 [https://www.tandfonline.com/doi/pdf/10.1080/14606925.2017.1352949 pdf]"
      },
      "date": 1664292252276
    },
    {
      "item": {
        "type": "factory",
        "id": "e367aff9b0d27d2c"
      },
      "id": "e367aff9b0d27d2c",
      "type": "add",
      "after": "a61573c61f1a9d1b",
      "date": 1664292340808
    },
    {
      "type": "edit",
      "id": "e367aff9b0d27d2c",
      "item": {
        "type": "markdown",
        "id": "e367aff9b0d27d2c",
        "text": "> Abstract: Design is changing in a radical way. The object of design is transforming from tangible objects into services and furthermore, into systems. Increasingly, new insights arise from the interfaces between diverse disciplines – such as art, science and technology – which through various discourses and paradigms have been specialized and driven apart. This discussion paper pinpoints the so-called systems thinkers, hybrid-people, whose methods and habits of work are constituted by the reconciliation of different disciplines. The article aims to bring more understanding to the kind of thinking that is needed in the complex and dynamic environment in which we create and use design today. This discussion paper aims to critically understand the advantages and limitations of applying systems thinking to design. The paper attempts to ponder the question of, what a systems view of the world can offer to the future of design thinking."
      },
      "date": 1664292344121
    },
    {
      "type": "edit",
      "id": "e367aff9b0d27d2c",
      "item": {
        "type": "markdown",
        "id": "e367aff9b0d27d2c",
        "text": "> **Abstract**: Design is changing in a radical way. The object of design is transforming from tangible objects into services and furthermore, into systems. Increasingly, new insights arise from the interfaces between diverse disciplines – such as art, science and technology – which through various discourses and paradigms have been specialized and driven apart. This discussion paper pinpoints the so-called systems thinkers, hybrid-people, whose methods and habits of work are constituted by the reconciliation of different disciplines. The article aims to bring more understanding to the kind of thinking that is needed in the complex and dynamic environment in which we create and use design today. This discussion paper aims to critically understand the advantages and limitations of applying systems thinking to design. The paper attempts to ponder the question of, what a systems view of the world can offer to the future of design thinking."
      },
      "date": 1664292351469
    }
  ]
}