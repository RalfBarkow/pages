{
  "title": "Regular JSON",
  "story": [
    {
      "type": "paragraph",
      "id": "c02e27d989b28d01",
      "text": "We will find arbitrary graph structure by interpreting strings as foreign keys. With that said, we now assert some limitations on the JSON we will read which make it more suitable for transmission between programs."
    },
    {
      "type": "paragraph",
      "id": "e3ea8c0f0d6d07fd",
      "text": "We take some inspiration from the [[LangSec]] movement."
    },
    {
      "type": "markdown",
      "id": "00849aeebbd9b690",
      "text": "# Structure"
    },
    {
      "type": "paragraph",
      "id": "b5c2dbce239e037f",
      "text": "JSON consists of nested Arrays, Objects and Scalars. We abbreviate these A, O and S where we might think of S as String but know it could also be Number, True, False and Null. If we expect an Array of Scalers we would write that using regular expression conventions as AS*"
    },
    {
      "type": "paragraph",
      "id": "6bd7328c96028cc3",
      "text": "Array of Scalars."
    },
    {
      "type": "code",
      "id": "4406520375e9adba",
      "text": "AS*"
    },
    {
      "type": "paragraph",
      "id": "fb2901d81897d467",
      "text": "Object of Scalars."
    },
    {
      "type": "code",
      "id": "d7ae3a48498cae61",
      "text": "OS*"
    },
    {
      "type": "paragraph",
      "id": "8929f6ea8d1b7a07",
      "text": "Array of Objects of Scalars."
    },
    {
      "type": "code",
      "id": "58efb1cd53cada6c",
      "text": "A(OS*)*"
    },
    {
      "type": "paragraph",
      "id": "9799ab057d44eafc",
      "text": "Object of Scalars and Arrays of Scalars."
    },
    {
      "type": "code",
      "id": "0cea5b0c5bb8e2f0",
      "text": "O(S*|AS*)*"
    },
    {
      "type": "paragraph",
      "id": "9d8a6a4b479a2131",
      "text": "Alternation in our regular descriptions implies that interpreting the json will require case analysis based on object field names or reflection on found element types."
    },
    {
      "type": "paragraph",
      "id": "2e80c4f4cdd24e91",
      "text": "Alternation also enables variable depth in the json tree structure but not unlimited nesting."
    },
    {
      "type": "paragraph",
      "id": "624751e0562b1d09",
      "text": "Array of (Scalars or Array of (Scalars or Array of Scalars))"
    },
    {
      "type": "code",
      "id": "935a46bd57ef89f2",
      "text": "A(S*|A(S*|AS*)*)*"
    },
    {
      "type": "paragraph",
      "id": "9163d112a2d65adb",
      "text": "We consider this limitation on nesting a feature of this approach. It is what makes this notation regular instead of only context-free."
    },
    {
      "type": "markdown",
      "id": "ca25e4fce3a9c6fc",
      "text": "# Limits"
    },
    {
      "type": "paragraph",
      "id": "8ea0f2b9deb04c13",
      "text": "Imagine running this simple json parsing script overnight."
    },
    {
      "type": "code",
      "id": "0b7f7a9fa192cf9c",
      "text": "while true\ndo echo '[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[['\ndone | jq ."
    },
    {
      "type": "paragraph",
      "id": "d4d35644a346d728",
      "text": "A structure validator could quickly reject this input before the second echo got to run."
    },
    {
      "type": "paragraph",
      "id": "20f43a5aec840b2a",
      "text": "We similarly should limit the number of elements in an array, the number of fields in an object, the number of characters in a string, and the number of digits in a number."
    },
    {
      "type": "paragraph",
      "id": "bcfb5c7c5ebd35da",
      "text": "Imagine parsing this unlimited string."
    },
    {
      "type": "code",
      "id": "2afdc76c9c33dde1",
      "text": "(\n  echo '[\"'\n  while true\n  do echo 'xxxxxxxxxxxxxxxxxx'\n  done\n) | jq ."
    },
    {
      "type": "paragraph",
      "id": "f2e0dbcec552f6f6",
      "text": "Experiments show that browsers handle one or two megabytes at a time. Wiki caps individual posts at five but this is easily exceed by assembling multiple images on a single page. [http://josh.zeigler.us/technology/web-development/how-big-is-too-big-for-json/ post]"
    },
    {
      "type": "paragraph",
      "id": "1b6bcbfedc528dd6",
      "text": "Choosing even numbers, I might suggest 64 unicode characters for field names and 128k for strings. A more complete specification might enumerate permissible field names and define their own limits for strings in each context."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Regular JSON",
        "story": []
      },
      "date": 1490637049203
    },
    {
      "item": {
        "type": "factory",
        "id": "c02e27d989b28d01"
      },
      "id": "c02e27d989b28d01",
      "type": "add",
      "date": 1490637054070
    },
    {
      "type": "edit",
      "id": "c02e27d989b28d01",
      "item": {
        "type": "paragraph",
        "id": "c02e27d989b28d01",
        "text": "We will find arbitrary graph structure by interpreting strings as foreign keys. With that said, we now assert some limitations on the JSON we will read which make it more suitable for transmission between programs."
      },
      "date": 1490637240874
    },
    {
      "type": "add",
      "id": "e3ea8c0f0d6d07fd",
      "item": {
        "type": "paragraph",
        "id": "e3ea8c0f0d6d07fd",
        "text": "We take some inspiration from the LangSec movement."
      },
      "after": "c02e27d989b28d01",
      "date": 1490637262658
    },
    {
      "type": "edit",
      "id": "e3ea8c0f0d6d07fd",
      "item": {
        "type": "paragraph",
        "id": "e3ea8c0f0d6d07fd",
        "text": "We take some inspiration from the [[LangSec]] movement."
      },
      "date": 1490637278043
    },
    {
      "item": {
        "type": "factory",
        "id": "b5c2dbce239e037f"
      },
      "id": "b5c2dbce239e037f",
      "type": "add",
      "after": "e3ea8c0f0d6d07fd",
      "date": 1490637307852
    },
    {
      "type": "edit",
      "id": "b5c2dbce239e037f",
      "item": {
        "type": "paragraph",
        "id": "b5c2dbce239e037f",
        "text": "JSON consists of nested Arrays, Objects and Scalars. We abbreviate these A, O and S where we might think of S as String but know it could also be Number, True, False and Null."
      },
      "date": 1490637479024
    },
    {
      "type": "edit",
      "id": "b5c2dbce239e037f",
      "item": {
        "type": "paragraph",
        "id": "b5c2dbce239e037f",
        "text": "JSON consists of nested Arrays, Objects and Scalars. We abbreviate these A, O and S where we might think of S as String but know it could also be Number, True, False and Null. If we expect an Array of Scalers we would write that using regular expression conventions as AS*."
      },
      "date": 1490637568194
    },
    {
      "type": "edit",
      "id": "b5c2dbce239e037f",
      "item": {
        "type": "paragraph",
        "id": "b5c2dbce239e037f",
        "text": "JSON consists of nested Arrays, Objects and Scalars. We abbreviate these A, O and S where we might think of S as String but know it could also be Number, True, False and Null. If we expect an Array of Scalers we would write that using regular expression conventions as AS*"
      },
      "date": 1490637580578
    },
    {
      "type": "add",
      "id": "6bd7328c96028cc3",
      "item": {
        "type": "paragraph",
        "id": "6bd7328c96028cc3",
        "text": "Array of Scalars."
      },
      "after": "b5c2dbce239e037f",
      "date": 1490637633132
    },
    {
      "item": {
        "type": "factory",
        "id": "4406520375e9adba"
      },
      "id": "4406520375e9adba",
      "type": "add",
      "after": "91869dd3e4b4d39f",
      "date": 1490637637981
    },
    {
      "type": "edit",
      "id": "4406520375e9adba",
      "item": {
        "type": "code",
        "id": "4406520375e9adba",
        "text": "AS*"
      },
      "date": 1490637650901
    },
    {
      "item": {
        "type": "factory",
        "id": "fb2901d81897d467"
      },
      "id": "fb2901d81897d467",
      "type": "add",
      "after": "4406520375e9adba",
      "date": 1490637662939
    },
    {
      "type": "edit",
      "id": "fb2901d81897d467",
      "item": {
        "type": "paragraph",
        "id": "fb2901d81897d467",
        "text": "Object of Scalars."
      },
      "date": 1490637781671
    },
    {
      "item": {
        "type": "factory",
        "id": "d7ae3a48498cae61"
      },
      "id": "d7ae3a48498cae61",
      "type": "add",
      "after": "fb2901d81897d467",
      "date": 1490637784622
    },
    {
      "type": "edit",
      "id": "d7ae3a48498cae61",
      "item": {
        "type": "code",
        "id": "d7ae3a48498cae61",
        "text": "OS*"
      },
      "date": 1490637802290
    },
    {
      "item": {
        "type": "factory",
        "id": "58efb1cd53cada6c"
      },
      "id": "58efb1cd53cada6c",
      "type": "add",
      "after": "d7ae3a48498cae61",
      "date": 1490637804747
    },
    {
      "type": "edit",
      "id": "58efb1cd53cada6c",
      "item": {
        "type": "code",
        "id": "58efb1cd53cada6c",
        "text": "A(OS*)*"
      },
      "date": 1490637832898
    },
    {
      "item": {
        "type": "factory",
        "id": "8929f6ea8d1b7a07"
      },
      "id": "8929f6ea8d1b7a07",
      "type": "add",
      "after": "58efb1cd53cada6c",
      "date": 1490637838796
    },
    {
      "type": "edit",
      "id": "8929f6ea8d1b7a07",
      "item": {
        "type": "paragraph",
        "id": "8929f6ea8d1b7a07",
        "text": "Array of Objects of Scalars."
      },
      "date": 1490637854041
    },
    {
      "type": "move",
      "order": [
        "c02e27d989b28d01",
        "e3ea8c0f0d6d07fd",
        "b5c2dbce239e037f",
        "6bd7328c96028cc3",
        "4406520375e9adba",
        "fb2901d81897d467",
        "d7ae3a48498cae61",
        "8929f6ea8d1b7a07",
        "58efb1cd53cada6c"
      ],
      "id": "8929f6ea8d1b7a07",
      "date": 1490637857052
    },
    {
      "item": {
        "type": "factory",
        "id": "9799ab057d44eafc"
      },
      "id": "9799ab057d44eafc",
      "type": "add",
      "after": "58efb1cd53cada6c",
      "date": 1490638021487
    },
    {
      "type": "edit",
      "id": "9799ab057d44eafc",
      "item": {
        "type": "paragraph",
        "id": "9799ab057d44eafc",
        "text": "Object of Scalars and Arrays of Scalars."
      },
      "date": 1490638048567
    },
    {
      "item": {
        "type": "factory",
        "id": "0cea5b0c5bb8e2f0"
      },
      "id": "0cea5b0c5bb8e2f0",
      "type": "add",
      "after": "9799ab057d44eafc",
      "date": 1490638050630
    },
    {
      "type": "edit",
      "id": "0cea5b0c5bb8e2f0",
      "item": {
        "type": "code",
        "id": "0cea5b0c5bb8e2f0",
        "text": "O(S*|AS*)*"
      },
      "date": 1490638121665
    },
    {
      "item": {
        "type": "factory",
        "id": "9d8a6a4b479a2131"
      },
      "id": "9d8a6a4b479a2131",
      "type": "add",
      "after": "0cea5b0c5bb8e2f0",
      "date": 1490642367361
    },
    {
      "type": "edit",
      "id": "9d8a6a4b479a2131",
      "item": {
        "type": "paragraph",
        "id": "9d8a6a4b479a2131",
        "text": "Alternation in our regular descriptions implies that interpreting the json will require case analysis based on object field names or reflection on found element types."
      },
      "date": 1490642601300
    },
    {
      "type": "add",
      "id": "2e80c4f4cdd24e91",
      "item": {
        "type": "paragraph",
        "id": "2e80c4f4cdd24e91",
        "text": "Alternation also enables variable depth in the json tree structure but not unlimited nesting."
      },
      "after": "9d8a6a4b479a2131",
      "date": 1490642723775
    },
    {
      "item": {
        "type": "factory",
        "id": "935a46bd57ef89f2"
      },
      "id": "935a46bd57ef89f2",
      "type": "add",
      "after": "2e80c4f4cdd24e91",
      "date": 1490642804579
    },
    {
      "type": "edit",
      "id": "935a46bd57ef89f2",
      "item": {
        "type": "code",
        "id": "935a46bd57ef89f2",
        "text": "A(S*|A(S*|AS*))"
      },
      "date": 1490642913518
    },
    {
      "type": "edit",
      "id": "935a46bd57ef89f2",
      "item": {
        "type": "code",
        "id": "935a46bd57ef89f2",
        "text": "A(S*|A(S*|AS*)*)*"
      },
      "date": 1490643074032
    },
    {
      "type": "add",
      "id": "624751e0562b1d09",
      "item": {
        "type": "paragraph",
        "id": "624751e0562b1d09",
        "text": "Array of (Scalars or Array of (Scalars or Array of Scalars))"
      },
      "after": "2e80c4f4cdd24e91",
      "date": 1490643160489
    },
    {
      "item": {
        "type": "factory",
        "id": "9163d112a2d65adb"
      },
      "id": "9163d112a2d65adb",
      "type": "add",
      "after": "935a46bd57ef89f2",
      "date": 1490644451903
    },
    {
      "type": "edit",
      "id": "9163d112a2d65adb",
      "item": {
        "type": "paragraph",
        "id": "9163d112a2d65adb",
        "text": "We consider this limitation on nesting a feature of this approach. It is what makes this notation regular instead of only context-free."
      },
      "date": 1490644561662
    },
    {
      "type": "add",
      "id": "8ea0f2b9deb04c13",
      "item": {
        "type": "paragraph",
        "id": "8ea0f2b9deb04c13",
        "text": "Imagine running this simple json parsing script overnight."
      },
      "after": "9163d112a2d65adb",
      "date": 1490644592375
    },
    {
      "item": {
        "type": "factory",
        "id": "0b7f7a9fa192cf9c"
      },
      "id": "0b7f7a9fa192cf9c",
      "type": "add",
      "after": "8ea0f2b9deb04c13",
      "date": 1490644598444
    },
    {
      "type": "edit",
      "id": "0b7f7a9fa192cf9c",
      "item": {
        "type": "code",
        "id": "0b7f7a9fa192cf9c",
        "text": "while true\ndo echo '[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[['\ndone | jq ."
      },
      "date": 1490644650673
    },
    {
      "type": "add",
      "id": "ca25e4fce3a9c6fc",
      "item": {
        "type": "paragraph",
        "id": "ca25e4fce3a9c6fc",
        "text": "# Limits"
      },
      "after": "9163d112a2d65adb",
      "date": 1490812569684
    },
    {
      "type": "edit",
      "id": "ca25e4fce3a9c6fc",
      "item": {
        "type": "markdown",
        "id": "ca25e4fce3a9c6fc",
        "text": "# Limits"
      },
      "date": 1490812574189
    },
    {
      "type": "add",
      "id": "00849aeebbd9b690",
      "item": {
        "type": "paragraph",
        "id": "00849aeebbd9b690",
        "text": "# Structure"
      },
      "after": "e3ea8c0f0d6d07fd",
      "date": 1490812590268
    },
    {
      "type": "edit",
      "id": "00849aeebbd9b690",
      "item": {
        "type": "markdown",
        "id": "00849aeebbd9b690",
        "text": "# Structure"
      },
      "date": 1490812593160
    },
    {
      "item": {
        "type": "factory",
        "id": "d4d35644a346d728"
      },
      "id": "d4d35644a346d728",
      "type": "add",
      "after": "0b7f7a9fa192cf9c",
      "date": 1490812661850
    },
    {
      "type": "edit",
      "id": "d4d35644a346d728",
      "item": {
        "type": "paragraph",
        "id": "d4d35644a346d728",
        "text": "A structure validator could quickly reject this input before the second echo got to run."
      },
      "date": 1490812764616
    },
    {
      "type": "add",
      "id": "20f43a5aec840b2a",
      "item": {
        "type": "paragraph",
        "id": "20f43a5aec840b2a",
        "text": "We similarly should limit the number of elements in an array, the number of fields in an object, the number of characters in a string, and the number of digits in a number."
      },
      "after": "d4d35644a346d728",
      "date": 1490812889757
    },
    {
      "type": "add",
      "id": "f2e0dbcec552f6f6",
      "item": {
        "type": "paragraph",
        "id": "f2e0dbcec552f6f6",
        "text": "Experiments show that browsers handle one or two megabytes at a time. Wiki caps individual posts at five but this is easily exceed by assembling multiple images on a single page."
      },
      "after": "20f43a5aec840b2a",
      "date": 1490813683383
    },
    {
      "type": "add",
      "id": "1b6bcbfedc528dd6",
      "item": {
        "type": "paragraph",
        "id": "1b6bcbfedc528dd6",
        "text": "Choosing even numbers I might suggest 64 unicode characters for field names and 128k for strings. A more complete specification might enumerate permissible field names and define their own limits for strings in each context."
      },
      "after": "f2e0dbcec552f6f6",
      "date": 1490813920308
    },
    {
      "type": "edit",
      "id": "1b6bcbfedc528dd6",
      "item": {
        "type": "paragraph",
        "id": "1b6bcbfedc528dd6",
        "text": "Choosing even numbers, I might suggest 64 unicode characters for field names and 128k for strings. A more complete specification might enumerate permissible field names and define their own limits for strings in each context."
      },
      "date": 1490813928820
    },
    {
      "item": {
        "type": "factory",
        "id": "2afdc76c9c33dde1"
      },
      "id": "2afdc76c9c33dde1",
      "type": "add",
      "after": "1b6bcbfedc528dd6",
      "date": 1490813965590
    },
    {
      "type": "edit",
      "id": "2afdc76c9c33dde1",
      "item": {
        "type": "code",
        "id": "2afdc76c9c33dde1",
        "text": "(\n  echo '[\"\n  while true\ndo echo '[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[['\ndone | jq ."
      },
      "date": 1490814018248
    },
    {
      "type": "edit",
      "id": "2afdc76c9c33dde1",
      "item": {
        "type": "code",
        "id": "2afdc76c9c33dde1",
        "text": "(\n  echo '[\"\n  while true\n  do echo 'xxxxxxxxxxxxxxxxxx'\ndone | jq ."
      },
      "date": 1490814055536
    },
    {
      "type": "edit",
      "id": "2afdc76c9c33dde1",
      "item": {
        "type": "code",
        "id": "2afdc76c9c33dde1",
        "text": "(\n  echo '[\"\n  while true\n  do echo 'xxxxxxxxxxxxxxxxxx'\n  done\n) | jq ."
      },
      "date": 1490814075920
    },
    {
      "type": "edit",
      "id": "2afdc76c9c33dde1",
      "item": {
        "type": "code",
        "id": "2afdc76c9c33dde1",
        "text": "(\n  echo '[\"'\n  while true\n  do echo 'xxxxxxxxxxxxxxxxxx'\n  done\n) | jq ."
      },
      "date": 1490814109106
    },
    {
      "type": "move",
      "order": [
        "c02e27d989b28d01",
        "e3ea8c0f0d6d07fd",
        "00849aeebbd9b690",
        "b5c2dbce239e037f",
        "6bd7328c96028cc3",
        "4406520375e9adba",
        "fb2901d81897d467",
        "d7ae3a48498cae61",
        "8929f6ea8d1b7a07",
        "58efb1cd53cada6c",
        "9799ab057d44eafc",
        "0cea5b0c5bb8e2f0",
        "9d8a6a4b479a2131",
        "2e80c4f4cdd24e91",
        "624751e0562b1d09",
        "935a46bd57ef89f2",
        "9163d112a2d65adb",
        "ca25e4fce3a9c6fc",
        "8ea0f2b9deb04c13",
        "0b7f7a9fa192cf9c",
        "d4d35644a346d728",
        "20f43a5aec840b2a",
        "2afdc76c9c33dde1",
        "f2e0dbcec552f6f6",
        "1b6bcbfedc528dd6"
      ],
      "id": "2afdc76c9c33dde1",
      "date": 1490814178452
    },
    {
      "type": "add",
      "id": "bcfb5c7c5ebd35da",
      "item": {
        "type": "paragraph",
        "id": "bcfb5c7c5ebd35da",
        "text": "Imagine parsing this unlimited string."
      },
      "after": "20f43a5aec840b2a",
      "date": 1490814220507
    },
    {
      "type": "edit",
      "id": "f2e0dbcec552f6f6",
      "item": {
        "type": "paragraph",
        "id": "f2e0dbcec552f6f6",
        "text": "Experiments show that browsers handle one or two megabytes at a time. Wiki caps individual posts at five but this is easily exceed by assembling multiple images on a single page. [http://josh.zeigler.us/technology/web-development/how-big-is-too-big-for-json/ post]"
      },
      "date": 1490825746554
    },
    {
      "type": "fork",
      "site": "context.asia.wiki.org",
      "date": 1709622134618
    }
  ]
}