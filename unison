{
  "title": "Unison",
  "story": [
    {
      "type": "paragraph",
      "id": "6857662eb62911de",
      "text": "Unison’s core idea is that code is immutable and identified by its content. This lets us reimagine many aspects of how a programming language works. We simplify codebase management — Unison has no builds, no dependency conflicts, and renaming things is trivial. The same core idea forms the basis for a runtime that robustly supports dynamic code deployment, allowing a single Unison program to describe entire elastic distributed systems. [https://www.unisonweb.org/ page] and [https://github.com/unisonweb/unisonweb-org#local-development-environment-setup Local Development Environment Setup]."
    },
    {
      "type": "markdown",
      "id": "f3f5983c8a3e2a79",
      "text": "***"
    },
    {
      "type": "reference",
      "id": "f451b8b074c5dd6a",
      "site": "found.ward.bay.wiki.org",
      "slug": "unison",
      "title": "UniSon",
      "text": "This high-energy, multimedia, music-filled theatrical experience explores the poetry of master playwright August Wilson in a one-of-a-kind production by UNIVERSES, one of the nation’s leading ensembles. [https://www.universesonstage.com/Plays_Poetry_Process/in-unison/index.html universes]"
    },
    {
      "type": "paragraph",
      "id": "7c75dbfee7008143",
      "text": "[https://discord.com/channels/729445214812504107/729445215341117522/813665577310355487 Konrad Hinsen — 23.02.2021]\nI have been looking at content-addressing a lot over the last two years, coming from a perspective of reproducible computations in scientific research. The issue there is that you want to be sure which exact version of a complex, messy, and rapidly evolving codebase has actually been used to produce a specific result. And you also want equally precise and stable references to all input data.\n\nIn that context, I have also played a bit with [[Unison]]. It's a project worth following if only because it explores new ideas. But I am not convinced that content-addressing at the level of the bare code structure, stripped of all names, is a direction I want to go. Names are important, they provide the link between code and the mental world of human languages. Something I'd like to play with (in the unlikely situation of finding time for it) is content-addressing at the AST level of a conventional language, retaining names but discarding formatting and comments. -- [[Konrad Hinsen]]"
    },
    {
      "type": "markdown",
      "id": "ab21a65586a01e3d",
      "text": "SysD — 26.02.2021\n@Konrad Hinsen In this direction this project is fascinating, following it for several years now.\nAims to be a better unison, or runtime environment well designed for semantic web.\nhttps://github.com/IDNI/TML \n\nSee [[Tau Meta-Language]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Unison",
        "story": []
      },
      "date": 1636034897158
    },
    {
      "item": {
        "type": "factory",
        "id": "f451b8b074c5dd6a"
      },
      "id": "f451b8b074c5dd6a",
      "type": "add",
      "date": 1636034898970
    },
    {
      "type": "edit",
      "id": "f451b8b074c5dd6a",
      "item": {
        "type": "reference",
        "id": "f451b8b074c5dd6a",
        "site": "found.ward.bay.wiki.org",
        "slug": "unison",
        "title": "UniSon",
        "text": "This high-energy, multimedia, music-filled theatrical experience explores the poetry of master playwright August Wilson in a one-of-a-kind production by UNIVERSES, one of the nation’s leading ensembles. [https://www.universesonstage.com/Plays_Poetry_Process/in-unison/index.html universes]"
      },
      "date": 1636034902151
    },
    {
      "item": {
        "type": "factory",
        "id": "6857662eb62911de"
      },
      "id": "6857662eb62911de",
      "type": "add",
      "after": "f451b8b074c5dd6a",
      "date": 1636034904331
    },
    {
      "id": "6857662eb62911de",
      "type": "move",
      "order": [
        "6857662eb62911de",
        "f451b8b074c5dd6a"
      ],
      "date": 1636034906030
    },
    {
      "type": "edit",
      "id": "6857662eb62911de",
      "item": {
        "type": "paragraph",
        "id": "6857662eb62911de",
        "text": "Unison’s core idea is that code is immutable and identified by its content. This lets us reimagine many aspects of how a programming language works. We simplify codebase management — Unison has no builds, no dependency conflicts, and renaming things is trivial. The same core idea forms the basis for a runtime that robustly supports dynamic code deployment, allowing a single Unison program to describe entire elastic distributed systems."
      },
      "date": 1636034918090
    },
    {
      "item": {
        "type": "factory",
        "id": "f3f5983c8a3e2a79"
      },
      "id": "f3f5983c8a3e2a79",
      "type": "add",
      "after": "f451b8b074c5dd6a",
      "date": 1636034920205
    },
    {
      "type": "edit",
      "id": "f3f5983c8a3e2a79",
      "item": {
        "type": "markdown",
        "id": "f3f5983c8a3e2a79",
        "text": "***"
      },
      "date": 1636034923458
    },
    {
      "id": "f3f5983c8a3e2a79",
      "type": "move",
      "order": [
        "6857662eb62911de",
        "f3f5983c8a3e2a79",
        "f451b8b074c5dd6a"
      ],
      "date": 1636034928495
    },
    {
      "type": "edit",
      "id": "6857662eb62911de",
      "item": {
        "type": "paragraph",
        "id": "6857662eb62911de",
        "text": "Unison’s core idea is that code is immutable and identified by its content. This lets us reimagine many aspects of how a programming language works. We simplify codebase management — Unison has no builds, no dependency conflicts, and renaming things is trivial. The same core idea forms the basis for a runtime that robustly supports dynamic code deployment, allowing a single Unison program to describe entire elastic distributed systems. [https://www.unisonweb.org/ page]"
      },
      "date": 1636034938746
    },
    {
      "type": "edit",
      "id": "6857662eb62911de",
      "item": {
        "type": "paragraph",
        "id": "6857662eb62911de",
        "text": "Unison’s core idea is that code is immutable and identified by its content. This lets us reimagine many aspects of how a programming language works. We simplify codebase management — Unison has no builds, no dependency conflicts, and renaming things is trivial. The same core idea forms the basis for a runtime that robustly supports dynamic code deployment, allowing a single Unison program to describe entire elastic distributed systems. [https://www.unisonweb.org/ page] and [https://github.com/unisonweb/unisonweb-org#local-development-environment-setup "
      },
      "date": 1636035027557
    },
    {
      "type": "edit",
      "id": "6857662eb62911de",
      "item": {
        "type": "paragraph",
        "id": "6857662eb62911de",
        "text": "Unison’s core idea is that code is immutable and identified by its content. This lets us reimagine many aspects of how a programming language works. We simplify codebase management — Unison has no builds, no dependency conflicts, and renaming things is trivial. The same core idea forms the basis for a runtime that robustly supports dynamic code deployment, allowing a single Unison program to describe entire elastic distributed systems. [https://www.unisonweb.org/ page] and [https://github.com/unisonweb/unisonweb-org#local-development-environment-setup Local Development Environment Setup]."
      },
      "date": 1636035036891
    },
    {
      "item": {
        "type": "factory",
        "id": "334a0619d0c3bbfc"
      },
      "id": "334a0619d0c3bbfc",
      "type": "add",
      "after": "f451b8b074c5dd6a",
      "date": 1636107451729
    },
    {
      "type": "remove",
      "id": "334a0619d0c3bbfc",
      "date": 1636107455758
    },
    {
      "item": {
        "type": "factory",
        "id": "7c75dbfee7008143"
      },
      "id": "7c75dbfee7008143",
      "type": "add",
      "after": "f451b8b074c5dd6a",
      "date": 1636107463948
    },
    {
      "type": "edit",
      "id": "7c75dbfee7008143",
      "item": {
        "type": "paragraph",
        "id": "7c75dbfee7008143",
        "text": "Konrad Hinsen — 23.02.2021\nI have been looking at content-addressing a lot over the last two years, coming from a perspective of reproducible computations in scientific research. The issue there is that you want to be sure which exact version of a complex, messy, and rapidly evolving codebase has actually been used to produce a specific result. And you also want equally precise and stable references to all input data.\n\nIn that context, I have also played a bit with Unison. It's a project worth following if only because it explores new ideas. But I am not convinced that content-addressing at the level of the bare code structure, stripped of all names, is a direction I want to go. Names are important, they provide the link between code and the mental world of human languages. Something I'd like to play with (in the unlikely situation of finding time for it) is content-addressing at the AST level of a conventional language, retaining names but discarding formatting and comments. -- [[Konrad Hinsen]]"
      },
      "date": 1636107480055
    },
    {
      "type": "edit",
      "id": "7c75dbfee7008143",
      "item": {
        "type": "paragraph",
        "id": "7c75dbfee7008143",
        "text": "[https://discord.com/channels/729445214812504107/729445215341117522/813665577310355487 Konrad Hinsen — 23.02.2021]\nI have been looking at content-addressing a lot over the last two years, coming from a perspective of reproducible computations in scientific research. The issue there is that you want to be sure which exact version of a complex, messy, and rapidly evolving codebase has actually been used to produce a specific result. And you also want equally precise and stable references to all input data.\n\nIn that context, I have also played a bit with Unison. It's a project worth following if only because it explores new ideas. But I am not convinced that content-addressing at the level of the bare code structure, stripped of all names, is a direction I want to go. Names are important, they provide the link between code and the mental world of human languages. Something I'd like to play with (in the unlikely situation of finding time for it) is content-addressing at the AST level of a conventional language, retaining names but discarding formatting and comments. -- [[Konrad Hinsen]]"
      },
      "date": 1636107509500
    },
    {
      "type": "edit",
      "id": "7c75dbfee7008143",
      "item": {
        "type": "paragraph",
        "id": "7c75dbfee7008143",
        "text": "[https://discord.com/channels/729445214812504107/729445215341117522/813665577310355487 Konrad Hinsen — 23.02.2021]\nI have been looking at content-addressing a lot over the last two years, coming from a perspective of reproducible computations in scientific research. The issue there is that you want to be sure which exact version of a complex, messy, and rapidly evolving codebase has actually been used to produce a specific result. And you also want equally precise and stable references to all input data.\n\nIn that context, I have also played a bit with [[Unison]]. It's a project worth following if only because it explores new ideas. But I am not convinced that content-addressing at the level of the bare code structure, stripped of all names, is a direction I want to go. Names are important, they provide the link between code and the mental world of human languages. Something I'd like to play with (in the unlikely situation of finding time for it) is content-addressing at the AST level of a conventional language, retaining names but discarding formatting and comments. -- [[Konrad Hinsen]]"
      },
      "date": 1636107549005
    },
    {
      "item": {
        "type": "factory",
        "id": "e83880fcdf0e5852"
      },
      "id": "e83880fcdf0e5852",
      "type": "add",
      "after": "7c75dbfee7008143",
      "date": 1636107792092
    },
    {
      "type": "edit",
      "id": "e83880fcdf0e5852",
      "item": {
        "type": "paragraph",
        "id": "e83880fcdf0e5852",
        "text": "SysD — 26.02.2021\n@Konrad Hinsen In this direction this project is fascinating, following it for several years now.\nAims to be a better unison, or runtime environment well designed for semantic web.\nhttps://github.com/IDNI/TML \n"
      },
      "date": 1636107796161
    },
    {
      "type": "edit",
      "id": "e83880fcdf0e5852",
      "item": {
        "type": "paragraph",
        "id": "e83880fcdf0e5852",
        "text": "SysD — 26.02.2021\n@Konrad Hinsen In this direction this project is fascinating, following it for several years now.\nAims to be a better unison, or runtime environment well designed for semantic web.\n[https://github.com/IDNI/TML]\n"
      },
      "date": 1636107813269
    },
    {
      "item": {
        "type": "factory",
        "id": "ab21a65586a01e3d"
      },
      "id": "ab21a65586a01e3d",
      "type": "add",
      "after": "e83880fcdf0e5852",
      "date": 1636107814797
    },
    {
      "type": "edit",
      "id": "ab21a65586a01e3d",
      "item": {
        "type": "markdown",
        "id": "ab21a65586a01e3d",
        "text": "SysD — 26.02.2021\n@Konrad Hinsen In this direction this project is fascinating, following it for several years now.\nAims to be a better unison, or runtime environment well designed for semantic web.\nhttps://github.com/IDNI/TML \n"
      },
      "date": 1636107819210
    },
    {
      "type": "remove",
      "id": "e83880fcdf0e5852",
      "date": 1636107820955
    },
    {
      "type": "edit",
      "id": "ab21a65586a01e3d",
      "item": {
        "type": "markdown",
        "id": "ab21a65586a01e3d",
        "text": "SysD — 26.02.2021\n@Konrad Hinsen In this direction this project is fascinating, following it for several years now.\nAims to be a better unison, or runtime environment well designed for semantic web.\nhttps://github.com/IDNI/TML \n\nSee [[Tau Meta-Language]]"
      },
      "date": 1636107985081
    }
  ]
}