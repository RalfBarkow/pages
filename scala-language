{
  "title": "Scala Language",
  "story": [
    {
      "type": "html",
      "text": "Designed by [[Martin Odersky]], Scala is a modern [[Multi Paradigm Programming Language]] designed to express common programming patterns in a concise, elegant, and [[Type Safe]] way. It smoothly integrates features of [[Object Oriented Programming]] and [[Functional Programming]] languages.",
      "id": "125b3f816baddfd9a9269879fe37a40c"
    },
    {
      "type": "html",
      "text": " [http://scala-lang.org/ scala-lang.org]",
      "id": "71e43d05f4970fb80d898aaff9413816"
    },
    {
      "type": "html",
      "text": " [http://www.artima.com/weblogs/viewpost.jsp?thread=163733 www.artima.com] - \"A Brief History of Scala\" by Odersky",
      "id": "c21da025cf2e3b7a9f88b7bdf9a39a55"
    },
    {
      "type": "html",
      "text": " [http://www.artima.com/scalazine/articles/steps.html www.artima.com] - \"First Steps to Scala\"",
      "id": "ee29ee2637354dec6f701d4b72512b45"
    },
    {
      "type": "html",
      "text": " [http://www.artima.com/shop/forsale www.artima.com] - \"Programming in Scala\" - the book -  Pre-print PDF available.",
      "id": "c608f9153c537fc75335f62d35b2a876"
    },
    {
      "type": "html",
      "text": "\nMonads and Arrows have been implemented in [[Scala Language]] - see [http://lucdup.blogspot.com/2008/11/scala-monads-and-arrows.html lucdup.blogspot.com]",
      "id": "f27ae9a02af9fc6b09a80023769f384f"
    },
    {
      "type": "html",
      "text": "\nBook: [[Programming Scala]] <i>Wampler and Payne</i> ( [[Oreilly And Associates]] )",
      "id": "fe9baf9ba857650e781f1fde3c884e40"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "79c5adebffddc0b6c1c8ef70ae24b6e5"
    },
    {
      "type": "html",
      "text": "For a discussion on the nature of [[Scala Language]] see [http://enfranchisedmind.com/blog/posts/scala-not-functional/ enfranchisedmind.com]",
      "id": "87cf3d4e6a64c34b7176d8f997240478"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "79c5adebffddc0b6c1c8ef70ae24b6e5"
    },
    {
      "type": "html",
      "text": "20101003 [[Chris Garrod]] tried to put this into [[Hello World In Many Programming Languages]], but that page kept being reverted by computing-technology.derby.ac.uk. What a deterrent to editing! In my ten years at this wiki, this is the first time my changes been attacked by a robot. [[Recent Changes]] discourages me from participation here.",
      "id": "35db938ae8d9047fc237dac24897c62c"
    },
    {
      "type": "html",
      "text": "\n[[Hello World]] in Scala is discussed in several steps on this page: [http://www.artima.com/scalazine/articles/steps.html www.artima.com]",
      "id": "047672f355c1504a3d51a668ca5e4bdf"
    },
    {
      "type": "code",
      "text": " println(\"Hello, world, from a script!\")",
      "id": "ec808d6e6cea4a61ccaea39679be4696"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "79c5adebffddc0b6c1c8ef70ae24b6e5"
    },
    {
      "type": "html",
      "text": "[[Brid Jay]] (BridJ) is a way for [[Java Language]] and [[Scala Language]] to make calls to [[Cee Language]] or [[Cee Plus Plus]] code.",
      "id": "8cc88171a9afc249b24ed6ab89d5ad7b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "79c5adebffddc0b6c1c8ef70ae24b6e5"
    },
    {
      "type": "html",
      "text": "Scala, it seems to me, is about making Java cleaner, while adding some functional concepts in the process.  For example, instead of static methods on a class, you define a singleton object for the class.",
      "id": "b5ebc1306daf696576e131e895ecbbb4"
    },
    {
      "type": "code",
      "text": "    object HelloWorld {\n      def main : Unit = println(\"Hello, world!\") // This is a method, not a variable.  Variables are introduced with var.\n    }",
      "id": "330a60579177cc72de360e7a660e5468"
    },
    {
      "type": "html",
      "text": "\nThis is different from the static-method-on-class model because it makes an actual, first-class object.",
      "id": "cf71f39846536006bc2b888d72966650"
    },
    {
      "type": "html",
      "text": "class [[My List]][+T](first :<br>T, rest : [[My List]][T]) {// Constructors look like ordinary closures.  Very clean!  Even C++ doesn't have initialization this clean!",
      "id": "789ee20c2b0162125fb021b5e9ddabbd"
    },
    {
      "type": "html",
      "text": "//         ^---------- Note:<br>type variance of T is covariant.",
      "id": "4602679390223ad8bf39a87f583c4b21"
    },
    {
      "type": "html",
      "text": "def foreach(op :<br>T => Unit) : Unit = { // Higher-order foreach function.",
      "id": "04e082f8851089d2711d528d2fbbbf73"
    },
    {
      "type": "code",
      "text": "                                      // Just like HaskelLanguage''''''s a -> ().  Foreach's type in Haskel would be written as ml a -> (a -> ()) -> ().\n        op(first)\n        rest.foreach(op)\n      }\n    }\n    // The above is not actually the important part, otherwise I would have introduced a lot more features there.\n    object MyNil extends MyList[Nothing] { // Nothing is the BottomType.\n      override def foreach(op : Any => Unit) = () // Do nothing at last list instance.\n                                                  // (Oh, Any is the TopType.)\n    }\n    /* Roughly equivalent to:\n    val MyNil = new MyList[Nothing] {\n      override def foreach(op : Any => Unit) = ()\n    }\n    However, you can declare objects which are also classes, to get static members.\n    Also, you can make those objects-of-classes functor objects.\n    This means you can use the factory pattern without actually appearing to use it!\n    */\n    MyList(1, MyList(2, MyList(3, Nil))) foreach print // Demonstration of Scala's flexible syntax: infix methods.\n                                                       // Operators like +, -, *, and / are actually parsed as infix methods.\n                                                       // Oh, and functions are first-class.",
      "id": "bb99f6a2233c3e0a73c11f2ad5049721"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "79c5adebffddc0b6c1c8ef70ae24b6e5"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]] [[Category Functional Programming]] [[Category Multiparadigm]]",
      "id": "eb0314309d7b273928444006c4a09bb4"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ScalaLanguage c2.com]",
      "id": "89cb78fc405b9d9acd2f61619bdafcfb"
    }
  ],
  "journal": [
    {
      "date": 1289176703000,
      "id": "a11c4f3c50e6ee86382b51c29ce25ae4",
      "type": "create",
      "item": {
        "title": "Scala Language",
        "story": [
          {
            "type": "html",
            "text": "Designed by [[Martin Odersky]], Scala is a modern [[Multi Paradigm Programming Language]] designed to express common programming patterns in a concise, elegant, and [[Type Safe]] way. It smoothly integrates features of [[Object Oriented Programming]] and [[Functional Programming]] languages.",
            "id": "125b3f816baddfd9a9269879fe37a40c"
          },
          {
            "type": "html",
            "text": " [http://scala-lang.org/ scala-lang.org]",
            "id": "71e43d05f4970fb80d898aaff9413816"
          },
          {
            "type": "html",
            "text": " [http://www.artima.com/weblogs/viewpost.jsp?thread=163733 www.artima.com] - \"A Brief History of Scala\" by Odersky",
            "id": "c21da025cf2e3b7a9f88b7bdf9a39a55"
          },
          {
            "type": "html",
            "text": " [http://www.artima.com/scalazine/articles/steps.html www.artima.com] - \"First Steps to Scala\"",
            "id": "ee29ee2637354dec6f701d4b72512b45"
          },
          {
            "type": "html",
            "text": " [http://www.artima.com/shop/forsale www.artima.com] - \"Programming in Scala\" - the book -  Pre-print PDF available.",
            "id": "c608f9153c537fc75335f62d35b2a876"
          },
          {
            "type": "html",
            "text": "\nMonads and Arrows have been implemented in [[Scala Language]] - see [http://lucdup.blogspot.com/2008/11/scala-monads-and-arrows.html lucdup.blogspot.com]",
            "id": "f27ae9a02af9fc6b09a80023769f384f"
          },
          {
            "type": "html",
            "text": "\nBook: [[Programming Scala]] <i>Wampler and Payne</i> ( [[Oreilly And Associates]] )",
            "id": "fe9baf9ba857650e781f1fde3c884e40"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "79c5adebffddc0b6c1c8ef70ae24b6e5"
          },
          {
            "type": "html",
            "text": "For a discussion on the nature of [[Scala Language]] see [http://enfranchisedmind.com/blog/posts/scala-not-functional/ enfranchisedmind.com]",
            "id": "87cf3d4e6a64c34b7176d8f997240478"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "79c5adebffddc0b6c1c8ef70ae24b6e5"
          },
          {
            "type": "html",
            "text": "20101003 [[Chris Garrod]] tried to put this into [[Hello World In Many Programming Languages]], but that page kept being reverted by computing-technology.derby.ac.uk. What a deterrent to editing! In my ten years at this wiki, this is the first time my changes been attacked by a robot. [[Recent Changes]] discourages me from participation here.",
            "id": "35db938ae8d9047fc237dac24897c62c"
          },
          {
            "type": "html",
            "text": "\n[[Hello World]] in Scala is discussed in several steps on this page: [http://www.artima.com/scalazine/articles/steps.html www.artima.com]",
            "id": "047672f355c1504a3d51a668ca5e4bdf"
          },
          {
            "type": "code",
            "text": " println(\"Hello, world, from a script!\")",
            "id": "ec808d6e6cea4a61ccaea39679be4696"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "79c5adebffddc0b6c1c8ef70ae24b6e5"
          },
          {
            "type": "html",
            "text": "[[Brid Jay]] (BridJ) is a way for [[Java Language]] and [[Scala Language]] to make calls to [[Cee Language]] or [[Cee Plus Plus]] code.",
            "id": "8cc88171a9afc249b24ed6ab89d5ad7b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "79c5adebffddc0b6c1c8ef70ae24b6e5"
          },
          {
            "type": "html",
            "text": "Scala, it seems to me, is about making Java cleaner, while adding some functional concepts in the process.  For example, instead of static methods on a class, you define a singleton object for the class.",
            "id": "b5ebc1306daf696576e131e895ecbbb4"
          },
          {
            "type": "code",
            "text": "    object HelloWorld {\n      def main : Unit = println(\"Hello, world!\") // This is a method, not a variable.  Variables are introduced with var.\n    }",
            "id": "330a60579177cc72de360e7a660e5468"
          },
          {
            "type": "html",
            "text": "\nThis is different from the static-method-on-class model because it makes an actual, first-class object.",
            "id": "cf71f39846536006bc2b888d72966650"
          },
          {
            "type": "html",
            "text": "class [[My List]][+T](first :<br>T, rest : [[My List]][T]) {// Constructors look like ordinary closures.  Very clean!  Even C++ doesn't have initialization this clean!",
            "id": "789ee20c2b0162125fb021b5e9ddabbd"
          },
          {
            "type": "html",
            "text": "//         ^---------- Note:<br>type variance of T is covariant.",
            "id": "4602679390223ad8bf39a87f583c4b21"
          },
          {
            "type": "html",
            "text": "def foreach(op :<br>T => Unit) : Unit = { // Higher-order foreach function.",
            "id": "04e082f8851089d2711d528d2fbbbf73"
          },
          {
            "type": "code",
            "text": "                                      // Just like HaskelLanguage''''''s a -> ().  Foreach's type in Haskel would be written as ml a -> (a -> ()) -> ().\n        op(first)\n        rest.foreach(op)\n      }\n    }\n    // The above is not actually the important part, otherwise I would have introduced a lot more features there.\n    object MyNil extends MyList[Nothing] { // Nothing is the BottomType.\n      override def foreach(op : Any => Unit) = () // Do nothing at last list instance.\n                                                  // (Oh, Any is the TopType.)\n    }\n    /* Roughly equivalent to:\n    val MyNil = new MyList[Nothing] {\n      override def foreach(op : Any => Unit) = ()\n    }\n    However, you can declare objects which are also classes, to get static members.\n    Also, you can make those objects-of-classes functor objects.\n    This means you can use the factory pattern without actually appearing to use it!\n    */\n    MyList(1, MyList(2, MyList(3, Nil))) foreach print // Demonstration of Scala's flexible syntax: infix methods.\n                                                       // Operators like +, -, *, and / are actually parsed as infix methods.\n                                                       // Oh, and functions are first-class.",
            "id": "bb99f6a2233c3e0a73c11f2ad5049721"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "79c5adebffddc0b6c1c8ef70ae24b6e5"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]] [[Category Functional Programming]] [[Category Multiparadigm]]",
            "id": "eb0314309d7b273928444006c4a09bb4"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ScalaLanguage c2.com]",
            "id": "89cb78fc405b9d9acd2f61619bdafcfb"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1651574287210
    }
  ]
}