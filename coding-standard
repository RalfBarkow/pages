{
  "title": "Coding Standard",
  "story": [
    {
      "type": "html",
      "text": "<b>The main decisions</b>",
      "id": "81c6012374951f343663ddd131c3a8de"
    },
    {
      "type": "html",
      "text": "\nHere are the main areas where people on a team often have different preferences and might need to agree on something. It's hard to argue that any one system has a huge advantage over any other system.  But consistency on some of these things has a big advantage over inconsistency: everyone on a team can read code easily and make parts of the system refer to other parts of the system easily.",
      "id": "0c75bda17337128d4a94c26070344e77"
    },
    {
      "type": "html",
      "text": "<i>1. Naming convention</i>",
      "id": "724923cef5551ebea019630d3ad9c5ba"
    },
    {
      "type": "html",
      "text": "\n[[Bumpy Case]] or underscores?",
      "id": "38aa1c157e1d01882bbd0055490b409f"
    },
    {
      "type": "code",
      "text": " dueDate ''or'' due_date",
      "id": "0f10bd7a98540a54d93070623edcd662"
    },
    {
      "type": "html",
      "text": "[[Bumpy Case]] has the advantage that D<b></b>ueDate is clearly a class while dueDate is clearly an instance. [[Bumpy Case]] also makes individual program statements a little shorter and less likely to wrap across multiple lines.",
      "id": "2467e374a1060f0660bc6815ce6237e3"
    },
    {
      "type": "html",
      "text": "Do we indicate the type of identifiers in how we choose their name?",
      "id": "d89208917e0b369cdcac3bc5167c4e24"
    },
    {
      "type": "html",
      "text": "\nA common system is:",
      "id": "75e04d3d9ef5f3ca372fe74e40caf6f1"
    },
    {
      "type": "code",
      "text": " CONSTANT, Class, instance, subroutine.",
      "id": "217d88f1ed4bc64f9f509e07bb3a3724"
    },
    {
      "type": "html",
      "text": "The name of a subroutine is usually clear from context since it's followed by parentheses. At the opposite end of the spectrum, [[Hungarian Notation]] embeds a lot more type information in a name.",
      "id": "fd6cd93c364b00fa8a16b572e08aee73"
    },
    {
      "type": "html",
      "text": "Any special way of indicating data members or private members?",
      "id": "e89d40dd573f8b3cff0b53ff30c37358"
    },
    {
      "type": "html",
      "text": "\nSome people use a prefix, like _ or m_:",
      "id": "c12a69f055796fcb892a9635760c7249"
    },
    {
      "type": "code",
      "text": " class P''''''honeNumber {\n private:\n    unsigned int m_areaCode;\n    unsigned int m_exchange;\n    unsigned int m_lastFourDigits;\n public:\n    P''''''honeNumber(string& phoneNumber);\n    C''''''allResult call();\n    ...\n };",
      "id": "d7c9ce41ff3d63948976ef1688c5fa2c"
    },
    {
      "type": "html",
      "text": "\nIn non-OO languages, where you have to fake classes, how do you create the fake namespace for a class?",
      "id": "6170dedb497f65ce513747e84b28f2ae"
    },
    {
      "type": "html",
      "text": "\nA common solution is to combine [[Bumpy Case]] and underscores, like this:",
      "id": "afb3262397944930a998976a7656f401"
    },
    {
      "type": "code",
      "text": " void M''''''boxParser_create();\n E''''''rrorCode M''''''boxParser_open(char *filename);\n M''''''ailHeaderField* M''''''boxParser_getHeaderFields();",
      "id": "b493ee0d25c241fa820200d31d5f37d6"
    },
    {
      "type": "html",
      "text": "\nDo you name an array after the singular or the plural of the kind of element it contains?",
      "id": "fb75dbdc2a167be4ff796a5c6ca87434"
    },
    {
      "type": "code",
      "text": " M''''''ailHeaderField field[]",
      "id": "50555f1c22db6a1119390c7363af2347"
    },
    {
      "type": "html",
      "text": "or:",
      "id": "638b7bcb871af80001c2b07b932ecea8"
    },
    {
      "type": "code",
      "text": " M''''''ailHeaderField fields[]",
      "id": "a2e538b6e74203b59a6dc05a0d92d94b"
    },
    {
      "type": "html",
      "text": "\nUsing the plural has the advantage that you can write code like this:",
      "id": "7ddcc638de9e129831ab386d8c8f45cd"
    },
    {
      "type": "code",
      "text": " for (int i = 0; i < numFields; i++) {\n    M''''''ailHeaderField *field = fields[i];\n    parse(field);\n    // etc.\n }",
      "id": "1e060f013336bfa565a638811205fba0"
    },
    {
      "type": "html",
      "text": "\nor in [[Python Language]]:",
      "id": "c5eb7fdf9d8587ee50fd014226c22999"
    },
    {
      "type": "code",
      "text": " for field in fields:\n    field.parse()",
      "id": "0edc8aa651b930e74975cdf83025707b"
    },
    {
      "type": "html",
      "text": "<i>2. Where do you put the braces?</i>",
      "id": "b6822e8ccd05e884453c2173d6167aa4"
    },
    {
      "type": "html",
      "text": "\nIn other words, like this: (Lisp- / Smalltalk-style)",
      "id": "ede217e65872515405f1b94daeb1504b"
    },
    {
      "type": "code",
      "text": " if (condition) {\n    doSomething(); }",
      "id": "b99e8032cb5f5c65f58278570a3c19af"
    },
    {
      "type": "html",
      "text": "or like this:",
      "id": "923199279c05fe3dea18d6530f934c8a"
    },
    {
      "type": "code",
      "text": " if (condition) {\n    doSomething();\n }",
      "id": "33429d88b716f69513941cc05a37d4c7"
    },
    {
      "type": "html",
      "text": "or like this:",
      "id": "923199279c05fe3dea18d6530f934c8a"
    },
    {
      "type": "code",
      "text": " if (condition)\n {\n    doSomething();\n }",
      "id": "6e3ac1218e90be291dd25ffedcc94f16"
    },
    {
      "type": "html",
      "text": "or like this:",
      "id": "923199279c05fe3dea18d6530f934c8a"
    },
    {
      "type": "code",
      "text": " if (condition)\n   {\n     doSomething();\n   }",
      "id": "2504f6097e4aa25bd90e8c016f769e14"
    },
    {
      "type": "html",
      "text": "or like this:",
      "id": "923199279c05fe3dea18d6530f934c8a"
    },
    {
      "type": "code",
      "text": " if (condition)\n    {\n    doSomething();\n    }",
      "id": "ba2841fb50a6fd2ec511928598a48f0e"
    },
    {
      "type": "html",
      "text": "or like this (actually spotted it somewhere, but don't remember):",
      "id": "dc622f96264ba41943e7aa03238cb624"
    },
    {
      "type": "code",
      "text": " if (condition) {\n     doSomething();\n     }",
      "id": "2a1390b88eb05635ceb57f0ed6df201c"
    },
    {
      "type": "html",
      "text": "\nSimilar questions need to be asked for any multiple-line construction with delimiters; for example, a function declaration with arguments that (for whatever reason) should be split over several lines:",
      "id": "086ceca9b86029bccdf224c1c6e8b4b4"
    },
    {
      "type": "code",
      "text": " def foo(spam,\n         eggs,\n         beans):",
      "id": "1ebd06f3ea02755cd7b449dc30392be2"
    },
    {
      "type": "html",
      "text": "or",
      "id": "75d21f37680dc0032817b93baaa1fb1e"
    },
    {
      "type": "code",
      "text": " def foo(spam,\n         eggs,\n         beans\n ):",
      "id": "29117c2dc0a9f396e4b8122ccab37e6d"
    },
    {
      "type": "html",
      "text": "or",
      "id": "75d21f37680dc0032817b93baaa1fb1e"
    },
    {
      "type": "code",
      "text": " def foo(spam,\n     eggs,\n     beans\n ):",
      "id": "99aa0f78f39a94570812bcd4b4efd1c7"
    },
    {
      "type": "html",
      "text": "or",
      "id": "75d21f37680dc0032817b93baaa1fb1e"
    },
    {
      "type": "code",
      "text": " def foo(\n     spam,\n     eggs,\n     beans):",
      "id": "f2abc8225e91acef0e6db98a046bec4e"
    },
    {
      "type": "html",
      "text": "or",
      "id": "75d21f37680dc0032817b93baaa1fb1e"
    },
    {
      "type": "code",
      "text": " def foo(\n     spam,\n     eggs,\n     beans\n ):",
      "id": "f9abc3de3fabfbb5b310c7bff53e0455"
    },
    {
      "type": "html",
      "text": "<i>3. Indentation</i>",
      "id": "05783e679c0817c7222b8cdc4d589cd1"
    },
    {
      "type": "html",
      "text": "\nIndentation of 2 columns or more than 4 columns tends to be hard to read. An advantage of 3-column indentation over 4-column is that while both are readable, 3-column indentation makes shorter lines that are less likely to go past 80 columns and wrap.",
      "id": "924f67732abf8be8f82be7b90ea16997"
    },
    {
      "type": "html",
      "text": "\nIn some languages, like [[Cascading Style Sheets]], 2 columns can actually be more readable.",
      "id": "8973010251944e46a928f820ed44f0ef"
    },
    {
      "type": "html",
      "text": "<i>4. Tabs</i>",
      "id": "f70d3f24b2c8f125adffe5fb6769bd57"
    },
    {
      "type": "html",
      "text": "\nDo you include tabs (ASCII 9) in your source files or not? Each tab represents one level of indentation.",
      "id": "221d93dcbce4b63491700c87d3e813c2"
    },
    {
      "type": "html",
      "text": "\nIf you include tabs in your source files, then everyone can set their editor to expand tabs to however many spaces they like.",
      "id": "1af4203e036df66d4e8e3955421db9d1"
    },
    {
      "type": "html",
      "text": "\nExcept not really, since people insert a different number of tabs to make things line up depending on the tab setting.",
      "id": "3abe4f62ff0960014137b488b15dab6e"
    },
    {
      "type": "html",
      "text": "\n[[Vi Editor]] and others can be set (\"set expandtab\") to automatically convert the tab keystroke into the appropriate number of spaces.  When indentations are stored as spaces, program code is readable in gdb, on a printer, in email, etc.  In those places, the tab character expands to 8 spaces, causing code with one tab per indentation to spread out so much that it's almost unreadable.",
      "id": "413a4c0f8f7d844753260aed02faf5b3"
    },
    {
      "type": "html",
      "text": "\n[[Python Language]] requires consistency of tabs and spaces, so it almost mandates the \"expandtab\" approach.",
      "id": "7bc2467300e4fbc7bb95d092de8572e2"
    },
    {
      "type": "html",
      "text": "<i>5. Type on same line as function definition?</i>",
      "id": "9b0b0b4273c204ff1e6bedd871dff95d"
    },
    {
      "type": "html",
      "text": "\nLike this:",
      "id": "93f27849e7e95bf07158f83a7d28be80"
    },
    {
      "type": "code",
      "text": " M''''''ailHeaderField*\n M''''''boxParser_getHeaderFields()\n {\n    . . .\n }",
      "id": "d51103e831943024d9b217b00b9717cf"
    },
    {
      "type": "html",
      "text": "or like this:",
      "id": "923199279c05fe3dea18d6530f934c8a"
    },
    {
      "type": "code",
      "text": " M''''''ailHeaderField* M''''''boxParser_getHeaderFields()\n {\n    . . .\n }",
      "id": "699c67b1010715ecdd53723881d1fecd"
    },
    {
      "type": "html",
      "text": "The first way has the advantage that tools (like ctags) can easily find the beginnings of functions, since the function name always occurs at the beginning of the line.",
      "id": "254d007c4c80b5c901011f38da012702"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "\nHas anyone else here ever tried to produce a [[Coding Standard]] document? The time and level of detail make this a difficult thing to accomplish, and when you are done, there is the issue of convincing people to actually follow it.  I am beginning to doubt that a [[Coding Standard]] provides more value that it costs. Would anyone care to describe some first hand experience in the development and use of [[Coding Standard]]s?  -- [[Wayne Mack]]",
      "id": "912afcfd9f56fd3270edfe087818a5c6"
    },
    {
      "type": "html",
      "text": "\nAn easy way to do it is on a wiki, gradually, illustrated by simple examples, not in some huge session where everyone argues against everyone else.  The [[Coding Standard]] will mostly grow out of conversations that happen while [[Pair Programming]].  When you run into a specific problem that a [[Coding Standard]] can solve, solve it then.",
      "id": "e4aac657e4ce81fb4a5f91b67feb685c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "Long ago, in a company far away, [[Leo Scott]] created a coding standard of a very few lines.  I think it fit on the first half of a double-spaced page.  I'll see if he still has a copy of it so I can post it here.  The rules I remember most were something like:",
      "id": "6aa268df32a0435fc87247798d04501e"
    },
    {
      "type": "html",
      "text": " No tabs",
      "id": "9af76d04aece29cb758db42c2f9f5129"
    },
    {
      "type": "html",
      "text": " Braces line up",
      "id": "46166f866572a6a7293860b50d13576e"
    },
    {
      "type": "html",
      "text": " No tabs",
      "id": "9af76d04aece29cb758db42c2f9f5129"
    },
    {
      "type": "html",
      "text": " No returns out of the middle",
      "id": "472c4a4e03087f607f411892f0701650"
    },
    {
      "type": "html",
      "text": " No tabs",
      "id": "9af76d04aece29cb758db42c2f9f5129"
    },
    {
      "type": "html",
      "text": " There is noooooo... rule 6",
      "id": "1dfc277447b9012d968030aefcd02fdf"
    },
    {
      "type": "html",
      "text": " No rules are absolute",
      "id": "c4dd34a10528509478633ead930c15f0"
    },
    {
      "type": "html",
      "text": "\nThere were a few others. I've since relaxed on most of the rules, and now adhere to them or break them more or less willy-nilly, in a way that must drive my coworkers nuts. But I still don't care much for tabs and often leave out rule 6.",
      "id": "671a201e62d65608c956c0d3af11a8c1"
    },
    {
      "type": "html",
      "text": "\nAnyhow, it being a very short standard was part of what made it work. At the very least, its diminutive size limited the number of official-things-to-fight-about (which, in a way, is what a coding standard often ends up being).  ",
      "id": "adec9a0e4ef9d523f62ad7e64c0d951e"
    },
    {
      "type": "html",
      "text": "\nWhat embarrasses me now is the number of good programmers I pissed off with my small-minded insistence upon adherence to rules which now seem rather stupid to me. -- [[Wayne Conrad]]",
      "id": "dca5a213487f863c835964942e491f66"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "\nWayne did a great job on my coding \"un\"standard. I think I had one more rule that said \"No GOTOs\". I have never been a fan of coding standards, but in the past I could see why people wanted them. It is interesting that the more XP that I do, the more I come to see that coding standards are just one way to deal with problem code. All the ugly, hard to read, hard to modify code can be dealt with either with a set of rules (i.e. coding standards) or a set of principles (XP ideas like refactoring, do the simplest thing possible, YAGNI, pairs, etc). I find that there are still three or four things you want the team to agree on, then just following XP principles naturally produces beautiful, easy to read, easy to change code that conforms to the most nit-picky coding standards. After all, most of the problems in code that coding standards are trying to fix are not a problem when Test First Design pushes you in the direction of methods that are named for what they do, do only one thing and are only 2 to 10 lines long. And if they're not, the next pair refactors them.",
      "id": "89e4bbc6ad72dcc2bdb5be9ecd76ff6e"
    },
    {
      "type": "html",
      "text": "\nCoding standards try to defend against bad code - XP tries to create good code and constantly make it better -- [[Leo Scott]]",
      "id": "b1900faf2122453e692dc90a69a1037b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "\nThis (from the Infospheres templates document) is a degenerate case for what happens when you have all these coding standards which aren't really solving a genuine problem:",
      "id": "c58c7b6724369e2c117591e20a5be750"
    },
    {
      "type": "code",
      "text": " // Constructors",
      "id": "9646d3fc97691e2d030ed95c9426d98e"
    },
    {
      "type": "code",
      "text": "  /**\n   ''''''* This is a default constructor. It does nothing of consequence.\n   ''''''**/",
      "id": "1729163a127ebd641103c0163ef644a6"
    },
    {
      "type": "code",
      "text": "  public J''''''avadocClass()\n  {\n    super();\n  }",
      "id": "1ea698105db39f776161ffc435998f16"
    },
    {
      "type": "html",
      "text": "\nThis snippet is about 50% comments, it has the required constructor comment, and it doesn't do anything.",
      "id": "04ee107ae76abb1c53f9f704d5fc1de5"
    },
    {
      "type": "html",
      "text": "<i>Couldn't you just write something like:</i>",
      "id": "21cf5e6b180cf3d7548a1554da284a91"
    },
    {
      "type": "code",
      "text": " /** Obligatory default ctor. */",
      "id": "92e5919fd0435bdbb592d1ded5338a93"
    },
    {
      "type": "html",
      "text": "<i>instead?</i> -- [[Mike Smith]]",
      "id": "64ec7f1192d45655cf95e930da40d89e"
    },
    {
      "type": "html",
      "text": "\nI remember reading some [[Java Doc]] guidelines that mentioned the problem of how coders who fill in all the required fields often give redundant information that could be gleaned from the code alone -- I mean the pieces of code that are included in the [[Java Doc]], e.g. variable names. They said that of course you shouldn't introduce mindless redundancy, but rather try to provide a description that contains <i>more</i> information. Personally, I treat almost every place for a potential [[Java Doc]] comment as optional; the [[Java Doc]] utility doesn't really complain :-) Consider",
      "id": "8203575ea4036ffc796d27d437594bdf"
    },
    {
      "type": "code",
      "text": " int Point.getX() {\n  return x;\n }",
      "id": "9f9551dbc14c6b4f477f0387b6d64c14"
    },
    {
      "type": "html",
      "text": "This would hardly benefit from a comment saying",
      "id": "c15abb06f073763d7d719717ed1b9cd4"
    },
    {
      "type": "code",
      "text": " /**\n  * gets the value of the x coordinate of this Point\n  * @return value of x coordinate\n  */",
      "id": "db001906c5b72167d691b7059dff913b"
    },
    {
      "type": "html",
      "text": "Of course, you could provide <i>more</i> information by using the terms abscissa and ordinate in the comments for getX() and getY() respectively, instead of repeating the names x and y. A nice way of reminding the reader of which is which. However, it only makes sense if this isn't mentioned already in the description of the class and if these terms are actually used elsewhere in the program/documentation. A compromise I often employ is to provide only the @return clause.",
      "id": "4c8cff7e5f7f9fcb6383150732178b57"
    },
    {
      "type": "html",
      "text": "\nAs you see, in practise all redundant/superfluous (parts of) [[Java Doc]] comments can be safely omitted and nothing bad will happen. The problem with this is that you can hardly write a [[Coding Standard]] around such terms, because then everyone would just invent his/her own definition of \"redundant\", \"superfluous\" etc. and procede as he/she pleases. I guess this is the reason why so many 'fields' were declared required in the first place. -- [[Ne Ks]]",
      "id": "79d2bdafbe2499835703572d81d122f1"
    },
    {
      "type": "html",
      "text": "\nEven the <i>redundant</i> types of javadocs are valuable if one does not have access to the source code and the javadoc is the only available documentation, however.",
      "id": "53b7d90f23c68748379d3c8e3df12373"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "<i>Would anyone care to describe some first hand experience in the development and use of [[Coding Standard]]s?</i>",
      "id": "89e6de2c8023a78fb1f26f9165712863"
    },
    {
      "type": "html",
      "text": "\nI've tried several times to type up a coding standard document that formalized what the team already did automatically. Each time, I've given up when I realized that it was too much work to think of all the possibilities. [[Oral Tradition]] worked so much better.",
      "id": "62c71af9c375dc774c1a699c7a0c4679"
    },
    {
      "type": "html",
      "text": "\nOn my last project, though, I was leaving the project and wanted those who followed us to know what our [[Coding Standard]]s had been. Eventually I came up with this:",
      "id": "761ada3d6571fa1c9d21bcd8cb754268"
    },
    {
      "type": "html",
      "text": "<b>Style guide</b>",
      "id": "d06c5fc8be2b9ca4e2dcc63c1545191f"
    },
    {
      "type": "html",
      "text": "We don't have a formal style guide. But we do think that a consistent style is important. We have thousands of lines of code -- as you write new code, take a look at what we've done before and try to match it. ",
      "id": "5c894dda26afb8e1e8fbdc9f90ff0ae7"
    },
    {
      "type": "html",
      "text": "Here's some hints to help you get started: ",
      "id": "0957f09ae1a4015ccb136836b92f97c3"
    },
    {
      "type": "html",
      "text": " Our code is mostly consistent with Sun's Java style guide. ",
      "id": "75331178e56f0b91e9ad71918822abd1"
    },
    {
      "type": "html",
      "text": " Acronyms are considered words. Only the first letter is ever capitalized. ",
      "id": "98e693e00071aea2fcf5e293b8b015a6"
    },
    {
      "type": "html",
      "text": " When breaking a statement across multiple lines, we only indent and outdent two spaces at a time. ",
      "id": "80b53e81badd1750e96ad6687bc2c6b7"
    },
    {
      "type": "html",
      "text": " We use spaces rather than tabs in our source code so that it renders consistently. ",
      "id": "4e223e0299040b608e99ba131e921d5e"
    },
    {
      "type": "html",
      "text": "We also have some design conventions: ",
      "id": "5dd0a55acd18ae0162a91ae2fc5c5cb2"
    },
    {
      "type": "html",
      "text": " We don't like to pass null references around. ",
      "id": "2b49468e97cf1de4b3e636da670225b6"
    },
    {
      "type": "html",
      "text": " When an exception occurs, we either resolve the problem or we propagate the exception. We very rarely catch an exception and then do nothing with it; when we do, it's for a good reason (which we document). ",
      "id": "6afc8ce800519b515a776852e5502a2a"
    },
    {
      "type": "html",
      "text": " We don't log errors -- we send an email and inform someone that a problem has occurred. Sometimes we log and send an email; the point is that our code is proactive about problems. ",
      "id": "9a75ace240a3ab1bf5d7c422aba11bc7"
    },
    {
      "type": "html",
      "text": "\nThat's it. Unfortunately, I can't tell you if it's a good style guide or not, since to my knowledge, nobody ever read it. On future projects, though, I would probably use that as a starting point.",
      "id": "eb9a98cd0e3f5081385a0dd8695ae3ba"
    },
    {
      "type": "html",
      "text": "\nOn an earlier project, we had a discussion early on about style. I declared that, since I didn't want style to become a divisive issue, any style was okay as long as the code communicated well. We ended up with many different styles, including three different brace styles, often within the same class. It worked fine. Coding standards are overrated. -- [[Jim Little]]",
      "id": "273dcc339562da157ed5ba8b28bae8c5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "[[William Wake]]'s single-page standard recommends catching all Exceptions in the finally{} block, which works fine if an exception <b>is</b> thrown in the try{} block. It will not work as expected if the try{} block completes normally but then there is an error in resource release. If so, the generated exception is swallowed.",
      "id": "a43b9f6b7d53cd475ef210c7c7351ce3"
    },
    {
      "type": "code",
      "text": "  } finally {\n  if (out != null) try { out.close(); } catch( Exception ignored) {} }",
      "id": "a0461e62df5f1a49b648031704967bb2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "It might be fun to make a coding standard that makes the code on a page look like a two dimensional picture, with each page having a sort of 'look' about it that would help readers identify its function.  A [[Two Dimensional Coding]] standard could be rather fun.",
      "id": "36995a92b2c090c7c3b6ce908189c9da"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "I use a variant of the \"Spaces, not tabs\" rule, which specifies monospaced font (critical for ASCII-art diagrams ;-), 8-column tab stops, and strict space/tab equivalence (usually accompanied by a script that detects and prevents tabs in string literals).  Forbidding tabs completely in source code (but alas, not Makefiles) looks a lot easier.  Who knew tabs could be so annoying?",
      "id": "6274a440764c293aaa1ee169d788868a"
    },
    {
      "type": "html",
      "text": "\nThe only other rules I have ever cared about:",
      "id": "86095901f07c4add3e9b6d85f83df2cf"
    },
    {
      "type": "html",
      "text": " Be locally consistent with indentation and variable names (if they used 4-space-indentation and brace-cuddling in the Foo module but 8-space-indentation, tabs, and no-brace-cuddling in the Bar module, so do you)",
      "id": "64b01378704f19f3ce02f7ea6bb9b817"
    },
    {
      "type": "html",
      "text": " Given a choice between two equivalent constructions, pick the one that is less ambiguous to a human reader (so use \"(3 * 5) + 7\" instead of \"3 * 5 + 7\").  ",
      "id": "0b4af894c5ac34cd28bb4a51f2072875"
    },
    {
      "type": "html",
      "text": " All style rules are negotiable.  Including this one.",
      "id": "a0e68b887385d7eb34c7d211e3889d31"
    },
    {
      "type": "html",
      "text": "\nIMHO all coding standards should have a specified and specific scope:  \"for Tcl  code on the Foo product\" or \"for programs that will be built by the Borken<tm> Brand Compiler or ported to BorkenOS<tm>\" or \"for sample source code that will be shipped as part of the documentation of our library product.\"",
      "id": "1712e857a73f98c85e05b2f29d891dfc"
    },
    {
      "type": "html",
      "text": "\nOne coding standard probably can't be sanely applied to 1000 developers using a dozen programming languages, two dozen natural (human) languages, half a dozen toolchains, and uncounted hardware platforms, unless it's extremely long (too long to read) or extremely short (too short to contain any useful information).  I try to imagine what a [[Coding Standard]] suitable for the Debian project would look like.  Even a [[Coding Standard]] that handles two different programming languages for a half dozen developers starts to look overly bureaucratic if not downright silly.  Shorter is better, the best is as short as possible...but no shorter.",
      "id": "c3cd107af37a531b199f51563b55eb22"
    },
    {
      "type": "html",
      "text": "--[[Zygo Blaxell]]",
      "id": "6f757d8c6938961f7be0726e94ff9ba7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "On my current contract, we have been able to distill the bulk of our (Java) coding standards into a two-column, single-page Word document.  There are a few lines of explicit text, but otherwise the rest of the document demonstrates the standard through code.  You do have to do a little reading between the lines.",
      "id": "3e84ff49b5e47ed4dfeb73658bb32084"
    },
    {
      "type": "html",
      "text": "\nWe spent one hour as a team to run through the contentious points, then drafted an initial standards document.  The standard can be reviewed at iteration retrospectives and updated as often as necessary.",
      "id": "0d48ebb7a503ad13c821ee1d0e592681"
    },
    {
      "type": "html",
      "text": "\nOne sheet fits nicely onto a wall or the side of a monitor, and after a month or so of adherence it can be removed.",
      "id": "2fa7fab7620e975a2b09412bc8219ecf"
    },
    {
      "type": "html",
      "text": "--[[Jeff Langr]]",
      "id": "63a31fb8c051263a33caca8c3bb7410e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "\nI actually wrote a coding standard for Java. And this was only because I had to, and if it wasn't done by me, it could have been done for the worse. The whole point is to make it minimal. For example I have not specified the alignment of braces so that all following variants are \"legal\":",
      "id": "4618c03f37c9fcc5da5393d7342af109"
    },
    {
      "type": "code",
      "text": " if(condition)\n {\n   //big block\n }",
      "id": "51cac8b91ea7b148a7d205e4d2843d96"
    },
    {
      "type": "code",
      "text": " if (condition) { shortBlock(); }",
      "id": "4f90b021b8a390af82ac1dec61fed266"
    },
    {
      "type": "code",
      "text": " if (condition) { statement1;\n                  statement2 ; }\n if (condition) \n     { statement1;\n       statement2;\n       statement3; }",
      "id": "3163d233720320bf64be5a1a27a517b0"
    },
    {
      "type": "html",
      "text": "\nAnything that makes the code nicer to read (of course in the subjective judgement of the guy who writes the code), is allowed. Overly restrictive or overly specific coding standards are kind of stupid, IMHO. For example I read in one coding standard that the choice operator ? : should not be used at all. --Costin",
      "id": "9cc51597e6f3e42d220df5d9d3de815b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "I found myself being depressed and starting to make my code sad.\nIt's when I invented [[Positive Programming]].",
      "id": "2256eb072993f257848b87ed404ccb7a"
    },
    {
      "type": "html",
      "text": "\nHere are the rules I found out :",
      "id": "ae201f83236343b59c13a5d11fabc0f7"
    },
    {
      "type": "html",
      "text": "\n1)Prefer positive first. This makes you not see the bad part of it because it's else",
      "id": "7ec42e7b1f99ef6f129a8ef66e7e8925"
    },
    {
      "type": "code",
      "text": " if (happy) then\n  ...\n else\n  ...",
      "id": "5a17f7d66870c45903be00e05ac0ea0a"
    },
    {
      "type": "code",
      "text": " instead of :",
      "id": "5ee09d972be0ac504911c88ecce8b8f3"
    },
    {
      "type": "code",
      "text": " if (unhappy) then\n  ...\n else\n  ...",
      "id": "5764f31d49b3d5bff1e869765a10c58e"
    },
    {
      "type": "html",
      "text": "\n2)Replace negative variable names with positive ones.",
      "id": "0a263dcd4d3171d8066da47b9b7527b2"
    },
    {
      "type": "code",
      "text": " happy = true\n if (happy) then\n  ...",
      "id": "242a20a81087c99e45a9d4e0f587a7bb"
    },
    {
      "type": "code",
      "text": " instead of :",
      "id": "5ee09d972be0ac504911c88ecce8b8f3"
    },
    {
      "type": "code",
      "text": " unhappy = false\n if (not unhappy) then\n  ...",
      "id": "25533501bcc51168b53aaf597c483771"
    },
    {
      "type": "html",
      "text": "\nMore rules to be defined :)",
      "id": "13abd11969f40bce7c2f1337a7bdb37f"
    },
    {
      "type": "html",
      "text": "\nmailto:zimba_AT_@oree.ch",
      "id": "fcf0b37295fbc69fa06e3c534131361e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "\nI have just put together a Java coding standards document.  Instead of listing hundreds of rules about layout and formatting we just leave that up to an automated tool like [[Check Style]] to pick up.  The document concentrates on subtler more fundamental standards which rely on the skill of the developer and (importantly) reviewer to enforce.",
      "id": "9b16d5100a533337854285d78b3d50cb"
    },
    {
      "type": "html",
      "text": "\nSee [[Formal Standards]], [[Coding Standard List]], [[Bad Coding Standards]], [[Coding Style]], [[Coding Conventions]], [[Infospheres Coding Standard For Java]]",
      "id": "3eb628f05e9554e6ea2c1e9d2328b784"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "It seems to me that the requirement for coding standards stems from the problem of separating layout and content. This has been a huge issue on the web, and is now being addressed by xml, xhtml, and css. Couldn't a similar approach be taken on code? This way everyone can code with a standard that feels natural to them, and everyone else can read the code as they would like it.",
      "id": "626eb457ef29a5939f4943f5c94e5f41"
    },
    {
      "type": "html",
      "text": "<i>IMHO, coding standards only makes sense for pair programming (since otherwise you can use indent and similar tools), and when pair programming, the approach you suggest wouldn't solve anything.</i>",
      "id": "9f46b13c0796d86e1d9f4676a8cea729"
    },
    {
      "type": "html",
      "text": "\nGiven further thought, even if it would solve matters of layout (tabs vs. spaces and how many, where does the '{' go?), it would not be able to solve matters such as variable naming conventions.",
      "id": "52ec3f050a64d99a8d162f8de8e4010c"
    },
    {
      "type": "html",
      "text": "\nAs you say, this wouldn't be of great use when it comes to pair programming, but improving code readability for others is always a plus. Consider a developer that leaves a project, and all his code is in a written with a very different coding standard. Other developers that wish to pick up where he left off will not be severely hindered by this, but it will be an annoyance.",
      "id": "f3e5ffa28f4f1483cd42f578f179c5d7"
    },
    {
      "type": "html",
      "text": "<i>Why not just run run it through a [[Pretty Print]]er, run the full regression tests, then get on with editing it? This also only solves the layout issue, but variable renaming can also be done with a suitable code browser.</i>",
      "id": "cbb780926e5d58b435b5cde77f590364"
    },
    {
      "type": "html",
      "text": "\nSounds reasonable to me.",
      "id": "51e2780e2f9a2d35838c7e4f48645481"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "A few years ago I put together some white papers on engineering and software design process. One of them covered coding guidelines as a part of the overall process of creating a product. See the papers at [http://www.parsecsystemsinc.com/WhitePapers.html www.parsecsystemsinc.com] for a distillation of lots of wisdom filtered off this board and other Internet sources.",
      "id": "8a954dba176b9d9c4c5694e44bfc9309"
    },
    {
      "type": "html",
      "text": "\nNote that the coding guidelines include some specifics that I don't particularly like or use myself, but this paper is left over from a project where a buddy of mine was the technical lead. He was in the position of choosing one standard for coding, and we all used what he came up with. That's how it works, you know.",
      "id": "06457eb3b12c758aa78f636e99e7092d"
    },
    {
      "type": "html",
      "text": "-- [[Marty Schrader]]",
      "id": "432f7e5d23572232f1a6b06cd5b6ca83"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "Coding standards can destroy people's ability to work. I have a significant cognitive deficits in the area of memory and visual tracking. If I am allowed to arrange my code in two dimensions, then my eyes can track it and not get confused by the right hand margins of identifiers, and if is is in two dimension, I can see it all on one screen in front of me at the same time. If I have to scroll I forget immediately what was on the previous page, and if the identifiers are not lined up I spend too much mental energy trying to parse them mentally to understand the program.",
      "id": "d7681dc6ad00af3a51517da4ec53529f"
    },
    {
      "type": "html",
      "text": "\nFor example this works:",
      "id": "60fa6eb0db06a3fec00e1facdd8141e1"
    },
    {
      "type": "code",
      "text": " consumer.ConsumerFirstName  = txtFirstName.Text ;\n consumer.ConsumerMiddleName = txtMiddleName.Text;\n consumer.ConsumerLastName   = txtLastName.Text  ;\n consumer.CreateDate         = date              ;",
      "id": "2b215fae30761d73e40f36a870bd74e2"
    },
    {
      "type": "html",
      "text": "This does not:",
      "id": "34b73a5d527de71e513321df1e3b028e"
    },
    {
      "type": "code",
      "text": " consumer.ConsumerFirstName = txtFirstName.Text;\n consumer.ConsumerMiddleName = txtMiddleName.Text;\n consumer.ConsumerLastName = txtLastName.Text;\n consumer.CreateDate = date;",
      "id": "fa43fe9f5a375f22ba38edee335ba7fa"
    },
    {
      "type": "html",
      "text": "If the coding standard forces the second kind of program rather than the first, I can't program. -- [[Jon Grover]]",
      "id": "c4f0b8fef5b4130ceba9b95448b6be04"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2a800a670f2a2bad32674c0ad033849d"
    },
    {
      "type": "html",
      "text": "[[Category Coding]]",
      "id": "8ab57dc408fd4bf1d8483b021362a0db"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CodingStandard c2.com]",
      "id": "ab6048a82a392ee52456a14828253ce3"
    }
  ],
  "journal": [
    {
      "date": 1416847324000,
      "id": "a08c12c63f032ece46de5c17c34777c4",
      "type": "create",
      "item": {
        "title": "Coding Standard",
        "story": [
          {
            "type": "html",
            "text": "<b>The main decisions</b>",
            "id": "81c6012374951f343663ddd131c3a8de"
          },
          {
            "type": "html",
            "text": "\nHere are the main areas where people on a team often have different preferences and might need to agree on something. It's hard to argue that any one system has a huge advantage over any other system.  But consistency on some of these things has a big advantage over inconsistency: everyone on a team can read code easily and make parts of the system refer to other parts of the system easily.",
            "id": "0c75bda17337128d4a94c26070344e77"
          },
          {
            "type": "html",
            "text": "<i>1. Naming convention</i>",
            "id": "724923cef5551ebea019630d3ad9c5ba"
          },
          {
            "type": "html",
            "text": "\n[[Bumpy Case]] or underscores?",
            "id": "38aa1c157e1d01882bbd0055490b409f"
          },
          {
            "type": "code",
            "text": " dueDate ''or'' due_date",
            "id": "0f10bd7a98540a54d93070623edcd662"
          },
          {
            "type": "html",
            "text": "[[Bumpy Case]] has the advantage that D<b></b>ueDate is clearly a class while dueDate is clearly an instance. [[Bumpy Case]] also makes individual program statements a little shorter and less likely to wrap across multiple lines.",
            "id": "2467e374a1060f0660bc6815ce6237e3"
          },
          {
            "type": "html",
            "text": "Do we indicate the type of identifiers in how we choose their name?",
            "id": "d89208917e0b369cdcac3bc5167c4e24"
          },
          {
            "type": "html",
            "text": "\nA common system is:",
            "id": "75e04d3d9ef5f3ca372fe74e40caf6f1"
          },
          {
            "type": "code",
            "text": " CONSTANT, Class, instance, subroutine.",
            "id": "217d88f1ed4bc64f9f509e07bb3a3724"
          },
          {
            "type": "html",
            "text": "The name of a subroutine is usually clear from context since it's followed by parentheses. At the opposite end of the spectrum, [[Hungarian Notation]] embeds a lot more type information in a name.",
            "id": "fd6cd93c364b00fa8a16b572e08aee73"
          },
          {
            "type": "html",
            "text": "Any special way of indicating data members or private members?",
            "id": "e89d40dd573f8b3cff0b53ff30c37358"
          },
          {
            "type": "html",
            "text": "\nSome people use a prefix, like _ or m_:",
            "id": "c12a69f055796fcb892a9635760c7249"
          },
          {
            "type": "code",
            "text": " class P''''''honeNumber {\n private:\n    unsigned int m_areaCode;\n    unsigned int m_exchange;\n    unsigned int m_lastFourDigits;\n public:\n    P''''''honeNumber(string& phoneNumber);\n    C''''''allResult call();\n    ...\n };",
            "id": "d7c9ce41ff3d63948976ef1688c5fa2c"
          },
          {
            "type": "html",
            "text": "\nIn non-OO languages, where you have to fake classes, how do you create the fake namespace for a class?",
            "id": "6170dedb497f65ce513747e84b28f2ae"
          },
          {
            "type": "html",
            "text": "\nA common solution is to combine [[Bumpy Case]] and underscores, like this:",
            "id": "afb3262397944930a998976a7656f401"
          },
          {
            "type": "code",
            "text": " void M''''''boxParser_create();\n E''''''rrorCode M''''''boxParser_open(char *filename);\n M''''''ailHeaderField* M''''''boxParser_getHeaderFields();",
            "id": "b493ee0d25c241fa820200d31d5f37d6"
          },
          {
            "type": "html",
            "text": "\nDo you name an array after the singular or the plural of the kind of element it contains?",
            "id": "fb75dbdc2a167be4ff796a5c6ca87434"
          },
          {
            "type": "code",
            "text": " M''''''ailHeaderField field[]",
            "id": "50555f1c22db6a1119390c7363af2347"
          },
          {
            "type": "html",
            "text": "or:",
            "id": "638b7bcb871af80001c2b07b932ecea8"
          },
          {
            "type": "code",
            "text": " M''''''ailHeaderField fields[]",
            "id": "a2e538b6e74203b59a6dc05a0d92d94b"
          },
          {
            "type": "html",
            "text": "\nUsing the plural has the advantage that you can write code like this:",
            "id": "7ddcc638de9e129831ab386d8c8f45cd"
          },
          {
            "type": "code",
            "text": " for (int i = 0; i < numFields; i++) {\n    M''''''ailHeaderField *field = fields[i];\n    parse(field);\n    // etc.\n }",
            "id": "1e060f013336bfa565a638811205fba0"
          },
          {
            "type": "html",
            "text": "\nor in [[Python Language]]:",
            "id": "c5eb7fdf9d8587ee50fd014226c22999"
          },
          {
            "type": "code",
            "text": " for field in fields:\n    field.parse()",
            "id": "0edc8aa651b930e74975cdf83025707b"
          },
          {
            "type": "html",
            "text": "<i>2. Where do you put the braces?</i>",
            "id": "b6822e8ccd05e884453c2173d6167aa4"
          },
          {
            "type": "html",
            "text": "\nIn other words, like this: (Lisp- / Smalltalk-style)",
            "id": "ede217e65872515405f1b94daeb1504b"
          },
          {
            "type": "code",
            "text": " if (condition) {\n    doSomething(); }",
            "id": "b99e8032cb5f5c65f58278570a3c19af"
          },
          {
            "type": "html",
            "text": "or like this:",
            "id": "923199279c05fe3dea18d6530f934c8a"
          },
          {
            "type": "code",
            "text": " if (condition) {\n    doSomething();\n }",
            "id": "33429d88b716f69513941cc05a37d4c7"
          },
          {
            "type": "html",
            "text": "or like this:",
            "id": "923199279c05fe3dea18d6530f934c8a"
          },
          {
            "type": "code",
            "text": " if (condition)\n {\n    doSomething();\n }",
            "id": "6e3ac1218e90be291dd25ffedcc94f16"
          },
          {
            "type": "html",
            "text": "or like this:",
            "id": "923199279c05fe3dea18d6530f934c8a"
          },
          {
            "type": "code",
            "text": " if (condition)\n   {\n     doSomething();\n   }",
            "id": "2504f6097e4aa25bd90e8c016f769e14"
          },
          {
            "type": "html",
            "text": "or like this:",
            "id": "923199279c05fe3dea18d6530f934c8a"
          },
          {
            "type": "code",
            "text": " if (condition)\n    {\n    doSomething();\n    }",
            "id": "ba2841fb50a6fd2ec511928598a48f0e"
          },
          {
            "type": "html",
            "text": "or like this (actually spotted it somewhere, but don't remember):",
            "id": "dc622f96264ba41943e7aa03238cb624"
          },
          {
            "type": "code",
            "text": " if (condition) {\n     doSomething();\n     }",
            "id": "2a1390b88eb05635ceb57f0ed6df201c"
          },
          {
            "type": "html",
            "text": "\nSimilar questions need to be asked for any multiple-line construction with delimiters; for example, a function declaration with arguments that (for whatever reason) should be split over several lines:",
            "id": "086ceca9b86029bccdf224c1c6e8b4b4"
          },
          {
            "type": "code",
            "text": " def foo(spam,\n         eggs,\n         beans):",
            "id": "1ebd06f3ea02755cd7b449dc30392be2"
          },
          {
            "type": "html",
            "text": "or",
            "id": "75d21f37680dc0032817b93baaa1fb1e"
          },
          {
            "type": "code",
            "text": " def foo(spam,\n         eggs,\n         beans\n ):",
            "id": "29117c2dc0a9f396e4b8122ccab37e6d"
          },
          {
            "type": "html",
            "text": "or",
            "id": "75d21f37680dc0032817b93baaa1fb1e"
          },
          {
            "type": "code",
            "text": " def foo(spam,\n     eggs,\n     beans\n ):",
            "id": "99aa0f78f39a94570812bcd4b4efd1c7"
          },
          {
            "type": "html",
            "text": "or",
            "id": "75d21f37680dc0032817b93baaa1fb1e"
          },
          {
            "type": "code",
            "text": " def foo(\n     spam,\n     eggs,\n     beans):",
            "id": "f2abc8225e91acef0e6db98a046bec4e"
          },
          {
            "type": "html",
            "text": "or",
            "id": "75d21f37680dc0032817b93baaa1fb1e"
          },
          {
            "type": "code",
            "text": " def foo(\n     spam,\n     eggs,\n     beans\n ):",
            "id": "f9abc3de3fabfbb5b310c7bff53e0455"
          },
          {
            "type": "html",
            "text": "<i>3. Indentation</i>",
            "id": "05783e679c0817c7222b8cdc4d589cd1"
          },
          {
            "type": "html",
            "text": "\nIndentation of 2 columns or more than 4 columns tends to be hard to read. An advantage of 3-column indentation over 4-column is that while both are readable, 3-column indentation makes shorter lines that are less likely to go past 80 columns and wrap.",
            "id": "924f67732abf8be8f82be7b90ea16997"
          },
          {
            "type": "html",
            "text": "\nIn some languages, like [[Cascading Style Sheets]], 2 columns can actually be more readable.",
            "id": "8973010251944e46a928f820ed44f0ef"
          },
          {
            "type": "html",
            "text": "<i>4. Tabs</i>",
            "id": "f70d3f24b2c8f125adffe5fb6769bd57"
          },
          {
            "type": "html",
            "text": "\nDo you include tabs (ASCII 9) in your source files or not? Each tab represents one level of indentation.",
            "id": "221d93dcbce4b63491700c87d3e813c2"
          },
          {
            "type": "html",
            "text": "\nIf you include tabs in your source files, then everyone can set their editor to expand tabs to however many spaces they like.",
            "id": "1af4203e036df66d4e8e3955421db9d1"
          },
          {
            "type": "html",
            "text": "\nExcept not really, since people insert a different number of tabs to make things line up depending on the tab setting.",
            "id": "3abe4f62ff0960014137b488b15dab6e"
          },
          {
            "type": "html",
            "text": "\n[[Vi Editor]] and others can be set (\"set expandtab\") to automatically convert the tab keystroke into the appropriate number of spaces.  When indentations are stored as spaces, program code is readable in gdb, on a printer, in email, etc.  In those places, the tab character expands to 8 spaces, causing code with one tab per indentation to spread out so much that it's almost unreadable.",
            "id": "413a4c0f8f7d844753260aed02faf5b3"
          },
          {
            "type": "html",
            "text": "\n[[Python Language]] requires consistency of tabs and spaces, so it almost mandates the \"expandtab\" approach.",
            "id": "7bc2467300e4fbc7bb95d092de8572e2"
          },
          {
            "type": "html",
            "text": "<i>5. Type on same line as function definition?</i>",
            "id": "9b0b0b4273c204ff1e6bedd871dff95d"
          },
          {
            "type": "html",
            "text": "\nLike this:",
            "id": "93f27849e7e95bf07158f83a7d28be80"
          },
          {
            "type": "code",
            "text": " M''''''ailHeaderField*\n M''''''boxParser_getHeaderFields()\n {\n    . . .\n }",
            "id": "d51103e831943024d9b217b00b9717cf"
          },
          {
            "type": "html",
            "text": "or like this:",
            "id": "923199279c05fe3dea18d6530f934c8a"
          },
          {
            "type": "code",
            "text": " M''''''ailHeaderField* M''''''boxParser_getHeaderFields()\n {\n    . . .\n }",
            "id": "699c67b1010715ecdd53723881d1fecd"
          },
          {
            "type": "html",
            "text": "The first way has the advantage that tools (like ctags) can easily find the beginnings of functions, since the function name always occurs at the beginning of the line.",
            "id": "254d007c4c80b5c901011f38da012702"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "\nHas anyone else here ever tried to produce a [[Coding Standard]] document? The time and level of detail make this a difficult thing to accomplish, and when you are done, there is the issue of convincing people to actually follow it.  I am beginning to doubt that a [[Coding Standard]] provides more value that it costs. Would anyone care to describe some first hand experience in the development and use of [[Coding Standard]]s?  -- [[Wayne Mack]]",
            "id": "912afcfd9f56fd3270edfe087818a5c6"
          },
          {
            "type": "html",
            "text": "\nAn easy way to do it is on a wiki, gradually, illustrated by simple examples, not in some huge session where everyone argues against everyone else.  The [[Coding Standard]] will mostly grow out of conversations that happen while [[Pair Programming]].  When you run into a specific problem that a [[Coding Standard]] can solve, solve it then.",
            "id": "e4aac657e4ce81fb4a5f91b67feb685c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "Long ago, in a company far away, [[Leo Scott]] created a coding standard of a very few lines.  I think it fit on the first half of a double-spaced page.  I'll see if he still has a copy of it so I can post it here.  The rules I remember most were something like:",
            "id": "6aa268df32a0435fc87247798d04501e"
          },
          {
            "type": "html",
            "text": " No tabs",
            "id": "9af76d04aece29cb758db42c2f9f5129"
          },
          {
            "type": "html",
            "text": " Braces line up",
            "id": "46166f866572a6a7293860b50d13576e"
          },
          {
            "type": "html",
            "text": " No tabs",
            "id": "9af76d04aece29cb758db42c2f9f5129"
          },
          {
            "type": "html",
            "text": " No returns out of the middle",
            "id": "472c4a4e03087f607f411892f0701650"
          },
          {
            "type": "html",
            "text": " No tabs",
            "id": "9af76d04aece29cb758db42c2f9f5129"
          },
          {
            "type": "html",
            "text": " There is noooooo... rule 6",
            "id": "1dfc277447b9012d968030aefcd02fdf"
          },
          {
            "type": "html",
            "text": " No rules are absolute",
            "id": "c4dd34a10528509478633ead930c15f0"
          },
          {
            "type": "html",
            "text": "\nThere were a few others. I've since relaxed on most of the rules, and now adhere to them or break them more or less willy-nilly, in a way that must drive my coworkers nuts. But I still don't care much for tabs and often leave out rule 6.",
            "id": "671a201e62d65608c956c0d3af11a8c1"
          },
          {
            "type": "html",
            "text": "\nAnyhow, it being a very short standard was part of what made it work. At the very least, its diminutive size limited the number of official-things-to-fight-about (which, in a way, is what a coding standard often ends up being).  ",
            "id": "adec9a0e4ef9d523f62ad7e64c0d951e"
          },
          {
            "type": "html",
            "text": "\nWhat embarrasses me now is the number of good programmers I pissed off with my small-minded insistence upon adherence to rules which now seem rather stupid to me. -- [[Wayne Conrad]]",
            "id": "dca5a213487f863c835964942e491f66"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "\nWayne did a great job on my coding \"un\"standard. I think I had one more rule that said \"No GOTOs\". I have never been a fan of coding standards, but in the past I could see why people wanted them. It is interesting that the more XP that I do, the more I come to see that coding standards are just one way to deal with problem code. All the ugly, hard to read, hard to modify code can be dealt with either with a set of rules (i.e. coding standards) or a set of principles (XP ideas like refactoring, do the simplest thing possible, YAGNI, pairs, etc). I find that there are still three or four things you want the team to agree on, then just following XP principles naturally produces beautiful, easy to read, easy to change code that conforms to the most nit-picky coding standards. After all, most of the problems in code that coding standards are trying to fix are not a problem when Test First Design pushes you in the direction of methods that are named for what they do, do only one thing and are only 2 to 10 lines long. And if they're not, the next pair refactors them.",
            "id": "89e4bbc6ad72dcc2bdb5be9ecd76ff6e"
          },
          {
            "type": "html",
            "text": "\nCoding standards try to defend against bad code - XP tries to create good code and constantly make it better -- [[Leo Scott]]",
            "id": "b1900faf2122453e692dc90a69a1037b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "\nThis (from the Infospheres templates document) is a degenerate case for what happens when you have all these coding standards which aren't really solving a genuine problem:",
            "id": "c58c7b6724369e2c117591e20a5be750"
          },
          {
            "type": "code",
            "text": " // Constructors",
            "id": "9646d3fc97691e2d030ed95c9426d98e"
          },
          {
            "type": "code",
            "text": "  /**\n   ''''''* This is a default constructor. It does nothing of consequence.\n   ''''''**/",
            "id": "1729163a127ebd641103c0163ef644a6"
          },
          {
            "type": "code",
            "text": "  public J''''''avadocClass()\n  {\n    super();\n  }",
            "id": "1ea698105db39f776161ffc435998f16"
          },
          {
            "type": "html",
            "text": "\nThis snippet is about 50% comments, it has the required constructor comment, and it doesn't do anything.",
            "id": "04ee107ae76abb1c53f9f704d5fc1de5"
          },
          {
            "type": "html",
            "text": "<i>Couldn't you just write something like:</i>",
            "id": "21cf5e6b180cf3d7548a1554da284a91"
          },
          {
            "type": "code",
            "text": " /** Obligatory default ctor. */",
            "id": "92e5919fd0435bdbb592d1ded5338a93"
          },
          {
            "type": "html",
            "text": "<i>instead?</i> -- [[Mike Smith]]",
            "id": "64ec7f1192d45655cf95e930da40d89e"
          },
          {
            "type": "html",
            "text": "\nI remember reading some [[Java Doc]] guidelines that mentioned the problem of how coders who fill in all the required fields often give redundant information that could be gleaned from the code alone -- I mean the pieces of code that are included in the [[Java Doc]], e.g. variable names. They said that of course you shouldn't introduce mindless redundancy, but rather try to provide a description that contains <i>more</i> information. Personally, I treat almost every place for a potential [[Java Doc]] comment as optional; the [[Java Doc]] utility doesn't really complain :-) Consider",
            "id": "8203575ea4036ffc796d27d437594bdf"
          },
          {
            "type": "code",
            "text": " int Point.getX() {\n  return x;\n }",
            "id": "9f9551dbc14c6b4f477f0387b6d64c14"
          },
          {
            "type": "html",
            "text": "This would hardly benefit from a comment saying",
            "id": "c15abb06f073763d7d719717ed1b9cd4"
          },
          {
            "type": "code",
            "text": " /**\n  * gets the value of the x coordinate of this Point\n  * @return value of x coordinate\n  */",
            "id": "db001906c5b72167d691b7059dff913b"
          },
          {
            "type": "html",
            "text": "Of course, you could provide <i>more</i> information by using the terms abscissa and ordinate in the comments for getX() and getY() respectively, instead of repeating the names x and y. A nice way of reminding the reader of which is which. However, it only makes sense if this isn't mentioned already in the description of the class and if these terms are actually used elsewhere in the program/documentation. A compromise I often employ is to provide only the @return clause.",
            "id": "4c8cff7e5f7f9fcb6383150732178b57"
          },
          {
            "type": "html",
            "text": "\nAs you see, in practise all redundant/superfluous (parts of) [[Java Doc]] comments can be safely omitted and nothing bad will happen. The problem with this is that you can hardly write a [[Coding Standard]] around such terms, because then everyone would just invent his/her own definition of \"redundant\", \"superfluous\" etc. and procede as he/she pleases. I guess this is the reason why so many 'fields' were declared required in the first place. -- [[Ne Ks]]",
            "id": "79d2bdafbe2499835703572d81d122f1"
          },
          {
            "type": "html",
            "text": "\nEven the <i>redundant</i> types of javadocs are valuable if one does not have access to the source code and the javadoc is the only available documentation, however.",
            "id": "53b7d90f23c68748379d3c8e3df12373"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "<i>Would anyone care to describe some first hand experience in the development and use of [[Coding Standard]]s?</i>",
            "id": "89e6de2c8023a78fb1f26f9165712863"
          },
          {
            "type": "html",
            "text": "\nI've tried several times to type up a coding standard document that formalized what the team already did automatically. Each time, I've given up when I realized that it was too much work to think of all the possibilities. [[Oral Tradition]] worked so much better.",
            "id": "62c71af9c375dc774c1a699c7a0c4679"
          },
          {
            "type": "html",
            "text": "\nOn my last project, though, I was leaving the project and wanted those who followed us to know what our [[Coding Standard]]s had been. Eventually I came up with this:",
            "id": "761ada3d6571fa1c9d21bcd8cb754268"
          },
          {
            "type": "html",
            "text": "<b>Style guide</b>",
            "id": "d06c5fc8be2b9ca4e2dcc63c1545191f"
          },
          {
            "type": "html",
            "text": "We don't have a formal style guide. But we do think that a consistent style is important. We have thousands of lines of code -- as you write new code, take a look at what we've done before and try to match it. ",
            "id": "5c894dda26afb8e1e8fbdc9f90ff0ae7"
          },
          {
            "type": "html",
            "text": "Here's some hints to help you get started: ",
            "id": "0957f09ae1a4015ccb136836b92f97c3"
          },
          {
            "type": "html",
            "text": " Our code is mostly consistent with Sun's Java style guide. ",
            "id": "75331178e56f0b91e9ad71918822abd1"
          },
          {
            "type": "html",
            "text": " Acronyms are considered words. Only the first letter is ever capitalized. ",
            "id": "98e693e00071aea2fcf5e293b8b015a6"
          },
          {
            "type": "html",
            "text": " When breaking a statement across multiple lines, we only indent and outdent two spaces at a time. ",
            "id": "80b53e81badd1750e96ad6687bc2c6b7"
          },
          {
            "type": "html",
            "text": " We use spaces rather than tabs in our source code so that it renders consistently. ",
            "id": "4e223e0299040b608e99ba131e921d5e"
          },
          {
            "type": "html",
            "text": "We also have some design conventions: ",
            "id": "5dd0a55acd18ae0162a91ae2fc5c5cb2"
          },
          {
            "type": "html",
            "text": " We don't like to pass null references around. ",
            "id": "2b49468e97cf1de4b3e636da670225b6"
          },
          {
            "type": "html",
            "text": " When an exception occurs, we either resolve the problem or we propagate the exception. We very rarely catch an exception and then do nothing with it; when we do, it's for a good reason (which we document). ",
            "id": "6afc8ce800519b515a776852e5502a2a"
          },
          {
            "type": "html",
            "text": " We don't log errors -- we send an email and inform someone that a problem has occurred. Sometimes we log and send an email; the point is that our code is proactive about problems. ",
            "id": "9a75ace240a3ab1bf5d7c422aba11bc7"
          },
          {
            "type": "html",
            "text": "\nThat's it. Unfortunately, I can't tell you if it's a good style guide or not, since to my knowledge, nobody ever read it. On future projects, though, I would probably use that as a starting point.",
            "id": "eb9a98cd0e3f5081385a0dd8695ae3ba"
          },
          {
            "type": "html",
            "text": "\nOn an earlier project, we had a discussion early on about style. I declared that, since I didn't want style to become a divisive issue, any style was okay as long as the code communicated well. We ended up with many different styles, including three different brace styles, often within the same class. It worked fine. Coding standards are overrated. -- [[Jim Little]]",
            "id": "273dcc339562da157ed5ba8b28bae8c5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "[[William Wake]]'s single-page standard recommends catching all Exceptions in the finally{} block, which works fine if an exception <b>is</b> thrown in the try{} block. It will not work as expected if the try{} block completes normally but then there is an error in resource release. If so, the generated exception is swallowed.",
            "id": "a43b9f6b7d53cd475ef210c7c7351ce3"
          },
          {
            "type": "code",
            "text": "  } finally {\n  if (out != null) try { out.close(); } catch( Exception ignored) {} }",
            "id": "a0461e62df5f1a49b648031704967bb2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "It might be fun to make a coding standard that makes the code on a page look like a two dimensional picture, with each page having a sort of 'look' about it that would help readers identify its function.  A [[Two Dimensional Coding]] standard could be rather fun.",
            "id": "36995a92b2c090c7c3b6ce908189c9da"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "I use a variant of the \"Spaces, not tabs\" rule, which specifies monospaced font (critical for ASCII-art diagrams ;-), 8-column tab stops, and strict space/tab equivalence (usually accompanied by a script that detects and prevents tabs in string literals).  Forbidding tabs completely in source code (but alas, not Makefiles) looks a lot easier.  Who knew tabs could be so annoying?",
            "id": "6274a440764c293aaa1ee169d788868a"
          },
          {
            "type": "html",
            "text": "\nThe only other rules I have ever cared about:",
            "id": "86095901f07c4add3e9b6d85f83df2cf"
          },
          {
            "type": "html",
            "text": " Be locally consistent with indentation and variable names (if they used 4-space-indentation and brace-cuddling in the Foo module but 8-space-indentation, tabs, and no-brace-cuddling in the Bar module, so do you)",
            "id": "64b01378704f19f3ce02f7ea6bb9b817"
          },
          {
            "type": "html",
            "text": " Given a choice between two equivalent constructions, pick the one that is less ambiguous to a human reader (so use \"(3 * 5) + 7\" instead of \"3 * 5 + 7\").  ",
            "id": "0b4af894c5ac34cd28bb4a51f2072875"
          },
          {
            "type": "html",
            "text": " All style rules are negotiable.  Including this one.",
            "id": "a0e68b887385d7eb34c7d211e3889d31"
          },
          {
            "type": "html",
            "text": "\nIMHO all coding standards should have a specified and specific scope:  \"for Tcl  code on the Foo product\" or \"for programs that will be built by the Borken<tm> Brand Compiler or ported to BorkenOS<tm>\" or \"for sample source code that will be shipped as part of the documentation of our library product.\"",
            "id": "1712e857a73f98c85e05b2f29d891dfc"
          },
          {
            "type": "html",
            "text": "\nOne coding standard probably can't be sanely applied to 1000 developers using a dozen programming languages, two dozen natural (human) languages, half a dozen toolchains, and uncounted hardware platforms, unless it's extremely long (too long to read) or extremely short (too short to contain any useful information).  I try to imagine what a [[Coding Standard]] suitable for the Debian project would look like.  Even a [[Coding Standard]] that handles two different programming languages for a half dozen developers starts to look overly bureaucratic if not downright silly.  Shorter is better, the best is as short as possible...but no shorter.",
            "id": "c3cd107af37a531b199f51563b55eb22"
          },
          {
            "type": "html",
            "text": "--[[Zygo Blaxell]]",
            "id": "6f757d8c6938961f7be0726e94ff9ba7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "On my current contract, we have been able to distill the bulk of our (Java) coding standards into a two-column, single-page Word document.  There are a few lines of explicit text, but otherwise the rest of the document demonstrates the standard through code.  You do have to do a little reading between the lines.",
            "id": "3e84ff49b5e47ed4dfeb73658bb32084"
          },
          {
            "type": "html",
            "text": "\nWe spent one hour as a team to run through the contentious points, then drafted an initial standards document.  The standard can be reviewed at iteration retrospectives and updated as often as necessary.",
            "id": "0d48ebb7a503ad13c821ee1d0e592681"
          },
          {
            "type": "html",
            "text": "\nOne sheet fits nicely onto a wall or the side of a monitor, and after a month or so of adherence it can be removed.",
            "id": "2fa7fab7620e975a2b09412bc8219ecf"
          },
          {
            "type": "html",
            "text": "--[[Jeff Langr]]",
            "id": "63a31fb8c051263a33caca8c3bb7410e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "\nI actually wrote a coding standard for Java. And this was only because I had to, and if it wasn't done by me, it could have been done for the worse. The whole point is to make it minimal. For example I have not specified the alignment of braces so that all following variants are \"legal\":",
            "id": "4618c03f37c9fcc5da5393d7342af109"
          },
          {
            "type": "code",
            "text": " if(condition)\n {\n   //big block\n }",
            "id": "51cac8b91ea7b148a7d205e4d2843d96"
          },
          {
            "type": "code",
            "text": " if (condition) { shortBlock(); }",
            "id": "4f90b021b8a390af82ac1dec61fed266"
          },
          {
            "type": "code",
            "text": " if (condition) { statement1;\n                  statement2 ; }\n if (condition) \n     { statement1;\n       statement2;\n       statement3; }",
            "id": "3163d233720320bf64be5a1a27a517b0"
          },
          {
            "type": "html",
            "text": "\nAnything that makes the code nicer to read (of course in the subjective judgement of the guy who writes the code), is allowed. Overly restrictive or overly specific coding standards are kind of stupid, IMHO. For example I read in one coding standard that the choice operator ? : should not be used at all. --Costin",
            "id": "9cc51597e6f3e42d220df5d9d3de815b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "I found myself being depressed and starting to make my code sad.\nIt's when I invented [[Positive Programming]].",
            "id": "2256eb072993f257848b87ed404ccb7a"
          },
          {
            "type": "html",
            "text": "\nHere are the rules I found out :",
            "id": "ae201f83236343b59c13a5d11fabc0f7"
          },
          {
            "type": "html",
            "text": "\n1)Prefer positive first. This makes you not see the bad part of it because it's else",
            "id": "7ec42e7b1f99ef6f129a8ef66e7e8925"
          },
          {
            "type": "code",
            "text": " if (happy) then\n  ...\n else\n  ...",
            "id": "5a17f7d66870c45903be00e05ac0ea0a"
          },
          {
            "type": "code",
            "text": " instead of :",
            "id": "5ee09d972be0ac504911c88ecce8b8f3"
          },
          {
            "type": "code",
            "text": " if (unhappy) then\n  ...\n else\n  ...",
            "id": "5764f31d49b3d5bff1e869765a10c58e"
          },
          {
            "type": "html",
            "text": "\n2)Replace negative variable names with positive ones.",
            "id": "0a263dcd4d3171d8066da47b9b7527b2"
          },
          {
            "type": "code",
            "text": " happy = true\n if (happy) then\n  ...",
            "id": "242a20a81087c99e45a9d4e0f587a7bb"
          },
          {
            "type": "code",
            "text": " instead of :",
            "id": "5ee09d972be0ac504911c88ecce8b8f3"
          },
          {
            "type": "code",
            "text": " unhappy = false\n if (not unhappy) then\n  ...",
            "id": "25533501bcc51168b53aaf597c483771"
          },
          {
            "type": "html",
            "text": "\nMore rules to be defined :)",
            "id": "13abd11969f40bce7c2f1337a7bdb37f"
          },
          {
            "type": "html",
            "text": "\nmailto:zimba_AT_@oree.ch",
            "id": "fcf0b37295fbc69fa06e3c534131361e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "\nI have just put together a Java coding standards document.  Instead of listing hundreds of rules about layout and formatting we just leave that up to an automated tool like [[Check Style]] to pick up.  The document concentrates on subtler more fundamental standards which rely on the skill of the developer and (importantly) reviewer to enforce.",
            "id": "9b16d5100a533337854285d78b3d50cb"
          },
          {
            "type": "html",
            "text": "\nSee [[Formal Standards]], [[Coding Standard List]], [[Bad Coding Standards]], [[Coding Style]], [[Coding Conventions]], [[Infospheres Coding Standard For Java]]",
            "id": "3eb628f05e9554e6ea2c1e9d2328b784"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "It seems to me that the requirement for coding standards stems from the problem of separating layout and content. This has been a huge issue on the web, and is now being addressed by xml, xhtml, and css. Couldn't a similar approach be taken on code? This way everyone can code with a standard that feels natural to them, and everyone else can read the code as they would like it.",
            "id": "626eb457ef29a5939f4943f5c94e5f41"
          },
          {
            "type": "html",
            "text": "<i>IMHO, coding standards only makes sense for pair programming (since otherwise you can use indent and similar tools), and when pair programming, the approach you suggest wouldn't solve anything.</i>",
            "id": "9f46b13c0796d86e1d9f4676a8cea729"
          },
          {
            "type": "html",
            "text": "\nGiven further thought, even if it would solve matters of layout (tabs vs. spaces and how many, where does the '{' go?), it would not be able to solve matters such as variable naming conventions.",
            "id": "52ec3f050a64d99a8d162f8de8e4010c"
          },
          {
            "type": "html",
            "text": "\nAs you say, this wouldn't be of great use when it comes to pair programming, but improving code readability for others is always a plus. Consider a developer that leaves a project, and all his code is in a written with a very different coding standard. Other developers that wish to pick up where he left off will not be severely hindered by this, but it will be an annoyance.",
            "id": "f3e5ffa28f4f1483cd42f578f179c5d7"
          },
          {
            "type": "html",
            "text": "<i>Why not just run run it through a [[Pretty Print]]er, run the full regression tests, then get on with editing it? This also only solves the layout issue, but variable renaming can also be done with a suitable code browser.</i>",
            "id": "cbb780926e5d58b435b5cde77f590364"
          },
          {
            "type": "html",
            "text": "\nSounds reasonable to me.",
            "id": "51e2780e2f9a2d35838c7e4f48645481"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "A few years ago I put together some white papers on engineering and software design process. One of them covered coding guidelines as a part of the overall process of creating a product. See the papers at [http://www.parsecsystemsinc.com/WhitePapers.html www.parsecsystemsinc.com] for a distillation of lots of wisdom filtered off this board and other Internet sources.",
            "id": "8a954dba176b9d9c4c5694e44bfc9309"
          },
          {
            "type": "html",
            "text": "\nNote that the coding guidelines include some specifics that I don't particularly like or use myself, but this paper is left over from a project where a buddy of mine was the technical lead. He was in the position of choosing one standard for coding, and we all used what he came up with. That's how it works, you know.",
            "id": "06457eb3b12c758aa78f636e99e7092d"
          },
          {
            "type": "html",
            "text": "-- [[Marty Schrader]]",
            "id": "432f7e5d23572232f1a6b06cd5b6ca83"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "Coding standards can destroy people's ability to work. I have a significant cognitive deficits in the area of memory and visual tracking. If I am allowed to arrange my code in two dimensions, then my eyes can track it and not get confused by the right hand margins of identifiers, and if is is in two dimension, I can see it all on one screen in front of me at the same time. If I have to scroll I forget immediately what was on the previous page, and if the identifiers are not lined up I spend too much mental energy trying to parse them mentally to understand the program.",
            "id": "d7681dc6ad00af3a51517da4ec53529f"
          },
          {
            "type": "html",
            "text": "\nFor example this works:",
            "id": "60fa6eb0db06a3fec00e1facdd8141e1"
          },
          {
            "type": "code",
            "text": " consumer.ConsumerFirstName  = txtFirstName.Text ;\n consumer.ConsumerMiddleName = txtMiddleName.Text;\n consumer.ConsumerLastName   = txtLastName.Text  ;\n consumer.CreateDate         = date              ;",
            "id": "2b215fae30761d73e40f36a870bd74e2"
          },
          {
            "type": "html",
            "text": "This does not:",
            "id": "34b73a5d527de71e513321df1e3b028e"
          },
          {
            "type": "code",
            "text": " consumer.ConsumerFirstName = txtFirstName.Text;\n consumer.ConsumerMiddleName = txtMiddleName.Text;\n consumer.ConsumerLastName = txtLastName.Text;\n consumer.CreateDate = date;",
            "id": "fa43fe9f5a375f22ba38edee335ba7fa"
          },
          {
            "type": "html",
            "text": "If the coding standard forces the second kind of program rather than the first, I can't program. -- [[Jon Grover]]",
            "id": "c4f0b8fef5b4130ceba9b95448b6be04"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2a800a670f2a2bad32674c0ad033849d"
          },
          {
            "type": "html",
            "text": "[[Category Coding]]",
            "id": "8ab57dc408fd4bf1d8483b021362a0db"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CodingStandard c2.com]",
            "id": "ab6048a82a392ee52456a14828253ce3"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628171201662
    }
  ]
}