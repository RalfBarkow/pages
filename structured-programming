{
  "title": "Structured Programming",
  "story": [
    {
      "type": "html",
      "text": "Structured Programming is a foundation of [[Modular Programming]] and [[Object Oriented Programming]], as it's assumed that individual methods are structured (i.e., coded with only #1 to #3 above).  (<i>Of course, plenty of people write garbage in [[Object Oriented Programming Language]]s.</i>)  (Yes, but it's structured garbage!) (Not necessarily, but it's encapsulated within the object.)",
      "id": "37b2b3633beb7eb5c7c725880dcf00ac"
    },
    {
      "type": "html",
      "text": "\nIt generally involves:",
      "id": "59499b6a5e62cad40ae8faecf09dec8a"
    },
    {
      "type": "html",
      "text": " Avoidance of [[Go To]]'s. Nested conditionals and loops are used instead.",
      "id": "62df2c07bba47f13ec5bab6e183dc7de"
    },
    {
      "type": "html",
      "text": " Use of functions or subroutines to break up large sections of code and/or to factor out repeating behavior to a single spot.",
      "id": "f12de1df11e9bd6fc0818a35030e195d"
    },
    {
      "type": "html",
      "text": " Code structuring via [[Stepwise Refinement]] (as apposed to say grouping by \"objects\" or domain nouns.)",
      "id": "5f417e9a3019c508dab69d4e0032bd19"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b147780f0f61c4108c9f114f40f13827"
    },
    {
      "type": "html",
      "text": "\"...it just seems like good programming practice to me.\" -- [[Chuck Moore]], on one of Dijkstra's papers on [[Structured Programming]]",
      "id": "ff82261ca52a46eb04e657794e214f81"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b147780f0f61c4108c9f114f40f13827"
    },
    {
      "type": "html",
      "text": "\n[[Cee Language]]/[[Cee Plus Plus]] programmers often casually violate the rules of Structured Programming in minor ways, and rarely suffer major problems from it, if their programs are otherwise modular or OO. Structured Programming is a non-issue in the [[Smalltalk Language]], as methods are so small that no rational person would use \"goto,\" even if the language supported it. <i>(However, multiple exit points are supported and frequently used in Smalltalk, so Smalltalk programs are rarely \"structured\".)</i> -- [[Jeff Grigg]]",
      "id": "b732c1604108a2c88204a54d55bf3ec9"
    },
    {
      "type": "html",
      "text": "\nBut aren't those forbidden constructs exactly what exceptions give us?  Alternatively, aren't most of the justifiable uses of [[Go To]] in [[Cee Language]] to do with simulating exceptions?",
      "id": "d3a14f5e5f23f93adaa0ee8ad8cb9f19"
    },
    {
      "type": "html",
      "text": "\nI think the answer is that the one additional structure missing from [[Pascal Language]] is abrupt termination on errors, and exceptions add this. -- [[Martin Pool]]",
      "id": "2cccc96d16cd8ed8f08f751c0c353847"
    },
    {
      "type": "html",
      "text": "\nI would say that exceptions violate the rules of structured programming. But go ahead and use them: they're a good way to handle unusual [[Exceptional Conditions]]. Any program written with exceptions could have been written without them, using only the constructs (#1 to #3) above. But I think the program with exceptions is likely to be more easily understood and maintained by humans. (Like [[All Panaceas Become Poison]].) -- [[Jeff Grigg]]",
      "id": "5f913a980e644d36650a4ab0bb1da2d8"
    },
    {
      "type": "html",
      "text": "\nMy view is that structured programming is the opposite of <i>ad hoc</i> programming. In structured programming, we shift program control in a very limited, prescribed set of ways. By providing a highly controlled manner in which they operate, exceptions would fit with this concept of structured programming. The point is not that \"[[Go To]] is bad,\" the point is that \"unrestricted use of go to is bad.\" -- [[Wayne Mack]]",
      "id": "03bc39d6c15ebaa347f589318abd68d7"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b147780f0f61c4108c9f114f40f13827"
    },
    {
      "type": "html",
      "text": "\nNassi-Shneiderman diagrams support Structured Programming, but they do not enforce it. Chapin charts were created to enforce Structured Programming where forbidden constructs are impossible to express. ",
      "id": "be647affac6bff1973597ee7bff67cb5"
    },
    {
      "type": "html",
      "text": "\n[[Jackson Structured Programming]] (JSP) and [[Jackson Structured Design]] (JSD) also fall within the structured programming philosophy.",
      "id": "47e73e077e0841510f813f5a41309a5a"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b147780f0f61c4108c9f114f40f13827"
    },
    {
      "type": "html",
      "text": "\nIf multiple exits are bad, does this mean we shouldn't use [[Guard Clause]]s?",
      "id": "194e42d7b1e64878e9a88ed26a842388"
    },
    {
      "type": "html",
      "text": "<i>Multiple exits aren't bad. This is an old and outdated paradigm. [[Structured Programming]], taken to an extreme or pure is some of the nastiest code I've ever had to read. It's amazing what people will do to avoid a perfectly reasonable break or early return. JMTC.</i>",
      "id": "5a0b827dc75dc6580ddb1221c316f2b2"
    },
    {
      "type": "html",
      "text": "\n[[Guard Clause]]s do not require multiple exits; they can be implemented either way. [Note: This is merely intended as a clarification of guard clauses and does not imply a position regarding multiple exits.]",
      "id": "d4ad6aa820e2fb655470a4e8a0b58f68"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b147780f0f61c4108c9f114f40f13827"
    },
    {
      "type": "html",
      "text": "\nAs with everything, good ideas are quickly perverted. The need for structured programming stemmed from the total lack of understanding of visual processing at the time. Providing visual structure to your code is a [[Good Thing]] that will speed up development and maintenance. Indentation and color highlighting are two examples.  ",
      "id": "42a16efd3d05e9e5c95a81c380492a87"
    },
    {
      "type": "html",
      "text": "\nA shop a friend of mine had a manager ('way back in '70s) that thought that since [[Cobol Language]] was [[English Language]], paragraphs should be paragraphs. Much like in the newspaper. Try reading that; it was a [[Bad Thing]].",
      "id": "3dad5cc9f532705b5dd798622987de1d"
    },
    {
      "type": "html",
      "text": "\nThe idea behind removing [[Go To]]s was that there is no visual (untextual) cue as to where you're going.",
      "id": "701718f618ab648bfc14f463cef6ebfc"
    },
    {
      "type": "html",
      "text": "\nAnd just because a language is syntactically structured, doesn't mean code for it is visually structured. If we are truly more concerned about human legibility than machine input, then all code should be very pretty and properly indented.  Look at a lot of C/C++/[[Java Language]]/./.. code and tell me it's structured for the human reader.",
      "id": "bd9efcecdec319265f75554f4ae1ba7d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b147780f0f61c4108c9f114f40f13827"
    },
    {
      "type": "html",
      "text": "\nIt should be noted that different people mean different things by [[Structured Programming]]. For instance [[Don Knuth]] famously wrote a paper called [[Structured Programming With Go To Statements]] which argued for where and when [[Go To]] fit with structured programming.",
      "id": "ab8c641240ab3f9abf3d8dc74313cd18"
    },
    {
      "type": "html",
      "text": "\nSee also Internal Loop Exits Are Ok. (Yeah, tooting my own horn, so sue me.) -- [[Ben Tilly]]",
      "id": "6d62dd90a0e8623a591b9648e641f8d6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b147780f0f61c4108c9f114f40f13827"
    },
    {
      "type": "html",
      "text": "\nThe last bullet point used to read",
      "id": "34565c1410bfe122a48da605aae40a30"
    },
    {
      "type": "html",
      "text": " Multiple entry points to a function/procedure/subroutine.  (...which is hard to do outside [[Assembly Language]].  ;-)",
      "id": "857a0f14cb8ab872f427b343de6971c5"
    },
    {
      "type": "html",
      "text": "\nBut it isn't all that hard, actually. FORTRAN ([[Fortran Language]]) and PL/I ([[Pli Language]]) explicitly supported multiple entry points to a procedure, and this mechanism was exploited in early approaches to [[Modular Programming]] ([[Barbara Liskov]] taught her students this technique). Nowadays we use complimentary [complementary?] names like '[[Poly Morphism]]' and 'overloading' for this sort of thing, but that's all that methods are: multiple entry points into the same (virtual) procedure.",
      "id": "e4edecd6da6d4af18674516b5293e964"
    },
    {
      "type": "html",
      "text": "<i>Multiple entry points can be done in any language that supports labels and [[Go To]] commands; this includes a lot more languages than just [[Assembly Language]].</i>",
      "id": "639826fca5bf8f0a81a06e015ad9ef48"
    },
    {
      "type": "html",
      "text": "\nYes, but the point is that modern interpretations of multiple-entry are an essential piece of current [[Best Practice]]s. To repeat what was written in the discussion about multiple exit points, structured programming is an old and outmoded paradigm. It is a kind of [[Cyber Fundamentalism]], that says \"Stick to the [[Straight And Narrow Path]], and your code will be without sin.\"  ",
      "id": "2282999070a1ade173fa0824b64e53cb"
    },
    {
      "type": "html",
      "text": "\nIf you insist that your [[Coding Conventions]] follow the rules of structured programming, you reveal yourself as a martinet who sees rules as a way to crush independence and creative thought, rather than as tools to improve productivity and foster effective communication.",
      "id": "dd26f5a74cbb124adcc1d583be8d0541"
    },
    {
      "type": "html",
      "text": "<i>There is little advantage to \"independence and creative thought\" in the ordering of program statements. It is much better to be independent and creative in the solution of user problems.</i>",
      "id": "c260ed13ae49701c8b4f49b02c9a672f"
    },
    {
      "type": "html",
      "text": "\nWriting software should be treated as a creative activity. Just think about it: the software that's interesting to make is software that hasn't been made before. Most other engineering disciplines are about building things that have been built before. -- [[Richard Gabriel]], quoted from [http://java.sun.com/features/2002/11/gabriel_qa.html java.sun.com]",
      "id": "f8da14ccec8d20baec568e1dfd4b628e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b147780f0f61c4108c9f114f40f13827"
    },
    {
      "type": "html",
      "text": "See [[Software Engineering Is Creative]], [[Procedural Methodologies]].",
      "id": "9903b89fe8dc9776dca66f1ef3c8a5c6"
    },
    {
      "type": "html",
      "text": "\nAlso of interest: [[Go To]], [[Go To Problem]], [[Goto Considered Harmful]], [[Stepwise Refinement]]",
      "id": "abf8d60084c77f5be89c8545d2d1ed92"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "b147780f0f61c4108c9f114f40f13827"
    },
    {
      "type": "html",
      "text": "[[Category Coding Conventions]] [[Category Coding Issues]] [[Category Jargon]] [[Programming Paradigm]] [[Category Data Orientation]]",
      "id": "d691dc71ddece801c93cea21d560da5c"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?StructuredProgramming c2.com]",
      "id": "9f98820e4f864b8dd3d3a444b35b98cb"
    }
  ],
  "journal": [
    {
      "date": 1417027605000,
      "id": "6a6a46fe7f0422819f97230c645a48e5",
      "type": "create",
      "item": {
        "title": "Structured Programming",
        "story": [
          {
            "type": "html",
            "text": "Structured Programming is a foundation of [[Modular Programming]] and [[Object Oriented Programming]], as it's assumed that individual methods are structured (i.e., coded with only #1 to #3 above).  (<i>Of course, plenty of people write garbage in [[Object Oriented Programming Language]]s.</i>)  (Yes, but it's structured garbage!) (Not necessarily, but it's encapsulated within the object.)",
            "id": "37b2b3633beb7eb5c7c725880dcf00ac"
          },
          {
            "type": "html",
            "text": "\nIt generally involves:",
            "id": "59499b6a5e62cad40ae8faecf09dec8a"
          },
          {
            "type": "html",
            "text": " Avoidance of [[Go To]]'s. Nested conditionals and loops are used instead.",
            "id": "62df2c07bba47f13ec5bab6e183dc7de"
          },
          {
            "type": "html",
            "text": " Use of functions or subroutines to break up large sections of code and/or to factor out repeating behavior to a single spot.",
            "id": "f12de1df11e9bd6fc0818a35030e195d"
          },
          {
            "type": "html",
            "text": " Code structuring via [[Stepwise Refinement]] (as apposed to say grouping by \"objects\" or domain nouns.)",
            "id": "5f417e9a3019c508dab69d4e0032bd19"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b147780f0f61c4108c9f114f40f13827"
          },
          {
            "type": "html",
            "text": "\"...it just seems like good programming practice to me.\" -- [[Chuck Moore]], on one of Dijkstra's papers on [[Structured Programming]]",
            "id": "ff82261ca52a46eb04e657794e214f81"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b147780f0f61c4108c9f114f40f13827"
          },
          {
            "type": "html",
            "text": "\n[[Cee Language]]/[[Cee Plus Plus]] programmers often casually violate the rules of Structured Programming in minor ways, and rarely suffer major problems from it, if their programs are otherwise modular or OO. Structured Programming is a non-issue in the [[Smalltalk Language]], as methods are so small that no rational person would use \"goto,\" even if the language supported it. <i>(However, multiple exit points are supported and frequently used in Smalltalk, so Smalltalk programs are rarely \"structured\".)</i> -- [[Jeff Grigg]]",
            "id": "b732c1604108a2c88204a54d55bf3ec9"
          },
          {
            "type": "html",
            "text": "\nBut aren't those forbidden constructs exactly what exceptions give us?  Alternatively, aren't most of the justifiable uses of [[Go To]] in [[Cee Language]] to do with simulating exceptions?",
            "id": "d3a14f5e5f23f93adaa0ee8ad8cb9f19"
          },
          {
            "type": "html",
            "text": "\nI think the answer is that the one additional structure missing from [[Pascal Language]] is abrupt termination on errors, and exceptions add this. -- [[Martin Pool]]",
            "id": "2cccc96d16cd8ed8f08f751c0c353847"
          },
          {
            "type": "html",
            "text": "\nI would say that exceptions violate the rules of structured programming. But go ahead and use them: they're a good way to handle unusual [[Exceptional Conditions]]. Any program written with exceptions could have been written without them, using only the constructs (#1 to #3) above. But I think the program with exceptions is likely to be more easily understood and maintained by humans. (Like [[All Panaceas Become Poison]].) -- [[Jeff Grigg]]",
            "id": "5f913a980e644d36650a4ab0bb1da2d8"
          },
          {
            "type": "html",
            "text": "\nMy view is that structured programming is the opposite of <i>ad hoc</i> programming. In structured programming, we shift program control in a very limited, prescribed set of ways. By providing a highly controlled manner in which they operate, exceptions would fit with this concept of structured programming. The point is not that \"[[Go To]] is bad,\" the point is that \"unrestricted use of go to is bad.\" -- [[Wayne Mack]]",
            "id": "03bc39d6c15ebaa347f589318abd68d7"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b147780f0f61c4108c9f114f40f13827"
          },
          {
            "type": "html",
            "text": "\nNassi-Shneiderman diagrams support Structured Programming, but they do not enforce it. Chapin charts were created to enforce Structured Programming where forbidden constructs are impossible to express. ",
            "id": "be647affac6bff1973597ee7bff67cb5"
          },
          {
            "type": "html",
            "text": "\n[[Jackson Structured Programming]] (JSP) and [[Jackson Structured Design]] (JSD) also fall within the structured programming philosophy.",
            "id": "47e73e077e0841510f813f5a41309a5a"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b147780f0f61c4108c9f114f40f13827"
          },
          {
            "type": "html",
            "text": "\nIf multiple exits are bad, does this mean we shouldn't use [[Guard Clause]]s?",
            "id": "194e42d7b1e64878e9a88ed26a842388"
          },
          {
            "type": "html",
            "text": "<i>Multiple exits aren't bad. This is an old and outdated paradigm. [[Structured Programming]], taken to an extreme or pure is some of the nastiest code I've ever had to read. It's amazing what people will do to avoid a perfectly reasonable break or early return. JMTC.</i>",
            "id": "5a0b827dc75dc6580ddb1221c316f2b2"
          },
          {
            "type": "html",
            "text": "\n[[Guard Clause]]s do not require multiple exits; they can be implemented either way. [Note: This is merely intended as a clarification of guard clauses and does not imply a position regarding multiple exits.]",
            "id": "d4ad6aa820e2fb655470a4e8a0b58f68"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b147780f0f61c4108c9f114f40f13827"
          },
          {
            "type": "html",
            "text": "\nAs with everything, good ideas are quickly perverted. The need for structured programming stemmed from the total lack of understanding of visual processing at the time. Providing visual structure to your code is a [[Good Thing]] that will speed up development and maintenance. Indentation and color highlighting are two examples.  ",
            "id": "42a16efd3d05e9e5c95a81c380492a87"
          },
          {
            "type": "html",
            "text": "\nA shop a friend of mine had a manager ('way back in '70s) that thought that since [[Cobol Language]] was [[English Language]], paragraphs should be paragraphs. Much like in the newspaper. Try reading that; it was a [[Bad Thing]].",
            "id": "3dad5cc9f532705b5dd798622987de1d"
          },
          {
            "type": "html",
            "text": "\nThe idea behind removing [[Go To]]s was that there is no visual (untextual) cue as to where you're going.",
            "id": "701718f618ab648bfc14f463cef6ebfc"
          },
          {
            "type": "html",
            "text": "\nAnd just because a language is syntactically structured, doesn't mean code for it is visually structured. If we are truly more concerned about human legibility than machine input, then all code should be very pretty and properly indented.  Look at a lot of C/C++/[[Java Language]]/./.. code and tell me it's structured for the human reader.",
            "id": "bd9efcecdec319265f75554f4ae1ba7d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b147780f0f61c4108c9f114f40f13827"
          },
          {
            "type": "html",
            "text": "\nIt should be noted that different people mean different things by [[Structured Programming]]. For instance [[Don Knuth]] famously wrote a paper called [[Structured Programming With Go To Statements]] which argued for where and when [[Go To]] fit with structured programming.",
            "id": "ab8c641240ab3f9abf3d8dc74313cd18"
          },
          {
            "type": "html",
            "text": "\nSee also Internal Loop Exits Are Ok. (Yeah, tooting my own horn, so sue me.) -- [[Ben Tilly]]",
            "id": "6d62dd90a0e8623a591b9648e641f8d6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b147780f0f61c4108c9f114f40f13827"
          },
          {
            "type": "html",
            "text": "\nThe last bullet point used to read",
            "id": "34565c1410bfe122a48da605aae40a30"
          },
          {
            "type": "html",
            "text": " Multiple entry points to a function/procedure/subroutine.  (...which is hard to do outside [[Assembly Language]].  ;-)",
            "id": "857a0f14cb8ab872f427b343de6971c5"
          },
          {
            "type": "html",
            "text": "\nBut it isn't all that hard, actually. FORTRAN ([[Fortran Language]]) and PL/I ([[Pli Language]]) explicitly supported multiple entry points to a procedure, and this mechanism was exploited in early approaches to [[Modular Programming]] ([[Barbara Liskov]] taught her students this technique). Nowadays we use complimentary [complementary?] names like '[[Poly Morphism]]' and 'overloading' for this sort of thing, but that's all that methods are: multiple entry points into the same (virtual) procedure.",
            "id": "e4edecd6da6d4af18674516b5293e964"
          },
          {
            "type": "html",
            "text": "<i>Multiple entry points can be done in any language that supports labels and [[Go To]] commands; this includes a lot more languages than just [[Assembly Language]].</i>",
            "id": "639826fca5bf8f0a81a06e015ad9ef48"
          },
          {
            "type": "html",
            "text": "\nYes, but the point is that modern interpretations of multiple-entry are an essential piece of current [[Best Practice]]s. To repeat what was written in the discussion about multiple exit points, structured programming is an old and outmoded paradigm. It is a kind of [[Cyber Fundamentalism]], that says \"Stick to the [[Straight And Narrow Path]], and your code will be without sin.\"  ",
            "id": "2282999070a1ade173fa0824b64e53cb"
          },
          {
            "type": "html",
            "text": "\nIf you insist that your [[Coding Conventions]] follow the rules of structured programming, you reveal yourself as a martinet who sees rules as a way to crush independence and creative thought, rather than as tools to improve productivity and foster effective communication.",
            "id": "dd26f5a74cbb124adcc1d583be8d0541"
          },
          {
            "type": "html",
            "text": "<i>There is little advantage to \"independence and creative thought\" in the ordering of program statements. It is much better to be independent and creative in the solution of user problems.</i>",
            "id": "c260ed13ae49701c8b4f49b02c9a672f"
          },
          {
            "type": "html",
            "text": "\nWriting software should be treated as a creative activity. Just think about it: the software that's interesting to make is software that hasn't been made before. Most other engineering disciplines are about building things that have been built before. -- [[Richard Gabriel]], quoted from [http://java.sun.com/features/2002/11/gabriel_qa.html java.sun.com]",
            "id": "f8da14ccec8d20baec568e1dfd4b628e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b147780f0f61c4108c9f114f40f13827"
          },
          {
            "type": "html",
            "text": "See [[Software Engineering Is Creative]], [[Procedural Methodologies]].",
            "id": "9903b89fe8dc9776dca66f1ef3c8a5c6"
          },
          {
            "type": "html",
            "text": "\nAlso of interest: [[Go To]], [[Go To Problem]], [[Goto Considered Harmful]], [[Stepwise Refinement]]",
            "id": "abf8d60084c77f5be89c8545d2d1ed92"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "b147780f0f61c4108c9f114f40f13827"
          },
          {
            "type": "html",
            "text": "[[Category Coding Conventions]] [[Category Coding Issues]] [[Category Jargon]] [[Programming Paradigm]] [[Category Data Orientation]]",
            "id": "d691dc71ddece801c93cea21d560da5c"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?StructuredProgramming c2.com]",
            "id": "9f98820e4f864b8dd3d3a444b35b98cb"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1644990933005
    }
  ]
}