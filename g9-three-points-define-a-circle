{
  "title": "G9 Three Points Define a Circle",
  "story": [
    {
      "type": "paragraph",
      "id": "484e092159df2d01",
      "text": "Explain what this does."
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": " var data = {\n    x1: 100,\n    y1: 100,\n    x2: -100,\n    y2: 100,\n    x3: 0,\n    y3: -50,\n}\n\nfunction invert(m){\n    var [[a,b], [c,d]] = m\n    var det = a*d - b*c\n    return [[d/det, -b/det], [-c/det, a/det]]\n}\n\nfunction multiply(A, x){\n    var [[a,b], [c,d]] = A\n    var [x, y] = x\n    return [a*x + b*y, c*x+d*y]\n}\n\n\nfunction render(data, ctx){\n    \n    var mx1 = (data.x1 + data.x2)/2\n    var my1 = (data.y1 + data.y2)/2\n    var dy1 = data.y1 - data.y2\n    var dx1 = -(data.x1 - data.x2)\n\n    var mx2 = (data.x3 + data.x2)/2\n    var my2 = (data.y3 + data.y2)/2\n    var dy2 = data.y2 - data.y3\n    var dx2 = -(data.x2 - data.x3)\n\n    var I = invert([[dy1, -dy2], \n                    [dx1, -dx2]])\n    var [a,b] = multiply(I, [mx2-mx1, my2-my1])\n\n    ctx.line(\n        data.x1,\n        data.y1,\n        data.x2,\n        data.y2,\n        {stroke: 'red'})\n\n    ctx.line(\n        data.x3,\n        data.y3,\n        data.x2,\n        data.y2,\n        {stroke: 'blue'})\n\n    ctx.line(\n        mx1,\n        my1,\n        mx1 + 2 * a * dy1,\n        my1 + 2 * a * dx1,\n        {stroke: 'red'})\n\n    ctx.line(\n        mx2,\n        my2,\n        mx2 + 2 * b * dy2,\n        my2 + 2 * b * dx2,\n        {stroke: 'blue'})\n\n    var cx = mx1 + a*dy1\n    var cy = my1 + a*dx1\n\n    var dx = cx - data.x1\n    var dy = cy - data.y1\n\n    ctx.point(cx, cy)\n\n    ctx.circle(cx, cy, Math.sqrt(dx*dx + dy*dy), {\n        fill: 'none',\n        stroke: 'green',\n        'stroke-width': 3\n    })\n    ctx.point(data.x1, data.y1)\n    ctx.point(data.x2, data.y2)\n\n    ctx.point(data.x3, data.y3)\n}"
    },
    {
      "type": "paragraph",
      "id": "caa626ac93aa7d4c",
      "text": "In the frame below we can view the results."
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "//wiki.ralfbarkow.ch/assets/pages/g9-demos/run-g9.html\nHEIGHT 160"
    },
    {
      "type": "paragraph",
      "id": "8155a586f5842b0f",
      "text": "See also [[Static Import Snippet]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "G9 Three Points Define a Circle",
        "story": [
          {
            "type": "paragraph",
            "id": "484e092159df2d01",
            "text": "Explain what this does."
          },
          {
            "type": "code",
            "id": "5eb6b67568179aa3",
            "text": "// Code that does it.\n\nexport async function emit(el) {\n el.innerHTML = 2 + 3\n}\n\n"
          },
          {
            "type": "paragraph",
            "id": "caa626ac93aa7d4c",
            "text": "In the frame below we can view the results."
          },
          {
            "type": "frame",
            "id": "6cf52409eec3988c",
            "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
          },
          {
            "type": "paragraph",
            "id": "8155a586f5842b0f",
            "text": "See also [[Static Import Snippet]]"
          }
        ]
      },
      "date": 1650439097132
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": " var data = {\n    x1: 100,\n    y1: 100,\n    x2: -100,\n    y2: 100,\n    x3: 0,\n    y3: -50,\n}\n\nfunction invert(m){\n    var [[a,b], [c,d]] = m\n    var det = a*d - b*c\n    return [[d/det, -b/det], [-c/det, a/det]]\n}\n\nfunction multiply(A, x){\n    var [[a,b], [c,d]] = A\n    var [x, y] = x\n    return [a*x + b*y, c*x+d*y]\n}\n\n\nfunction render(data, ctx){\n    \n    var mx1 = (data.x1 + data.x2)/2\n    var my1 = (data.y1 + data.y2)/2\n    var dy1 = data.y1 - data.y2\n    var dx1 = -(data.x1 - data.x2)\n\n    var mx2 = (data.x3 + data.x2)/2\n    var my2 = (data.y3 + data.y2)/2\n    var dy2 = data.y2 - data.y3\n    var dx2 = -(data.x2 - data.x3)\n\n    var I = invert([[dy1, -dy2], \n                    [dx1, -dx2]])\n    var [a,b] = multiply(I, [mx2-mx1, my2-my1])\n\n    ctx.line(\n        data.x1,\n        data.y1,\n        data.x2,\n        data.y2,\n        {stroke: 'red'})\n\n    ctx.line(\n        data.x3,\n        data.y3,\n        data.x2,\n        data.y2,\n        {stroke: 'blue'})\n\n    ctx.line(\n        mx1,\n        my1,\n        mx1 + 2 * a * dy1,\n        my1 + 2 * a * dx1,\n        {stroke: 'red'})\n\n    ctx.line(\n        mx2,\n        my2,\n        mx2 + 2 * b * dy2,\n        my2 + 2 * b * dx2,\n        {stroke: 'blue'})\n\n    var cx = mx1 + a*dy1\n    var cy = my1 + a*dx1\n\n    var dx = cx - data.x1\n    var dy = cy - data.y1\n\n    ctx.point(cx, cy)\n\n    ctx.circle(cx, cy, Math.sqrt(dx*dx + dy*dy), {\n        fill: 'none',\n        stroke: 'green',\n        'stroke-width': 3\n    })\n    ctx.point(data.x1, data.y1)\n    ctx.point(data.x2, data.y2)\n\n    ctx.point(data.x3, data.y3)\n}"
      },
      "date": 1650439115693
    },
    {
      "type": "edit",
      "id": "6cf52409eec3988c",
      "item": {
        "type": "frame",
        "id": "6cf52409eec3988c",
        "text": "//wiki.ralfbarkow.ch/assets/pages/g9-demos/run-g9.html\nHEIGHT 160"
      },
      "date": 1650439138408
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": " const data = {\n    x1: 100,\n    y1: 100,\n    x2: -100,\n    y2: 100,\n    x3: 0,\n    y3: -50,\n}\n\nfunction invert(m){\n    var [[a,b], [c,d]] = m\n    var det = a*d - b*c\n    return [[d/det, -b/det], [-c/det, a/det]]\n}\n\nfunction multiply(A, x){\n    var [[a,b], [c,d]] = A\n    var [x, y] = x\n    return [a*x + b*y, c*x+d*y]\n}\n\n\nfunction render(data, ctx){\n    \n    var mx1 = (data.x1 + data.x2)/2\n    var my1 = (data.y1 + data.y2)/2\n    var dy1 = data.y1 - data.y2\n    var dx1 = -(data.x1 - data.x2)\n\n    var mx2 = (data.x3 + data.x2)/2\n    var my2 = (data.y3 + data.y2)/2\n    var dy2 = data.y2 - data.y3\n    var dx2 = -(data.x2 - data.x3)\n\n    var I = invert([[dy1, -dy2], \n                    [dx1, -dx2]])\n    var [a,b] = multiply(I, [mx2-mx1, my2-my1])\n\n    ctx.line(\n        data.x1,\n        data.y1,\n        data.x2,\n        data.y2,\n        {stroke: 'red'})\n\n    ctx.line(\n        data.x3,\n        data.y3,\n        data.x2,\n        data.y2,\n        {stroke: 'blue'})\n\n    ctx.line(\n        mx1,\n        my1,\n        mx1 + 2 * a * dy1,\n        my1 + 2 * a * dx1,\n        {stroke: 'red'})\n\n    ctx.line(\n        mx2,\n        my2,\n        mx2 + 2 * b * dy2,\n        my2 + 2 * b * dx2,\n        {stroke: 'blue'})\n\n    var cx = mx1 + a*dy1\n    var cy = my1 + a*dx1\n\n    var dx = cx - data.x1\n    var dy = cy - data.y1\n\n    ctx.point(cx, cy)\n\n    ctx.circle(cx, cy, Math.sqrt(dx*dx + dy*dy), {\n        fill: 'none',\n        stroke: 'green',\n        'stroke-width': 3\n    })\n    ctx.point(data.x1, data.y1)\n    ctx.point(data.x2, data.y2)\n\n    ctx.point(data.x3, data.y3)\n}"
      },
      "date": 1650439164750
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "const data = {\n    x1: 100,\n    y1: 100,\n    x2: -100,\n    y2: 100,\n    x3: 0,\n    y3: -50,\n}\n\nfunction invert(m){\n    var [[a,b], [c,d]] = m\n    var det = a*d - b*c\n    return [[d/det, -b/det], [-c/det, a/det]]\n}\n\nfunction multiply(A, x){\n    var [[a,b], [c,d]] = A\n    var [x, y] = x\n    return [a*x + b*y, c*x+d*y]\n}\n\n\nfunction render(data, ctx){\n    \n    var mx1 = (data.x1 + data.x2)/2\n    var my1 = (data.y1 + data.y2)/2\n    var dy1 = data.y1 - data.y2\n    var dx1 = -(data.x1 - data.x2)\n\n    var mx2 = (data.x3 + data.x2)/2\n    var my2 = (data.y3 + data.y2)/2\n    var dy2 = data.y2 - data.y3\n    var dx2 = -(data.x2 - data.x3)\n\n    var I = invert([[dy1, -dy2], \n                    [dx1, -dx2]])\n    var [a,b] = multiply(I, [mx2-mx1, my2-my1])\n\n    ctx.line(\n        data.x1,\n        data.y1,\n        data.x2,\n        data.y2,\n        {stroke: 'red'})\n\n    ctx.line(\n        data.x3,\n        data.y3,\n        data.x2,\n        data.y2,\n        {stroke: 'blue'})\n\n    ctx.line(\n        mx1,\n        my1,\n        mx1 + 2 * a * dy1,\n        my1 + 2 * a * dx1,\n        {stroke: 'red'})\n\n    ctx.line(\n        mx2,\n        my2,\n        mx2 + 2 * b * dy2,\n        my2 + 2 * b * dx2,\n        {stroke: 'blue'})\n\n    var cx = mx1 + a*dy1\n    var cy = my1 + a*dx1\n\n    var dx = cx - data.x1\n    var dy = cy - data.y1\n\n    ctx.point(cx, cy)\n\n    ctx.circle(cx, cy, Math.sqrt(dx*dx + dy*dy), {\n        fill: 'none',\n        stroke: 'green',\n        'stroke-width': 3\n    })\n    ctx.point(data.x1, data.y1)\n    ctx.point(data.x2, data.y2)\n\n    ctx.point(data.x3, data.y3)\n}"
      },
      "date": 1650439186937
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "const data = {\n    x1: 100,\n    y1: 100,\n    x2: -100,\n    y2: 100,\n    x3: 0,\n    y3: -50,\n}\n\nconst invert(m){\n    var [[a,b], [c,d]] = m\n    var det = a*d - b*c\n    return [[d/det, -b/det], [-c/det, a/det]]\n}\n\nconst multiply(A, x){\n    var [[a,b], [c,d]] = A\n    var [x, y] = x\n    return [a*x + b*y, c*x+d*y]\n}\n\n\nconst render(data, ctx){\n    \n    var mx1 = (data.x1 + data.x2)/2\n    var my1 = (data.y1 + data.y2)/2\n    var dy1 = data.y1 - data.y2\n    var dx1 = -(data.x1 - data.x2)\n\n    var mx2 = (data.x3 + data.x2)/2\n    var my2 = (data.y3 + data.y2)/2\n    var dy2 = data.y2 - data.y3\n    var dx2 = -(data.x2 - data.x3)\n\n    var I = invert([[dy1, -dy2], \n                    [dx1, -dx2]])\n    var [a,b] = multiply(I, [mx2-mx1, my2-my1])\n\n    ctx.line(\n        data.x1,\n        data.y1,\n        data.x2,\n        data.y2,\n        {stroke: 'red'})\n\n    ctx.line(\n        data.x3,\n        data.y3,\n        data.x2,\n        data.y2,\n        {stroke: 'blue'})\n\n    ctx.line(\n        mx1,\n        my1,\n        mx1 + 2 * a * dy1,\n        my1 + 2 * a * dx1,\n        {stroke: 'red'})\n\n    ctx.line(\n        mx2,\n        my2,\n        mx2 + 2 * b * dy2,\n        my2 + 2 * b * dx2,\n        {stroke: 'blue'})\n\n    var cx = mx1 + a*dy1\n    var cy = my1 + a*dx1\n\n    var dx = cx - data.x1\n    var dy = cy - data.y1\n\n    ctx.point(cx, cy)\n\n    ctx.circle(cx, cy, Math.sqrt(dx*dx + dy*dy), {\n        fill: 'none',\n        stroke: 'green',\n        'stroke-width': 3\n    })\n    ctx.point(data.x1, data.y1)\n    ctx.point(data.x2, data.y2)\n\n    ctx.point(data.x3, data.y3)\n}"
      },
      "date": 1650439234332
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "const data = {\n    x1: 100,\n    y1: 100,\n    x2: -100,\n    y2: 100,\n    x3: 0,\n    y3: -50,\n}\n\nconst invert(m) = {\n    var [[a,b], [c,d]] = m\n    var det = a*d - b*c\n    return [[d/det, -b/det], [-c/det, a/det]]\n}\n\nconst multiply(A, x) = {\n    var [[a,b], [c,d]] = A\n    var [x, y] = x\n    return [a*x + b*y, c*x+d*y]\n}\n\n\nconst render(data, ctx) = {\n    \n    var mx1 = (data.x1 + data.x2)/2\n    var my1 = (data.y1 + data.y2)/2\n    var dy1 = data.y1 - data.y2\n    var dx1 = -(data.x1 - data.x2)\n\n    var mx2 = (data.x3 + data.x2)/2\n    var my2 = (data.y3 + data.y2)/2\n    var dy2 = data.y2 - data.y3\n    var dx2 = -(data.x2 - data.x3)\n\n    var I = invert([[dy1, -dy2], \n                    [dx1, -dx2]])\n    var [a,b] = multiply(I, [mx2-mx1, my2-my1])\n\n    ctx.line(\n        data.x1,\n        data.y1,\n        data.x2,\n        data.y2,\n        {stroke: 'red'})\n\n    ctx.line(\n        data.x3,\n        data.y3,\n        data.x2,\n        data.y2,\n        {stroke: 'blue'})\n\n    ctx.line(\n        mx1,\n        my1,\n        mx1 + 2 * a * dy1,\n        my1 + 2 * a * dx1,\n        {stroke: 'red'})\n\n    ctx.line(\n        mx2,\n        my2,\n        mx2 + 2 * b * dy2,\n        my2 + 2 * b * dx2,\n        {stroke: 'blue'})\n\n    var cx = mx1 + a*dy1\n    var cy = my1 + a*dx1\n\n    var dx = cx - data.x1\n    var dy = cy - data.y1\n\n    ctx.point(cx, cy)\n\n    ctx.circle(cx, cy, Math.sqrt(dx*dx + dy*dy), {\n        fill: 'none',\n        stroke: 'green',\n        'stroke-width': 3\n    })\n    ctx.point(data.x1, data.y1)\n    ctx.point(data.x2, data.y2)\n\n    ctx.point(data.x3, data.y3)\n}"
      },
      "date": 1650439307767
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": " var data = {\n    x1: 100,\n    y1: 100,\n    x2: -100,\n    y2: 100,\n    x3: 0,\n    y3: -50,\n}\n\nfunction invert(m){\n    var [[a,b], [c,d]] = m\n    var det = a*d - b*c\n    return [[d/det, -b/det], [-c/det, a/det]]\n}\n\nfunction multiply(A, x){\n    var [[a,b], [c,d]] = A\n    var [x, y] = x\n    return [a*x + b*y, c*x+d*y]\n}\n\n\nfunction render(data, ctx){\n    \n    var mx1 = (data.x1 + data.x2)/2\n    var my1 = (data.y1 + data.y2)/2\n    var dy1 = data.y1 - data.y2\n    var dx1 = -(data.x1 - data.x2)\n\n    var mx2 = (data.x3 + data.x2)/2\n    var my2 = (data.y3 + data.y2)/2\n    var dy2 = data.y2 - data.y3\n    var dx2 = -(data.x2 - data.x3)\n\n    var I = invert([[dy1, -dy2], \n                    [dx1, -dx2]])\n    var [a,b] = multiply(I, [mx2-mx1, my2-my1])\n\n    ctx.line(\n        data.x1,\n        data.y1,\n        data.x2,\n        data.y2,\n        {stroke: 'red'})\n\n    ctx.line(\n        data.x3,\n        data.y3,\n        data.x2,\n        data.y2,\n        {stroke: 'blue'})\n\n    ctx.line(\n        mx1,\n        my1,\n        mx1 + 2 * a * dy1,\n        my1 + 2 * a * dx1,\n        {stroke: 'red'})\n\n    ctx.line(\n        mx2,\n        my2,\n        mx2 + 2 * b * dy2,\n        my2 + 2 * b * dx2,\n        {stroke: 'blue'})\n\n    var cx = mx1 + a*dy1\n    var cy = my1 + a*dx1\n\n    var dx = cx - data.x1\n    var dy = cy - data.y1\n\n    ctx.point(cx, cy)\n\n    ctx.circle(cx, cy, Math.sqrt(dx*dx + dy*dy), {\n        fill: 'none',\n        stroke: 'green',\n        'stroke-width': 3\n    })\n    ctx.point(data.x1, data.y1)\n    ctx.point(data.x2, data.y2)\n\n    ctx.point(data.x3, data.y3)\n}"
      },
      "date": 1650439426181
    }
  ]
}