{
  "title": "Function syncRAF",
  "story": [
    {
      "type": "paragraph",
      "id": "4cade26f72b55b1a",
      "text": "Similar to (in in effect the same as the now deprecated) sidechainPartitionRAF, however more performant & lightweight. Synchronizes downstream processing w/ requestAnimationFrame(). The returned subscription delays & debounces any high frequency intra-frame input values and passes only most recent one downstream during next RAF event processing. [https://docs.thi.ng/umbrella/rstream/functions/syncRAF-1.html docs]"
    },
    {
      "type": "paragraph",
      "id": "e12fd223485e829d",
      "text": "This example uses thi.ng/atom as state container. See also [[Function fromAtom]]."
    },
    {
      "type": "paragraph",
      "id": "00889d3d8b84f206",
      "text": "See sidechainTrigger from a similar & more general construct."
    },
    {
      "type": "code",
      "id": "90fe9e94b4e800a2",
      "text": "import { defAtom } from 'https://esm.run/@thi.ng/atom';\nimport { fromAtom, syncRAF } from 'https://esm.run/@thi.ng/rstream';\n\nconst atom = defAtom({ name: \"alice\" });\n\n// any changes to the atom will only be received by // this subscription during next RAF update cycle\nsyncRAF(fromAtom(atom)).subscribe({\n  next(value) {\n    document.body.innerText = JSON.stringify(value, null, 2);\n  }\n});\n\n// trigger update\natom.reset({ name: \"bob\" });\n"
    },
    {
      "type": "frame",
      "id": "142fe5bcefa780fa",
      "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/esm.html"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Function syncRAF",
        "story": []
      },
      "date": 1713802100062
    },
    {
      "item": {
        "type": "factory",
        "id": "90fe9e94b4e800a2"
      },
      "id": "90fe9e94b4e800a2",
      "type": "add",
      "date": 1713802101261
    },
    {
      "type": "edit",
      "id": "90fe9e94b4e800a2",
      "item": {
        "type": "code",
        "id": "90fe9e94b4e800a2",
        "text": "import { defAtom } from \"@thi.ng/atom\";\nimport { fromAtom, syncRAF } from \"@thi.ng/rstream\";\n\nconst atom = defAtom(\"alice\");\n\n// any changes to the atom will only be received by this subscription\n// during next RAF update cycle\nsyncRAF(fromAtom(atom)).subscribe({\n  next({ name }) { document.body.innerText = name; }\n});\n\n// trigger update\natom.reset(\"bob\");"
      },
      "date": 1713802143870
    },
    {
      "item": {
        "type": "factory",
        "id": "142fe5bcefa780fa"
      },
      "id": "142fe5bcefa780fa",
      "type": "add",
      "after": "90fe9e94b4e800a2",
      "date": 1713802179859
    },
    {
      "type": "edit",
      "id": "142fe5bcefa780fa",
      "item": {
        "type": "frame",
        "id": "142fe5bcefa780fa",
        "text": "//localhost:3000/assets/pages/snippet-template/esm.html"
      },
      "date": 1713802183365
    },
    {
      "type": "edit",
      "id": "90fe9e94b4e800a2",
      "item": {
        "type": "code",
        "id": "90fe9e94b4e800a2",
        "text": "import { defAtom } from 'https://esm.run/@thi.ng/atom';\nimport { fromAtom, syncRAF } from \"@thi.ng/rstream\";\n\nconst atom = defAtom(\"alice\");\n\n// any changes to the atom will only be received by this subscription\n// during next RAF update cycle\nsyncRAF(fromAtom(atom)).subscribe({\n  next({ name }) { document.body.innerText = name; }\n});\n\n// trigger update\natom.reset(\"bob\");"
      },
      "date": 1713802199663
    },
    {
      "type": "edit",
      "id": "90fe9e94b4e800a2",
      "item": {
        "type": "code",
        "id": "90fe9e94b4e800a2",
        "text": "import { defAtom } from 'https://esm.run/@thi.ng/atom';\nimport { fromAtom, syncRAF } from 'https://esm.run/@thi.ng/rstream/;\n\nconst atom = defAtom(\"alice\");\n\n// any changes to the atom will only be received by this subscription\n// during next RAF update cycle\nsyncRAF(fromAtom(atom)).subscribe({\n  next({ name }) { document.body.innerText = name; }\n});\n\n// trigger update\natom.reset(\"bob\");"
      },
      "date": 1713802223728
    },
    {
      "type": "edit",
      "id": "90fe9e94b4e800a2",
      "item": {
        "type": "code",
        "id": "90fe9e94b4e800a2",
        "text": "import { defAtom } from 'https://esm.run/@thi.ng/atom';\nimport { fromAtom, syncRAF } from 'https://esm.run/@thi.ng/rstream';\n\nconst atom = defAtom(\"alice\");\n\n// any changes to the atom will only be received by this subscription\n// during next RAF update cycle\nsyncRAF(fromAtom(atom)).subscribe({\n  next({ name }) { document.body.innerText = name; }\n});\n\n// trigger update\natom.reset(\"bob\");"
      },
      "date": 1713802234041
    },
    {
      "type": "edit",
      "id": "90fe9e94b4e800a2",
      "item": {
        "type": "code",
        "id": "90fe9e94b4e800a2",
        "text": "import { defAtom } from 'https://esm.run/@thi.ng/atom';\nimport { fromAtom, syncRAF } from 'https://esm.run/@thi.ng/rstream';\n\nconst atom = defAtom(\"alice\");\n\n// any changes to the atom will only be received by this subscription\n// during next RAF update cycle\nsyncRAF(fromAtom(atom)).subscribe({\n  next({ name }) { document.body.innerText = name; }\n});\n\n// trigger update\nconsole.log(atom.reset(\"bob\"));"
      },
      "date": 1713802280882
    },
    {
      "id": "4cade26f72b55b1a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4cade26f72b55b1a",
        "text": "Similar to (in in effect the same as the now deprecated) sidechainPartitionRAF, however more performant & lightweight. Synchronizes downstream processing w/ requestAnimationFrame(). The returned subscription delays & debounces any high frequency intra-frame input values and passes only most recent one downstream during next RAF event processing.\n\nThis example uses thi.ng/atom as state container. Also see fromAtom.\n\nSee sidechainTrigger from a similar & more general construct."
      },
      "attribution": {
        "page": "scratch"
      },
      "date": 1713802396423
    },
    {
      "type": "edit",
      "id": "4cade26f72b55b1a",
      "item": {
        "type": "paragraph",
        "id": "4cade26f72b55b1a",
        "text": "Similar to (in in effect the same as the now deprecated) sidechainPartitionRAF, however more performant & lightweight. Synchronizes downstream processing w/ requestAnimationFrame(). The returned subscription delays & debounces any high frequency intra-frame input values and passes only most recent one downstream during next RAF event processing. [https://docs.thi.ng/umbrella/rstream/functions/syncRAF-1.html docs]"
      },
      "date": 1713802442663
    },
    {
      "type": "add",
      "id": "e12fd223485e829d",
      "item": {
        "type": "paragraph",
        "id": "e12fd223485e829d",
        "text": "This example uses thi.ng/atom as state container. Also see fromAtom.\n\nSee sidechainTrigger from a similar & more general construct."
      },
      "after": "4cade26f72b55b1a",
      "date": 1713802443466
    },
    {
      "type": "edit",
      "id": "e12fd223485e829d",
      "item": {
        "type": "paragraph",
        "id": "e12fd223485e829d",
        "text": "This example uses thi.ng/atom as state container. See also [[Function fromAtom]]."
      },
      "date": 1713802499308
    },
    {
      "type": "add",
      "id": "00889d3d8b84f206",
      "item": {
        "type": "paragraph",
        "id": "00889d3d8b84f206",
        "text": "See sidechainTrigger from a similar & more general construct."
      },
      "after": "e12fd223485e829d",
      "date": 1713802500090
    },
    {
      "type": "fork",
      "date": 1713802632663
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1713812786502
    },
    {
      "type": "edit",
      "id": "90fe9e94b4e800a2",
      "item": {
        "type": "code",
        "id": "90fe9e94b4e800a2",
        "text": "import { defAtom } from \"https://esm.run/@thi.ng/atom\";\nimport { fromAtom, syncRAF } from \"https://esm.run/@thi.ng/rstream\";\n\nconst atom = defAtom(\"alice\");\n\n// any changes to the atom will only be received by this subscription\n// during next RAF update cycle\nsyncRAF(fromAtom(atom)).subscribe({\n  next({ name }) {\n    document.body.innerText = name;\n  }\n});\n\n// trigger update\natom.reset(\"bob\");\n"
      },
      "date": 1713812885242
    },
    {
      "type": "edit",
      "id": "90fe9e94b4e800a2",
      "item": {
        "type": "code",
        "id": "90fe9e94b4e800a2",
        "text": "import { defAtom } from 'https://esm.run/@thi.ng/atom';\nimport { fromAtom, syncRAF } from 'https://esm.run/@thi.ng/rstream';\n\nconst atom = defAtom(\"alice\");\n\n// any changes to the atom will only be received by this subscription\n// during next RAF update cycle\nsyncRAF(fromAtom(atom)).subscribe({\n  next({ name }) {\n    document.body.innerText = name;\n  }\n});\n\n// trigger update\natom.reset(\"bob\");\n"
      },
      "date": 1713812934055
    },
    {
      "type": "edit",
      "id": "142fe5bcefa780fa",
      "item": {
        "type": "frame",
        "id": "142fe5bcefa780fa",
        "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/esm.html"
      },
      "date": 1713813033569
    },
    {
      "type": "edit",
      "id": "90fe9e94b4e800a2",
      "item": {
        "type": "code",
        "id": "90fe9e94b4e800a2",
        "text": "import { defAtom } from 'https://esm.run/@thi.ng/atom';\nimport { fromAtom, syncRAF } from 'https://esm.run/@thi.ng/rstream';\n\nconst atom = defAtom(\"alice\");\n\n// any changes to the atom will only be received by this subscription\n// during next RAF update cycle\nsyncRAF(fromAtom(atom)).subscribe({\n  next({ name }) {\n    document.body.innerText = name;\n  }\n});\n\n// trigger update\nconsole.log(atom.reset(\"bob\"));\n"
      },
      "date": 1713813111556
    },
    {
      "type": "edit",
      "id": "90fe9e94b4e800a2",
      "item": {
        "type": "code",
        "id": "90fe9e94b4e800a2",
        "text": "import { defAtom } from 'https://esm.run/@thi.ng/atom';\nimport { fromAtom, syncRAF } from 'https://esm.run/@thi.ng/rstream';\n\nconst atom = defAtom({ name: \"alice\" });\n\n// any changes to the atom will only be received by this subscription\n// during next RAF update cycle\nsyncRAF(fromAtom(atom)).subscribe({\n  next({ name }) {\n    document.body.innerText = name;\n  }\n});\n\n// trigger update\nconsole.log(atom.reset(\"bob\"));\n"
      },
      "date": 1713813646783
    },
    {
      "type": "edit",
      "id": "90fe9e94b4e800a2",
      "item": {
        "type": "code",
        "id": "90fe9e94b4e800a2",
        "text": "import { defAtom } from 'https://esm.run/@thi.ng/atom';\nimport { fromAtom, syncRAF } from 'https://esm.run/@thi.ng/rstream';\n\nconst atom = defAtom({ name: \"alice\" });\n\n// any changes to the atom will only be received by this subscription\n// during next RAF update cycle\nsyncRAF(fromAtom(atom)).subscribe({\n  next(value) {\n    document.body.innerText = JSON.stringify(value, null, 2);\n  }\n});\n\n// trigger update\natom.reset({ name: \"bob\" });\n"
      },
      "date": 1713814089311
    },
    {
      "type": "edit",
      "id": "90fe9e94b4e800a2",
      "item": {
        "type": "code",
        "id": "90fe9e94b4e800a2",
        "text": "import { defAtom } from 'https://esm.run/@thi.ng/atom';\nimport { fromAtom, syncRAF } from 'https://esm.run/@thi.ng/rstream';\n\nconst atom = defAtom({ name: \"alice\" });\n\n// any changes to the atom will only be received by // this subscription during next RAF update cycle\nsyncRAF(fromAtom(atom)).subscribe({\n  next(value) {\n    document.body.innerText = JSON.stringify(value, null, 2);\n  }\n});\n\n// trigger update\natom.reset({ name: \"bob\" });\n"
      },
      "date": 1713814969987
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1713823846512
    },
    {
      "type": "edit",
      "id": "142fe5bcefa780fa",
      "item": {
        "type": "frame",
        "id": "142fe5bcefa780fa",
        "text": "//localhost:3000/assets/pages/snippet-template/esm.html"
      },
      "date": 1713823899952
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1713891216197
    },
    {
      "type": "edit",
      "id": "142fe5bcefa780fa",
      "item": {
        "type": "frame",
        "id": "142fe5bcefa780fa",
        "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/esm.html"
      },
      "date": 1713891226363
    }
  ]
}