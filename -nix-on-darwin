{
  "title": "﻿Nix on Darwin",
  "story": [
    {
      "type": "markdown",
      "id": "494bf58dafe9c336",
      "text": "For the past couple of years, Darwin has been a first-class \"pure\" platform on Nix. In this talk I'll describe the many hurdles we've had to overcome to get from an impure poorly supported platform to where we are today. I'll also cover ongoing pain points and where we see the platform going, and why I think it should take over the Mac packaging ecosystem.\n"
    },
    {
      "type": "video",
      "id": "ae097a4e66bd95c2",
      "text": "YOUTUBE 73mnPBLL_20\nNix on Darwin – History, challenges, and where it's going by Dan Peebles (NixCon 2017)"
    },
    {
      "type": "markdown",
      "id": "94cfd4796828ec2d",
      "text": "\nWhen I first encountered Nix, I was simultaneously impressed by the purity of its Linux environment with virtually no untracked external dependencies, and disappointed with the situation on macOS. On macOS, some of my first experiences with Nix involved some painful surprises of impurities breaking my Nix builds, and my early attempts to fix them largely failed. As I tinkered with Nix and spoke to experts online, a clearer picture emerged for how to move from the impure situation to a pure one, and a few of us banded together on IRC over the following few months to bootstrap a pure compiler toolchain and OS-appropriate SDK from scratch. It's a grueling story of mass rebuilds multiple times a day, repeatedly waiting for three hours just to find stupid typos, and hunting down undesired dependency chains, but in the end it came together and actually worked, much to everyone's surprise. Although the situation is now far better than it was, there is still much work to do, and I'll go over some of the root causes of much of the remaining pain and how I propose to tackle it. I'll also go over some exciting recent developments in the macOS Nix space and what I think the project and platform will look like in the longer term.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "﻿Nix on Darwin",
        "story": []
      },
      "date": 1636643788889
    },
    {
      "item": {
        "type": "factory",
        "id": "ae097a4e66bd95c2"
      },
      "id": "ae097a4e66bd95c2",
      "type": "add",
      "date": 1636643794498
    },
    {
      "type": "edit",
      "id": "ae097a4e66bd95c2",
      "item": {
        "type": "video",
        "id": "ae097a4e66bd95c2",
        "text": "YOUTUBE "
      },
      "date": 1636643804735
    },
    {
      "type": "edit",
      "id": "ae097a4e66bd95c2",
      "item": {
        "type": "video",
        "id": "ae097a4e66bd95c2",
        "text": "YOUTUBE 73mnPBLL_20"
      },
      "date": 1636643873934
    },
    {
      "type": "edit",
      "id": "ae097a4e66bd95c2",
      "item": {
        "type": "video",
        "id": "ae097a4e66bd95c2",
        "text": "YOUTUBE 73mnPBLL_20\nNix on Darwin – History, challenges, and where it's going by Dan Peebles (NixCon 2017)"
      },
      "date": 1636643892459
    },
    {
      "item": {
        "type": "factory",
        "id": "494bf58dafe9c336"
      },
      "id": "494bf58dafe9c336",
      "type": "add",
      "after": "ae097a4e66bd95c2",
      "date": 1636643905561
    },
    {
      "type": "edit",
      "id": "494bf58dafe9c336",
      "item": {
        "type": "markdown",
        "id": "494bf58dafe9c336",
        "text": "For the past couple of years, Darwin has been a first-class \"pure\" platform on Nix. In this talk I'll describe the many hurdles we've had to overcome to get from an impure poorly supported platform to where we are today. I'll also cover ongoing pain points and where we see the platform going, and why I think it should take over the Mac packaging ecosystem.\n\nWhen I first encountered Nix, I was simultaneously impressed by the purity of its Linux environment with virtually no untracked external dependencies, and disappointed with the situation on macOS. On macOS, some of my first experiences with Nix involved some painful surprises of impurities breaking my Nix builds, and my early attempts to fix them largely failed. As I tinkered with Nix and spoke to experts online, a clearer picture emerged for how to move from the impure situation to a pure one, and a few of us banded together on IRC over the following few months to bootstrap a pure compiler toolchain and OS-appropriate SDK from scratch. It's a grueling story of mass rebuilds multiple times a day, repeatedly waiting for three hours just to find stupid typos, and hunting down undesired dependency chains, but in the end it came together and actually worked, much to everyone's surprise. Although the situation is now far better than it was, there is still much work to do, and I'll go over some of the root causes of much of the remaining pain and how I propose to tackle it. I'll also go over some exciting recent developments in the macOS Nix space and what I think the project and platform will look like in the longer term.\n\nSlides: https://schedule.nixcon2017.org/syste..."
      },
      "date": 1636643907204
    },
    {
      "type": "edit",
      "id": "494bf58dafe9c336",
      "item": {
        "type": "markdown",
        "id": "494bf58dafe9c336",
        "text": "For the past couple of years, Darwin has been a first-class \"pure\" platform on Nix. In this talk I'll describe the many hurdles we've had to overcome to get from an impure poorly supported platform to where we are today. I'll also cover ongoing pain points and where we see the platform going, and why I think it should take over the Mac packaging ecosystem.\n\nWhen I first encountered Nix, I was simultaneously impressed by the purity of its Linux environment with virtually no untracked external dependencies, and disappointed with the situation on macOS. On macOS, some of my first experiences with Nix involved some painful surprises of impurities breaking my Nix builds, and my early attempts to fix them largely failed. As I tinkered with Nix and spoke to experts online, a clearer picture emerged for how to move from the impure situation to a pure one, and a few of us banded together on IRC over the following few months to bootstrap a pure compiler toolchain and OS-appropriate SDK from scratch. It's a grueling story of mass rebuilds multiple times a day, repeatedly waiting for three hours just to find stupid typos, and hunting down undesired dependency chains, but in the end it came together and actually worked, much to everyone's surprise. Although the situation is now far better than it was, there is still much work to do, and I'll go over some of the root causes of much of the remaining pain and how I propose to tackle it. I'll also go over some exciting recent developments in the macOS Nix space and what I think the project and platform will look like in the longer term.\n\nSlides: [https://schedule.nixcon2017.org/syste..."
      },
      "date": 1636643971376
    },
    {
      "type": "edit",
      "id": "494bf58dafe9c336",
      "item": {
        "type": "markdown",
        "id": "494bf58dafe9c336",
        "text": "For the past couple of years, Darwin has been a first-class \"pure\" platform on Nix. In this talk I'll describe the many hurdles we've had to overcome to get from an impure poorly supported platform to where we are today. I'll also cover ongoing pain points and where we see the platform going, and why I think it should take over the Mac packaging ecosystem.\n\nWhen I first encountered Nix, I was simultaneously impressed by the purity of its Linux environment with virtually no untracked external dependencies, and disappointed with the situation on macOS. On macOS, some of my first experiences with Nix involved some painful surprises of impurities breaking my Nix builds, and my early attempts to fix them largely failed. As I tinkered with Nix and spoke to experts online, a clearer picture emerged for how to move from the impure situation to a pure one, and a few of us banded together on IRC over the following few months to bootstrap a pure compiler toolchain and OS-appropriate SDK from scratch. It's a grueling story of mass rebuilds multiple times a day, repeatedly waiting for three hours just to find stupid typos, and hunting down undesired dependency chains, but in the end it came together and actually worked, much to everyone's surprise. Although the situation is now far better than it was, there is still much work to do, and I'll go over some of the root causes of much of the remaining pain and how I propose to tackle it. I'll also go over some exciting recent developments in the macOS Nix space and what I think the project and platform will look like in the longer term.\n\nSlides: [https://schedule.nixcon2017.org/system/event_attachments/attachments/000/000/005/original/without-notes.pdf?1509312309 https://schedule.nixcon2017.org/syste...]"
      },
      "date": 1636643987970
    },
    {
      "type": "edit",
      "id": "494bf58dafe9c336",
      "item": {
        "type": "markdown",
        "id": "494bf58dafe9c336",
        "text": "For the past couple of years, Darwin has been a first-class \"pure\" platform on Nix. In this talk I'll describe the many hurdles we've had to overcome to get from an impure poorly supported platform to where we are today. I'll also cover ongoing pain points and where we see the platform going, and why I think it should take over the Mac packaging ecosystem.\n\nWhen I first encountered Nix, I was simultaneously impressed by the purity of its Linux environment with virtually no untracked external dependencies, and disappointed with the situation on macOS. On macOS, some of my first experiences with Nix involved some painful surprises of impurities breaking my Nix builds, and my early attempts to fix them largely failed. As I tinkered with Nix and spoke to experts online, a clearer picture emerged for how to move from the impure situation to a pure one, and a few of us banded together on IRC over the following few months to bootstrap a pure compiler toolchain and OS-appropriate SDK from scratch. It's a grueling story of mass rebuilds multiple times a day, repeatedly waiting for three hours just to find stupid typos, and hunting down undesired dependency chains, but in the end it came together and actually worked, much to everyone's surprise. Although the situation is now far better than it was, there is still much work to do, and I'll go over some of the root causes of much of the remaining pain and how I propose to tackle it. I'll also go over some exciting recent developments in the macOS Nix space and what I think the project and platform will look like in the longer term.\n"
      },
      "date": 1636644036503
    },
    {
      "type": "edit",
      "id": "494bf58dafe9c336",
      "item": {
        "type": "markdown",
        "id": "494bf58dafe9c336",
        "text": "For the past couple of years, Darwin has been a first-class \"pure\" platform on Nix. In this talk I'll describe the many hurdles we've had to overcome to get from an impure poorly supported platform to where we are today. I'll also cover ongoing pain points and where we see the platform going, and why I think it should take over the Mac packaging ecosystem.\n"
      },
      "date": 1641506294478
    },
    {
      "id": "494bf58dafe9c336",
      "type": "move",
      "order": [
        "494bf58dafe9c336",
        "ae097a4e66bd95c2",
        "94cfd4796828ec2d"
      ],
      "date": 1641506297889,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1641506302181
    },
    {
      "type": "add",
      "id": "94cfd4796828ec2d",
      "item": {
        "type": "markdown",
        "id": "94cfd4796828ec2d",
        "text": "\nWhen I first encountered Nix, I was simultaneously impressed by the purity of its Linux environment with virtually no untracked external dependencies, and disappointed with the situation on macOS. On macOS, some of my first experiences with Nix involved some painful surprises of impurities breaking my Nix builds, and my early attempts to fix them largely failed. As I tinkered with Nix and spoke to experts online, a clearer picture emerged for how to move from the impure situation to a pure one, and a few of us banded together on IRC over the following few months to bootstrap a pure compiler toolchain and OS-appropriate SDK from scratch. It's a grueling story of mass rebuilds multiple times a day, repeatedly waiting for three hours just to find stupid typos, and hunting down undesired dependency chains, but in the end it came together and actually worked, much to everyone's surprise. Although the situation is now far better than it was, there is still much work to do, and I'll go over some of the root causes of much of the remaining pain and how I propose to tackle it. I'll also go over some exciting recent developments in the macOS Nix space and what I think the project and platform will look like in the longer term.\n"
      },
      "after": "494bf58dafe9c336",
      "date": 1641506308502
    },
    {
      "id": "ae097a4e66bd95c2",
      "type": "move",
      "order": [
        "494bf58dafe9c336",
        "ae097a4e66bd95c2",
        "94cfd4796828ec2d"
      ],
      "date": 1641506343206
    }
  ]
}