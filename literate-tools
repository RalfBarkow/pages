{
  "title": "Literate Tools",
  "journal": [
    {
      "date": 1551000757842,
      "type": "create",
      "item": {
        "story": "",
        "title": "Literate Tools"
      }
    },
    {
      "type": "fork",
      "date": 1551000631916
    },
    {
      "type": "edit",
      "id": "d35cb3aa-1384-44b5-9447-fcf7601d3a6d",
      "item": {
        "type": "markdown",
        "id": "d35cb3aa-1384-44b5-9447-fcf7601d3a6d",
        "text": "- [[Literate Tools]]"
      },
      "date": 1551000637998
    },
    {
      "type": "remove",
      "id": "d35cb3aa-1384-44b5-9447-fcf7601d3a6d",
      "date": 1551000646643
    },
    {
      "type": "remove",
      "id": "1e284e15-2698-4c23-a9ac-b3060c8c2331",
      "date": 1551000737800
    },
    {
      "type": "edit",
      "id": "f24b1f5b-9569-4ffc-9cf0-da692ca3b5fa",
      "item": {
        "type": "markdown",
        "id": "f24b1f5b-9569-4ffc-9cf0-da692ca3b5fa",
        "text": "# See also"
      },
      "date": 1551000742545
    },
    {
      "type": "edit",
      "id": "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
      "item": {
        "type": "markdown",
        "id": "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
        "text": "The first published literate programming environment was [[WEB]], introduced by [[Donald Knuth]] in 1981 for his [[TeX]] typesetting system; it uses [[Pascal (programming language)]] as its underlying programming language and TeX for typesetting of the documentation. \n"
      },
      "date": 1551002333642
    },
    {
      "type": "add",
      "id": "d020d76977577044",
      "item": {
        "type": "markdown",
        "id": "d020d76977577044",
        "text": "Knuth had privately used a literate programming system called DOC as early as 1979. He was inspired by the ideas of [[Pierre-Arnoul de Marneffe]]. The free [[CWEB]], written by Knuth and Silvio Levy, is WEB adapted for [[C (programming language)]] and  [[C++]], runs on most operating systems and can produce TeX and [[Portable Document Format]] documentation - [https://en.wikipedia.org/wiki/Literate_programming#Tools wikipedia]"
      },
      "after": "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
      "date": 1551002365702
    },
    {
      "type": "edit",
      "id": "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
      "item": {
        "type": "markdown",
        "id": "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
        "text": "Here we collect software tools inspired by the idea of [[leterate programming]]:\n"
      },
      "date": 1551002564960
    },
    {
      "type": "add",
      "id": "73722ec3de454868",
      "item": {
        "type": "markdown",
        "id": "73722ec3de454868",
        "text": "The first published literate programming environment was [[WEB]], introduced by [[Donald Knuth]] in 1981 for his [[TeX]] typesetting system; it uses [[Pascal (programming language)]] as its underlying programming language and TeX for typesetting of the documentation. \n"
      },
      "after": "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
      "date": 1551002565391
    },
    {
      "type": "edit",
      "id": "73722ec3de454868",
      "item": {
        "type": "markdown",
        "id": "73722ec3de454868",
        "text": "# History\n"
      },
      "date": 1551002573999
    },
    {
      "type": "add",
      "id": "795be26360cd5b86",
      "item": {
        "type": "markdown",
        "id": "795be26360cd5b86",
        "text": "The first published literate programming environment was [[WEB]], introduced by [[Donald Knuth]] in 1981 for his [[TeX]] typesetting system; it uses [[Pascal (programming language)]] as its underlying programming language and TeX for typesetting of the documentation. \n"
      },
      "after": "73722ec3de454868",
      "date": 1551002574574
    },
    {
      "type": "edit",
      "id": "f18af239-97ae-4399-ae4d-f9b4088be042",
      "item": {
        "type": "markdown",
        "id": "f18af239-97ae-4399-ae4d-f9b4088be042",
        "text": "# Implementations\n"
      },
      "date": 1551002583624
    },
    {
      "type": "add",
      "id": "ef7f43636234157b",
      "item": {
        "type": "markdown",
        "id": "ef7f43636234157b",
        "text": "There are various other implementations of the literate programming concept (some of them don't have macros and hence violate the [[#Order of human logic, not that of the compiler]] principle):"
      },
      "after": "f18af239-97ae-4399-ae4d-f9b4088be042",
      "date": 1551002584137
    },
    {
      "type": "edit",
      "id": "ef7f43636234157b",
      "item": {
        "type": "markdown",
        "id": "ef7f43636234157b",
        "text": "There are various other implementations of the literate programming concept):"
      },
      "date": 1551002589920
    },
    {
      "type": "edit",
      "id": "ef7f43636234157b",
      "item": {
        "type": "markdown",
        "id": "ef7f43636234157b",
        "text": "There are various other implementations of the literate programming concept:"
      },
      "date": 1551002594473
    },
    {
      "type": "edit",
      "id": "19d67224-c76d-4976-9e79-ed2c28e140e5",
      "item": {
        "type": "markdown",
        "id": "19d67224-c76d-4976-9e79-ed2c28e140e5",
        "text": "-  [[Axiom (computer algebra system)|Axiom]], which is evolved from scratchpad, a computer algebra system developed by IBM. It is now being developed by Tim Daly, one of the developers of scratchpad, Axiom is totally written as a literate program.\n"
      },
      "date": 1551002670013
    },
    {
      "type": "add",
      "id": "80add90e455d6eb0",
      "item": {
        "type": "markdown",
        "id": "80add90e455d6eb0",
        "text": "-  [[noweb]] is independent of the programming language of the source code. It is well known for its simplicity, given the need of using only two text markup conventions and two tool invocations, and it allows for text formatting in HTML rather than going through the TeX system.\n"
      },
      "after": "19d67224-c76d-4976-9e79-ed2c28e140e5",
      "date": 1551002672926
    },
    {
      "type": "add",
      "id": "adc63a9f60a4a5d7",
      "item": {
        "type": "markdown",
        "id": "adc63a9f60a4a5d7",
        "text": "-  Literate is a \"modern literate programming system.\" Like noweb, it works with any programming language, but it produces pretty-printed and syntax-highlighted HTML, and it tries to retain all the advantages of CWEB, including output formatted like CWEB. Other notable advantages compared with older tools include being based on Markdown and generating well-formatted \"tangled\" code - [https://github.com/zyedidia/Literate github]\n"
      },
      "after": "80add90e455d6eb0",
      "date": 1551002691751
    },
    {
      "type": "add",
      "id": "77a2757ee8f25c68",
      "item": {
        "type": "markdown",
        "id": "77a2757ee8f25c68",
        "text": "-  FunnelWeb is another LP tool that can produce HTML documentation output. It has more complicated markup (with \"@\" escaping any FunnelWeb command), but has many more flexible options. Like noweb, it is independent of the programming language of the source code. http://www.ross.net/funnelweb/\n-  Nuweb can translate a single LP source into any number of code files in any mix of languages together with documentation in [[LaTeX]]. It does it in a single invocation; it does not have separate weave and tangle commands. It does not have the extensibility of [[noweb]], but it can use the listings package of LaTeX to provide pretty-printing and the hyperref package to provide hyperlinks in  PDF output. It also has extensive indexing and cross-referencing facilities including cross-references from the generated code back to the documentation, both as automatically generated comments and as strings that the code can use to report its behaviour. Vimes is a type-checker for [[Z notation]] which shows the use of nuweb in a practical application. Around 15,000 lines of nuweb source are translated into nearly 15,000 lines of C/C++ code and over 460 pages of documentation. http://nuweb.sourceforge.net/\n-  [https://github.com/slott56/py-web-tool pyWeb] is a literate programming tool that has syntax for macros similar to [[CWEB]], but uses [[ReStructuredText]] instead of [[TeX]] for markup and respects indentation which makes usable for the languages like [[Python_(programming_language) |Python]], though you can use it for any programming language.\n-  Molly is an LP tool written in [[Perl]], which aims to modernize and scale it with \"folding HTML\" and \"virtual views\" on code. It uses \"noweb\" markup for the literate source files. https://github.com/unixtechie/Literate-Molly.\n-  Codnar is an inverse literate programming tool available as a [[RubyGems|Ruby Gem]]. Instead of the machine-readable source code being extracted out of the literate documentation sources, the literate documentation is extracted out of the normal machine-readable source code files. This allows these source code files to be edited and maintained as usual. The approach is similar to that used by popular [[API]] documentation tools, such as [[JavaDoc]]. Such tools, however, generate [[API]] reference documentation, while Codnar generates a linear narrative describing the code, similar to that created by classical LP tools. Codnar can co-exist with API documentation tools, allowing both a reference manual and a linear narrative to be generated from the same set of source code files. https://github.com/orenbenkiki/codnar\n-  The [[Leo (text editor)|Leo text editor]] is an ''outlining'' editor which supports optional noweb and CWEB markup. The author of Leo mixes two different approaches: first, Leo is an outlining editor, which helps with management of large texts; second, Leo incorporates some of the ideas of literate programming, which in its pure form (i.e., the way it is used by Knuth Web tool or tools like \"noweb\") is possible only with some degree of inventiveness and the use of the editor in a way not exactly envisioned by its author (in modified @root nodes). However, this and other extensions (@file nodes) make outline programming and text management successful and easy and in some ways similar to literate programming.\n-  The [[Haskell (programming language)|Haskell]] programming language has native support for semi-literate programming. The compiler/interpreter supports two file name extensions: <code>.hs</code> and <code>.lhs</code>; the latter stands for literate Haskell."
      },
      "after": "adc63a9f60a4a5d7",
      "date": 1551002697860
    },
    {
      "type": "edit",
      "id": "adc63a9f60a4a5d7",
      "item": {
        "type": "markdown",
        "id": "adc63a9f60a4a5d7",
        "text": "-  [[Literate]] is a \"modern literate programming system.\" Like noweb, it works with any programming language, but it produces pretty-printed and syntax-highlighted HTML, and it tries to retain all the advantages of CWEB, including output formatted like CWEB. Other notable advantages compared with older tools include being based on Markdown and generating well-formatted \"tangled\" code - [https://github.com/zyedidia/Literate github]\n"
      },
      "date": 1551002703973
    },
    {
      "type": "edit",
      "id": "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
      "item": {
        "type": "markdown",
        "id": "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
        "text": "Here we collect software tools inspired by the idea of [[literate programming]]:\n"
      },
      "date": 1551002802277
    },
    {
      "type": "edit",
      "id": "d020d76977577044",
      "item": {
        "type": "markdown",
        "id": "d020d76977577044",
        "text": "Knuth had privately used a literate programming system called DOC as early as 1979. He was inspired by the ideas of [[Pierre-Arnoul de Marneffe]]. The free [[CWEB]], written by Knuth and Silvio Levy, is WEB adapted for [[C (programming language)]] and  [[C++]], runs on most operating systems and can produce TeX and [[Portable Document Format]] documentation."
      },
      "date": 1551005743356
    },
    {
      "type": "edit",
      "id": "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
      "item": {
        "type": "markdown",
        "id": "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
        "text": "Here we collect software tools inspired by the idea of [[literate programming]] - [https://en.wikipedia.org/wiki/Literate_programming#Tools wikipedia]\n"
      },
      "date": 1551005746125
    },
    {
      "type": "remove",
      "id": "a40bea3e-09ce-447c-a8f5-ec5f7c3716f7",
      "date": 1551005773724
    },
    {
      "type": "remove",
      "id": "76046d17-7dbf-4aa5-8e3b-4ad1c5d0400e",
      "date": 1551005775557
    },
    {
      "type": "remove",
      "id": "2bd8a2b2-b04c-42d3-a79e-49983cbc7ca7",
      "date": 1551005777371
    },
    {
      "type": "remove",
      "id": "75d54fbe-b30b-4cd2-ae4a-e90936926a41",
      "date": 1551005779181
    },
    {
      "type": "remove",
      "id": "feca4bf1-1c6a-4f74-b380-8a91644ea584",
      "date": 1551005780877
    },
    {
      "type": "remove",
      "id": "eb12fec8-0abf-4142-8f92-f2d3c1072c90",
      "date": 1551005783420
    },
    {
      "type": "remove",
      "id": "f30f466d-8eb3-4dad-9ce8-20b5cbe12a53",
      "date": 1551005785397
    },
    {
      "type": "remove",
      "id": "d34252c1-fba4-402f-a802-e17e81a1c6f2",
      "date": 1551005788093
    },
    {
      "type": "edit",
      "id": "77a2757ee8f25c68",
      "item": {
        "type": "markdown",
        "id": "77a2757ee8f25c68",
        "text": "-  FunnelWeb is another LP tool that can produce HTML documentation output. It has more complicated markup (with \"@\" escaping any FunnelWeb command), but has many more flexible options. Like noweb, it is independent of the programming language of the source code - [http://www.ross.net/funnelweb/ ross.net]\n"
      },
      "date": 1551005819552
    },
    {
      "type": "add",
      "id": "ff331235da8b079e",
      "item": {
        "type": "markdown",
        "id": "ff331235da8b079e",
        "text": "-  Nuweb can translate a single LP source into any number of code files in any mix of languages together with documentation in [[LaTeX]]. It does it in a single invocation; it does not have separate weave and tangle commands. It does not have the extensibility of [[noweb]], but it can use the listings package of LaTeX to provide pretty-printing and the hyperref package to provide hyperlinks in  PDF output. It also has extensive indexing and cross-referencing facilities including cross-references from the generated code back to the documentation, both as automatically generated comments and as strings that the code can use to report its behaviour. Vimes is a type-checker for [[Z notation]] which shows the use of nuweb in a practical application. Around 15,000 lines of nuweb source are translated into nearly 15,000 lines of C/C++ code and over 460 pages of documentation - [http://nuweb.sourceforge.net/ sourceforge]\n"
      },
      "after": "77a2757ee8f25c68",
      "date": 1551005843984
    },
    {
      "type": "add",
      "id": "2e4a03df19a9c328",
      "item": {
        "type": "markdown",
        "id": "2e4a03df19a9c328",
        "text": "-  pyWeb is a literate programming tool that has syntax for macros similar to [[CWEB]], but uses [[ReStructuredText]] instead of [[TeX]] for markup and respects indentation which makes usable for the languages like [[Python_(programming_language) |Python]], though you can use it for any programming language - [https://github.com/slott56/py-web-tool github]\n"
      },
      "after": "ff331235da8b079e",
      "date": 1551005886114
    },
    {
      "type": "add",
      "id": "51fd501488c7e1dc",
      "item": {
        "type": "markdown",
        "id": "51fd501488c7e1dc",
        "text": "-  Molly is an LP tool written in [[Perl]], which aims to modernize and scale it with \"folding HTML\" and \"virtual views\" on code. It uses \"noweb\" markup for the literate source files - [https://github.com/unixtechie/Literate-Molly github]\n"
      },
      "after": "2e4a03df19a9c328",
      "date": 1551005903917
    },
    {
      "type": "add",
      "id": "850e19a772aa7633",
      "item": {
        "type": "markdown",
        "id": "850e19a772aa7633",
        "text": "-  Codnar is an inverse literate programming tool available as a [[Ruby Gem]]. Instead of the machine-readable source code being extracted out of the literate documentation sources, the literate documentation is extracted out of the normal machine-readable source code files. This allows these source code files to be edited and maintained as usual. The approach is similar to that used by popular [[API]] documentation tools, such as [[JavaDoc]]. Such tools, however, generate [[API]] reference documentation, while Codnar generates a linear narrative describing the code, similar to that created by classical LP tools. Codnar can co-exist with API documentation tools, allowing both a reference manual and a linear narrative to be generated from the same set of source code files - [https://github.com/orenbenkiki/codnar github]\n"
      },
      "after": "51fd501488c7e1dc",
      "date": 1551005942884
    },
    {
      "type": "add",
      "id": "d9bf285c2617d7ff",
      "item": {
        "type": "markdown",
        "id": "d9bf285c2617d7ff",
        "text": "-  The [[Leo (text editor)|Leo text editor]] is an ''outlining'' editor which supports optional noweb and CWEB markup. The author of Leo mixes two different approaches: first, Leo is an outlining editor, which helps with management of large texts; second, Leo incorporates some of the ideas of literate programming, which in its pure form (i.e., the way it is used by Knuth Web tool or tools like \"noweb\") is possible only with some degree of inventiveness and the use of the editor in a way not exactly envisioned by its author (in modified @root nodes). However, this and other extensions (@file nodes) make outline programming and text management successful and easy and in some ways similar to literate programming.\n"
      },
      "after": "850e19a772aa7633",
      "date": 1551005951821
    },
    {
      "type": "add",
      "id": "0371b0c261786960",
      "item": {
        "type": "markdown",
        "id": "0371b0c261786960",
        "text": "-  The [[Haskell (programming language)|Haskell]] programming language has native support for semi-literate programming. The compiler/interpreter supports two file name extensions: `.hs` and `.lhs`; the latter stands for literate Haskell."
      },
      "after": "d9bf285c2617d7ff",
      "date": 1551005996637
    },
    {
      "type": "edit",
      "id": "57704f66-f9e9-4179-a0f3-37e626a3bf9a",
      "item": {
        "type": "markdown",
        "id": "57704f66-f9e9-4179-a0f3-37e626a3bf9a",
        "text": "-  The LaTeX <code>listings</code> package provides a`lstlisting` environment which can be used to embellish the source code."
      },
      "date": 1551006017485
    },
    {
      "type": "remove",
      "id": "9c4f1130-8cc8-4e2d-aeb5-3d3b21ff6352",
      "date": 1551006020573
    },
    {
      "type": "remove",
      "id": "3f8dbb50-fec7-45f8-b57d-af82c846f559",
      "date": 1551006022780
    },
    {
      "type": "remove",
      "id": "333be709-8d27-49ae-8d7d-429b24d713c0",
      "date": 1551006024613
    },
    {
      "type": "remove",
      "id": "8b49ec80-3b11-4f95-a17a-82ff41df1d18",
      "date": 1551006026379
    },
    {
      "type": "remove",
      "id": "864e8571-3cea-4124-bea5-462b409014dd",
      "date": 1551006028101
    },
    {
      "type": "remove",
      "id": "2772fde0-add4-4d2f-8b2b-9d90f20ece21",
      "date": 1551006029974
    },
    {
      "type": "remove",
      "id": "fc2a3551-6a26-45b6-bed0-bed35ab14af8",
      "date": 1551006031804
    },
    {
      "type": "remove",
      "id": "e658684f-9aed-4998-a7cd-6bf5dd47d1db",
      "date": 1551006034148
    },
    {
      "type": "remove",
      "id": "45738497-1687-4577-879b-2fa795f1c7df",
      "date": 1551006035964
    },
    {
      "type": "remove",
      "id": "da9f77a0-bd21-45fc-bc68-7034c95b9f01",
      "date": 1551006037941
    },
    {
      "type": "remove",
      "id": "0ee35145-e034-419d-8007-40c69f70efcd",
      "date": 1551006039805
    },
    {
      "type": "remove",
      "id": "caa42393-f703-4791-bb24-abd8b508b78f",
      "date": 1551006043532
    },
    {
      "type": "edit",
      "id": "8766b330-c141-43a7-9dd6-1aa1a71fdd81",
      "item": {
        "type": "markdown",
        "id": "8766b330-c141-43a7-9dd6-1aa1a71fdd81",
        "text": "-  The Web 68 Literate Programming system used [[Algol 68]] as the underlying programming language, although there was nothing in the pre-processor 'tang' to force the use of that language.\n"
      },
      "date": 1551006071806
    },
    {
      "type": "add",
      "id": "eebb1d722a319b81",
      "item": {
        "type": "markdown",
        "id": "eebb1d722a319b81",
        "text": "-  [[Emacs]] [[org-mode]] for literate programming through Babel, which allows embedding blocks of source code from multiple programming languages within a single text document. Blocks of code can share data with each other, display images inline, or be parsed into pure source code using the [[noweb]] reference syntax.\n"
      },
      "after": "8766b330-c141-43a7-9dd6-1aa1a71fdd81",
      "date": 1551006076631
    },
    {
      "type": "add",
      "id": "037816d187c9c607",
      "item": {
        "type": "markdown",
        "id": "037816d187c9c607",
        "text": "-  [[CoffeeScript]] supports a \"literate\" mode, which enables programs to be compiled from a source document written in [[Markdown]] with indented blocks of code.\n"
      },
      "after": "eebb1d722a319b81",
      "date": 1551006079423
    },
    {
      "type": "add",
      "id": "882a159aa8741574",
      "item": {
        "type": "markdown",
        "id": "882a159aa8741574",
        "text": "-  [[Wolfram Mathematica|Wolfram notebooks]] are a platform-agnostic literate programming method that combines text and graphics with live code..\n"
      },
      "after": "037816d187c9c607",
      "date": 1551006083326
    },
    {
      "type": "add",
      "id": "201160ac646df877",
      "item": {
        "type": "markdown",
        "id": "201160ac646df877",
        "text": "-  [[Swift (programming language)]], created by [[Apple Inc.]] can be edited in [https://developer.apple.com/library/prerelease/ios/recipes/Playground_Help/Chapters/AboutPlaygrounds.html Playgrounds] which provide an interactive programming environment that evaluates each statement and displays live results as the code is edited.  Playgrounds also allow the user to add [[Markup language]] along with the code that provide headers, inline formatting and images.\n-  [[Project_Jupyter#Jupyter_Notebook|Jupyter Notebook]], formerly [[IPython|IPython Notebook]] - works in the format of notebooks, which combine headings, text (including LaTeX), plots, etc. with the written code.\n-  [[Julia (programming language)]] supports the iJulia mode of development which was inspired by iPython.\n-  [[Agda (programming language)]] supports a limited form of literate programming out of the box.\n-  [http://witheve.com Eve programming language] programs are primarily prose. Eve combines variants of [[Datalog]] and [[Markdown]] with a live graphical development environment.\n-  Similar to Jupyter Notebooks, [https://bookdown.org/yihui/rmarkdown/notebook.html R Notebooks] are a method of literate programming that allows for direct interaction with [[R (programming language)|R]] (support for Python, SQL, and Bash are also explicitly named) while producing a reproducible document with publication-quality output.\n-  The customization mechanism of the [[Text Encoding Initiative]] which enables the constraining, modification, or extension of the [[Text Encoding Initiative |TEI]] scheme enables users to mix prose documentation with fragments of schema specification in their [[Text_Encoding_Initiative#ODD|One Document Does-it-all]] format. From this prose documentation, schemas, and processing model pipelines can be generated and Knuth's Literate Programming paradigm is cited as the inspiration for this way of working."
      },
      "after": "882a159aa8741574",
      "date": 1551006084784
    },
    {
      "type": "edit",
      "id": "882a159aa8741574",
      "item": {
        "type": "markdown",
        "id": "882a159aa8741574",
        "text": "-  [[Wolfram Mathematica|Wolfram notebooks]] are a platform-agnostic literate programming method that combines text and graphics with live code.\n"
      },
      "date": 1551006087029
    },
    {
      "type": "edit",
      "id": "201160ac646df877",
      "item": {
        "type": "markdown",
        "id": "201160ac646df877",
        "text": "-  [[Swift (programming language)]], created by [[Apple Inc.]] can be edited in [https://developer.apple.com/library/prerelease/ios/recipes/Playground_Help/Chapters/AboutPlaygrounds.html Playgrounds] which provide an interactive programming environment that evaluates each statement and displays live results as the code is edited.  Playgrounds also allow the user to add [[Markup language]] along with the code that provide headers, inline formatting and images.\n"
      },
      "date": 1551006094383
    },
    {
      "type": "add",
      "id": "37eb24030ad75d9f",
      "item": {
        "type": "markdown",
        "id": "37eb24030ad75d9f",
        "text": "-  [[Jupyter Notebook]] works in the format of notebooks, which combine headings, text (including LaTeX), plots, etc. with the written code.\n"
      },
      "after": "201160ac646df877",
      "date": 1551006132800
    },
    {
      "type": "add",
      "id": "7800494379c70941",
      "item": {
        "type": "markdown",
        "id": "7800494379c70941",
        "text": "-  [[Julia (programming language)]] supports the iJulia mode of development which was inspired by iPython.\n"
      },
      "after": "37eb24030ad75d9f",
      "date": 1551006136585
    },
    {
      "type": "add",
      "id": "ea90f963551f9e1c",
      "item": {
        "type": "markdown",
        "id": "ea90f963551f9e1c",
        "text": "-  [[Agda (programming language)]] supports a limited form of literate programming out of the box\n"
      },
      "after": "7800494379c70941",
      "date": 1551006156247
    },
    {
      "type": "add",
      "id": "b49ffc667ed53736",
      "item": {
        "type": "markdown",
        "id": "b49ffc667ed53736",
        "text": "- Eve programming language programs are primarily prose. Eve combines variants of [[Datalog]] and [[Markdown]] with a live graphical development environment - [http://witheve.com witheve.com]\n"
      },
      "after": "ea90f963551f9e1c",
      "date": 1551006184349
    },
    {
      "type": "add",
      "id": "feededdb716e7e80",
      "item": {
        "type": "markdown",
        "id": "feededdb716e7e80",
        "text": "-  Similar to Jupyter Notebooks, [[R Notebooks]] are a method of literate programming that allows for direct interaction with [[R (programming language)|R]] (support for Python, SQL, and Bash are also explicitly named) while producing a reproducible document with publication-quality output - [https://bookdown.org/yihui/rmarkdown/notebook.html bookdown.org]\n"
      },
      "after": "b49ffc667ed53736",
      "date": 1551006244274
    },
    {
      "type": "add",
      "id": "6226275e8e0d715a",
      "item": {
        "type": "markdown",
        "id": "6226275e8e0d715a",
        "text": "-  The customization mechanism of the [[Text Encoding Initiative]] which enables the constraining, modification, or extension of the [[Text Encoding Initiative |TEI]] scheme enables users to mix prose documentation with fragments of schema specification in their [[One Document Does-it-all]] format. From this prose documentation, schemas, and processing model pipelines can be generated and Knuth's Literate Programming paradigm is cited as the inspiration for this way of working."
      },
      "after": "feededdb716e7e80",
      "date": 1551006283458
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "648a1faa-c8ba-40bf-bcba-dfc0a8c5bd77",
        "text": "- [[Literate Wiki]]\n- [[Programming In Wiki]]\n- [[Bret Victor]] - [[Inventing on Principle]]\n- [[Literate Tools]]"
      },
      "after": "f24b1f5b-9569-4ffc-9cf0-da692ca3b5fa",
      "id": "648a1faa-c8ba-40bf-bcba-dfc0a8c5bd77",
      "date": 1551006309360
    },
    {
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "b358d4bc876971e6",
        "text": "- [[Donald Knuth]]\n- [[Literate programming]]\n- [[Holon programming]]"
      },
      "after": "9561976efac18d41",
      "id": "b358d4bc876971e6",
      "date": 1551006316586
    },
    {
      "type": "move",
      "order": [
        "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
        "73722ec3de454868",
        "795be26360cd5b86",
        "d020d76977577044",
        "f18af239-97ae-4399-ae4d-f9b4088be042",
        "ef7f43636234157b",
        "19d67224-c76d-4976-9e79-ed2c28e140e5",
        "80add90e455d6eb0",
        "b358d4bc876971e6",
        "adc63a9f60a4a5d7",
        "77a2757ee8f25c68",
        "ff331235da8b079e",
        "2e4a03df19a9c328",
        "51fd501488c7e1dc",
        "850e19a772aa7633",
        "d9bf285c2617d7ff",
        "0371b0c261786960",
        "9478c5c9-5e6b-4fb7-90f7-d210867ad832",
        "57704f66-f9e9-4179-a0f3-37e626a3bf9a",
        "7c80cdd9-ee1c-4b80-a413-a2779eff2d73",
        "b16a00cd-beb3-4e80-aefe-e89aeb678cce",
        "8766b330-c141-43a7-9dd6-1aa1a71fdd81",
        "eebb1d722a319b81",
        "037816d187c9c607",
        "882a159aa8741574",
        "201160ac646df877",
        "37eb24030ad75d9f",
        "7800494379c70941",
        "ea90f963551f9e1c",
        "b49ffc667ed53736",
        "feededdb716e7e80",
        "6226275e8e0d715a",
        "f24b1f5b-9569-4ffc-9cf0-da692ca3b5fa",
        "648a1faa-c8ba-40bf-bcba-dfc0a8c5bd77"
      ],
      "id": "b358d4bc876971e6",
      "date": 1551007084944
    },
    {
      "type": "move",
      "order": [
        "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
        "73722ec3de454868",
        "795be26360cd5b86",
        "d020d76977577044",
        "f18af239-97ae-4399-ae4d-f9b4088be042",
        "ef7f43636234157b",
        "19d67224-c76d-4976-9e79-ed2c28e140e5",
        "80add90e455d6eb0",
        "adc63a9f60a4a5d7",
        "77a2757ee8f25c68",
        "ff331235da8b079e",
        "b358d4bc876971e6",
        "2e4a03df19a9c328",
        "51fd501488c7e1dc",
        "850e19a772aa7633",
        "d9bf285c2617d7ff",
        "0371b0c261786960",
        "9478c5c9-5e6b-4fb7-90f7-d210867ad832",
        "57704f66-f9e9-4179-a0f3-37e626a3bf9a",
        "7c80cdd9-ee1c-4b80-a413-a2779eff2d73",
        "b16a00cd-beb3-4e80-aefe-e89aeb678cce",
        "8766b330-c141-43a7-9dd6-1aa1a71fdd81",
        "eebb1d722a319b81",
        "037816d187c9c607",
        "882a159aa8741574",
        "201160ac646df877",
        "37eb24030ad75d9f",
        "7800494379c70941",
        "ea90f963551f9e1c",
        "b49ffc667ed53736",
        "feededdb716e7e80",
        "6226275e8e0d715a",
        "f24b1f5b-9569-4ffc-9cf0-da692ca3b5fa",
        "648a1faa-c8ba-40bf-bcba-dfc0a8c5bd77"
      ],
      "id": "b358d4bc876971e6",
      "date": 1551007088022
    },
    {
      "type": "move",
      "order": [
        "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
        "73722ec3de454868",
        "795be26360cd5b86",
        "d020d76977577044",
        "f18af239-97ae-4399-ae4d-f9b4088be042",
        "ef7f43636234157b",
        "19d67224-c76d-4976-9e79-ed2c28e140e5",
        "80add90e455d6eb0",
        "adc63a9f60a4a5d7",
        "77a2757ee8f25c68",
        "ff331235da8b079e",
        "2e4a03df19a9c328",
        "51fd501488c7e1dc",
        "850e19a772aa7633",
        "d9bf285c2617d7ff",
        "0371b0c261786960",
        "b358d4bc876971e6",
        "9478c5c9-5e6b-4fb7-90f7-d210867ad832",
        "57704f66-f9e9-4179-a0f3-37e626a3bf9a",
        "7c80cdd9-ee1c-4b80-a413-a2779eff2d73",
        "b16a00cd-beb3-4e80-aefe-e89aeb678cce",
        "8766b330-c141-43a7-9dd6-1aa1a71fdd81",
        "eebb1d722a319b81",
        "037816d187c9c607",
        "882a159aa8741574",
        "201160ac646df877",
        "37eb24030ad75d9f",
        "7800494379c70941",
        "ea90f963551f9e1c",
        "b49ffc667ed53736",
        "feededdb716e7e80",
        "6226275e8e0d715a",
        "f24b1f5b-9569-4ffc-9cf0-da692ca3b5fa",
        "648a1faa-c8ba-40bf-bcba-dfc0a8c5bd77"
      ],
      "id": "b358d4bc876971e6",
      "date": 1551007093572
    },
    {
      "type": "move",
      "order": [
        "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
        "73722ec3de454868",
        "795be26360cd5b86",
        "d020d76977577044",
        "f18af239-97ae-4399-ae4d-f9b4088be042",
        "ef7f43636234157b",
        "19d67224-c76d-4976-9e79-ed2c28e140e5",
        "80add90e455d6eb0",
        "adc63a9f60a4a5d7",
        "77a2757ee8f25c68",
        "ff331235da8b079e",
        "2e4a03df19a9c328",
        "51fd501488c7e1dc",
        "850e19a772aa7633",
        "d9bf285c2617d7ff",
        "0371b0c261786960",
        "9478c5c9-5e6b-4fb7-90f7-d210867ad832",
        "57704f66-f9e9-4179-a0f3-37e626a3bf9a",
        "7c80cdd9-ee1c-4b80-a413-a2779eff2d73",
        "b16a00cd-beb3-4e80-aefe-e89aeb678cce",
        "8766b330-c141-43a7-9dd6-1aa1a71fdd81",
        "eebb1d722a319b81",
        "037816d187c9c607",
        "882a159aa8741574",
        "201160ac646df877",
        "b358d4bc876971e6",
        "37eb24030ad75d9f",
        "7800494379c70941",
        "ea90f963551f9e1c",
        "b49ffc667ed53736",
        "feededdb716e7e80",
        "6226275e8e0d715a",
        "f24b1f5b-9569-4ffc-9cf0-da692ca3b5fa",
        "648a1faa-c8ba-40bf-bcba-dfc0a8c5bd77"
      ],
      "id": "b358d4bc876971e6",
      "date": 1551007097585
    },
    {
      "type": "move",
      "order": [
        "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
        "73722ec3de454868",
        "795be26360cd5b86",
        "d020d76977577044",
        "f18af239-97ae-4399-ae4d-f9b4088be042",
        "ef7f43636234157b",
        "19d67224-c76d-4976-9e79-ed2c28e140e5",
        "80add90e455d6eb0",
        "adc63a9f60a4a5d7",
        "77a2757ee8f25c68",
        "ff331235da8b079e",
        "2e4a03df19a9c328",
        "51fd501488c7e1dc",
        "850e19a772aa7633",
        "d9bf285c2617d7ff",
        "0371b0c261786960",
        "9478c5c9-5e6b-4fb7-90f7-d210867ad832",
        "57704f66-f9e9-4179-a0f3-37e626a3bf9a",
        "7c80cdd9-ee1c-4b80-a413-a2779eff2d73",
        "b16a00cd-beb3-4e80-aefe-e89aeb678cce",
        "8766b330-c141-43a7-9dd6-1aa1a71fdd81",
        "eebb1d722a319b81",
        "037816d187c9c607",
        "882a159aa8741574",
        "201160ac646df877",
        "37eb24030ad75d9f",
        "7800494379c70941",
        "ea90f963551f9e1c",
        "b49ffc667ed53736",
        "feededdb716e7e80",
        "6226275e8e0d715a",
        "f24b1f5b-9569-4ffc-9cf0-da692ca3b5fa",
        "b358d4bc876971e6",
        "648a1faa-c8ba-40bf-bcba-dfc0a8c5bd77"
      ],
      "id": "b358d4bc876971e6",
      "date": 1551007103662
    },
    {
      "type": "fork",
      "site": "literate.wiki",
      "date": 1628171989486
    }
  ],
  "story": [
    {
      "type": "markdown",
      "id": "8e888de8-2abc-4ddc-ac15-ec95ed0883aa",
      "text": "Here we collect software tools inspired by the idea of [[literate programming]] - [https://en.wikipedia.org/wiki/Literate_programming#Tools wikipedia]\n"
    },
    {
      "type": "markdown",
      "id": "73722ec3de454868",
      "text": "# History\n"
    },
    {
      "type": "markdown",
      "id": "795be26360cd5b86",
      "text": "The first published literate programming environment was [[WEB]], introduced by [[Donald Knuth]] in 1981 for his [[TeX]] typesetting system; it uses [[Pascal (programming language)]] as its underlying programming language and TeX for typesetting of the documentation. \n"
    },
    {
      "type": "markdown",
      "id": "d020d76977577044",
      "text": "Knuth had privately used a literate programming system called DOC as early as 1979. He was inspired by the ideas of [[Pierre-Arnoul de Marneffe]]. The free [[CWEB]], written by Knuth and Silvio Levy, is WEB adapted for [[C (programming language)]] and  [[C++]], runs on most operating systems and can produce TeX and [[Portable Document Format]] documentation."
    },
    {
      "type": "markdown",
      "id": "f18af239-97ae-4399-ae4d-f9b4088be042",
      "text": "# Implementations\n"
    },
    {
      "type": "markdown",
      "id": "ef7f43636234157b",
      "text": "There are various other implementations of the literate programming concept:"
    },
    {
      "type": "markdown",
      "id": "19d67224-c76d-4976-9e79-ed2c28e140e5",
      "text": "-  [[Axiom (computer algebra system)|Axiom]], which is evolved from scratchpad, a computer algebra system developed by IBM. It is now being developed by Tim Daly, one of the developers of scratchpad, Axiom is totally written as a literate program.\n"
    },
    {
      "type": "markdown",
      "id": "80add90e455d6eb0",
      "text": "-  [[noweb]] is independent of the programming language of the source code. It is well known for its simplicity, given the need of using only two text markup conventions and two tool invocations, and it allows for text formatting in HTML rather than going through the TeX system.\n"
    },
    {
      "type": "markdown",
      "id": "adc63a9f60a4a5d7",
      "text": "-  [[Literate]] is a \"modern literate programming system.\" Like noweb, it works with any programming language, but it produces pretty-printed and syntax-highlighted HTML, and it tries to retain all the advantages of CWEB, including output formatted like CWEB. Other notable advantages compared with older tools include being based on Markdown and generating well-formatted \"tangled\" code - [https://github.com/zyedidia/Literate github]\n"
    },
    {
      "type": "markdown",
      "id": "77a2757ee8f25c68",
      "text": "-  FunnelWeb is another LP tool that can produce HTML documentation output. It has more complicated markup (with \"@\" escaping any FunnelWeb command), but has many more flexible options. Like noweb, it is independent of the programming language of the source code - [http://www.ross.net/funnelweb/ ross.net]\n"
    },
    {
      "type": "markdown",
      "id": "ff331235da8b079e",
      "text": "-  Nuweb can translate a single LP source into any number of code files in any mix of languages together with documentation in [[LaTeX]]. It does it in a single invocation; it does not have separate weave and tangle commands. It does not have the extensibility of [[noweb]], but it can use the listings package of LaTeX to provide pretty-printing and the hyperref package to provide hyperlinks in  PDF output. It also has extensive indexing and cross-referencing facilities including cross-references from the generated code back to the documentation, both as automatically generated comments and as strings that the code can use to report its behaviour. Vimes is a type-checker for [[Z notation]] which shows the use of nuweb in a practical application. Around 15,000 lines of nuweb source are translated into nearly 15,000 lines of C/C++ code and over 460 pages of documentation - [http://nuweb.sourceforge.net/ sourceforge]\n"
    },
    {
      "type": "markdown",
      "id": "2e4a03df19a9c328",
      "text": "-  pyWeb is a literate programming tool that has syntax for macros similar to [[CWEB]], but uses [[ReStructuredText]] instead of [[TeX]] for markup and respects indentation which makes usable for the languages like [[Python_(programming_language) |Python]], though you can use it for any programming language - [https://github.com/slott56/py-web-tool github]\n"
    },
    {
      "type": "markdown",
      "id": "51fd501488c7e1dc",
      "text": "-  Molly is an LP tool written in [[Perl]], which aims to modernize and scale it with \"folding HTML\" and \"virtual views\" on code. It uses \"noweb\" markup for the literate source files - [https://github.com/unixtechie/Literate-Molly github]\n"
    },
    {
      "type": "markdown",
      "id": "850e19a772aa7633",
      "text": "-  Codnar is an inverse literate programming tool available as a [[Ruby Gem]]. Instead of the machine-readable source code being extracted out of the literate documentation sources, the literate documentation is extracted out of the normal machine-readable source code files. This allows these source code files to be edited and maintained as usual. The approach is similar to that used by popular [[API]] documentation tools, such as [[JavaDoc]]. Such tools, however, generate [[API]] reference documentation, while Codnar generates a linear narrative describing the code, similar to that created by classical LP tools. Codnar can co-exist with API documentation tools, allowing both a reference manual and a linear narrative to be generated from the same set of source code files - [https://github.com/orenbenkiki/codnar github]\n"
    },
    {
      "type": "markdown",
      "id": "d9bf285c2617d7ff",
      "text": "-  The [[Leo (text editor)|Leo text editor]] is an ''outlining'' editor which supports optional noweb and CWEB markup. The author of Leo mixes two different approaches: first, Leo is an outlining editor, which helps with management of large texts; second, Leo incorporates some of the ideas of literate programming, which in its pure form (i.e., the way it is used by Knuth Web tool or tools like \"noweb\") is possible only with some degree of inventiveness and the use of the editor in a way not exactly envisioned by its author (in modified @root nodes). However, this and other extensions (@file nodes) make outline programming and text management successful and easy and in some ways similar to literate programming.\n"
    },
    {
      "type": "markdown",
      "id": "0371b0c261786960",
      "text": "-  The [[Haskell (programming language)|Haskell]] programming language has native support for semi-literate programming. The compiler/interpreter supports two file name extensions: `.hs` and `.lhs`; the latter stands for literate Haskell."
    },
    {
      "type": "html",
      "id": "9478c5c9-5e6b-4fb7-90f7-d210867ad832",
      "text": "</source>"
    },
    {
      "type": "markdown",
      "id": "57704f66-f9e9-4179-a0f3-37e626a3bf9a",
      "text": "-  The LaTeX <code>listings</code> package provides a`lstlisting` environment which can be used to embellish the source code."
    },
    {
      "type": "html",
      "id": "7c80cdd9-ee1c-4b80-a413-a2779eff2d73",
      "text": "</source>"
    },
    {
      "type": "html",
      "id": "b16a00cd-beb3-4e80-aefe-e89aeb678cce",
      "text": "</math>"
    },
    {
      "type": "markdown",
      "id": "8766b330-c141-43a7-9dd6-1aa1a71fdd81",
      "text": "-  The Web 68 Literate Programming system used [[Algol 68]] as the underlying programming language, although there was nothing in the pre-processor 'tang' to force the use of that language.\n"
    },
    {
      "type": "markdown",
      "id": "eebb1d722a319b81",
      "text": "-  [[Emacs]] [[org-mode]] for literate programming through Babel, which allows embedding blocks of source code from multiple programming languages within a single text document. Blocks of code can share data with each other, display images inline, or be parsed into pure source code using the [[noweb]] reference syntax.\n"
    },
    {
      "type": "markdown",
      "id": "037816d187c9c607",
      "text": "-  [[CoffeeScript]] supports a \"literate\" mode, which enables programs to be compiled from a source document written in [[Markdown]] with indented blocks of code.\n"
    },
    {
      "type": "markdown",
      "id": "882a159aa8741574",
      "text": "-  [[Wolfram Mathematica|Wolfram notebooks]] are a platform-agnostic literate programming method that combines text and graphics with live code.\n"
    },
    {
      "type": "markdown",
      "id": "201160ac646df877",
      "text": "-  [[Swift (programming language)]], created by [[Apple Inc.]] can be edited in [https://developer.apple.com/library/prerelease/ios/recipes/Playground_Help/Chapters/AboutPlaygrounds.html Playgrounds] which provide an interactive programming environment that evaluates each statement and displays live results as the code is edited.  Playgrounds also allow the user to add [[Markup language]] along with the code that provide headers, inline formatting and images.\n"
    },
    {
      "type": "markdown",
      "id": "37eb24030ad75d9f",
      "text": "-  [[Jupyter Notebook]] works in the format of notebooks, which combine headings, text (including LaTeX), plots, etc. with the written code.\n"
    },
    {
      "type": "markdown",
      "id": "7800494379c70941",
      "text": "-  [[Julia (programming language)]] supports the iJulia mode of development which was inspired by iPython.\n"
    },
    {
      "type": "markdown",
      "id": "ea90f963551f9e1c",
      "text": "-  [[Agda (programming language)]] supports a limited form of literate programming out of the box\n"
    },
    {
      "type": "markdown",
      "id": "b49ffc667ed53736",
      "text": "- Eve programming language programs are primarily prose. Eve combines variants of [[Datalog]] and [[Markdown]] with a live graphical development environment - [http://witheve.com witheve.com]\n"
    },
    {
      "type": "markdown",
      "id": "feededdb716e7e80",
      "text": "-  Similar to Jupyter Notebooks, [[R Notebooks]] are a method of literate programming that allows for direct interaction with [[R (programming language)|R]] (support for Python, SQL, and Bash are also explicitly named) while producing a reproducible document with publication-quality output - [https://bookdown.org/yihui/rmarkdown/notebook.html bookdown.org]\n"
    },
    {
      "type": "markdown",
      "id": "6226275e8e0d715a",
      "text": "-  The customization mechanism of the [[Text Encoding Initiative]] which enables the constraining, modification, or extension of the [[Text Encoding Initiative |TEI]] scheme enables users to mix prose documentation with fragments of schema specification in their [[One Document Does-it-all]] format. From this prose documentation, schemas, and processing model pipelines can be generated and Knuth's Literate Programming paradigm is cited as the inspiration for this way of working."
    },
    {
      "type": "markdown",
      "id": "f24b1f5b-9569-4ffc-9cf0-da692ca3b5fa",
      "text": "# See also"
    },
    {
      "type": "markdown",
      "id": "b358d4bc876971e6",
      "text": "- [[Donald Knuth]]\n- [[Literate programming]]\n- [[Holon programming]]"
    },
    {
      "type": "markdown",
      "id": "648a1faa-c8ba-40bf-bcba-dfc0a8c5bd77",
      "text": "- [[Literate Wiki]]\n- [[Programming In Wiki]]\n- [[Bret Victor]] - [[Inventing on Principle]]\n- [[Literate Tools]]"
    }
  ]
}