{
  "title": "LINDA",
  "story": [
    {
      "type": "paragraph",
      "id": "5cf367879721c7d6",
      "text": "We review some results regarding specification, programming and verification of different classes of distributed systems which stemmed from the research of the Concurrency and Mobility Group at University of Firenze."
    },
    {
      "type": "paragraph",
      "id": "2d4af2cef34835d5",
      "text": "More specifically, we examine the distinguishing features of network-aware programming, service-oriented computing, autonomic computing, and collective adaptive systems programming. We then present an overview of four different languages, namely Klaim, Cows, Scel and AbC. For each language, we discuss design choices, present syntax and semantics, show how the different formalisms can be used to model and program a travel booking scenario, and describe programming environments and verification techniques."
    },
    {
      "type": "pagefold",
      "id": "aefc55334e3234ab",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "5f4474c34db232f1",
      "text": "DE NICOLA, Rocco, FERRARI, Gianluigi, PUGLIESE, Rosario and TIEZZI, Francesco, 2020. A formal approach to the engineering of domain-specific distributed systems. Journal of Logical and Algebraic Methods in Programming. 2020. Vol. 111, p. 100511. [https://www.sciencedirect.com/science/article/pii/S2352220819301567 sciencedirect] [https://doi.org/10.1016/j.jlamp.2019.100511 doi] [Accessed 17 January 2024]. \n"
    },
    {
      "type": "paragraph",
      "id": "f06765cc948e0e05",
      "text": "DE NICOLA, Rocco, FERRARI, Gianluigi, PUGLIESE, Rosario and TIEZZI, Francesco, 2018. A Formal Approach to the Engineering of Domain-Specific Distributed Systems. In: DI MARZO SERUGENDO, Giovanna and LORETI, Michele (eds.), Coordination Models and Languages. Cham: Springer International Publishing. p. 110–141. Lecture Notes in Computer Science. ISBN 978-3-319-92407-6. [https://inria.hal.science/hal-01821499 hal] [Accessed 17 January 2024]."
    },
    {
      "type": "paragraph",
      "id": "d9a8daeef0177cd3",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "1373e9312fec4d6f",
      "text": "Klaim builds on Linda’s notion of [[Generative Communication]] through a single shared tuple space and generalises it to multiple distributed tuple spaces."
    },
    {
      "type": "paragraph",
      "id": "0f2d316aadc80e9f",
      "text": "[…]"
    },
    {
      "type": "paragraph",
      "id": "261e28c4b70ad074",
      "text": "Especially at the beginning of this century, with the manifest pervasivity of the Internet, many researchers have considered both models and implementations of network-aware formalisms that have or have been influenced by the work on Klaim and other Linda-based models and primitives."
    },
    {
      "type": "pagefold",
      "id": "790570f37985abee",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "9fcab549935f9551",
      "site": "wiki.ralfbarkow.ch",
      "slug": "2023-12-29",
      "title": "2023-12-29",
      "text": "Is there Static Typing for a Smalltalk derivative? [[Alan Kay]] via [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
    },
    {
      "type": "markdown",
      "id": "aa5df413d00700d3",
      "text": "> There’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like **LINDA** as a messaging “broker” makes sense, etc."
    },
    {
      "type": "paragraph",
      "id": "f61c5e8def3f3800",
      "text": "[…]"
    },
    {
      "type": "markdown",
      "id": "a8c562d6e5ec0551",
      "text": "> One starting place could be with something like **LINDA++** where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already."
    },
    {
      "type": "pagefold",
      "id": "3e1a13157b5966f0",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "b92bf253beeba2e8",
      "site": "wiki.ralfbarkow.ch",
      "slug": "general-game-playing",
      "title": "General Game Playing",
      "text": "[[Michael Genesereth]], Computer Science Department, Stanford University, Overview of General Game Playing [http://ggp.stanford.edu/notes/overview.html page]"
    },
    {
      "type": "markdown",
      "id": "c17c62d28591fa17",
      "text": "> […] Game Description"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "LINDA",
        "story": []
      },
      "date": 1705505916222
    },
    {
      "item": {
        "type": "factory",
        "id": "5f4474c34db232f1"
      },
      "id": "5f4474c34db232f1",
      "type": "add",
      "date": 1705505917594
    },
    {
      "type": "edit",
      "id": "5f4474c34db232f1",
      "item": {
        "type": "paragraph",
        "id": "5f4474c34db232f1",
        "text": "\nDE NICOLA, Rocco, FERRARI, Gianluigi, PUGLIESE, Rosario and TIEZZI, Francesco, 2020. A formal approach to the engineering of domain-specific distributed systems. Journal of Logical and Algebraic Methods in Programming. Online. 2020. Vol. 111, p. 100511. Available from: https://www.sciencedirect.com/science/article/pii/S2352220819301567 [Accessed 17 January 2024]. \n"
      },
      "date": 1705505919343
    },
    {
      "type": "edit",
      "id": "5f4474c34db232f1",
      "item": {
        "type": "paragraph",
        "id": "5f4474c34db232f1",
        "text": "DE NICOLA, Rocco, FERRARI, Gianluigi, PUGLIESE, Rosario and TIEZZI, Francesco, 2020. A formal approach to the engineering of domain-specific distributed systems. Journal of Logical and Algebraic Methods in Programming. 2020. Vol. 111, p. 100511. [https://www.sciencedirect.com/science/article/pii/S2352220819301567 sciencedirect] [Accessed 17 January 2024]. \n"
      },
      "date": 1705505991941
    },
    {
      "type": "edit",
      "id": "5f4474c34db232f1",
      "item": {
        "type": "paragraph",
        "id": "5f4474c34db232f1",
        "text": "DE NICOLA, Rocco, FERRARI, Gianluigi, PUGLIESE, Rosario and TIEZZI, Francesco, 2020. A formal approach to the engineering of domain-specific distributed systems. Journal of Logical and Algebraic Methods in Programming. 2020. Vol. 111, p. 100511. [https://www.sciencedirect.com/science/article/pii/S2352220819301567 sciencedirect] [https://doi.org/10.1016/j.jlamp.2019.100511 doi][Accessed 17 January 2024]. \n"
      },
      "date": 1705506125251
    },
    {
      "type": "edit",
      "id": "5f4474c34db232f1",
      "item": {
        "type": "paragraph",
        "id": "5f4474c34db232f1",
        "text": "DE NICOLA, Rocco, FERRARI, Gianluigi, PUGLIESE, Rosario and TIEZZI, Francesco, 2020. A formal approach to the engineering of domain-specific distributed systems. Journal of Logical and Algebraic Methods in Programming. 2020. Vol. 111, p. 100511. [https://www.sciencedirect.com/science/article/pii/S2352220819301567 sciencedirect] [https://doi.org/10.1016/j.jlamp.2019.100511 doi] [Accessed 17 January 2024]. \n"
      },
      "date": 1705506129936
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1705506743120
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1705511341861
    },
    {
      "item": {
        "type": "factory",
        "id": "5cf367879721c7d6"
      },
      "id": "5cf367879721c7d6",
      "type": "add",
      "after": "5f4474c34db232f1",
      "date": 1705511345222
    },
    {
      "id": "5cf367879721c7d6",
      "type": "move",
      "order": [
        "5cf367879721c7d6",
        "5f4474c34db232f1"
      ],
      "date": 1705511346953
    },
    {
      "type": "edit",
      "id": "5cf367879721c7d6",
      "item": {
        "type": "paragraph",
        "id": "5cf367879721c7d6",
        "text": "We review some results regarding specification, programming and verification of different classes of distributed systems which stemmed from the research of the Concurrency and Mobility Group at University of Firenze. More specifically, we examine the distinguishing features of network-aware programming, service-oriented computing, autonomic computing, and collective adaptive systems programming. We then present an overview of four different languages, namely Klaim, Cows, Scel and AbC. For each language, we discuss design choices, present syntax and semantics, show how the different formalisms can be used to model and program a travel booking scenario, and describe programming environments and verification techniques."
      },
      "date": 1705511349334
    },
    {
      "item": {
        "type": "factory",
        "id": "aefc55334e3234ab"
      },
      "id": "aefc55334e3234ab",
      "type": "add",
      "after": "5f4474c34db232f1",
      "date": 1705511351028
    },
    {
      "id": "aefc55334e3234ab",
      "type": "move",
      "order": [
        "5cf367879721c7d6",
        "aefc55334e3234ab",
        "5f4474c34db232f1"
      ],
      "date": 1705511352681
    },
    {
      "type": "edit",
      "id": "aefc55334e3234ab",
      "item": {
        "type": "pagefold",
        "id": "aefc55334e3234ab",
        "text": "~"
      },
      "date": 1705511356488
    },
    {
      "type": "edit",
      "id": "5cf367879721c7d6",
      "item": {
        "type": "paragraph",
        "id": "5cf367879721c7d6",
        "text": "We review some results regarding specification, programming and verification of different classes of distributed systems which stemmed from the research of the Concurrency and Mobility Group at University of Firenze."
      },
      "date": 1705511372891
    },
    {
      "type": "add",
      "id": "2d4af2cef34835d5",
      "item": {
        "type": "paragraph",
        "id": "2d4af2cef34835d5",
        "text": "More specifically, we examine the distinguishing features of network-aware programming, service-oriented computing, autonomic computing, and collective adaptive systems programming. We then present an overview of four different languages, namely Klaim, Cows, Scel and AbC. For each language, we discuss design choices, present syntax and semantics, show how the different formalisms can be used to model and program a travel booking scenario, and describe programming environments and verification techniques."
      },
      "after": "5cf367879721c7d6",
      "date": 1705511374070
    },
    {
      "item": {
        "type": "factory",
        "id": "f06765cc948e0e05"
      },
      "id": "f06765cc948e0e05",
      "type": "add",
      "after": "5f4474c34db232f1",
      "date": 1705511512027
    },
    {
      "type": "edit",
      "id": "f06765cc948e0e05",
      "item": {
        "type": "paragraph",
        "id": "f06765cc948e0e05",
        "text": "\nDE NICOLA, Rocco, FERRARI, Gianluigi, PUGLIESE, Rosario and TIEZZI, Francesco, 2018. A Formal Approach to the Engineering of Domain-Specific Distributed Systems. In: DI MARZO SERUGENDO, Giovanna and LORETI, Michele (eds.), Coordination Models and Languages. Online. Cham: Springer International Publishing. p. 110–141. Lecture Notes in Computer Science. ISBN 978-3-319-92407-6. [Accessed 17 January 2024]. \n"
      },
      "date": 1705511514101
    },
    {
      "type": "edit",
      "id": "f06765cc948e0e05",
      "item": {
        "type": "paragraph",
        "id": "f06765cc948e0e05",
        "text": "DE NICOLA, Rocco, FERRARI, Gianluigi, PUGLIESE, Rosario and TIEZZI, Francesco, 2018. A Formal Approach to the Engineering of Domain-Specific Distributed Systems. In: DI MARZO SERUGENDO, Giovanna and LORETI, Michele (eds.), Coordination Models and Languages. Cham: Springer International Publishing. p. 110–141. Lecture Notes in Computer Science. ISBN 978-3-319-92407-6. [Accessed 17 January 2024]. \n"
      },
      "date": 1705511528021
    },
    {
      "type": "edit",
      "id": "f06765cc948e0e05",
      "item": {
        "type": "paragraph",
        "id": "f06765cc948e0e05",
        "text": "DE NICOLA, Rocco, FERRARI, Gianluigi, PUGLIESE, Rosario and TIEZZI, Francesco, 2018. A Formal Approach to the Engineering of Domain-Specific Distributed Systems. In: DI MARZO SERUGENDO, Giovanna and LORETI, Michele (eds.), Coordination Models and Languages. Cham: Springer International Publishing. p. 110–141. Lecture Notes in Computer Science. ISBN 978-3-319-92407-6. [https://inria.hal.science/hal-01821499 hal] [Accessed 17 January 2024]. \n"
      },
      "date": 1705511586491
    },
    {
      "item": {
        "type": "factory",
        "id": "9fcab549935f9551"
      },
      "id": "9fcab549935f9551",
      "type": "add",
      "after": "f06765cc948e0e05",
      "date": 1705511689238
    },
    {
      "type": "edit",
      "id": "9fcab549935f9551",
      "item": {
        "type": "reference",
        "id": "9fcab549935f9551",
        "site": "wiki.ralfbarkow.ch",
        "slug": "2023-12-29",
        "title": "2023-12-29",
        "text": "The [[Journal]], when properly maintained, [[collect]]s the complete history of a wiki page."
      },
      "date": 1705511691834
    },
    {
      "type": "edit",
      "id": "9fcab549935f9551",
      "item": {
        "type": "reference",
        "id": "9fcab549935f9551",
        "site": "wiki.ralfbarkow.ch",
        "slug": "2023-12-29",
        "title": "2023-12-29",
        "text": "Is there Static Typing for a Smalltalk derivative?"
      },
      "date": 1705511717292
    },
    {
      "type": "edit",
      "id": "9fcab549935f9551",
      "item": {
        "type": "reference",
        "id": "9fcab549935f9551",
        "site": "wiki.ralfbarkow.ch",
        "slug": "2023-12-29",
        "title": "2023-12-29",
        "text": "Is there Static Typing for a Smalltalk derivative? [[Alan Kay]] via [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1705511730917
    },
    {
      "id": "aa5df413d00700d3",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "aa5df413d00700d3",
        "text": "Now let us use the fact that we are 45 years removed from Smalltalk, and now have the large universal network that my ARPA/Parc research community was also working on. We first note that if we have a good idea of the receiver, then we can definitely send a message anywhere on the Internet, and this can work just fine. We will have to program in much less of a subroutine style than Smalltalkers did in the 70s (and probably still do now). In other words, we really are sending messages, and the replies might take quite a while, might not happen, etc. This is OK — the ARPA/Parc community was a “full-duplex” community and all of its network inventions were [[Full-Duplex]].\n\nThere’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like [[LINDA]] as a messaging “broker” makes sense, etc.\n\nOn such a world-wide network, we might not know the local names of useful services and resources, and they might not know enough about our particular object to help much.\n\nI think this is a good place to ponder the kinds of “modern semantic typing” that are needed to deal with the enormous scales that happened, since we were able to do a pretty good account and demo of “personal computing” in about 10,000 lines of code in Smalltalk-78 on a Dorado."
      },
      "after": "9fcab549935f9551",
      "attribution": {
        "page": "2023-12-29",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1705511744538
    },
    {
      "type": "edit",
      "id": "aa5df413d00700d3",
      "item": {
        "type": "paragraph",
        "id": "aa5df413d00700d3",
        "text": "> There’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like [[LINDA]] as a messaging “broker” makes sense, etc."
      },
      "date": 1705511768193
    },
    {
      "type": "edit",
      "id": "aa5df413d00700d3",
      "item": {
        "type": "markdown",
        "id": "aa5df413d00700d3",
        "text": "> There’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like [[LINDA]] as a messaging “broker” makes sense, etc."
      },
      "date": 1705511769400
    },
    {
      "id": "a8c562d6e5ec0551",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "a8c562d6e5ec0551",
        "text": "One starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already.\n\nI think we should at least start with ideas such as those Doug Lenat had for AM (Automated Mathematician) and Eurisko (both of these systems were active and had lots of heuristic methods to help decide that “this thing is like that thing”).\n\nOne thing that would be interesting to associate with “foo” is a simulation of the resource we are looking for. This is something that would be more semantic than pragmatic, but which could eventually produce typical replies to messages."
      },
      "after": "aa5df413d00700d3",
      "attribution": {
        "page": "2023-12-29",
        "site": "wiki.ralfbarkow.ch"
      },
      "date": 1705511787635
    },
    {
      "type": "edit",
      "id": "a8c562d6e5ec0551",
      "item": {
        "type": "markdown",
        "id": "a8c562d6e5ec0551",
        "text": "> One starting place could be with something like LINDA++ where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already."
      },
      "date": 1705511800114
    },
    {
      "item": {
        "type": "factory",
        "id": "f61c5e8def3f3800"
      },
      "id": "f61c5e8def3f3800",
      "type": "add",
      "after": "a8c562d6e5ec0551",
      "date": 1705511802111
    },
    {
      "id": "f61c5e8def3f3800",
      "type": "move",
      "order": [
        "5cf367879721c7d6",
        "2d4af2cef34835d5",
        "aefc55334e3234ab",
        "5f4474c34db232f1",
        "f06765cc948e0e05",
        "9fcab549935f9551",
        "aa5df413d00700d3",
        "f61c5e8def3f3800",
        "a8c562d6e5ec0551"
      ],
      "date": 1705511803918
    },
    {
      "type": "edit",
      "id": "f61c5e8def3f3800",
      "item": {
        "type": "paragraph",
        "id": "f61c5e8def3f3800",
        "text": "[…]"
      },
      "date": 1705511806513
    },
    {
      "type": "edit",
      "id": "aa5df413d00700d3",
      "item": {
        "type": "markdown",
        "id": "aa5df413d00700d3",
        "text": "> There’s a lot to be said for full-duplex programming. One set of examples I like are from Erlang and its offspring. Using something like **LINDA** as a messaging “broker” makes sense, etc."
      },
      "date": 1705511825822
    },
    {
      "type": "edit",
      "id": "a8c562d6e5ec0551",
      "item": {
        "type": "markdown",
        "id": "a8c562d6e5ec0551",
        "text": "> One starting place could be with something like **LINDA++** where we are matching descriptions using a more universal vocabulary. But I think we are beyond that point already."
      },
      "date": 1705511830142
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1705511841767
    },
    {
      "type": "edit",
      "id": "f06765cc948e0e05",
      "item": {
        "type": "paragraph",
        "id": "f06765cc948e0e05",
        "text": "DE NICOLA, Rocco, FERRARI, Gianluigi, PUGLIESE, Rosario and TIEZZI, Francesco, 2018. A Formal Approach to the Engineering of Domain-Specific Distributed Systems. In: DI MARZO SERUGENDO, Giovanna and LORETI, Michele (eds.), Coordination Models and Languages. Cham: Springer International Publishing. p. 110–141. Lecture Notes in Computer Science. ISBN 978-3-319-92407-6. [https://inria.hal.science/hal-01821499 hal] [Accessed 17 January 2024]."
      },
      "date": 1705511904127
    },
    {
      "type": "add",
      "id": "d9a8daeef0177cd3",
      "item": {
        "type": "paragraph",
        "id": "d9a8daeef0177cd3",
        "text": "[…]"
      },
      "after": "f06765cc948e0e05",
      "date": 1705511907236
    },
    {
      "type": "add",
      "id": "261e28c4b70ad074",
      "item": {
        "type": "paragraph",
        "id": "261e28c4b70ad074",
        "text": "Especially at the beginning of this century, with the manifest pervasivity of the Internet, many researchers have considered both models and implementations of network-aware formalisms that have or have been influenced by the work on Klaim and other Linda-based models and primitives."
      },
      "after": "d9a8daeef0177cd3",
      "date": 1705511907903
    },
    {
      "item": {
        "type": "pagefold",
        "id": "790570f37985abee",
        "text": "~"
      },
      "id": "790570f37985abee",
      "type": "add",
      "after": "a8c562d6e5ec0551",
      "date": 1705511937103
    },
    {
      "id": "790570f37985abee",
      "type": "move",
      "order": [
        "5cf367879721c7d6",
        "2d4af2cef34835d5",
        "aefc55334e3234ab",
        "5f4474c34db232f1",
        "f06765cc948e0e05",
        "d9a8daeef0177cd3",
        "261e28c4b70ad074",
        "790570f37985abee",
        "9fcab549935f9551",
        "aa5df413d00700d3",
        "f61c5e8def3f3800",
        "a8c562d6e5ec0551"
      ],
      "date": 1705511940460,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1705511947273
    },
    {
      "item": {
        "type": "factory",
        "id": "3e1a13157b5966f0"
      },
      "id": "3e1a13157b5966f0",
      "type": "add",
      "after": "a8c562d6e5ec0551",
      "date": 1705512037672
    },
    {
      "item": {
        "type": "factory",
        "id": "b92bf253beeba2e8"
      },
      "id": "b92bf253beeba2e8",
      "type": "add",
      "after": "3e1a13157b5966f0",
      "date": 1705512041916
    },
    {
      "type": "edit",
      "id": "b92bf253beeba2e8",
      "item": {
        "type": "reference",
        "id": "b92bf253beeba2e8",
        "site": "wiki.ralfbarkow.ch",
        "slug": "general-game-playing",
        "title": "General Game Playing",
        "text": "[[Michael Genesereth]], Computer Science Department, Stanford University"
      },
      "date": 1705512044237
    },
    {
      "type": "edit",
      "id": "b92bf253beeba2e8",
      "item": {
        "type": "reference",
        "id": "b92bf253beeba2e8",
        "site": "wiki.ralfbarkow.ch",
        "slug": "general-game-playing",
        "title": "General Game Playing",
        "text": "[[Michael Genesereth]], Computer Science Department, Stanford University, Overview of General Game Playing [http://ggp.stanford.edu/notes/overview.html page]"
      },
      "date": 1705512105356
    },
    {
      "item": {
        "type": "factory",
        "id": "c17c62d28591fa17"
      },
      "id": "c17c62d28591fa17",
      "type": "add",
      "after": "b92bf253beeba2e8",
      "date": 1705512127127
    },
    {
      "type": "edit",
      "id": "c17c62d28591fa17",
      "item": {
        "type": "markdown",
        "id": "c17c62d28591fa17",
        "text": "> […] Game Description"
      },
      "date": 1705512131789
    },
    {
      "type": "add",
      "id": "1373e9312fec4d6f",
      "item": {
        "type": "paragraph",
        "id": "1373e9312fec4d6f",
        "text": "Klaim builds on Linda’s notion of generative communication through a single shared tuple space [11] and generalises it to multiple distributed tuple spaces."
      },
      "after": "261e28c4b70ad074",
      "date": 1705512254947
    },
    {
      "type": "add",
      "id": "0f2d316aadc80e9f",
      "item": {
        "type": "paragraph",
        "id": "0f2d316aadc80e9f",
        "text": "[…]"
      },
      "after": "f06765cc948e0e05",
      "date": 1705512263970
    },
    {
      "type": "edit",
      "id": "1373e9312fec4d6f",
      "item": {
        "type": "paragraph",
        "id": "1373e9312fec4d6f",
        "text": "Klaim builds on Linda’s notion of generative communication through a single shared tuple space and generalises it to multiple distributed tuple spaces."
      },
      "date": 1705512280496
    },
    {
      "type": "edit",
      "id": "1373e9312fec4d6f",
      "item": {
        "type": "paragraph",
        "id": "1373e9312fec4d6f",
        "text": "Klaim builds on Linda’s notion of [[Generative Communication]] through a single shared tuple space and generalises it to multiple distributed tuple spaces."
      },
      "date": 1705512312196
    },
    {
      "id": "d9a8daeef0177cd3",
      "type": "move",
      "order": [
        "5cf367879721c7d6",
        "2d4af2cef34835d5",
        "aefc55334e3234ab",
        "5f4474c34db232f1",
        "f06765cc948e0e05",
        "0f2d316aadc80e9f",
        "261e28c4b70ad074",
        "d9a8daeef0177cd3",
        "1373e9312fec4d6f",
        "790570f37985abee",
        "9fcab549935f9551",
        "aa5df413d00700d3",
        "f61c5e8def3f3800",
        "a8c562d6e5ec0551",
        "3e1a13157b5966f0",
        "b92bf253beeba2e8",
        "c17c62d28591fa17"
      ],
      "date": 1705590147822
    },
    {
      "type": "edit",
      "id": "3e1a13157b5966f0",
      "item": {
        "type": "pagefold",
        "id": "3e1a13157b5966f0",
        "text": "~"
      },
      "date": 1705590200338
    },
    {
      "id": "1373e9312fec4d6f",
      "type": "move",
      "order": [
        "5cf367879721c7d6",
        "2d4af2cef34835d5",
        "aefc55334e3234ab",
        "5f4474c34db232f1",
        "f06765cc948e0e05",
        "1373e9312fec4d6f",
        "0f2d316aadc80e9f",
        "261e28c4b70ad074",
        "d9a8daeef0177cd3",
        "790570f37985abee",
        "9fcab549935f9551",
        "aa5df413d00700d3",
        "f61c5e8def3f3800",
        "a8c562d6e5ec0551",
        "3e1a13157b5966f0",
        "b92bf253beeba2e8",
        "c17c62d28591fa17"
      ],
      "date": 1705590240072
    },
    {
      "id": "d9a8daeef0177cd3",
      "type": "move",
      "order": [
        "5cf367879721c7d6",
        "2d4af2cef34835d5",
        "aefc55334e3234ab",
        "5f4474c34db232f1",
        "f06765cc948e0e05",
        "d9a8daeef0177cd3",
        "1373e9312fec4d6f",
        "0f2d316aadc80e9f",
        "261e28c4b70ad074",
        "790570f37985abee",
        "9fcab549935f9551",
        "aa5df413d00700d3",
        "f61c5e8def3f3800",
        "a8c562d6e5ec0551",
        "3e1a13157b5966f0",
        "b92bf253beeba2e8",
        "c17c62d28591fa17"
      ],
      "date": 1705590245342
    }
  ]
}