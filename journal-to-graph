{
  "title": "Journal to Graph",
  "story": [
    {
      "type": "paragraph",
      "id": "ec7cfe29cb68b0fb",
      "text": "We want to convert the [[Journal]] into a [[Graph]] with page journal items as nodes."
    },
    {
      "type": "reference",
      "id": "6e7adca8a4947ee9",
      "site": "wiki.ralfbarkow.ch",
      "slug": "read-context-of-frame",
      "title": "Read Context of Frame",
      "text": "We send a message to the Frame asking it to send us info about the page surrounding it. [https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage mdn]"
    },
    {
      "type": "code",
      "id": "c8963fb39e7da82f",
      "text": "window.addEventListener(\"message\", handler)\nlet message = { action:\"sendFrameContext\" }\nwindow.parent.postMessage(message, \"*\")"
    },
    {
      "type": "paragraph",
      "id": "433e0069aa2ef6ee",
      "text": "We stop listening then process the data we got."
    },
    {
      "type": "code",
      "id": "00e55c113558b626",
      "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    const journal = JSON.stringify(page.journal)\n    show(page, journal)\n  }\n}"
    },
    {
      "type": "paragraph",
      "id": "2d2f5ff7dc632826",
      "text": "We define a class called Graph that represents a graph data structure. [https://github.com/WardCunningham/assets/blob/d5509357d400a42be55588224b5b117d41424b20/pages/super-collaborator/graph.js github]"
    },
    {
      "type": "code",
      "id": "72aeebe8eb47daf9",
      "text": "export class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n"
    },
    {
      "type": "paragraph",
      "id": "888bf52ed83d1bad",
      "text": "The constructor takes two optional parameters nodes and rels which are arrays of nodes and relationships in the graph respectively. "
    },
    {
      "type": "paragraph",
      "id": "4633a8fe45f7d185",
      "text": "The addNode method allows a new node to be added to the graph with a given type and properties, and returns the index of the new node in the nodes array. "
    },
    {
      "type": "code",
      "id": "df0adbcc9a7cf9b8",
      "text": "  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }"
    },
    {
      "type": "paragraph",
      "id": "b4eb1474230ff347",
      "text": "The addRel method allows a new relationship to be added between two nodes specified by their indices, with a given type and properties. "
    },
    {
      "type": "code",
      "id": "66abb70b9732e9f9",
      "text": "  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }"
    },
    {
      "type": "paragraph",
      "id": "e3ef0ded2d102486",
      "text": "The tally method returns an object that contains the count of each node and relationship type in the graph. "
    },
    {
      "type": "code",
      "id": "c30a817e0f4d743b",
      "text": "  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n"
    },
    {
      "type": "paragraph",
      "id": "7ce24ecfb7028c10",
      "text": "The size method returns the total number of nodes and relationships in the graph. "
    },
    {
      "type": "code",
      "id": "a809a28f235d2182",
      "text": "  size(){\n    return this.nodes.length + this.rels.length;\n  }"
    },
    {
      "type": "paragraph",
      "id": "18800bc5ffa70f64",
      "text": "The load method is a static method that can be used to create a new Graph instance from a JSON object."
    },
    {
      "type": "code",
      "id": "34d054563f9a9a0a",
      "text": "  static load(obj) {\n    return new Graph(obj.nodes, obj.rels)\n  }"
    },
    {
      "type": "code",
      "id": "ef04d15a1957b212",
      "text": "  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
    },
    {
      "type": "pagefold",
      "id": "8318dc9fbfaf2139",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "ac3880d438d89afd",
      "text": "The page we show in the Journal to Graph frame below is the page on the screen which might be a ghost, maybe retrieved from history.",
      "alias": "ca075d681c953999"
    },
    {
      "type": "code",
      "id": "cff317c5386f7b33",
      "text": "function show (page, journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  const actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<h1>Journal to Graph</h1>\n<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${actions.join(\"\\n\")}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
    },
    {
      "type": "paragraph",
      "id": "e4c77b29d73d4ef2",
      "text": "Note: We plan to use the load method to create a new Graph instance from a [[Journal]] JSON object."
    },
    {
      "type": "paragraph",
      "id": "9c942e4e3f9326b3",
      "text": "Frame: [⇒ [[Static Import Snippet]], importjs.html]"
    },
    {
      "type": "frame",
      "id": "777ff878d8f1cc7e",
      "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 200"
    },
    {
      "type": "pagefold",
      "id": "26f658e266960e5a",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "f4d43f148cd0fff1",
      "text": "We define a uniq function that returns a new array with all duplicate values removed."
    },
    {
      "type": "code",
      "id": "fd5d83be681e1f38",
      "text": "const uniq = (value, index, self) => self.indexOf(value) === index"
    },
    {
      "type": "paragraph",
      "id": "f1ee4707438c9b92",
      "text": "We define a class called Nodes that is used to represent a collection of nodes in a graph. "
    },
    {
      "type": "code",
      "id": "5f3be96aa0806e09",
      "text": "export class Nodes {\n  constructor (graph, nids) {\n  console.log('Nodes',{graph:graph.size(),type,nids})\n    this.graph = graph\n    this.nids = nids\n  }"
    },
    {
      "type": "paragraph",
      "id": "fb09a5e806034ab9",
      "text": "The constructor takes two arguments: \"graph\" (an object representing the entire graph) and \"nids\" (an array of node IDs that belong to the current collection of nodes)."
    },
    {
      "type": "paragraph",
      "id": "51207eb9d312fee2",
      "text": "The class has several methods:"
    },
    {
      "type": "paragraph",
      "id": "6bb962eccab85b09",
      "text": "\"i(type=null, props={})\" – This method returns a new collection of relationship objects (represented by another class called \"Rels\") that originate from any of the nodes in the current collection. The method takes two optional arguments: \"type\" (a string representing a relationship type) and \"props\" (an object representing relationship properties). If provided, the method filters the resulting relationship objects based on these arguments."
    },
    {
      "type": "code",
      "id": "a63c445187b064c4",
      "text": "  i(type=null, props={}) {\n    console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n"
    },
    {
      "type": "paragraph",
      "id": "21d6b6749e1f7796",
      "text": "\"o(type=null, props={})\" – This method is similar to the \"i\" method, but instead returns a new collection of relationship objects that terminate at any of the nodes in the current collection."
    },
    {
      "type": "code",
      "id": "cb1300498a2b11d3",
      "text": "  o(type=null, props={}) {\n    console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }"
    },
    {
      "type": "paragraph",
      "id": "a0fed1ab6b53b17d",
      "text": "\"props(key='name')\" – This method returns an array of unique values for a given property key across all nodes in the current collection. By default, the \"name\" property is returned."
    },
    {
      "type": "code",
      "id": "b98db9a5927be63e",
      "text": "  props(key='name') {\n    console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }"
    },
    {
      "type": "paragraph",
      "id": "786b4f8138fc28b0",
      "text": "\"types()\" – This method returns an array of unique node types across all nodes in the current collection."
    },
    {
      "type": "code",
      "id": "2dc5a0ada872ba3c",
      "text": "  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }"
    },
    {
      "type": "paragraph",
      "id": "bf9cc3a1c79c9e3f",
      "text": "\"tally()\" – This method returns an object representing a tally of node types in the current collection."
    },
    {
      "type": "code",
      "id": "b52fc4fb567d46b3",
      "text": "  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }"
    },
    {
      "type": "paragraph",
      "id": "991315787275efe4",
      "text": "\"size()\" – This method returns the number of nodes in the current collection."
    },
    {
      "type": "code",
      "id": "c7e536a88ce83c2c",
      "text": "  size(){\n    return this.nids.length\n  }"
    },
    {
      "type": "paragraph",
      "id": "95864a115d5964f4",
      "text": "\"filter(f)\" – This method returns a new collection of nodes that satisfy a given filter function \"f\". The filter function takes two arguments: \"type\" (a string representing a node type) and \"props\" (an object representing node properties)."
    },
    {
      "type": "code",
      "id": "26c49978db091d77",
      "text": "  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }"
    },
    {
      "type": "paragraph",
      "id": "df0de92af0b8a619",
      "text": "\"map(f)\" – This method returns an array of results obtained by applying a given function \"f\" to each node in the current collection. The function takes a single argument, a node object."
    },
    {
      "type": "code",
      "id": "0015aea4e4875074",
      "text": "  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}"
    },
    {
      "type": "pagefold",
      "id": "5baed24daf77ce36",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "2d2233519bbf91db",
      "text": "We define a class called Rels. The class takes two arguments graph and rids in its constructor method. The graph argument represents a graph data structure and rids represents an array of relationship ids in the graph. "
    },
    {
      "type": "code",
      "id": "33774cb11874876b",
      "text": "export class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n"
    },
    {
      "type": "paragraph",
      "id": "f09beb87e844535b",
      "text": "The class has several methods defined in it, which are:"
    },
    {
      "type": "paragraph",
      "id": "d9bdcd48a9ec97f6",
      "text": "f(type=null, props={}): This method takes two optional arguments, type and props. It filters the nodes connected from the relationships in rids and returns the filtered nodes as an instance of the Nodes class. If type is provided, it further filters the nodes based on their type. If props is provided, it filters the nodes based on the values of their properties."
    },
    {
      "type": "code",
      "id": "a4808c2767cc18ca",
      "text": "  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }"
    },
    {
      "type": "paragraph",
      "id": "560a2141f87ed422",
      "text": "t(type=null, props={}): This method is similar to f(), but instead filters the nodes connected to the relationships in rids."
    },
    {
      "type": "code",
      "id": "ea915676ecb573c3",
      "text": "  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }"
    },
    {
      "type": "paragraph",
      "id": "293269983db8ada0",
      "text": "props(key='name'): This method returns an array of unique values of a given property (key) for all relationships in rids."
    },
    {
      "type": "code",
      "id": "6714f60b43b6c2fe",
      "text": "  props(key='name') {\n    // console.log('Rels.p',{key})\n    return this.rids.map(rid => this.graph.rels[rid].props[key]).filter(uniq).sort()\n  }"
    },
    {
      "type": "paragraph",
      "id": "5edc54607c13ebd4",
      "text": "types(): This method returns an array of unique relationship types for all relationships in rids."
    },
    {
      "type": "code",
      "id": "d435c3530f11b2ce",
      "text": "  types() {\n    return this.rids.map(rid => this.graph.rels[rid].type).filter(uniq).sort()\n  }"
    },
    {
      "type": "paragraph",
      "id": "2b9a69f6c5c6453c",
      "text": "tally(): This method returns an object containing a tally of the relationship types in rids."
    },
    {
      "type": "code",
      "id": "2f24ce927aac23e6",
      "text": "  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { rels:tally(this.rids.map(nid => this.graph.rels[nid]))};\n  }"
    },
    {
      "type": "paragraph",
      "id": "566661186dcd37d3",
      "text": "size(): This method returns the number of relationships in rids."
    },
    {
      "type": "code",
      "id": "5f8af97b8a8a0bc1",
      "text": "  size(){\n    return this.rids.length\n  }"
    },
    {
      "type": "paragraph",
      "id": "1df7bf8fcf7ffb51",
      "text": "filter(f): This method takes a function f as an argument and returns a new instance of Rels containing only the relationships in rids for which f returns true."
    },
    {
      "type": "code",
      "id": "6dc22166d5424c1c",
      "text": "  filter(f) {\n    const rels = this.graph.rels\n    const rids = this.rids.filter(rid => {\n      const rel = rels[rid]\n      return f(rel.type,rel.props)\n    })\n    return new Rels(this.graph,rids)\n  }"
    },
    {
      "type": "paragraph",
      "id": "22c3ece9ecd80d99",
      "text": "map(f): This method takes a function f as an argument and returns an array of values obtained by applying f to each relationship in rids."
    },
    {
      "type": "code",
      "id": "3b82b21577e7c56b",
      "text": "  map(f) {\n    const rels = this.graph.rels\n    const result = this.rids.map(rid => {\n      const rel = rels[rid]\n      return f(rel)\n    })\n    return result\n  }\n"
    },
    {
      "type": "code",
      "id": "313e0caf3b424be4",
      "text": "}"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Journal to Graph",
        "story": []
      },
      "date": 1679319564810
    },
    {
      "id": "ec7cfe29cb68b0fb",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ec7cfe29cb68b0fb",
        "text": "How to I transfer the [[Journal]] into a [[Graph]] with nodes (the nodes are the list items) and visualize the nodes as a svg path timeline in JavaScript?"
      },
      "attribution": {
        "page": "2023-03-20"
      },
      "date": 1679319579627
    },
    {
      "id": "ef04d15a1957b212",
      "type": "add",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "'use strict';\n\nimport * as cypher from './cypher.js'\n\nconst uniq = (value, index, self) => self.indexOf(value) === index\n\nexport class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n\n  search (query, opt={}) {\n    const tree = cypher.parse(query)\n    // console.dir(tree, {depth:15})\n    const code = cypher.gen(0,tree[0][0],{})\n    // console.log(code)\n    cypher.check(this.tally(),code,opt.errors)\n    return cypher.apply(this, code)\n  }\n\n}\n\n\n\n\n\n\n// Fluent Interface (deprecated?)\n\nexport class Nodes {\n  constructor (graph, nids) {\n    // console.log('Nodes',{graph:graph.size(),type,nids})\n    this.graph = graph\n    this.nids = nids\n  }\n\n  // n(type=null, props={}) {\n  //   // console.log('Nodes.n',{type,props})\n  //   let nids = this.nids\n  //   if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n  //   for (let key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n  //   return new Nodes(this.graph, type, nids)\n  // }\n\n  i(type=null, props={}) {\n    // console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    // console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    // console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }\n\n  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}\n\nexport class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  props(key='name') {\n    // console.log('Rels.p',{key})\n    return this.rids.map(rid => this.graph.rels[rid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.rids.map(rid => this.graph.rels[rid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { rels:tally(this.rids.map(nid => this.graph.rels[nid]))};\n  }\n\n  size(){\n    return this.rids.length\n  }\n\n  filter(f) {\n    const rels = this.graph.rels\n    const rids = this.rids.filter(rid => {\n      const rel = rels[rid]\n      return f(rel.type,rel.props)\n    })\n    return new Rels(this.graph,rids)\n  }\n\n  map(f) {\n    const rels = this.graph.rels\n    const result = this.rids.map(rid => {\n      const rel = rels[rid]\n      return f(rel)\n    })\n    return result\n  }\n}"
      },
      "after": "ec7cfe29cb68b0fb",
      "attribution": {
        "page": "Graph"
      },
      "date": 1679319632873
    },
    {
      "item": {
        "type": "factory",
        "id": "33774cb11874876b"
      },
      "id": "33774cb11874876b",
      "type": "add",
      "after": "ef04d15a1957b212",
      "date": 1679319679736
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "'use strict';\n\nimport * as cypher from './cypher.js'\n\nconst uniq = (value, index, self) => self.indexOf(value) === index\n\nexport class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n\n  search (query, opt={}) {\n    const tree = cypher.parse(query)\n    // console.dir(tree, {depth:15})\n    const code = cypher.gen(0,tree[0][0],{})\n    // console.log(code)\n    cypher.check(this.tally(),code,opt.errors)\n    return cypher.apply(this, code)\n  }\n\n}\n\n\n\n\n\n\n// Fluent Interface (deprecated?)\n\nexport class Nodes {\n  constructor (graph, nids) {\n    // console.log('Nodes',{graph:graph.size(),type,nids})\n    this.graph = graph\n    this.nids = nids\n  }\n\n  // n(type=null, props={}) {\n  //   // console.log('Nodes.n',{type,props})\n  //   let nids = this.nids\n  //   if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n  //   for (let key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n  //   return new Nodes(this.graph, type, nids)\n  // }\n\n  i(type=null, props={}) {\n    // console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    // console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    // console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }\n\n  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}\n\n"
      },
      "date": 1679319703549
    },
    {
      "type": "edit",
      "id": "33774cb11874876b",
      "item": {
        "type": "code",
        "id": "33774cb11874876b",
        "text": "export class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  props(key='name') {\n    // console.log('Rels.p',{key})\n    return this.rids.map(rid => this.graph.rels[rid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.rids.map(rid => this.graph.rels[rid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { rels:tally(this.rids.map(nid => this.graph.rels[nid]))};\n  }\n\n  size(){\n    return this.rids.length\n  }\n\n  filter(f) {\n    const rels = this.graph.rels\n    const rids = this.rids.filter(rid => {\n      const rel = rels[rid]\n      return f(rel.type,rel.props)\n    })\n    return new Rels(this.graph,rids)\n  }\n\n  map(f) {\n    const rels = this.graph.rels\n    const result = this.rids.map(rid => {\n      const rel = rels[rid]\n      return f(rel)\n    })\n    return result\n  }\n}"
      },
      "date": 1679319705138
    },
    {
      "item": {
        "type": "factory",
        "id": "a63c445187b064c4"
      },
      "id": "a63c445187b064c4",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679319733231
    },
    {
      "id": "a63c445187b064c4",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "ef04d15a1957b212",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679319737193
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "'use strict';\n\nimport * as cypher from './cypher.js'\n\nconst uniq = (value, index, self) => self.indexOf(value) === index\n\nexport class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n\n  search (query, opt={}) {\n    const tree = cypher.parse(query)\n    // console.dir(tree, {depth:15})\n    const code = cypher.gen(0,tree[0][0],{})\n    // console.log(code)\n    cypher.check(this.tally(),code,opt.errors)\n    return cypher.apply(this, code)\n  }\n\n}\n\n\n\n\n\n\n"
      },
      "date": 1679319766524
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "// Fluent Interface (deprecated?)\n\nexport class Nodes {\n  constructor (graph, nids) {\n    // console.log('Nodes',{graph:graph.size(),type,nids})\n    this.graph = graph\n    this.nids = nids\n  }\n\n  // n(type=null, props={}) {\n  //   // console.log('Nodes.n',{type,props})\n  //   let nids = this.nids\n  //   if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n  //   for (let key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n  //   return new Nodes(this.graph, type, nids)\n  // }\n\n  i(type=null, props={}) {\n    // console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    // console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    // console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }\n\n  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}\n\n"
      },
      "date": 1679319768483
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "'use strict';\n\nimport * as cypher from './cypher.js'\n\nconst uniq = (value, index, self) => self.indexOf(value) === index\n\nexport class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n\n  search (query, opt={}) {\n    const tree = cypher.parse(query)\n    // console.dir(tree, {depth:15})\n    const code = cypher.gen(0,tree[0][0],{})\n    // console.log(code)\n    cypher.check(this.tally(),code,opt.errors)\n    return cypher.apply(this, code)\n  }\n\n}"
      },
      "date": 1679319787500
    },
    {
      "type": "edit",
      "id": "ec7cfe29cb68b0fb",
      "item": {
        "type": "paragraph",
        "id": "ec7cfe29cb68b0fb",
        "text": "How to I transfer the [[Journal]] into a [[Graph]] with page journal items as nodes?"
      },
      "date": 1679319844639
    },
    {
      "type": "edit",
      "id": "ec7cfe29cb68b0fb",
      "item": {
        "type": "paragraph",
        "id": "ec7cfe29cb68b0fb",
        "text": "How to transfer the [[Journal]] into a [[Graph]] with page journal items as nodes?"
      },
      "date": 1679319851066
    },
    {
      "type": "edit",
      "id": "ec7cfe29cb68b0fb",
      "item": {
        "type": "paragraph",
        "id": "ec7cfe29cb68b0fb",
        "text": "How to transfer the [[Journal]] to a [[Graph]] with page journal items as nodes?"
      },
      "date": 1679319873372
    },
    {
      "type": "edit",
      "id": "ec7cfe29cb68b0fb",
      "item": {
        "type": "paragraph",
        "id": "ec7cfe29cb68b0fb",
        "text": "How to convert the [[Journal]] to a [[Graph]] with page journal items as nodes?"
      },
      "date": 1679319900972
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "'use strict';\n\nconst uniq = (value, index, self) => self.indexOf(value) === index\n\nexport class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n\n  search (query, opt={}) {\n    const tree = cypher.parse(query)\n    // console.dir(tree, {depth:15})\n    const code = cypher.gen(0,tree[0][0],{})\n    // console.log(code)\n    cypher.check(this.tally(),code,opt.errors)\n    return cypher.apply(this, code)\n  }\n\n}"
      },
      "date": 1679319983448
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "'use strict';\n\nconst uniq = (value, index, self) => self.indexOf(value) === index\n\nexport class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679320006336
    },
    {
      "item": {
        "type": "factory",
        "id": "fd5d83be681e1f38"
      },
      "id": "fd5d83be681e1f38",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679320063023
    },
    {
      "id": "fd5d83be681e1f38",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "ef04d15a1957b212",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679320071302
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "\n\nexport class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679320077814
    },
    {
      "type": "edit",
      "id": "fd5d83be681e1f38",
      "item": {
        "type": "code",
        "id": "fd5d83be681e1f38",
        "text": "'use strict';\n\nconst uniq = (value, index, self) => self.indexOf(value) === index"
      },
      "date": 1679320078810
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "export class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679320082889
    },
    {
      "id": "777ff878d8f1cc7e",
      "type": "add",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/basicjs.html?snippet-template\nHEIGHT 200"
      },
      "after": "ec7cfe29cb68b0fb",
      "attribution": {
        "page": "2023-03-20"
      },
      "date": 1679320271981
    },
    {
      "type": "edit",
      "id": "777ff878d8f1cc7e",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "//wiki.ralfbarkow.ch/assets/pages/snippet-template/importjs.html?snippet-template\nHEIGHT 200"
      },
      "date": 1679320309337
    },
    {
      "type": "edit",
      "id": "777ff878d8f1cc7e",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html?snippet-template\nHEIGHT 200"
      },
      "date": 1679320329304
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "// Fluent Interface (deprecated?)\n\nexport class Nodes {\n  constructor (graph, nids) {\n  console.log('Nodes',{graph:graph.size(),type,nids})\n    this.graph = graph\n    this.nids = nids\n  }\n\n  // n(type=null, props={}) {\n  //   // console.log('Nodes.n',{type,props})\n  //   let nids = this.nids\n  //   if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n  //   for (let key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n  //   return new Nodes(this.graph, type, nids)\n  // }\n\n  i(type=null, props={}) {\n    // console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    // console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    // console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }\n\n  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}\n\n"
      },
      "date": 1679320676834
    },
    {
      "type": "edit",
      "id": "777ff878d8f1cc7e",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 200"
      },
      "date": 1679320779878
    },
    {
      "id": "777ff878d8f1cc7e",
      "type": "move",
      "order": [
        "777ff878d8f1cc7e",
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "ef04d15a1957b212",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679320883554
    },
    {
      "id": "777ff878d8f1cc7e",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "ef04d15a1957b212",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679320922389
    },
    {
      "id": "a63c445187b064c4",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "ef04d15a1957b212",
        "a63c445187b064c4",
        "777ff878d8f1cc7e",
        "33774cb11874876b"
      ],
      "date": 1679320932110
    },
    {
      "id": "33774cb11874876b",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "ef04d15a1957b212",
        "a63c445187b064c4",
        "33774cb11874876b",
        "777ff878d8f1cc7e"
      ],
      "date": 1679320937731
    },
    {
      "item": {
        "type": "factory",
        "id": "cff317c5386f7b33"
      },
      "id": "cff317c5386f7b33",
      "type": "add",
      "after": "777ff878d8f1cc7e",
      "date": 1679320942601
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "// Create the graph object\nlet graph = new Graph();"
      },
      "date": 1679320977568
    },
    {
      "id": "33774cb11874876b",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "ef04d15a1957b212",
        "a63c445187b064c4",
        "777ff878d8f1cc7e",
        "33774cb11874876b",
        "cff317c5386f7b33"
      ],
      "date": 1679321049309
    },
    {
      "id": "cff317c5386f7b33",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "ef04d15a1957b212",
        "cff317c5386f7b33",
        "a63c445187b064c4",
        "777ff878d8f1cc7e",
        "33774cb11874876b"
      ],
      "date": 1679321060816
    },
    {
      "id": "777ff878d8f1cc7e",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "ef04d15a1957b212",
        "cff317c5386f7b33",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679321073665
    },
    {
      "id": "cff317c5386f7b33",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "cff317c5386f7b33",
        "ef04d15a1957b212",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679321148252
    },
    {
      "id": "777ff878d8f1cc7e",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "cff317c5386f7b33",
        "777ff878d8f1cc7e",
        "ef04d15a1957b212",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679321191525
    },
    {
      "id": "ef04d15a1957b212",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "ef04d15a1957b212",
        "cff317c5386f7b33",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679321237380
    },
    {
      "type": "add",
      "id": "9c942e4e3f9326b3",
      "item": {
        "type": "paragraph",
        "id": "9c942e4e3f9326b3",
        "text": "Frame:"
      },
      "after": "ec7cfe29cb68b0fb",
      "date": 1679321585466
    },
    {
      "id": "9c942e4e3f9326b3",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "ef04d15a1957b212",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679321596082
    },
    {
      "type": "edit",
      "id": "9c942e4e3f9326b3",
      "item": {
        "type": "paragraph",
        "id": "9c942e4e3f9326b3",
        "text": "Frame: [⇒ [[Static Import Snippet]]]"
      },
      "date": 1679321615833
    },
    {
      "type": "edit",
      "id": "9c942e4e3f9326b3",
      "item": {
        "type": "paragraph",
        "id": "9c942e4e3f9326b3",
        "text": "Frame: [⇒ [[Static Import Snippet]], importjs.html]"
      },
      "date": 1679321637293
    },
    {
      "id": "d4ee6431abc012ac",
      "type": "add",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "after": "cff317c5386f7b33",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679321691740
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let html = `<pre>${graph.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679321707943
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let html = `<pre>graph: ${graph.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679321801708
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let html = `<pre>${graph.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679321828234
    },
    {
      "id": "6e7adca8a4947ee9",
      "type": "add",
      "item": {
        "type": "reference",
        "id": "6e7adca8a4947ee9",
        "site": "wiki.ralfbarkow.ch",
        "slug": "read-context-of-frame",
        "title": "Read Context of Frame",
        "text": "We send a message to the Frame asking it to send us info about the page surrounding it. [https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage mdn]"
      },
      "after": "ec7cfe29cb68b0fb",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679321886258
    },
    {
      "id": "c8963fb39e7da82f",
      "type": "add",
      "item": {
        "type": "code",
        "id": "c8963fb39e7da82f",
        "text": "window.addEventListener(\"message\", handler)\nlet message = { action:\"sendFrameContext\" }\nwindow.parent.postMessage(message, \"*\")"
      },
      "after": "6e7adca8a4947ee9",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679321888960
    },
    {
      "id": "433e0069aa2ef6ee",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "433e0069aa2ef6ee",
        "text": "We stop listening then process the data we got."
      },
      "after": "c8963fb39e7da82f",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679321919663
    },
    {
      "id": "00e55c113558b626",
      "type": "add",
      "item": {
        "type": "code",
        "id": "00e55c113558b626",
        "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    show(page)\n  }\n}"
      },
      "after": "433e0069aa2ef6ee",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679321929079
    },
    {
      "id": "fd5d83be681e1f38",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "ef04d15a1957b212",
        "cff317c5386f7b33",
        "d4ee6431abc012ac",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679321942726
    },
    {
      "id": "d4ee6431abc012ac",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "d4ee6431abc012ac",
        "ef04d15a1957b212",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679322019968
    },
    {
      "id": "ca075d681c953999",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ca075d681c953999",
        "text": "The page we show is the page on the screen which might be a ghost, maybe retrieved from history."
      },
      "after": "00e55c113558b626",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679322028976
    },
    {
      "id": "ef04d15a1957b212",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "d4ee6431abc012ac",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679322108861
    },
    {
      "id": "cff317c5386f7b33",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "ef04d15a1957b212",
        "cff317c5386f7b33",
        "ca075d681c953999",
        "d4ee6431abc012ac",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679322115237
    },
    {
      "type": "edit",
      "id": "d4ee6431abc012ac",
      "item": {
        "type": "code",
        "id": "d4ee6431abc012ac",
        "text": "function show (page) {\n  let html = `<pre>${graph.stringify}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679322257979
    },
    {
      "type": "remove",
      "id": "d4ee6431abc012ac",
      "date": 1679322385466
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "// Create the graph object\nlet graph = new Graph();\n\nfunction show (page) {\n  let html = `<pre>${graph.stringify}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679322388240
    },
    {
      "type": "remove",
      "id": "ca075d681c953999",
      "date": 1679322390675
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "// Create the graph object\n\nfunction show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679322607030
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "// Create the graph object\n\nfunction show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679322774485
    },
    {
      "id": "ca075d681c953999",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ca075d681c953999",
        "text": "The page we show is the page on the screen which might be a ghost, maybe retrieved from history."
      },
      "after": "ef04d15a1957b212",
      "attribution": {
        "page": "Read Context of Frame"
      },
      "date": 1679322901182
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "// Create the graph object\n\nfunction show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679322972842
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "// Create the graph object\n\nfunction show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679323061234
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "// Create the graph object\n\nfunction show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679323077846
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "// Fluent Interface (deprecated?)\n\nexport class Nodes {\n  constructor (graph, nids) {\n  console.log('Nodes',{graph:graph.size(),type,nids})\n    this.graph = graph\n    this.nids = nids\n  }\n\n  i(type=null, props={}) {\n    console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }\n\n  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}\n\n"
      },
      "date": 1679323313385
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "// Fluent Interface (deprecated?)\n\nexport class Nodes {\n  constructor (graph, nids) {\n  console.log('Nodes',{graph:graph.size(),type,nids})\n    this.graph = graph\n    this.nids = nids\n  }\n\n  i(type=null, props={}) {\n    console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }\n\n  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}\n\n"
      },
      "date": 1679323322156
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "// Create the graph object\n\nfunction show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679323346566
    },
    {
      "type": "add",
      "id": "e4c77b29d73d4ef2",
      "item": {
        "type": "paragraph",
        "id": "e4c77b29d73d4ef2",
        "text": "We define a class called Graph that represents a graph data structure. The constructor takes two optional parameters nodes and rels which are arrays of nodes and relationships in the graph respectively. "
      },
      "after": "433e0069aa2ef6ee",
      "date": 1679323698505
    },
    {
      "id": "e4c77b29d73d4ef2",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679323701275
    },
    {
      "type": "edit",
      "id": "e4c77b29d73d4ef2",
      "item": {
        "type": "paragraph",
        "id": "e4c77b29d73d4ef2",
        "text": "We define a class called Graph that represents a graph data structure. The constructor takes two optional parameters nodes and rels which are arrays of nodes and relationships in the graph respectively. "
      },
      "date": 1679323709944
    },
    {
      "item": {
        "type": "markdown",
        "id": "232859fb9c059ee5",
        "text": ""
      },
      "id": "232859fb9c059ee5",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679323878643
    },
    {
      "id": "232859fb9c059ee5",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "232859fb9c059ee5",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679323888321
    },
    {
      "type": "edit",
      "id": "232859fb9c059ee5",
      "item": {
        "type": "markdown",
        "id": "232859fb9c059ee5",
        "text": ""
      },
      "date": 1679323898020
    },
    {
      "type": "remove",
      "id": "232859fb9c059ee5",
      "date": 1679323912654
    },
    {
      "type": "edit",
      "id": "e4c77b29d73d4ef2",
      "item": {
        "type": "paragraph",
        "id": "e4c77b29d73d4ef2",
        "text": "We define a class called Graph that represents a graph data structure. The constructor takes two optional parameters nodes and rels which are arrays of nodes and relationships in the graph respectively. "
      },
      "date": 1679323923622
    },
    {
      "type": "edit",
      "id": "e4c77b29d73d4ef2",
      "item": {
        "type": "paragraph",
        "id": "e4c77b29d73d4ef2",
        "text": "We define a class called Graph that represents a graph data structure. The constructor takes two optional parameters nodes and rels which are arrays of nodes and relationships in the graph respectively. "
      },
      "date": 1679323964676
    },
    {
      "item": {
        "type": "factory",
        "id": "72aeebe8eb47daf9"
      },
      "id": "72aeebe8eb47daf9",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679323985448
    },
    {
      "id": "72aeebe8eb47daf9",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "72aeebe8eb47daf9",
        "e4c77b29d73d4ef2",
        "4633a8fe45f7d185",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324003235,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1679324009981
    },
    {
      "type": "add",
      "id": "4633a8fe45f7d185",
      "item": {
        "type": "paragraph",
        "id": "4633a8fe45f7d185",
        "text": "The addNode method allows a new node to be added to the graph with a given type and properties, and returns the index of the new node in the nodes array. The addRel method allows a new relationship to be added between two nodes specified by their indices, with a given type and properties. The tally method returns an object that contains the count of each node and relationship type in the graph. The size method returns the total number of nodes and relationships in the graph. The load method is a static method that can be used to create a new Graph instance from a JSON object."
      },
      "after": "e4c77b29d73d4ef2",
      "date": 1679324010408
    },
    {
      "id": "72aeebe8eb47daf9",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "4633a8fe45f7d185",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324041340
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "\n\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679324053401
    },
    {
      "type": "edit",
      "id": "72aeebe8eb47daf9",
      "item": {
        "type": "code",
        "id": "72aeebe8eb47daf9",
        "text": "export class Graph {\n  constructor(nodes=[], rels=[]) {\n    this.nodes = nodes;\n    this.rels = rels;\n  }\n"
      },
      "date": 1679324058938
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679324060626
    },
    {
      "type": "edit",
      "id": "4633a8fe45f7d185",
      "item": {
        "type": "paragraph",
        "id": "4633a8fe45f7d185",
        "text": "The addNode method allows a new node to be added to the graph with a given type and properties, and returns the index of the new node in the nodes array. "
      },
      "date": 1679324082201
    },
    {
      "type": "add",
      "id": "b4eb1474230ff347",
      "item": {
        "type": "paragraph",
        "id": "b4eb1474230ff347",
        "text": "The addRel method allows a new relationship to be added between two nodes specified by their indices, with a given type and properties. The tally method returns an object that contains the count of each node and relationship type in the graph. The size method returns the total number of nodes and relationships in the graph. The load method is a static method that can be used to create a new Graph instance from a JSON object."
      },
      "after": "4633a8fe45f7d185",
      "date": 1679324086981
    },
    {
      "item": {
        "type": "factory",
        "id": "df0adbcc9a7cf9b8"
      },
      "id": "df0adbcc9a7cf9b8",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679324097541
    },
    {
      "id": "df0adbcc9a7cf9b8",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324119092
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "\n\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679324129947
    },
    {
      "type": "edit",
      "id": "df0adbcc9a7cf9b8",
      "item": {
        "type": "code",
        "id": "df0adbcc9a7cf9b8",
        "text": "  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }"
      },
      "date": 1679324130922
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "\n  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679324144872
    },
    {
      "type": "edit",
      "id": "df0adbcc9a7cf9b8",
      "item": {
        "type": "code",
        "id": "df0adbcc9a7cf9b8",
        "text": "\n  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }"
      },
      "date": 1679324147114
    },
    {
      "type": "edit",
      "id": "df0adbcc9a7cf9b8",
      "item": {
        "type": "code",
        "id": "df0adbcc9a7cf9b8",
        "text": "  addNode(type, props={}){\n    const obj = {type, in:[], out:[], props};\n    this.nodes.push(obj);\n    return this.nodes.length-1;\n  }"
      },
      "date": 1679324166782
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679324168842
    },
    {
      "type": "edit",
      "id": "b4eb1474230ff347",
      "item": {
        "type": "paragraph",
        "id": "b4eb1474230ff347",
        "text": "The addRel method allows a new relationship to be added between two nodes specified by their indices, with a given type and properties. "
      },
      "date": 1679324219143
    },
    {
      "type": "add",
      "id": "e3ef0ded2d102486",
      "item": {
        "type": "paragraph",
        "id": "e3ef0ded2d102486",
        "text": "The tally method returns an object that contains the count of each node and relationship type in the graph. "
      },
      "after": "b4eb1474230ff347",
      "date": 1679324225797
    },
    {
      "type": "add",
      "id": "7ce24ecfb7028c10",
      "item": {
        "type": "paragraph",
        "id": "7ce24ecfb7028c10",
        "text": "The size method returns the total number of nodes and relationships in the graph. "
      },
      "after": "e3ef0ded2d102486",
      "date": 1679324243678
    },
    {
      "type": "add",
      "id": "18800bc5ffa70f64",
      "item": {
        "type": "paragraph",
        "id": "18800bc5ffa70f64",
        "text": "The load method is a static method that can be used to create a new Graph instance from a JSON object."
      },
      "after": "7ce24ecfb7028c10",
      "date": 1679324244802
    },
    {
      "item": {
        "type": "factory",
        "id": "66abb70b9732e9f9"
      },
      "id": "66abb70b9732e9f9",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679324267662
    },
    {
      "id": "66abb70b9732e9f9",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324297386
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679324305184
    },
    {
      "type": "edit",
      "id": "66abb70b9732e9f9",
      "item": {
        "type": "code",
        "id": "66abb70b9732e9f9",
        "text": "  addRel(type, from, to, props={}) {\n    const obj = {type, from, to, props};\n    this.rels.push(obj);\n    const rid = this.rels.length-1;\n    this.nodes[from].out.push(rid)\n    this.nodes[to].in.push(rid);\n    return rid;\n  }"
      },
      "date": 1679324306139
    },
    {
      "type": "edit",
      "id": "e4c77b29d73d4ef2",
      "item": {
        "type": "paragraph",
        "id": "e4c77b29d73d4ef2",
        "text": "We define a class called Graph that represents a graph data structure. "
      },
      "date": 1679324335332
    },
    {
      "type": "add",
      "id": "888bf52ed83d1bad",
      "item": {
        "type": "paragraph",
        "id": "888bf52ed83d1bad",
        "text": "The constructor takes two optional parameters nodes and rels which are arrays of nodes and relationships in the graph respectively. "
      },
      "after": "e4c77b29d73d4ef2",
      "date": 1679324336175
    },
    {
      "id": "888bf52ed83d1bad",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324338477
    },
    {
      "id": "df0adbcc9a7cf9b8",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "df0adbcc9a7cf9b8",
        "4633a8fe45f7d185",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324371845
    },
    {
      "id": "66abb70b9732e9f9",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "df0adbcc9a7cf9b8",
        "4633a8fe45f7d185",
        "66abb70b9732e9f9",
        "b4eb1474230ff347",
        "e3ef0ded2d102486",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324381790
    },
    {
      "item": {
        "type": "factory",
        "id": "c30a817e0f4d743b"
      },
      "id": "c30a817e0f4d743b",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679324434278
    },
    {
      "id": "c30a817e0f4d743b",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "c30a817e0f4d743b",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "df0adbcc9a7cf9b8",
        "4633a8fe45f7d185",
        "66abb70b9732e9f9",
        "b4eb1474230ff347",
        "e3ef0ded2d102486",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324458503
    },
    {
      "id": "c30a817e0f4d743b",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "df0adbcc9a7cf9b8",
        "4633a8fe45f7d185",
        "66abb70b9732e9f9",
        "b4eb1474230ff347",
        "c30a817e0f4d743b",
        "e3ef0ded2d102486",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324474633
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "\n\n  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679324485418
    },
    {
      "type": "edit",
      "id": "c30a817e0f4d743b",
      "item": {
        "type": "code",
        "id": "c30a817e0f4d743b",
        "text": "\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n  size(){\n    return this.nodes.length + this.rels.length;\n  }"
      },
      "date": 1679324492505
    },
    {
      "item": {
        "type": "factory",
        "id": "a809a28f235d2182"
      },
      "id": "a809a28f235d2182",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679324503962
    },
    {
      "id": "a809a28f235d2182",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "df0adbcc9a7cf9b8",
        "4633a8fe45f7d185",
        "66abb70b9732e9f9",
        "b4eb1474230ff347",
        "c30a817e0f4d743b",
        "e3ef0ded2d102486",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "a809a28f235d2182",
        "33774cb11874876b"
      ],
      "date": 1679324513199
    },
    {
      "id": "a809a28f235d2182",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "df0adbcc9a7cf9b8",
        "4633a8fe45f7d185",
        "66abb70b9732e9f9",
        "a809a28f235d2182",
        "b4eb1474230ff347",
        "c30a817e0f4d743b",
        "e3ef0ded2d102486",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324540909
    },
    {
      "id": "a809a28f235d2182",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "df0adbcc9a7cf9b8",
        "4633a8fe45f7d185",
        "66abb70b9732e9f9",
        "b4eb1474230ff347",
        "a809a28f235d2182",
        "c30a817e0f4d743b",
        "e3ef0ded2d102486",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324545529
    },
    {
      "id": "a809a28f235d2182",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "df0adbcc9a7cf9b8",
        "4633a8fe45f7d185",
        "66abb70b9732e9f9",
        "b4eb1474230ff347",
        "c30a817e0f4d743b",
        "e3ef0ded2d102486",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "a809a28f235d2182",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324555781
    },
    {
      "id": "a809a28f235d2182",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "df0adbcc9a7cf9b8",
        "4633a8fe45f7d185",
        "66abb70b9732e9f9",
        "b4eb1474230ff347",
        "c30a817e0f4d743b",
        "e3ef0ded2d102486",
        "a809a28f235d2182",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324561009
    },
    {
      "type": "edit",
      "id": "c30a817e0f4d743b",
      "item": {
        "type": "code",
        "id": "c30a817e0f4d743b",
        "text": "  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nodes), rels:tally(this.rels)};\n  }\n\n"
      },
      "date": 1679324567248
    },
    {
      "type": "edit",
      "id": "a809a28f235d2182",
      "item": {
        "type": "code",
        "id": "a809a28f235d2182",
        "text": "  size(){\n    return this.nodes.length + this.rels.length;\n  }"
      },
      "date": 1679324568328
    },
    {
      "id": "4633a8fe45f7d185",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "66abb70b9732e9f9",
        "b4eb1474230ff347",
        "c30a817e0f4d743b",
        "e3ef0ded2d102486",
        "a809a28f235d2182",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324606899
    },
    {
      "id": "b4eb1474230ff347",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "c30a817e0f4d743b",
        "e3ef0ded2d102486",
        "a809a28f235d2182",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324610091
    },
    {
      "id": "e3ef0ded2d102486",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "a809a28f235d2182",
        "7ce24ecfb7028c10",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324614413
    },
    {
      "item": {
        "type": "factory",
        "id": "34d054563f9a9a0a"
      },
      "id": "34d054563f9a9a0a",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679324691330
    },
    {
      "id": "34d054563f9a9a0a",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "a809a28f235d2182",
        "7ce24ecfb7028c10",
        "34d054563f9a9a0a",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324715357
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "\n\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679324727098
    },
    {
      "type": "edit",
      "id": "34d054563f9a9a0a",
      "item": {
        "type": "code",
        "id": "34d054563f9a9a0a",
        "text": "  static load(obj) {\n    // let obj = await fetch(url).then(res => res.json())\n    return new Graph(obj.nodes, obj.rels)\n  }"
      },
      "date": 1679324728552
    },
    {
      "id": "7ce24ecfb7028c10",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "34d054563f9a9a0a",
        "18800bc5ffa70f64",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324730265
    },
    {
      "id": "18800bc5ffa70f64",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679324733109
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "\n\n  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679324801221
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "  static async fetch(url) {\n    const obj = await fetch(url).then(res => res.json())\n    return Graph.load(obj)\n  }\n\n  static async read(path) {\n    const json = await Deno.readTextFile(path);\n    const obj = JSON.parse(json);\n    return Graph.load(obj)\n  }\n\n  // static async import(path) {\n  //   let module = await import(path, {assert: {type: \"json\"}})\n  //   return Graph.load(module.default)\n  // }\n\n  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679324826583
    },
    {
      "type": "edit",
      "id": "ec7cfe29cb68b0fb",
      "item": {
        "type": "paragraph",
        "id": "ec7cfe29cb68b0fb",
        "text": "We want to convert the [[Journal]] into a [[Graph]] with page journal items as nodes."
      },
      "date": 1679325010530
    },
    {
      "type": "add",
      "id": "f4d43f148cd0fff1",
      "item": {
        "type": "paragraph",
        "id": "f4d43f148cd0fff1",
        "text": "We define a uniq function that returns a new array with all duplicate values removed."
      },
      "after": "ec7cfe29cb68b0fb",
      "date": 1679325196608
    },
    {
      "type": "edit",
      "id": "fd5d83be681e1f38",
      "item": {
        "type": "code",
        "id": "fd5d83be681e1f38",
        "text": "const uniq = (value, index, self) => self.indexOf(value) === index"
      },
      "date": 1679325266800
    },
    {
      "id": "f4d43f148cd0fff1",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "fd5d83be681e1f38",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "f4d43f148cd0fff1",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679325277421
    },
    {
      "id": "fd5d83be681e1f38",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679325290832
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "export class Nodes {\n  constructor (graph, nids) {\n  console.log('Nodes',{graph:graph.size(),type,nids})\n    this.graph = graph\n    this.nids = nids\n  }\n\n  i(type=null, props={}) {\n    console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }\n\n  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}\n\n"
      },
      "date": 1679325319037
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1679325401751
    },
    {
      "type": "edit",
      "id": "e4c77b29d73d4ef2",
      "item": {
        "type": "paragraph",
        "id": "e4c77b29d73d4ef2",
        "text": "We define a class called Graph that represents a graph data structure. [https://github.com/WardCunningham/assets/blob/d5509357d400a42be55588224b5b117d41424b20/pages/super-collaborator/graph.js github]"
      },
      "date": 1679325988879,
      "error": {
        "type": "error",
        "msg": "Forbidden",
        "response": "Forbidden"
      }
    },
    {
      "type": "fork",
      "date": 1679326007879
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679326671245
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>\n<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679326734918
    },
    {
      "item": {
        "type": "factory",
        "id": "26f658e266960e5a"
      },
      "id": "26f658e266960e5a",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679327104153
    },
    {
      "id": "26f658e266960e5a",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "26f658e266960e5a",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679327116120
    },
    {
      "id": "26f658e266960e5a",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679327117751
    },
    {
      "type": "edit",
      "id": "26f658e266960e5a",
      "item": {
        "type": "pagefold",
        "id": "26f658e266960e5a",
        "text": "~"
      },
      "date": 1679327120791
    },
    {
      "type": "add",
      "id": "f1ee4707438c9b92",
      "item": {
        "type": "paragraph",
        "id": "f1ee4707438c9b92",
        "text": "We define a class called \"Nodes\" that is used to represent a collection of nodes in a graph. The constructor takes two arguments: \"graph\" (an object representing the entire graph) and \"nids\" (an array of node IDs that belong to the current collection of nodes)."
      },
      "after": "f4d43f148cd0fff1",
      "date": 1679327291284
    },
    {
      "id": "f1ee4707438c9b92",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679327293991
    },
    {
      "type": "edit",
      "id": "f1ee4707438c9b92",
      "item": {
        "type": "paragraph",
        "id": "f1ee4707438c9b92",
        "text": "We define a class called Nodes that is used to represent a collection of nodes in a graph. The constructor takes two arguments: \"graph\" (an object representing the entire graph) and \"nids\" (an array of node IDs that belong to the current collection of nodes)."
      },
      "date": 1679327311044
    },
    {
      "item": {
        "type": "factory",
        "id": "5f3be96aa0806e09"
      },
      "id": "5f3be96aa0806e09",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679327448478
    },
    {
      "id": "5f3be96aa0806e09",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679327456359
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "\n\n  i(type=null, props={}) {\n    console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }\n\n  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}\n\n"
      },
      "date": 1679327465089
    },
    {
      "type": "edit",
      "id": "5f3be96aa0806e09",
      "item": {
        "type": "code",
        "id": "5f3be96aa0806e09",
        "text": "export class Nodes {\n  constructor (graph, nids) {\n  console.log('Nodes',{graph:graph.size(),type,nids})\n    this.graph = graph\n    this.nids = nids\n  }"
      },
      "date": 1679327466148
    },
    {
      "type": "add",
      "id": "51207eb9d312fee2",
      "item": {
        "type": "paragraph",
        "id": "51207eb9d312fee2",
        "text": "The class has several methods:"
      },
      "after": "f1ee4707438c9b92",
      "date": 1679327519792
    },
    {
      "id": "51207eb9d312fee2",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "a63c445187b064c4",
        "33774cb11874876b"
      ],
      "date": 1679327522119
    },
    {
      "type": "add",
      "id": "6bb962eccab85b09",
      "item": {
        "type": "paragraph",
        "id": "6bb962eccab85b09",
        "text": "\"i(type=null, props={})\" - This method returns a new collection of relationship objects (represented by another class called \"Rels\") that originate from any of the nodes in the current collection. The method takes two optional arguments: \"type\" (a string representing a relationship type) and \"props\" (an object representing relationship properties). If provided, the method filters the resulting relationship objects based on these arguments."
      },
      "after": "51207eb9d312fee2",
      "date": 1679327561536
    },
    {
      "type": "edit",
      "id": "6bb962eccab85b09",
      "item": {
        "type": "paragraph",
        "id": "6bb962eccab85b09",
        "text": "\"i(type=null, props={})\" – This method returns a new collection of relationship objects (represented by another class called \"Rels\") that originate from any of the nodes in the current collection. The method takes two optional arguments: \"type\" (a string representing a relationship type) and \"props\" (an object representing relationship properties). If provided, the method filters the resulting relationship objects based on these arguments."
      },
      "date": 1679327583879
    },
    {
      "item": {
        "type": "factory",
        "id": "21d6b6749e1f7796"
      },
      "id": "21d6b6749e1f7796",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679327592036
    },
    {
      "id": "21d6b6749e1f7796",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "33774cb11874876b"
      ],
      "date": 1679327612500
    },
    {
      "item": {
        "type": "factory",
        "id": "0015aea4e4875074"
      },
      "id": "0015aea4e4875074",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679327692044
    },
    {
      "id": "0015aea4e4875074",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "0015aea4e4875074",
        "33774cb11874876b"
      ],
      "date": 1679327709531
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"map(f)\" - This method returns an array of results obtained by applying a given function \"f\" to each node in the current collection. The function takes a single argument, a node object."
      },
      "date": 1679327714201
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "\n  i(type=null, props={}) {\n    console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }\n\n\n\n"
      },
      "date": 1679327729150
    },
    {
      "type": "edit",
      "id": "0015aea4e4875074",
      "item": {
        "type": "code",
        "id": "0015aea4e4875074",
        "text": "  map(f) {\n    const nodes = this.graph.nodes\n    const result = this.nids.map(nid => {\n      const node = nodes[nid]\n      return f(node)\n    })\n    return result\n  }\n}"
      },
      "date": 1679327730266
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"map(f)\" – This method returns an array of results obtained by applying a given function \"f\" to each node in the current collection. The function takes a single argument, a node object."
      },
      "date": 1679327739317
    },
    {
      "item": {
        "type": "factory",
        "id": "26c49978db091d77"
      },
      "id": "26c49978db091d77",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679327765966
    },
    {
      "id": "26c49978db091d77",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "26c49978db091d77",
        "21d6b6749e1f7796",
        "0015aea4e4875074",
        "33774cb11874876b"
      ],
      "date": 1679327776422
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "  i(type=null, props={}) {\n    console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n  size(){\n    return this.nids.length\n  }\n\n\n\n\n\n"
      },
      "date": 1679327790673
    },
    {
      "type": "edit",
      "id": "26c49978db091d77",
      "item": {
        "type": "code",
        "id": "26c49978db091d77",
        "text": "  filter(f) {\n    const nodes = this.graph.nodes\n    const nids = this.nids.filter(nid => {\n      const node = nodes[nid]\n      return f(node.type,node.props)\n    })\n    return new Nodes(this.graph,nids)\n  }"
      },
      "date": 1679327792136
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"filter(f)\" - This method returns a new collection of nodes that satisfy a given filter function \"f\". The filter function takes two arguments: \"type\" (a string representing a node type) and \"props\" (an object representing node properties)."
      },
      "date": 1679327801791
    },
    {
      "type": "add",
      "id": "df0de92af0b8a619",
      "item": {
        "type": "paragraph",
        "id": "df0de92af0b8a619",
        "text": "\"map(f)\" – This method returns an array of results obtained by applying a given function \"f\" to each node in the current collection. The function takes a single argument, a node object."
      },
      "after": "21d6b6749e1f7796",
      "date": 1679327803283
    },
    {
      "id": "21d6b6749e1f7796",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "33774cb11874876b"
      ],
      "date": 1679327806276
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"filter(f)\" – This method returns a new collection of nodes that satisfy a given filter function \"f\". The filter function takes two arguments: \"type\" (a string representing a node type) and \"props\" (an object representing node properties)."
      },
      "date": 1679327812653
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"size()\" - This method returns the number of nodes in the current collection."
      },
      "date": 1679327948005
    },
    {
      "type": "add",
      "id": "95864a115d5964f4",
      "item": {
        "type": "paragraph",
        "id": "95864a115d5964f4",
        "text": "\"filter(f)\" – This method returns a new collection of nodes that satisfy a given filter function \"f\". The filter function takes two arguments: \"type\" (a string representing a node type) and \"props\" (an object representing node properties)."
      },
      "after": "21d6b6749e1f7796",
      "date": 1679327949565
    },
    {
      "item": {
        "type": "factory",
        "id": "c7e536a88ce83c2c"
      },
      "id": "c7e536a88ce83c2c",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679327956869
    },
    {
      "id": "c7e536a88ce83c2c",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "c7e536a88ce83c2c",
        "21d6b6749e1f7796",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "33774cb11874876b"
      ],
      "date": 1679327980191
    },
    {
      "id": "21d6b6749e1f7796",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "33774cb11874876b"
      ],
      "date": 1679327982147
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "  i(type=null, props={}) {\n    console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }\n\n\n\n\n\n\n\n"
      },
      "date": 1679327990184
    },
    {
      "type": "edit",
      "id": "c7e536a88ce83c2c",
      "item": {
        "type": "code",
        "id": "c7e536a88ce83c2c",
        "text": "  size(){\n    return this.nids.length\n  }"
      },
      "date": 1679327991217
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"size()\" – This method returns the number of nodes in the current collection."
      },
      "date": 1679328005660
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"tally()\" - This method returns an object representing a tally of node types in the current collection."
      },
      "date": 1679328015852
    },
    {
      "type": "add",
      "id": "991315787275efe4",
      "item": {
        "type": "paragraph",
        "id": "991315787275efe4",
        "text": "\"size()\" – This method returns the number of nodes in the current collection."
      },
      "after": "21d6b6749e1f7796",
      "date": 1679328017992
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"tally()\" – This method returns an object representing a tally of node types in the current collection."
      },
      "date": 1679328021158
    },
    {
      "item": {
        "type": "factory",
        "id": "b52fc4fb567d46b3"
      },
      "id": "b52fc4fb567d46b3",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679328026659
    },
    {
      "id": "b52fc4fb567d46b3",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "b52fc4fb567d46b3",
        "21d6b6749e1f7796",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "33774cb11874876b"
      ],
      "date": 1679328034214
    },
    {
      "id": "21d6b6749e1f7796",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "33774cb11874876b"
      ],
      "date": 1679328036301
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "  i(type=null, props={}) {\n    console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }\n\n\n\n\n\n\n\n\n\n"
      },
      "date": 1679328044621
    },
    {
      "type": "edit",
      "id": "b52fc4fb567d46b3",
      "item": {
        "type": "code",
        "id": "b52fc4fb567d46b3",
        "text": "  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { nodes:tally(this.nids.map(nid => this.graph.nodes[nid]))};\n  }"
      },
      "date": 1679328045521
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"types()\" - This method returns an array of unique node types across all nodes in the current collection."
      },
      "date": 1679328070411
    },
    {
      "type": "add",
      "id": "bf9cc3a1c79c9e3f",
      "item": {
        "type": "paragraph",
        "id": "bf9cc3a1c79c9e3f",
        "text": "\"tally()\" – This method returns an object representing a tally of node types in the current collection."
      },
      "after": "21d6b6749e1f7796",
      "date": 1679328072136
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"types()\" – This method returns an array of unique node types across all nodes in the current collection."
      },
      "date": 1679328075358
    },
    {
      "item": {
        "type": "factory",
        "id": "2dc5a0ada872ba3c"
      },
      "id": "2dc5a0ada872ba3c",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679328081592
    },
    {
      "id": "2dc5a0ada872ba3c",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "33774cb11874876b"
      ],
      "date": 1679328094988
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "  i(type=null, props={}) {\n    console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  props(key='name') {\n    console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }\n\n\n\n\n\n\n\n\n\n\n\n"
      },
      "date": 1679328105361
    },
    {
      "type": "edit",
      "id": "2dc5a0ada872ba3c",
      "item": {
        "type": "code",
        "id": "2dc5a0ada872ba3c",
        "text": "  types() {\n    return this.nids.map(nid => this.graph.nodes[nid].type).filter(uniq).sort()\n  }"
      },
      "date": 1679328106218
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"props(key='name')\" - This method returns an array of unique values for a given property key across all nodes in the current collection. By default, the \"name\" property is returned."
      },
      "date": 1679328127399
    },
    {
      "type": "add",
      "id": "786b4f8138fc28b0",
      "item": {
        "type": "paragraph",
        "id": "786b4f8138fc28b0",
        "text": "\"types()\" – This method returns an array of unique node types across all nodes in the current collection."
      },
      "after": "21d6b6749e1f7796",
      "date": 1679328129487
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"props(key='name')\" – This method returns an array of unique values for a given property key across all nodes in the current collection. By default, the \"name\" property is returned."
      },
      "date": 1679328132021
    },
    {
      "item": {
        "type": "factory",
        "id": "b98db9a5927be63e"
      },
      "id": "b98db9a5927be63e",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679328136787
    },
    {
      "id": "b98db9a5927be63e",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "33774cb11874876b"
      ],
      "date": 1679328145576
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "  i(type=null, props={}) {\n    console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n\n  o(type=null, props={}) {\n    console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n"
      },
      "date": 1679328171073
    },
    {
      "type": "edit",
      "id": "b98db9a5927be63e",
      "item": {
        "type": "code",
        "id": "b98db9a5927be63e",
        "text": "  props(key='name') {\n    console.log('Nodes.p',{key})\n    return this.nids.map(nid => this.graph.nodes[nid].props[key]).filter(uniq).sort()\n  }"
      },
      "date": 1679328171870
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"o(type=null, props={})\" - This method is similar to the \"i\" method, but instead returns a new collection of relationship objects that terminate at any of the nodes in the current collection."
      },
      "date": 1679328203885
    },
    {
      "type": "add",
      "id": "a0fed1ab6b53b17d",
      "item": {
        "type": "paragraph",
        "id": "a0fed1ab6b53b17d",
        "text": "\"props(key='name')\" – This method returns an array of unique values for a given property key across all nodes in the current collection. By default, the \"name\" property is returned."
      },
      "after": "21d6b6749e1f7796",
      "date": 1679328206310
    },
    {
      "type": "edit",
      "id": "21d6b6749e1f7796",
      "item": {
        "type": "paragraph",
        "id": "21d6b6749e1f7796",
        "text": "\"o(type=null, props={})\" – This method is similar to the \"i\" method, but instead returns a new collection of relationship objects that terminate at any of the nodes in the current collection."
      },
      "date": 1679328209340
    },
    {
      "item": {
        "type": "factory",
        "id": "cb1300498a2b11d3"
      },
      "id": "cb1300498a2b11d3",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679328213356
    },
    {
      "id": "cb1300498a2b11d3",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "33774cb11874876b"
      ],
      "date": 1679328229388
    },
    {
      "type": "edit",
      "id": "a63c445187b064c4",
      "item": {
        "type": "code",
        "id": "a63c445187b064c4",
        "text": "  i(type=null, props={}) {\n    console.log('Nodes.i',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].in).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }\n"
      },
      "date": 1679328246537
    },
    {
      "type": "edit",
      "id": "cb1300498a2b11d3",
      "item": {
        "type": "code",
        "id": "cb1300498a2b11d3",
        "text": "  o(type=null, props={}) {\n    console.log('Nodes.o',{type,props})\n    let rids = this.nids.map(nid => this.graph.nodes[nid].out).flat().filter(uniq)\n    if (type) rids = rids.filter(rid => this.graph.rels[rid].type == type)\n    for (const key in props) rids = rids.filter(rid => this.graph.rels[rid].props[key] == props[key])\n    return new Rels(this.graph, rids)\n  }"
      },
      "date": 1679328248579
    },
    {
      "type": "add",
      "id": "2d2233519bbf91db",
      "item": {
        "type": "paragraph",
        "id": "2d2233519bbf91db",
        "text": "We define a class called Rels. The class takes two arguments graph and rids in its constructor method. The graph argument represents a graph data structure and rids represents an array of relationship ids in the graph. The class has several methods defined in it, which are:"
      },
      "after": "df0de92af0b8a619",
      "date": 1679328570265
    },
    {
      "id": "2d2233519bbf91db",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "2d2233519bbf91db",
        "33774cb11874876b"
      ],
      "date": 1679328572195
    },
    {
      "item": {
        "type": "factory",
        "id": "5baed24daf77ce36"
      },
      "id": "5baed24daf77ce36",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679328587946
    },
    {
      "id": "5baed24daf77ce36",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "2d2233519bbf91db",
        "5baed24daf77ce36",
        "33774cb11874876b"
      ],
      "date": 1679328593864
    },
    {
      "type": "edit",
      "id": "5baed24daf77ce36",
      "item": {
        "type": "pagefold",
        "id": "5baed24daf77ce36",
        "text": "~"
      },
      "date": 1679328596688
    },
    {
      "id": "5baed24daf77ce36",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b"
      ],
      "date": 1679328598971
    },
    {
      "item": {
        "type": "factory",
        "id": "d9bdcd48a9ec97f6"
      },
      "id": "d9bdcd48a9ec97f6",
      "type": "add",
      "after": "33774cb11874876b",
      "date": 1679328626328
    },
    {
      "type": "edit",
      "id": "d9bdcd48a9ec97f6",
      "item": {
        "type": "paragraph",
        "id": "d9bdcd48a9ec97f6",
        "text": "map(f): This method takes a function f as an argument and returns an array of values obtained by applying f to each relationship in rids."
      },
      "date": 1679328628559
    },
    {
      "item": {
        "type": "factory",
        "id": "3b82b21577e7c56b"
      },
      "id": "3b82b21577e7c56b",
      "type": "add",
      "after": "d9bdcd48a9ec97f6",
      "date": 1679328630547
    },
    {
      "type": "edit",
      "id": "33774cb11874876b",
      "item": {
        "type": "code",
        "id": "33774cb11874876b",
        "text": "export class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  props(key='name') {\n    // console.log('Rels.p',{key})\n    return this.rids.map(rid => this.graph.rels[rid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.rids.map(rid => this.graph.rels[rid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { rels:tally(this.rids.map(nid => this.graph.rels[nid]))};\n  }\n\n  size(){\n    return this.rids.length\n  }\n\n  filter(f) {\n    const rels = this.graph.rels\n    const rids = this.rids.filter(rid => {\n      const rel = rels[rid]\n      return f(rel.type,rel.props)\n    })\n    return new Rels(this.graph,rids)\n  }\n\n"
      },
      "date": 1679328640219
    },
    {
      "type": "edit",
      "id": "3b82b21577e7c56b",
      "item": {
        "type": "code",
        "id": "3b82b21577e7c56b",
        "text": "  map(f) {\n    const rels = this.graph.rels\n    const result = this.rids.map(rid => {\n      const rel = rels[rid]\n      return f(rel)\n    })\n    return result\n  }\n}"
      },
      "date": 1679328640933
    },
    {
      "type": "edit",
      "id": "d9bdcd48a9ec97f6",
      "item": {
        "type": "paragraph",
        "id": "d9bdcd48a9ec97f6",
        "text": "filter(f): This method takes a function f as an argument and returns a new instance of Rels containing only the relationships in rids for which f returns true."
      },
      "date": 1679328679589
    },
    {
      "type": "add",
      "id": "22c3ece9ecd80d99",
      "item": {
        "type": "paragraph",
        "id": "22c3ece9ecd80d99",
        "text": "map(f): This method takes a function f as an argument and returns an array of values obtained by applying f to each relationship in rids."
      },
      "after": "d9bdcd48a9ec97f6",
      "date": 1679328683291
    },
    {
      "item": {
        "type": "factory",
        "id": "6dc22166d5424c1c"
      },
      "id": "6dc22166d5424c1c",
      "type": "add",
      "after": "3b82b21577e7c56b",
      "date": 1679328685065
    },
    {
      "id": "6dc22166d5424c1c",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "d9bdcd48a9ec97f6",
        "22c3ece9ecd80d99",
        "6dc22166d5424c1c",
        "3b82b21577e7c56b"
      ],
      "date": 1679328687577
    },
    {
      "id": "6dc22166d5424c1c",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "d9bdcd48a9ec97f6",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679328689173
    },
    {
      "type": "edit",
      "id": "33774cb11874876b",
      "item": {
        "type": "code",
        "id": "33774cb11874876b",
        "text": "export class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  props(key='name') {\n    // console.log('Rels.p',{key})\n    return this.rids.map(rid => this.graph.rels[rid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.rids.map(rid => this.graph.rels[rid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { rels:tally(this.rids.map(nid => this.graph.rels[nid]))};\n  }\n\n  size(){\n    return this.rids.length\n  }\n\n\n\n"
      },
      "date": 1679328701072
    },
    {
      "type": "edit",
      "id": "6dc22166d5424c1c",
      "item": {
        "type": "code",
        "id": "6dc22166d5424c1c",
        "text": "  filter(f) {\n    const rels = this.graph.rels\n    const rids = this.rids.filter(rid => {\n      const rel = rels[rid]\n      return f(rel.type,rel.props)\n    })\n    return new Rels(this.graph,rids)\n  }"
      },
      "date": 1679328702604
    },
    {
      "type": "edit",
      "id": "d9bdcd48a9ec97f6",
      "item": {
        "type": "paragraph",
        "id": "d9bdcd48a9ec97f6",
        "text": "size(): This method returns the number of relationships in rids."
      },
      "date": 1679328752127
    },
    {
      "type": "add",
      "id": "1df7bf8fcf7ffb51",
      "item": {
        "type": "paragraph",
        "id": "1df7bf8fcf7ffb51",
        "text": "filter(f): This method takes a function f as an argument and returns a new instance of Rels containing only the relationships in rids for which f returns true."
      },
      "after": "d9bdcd48a9ec97f6",
      "date": 1679328753214
    },
    {
      "item": {
        "type": "factory",
        "id": "5f8af97b8a8a0bc1"
      },
      "id": "5f8af97b8a8a0bc1",
      "type": "add",
      "after": "3b82b21577e7c56b",
      "date": 1679328757604
    },
    {
      "id": "5f8af97b8a8a0bc1",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "5f8af97b8a8a0bc1",
        "d9bdcd48a9ec97f6",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679328763244
    },
    {
      "id": "d9bdcd48a9ec97f6",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "d9bdcd48a9ec97f6",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679328766650
    },
    {
      "type": "edit",
      "id": "33774cb11874876b",
      "item": {
        "type": "code",
        "id": "33774cb11874876b",
        "text": "export class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  props(key='name') {\n    // console.log('Rels.p',{key})\n    return this.rids.map(rid => this.graph.rels[rid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.rids.map(rid => this.graph.rels[rid].type).filter(uniq).sort()\n  }\n\n  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { rels:tally(this.rids.map(nid => this.graph.rels[nid]))};\n  }\n"
      },
      "date": 1679328776050
    },
    {
      "type": "edit",
      "id": "5f8af97b8a8a0bc1",
      "item": {
        "type": "code",
        "id": "5f8af97b8a8a0bc1",
        "text": "  size(){\n    return this.rids.length\n  }"
      },
      "date": 1679328782073
    },
    {
      "type": "edit",
      "id": "d9bdcd48a9ec97f6",
      "item": {
        "type": "paragraph",
        "id": "d9bdcd48a9ec97f6",
        "text": "tally(): This method returns an object containing a tally of the relationship types in rids."
      },
      "date": 1679328811026
    },
    {
      "type": "add",
      "id": "566661186dcd37d3",
      "item": {
        "type": "paragraph",
        "id": "566661186dcd37d3",
        "text": "size(): This method returns the number of relationships in rids."
      },
      "after": "d9bdcd48a9ec97f6",
      "date": 1679328811740
    },
    {
      "item": {
        "type": "factory",
        "id": "2f24ce927aac23e6"
      },
      "id": "2f24ce927aac23e6",
      "type": "add",
      "after": "3b82b21577e7c56b",
      "date": 1679328815362
    },
    {
      "id": "2f24ce927aac23e6",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "d9bdcd48a9ec97f6",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679328824487
    },
    {
      "type": "edit",
      "id": "33774cb11874876b",
      "item": {
        "type": "code",
        "id": "33774cb11874876b",
        "text": "export class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  props(key='name') {\n    // console.log('Rels.p',{key})\n    return this.rids.map(rid => this.graph.rels[rid].props[key]).filter(uniq).sort()\n  }\n\n  types() {\n    return this.rids.map(rid => this.graph.rels[rid].type).filter(uniq).sort()\n  }\n"
      },
      "date": 1679328838134
    },
    {
      "type": "edit",
      "id": "2f24ce927aac23e6",
      "item": {
        "type": "code",
        "id": "2f24ce927aac23e6",
        "text": "  tally(){\n    const tally = list => list.reduce((s,e)=>{s[e.type] = s[e.type] ? s[e.type]+1 : 1; return s}, {});\n    return { rels:tally(this.rids.map(nid => this.graph.rels[nid]))};\n  }"
      },
      "date": 1679328841540
    },
    {
      "type": "edit",
      "id": "d9bdcd48a9ec97f6",
      "item": {
        "type": "paragraph",
        "id": "d9bdcd48a9ec97f6",
        "text": "types(): This method returns an array of unique relationship types for all relationships in rids."
      },
      "date": 1679328878598
    },
    {
      "type": "add",
      "id": "2b9a69f6c5c6453c",
      "item": {
        "type": "paragraph",
        "id": "2b9a69f6c5c6453c",
        "text": "tally(): This method returns an object containing a tally of the relationship types in rids."
      },
      "after": "d9bdcd48a9ec97f6",
      "date": 1679328879376
    },
    {
      "item": {
        "type": "factory",
        "id": "d435c3530f11b2ce"
      },
      "id": "d435c3530f11b2ce",
      "type": "add",
      "after": "3b82b21577e7c56b",
      "date": 1679328883930
    },
    {
      "id": "d435c3530f11b2ce",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "d9bdcd48a9ec97f6",
        "2b9a69f6c5c6453c",
        "d435c3530f11b2ce",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679328892549
    },
    {
      "id": "d435c3530f11b2ce",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "d9bdcd48a9ec97f6",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679328896658
    },
    {
      "type": "edit",
      "id": "33774cb11874876b",
      "item": {
        "type": "code",
        "id": "33774cb11874876b",
        "text": "export class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  props(key='name') {\n    // console.log('Rels.p',{key})\n    return this.rids.map(rid => this.graph.rels[rid].props[key]).filter(uniq).sort()\n  }\n"
      },
      "date": 1679328906376
    },
    {
      "type": "edit",
      "id": "d435c3530f11b2ce",
      "item": {
        "type": "code",
        "id": "d435c3530f11b2ce",
        "text": "  types() {\n    return this.rids.map(rid => this.graph.rels[rid].type).filter(uniq).sort()\n  }"
      },
      "date": 1679328909468
    },
    {
      "type": "edit",
      "id": "d9bdcd48a9ec97f6",
      "item": {
        "type": "paragraph",
        "id": "d9bdcd48a9ec97f6",
        "text": "props(key='name'): This method returns an array of unique values of a given property (key) for all relationships in rids."
      },
      "date": 1679328924016
    },
    {
      "type": "add",
      "id": "5edc54607c13ebd4",
      "item": {
        "type": "paragraph",
        "id": "5edc54607c13ebd4",
        "text": "types(): This method returns an array of unique relationship types for all relationships in rids."
      },
      "after": "d9bdcd48a9ec97f6",
      "date": 1679328924784
    },
    {
      "item": {
        "type": "factory",
        "id": "6714f60b43b6c2fe"
      },
      "id": "6714f60b43b6c2fe",
      "type": "add",
      "after": "3b82b21577e7c56b",
      "date": 1679328930158
    },
    {
      "id": "6714f60b43b6c2fe",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "6714f60b43b6c2fe",
        "d9bdcd48a9ec97f6",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679328944614
    },
    {
      "id": "d9bdcd48a9ec97f6",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "d9bdcd48a9ec97f6",
        "6714f60b43b6c2fe",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679328946188
    },
    {
      "type": "edit",
      "id": "33774cb11874876b",
      "item": {
        "type": "code",
        "id": "33774cb11874876b",
        "text": "export class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n\n"
      },
      "date": 1679328952929
    },
    {
      "type": "edit",
      "id": "6714f60b43b6c2fe",
      "item": {
        "type": "code",
        "id": "6714f60b43b6c2fe",
        "text": "  props(key='name') {\n    // console.log('Rels.p',{key})\n    return this.rids.map(rid => this.graph.rels[rid].props[key]).filter(uniq).sort()\n  }"
      },
      "date": 1679328953699
    },
    {
      "type": "edit",
      "id": "d9bdcd48a9ec97f6",
      "item": {
        "type": "paragraph",
        "id": "d9bdcd48a9ec97f6",
        "text": "t(type=null, props={}): This method is similar to f(), but instead filters the nodes connected to the relationships in rids."
      },
      "date": 1679328967768
    },
    {
      "type": "add",
      "id": "293269983db8ada0",
      "item": {
        "type": "paragraph",
        "id": "293269983db8ada0",
        "text": "props(key='name'): This method returns an array of unique values of a given property (key) for all relationships in rids."
      },
      "after": "d9bdcd48a9ec97f6",
      "date": 1679328968609
    },
    {
      "item": {
        "type": "factory",
        "id": "ea915676ecb573c3"
      },
      "id": "ea915676ecb573c3",
      "type": "add",
      "after": "3b82b21577e7c56b",
      "date": 1679328973661
    },
    {
      "id": "ea915676ecb573c3",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "d9bdcd48a9ec97f6",
        "293269983db8ada0",
        "ea915676ecb573c3",
        "6714f60b43b6c2fe",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679328979724
    },
    {
      "id": "ea915676ecb573c3",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "d9bdcd48a9ec97f6",
        "ea915676ecb573c3",
        "293269983db8ada0",
        "6714f60b43b6c2fe",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679328983853
    },
    {
      "type": "edit",
      "id": "33774cb11874876b",
      "item": {
        "type": "code",
        "id": "33774cb11874876b",
        "text": "export class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }\n\n\n\n\n"
      },
      "date": 1679328997637
    },
    {
      "type": "edit",
      "id": "ea915676ecb573c3",
      "item": {
        "type": "code",
        "id": "ea915676ecb573c3",
        "text": "  t(type=null, props={}) {\n    // console.log('Rels.t',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].to).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }"
      },
      "date": 1679328998838
    },
    {
      "type": "edit",
      "id": "2d2233519bbf91db",
      "item": {
        "type": "paragraph",
        "id": "2d2233519bbf91db",
        "text": "We define a class called Rels. The class takes two arguments graph and rids in its constructor method. The graph argument represents a graph data structure and rids represents an array of relationship ids in the graph. "
      },
      "date": 1679329019942
    },
    {
      "type": "add",
      "id": "f09beb87e844535b",
      "item": {
        "type": "paragraph",
        "id": "f09beb87e844535b",
        "text": "The class has several methods defined in it, which are:"
      },
      "after": "2d2233519bbf91db",
      "date": 1679329020721
    },
    {
      "type": "edit",
      "id": "d9bdcd48a9ec97f6",
      "item": {
        "type": "paragraph",
        "id": "d9bdcd48a9ec97f6",
        "text": "f(type=null, props={}): This method takes two optional arguments, type and props. It filters the nodes connected from the relationships in rids and returns the filtered nodes as an instance of the Nodes class. If type is provided, it further filters the nodes based on their type. If props is provided, it filters the nodes based on the values of their properties."
      },
      "date": 1679329031290
    },
    {
      "type": "add",
      "id": "560a2141f87ed422",
      "item": {
        "type": "paragraph",
        "id": "560a2141f87ed422",
        "text": "t(type=null, props={}): This method is similar to f(), but instead filters the nodes connected to the relationships in rids."
      },
      "after": "d9bdcd48a9ec97f6",
      "date": 1679329031980
    },
    {
      "item": {
        "type": "factory",
        "id": "a4808c2767cc18ca"
      },
      "id": "a4808c2767cc18ca",
      "type": "add",
      "after": "3b82b21577e7c56b",
      "date": 1679329038268
    },
    {
      "id": "a4808c2767cc18ca",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "f09beb87e844535b",
        "33774cb11874876b",
        "a4808c2767cc18ca",
        "d9bdcd48a9ec97f6",
        "560a2141f87ed422",
        "ea915676ecb573c3",
        "293269983db8ada0",
        "6714f60b43b6c2fe",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679329051745
    },
    {
      "id": "d9bdcd48a9ec97f6",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "f09beb87e844535b",
        "33774cb11874876b",
        "d9bdcd48a9ec97f6",
        "a4808c2767cc18ca",
        "560a2141f87ed422",
        "ea915676ecb573c3",
        "293269983db8ada0",
        "6714f60b43b6c2fe",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679329054085
    },
    {
      "type": "edit",
      "id": "33774cb11874876b",
      "item": {
        "type": "code",
        "id": "33774cb11874876b",
        "text": "export class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n\n\n\n\n\n\n"
      },
      "date": 1679329065798
    },
    {
      "type": "edit",
      "id": "a4808c2767cc18ca",
      "item": {
        "type": "code",
        "id": "a4808c2767cc18ca",
        "text": "  f(type=null, props={}) {\n    // console.log('Rels.f',{type,props})\n    let nids = this.rids.map(rid => this.graph.rels[rid].from).filter(uniq)\n    if (type) nids = nids.filter(nid => this.graph.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.graph.nodes[nid].props[key] == props[key])\n    return new Nodes(this.graph, nids)\n  }"
      },
      "date": 1679329066738
    },
    {
      "type": "edit",
      "id": "33774cb11874876b",
      "item": {
        "type": "code",
        "id": "33774cb11874876b",
        "text": "export class Rels {\n  constructor (graph, rids) {\n    // console.log('Rels',{graph:graph.size(),type,rids})\n    this.graph = graph\n    this.rids = rids\n  }\n"
      },
      "date": 1679329078042
    },
    {
      "id": "f09beb87e844535b",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "f09beb87e844535b",
        "d9bdcd48a9ec97f6",
        "a4808c2767cc18ca",
        "560a2141f87ed422",
        "ea915676ecb573c3",
        "293269983db8ada0",
        "6714f60b43b6c2fe",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679329082199
    },
    {
      "type": "edit",
      "id": "f1ee4707438c9b92",
      "item": {
        "type": "paragraph",
        "id": "f1ee4707438c9b92",
        "text": "We define a class called Nodes that is used to represent a collection of nodes in a graph. "
      },
      "date": 1679330510426
    },
    {
      "type": "add",
      "id": "fb09a5e806034ab9",
      "item": {
        "type": "paragraph",
        "id": "fb09a5e806034ab9",
        "text": "The constructor takes two arguments: \"graph\" (an object representing the entire graph) and \"nids\" (an array of node IDs that belong to the current collection of nodes)."
      },
      "after": "f1ee4707438c9b92",
      "date": 1679330511178
    },
    {
      "id": "fb09a5e806034ab9",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "e4c77b29d73d4ef2",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "fb09a5e806034ab9",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "f09beb87e844535b",
        "d9bdcd48a9ec97f6",
        "a4808c2767cc18ca",
        "560a2141f87ed422",
        "ea915676ecb573c3",
        "293269983db8ada0",
        "6714f60b43b6c2fe",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679330513285
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>\n<pre>${page.journal()}</pre>\n<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679332649770
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  let journal = page.journal\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>\n<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679332681918
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  let journal = page.journal\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679332712944
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  let journal = JSON.stringify(page.journal)\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679332802493
    },
    {
      "type": "fork",
      "date": 1679333635468
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  let journal = JSON.stringify(page.journal)\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679333665602
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  \n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679334220105
    },
    {
      "type": "edit",
      "id": "00e55c113558b626",
      "item": {
        "type": "code",
        "id": "00e55c113558b626",
        "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    const journal = JSON.stringify(page.journal)\n    show(journal)\n  }\n}"
      },
      "date": 1679334239760
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  let graph = new Graph();\n  let html = `<pre>${graph.stringify()}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679334245703
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  let html = `<pre>${graph.stringify()}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679334295773
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (graph, journal) {\n  let html = `<pre>${graph.stringify()}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679334317120
    },
    {
      "type": "edit",
      "id": "00e55c113558b626",
      "item": {
        "type": "code",
        "id": "00e55c113558b626",
        "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    const journal = JSON.stringify(page.journal)\n    const graph = new Graph();\n    show(graph, journal)\n  }\n}"
      },
      "date": 1679334347036
    },
    {
      "type": "edit",
      "id": "e4c77b29d73d4ef2",
      "item": {
        "type": "paragraph",
        "id": "e4c77b29d73d4ef2",
        "text": "Note: We plan to use the Load method of the Graph class later to display the Page Journal as a graph."
      },
      "date": 1679334548259
    },
    {
      "type": "add",
      "id": "2d2f5ff7dc632826",
      "item": {
        "type": "paragraph",
        "id": "2d2f5ff7dc632826",
        "text": "We define a class called Graph that represents a graph data structure. [https://github.com/WardCunningham/assets/blob/d5509357d400a42be55588224b5b117d41424b20/pages/super-collaborator/graph.js github]"
      },
      "after": "e4c77b29d73d4ef2",
      "date": 1679334550732
    },
    {
      "type": "edit",
      "id": "00e55c113558b626",
      "item": {
        "type": "code",
        "id": "00e55c113558b626",
        "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    const journal = JSON.stringify(page.journal)\n    const graph = new Graph(); //TODO Graph.load()\n    show(graph, journal)\n  }\n}"
      },
      "date": 1679334587871
    },
    {
      "type": "edit",
      "id": "e4c77b29d73d4ef2",
      "item": {
        "type": "paragraph",
        "id": "e4c77b29d73d4ef2",
        "text": "Note: We plan to use the load method to create a new Graph instance from a journal JSON object."
      },
      "date": 1679334637725
    },
    {
      "type": "edit",
      "id": "34d054563f9a9a0a",
      "item": {
        "type": "code",
        "id": "34d054563f9a9a0a",
        "text": "  static load(obj) {\n    return new Graph(obj.nodes, obj.rels)\n  }"
      },
      "date": 1679334718900
    },
    {
      "type": "edit",
      "id": "ef04d15a1957b212",
      "item": {
        "type": "code",
        "id": "ef04d15a1957b212",
        "text": "  n(type=null, props={}) {\n    let nids = Object.keys(this.nodes).map(key => +key)\n    if (type) nids = nids.filter(nid => this.nodes[nid].type == type)\n    for (const key in props) nids = nids.filter(nid => this.nodes[nid].props[key] == props[key])\n    return new Nodes(this, nids)\n  }\n\n  /**\n   * Converts a graph to a JavaScript Object Notation (JSON) string using JSON.stringify.\n   @param - replacer A function that transforms the results.\n   @param - space Adds indentation, white space, and line break characters to the return-\n   * @returns {string} JSON string containing serialized graph\n  */\n  stringify(...args) {\n    const obj = { nodes: this.nodes, rels: this.rels }\n    return JSON.stringify(obj, ...args)\n  }\n\n}"
      },
      "date": 1679334752478
    },
    {
      "type": "fork",
      "date": 1679335147130
    },
    {
      "type": "edit",
      "id": "00e55c113558b626",
      "item": {
        "type": "code",
        "id": "00e55c113558b626",
        "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    const journal = JSON.stringify(page.journal)\n    show(journal)\n  }\n}"
      },
      "date": 1679335550190
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  let html = `<pre>${graph.stringify()}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679335585531
    },
    {
      "id": "e4c77b29d73d4ef2",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "2d2f5ff7dc632826",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "e4c77b29d73d4ef2",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "fb09a5e806034ab9",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "f09beb87e844535b",
        "d9bdcd48a9ec97f6",
        "a4808c2767cc18ca",
        "560a2141f87ed422",
        "ea915676ecb573c3",
        "293269983db8ada0",
        "6714f60b43b6c2fe",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679335603975
    },
    {
      "id": "e4c77b29d73d4ef2",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "2d2f5ff7dc632826",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "e4c77b29d73d4ef2",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "fb09a5e806034ab9",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "f09beb87e844535b",
        "d9bdcd48a9ec97f6",
        "a4808c2767cc18ca",
        "560a2141f87ed422",
        "ea915676ecb573c3",
        "293269983db8ada0",
        "6714f60b43b6c2fe",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679335606282
    },
    {
      "type": "edit",
      "id": "777ff878d8f1cc7e",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "//code.dreyeck.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 200"
      },
      "date": 1679336043069
    },
    {
      "type": "edit",
      "id": "ca075d681c953999",
      "item": {
        "type": "paragraph",
        "id": "ca075d681c953999",
        "text": "We show the journal in the frame below."
      },
      "date": 1679336389868
    },
    {
      "item": {
        "type": "factory",
        "id": "8318dc9fbfaf2139"
      },
      "id": "8318dc9fbfaf2139",
      "type": "add",
      "after": "3b82b21577e7c56b",
      "date": 1679336400422
    },
    {
      "id": "8318dc9fbfaf2139",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "2d2f5ff7dc632826",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "8318dc9fbfaf2139",
        "e4c77b29d73d4ef2",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "fb09a5e806034ab9",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "f09beb87e844535b",
        "d9bdcd48a9ec97f6",
        "a4808c2767cc18ca",
        "560a2141f87ed422",
        "ea915676ecb573c3",
        "293269983db8ada0",
        "6714f60b43b6c2fe",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679336427584
    },
    {
      "id": "8318dc9fbfaf2139",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "2d2f5ff7dc632826",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "8318dc9fbfaf2139",
        "ca075d681c953999",
        "cff317c5386f7b33",
        "e4c77b29d73d4ef2",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "fb09a5e806034ab9",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "f09beb87e844535b",
        "d9bdcd48a9ec97f6",
        "a4808c2767cc18ca",
        "560a2141f87ed422",
        "ea915676ecb573c3",
        "293269983db8ada0",
        "6714f60b43b6c2fe",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b"
      ],
      "date": 1679336432564
    },
    {
      "type": "edit",
      "id": "8318dc9fbfaf2139",
      "item": {
        "type": "pagefold",
        "id": "8318dc9fbfaf2139",
        "text": "~"
      },
      "date": 1679336439905
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  let html = `<pre>${graph.stringify()}</pre> ⇒\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679336511420
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> ⇒ </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679336534687
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> --> </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679336544376
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679336568431
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load() </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679336587658
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679336607964
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679336644102
    },
    {
      "type": "edit",
      "id": "e4c77b29d73d4ef2",
      "item": {
        "type": "paragraph",
        "id": "e4c77b29d73d4ef2",
        "text": "Note: We plan to use the load method to create a new Graph instance from a [[Journal]] JSON object."
      },
      "date": 1679336692444
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  const actions = journal.map\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679336848686
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  const actions = journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${actions.join}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679336878170
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  const actions = journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679336888922
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  let actions = journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679336910390
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  let actions = journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679336995718
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679337000512
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679337004949
    },
    {
      "type": "edit",
      "id": "00e55c113558b626",
      "item": {
        "type": "code",
        "id": "00e55c113558b626",
        "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    const journal = JSON.stringify(page.journal)\n    show(page)\n  }\n}"
      },
      "date": 1679337054167
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  const graph = new Graph(); //TODO Graph.load()\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679337064293
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  const graph = new Graph(); //TODO Graph.load()\n  let actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679337081732
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  const graph = new Graph(); //TODO Graph.load()\n  const journal = page.journal\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679337112874
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  const graph = new Graph(); //TODO Graph.load()\n  const actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679337145107
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page) {\n  const graph = new Graph(); //TODO Graph.load()\n  const actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679337154704
    },
    {
      "id": "ac3880d438d89afd",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ac3880d438d89afd",
        "text": "The page we show is the page on the screen which might be a ghost, maybe retrieved from history.",
        "alias": "ca075d681c953999"
      },
      "after": "ca075d681c953999",
      "attribution": {
        "page": "Journal"
      },
      "date": 1679337228181
    },
    {
      "type": "remove",
      "id": "ca075d681c953999",
      "date": 1679337230502
    },
    {
      "type": "edit",
      "id": "ac3880d438d89afd",
      "item": {
        "type": "paragraph",
        "id": "ac3880d438d89afd",
        "text": "The page we show in the frame below is the page on the screen which might be a ghost, maybe retrieved from history.",
        "alias": "ca075d681c953999"
      },
      "date": 1679337268268
    },
    {
      "type": "edit",
      "id": "00e55c113558b626",
      "item": {
        "type": "code",
        "id": "00e55c113558b626",
        "text": "function handler ({data}) {\n  if (data.action == \"frameContext\") {\n    window.removeEventListener(\"message\", handler)\n    const {slug, item, page} = data\n    const journal = JSON.stringify(page.journal)\n    show(page, journal)\n  }\n}"
      },
      "date": 1679337291545
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page, journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  const actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${actions.join(\"\\n\")}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679337307548
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page, journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  const actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${actions.join(\"\\n\")}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679337340026
    },
    {
      "type": "edit",
      "id": "cff317c5386f7b33",
      "item": {
        "type": "code",
        "id": "cff317c5386f7b33",
        "text": "function show (page, journal) {\n  const graph = new Graph(); //TODO Graph.load()\n  const actions = page.journal.map(item => [ item.type, item.id ])\n  let html = `<h1>Journal to Graph</h1>\n<pre>${graph.stringify()}</pre>\n<pre> <== //TODO Graph.load(journal) </pre>\n<pre>${actions.join(\"\\n\")}</pre>\n<pre>${journal}</pre>`\n  output.innerHTML = html\n}"
      },
      "date": 1679337719806
    },
    {
      "type": "edit",
      "id": "ac3880d438d89afd",
      "item": {
        "type": "paragraph",
        "id": "ac3880d438d89afd",
        "text": "The page we show in the Journal to Graph frame below is the page on the screen which might be a ghost, maybe retrieved from history.",
        "alias": "ca075d681c953999"
      },
      "date": 1679337763705
    },
    {
      "type": "fork",
      "site": "code.dreyeck.ch",
      "date": 1679486829180
    },
    {
      "type": "edit",
      "id": "777ff878d8f1cc7e",
      "item": {
        "type": "frame",
        "id": "777ff878d8f1cc7e",
        "text": "//wiki.ralfbarkow.ch/assets/pages/js-snippet-template/importjs.html\nHEIGHT 200"
      },
      "date": 1679554465796
    },
    {
      "item": {
        "type": "factory",
        "id": "0fd355c1b9cd5a8c"
      },
      "id": "0fd355c1b9cd5a8c",
      "type": "add",
      "after": "3b82b21577e7c56b",
      "date": 1679554544432
    },
    {
      "type": "edit",
      "id": "0fd355c1b9cd5a8c",
      "item": {
        "type": "paragraph",
        "id": "0fd355c1b9cd5a8c",
        "text": "End of class Graph"
      },
      "date": 1679554556504
    },
    {
      "item": {
        "type": "factory",
        "id": "313e0caf3b424be4"
      },
      "id": "313e0caf3b424be4",
      "type": "add",
      "after": "0fd355c1b9cd5a8c",
      "date": 1679554559645
    },
    {
      "id": "313e0caf3b424be4",
      "type": "move",
      "order": [
        "ec7cfe29cb68b0fb",
        "6e7adca8a4947ee9",
        "c8963fb39e7da82f",
        "433e0069aa2ef6ee",
        "00e55c113558b626",
        "2d2f5ff7dc632826",
        "72aeebe8eb47daf9",
        "888bf52ed83d1bad",
        "4633a8fe45f7d185",
        "df0adbcc9a7cf9b8",
        "b4eb1474230ff347",
        "66abb70b9732e9f9",
        "e3ef0ded2d102486",
        "c30a817e0f4d743b",
        "7ce24ecfb7028c10",
        "a809a28f235d2182",
        "18800bc5ffa70f64",
        "34d054563f9a9a0a",
        "ef04d15a1957b212",
        "8318dc9fbfaf2139",
        "ac3880d438d89afd",
        "cff317c5386f7b33",
        "e4c77b29d73d4ef2",
        "9c942e4e3f9326b3",
        "777ff878d8f1cc7e",
        "26f658e266960e5a",
        "f4d43f148cd0fff1",
        "fd5d83be681e1f38",
        "f1ee4707438c9b92",
        "5f3be96aa0806e09",
        "fb09a5e806034ab9",
        "51207eb9d312fee2",
        "6bb962eccab85b09",
        "a63c445187b064c4",
        "21d6b6749e1f7796",
        "cb1300498a2b11d3",
        "a0fed1ab6b53b17d",
        "b98db9a5927be63e",
        "786b4f8138fc28b0",
        "2dc5a0ada872ba3c",
        "bf9cc3a1c79c9e3f",
        "b52fc4fb567d46b3",
        "991315787275efe4",
        "c7e536a88ce83c2c",
        "95864a115d5964f4",
        "26c49978db091d77",
        "df0de92af0b8a619",
        "0015aea4e4875074",
        "5baed24daf77ce36",
        "2d2233519bbf91db",
        "33774cb11874876b",
        "f09beb87e844535b",
        "d9bdcd48a9ec97f6",
        "a4808c2767cc18ca",
        "560a2141f87ed422",
        "ea915676ecb573c3",
        "293269983db8ada0",
        "6714f60b43b6c2fe",
        "5edc54607c13ebd4",
        "d435c3530f11b2ce",
        "2b9a69f6c5c6453c",
        "2f24ce927aac23e6",
        "566661186dcd37d3",
        "5f8af97b8a8a0bc1",
        "1df7bf8fcf7ffb51",
        "6dc22166d5424c1c",
        "22c3ece9ecd80d99",
        "3b82b21577e7c56b",
        "313e0caf3b424be4",
        "0fd355c1b9cd5a8c"
      ],
      "date": 1679554564847
    },
    {
      "type": "edit",
      "id": "3b82b21577e7c56b",
      "item": {
        "type": "code",
        "id": "3b82b21577e7c56b",
        "text": "  map(f) {\n    const rels = this.graph.rels\n    const result = this.rids.map(rid => {\n      const rel = rels[rid]\n      return f(rel)\n    })\n    return result\n  }\n"
      },
      "date": 1679554570797
    },
    {
      "type": "edit",
      "id": "313e0caf3b424be4",
      "item": {
        "type": "code",
        "id": "313e0caf3b424be4",
        "text": "}"
      },
      "date": 1679554571923
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1679609222780
    },
    {
      "type": "remove",
      "id": "0fd355c1b9cd5a8c",
      "date": 1679609264256
    },
    {
      "type": "fork",
      "site": "code.dreyeck.ch",
      "date": 1679609289384
    }
  ]
}