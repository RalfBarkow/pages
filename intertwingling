{
  "title": "Intertwingling",
  "story": [
    {
      "type": "markdown",
      "id": "c801b96125dd41ac",
      "text": "In this talk we can find most of the ideas in permanent.wiki and federation.life. The importance of [[provenance]], the need to add [[permanence]] to our work, and the importance of getting. [[granularity]] right. Not only that we see the integration of messaging, and polyglot languages."
    },
    {
      "type": "video",
      "id": "b05748a75969f1db",
      "text": "YOUTUBE Uv1UfLPK7_Q\n[[Joe Armstrong]] & [[Jeremy Ruston]] - [[Intertwingling]] the [[Tiddlywiki]] with [[Erlang]]"
    },
    {
      "type": "markdown",
      "id": "792e02e5781e1683",
      "text": "The description of [[Tag Ontologies]], describes the same starting point and approach that we have been discussing - though this needs writing down despite the seeming obviousness of the approach.\n"
    },
    {
      "type": "markdown",
      "id": "1d151c3956bde621",
      "text": "Watching this video for the first time invigorates the desire to reach out to these communities and seek a grounds for collaboration.\n"
    },
    {
      "type": "markdown",
      "id": "187207def1a1aede",
      "text": "# See also\n\n- [[Persistent homology]]\n- [[Evolving Memetic Pattern]]\n- [[Epistemic Media Visualisation]]\n- [[EMP Visualisation]]\n- [[Tag Ontologies]]"
    },
    {
      "type": "pagefold",
      "id": "f28257ebbefa2196",
      "text": "Transcript"
    },
    {
      "type": "paragraph",
      "id": "5b27d2558990897a",
      "text": "for many years I've been a great admirer of Jeremy's Ruston's work on the tiddlywiki and I'd we'd never met so what a nice way to meet would be to do a talk at a conference where we would have to collaborate and so and it's been really fun that's what we did"
    },
    {
      "type": "paragraph",
      "id": "5b50530bbae1266d",
      "text": "and have to start with the obligatory question so how many how many people in the audience know what Erlang is or Alexia reviews - anything like that right so how many know what the tiddlywiki is and have used that and how many know how many people know what into twinkled is and how many people know what the intersection of airline the tiddlywiki and into twinkled is notice we didn't put our hands oh we don't know either so this is a way to make a popular lecture you take three niche subjects and you take the Venn diagram where they intersect and of course you will get a massive audience who wants to learn about this so it's very strange that there's more than one person or two people in the audience or three people so the plan of this is to talk about into twing wilderness and tell you what it is and then what I want to do though I want to avoid Groundhog Day I'll explain more groundhog days and I want to talk about making complex things and and the joy of all in oneness all in oneness is a beautiful concept and then the tiddlywiki will talk about the correct level of granularity and how everything is deeply into twinkled and then we'll talk about some experiments we've been doing so we'll start with Ted Nelson and a quote from his book computer dim dream machines everybody should read everything that Ted Nelson had ever written in particular watching youtube videos a computer's guide for cynics it's very good so Ted Nelson and coined the word hypertext and he coined the word micropayments and he coined the word into twinkled and he said that everything is deeply into twinkled there are no subjects all there is this knowledge cross-connected in very complicated ways and he said hierarchical and secret sequential structures especially popular since Gutenberg are usually forced an artificial into twinkle arity is not generally acknowledged if we try and build things into hierarchies they will always fail and in fact we get are like a bird's nest soup of links which actually represents reality so how can we represent things so I the central problem that I have been trying to solve for the last 30 or 40 years is how to organize ideas and software that's the central problem how can you find stuff and Jeremy's been working on the same stuff for many years so that's really good anybody know who this is it's it's the movie Groundhog Day so unfortunately we follow the the software model of Groundhog Day development we invent something simple we add more features we have features and more features and more features and more features and it gets so complicated then nobody can use it and so we throw it away and start again and that is the dominant model of software development that we use so in fact software is a form of Buddhism where we go through a cycle of suffering a cycle of life death and rebirth without a beginning or end so can we do anything about that right so we've built all this complicated stuff and we get to the end of our cycle and we want to rewrite it so but but then that's difficult because we don't want to throw away the good stuff that we've got in that process so how can we reuse that stuff without making it more complicated well we could throw it all away and start again we miss the good stuff if you do that you could stick it in a container and use a defined interface docker and things like oh that's great but that one day that will become very complicated they'll have to put the container in the container and one day that will become more complicated and you put that in the container so one day an operating system will be very very big one day a program like keno will be a hundred and forty megabytes and you wonder how is it that an operating system was less than one megabyte or less than 640 kilobytes and we're 20 years ago what or we could add a messaging interface between complex things and this is how we work we have complex models in our brain and we talk to each other we don't understand how our models work and that doesn't worry so we get to communicating sequential complex things this is like CSP with no maths and know how to breath and we add mailboxes to complex things and we had protocols I now want to talk about all in oneness so all in oneness is the property of a program where all the code and all the data's in a single container if you have programs and data then circumstances will happen whether to move and they don't know about each other so for example keynote there's a well-known practice i've actually used to do this talk with them and it consists of two things that consist of a program that my apple have produced and a data file that's got the talk in and these two things should always work together so when we were preparing this talk Jeremy no I were fired were mailing backwards and forward a keynote file and so Jeremy had keynote version n and mailed me a file called talk keynote by email I had started off with n minus one and he emailed it to me and I got but Jeremy had updated his version of keynote without me knowing permission without permission and this very strange thing time to update to open this presentation you need the latest version of P note not now and I couldn't read those slides are lost don't they write a lot we could never read them against actually go to app store now the very funny thing happens is the app store yes you can upgrade the version of keynote but wait a moment you also have to update the version of the operating system as well now updating an operating see the very dangerous operation because of at least 5% of all the programs I have won't work anymore if I update the operating system for I'm very reluctant to do this I don't want to do this they're probably all in oneness with where you combine the data and the program so that they can never be isolated from each other right so it's it's actually the opposite of using dependencies it's very slow and difficult to write it increases your understanding but it increases the ability of that program to work in the future so I've got a I don't I think there later in the sawsan a couple of examples is a small token majeure in the book on into twinkle Dennis Alan Kay writes a chapter about discovering an early pile of disks and he plugs in a disk and he finds a small talk from I think 1968 puts it in his machine and there we are back in 1968 this program works exactly as in 1968 because the small took image and the assumptions it makes about the operating system are such that we can still run that and that's the same as Jeremy's tiddlywiki tiddlywiki which Jeremy will talk a lot about and show you combines the program which is in JavaScript and all the data and so we can run all the early versions exactly as they were how many years ago 15 years ago yeah so there are five steps to all in oneness oh well this is yes okay so none of you have ever done this well let's let's do a simple programming problem we're gonna write a program that displays a nice button in the browser now how difficult can that be right link really cool style feed stack bootstraps something stuck bootstrap min button class BT and danger button there and you get a nice has anybody know I would never do that would you do that would you include 200 kilobytes of cascading style sheets are compressed to get a single button that's nice if anybody done that yeah is it good do you have a bad conscience about this right and we ever we haven't put any JavaScript in yet this is tough the button hey suppose you want the button from one cascading style sheet thing and from another one that's why you're up in a megabyte before we've done anything right that's not future proof wait a moment the CDN will break in 10 years time or in a thousand years time there won't be a CDN and your program will stop working so here's this amazing you haven't changed your program but somebody else has changed something and it's broken there's not a future proof it's undone 41 kilobytes a CSS it won't work offline what is the advantage first time to market that's the only advantage right I'd never do that right it's a security nightmare it's horrible it is it's daft so what can you do make a local copy of the CDN yeah it's not future-proof because they if you sort of mail your HTML program to somebody you forget to mail the local cache copy it'll break or if in the future you rearrange your file system it'll break not good you can work offline you can do it on the plane on the way over because you don't need the CDN to be online right you could move all the CCS into the into the HTML file now it's actually all-in-one so that is future proof you can move the file so you won't break anything but it's huge and horrible that's not really elegant so you can cut and paste the stuff from the download into your program yeah have you actually broken the copy right at this stage hmm yeah maybe so maybe you've got to put the the copy I've broken any patents or so might be a bit worried about that okay it's actually very future proofing so you can understand it it's small but you might have broken somebody's copyrights have a better rewrite it and extract the essential goodness do I really want WebKit user select nan and I don't know I've noticed if you remove all these WebKit things and just put the thing it all works anyway so I've never really do you understand the difference I do you it stops you being able to select the text on the button which is annoying so then you rename things and you think well I'm probably this is now a derived work so you're probably free of any copyright problems perhaps you should put I would like to my sincere thanks bootstrap for coming up with this brilliant idea right so do you really want n megabytes of in comprehensible stuff in your application in order to use point over 1% of the code oh well doing that we can forget about build systems because we're not using dependencies and we can forget about webpack and gruntin bow I have no idea what these things are but apparently you need to grunt you need grunt files and things to make these work I don't know what they are I do understand JavaScript and things like that so we get this idea of all in oneness we put everything into one and here's small token tiddlywiki so here's the tiddlywiki tiddlywiki it's small grain knowledge the whole idea is to make small bits of knowledge that are reusable if you think about it characters the letters of the alphabet are very reusable the characters ABCD we reuse them all the time but the granularity of what we reuse is useless big PDF files are not reusable the unit of reusability probably about a single paragraph or two paragraphs where we don't change the subject so basically we want to construct things out of one or two paragraphs where we do not change subject and that gives us the granularity of something that we can reuse right so I've played with the tiddlywiki for many years off and on and I was playing with it recently well recently when we started this and I had my Alleluia moment you know the road to Damascus where you are struck by enlightenment and it was I was going to write a to-do list in the tiddlywiki him and I was just doing it like you always write a to-do list I I made a single page and I made a single tiddler called to do what else would you call it I put the things in that you want to do you want to water the cats feed the plants and buy some milk and suddenly like a this is a flash of lightning hit me you can't reuse this stuff well you could you could say here's here's a list of to dues but suddenly is the Eureka moment came and I said why don't I am one and I make three toddlers one cold water the cat's another called feed the plants or something oh here a little house by the milk I haven't got the third one and then the to-do list becomes a transclusion with some logic in almost like Prolog or something like that it's the to-do list says list links with the tag to do there's like a find or just find all everything that's got this tag and make me a page out of it now I've got something that's reusable these these are reusable they can be included in different things this is a simplest form I've got a single tag here to do I could add another tag done and then I could list all to do but not done and do things like that so I can compose things so now we have Jeremy so so what's Jeremy Jeremy is the human garbage collector I wondered what that meant as well well because this process I showed you of taking 200 kilobytes of CSS and finding the essential stuff that does it pulling it out and putting it into its thing that's the human garbage collectors job and it's incredibly difficult it takes an incredibly long time and the results are incredibly they are incredible so Jeremy's made these titli wikis they've evolved over time and we can look at them and we could see how they behave so I'm going to look at that for a bit and Jeremy gosh we're under press right thank you very much Joe and I'd just like to add Joe saying about dependencies something I often find is developers will say well nod wisely to the kind of remarks we've been saying and say yes you should really try and reduce the number of dependences but I think what we're really guessing out is that if you reduce the number of dependences to zero something completely different happens and a whole load of concerns that you have even with a single dependency vanish and that frees you up in a way that is maybe counterintuitive because so much of what we do is these tools that are themselves into twinkled so yeah it's a big deal and I'm pleased that J has recognized it so tiddlywiki started by accident and you can tell that because I gave it a ludicrous name which is so ludicrous it actually actively quite annoys some people so to blame whether it was the twiddly wiki and I was interested in this idea of making a wiki that instead of being four full pages instead of a wiki for Word documents a wiki for little items of content and it was triggered by seeing Gmail so Gmail in 2004 is kind of new to see emails threaded together and it was amazing because previous crappy web-based email in a huge control click to open multiple emails and multiple tabs or similarly if you've ever refactored MediaWiki or something a canonical refactoring in a wiki is to take a page and split it into two will join two pages together and a media wiki you have to open those two pages in different tabs and then sort of juggle between them so Tinley wiki was trying to take a new look at that and thrown together few hundred lines of JavaScript HTML and CSS and this is the that very first version 200 lines so this is a primordial tiddler the idea of a fragment of text that has a title has got some metadata in this case it was me and some text and the text has links in it and if I click on a link then it retrieves the subject and the link so you can see as I click on links I'm kind of unfolding my own version of the story made out of fragments that take my interest by following the links and and that was all this it was at this stage and if we go back to keynote more opportunities for technology to go wrong you might say what's so wonderful about wiki's and I've discovered that obviously most people think of the distinguishing features of wikis being the fact that anybody can edit them and that obviously is the kind of surprising thing that's emerged from Wikipedia and so on but to me the interesting interesting thing was always that they made linking be part of the punctuation of writing and this is where our shared interest in Ted Nelson comes and that Ted Nelson's well I shouldn't put words in other people's mouths I believe that hypertext and links between texts is the closest we've got to abstracting the way that links and connections in our brains happen and I can't help but see how my brain works as being a series of blobs of stuff with links between them that in two twinkled earnest stuff and of course our hypertext people we take it for granted that the web is a kind of crippled - text system and it lacks some of the characteristics that we think is super important so things like being resilient to link breakages and bi-directional links so I had a funny experience I released that little blow fact the next version that you'll see a slightly improved version of that onto the Internet and in 2004 it went viral in the old sort of world of blogs and delicious and things like that and that was lovely but it was also deeply frustrating because people would rice Versailles to say this is really nice and interesting but it doesn't work and it'll be great when Jeremy fixes it and what they meant was that I'd written it it's a single HTML file because I was interested in exploring the user interface oh dear and I wasn't really interested in making it practical at that point so I put a button a Save button in it and if you can see this when you sew you edit some tiddlers in here and then when you press the Save button this window pops up with the source code that you have just sedative that you can then copy and paste and save somewhere so it's kind of I used that technique to edit tiddlywiki itself to create the documentation but then a fantastic testament of why we should all share our stuff I put this out there and was well for the first thing that happened was really obvious a bunch of people wrote server sides for it and I saw some value in the way that the certified communities are quite tribal you know Ruby people are Ruby people and Python people are Python people but if you write something there's pure client-side then you can have a multiplicity of server sides and you can keep everybody happy by giving them a server side in which they are productive and tiddlywiki is you know the common thread that but the weird thing was that somebody made a Firefox extension there less it save directly to the file system using some API is that I wasn't aware of for accessing the file system from Firefox extensions and then we discovered that the same damn API is actually work in a normal web page if it was loaded on the file URI so this is very forgive all this web development prehistory but what all of this meant was that this absurd little demo suddenly turned into something practical that could be used and it turned out that it's it's properties which are slightly different than most software enabled it to be used in a unexpected and different way so grant hog wise I carried on making it better so took my embarrassing joke and tried my hardest to turn it into you know what I could say in my head that it that it could be and that culminated in BT buying my one-man company ten years ago in order to sort of assimilate some open-source nests in the organization so after I said we'll talk a bit more about telling me keep there's a lot to be said about it I wanted to kind of pull back to what we've learned from it which was the introductory slide though we had so totally wiki's philosophy is now kind of clear to me it was it didn't have a philosophy at the originally because it was so it was kind of a joke but I think these are useful takeaways it's only worth recording information if you're going to reuse it really obvious I mean sometimes it is therapeutic to write stuff that you're never going to read we you know write a letter to your enemy put it under your pillow burn it in the morning that's a lovely thing to do but if you do want to reuse information there's as joe said earlier what we've learned from Sydney work is you cut it up ruthlessly into the smallest semantic unit so everything we thought we knew about making PDFs and making Word documents is all about you know filling up a big blank vessel whereas writing effectively in deadly wiki is trying to find a way to split things up into these chunks so that you can reassemble them into other forms so there's a few more words there I think Joe was attracted by this single-file thing and it does indeed have some bizarre consequences wintered Lee wiki was very young somebody emailed me to say that they were going through a divorce they had a child of two and they were writing all their Tangled thoughts about their divorce in a tiddlywiki and then they went on to talk about how they looked forward to sharing that with their child when the child was grown up and I was blown away by how he'd implicitly realized that the software would still work in 16 years and in fact now it's clear html5 has been something of a success and I think this stuff will still work on my grandchildren's telephones you know quite possibly in a little emulator box the it also has a different sense of self-contained us that the small talk also has that tiddlywiki is written in itself so the entire user interface of tiddlywiki which is all stuff you're used to tabs and buttons and things is all constructed out of wiki text primitives and so what that means is anybody who's using tiddlywiki can recreate something as complicated and rich as tiddlywiki and in the process its equine it's a curiosity of computer science for years has been these programs that print out their own source code and as one of those little corners it can be science if you go digging you'll find people who've made Queens that look like things as well I'm really remarkable but as far as I know tiddlywiki is the only thing that actually relies on being a Quine in order to do its job because when you make a change and save it it recreates its new source code and saves it for you so there's some stuff about how that all feels inside but what it really comes down to is this meta problem faced with the task of building a notebook don't build a notebook build a tool that lets you build notebooks and you know it's that kind of natural pull to the matter and to the general I think software people all have so I did eventually do exactly as Joe predicted after six or seven years I was hideously embarrassed by this sort of old code threw it all away and rewrote it and and in fact it is a great experience and I'm lucky that both the old product and the new product they both have kind of active communities and they're both kind of surviving so it's more like punk rock I mean punk rock didn't actually kill rock and roll rock and roll carried on it you don't have to punk rock came in and that's what tiddlywiki looks like today I'll show you a side at the end with some links and you can dig around but I wanted to just briefly talk about the unexpected effects of this because from a computer science perspective what you see is a piece of software that looks like it does something you're very familiar with you know it looks like MediaWiki but it's got this perversity of being written in a completely different way and you know it doesn't work like the software that you're used to but it turns out that's had a profound impact on the way it's used that probably don't know who's who who knows bash here who has ever typed anything in a terminal so we're all freaks because obviously most people not only if they've never done that but they're also terrified by it a to or to an extent that's not logical when people will go to quite extraordinary lengths to avoid what they see as these scary complicated tasks where they might accidentally break their computer so in fact giving somebody the ability to make stuff without needing all of that machinery is in trend is tremendously empowering and some of the things that you know our complicated build environments with lots of files and git and so and we get as developers some amazing capabilities like I can rewind time I can randomly code and then if it doesn't work I can rewind but if I was a recruitment consultant and I was trying to experiment with a different way of arranging my LinkedIn profile you don't get that same ability to jump back and that's true for what most of ordinary computer users experience but give them a single-file tiddlywiki and they can basically make their own get because if I save a copy of that file and put it over there I know in my own knowledge that it's safe I can work on this file and you know restore the two of them and surprisingly computers are much faster than you think and so you'd think an HTML file in the browser would be a barely practical proposition but I work with hundred megabytes only which is all the time and thanks to you know for years now a ridiculous amount of engineering effort has been directed towards browser performance and so in fact if you're interested in a VM to run on the browser is the most widely available best optimized one of all so here's an example which I think I've got time to show you in person yes very quickly say I like this because this is kind of about business models so here's an American volleyball teacher who has used Sidley wiki to build a system to help them teach volleyball and it's kind of I love it because it's kind of crazy in some ways why are all those things different colors up there and why are these things different colors why does Joe's laptop scroll the wrong way but the thing that's really cool is that they made it themselves so this is somebody who is a PE teacher and not as far as I know a software developer and they were able to construct their own system and there any alternative was to go and find a software developer explain to them what they wanted and get them to build it for them but as we know to explain what you want or to decide what you want is actually equivalent to building the thing in the first place and so under that root he would have been condemned to build the software twice whereas this way using kind of cargo cult techniques where you copy and paste code from other people change it didn't work jump back to the previous version he was able to make this complete system and to me the incredible thing about that is that you know computers have these an astonishing power in our world but that power is reserved for the people who know how to use them or the people who can gain funding to build things like Instagram but you can't really imagine a model where VC money goes into a high school volleyball teaching and yet high school volleyball teaching benefits from software as much as anything else so proposition there is that by making software that works differently you can get into different places than software normally does and I think our job as technologists is to furnish technology for other people so we've got like 10 minutes Joe I'm really sorry to have limited you but now we're going to talk about all the fun stuff we've been coding together for the last three months so how do we reason it could build these wonderful tiddlywiki x' how do we combine them into a big global tiddlywiki how do we make it sort of planetary scale right it's individual scale it's like a typically wiki's like your brain or my brain so how do we what do we do about that so we did some experiments so how can we reuse the content and how can we avoid Groundhog Day right so one of the things I want to do is provenance I should say that a lot of these tiddlywiki hypertech's these are the ideas of Ted Nelson and Ted Nelson was very much into provenance where did stuff come from there's a fundamental fault with editors Providence yes definition the place or origin place of origin or earliest known history of something if you're in an editor if you really imagined you're editing a program in Emacs and you're doing some research and you've got a browser up and you google a bit and you find something that's useful and you cut and paste it from the browser and then you paste it into Emacs and you save it now you've destroyed the information as to where it came from and then you publish a file and you post it into a forum and it gets indexed and somebody takes that content and they cut and paste something you do another document when we're programming we can often spend hours and hours and hours of doing research the result is a program and we publish the program and we throw away all the research so after the event we can't see where everything's come from so one of the ideas we wanted to put into the tiddlywiki and things of provenance where has everything come from can we record it accurate accurately I'm I'm trying to do is implement some of the things in Xanadu which Ted Nelson thought about and wrote down their ideas off in gali when 19 do you know I don't know 1965 right so we don't know where stuff in a file comes from and there's a fault with editors so if anybody wants to write a decent editor that accurately tracks where everything comes from what did you know at the time when you were doing something maybe the idea came right out of my head maybe it didn't what had you been reading before you wrote the text so where does content come from so we want to attribute things we need to maintain intellectual property rights everything how could you do this well we can put them into block chaser not the silly blockchain is that these are lots of energy but just just right append files when things talk to each other we're not going to put all the text in a social tagged it up in some set tags so these all work to do tags and things like that very useful so thinking about experiments of tagging how do we tag things so far we've done a couple of exposure and people tagged things if I write a bit of text I am I might tag it with air long and functional programming doesn't like that and then when I'm searching I don't think I want to find something about a advisor I could but would the tags that you use yeah be the tags that I use well there's no guarantee of that so did a couple of experiments with Bayesian inference so it's in this a lot of tiddlers are tagged we could do it too we could work out the conditional probabilities of you know given given a tag we've got these words in the document just do base an inference on them the first part we learn in the second part we read tag and see how accurately we can predict the tags and the answer is yeah that we works we can if I predict four tags particular I was getting my 85% hit rates on them so it's not so bad pretty good the trouble is those tags would probably chosen for transclusion purposes so they might say a tag to do you know somebody's put a tag on it says it to do because they want to intruded into a to-do list but the real information is milk and cats you know feed by the milk buying the milk might be the thing if I search for tag maybe I should tag it with milk not not to do so in fact although the tagging Bayesian inference is pretty good do you think the tags that were generated were much good then tried tf-idf term frequency times inverse document frequency this is just about the simplest tagging mechanism you think was widely used everywhere it's really quick to implement this the tag said it predicted for the wiki were much worse it didn't predict the human tags but when I was looking at I thought the tags are much better and also because it's a good it's a statistical aggregate over the entire thing maybe it's got a better chance that when you search for something you will use the same tags so do that stuff with the taxes tax I think one things that's really nice about it is it so it makes you reconsider what you wrote and you know in writing like coding we you need to refactor and in order to refactor you need to acquire a new perspective to see how to do so it's the one thing it's not quite working we'd hope to get it working by now this is Jeremy's adding some new buttons and side panels to the tiddlywiki and the idea is as you're composing a wiki in the sidebar the tags would be just updating as you program sorry as you write the wiki as you write the text there'll be a suggestion box I think the tags in this should be solid mailbox to where we can send messages to a no long process get stuff back into the tiddly world took us longer than we thought yeah so we get communicating tiddlywiki x' so we need to put a bolt on earth a front end and then I thought I really actually like this idea of communicating things when I work for Ericsson we had a we built a system actually for trouble reports what happened was that customers would what I didn't I mean sorry when I say we I don't mean me I mean Ericsson collectively not including me the front office got trouble reports and their job was to Ford the trouble report to the back office who would solve the problem and so somebody said well this doesn't work this doesn't matter well it's a problem with the antenna or the power subsystem node forward it off in the back end and we did not weasel research did some experiment sir where they use Bayesian inference looking at the old blood cells to see if they could predict who to send the Mail's to they were very well actually I was as good as the human front office occasionally they sent to the back office and it was wrong and they sent it them back to a human who had reclassified so I thought maybe they do something like this was communicating tiddlywiki x' that oh that we could view a tiddlywiki as a front office with a Bayesian inference thing or a thing that would forward it to Matilde and we would add mailboxes to the tiddlywiki and mail boxes to the tiddler so they could send messages to each other because I think in this way we can get out of this Groundhog Day we can reuse old things by sending messages I think that and the messaging model just says you've got a mail box you know their name of the thing you send in a mail box I want to know about X Y Z and it will sort of send you some answer back so if you want to say I know about X Y said you need an ontology that defines the meaning of words and the ontology is the tagging so we need to understand the meaning of words and we need to define an ontology and that's what we're trying to do the other thing is we could put them all into some huge namespace but I don't think that's going to work real work to start with but it's just too big J starts are trying to collect every tiddlywiki you could find every Tipler in the universe but the trouble is with that the individual tiddlers do not have copyright and reuse indicators in so I've you know I've learned that that you can't reuse you know they've been legal actions where people have been sued by in a tweet and although the probability of this happening is very low if I were to reuse somebody's tiddlywiki or without explicit attribution that I can reuse the content so we need to change the titli's system to make it permissive for legal reasons we don't do that at the moment and then we need mechanisms for table of discovery and tickler similarity once we've made a tippler this unit of reusable information can we find the most similar tickler in the planet what we want to do is reduce entropy we're increasing entropy all the time by writing more and more software what we need to just do is to reduce entropy by discovering that two things are similar and collapsing it into a smaller space to make it more understandable so we're trying to address these problems and we have some ongoing experiments adding an airline like mailbox model for communicating kiddley Ricky's analyzing all known tiddly wiki's and doing tag inference and I think that's struck me recently that's what I call focus of attention that when you're writing something you suddenly think of something else and you wanted to sort of do that then go back and when you're writing something on screen I want an assistant that's in the side not you know sort of giving me additionally helping me write giving me additional information at the moment you're in one window like that and you want something Oh search over there it's in the way I've lost where I came from I can't remember how I got there well this seamless way of providing me with information so we both had the experience where we've done the same piece of work twice because we'd forgotten about doing it the first time so leads to the dream of being nudged and what I'm also trying to do is do a sort of clean room tiddlywiki that's got the essential features of so I'm building my own eyes Groundhog Day over and over again with Jeremy with Jeremy's help and encouragement so here I am hacking a load of JavaScript and having great fun and then we'll put an airline like messaging model onto it because the thing is in Erlang what you think we know how to connect planetary scale messaging when as easy you've done that but now that we've got planetary scale communication what do we use it for well try to combine these little city rules of knowledge so that's it and how long have I got no I put it on the web but if you want to see what we were doing Jeremy Lin comm slash into twinkled no connection but you will have an advanced nation - that's right you have time for questions I'm afraid not so strict zero oh dear any thanks Jeremy and Jeff [Applause] you"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Intertwingling",
        "story": []
      },
      "date": 1629993809015
    },
    {
      "item": {
        "type": "factory",
        "id": "c801b96125dd41ac"
      },
      "id": "c801b96125dd41ac",
      "type": "add",
      "date": 1629993810502
    },
    {
      "type": "edit",
      "id": "c801b96125dd41ac",
      "item": {
        "type": "markdown",
        "id": "c801b96125dd41ac",
        "text": "In this talk we can find most of the ideas in permanent.wiki and federation.life. The importance of [[provenance]], the need to add [[permanence]] to our work, and the importance of getting. [[granularity]] right. Not only that we see the integration of messaging, and polyglot languages."
      },
      "date": 1629993985507
    },
    {
      "id": "b05748a75969f1db",
      "type": "add",
      "item": {
        "type": "video",
        "id": "b05748a75969f1db",
        "text": "YOUTUBE Uv1UfLPK7_Q\n[[Joe Armstrong]] & [[Jeremy Ruston]] - [[Intertwingling]] the [[Tiddlywiki]] with [[Erlang]]"
      },
      "after": "c801b96125dd41ac",
      "date": 1629993988658
    },
    {
      "item": {
        "type": "factory",
        "id": "792e02e5781e1683"
      },
      "id": "792e02e5781e1683",
      "type": "add",
      "after": "b05748a75969f1db",
      "date": 1629994018064
    },
    {
      "type": "edit",
      "id": "792e02e5781e1683",
      "item": {
        "type": "markdown",
        "id": "792e02e5781e1683",
        "text": "Watching this video for the first time invigorates the desire to reach out to these communities and seek a grounds for collaboration."
      },
      "date": 1629994063572
    },
    {
      "type": "edit",
      "id": "792e02e5781e1683",
      "item": {
        "type": "markdown",
        "id": "792e02e5781e1683",
        "text": "The description of tagging and ontologies, describes the same starting point and approach that we have been discussing - though this needs writing down despite the seeming obviousness of the approach.\n"
      },
      "date": 1629994224932
    },
    {
      "type": "add",
      "id": "1d151c3956bde621",
      "item": {
        "type": "markdown",
        "id": "1d151c3956bde621",
        "text": "Watching this video for the first time invigorates the desire to reach out to these communities and seek a grounds for collaboration."
      },
      "after": "792e02e5781e1683",
      "date": 1629994225277
    },
    {
      "type": "edit",
      "id": "792e02e5781e1683",
      "item": {
        "type": "markdown",
        "id": "792e02e5781e1683",
        "text": "The description of [[Tag Ontologies]], describes the same starting point and approach that we have been discussing - though this needs writing down despite the seeming obviousness of the approach.\n"
      },
      "date": 1629994260908
    },
    {
      "type": "edit",
      "id": "792e02e5781e1683",
      "item": {
        "type": "markdown",
        "id": "792e02e5781e1683",
        "text": "The description of [[Tag ontologies]], describes the same starting point and approach that we have been discussing - though this needs writing down despite the seeming obviousness of the approach.\n"
      },
      "date": 1629994267086
    },
    {
      "type": "edit",
      "id": "792e02e5781e1683",
      "item": {
        "type": "markdown",
        "id": "792e02e5781e1683",
        "text": "The description of [[tag ontologies]], describes the same starting point and approach that we have been discussing - though this needs writing down despite the seeming obviousness of the approach.\n"
      },
      "date": 1629994276223
    },
    {
      "type": "edit",
      "id": "1d151c3956bde621",
      "item": {
        "type": "markdown",
        "id": "1d151c3956bde621",
        "text": "Watching this video for the first time invigorates the desire to reach out to these communities and seek a grounds for collaboration.\n"
      },
      "date": 1629995477365
    },
    {
      "type": "add",
      "id": "187207def1a1aede",
      "item": {
        "type": "markdown",
        "id": "187207def1a1aede",
        "text": "# See also\n\n- [[Persistent homology]]"
      },
      "after": "1d151c3956bde621",
      "date": 1629995487422
    },
    {
      "type": "edit",
      "id": "187207def1a1aede",
      "item": {
        "type": "markdown",
        "id": "187207def1a1aede",
        "text": "# See also\n\n- [[Persistent homology]]\n- [[fsda]]"
      },
      "date": 1629995501917
    },
    {
      "type": "edit",
      "id": "187207def1a1aede",
      "item": {
        "type": "markdown",
        "id": "187207def1a1aede",
        "text": "# See also\n\n- [[Persistent homology]]\n- [[Evolving Memetic Pattern]]"
      },
      "date": 1629995976600
    },
    {
      "type": "edit",
      "id": "187207def1a1aede",
      "item": {
        "type": "markdown",
        "id": "187207def1a1aede",
        "text": "# See also\n\n- [[Persistent homology]]\n- [[Evolving Memetic Pattern]]\n- [[Epistemic Media Visualisation]]"
      },
      "date": 1629995993077
    },
    {
      "type": "edit",
      "id": "187207def1a1aede",
      "item": {
        "type": "markdown",
        "id": "187207def1a1aede",
        "text": "# See also\n\n- [[Persistent homology]]\n- [[Evolving Memetic Pattern]]\n- [[Epistemic Media Visualisation]]\n- [[Tag ontologies]]"
      },
      "date": 1629996002285
    },
    {
      "type": "edit",
      "id": "187207def1a1aede",
      "item": {
        "type": "markdown",
        "id": "187207def1a1aede",
        "text": "# See also\n\n- [[Persistent homology]]\n- [[Evolving Memetic Pattern]]\n- [[EMP Visualisation]]\n- [[Tag ontologies]]"
      },
      "date": 1629996532854
    },
    {
      "type": "edit",
      "id": "187207def1a1aede",
      "item": {
        "type": "markdown",
        "id": "187207def1a1aede",
        "text": "# See also\n\n- [[Persistent homology]]\n- [[Evolving Memetic Pattern]]\n- [[Epistemic Media Visualisation]]\n- [[EMP Visualisation]]\n- [[Tag ontologies]]"
      },
      "date": 1629996574493
    },
    {
      "type": "fork",
      "site": "visualjam.org",
      "date": 1630100886229
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1702973880249
    },
    {
      "type": "edit",
      "id": "792e02e5781e1683",
      "item": {
        "type": "markdown",
        "id": "792e02e5781e1683",
        "text": "The description of [[Tag Ontologies]], describes the same starting point and approach that we have been discussing - though this needs writing down despite the seeming obviousness of the approach.\n"
      },
      "date": 1702973880250
    },
    {
      "type": "edit",
      "id": "187207def1a1aede",
      "item": {
        "type": "markdown",
        "id": "187207def1a1aede",
        "text": "# See also\n\n- [[Persistent homology]]\n- [[Evolving Memetic Pattern]]\n- [[Epistemic Media Visualisation]]\n- [[EMP Visualisation]]\n- [[Tag Ontologies]]"
      },
      "date": 1702973910987
    },
    {
      "type": "fork",
      "site": "traits.code.dreyeck.ch",
      "date": 1702974023065
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1704997656588
    },
    {
      "item": {
        "type": "factory",
        "id": "f28257ebbefa2196"
      },
      "id": "f28257ebbefa2196",
      "type": "add",
      "after": "187207def1a1aede",
      "date": 1712069582798
    },
    {
      "type": "edit",
      "id": "f28257ebbefa2196",
      "item": {
        "type": "pagefold",
        "id": "f28257ebbefa2196",
        "text": "Transcript"
      },
      "date": 1712069590098
    },
    {
      "item": {
        "type": "factory",
        "id": "5b27d2558990897a"
      },
      "id": "5b27d2558990897a",
      "type": "add",
      "after": "f28257ebbefa2196",
      "date": 1712069595659
    },
    {
      "type": "edit",
      "id": "5b27d2558990897a",
      "item": {
        "type": "paragraph",
        "id": "5b27d2558990897a",
        "text": "for many years I've been a great admirer of Jeremy's Ruston's work on the tiddlywiki and I'd we'd never met so what a nice way to meet would be to do a talk at a conference where we would have to collaborate and so and it's been really fun that's what we did and have to start with the obligatory question so how many how many people in the audience know what airline is or Alexia reviews - anything like that right so how many know what the tiddlywiki is and have used that and how many know how many people know what into twinkled is and how many people know what the intersection of airline the tiddlywiki and into twinkled is notice we didn't put our hands oh we don't know either so this is a way to make a popular lecture you take three niche subjects and you take the Venn diagram where they intersect and of course you will get a massive audience who wants to learn about this so it's very strange that there's more than one person or two people in the audience or three people so the plan of this is to talk about into twing wilderness and tell you what it is and then what I want to do though I want to avoid Groundhog Day I'll explain more groundhog days and I want to talk about making complex things and and the joy of all in oneness all in oneness is a beautiful concept and then the tiddlywiki will talk about the correct level of granularity and how everything is deeply into twinkled and then we'll talk about some experiments we've been doing so we'll start with Ted Nelson and a quote from his book computer dim dream machines everybody should read everything that Ted Nelson had ever written in particular watching youtube videos a computer's guide for cynics it's very good so Ted Nelson and coined the word hypertext and he coined the word micropayments and he coined the word into twinkled and he said that everything is deeply into twinkled there are no subjects all there is this knowledge cross-connected in very complicated ways and he said hierarchical and secret sequential structures especially popular since Gutenberg are usually forced an artificial into twinkle arity is not generally acknowledged if we try and build things into hierarchies they will always fail and in fact we get are like a bird's nest soup of links which actually represents reality so how can we represent things so I the central problem that I have been trying to solve for the last 30 or 40 years is how to organize ideas and software that's the central problem how can you find stuff and Jeremy's been working on the same stuff for many years so that's really good anybody know who this is it's it's the movie Groundhog Day so unfortunately we follow the the software model of Groundhog Day development we invent something simple we add more features we have features and more features and more features and more features and it gets so complicated then nobody can use it and so we throw it away and start again and that is the dominant model of software development that we use so in fact software is a form of Buddhism where we go through a cycle of suffering a cycle of life death and rebirth without a beginning or end so can we do anything about that right so we've built all this complicated stuff and we get to the end of our cycle and we want to rewrite it so but but then that's difficult because we don't want to throw away the good stuff that we've got in that process so how can we reuse that stuff without making it more complicated well we could throw it all away and start again we miss the good stuff if you do that you could stick it in a container and use a defined interface docker and things like oh that's great but that one day that will become very complicated they'll have to put the container in the container and one day that will become more complicated and you put that in the container so one day an operating system will be very very big one day a program like keno will be a hundred and forty megabytes and you wonder how is it that an operating system was less than one megabyte or less than 640 kilobytes and we're 20 years ago what or we could add a messaging interface between complex things and this is how we work we have complex models in our brain and we talk to each other we don't understand how our models work and that doesn't worry so we get to communicating sequential complex things this is like CSP with no maths and know how to breath and we add mailboxes to complex things and we had protocols I now want to talk about all in oneness so all in oneness is the property of a program where all the code and all the data's in a single container if you have programs and data then circumstances will happen whether to move and they don't know about each other so for example keynote there's a well-known practice i've actually used to do this talk with them and it consists of two things that consist of a program that my apple have produced and a data file that's got the talk in and these two things should always work together so when we were preparing this talk Jeremy no I were fired were mailing backwards and forward a keynote file and so Jeremy had keynote version n and mailed me a file called talk keynote by email I had started off with n minus one and he emailed it to me and I got but Jeremy had updated his version of keynote without me knowing permission without permission and this very strange thing time to update to open this presentation you need the latest version of P note not now and I couldn't read those slides are lost don't they write a lot we could never read them against actually go to app store now the very funny thing happens is the app store yes you can upgrade the version of keynote but wait a moment you also have to update the version of the operating system as well now updating an operating see the very dangerous operation because of at least 5% of all the programs I have won't work anymore if I update the operating system for I'm very reluctant to do this I don't want to do this they're probably all in oneness with where you combine the data and the program so that they can never be isolated from each other right so it's it's actually the opposite of using dependencies it's very slow and difficult to write it increases your understanding but it increases the ability of that program to work in the future so I've got a I don't I think there later in the sawsan a couple of examples is a small token majeure in the book on into twinkle Dennis Alan Kay writes a chapter about discovering an early pile of disks and he plugs in a disk and he finds a small talk from I think 1968 puts it in his machine and there we are back in 1968 this program works exactly as in 1968 because the small took image and the assumptions it makes about the operating system are such that we can still run that and that's the same as Jeremy's tiddlywiki tiddlywiki which Jeremy will talk a lot about and show you combines the program which is in JavaScript and all the data and so we can run all the early versions exactly as they were how many years ago 15 years ago yeah so there are five steps to all in oneness oh well this is yes okay so none of you have ever done this well let's let's do a simple programming problem we're gonna write a program that displays a nice button in the browser now how difficult can that be right link really cool style feed stack bootstraps something stuck bootstrap min button class BT and danger button there and you get a nice has anybody know I would never do that would you do that would you include 200 kilobytes of cascading style sheets are compressed to get a single button that's nice if anybody done that yeah is it good do you have a bad conscience about this right and we ever we haven't put any JavaScript in yet this is tough the button hey suppose you want the button from one cascading style sheet thing and from another one that's why you're up in a megabyte before we've done anything right that's not future proof wait a moment the CDN will break in 10 years time or in a thousand years time there won't be a CDN and your program will stop working so here's this amazing you haven't changed your program but somebody else has changed something and it's broken there's not a future proof it's undone 41 kilobytes a CSS it won't work offline what is the advantage first time to market that's the only advantage right I'd never do that right it's a security nightmare it's horrible it is it's daft so what can you do make a local copy of the CDN yeah it's not future-proof because they if you sort of mail your HTML program to somebody you forget to mail the local cache copy it'll break or if in the future you rearrange your file system it'll break not good you can work offline you can do it on the plane on the way over because you don't need the CDN to be online right you could move all the CCS into the into the HTML file now it's actually all-in-one so that is future proof you can move the file so you won't break anything but it's huge and horrible that's not really elegant so you can cut and paste the stuff from the download into your program yeah have you actually broken the copy right at this stage hmm yeah maybe so maybe you've got to put the the copy I've broken any patents or so might be a bit worried about that okay it's actually very future proofing so you can understand it it's small but you might have broken somebody's copyrights have a better rewrite it and extract the essential goodness do I really want WebKit user select nan and I don't know I've noticed if you remove all these WebKit things and just put the thing it all works anyway so I've never really do you understand the difference I do you it stops you being able to select the text on the button which is annoying so then you rename things and you think well I'm probably this is now a derived work so you're probably free of any copyright problems perhaps you should put I would like to my sincere thanks bootstrap for coming up with this brilliant idea right so do you really want n megabytes of in comprehensible stuff in your application in order to use point over 1% of the code oh well doing that we can forget about build systems because we're not using dependencies and we can forget about webpack and gruntin bow I have no idea what these things are but apparently you need to grunt you need grunt files and things to make these work I don't know what they are I do understand JavaScript and things like that so we get this idea of all in oneness we put everything into one and here's small token tiddlywiki so here's the tiddlywiki tiddlywiki it's small grain knowledge the whole idea is to make small bits of knowledge that are reusable if you think about it characters the letters of the alphabet are very reusable the characters ABCD we reuse them all the time but the granularity of what we reuse is useless big PDF files are not reusable the unit of reusability probably about a single paragraph or two paragraphs where we don't change the subject so basically we want to construct things out of one or two paragraphs where we do not change subject and that gives us the granularity of something that we can reuse right so I've played with the tiddlywiki for many years off and on and I was playing with it recently well recently when we started this and I had my Alleluia moment you know the road to Damascus where you are struck by enlightenment and it was I was going to write a to-do list in the tiddlywiki him and I was just doing it like you always write a to-do list I I made a single page and I made a single tiddler called to do what else would you call it I put the things in that you want to do you want to water the cats feed the plants and buy some milk and suddenly like a this is a flash of lightning hit me you can't reuse this stuff well you could you could say here's here's a list of to dues but suddenly is the Eureka moment came and I said why don't I am one and I make three toddlers one cold water the cat's another called feed the plants or something oh here a little house by the milk I haven't got the third one and then the to-do list becomes a transclusion with some logic in almost like Prolog or something like that it's the to-do list says list links with the tag to do there's like a find or just find all everything that's got this tag and make me a page out of it now I've got something that's reusable these these are reusable they can be included in different things this is a simplest form I've got a single tag here to do I could add another tag done and then I could list all to do but not done and do things like that so I can compose things so now we have Jeremy so so what's Jeremy Jeremy is the human garbage collector I wondered what that meant as well well because this process I showed you of taking 200 kilobytes of CSS and finding the essential stuff that does it pulling it out and putting it into its thing that's the human garbage collectors job and it's incredibly difficult it takes an incredibly long time and the results are incredibly they are incredible so Jeremy's made these titli wikis they've evolved over time and we can look at them and we could see how they behave so I'm going to look at that for a bit and Jeremy gosh we're under press right thank you very much Joe and I'd just like to add Joe saying about dependencies something I often find is developers will say well nod wisely to the kind of remarks we've been saying and say yes you should really try and reduce the number of dependences but I think what we're really guessing out is that if you reduce the number of dependences to zero something completely different happens and a whole load of concerns that you have even with a single dependency vanish and that frees you up in a way that is maybe counterintuitive because so much of what we do is these tools that are themselves into twinkled so yeah it's a big deal and I'm pleased that J has recognized it so tiddlywiki started by accident and you can tell that because I gave it a ludicrous name which is so ludicrous it actually actively quite annoys some people so to blame whether it was the twiddly wiki and I was interested in this idea of making a wiki that instead of being four full pages instead of a wiki for Word documents a wiki for little items of content and it was triggered by seeing Gmail so Gmail in 2004 is kind of new to see emails threaded together and it was amazing because previous crappy web-based email in a huge control click to open multiple emails and multiple tabs or similarly if you've ever refactored MediaWiki or something a canonical refactoring in a wiki is to take a page and split it into two will join two pages together and a media wiki you have to open those two pages in different tabs and then sort of juggle between them so Tinley wiki was trying to take a new look at that and thrown together few hundred lines of JavaScript HTML and CSS and this is the that very first version 200 lines so this is a primordial tiddler the idea of a fragment of text that has a title has got some metadata in this case it was me and some text and the text has links in it and if I click on a link then it retrieves the subject and the link so you can see as I click on links I'm kind of unfolding my own version of the story made out of fragments that take my interest by following the links and and that was all this it was at this stage and if we go back to keynote more opportunities for technology to go wrong you might say what's so wonderful about wiki's and I've discovered that obviously most people think of the distinguishing features of wikis being the fact that anybody can edit them and that obviously is the kind of surprising thing that's emerged from Wikipedia and so on but to me the interesting interesting thing was always that they made linking be part of the punctuation of writing and this is where our shared interest in Ted Nelson comes and that Ted Nelson's well I shouldn't put words in other people's mouths I believe that hypertext and links between texts is the closest we've got to abstracting the way that links and connections in our brains happen and I can't help but see how my brain works as being a series of blobs of stuff with links between them that in two twinkled earnest stuff and of course our hypertext people we take it for granted that the web is a kind of crippled - text system and it lacks some of the characteristics that we think is super important so things like being resilient to link breakages and bi-directional links so I had a funny experience I released that little blow fact the next version that you'll see a slightly improved version of that onto the Internet and in 2004 it went viral in the old sort of world of blogs and delicious and things like that and that was lovely but it was also deeply frustrating because people would rice Versailles to say this is really nice and interesting but it doesn't work and it'll be great when Jeremy fixes it and what they meant was that I'd written it it's a single HTML file because I was interested in exploring the user interface oh dear and I wasn't really interested in making it practical at that point so I put a button a Save button in it and if you can see this when you sew you edit some tiddlers in here and then when you press the Save button this window pops up with the source code that you have just sedative that you can then copy and paste and save somewhere so it's kind of I used that technique to edit tiddlywiki itself to create the documentation but then a fantastic testament of why we should all share our stuff I put this out there and was well for the first thing that happened was really obvious a bunch of people wrote server sides for it and I saw some value in the way that the certified communities are quite tribal you know Ruby people are Ruby people and Python people are Python people but if you write something there's pure client-side then you can have a multiplicity of server sides and you can keep everybody happy by giving them a server side in which they are productive and tiddlywiki is you know the common thread that but the weird thing was that somebody made a Firefox extension there less it save directly to the file system using some API is that I wasn't aware of for accessing the file system from Firefox extensions and then we discovered that the same damn API is actually work in a normal web page if it was loaded on the file URI so this is very forgive all this web development prehistory but what all of this meant was that this absurd little demo suddenly turned into something practical that could be used and it turned out that it's it's properties which are slightly different than most software enabled it to be used in a unexpected and different way so grant hog wise I carried on making it better so took my embarrassing joke and tried my hardest to turn it into you know what I could say in my head that it that it could be and that culminated in BT buying my one-man company ten years ago in order to sort of assimilate some open-source nests in the organization so after I said we'll talk a bit more about telling me keep there's a lot to be said about it I wanted to kind of pull back to what we've learned from it which was the introductory slide though we had so totally wiki's philosophy is now kind of clear to me it was it didn't have a philosophy at the originally because it was so it was kind of a joke but I think these are useful takeaways it's only worth recording information if you're going to reuse it really obvious I mean sometimes it is therapeutic to write stuff that you're never going to read we you know write a letter to your enemy put it under your pillow burn it in the morning that's a lovely thing to do but if you do want to reuse information there's as joe said earlier what we've learned from Sydney work is you cut it up ruthlessly into the smallest semantic unit so everything we thought we knew about making PDFs and making Word documents is all about you know filling up a big blank vessel whereas writing effectively in deadly wiki is trying to find a way to split things up into these chunks so that you can reassemble them into other forms so there's a few more words there I think Joe was attracted by this single-file thing and it does indeed have some bizarre consequences wintered Lee wiki was very young somebody emailed me to say that they were going through a divorce they had a child of two and they were writing all their Tangled thoughts about their divorce in a tiddlywiki and then they went on to talk about how they looked forward to sharing that with their child when the child was grown up and I was blown away by how he'd implicitly realized that the software would still work in 16 years and in fact now it's clear html5 has been something of a success and I think this stuff will still work on my grandchildren's telephones you know quite possibly in a little emulator box the it also has a different sense of self-contained us that the small talk also has that tiddlywiki is written in itself so the entire user interface of tiddlywiki which is all stuff you're used to tabs and buttons and things is all constructed out of wiki text primitives and so what that means is anybody who's using tiddlywiki can recreate something as complicated and rich as tiddlywiki and in the process its equine it's a curiosity of computer science for years has been these programs that print out their own source code and as one of those little corners it can be science if you go digging you'll find people who've made Queens that look like things as well I'm really remarkable but as far as I know tiddlywiki is the only thing that actually relies on being a Quine in order to do its job because when you make a change and save it it recreates its new source code and saves it for you so there's some stuff about how that all feels inside but what it really comes down to is this meta problem faced with the task of building a notebook don't build a notebook build a tool that lets you build notebooks and you know it's that kind of natural pull to the matter and to the general I think software people all have so I did eventually do exactly as Joe predicted after six or seven years I was hideously embarrassed by this sort of old code threw it all away and rewrote it and and in fact it is a great experience and I'm lucky that both the old product and the new product they both have kind of active communities and they're both kind of surviving so it's more like punk rock I mean punk rock didn't actually kill rock and roll rock and roll carried on it you don't have to punk rock came in and that's what tiddlywiki looks like today I'll show you a side at the end with some links and you can dig around but I wanted to just briefly talk about the unexpected effects of this because from a computer science perspective what you see is a piece of software that looks like it does something you're very familiar with you know it looks like MediaWiki but it's got this perversity of being written in a completely different way and you know it doesn't work like the software that you're used to but it turns out that's had a profound impact on the way it's used that probably don't know who's who who knows bash here who has ever typed anything in a terminal so we're all freaks because obviously most people not only if they've never done that but they're also terrified by it a to or to an extent that's not logical when people will go to quite extraordinary lengths to avoid what they see as these scary complicated tasks where they might accidentally break their computer so in fact giving somebody the ability to make stuff without needing all of that machinery is in trend is tremendously empowering and some of the things that you know our complicated build environments with lots of files and git and so and we get as developers some amazing capabilities like I can rewind time I can randomly code and then if it doesn't work I can rewind but if I was a recruitment consultant and I was trying to experiment with a different way of arranging my LinkedIn profile you don't get that same ability to jump back and that's true for what most of ordinary computer users experience but give them a single-file tiddlywiki and they can basically make their own get because if I save a copy of that file and put it over there I know in my own knowledge that it's safe I can work on this file and you know restore the two of them and surprisingly computers are much faster than you think and so you'd think an HTML file in the browser would be a barely practical proposition but I work with hundred megabytes only which is all the time and thanks to you know for years now a ridiculous amount of engineering effort has been directed towards browser performance and so in fact if you're interested in a VM to run on the browser is the most widely available best optimized one of all so here's an example which I think I've got time to show you in person yes very quickly say I like this because this is kind of about business models so here's an American volleyball teacher who has used Sidley wiki to build a system to help them teach volleyball and it's kind of I love it because it's kind of crazy in some ways why are all those things different colors up there and why are these things different colors why does Joe's laptop scroll the wrong way but the thing that's really cool is that they made it themselves so this is somebody who is a PE teacher and not as far as I know a software developer and they were able to construct their own system and there any alternative was to go and find a software developer explain to them what they wanted and get them to build it for them but as we know to explain what you want or to decide what you want is actually equivalent to building the thing in the first place and so under that root he would have been condemned to build the software twice whereas this way using kind of cargo cult techniques where you copy and paste code from other people change it didn't work jump back to the previous version he was able to make this complete system and to me the incredible thing about that is that you know computers have these an astonishing power in our world but that power is reserved for the people who know how to use them or the people who can gain funding to build things like Instagram but you can't really imagine a model where VC money goes into a high school volleyball teaching and yet high school volleyball teaching benefits from software as much as anything else so proposition there is that by making software that works differently you can get into different places than software normally does and I think our job as technologists is to furnish technology for other people so we've got like 10 minutes Joe I'm really sorry to have limited you but now we're going to talk about all the fun stuff we've been coding together for the last three months so how do we reason it could build these wonderful tiddlywiki x' how do we combine them into a big global tiddlywiki how do we make it sort of planetary scale right it's individual scale it's like a typically wiki's like your brain or my brain so how do we what do we do about that so we did some experiments so how can we reuse the content and how can we avoid Groundhog Day right so one of the things I want to do is provenance I should say that a lot of these tiddlywiki hypertech's these are the ideas of Ted Nelson and Ted Nelson was very much into provenance where did stuff come from there's a fundamental fault with editors Providence yes definition the place or origin place of origin or earliest known history of something if you're in an editor if you really imagined you're editing a program in Emacs and you're doing some research and you've got a browser up and you google a bit and you find something that's useful and you cut and paste it from the browser and then you paste it into Emacs and you save it now you've destroyed the information as to where it came from and then you publish a file and you post it into a forum and it gets indexed and somebody takes that content and they cut and paste something you do another document when we're programming we can often spend hours and hours and hours of doing research the result is a program and we publish the program and we throw away all the research so after the event we can't see where everything's come from so one of the ideas we wanted to put into the tiddlywiki and things of provenance where has everything come from can we record it accurate accurately I'm I'm trying to do is implement some of the things in Xanadu which Ted Nelson thought about and wrote down their ideas off in gali when 19 do you know I don't know 1965 right so we don't know where stuff in a file comes from and there's a fault with editors so if anybody wants to write a decent editor that accurately tracks where everything comes from what did you know at the time when you were doing something maybe the idea came right out of my head maybe it didn't what had you been reading before you wrote the text so where does content come from so we want to attribute things we need to maintain intellectual property rights everything how could you do this well we can put them into block chaser not the silly blockchain is that these are lots of energy but just just right append files when things talk to each other we're not going to put all the text in a social tagged it up in some set tags so these all work to do tags and things like that very useful so thinking about experiments of tagging how do we tag things so far we've done a couple of exposure and people tagged things if I write a bit of text I am I might tag it with air long and functional programming doesn't like that and then when I'm searching I don't think I want to find something about a advisor I could but would the tags that you use yeah be the tags that I use well there's no guarantee of that so did a couple of experiments with Bayesian inference so it's in this a lot of tiddlers are tagged we could do it too we could work out the conditional probabilities of you know given given a tag we've got these words in the document just do base an inference on them the first part we learn in the second part we read tag and see how accurately we can predict the tags and the answer is yeah that we works we can if I predict four tags particular I was getting my 85% hit rates on them so it's not so bad pretty good the trouble is those tags would probably chosen for transclusion purposes so they might say a tag to do you know somebody's put a tag on it says it to do because they want to intruded into a to-do list but the real information is milk and cats you know feed by the milk buying the milk might be the thing if I search for tag maybe I should tag it with milk not not to do so in fact although the tagging Bayesian inference is pretty good do you think the tags that were generated were much good then tried tf-idf term frequency times inverse document frequency this is just about the simplest tagging mechanism you think was widely used everywhere it's really quick to implement this the tag said it predicted for the wiki were much worse it didn't predict the human tags but when I was looking at I thought the tags are much better and also because it's a good it's a statistical aggregate over the entire thing maybe it's got a better chance that when you search for something you will use the same tags so do that stuff with the taxes tax I think one things that's really nice about it is it so it makes you reconsider what you wrote and you know in writing like coding we you need to refactor and in order to refactor you need to acquire a new perspective to see how to do so it's the one thing it's not quite working we'd hope to get it working by now this is Jeremy's adding some new buttons and side panels to the tiddlywiki and the idea is as you're composing a wiki in the sidebar the tags would be just updating as you program sorry as you write the wiki as you write the text there'll be a suggestion box I think the tags in this should be solid mailbox to where we can send messages to a no long process get stuff back into the tiddly world took us longer than we thought yeah so we get communicating tiddlywiki x' so we need to put a bolt on earth a front end and then I thought I really actually like this idea of communicating things when I work for Ericsson we had a we built a system actually for trouble reports what happened was that customers would what I didn't I mean sorry when I say we I don't mean me I mean Ericsson collectively not including me the front office got trouble reports and their job was to Ford the trouble report to the back office who would solve the problem and so somebody said well this doesn't work this doesn't matter well it's a problem with the antenna or the power subsystem node forward it off in the back end and we did not weasel research did some experiment sir where they use Bayesian inference looking at the old blood cells to see if they could predict who to send the Mail's to they were very well actually I was as good as the human front office occasionally they sent to the back office and it was wrong and they sent it them back to a human who had reclassified so I thought maybe they do something like this was communicating tiddlywiki x' that oh that we could view a tiddlywiki as a front office with a Bayesian inference thing or a thing that would forward it to Matilde and we would add mailboxes to the tiddlywiki and mail boxes to the tiddler so they could send messages to each other because I think in this way we can get out of this Groundhog Day we can reuse old things by sending messages I think that and the messaging model just says you've got a mail box you know their name of the thing you send in a mail box I want to know about X Y Z and it will sort of send you some answer back so if you want to say I know about X Y said you need an ontology that defines the meaning of words and the ontology is the tagging so we need to understand the meaning of words and we need to define an ontology and that's what we're trying to do the other thing is we could put them all into some huge namespace but I don't think that's going to work real work to start with but it's just too big J starts are trying to collect every tiddlywiki you could find every Tipler in the universe but the trouble is with that the individual tiddlers do not have copyright and reuse indicators in so I've you know I've learned that that you can't reuse you know they've been legal actions where people have been sued by in a tweet and although the probability of this happening is very low if I were to reuse somebody's tiddlywiki or without explicit attribution that I can reuse the content so we need to change the titli's system to make it permissive for legal reasons we don't do that at the moment and then we need mechanisms for table of discovery and tickler similarity once we've made a tippler this unit of reusable information can we find the most similar tickler in the planet what we want to do is reduce entropy we're increasing entropy all the time by writing more and more software what we need to just do is to reduce entropy by discovering that two things are similar and collapsing it into a smaller space to make it more understandable so we're trying to address these problems and we have some ongoing experiments adding an airline like mailbox model for communicating kiddley Ricky's analyzing all known tiddly wiki's and doing tag inference and I think that's struck me recently that's what I call focus of attention that when you're writing something you suddenly think of something else and you wanted to sort of do that then go back and when you're writing something on screen I want an assistant that's in the side not you know sort of giving me additionally helping me write giving me additional information at the moment you're in one window like that and you want something Oh search over there it's in the way I've lost where I came from I can't remember how I got there well this seamless way of providing me with information so we both had the experience where we've done the same piece of work twice because we'd forgotten about doing it the first time so leads to the dream of being nudged and what I'm also trying to do is do a sort of clean room tiddlywiki that's got the essential features of so I'm building my own eyes Groundhog Day over and over again with Jeremy with Jeremy's help and encouragement so here I am hacking a load of JavaScript and having great fun and then we'll put an airline like messaging model onto it because the thing is in Erlang what you think we know how to connect planetary scale messaging when as easy you've done that but now that we've got planetary scale communication what do we use it for well try to combine these little city rules of knowledge so that's it and how long have I got no I put it on the web but if you want to see what we were doing Jeremy Lin comm slash into twinkled no connection but you will have an advanced nation - that's right you have time for questions I'm afraid not so strict zero oh dear any thanks Jeremy and Jeff [Applause] you"
      },
      "date": 1712069598327
    },
    {
      "type": "edit",
      "id": "5b27d2558990897a",
      "item": {
        "type": "paragraph",
        "id": "5b27d2558990897a",
        "text": "for many years I've been a great admirer of Jeremy's Ruston's work on the tiddlywiki and I'd we'd never met so what a nice way to meet would be to do a talk at a conference where we would have to collaborate and so and it's been really fun that's what we did"
      },
      "date": 1712069646004
    },
    {
      "type": "add",
      "id": "5b50530bbae1266d",
      "item": {
        "type": "paragraph",
        "id": "5b50530bbae1266d",
        "text": "and have to start with the obligatory question so how many how many people in the audience know what Erlang is or Alexia reviews - anything like that right so how many know what the tiddlywiki is and have used that and how many know how many people know what into twinkled is and how many people know what the intersection of airline the tiddlywiki and into twinkled is notice we didn't put our hands oh we don't know either so this is a way to make a popular lecture you take three niche subjects and you take the Venn diagram where they intersect and of course you will get a massive audience who wants to learn about this so it's very strange that there's more than one person or two people in the audience or three people so the plan of this is to talk about into twing wilderness and tell you what it is and then what I want to do though I want to avoid Groundhog Day I'll explain more groundhog days and I want to talk about making complex things and and the joy of all in oneness all in oneness is a beautiful concept and then the tiddlywiki will talk about the correct level of granularity and how everything is deeply into twinkled and then we'll talk about some experiments we've been doing so we'll start with Ted Nelson and a quote from his book computer dim dream machines everybody should read everything that Ted Nelson had ever written in particular watching youtube videos a computer's guide for cynics it's very good so Ted Nelson and coined the word hypertext and he coined the word micropayments and he coined the word into twinkled and he said that everything is deeply into twinkled there are no subjects all there is this knowledge cross-connected in very complicated ways and he said hierarchical and secret sequential structures especially popular since Gutenberg are usually forced an artificial into twinkle arity is not generally acknowledged if we try and build things into hierarchies they will always fail and in fact we get are like a bird's nest soup of links which actually represents reality so how can we represent things so I the central problem that I have been trying to solve for the last 30 or 40 years is how to organize ideas and software that's the central problem how can you find stuff and Jeremy's been working on the same stuff for many years so that's really good anybody know who this is it's it's the movie Groundhog Day so unfortunately we follow the the software model of Groundhog Day development we invent something simple we add more features we have features and more features and more features and more features and it gets so complicated then nobody can use it and so we throw it away and start again and that is the dominant model of software development that we use so in fact software is a form of Buddhism where we go through a cycle of suffering a cycle of life death and rebirth without a beginning or end so can we do anything about that right so we've built all this complicated stuff and we get to the end of our cycle and we want to rewrite it so but but then that's difficult because we don't want to throw away the good stuff that we've got in that process so how can we reuse that stuff without making it more complicated well we could throw it all away and start again we miss the good stuff if you do that you could stick it in a container and use a defined interface docker and things like oh that's great but that one day that will become very complicated they'll have to put the container in the container and one day that will become more complicated and you put that in the container so one day an operating system will be very very big one day a program like keno will be a hundred and forty megabytes and you wonder how is it that an operating system was less than one megabyte or less than 640 kilobytes and we're 20 years ago what or we could add a messaging interface between complex things and this is how we work we have complex models in our brain and we talk to each other we don't understand how our models work and that doesn't worry so we get to communicating sequential complex things this is like CSP with no maths and know how to breath and we add mailboxes to complex things and we had protocols I now want to talk about all in oneness so all in oneness is the property of a program where all the code and all the data's in a single container if you have programs and data then circumstances will happen whether to move and they don't know about each other so for example keynote there's a well-known practice i've actually used to do this talk with them and it consists of two things that consist of a program that my apple have produced and a data file that's got the talk in and these two things should always work together so when we were preparing this talk Jeremy no I were fired were mailing backwards and forward a keynote file and so Jeremy had keynote version n and mailed me a file called talk keynote by email I had started off with n minus one and he emailed it to me and I got but Jeremy had updated his version of keynote without me knowing permission without permission and this very strange thing time to update to open this presentation you need the latest version of P note not now and I couldn't read those slides are lost don't they write a lot we could never read them against actually go to app store now the very funny thing happens is the app store yes you can upgrade the version of keynote but wait a moment you also have to update the version of the operating system as well now updating an operating see the very dangerous operation because of at least 5% of all the programs I have won't work anymore if I update the operating system for I'm very reluctant to do this I don't want to do this they're probably all in oneness with where you combine the data and the program so that they can never be isolated from each other right so it's it's actually the opposite of using dependencies it's very slow and difficult to write it increases your understanding but it increases the ability of that program to work in the future so I've got a I don't I think there later in the sawsan a couple of examples is a small token majeure in the book on into twinkle Dennis Alan Kay writes a chapter about discovering an early pile of disks and he plugs in a disk and he finds a small talk from I think 1968 puts it in his machine and there we are back in 1968 this program works exactly as in 1968 because the small took image and the assumptions it makes about the operating system are such that we can still run that and that's the same as Jeremy's tiddlywiki tiddlywiki which Jeremy will talk a lot about and show you combines the program which is in JavaScript and all the data and so we can run all the early versions exactly as they were how many years ago 15 years ago yeah so there are five steps to all in oneness oh well this is yes okay so none of you have ever done this well let's let's do a simple programming problem we're gonna write a program that displays a nice button in the browser now how difficult can that be right link really cool style feed stack bootstraps something stuck bootstrap min button class BT and danger button there and you get a nice has anybody know I would never do that would you do that would you include 200 kilobytes of cascading style sheets are compressed to get a single button that's nice if anybody done that yeah is it good do you have a bad conscience about this right and we ever we haven't put any JavaScript in yet this is tough the button hey suppose you want the button from one cascading style sheet thing and from another one that's why you're up in a megabyte before we've done anything right that's not future proof wait a moment the CDN will break in 10 years time or in a thousand years time there won't be a CDN and your program will stop working so here's this amazing you haven't changed your program but somebody else has changed something and it's broken there's not a future proof it's undone 41 kilobytes a CSS it won't work offline what is the advantage first time to market that's the only advantage right I'd never do that right it's a security nightmare it's horrible it is it's daft so what can you do make a local copy of the CDN yeah it's not future-proof because they if you sort of mail your HTML program to somebody you forget to mail the local cache copy it'll break or if in the future you rearrange your file system it'll break not good you can work offline you can do it on the plane on the way over because you don't need the CDN to be online right you could move all the CCS into the into the HTML file now it's actually all-in-one so that is future proof you can move the file so you won't break anything but it's huge and horrible that's not really elegant so you can cut and paste the stuff from the download into your program yeah have you actually broken the copy right at this stage hmm yeah maybe so maybe you've got to put the the copy I've broken any patents or so might be a bit worried about that okay it's actually very future proofing so you can understand it it's small but you might have broken somebody's copyrights have a better rewrite it and extract the essential goodness do I really want WebKit user select nan and I don't know I've noticed if you remove all these WebKit things and just put the thing it all works anyway so I've never really do you understand the difference I do you it stops you being able to select the text on the button which is annoying so then you rename things and you think well I'm probably this is now a derived work so you're probably free of any copyright problems perhaps you should put I would like to my sincere thanks bootstrap for coming up with this brilliant idea right so do you really want n megabytes of in comprehensible stuff in your application in order to use point over 1% of the code oh well doing that we can forget about build systems because we're not using dependencies and we can forget about webpack and gruntin bow I have no idea what these things are but apparently you need to grunt you need grunt files and things to make these work I don't know what they are I do understand JavaScript and things like that so we get this idea of all in oneness we put everything into one and here's small token tiddlywiki so here's the tiddlywiki tiddlywiki it's small grain knowledge the whole idea is to make small bits of knowledge that are reusable if you think about it characters the letters of the alphabet are very reusable the characters ABCD we reuse them all the time but the granularity of what we reuse is useless big PDF files are not reusable the unit of reusability probably about a single paragraph or two paragraphs where we don't change the subject so basically we want to construct things out of one or two paragraphs where we do not change subject and that gives us the granularity of something that we can reuse right so I've played with the tiddlywiki for many years off and on and I was playing with it recently well recently when we started this and I had my Alleluia moment you know the road to Damascus where you are struck by enlightenment and it was I was going to write a to-do list in the tiddlywiki him and I was just doing it like you always write a to-do list I I made a single page and I made a single tiddler called to do what else would you call it I put the things in that you want to do you want to water the cats feed the plants and buy some milk and suddenly like a this is a flash of lightning hit me you can't reuse this stuff well you could you could say here's here's a list of to dues but suddenly is the Eureka moment came and I said why don't I am one and I make three toddlers one cold water the cat's another called feed the plants or something oh here a little house by the milk I haven't got the third one and then the to-do list becomes a transclusion with some logic in almost like Prolog or something like that it's the to-do list says list links with the tag to do there's like a find or just find all everything that's got this tag and make me a page out of it now I've got something that's reusable these these are reusable they can be included in different things this is a simplest form I've got a single tag here to do I could add another tag done and then I could list all to do but not done and do things like that so I can compose things so now we have Jeremy so so what's Jeremy Jeremy is the human garbage collector I wondered what that meant as well well because this process I showed you of taking 200 kilobytes of CSS and finding the essential stuff that does it pulling it out and putting it into its thing that's the human garbage collectors job and it's incredibly difficult it takes an incredibly long time and the results are incredibly they are incredible so Jeremy's made these titli wikis they've evolved over time and we can look at them and we could see how they behave so I'm going to look at that for a bit and Jeremy gosh we're under press right thank you very much Joe and I'd just like to add Joe saying about dependencies something I often find is developers will say well nod wisely to the kind of remarks we've been saying and say yes you should really try and reduce the number of dependences but I think what we're really guessing out is that if you reduce the number of dependences to zero something completely different happens and a whole load of concerns that you have even with a single dependency vanish and that frees you up in a way that is maybe counterintuitive because so much of what we do is these tools that are themselves into twinkled so yeah it's a big deal and I'm pleased that J has recognized it so tiddlywiki started by accident and you can tell that because I gave it a ludicrous name which is so ludicrous it actually actively quite annoys some people so to blame whether it was the twiddly wiki and I was interested in this idea of making a wiki that instead of being four full pages instead of a wiki for Word documents a wiki for little items of content and it was triggered by seeing Gmail so Gmail in 2004 is kind of new to see emails threaded together and it was amazing because previous crappy web-based email in a huge control click to open multiple emails and multiple tabs or similarly if you've ever refactored MediaWiki or something a canonical refactoring in a wiki is to take a page and split it into two will join two pages together and a media wiki you have to open those two pages in different tabs and then sort of juggle between them so Tinley wiki was trying to take a new look at that and thrown together few hundred lines of JavaScript HTML and CSS and this is the that very first version 200 lines so this is a primordial tiddler the idea of a fragment of text that has a title has got some metadata in this case it was me and some text and the text has links in it and if I click on a link then it retrieves the subject and the link so you can see as I click on links I'm kind of unfolding my own version of the story made out of fragments that take my interest by following the links and and that was all this it was at this stage and if we go back to keynote more opportunities for technology to go wrong you might say what's so wonderful about wiki's and I've discovered that obviously most people think of the distinguishing features of wikis being the fact that anybody can edit them and that obviously is the kind of surprising thing that's emerged from Wikipedia and so on but to me the interesting interesting thing was always that they made linking be part of the punctuation of writing and this is where our shared interest in Ted Nelson comes and that Ted Nelson's well I shouldn't put words in other people's mouths I believe that hypertext and links between texts is the closest we've got to abstracting the way that links and connections in our brains happen and I can't help but see how my brain works as being a series of blobs of stuff with links between them that in two twinkled earnest stuff and of course our hypertext people we take it for granted that the web is a kind of crippled - text system and it lacks some of the characteristics that we think is super important so things like being resilient to link breakages and bi-directional links so I had a funny experience I released that little blow fact the next version that you'll see a slightly improved version of that onto the Internet and in 2004 it went viral in the old sort of world of blogs and delicious and things like that and that was lovely but it was also deeply frustrating because people would rice Versailles to say this is really nice and interesting but it doesn't work and it'll be great when Jeremy fixes it and what they meant was that I'd written it it's a single HTML file because I was interested in exploring the user interface oh dear and I wasn't really interested in making it practical at that point so I put a button a Save button in it and if you can see this when you sew you edit some tiddlers in here and then when you press the Save button this window pops up with the source code that you have just sedative that you can then copy and paste and save somewhere so it's kind of I used that technique to edit tiddlywiki itself to create the documentation but then a fantastic testament of why we should all share our stuff I put this out there and was well for the first thing that happened was really obvious a bunch of people wrote server sides for it and I saw some value in the way that the certified communities are quite tribal you know Ruby people are Ruby people and Python people are Python people but if you write something there's pure client-side then you can have a multiplicity of server sides and you can keep everybody happy by giving them a server side in which they are productive and tiddlywiki is you know the common thread that but the weird thing was that somebody made a Firefox extension there less it save directly to the file system using some API is that I wasn't aware of for accessing the file system from Firefox extensions and then we discovered that the same damn API is actually work in a normal web page if it was loaded on the file URI so this is very forgive all this web development prehistory but what all of this meant was that this absurd little demo suddenly turned into something practical that could be used and it turned out that it's it's properties which are slightly different than most software enabled it to be used in a unexpected and different way so grant hog wise I carried on making it better so took my embarrassing joke and tried my hardest to turn it into you know what I could say in my head that it that it could be and that culminated in BT buying my one-man company ten years ago in order to sort of assimilate some open-source nests in the organization so after I said we'll talk a bit more about telling me keep there's a lot to be said about it I wanted to kind of pull back to what we've learned from it which was the introductory slide though we had so totally wiki's philosophy is now kind of clear to me it was it didn't have a philosophy at the originally because it was so it was kind of a joke but I think these are useful takeaways it's only worth recording information if you're going to reuse it really obvious I mean sometimes it is therapeutic to write stuff that you're never going to read we you know write a letter to your enemy put it under your pillow burn it in the morning that's a lovely thing to do but if you do want to reuse information there's as joe said earlier what we've learned from Sydney work is you cut it up ruthlessly into the smallest semantic unit so everything we thought we knew about making PDFs and making Word documents is all about you know filling up a big blank vessel whereas writing effectively in deadly wiki is trying to find a way to split things up into these chunks so that you can reassemble them into other forms so there's a few more words there I think Joe was attracted by this single-file thing and it does indeed have some bizarre consequences wintered Lee wiki was very young somebody emailed me to say that they were going through a divorce they had a child of two and they were writing all their Tangled thoughts about their divorce in a tiddlywiki and then they went on to talk about how they looked forward to sharing that with their child when the child was grown up and I was blown away by how he'd implicitly realized that the software would still work in 16 years and in fact now it's clear html5 has been something of a success and I think this stuff will still work on my grandchildren's telephones you know quite possibly in a little emulator box the it also has a different sense of self-contained us that the small talk also has that tiddlywiki is written in itself so the entire user interface of tiddlywiki which is all stuff you're used to tabs and buttons and things is all constructed out of wiki text primitives and so what that means is anybody who's using tiddlywiki can recreate something as complicated and rich as tiddlywiki and in the process its equine it's a curiosity of computer science for years has been these programs that print out their own source code and as one of those little corners it can be science if you go digging you'll find people who've made Queens that look like things as well I'm really remarkable but as far as I know tiddlywiki is the only thing that actually relies on being a Quine in order to do its job because when you make a change and save it it recreates its new source code and saves it for you so there's some stuff about how that all feels inside but what it really comes down to is this meta problem faced with the task of building a notebook don't build a notebook build a tool that lets you build notebooks and you know it's that kind of natural pull to the matter and to the general I think software people all have so I did eventually do exactly as Joe predicted after six or seven years I was hideously embarrassed by this sort of old code threw it all away and rewrote it and and in fact it is a great experience and I'm lucky that both the old product and the new product they both have kind of active communities and they're both kind of surviving so it's more like punk rock I mean punk rock didn't actually kill rock and roll rock and roll carried on it you don't have to punk rock came in and that's what tiddlywiki looks like today I'll show you a side at the end with some links and you can dig around but I wanted to just briefly talk about the unexpected effects of this because from a computer science perspective what you see is a piece of software that looks like it does something you're very familiar with you know it looks like MediaWiki but it's got this perversity of being written in a completely different way and you know it doesn't work like the software that you're used to but it turns out that's had a profound impact on the way it's used that probably don't know who's who who knows bash here who has ever typed anything in a terminal so we're all freaks because obviously most people not only if they've never done that but they're also terrified by it a to or to an extent that's not logical when people will go to quite extraordinary lengths to avoid what they see as these scary complicated tasks where they might accidentally break their computer so in fact giving somebody the ability to make stuff without needing all of that machinery is in trend is tremendously empowering and some of the things that you know our complicated build environments with lots of files and git and so and we get as developers some amazing capabilities like I can rewind time I can randomly code and then if it doesn't work I can rewind but if I was a recruitment consultant and I was trying to experiment with a different way of arranging my LinkedIn profile you don't get that same ability to jump back and that's true for what most of ordinary computer users experience but give them a single-file tiddlywiki and they can basically make their own get because if I save a copy of that file and put it over there I know in my own knowledge that it's safe I can work on this file and you know restore the two of them and surprisingly computers are much faster than you think and so you'd think an HTML file in the browser would be a barely practical proposition but I work with hundred megabytes only which is all the time and thanks to you know for years now a ridiculous amount of engineering effort has been directed towards browser performance and so in fact if you're interested in a VM to run on the browser is the most widely available best optimized one of all so here's an example which I think I've got time to show you in person yes very quickly say I like this because this is kind of about business models so here's an American volleyball teacher who has used Sidley wiki to build a system to help them teach volleyball and it's kind of I love it because it's kind of crazy in some ways why are all those things different colors up there and why are these things different colors why does Joe's laptop scroll the wrong way but the thing that's really cool is that they made it themselves so this is somebody who is a PE teacher and not as far as I know a software developer and they were able to construct their own system and there any alternative was to go and find a software developer explain to them what they wanted and get them to build it for them but as we know to explain what you want or to decide what you want is actually equivalent to building the thing in the first place and so under that root he would have been condemned to build the software twice whereas this way using kind of cargo cult techniques where you copy and paste code from other people change it didn't work jump back to the previous version he was able to make this complete system and to me the incredible thing about that is that you know computers have these an astonishing power in our world but that power is reserved for the people who know how to use them or the people who can gain funding to build things like Instagram but you can't really imagine a model where VC money goes into a high school volleyball teaching and yet high school volleyball teaching benefits from software as much as anything else so proposition there is that by making software that works differently you can get into different places than software normally does and I think our job as technologists is to furnish technology for other people so we've got like 10 minutes Joe I'm really sorry to have limited you but now we're going to talk about all the fun stuff we've been coding together for the last three months so how do we reason it could build these wonderful tiddlywiki x' how do we combine them into a big global tiddlywiki how do we make it sort of planetary scale right it's individual scale it's like a typically wiki's like your brain or my brain so how do we what do we do about that so we did some experiments so how can we reuse the content and how can we avoid Groundhog Day right so one of the things I want to do is provenance I should say that a lot of these tiddlywiki hypertech's these are the ideas of Ted Nelson and Ted Nelson was very much into provenance where did stuff come from there's a fundamental fault with editors Providence yes definition the place or origin place of origin or earliest known history of something if you're in an editor if you really imagined you're editing a program in Emacs and you're doing some research and you've got a browser up and you google a bit and you find something that's useful and you cut and paste it from the browser and then you paste it into Emacs and you save it now you've destroyed the information as to where it came from and then you publish a file and you post it into a forum and it gets indexed and somebody takes that content and they cut and paste something you do another document when we're programming we can often spend hours and hours and hours of doing research the result is a program and we publish the program and we throw away all the research so after the event we can't see where everything's come from so one of the ideas we wanted to put into the tiddlywiki and things of provenance where has everything come from can we record it accurate accurately I'm I'm trying to do is implement some of the things in Xanadu which Ted Nelson thought about and wrote down their ideas off in gali when 19 do you know I don't know 1965 right so we don't know where stuff in a file comes from and there's a fault with editors so if anybody wants to write a decent editor that accurately tracks where everything comes from what did you know at the time when you were doing something maybe the idea came right out of my head maybe it didn't what had you been reading before you wrote the text so where does content come from so we want to attribute things we need to maintain intellectual property rights everything how could you do this well we can put them into block chaser not the silly blockchain is that these are lots of energy but just just right append files when things talk to each other we're not going to put all the text in a social tagged it up in some set tags so these all work to do tags and things like that very useful so thinking about experiments of tagging how do we tag things so far we've done a couple of exposure and people tagged things if I write a bit of text I am I might tag it with air long and functional programming doesn't like that and then when I'm searching I don't think I want to find something about a advisor I could but would the tags that you use yeah be the tags that I use well there's no guarantee of that so did a couple of experiments with Bayesian inference so it's in this a lot of tiddlers are tagged we could do it too we could work out the conditional probabilities of you know given given a tag we've got these words in the document just do base an inference on them the first part we learn in the second part we read tag and see how accurately we can predict the tags and the answer is yeah that we works we can if I predict four tags particular I was getting my 85% hit rates on them so it's not so bad pretty good the trouble is those tags would probably chosen for transclusion purposes so they might say a tag to do you know somebody's put a tag on it says it to do because they want to intruded into a to-do list but the real information is milk and cats you know feed by the milk buying the milk might be the thing if I search for tag maybe I should tag it with milk not not to do so in fact although the tagging Bayesian inference is pretty good do you think the tags that were generated were much good then tried tf-idf term frequency times inverse document frequency this is just about the simplest tagging mechanism you think was widely used everywhere it's really quick to implement this the tag said it predicted for the wiki were much worse it didn't predict the human tags but when I was looking at I thought the tags are much better and also because it's a good it's a statistical aggregate over the entire thing maybe it's got a better chance that when you search for something you will use the same tags so do that stuff with the taxes tax I think one things that's really nice about it is it so it makes you reconsider what you wrote and you know in writing like coding we you need to refactor and in order to refactor you need to acquire a new perspective to see how to do so it's the one thing it's not quite working we'd hope to get it working by now this is Jeremy's adding some new buttons and side panels to the tiddlywiki and the idea is as you're composing a wiki in the sidebar the tags would be just updating as you program sorry as you write the wiki as you write the text there'll be a suggestion box I think the tags in this should be solid mailbox to where we can send messages to a no long process get stuff back into the tiddly world took us longer than we thought yeah so we get communicating tiddlywiki x' so we need to put a bolt on earth a front end and then I thought I really actually like this idea of communicating things when I work for Ericsson we had a we built a system actually for trouble reports what happened was that customers would what I didn't I mean sorry when I say we I don't mean me I mean Ericsson collectively not including me the front office got trouble reports and their job was to Ford the trouble report to the back office who would solve the problem and so somebody said well this doesn't work this doesn't matter well it's a problem with the antenna or the power subsystem node forward it off in the back end and we did not weasel research did some experiment sir where they use Bayesian inference looking at the old blood cells to see if they could predict who to send the Mail's to they were very well actually I was as good as the human front office occasionally they sent to the back office and it was wrong and they sent it them back to a human who had reclassified so I thought maybe they do something like this was communicating tiddlywiki x' that oh that we could view a tiddlywiki as a front office with a Bayesian inference thing or a thing that would forward it to Matilde and we would add mailboxes to the tiddlywiki and mail boxes to the tiddler so they could send messages to each other because I think in this way we can get out of this Groundhog Day we can reuse old things by sending messages I think that and the messaging model just says you've got a mail box you know their name of the thing you send in a mail box I want to know about X Y Z and it will sort of send you some answer back so if you want to say I know about X Y said you need an ontology that defines the meaning of words and the ontology is the tagging so we need to understand the meaning of words and we need to define an ontology and that's what we're trying to do the other thing is we could put them all into some huge namespace but I don't think that's going to work real work to start with but it's just too big J starts are trying to collect every tiddlywiki you could find every Tipler in the universe but the trouble is with that the individual tiddlers do not have copyright and reuse indicators in so I've you know I've learned that that you can't reuse you know they've been legal actions where people have been sued by in a tweet and although the probability of this happening is very low if I were to reuse somebody's tiddlywiki or without explicit attribution that I can reuse the content so we need to change the titli's system to make it permissive for legal reasons we don't do that at the moment and then we need mechanisms for table of discovery and tickler similarity once we've made a tippler this unit of reusable information can we find the most similar tickler in the planet what we want to do is reduce entropy we're increasing entropy all the time by writing more and more software what we need to just do is to reduce entropy by discovering that two things are similar and collapsing it into a smaller space to make it more understandable so we're trying to address these problems and we have some ongoing experiments adding an airline like mailbox model for communicating kiddley Ricky's analyzing all known tiddly wiki's and doing tag inference and I think that's struck me recently that's what I call focus of attention that when you're writing something you suddenly think of something else and you wanted to sort of do that then go back and when you're writing something on screen I want an assistant that's in the side not you know sort of giving me additionally helping me write giving me additional information at the moment you're in one window like that and you want something Oh search over there it's in the way I've lost where I came from I can't remember how I got there well this seamless way of providing me with information so we both had the experience where we've done the same piece of work twice because we'd forgotten about doing it the first time so leads to the dream of being nudged and what I'm also trying to do is do a sort of clean room tiddlywiki that's got the essential features of so I'm building my own eyes Groundhog Day over and over again with Jeremy with Jeremy's help and encouragement so here I am hacking a load of JavaScript and having great fun and then we'll put an airline like messaging model onto it because the thing is in Erlang what you think we know how to connect planetary scale messaging when as easy you've done that but now that we've got planetary scale communication what do we use it for well try to combine these little city rules of knowledge so that's it and how long have I got no I put it on the web but if you want to see what we were doing Jeremy Lin comm slash into twinkled no connection but you will have an advanced nation - that's right you have time for questions I'm afraid not so strict zero oh dear any thanks Jeremy and Jeff [Applause] you"
      },
      "after": "5b27d2558990897a",
      "date": 1712069652969
    }
  ]
}