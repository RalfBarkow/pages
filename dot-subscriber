{
  "title": "DOT Subscriber",
  "story": [
    {
      "id": "78ad8000",
      "type": "paragraph",
      "text": "This experiment might support [[Exploratory Parsing in Frames]]. See also [[DOT Publisher]]."
    },
    {
      "id": "1772e000",
      "type": "frame",
      "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nLINEUP dot\nSOURCE dotLabelClick"
    },
    {
      "id": "19ff8000",
      "type": "paragraph",
      "text": "Import GraphvizViewer, and one Observable function."
    },
    {
      "id": "79f20000",
      "type": "code",
      "text": "import * as GraphvizViewer from \"https://wiki.dbbs.co/plugins/graphviz/graphviz-viewer.js\";\nimport {observe} from \"https://cdn.jsdelivr.net/npm/@observablehq/stdlib@5.8.6/src/generators/index.js\";\nimport {html} from 'https://cdn.jsdelivr.net/npm/htl@0.3.1/src/index.js';"
    },
    {
      "id": "2e504000",
      "type": "paragraph",
      "text": "Subscribe to dotStream events."
    },
    {
      "id": "4df90000",
      "type": "code",
      "text": "const dotStream = observe(function(change) {\n  function filterForDotStream(message) {\n    if (message.data?.action == \"dotStream\") {\n      change(message.data);\n    }\n  }\n  window.addEventListener('message',\n    filterForDotStream);\n  return function() {\n    window.removeEventListener('message',\n      filterForDotStream);\n  };\n});\n"
    },
    {
      "type": "paragraph",
      "id": "2c922490e2ce7136",
      "text": "Define a click handler that understands Graphviz SVG and publishes details about the clicks back to the lineup."
    },
    {
      "type": "code",
      "id": "8c1822479e160aa3",
      "text": "function click(event) {\n  const {dotData} = event.target.parentElement;\n  console.log({\n    target: event.target,\n    parentElement: event.target.parentElement,\n    dotData,\n    event\n  });\n  const node = event.originalTarget.closest('.node');\n  const edge = event.originalTarget.closest('.edge');\n  const parent = node||edge;\n  if (parent) { // ignore other clicks\n    const title = parent.querySelector('title')\n      ?.textContent;\n    const label = parent.querySelector('text')\n      ?.textContent;\n    window.parent.postMessage({\n      action: 'publishSourceData',\n      name: 'dotLabelClick',\n      sourceData: {label, title, ids:{\n        pageKey: dotData.pageKey,\n        itemId: dotData.itemId\n      }}\n    }, '*');\n  }\n}"
    },
    {
      "id": "48995000",
      "type": "paragraph",
      "text": "Trigger a redraw for each event."
    },
    {
      "id": "199a5000",
      "type": "code",
      "text": "export async function bind(el) {\n  el.addEventListener('click', click);\n  for await (const data of dotStream) {\n    const {dot} = data;\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    el.dotData = structuredClone(data);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "DOT Subscriber",
        "story": [
          {
            "id": "78ad8000",
            "type": "paragraph",
            "text": "This experiment might support [[Exploratory Parsing]]."
          },
          {
            "id": "1772e000",
            "type": "paragraph",
            "text": "...frame"
          },
          {
            "id": "19ff8000",
            "type": "paragraph",
            "text": "Import GraphvizViewer"
          },
          {
            "id": "79f20000",
            "type": "paragraph",
            "text": "...code"
          },
          {
            "id": "2e504000",
            "type": "paragraph",
            "text": "Subscribe to dotStream events & trigger a redraw."
          },
          {
            "id": "4df90000",
            "type": "paragraph",
            "text": "...code"
          },
          {
            "id": "48995000",
            "type": "paragraph",
            "text": "Add everything to the DOM."
          },
          {
            "id": "199a5000",
            "type": "paragraph",
            "text": "...code"
          }
        ]
      },
      "date": 1710521957199
    },
    {
      "type": "fork",
      "date": 1710521983099
    },
    {
      "type": "edit",
      "id": "1772e000",
      "item": {
        "id": "1772e000",
        "type": "factory",
        "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html?mode=subscribe\nLINEUP dot"
      },
      "date": 1710522013294
    },
    {
      "type": "edit",
      "id": "1772e000",
      "item": {
        "id": "1772e000",
        "type": "frame",
        "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nLINEUP dot"
      },
      "date": 1710522020598
    },
    {
      "type": "edit",
      "id": "79f20000",
      "item": {
        "id": "79f20000",
        "type": "code",
        "text": "import * as GraphvizViewer from \"https://wiki.dbbs.co/plugins/graphviz/graphviz-viewer.js\";\n"
      },
      "date": 1710522050678
    },
    {
      "type": "edit",
      "id": "19ff8000",
      "item": {
        "id": "19ff8000",
        "type": "paragraph",
        "text": "Import GraphvizViewer, and one Observable function."
      },
      "date": 1710522071236
    },
    {
      "type": "edit",
      "id": "79f20000",
      "item": {
        "id": "79f20000",
        "type": "code",
        "text": "import * as GraphvizViewer from \"https://wiki.dbbs.co/plugins/graphviz/graphviz-viewer.js\";\nimport {observe} from \"https://cdn.jsdelivr.net/npm/@observablehq/stdlib@5.8.6/src/generators/index.js\";"
      },
      "date": 1710522083196
    },
    {
      "type": "edit",
      "id": "4df90000",
      "item": {
        "id": "4df90000",
        "type": "code",
        "text": "const dotStream = observe(function(change) {\n  function received(message) {\n    if (message.data\n        && message.data.action\n        && message.data.action == \"dotStream\") {\n      const {dot} = message.data;\n      change(dot);\n    }\n  }\n  window.addEventListener('message', received);\n  return function() {\n    window.removeEventListener(event, received);\n  };\n});\n"
      },
      "date": 1710522289163
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  for await (let dot of dotStream) {\n    el.innerHTML = `<graphviz-viewer>${dot}</graphviz-viewer>`;\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710522519107
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "/*\nexport async function bind(el) {\n  for await (let dot of dotStream) {\n    el.innerHTML = `<graphviz-viewer>${dot}</graphviz-viewer>`;\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n*/"
      },
      "date": 1710522610238
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  for await (let dot of dotStream) {\n    el.innerHTML = `<graphviz-viewer>${dot}</graphviz-viewer>`;\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710522675343
    },
    {
      "type": "edit",
      "id": "4df90000",
      "item": {
        "id": "4df90000",
        "type": "code",
        "text": "console.log({observe});\nconst dotStream = observe(function(change) {\n  function received(message) {\n    if (message.data\n        && message.data.action\n        && message.data.action == \"dotStream\") {\n      const {dot} = message.data;\n      change(dot);\n    }\n  }\n  window.addEventListener('message', received);\n  return function() {\n    window.removeEventListener(event, received);\n  };\n});\n"
      },
      "date": 1710522689952
    },
    {
      "type": "edit",
      "id": "48995000",
      "item": {
        "id": "48995000",
        "type": "paragraph",
        "text": "Trigger a redraw for each event."
      },
      "date": 1710522814109
    },
    {
      "type": "edit",
      "id": "2e504000",
      "item": {
        "id": "2e504000",
        "type": "paragraph",
        "text": "Subscribe to dotStream events."
      },
      "date": 1710522820606
    },
    {
      "type": "edit",
      "id": "4df90000",
      "item": {
        "id": "4df90000",
        "type": "code",
        "text": "console.log({observe});\nconst dotStream = observe(function(change) {\n  function filterForDotStream(message) {\n    if (message.data\n        && message.data.action\n        && message.data.action == \"dotStream\") {\n      const {dot} = message.data;\n      change(dot);\n    }\n  }\n  window.addEventListener('message',\n    filterForDotStream);\n  return function() {\n    window.removeEventListener('message'\n      filterForDotStream);\n  };\n});\n"
      },
      "date": 1710523047303
    },
    {
      "type": "edit",
      "id": "4df90000",
      "item": {
        "id": "4df90000",
        "type": "code",
        "text": "console.log({observe});\nconst dotStream = observe(function(change) {\n  function filterForDotStream(message) {\n    if (message.data\n        && message.data.action\n        && message.data.action == \"dotStream\") {\n      const {dot} = message.data;\n      change(dot);\n    }\n  }\n  window.addEventListener('message',\n    filterForDotStream);\n  return function() {\n    window.removeEventListener('message',\n      filterForDotStream);\n  };\n});\n"
      },
      "date": 1710523113971
    },
    {
      "type": "edit",
      "id": "4df90000",
      "item": {
        "id": "4df90000",
        "type": "code",
        "text": "const dotStream = observe(function(change) {\n  function filterForDotStream(message) {\n    if (message.data\n        && message.data.action\n        && message.data.action == \"dotStream\") {\n      const {dot} = message.data;\n      change(dot);\n    }\n  }\n  window.addEventListener('message',\n    filterForDotStream);\n  return function() {\n    window.removeEventListener('message',\n      filterForDotStream);\n  };\n});\n"
      },
      "date": 1710523867693
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  for await (let dot of dotStream) {\n    let graph = document\n      .createElement('graphviz-viewer');\n    graph.innerText = dot;\n    el.append(graph);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710524268504
    },
    {
      "type": "edit",
      "id": "79f20000",
      "item": {
        "id": "79f20000",
        "type": "code",
        "text": "import * as GraphvizViewer from \"https://wiki.dbbs.co/plugins/graphviz/graphviz-viewer.js\";\nimport {observe} from \"https://cdn.jsdelivr.net/npm/@observablehq/stdlib@5.8.6/src/generators/index.js\";\nimport htl from 'https://cdn.jsdelivr.net/npm/htl@0.3.1/+esm';"
      },
      "date": 1710524465858
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  for await (let dot of dotStream) {\n    el.append(htl.html`<graphviz-viewer>${dot}`);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710524513906
    },
    {
      "type": "edit",
      "id": "4df90000",
      "item": {
        "id": "4df90000",
        "type": "code",
        "text": "console.log({htl});\nconst dotStream = observe(function(change) {\n  function filterForDotStream(message) {\n    if (message.data\n        && message.data.action\n        && message.data.action == \"dotStream\") {\n      const {dot} = message.data;\n      change(dot);\n    }\n  }\n  window.addEventListener('message',\n    filterForDotStream);\n  return function() {\n    window.removeEventListener('message',\n      filterForDotStream);\n  };\n});\n"
      },
      "date": 1710524556987
    },
    {
      "type": "edit",
      "id": "79f20000",
      "item": {
        "id": "79f20000",
        "type": "code",
        "text": "import * as GraphvizViewer from \"https://wiki.dbbs.co/plugins/graphviz/graphviz-viewer.js\";\nimport {observe} from \"https://cdn.jsdelivr.net/npm/@observablehq/stdlib@5.8.6/src/generators/index.js\";\nimport html from 'https://cdn.jsdelivr.net/npm/htl@0.3.1/src/index.js';"
      },
      "date": 1710524612921
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  for await (let dot of dotStream) {\n    el.append(html`<graphviz-viewer>${dot}`);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710524620637
    },
    {
      "type": "edit",
      "id": "79f20000",
      "item": {
        "id": "79f20000",
        "type": "code",
        "text": "import * as GraphvizViewer from \"https://wiki.dbbs.co/plugins/graphviz/graphviz-viewer.js\";\nimport {observe} from \"https://cdn.jsdelivr.net/npm/@observablehq/stdlib@5.8.6/src/generators/index.js\";\nimport {html} from 'https://cdn.jsdelivr.net/npm/htl@0.3.1/src/index.js';"
      },
      "date": 1710524642892
    },
    {
      "type": "edit",
      "id": "4df90000",
      "item": {
        "id": "4df90000",
        "type": "code",
        "text": "console.log({html});\nconst dotStream = observe(function(change) {\n  function filterForDotStream(message) {\n    if (message.data\n        && message.data.action\n        && message.data.action == \"dotStream\") {\n      const {dot} = message.data;\n      change(dot);\n    }\n  }\n  window.addEventListener('message',\n    filterForDotStream);\n  return function() {\n    window.removeEventListener('message',\n      filterForDotStream);\n  };\n});\n"
      },
      "date": 1710524658048
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  for await (let dot of dotStream) {\n    console.log({dot});\n    el.append(html`<graphviz-viewer>${dot}`);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710524698483
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  for await (let dot of dotStream) {\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710524932823
    },
    {
      "type": "edit",
      "id": "78ad8000",
      "item": {
        "id": "78ad8000",
        "type": "paragraph",
        "text": "This experiment might support [[Exploratory Parsing]]. See also [[DOT Publisher]]"
      },
      "date": 1710524998426
    },
    {
      "type": "edit",
      "id": "78ad8000",
      "item": {
        "id": "78ad8000",
        "type": "paragraph",
        "text": "This experiment might support [[Exploratory Parsing]]. See also [[DOT Publisher]]."
      },
      "date": 1710525003167
    },
    {
      "type": "fork",
      "date": 1710525083366
    },
    {
      "type": "edit",
      "id": "78ad8000",
      "item": {
        "id": "78ad8000",
        "type": "paragraph",
        "text": "This experiment might support [[Exploratory Parsing in Frames]]. See also [[DOT Publisher]]."
      },
      "date": 1710599785211
    },
    {
      "type": "edit",
      "id": "4df90000",
      "item": {
        "id": "4df90000",
        "type": "code",
        "text": "const dotStream = observe(function(change) {\n  function filterForDotStream(message) {\n    if (message.data\n        && message.data.action\n        && message.data.action == \"dotStream\") {\n      const {dot} = message.data;\n      change(dot);\n    }\n  }\n  window.addEventListener('message',\n    filterForDotStream);\n  return function() {\n    window.removeEventListener('message',\n      filterForDotStream);\n  };\n});\n"
      },
      "date": 1710615602269
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  el.addEventListener('click', event => {\n    console.log({\n      currentTarget: event.currentTarget\n    });\n  });\n  for await (let dot of dotStream) {\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710618295060
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  el.addEventListener('click', event => {\n    console.log({\n      target: event.target,\n      currentTarget: event.currentTarget,\n      event\n    });\n  });\n  for await (let dot of dotStream) {\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710618362208
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  el.addEventListener('click', event => {\n    const title = event.originalTarget.parentElement\n      .querySelector('title');\n    if (title) {\n      const label = title.textContent;\n      window.parent.postMessage({\n        action: 'publishSourceData',\n        name: 'dotLabelClick',\n        sourceData: {label}\n      }, '*');\n    }\n  });\n  for await (let dot of dotStream) {\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710622962948
    },
    {
      "type": "edit",
      "id": "1772e000",
      "item": {
        "id": "1772e000",
        "type": "frame",
        "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nLINEUP dot\nSOURCE dotLabelClick"
      },
      "date": 1710622976296
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  el.addEventListener('click', event => {\n    const parent = event.originalTarget\n      .parentElement;\n    const title = parent\n      .querySelector('title')?.textContent;\n    const label = parent\n      .querySelector('text')?.textContent;\n    if (title || label) {\n      window.parent.postMessage({\n        action: 'publishSourceData',\n        name: 'dotLabelClick',\n        sourceData: {label, title}\n      }, '*');\n    }\n  });\n  for await (let dot of dotStream) {\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710623443930
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  el.addEventListener('click', event => {\n    const parent = event.originalTarget\n      .parentElement;\n    const title = parent\n      .querySelector('title')?.textContent;\n    const label = parent\n      .querySelector('text')?.textContent;\n    console.log({parent, title, label});\n    if (title || label) {\n      window.parent.postMessage({\n        action: 'publishSourceData',\n        name: 'dotLabelClick',\n        sourceData: {label, title}\n      }, '*');\n    }\n  });\n  for await (let dot of dotStream) {\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710623658999
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  el.addEventListener('click', event => {\n    const parent = event.originalTarget\n      .ancestor('.node,.edge');\n    const title = parent\n      ?.querySelector('title')?.textContent;\n    const label = parent\n      ?.querySelector('text')?.textContent;\n    console.log({parent, title, label});\n    if (title || label) {\n      window.parent.postMessage({\n        action: 'publishSourceData',\n        name: 'dotLabelClick',\n        sourceData: {label, title}\n      }, '*');\n    }\n  });\n  for await (let dot of dotStream) {\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710624424038
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  el.addEventListener('click', event => {\n    const parent = event.originalTarget\n      .closest('.node,.edge');\n    const title = parent\n      ?.querySelector('title')?.textContent;\n    const label = parent\n      ?.querySelector('text')?.textContent;\n    console.log({parent, title, label});\n    if (title || label) {\n      window.parent.postMessage({\n        action: 'publishSourceData',\n        name: 'dotLabelClick',\n        sourceData: {label, title}\n      }, '*');\n    }\n  });\n  for await (let dot of dotStream) {\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710624475587
    },
    {
      "type": "add",
      "id": "2c922490e2ce7136",
      "item": {
        "type": "paragraph",
        "id": "2c922490e2ce7136",
        "text": "Define a click handler that understands Graphviz SVG and publishes details about the clicks back to the lineup."
      },
      "after": "4df90000",
      "date": 1710625570442
    },
    {
      "type": "add",
      "id": "8c1822479e160aa3",
      "item": {
        "type": "factory",
        "id": "8c1822479e160aa3",
        "text": "..."
      },
      "after": "2c922490e2ce7136",
      "date": 1710625572849
    },
    {
      "type": "edit",
      "id": "8c1822479e160aa3",
      "item": {
        "type": "code",
        "id": "8c1822479e160aa3",
        "text": "function click(event) {\n  const node = event.originalTarget.closest('.node');\n  const edge = event.originalTarget.closest('.edge');\n  if (node || edge) { // ignore other clicks\n    \n  }\n}"
      },
      "date": 1710625752273
    },
    {
      "type": "edit",
      "id": "8c1822479e160aa3",
      "item": {
        "type": "code",
        "id": "8c1822479e160aa3",
        "text": "function click(event) {\n  const node = event.originalTarget.closest('.node');\n  const edge = event.originalTarget.closest('.edge');\n  const parent = node||edge;\n  if (parent) { // ignore other clicks\n    const title = parent.querySelector('title')\n      ?.textContent;\n    const label = parent.querySelector('text')\n      ?.textContent;\n    window.parent.postMessage({\n      action: 'publishSourceData',\n      name: 'dotLabelClick',\n      sourceData: {label, title}\n    }, '*'); // TODO: include identifiers?\n  }\n}"
      },
      "date": 1710626100275
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  el.addEventListener('click', click);\n  for await (let dot of dotStream) {\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710626132399
    },
    {
      "type": "edit",
      "id": "4df90000",
      "item": {
        "id": "4df90000",
        "type": "code",
        "text": "const dotStream = observe(function(change) {\n  function filterForDotStream(message) {\n    if (message.data?.action == \"dotStream\") {\n      console.log(data: message.data);\n      const {dot} = message.data;\n      change(dot);\n    }\n  }\n  window.addEventListener('message',\n    filterForDotStream);\n  return function() {\n    window.removeEventListener('message',\n      filterForDotStream);\n  };\n});\n"
      },
      "date": 1710626440706
    },
    {
      "type": "edit",
      "id": "4df90000",
      "item": {
        "id": "4df90000",
        "type": "code",
        "text": "const dotStream = observe(function(change) {\n  function filterForDotStream(message) {\n    if (message.data?.action == \"dotStream\") {\n      console.log({data: message.data});\n      const {dot} = message.data;\n      change(dot);\n    }\n  }\n  window.addEventListener('message',\n    filterForDotStream);\n  return function() {\n    window.removeEventListener('message',\n      filterForDotStream);\n  };\n});\n"
      },
      "date": 1710626485057
    },
    {
      "type": "edit",
      "id": "4df90000",
      "item": {
        "id": "4df90000",
        "type": "code",
        "text": "const dotStream = observe(function(change) {\n  function filterForDotStream(message) {\n    if (message.data?.action == \"dotStream\") {\n      change(message.data);\n    }\n  }\n  window.addEventListener('message',\n    filterForDotStream);\n  return function() {\n    window.removeEventListener('message',\n      filterForDotStream);\n  };\n});\n"
      },
      "date": 1710627014799
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  el.addEventListener('click', click);\n  for await (const data of dotStream) {\n    const {dot} = data;\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    el.dataset.dotSender = {\n      pageId: data.pageId,\n      itemId: data.itemId\n    };\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710627297572
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  el.addEventListener('click', click);\n  for await (const data of dotStream) {\n    const {dot} = data;\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    el.dotSender = {\n      pageId: data.pageId,\n      itemId: data.itemId\n    };\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710627406544
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  el.addEventListener('click', click);\n  for await (const data of dotStream) {\n    const {dot} = data;\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    el.dotData = data.clone();\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710627533911
    },
    {
      "type": "edit",
      "id": "199a5000",
      "item": {
        "id": "199a5000",
        "type": "code",
        "text": "export async function bind(el) {\n  el.addEventListener('click', click);\n  for await (const data of dotStream) {\n    const {dot} = data;\n    while(el.hasChildNodes())\n      el.lastChild.remove();\n    el.append(html`<graphviz-viewer>${dot}`);\n    el.dotData = structuredClone(data);\n    window.parent.postMessage({\n      action: 'resize',\n      height: document.body.offsetHeight\n    }, '*');\n  }\n}\n"
      },
      "date": 1710627640079
    },
    {
      "type": "edit",
      "id": "8c1822479e160aa3",
      "item": {
        "type": "code",
        "id": "8c1822479e160aa3",
        "text": "function click(event) {\n  const {dotSource} = event.target;\n  const node = event.originalTarget.closest('.node');\n  const edge = event.originalTarget.closest('.edge');\n  const parent = node||edge;\n  if (parent) { // ignore other clicks\n    const title = parent.querySelector('title')\n      ?.textContent;\n    const label = parent.querySelector('text')\n      ?.textContent;\n    window.parent.postMessage({\n      action: 'publishSourceData',\n      name: 'dotLabelClick',\n      sourceData: {label, title, ids:{\n        pageKey: dotSource.pageKey,\n        itemId: dotSource.itemId\n      }}\n    }, '*');\n  }\n}"
      },
      "date": 1710627905039
    },
    {
      "type": "edit",
      "id": "8c1822479e160aa3",
      "item": {
        "type": "code",
        "id": "8c1822479e160aa3",
        "text": "function click(event) {\n  const {dotSource} = event.target;\n  console.log({\n    target: event.target,\n    dotSource,\n    event\n  });\n  const node = event.originalTarget.closest('.node');\n  const edge = event.originalTarget.closest('.edge');\n  const parent = node||edge;\n  if (parent) { // ignore other clicks\n    const title = parent.querySelector('title')\n      ?.textContent;\n    const label = parent.querySelector('text')\n      ?.textContent;\n    window.parent.postMessage({\n      action: 'publishSourceData',\n      name: 'dotLabelClick',\n      sourceData: {label, title, ids:{\n        pageKey: dotSource.pageKey,\n        itemId: dotSource.itemId\n      }}\n    }, '*');\n  }\n}"
      },
      "date": 1710631062601
    },
    {
      "type": "edit",
      "id": "8c1822479e160aa3",
      "item": {
        "type": "code",
        "id": "8c1822479e160aa3",
        "text": "function click(event) {\n  const {dotSource} = event.target.parentElement;\n  console.log({\n    target: event.target,\n    dotSource,\n    event\n  });\n  const node = event.originalTarget.closest('.node');\n  const edge = event.originalTarget.closest('.edge');\n  const parent = node||edge;\n  if (parent) { // ignore other clicks\n    const title = parent.querySelector('title')\n      ?.textContent;\n    const label = parent.querySelector('text')\n      ?.textContent;\n    window.parent.postMessage({\n      action: 'publishSourceData',\n      name: 'dotLabelClick',\n      sourceData: {label, title, ids:{\n        pageKey: dotSource.pageKey,\n        itemId: dotSource.itemId\n      }}\n    }, '*');\n  }\n}"
      },
      "date": 1710631214819
    },
    {
      "type": "edit",
      "id": "8c1822479e160aa3",
      "item": {
        "type": "code",
        "id": "8c1822479e160aa3",
        "text": "function click(event) {\n  const {dotSource} = event.target.parentElement;\n  console.log({\n    target: event.target,\n    parentElement: event.target.parentElement;\n    dotSource,\n    event\n  });\n  const node = event.originalTarget.closest('.node');\n  const edge = event.originalTarget.closest('.edge');\n  const parent = node||edge;\n  if (parent) { // ignore other clicks\n    const title = parent.querySelector('title')\n      ?.textContent;\n    const label = parent.querySelector('text')\n      ?.textContent;\n    window.parent.postMessage({\n      action: 'publishSourceData',\n      name: 'dotLabelClick',\n      sourceData: {label, title, ids:{\n        pageKey: dotSource.pageKey,\n        itemId: dotSource.itemId\n      }}\n    }, '*');\n  }\n}"
      },
      "date": 1710631280973
    },
    {
      "type": "edit",
      "id": "8c1822479e160aa3",
      "item": {
        "type": "code",
        "id": "8c1822479e160aa3",
        "text": "function click(event) {\n  const {dotSource} = event.target.parentElement;\n  console.log({\n    target: event.target,\n    parentElement: event.target.parentElement,\n    dotSource,\n    event\n  });\n  const node = event.originalTarget.closest('.node');\n  const edge = event.originalTarget.closest('.edge');\n  const parent = node||edge;\n  if (parent) { // ignore other clicks\n    const title = parent.querySelector('title')\n      ?.textContent;\n    const label = parent.querySelector('text')\n      ?.textContent;\n    window.parent.postMessage({\n      action: 'publishSourceData',\n      name: 'dotLabelClick',\n      sourceData: {label, title, ids:{\n        pageKey: dotSource.pageKey,\n        itemId: dotSource.itemId\n      }}\n    }, '*');\n  }\n}"
      },
      "date": 1710631302299
    },
    {
      "type": "edit",
      "id": "8c1822479e160aa3",
      "item": {
        "type": "code",
        "id": "8c1822479e160aa3",
        "text": "function click(event) {\n  const {dotData} = event.target.parentElement;\n  console.log({\n    target: event.target,\n    parentElement: event.target.parentElement,\n    dotData,\n    event\n  });\n  const node = event.originalTarget.closest('.node');\n  const edge = event.originalTarget.closest('.edge');\n  const parent = node||edge;\n  if (parent) { // ignore other clicks\n    const title = parent.querySelector('title')\n      ?.textContent;\n    const label = parent.querySelector('text')\n      ?.textContent;\n    window.parent.postMessage({\n      action: 'publishSourceData',\n      name: 'dotLabelClick',\n      sourceData: {label, title, ids:{\n        pageKey: dotData.pageKey,\n        itemId: dotData.itemId\n      }}\n    }, '*');\n  }\n}"
      },
      "date": 1710631379155
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co",
      "date": 1710727233081
    }
  ]
}