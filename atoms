{
  "title": "Atoms",
  "story": [
    {
      "type": "reference",
      "id": "72d7bd2889e6fc23",
      "site": "wiki.ralfbarkow.ch",
      "slug": "paragraphs-as-atomic-structure",
      "title": "Paragraphs as Atomic Structure",
      "text": "And here we come to something that is very hard to get about federated wiki which [[Mike Caulfield]] would love your help explaining — Ward likes to say his interest is can you take a few simple ideas and data structures and make them really generative. "
    },
    {
      "type": "markdown",
      "id": "cf54d71f6531c187",
      "text": "> And so you have this simple idea of paragraphs as the atomic structure rather than pages, and suddenly the lousy revision histories we have turn into this beautiful, almost poetic view.\n\n\n"
    },
    {
      "type": "pagefold",
      "id": "7c662c6cf5b576c0",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "f695d26d9fcb5c6f",
      "text": "# Relationships for Mutual Use"
    },
    {
      "type": "markdown",
      "id": "3f090300a1b0676e",
      "text": "If we think of objects and classes as the “**atoms**” of our object-oriented design, we obtain a totally different view. Obviously, we design and build our application in units or components, formed of more than one class or one object. Such a unit could be a con­tainer with a table of contents and markers or iterators (see Section 3.2.7). To [[imple­ment]] such a container, we need mutual-use relationships. Note that some successful patterns, such as those described by Gamma et al., for example, Visitor, Observer, or Mediator, are also based on mutual use."
    },
    {
      "type": "pagefold",
      "id": "7435e215a797a896",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "137abc72c21e5ef4",
      "text": "Züllighoven - 2005 - Object-oriented construction handbook developing .pdf, p. 37"
    },
    {
      "type": "paragraph",
      "id": "641f78a4e30a1c42",
      "text": "⇒ [[Relationships for Mutual Use]]"
    },
    {
      "type": "graphviz",
      "id": "9f32304640d7b658",
      "text": "DOT FROM lambda-browsing"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Atoms",
        "story": []
      },
      "date": 1661843604753
    },
    {
      "item": {
        "type": "factory",
        "id": "3f090300a1b0676e"
      },
      "id": "3f090300a1b0676e",
      "type": "add",
      "date": 1661843614025
    },
    {
      "type": "edit",
      "id": "3f090300a1b0676e",
      "item": {
        "type": "paragraph",
        "id": "3f090300a1b0676e",
        "text": " If we think of objects and classes as the “atoms” of our object-oriented design, we obtain a totally different view. Obviously, we design and build our application in units or components, formed of more than one class or one object. Such a unit could be a con­ tainer with a table of contents and markers or iterators (see Section 3.2.7). To imple­ ment such a container, we need mutual-use relationships. Note that some successful patterns, such as those described by Gamma et al., for example, Visitor, Observer, or Mediator, are also based on mutual use."
      },
      "date": 1661843617536
    },
    {
      "item": {
        "type": "factory",
        "id": "7435e215a797a896"
      },
      "id": "7435e215a797a896",
      "type": "add",
      "after": "3f090300a1b0676e",
      "date": 1661843629458
    },
    {
      "type": "edit",
      "id": "7435e215a797a896",
      "item": {
        "type": "pagefold",
        "id": "7435e215a797a896",
        "text": "~"
      },
      "date": 1661843632024
    },
    {
      "item": {
        "type": "factory",
        "id": "137abc72c21e5ef4"
      },
      "id": "137abc72c21e5ef4",
      "type": "add",
      "after": "7435e215a797a896",
      "date": 1661843633585
    },
    {
      "type": "edit",
      "id": "137abc72c21e5ef4",
      "item": {
        "type": "paragraph",
        "id": "137abc72c21e5ef4",
        "text": "Züllighoven - 2005 - Object-oriented construction handbook developing .pdf"
      },
      "date": 1661843634935
    },
    {
      "type": "edit",
      "id": "137abc72c21e5ef4",
      "item": {
        "type": "paragraph",
        "id": "137abc72c21e5ef4",
        "text": "Züllighoven - 2005 - Object-oriented construction handbook developing .pdf, p. 37"
      },
      "date": 1661843645744
    },
    {
      "type": "edit",
      "id": "3f090300a1b0676e",
      "item": {
        "type": "paragraph",
        "id": "3f090300a1b0676e",
        "text": " If we think of objects and classes as the “**atoms**” of our object-oriented design, we obtain a totally different view. Obviously, we design and build our application in units or components, formed of more than one class or one object. Such a unit could be a con­ tainer with a table of contents and markers or iterators (see Section 3.2.7). To imple­ ment such a container, we need mutual-use relationships. Note that some successful patterns, such as those described by Gamma et al., for example, Visitor, Observer, or Mediator, are also based on mutual use."
      },
      "date": 1661843655927
    },
    {
      "type": "edit",
      "id": "3f090300a1b0676e",
      "item": {
        "type": "markdown",
        "id": "3f090300a1b0676e",
        "text": " If we think of objects and classes as the “**atoms**” of our object-oriented design, we obtain a totally different view. Obviously, we design and build our application in units or components, formed of more than one class or one object. Such a unit could be a con­ tainer with a table of contents and markers or iterators (see Section 3.2.7). To imple­ ment such a container, we need mutual-use relationships. Note that some successful patterns, such as those described by Gamma et al., for example, Visitor, Observer, or Mediator, are also based on mutual use."
      },
      "date": 1661843657317
    },
    {
      "type": "edit",
      "id": "3f090300a1b0676e",
      "item": {
        "type": "markdown",
        "id": "3f090300a1b0676e",
        "text": " If we think of objects and classes as the “**atoms**” of our object-oriented design, we obtain a totally different view. Obviously, we design and build our application in units or components, formed of more than one class or one object. Such a unit could be a con­tainer with a table of contents and markers or iterators (see Section 3.2.7). To imple­ ment such a container, we need mutual-use relationships. Note that some successful patterns, such as those described by Gamma et al., for example, Visitor, Observer, or Mediator, are also based on mutual use."
      },
      "date": 1661843673103
    },
    {
      "type": "edit",
      "id": "3f090300a1b0676e",
      "item": {
        "type": "markdown",
        "id": "3f090300a1b0676e",
        "text": " If we think of objects and classes as the “**atoms**” of our object-oriented design, we obtain a totally different view. Obviously, we design and build our application in units or components, formed of more than one class or one object. Such a unit could be a con­tainer with a table of contents and markers or iterators (see Section 3.2.7). To [[imple­ment]] such a container, we need mutual-use relationships. Note that some successful patterns, such as those described by Gamma et al., for example, Visitor, Observer, or Mediator, are also based on mutual use."
      },
      "date": 1661843687582
    },
    {
      "item": {
        "type": "factory",
        "id": "72d7bd2889e6fc23"
      },
      "id": "72d7bd2889e6fc23",
      "type": "add",
      "after": "137abc72c21e5ef4",
      "date": 1661843733653
    },
    {
      "id": "72d7bd2889e6fc23",
      "type": "move",
      "order": [
        "72d7bd2889e6fc23",
        "3f090300a1b0676e",
        "7435e215a797a896",
        "137abc72c21e5ef4"
      ],
      "date": 1661843738714
    },
    {
      "type": "edit",
      "id": "72d7bd2889e6fc23",
      "item": {
        "type": "reference",
        "id": "72d7bd2889e6fc23",
        "site": "wiki.ralfbarkow.ch",
        "slug": "paragraphs-as-atomic-structure",
        "title": "Paragraphs as Atomic Structure",
        "text": "And here we come to something that is very hard to get about federated wiki which [[Mike Caulfield]] would love your help explaining — Ward likes to say his interest is can you take a few simple ideas and data structures and make them really generative. **And so you have this simple idea of paragraphs as the atomic structure rather than pages, and suddenly the lousy revision histories we have turn into this beautiful, almost poetic view.**"
      },
      "date": 1661843742623
    },
    {
      "item": {
        "type": "factory",
        "id": "7c662c6cf5b576c0"
      },
      "id": "7c662c6cf5b576c0",
      "type": "add",
      "after": "137abc72c21e5ef4",
      "date": 1661843745472
    },
    {
      "id": "7c662c6cf5b576c0",
      "type": "move",
      "order": [
        "72d7bd2889e6fc23",
        "7c662c6cf5b576c0",
        "3f090300a1b0676e",
        "7435e215a797a896",
        "137abc72c21e5ef4"
      ],
      "date": 1661843751251
    },
    {
      "type": "edit",
      "id": "7c662c6cf5b576c0",
      "item": {
        "type": "pagefold",
        "id": "7c662c6cf5b576c0",
        "text": "~"
      },
      "date": 1661843757926
    },
    {
      "type": "edit",
      "id": "72d7bd2889e6fc23",
      "item": {
        "type": "reference",
        "id": "72d7bd2889e6fc23",
        "site": "wiki.ralfbarkow.ch",
        "slug": "paragraphs-as-atomic-structure",
        "title": "Paragraphs as Atomic Structure",
        "text": "And here we come to something that is very hard to get about federated wiki which [[Mike Caulfield]] would love your help explaining — Ward likes to say his interest is can you take a few simple ideas and data structures and make them really generative. <b>And so you have this simple idea of paragraphs as the atomic structure rather than pages, and suddenly the lousy revision histories we have turn into this beautiful, almost poetic view.</b>"
      },
      "date": 1661843796402
    },
    {
      "type": "edit",
      "id": "72d7bd2889e6fc23",
      "item": {
        "type": "reference",
        "id": "72d7bd2889e6fc23",
        "site": "wiki.ralfbarkow.ch",
        "slug": "paragraphs-as-atomic-structure",
        "title": "Paragraphs as Atomic Structure",
        "text": "And here we come to something that is very hard to get about federated wiki which [[Mike Caulfield]] would love your help explaining — Ward likes to say his interest is can you take a few simple ideas and data structures and make them really generative. "
      },
      "date": 1661843812082
    },
    {
      "id": "cf54d71f6531c187",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "cf54d71f6531c187",
        "text": "And here we come to something that is very hard to get about federated wiki which [[Mike Caulfield]] would love your help explaining — Ward likes to say his interest is can you take a few simple ideas and data structures and make them really generative. **And so you have this simple idea of paragraphs as the atomic structure rather than pages, and suddenly the lousy revision histories we have turn into this beautiful, almost poetic view.**\n\n\n"
      },
      "after": "72d7bd2889e6fc23",
      "date": 1661843841456
    },
    {
      "type": "edit",
      "id": "cf54d71f6531c187",
      "item": {
        "type": "markdown",
        "id": "cf54d71f6531c187",
        "text": "> **And so you have this simple idea of paragraphs as the atomic structure rather than pages, and suddenly the lousy revision histories we have turn into this beautiful, almost poetic view.**\n\n\n"
      },
      "date": 1661843851063
    },
    {
      "type": "edit",
      "id": "cf54d71f6531c187",
      "item": {
        "type": "markdown",
        "id": "cf54d71f6531c187",
        "text": "> And so you have this simple idea of paragraphs as the atomic structure rather than pages, and suddenly the lousy revision histories we have turn into this beautiful, almost poetic view.\n\n\n"
      },
      "date": 1661843859410
    },
    {
      "item": {
        "type": "factory",
        "id": "f695d26d9fcb5c6f"
      },
      "id": "f695d26d9fcb5c6f",
      "type": "add",
      "after": "137abc72c21e5ef4",
      "date": 1661843933333
    },
    {
      "id": "f695d26d9fcb5c6f",
      "type": "move",
      "order": [
        "72d7bd2889e6fc23",
        "cf54d71f6531c187",
        "7c662c6cf5b576c0",
        "f695d26d9fcb5c6f",
        "3f090300a1b0676e",
        "7435e215a797a896",
        "137abc72c21e5ef4"
      ],
      "date": 1661843938911
    },
    {
      "type": "edit",
      "id": "f695d26d9fcb5c6f",
      "item": {
        "type": "markdown",
        "id": "f695d26d9fcb5c6f",
        "text": "# Relationships for Mutual Use"
      },
      "date": 1661843945581
    },
    {
      "type": "edit",
      "id": "f695d26d9fcb5c6f",
      "item": {
        "type": "markdown",
        "id": "f695d26d9fcb5c6f",
        "text": "# [[Relationships for Mutual Use]]"
      },
      "date": 1661843973946
    },
    {
      "type": "edit",
      "id": "3f090300a1b0676e",
      "item": {
        "type": "markdown",
        "id": "3f090300a1b0676e",
        "text": "If we think of objects and classes as the “**atoms**” of our object-oriented design, we obtain a totally different view. Obviously, we design and build our application in units or components, formed of more than one class or one object. Such a unit could be a con­tainer with a table of contents and markers or iterators (see Section 3.2.7). To [[imple­ment]] such a container, we need mutual-use relationships. Note that some successful patterns, such as those described by Gamma et al., for example, Visitor, Observer, or Mediator, are also based on mutual use."
      },
      "date": 1661844031077
    },
    {
      "item": {
        "type": "factory",
        "id": "641f78a4e30a1c42"
      },
      "id": "641f78a4e30a1c42",
      "type": "add",
      "after": "137abc72c21e5ef4",
      "date": 1661844106298
    },
    {
      "type": "edit",
      "id": "641f78a4e30a1c42",
      "item": {
        "type": "paragraph",
        "id": "641f78a4e30a1c42",
        "text": "[[Relationships for Mutual Use]]"
      },
      "date": 1661844111797
    },
    {
      "type": "edit",
      "id": "f695d26d9fcb5c6f",
      "item": {
        "type": "markdown",
        "id": "f695d26d9fcb5c6f",
        "text": "[[Relationships for Mutual Use]]"
      },
      "date": 1661844121328
    },
    {
      "type": "edit",
      "id": "641f78a4e30a1c42",
      "item": {
        "type": "paragraph",
        "id": "641f78a4e30a1c42",
        "text": "⇒ [[Relationships for Mutual Use]]"
      },
      "date": 1661844129957
    },
    {
      "type": "edit",
      "id": "f695d26d9fcb5c6f",
      "item": {
        "type": "markdown",
        "id": "f695d26d9fcb5c6f",
        "text": "# Relationships for Mutual Use"
      },
      "date": 1661844140402
    },
    {
      "item": {
        "type": "factory",
        "id": "9f32304640d7b658"
      },
      "id": "9f32304640d7b658",
      "type": "add",
      "after": "641f78a4e30a1c42",
      "date": 1661844146394
    },
    {
      "type": "edit",
      "id": "9f32304640d7b658",
      "item": {
        "type": "graphviz",
        "id": "9f32304640d7b658",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1661844155300
    }
  ]
}