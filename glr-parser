{
  "title": "GLR Parser",
  "story": [
    {
      "type": "markdown",
      "id": "eba89a50cc0e848e",
      "text": "A GLR parser (GLR standing for \"Generalized LR\", where L stands for \"left-to-right\" and R stands for \"rightmost (derivation)\") is an extension of an LR parser algorithm to handle non-deterministic and ambiguous grammars.[1] The theoretical foundation was provided in a 1974 paper[2] by [[Bernard Lang]] (along with other general Context-Free parsers such as GLL). It describes a systematic way to produce such algorithms, and provides uniform results regarding correctness proofs, complexity with respect to grammar classes, and optimization techniques. The first actual implementation of GLR was described in a 1984 paper by [[Masaru Tomita]], it has also been referred to as a \"parallel parser\". Tomita presented five stages in his original work,[3] though in practice it is the second stage that is recognized as the GLR parser.  [https://en.wikipedia.org/wiki/GLR_parser wikipedia]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "GLR Parser",
        "story": []
      },
      "date": 1652800626107
    },
    {
      "item": {
        "type": "factory",
        "id": "eba89a50cc0e848e"
      },
      "id": "eba89a50cc0e848e",
      "type": "add",
      "date": 1652800632962
    },
    {
      "type": "edit",
      "id": "eba89a50cc0e848e",
      "item": {
        "type": "paragraph",
        "id": "eba89a50cc0e848e",
        "text": "– https://en.wikipedia.org/wiki/GLR_parser"
      },
      "date": 1652800635320
    },
    {
      "type": "edit",
      "id": "eba89a50cc0e848e",
      "item": {
        "type": "markdown",
        "id": "eba89a50cc0e848e",
        "text": "– https://en.wikipedia.org/wiki/GLR_parser"
      },
      "date": 1652800636422
    },
    {
      "type": "edit",
      "id": "eba89a50cc0e848e",
      "item": {
        "type": "markdown",
        "id": "eba89a50cc0e848e",
        "text": "A GLR parser (GLR standing for \"Generalized LR\", where L stands for \"left-to-right\" and R stands for \"rightmost (derivation)\") is an extension of an LR parser algorithm to handle non-deterministic and ambiguous grammars.[1] The theoretical foundation was provided in a 1974 paper[2] by Bernard Lang (along with other general Context-Free parsers such as GLL). It describes a systematic way to produce such algorithms, and provides uniform results regarding correctness proofs, complexity with respect to grammar classes, and optimization techniques. The first actual implementation of GLR was described in a 1984 paper by Masaru Tomita, it has also been referred to as a \"parallel parser\". Tomita presented five stages in his original work,[3] though in practice it is the second stage that is recognized as the GLR parser.  [https://en.wikipedia.org/wiki/GLR_parser wikipedia]"
      },
      "date": 1652800655016
    },
    {
      "type": "edit",
      "id": "eba89a50cc0e848e",
      "item": {
        "type": "markdown",
        "id": "eba89a50cc0e848e",
        "text": "A GLR parser (GLR standing for \"Generalized LR\", where L stands for \"left-to-right\" and R stands for \"rightmost (derivation)\") is an extension of an LR parser algorithm to handle non-deterministic and ambiguous grammars.[1] The theoretical foundation was provided in a 1974 paper[2] by [[Bernard Lang]] (along with other general Context-Free parsers such as GLL). It describes a systematic way to produce such algorithms, and provides uniform results regarding correctness proofs, complexity with respect to grammar classes, and optimization techniques. The first actual implementation of GLR was described in a 1984 paper by Masaru Tomita, it has also been referred to as a \"parallel parser\". Tomita presented five stages in his original work,[3] though in practice it is the second stage that is recognized as the GLR parser.  [https://en.wikipedia.org/wiki/GLR_parser wikipedia]"
      },
      "date": 1652800676384
    },
    {
      "type": "edit",
      "id": "eba89a50cc0e848e",
      "item": {
        "type": "markdown",
        "id": "eba89a50cc0e848e",
        "text": "A GLR parser (GLR standing for \"Generalized LR\", where L stands for \"left-to-right\" and R stands for \"rightmost (derivation)\") is an extension of an LR parser algorithm to handle non-deterministic and ambiguous grammars.[1] The theoretical foundation was provided in a 1974 paper[2] by [[Bernard Lang]] (along with other general Context-Free parsers such as GLL). It describes a systematic way to produce such algorithms, and provides uniform results regarding correctness proofs, complexity with respect to grammar classes, and optimization techniques. The first actual implementation of GLR was described in a 1984 paper by [[Masaru Tomita]], it has also been referred to as a \"parallel parser\". Tomita presented five stages in his original work,[3] though in practice it is the second stage that is recognized as the GLR parser.  [https://en.wikipedia.org/wiki/GLR_parser wikipedia]"
      },
      "date": 1652800697568
    }
  ]
}