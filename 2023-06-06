{
  "title": "2023-06-06",
  "story": [
    {
      "type": "paragraph",
      "id": "fc8f5d36ff495777",
      "text": "⇒ [[Type Future]] ⇒ [[Type Create]] ⇒ [[Person, decodePerson, encodePerson]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2023-06-06",
        "story": []
      },
      "date": 1686023416662
    },
    {
      "item": {
        "type": "factory",
        "id": "57d29cda6b5a42a1"
      },
      "id": "57d29cda6b5a42a1",
      "type": "add",
      "date": 1686023417977
    },
    {
      "type": "edit",
      "id": "57d29cda6b5a42a1",
      "item": {
        "type": "code",
        "id": "57d29cda6b5a42a1",
        "text": "module MainSpec exposing (suite)\n\nimport Expect\nimport Json.Decode as Decode\nimport Json.Encode as Encode\nimport Main exposing (Person, decodePerson, encodePerson)\nimport Test exposing (Test, test)\n\n\nrawData : String\nrawData =\n    \"\"\"\n    {\n      \"name\": \"John Doe\",\n      \"age\": 25,\n      \"hobbies\": [\"reading\", \"running\", \"cooking\"]\n    }\n    \"\"\"\n\n\nsuite : Test\nsuite =\n    Test.describe \"Main\"\n        [ test \"decodePerson\" <|\n            \\() ->\n                let\n                    jsonData =\n                        rawData\n\n                    expectedPerson =\n                        Person \"John Doe\" 25 [ \"reading\", \"running\", \"cooking\" ]\n\n                    decoded =\n                        Decode.decodeString decodePerson jsonData\n                in\n                Expect.equal decoded (Ok expectedPerson)\n        , test \"encodePerson\" <|\n            \\() ->\n                let\n                    person =\n                        Person \"John Doe\" 30 [ \"reading\", \"playing guitar\" ]\n\n                    expectedJson =\n                        \"\"\"{\"name\":\"John Doe\",\"age\":30,\"hobbies\":[\"reading\",\"playing guitar\"]}\"\"\"\n\n                    encoded =\n                        Encode.encode 0 (encodePerson person)\n                in\n                Expect.equal encoded expectedJson\n        ]\n"
      },
      "date": 1686023423586
    },
    {
      "item": {
        "type": "factory",
        "id": "fc8f5d36ff495777"
      },
      "id": "fc8f5d36ff495777",
      "type": "add",
      "after": "57d29cda6b5a42a1",
      "date": 1686023455145
    },
    {
      "type": "edit",
      "id": "fc8f5d36ff495777",
      "item": {
        "type": "paragraph",
        "id": "fc8f5d36ff495777",
        "text": "Person, decodePerson, encodePerson"
      },
      "date": 1686023457773
    },
    {
      "id": "fc8f5d36ff495777",
      "type": "move",
      "order": [
        "fc8f5d36ff495777",
        "57d29cda6b5a42a1"
      ],
      "date": 1686023463124
    },
    {
      "type": "edit",
      "id": "fc8f5d36ff495777",
      "item": {
        "type": "paragraph",
        "id": "fc8f5d36ff495777",
        "text": "[[Person, decodePerson, encodePerson]]"
      },
      "date": 1686023470860
    },
    {
      "id": "57d29cda6b5a42a1",
      "type": "remove",
      "removedTo": {
        "page": "Person, decodePerson, encodePerson"
      },
      "date": 1686023478026
    },
    {
      "type": "edit",
      "id": "fc8f5d36ff495777",
      "item": {
        "type": "paragraph",
        "id": "fc8f5d36ff495777",
        "text": "⇒ [[Type Future]] ⇒ [[Type Create]] ⇒ [[Person, decodePerson, encodePerson]]"
      },
      "date": 1686024614557
    }
  ]
}