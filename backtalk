{
  "title": "Backtalk",
  "story": [
    {
      "type": "paragraph",
      "id": "e3e88cb4adf03329",
      "text": "Reflective practice is a dialectic process and depends on backtalk from the code and editor in order to advance the solution (reflection in action) or to rephrase the approach (reflection on action). "
    },
    {
      "type": "paragraph",
      "id": "96c7afd13cae2302",
      "text": "In programming, we have observed backtalk from four sources: running the code, reasoning about the code, feedback from static analysis, and representing the code differently (e.g. in a diagram). To support the cycle of reflective practice, a system can e.g. tolerate broken and pseudo code, simultanously allow different (e.g. visual) representations and perform automated reasoning."
    },
    {
      "type": "paragraph",
      "id": "e1343d17f08ae78a",
      "text": "⇒ [[Externalizing and Improvising]]"
    },
    {
      "type": "paragraph",
      "id": "63adbcccecdca806",
      "text": "The most direct mode of backtalk was making a change and executing the program to see the result. Programmers furthermore relied on mental execution to find bugs, e.g. reasoning about front-end code that was broken beyond execution. Static analysis was another source of backtalk, e.g. using the JSLint static analysis tool regularly without executing the code. A final source of backtalk comes from the representation, e.g. using state charts and transition matrices to reason about complex network interactions. We observed backtalk from a variety of sources, and rather than siding either with dynamic (backtalk from execution) or compiled languages (backtalk from static analysis), programming systems should provide backtalk suitable to the specific situation."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Backtalk",
        "story": []
      },
      "date": 1655983774924
    },
    {
      "item": {
        "type": "factory",
        "id": "e3e88cb4adf03329"
      },
      "id": "e3e88cb4adf03329",
      "type": "add",
      "date": 1655983781249
    },
    {
      "type": "edit",
      "id": "e3e88cb4adf03329",
      "item": {
        "type": "paragraph",
        "id": "e3e88cb4adf03329",
        "text": "Reflective practice is a dialectic process and depends on backtalk from the code and editor in order to advance the solution (reflection in action) or to rephrase the approach (reflection on action). In programming, we have observed backtalk from four sources: running the code, reasoning about the code, feedback from static analysis, and representing the code differently (e.g. in a diagram). To support the cycle of reflective practice, a system can e.g. tolerate broken and pseudo code, simultanously allow different (e.g. visual) representations and perform automated reasoning."
      },
      "date": 1655983782632
    },
    {
      "item": {
        "type": "factory",
        "id": "e1343d17f08ae78a"
      },
      "id": "e1343d17f08ae78a",
      "type": "add",
      "after": "e3e88cb4adf03329",
      "date": 1655983844042
    },
    {
      "type": "edit",
      "id": "e1343d17f08ae78a",
      "item": {
        "type": "paragraph",
        "id": "e1343d17f08ae78a",
        "text": "⇒ [[Externalizing and Improvising]]"
      },
      "date": 1655983845802
    },
    {
      "item": {
        "type": "factory",
        "id": "63adbcccecdca806"
      },
      "id": "63adbcccecdca806",
      "type": "add",
      "after": "e1343d17f08ae78a",
      "date": 1655983963579
    },
    {
      "type": "edit",
      "id": "63adbcccecdca806",
      "item": {
        "type": "paragraph",
        "id": "63adbcccecdca806",
        "text": "The most direct mode of backtalk was making a change and executing the program to see the result. Programmers furthermore relied on mental execution to find bugs, e.g. reasoning about front-end code that was broken beyond execution. Static analysis was another source of backtalk, e.g. using the JSLint static analysis tool regularly without executing the code. A final source of backtalk comes from the representation, e.g. using state charts and transition matrices to reason about complex network interactions. We observed backtalk from a variety of sources, and rather than siding either with dynamic (backtalk from execution) or compiled languages (backtalk from static analysis), programming systems should provide backtalk suitable to the specific situation."
      },
      "date": 1655983965058
    },
    {
      "type": "edit",
      "id": "e3e88cb4adf03329",
      "item": {
        "type": "paragraph",
        "id": "e3e88cb4adf03329",
        "text": "Reflective practice is a dialectic process and depends on backtalk from the code and editor in order to advance the solution (reflection in action) or to rephrase the approach (reflection on action). "
      },
      "date": 1656002231512
    },
    {
      "type": "add",
      "id": "96c7afd13cae2302",
      "item": {
        "type": "paragraph",
        "id": "96c7afd13cae2302",
        "text": "In programming, we have observed backtalk from four sources: running the code, reasoning about the code, feedback from static analysis, and representing the code differently (e.g. in a diagram). To support the cycle of reflective practice, a system can e.g. tolerate broken and pseudo code, simultanously allow different (e.g. visual) representations and perform automated reasoning."
      },
      "after": "e3e88cb4adf03329",
      "date": 1656002232335
    }
  ]
}