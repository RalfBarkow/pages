{
  "title": "Threaded Command Object",
  "story": [
    {
      "type": "html",
      "text": "<b>Forces</b>",
      "id": "d8d32070a19b8d28ce206ffc6e1e1318"
    },
    {
      "type": "html",
      "text": "\nGUI code needs to responsive to input while work is being done. We want to encapsulate the information needed to perform a job. We're in C++ Windows/Mac where certain issue constrain what gui threads and non-gui threads can do.",
      "id": "8f22c182275a031a49a179280ef863eb"
    },
    {
      "type": "html",
      "text": "<b>Therefore:</b>",
      "id": "5501cd07c9efd66d48cfe79488f28109"
    },
    {
      "type": "html",
      "text": "\nUse threaded command object (<i>which is WHAT, exactly?</i>) to do the work. See also [[Command Pattern]], [[Command Object]].",
      "id": "0801ff70ffa813f3e4c7955180ffedad"
    },
    {
      "type": "html",
      "text": "\nTo keep application thread-safe, avoid calling functions in the model while the threaded command object is running.",
      "id": "83d014bd8ef73d39982f730e8aeab8ec"
    },
    {
      "type": "html",
      "text": "\nAn issue in [[Microsoft Windows]] is that a GUI thread cannot safely call mutex, semaphores, etc. that could force the thread to wait, unless you use [[Msg Wait For Multiple Objects]], which includes the thread's window message queue as one of the objects to wait on, otherwise there could be deadlock if the GUI thread has to wait on a mutex while the operating system tries to send an event to its window.",
      "id": "2f4873b739360f60a0154a5334e5a310"
    },
    {
      "type": "html",
      "text": "\n[[Mac Os]] 9 preemptive threads cannot call GUI functions at all (they used to not be able to do much at all except image processing - that changed several years ago). They can make network calls, and maybe file system and other non-GUI calls. On MacOS 9, it is safe for the main (GUI) thread to wait on a semaphore, because the OS integrated theGUI-event-polling mechanism with the semaphore system.",
      "id": "022ea6a4facc731e9379ee43282c5312"
    },
    {
      "type": "html",
      "text": " before threaded command objects are created, gui calls model objects safely, without needing synchronization",
      "id": "97da158244817afafa58736cf4a7b562"
    },
    {
      "type": "html",
      "text": " when user initiates an action, gui creates threaded command object",
      "id": "1df25b0e6394de370c0b9b688f5138ba"
    },
    {
      "type": "html",
      "text": " while threaded command object is running, that 'action' part of the gui is disabled, (or maybe entire gui is disabled except for the cancel button - depending on how fine-grained your command objects and synchronization are).",
      "id": "3aa820207958a74c8def5f2821ad4c4d"
    },
    {
      "type": "html",
      "text": " while threaded command object is running, gui does not make calls to the parts of the model associated with that command object",
      "id": "06bc4cfc1a5efbf112cf0dd601def9c6"
    },
    {
      "type": "html",
      "text": " command object makes calls to model as necessary to do its work",
      "id": "d9df783e463c3ef5a6cf1e442cb5bdfe"
    },
    {
      "type": "html",
      "text": " command object notifies gui of completion / progress using window-events on Microsoft windows. On MacOS, main thread polls a thread-safe message queue",
      "id": "df772d8ddd5058d04feaa4b6de6968ea"
    },
    {
      "type": "html",
      "text": " immediately after signalling the main gui thread, command-thread deletes the command object",
      "id": "fb558a1786fd7146a92b68afbed1e265"
    },
    {
      "type": "html",
      "text": " gui can now query model safely again, and zeroes out the pointer to the dead command-object.",
      "id": "701d61ce3302e9fd33dba3aa86705349"
    },
    {
      "type": "html",
      "text": "\nIn java, use [[What Its Name]] method to asynchronously update gui from a non-main thread...",
      "id": "010a348502ac8982d9728893dfde8189"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2c18719376922a1af1b79c4af7a7b131"
    },
    {
      "type": "html",
      "text": "[[Swing Utilities]].invokeLater()?",
      "id": "7961dcedacf73c6ab3d2d0faeb2c1286"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "2c18719376922a1af1b79c4af7a7b131"
    },
    {
      "type": "html",
      "text": "\n[[Mac Osx]] GUIs (Carbon and Cocoa) are also not thread-safe: only the main thread should do anything in the GUI.",
      "id": "b74e3d70d5df34f4b3aa149b74c2895a"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ThreadedCommandObject c2.com]",
      "id": "947badf054b2b710791c7da1f5a19ce2"
    }
  ],
  "journal": [
    {
      "date": 1169315424000,
      "id": "d8aed8946b57e7db036d305547146fa2",
      "type": "create",
      "item": {
        "title": "Threaded Command Object",
        "story": [
          {
            "type": "html",
            "text": "<b>Forces</b>",
            "id": "d8d32070a19b8d28ce206ffc6e1e1318"
          },
          {
            "type": "html",
            "text": "\nGUI code needs to responsive to input while work is being done. We want to encapsulate the information needed to perform a job. We're in C++ Windows/Mac where certain issue constrain what gui threads and non-gui threads can do.",
            "id": "8f22c182275a031a49a179280ef863eb"
          },
          {
            "type": "html",
            "text": "<b>Therefore:</b>",
            "id": "5501cd07c9efd66d48cfe79488f28109"
          },
          {
            "type": "html",
            "text": "\nUse threaded command object (<i>which is WHAT, exactly?</i>) to do the work. See also [[Command Pattern]], [[Command Object]].",
            "id": "0801ff70ffa813f3e4c7955180ffedad"
          },
          {
            "type": "html",
            "text": "\nTo keep application thread-safe, avoid calling functions in the model while the threaded command object is running.",
            "id": "83d014bd8ef73d39982f730e8aeab8ec"
          },
          {
            "type": "html",
            "text": "\nAn issue in [[Microsoft Windows]] is that a GUI thread cannot safely call mutex, semaphores, etc. that could force the thread to wait, unless you use [[Msg Wait For Multiple Objects]], which includes the thread's window message queue as one of the objects to wait on, otherwise there could be deadlock if the GUI thread has to wait on a mutex while the operating system tries to send an event to its window.",
            "id": "2f4873b739360f60a0154a5334e5a310"
          },
          {
            "type": "html",
            "text": "\n[[Mac Os]] 9 preemptive threads cannot call GUI functions at all (they used to not be able to do much at all except image processing - that changed several years ago). They can make network calls, and maybe file system and other non-GUI calls. On MacOS 9, it is safe for the main (GUI) thread to wait on a semaphore, because the OS integrated theGUI-event-polling mechanism with the semaphore system.",
            "id": "022ea6a4facc731e9379ee43282c5312"
          },
          {
            "type": "html",
            "text": " before threaded command objects are created, gui calls model objects safely, without needing synchronization",
            "id": "97da158244817afafa58736cf4a7b562"
          },
          {
            "type": "html",
            "text": " when user initiates an action, gui creates threaded command object",
            "id": "1df25b0e6394de370c0b9b688f5138ba"
          },
          {
            "type": "html",
            "text": " while threaded command object is running, that 'action' part of the gui is disabled, (or maybe entire gui is disabled except for the cancel button - depending on how fine-grained your command objects and synchronization are).",
            "id": "3aa820207958a74c8def5f2821ad4c4d"
          },
          {
            "type": "html",
            "text": " while threaded command object is running, gui does not make calls to the parts of the model associated with that command object",
            "id": "06bc4cfc1a5efbf112cf0dd601def9c6"
          },
          {
            "type": "html",
            "text": " command object makes calls to model as necessary to do its work",
            "id": "d9df783e463c3ef5a6cf1e442cb5bdfe"
          },
          {
            "type": "html",
            "text": " command object notifies gui of completion / progress using window-events on Microsoft windows. On MacOS, main thread polls a thread-safe message queue",
            "id": "df772d8ddd5058d04feaa4b6de6968ea"
          },
          {
            "type": "html",
            "text": " immediately after signalling the main gui thread, command-thread deletes the command object",
            "id": "fb558a1786fd7146a92b68afbed1e265"
          },
          {
            "type": "html",
            "text": " gui can now query model safely again, and zeroes out the pointer to the dead command-object.",
            "id": "701d61ce3302e9fd33dba3aa86705349"
          },
          {
            "type": "html",
            "text": "\nIn java, use [[What Its Name]] method to asynchronously update gui from a non-main thread...",
            "id": "010a348502ac8982d9728893dfde8189"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2c18719376922a1af1b79c4af7a7b131"
          },
          {
            "type": "html",
            "text": "[[Swing Utilities]].invokeLater()?",
            "id": "7961dcedacf73c6ab3d2d0faeb2c1286"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "2c18719376922a1af1b79c4af7a7b131"
          },
          {
            "type": "html",
            "text": "\n[[Mac Osx]] GUIs (Carbon and Cocoa) are also not thread-safe: only the main thread should do anything in the GUI.",
            "id": "b74e3d70d5df34f4b3aa149b74c2895a"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ThreadedCommandObject c2.com]",
            "id": "947badf054b2b710791c7da1f5a19ce2"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1654017126547
    }
  ]
}