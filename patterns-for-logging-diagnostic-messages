{
  "title": "Patterns For Logging Diagnostic Messages",
  "story": [
    {
      "type": "html",
      "text": "[[Patterns For Logging Diagnostic Messages]] is a pattern language by [[Neil Harrison]] presented in [[Pattern Languages Of Program Design]] #3.  It's also available under [http://www.cs.wustl.edu/~schmidt/PLoP-96/ www.cs.wustl.edu].\nI really like it because I [[Have This Pattern]] language.\nThere are 3 patterns:",
      "id": "193dbefcd7c6392cb43424803df2537f"
    },
    {
      "type": "html",
      "text": " [[Diagnostic Logger]] - create a singleton through which all diagnostic messages are reported. The singleton is used to configure the destination of the messages.",
      "id": "da33fc9c36ea3049f79a6a36e851794b"
    },
    {
      "type": "html",
      "text": " [[Diagnostic Contexts]] - add contextual information to diagnostic messages. See [[Keep Error Information]].",
      "id": "d872f1ef03fe466c01a0a24b76ae107e"
    },
    {
      "type": "html",
      "text": " [[Typed Diagnostics]] - implement a hierarchy of types of diagnostic messages.",
      "id": "d291ff05df9ecd950d9e79080879a88b"
    },
    {
      "type": "html",
      "text": "-- [[John Farrell]]",
      "id": "fd94f00aabdb0e153c0af20a5f12dde2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1c1b8be1174fd788a9bda237ab2dd453"
    },
    {
      "type": "html",
      "text": "'''Three Patterns (Quoted from the paper's Abstract)",
      "id": "6d4b0c7388aa802ac5e8cf5de4f35edb"
    },
    {
      "type": "html",
      "text": " The first pattern - [[Diagnostic Logger]]",
      "id": "e3d259faa8638330cb3fb977d093ba82"
    },
    {
      "type": "html",
      "text": " Separates logging from the rest of the software, and lays the groundwork for the other patterns. ",
      "id": "4e1f764fb99f7af5e9702379755fc18e"
    },
    {
      "type": "html",
      "text": " The second pattern - [[Transactional Buckets]]",
      "id": "d2080863da22c0148e8b96063da2ef82"
    },
    {
      "type": "html",
      "text": " Provides association of diagnostics with the correct transactions. ",
      "id": "10ec8692099fba4d8de4bef6d3577d10"
    },
    {
      "type": "html",
      "text": " The third pattern - [[Typed Diagnostics]] ",
      "id": "74a32024d66bbb12349c94a60d918bd8"
    },
    {
      "type": "html",
      "text": " Helps ensure uniformity of presentation for all diagnostics. ",
      "id": "d3f551f0d34d1345ae177750906b780b"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1c1b8be1174fd788a9bda237ab2dd453"
    },
    {
      "type": "html",
      "text": "An 'aha!' moment.  I was having irritations with my existing logging framework (which used an arbitrary collection of named channels).  Reordering it as a hierarchy and handing off requests to the parent channel if undefined has made it all so much more controllable.  So I now [[Have This Pattern]] '[[Typed Diagnostics]]'.  Thanks. -- [[Frank Carver]]",
      "id": "5815f0ba2ce08cb15ebd642133e76f08"
    },
    {
      "type": "html",
      "text": "\nJust a passing note: in the program I'm working on presently, I decided to do my logging of both diagnostics and generally-interesting information via a simple [[Sys Logd]] client. There was already one written for my environment, but they're very simple to write anyway. Saved me the bother of a bunch of simple but tedious log handling code. But of course this is orthogonal to what you guys are saying. -- [[Luke Gorrie]]",
      "id": "b3286403bce5e6196940fb421768bec1"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1c1b8be1174fd788a9bda237ab2dd453"
    },
    {
      "type": "html",
      "text": "I've seen OLTP systems that contain a great deal of concurrency with many users doing their thing at the same time.  Part of the logs contain [[Diagnostic Information]], useful in determining the cause of any ills (should they appear).  The ability to view logs by user, transaction or real-time interleaved can be very valuable depending on the perspective you're after at the time.  With distributed applications this can become even more important as knowing the triggers for various events can key critical. -- [[Dan Green]]",
      "id": "485f0ebd056710b0052d0478a34ba449"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1c1b8be1174fd788a9bda237ab2dd453"
    },
    {
      "type": "html",
      "text": "log4j ([[Log For Java]]) is a free Java package that uses these patterns. -- [[Nelson Minar]]",
      "id": "6be69af36eba710ebb56ac3a9bfde19f"
    },
    {
      "type": "html",
      "text": "\n[[Log For Ruby]] and [[Log For Cpp]] are clones for [[Ruby Language]] and [[Cee Plus Plus]], respectively.",
      "id": "90ca4b7cc7d632358bf8929996e4a7fc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1c1b8be1174fd788a9bda237ab2dd453"
    },
    {
      "type": "html",
      "text": "See also [[Logging Best Practices]], [[Logging Discussion]], [[Logging Toa Queue]]",
      "id": "913fff49d43b93be915aa312997c6058"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1c1b8be1174fd788a9bda237ab2dd453"
    },
    {
      "type": "html",
      "text": "[[Category Logging]]",
      "id": "cab71b2982a46eccc53f359bfeac45ba"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?PatternsForLoggingDiagnosticMessages c2.com]",
      "id": "b2eb8b3514b5738b445edcbae4e04711"
    }
  ],
  "journal": [
    {
      "date": 1326932043000,
      "id": "dfc17d21f5497b13bc839d8f8a694d6b",
      "type": "create",
      "item": {
        "title": "Patterns For Logging Diagnostic Messages",
        "story": [
          {
            "type": "html",
            "text": "[[Patterns For Logging Diagnostic Messages]] is a pattern language by [[Neil Harrison]] presented in [[Pattern Languages Of Program Design]] #3.  It's also available under [http://www.cs.wustl.edu/~schmidt/PLoP-96/ www.cs.wustl.edu].\nI really like it because I [[Have This Pattern]] language.\nThere are 3 patterns:",
            "id": "193dbefcd7c6392cb43424803df2537f"
          },
          {
            "type": "html",
            "text": " [[Diagnostic Logger]] - create a singleton through which all diagnostic messages are reported. The singleton is used to configure the destination of the messages.",
            "id": "da33fc9c36ea3049f79a6a36e851794b"
          },
          {
            "type": "html",
            "text": " [[Diagnostic Contexts]] - add contextual information to diagnostic messages. See [[Keep Error Information]].",
            "id": "d872f1ef03fe466c01a0a24b76ae107e"
          },
          {
            "type": "html",
            "text": " [[Typed Diagnostics]] - implement a hierarchy of types of diagnostic messages.",
            "id": "d291ff05df9ecd950d9e79080879a88b"
          },
          {
            "type": "html",
            "text": "-- [[John Farrell]]",
            "id": "fd94f00aabdb0e153c0af20a5f12dde2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1c1b8be1174fd788a9bda237ab2dd453"
          },
          {
            "type": "html",
            "text": "'''Three Patterns (Quoted from the paper's Abstract)",
            "id": "6d4b0c7388aa802ac5e8cf5de4f35edb"
          },
          {
            "type": "html",
            "text": " The first pattern - [[Diagnostic Logger]]",
            "id": "e3d259faa8638330cb3fb977d093ba82"
          },
          {
            "type": "html",
            "text": " Separates logging from the rest of the software, and lays the groundwork for the other patterns. ",
            "id": "4e1f764fb99f7af5e9702379755fc18e"
          },
          {
            "type": "html",
            "text": " The second pattern - [[Transactional Buckets]]",
            "id": "d2080863da22c0148e8b96063da2ef82"
          },
          {
            "type": "html",
            "text": " Provides association of diagnostics with the correct transactions. ",
            "id": "10ec8692099fba4d8de4bef6d3577d10"
          },
          {
            "type": "html",
            "text": " The third pattern - [[Typed Diagnostics]] ",
            "id": "74a32024d66bbb12349c94a60d918bd8"
          },
          {
            "type": "html",
            "text": " Helps ensure uniformity of presentation for all diagnostics. ",
            "id": "d3f551f0d34d1345ae177750906b780b"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1c1b8be1174fd788a9bda237ab2dd453"
          },
          {
            "type": "html",
            "text": "An 'aha!' moment.  I was having irritations with my existing logging framework (which used an arbitrary collection of named channels).  Reordering it as a hierarchy and handing off requests to the parent channel if undefined has made it all so much more controllable.  So I now [[Have This Pattern]] '[[Typed Diagnostics]]'.  Thanks. -- [[Frank Carver]]",
            "id": "5815f0ba2ce08cb15ebd642133e76f08"
          },
          {
            "type": "html",
            "text": "\nJust a passing note: in the program I'm working on presently, I decided to do my logging of both diagnostics and generally-interesting information via a simple [[Sys Logd]] client. There was already one written for my environment, but they're very simple to write anyway. Saved me the bother of a bunch of simple but tedious log handling code. But of course this is orthogonal to what you guys are saying. -- [[Luke Gorrie]]",
            "id": "b3286403bce5e6196940fb421768bec1"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1c1b8be1174fd788a9bda237ab2dd453"
          },
          {
            "type": "html",
            "text": "I've seen OLTP systems that contain a great deal of concurrency with many users doing their thing at the same time.  Part of the logs contain [[Diagnostic Information]], useful in determining the cause of any ills (should they appear).  The ability to view logs by user, transaction or real-time interleaved can be very valuable depending on the perspective you're after at the time.  With distributed applications this can become even more important as knowing the triggers for various events can key critical. -- [[Dan Green]]",
            "id": "485f0ebd056710b0052d0478a34ba449"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1c1b8be1174fd788a9bda237ab2dd453"
          },
          {
            "type": "html",
            "text": "log4j ([[Log For Java]]) is a free Java package that uses these patterns. -- [[Nelson Minar]]",
            "id": "6be69af36eba710ebb56ac3a9bfde19f"
          },
          {
            "type": "html",
            "text": "\n[[Log For Ruby]] and [[Log For Cpp]] are clones for [[Ruby Language]] and [[Cee Plus Plus]], respectively.",
            "id": "90ca4b7cc7d632358bf8929996e4a7fc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1c1b8be1174fd788a9bda237ab2dd453"
          },
          {
            "type": "html",
            "text": "See also [[Logging Best Practices]], [[Logging Discussion]], [[Logging Toa Queue]]",
            "id": "913fff49d43b93be915aa312997c6058"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1c1b8be1174fd788a9bda237ab2dd453"
          },
          {
            "type": "html",
            "text": "[[Category Logging]]",
            "id": "cab71b2982a46eccc53f359bfeac45ba"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?PatternsForLoggingDiagnosticMessages c2.com]",
            "id": "b2eb8b3514b5738b445edcbae4e04711"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1705753719367
    }
  ]
}