{
  "title": "elm-pages",
  "story": [
    {
      "type": "paragraph",
      "id": "f9e82695b2034b6b",
      "text": "A statically typed site generator for Elm. [https://github.com/dillonkearns/elm-pages github], [https://elm-pages.com/ site], [https://elm-pages.com/docs docs], [https://elm-pages.com/blog/introducing-elm-pages#what-is-elm-pages-exactly? blog]"
    },
    {
      "type": "pagefold",
      "id": "1813026f8533b868",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "78dba8d5018d3ee4",
      "site": "found.ward.bay.wiki.org",
      "slug": "safe-and-familiar-welcome",
      "title": "Safe and Familiar Welcome",
      "text": "We could provide an \"index.html\" style template in the server that would present a more familiar welcome page before easing visitors into the new world of [[Federated Wiki]]."
    },
    {
      "type": "markdown",
      "id": "13fe3e905aaa3a98",
      "text": "> It turns out many services they [⇒ [[Wikimedia Research]]] inherit from wiki aren't available in the static site generator they used. These include language translation as well as simply being able to correct punctuation."
    },
    {
      "type": "pagefold",
      "id": "e0b22838f303e0e7",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "5082fc9994e2dc97",
      "text": "Getting Started [https://elm-pages.com/docs/getting-started docs]"
    },
    {
      "type": "code",
      "id": "c7e6e2899fab703a",
      "text": "cd ~/workspace/elm"
    },
    {
      "type": "paragraph",
      "id": "7bca2537362e8bd6",
      "text": "You can create a fresh elm-pages project with the init command."
    },
    {
      "type": "code",
      "id": "c032749e10e5d32f",
      "text": "npx elm-pages init my-project\ncd my-project\nnpm install\nnpm start # starts a local dev server using `elm-pages dev`\n"
    },
    {
      "type": "paragraph",
      "id": "abe8065516772a44",
      "text": "[[npx]] - Run a command from a local or remote npm package"
    },
    {
      "type": "paragraph",
      "id": "958aa4751736c84e",
      "text": "[[npm]] - javascript package manager"
    },
    {
      "type": "image",
      "id": "1b992ccdfa767947",
      "text": "elm-pages dev server running at <http://localhost:1234>",
      "size": "wide",
      "width": 416,
      "height": 260,
      "url": "/assets/plugins/image/dbed6368890c731cc43e68dcec85817c.jpg"
    },
    {
      "type": "pagefold",
      "id": "689fbf35b1c76773",
      "text": "elm-pages scripts"
    },
    {
      "type": "audio",
      "id": "e1e7113aa6928cae",
      "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/7e71e134-e83b-48a6-877f-3267e5694dec/audio/c0b4f01a-da50-42d1-984a-5ecb83cbdd5e/default_tc.mp3\n[[Elm Radio]] Episode#75: elm-pages scripts [https://elm-radio.com/episode/elm-pages-scripts/ page]"
    },
    {
      "type": "paragraph",
      "id": "ef232e5132d30604",
      "text": "We discuss elm-pages BackendTasks and how to run them as scripts with a single command."
    },
    {
      "type": "paragraph",
      "id": "57ffccd1c214786c",
      "text": "[00:02:31] […]\nstatic assets but you can also do server rendered pages. So the scope of Elm Pages V3 has changed"
    },
    {
      "type": "paragraph",
      "id": "7e973542fde285e5",
      "text": "[00:02:39]\n[…] But the heart of Elm Pages is still\n[00:02:45]\nthe same throughout all of its permutations. I've always thought of the heart of Elm Pages\n[00:02:53]\nas being this sort of engine that's able to like execute things on a back end and give\n[00:03:00]\nyou back data. In Elm Pages V2 that was called data sources."
    },
    {
      "type": "paragraph",
      "id": "6da1545f07614154",
      "text": "[00:03:49]\nIn V3 because the scope of what Elm Pages does has changed the term data source has\n[00:03:58]\nbeen renamed and the concept has changed a tiny bit. And the reason for that is because\n[00:04:04]\nin V2 it was the model was much more you try to make an HTTP request. You try to read from\n[00:04:11]\na file and if anything goes wrong you just stop the build and fail. And then the developer\n[00:04:17]\ncan read the issue. They can read a nicely formatted error message and say oh this API\n[00:04:25]\nturned to 404. Let me fix that and then rerun the build and it succeeds."
    },
    {
      "type": "paragraph",
      "id": "ff48a66fd621ce02",
      "text": "[00:04:25]\n[…] With V3 so for example if your server rendering pages maybe you get a 404 in an HTTP request. Maybe you're\n[00:04:39]\ndoing a post and you need to update something and you need to handle that error in a graceful\n[00:04:46]\nway. So that's one of the reasons why this concept has changed and become a little more\n[00:04:52]\npowerful and part of the reason why the name has changed. So in V3 the term is no longer\n[00:04:58]\ndata source is now called a BackendTask [https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/BackendTask page]. And in addition to that in V so back end task\n[00:05:05]\nit actually looks and feels a lot like the Elm core tasks."
    },
    {
      "type": "pagefold",
      "id": "f7dd0492b86c76e4",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "4a7107b5b8741d71",
      "text": "⇒ [[Lamdera]]"
    },
    {
      "type": "paragraph",
      "id": "37d5ef4acf7b9759",
      "text": "elm-pages 3.0 uses the lamdera compiler, which is a superset of the Elm compiler with some extra functionality to automatically serialize Elm types to Bytes. That means there is no more OptimizedDecoder API, you can just use regular elm/json Decoders! And no more DataSource.distill, since types are now automatically serialized all those optimizations come for free."
    },
    {
      "type": "pagefold",
      "id": "8c196930ed8c0bb6",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "ceeb089079835314",
      "text": "[00:05:34]\n[…] an Elm task is task with an error type variable and a data\n[00:05:43]\ntype variable. So if you do an Elm HTTP task it's going to give you a task HTTP dot error\n[00:05:54]\nand then your decoded data as the data type. And then you do task dot attempt. You have\n[00:06:01]\nto do dot attempt if there is an error that could happen. And then you get a message where\n[00:06:09]\nyou can deal with that result. "
    },
    {
      "type": "paragraph",
      "id": "df67e9c5de5795eb",
      "text": "[00:07:01]\nAnd one of the things that I love about back end tasks as compared to the design in [00:07:09]\nV2 with data sources is with a back end task. If there is an error in that type variable\n[00:07:16]\nthen it has a possibility of failing. If there is no error there. So if you have you know\n[00:07:21]\nback end task never my data then you know it will never fail. And that's that's something\n[00:07:28]\nthat you couldn't just look at the types in a data source in V2 and know whether or not\n[00:07:33]\nit's going to fail because that possible failure gets sort of tucked under the hood. It's not\n[00:07:39]\nrepresented by the types."
    },
    {
      "type": "paragraph",
      "id": "81e3ab212c05aecc",
      "text": "[00:08:54]\nSo that's BackendTask\n[00:08:57]\nback in tasks are the heart of Elm pages even more so in the in the V3 release that is coming\n[00:09:05]\nup soon. And and they are also the heart of Elm pages scripts. So let's talk about what\n[00:09:13]\nElm pages scripts are."
    },
    {
      "type": "paragraph",
      "id": "a4fbc4fc3ecdd6d5",
      "text": "[00:09:58]\n[…] All you need is a folder called\n[00:10:06]\nscript. So much like for an Elm review project you have a folder called review and it's a\n[00:10:13]\nregular Elm project. It has an Elm.JSON Elm pages script is the same thing. So you have\n[00:10:18]\na script folder that script folder has to have an Elm.JSON. So it's a little Elm project.\n[00:10:23]\nIt has to have Elm pages as a dependency in that Elm.JSON. And and then what you do is\n[00:10:29]\nyou do Elm pages run hello. And now if you have something in your source directories\n[00:10:37]\nlike source slash hello dot Elm it's going to go and execute that module."
    },
    {
      "type": "paragraph",
      "id": "43e887df0b698085",
      "text": "[00:12:17]\n[…] So the hello world for Elm\n[00:12:24]\npages script is you have your script folder you have an Elm.JSON you have source slash\n[00:12:32]\nhello dot Elm and in your hello dot Elm you expose a function called run. Okay. That is\n[00:12:39]\nthe main function in a way. Exactly. Run is like the main function for an Elm pages script.\n[00:12:45]\n[…] run has the type script and and then you do script dot without CLI options scripts\n[00:12:56]\ndot log hello. That's hello world."
    },
    {
      "type": "paragraph",
      "id": "d5c8352f5cf65b65",
      "text": "[00:14:25]\n[…] if you wanted to make an HTTP request you just do you know back end task dot HTTP\n[00:14:31]\ndot get JSON give it a URL give it a JSON decoder and then back end task dot and then\n[00:14:39]\nand then you can log some data that you decoded. So right. It's designed to be more like the\n[00:14:46]\nabstraction of a back end task lets you do things in a more lightweight way especially\n[00:14:51]\nfor this sort of mental model where it's just like just execute this thing. So it back end\n[00:14:56]\ntask maps very nicely to the idea of a script where it's just execute this thing or fail."
    },
    {
      "type": "paragraph",
      "id": "3256b10fd13d1b41",
      "text": "[00:17:15] The thing that's that I find really fun about back end tasks is that like it is\n[00:17:22]\nthis it's a type it's data. It's a description of an effect or of something to achieve and\n[00:17:29]\nexactly get out of it."
    },
    {
      "type": "paragraph",
      "id": "102b05ce52646bc4",
      "text": "[00:18:09]\n[…] And I think that sometimes people underestimate what you can model for\n[00:18:16]\nframeworks to be able to do like effectful things using this pattern of describing effects\n[00:18:24]\nas data. I think it's like it's actually a very powerful tool that we can do a lot with\n[00:18:29]\nand as framework designers we can put guardrails so it's very very clear what what it's possible\n[00:18:37]\nto do using those data types and where they can be used and where they cannot be used.\n[00:18:42]\nSo you know it's essentially the idea of a managed effect where like calling a back end\n[00:18:49]\ncreating a back end task in Elm pages doesn't do anything. You can create a back end task\n[00:18:55]\njust like you can create a command but when you give it to Elm pages in a place where\n[00:19:01]\nit accepts that type then it lets the framework do something with it. So the sky's the limit\n[00:19:06]\nwith how you build things with that."
    },
    {
      "type": "paragraph",
      "id": "b544e9edd9fdb3ff",
      "text": "[00:20:14]\n[…] at the end of the day Elm pages is creating,\n[00:20:21]\nit's scaffolding up an application around your application. That's sort of what a framework\n[00:20:26]\nis. And so it's at the end of the day compiling an Elm application and executing it in this\n[00:20:35]\ncase in Node.js. But it could be executing it in other contexts. It could be executing\n[00:20:39]\nit with Deno or Cloudflare workers or with Bun with different run times. But at the end\n[00:20:48]\nof the day it is using Elm which its way of communicating is through ports."
    },
    {
      "type": "paragraph",
      "id": "087395638dd60748",
      "text": "[00:21:25]\n[…] But it creates a set of abstractions for that that makes it easier for the user\n[00:21:31]\nto basically execute things in a back end and run a script in a back end context which\n[00:21:38]\nturns out is a very useful thing to do if you're you know making a static site because\n[00:21:46]\nyou want to read some files and then you want to pull that data in your front end. But that's\n[00:21:51]\nalso scripting right. So it does bring up the question like is Elm a good tool for this\n[00:21:58]\ntype of task like this kind of back end task. "
    },
    {
      "type": "paragraph",
      "id": "d26528c4d4ad283e",
      "text": "[00:21:58]\n[…] Is Elm a good tool for writing a script? Is that a good idea?"
    },
    {
      "type": "paragraph",
      "id": "07af0d115656ea2c",
      "text": "[00:23:40]\n[…] What are the gains what are the benefits that you have when you\n[00:23:46]\ndo it through Elm pages compared to just running a Node.js script for instance?\n[00:23:52]\nExactly. Yeah. Great question. And that's that's exactly the right question I think.\n[00:23:57]\nSo first of all a little bit of background. The motivation for Elm pages scripts and people\n[00:24:02]\nmight be asking like Elm pages scripts like why what does Elm pages have to do with scripts?\n[00:24:09]\nYeah the name don't match. Right. At the moment. So the Elm pages script was born out of this\n[00:24:18]\nuse case of generating like the scaffolding for a new route."
    },
    {
      "type": "paragraph",
      "id": "fce274850bc416d5",
      "text": "[00:24:40]\n[…] Ryan has created a nice feature in Elm SPA where you\n[00:24:48]\ncan do some templating and create custom commands for for scaffolding new pages. I was really\n[00:24:56]\nkeen on on using Matt's Elm code gen tool for that. And so as I was starting to build\n[00:25:03]\nthat I'm like well it would be really nice if if I could use Elm code gen to create scaffolding\n[00:25:11]\nfor new routes. But I also want to be able to read an environment variable read some\n[00:25:17]\nconfiguration from a JSON file maybe get some like JSON data from an API to figure out how\n[00:25:25]\nI'm going to generate my my new routes. And so well that's kind of what back end tasks\n[00:25:32]\nlet you do."
    },
    {
      "type": "paragraph",
      "id": "6a0ed035c6f4c8d5",
      "text": "[00:26:12]\nAnd now it's just on pages scripts. So it's really like Ruby on Rails generators where\n[00:26:18]\nit's just like that was the main motivation was Ruby on Rails generators are used for\n[00:26:25]\nif you want to create a new page with a form and then you just it's a tool for very quickly\n[00:26:31]\nbuilding up boilerplate. So it's like you know you create a new controller in Rails\n[00:26:37]\nand your template and your template is defining a form and your form has these fields and\n[00:26:42]\nyou also want to create you know some some stuff for for working with active record to\n[00:26:50]\ndefine this new user model or whatever. And so people are very productive using Rails\n[00:26:56]\ngenerators where they'll say like Rails generate whatever and and you can build custom workflows."
    },
    {
      "type": "paragraph",
      "id": "ba1f7f6f70cb5e8f",
      "text": "[00:27:20]\n[…] if you want to create a new page and be super productive where you\n[00:27:25]\ncan say hey I'm going to make a new form and it has these fields. Why not be able to write\n[00:27:30]\na custom generator a custom Elm pages script that lets you just template that. And if you\n[00:27:36]\nwant to read some configuration from something or whatever you want to do why not let users\n[00:27:41]\ndo that. So that was the motivation."
    },
    {
      "type": "paragraph",
      "id": "3709e812d411a6f9",
      "text": "[00:27:41]\n[…] Now back to the question of like why what what benefit\n[00:27:46]\ndo you gain by doing this compared to a bash script or a node script. If we look at the\n[00:27:52]\npros and cons between like writing a script in in Elm and writing a script in bash or\n[00:27:58]\nNode.js we can see some pretty pretty obvious pros and cons on either side. So let's look\n[00:28:05]\nat like writing a vanilla Elm script."
    },
    {
      "type": "paragraph",
      "id": "4b54673b91626cc6",
      "text": "[00:28:29] […] what if we just wanted to grab some HTTP\n[00:28:37]\ndata. Right. If we have to create and update to do that that becomes pretty verbose and\n[00:28:42]\ntedious. So back end tasks make that less tedious because you just do back end tasks\n[00:28:48]\ndot HTTP dot get JSON URL JSON decoder and then you can do back end tasks dot and then\n[00:28:56]\nyou don't have that boilerplate of init update subscriptions."
    },
    {
      "type": "paragraph",
      "id": "3aa636d13a9a665b",
      "text": "[00:29:30] […] The challenge is well what what things can fail. So it's very easy to\n[00:29:38]\njust run something and let it fail. Right. It just throws an exception. The problem is\n[00:29:44]\nknowing where it might fail and what implicit assumptions there are and what possible runtime\n[00:29:52]\nerrors are lurking there. So if you want to write a quick and dirty script and you just\n[00:29:56]\nsay I want to hit this API I want to grab this data I want to map the data a little\n[00:30:01]\nbit and I want to write some file or something like that. Right. Then writing a Node.js script\n[00:30:07]\nis is great for that because it doesn't get in your way with saying hey the errors might\n[00:30:13]\nbe wrong. You just pull off JSON data. It doesn't get in your way with saying hey this\n[00:30:17]\nHTTP request might fail. So that if you're just writing a vanilla Elm file you do have\n[00:30:24]\nto deal with those cases and that becomes tedious. Elm Elm pages back end tasks try\n[00:30:30]\nto address that problem."
    },
    {
      "type": "paragraph",
      "id": "9231cd72f670bb4f",
      "text": "[00:30:54]\n[…] So Elm pages v3 provides a new abstraction called a fatal error."
    },
    {
      "type": "paragraph",
      "id": "ed9a4916f17a5cfa",
      "text": "[00:33:38]\n[…]  So the at the end of the day the Elm pages expects when you say script\n[00:33:46]\ndot without CLI options and you give it a backend task the type of that backend task\n[00:33:52]\nneeds to be the error type can be a fatal error and the data type needs to be unit.\n[00:33:59]\nSo so at the end of the day you you need to give it either no possibility of an error\n[00:34:05]\nor a fatal error if anything. So doing allow fatal just throws away that recoverable error\n[00:34:14]\ndata that has the nicely structured error whereas allow fit. Yeah allow fatal just grabs\n[00:34:19]\nthat fatal error and passes it through. But if you do on error then you can continue with\n[00:34:26]\nsomething else."
    },
    {
      "type": "paragraph",
      "id": "cc28b476af265a44",
      "text": "[00:35:25]\n[…] It's just that if you have the possibility of a failure you have to turn that error type into a fatal error at the end of the day."
    },
    {
      "type": "paragraph",
      "id": "15680703201c1d6e",
      "text": "[00:36:41] […] So that's so the core APIs and Elm pages like HTTP reading from files\n[00:36:48]\nwriting to files things that can fail. They give you these two different bits of data\n[00:36:53]\nwhere you can choose I want to either recover or let the fatal exception through the fatal\n[00:36:59]\nerror through."
    },
    {
      "type": "paragraph",
      "id": "74efe273415cdfbc",
      "text": "[00:38:34]\n[…] The only thing the only reason that\n[00:38:38]\nis going to fail is because some operation that's touched the external system like the\n[00:38:46]\nfile system or made requests across HTTP failed for some reason. But it's never going to fail\n[00:38:53]\nbecause of how you wrote the code. So that is quite nice. So that is one of the plus\n[00:38:58]\nsides that I find in using Elm pages scripts. But do you see other ones compared to writing\n[00:39:06]\nbecause you compared it previously with writing a script in Elm without Elm pages which yeah\n[00:39:12]\nsounds painful. Some people have done it. It's actually not that bad in practice. I\n[00:39:17]\nhave done so myself obviously. But how does it compare to writing something in JavaScript\n[00:39:22]\nor in Bash or Perl or Python or whatever. When would you do one of those or when would\n[00:39:28]\nyou use Elm pages scripts?"
    },
    {
      "type": "paragraph",
      "id": "6be317629a4d36f1",
      "text": "[00:41:26]\n[…] if you write a script in Node.js and then it succeeds you're like okay well\n[00:41:35]\nit's possible for this script to succeed but you're not necessarily convinced that it will\n[00:41:39]\nsucceed for all cases. Whereas like if I if I write the script in Elm I would be much\n[00:41:45]\nmore confident that like oh yeah it it's good now like it's it's handling the expected JSON\n[00:41:52]\ndata I mean maybe the API sends slightly different data formats in different cases but I'm much\n[00:41:57]\nmore confident that I'm done at that point. "
    },
    {
      "type": "paragraph",
      "id": "6557840cd5fb25c1",
      "text": "[00:42:26]\n[…] I mean you don't have anys in bash. Right. Oh man working with the API data responses in bash does not sound fun. I don't even know how you would do that.\n[00:42:42]\nYeah. I would just curl it and yeah pray that it works. [[jq]] or something I don't know there\n[00:42:49]\nyeah there are tools but it's it's not fun you know so it's it's nice to use like a programming\n[00:42:54]\nlanguage for that not just a bash script."
    },
    {
      "type": "paragraph",
      "id": "545a34a042488e83",
      "text": "[00:46:15]\n[…] the goal of this design is to give you a way to be\n[00:46:23]\nproductive build things up with minimal boilerplate. You write your script hello.elm you expose\n[00:46:31]\nrun its type of script you define a back end task and then you want a quick and dirty script\n[00:46:37]\njust the happy path you allow fatal. But as you want to deal with more error cases in\n[00:46:45]\na graceful way it gives you the tools to do that and to really maintain it. So it's trying\n[00:46:51]\nto give a balance between convenience and maintainability."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "elm-pages",
        "story": []
      },
      "date": 1682007631630
    },
    {
      "item": {
        "type": "factory",
        "id": "f9e82695b2034b6b"
      },
      "id": "f9e82695b2034b6b",
      "type": "add",
      "date": 1682007640917
    },
    {
      "type": "edit",
      "id": "f9e82695b2034b6b",
      "item": {
        "type": "paragraph",
        "id": "f9e82695b2034b6b",
        "text": "A statically typed site generator for Elm."
      },
      "date": 1682007644401
    },
    {
      "type": "edit",
      "id": "f9e82695b2034b6b",
      "item": {
        "type": "paragraph",
        "id": "f9e82695b2034b6b",
        "text": "A statically typed site generator for Elm. [https://github.com/dillonkearns/elm- github]"
      },
      "date": 1682007660194
    },
    {
      "type": "edit",
      "id": "f9e82695b2034b6b",
      "item": {
        "type": "paragraph",
        "id": "f9e82695b2034b6b",
        "text": "A statically typed site generator for Elm. [https://github.com/dillonkearns/elm- github], [https://elm-pages.com/ site]"
      },
      "date": 1682007674020
    },
    {
      "item": {
        "type": "factory",
        "id": "1813026f8533b868"
      },
      "id": "1813026f8533b868",
      "type": "add",
      "after": "f9e82695b2034b6b",
      "date": 1682007705887
    },
    {
      "type": "edit",
      "id": "1813026f8533b868",
      "item": {
        "type": "pagefold",
        "id": "1813026f8533b868",
        "text": "~"
      },
      "date": 1682007708332
    },
    {
      "item": {
        "type": "factory",
        "id": "78dba8d5018d3ee4"
      },
      "id": "78dba8d5018d3ee4",
      "type": "add",
      "after": "1813026f8533b868",
      "date": 1682007718419
    },
    {
      "type": "edit",
      "id": "78dba8d5018d3ee4",
      "item": {
        "type": "reference",
        "id": "78dba8d5018d3ee4",
        "site": "found.ward.bay.wiki.org",
        "slug": "safe-and-familiar-welcome",
        "title": "Safe and Familiar Welcome",
        "text": "We could provide an \"index.html\" style template in the server that would present a more familiar welcome page before easing visitors into the new world of federated wiki."
      },
      "date": 1682007721069
    },
    {
      "id": "13fe3e905aaa3a98",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "13fe3e905aaa3a98",
        "text": "> It turns out many services they [⇒ [[Wikimedia Research]]] inherit from wiki aren't available in the static site generator they used. These include language translation as well as simply being able to correct punctuation."
      },
      "after": "78dba8d5018d3ee4",
      "attribution": {
        "page": "Elm-Form Demo"
      },
      "date": 1682007727279
    },
    {
      "type": "edit",
      "id": "f9e82695b2034b6b",
      "item": {
        "type": "paragraph",
        "id": "f9e82695b2034b6b",
        "text": "A statically typed site generator for Elm. [https://github.com/dillonkearns/elm- github], [https://elm-pages.com/ site], [https://elm-pages.com/docs docs]"
      },
      "date": 1682008599825
    },
    {
      "type": "edit",
      "id": "f9e82695b2034b6b",
      "item": {
        "type": "paragraph",
        "id": "f9e82695b2034b6b",
        "text": "A statically typed site generator for Elm. [https://github.com/dillonkearns/elm- github], [https://elm-pages.com/ site], [https://elm-pages.com/docs docs], [https://elm-pages.com/blog/introducing-elm-pages#what-is-elm-pages-exactly? blog]"
      },
      "date": 1682060627362
    },
    {
      "item": {
        "type": "pagefold",
        "id": "e0b22838f303e0e7",
        "text": "~"
      },
      "id": "e0b22838f303e0e7",
      "type": "add",
      "after": "13fe3e905aaa3a98",
      "date": 1682061222762
    },
    {
      "type": "edit",
      "id": "e0b22838f303e0e7",
      "item": {
        "type": "pagefold",
        "id": "e0b22838f303e0e7",
        "text": "~"
      },
      "date": 1682061225944
    },
    {
      "item": {
        "type": "paragraph",
        "id": "5082fc9994e2dc97",
        "text": "Getting Started"
      },
      "id": "5082fc9994e2dc97",
      "type": "add",
      "after": "e0b22838f303e0e7",
      "date": 1682061228723
    },
    {
      "type": "edit",
      "id": "5082fc9994e2dc97",
      "item": {
        "type": "paragraph",
        "id": "5082fc9994e2dc97",
        "text": "Getting Started"
      },
      "date": 1682061232029,
      "error": {
        "type": "error",
        "msg": ""
      }
    },
    {
      "type": "fork",
      "date": 1682061235372
    },
    {
      "type": "edit",
      "id": "5082fc9994e2dc97",
      "item": {
        "type": "paragraph",
        "id": "5082fc9994e2dc97",
        "text": "Getting Started [https://elm-pages.com/docs/getting-started docs]"
      },
      "date": 1682061284797
    },
    {
      "item": {
        "type": "factory",
        "id": "7bca2537362e8bd6"
      },
      "id": "7bca2537362e8bd6",
      "type": "add",
      "after": "5082fc9994e2dc97",
      "date": 1682061293871
    },
    {
      "type": "edit",
      "id": "7bca2537362e8bd6",
      "item": {
        "type": "paragraph",
        "id": "7bca2537362e8bd6",
        "text": "You can create a fresh elm-pages project with the init command."
      },
      "date": 1682061296600
    },
    {
      "item": {
        "type": "factory",
        "id": "c032749e10e5d32f"
      },
      "id": "c032749e10e5d32f",
      "type": "add",
      "after": "7bca2537362e8bd6",
      "date": 1682061304576
    },
    {
      "type": "edit",
      "id": "c032749e10e5d32f",
      "item": {
        "type": "code",
        "id": "c032749e10e5d32f",
        "text": "npx elm-pages init my-project\ncd my-project\nnpm install\nnpm start # starts a local dev server using `elm-pages dev`\n"
      },
      "date": 1682061316040
    },
    {
      "item": {
        "type": "factory",
        "id": "c7e6e2899fab703a"
      },
      "id": "c7e6e2899fab703a",
      "type": "add",
      "after": "c032749e10e5d32f",
      "date": 1682061370518
    },
    {
      "id": "c7e6e2899fab703a",
      "type": "move",
      "order": [
        "f9e82695b2034b6b",
        "1813026f8533b868",
        "78dba8d5018d3ee4",
        "13fe3e905aaa3a98",
        "e0b22838f303e0e7",
        "5082fc9994e2dc97",
        "c7e6e2899fab703a",
        "7bca2537362e8bd6",
        "c032749e10e5d32f"
      ],
      "date": 1682061374537
    },
    {
      "type": "edit",
      "id": "c7e6e2899fab703a",
      "item": {
        "type": "code",
        "id": "c7e6e2899fab703a",
        "text": "cd ~/workspace/elm"
      },
      "date": 1682061376755
    },
    {
      "item": {
        "type": "factory",
        "id": "abe8065516772a44"
      },
      "id": "abe8065516772a44",
      "type": "add",
      "after": "c032749e10e5d32f",
      "date": 1682061421381
    },
    {
      "type": "edit",
      "id": "abe8065516772a44",
      "item": {
        "type": "paragraph",
        "id": "abe8065516772a44",
        "text": "npx - Run a command from a local or remote npm package"
      },
      "date": 1682061425519
    },
    {
      "type": "edit",
      "id": "abe8065516772a44",
      "item": {
        "type": "paragraph",
        "id": "abe8065516772a44",
        "text": "[[npx]] - Run a command from a local or remote npm package"
      },
      "date": 1682061441686
    },
    {
      "item": {
        "type": "factory",
        "id": "958aa4751736c84e"
      },
      "id": "958aa4751736c84e",
      "type": "add",
      "after": "abe8065516772a44",
      "date": 1682061531106
    },
    {
      "type": "edit",
      "id": "958aa4751736c84e",
      "item": {
        "type": "paragraph",
        "id": "958aa4751736c84e",
        "text": "[[npm]] - javascript package manager"
      },
      "date": 1682061541128
    },
    {
      "item": {
        "type": "factory",
        "id": "1b992ccdfa767947"
      },
      "id": "1b992ccdfa767947",
      "type": "add",
      "after": "958aa4751736c84e",
      "date": 1682061903902
    },
    {
      "type": "edit",
      "id": "1b992ccdfa767947",
      "item": {
        "type": "image",
        "id": "1b992ccdfa767947",
        "text": "Uploaded image",
        "size": "wide",
        "width": 416,
        "height": 260,
        "url": "/assets/plugins/image/dbed6368890c731cc43e68dcec85817c.jpg"
      },
      "date": 1682061955457
    },
    {
      "type": "edit",
      "id": "1b992ccdfa767947",
      "item": {
        "type": "image",
        "id": "1b992ccdfa767947",
        "text": "elm-pages dev server running at <http://localhost:1234>",
        "size": "wide",
        "width": 416,
        "height": 260,
        "url": "/assets/plugins/image/dbed6368890c731cc43e68dcec85817c.jpg"
      },
      "date": 1682061971583
    },
    {
      "item": {
        "type": "factory",
        "id": "689fbf35b1c76773"
      },
      "id": "689fbf35b1c76773",
      "type": "add",
      "after": "1b992ccdfa767947",
      "date": 1682078407606
    },
    {
      "type": "edit",
      "id": "689fbf35b1c76773",
      "item": {
        "type": "pagefold",
        "id": "689fbf35b1c76773",
        "text": "elm-pages scripts"
      },
      "date": 1682078409877
    },
    {
      "item": {
        "type": "factory",
        "id": "e1e7113aa6928cae"
      },
      "id": "e1e7113aa6928cae",
      "type": "add",
      "after": "689fbf35b1c76773",
      "date": 1682078479673
    },
    {
      "type": "edit",
      "id": "e1e7113aa6928cae",
      "item": {
        "type": "audio",
        "id": "e1e7113aa6928cae",
        "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/7e71e134-e83b-48a6-877f-3267e5694dec/audio/c0b4f01a-da50-42d1-984a-5ecb83cbdd5e/default_tc.mp3"
      },
      "date": 1682078483002
    },
    {
      "item": {
        "type": "factory",
        "id": "57ffccd1c214786c"
      },
      "id": "57ffccd1c214786c",
      "type": "add",
      "after": "e1e7113aa6928cae",
      "date": 1682078535496
    },
    {
      "type": "edit",
      "id": "57ffccd1c214786c",
      "item": {
        "type": "paragraph",
        "id": "57ffccd1c214786c",
        "text": "[00:02:31] […]\nstatic assets but you can also do server rendered pages. So the scope of Elm Pages V3 has changed"
      },
      "date": 1682078545374
    },
    {
      "type": "edit",
      "id": "e1e7113aa6928cae",
      "item": {
        "type": "audio",
        "id": "e1e7113aa6928cae",
        "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/7e71e134-e83b-48a6-877f-3267e5694dec/audio/c0b4f01a-da50-42d1-984a-5ecb83cbdd5e/default_tc.mp3\n[[Elm Radio]]"
      },
      "date": 1682078564611
    },
    {
      "type": "edit",
      "id": "e1e7113aa6928cae",
      "item": {
        "type": "audio",
        "id": "e1e7113aa6928cae",
        "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/7e71e134-e83b-48a6-877f-3267e5694dec/audio/c0b4f01a-da50-42d1-984a-5ecb83cbdd5e/default_tc.mp3\n[[Elm Radio]] Episode#75: "
      },
      "date": 1682078584313
    },
    {
      "type": "edit",
      "id": "e1e7113aa6928cae",
      "item": {
        "type": "audio",
        "id": "e1e7113aa6928cae",
        "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/7e71e134-e83b-48a6-877f-3267e5694dec/audio/c0b4f01a-da50-42d1-984a-5ecb83cbdd5e/default_tc.mp3\n[[Elm Radio]] Episode#75: elm-pages scripts"
      },
      "date": 1682078591301
    },
    {
      "item": {
        "type": "factory",
        "id": "ef232e5132d30604"
      },
      "id": "ef232e5132d30604",
      "type": "add",
      "after": "57ffccd1c214786c",
      "date": 1682078600612
    },
    {
      "id": "ef232e5132d30604",
      "type": "move",
      "order": [
        "f9e82695b2034b6b",
        "1813026f8533b868",
        "78dba8d5018d3ee4",
        "13fe3e905aaa3a98",
        "e0b22838f303e0e7",
        "5082fc9994e2dc97",
        "c7e6e2899fab703a",
        "7bca2537362e8bd6",
        "c032749e10e5d32f",
        "abe8065516772a44",
        "958aa4751736c84e",
        "1b992ccdfa767947",
        "689fbf35b1c76773",
        "e1e7113aa6928cae",
        "ef232e5132d30604",
        "57ffccd1c214786c"
      ],
      "date": 1682078602721
    },
    {
      "type": "edit",
      "id": "ef232e5132d30604",
      "item": {
        "type": "paragraph",
        "id": "ef232e5132d30604",
        "text": "We discuss elm-pages BackendTasks and how to run them as scripts with a single command."
      },
      "date": 1682078604125
    },
    {
      "item": {
        "type": "factory",
        "id": "7e973542fde285e5"
      },
      "id": "7e973542fde285e5",
      "type": "add",
      "after": "57ffccd1c214786c",
      "date": 1682078659318
    },
    {
      "type": "edit",
      "id": "7e973542fde285e5",
      "item": {
        "type": "paragraph",
        "id": "7e973542fde285e5",
        "text": "[00:02:39]\n[…] But the heart of Elm Pages is still\n[00:02:45]\nthe same throughout all of its permutations. I've always thought of the heart of Elm Pages\n[00:02:53]\nas being this sort of engine that's able to like execute things on a back end and give\n[00:03:00]\nyou back data. In Elm Pages V2 that was called data sources."
      },
      "date": 1682078668829
    },
    {
      "item": {
        "type": "factory",
        "id": "6da1545f07614154"
      },
      "id": "6da1545f07614154",
      "type": "add",
      "after": "7e973542fde285e5",
      "date": 1682078732463
    },
    {
      "type": "edit",
      "id": "6da1545f07614154",
      "item": {
        "type": "paragraph",
        "id": "6da1545f07614154",
        "text": "[00:03:49]\nIn V3 because the scope of what Elm Pages does has changed the term data source has\n[00:03:58]\nbeen renamed and the concept has changed a tiny bit. And the reason for that is because\n[00:04:04]\nin V2 it was the model was much more you try to make an HTTP request. You try to read from\n[00:04:11]\na file and if anything goes wrong you just stop the build and fail. And then the developer\n[00:04:17]\ncan read the issue. They can read a nicely formatted error message and say oh this API\n[00:04:25]\nturned to 404. Let me fix that and then rerun the build and it succeeds."
      },
      "date": 1682078734020
    },
    {
      "item": {
        "type": "factory",
        "id": "ff48a66fd621ce02"
      },
      "id": "ff48a66fd621ce02",
      "type": "add",
      "after": "6da1545f07614154",
      "date": 1682078749038
    },
    {
      "type": "edit",
      "id": "ff48a66fd621ce02",
      "item": {
        "type": "paragraph",
        "id": "ff48a66fd621ce02",
        "text": "[00:04:25]\n[…] With V3 so for\n[00:04:32]\nexample if your server rendering pages maybe you get a 404 in an HTTP request. Maybe you're\n[00:04:39]\ndoing a post and you need to update something and you need to handle that error in a graceful\n[00:04:46]\nway. So that's one of the reasons why this concept has changed and become a little more\n[00:04:52]\npowerful and part of the reason why the name has changed. So in V3 the term is no longer\n[00:04:58]\ndata source is now called a back end task. And in addition to that in V so back end task\n[00:05:05]\nit actually looks and feels a lot like the Elm core tasks."
      },
      "date": 1682078756546
    },
    {
      "type": "edit",
      "id": "ff48a66fd621ce02",
      "item": {
        "type": "paragraph",
        "id": "ff48a66fd621ce02",
        "text": "[00:04:25]\n[…] With V3 so for example if your server rendering pages maybe you get a 404 in an HTTP request. Maybe you're\n[00:04:39]\ndoing a post and you need to update something and you need to handle that error in a graceful\n[00:04:46]\nway. So that's one of the reasons why this concept has changed and become a little more\n[00:04:52]\npowerful and part of the reason why the name has changed. So in V3 the term is no longer\n[00:04:58]\ndata source is now called a back end task. And in addition to that in V so back end task\n[00:05:05]\nit actually looks and feels a lot like the Elm core tasks."
      },
      "date": 1682078822519
    },
    {
      "type": "edit",
      "id": "ff48a66fd621ce02",
      "item": {
        "type": "paragraph",
        "id": "ff48a66fd621ce02",
        "text": "[00:04:25]\n[…] With V3 so for example if your server rendering pages maybe you get a 404 in an HTTP request. Maybe you're\n[00:04:39]\ndoing a post and you need to update something and you need to handle that error in a graceful\n[00:04:46]\nway. So that's one of the reasons why this concept has changed and become a little more\n[00:04:52]\npowerful and part of the reason why the name has changed. So in V3 the term is no longer\n[00:04:58]\ndata source is now called a BackendTask. And in addition to that in V so back end task\n[00:05:05]\nit actually looks and feels a lot like the Elm core tasks."
      },
      "date": 1682078864421
    },
    {
      "type": "edit",
      "id": "ff48a66fd621ce02",
      "item": {
        "type": "paragraph",
        "id": "ff48a66fd621ce02",
        "text": "[00:04:25]\n[…] With V3 so for example if your server rendering pages maybe you get a 404 in an HTTP request. Maybe you're\n[00:04:39]\ndoing a post and you need to update something and you need to handle that error in a graceful\n[00:04:46]\nway. So that's one of the reasons why this concept has changed and become a little more\n[00:04:52]\npowerful and part of the reason why the name has changed. So in V3 the term is no longer\n[00:04:58]\ndata source is now called a BackendTask [https://package.elm-lang.org/packages/dillonkearns/elm-pages-v3-beta/latest/BackendTask page]. And in addition to that in V so back end task\n[00:05:05]\nit actually looks and feels a lot like the Elm core tasks."
      },
      "date": 1682078879590
    },
    {
      "item": {
        "type": "factory",
        "id": "4a7107b5b8741d71"
      },
      "id": "4a7107b5b8741d71",
      "type": "add",
      "after": "ff48a66fd621ce02",
      "date": 1682079696294
    },
    {
      "type": "edit",
      "id": "4a7107b5b8741d71",
      "item": {
        "type": "paragraph",
        "id": "4a7107b5b8741d71",
        "text": "[[Lamdera]]"
      },
      "date": 1682079704159
    },
    {
      "type": "edit",
      "id": "4a7107b5b8741d71",
      "item": {
        "type": "paragraph",
        "id": "4a7107b5b8741d71",
        "text": "⇒ [[Lamdera]]"
      },
      "date": 1682079715895
    },
    {
      "item": {
        "type": "factory",
        "id": "37d5ef4acf7b9759"
      },
      "id": "37d5ef4acf7b9759",
      "type": "add",
      "after": "4a7107b5b8741d71",
      "date": 1682080052213
    },
    {
      "type": "edit",
      "id": "37d5ef4acf7b9759",
      "item": {
        "type": "paragraph",
        "id": "37d5ef4acf7b9759",
        "text": "elm-pages 3.0 uses the lamdera compiler, which is a superset of the Elm compiler with some extra functionality to automatically serialize Elm types to Bytes. That means there is no more OptimizedDecoder API, you can just use regular elm/json Decoders! And no more DataSource.distill, since types are now automatically serialized all those optimizations come for free."
      },
      "date": 1682080053832
    },
    {
      "item": {
        "type": "factory",
        "id": "8c196930ed8c0bb6"
      },
      "id": "8c196930ed8c0bb6",
      "type": "add",
      "after": "37d5ef4acf7b9759",
      "date": 1682080055799
    },
    {
      "type": "edit",
      "id": "8c196930ed8c0bb6",
      "item": {
        "type": "pagefold",
        "id": "8c196930ed8c0bb6",
        "text": "~"
      },
      "date": 1682080058880
    },
    {
      "item": {
        "type": "factory",
        "id": "f7dd0492b86c76e4"
      },
      "id": "f7dd0492b86c76e4",
      "type": "add",
      "after": "8c196930ed8c0bb6",
      "date": 1682080060029
    },
    {
      "id": "f7dd0492b86c76e4",
      "type": "move",
      "order": [
        "f9e82695b2034b6b",
        "1813026f8533b868",
        "78dba8d5018d3ee4",
        "13fe3e905aaa3a98",
        "e0b22838f303e0e7",
        "5082fc9994e2dc97",
        "c7e6e2899fab703a",
        "7bca2537362e8bd6",
        "c032749e10e5d32f",
        "abe8065516772a44",
        "958aa4751736c84e",
        "1b992ccdfa767947",
        "689fbf35b1c76773",
        "e1e7113aa6928cae",
        "ef232e5132d30604",
        "57ffccd1c214786c",
        "7e973542fde285e5",
        "6da1545f07614154",
        "ff48a66fd621ce02",
        "f7dd0492b86c76e4",
        "4a7107b5b8741d71",
        "37d5ef4acf7b9759",
        "8c196930ed8c0bb6"
      ],
      "date": 1682080062118
    },
    {
      "type": "edit",
      "id": "f7dd0492b86c76e4",
      "item": {
        "type": "pagefold",
        "id": "f7dd0492b86c76e4",
        "text": "~"
      },
      "date": 1682080065022
    },
    {
      "item": {
        "type": "factory",
        "id": "ceeb089079835314"
      },
      "id": "ceeb089079835314",
      "type": "add",
      "after": "8c196930ed8c0bb6",
      "date": 1682080295256
    },
    {
      "type": "edit",
      "id": "ceeb089079835314",
      "item": {
        "type": "paragraph",
        "id": "ceeb089079835314",
        "text": "[00:05:34]\nin V2 there was no error. So an Elm task is task with an error type variable and a data\n[00:05:43]\ntype variable. So if you do an Elm HTTP task it's going to give you a task HTTP dot error\n[00:05:54]\nand then your decoded data as the data type. And then you do task dot attempt. You have\n[00:06:01]\nto do dot attempt if there is an error that could happen. And then you get a message where\n[00:06:09]\nyou can deal with that result. "
      },
      "date": 1682080296755
    },
    {
      "type": "edit",
      "id": "ceeb089079835314",
      "item": {
        "type": "paragraph",
        "id": "ceeb089079835314",
        "text": "[00:05:34]\n[…] an Elm task is task with an error type variable and a data\n[00:05:43]\ntype variable. So if you do an Elm HTTP task it's going to give you a task HTTP dot error\n[00:05:54]\nand then your decoded data as the data type. And then you do task dot attempt. You have\n[00:06:01]\nto do dot attempt if there is an error that could happen. And then you get a message where\n[00:06:09]\nyou can deal with that result. "
      },
      "date": 1682080311088
    },
    {
      "item": {
        "type": "factory",
        "id": "df67e9c5de5795eb"
      },
      "id": "df67e9c5de5795eb",
      "type": "add",
      "after": "ceeb089079835314",
      "date": 1682080388069
    },
    {
      "type": "edit",
      "id": "df67e9c5de5795eb",
      "item": {
        "type": "paragraph",
        "id": "df67e9c5de5795eb",
        "text": "[00:07:09]\nV2 with data sources is with a back end task. If there is an error in that type variable\n[00:07:16]\nthen it has a possibility of failing. If there is no error there. So if you have you know\n[00:07:21]\nback end task never my data then you know it will never fail. And that's that's something\n[00:07:28]\nthat you couldn't just look at the types in a data source in V2 and know whether or not\n[00:07:33]\nit's going to fail because that possible failure gets sort of tucked under the hood. It's not\n[00:07:39]\nrepresented by the types."
      },
      "date": 1682080389523
    },
    {
      "type": "edit",
      "id": "df67e9c5de5795eb",
      "item": {
        "type": "paragraph",
        "id": "df67e9c5de5795eb",
        "text": "[00:07:01]\nthat. And one of the things that I love about back end tasks as compared to the design in [00:07:09]\nV2 with data sources is with a back end task. If there is an error in that type variable\n[00:07:16]\nthen it has a possibility of failing. If there is no error there. So if you have you know\n[00:07:21]\nback end task never my data then you know it will never fail. And that's that's something\n[00:07:28]\nthat you couldn't just look at the types in a data source in V2 and know whether or not\n[00:07:33]\nit's going to fail because that possible failure gets sort of tucked under the hood. It's not\n[00:07:39]\nrepresented by the types."
      },
      "date": 1682080416351
    },
    {
      "type": "edit",
      "id": "df67e9c5de5795eb",
      "item": {
        "type": "paragraph",
        "id": "df67e9c5de5795eb",
        "text": "[00:07:01]\nAnd one of the things that I love about back end tasks as compared to the design in [00:07:09]\nV2 with data sources is with a back end task. If there is an error in that type variable\n[00:07:16]\nthen it has a possibility of failing. If there is no error there. So if you have you know\n[00:07:21]\nback end task never my data then you know it will never fail. And that's that's something\n[00:07:28]\nthat you couldn't just look at the types in a data source in V2 and know whether or not\n[00:07:33]\nit's going to fail because that possible failure gets sort of tucked under the hood. It's not\n[00:07:39]\nrepresented by the types."
      },
      "date": 1682080424393
    },
    {
      "item": {
        "type": "factory",
        "id": "81e3ab212c05aecc"
      },
      "id": "81e3ab212c05aecc",
      "type": "add",
      "after": "df67e9c5de5795eb",
      "date": 1682080482063
    },
    {
      "type": "edit",
      "id": "81e3ab212c05aecc",
      "item": {
        "type": "paragraph",
        "id": "81e3ab212c05aecc",
        "text": "[00:08:54]\nthere then you know it's not possible for it to have an error. So that's back in tasks\n[00:08:57]\nback in tasks are the heart of Elm pages even more so in the in the V3 release that is coming\n[00:09:05]\nup soon. And and they are also the heart of Elm pages scripts. So let's talk about what\n[00:09:13]\nElm pages scripts are."
      },
      "date": 1682080483511
    },
    {
      "type": "edit",
      "id": "81e3ab212c05aecc",
      "item": {
        "type": "paragraph",
        "id": "81e3ab212c05aecc",
        "text": "[00:08:54]\nSo that's back in tasks\n[00:08:57]\nback in tasks are the heart of Elm pages even more so in the in the V3 release that is coming\n[00:09:05]\nup soon. And and they are also the heart of Elm pages scripts. So let's talk about what\n[00:09:13]\nElm pages scripts are."
      },
      "date": 1682080503754
    },
    {
      "type": "edit",
      "id": "81e3ab212c05aecc",
      "item": {
        "type": "paragraph",
        "id": "81e3ab212c05aecc",
        "text": "[00:08:54]\nSo that's BackendTask\n[00:08:57]\nback in tasks are the heart of Elm pages even more so in the in the V3 release that is coming\n[00:09:05]\nup soon. And and they are also the heart of Elm pages scripts. So let's talk about what\n[00:09:13]\nElm pages scripts are."
      },
      "date": 1682080516827
    },
    {
      "item": {
        "type": "factory",
        "id": "3be4b77623317afb"
      },
      "id": "3be4b77623317afb",
      "type": "add",
      "after": "81e3ab212c05aecc",
      "date": 1682080604017
    },
    {
      "type": "remove",
      "id": "3be4b77623317afb",
      "date": 1682080609787
    },
    {
      "item": {
        "type": "factory",
        "id": "a4fbc4fc3ecdd6d5"
      },
      "id": "a4fbc4fc3ecdd6d5",
      "type": "add",
      "after": "81e3ab212c05aecc",
      "date": 1682080613639
    },
    {
      "type": "edit",
      "id": "a4fbc4fc3ecdd6d5",
      "item": {
        "type": "paragraph",
        "id": "a4fbc4fc3ecdd6d5",
        "text": "[00:09:58]\n[…] All you need is a folder called\n[00:10:06]\nscript. So much like for an Elm review project you have a folder called review and it's a\n[00:10:13]\nregular Elm project. It has an Elm.JSON Elm pages script is the same thing. So you have\n[00:10:18]\na script folder that script folder has to have an Elm.JSON. So it's a little Elm project.\n[00:10:23]\nIt has to have Elm pages as a dependency in that Elm.JSON. And and then what you do is\n[00:10:29]\nyou do Elm pages run hello. And now if you have something in your source directories\n[00:10:37]\nlike source slash hello dot Elm it's going to go and execute that module."
      },
      "date": 1682080623685
    },
    {
      "item": {
        "type": "factory",
        "id": "43e887df0b698085"
      },
      "id": "43e887df0b698085",
      "type": "add",
      "after": "a4fbc4fc3ecdd6d5",
      "date": 1682080839955
    },
    {
      "type": "edit",
      "id": "43e887df0b698085",
      "item": {
        "type": "paragraph",
        "id": "43e887df0b698085",
        "text": "[00:12:17]\n[…] So the hello world for Elm\n[00:12:24]\npages script is you have your script folder you have an Elm.JSON you have source slash\n[00:12:32]\nhello dot Elm and in your hello dot Elm you expose a function called run. Okay. That is\n[00:12:39]\nthe main function in a way. Exactly. Run is like the main function for an Elm pages script.\n[00:12:45]\nYou run has the type script and and then you do script dot without CLI options scripts\n[00:12:56]\ndot log hello. That's hello world."
      },
      "date": 1682080846850
    },
    {
      "type": "edit",
      "id": "43e887df0b698085",
      "item": {
        "type": "paragraph",
        "id": "43e887df0b698085",
        "text": "[00:12:17]\n[…] So the hello world for Elm\n[00:12:24]\npages script is you have your script folder you have an Elm.JSON you have source slash\n[00:12:32]\nhello dot Elm and in your hello dot Elm you expose a function called run. Okay. That is\n[00:12:39]\nthe main function in a way. Exactly. Run is like the main function for an Elm pages script.\n[00:12:45]\n[…] run has the type script and and then you do script dot without CLI options scripts\n[00:12:56]\ndot log hello. That's hello world."
      },
      "date": 1682080868047
    },
    {
      "item": {
        "type": "factory",
        "id": "d5c8352f5cf65b65"
      },
      "id": "d5c8352f5cf65b65",
      "type": "add",
      "after": "43e887df0b698085",
      "date": 1682080996974
    },
    {
      "type": "edit",
      "id": "d5c8352f5cf65b65",
      "item": {
        "type": "paragraph",
        "id": "d5c8352f5cf65b65",
        "text": "[00:14:18]\njust log. You don't return a model and then a command with a logging thing. And then you\n[00:14:25]\nlike if you wanted to make an HTTP request you just do you know back end task dot HTTP\n[00:14:31]\ndot get JSON give it a URL give it a JSON decoder and then back end task dot and then\n[00:14:39]\nand then you can log some data that you decoded. So right. It's designed to be more like the\n[00:14:46]\nabstraction of a back end task lets you do things in a more lightweight way especially\n[00:14:51]\nfor this sort of mental model where it's just like just execute this thing. So it back end\n[00:14:56]\ntask maps very nicely to the idea of a script where it's just execute this thing or fail."
      },
      "date": 1682080998537
    },
    {
      "type": "edit",
      "id": "d5c8352f5cf65b65",
      "item": {
        "type": "paragraph",
        "id": "d5c8352f5cf65b65",
        "text": "[00:14:18]\n[…] And then you\n[00:14:25]\nlike if you wanted to make an HTTP request you just do you know back end task dot HTTP\n[00:14:31]\ndot get JSON give it a URL give it a JSON decoder and then back end task dot and then\n[00:14:39]\nand then you can log some data that you decoded. So right. It's designed to be more like the\n[00:14:46]\nabstraction of a back end task lets you do things in a more lightweight way especially\n[00:14:51]\nfor this sort of mental model where it's just like just execute this thing. So it back end\n[00:14:56]\ntask maps very nicely to the idea of a script where it's just execute this thing or fail."
      },
      "date": 1682081012287
    },
    {
      "type": "edit",
      "id": "d5c8352f5cf65b65",
      "item": {
        "type": "paragraph",
        "id": "d5c8352f5cf65b65",
        "text": "[00:14:25]\nlike if you wanted to make an HTTP request you just do you know back end task dot HTTP\n[00:14:31]\ndot get JSON give it a URL give it a JSON decoder and then back end task dot and then\n[00:14:39]\nand then you can log some data that you decoded. So right. It's designed to be more like the\n[00:14:46]\nabstraction of a back end task lets you do things in a more lightweight way especially\n[00:14:51]\nfor this sort of mental model where it's just like just execute this thing. So it back end\n[00:14:56]\ntask maps very nicely to the idea of a script where it's just execute this thing or fail."
      },
      "date": 1682081023170
    },
    {
      "type": "edit",
      "id": "d5c8352f5cf65b65",
      "item": {
        "type": "paragraph",
        "id": "d5c8352f5cf65b65",
        "text": "[00:14:25]\n[…] if you wanted to make an HTTP request you just do you know back end task dot HTTP\n[00:14:31]\ndot get JSON give it a URL give it a JSON decoder and then back end task dot and then\n[00:14:39]\nand then you can log some data that you decoded. So right. It's designed to be more like the\n[00:14:46]\nabstraction of a back end task lets you do things in a more lightweight way especially\n[00:14:51]\nfor this sort of mental model where it's just like just execute this thing. So it back end\n[00:14:56]\ntask maps very nicely to the idea of a script where it's just execute this thing or fail."
      },
      "date": 1682081030032
    },
    {
      "item": {
        "type": "factory",
        "id": "3256b10fd13d1b41"
      },
      "id": "3256b10fd13d1b41",
      "type": "add",
      "after": "d5c8352f5cf65b65",
      "date": 1682081148142
    },
    {
      "type": "edit",
      "id": "3256b10fd13d1b41",
      "item": {
        "type": "paragraph",
        "id": "3256b10fd13d1b41",
        "text": "[00:17:15] The thing that's that I find really fun about back end tasks is that like it is\n[00:17:22]\nthis it's a type it's data. It's a description of an effect or of something to achieve and\n[00:17:29]\nexactly get out of it."
      },
      "date": 1682081154822
    },
    {
      "item": {
        "type": "factory",
        "id": "102b05ce52646bc4"
      },
      "id": "102b05ce52646bc4",
      "type": "add",
      "after": "3256b10fd13d1b41",
      "date": 1682081245035
    },
    {
      "type": "edit",
      "id": "102b05ce52646bc4",
      "item": {
        "type": "paragraph",
        "id": "102b05ce52646bc4",
        "text": "[00:18:09]\npossible to do that. And I think that sometimes people underestimate what you can model for\n[00:18:16]\nframeworks to be able to do like effectful things using this pattern of describing effects\n[00:18:24]\nas data. I think it's like it's actually a very powerful tool that we can do a lot with\n[00:18:29]\nand as framework designers we can put guardrails so it's very very clear what what it's possible\n[00:18:37]\nto do using those data types and where they can be used and where they cannot be used.\n[00:18:42]\nSo you know it's essentially the idea of a managed effect where like calling a back end\n[00:18:49]\ncreating a back end task in Elm pages doesn't do anything. You can create a back end task\n[00:18:55]\njust like you can create a command but when you give it to Elm pages in a place where\n[00:19:01]\nit accepts that type then it lets the framework do something with it. So the sky's the limit\n[00:19:06]\nwith how you build things with that."
      },
      "date": 1682081246952
    },
    {
      "type": "edit",
      "id": "102b05ce52646bc4",
      "item": {
        "type": "paragraph",
        "id": "102b05ce52646bc4",
        "text": "[00:18:09]\n[…] And I think that sometimes people underestimate what you can model for\n[00:18:16]\nframeworks to be able to do like effectful things using this pattern of describing effects\n[00:18:24]\nas data. I think it's like it's actually a very powerful tool that we can do a lot with\n[00:18:29]\nand as framework designers we can put guardrails so it's very very clear what what it's possible\n[00:18:37]\nto do using those data types and where they can be used and where they cannot be used.\n[00:18:42]\nSo you know it's essentially the idea of a managed effect where like calling a back end\n[00:18:49]\ncreating a back end task in Elm pages doesn't do anything. You can create a back end task\n[00:18:55]\njust like you can create a command but when you give it to Elm pages in a place where\n[00:19:01]\nit accepts that type then it lets the framework do something with it. So the sky's the limit\n[00:19:06]\nwith how you build things with that."
      },
      "date": 1682081255290
    },
    {
      "item": {
        "type": "factory",
        "id": "b544e9edd9fdb3ff"
      },
      "id": "b544e9edd9fdb3ff",
      "type": "add",
      "after": "102b05ce52646bc4",
      "date": 1682081352271
    },
    {
      "type": "edit",
      "id": "b544e9edd9fdb3ff",
      "item": {
        "type": "paragraph",
        "id": "b544e9edd9fdb3ff",
        "text": "[00:20:14]\nAbsolutely. Well yeah as you say I mean at the end of the day Elm pages is creating,\n[00:20:21]\nit's scaffolding up an application around your application. That's sort of what a framework\n[00:20:26]\nis. And so it's at the end of the day compiling an Elm application and executing it in this\n[00:20:35]\ncase in Node.js. But it could be executing it in other contexts. It could be executing\n[00:20:39]\nit with Deno or Cloudflare workers or with Bun with different run times. But at the end\n[00:20:48]\nof the day it is using Elm which its way of communicating is through ports."
      },
      "date": 1682081353755
    },
    {
      "type": "edit",
      "id": "b544e9edd9fdb3ff",
      "item": {
        "type": "paragraph",
        "id": "b544e9edd9fdb3ff",
        "text": "[00:20:14]\n[…] at the end of the day Elm pages is creating,\n[00:20:21]\nit's scaffolding up an application around your application. That's sort of what a framework\n[00:20:26]\nis. And so it's at the end of the day compiling an Elm application and executing it in this\n[00:20:35]\ncase in Node.js. But it could be executing it in other contexts. It could be executing\n[00:20:39]\nit with Deno or Cloudflare workers or with Bun with different run times. But at the end\n[00:20:48]\nof the day it is using Elm which its way of communicating is through ports."
      },
      "date": 1682081364467
    },
    {
      "item": {
        "type": "factory",
        "id": "087395638dd60748"
      },
      "id": "087395638dd60748",
      "type": "add",
      "after": "b544e9edd9fdb3ff",
      "date": 1682081424217
    },
    {
      "type": "edit",
      "id": "087395638dd60748",
      "item": {
        "type": "paragraph",
        "id": "087395638dd60748",
        "text": "[00:21:25]\nis doing. But it creates a set of abstractions for that that makes it easier for the user\n[00:21:31]\nto basically execute things in a back end and run a script in a back end context which\n[00:21:38]\nturns out is a very useful thing to do if you're you know making a static site because\n[00:21:46]\nyou want to read some files and then you want to pull that data in your front end. But that's\n[00:21:51]\nalso scripting right. So it does bring up the question like is Elm a good tool for this\n[00:21:58]\ntype of task like this kind of back end task. "
      },
      "date": 1682081425685
    },
    {
      "type": "edit",
      "id": "087395638dd60748",
      "item": {
        "type": "paragraph",
        "id": "087395638dd60748",
        "text": "[00:21:25]\n[…] But it creates a set of abstractions for that that makes it easier for the user\n[00:21:31]\nto basically execute things in a back end and run a script in a back end context which\n[00:21:38]\nturns out is a very useful thing to do if you're you know making a static site because\n[00:21:46]\nyou want to read some files and then you want to pull that data in your front end. But that's\n[00:21:51]\nalso scripting right. So it does bring up the question like is Elm a good tool for this\n[00:21:58]\ntype of task like this kind of back end task. "
      },
      "date": 1682081434505
    },
    {
      "item": {
        "type": "factory",
        "id": "d26528c4d4ad283e"
      },
      "id": "d26528c4d4ad283e",
      "type": "add",
      "after": "087395638dd60748",
      "date": 1682081484138
    },
    {
      "type": "edit",
      "id": "d26528c4d4ad283e",
      "item": {
        "type": "paragraph",
        "id": "d26528c4d4ad283e",
        "text": "[00:21:58]\n[…] Is Elm a good tool for\n[00:22:07]\nwriting a script. Is that a good idea."
      },
      "date": 1682081492664
    },
    {
      "type": "edit",
      "id": "d26528c4d4ad283e",
      "item": {
        "type": "paragraph",
        "id": "d26528c4d4ad283e",
        "text": "[00:21:58]\n[…] Is Elm a good tool for writing a script? Is that a good idea?"
      },
      "date": 1682081513534
    },
    {
      "item": {
        "type": "factory",
        "id": "07af0d115656ea2c"
      },
      "id": "07af0d115656ea2c",
      "type": "add",
      "after": "d26528c4d4ad283e",
      "date": 1682081628747
    },
    {
      "type": "edit",
      "id": "07af0d115656ea2c",
      "item": {
        "type": "paragraph",
        "id": "07af0d115656ea2c",
        "text": "[00:23:40]\nscript could do. But is it what are the gains what are the benefits that you have when you\n[00:23:46]\ndo it through Elm pages compared to just running a Node.js script for instance.\n[00:23:52]\nExactly. Yeah. Great question. And that's that's exactly the right question I think.\n[00:23:57]\nSo first of all a little bit of background. The motivation for Elm pages scripts and people\n[00:24:02]\nmight be asking like Elm pages scripts like why what does Elm pages have to do with scripts.\n[00:24:09]\nYeah the name don't match. Right. At the moment. So the Elm pages script was born out of this\n[00:24:18]\nuse case of generating like the scaffolding for a new route"
      },
      "date": 1682081630539
    },
    {
      "type": "edit",
      "id": "07af0d115656ea2c",
      "item": {
        "type": "paragraph",
        "id": "07af0d115656ea2c",
        "text": "[00:23:40]\n[…] But is it what are the gains what are the benefits that you have when you\n[00:23:46]\ndo it through Elm pages compared to just running a Node.js script for instance.\n[00:23:52]\nExactly. Yeah. Great question. And that's that's exactly the right question I think.\n[00:23:57]\nSo first of all a little bit of background. The motivation for Elm pages scripts and people\n[00:24:02]\nmight be asking like Elm pages scripts like why what does Elm pages have to do with scripts.\n[00:24:09]\nYeah the name don't match. Right. At the moment. So the Elm pages script was born out of this\n[00:24:18]\nuse case of generating like the scaffolding for a new route"
      },
      "date": 1682081640177
    },
    {
      "type": "edit",
      "id": "07af0d115656ea2c",
      "item": {
        "type": "paragraph",
        "id": "07af0d115656ea2c",
        "text": "[00:23:40]\n[…] But is it what are the gains what are the benefits that you have when you\n[00:23:46]\ndo it through Elm pages compared to just running a Node.js script for instance?\n[00:23:52]\nExactly. Yeah. Great question. And that's that's exactly the right question I think.\n[00:23:57]\nSo first of all a little bit of background. The motivation for Elm pages scripts and people\n[00:24:02]\nmight be asking like Elm pages scripts like why what does Elm pages have to do with scripts.\n[00:24:09]\nYeah the name don't match. Right. At the moment. So the Elm pages script was born out of this\n[00:24:18]\nuse case of generating like the scaffolding for a new route"
      },
      "date": 1682081660242
    },
    {
      "type": "edit",
      "id": "07af0d115656ea2c",
      "item": {
        "type": "paragraph",
        "id": "07af0d115656ea2c",
        "text": "[00:23:40]\n[…] What are the gains what are the benefits that you have when you\n[00:23:46]\ndo it through Elm pages compared to just running a Node.js script for instance?\n[00:23:52]\nExactly. Yeah. Great question. And that's that's exactly the right question I think.\n[00:23:57]\nSo first of all a little bit of background. The motivation for Elm pages scripts and people\n[00:24:02]\nmight be asking like Elm pages scripts like why what does Elm pages have to do with scripts.\n[00:24:09]\nYeah the name don't match. Right. At the moment. So the Elm pages script was born out of this\n[00:24:18]\nuse case of generating like the scaffolding for a new route"
      },
      "date": 1682081670627
    },
    {
      "type": "edit",
      "id": "07af0d115656ea2c",
      "item": {
        "type": "paragraph",
        "id": "07af0d115656ea2c",
        "text": "[00:23:40]\n[…] What are the gains what are the benefits that you have when you\n[00:23:46]\ndo it through Elm pages compared to just running a Node.js script for instance?\n[00:23:52]\nExactly. Yeah. Great question. And that's that's exactly the right question I think.\n[00:23:57]\nSo first of all a little bit of background. The motivation for Elm pages scripts and people\n[00:24:02]\nmight be asking like Elm pages scripts like why what does Elm pages have to do with scripts?\n[00:24:09]\nYeah the name don't match. Right. At the moment. So the Elm pages script was born out of this\n[00:24:18]\nuse case of generating like the scaffolding for a new route"
      },
      "date": 1682081698572
    },
    {
      "type": "edit",
      "id": "07af0d115656ea2c",
      "item": {
        "type": "paragraph",
        "id": "07af0d115656ea2c",
        "text": "[00:23:40]\n[…] What are the gains what are the benefits that you have when you\n[00:23:46]\ndo it through Elm pages compared to just running a Node.js script for instance?\n[00:23:52]\nExactly. Yeah. Great question. And that's that's exactly the right question I think.\n[00:23:57]\nSo first of all a little bit of background. The motivation for Elm pages scripts and people\n[00:24:02]\nmight be asking like Elm pages scripts like why what does Elm pages have to do with scripts?\n[00:24:09]\nYeah the name don't match. Right. At the moment. So the Elm pages script was born out of this\n[00:24:18]\nuse case of generating like the scaffolding for a new route."
      },
      "date": 1682081723469
    },
    {
      "item": {
        "type": "factory",
        "id": "fce274850bc416d5"
      },
      "id": "fce274850bc416d5",
      "type": "add",
      "after": "07af0d115656ea2c",
      "date": 1682081819160
    },
    {
      "type": "edit",
      "id": "fce274850bc416d5",
      "item": {
        "type": "paragraph",
        "id": "fce274850bc416d5",
        "text": "[00:24:40]\nway to let users customize that. Ryan has created a nice feature in Elm SPA where you\n[00:24:48]\ncan do some templating and create custom commands for for scaffolding new pages. I was really\n[00:24:56]\nkeen on on using Matt's Elm code gen tool for that. And so as I was starting to build\n[00:25:03]\nthat I'm like well it would be really nice if if I could use Elm code gen to create scaffolding\n[00:25:11]\nfor new routes. But I also want to be able to read an environment variable read some\n[00:25:17]\nconfiguration from a JSON file maybe get some like JSON data from an API to figure out how\n[00:25:25]\nI'm going to generate my my new routes. And so well that's kind of what back end tasks\n[00:25:32]\nlet you do"
      },
      "date": 1682081820822
    },
    {
      "type": "edit",
      "id": "fce274850bc416d5",
      "item": {
        "type": "paragraph",
        "id": "fce274850bc416d5",
        "text": "[00:24:40]\n[…] Ryan has created a nice feature in Elm SPA where you\n[00:24:48]\ncan do some templating and create custom commands for for scaffolding new pages. I was really\n[00:24:56]\nkeen on on using Matt's Elm code gen tool for that. And so as I was starting to build\n[00:25:03]\nthat I'm like well it would be really nice if if I could use Elm code gen to create scaffolding\n[00:25:11]\nfor new routes. But I also want to be able to read an environment variable read some\n[00:25:17]\nconfiguration from a JSON file maybe get some like JSON data from an API to figure out how\n[00:25:25]\nI'm going to generate my my new routes. And so well that's kind of what back end tasks\n[00:25:32]\nlet you do"
      },
      "date": 1682081829339
    },
    {
      "type": "edit",
      "id": "fce274850bc416d5",
      "item": {
        "type": "paragraph",
        "id": "fce274850bc416d5",
        "text": "[00:24:40]\n[…] Ryan has created a nice feature in Elm SPA where you\n[00:24:48]\ncan do some templating and create custom commands for for scaffolding new pages. I was really\n[00:24:56]\nkeen on on using Matt's Elm code gen tool for that. And so as I was starting to build\n[00:25:03]\nthat I'm like well it would be really nice if if I could use Elm code gen to create scaffolding\n[00:25:11]\nfor new routes. But I also want to be able to read an environment variable read some\n[00:25:17]\nconfiguration from a JSON file maybe get some like JSON data from an API to figure out how\n[00:25:25]\nI'm going to generate my my new routes. And so well that's kind of what back end tasks\n[00:25:32]\nlet you do."
      },
      "date": 1682081840335
    },
    {
      "item": {
        "type": "factory",
        "id": "6a0ed035c6f4c8d5"
      },
      "id": "6a0ed035c6f4c8d5",
      "type": "add",
      "after": "fce274850bc416d5",
      "date": 1682081901859
    },
    {
      "type": "edit",
      "id": "6a0ed035c6f4c8d5",
      "item": {
        "type": "paragraph",
        "id": "6a0ed035c6f4c8d5",
        "text": "[00:26:12]\nAnd now it's just on pages scripts. So it's really like Ruby on Rails generators where\n[00:26:18]\nit's just like that was the main motivation was Ruby on Rails generators are used for\n[00:26:25]\nif you want to create a new page with a form and then you just it's a tool for very quickly\n[00:26:31]\nbuilding up boilerplate. So it's like you know you create a new controller in Rails\n[00:26:37]\nand your template and your template is defining a form and your form has these fields and\n[00:26:42]\nyou also want to create you know some some stuff for for working with active record to\n[00:26:50]\ndefine this new user model or whatever. And so people are very productive using Rails\n[00:26:56]\ngenerators where they'll say like Rails generate whatever and and you can build custom workflows."
      },
      "date": 1682081903371
    },
    {
      "item": {
        "type": "factory",
        "id": "ba1f7f6f70cb5e8f"
      },
      "id": "ba1f7f6f70cb5e8f",
      "type": "add",
      "after": "6a0ed035c6f4c8d5",
      "date": 1682081943994
    },
    {
      "type": "edit",
      "id": "ba1f7f6f70cb5e8f",
      "item": {
        "type": "paragraph",
        "id": "ba1f7f6f70cb5e8f",
        "text": "[00:27:20]\nAnd also you know if you want to create a new page and be super productive where you\n[00:27:25]\ncan say hey I'm going to make a new form and it has these fields. Why not be able to write\n[00:27:30]\na custom generator a custom Elm pages script that lets you just template that. And if you\n[00:27:36]\nwant to read some configuration from something or whatever you want to do why not let users\n[00:27:41]\ndo that. So that was the motivation."
      },
      "date": 1682081945206
    },
    {
      "type": "edit",
      "id": "ba1f7f6f70cb5e8f",
      "item": {
        "type": "paragraph",
        "id": "ba1f7f6f70cb5e8f",
        "text": "[00:27:20]\n[…]if you want to create a new page and be super productive where you\n[00:27:25]\ncan say hey I'm going to make a new form and it has these fields. Why not be able to write\n[00:27:30]\na custom generator a custom Elm pages script that lets you just template that. And if you\n[00:27:36]\nwant to read some configuration from something or whatever you want to do why not let users\n[00:27:41]\ndo that. So that was the motivation."
      },
      "date": 1682081953210
    },
    {
      "type": "edit",
      "id": "ba1f7f6f70cb5e8f",
      "item": {
        "type": "paragraph",
        "id": "ba1f7f6f70cb5e8f",
        "text": "[00:27:20]\n[…] if you want to create a new page and be super productive where you\n[00:27:25]\ncan say hey I'm going to make a new form and it has these fields. Why not be able to write\n[00:27:30]\na custom generator a custom Elm pages script that lets you just template that. And if you\n[00:27:36]\nwant to read some configuration from something or whatever you want to do why not let users\n[00:27:41]\ndo that. So that was the motivation."
      },
      "date": 1682081958844
    },
    {
      "item": {
        "type": "factory",
        "id": "3709e812d411a6f9"
      },
      "id": "3709e812d411a6f9",
      "type": "add",
      "after": "ba1f7f6f70cb5e8f",
      "date": 1682081976856
    },
    {
      "type": "edit",
      "id": "3709e812d411a6f9",
      "item": {
        "type": "paragraph",
        "id": "3709e812d411a6f9",
        "text": "[00:27:41]\ndo that. So that was the motivation. Now back to the question of like why what what benefit\n[00:27:46]\ndo you gain by doing this compared to a bash script or a node script. If we look at the\n[00:27:52]\npros and cons between like writing a script in in Elm and writing a script in bash or\n[00:27:58]\nNode.js we can see some pretty pretty obvious pros and cons on either side. So let's look\n[00:28:05]\nat like writing a vanilla Elm script."
      },
      "date": 1682081978116
    },
    {
      "type": "edit",
      "id": "3709e812d411a6f9",
      "item": {
        "type": "paragraph",
        "id": "3709e812d411a6f9",
        "text": "[00:27:41]\n[…] Now back to the question of like why what what benefit\n[00:27:46]\ndo you gain by doing this compared to a bash script or a node script. If we look at the\n[00:27:52]\npros and cons between like writing a script in in Elm and writing a script in bash or\n[00:27:58]\nNode.js we can see some pretty pretty obvious pros and cons on either side. So let's look\n[00:28:05]\nat like writing a vanilla Elm script."
      },
      "date": 1682081987815
    },
    {
      "item": {
        "type": "factory",
        "id": "4b54673b91626cc6"
      },
      "id": "4b54673b91626cc6",
      "type": "add",
      "after": "3709e812d411a6f9",
      "date": 1682082052471
    },
    {
      "type": "edit",
      "id": "4b54673b91626cc6",
      "item": {
        "type": "paragraph",
        "id": "4b54673b91626cc6",
        "text": "[00:28:29]\nyou. So we no longer have to worry about that. But what if we just wanted to grab some HTTP\n[00:28:37]\ndata. Right. If we have to create and update to do that that becomes pretty verbose and\n[00:28:42]\ntedious. So back end tasks make that less tedious because you just do back end tasks\n[00:28:48]\ndot HTTP dot get JSON URL JSON decoder and then you can do back end tasks dot and then\n[00:28:56]\nyou don't have that boilerplate of init update subscriptions."
      },
      "date": 1682082053857
    },
    {
      "type": "edit",
      "id": "4b54673b91626cc6",
      "item": {
        "type": "paragraph",
        "id": "4b54673b91626cc6",
        "text": "[00:28:29] […]what if we just wanted to grab some HTTP\n[00:28:37]\ndata. Right. If we have to create and update to do that that becomes pretty verbose and\n[00:28:42]\ntedious. So back end tasks make that less tedious because you just do back end tasks\n[00:28:48]\ndot HTTP dot get JSON URL JSON decoder and then you can do back end tasks dot and then\n[00:28:56]\nyou don't have that boilerplate of init update subscriptions."
      },
      "date": 1682082070187
    },
    {
      "type": "edit",
      "id": "4b54673b91626cc6",
      "item": {
        "type": "paragraph",
        "id": "4b54673b91626cc6",
        "text": "[00:28:29] […] what if we just wanted to grab some HTTP\n[00:28:37]\ndata. Right. If we have to create and update to do that that becomes pretty verbose and\n[00:28:42]\ntedious. So back end tasks make that less tedious because you just do back end tasks\n[00:28:48]\ndot HTTP dot get JSON URL JSON decoder and then you can do back end tasks dot and then\n[00:28:56]\nyou don't have that boilerplate of init update subscriptions."
      },
      "date": 1682082075354
    },
    {
      "item": {
        "type": "factory",
        "id": "3aa636d13a9a665b"
      },
      "id": "3aa636d13a9a665b",
      "type": "add",
      "after": "4b54673b91626cc6",
      "date": 1682082147632
    },
    {
      "type": "edit",
      "id": "3aa636d13a9a665b",
      "item": {
        "type": "paragraph",
        "id": "3aa636d13a9a665b",
        "text": "[00:29:30]\nin bash or node. The challenge is well what what things can fail. So it's very easy to\n[00:29:38]\njust run something and let it fail. Right. It just throws an exception. The problem is\n[00:29:44]\nknowing where it might fail and what implicit assumptions there are and what possible runtime\n[00:29:52]\nerrors are lurking there. So if you want to write a quick and dirty script and you just\n[00:29:56]\nsay I want to hit this API I want to grab this data I want to map the data a little\n[00:30:01]\nbit and I want to write some file or something like that. Right. Then writing a Node.js script\n[00:30:07]\nis is great for that because it doesn't get in your way with saying hey the errors might\n[00:30:13]\nbe wrong. You just pull off JSON data. It doesn't get in your way with saying hey this\n[00:30:17]\nHTTP request might fail. So that if you're just writing a vanilla Elm file you do have\n[00:30:24]\nto deal with those cases and that becomes tedious. Elm Elm pages back end tasks try\n[00:30:30]\nto address that problem."
      },
      "date": 1682082148922
    },
    {
      "type": "edit",
      "id": "3aa636d13a9a665b",
      "item": {
        "type": "paragraph",
        "id": "3aa636d13a9a665b",
        "text": "[00:29:30] […] The challenge is well what what things can fail. So it's very easy to\n[00:29:38]\njust run something and let it fail. Right. It just throws an exception. The problem is\n[00:29:44]\nknowing where it might fail and what implicit assumptions there are and what possible runtime\n[00:29:52]\nerrors are lurking there. So if you want to write a quick and dirty script and you just\n[00:29:56]\nsay I want to hit this API I want to grab this data I want to map the data a little\n[00:30:01]\nbit and I want to write some file or something like that. Right. Then writing a Node.js script\n[00:30:07]\nis is great for that because it doesn't get in your way with saying hey the errors might\n[00:30:13]\nbe wrong. You just pull off JSON data. It doesn't get in your way with saying hey this\n[00:30:17]\nHTTP request might fail. So that if you're just writing a vanilla Elm file you do have\n[00:30:24]\nto deal with those cases and that becomes tedious. Elm Elm pages back end tasks try\n[00:30:30]\nto address that problem."
      },
      "date": 1682082159847
    },
    {
      "item": {
        "type": "factory",
        "id": "9231cd72f670bb4f"
      },
      "id": "9231cd72f670bb4f",
      "type": "add",
      "after": "3aa636d13a9a665b",
      "date": 1682082180378
    },
    {
      "type": "edit",
      "id": "9231cd72f670bb4f",
      "item": {
        "type": "paragraph",
        "id": "9231cd72f670bb4f",
        "text": "[00:30:54]\n[…] So Elm pages v3 provides a new abstraction\n[00:31:03]\ncalled a fatal error."
      },
      "date": 1682082187313
    },
    {
      "type": "edit",
      "id": "9231cd72f670bb4f",
      "item": {
        "type": "paragraph",
        "id": "9231cd72f670bb4f",
        "text": "[00:30:54]\n[…] So Elm pages v3 provides a new abstraction called a fatal error."
      },
      "date": 1682082194222
    },
    {
      "item": {
        "type": "factory",
        "id": "ed9a4916f17a5cfa"
      },
      "id": "ed9a4916f17a5cfa",
      "type": "add",
      "after": "9231cd72f670bb4f",
      "date": 1682082376560
    },
    {
      "type": "edit",
      "id": "ed9a4916f17a5cfa",
      "item": {
        "type": "paragraph",
        "id": "ed9a4916f17a5cfa",
        "text": "[00:33:38]\nIf you don't. So the at the end of the day the Elm pages expects when you say script\n[00:33:46]\ndot without CLI options and you give it a backend task the type of that backend task\n[00:33:52]\nneeds to be the error type can be a fatal error and the data type needs to be unit.\n[00:33:59]\nSo so at the end of the day you you need to give it either no possibility of an error\n[00:34:05]\nor a fatal error if anything. So doing allow fatal just throws away that recoverable error\n[00:34:14]\ndata that has the nicely structured error whereas allow fit. Yeah allow fatal just grabs\n[00:34:19]\nthat fatal error and passes it through. But if you do on error then you can continue with\n[00:34:26]\nsomething else."
      },
      "date": 1682082378041
    },
    {
      "type": "edit",
      "id": "ed9a4916f17a5cfa",
      "item": {
        "type": "paragraph",
        "id": "ed9a4916f17a5cfa",
        "text": "[00:33:38]\n[…]  So the at the end of the day the Elm pages expects when you say script\n[00:33:46]\ndot without CLI options and you give it a backend task the type of that backend task\n[00:33:52]\nneeds to be the error type can be a fatal error and the data type needs to be unit.\n[00:33:59]\nSo so at the end of the day you you need to give it either no possibility of an error\n[00:34:05]\nor a fatal error if anything. So doing allow fatal just throws away that recoverable error\n[00:34:14]\ndata that has the nicely structured error whereas allow fit. Yeah allow fatal just grabs\n[00:34:19]\nthat fatal error and passes it through. But if you do on error then you can continue with\n[00:34:26]\nsomething else."
      },
      "date": 1682082388530
    },
    {
      "item": {
        "type": "factory",
        "id": "cc28b476af265a44"
      },
      "id": "cc28b476af265a44",
      "type": "add",
      "after": "ed9a4916f17a5cfa",
      "date": 1682082448337
    },
    {
      "type": "edit",
      "id": "cc28b476af265a44",
      "item": {
        "type": "paragraph",
        "id": "cc28b476af265a44",
        "text": "[00:35:25]\n[…] It's just that if you have the possibility of a\n[00:35:31]\nfailure you have to turn that error type into a fatal error at the end of the day"
      },
      "date": 1682082463134
    },
    {
      "type": "edit",
      "id": "cc28b476af265a44",
      "item": {
        "type": "paragraph",
        "id": "cc28b476af265a44",
        "text": "[00:35:25]\n[…] It's just that if you have the possibility of a failure you have to turn that error type into a fatal error at the end of the day"
      },
      "date": 1682082477732
    },
    {
      "type": "edit",
      "id": "cc28b476af265a44",
      "item": {
        "type": "paragraph",
        "id": "cc28b476af265a44",
        "text": "[00:35:25]\n[…] It's just that if you have the possibility of a failure you have to turn that error type into a fatal error at the end of the day."
      },
      "date": 1682082487325
    },
    {
      "item": {
        "type": "factory",
        "id": "15680703201c1d6e"
      },
      "id": "15680703201c1d6e",
      "type": "add",
      "after": "cc28b476af265a44",
      "date": 1682082537505
    },
    {
      "type": "edit",
      "id": "15680703201c1d6e",
      "item": {
        "type": "paragraph",
        "id": "15680703201c1d6e",
        "text": "[00:36:41] […] So that's so the core APIs and Elm pages like HTTP reading from files\n[00:36:48]\nwriting to files things that can fail. They give you these two different bits of data\n[00:36:53]\nwhere you can choose I want to either recover or let the fatal exception through the fatal\n[00:36:59]\nerror through."
      },
      "date": 1682082553300
    },
    {
      "item": {
        "type": "factory",
        "id": "74efe273415cdfbc"
      },
      "id": "74efe273415cdfbc",
      "type": "add",
      "after": "15680703201c1d6e",
      "date": 1682082679638
    },
    {
      "type": "edit",
      "id": "74efe273415cdfbc",
      "item": {
        "type": "paragraph",
        "id": "74efe273415cdfbc",
        "text": "[00:38:34]\nfunction name. So that's not going to happen anymore. The only thing the only reason that\n[00:38:38]\nis going to fail is because some operation that's touched the external system like the\n[00:38:46]\nfile system or made requests across HTTP failed for some reason. But it's never going to fail\n[00:38:53]\nbecause of how you wrote the code. So that is quite nice. So that is one of the plus\n[00:38:58]\nsides that I find in using Elm pages scripts. But do you see other ones compared to writing\n[00:39:06]\nbecause you compared it previously with writing a script in Elm without Elm pages which yeah\n[00:39:12]\nsounds painful. Some people have done it. It's actually not that bad in practice. I\n[00:39:17]\nhave done so myself obviously. But how does it compare to writing something in JavaScript\n[00:39:22]\nor in Bash or Perl or Python or whatever. When would you do one of those or when would\n[00:39:28]\nyou use Elm pages scripts."
      },
      "date": 1682082680999
    },
    {
      "type": "edit",
      "id": "74efe273415cdfbc",
      "item": {
        "type": "paragraph",
        "id": "74efe273415cdfbc",
        "text": "[00:38:34]\n[…] The only thing the only reason that\n[00:38:38]\nis going to fail is because some operation that's touched the external system like the\n[00:38:46]\nfile system or made requests across HTTP failed for some reason. But it's never going to fail\n[00:38:53]\nbecause of how you wrote the code. So that is quite nice. So that is one of the plus\n[00:38:58]\nsides that I find in using Elm pages scripts. But do you see other ones compared to writing\n[00:39:06]\nbecause you compared it previously with writing a script in Elm without Elm pages which yeah\n[00:39:12]\nsounds painful. Some people have done it. It's actually not that bad in practice. I\n[00:39:17]\nhave done so myself obviously. But how does it compare to writing something in JavaScript\n[00:39:22]\nor in Bash or Perl or Python or whatever. When would you do one of those or when would\n[00:39:28]\nyou use Elm pages scripts."
      },
      "date": 1682082695546
    },
    {
      "type": "edit",
      "id": "74efe273415cdfbc",
      "item": {
        "type": "paragraph",
        "id": "74efe273415cdfbc",
        "text": "[00:38:34]\n[…] The only thing the only reason that\n[00:38:38]\nis going to fail is because some operation that's touched the external system like the\n[00:38:46]\nfile system or made requests across HTTP failed for some reason. But it's never going to fail\n[00:38:53]\nbecause of how you wrote the code. So that is quite nice. So that is one of the plus\n[00:38:58]\nsides that I find in using Elm pages scripts. But do you see other ones compared to writing\n[00:39:06]\nbecause you compared it previously with writing a script in Elm without Elm pages which yeah\n[00:39:12]\nsounds painful. Some people have done it. It's actually not that bad in practice. I\n[00:39:17]\nhave done so myself obviously. But how does it compare to writing something in JavaScript\n[00:39:22]\nor in Bash or Perl or Python or whatever. When would you do one of those or when would\n[00:39:28]\nyou use Elm pages scripts?"
      },
      "date": 1682082717806
    },
    {
      "item": {
        "type": "factory",
        "id": "6be317629a4d36f1"
      },
      "id": "6be317629a4d36f1",
      "type": "add",
      "after": "74efe273415cdfbc",
      "date": 1682082832118
    },
    {
      "type": "edit",
      "id": "6be317629a4d36f1",
      "item": {
        "type": "paragraph",
        "id": "6be317629a4d36f1",
        "text": "[00:41:26]\nI can once like if you write a script in Node.js and then it succeeds you're like okay well\n[00:41:35]\nit's possible for this script to succeed but you're not necessarily convinced that it will\n[00:41:39]\nsucceed for all cases. Whereas like if I if I write the script in Elm I would be much\n[00:41:45]\nmore confident that like oh yeah it it's good now like it's it's handling the expected JSON\n[00:41:52]\ndata I mean maybe the API sends slightly different data formats in different cases but I'm much\n[00:41:57]\nmore confident that I'm done at that point. "
      },
      "date": 1682082833537
    },
    {
      "type": "edit",
      "id": "6be317629a4d36f1",
      "item": {
        "type": "paragraph",
        "id": "6be317629a4d36f1",
        "text": "[00:41:26]\n[…] if you write a script in Node.js and then it succeeds you're like okay well\n[00:41:35]\nit's possible for this script to succeed but you're not necessarily convinced that it will\n[00:41:39]\nsucceed for all cases. Whereas like if I if I write the script in Elm I would be much\n[00:41:45]\nmore confident that like oh yeah it it's good now like it's it's handling the expected JSON\n[00:41:52]\ndata I mean maybe the API sends slightly different data formats in different cases but I'm much\n[00:41:57]\nmore confident that I'm done at that point. "
      },
      "date": 1682082842909
    },
    {
      "item": {
        "type": "factory",
        "id": "6557840cd5fb25c1"
      },
      "id": "6557840cd5fb25c1",
      "type": "add",
      "after": "6be317629a4d36f1",
      "date": 1682082910935
    },
    {
      "type": "edit",
      "id": "6557840cd5fb25c1",
      "item": {
        "type": "paragraph",
        "id": "6557840cd5fb25c1",
        "text": "[00:42:26]\ntrickled into my system. I mean you don't have anys in bash. Right. Oh man working with\n[00:42:35]\nthe API data responses in bash does not sound fun. I don't even know how you would do that.\n[00:42:42]\nYeah. I would just curl it and yeah pray that it works. JQ or something I don't know there\n[00:42:49]\nyeah there are tools but it's it's not fun you know so it's it's nice to use like a programming\n[00:42:54]\nlanguage for that not just a bash script."
      },
      "date": 1682082912940
    },
    {
      "type": "edit",
      "id": "6557840cd5fb25c1",
      "item": {
        "type": "paragraph",
        "id": "6557840cd5fb25c1",
        "text": "[00:42:26]\n[…] I mean you don't have anys in bash. Right. Oh man working with\n[00:42:35]\nthe API data responses in bash does not sound fun. I don't even know how you would do that.\n[00:42:42]\nYeah. I would just curl it and yeah pray that it works. JQ or something I don't know there\n[00:42:49]\nyeah there are tools but it's it's not fun you know so it's it's nice to use like a programming\n[00:42:54]\nlanguage for that not just a bash script."
      },
      "date": 1682082922688
    },
    {
      "type": "edit",
      "id": "e1e7113aa6928cae",
      "item": {
        "type": "audio",
        "id": "e1e7113aa6928cae",
        "text": "https://cdn.simplecast.com/audio/6a206baa-9c8e-4c25-9037-2b674204ba84/episodes/7e71e134-e83b-48a6-877f-3267e5694dec/audio/c0b4f01a-da50-42d1-984a-5ecb83cbdd5e/default_tc.mp3\n[[Elm Radio]] Episode#75: elm-pages scripts [https://elm-radio.com/episode/elm-pages-scripts/ page]"
      },
      "date": 1682087174644
    },
    {
      "type": "edit",
      "id": "6557840cd5fb25c1",
      "item": {
        "type": "paragraph",
        "id": "6557840cd5fb25c1",
        "text": "[00:42:26]\n[…] I mean you don't have anys in bash. Right. Oh man working with the API data responses in bash does not sound fun. I don't even know how you would do that.\n[00:42:42]\nYeah. I would just curl it and yeah pray that it works. [[jq]] or something I don't know there\n[00:42:49]\nyeah there are tools but it's it's not fun you know so it's it's nice to use like a programming\n[00:42:54]\nlanguage for that not just a bash script."
      },
      "date": 1682088633093
    },
    {
      "item": {
        "type": "factory",
        "id": "545a34a042488e83"
      },
      "id": "545a34a042488e83",
      "type": "add",
      "after": "6557840cd5fb25c1",
      "date": 1682089077978
    },
    {
      "type": "edit",
      "id": "545a34a042488e83",
      "item": {
        "type": "paragraph",
        "id": "545a34a042488e83",
        "text": "[00:46:15]\nharder. So I just feel like it like the goal of this design is to give you a way to be\n[00:46:23]\nproductive build things up with minimal boilerplate. You write your script hello.elm you expose\n[00:46:31]\nrun its type of script you define a back end task and then you want a quick and dirty script\n[00:46:37]\njust the happy path you allow fatal. But as you want to deal with more error cases in\n[00:46:45]\na graceful way it gives you the tools to do that and to really maintain it. So it's trying\n[00:46:51]\nto give a balance between convenience and maintainability."
      },
      "date": 1682089080249
    },
    {
      "type": "edit",
      "id": "545a34a042488e83",
      "item": {
        "type": "paragraph",
        "id": "545a34a042488e83",
        "text": "[00:46:15]\n[…] the goal of this design is to give you a way to be\n[00:46:23]\nproductive build things up with minimal boilerplate. You write your script hello.elm you expose\n[00:46:31]\nrun its type of script you define a back end task and then you want a quick and dirty script\n[00:46:37]\njust the happy path you allow fatal. But as you want to deal with more error cases in\n[00:46:45]\na graceful way it gives you the tools to do that and to really maintain it. So it's trying\n[00:46:51]\nto give a balance between convenience and maintainability."
      },
      "date": 1682089095461
    },
    {
      "type": "edit",
      "id": "78dba8d5018d3ee4",
      "item": {
        "type": "reference",
        "id": "78dba8d5018d3ee4",
        "site": "found.ward.bay.wiki.org",
        "slug": "safe-and-familiar-welcome",
        "title": "Safe and Familiar Welcome",
        "text": "We could provide an \"index.html\" style template in the server that would present a more familiar welcome page before easing visitors into the new world of [[Federated Wiki]]."
      },
      "date": 1682370465187
    },
    {
      "type": "edit",
      "id": "f9e82695b2034b6b",
      "item": {
        "type": "paragraph",
        "id": "f9e82695b2034b6b",
        "text": "A statically typed site generator for Elm. [https://github.com/dillonkearns/elm-pages github], [https://elm-pages.com/ site], [https://elm-pages.com/docs docs], [https://elm-pages.com/blog/introducing-elm-pages#what-is-elm-pages-exactly? blog]"
      },
      "date": 1682418861904
    }
  ]
}