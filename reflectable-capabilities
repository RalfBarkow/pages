{
  "title": "Reflectable Capabilities",
  "story": [
    {
      "type": "paragraph",
      "id": "8a5f86250a2cfba9",
      "text": "The Design of Reflectable Capabilities. [https://github.com/google/reflectable.dart/blob/master/reflectable/doc/TheDesignOfReflectableCapabilities.md github] – [[Erik Ernst]]"
    },
    {
      "type": "markdown",
      "id": "0fc6039a81143cd9",
      "text": "> We have described the design of the capabilities used in the package reflectable to specify the desired level of support for [[Reflection]]. The underlying idea is that the capabilities at the base level specify a selection of operations from the API of the mirror classes, along with some simple restrictions on the allowable arguments to those operations. On top of that, the API based capabilities can be associated with specific parts of the target program (though at this point only classes) such that exactly those classes will have the reflection support specified with the API based capabilities. The target classes can be selected individually, by adding a reflector as metadata on each target class. Alternatively, target classes can be selected by quantification: For instance, it is possible to quantify over all subtypes, in which case not only the class C that holds the metadata receives reflection support, but also all subtypes of C. Finally, it is possible to admit instances of subtypes as reflectees of a small set of mirrors, such that partial reflection support is achieved for many classes, without the cost of having many mirror classes."
    },
    {
      "type": "paragraph",
      "id": "8bf453beaefcf51e",
      "text": "References:"
    },
    {
      "type": "markdown",
      "id": "708c1e7bc0300976",
      "text": "1. Gilad Bracha and David Ungar. \"Mirrors: design principles for meta-level facilities of object-oriented programming languages\". ACM SIGPLAN Notices. 24 Oct. 2004: 331-344.\n1. Brian Cantwell Smith. \"Procedural reflection in programming languages.\" 1982.\n1. Jonathan M. Sobel and Daniel P. Friedman. \"An introduction to reflection-oriented programming.\" Proceedings of Reflection. Apr. 1996. [https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.34.8581&rep=rep1&type=pdf pdf]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Reflectable Capabilities",
        "story": []
      },
      "date": 1659074239462
    },
    {
      "item": {
        "type": "factory",
        "id": "329cc479fbba1c23"
      },
      "id": "329cc479fbba1c23",
      "type": "add",
      "date": 1659074242957
    },
    {
      "type": "remove",
      "id": "329cc479fbba1c23",
      "date": 1659074246947
    },
    {
      "item": {
        "type": "factory",
        "id": "8a5f86250a2cfba9"
      },
      "id": "8a5f86250a2cfba9",
      "type": "add",
      "date": 1659074253169
    },
    {
      "type": "edit",
      "id": "8a5f86250a2cfba9",
      "item": {
        "type": "paragraph",
        "id": "8a5f86250a2cfba9",
        "text": "The Design of Reflectable Capabilities. "
      },
      "date": 1659074256999
    },
    {
      "type": "edit",
      "id": "8a5f86250a2cfba9",
      "item": {
        "type": "paragraph",
        "id": "8a5f86250a2cfba9",
        "text": "The Design of Reflectable Capabilities. [https://github.com/google/reflectable.dart/blob/master/reflectable/doc/TheDesignOfReflectableCapabilities.md github]"
      },
      "date": 1659074268873
    },
    {
      "item": {
        "type": "factory",
        "id": "65cc3c2c8dcb38fe"
      },
      "id": "65cc3c2c8dcb38fe",
      "type": "add",
      "after": "8a5f86250a2cfba9",
      "date": 1659074319365
    },
    {
      "type": "remove",
      "id": "65cc3c2c8dcb38fe",
      "date": 1659074333397
    },
    {
      "type": "edit",
      "id": "8a5f86250a2cfba9",
      "item": {
        "type": "paragraph",
        "id": "8a5f86250a2cfba9",
        "text": "The Design of Reflectable Capabilities. [https://github.com/google/reflectable.dart/blob/master/reflectable/doc/TheDesignOfReflectableCapabilities.md github] – [[Erik Ernst]]"
      },
      "date": 1659074335858
    },
    {
      "item": {
        "type": "factory",
        "id": "0fc6039a81143cd9"
      },
      "id": "0fc6039a81143cd9",
      "type": "add",
      "after": "8a5f86250a2cfba9",
      "date": 1659074587800
    },
    {
      "type": "edit",
      "id": "0fc6039a81143cd9",
      "item": {
        "type": "markdown",
        "id": "0fc6039a81143cd9",
        "text": "> We have described the design of the capabilities used in the package reflectable to specify the desired level of support for reflection. The underlying idea is that the capabilities at the base level specify a selection of operations from the API of the mirror classes, along with some simple restrictions on the allowable arguments to those operations. On top of that, the API based capabilities can be associated with specific parts of the target program (though at this point only classes) such that exactly those classes will have the reflection support specified with the API based capabilities. The target classes can be selected individually, by adding a reflector as metadata on each target class. Alternatively, target classes can be selected by quantification: For instance, it is possible to quantify over all subtypes, in which case not only the class C that holds the metadata receives reflection support, but also all subtypes of C. Finally, it is possible to admit instances of subtypes as reflectees of a small set of mirrors, such that partial reflection support is achieved for many classes, without the cost of having many mirror classes."
      },
      "date": 1659074590630
    },
    {
      "type": "edit",
      "id": "0fc6039a81143cd9",
      "item": {
        "type": "markdown",
        "id": "0fc6039a81143cd9",
        "text": "> We have described the design of the capabilities used in the package reflectable to specify the desired level of support for [[reflection]]. The underlying idea is that the capabilities at the base level specify a selection of operations from the API of the mirror classes, along with some simple restrictions on the allowable arguments to those operations. On top of that, the API based capabilities can be associated with specific parts of the target program (though at this point only classes) such that exactly those classes will have the reflection support specified with the API based capabilities. The target classes can be selected individually, by adding a reflector as metadata on each target class. Alternatively, target classes can be selected by quantification: For instance, it is possible to quantify over all subtypes, in which case not only the class C that holds the metadata receives reflection support, but also all subtypes of C. Finally, it is possible to admit instances of subtypes as reflectees of a small set of mirrors, such that partial reflection support is achieved for many classes, without the cost of having many mirror classes."
      },
      "date": 1659074608040
    },
    {
      "item": {
        "type": "factory",
        "id": "8bf453beaefcf51e"
      },
      "id": "8bf453beaefcf51e",
      "type": "add",
      "after": "0fc6039a81143cd9",
      "date": 1659074633516
    },
    {
      "type": "edit",
      "id": "8bf453beaefcf51e",
      "item": {
        "type": "paragraph",
        "id": "8bf453beaefcf51e",
        "text": "References:"
      },
      "date": 1659074636926
    },
    {
      "item": {
        "type": "factory",
        "id": "708c1e7bc0300976"
      },
      "id": "708c1e7bc0300976",
      "type": "add",
      "after": "8bf453beaefcf51e",
      "date": 1659074645872
    },
    {
      "type": "edit",
      "id": "708c1e7bc0300976",
      "item": {
        "type": "markdown",
        "id": "708c1e7bc0300976",
        "text": "1. Gilad Bracha and David Ungar. \"Mirrors: design principles for meta-level facilities of object-oriented programming languages\". ACM SIGPLAN Notices. 24 Oct. 2004: 331-344.\n1. Brian Cantwell Smith. \"Procedural reflection in programming languages.\" 1982.\n1. Jonathan M. Sobel and Daniel P. Friedman. \"An introduction to reflection-oriented programming.\" Proceedings of Reflection. Apr. 1996."
      },
      "date": 1659074660929
    },
    {
      "type": "edit",
      "id": "708c1e7bc0300976",
      "item": {
        "type": "markdown",
        "id": "708c1e7bc0300976",
        "text": "1. Gilad Bracha and David Ungar. \"Mirrors: design principles for meta-level facilities of object-oriented programming languages\". ACM SIGPLAN Notices. 24 Oct. 2004: 331-344.\n1. Brian Cantwell Smith. \"Procedural reflection in programming languages.\" 1982.\n1. Jonathan M. Sobel and Daniel P. Friedman. \"An introduction to reflection-oriented programming.\" Proceedings of Reflection. Apr. 1996. [https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.34.8581&rep=rep1&type=pdf pdf]"
      },
      "date": 1659074809231
    },
    {
      "type": "edit",
      "id": "0fc6039a81143cd9",
      "item": {
        "type": "markdown",
        "id": "0fc6039a81143cd9",
        "text": "> We have described the design of the capabilities used in the package reflectable to specify the desired level of support for [[Reflection]]. The underlying idea is that the capabilities at the base level specify a selection of operations from the API of the mirror classes, along with some simple restrictions on the allowable arguments to those operations. On top of that, the API based capabilities can be associated with specific parts of the target program (though at this point only classes) such that exactly those classes will have the reflection support specified with the API based capabilities. The target classes can be selected individually, by adding a reflector as metadata on each target class. Alternatively, target classes can be selected by quantification: For instance, it is possible to quantify over all subtypes, in which case not only the class C that holds the metadata receives reflection support, but also all subtypes of C. Finally, it is possible to admit instances of subtypes as reflectees of a small set of mirrors, such that partial reflection support is achieved for many classes, without the cost of having many mirror classes."
      },
      "date": 1659075275727
    }
  ]
}