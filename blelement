{
  "title": "BlElement",
  "story": [
    {
      "type": "markdown",
      "id": "05f949bee7fc04b1",
      "text": "# Welcome to [[Bloc]]\nI am the root class of all visual elements in Bloc and can be composed out of other elements that we will refer to as `children`. \n## Visual properties\nBeing a root class and a core element, I let users configure a few essential visual properties such as background, border, opacity, size and a few more. Let's go through each of them.\n### Background\n{{gtClass:BlBackground}}describes how an element should be filled, e.g. its background.\n{{gtClass:BlBackgroundExamples}} gives a detailed insight in the world of bloc backgrounds.\n### Border\n{{gtClass:BlBorder}} is a visual property that defines how the outline of the element should be rendered. It also influences `stroked bounds` of the element.\n{{gtClass:BlBorderExamples}} provides more detailed information about a border.\n### Opacity\nOpacity defines how transparent an element is. It does not influence event propagation.\n{{gtClass:BlOpacityExamples}} shows in details how opacity affects the element.\n## Composition\nTo be in-line with Bloc design, we prefer composition over inheritance. Thus it is better to have tiny bloc elements - each with a small and simple API and clear responsibilities - that can later be composed into a more sophisticated graphical scene. In this paragraph we will learn the basic composition aspects and corresponding API.\n\nThe composition relation between parent and children is 1:N meaning that an element can have at most one parent. Therefore by design it is only possible to add an element to just one other element. Trying to add an element that is already a child to some other element results in {{gtClass:BlAlreadyAddedAsChildError}} \n\nBloc elements provide a set of methods to add and remove children.\n### Adding children\nThere are four ways to add some given element as a direct child to another element.\n\nThe most commonly used way to add a child is to use {{gtMethod:BlElement>>#addChild:}} which adds a given element as the last child in the collection of children.\n"
    },
    {
      "type": "markdown",
      "id": "18ba2e081c12ebd5",
      "text": "\n"
    },
    {
      "type": "code",
      "id": "22a0e936cd0bab68",
      "text": "| parent child |\nparent := BlElement new size: 100@100; background: Color veryVeryLightGray.\nchild := BlElement new size: 50@50; background: Color red lighter.\nparent addChild: child\n"
    },
    {
      "type": "markdown",
      "id": "ff5953b2ed9872d0",
      "text": "Users may also choose to add an element as the first child, for that purpose Bloc provides {{gtMethod:BlElement>>#addChildFirst:}}.\n## Geometry and bounds\nEvery element is responsible for drawing itself. At the same time, every element has a {{gtClass:BlElementGeometry}} that defines the bounds and the clipping. There are many types of geometry available:\n```\nBlElementGeometry allSubclasses\n```\n\nSee {{gtClass:BlGeometryVisualAndLayoutBoundsExamples}} for concrete details.\n## Layout\nThere are many built-in {{gtClass:BlLayout}} strategies available, or you can create your own.\n## Tutorial\nYou can learn Bloc following a [[memory game]] tutorial: [00-memory-game.pillar](fileLocator://gtResource/feenkcom/Bloc/doc/tutorial-memory-game/00-memory-game.pillar).\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "BlElement",
        "story": []
      },
      "date": 1651787951522
    },
    {
      "item": {
        "type": "markdown",
        "id": "05f949bee7fc04b1",
        "text": "# Welcome to [[Bloc]]\nI am the root class of all visual elements in Bloc and can be composed out of other elements that we will refer to as `children`. \n## Visual properties\nBeing a root class and a core element, I let users configure a few essential visual properties such as background, border, opacity, size and a few more. Let's go through each of them.\n### Background\n{{gtClass:BlBackground}}describes how an element should be filled, e.g. its background.\n{{gtClass:BlBackgroundExamples}} gives a detailed insight in the world of bloc backgrounds.\n### Border\n{{gtClass:BlBorder}} is a visual property that defines how the outline of the element should be rendered. It also influences `stroked bounds` of the element.\n{{gtClass:BlBorderExamples}} provides more detailed information about a border.\n### Opacity\nOpacity defines how transparent an element is. It does not influence event propagation.\n{{gtClass:BlOpacityExamples}} shows in details how opacity affects the element.\n## Composition\nTo be in-line with Bloc design, we prefer composition over inheritance. Thus it is better to have tiny bloc elements - each with a small and simple API and clear responsibilities - that can later be composed into a more sophisticated graphical scene. In this paragraph we will learn the basic composition aspects and corresponding API.\n\nThe composition relation between parent and children is 1:N meaning that an element can have at most one parent. Therefore by design it is only possible to add an element to just one other element. Trying to add an element that is already a child to some other element results in {{gtClass:BlAlreadyAddedAsChildError}} \n\nBloc elements provide a set of methods to add and remove children.\n### Adding children\nThere are four ways to add some given element as a direct child to another element.\n\nThe most commonly used way to add a child is to use {{gtMethod:BlElement>>#addChild:}} which adds a given element as the last child in the collection of children.\n"
      },
      "id": "05f949bee7fc04b1",
      "type": "add",
      "date": 1651787957989
    },
    {
      "type": "edit",
      "id": "05f949bee7fc04b1",
      "item": {
        "type": "markdown",
        "id": "05f949bee7fc04b1",
        "text": "# Welcome to [[Bloc]]\nI am the root class of all visual elements in Bloc and can be composed out of other elements that we will refer to as `children`. \n## Visual properties\nBeing a root class and a core element, I let users configure a few essential visual properties such as background, border, opacity, size and a few more. Let's go through each of them.\n### Background\n{{gtClass:BlBackground}}describes how an element should be filled, e.g. its background.\n{{gtClass:BlBackgroundExamples}} gives a detailed insight in the world of bloc backgrounds.\n### Border\n{{gtClass:BlBorder}} is a visual property that defines how the outline of the element should be rendered. It also influences `stroked bounds` of the element.\n{{gtClass:BlBorderExamples}} provides more detailed information about a border.\n### Opacity\nOpacity defines how transparent an element is. It does not influence event propagation.\n{{gtClass:BlOpacityExamples}} shows in details how opacity affects the element.\n## Composition\nTo be in-line with Bloc design, we prefer composition over inheritance. Thus it is better to have tiny bloc elements - each with a small and simple API and clear responsibilities - that can later be composed into a more sophisticated graphical scene. In this paragraph we will learn the basic composition aspects and corresponding API.\n\nThe composition relation between parent and children is 1:N meaning that an element can have at most one parent. Therefore by design it is only possible to add an element to just one other element. Trying to add an element that is already a child to some other element results in {{gtClass:BlAlreadyAddedAsChildError}} \n\nBloc elements provide a set of methods to add and remove children.\n### Adding children\nThere are four ways to add some given element as a direct child to another element.\n\nThe most commonly used way to add a child is to use {{gtMethod:BlElement>>#addChild:}} which adds a given element as the last child in the collection of children.\n"
      },
      "date": 1651787960504
    },
    {
      "type": "edit",
      "id": "05f949bee7fc04b1",
      "item": {
        "type": "markdown",
        "id": "05f949bee7fc04b1",
        "text": "# Welcome to [[Bloc]]\nI am the root class of all visual elements in Bloc and can be composed out of other elements that we will refer to as `children`. \n## Visual properties\nBeing a root class and a core element, I let users configure a few essential visual properties such as background, border, opacity, size and a few more. Let's go through each of them.\n### Background\n{{gtClass:BlBackground}}describes how an element should be filled, e.g. its background.\n{{gtClass:BlBackgroundExamples}} gives a detailed insight in the world of bloc backgrounds.\n### Border\n{{gtClass:BlBorder}} is a visual property that defines how the outline of the element should be rendered. It also influences `stroked bounds` of the element.\n{{gtClass:BlBorderExamples}} provides more detailed information about a border.\n### Opacity\nOpacity defines how transparent an element is. It does not influence event propagation.\n{{gtClass:BlOpacityExamples}} shows in details how opacity affects the element.\n## Composition\nTo be in-line with Bloc design, we prefer composition over inheritance. Thus it is better to have tiny bloc elements - each with a small and simple API and clear responsibilities - that can later be composed into a more sophisticated graphical scene. In this paragraph we will learn the basic composition aspects and corresponding API.\n\nThe composition relation between parent and children is 1:N meaning that an element can have at most one parent. Therefore by design it is only possible to add an element to just one other element. Trying to add an element that is already a child to some other element results in {{gtClass:BlAlreadyAddedAsChildError}} \n\nBloc elements provide a set of methods to add and remove children.\n### Adding children\nThere are four ways to add some given element as a direct child to another element.\n\nThe most commonly used way to add a child is to use {{gtMethod:BlElement>>#addChild:}} which adds a given element as the last child in the collection of children.\n"
      },
      "date": 1651787971829
    },
    {
      "type": "edit",
      "id": "05f949bee7fc04b1",
      "item": {
        "type": "markdown",
        "id": "05f949bee7fc04b1",
        "text": "# Welcome to [[Bloc]]\nI am the root class of all visual elements in Bloc and can be composed out of other elements that we will refer to as `children`. \n## Visual properties\nBeing a root class and a core element, I let users configure a few essential visual properties such as background, border, opacity, size and a few more. Let's go through each of them.\n### Background\n{{gtClass:BlBackground}}describes how an element should be filled, e.g. its background.\n{{gtClass:BlBackgroundExamples}} gives a detailed insight in the world of bloc backgrounds.\n### Border\n{{gtClass:BlBorder}} is a visual property that defines how the outline of the element should be rendered. It also influences `stroked bounds` of the element.\n{{gtClass:BlBorderExamples}} provides more detailed information about a border.\n### Opacity\nOpacity defines how transparent an element is. It does not influence event propagation.\n{{gtClass:BlOpacityExamples}} shows in details how opacity affects the element.\n## Composition\nTo be in-line with Bloc design, we prefer composition over inheritance. Thus it is better to have tiny bloc elements - each with a small and simple API and clear responsibilities - that can later be composed into a more sophisticated graphical scene. In this paragraph we will learn the basic composition aspects and corresponding API.\n\nThe composition relation between parent and children is 1:N meaning that an element can have at most one parent. Therefore by design it is only possible to add an element to just one other element. Trying to add an element that is already a child to some other element results in {{gtClass:BlAlreadyAddedAsChildError}} \n\nBloc elements provide a set of methods to add and remove children.\n### Adding children\nThere are four ways to add some given element as a direct child to another element.\n\nThe most commonly used way to add a child is to use {{gtMethod:BlElement>>#addChild:}} which adds a given element as the last child in the collection of children.\n"
      },
      "date": 1651788023522
    },
    {
      "type": "add",
      "id": "18ba2e081c12ebd5",
      "item": {
        "type": "markdown",
        "id": "18ba2e081c12ebd5",
        "text": "\n"
      },
      "after": "05f949bee7fc04b1",
      "date": 1651788029205
    },
    {
      "item": {
        "type": "code",
        "id": "22a0e936cd0bab68",
        "text": "| parent child |\nparent := BlElement new size: 100@100; background: Color veryVeryLightGray.\nchild := BlElement new size: 50@50; background: Color red lighter.\nparent addChild: child\n"
      },
      "id": "22a0e936cd0bab68",
      "type": "add",
      "after": "ff5953b2ed9872d0",
      "date": 1651788031399
    },
    {
      "id": "22a0e936cd0bab68",
      "type": "move",
      "order": [
        "05f949bee7fc04b1",
        "18ba2e081c12ebd5",
        "22a0e936cd0bab68",
        "ff5953b2ed9872d0"
      ],
      "date": 1651788033240,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "add",
      "id": "ff5953b2ed9872d0",
      "item": {
        "type": "markdown",
        "id": "ff5953b2ed9872d0",
        "text": "\nUsers may also choose to add an element as the first child, for that purpose Bloc provides {{gtMethod:BlElement>>#addChildFirst:}}.\n## Geometry and bounds\nEvery element is responsible for drawing itself. At the same time, every element has a {{gtClass:BlElementGeometry}} that defines the bounds and the clipping. There are many types of geometry available:\n```\nBlElementGeometry allSubclasses\n```\n\nSee {{gtClass:BlGeometryVisualAndLayoutBoundsExamples}} for concrete details.\n## Layout\nThere are many built-in {{gtClass:BlLayout}} strategies available, or you can create your own.\n## Tutorial\nYou can learn Bloc following a memory game tutorial: [00-memory-game.pillar](fileLocator://gtResource/feenkcom/Bloc/doc/tutorial-memory-game/00-memory-game.pillar).\n"
      },
      "after": "18ba2e081c12ebd5",
      "date": 1651788034437
    },
    {
      "type": "edit",
      "id": "18ba2e081c12ebd5",
      "item": {
        "type": "markdown",
        "id": "18ba2e081c12ebd5",
        "text": "\n"
      },
      "date": 1651788039420
    },
    {
      "type": "edit",
      "id": "22a0e936cd0bab68",
      "item": {
        "type": "code",
        "id": "22a0e936cd0bab68",
        "text": "| parent child |\nparent := BlElement new size: 100@100; background: Color veryVeryLightGray.\nchild := BlElement new size: 50@50; background: Color red lighter.\nparent addChild: child\n"
      },
      "date": 1651788041169
    },
    {
      "type": "edit",
      "id": "22a0e936cd0bab68",
      "item": {
        "type": "code",
        "id": "22a0e936cd0bab68",
        "text": "| parent child |\nparent := BlElement new size: 100@100; background: Color veryVeryLightGray.\nchild := BlElement new size: 50@50; background: Color red lighter.\nparent addChild: child\n"
      },
      "date": 1651788048223
    },
    {
      "type": "fork",
      "date": 1651788052543
    },
    {
      "type": "edit",
      "id": "ff5953b2ed9872d0",
      "item": {
        "type": "markdown",
        "id": "ff5953b2ed9872d0",
        "text": "Users may also choose to add an element as the first child, for that purpose Bloc provides {{gtMethod:BlElement>>#addChildFirst:}}.\n## Geometry and bounds\nEvery element is responsible for drawing itself. At the same time, every element has a {{gtClass:BlElementGeometry}} that defines the bounds and the clipping. There are many types of geometry available:\n```\nBlElementGeometry allSubclasses\n```\n\nSee {{gtClass:BlGeometryVisualAndLayoutBoundsExamples}} for concrete details.\n## Layout\nThere are many built-in {{gtClass:BlLayout}} strategies available, or you can create your own.\n## Tutorial\nYou can learn Bloc following a memory game tutorial: [00-memory-game.pillar](fileLocator://gtResource/feenkcom/Bloc/doc/tutorial-memory-game/00-memory-game.pillar).\n"
      },
      "date": 1651788088287
    },
    {
      "type": "edit",
      "id": "ff5953b2ed9872d0",
      "item": {
        "type": "markdown",
        "id": "ff5953b2ed9872d0",
        "text": "Users may also choose to add an element as the first child, for that purpose Bloc provides {{gtMethod:BlElement>>#addChildFirst:}}.\n## Geometry and bounds\nEvery element is responsible for drawing itself. At the same time, every element has a {{gtClass:BlElementGeometry}} that defines the bounds and the clipping. There are many types of geometry available:\n```\nBlElementGeometry allSubclasses\n```\n\nSee {{gtClass:BlGeometryVisualAndLayoutBoundsExamples}} for concrete details.\n## Layout\nThere are many built-in {{gtClass:BlLayout}} strategies available, or you can create your own.\n## Tutorial\nYou can learn Bloc following a [[memory game]] tutorial: [00-memory-game.pillar](fileLocator://gtResource/feenkcom/Bloc/doc/tutorial-memory-game/00-memory-game.pillar).\n"
      },
      "date": 1651788124918
    },
    {
      "id": "22a0e936cd0bab68",
      "type": "move",
      "order": [
        "05f949bee7fc04b1",
        "18ba2e081c12ebd5",
        "22a0e936cd0bab68",
        "ff5953b2ed9872d0"
      ],
      "date": 1651788222712
    }
  ]
}