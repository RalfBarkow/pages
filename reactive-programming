{
  "title": "Reactive Programming",
  "story": [
    {
      "type": "html",
      "text": "Reactive Programming is a style of [[Dataflow Programming]] where changes in input values are propagated through a function call graph. This should be familiar to users of spreadsheets. This is naturally expressed in [[Functional Programming]], resulting in [[Functional Reactive Programming]].",
      "id": "f799fe70286ac651a70962aca71dc806"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "264afd48f079ad4ddd1fc121994086b3"
    },
    {
      "type": "html",
      "text": "\nRelated to [[Event Driven Programming]], [[Event Driven Architecture]], [[Complex Event Processing]], [[Event Stream Processing]]. These aren't associated with 'changes to inputs', but rather to external discrete observations; however, the relationship is a close one.",
      "id": "9f2c131c256b1965864532b18b529b16"
    },
    {
      "type": "html",
      "text": "\n[[Observer Pattern]] can be used to implement [[Reactive Programming]], but requires explicit caching, far too much [[Self Discipline]] and knowledge to avoid problematic [[Side Effect]]s that bite you in the arse later. Most programmers screw up. (Related: [[Deprecating The Observer Pattern]])",
      "id": "b8d9b476c65e17175e155eb4d72c9da7"
    },
    {
      "type": "html",
      "text": "\n[[Flow Based Programming]] may also be leveraged into [[Reactive Programming]], but isn't ideally suitable for it.",
      "id": "b2737c45eb459f84b65da73d92a9a3f4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "264afd48f079ad4ddd1fc121994086b3"
    },
    {
      "type": "html",
      "text": "\nA new [[Reactive Programming]] model is under development, called [[Reactive Demand Programming]], supporting bi-directional communication of demands (making it more suitable for open modularity, constraint programming, distributed programming).",
      "id": "c304b254798ff263ea79c6352e200f6c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "264afd48f079ad4ddd1fc121994086b3"
    },
    {
      "type": "html",
      "text": "\n[[Programming Paradigm]]",
      "id": "796e2c11614a793d2a9b613600226871"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?ReactiveProgramming c2.com]",
      "id": "4635d30430cb2a0b7ca003644ce9f1de"
    }
  ],
  "journal": [
    {
      "date": 1287184808000,
      "id": "bc0370822d1ece0e3697a46d04b635ed",
      "type": "create",
      "item": {
        "title": "Reactive Programming",
        "story": [
          {
            "type": "html",
            "text": "Reactive Programming is a style of [[Dataflow Programming]] where changes in input values are propagated through a function call graph. This should be familiar to users of spreadsheets. This is naturally expressed in [[Functional Programming]], resulting in [[Functional Reactive Programming]].",
            "id": "f799fe70286ac651a70962aca71dc806"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "264afd48f079ad4ddd1fc121994086b3"
          },
          {
            "type": "html",
            "text": "\nRelated to [[Event Driven Programming]], [[Event Driven Architecture]], [[Complex Event Processing]], [[Event Stream Processing]]. These aren't associated with 'changes to inputs', but rather to external discrete observations; however, the relationship is a close one.",
            "id": "9f2c131c256b1965864532b18b529b16"
          },
          {
            "type": "html",
            "text": "\n[[Observer Pattern]] can be used to implement [[Reactive Programming]], but requires explicit caching, far too much [[Self Discipline]] and knowledge to avoid problematic [[Side Effect]]s that bite you in the arse later. Most programmers screw up. (Related: [[Deprecating The Observer Pattern]])",
            "id": "b8d9b476c65e17175e155eb4d72c9da7"
          },
          {
            "type": "html",
            "text": "\n[[Flow Based Programming]] may also be leveraged into [[Reactive Programming]], but isn't ideally suitable for it.",
            "id": "b2737c45eb459f84b65da73d92a9a3f4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "264afd48f079ad4ddd1fc121994086b3"
          },
          {
            "type": "html",
            "text": "\nA new [[Reactive Programming]] model is under development, called [[Reactive Demand Programming]], supporting bi-directional communication of demands (making it more suitable for open modularity, constraint programming, distributed programming).",
            "id": "c304b254798ff263ea79c6352e200f6c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "264afd48f079ad4ddd1fc121994086b3"
          },
          {
            "type": "html",
            "text": "\n[[Programming Paradigm]]",
            "id": "796e2c11614a793d2a9b613600226871"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?ReactiveProgramming c2.com]",
            "id": "4635d30430cb2a0b7ca003644ce9f1de"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1651574302444
    }
  ]
}