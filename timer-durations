{
  "title": "Timer durations",
  "story": [
    {
      "type": "paragraph",
      "id": "c56ec02fc00cde27",
      "text": "Timer durations are minimums, not absolutes. And 0ms never actually means 0ms. This applies to setTimeout and setInterval. Like anything else that is nondeterministic and out of the control of your code, timer durations are one of the [[JavaScript Common Pitfalls]]."
    },
    {
      "type": "paragraph",
      "id": "cc00bf4206dac17e",
      "text": "So, why are the times minimums and not actual times? The main reason is that there is no way to tell what else might be going on when the timer fires. If something else is synchronously executing, the timer has no way to interrupt and run. It simply has to wait until the event loop gets back around to it. In most cases this only accounts for 1-2ms delay in timers firing."
    },
    {
      "type": "paragraph",
      "id": "f316ad23e1ade092",
      "text": "With setTimeout(fn, 0) we notice much larger lags, and more platform dependent variance."
    },
    {
      "type": "code",
      "id": "443457646ddf431b",
      "text": "var start = Date.now()\n\nsetTimeout(function () {\n  var next = Date.now()\n  console.log(next - start)\n  setTimeout(function () {\n    var last = Date.now()\n    console.log(last - next)\n  }, 0)\n}, 0)\n"
    },
    {
      "type": "paragraph",
      "id": "0b140d40f938a1af",
      "text": "In node the first one takes ~1ms, and the second one takes closer to ~15ms on my machine. In the current chrome and firefox both take 0-2ms, except that by the html 5 spec the inner call should take a minimum of 4ms. And old browsers 10ms for the inner call was the common minimum."
    },
    {
      "type": "paragraph",
      "id": "91659a19be6c3f2f",
      "text": "On Safari it seems to honor the 4ms min for the second timer, but I sometimes get results up to 20ms for either one. That just kills you if you're trying to do something like an animation loop where you are attempting update something 60 times a second. Even if you're drawing and processing took no time at all, sometimes safari or node would eat up all of your time just waiting to fire the timer. setImmediate or requestAnimationFrame are better solutions for those tight [[asynchronous loops]]."
    },
    {
      "type": "paragraph",
      "id": "909e337e138f91d5",
      "text": "The reason for the minimum time on the inner setTimeout gets into the subtle mechanics of [[Timer Precedence]], that are probably better left for another page."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Timer durations",
        "story": []
      },
      "date": 1434007565375
    },
    {
      "item": {
        "type": "factory",
        "id": "c56ec02fc00cde27"
      },
      "id": "c56ec02fc00cde27",
      "type": "add",
      "date": 1434007567276
    },
    {
      "type": "edit",
      "id": "c56ec02fc00cde27",
      "item": {
        "type": "paragraph",
        "id": "c56ec02fc00cde27",
        "text": "Timer durations are minimums, not absolutes. And 0ms never actually means 0ms. This applies to setTimeout and setInterval. Like anything else that is nondeterministic and out of the control of your code, timer durations are one of the [[JavaScript Common Pitfalls]]."
      },
      "date": 1434007705043
    },
    {
      "item": {
        "type": "factory",
        "id": "cc00bf4206dac17e"
      },
      "id": "cc00bf4206dac17e",
      "type": "add",
      "after": "c56ec02fc00cde27",
      "date": 1434007749682
    },
    {
      "type": "edit",
      "id": "cc00bf4206dac17e",
      "item": {
        "type": "paragraph",
        "id": "cc00bf4206dac17e",
        "text": "So, why are the times minimums and not actual times? The main reason is that there is no way to tell what else might be going on when the timer fires. If something else is synchronously executing, the timer has no way to interrupt and run. It simply has to wait until the event loop gets back around to it. In most cases this only accounts for 1-2ms delay in timers firing."
      },
      "date": 1434007892539
    },
    {
      "type": "add",
      "id": "f316ad23e1ade092",
      "item": {
        "type": "paragraph",
        "id": "f316ad23e1ade092",
        "text": "With setTimeout(fn, 0) we notice much larger lags, and more platform dependent variance."
      },
      "after": "cc00bf4206dac17e",
      "date": 1434007957796
    },
    {
      "item": {
        "type": "factory",
        "id": "443457646ddf431b"
      },
      "id": "443457646ddf431b",
      "type": "add",
      "after": "f316ad23e1ade092",
      "date": 1434008653192
    },
    {
      "type": "edit",
      "id": "443457646ddf431b",
      "item": {
        "type": "code",
        "id": "443457646ddf431b",
        "text": "var start = Date.now()\n\nsetTimeout(function () {\n  var next = Date.now()\n  console.log(next - start)\n  setTimeout(function () {\n    var last = Date.now()\n    console.log(last - next)\n  }, 0)\n}, 0)\n"
      },
      "date": 1434008666739
    },
    {
      "item": {
        "type": "factory",
        "id": "0b140d40f938a1af"
      },
      "id": "0b140d40f938a1af",
      "type": "add",
      "after": "443457646ddf431b",
      "date": 1434008679046
    },
    {
      "type": "edit",
      "id": "0b140d40f938a1af",
      "item": {
        "type": "paragraph",
        "id": "0b140d40f938a1af",
        "text": "In node the first one takes ~1ms, and the second one takes closer to ~15ms on my machine. In the current chrome and firefox both take 0-2ms, except that by the html 5 spec the inner call should take a minimum of 4ms. And old browsers 10ms for the inner call was the common minimum."
      },
      "date": 1434008790032
    },
    {
      "item": {
        "type": "factory",
        "id": "91659a19be6c3f2f"
      },
      "id": "91659a19be6c3f2f",
      "type": "add",
      "after": "0b140d40f938a1af",
      "date": 1434008913715
    },
    {
      "type": "edit",
      "id": "91659a19be6c3f2f",
      "item": {
        "type": "paragraph",
        "id": "91659a19be6c3f2f",
        "text": "On Safari it seems to honor the 4ms min for the second timer, but I sometimes get results up to 20ms for either one. That just kills you if you're trying to do something like an animation loop where you are attempting update something 60 times a second. Even if you're drawing and processing took no time at all, sometimes safari or node would eat up all of your time just waiting to fire the timer. setImmediate, process.nextTick, and requestAnimationFrame are all better solutions for those tight [[asynchronous loops]]."
      },
      "date": 1434009125369
    },
    {
      "type": "add",
      "id": "909e337e138f91d5",
      "item": {
        "type": "paragraph",
        "id": "909e337e138f91d5",
        "text": "The reason for the minimum time on the inner setTimeout gets into the subtle mechanics of [[Timer Precedence]], that are probably better left for another page."
      },
      "after": "91659a19be6c3f2f",
      "date": 1434009206049
    },
    {
      "type": "edit",
      "id": "91659a19be6c3f2f",
      "item": {
        "type": "paragraph",
        "id": "91659a19be6c3f2f",
        "text": "On Safari it seems to honor the 4ms min for the second timer, but I sometimes get results up to 20ms for either one. That just kills you if you're trying to do something like an animation loop where you are attempting update something 60 times a second. Even if you're drawing and processing took no time at all, sometimes safari or node would eat up all of your time just waiting to fire the timer. setImmediate or requestAnimationFrame are better solutions for those tight [[asynchronous loops]]."
      },
      "date": 1434009495807
    },
    {
      "type": "fork",
      "site": "nrn.io",
      "date": 1652868778836
    }
  ]
}