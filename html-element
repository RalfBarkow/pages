{
  "title": "HTML Element",
  "story": [
    {
      "type": "markdown",
      "id": "091b2c47ef2b6046",
      "text": "Create an HTML element managed by [[Elm]]. The resulting elements are easy to embed in larger JavaScript projects, and lots of companies that use Elm started with this approach! Try it out on something small. If it works, great, do more! If not, revert, no big deal. [https://package.elm-lang.org/packages/elm/browser/latest/Browser page]\n\nUnlike a sandbox, an element can talk to the outside world in a couple ways:\n\n* Cmd — you can “command” the Elm runtime to do stuff, like HTTP.\n* Sub — you can “subscribe” to event sources, like clock ticks.\n* flags — JavaScript can pass in data when starting the Elm program\n* ports — set up a client-server relationship with JavaScript\n\n\n"
    },
    {
      "type": "markdown",
      "id": "d25b7c160d990ae8",
      "text": "As you read the guide [https://guide.elm-lang.org/ site] you will run into a bunch of examples of element in this section [https://guide.elm-lang.org/effects/ page]. You can learn more about flags and ports in the interop section [https://guide.elm-lang.org/interop/ page].\n"
    },
    {
      "type": "html",
      "id": "485e77e6e1c47bb9",
      "text": "<center><img width=\"100%\" src=\"https://guide.elm-lang.org/effects/diagrams/element.svg\"></center>"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "HTML Element",
        "story": []
      },
      "date": 1637947332625
    },
    {
      "item": {
        "type": "paragraph",
        "id": "2b77c34cb38ea55c",
        "text": ""
      },
      "id": "2b77c34cb38ea55c",
      "type": "add",
      "date": 1637947369919
    },
    {
      "type": "remove",
      "id": "2b77c34cb38ea55c",
      "date": 1637947375931
    },
    {
      "item": {
        "type": "paragraph",
        "id": "9dace2845ce525be",
        "text": ""
      },
      "id": "9dace2845ce525be",
      "type": "add",
      "date": 1637947409695
    },
    {
      "type": "remove",
      "id": "9dace2845ce525be",
      "date": 1637947412131
    },
    {
      "item": {
        "type": "paragraph",
        "id": "84698b0339a2b131",
        "text": ""
      },
      "id": "84698b0339a2b131",
      "type": "add",
      "date": 1637947433736
    },
    {
      "type": "remove",
      "id": "84698b0339a2b131",
      "date": 1637947435880
    },
    {
      "item": {
        "type": "markdown",
        "id": "091b2c47ef2b6046",
        "text": " Create an HTML element managed by Elm. The resulting elements are easy to embed in larger JavaScript projects, and lots of companies that use Elm started with this approach! Try it out on something small. If it works, great, do more! If not, revert, no big deal.\n\nUnlike a sandbox, an element can talk to the outside world in a couple ways:\n\n* Cmd — you can “command” the Elm runtime to do stuff, like HTTP.\n* Sub — you can “subscribe” to event sources, like clock ticks.\n* flags — JavaScript can pass in data when starting the Elm program\n* ports — set up a client-server relationship with JavaScript\n\nAs you read the guide you will run into a bunch of examples of element in this section. You can learn more about flags and ports in the interop section.\n"
      },
      "id": "091b2c47ef2b6046",
      "type": "add",
      "date": 1637947482367
    },
    {
      "type": "edit",
      "id": "091b2c47ef2b6046",
      "item": {
        "type": "markdown",
        "id": "091b2c47ef2b6046",
        "text": " Create an HTML element managed by Elm. The resulting elements are easy to embed in larger JavaScript projects, and lots of companies that use Elm started with this approach! Try it out on something small. If it works, great, do more! If not, revert, no big deal.\n\nUnlike a sandbox, an element can talk to the outside world in a couple ways:\n\n* Cmd — you can “command” the Elm runtime to do stuff, like HTTP.\n* Sub — you can “subscribe” to event sources, like clock ticks.\n* flags — JavaScript can pass in data when starting the Elm program\n* ports — set up a client-server relationship with JavaScript\n\nAs you read the guide you will run into a bunch of examples of element in this section. You can learn more about flags and ports in the interop section.\n"
      },
      "date": 1637947484977
    },
    {
      "type": "edit",
      "id": "091b2c47ef2b6046",
      "item": {
        "type": "markdown",
        "id": "091b2c47ef2b6046",
        "text": " Create an HTML element managed by Elm. The resulting elements are easy to embed in larger JavaScript projects, and lots of companies that use Elm started with this approach! Try it out on something small. If it works, great, do more! If not, revert, no big deal.\n\nUnlike a sandbox, an element can talk to the outside world in a couple ways:\n\n* Cmd — you can “command” the Elm runtime to do stuff, like HTTP.\n* Sub — you can “subscribe” to event sources, like clock ticks.\n* flags — JavaScript can pass in data when starting the Elm program\n* ports — set up a client-server relationship with JavaScript\n\nAs you read the guide you will run into a bunch of examples of element in this section. You can learn more about flags and ports in the interop section.\n"
      },
      "date": 1637947518305
    },
    {
      "type": "edit",
      "id": "091b2c47ef2b6046",
      "item": {
        "type": "markdown",
        "id": "091b2c47ef2b6046",
        "text": "Create an HTML element managed by [[Elm]]. The resulting elements are easy to embed in larger JavaScript projects, and lots of companies that use Elm started with this approach! Try it out on something small. If it works, great, do more! If not, revert, no big deal. [https://package.elm-lang.org/packages/elm/browser/latest/Browser page]\n\nUnlike a sandbox, an element can talk to the outside world in a couple ways:\n\n* Cmd — you can “command” the Elm runtime to do stuff, like HTTP.\n* Sub — you can “subscribe” to event sources, like clock ticks.\n* flags — JavaScript can pass in data when starting the Elm program\n* ports — set up a client-server relationship with JavaScript\n\n\n"
      },
      "date": 1637947520999
    },
    {
      "type": "edit",
      "id": "091b2c47ef2b6046",
      "item": {
        "type": "markdown",
        "id": "091b2c47ef2b6046",
        "text": "Create an HTML element managed by [[Elm]]. The resulting elements are easy to embed in larger JavaScript projects, and lots of companies that use Elm started with this approach! Try it out on something small. If it works, great, do more! If not, revert, no big deal. [https://package.elm-lang.org/packages/elm/browser/latest/Browser page]\n\nUnlike a sandbox, an element can talk to the outside world in a couple ways:\n\n* Cmd — you can “command” the Elm runtime to do stuff, like HTTP.\n* Sub — you can “subscribe” to event sources, like clock ticks.\n* flags — JavaScript can pass in data when starting the Elm program\n* ports — set up a client-server relationship with JavaScript\n\n\n"
      },
      "date": 1637947566496
    },
    {
      "type": "edit",
      "id": "091b2c47ef2b6046",
      "item": {
        "type": "markdown",
        "id": "091b2c47ef2b6046",
        "text": "Create an HTML element managed by [[Elm]]. The resulting elements are easy to embed in larger JavaScript projects, and lots of companies that use Elm started with this approach! Try it out on something small. If it works, great, do more! If not, revert, no big deal. [https://package.elm-lang.org/packages/elm/browser/latest/Browser page]\n\nUnlike a sandbox, an element can talk to the outside world in a couple ways:\n\n* Cmd — you can “command” the Elm runtime to do stuff, like HTTP.\n* Sub — you can “subscribe” to event sources, like clock ticks.\n* flags — JavaScript can pass in data when starting the Elm program\n* ports — set up a client-server relationship with JavaScript\n\n\n"
      },
      "date": 1637947597934
    },
    {
      "type": "edit",
      "id": "091b2c47ef2b6046",
      "item": {
        "type": "markdown",
        "id": "091b2c47ef2b6046",
        "text": "Create an HTML element managed by [[Elm]]. The resulting elements are easy to embed in larger JavaScript projects, and lots of companies that use Elm started with this approach! Try it out on something small. If it works, great, do more! If not, revert, no big deal. [https://package.elm-lang.org/packages/elm/browser/latest/Browser page]\n\nUnlike a sandbox, an element can talk to the outside world in a couple ways:\n\n* Cmd — you can “command” the Elm runtime to do stuff, like HTTP.\n* Sub — you can “subscribe” to event sources, like clock ticks.\n* flags — JavaScript can pass in data when starting the Elm program\n* ports — set up a client-server relationship with JavaScript\n\n\n"
      },
      "date": 1637947681069
    },
    {
      "type": "edit",
      "id": "091b2c47ef2b6046",
      "item": {
        "type": "markdown",
        "id": "091b2c47ef2b6046",
        "text": "Create an HTML element managed by [[Elm]]. The resulting elements are easy to embed in larger JavaScript projects, and lots of companies that use Elm started with this approach! Try it out on something small. If it works, great, do more! If not, revert, no big deal. [https://package.elm-lang.org/packages/elm/browser/latest/Browser page]\n\nUnlike a sandbox, an element can talk to the outside world in a couple ways:\n\n* Cmd — you can “command” the Elm runtime to do stuff, like HTTP.\n* Sub — you can “subscribe” to event sources, like clock ticks.\n* flags — JavaScript can pass in data when starting the Elm program\n* ports — set up a client-server relationship with JavaScript\n\n\n"
      },
      "date": 1637947692576
    },
    {
      "type": "edit",
      "id": "091b2c47ef2b6046",
      "item": {
        "type": "markdown",
        "id": "091b2c47ef2b6046",
        "text": "Create an HTML element managed by [[Elm]]. The resulting elements are easy to embed in larger JavaScript projects, and lots of companies that use Elm started with this approach! Try it out on something small. If it works, great, do more! If not, revert, no big deal. [https://package.elm-lang.org/packages/elm/browser/latest/Browser page]\n\nUnlike a sandbox, an element can talk to the outside world in a couple ways:\n\n* Cmd — you can “command” the Elm runtime to do stuff, like HTTP.\n* Sub — you can “subscribe” to event sources, like clock ticks.\n* flags — JavaScript can pass in data when starting the Elm program\n* ports — set up a client-server relationship with JavaScript\n\n\n"
      },
      "date": 1637947740093
    },
    {
      "item": {
        "type": "html",
        "id": "485e77e6e1c47bb9",
        "text": "<center><img width=\"100%\" src=\"https://guide.elm-lang.org/effects/diagrams/element.svg\"></center>"
      },
      "id": "485e77e6e1c47bb9",
      "type": "add",
      "after": "091b2c47ef2b6046",
      "date": 1637947762635
    },
    {
      "type": "edit",
      "id": "485e77e6e1c47bb9",
      "item": {
        "type": "html",
        "id": "485e77e6e1c47bb9",
        "text": "<center><img width=\"100%\" src=\"https://guide.elm-lang.org/effects/diagrams/element.svg\"></center>"
      },
      "date": 1637947789455
    },
    {
      "type": "edit",
      "id": "091b2c47ef2b6046",
      "item": {
        "type": "markdown",
        "id": "091b2c47ef2b6046",
        "text": "Create an HTML element managed by [[Elm]]. The resulting elements are easy to embed in larger JavaScript projects, and lots of companies that use Elm started with this approach! Try it out on something small. If it works, great, do more! If not, revert, no big deal. [https://package.elm-lang.org/packages/elm/browser/latest/Browser page]\n\nUnlike a sandbox, an element can talk to the outside world in a couple ways:\n\n* Cmd — you can “command” the Elm runtime to do stuff, like HTTP.\n* Sub — you can “subscribe” to event sources, like clock ticks.\n* flags — JavaScript can pass in data when starting the Elm program\n* ports — set up a client-server relationship with JavaScript\n\n\n"
      },
      "date": 1637947827222
    },
    {
      "type": "edit",
      "id": "091b2c47ef2b6046",
      "item": {
        "type": "markdown",
        "id": "091b2c47ef2b6046",
        "text": "Create an HTML element managed by [[Elm]]. The resulting elements are easy to embed in larger JavaScript projects, and lots of companies that use Elm started with this approach! Try it out on something small. If it works, great, do more! If not, revert, no big deal. [https://package.elm-lang.org/packages/elm/browser/latest/Browser page]\n\nUnlike a sandbox, an element can talk to the outside world in a couple ways:\n\n* Cmd — you can “command” the Elm runtime to do stuff, like HTTP.\n* Sub — you can “subscribe” to event sources, like clock ticks.\n* flags — JavaScript can pass in data when starting the Elm program\n* ports — set up a client-server relationship with JavaScript\n\n\n"
      },
      "date": 1637947898276
    },
    {
      "id": "485e77e6e1c47bb9",
      "type": "move",
      "order": [
        "091b2c47ef2b6046",
        "485e77e6e1c47bb9",
        "d25b7c160d990ae8"
      ],
      "date": 1637947901027,
      "error": {
        "type": "error",
        "msg": "",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "fork",
      "date": 1637947913594
    },
    {
      "type": "add",
      "id": "d25b7c160d990ae8",
      "item": {
        "type": "markdown",
        "id": "d25b7c160d990ae8",
        "text": "As you read the guide [https://guide.elm-lang.org/ site] you will run into a bunch of examples of element in this section [https://guide.elm-lang.org/effects/ page]. You can learn more about flags and ports in the interop section [https://guide.elm-lang.org/interop/ page].\n"
      },
      "after": "091b2c47ef2b6046",
      "date": 1637947915100
    }
  ]
}