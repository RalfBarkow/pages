{
  "title": "Structured Query Language",
  "story": [
    {
      "type": "html",
      "text": "Traditionally abbreviated SQL.",
      "id": "472958ec2b70501925a95190e1cb8406"
    },
    {
      "type": "html",
      "text": "\nSQL is a [[Declarative Language]], one in which you specify what you want and let the language figure out what steps to take to do it. The classes of [[Declarative Language]] are [[Relational Language]] and [[Functional Programming Language]] (and [[Constraint Language]]); I'm not sure to which one SQL belongs.",
      "id": "44d2eb133dae3ebaad90a3b0d90a520f"
    },
    {
      "type": "html",
      "text": "\nIt has also at times been called a [[Fourth Generation Language]].",
      "id": "88dfda6e629950545a51731564b7d600"
    },
    {
      "type": "html",
      "text": "\nSome SQL commands are used to set up a relational structure for storing information. For example, the CREATE TABLE command takes parameters identifying the names and data types of fields in a table. Another group of commands is used to modify the information contained in the relational structure. For example:",
      "id": "33144bc30e72d25bfa33ed9b92d9cdf9"
    },
    {
      "type": "html",
      "text": " SELECT * FROM EMPLOYEES WHERE LASTNAME = 'SMITH'",
      "id": "e36898cfc80ce1e742cffa23b8f3db07"
    },
    {
      "type": "html",
      "text": " UPDATE EMPLOYEES SET SALARY = 5000 WHERE SSN='123-45-6789'",
      "id": "9060ce63c3b0741d0b2d963290972212"
    },
    {
      "type": "html",
      "text": " DELETE FROM EMPLOYEES WHERE SALARY = 0",
      "id": "46494f088acf7bab544cb894d8d0031c"
    },
    {
      "type": "html",
      "text": "\nThe part that gets confusing is where information is stored in more than one table, requiring various types of joins connecting the tables.",
      "id": "cddbd36fbdeb6131aa6f275d456ba013"
    },
    {
      "type": "html",
      "text": " SELECT ZIP FROM EMPLOYEES, ADDRESSES WHERE EMPLOYEES.CITY = ADDRESSES.CITY AND EMPLOYEES.TITLE = 'DIRECTOR'",
      "id": "89fbddbe9ec34eb92e3e9aa60bc66991"
    },
    {
      "type": "html",
      "text": "\nThis gives the zip codes of all directors. There are \"inner\" and \"outer\" joins, \"left\" and \"right\" joins, etc. which provide combinations of return values depending which tables have values and which don't.",
      "id": "f0987e4ca6c8910aaa8380dc47e13215"
    },
    {
      "type": "html",
      "text": "\nThe basics of SQL are almost identical across several database vendors. However, each vendor has added their proprietary extensions. For example, both Oracle and SQL Server allow the automation of deleting cross-referenced items when the last referencing item is deleted; both provide for automatically numbering newly added rows; and both can ensure that only entries present in a related look-up table may be inserted as field values in a master table. Both syntax and semantics are utterly unique between these products (and others such as DB2) for these features.",
      "id": "089fecd31c42b66fd8b2e4bc6e2f9619"
    },
    {
      "type": "html",
      "text": "\nIn general, SQL statements instruct the SQL database engine about the desired end-state condition, but do not have to give step by step instructions to the engine. For example, in handling a SELECT statement, the database engine program may flush buffers, dirty write caches, read sectors from disk, follow linked lists, etc., none of which the programmer has to know. But with most SQL engines, the programmer can add proprietary hints to adjust the way the query is processed. By the way, deletes, updates and inserts are also generically referred to as queries.",
      "id": "10996c09d7dce26996ef94d934ad1120"
    },
    {
      "type": "html",
      "text": "\nAdditional proprietary extensions, such as Oracle's PL/SQL and Microsoft's T-SQL, add procedural constructs such as explicit looping, flow control, local variables and so forth the SQL. The idea is that some database maintenance, data cleaning, summary generation, and even business logic functionality can execute inside the database for speed and efficiency. The widespread use of PL/SQL in the [[Ars Digita Community System]] is one reason for the difficulty of that system's rewrite in Java.",
      "id": "5353f90b742500e8df225731aa2ac125"
    },
    {
      "type": "html",
      "text": "- [[Chris Baugh]]",
      "id": "839b2a12bea3d4305ceba4811d235d66"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
    },
    {
      "type": "html",
      "text": "SQL queries can be straightforwardly translated to [[Prolog Language]], but the reverse is not that easy since there is no possibility of recursive queries in SQL (for example you cannot traverse a graph in SQL). As a matter of fact, <i>pure</i> SQL is based on the relational algebra which can be viewed as a subset of predicate calculus. So I'd say SQL falls in the [[Relational Language]] category. -- Bob",
      "id": "e3b8b7079ba914b3df07ad3fd08a3b4c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
    },
    {
      "type": "html",
      "text": "SQL is a non-intuitive, rather obtuse language created for data base queries etc. - except for simple queries, it is rather non-intuitive and someone should replace it or put a wrapper over it so that it can die and go away. --[[Ray Schneider]]",
      "id": "29155e33bfdcd2a016c458434261bf42"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
    },
    {
      "type": "html",
      "text": "Replacing it would be great. A wrapper ain't going to cut it, because SQL has some serious problems in the model of a database it uses. The best explanation of these, IMHO, is in [[Chris Date]] and [[Hugh Darwen]]'s <i>Foundation for Future Database Systems: [[The Third Manifesto]]</i> (Third Edition). The eighth edition of Date's classic <i>An Introduction to Database Systems</i> also covers some of this ground.",
      "id": "385b1a493a24b5d3996fab68b0016ac5"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
    },
    {
      "type": "html",
      "text": "30 years of advances in language design theory vanish before your eyes when you view [[Transact Sql]]... -- [[Phl Ip]]",
      "id": "728bf55d52d653e199b62fad82ac4030"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
    },
    {
      "type": "html",
      "text": "<i>The classes of [[Declarative Language]] are [[Relational Language]] and [[Functional Programming Language]]; I'm not sure to which one SQL belongs.</i>",
      "id": "ee8a3225814faf53796ffae38f7e39bc"
    },
    {
      "type": "html",
      "text": "\nNeither. It was a failed attempt at a relational data sublanguage.",
      "id": "7c3a8a6bd140cbee7a4d9e49e4a507b3"
    },
    {
      "type": "html",
      "text": "<i>Some SQL commands are used to set up a relational structure for storing information.</i>",
      "id": "c86a94059d13be12c46d10610d63f553"
    },
    {
      "type": "html",
      "text": "\nNot really. SQL tables are bags, not relations, because they can contain duplicates.",
      "id": "c1693b56304bf91ab1bae0e174aebc74"
    },
    {
      "type": "html",
      "text": "<i>As a matter of fact 'pure' SQL is based on the relational algebra which can be viewed as a subset of predicate calculus.</i>",
      "id": "a794efa270877636440d769483ae0bc5"
    },
    {
      "type": "html",
      "text": "\nAbsolutely not. SQL is actually a mix of relational algebra & calculus, is more complex than both together and less powerful than any. And the relational algebra & calculus are equivalent but different: neither is derived of the other, not a subset of the other, and both have the same expressiveness.",
      "id": "146a06ffecf11a971e19e56db1194b59"
    },
    {
      "type": "html",
      "text": "-- [[Leandro Dutra]]",
      "id": "f7a15526bb41ab305361a66e8bde6391"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
    },
    {
      "type": "html",
      "text": "A piece of trivia about SQL which is not often appreciated. SQL is deliberately *not* [[Turing Complete]]. This is because it is designed to be completely analyzed and then very well optimized on the fly. Most obvious things that people would like to change about it would make it more convenient to a human, and would immediately introduce the [[Halting Problem]].",
      "id": "6cf089ca7046ae0d28f3ae019f6e6fd0"
    },
    {
      "type": "html",
      "text": "\nMoore's law is great and all, but for the forseeable future there is a role for a specialized [[Little Language]] which can be optimized very well. This is because current hardware with real data sets does not perform adequately with the bad quadratic and cubic algorithms that we naturally write. It comes up enough to no longer be [[Premature Optimization]] to write it in a way that the machine can recognize what you want and find a log-linear algorithm to do it. For now SQL is that language.",
      "id": "cea9ead9a73cb2eca3fbf6e7b9181d05"
    },
    {
      "type": "html",
      "text": "-- [[Ben Tilly]]",
      "id": "2b3189483da0ba4bb4de1ae7b769f748"
    },
    {
      "type": "html",
      "text": "\nBut now SQL <i>is</i> [[Turing Complete]]. ISO/IEC 9075:2008 specifies the syntax and semantics of recursive common table expressions (temporary tables created in the context of a single query, which can have rows appended to them even as they are being scanned):",
      "id": "97114b912bb4084c5d1dd93f355add73"
    },
    {
      "type": "code",
      "text": "  WITH RECURSIVE t(n) AS (\n      VALUES (1)\n    UNION ALL\n      SELECT n+1 FROM t WHERE n < 100\n  )\n  SELECT sum(n) FROM t;",
      "id": "52a28bb67780571250d033afd5ffd9b4"
    },
    {
      "type": "html",
      "text": "which adds the integers from 1 to 100 inclusive. Or, somewhat more usefully in the real world,",
      "id": "a4313b5936fbd0166fb76e8e01fde712"
    },
    {
      "type": "code",
      "text": "  WITH RECURSIVE included(component, part, quant) AS (\n      SELECT component, part, quant FROM parts WHERE part = ''partID''\n    UNION ALL\n      SELECT p.component, p.part, p.quant\n      FROM included pr, parts p\n      WHERE p.part = pr.component\n    )\n  SELECT component, SUM(quant) as total_quantity\n  FROM included\n  GROUP BY component",
      "id": "399323b3f3a6b343b4c4c4d6e5cb2212"
    },
    {
      "type": "html",
      "text": "Querying the \"parts\" table to find out how many of which components go into making it up (including components of components).",
      "id": "7954027f8a124b822e35d94c5ae6f593"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
    },
    {
      "type": "html",
      "text": "<b>SQLJ</b>",
      "id": "369f394b7a3f0b4f876bc5c235ad5348"
    },
    {
      "type": "html",
      "text": "\n[[Java Language]] recently (early 2004) got a boost thru [[Ibm Corporation]] increased support of SQLJ in its latest [[Db Two]] offering. See [http://www.service-architecture.com/database/articles/sqlj.html www.service-architecture.com] for additional information on SQLJ, which was first supported in [[Oracle Database]]s.",
      "id": "a0c46132de5985da13170637a4ba8751"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
    },
    {
      "type": "html",
      "text": "<b>[[Structured Query Language]] [[Quick Questions]]</b>",
      "id": "805b0d01183571d3fb327123e11a5a1b"
    },
    {
      "type": "html",
      "text": "<b>Q</b> Does SQL have a standard way to associate comments with queries and table definitions?",
      "id": "1bb0d560bcb0ededed3456064db0265a"
    },
    {
      "type": "html",
      "text": "<b>A</b> ?",
      "id": "a6dbfddc7dd3a3fa82b0364e4d208508"
    },
    {
      "type": "html",
      "text": "(Doesn't the second question refer to a data-definition language rather than SQL?)",
      "id": "d758daebe715c6b7dd6226b33f62f428"
    },
    {
      "type": "html",
      "text": "<b>Q</b> What<b></b>'s so funny about naming a child Robert);--DROP TABLES Students",
      "id": "6e83782ca1f39c27b630cece7ffafb42"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
    },
    {
      "type": "html",
      "text": "This seems like a good idea: a web site that gives a tutorial on SQL, and supports free-form SQL in HTML forms for exercises: [http://www.sqlcourse.com/ www.sqlcourse.com]",
      "id": "b1ccd406a01503c6bfb81c32e82ff0ae"
    },
    {
      "type": "html",
      "text": "\nI gave it a quick whirl and it seemed to be what it claimed; it retrieved correct results for the queries against their toy test table.",
      "id": "7026df9090077c0ad67423bd2af22cbf"
    },
    {
      "type": "html",
      "text": "\nThis makes so much sense that now I wonder if there are lots of such things out there, and I just never noticed.",
      "id": "c34c12b807fb3c7e923ee0f59d72fbf5"
    },
    {
      "type": "html",
      "text": "\nAnother good idea is a SQL Tutorial that provides concrete examples on all SQL commands:  [http://www.1keydata.com/sql/sql.html www.1keydata.com]",
      "id": "16c9ce86d308f8e0ce6c04d3e67ee56f"
    },
    {
      "type": "html",
      "text": "\nOne of the best sql tutorials with thousands of various queries covering all sql commands: [http://www.w3resource.com/sql/tutorials.php www.w3resource.com]",
      "id": "dcc2d16de0e080d5d2567aaf1d5ed868"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
    },
    {
      "type": "html",
      "text": "Results of searching c2 for \"sql\"; needs trimming:",
      "id": "99a0838d7c7e04f0f70ffcee8e272982"
    },
    {
      "type": "html",
      "text": "\n[[Doc Query In Sql]]\n[[Domain Logic And Sql Article]]\n[[Embedded Sql]]\n[[Hypersonic Sql]]\n[[Iwanna Learn Sqlserver]]\n[[Microsoft Sql Server]]\n[[My Sql]]\n[[Oracle Plsql Unit]]\n[[Pernicious Ingrown Sql]]\n[[Pl Sql]]\n[[Pl Sql Unit]]\n[[Portable Sql]]\n[[Portable Sql Data Types]]\n[[Portable Sql Meta Data]]\n[[Postgre Sql]]\n[[Push Doc Query In Sql]]\n[[Refactor Sql]]\n[[Scatter Sql Everywhere]]\n[[Sq Lite]]\n[[Sql Anti Patterns]]\n[[Sql Flaws]]\n[[Sql For Smarties]]\n[[Sql Line Count]]\n[[Sql Myopia]]\n[[Sql Pattern]]\n[[Sql Rdms Programmer Mentality]]\n[[Sql Reporting Services]]\n[[Sql Server]]\n[[Sql Server Desktop Engine]]\n[[Sql Server With Java]]\n[[Sql Strings And Security]]\n[[Sql Windows]]\n[[The Sql Paradox]]\n[[Think Sql As Constraint Satisfaction]]\n[[Time Series In Sql]]\n[[Tree In Sql]]\n[[Tsql Unit]]\n[[Unit Testing My Library Prepare And Execute Sql]]\n[[Using Sql]]\n[[Writing Unmaintainable Sql]]",
      "id": "5e6979de6cf38735d6459bedda8c3fa9"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
    },
    {
      "type": "html",
      "text": "See also: [[Relational Databases]], [[The Sql Paradox]], [[Sql Flaws]], [[Relational Language]], [http://c2.com/cgi/wiki?search=sql c2.com] (all pages here with SQL in the title)",
      "id": "32e669eb6a98787b8c62af7ad6925c35"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
    },
    {
      "type": "html",
      "text": "[[Category Programming Language]] [[Category Database]] [[Category Query Language]]",
      "id": "85bc45039f28aa139c499ea5af467873"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?StructuredQueryLanguage c2.com]",
      "id": "4522167351e2411af3bf4ca435558745"
    }
  ],
  "journal": [
    {
      "date": 1332496968000,
      "id": "70fff400f96d0027799a35afa7daf6cf",
      "type": "create",
      "item": {
        "title": "Structured Query Language",
        "story": [
          {
            "type": "html",
            "text": "Traditionally abbreviated SQL.",
            "id": "472958ec2b70501925a95190e1cb8406"
          },
          {
            "type": "html",
            "text": "\nSQL is a [[Declarative Language]], one in which you specify what you want and let the language figure out what steps to take to do it. The classes of [[Declarative Language]] are [[Relational Language]] and [[Functional Programming Language]] (and [[Constraint Language]]); I'm not sure to which one SQL belongs.",
            "id": "44d2eb133dae3ebaad90a3b0d90a520f"
          },
          {
            "type": "html",
            "text": "\nIt has also at times been called a [[Fourth Generation Language]].",
            "id": "88dfda6e629950545a51731564b7d600"
          },
          {
            "type": "html",
            "text": "\nSome SQL commands are used to set up a relational structure for storing information. For example, the CREATE TABLE command takes parameters identifying the names and data types of fields in a table. Another group of commands is used to modify the information contained in the relational structure. For example:",
            "id": "33144bc30e72d25bfa33ed9b92d9cdf9"
          },
          {
            "type": "html",
            "text": " SELECT * FROM EMPLOYEES WHERE LASTNAME = 'SMITH'",
            "id": "e36898cfc80ce1e742cffa23b8f3db07"
          },
          {
            "type": "html",
            "text": " UPDATE EMPLOYEES SET SALARY = 5000 WHERE SSN='123-45-6789'",
            "id": "9060ce63c3b0741d0b2d963290972212"
          },
          {
            "type": "html",
            "text": " DELETE FROM EMPLOYEES WHERE SALARY = 0",
            "id": "46494f088acf7bab544cb894d8d0031c"
          },
          {
            "type": "html",
            "text": "\nThe part that gets confusing is where information is stored in more than one table, requiring various types of joins connecting the tables.",
            "id": "cddbd36fbdeb6131aa6f275d456ba013"
          },
          {
            "type": "html",
            "text": " SELECT ZIP FROM EMPLOYEES, ADDRESSES WHERE EMPLOYEES.CITY = ADDRESSES.CITY AND EMPLOYEES.TITLE = 'DIRECTOR'",
            "id": "89fbddbe9ec34eb92e3e9aa60bc66991"
          },
          {
            "type": "html",
            "text": "\nThis gives the zip codes of all directors. There are \"inner\" and \"outer\" joins, \"left\" and \"right\" joins, etc. which provide combinations of return values depending which tables have values and which don't.",
            "id": "f0987e4ca6c8910aaa8380dc47e13215"
          },
          {
            "type": "html",
            "text": "\nThe basics of SQL are almost identical across several database vendors. However, each vendor has added their proprietary extensions. For example, both Oracle and SQL Server allow the automation of deleting cross-referenced items when the last referencing item is deleted; both provide for automatically numbering newly added rows; and both can ensure that only entries present in a related look-up table may be inserted as field values in a master table. Both syntax and semantics are utterly unique between these products (and others such as DB2) for these features.",
            "id": "089fecd31c42b66fd8b2e4bc6e2f9619"
          },
          {
            "type": "html",
            "text": "\nIn general, SQL statements instruct the SQL database engine about the desired end-state condition, but do not have to give step by step instructions to the engine. For example, in handling a SELECT statement, the database engine program may flush buffers, dirty write caches, read sectors from disk, follow linked lists, etc., none of which the programmer has to know. But with most SQL engines, the programmer can add proprietary hints to adjust the way the query is processed. By the way, deletes, updates and inserts are also generically referred to as queries.",
            "id": "10996c09d7dce26996ef94d934ad1120"
          },
          {
            "type": "html",
            "text": "\nAdditional proprietary extensions, such as Oracle's PL/SQL and Microsoft's T-SQL, add procedural constructs such as explicit looping, flow control, local variables and so forth the SQL. The idea is that some database maintenance, data cleaning, summary generation, and even business logic functionality can execute inside the database for speed and efficiency. The widespread use of PL/SQL in the [[Ars Digita Community System]] is one reason for the difficulty of that system's rewrite in Java.",
            "id": "5353f90b742500e8df225731aa2ac125"
          },
          {
            "type": "html",
            "text": "- [[Chris Baugh]]",
            "id": "839b2a12bea3d4305ceba4811d235d66"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
          },
          {
            "type": "html",
            "text": "SQL queries can be straightforwardly translated to [[Prolog Language]], but the reverse is not that easy since there is no possibility of recursive queries in SQL (for example you cannot traverse a graph in SQL). As a matter of fact, <i>pure</i> SQL is based on the relational algebra which can be viewed as a subset of predicate calculus. So I'd say SQL falls in the [[Relational Language]] category. -- Bob",
            "id": "e3b8b7079ba914b3df07ad3fd08a3b4c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
          },
          {
            "type": "html",
            "text": "SQL is a non-intuitive, rather obtuse language created for data base queries etc. - except for simple queries, it is rather non-intuitive and someone should replace it or put a wrapper over it so that it can die and go away. --[[Ray Schneider]]",
            "id": "29155e33bfdcd2a016c458434261bf42"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
          },
          {
            "type": "html",
            "text": "Replacing it would be great. A wrapper ain't going to cut it, because SQL has some serious problems in the model of a database it uses. The best explanation of these, IMHO, is in [[Chris Date]] and [[Hugh Darwen]]'s <i>Foundation for Future Database Systems: [[The Third Manifesto]]</i> (Third Edition). The eighth edition of Date's classic <i>An Introduction to Database Systems</i> also covers some of this ground.",
            "id": "385b1a493a24b5d3996fab68b0016ac5"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
          },
          {
            "type": "html",
            "text": "30 years of advances in language design theory vanish before your eyes when you view [[Transact Sql]]... -- [[Phl Ip]]",
            "id": "728bf55d52d653e199b62fad82ac4030"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
          },
          {
            "type": "html",
            "text": "<i>The classes of [[Declarative Language]] are [[Relational Language]] and [[Functional Programming Language]]; I'm not sure to which one SQL belongs.</i>",
            "id": "ee8a3225814faf53796ffae38f7e39bc"
          },
          {
            "type": "html",
            "text": "\nNeither. It was a failed attempt at a relational data sublanguage.",
            "id": "7c3a8a6bd140cbee7a4d9e49e4a507b3"
          },
          {
            "type": "html",
            "text": "<i>Some SQL commands are used to set up a relational structure for storing information.</i>",
            "id": "c86a94059d13be12c46d10610d63f553"
          },
          {
            "type": "html",
            "text": "\nNot really. SQL tables are bags, not relations, because they can contain duplicates.",
            "id": "c1693b56304bf91ab1bae0e174aebc74"
          },
          {
            "type": "html",
            "text": "<i>As a matter of fact 'pure' SQL is based on the relational algebra which can be viewed as a subset of predicate calculus.</i>",
            "id": "a794efa270877636440d769483ae0bc5"
          },
          {
            "type": "html",
            "text": "\nAbsolutely not. SQL is actually a mix of relational algebra & calculus, is more complex than both together and less powerful than any. And the relational algebra & calculus are equivalent but different: neither is derived of the other, not a subset of the other, and both have the same expressiveness.",
            "id": "146a06ffecf11a971e19e56db1194b59"
          },
          {
            "type": "html",
            "text": "-- [[Leandro Dutra]]",
            "id": "f7a15526bb41ab305361a66e8bde6391"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
          },
          {
            "type": "html",
            "text": "A piece of trivia about SQL which is not often appreciated. SQL is deliberately *not* [[Turing Complete]]. This is because it is designed to be completely analyzed and then very well optimized on the fly. Most obvious things that people would like to change about it would make it more convenient to a human, and would immediately introduce the [[Halting Problem]].",
            "id": "6cf089ca7046ae0d28f3ae019f6e6fd0"
          },
          {
            "type": "html",
            "text": "\nMoore's law is great and all, but for the forseeable future there is a role for a specialized [[Little Language]] which can be optimized very well. This is because current hardware with real data sets does not perform adequately with the bad quadratic and cubic algorithms that we naturally write. It comes up enough to no longer be [[Premature Optimization]] to write it in a way that the machine can recognize what you want and find a log-linear algorithm to do it. For now SQL is that language.",
            "id": "cea9ead9a73cb2eca3fbf6e7b9181d05"
          },
          {
            "type": "html",
            "text": "-- [[Ben Tilly]]",
            "id": "2b3189483da0ba4bb4de1ae7b769f748"
          },
          {
            "type": "html",
            "text": "\nBut now SQL <i>is</i> [[Turing Complete]]. ISO/IEC 9075:2008 specifies the syntax and semantics of recursive common table expressions (temporary tables created in the context of a single query, which can have rows appended to them even as they are being scanned):",
            "id": "97114b912bb4084c5d1dd93f355add73"
          },
          {
            "type": "code",
            "text": "  WITH RECURSIVE t(n) AS (\n      VALUES (1)\n    UNION ALL\n      SELECT n+1 FROM t WHERE n < 100\n  )\n  SELECT sum(n) FROM t;",
            "id": "52a28bb67780571250d033afd5ffd9b4"
          },
          {
            "type": "html",
            "text": "which adds the integers from 1 to 100 inclusive. Or, somewhat more usefully in the real world,",
            "id": "a4313b5936fbd0166fb76e8e01fde712"
          },
          {
            "type": "code",
            "text": "  WITH RECURSIVE included(component, part, quant) AS (\n      SELECT component, part, quant FROM parts WHERE part = ''partID''\n    UNION ALL\n      SELECT p.component, p.part, p.quant\n      FROM included pr, parts p\n      WHERE p.part = pr.component\n    )\n  SELECT component, SUM(quant) as total_quantity\n  FROM included\n  GROUP BY component",
            "id": "399323b3f3a6b343b4c4c4d6e5cb2212"
          },
          {
            "type": "html",
            "text": "Querying the \"parts\" table to find out how many of which components go into making it up (including components of components).",
            "id": "7954027f8a124b822e35d94c5ae6f593"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
          },
          {
            "type": "html",
            "text": "<b>SQLJ</b>",
            "id": "369f394b7a3f0b4f876bc5c235ad5348"
          },
          {
            "type": "html",
            "text": "\n[[Java Language]] recently (early 2004) got a boost thru [[Ibm Corporation]] increased support of SQLJ in its latest [[Db Two]] offering. See [http://www.service-architecture.com/database/articles/sqlj.html www.service-architecture.com] for additional information on SQLJ, which was first supported in [[Oracle Database]]s.",
            "id": "a0c46132de5985da13170637a4ba8751"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
          },
          {
            "type": "html",
            "text": "<b>[[Structured Query Language]] [[Quick Questions]]</b>",
            "id": "805b0d01183571d3fb327123e11a5a1b"
          },
          {
            "type": "html",
            "text": "<b>Q</b> Does SQL have a standard way to associate comments with queries and table definitions?",
            "id": "1bb0d560bcb0ededed3456064db0265a"
          },
          {
            "type": "html",
            "text": "<b>A</b> ?",
            "id": "a6dbfddc7dd3a3fa82b0364e4d208508"
          },
          {
            "type": "html",
            "text": "(Doesn't the second question refer to a data-definition language rather than SQL?)",
            "id": "d758daebe715c6b7dd6226b33f62f428"
          },
          {
            "type": "html",
            "text": "<b>Q</b> What<b></b>'s so funny about naming a child Robert);--DROP TABLES Students",
            "id": "6e83782ca1f39c27b630cece7ffafb42"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
          },
          {
            "type": "html",
            "text": "This seems like a good idea: a web site that gives a tutorial on SQL, and supports free-form SQL in HTML forms for exercises: [http://www.sqlcourse.com/ www.sqlcourse.com]",
            "id": "b1ccd406a01503c6bfb81c32e82ff0ae"
          },
          {
            "type": "html",
            "text": "\nI gave it a quick whirl and it seemed to be what it claimed; it retrieved correct results for the queries against their toy test table.",
            "id": "7026df9090077c0ad67423bd2af22cbf"
          },
          {
            "type": "html",
            "text": "\nThis makes so much sense that now I wonder if there are lots of such things out there, and I just never noticed.",
            "id": "c34c12b807fb3c7e923ee0f59d72fbf5"
          },
          {
            "type": "html",
            "text": "\nAnother good idea is a SQL Tutorial that provides concrete examples on all SQL commands:  [http://www.1keydata.com/sql/sql.html www.1keydata.com]",
            "id": "16c9ce86d308f8e0ce6c04d3e67ee56f"
          },
          {
            "type": "html",
            "text": "\nOne of the best sql tutorials with thousands of various queries covering all sql commands: [http://www.w3resource.com/sql/tutorials.php www.w3resource.com]",
            "id": "dcc2d16de0e080d5d2567aaf1d5ed868"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
          },
          {
            "type": "html",
            "text": "Results of searching c2 for \"sql\"; needs trimming:",
            "id": "99a0838d7c7e04f0f70ffcee8e272982"
          },
          {
            "type": "html",
            "text": "\n[[Doc Query In Sql]]\n[[Domain Logic And Sql Article]]\n[[Embedded Sql]]\n[[Hypersonic Sql]]\n[[Iwanna Learn Sqlserver]]\n[[Microsoft Sql Server]]\n[[My Sql]]\n[[Oracle Plsql Unit]]\n[[Pernicious Ingrown Sql]]\n[[Pl Sql]]\n[[Pl Sql Unit]]\n[[Portable Sql]]\n[[Portable Sql Data Types]]\n[[Portable Sql Meta Data]]\n[[Postgre Sql]]\n[[Push Doc Query In Sql]]\n[[Refactor Sql]]\n[[Scatter Sql Everywhere]]\n[[Sq Lite]]\n[[Sql Anti Patterns]]\n[[Sql Flaws]]\n[[Sql For Smarties]]\n[[Sql Line Count]]\n[[Sql Myopia]]\n[[Sql Pattern]]\n[[Sql Rdms Programmer Mentality]]\n[[Sql Reporting Services]]\n[[Sql Server]]\n[[Sql Server Desktop Engine]]\n[[Sql Server With Java]]\n[[Sql Strings And Security]]\n[[Sql Windows]]\n[[The Sql Paradox]]\n[[Think Sql As Constraint Satisfaction]]\n[[Time Series In Sql]]\n[[Tree In Sql]]\n[[Tsql Unit]]\n[[Unit Testing My Library Prepare And Execute Sql]]\n[[Using Sql]]\n[[Writing Unmaintainable Sql]]",
            "id": "5e6979de6cf38735d6459bedda8c3fa9"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
          },
          {
            "type": "html",
            "text": "See also: [[Relational Databases]], [[The Sql Paradox]], [[Sql Flaws]], [[Relational Language]], [http://c2.com/cgi/wiki?search=sql c2.com] (all pages here with SQL in the title)",
            "id": "32e669eb6a98787b8c62af7ad6925c35"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "62c780780ada7eeb6fbd9a1c5a2f243e"
          },
          {
            "type": "html",
            "text": "[[Category Programming Language]] [[Category Database]] [[Category Query Language]]",
            "id": "85bc45039f28aa139c499ea5af467873"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?StructuredQueryLanguage c2.com]",
            "id": "4522167351e2411af3bf4ca435558745"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "language.sfw.c2.com",
      "date": 1708204880005
    }
  ]
}