{
  "title": "QRCode",
  "story": [
    {
      "type": "paragraph",
      "id": "a189d06b8a07d96b",
      "text": "A QRCode (Quick Response Code) is a matrix of nominally square modules arranged in an overall square pattern. It can be used to encode a variety of data formats: numeric, alphanumeric, byte and kanji. This implementation is based on the international standard for QR Code 2005. [https://github.com/rvillemeur/QRCode github]"
    },
    {
      "type": "paragraph",
      "id": "ab6446969bac96fc",
      "text": "\nThere are two ways to generate a QRCode:\n(1) Sending the asQRCode / asMicroQRCode message to an object, usually a String or Integer (e.g., 'http://smalltalkhub.com' asQRCode). asQRCode will produce a standard Model 2 QR Code. asMicroQRCode will produce a Micro QR Code. There are many readers that do not accept Micro QR, so it is safest to just use asQRCode.\n(2) To specify something different (different error correction level, ECI encoding) than the default, use the \"QRCode creation\" protocol class methods in QRCodeEncoder.\n\nQR Code allows you to specify four levels of error correction:\n\t(L) Recovery of 7% of the symbol codewords\n\t(M) Recovery of 15% of the symbol codewords\n\t(Q) Recovery of 25% of the symbol codewords\n\t(H) Recovery of 30% of the symbol codewords\nThe higher the level of error correction, the larger the symbol needs to be. To minimize symbol extent, $L is is used as the default error correction. To further minimize symbol extent, keeping to alphanumeric mode can be useful but requires that all letters are uppercase. As URLs (the most common use for QR Code) are largely case insensitive, alphanumeric mode is probably sufficient. While error correction is a core feature of the QRCode specification, many readers don't utilize it.\n\nAfter initialization, this class serves as a wrapper for the QRCode, allowing access to its string, encoding, version, errorCorrection, and eci; these cannot be changed after creation. Most importantly, you can access its form. For example, do the following code:\n\n('HTTP://SMALLTALKHUB.COM' asQRCode form magnifyBy: 10) asMorph openInWorld.\n\n| instance |\ninstance := 'http://smalltalkhub.com' asQRCode.\ninstance backgroundColor: Color green.\ninstance foregroundColor: Color yellow.\n(instance formWithQuietZone magnifyBy: 10) asMorph openInWorld.\n\nThis class also implements two of the features of QR Code 2005: reversing and mirroring. You can reverse the symbol (i.e., exchange background and foreground colors) by sending the reverse message to the QRCode. You can mirror the symbol (i.e., flip the symbol left to right) by sending the mirror message to the QRCode; it is not clear why you would want to do that, but it is in the specifications. While black and white are specified as the nominal foreground and background colors respectively, you can change them to arbitrary colors (as above). Be cautious using these features; many readers do not support them."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "QRCode",
        "story": []
      },
      "date": 1663172998118
    },
    {
      "item": {
        "type": "factory",
        "id": "a189d06b8a07d96b"
      },
      "id": "a189d06b8a07d96b",
      "type": "add",
      "date": 1663173006895
    },
    {
      "type": "edit",
      "id": "a189d06b8a07d96b",
      "item": {
        "type": "paragraph",
        "id": "a189d06b8a07d96b",
        "text": "A QRCode (Quick Response Code) is a matrix of nominally square modules arranged in an overall square pattern. It can be used to encode a variety of data formats: numeric, alphanumeric, byte and kanji. This implementation is based on the international standard for QR Code 2005.\n\nThere are two ways to generate a QRCode:\n(1) Sending the asQRCode / asMicroQRCode message to an object, usually a String or Integer (e.g., 'http://smalltalkhub.com' asQRCode). asQRCode will produce a standard Model 2 QR Code. asMicroQRCode will produce a Micro QR Code. There are many readers that do not accept Micro QR, so it is safest to just use asQRCode.\n(2) To specify something different (different error correction level, ECI encoding) than the default, use the \"QRCode creation\" protocol class methods in QRCodeEncoder.\n\nQR Code allows you to specify four levels of error correction:\n\t(L) Recovery of 7% of the symbol codewords\n\t(M) Recovery of 15% of the symbol codewords\n\t(Q) Recovery of 25% of the symbol codewords\n\t(H) Recovery of 30% of the symbol codewords\nThe higher the level of error correction, the larger the symbol needs to be. To minimize symbol extent, $L is is used as the default error correction. To further minimize symbol extent, keeping to alphanumeric mode can be useful but requires that all letters are uppercase. As URLs (the most common use for QR Code) are largely case insensitive, alphanumeric mode is probably sufficient. While error correction is a core feature of the QRCode specification, many readers don't utilize it.\n\nAfter initialization, this class serves as a wrapper for the QRCode, allowing access to its string, encoding, version, errorCorrection, and eci; these cannot be changed after creation. Most importantly, you can access its form. For example, do the following code:\n\n('HTTP://SMALLTALKHUB.COM' asQRCode form magnifyBy: 10) asMorph openInWorld.\n\n| instance |\ninstance := 'http://smalltalkhub.com' asQRCode.\ninstance backgroundColor: Color green.\ninstance foregroundColor: Color yellow.\n(instance formWithQuietZone magnifyBy: 10) asMorph openInWorld.\n\nThis class also implements two of the features of QR Code 2005: reversing and mirroring. You can reverse the symbol (i.e., exchange background and foreground colors) by sending the reverse message to the QRCode. You can mirror the symbol (i.e., flip the symbol left to right) by sending the mirror message to the QRCode; it is not clear why you would want to do that, but it is in the specifications. While black and white are specified as the nominal foreground and background colors respectively, you can change them to arbitrary colors (as above). Be cautious using these features; many readers do not support them."
      },
      "date": 1663173008461
    },
    {
      "type": "edit",
      "id": "a189d06b8a07d96b",
      "item": {
        "type": "paragraph",
        "id": "a189d06b8a07d96b",
        "text": "A QRCode (Quick Response Code) is a matrix of nominally square modules arranged in an overall square pattern. It can be used to encode a variety of data formats: numeric, alphanumeric, byte and kanji. This implementation is based on the international standard for QR Code 2005. [https://github.com/rvillemeur/QRCode github]"
      },
      "date": 1663175048768
    },
    {
      "type": "add",
      "id": "ab6446969bac96fc",
      "item": {
        "type": "paragraph",
        "id": "ab6446969bac96fc",
        "text": "\nThere are two ways to generate a QRCode:\n(1) Sending the asQRCode / asMicroQRCode message to an object, usually a String or Integer (e.g., 'http://smalltalkhub.com' asQRCode). asQRCode will produce a standard Model 2 QR Code. asMicroQRCode will produce a Micro QR Code. There are many readers that do not accept Micro QR, so it is safest to just use asQRCode.\n(2) To specify something different (different error correction level, ECI encoding) than the default, use the \"QRCode creation\" protocol class methods in QRCodeEncoder.\n\nQR Code allows you to specify four levels of error correction:\n\t(L) Recovery of 7% of the symbol codewords\n\t(M) Recovery of 15% of the symbol codewords\n\t(Q) Recovery of 25% of the symbol codewords\n\t(H) Recovery of 30% of the symbol codewords\nThe higher the level of error correction, the larger the symbol needs to be. To minimize symbol extent, $L is is used as the default error correction. To further minimize symbol extent, keeping to alphanumeric mode can be useful but requires that all letters are uppercase. As URLs (the most common use for QR Code) are largely case insensitive, alphanumeric mode is probably sufficient. While error correction is a core feature of the QRCode specification, many readers don't utilize it.\n\nAfter initialization, this class serves as a wrapper for the QRCode, allowing access to its string, encoding, version, errorCorrection, and eci; these cannot be changed after creation. Most importantly, you can access its form. For example, do the following code:\n\n('HTTP://SMALLTALKHUB.COM' asQRCode form magnifyBy: 10) asMorph openInWorld.\n\n| instance |\ninstance := 'http://smalltalkhub.com' asQRCode.\ninstance backgroundColor: Color green.\ninstance foregroundColor: Color yellow.\n(instance formWithQuietZone magnifyBy: 10) asMorph openInWorld.\n\nThis class also implements two of the features of QR Code 2005: reversing and mirroring. You can reverse the symbol (i.e., exchange background and foreground colors) by sending the reverse message to the QRCode. You can mirror the symbol (i.e., flip the symbol left to right) by sending the mirror message to the QRCode; it is not clear why you would want to do that, but it is in the specifications. While black and white are specified as the nominal foreground and background colors respectively, you can change them to arbitrary colors (as above). Be cautious using these features; many readers do not support them."
      },
      "after": "a189d06b8a07d96b",
      "date": 1663175049560
    }
  ]
}