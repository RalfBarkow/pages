{
  "title": "Static Typing",
  "story": [
    {
      "type": "html",
      "text": "Static typing is very often misunderstood to mean that values are associated with types at [[Compile Time]], when instead it means that that a [[Reference Value]] is manifestly (which is not the same as at [[Compile Time]]) constrained with respect to the type of the value it can denote, and that the language implementation, whether it is a compiler or an interpreter, both enforces and uses these constraints as much as possible.",
      "id": "7f65704b59387f258f1ecee0e04ad73a"
    },
    {
      "type": "html",
      "text": "\nAn example of the use of static (manifest) type constraint by the is the ability to allocate exactly the right amount of memory to a variable, and another is the ability to disambiguate overloaded function calls in many cases.",
      "id": "718e336d08dea14ca1dd514ef6bcffd1"
    },
    {
      "type": "html",
      "text": "\nSome languages allow associating constraints other than type based ones on the values that may be denoted by a reference, but this is uncommon.",
      "id": "cc2d2379cde738593864af369ebed0f3"
    },
    {
      "type": "html",
      "text": "\n[[Type Inference]] makes many/most/all type declarations unnecessary if the [[Type System]] of your [[Programming Language]] is strong enough.",
      "id": "c1371cae5840874e970ec5e9a50b0ff4"
    },
    {
      "type": "html",
      "text": "\nHowever even when not necessary, type constraints can be very valuable in documenting assumptions and intentions.",
      "id": "8220b83793e2353ed599443787ffbfc6"
    },
    {
      "type": "html",
      "text": "\nStatic typing is often confused with [[Strong Typing]]. Also see [[Dynamic Typing]] and [[Soft Typing]].",
      "id": "65fc7b53b0b28341c26a45ed1868955f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a45e04cf666cf192ffa238421c6ebd16"
    },
    {
      "type": "html",
      "text": "\nIt's worth noting that modern hardware is somewhat statically typed. In particular, the set of operations that can be done on a value (defining that variable's type) depends on the variable that refers to it. i.e:",
      "id": "45da853d99fbc1b554fbdab2f45c4a07"
    },
    {
      "type": "html",
      "text": " I can do fadd $f0, $f1, $f2, which means that $fN is a floating point value.",
      "id": "ba963b98a8f9f084b8cb90b726b49fb6"
    },
    {
      "type": "html",
      "text": " I can do addi $r1, $r2, 3, which means that $rN is an integral value.",
      "id": "2c497781da7f66759506b1c86ac557ca"
    },
    {
      "type": "html",
      "text": " I can NOT do fadd $r1, $r2, $r3, or addi $f0, $f1, 3...   <i>(you CAN do this on the OpenRISC architecture, however.)</i>",
      "id": "a8cd14a5edb7057665ef04d724dadcd4"
    },
    {
      "type": "html",
      "text": "Now, there are few hardware-defined types on most platforms. Integer and address are often the same hardware type; segments are sometimes their own type, when they exist; floats are usually their own; vectors are their own type (or multiple types on x86). --[[Adam Berger]]",
      "id": "1a85633488c171eacc9411b6465c586d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a45e04cf666cf192ffa238421c6ebd16"
    },
    {
      "type": "html",
      "text": "Languages or compilers that use static typing:",
      "id": "dc967ad0369a1b1559989cf54d8be460"
    },
    {
      "type": "html",
      "text": "[[Java Language]]",
      "id": "e89542f98cc8f9476e283551113fef4c"
    },
    {
      "type": "html",
      "text": "[[Cee Plus Plus]]",
      "id": "2c4019d5fa19dfea814d3264eeae5b25"
    },
    {
      "type": "html",
      "text": "[[Pascal Language]]",
      "id": "535ba3724672fba4fe7d28435db08fa8"
    },
    {
      "type": "html",
      "text": "[[Ada Language]]",
      "id": "e3789b8be1ccb6210392a5d45308ddcf"
    },
    {
      "type": "html",
      "text": "[[Objective Caml]]",
      "id": "a716b76ef196c8b21589a6e324496605"
    },
    {
      "type": "html",
      "text": "[[Sml Language]]",
      "id": "861436a9ead43c8b1d5daafa3db48ef5"
    },
    {
      "type": "html",
      "text": "[[Haskell Language]]",
      "id": "4e42a98fd15399ad489f144716dda500"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a45e04cf666cf192ffa238421c6ebd16"
    },
    {
      "type": "html",
      "text": "\nSee [[Definitions Of Types]]",
      "id": "d4d62825c1968f7fd4afb8ec442fdc4f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a45e04cf666cf192ffa238421c6ebd16"
    },
    {
      "type": "html",
      "text": "[[Category Language Typing]]",
      "id": "ae268d36faad09e43035f76a777b5aea"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?StaticTyping c2.com]",
      "id": "1d52fe987c330fb6caeb60df588d790e"
    }
  ],
  "journal": [
    {
      "date": 1219954408000,
      "id": "8a5a51e463525b6483b847748e50bd26",
      "type": "create",
      "item": {
        "title": "Static Typing",
        "story": [
          {
            "type": "html",
            "text": "Static typing is very often misunderstood to mean that values are associated with types at [[Compile Time]], when instead it means that that a [[Reference Value]] is manifestly (which is not the same as at [[Compile Time]]) constrained with respect to the type of the value it can denote, and that the language implementation, whether it is a compiler or an interpreter, both enforces and uses these constraints as much as possible.",
            "id": "7f65704b59387f258f1ecee0e04ad73a"
          },
          {
            "type": "html",
            "text": "\nAn example of the use of static (manifest) type constraint by the is the ability to allocate exactly the right amount of memory to a variable, and another is the ability to disambiguate overloaded function calls in many cases.",
            "id": "718e336d08dea14ca1dd514ef6bcffd1"
          },
          {
            "type": "html",
            "text": "\nSome languages allow associating constraints other than type based ones on the values that may be denoted by a reference, but this is uncommon.",
            "id": "cc2d2379cde738593864af369ebed0f3"
          },
          {
            "type": "html",
            "text": "\n[[Type Inference]] makes many/most/all type declarations unnecessary if the [[Type System]] of your [[Programming Language]] is strong enough.",
            "id": "c1371cae5840874e970ec5e9a50b0ff4"
          },
          {
            "type": "html",
            "text": "\nHowever even when not necessary, type constraints can be very valuable in documenting assumptions and intentions.",
            "id": "8220b83793e2353ed599443787ffbfc6"
          },
          {
            "type": "html",
            "text": "\nStatic typing is often confused with [[Strong Typing]]. Also see [[Dynamic Typing]] and [[Soft Typing]].",
            "id": "65fc7b53b0b28341c26a45ed1868955f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a45e04cf666cf192ffa238421c6ebd16"
          },
          {
            "type": "html",
            "text": "\nIt's worth noting that modern hardware is somewhat statically typed. In particular, the set of operations that can be done on a value (defining that variable's type) depends on the variable that refers to it. i.e:",
            "id": "45da853d99fbc1b554fbdab2f45c4a07"
          },
          {
            "type": "html",
            "text": " I can do fadd $f0, $f1, $f2, which means that $fN is a floating point value.",
            "id": "ba963b98a8f9f084b8cb90b726b49fb6"
          },
          {
            "type": "html",
            "text": " I can do addi $r1, $r2, 3, which means that $rN is an integral value.",
            "id": "2c497781da7f66759506b1c86ac557ca"
          },
          {
            "type": "html",
            "text": " I can NOT do fadd $r1, $r2, $r3, or addi $f0, $f1, 3...   <i>(you CAN do this on the OpenRISC architecture, however.)</i>",
            "id": "a8cd14a5edb7057665ef04d724dadcd4"
          },
          {
            "type": "html",
            "text": "Now, there are few hardware-defined types on most platforms. Integer and address are often the same hardware type; segments are sometimes their own type, when they exist; floats are usually their own; vectors are their own type (or multiple types on x86). --[[Adam Berger]]",
            "id": "1a85633488c171eacc9411b6465c586d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a45e04cf666cf192ffa238421c6ebd16"
          },
          {
            "type": "html",
            "text": "Languages or compilers that use static typing:",
            "id": "dc967ad0369a1b1559989cf54d8be460"
          },
          {
            "type": "html",
            "text": "[[Java Language]]",
            "id": "e89542f98cc8f9476e283551113fef4c"
          },
          {
            "type": "html",
            "text": "[[Cee Plus Plus]]",
            "id": "2c4019d5fa19dfea814d3264eeae5b25"
          },
          {
            "type": "html",
            "text": "[[Pascal Language]]",
            "id": "535ba3724672fba4fe7d28435db08fa8"
          },
          {
            "type": "html",
            "text": "[[Ada Language]]",
            "id": "e3789b8be1ccb6210392a5d45308ddcf"
          },
          {
            "type": "html",
            "text": "[[Objective Caml]]",
            "id": "a716b76ef196c8b21589a6e324496605"
          },
          {
            "type": "html",
            "text": "[[Sml Language]]",
            "id": "861436a9ead43c8b1d5daafa3db48ef5"
          },
          {
            "type": "html",
            "text": "[[Haskell Language]]",
            "id": "4e42a98fd15399ad489f144716dda500"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a45e04cf666cf192ffa238421c6ebd16"
          },
          {
            "type": "html",
            "text": "\nSee [[Definitions Of Types]]",
            "id": "d4d62825c1968f7fd4afb8ec442fdc4f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a45e04cf666cf192ffa238421c6ebd16"
          },
          {
            "type": "html",
            "text": "[[Category Language Typing]]",
            "id": "ae268d36faad09e43035f76a777b5aea"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?StaticTyping c2.com]",
            "id": "1d52fe987c330fb6caeb60df588d790e"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628111801011
    }
  ]
}