{
  "title": "Non-existence",
  "story": [
    {
      "type": "reference",
      "id": "1e65e6a7b86d9f35",
      "site": "wiki.ralfbarkow.ch",
      "slug": "a-system-of-pure-relations",
      "title": "A System of Pure Relations",
      "text": "The [[Pile]] Approach To Data"
    },
    {
      "type": "markdown",
      "id": "04ee373cc2d8a2ea",
      "text": "> Type […] of accessing can result also in a ‘false’ statement, indicating the non-existence of the required relation in the Pile, i.e. getting a negative result takes the same effort as getting a positive result."
    },
    {
      "type": "pagefold",
      "id": "444cea9d4992bb51",
      "text": "~"
    },
    {
      "type": "reference",
      "id": "816f6c07cbc9add3",
      "site": "wiki.ralfbarkow.ch",
      "slug": "search-in-patricias-tree",
      "title": "Search in Patricia’s Tree",
      "text": "A search in [[Patricia]]’s tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
    },
    {
      "type": "markdown",
      "id": "9c93e942732df762",
      "text": "> At this point we compare the argument to the TEXT at the point specified in the current node (in this case node 𝛾). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node 𝛾 and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Non-existence",
        "story": []
      },
      "date": 1695212197089
    },
    {
      "item": {
        "type": "factory",
        "id": "1e65e6a7b86d9f35"
      },
      "id": "1e65e6a7b86d9f35",
      "type": "add",
      "date": 1695212219531
    },
    {
      "type": "edit",
      "id": "1e65e6a7b86d9f35",
      "item": {
        "type": "reference",
        "id": "1e65e6a7b86d9f35",
        "site": "wiki.ralfbarkow.ch",
        "slug": "a-system-of-pure-relations",
        "title": "A System of Pure Relations",
        "text": "The [[Pile]] Approach To Data"
      },
      "date": 1695212221968
    },
    {
      "id": "04ee373cc2d8a2ea",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "04ee373cc2d8a2ea",
        "text": "Type c) of accessing can result also in a ‘false’ statement, indicating the non-existence of the required relation in the Pile, i.e. getting a negative result takes the same effort as getting a positive result."
      },
      "after": "1e65e6a7b86d9f35",
      "attribution": {
        "page": "A System of Pure Relations"
      },
      "date": 1695212249798
    },
    {
      "type": "edit",
      "id": "04ee373cc2d8a2ea",
      "item": {
        "type": "paragraph",
        "id": "04ee373cc2d8a2ea",
        "text": "Type […] of accessing can result also in a ‘false’ statement, indicating the non-existence of the required relation in the Pile, i.e. getting a negative result takes the same effort as getting a positive result."
      },
      "date": 1695212257531
    },
    {
      "type": "edit",
      "id": "04ee373cc2d8a2ea",
      "item": {
        "type": "paragraph",
        "id": "04ee373cc2d8a2ea",
        "text": "> Type […] of accessing can result also in a ‘false’ statement, indicating the non-existence of the required relation in the Pile, i.e. getting a negative result takes the same effort as getting a positive result."
      },
      "date": 1695212265403
    },
    {
      "type": "edit",
      "id": "04ee373cc2d8a2ea",
      "item": {
        "type": "markdown",
        "id": "04ee373cc2d8a2ea",
        "text": "> Type […] of accessing can result also in a ‘false’ statement, indicating the non-existence of the required relation in the Pile, i.e. getting a negative result takes the same effort as getting a positive result."
      },
      "date": 1695212266646
    },
    {
      "item": {
        "type": "factory",
        "id": "816f6c07cbc9add3"
      },
      "id": "816f6c07cbc9add3",
      "type": "add",
      "after": "04ee373cc2d8a2ea",
      "date": 1695212322298
    },
    {
      "type": "edit",
      "id": "816f6c07cbc9add3",
      "item": {
        "type": "reference",
        "id": "816f6c07cbc9add3",
        "site": "wiki.ralfbarkow.ch",
        "slug": "search-in-patricias-tree",
        "title": "Search in Patricia’s Tree",
        "text": "A search in [[Patricia]]’s tree is carried out as follows: Suppose we are looking up the word THE (bit pattern 10111 01000 00101). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695212328199
    },
    {
      "item": {
        "type": "factory",
        "id": "444cea9d4992bb51"
      },
      "id": "444cea9d4992bb51",
      "type": "add",
      "after": "816f6c07cbc9add3",
      "date": 1695212329460
    },
    {
      "id": "444cea9d4992bb51",
      "type": "move",
      "order": [
        "1e65e6a7b86d9f35",
        "04ee373cc2d8a2ea",
        "444cea9d4992bb51",
        "816f6c07cbc9add3"
      ],
      "date": 1695212334514
    },
    {
      "type": "edit",
      "id": "444cea9d4992bb51",
      "item": {
        "type": "pagefold",
        "id": "444cea9d4992bb51",
        "text": "~"
      },
      "date": 1695212338220
    },
    {
      "id": "c2958a7cb83bd9b3",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "c2958a7cb83bd9b3",
        "text": "Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (nonexistent) 12th bit of the 10-bit argument. At this point we compare the argument to the TEXT at the point specified in the current node (in this case node 𝛾). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node 𝛾 and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "after": "816f6c07cbc9add3",
      "attribution": {
        "page": "Search in Patricia’s Tree"
      },
      "date": 1695212344866
    },
    {
      "type": "edit",
      "id": "c2958a7cb83bd9b3",
      "item": {
        "type": "markdown",
        "id": "c2958a7cb83bd9b3",
        "text": "> Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (nonexistent) 12th bit of the 10-bit argument. At this point we compare the argument to the TEXT at the point specified in the current node (in this case node 𝛾). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node 𝛾 and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695212358626
    },
    {
      "type": "edit",
      "id": "c2958a7cb83bd9b3",
      "item": {
        "type": "markdown",
        "id": "c2958a7cb83bd9b3",
        "text": "> Suppose, on the other hand, that we are looking for any or all keys starting with TH. The search process begins as above, but it eventually tries to look at the (non-existent) 12th bit of the 10-bit argument. At this point we compare the argument to the TEXT at the point specified in the current node (in this case node 𝛾). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node 𝛾 and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695212436518
    },
    {
      "id": "9c93e942732df762",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "9c93e942732df762",
        "text": "At this point we compare the argument to the TEXT at the point specified in the current node (in this case node 𝛾). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node 𝛾 and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "after": "c2958a7cb83bd9b3",
      "attribution": {
        "page": "Search in Patricia’s Tree"
      },
      "date": 1695212601985
    },
    {
      "type": "edit",
      "id": "9c93e942732df762",
      "item": {
        "type": "markdown",
        "id": "9c93e942732df762",
        "text": "> At this point we compare the argument to the TEXT at the point specified in the current node (in this case node 𝛾). If it does not match, the argument is not the beginning of any key; **but if it does match, the argument is the beginning of every key represented by dotted links in node 𝛾 and its descendants** (namely THIS, THAT, THE). (TAOCP, v. 3, p. 499)"
      },
      "date": 1695212605989
    },
    {
      "type": "remove",
      "id": "c2958a7cb83bd9b3",
      "date": 1695212608136
    }
  ]
}