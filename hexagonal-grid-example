{
  "title": "Hexagonal Grid Example",
  "story": [
    {
      "type": "markdown",
      "id": "ef71f2908f1e879b",
      "text": "This example includes a basic HTML structure with a main container and a container div that holds individual hexagonal elements. You can duplicate the `<div></div>` inside the .container to create more hexagons. Feel free to customize the content and styling to suit your needs."
    },
    {
      "type": "assets",
      "id": "5f70e65c7f04a404",
      "text": "pages/hexagonal-grid-example"
    },
    {
      "type": "markdown",
      "id": "dcbf76bb3641b745",
      "text": "This CSS code defines styles for a layout that seems to be based on a hexagonal grid. Let's break down the key components:\n\n1. **Variables in `.main`:**\n   - `--s`: Set to `100px`. This variable represents the size of the hexagon.\n   - `--m`: Set to `4px`. This variable represents the margin of the hexagon.\n   - `--f`: Calculated value using `calc(1.732 * var(--s) + 4 * var(--m) - 1px)`. This variable is likely used for positioning the pseudo-element in `.container::before`.\n\n2. **Styles for `.container`:**\n   - `font-size: 0;`: This eliminates the white space between inline-block elements.\n   \n3. **Styles for `.container div`:**\n   - `width: var(--s);`: Sets the width of each hexagon to the value of `--s`.\n   - `margin: var(--m);`: Sets the margin of each hexagon to the value of `--m`.\n   - `height: calc(var(--s)*1.1547);`: Calculates the height of each hexagon to maintain a consistent aspect ratio.\n   - `display: inline-block;`: Makes the hexagons inline-block elements.\n   - `font-size: initial;`: Resets the font size to its initial value.\n   - `clip-path: polygon(...)`: Defines a hexagonal shape for each div using a clip path.\n   - `background: red;`: Sets the background color to red for even-numbered hexagons.\n   - `margin-bottom: calc(var(--m) - var(--s)*0.2885);`: Adjusts the bottom margin to create the hexagonal grid.\n\n4. **Styling for odd-numbered hexagons:**\n   - `.container div:nth-child(odd)`: Overrides the background color to green for odd-numbered hexagons.\n\n5. **Styles for `.container::before`:**\n   - `content: \"\";`: Creates a pseudo-element.\n   - `width: calc(var(--s)/2 + var(--m));`: Sets the width of the pseudo-element.\n   - `float: left;`: Floats the pseudo-element to the left.\n   - `height: 120%;`: Sets the height of the pseudo-element.\n   - `shape-outside: repeating-linear-gradient(...)`: Shapes the pseudo-element using a repeating linear gradient. This gradient is likely used for creating additional space around the hexagons.\n\nIn summary, this CSS is creating a hexagonal grid layout with alternating colors (red and green) for the hexagons. The grid layout is achieved using the `clip-path` property, and additional styling is applied to create a visually interesting design. (ChatGPT)"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Hexagonal Grid Example",
        "story": []
      },
      "date": 1699656231665
    },
    {
      "item": {
        "type": "factory",
        "id": "013e2b9a33f47952"
      },
      "id": "013e2b9a33f47952",
      "type": "add",
      "date": 1699656233299
    },
    {
      "item": {
        "type": "factory",
        "id": "d9eb33d086abcc45"
      },
      "id": "d9eb33d086abcc45",
      "type": "add",
      "date": 1699656241171
    },
    {
      "type": "edit",
      "id": "d9eb33d086abcc45",
      "item": {
        "type": "html",
        "id": "d9eb33d086abcc45",
        "text": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        .main {\n            display: flex;\n            --s: 100px;\n            /* size */\n            --m: 4px;\n            /* margin */\n            --f: calc(1.732 * var(--s) + 4 * var(--m) - 1px);\n        }\n\n        .container {\n            font-size: 0;\n            /* disable white space between inline-block element */\n        }\n\n        .container div {\n            width: var(--s);\n            margin: var(--m);\n            height: calc(var(--s)*1.1547);\n            display: inline-block;\n            font-size: initial;\n            clip-path: polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%);\n            background: red;\n            margin-bottom: calc(var(--m) - var(--s)*0.2885);\n        }\n\n        .container div:nth-child(odd) {\n            background: green;\n        }\n\n        .container::before {\n            content: \"\";\n            width: calc(var(--s)/2 + var(--m));\n            float: left;\n            height: 120%;\n            shape-outside: repeating-linear-gradient( #0000 0 calc(var(--f) - 3px), #000 0 var(--f));\n        }\n    </style>\n    <title>Hexagonal Grid Example</title>\n</head>\n<body>\n    <div class=\"main\">\n        <div class=\"container\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <!-- Add more div elements as needed -->\n        </div>\n    </div>\n</body>\n</html>\n"
      },
      "date": 1699656243501
    },
    {
      "type": "edit",
      "id": "d9eb33d086abcc45",
      "item": {
        "type": "html",
        "id": "d9eb33d086abcc45",
        "text": "<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        .main {\n            display: flex;\n            --s: 100px;\n            /* size */\n            --m: 4px;\n            /* margin */\n            --f: calc(1.732 * var(--s) + 4 * var(--m) - 1px);\n        }\n\n        .container {\n            font-size: 0;\n            /* disable white space between inline-block element */\n        }\n\n        .container div {\n            width: var(--s);\n            margin: var(--m);\n            height: calc(var(--s)*1.1547);\n            display: inline-block;\n            font-size: initial;\n            clip-path: polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%);\n            background: red;\n            margin-bottom: calc(var(--m) - var(--s)*0.2885);\n        }\n\n        .container div:nth-child(odd) {\n            background: green;\n        }\n\n        .container::before {\n            content: \"\";\n            width: calc(var(--s)/2 + var(--m));\n            float: left;\n            height: 120%;\n            shape-outside: repeating-linear-gradient( #0000 0 calc(var(--f) - 3px), #000 0 var(--f));\n        }\n    </style>\n    <title>Hexagonal Grid Example</title>\n</head>\n<body>\n    <div class=\"main\">\n        <div class=\"container\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <!-- Add more div elements as needed -->\n        </div>\n    </div>\n</body>\n</html>"
      },
      "date": 1699656295098
    },
    {
      "type": "remove",
      "id": "d9eb33d086abcc45",
      "date": 1699656332247
    },
    {
      "type": "edit",
      "id": "013e2b9a33f47952",
      "item": {
        "type": "html",
        "id": "013e2b9a33f47952",
        "text": "<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>\n        .main {\n            display: flex;\n            --s: 100px;\n            /* size */\n            --m: 4px;\n            /* margin */\n            --f: calc(1.732 * var(--s) + 4 * var(--m) - 1px);\n        }\n\n        .container {\n            font-size: 0;\n            /* disable white space between inline-block element */\n        }\n\n        .container div {\n            width: var(--s);\n            margin: var(--m);\n            height: calc(var(--s)*1.1547);\n            display: inline-block;\n            font-size: initial;\n            clip-path: polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%);\n            background: red;\n            margin-bottom: calc(var(--m) - var(--s)*0.2885);\n        }\n\n        .container div:nth-child(odd) {\n            background: green;\n        }\n\n        .container::before {\n            content: \"\";\n            width: calc(var(--s)/2 + var(--m));\n            float: left;\n            height: 120%;\n            shape-outside: repeating-linear-gradient( #0000 0 calc(var(--f) - 3px), #000 0 var(--f));\n        }\n    </style>\n    <title>Hexagonal Grid Example</title>\n</head>\n<body>\n    <div class=\"main\">\n        <div class=\"container\">\n            <div></div>\n            <div></div>\n            <div></div>\n            <!-- Add more div elements as needed -->\n        </div>\n    </div>\n</body>\n</html>"
      },
      "date": 1699656337617
    },
    {
      "type": "remove",
      "id": "013e2b9a33f47952",
      "date": 1699656356306
    },
    {
      "item": {
        "type": "factory",
        "id": "5f70e65c7f04a404"
      },
      "id": "5f70e65c7f04a404",
      "type": "add",
      "date": 1699656366083
    },
    {
      "type": "edit",
      "id": "5f70e65c7f04a404",
      "item": {
        "type": "assets",
        "id": "5f70e65c7f04a404",
        "text": "pages/hexagonal-grid-example"
      },
      "date": 1699656386775
    },
    {
      "item": {
        "type": "factory",
        "id": "ef71f2908f1e879b"
      },
      "id": "ef71f2908f1e879b",
      "type": "add",
      "after": "5f70e65c7f04a404",
      "date": 1699656464943
    },
    {
      "id": "ef71f2908f1e879b",
      "type": "move",
      "order": [
        "ef71f2908f1e879b",
        "5f70e65c7f04a404"
      ],
      "date": 1699656468490
    },
    {
      "type": "edit",
      "id": "ef71f2908f1e879b",
      "item": {
        "type": "markdown",
        "id": "ef71f2908f1e879b",
        "text": "This example includes a basic HTML structure with a main container and a container div that holds individual hexagonal elements. You can duplicate the `<div></div>` inside the .container to create more hexagons. Feel free to customize the content and styling to suit your needs."
      },
      "date": 1699656501710
    },
    {
      "item": {
        "type": "factory",
        "id": "dcbf76bb3641b745"
      },
      "id": "dcbf76bb3641b745",
      "type": "add",
      "after": "5f70e65c7f04a404",
      "date": 1699656524182
    },
    {
      "type": "edit",
      "id": "dcbf76bb3641b745",
      "item": {
        "type": "markdown",
        "id": "dcbf76bb3641b745",
        "text": "This CSS code defines styles for a layout that seems to be based on a hexagonal grid. Let's break down the key components:\n\n1. **Variables in `.main`:**\n   - `--s`: Set to `100px`. This variable represents the size of the hexagon.\n   - `--m`: Set to `4px`. This variable represents the margin of the hexagon.\n   - `--f`: Calculated value using `calc(1.732 * var(--s) + 4 * var(--m) - 1px)`. This variable is likely used for positioning the pseudo-element in `.container::before`.\n\n2. **Styles for `.container`:**\n   - `font-size: 0;`: This eliminates the white space between inline-block elements.\n   \n3. **Styles for `.container div`:**\n   - `width: var(--s);`: Sets the width of each hexagon to the value of `--s`.\n   - `margin: var(--m);`: Sets the margin of each hexagon to the value of `--m`.\n   - `height: calc(var(--s)*1.1547);`: Calculates the height of each hexagon to maintain a consistent aspect ratio.\n   - `display: inline-block;`: Makes the hexagons inline-block elements.\n   - `font-size: initial;`: Resets the font size to its initial value.\n   - `clip-path: polygon(...)`: Defines a hexagonal shape for each div using a clip path.\n   - `background: red;`: Sets the background color to red for even-numbered hexagons.\n   - `margin-bottom: calc(var(--m) - var(--s)*0.2885);`: Adjusts the bottom margin to create the hexagonal grid.\n\n4. **Styling for odd-numbered hexagons:**\n   - `.container div:nth-child(odd)`: Overrides the background color to green for odd-numbered hexagons.\n\n5. **Styles for `.container::before`:**\n   - `content: \"\";`: Creates a pseudo-element.\n   - `width: calc(var(--s)/2 + var(--m));`: Sets the width of the pseudo-element.\n   - `float: left;`: Floats the pseudo-element to the left.\n   - `height: 120%;`: Sets the height of the pseudo-element.\n   - `shape-outside: repeating-linear-gradient(...)`: Shapes the pseudo-element using a repeating linear gradient. This gradient is likely used for creating additional space around the hexagons.\n\nIn summary, this CSS is creating a hexagonal grid layout with alternating colors (red and green) for the hexagons. The grid layout is achieved using the `clip-path` property, and additional styling is applied to create a visually interesting design."
      },
      "date": 1699656527734
    },
    {
      "type": "edit",
      "id": "dcbf76bb3641b745",
      "item": {
        "type": "markdown",
        "id": "dcbf76bb3641b745",
        "text": "This CSS code defines styles for a layout that seems to be based on a hexagonal grid. Let's break down the key components:\n\n1. **Variables in `.main`:**\n   - `--s`: Set to `100px`. This variable represents the size of the hexagon.\n   - `--m`: Set to `4px`. This variable represents the margin of the hexagon.\n   - `--f`: Calculated value using `calc(1.732 * var(--s) + 4 * var(--m) - 1px)`. This variable is likely used for positioning the pseudo-element in `.container::before`.\n\n2. **Styles for `.container`:**\n   - `font-size: 0;`: This eliminates the white space between inline-block elements.\n   \n3. **Styles for `.container div`:**\n   - `width: var(--s);`: Sets the width of each hexagon to the value of `--s`.\n   - `margin: var(--m);`: Sets the margin of each hexagon to the value of `--m`.\n   - `height: calc(var(--s)*1.1547);`: Calculates the height of each hexagon to maintain a consistent aspect ratio.\n   - `display: inline-block;`: Makes the hexagons inline-block elements.\n   - `font-size: initial;`: Resets the font size to its initial value.\n   - `clip-path: polygon(...)`: Defines a hexagonal shape for each div using a clip path.\n   - `background: red;`: Sets the background color to red for even-numbered hexagons.\n   - `margin-bottom: calc(var(--m) - var(--s)*0.2885);`: Adjusts the bottom margin to create the hexagonal grid.\n\n4. **Styling for odd-numbered hexagons:**\n   - `.container div:nth-child(odd)`: Overrides the background color to green for odd-numbered hexagons.\n\n5. **Styles for `.container::before`:**\n   - `content: \"\";`: Creates a pseudo-element.\n   - `width: calc(var(--s)/2 + var(--m));`: Sets the width of the pseudo-element.\n   - `float: left;`: Floats the pseudo-element to the left.\n   - `height: 120%;`: Sets the height of the pseudo-element.\n   - `shape-outside: repeating-linear-gradient(...)`: Shapes the pseudo-element using a repeating linear gradient. This gradient is likely used for creating additional space around the hexagons.\n\nIn summary, this CSS is creating a hexagonal grid layout with alternating colors (red and green) for the hexagons. The grid layout is achieved using the `clip-path` property, and additional styling is applied to create a visually interesting design. (Chat"
      },
      "date": 1699656568679
    },
    {
      "type": "edit",
      "id": "dcbf76bb3641b745",
      "item": {
        "type": "markdown",
        "id": "dcbf76bb3641b745",
        "text": "This CSS code defines styles for a layout that seems to be based on a hexagonal grid. Let's break down the key components:\n\n1. **Variables in `.main`:**\n   - `--s`: Set to `100px`. This variable represents the size of the hexagon.\n   - `--m`: Set to `4px`. This variable represents the margin of the hexagon.\n   - `--f`: Calculated value using `calc(1.732 * var(--s) + 4 * var(--m) - 1px)`. This variable is likely used for positioning the pseudo-element in `.container::before`.\n\n2. **Styles for `.container`:**\n   - `font-size: 0;`: This eliminates the white space between inline-block elements.\n   \n3. **Styles for `.container div`:**\n   - `width: var(--s);`: Sets the width of each hexagon to the value of `--s`.\n   - `margin: var(--m);`: Sets the margin of each hexagon to the value of `--m`.\n   - `height: calc(var(--s)*1.1547);`: Calculates the height of each hexagon to maintain a consistent aspect ratio.\n   - `display: inline-block;`: Makes the hexagons inline-block elements.\n   - `font-size: initial;`: Resets the font size to its initial value.\n   - `clip-path: polygon(...)`: Defines a hexagonal shape for each div using a clip path.\n   - `background: red;`: Sets the background color to red for even-numbered hexagons.\n   - `margin-bottom: calc(var(--m) - var(--s)*0.2885);`: Adjusts the bottom margin to create the hexagonal grid.\n\n4. **Styling for odd-numbered hexagons:**\n   - `.container div:nth-child(odd)`: Overrides the background color to green for odd-numbered hexagons.\n\n5. **Styles for `.container::before`:**\n   - `content: \"\";`: Creates a pseudo-element.\n   - `width: calc(var(--s)/2 + var(--m));`: Sets the width of the pseudo-element.\n   - `float: left;`: Floats the pseudo-element to the left.\n   - `height: 120%;`: Sets the height of the pseudo-element.\n   - `shape-outside: repeating-linear-gradient(...)`: Shapes the pseudo-element using a repeating linear gradient. This gradient is likely used for creating additional space around the hexagons.\n\nIn summary, this CSS is creating a hexagonal grid layout with alternating colors (red and green) for the hexagons. The grid layout is achieved using the `clip-path` property, and additional styling is applied to create a visually interesting design. (ChatGPT)"
      },
      "date": 1699656579146
    }
  ]
}