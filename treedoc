{
  "title": "Treedoc",
  "story": [
    {
      "type": "paragraph",
      "id": "3c1224b490d52feb",
      "text": "As an existence proof of non-trivial, useful, practical and efficient [[CRDT]], we exhibit one that implements an ordered set with insert-at-position and delete operations. It is called Treedoc, because sequence elements are identified compactly using a naming tree, and because its first use was concurrent document editing [10]. Its design presents original solutions to scalability issues, namely restructuring the tree without violating commutativity, supporting very large and variable numbers of writable [[Replicas]], and leveraging the data structure to ensure causal ordering without vector clocks."
    },
    {
      "type": "pagefold",
      "id": "e525a4cd8cc7ddfa",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "9c26456b06137c73",
      "text": "LETIA, Mihai, PREGUIÇA, Nuno and SHAPIRO, Marc, 2009. CRDTs: Consistency without concurrency control. 6 July 2009. [https://arxiv.org/abs/0907.0929 arxiv] [Accessed 18 December 2023]."
    },
    {
      "type": "paragraph",
      "id": "f30f6bd55cc6eb70",
      "text": "[10] Pregui ̧ ca, N., Marqu`es, J. M., Shapiro, M., and Let, ia, M. A commutative replicated data type for cooperative editing. In Int. Conf. on Distributed Comp. Sys. (ICDCS) (Mont ́eal, Canada, 2009)."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Treedoc",
        "story": []
      },
      "date": 1702893382926
    },
    {
      "id": "3c1224b490d52feb",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3c1224b490d52feb",
        "text": "As an existence proof of non-trivial, useful, practical and efficient CRDT, we exhibit one that implements an ordered set with insert-at-position and delete operations. It is called [[Treedoc]], because sequence elements are identified compactly using a naming tree, and because its first use was concurrent document editing [10]. Its design presents original solutions to scalability issues, namely restructuring the tree without violating commutativity, supporting very large and variable numbers of writable replicas, and leveraging the data structure to ensure causal ordering without vector clocks."
      },
      "attribution": {
        "page": "2023-12-18"
      },
      "date": 1702893384795
    },
    {
      "item": {
        "type": "factory",
        "id": "e525a4cd8cc7ddfa"
      },
      "id": "e525a4cd8cc7ddfa",
      "type": "add",
      "after": "3c1224b490d52feb",
      "date": 1702893390444
    },
    {
      "type": "edit",
      "id": "e525a4cd8cc7ddfa",
      "item": {
        "type": "pagefold",
        "id": "e525a4cd8cc7ddfa",
        "text": "~"
      },
      "date": 1702893393051
    },
    {
      "id": "9c26456b06137c73",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9c26456b06137c73",
        "text": "LETIA, Mihai, PREGUIÇA, Nuno and SHAPIRO, Marc, 2009. CRDTs: Consistency without concurrency control. 6 July 2009. [https://arxiv.org/abs/0907.0929 arxiv] [Accessed 18 December 2023]."
      },
      "after": "e525a4cd8cc7ddfa",
      "attribution": {
        "page": "2023-12-18"
      },
      "date": 1702893404800
    },
    {
      "id": "f30f6bd55cc6eb70",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "f30f6bd55cc6eb70",
        "text": "[10] Pregui ̧ ca, N., Marqu`es, J. M., Shapiro, M., and Let, ia, M. A commutative replicated data type for cooperative editing. In Int. Conf. on Distributed Comp. Sys. (ICDCS) (Mont ́eal, Canada, 2009)."
      },
      "after": "9c26456b06137c73",
      "attribution": {
        "page": "2023-12-18"
      },
      "date": 1702893410368
    },
    {
      "type": "edit",
      "id": "3c1224b490d52feb",
      "item": {
        "type": "paragraph",
        "id": "3c1224b490d52feb",
        "text": "As an existence proof of non-trivial, useful, practical and efficient [[CRDT]], we exhibit one that implements an ordered set with insert-at-position and delete operations. It is called [[Treedoc]], because sequence elements are identified compactly using a naming tree, and because its first use was concurrent document editing [10]. Its design presents original solutions to scalability issues, namely restructuring the tree without violating commutativity, supporting very large and variable numbers of writable replicas, and leveraging the data structure to ensure causal ordering without vector clocks."
      },
      "date": 1702893434041
    },
    {
      "type": "edit",
      "id": "3c1224b490d52feb",
      "item": {
        "type": "paragraph",
        "id": "3c1224b490d52feb",
        "text": "As an existence proof of non-trivial, useful, practical and efficient [[CRDT]], we exhibit one that implements an ordered set with insert-at-position and delete operations. It is called Treedoc, because sequence elements are identified compactly using a naming tree, and because its first use was concurrent document editing [10]. Its design presents original solutions to scalability issues, namely restructuring the tree without violating commutativity, supporting very large and variable numbers of writable replicas, and leveraging the data structure to ensure causal ordering without vector clocks."
      },
      "date": 1702893459344
    },
    {
      "type": "edit",
      "id": "3c1224b490d52feb",
      "item": {
        "type": "paragraph",
        "id": "3c1224b490d52feb",
        "text": "As an existence proof of non-trivial, useful, practical and efficient [[CRDT]], we exhibit one that implements an ordered set with insert-at-position and delete operations. It is called Treedoc, because sequence elements are identified compactly using a naming tree, and because its first use was concurrent document editing [10]. Its design presents original solutions to scalability issues, namely restructuring the tree without violating commutativity, supporting very large and variable numbers of writable [[Replicas]], and leveraging the data structure to ensure causal ordering without vector clocks."
      },
      "date": 1702893502536
    },
    {
      "type": "fork",
      "site": "localhost:3000",
      "date": 1702906046244
    }
  ]
}