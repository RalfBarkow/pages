{
  "title": "Listening to Smalltalk",
  "story": [
    {
      "type": "paragraph",
      "id": "e2ca253d874b1d60",
      "text": "The biggest challenge facing software developers today is how to gracefully evolve complex software systems in the face of changing requirements. "
    },
    {
      "type": "paragraph",
      "id": "8bf7e365fbd1d4b9",
      "text": "We clearly need software systems to be more dynamic, compositional and model-centric, but instead we continue to build systems that are static, baroque and inflexible. How can we better build change-enabled systems in the future? "
    },
    {
      "type": "paragraph",
      "id": "b151c1a5f8f016fb",
      "text": "To answer this question, we propose to look back to one of the most successful systems to support change, namely Smalltalk. We briefly introduce Smalltalk with a few simple examples, and draw some lessons for software evolution. "
    },
    {
      "type": "paragraph",
      "id": "a05db8327c54eceb",
      "text": "Smalltalk’s simplicity, its reflective design, and its highly dynamic nature all go a long way towards enabling change in Smalltalk applications. We then illustrate how these lessons work in practice by reviewing a number of research projects that support software evolution by exploiting Smalltalk’s design. We conclude by summarizing open issues and challenges for change-enabled systems of the future."
    },
    {
      "type": "pagefold",
      "id": "b50fe4470a0d17ed",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "2cda4b1702159b9d",
      "text": "\nNIERSTRASZ, Oscar and GÎRBA, Tudor, 2010. Lessons in Software Evolution Learned by Listening to Smalltalk. In: VAN LEEUWEN, Jan, MUSCHOLL, Anca, PELEG, David, POKORNÝ, Jaroslav and RUMPE, Bernhard (eds.), SOFSEM 2010: Theory and Practice of Computer Science. Online. Berlin, Heidelberg: Springer Berlin Heidelberg. p. 77–95. Lecture Notes in Computer Science. [Accessed 24 December 2022]. ISBN 978-3-642-11265-2. \n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Listening to Smalltalk",
        "story": []
      },
      "date": 1671880629853
    },
    {
      "item": {
        "type": "factory",
        "id": "e2ca253d874b1d60"
      },
      "id": "e2ca253d874b1d60",
      "type": "add",
      "date": 1671880631106
    },
    {
      "type": "edit",
      "id": "e2ca253d874b1d60",
      "item": {
        "type": "paragraph",
        "id": "e2ca253d874b1d60",
        "text": "The biggest challenge facing software developers today is how to gracefully evolve complex software systems in the face of changing requirements. We clearly need software systems to be more dynamic, compositional and model-centric, but instead we continue to build systems that are static, baroque and inflexible. How can we better build change-enabled systems in the future? To answer this question, we propose to look back to one of the most successful systems to support change, namely Smalltalk. We briefly introduce Smalltalk with a few simple examples, and draw some lessons for software evolution. Smalltalk’s simplicity, its reflective design, and its highly dynamic nature all go a long way towards enabling change in Smalltalk applications. We then illustrate how these lessons work in practice by reviewing a number of research projects that support software evolution by exploiting Smalltalk’s design. We conclude by summarizing open issues and challenges for change-enabled systems of the future."
      },
      "date": 1671880632753
    },
    {
      "item": {
        "type": "factory",
        "id": "b50fe4470a0d17ed"
      },
      "id": "b50fe4470a0d17ed",
      "type": "add",
      "after": "e2ca253d874b1d60",
      "date": 1671880651182
    },
    {
      "type": "edit",
      "id": "b50fe4470a0d17ed",
      "item": {
        "type": "pagefold",
        "id": "b50fe4470a0d17ed",
        "text": "~"
      },
      "date": 1671880653862
    },
    {
      "item": {
        "type": "factory",
        "id": "2cda4b1702159b9d"
      },
      "id": "2cda4b1702159b9d",
      "type": "add",
      "after": "b50fe4470a0d17ed",
      "date": 1671880655842
    },
    {
      "type": "edit",
      "id": "2cda4b1702159b9d",
      "item": {
        "type": "paragraph",
        "id": "2cda4b1702159b9d",
        "text": "\nNIERSTRASZ, Oscar and GÎRBA, Tudor, 2010. Lessons in Software Evolution Learned by Listening to Smalltalk. In: VAN LEEUWEN, Jan, MUSCHOLL, Anca, PELEG, David, POKORNÝ, Jaroslav and RUMPE, Bernhard (eds.), SOFSEM 2010: Theory and Practice of Computer Science. Online. Berlin, Heidelberg: Springer Berlin Heidelberg. p. 77–95. Lecture Notes in Computer Science. [Accessed 24 December 2022]. ISBN 978-3-642-11265-2. \n"
      },
      "date": 1671880658392
    },
    {
      "type": "edit",
      "id": "e2ca253d874b1d60",
      "item": {
        "type": "paragraph",
        "id": "e2ca253d874b1d60",
        "text": "The biggest challenge facing software developers today is how to gracefully evolve complex software systems in the face of changing requirements. "
      },
      "date": 1671880672393
    },
    {
      "type": "add",
      "id": "8bf7e365fbd1d4b9",
      "item": {
        "type": "paragraph",
        "id": "8bf7e365fbd1d4b9",
        "text": "We clearly need software systems to be more dynamic, compositional and model-centric, but instead we continue to build systems that are static, baroque and inflexible. How can we better build change-enabled systems in the future? "
      },
      "after": "e2ca253d874b1d60",
      "date": 1671880685239
    },
    {
      "type": "add",
      "id": "b151c1a5f8f016fb",
      "item": {
        "type": "paragraph",
        "id": "b151c1a5f8f016fb",
        "text": "To answer this question, we propose to look back to one of the most successful systems to support change, namely Smalltalk. We briefly introduce Smalltalk with a few simple examples, and draw some lessons for software evolution. "
      },
      "after": "8bf7e365fbd1d4b9",
      "date": 1671880696327
    },
    {
      "type": "add",
      "id": "a05db8327c54eceb",
      "item": {
        "type": "paragraph",
        "id": "a05db8327c54eceb",
        "text": "Smalltalk’s simplicity, its reflective design, and its highly dynamic nature all go a long way towards enabling change in Smalltalk applications. We then illustrate how these lessons work in practice by reviewing a number of research projects that support software evolution by exploiting Smalltalk’s design. We conclude by summarizing open issues and challenges for change-enabled systems of the future."
      },
      "after": "b151c1a5f8f016fb",
      "date": 1671880712560
    }
  ]
}