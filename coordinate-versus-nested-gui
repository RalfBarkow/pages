{
  "title": "Coordinate Versus Nested Gui",
  "story": [
    {
      "type": "html",
      "text": "GUI systems seem to use two different positioning systems: coordinate-based and nested. ",
      "id": "45bb043451a27ddf5ec59e33beaff956"
    },
    {
      "type": "html",
      "text": "\nThe coordinate approach seems to lend itself to better visual positioning (WYSIWYG), while nesting seems to be more conducive to re-sized screens. I think coordinate-based approaches better fit corporate culture because you can make it very close to how the customer or boss wants it. Plus, nesting often creates surprises when things don't wrap as anticipated.",
      "id": "6c45441675409e371a4e64165671e145"
    },
    {
      "type": "html",
      "text": "\nExamples of coordinate-based GUI: [[Visual Studio]] ([[Visual Basic]], [[Visual Cee]]), Delphi",
      "id": "76388e6abf0f4773813ce80840c32f5e"
    },
    {
      "type": "html",
      "text": "\nExamples of nested GUI: [[Java Awt]] and [[Java Swing]] using [[Layout Manager]]s, [[Mozilla Xul]], HTML tables with no height or width attribute, [[Tcl Tk]], GTK+, Qt.",
      "id": "bc4e9e39b4f26c37b40dfdda034ab010"
    },
    {
      "type": "html",
      "text": "\nMeldings of the two: Apple's [[Interface Builder]], [[Springs And Struts]], Java [[Eclipse Ide]] Visual Editor.",
      "id": "458031947e1461576c4adb440f01041d"
    },
    {
      "type": "html",
      "text": "\nCSS doesn't really fall into either category, does it? Most of its work is done without explicit coordinates... of course I refer only to pure HTML with CSS here; Javascript muddies things.",
      "id": "8571aa306a9b8b7b1cbec013d34111d7"
    },
    {
      "type": "html",
      "text": "<i>CSS falls into the melding category IMO. (is that what you said?) normally it's nested, but specifying <tt>position:relative</tt> or <tt>position:fixed</tt> turns it into a coordinates based system for that element, with its descendents being nested.</i>",
      "id": "8f3f0c3f89735474abe44d160dc820b6"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "\nBe aware that this title seems to present a [[False Dichotomy]]. Examples of non-coordinate-based non-nested GUIs include declarative relative-layout (with statements such as 'above', 'below', 'left of', 'right of', 'behind', 'in front of', 'within', conditional appearance, etc. These are, admittedly, less common than some other systems, but they are also relational (no 'hierarchy' of rules as per nested GUI) and delightfully composable (in the sense that the 'automatic' positioning rules may be combined for [[Automatic Vs Manual Placement]]). I don't know of any frameworks for this that I haven't written myself, though.",
      "id": "e7ed54a025b4f2102f993a53107c97a4"
    },
    {
      "type": "html",
      "text": " Perhaps the title should be \"absolute versus relative positioning GUI\". However, it's the sort of thing that if you think about long enough, you'd probably have to add gajillion caveats and disclaimers into the title.",
      "id": "9dd36e7611bbefc7492bc37735ab09f6"
    },
    {
      "type": "html",
      "text": " If you need to add caveats, that's a smell that you have the wrong title. So is a [[False Dichotomy]]. Something like '[[Automatic Gui Layout Conventions]]' would be more accurate.",
      "id": "731a285dc1457cead856e04fc09eedf6"
    },
    {
      "type": "html",
      "text": " <i>I disagree. Brevity often trumps accuracy for titles. They do not need to carry the full weight of all possibilities. That's why they have content. (I've had this debate somewhere already.) Plus, the common 2 are the main attractions. We can't keep toggling the title every time a small side alternative is mentioned. That's not economical.</i>",
      "id": "66eea0744912a0d715879316269e1420"
    },
    {
      "type": "html",
      "text": " Only very rarely does one <b>need</b> to sacrifice brevity for accuracy or correctness. You are too willing to make unnecessary sacrifices, and to claim that you did so for \"brevity\" is usually to lie to yourself and your audience. I think you're simply being lazy and short-sighted. Do you also dump your liquid waste on the floor of your home because it is slightly closer than the lavatory? ",
      "id": "c77779dec94d7c40fd618c2b9610a772"
    },
    {
      "type": "html",
      "text": " <i>You didn't address my points, but I don't want to argue about titles. The damned title is fine how it is.</i>",
      "id": "6cbc32c60fd8493b2e2f33cab7ebd032"
    },
    {
      "type": "html",
      "text": " The title as it is is a [[False Dichotomy]], is not particularly 'brief', and your defense of it has been totally irrational. For example, you wouldn't need to \"toggle the title every time\" if you had applied your brain for the few brief seconds it would have taken to realize that \"Nested\" isn't really all that common and there would be many alternatives to mention. Over 50% of this page is dedicated to 'alternatives', so I consider your \"the common 2 are the main attractions\" to be a misrepresentation at best and a lie at worst. Why do you even bother with such total [[Straw Man]] arguments? Lazy. Short-sighted. That's why. You seem to get upset over page titles that you see as 'inflammatory' (such as [[Brain Damage]]). If you swear to never argue about those, then I'll not bother you with your illogical [[False Dichotomy]] titles. Deal?",
      "id": "b555b2b3a602ef8b2d82311b50c0a25b"
    },
    {
      "type": "html",
      "text": " <i>Dude, you are being anal again. Go obsess on something else.</i>",
      "id": "9e37cc0dad1424594893855827a4f526"
    },
    {
      "type": "html",
      "text": " Dude, you're oozing and seeping nasty irrational shit all over the place again. Learn to keep it shut.",
      "id": "c0e40e8cd28607b69b56d2910306e1f6"
    },
    {
      "type": "html",
      "text": " <i>Why \"automatic\" in your suggestion?</i>",
      "id": "841c59fc3bb5ff755ab0a726187bfcc7"
    },
    {
      "type": "html",
      "text": " There are reasonable debates on [[Automatic Vs Manual Placement]]. If there was no such debate, or there was some implication in the opening that you wished to include discussion of manual layout issues (such as persistence, per-user views, etc.), then I would not have included the word \"automatic\". ",
      "id": "e5d106ea05c6224d59772ca2a1e38e92"
    },
    {
      "type": "html",
      "text": " <i>Fully automatic to me means that the designer gives no info whatsoever about placement. This excludes below, above, right, left, etc. \"Automatic\" is relative.</i>",
      "id": "3b918e055a5ce71a10b19eb2804aef21"
    },
    {
      "type": "html",
      "text": " Automatic, I'll agree, is relative (and staged/layered). [[Automatic Vs Manual Placement]] still makes it clear that in \"manual\" placement the <b>user</b> is responsible for placement, not the designer. Sometimes user is designer, so there is overlap, but the dichotomy <i>in the roles</i> is one that can commonly be cleanly applied in the real world. What framework actively supports users in moving buttons, text-boxes, other arbitrary display elements, etc. around? Would you like to discuss such frameworks here?",
      "id": "8d20061354762f2876e68010fb674211"
    },
    {
      "type": "html",
      "text": "<i>There is also coordinate-relative, such as '5 pixels from the upper-left corner'. This isn't as composable in the sense that a composition cannot simply insert something 'between' two other display items without first explicitly moving the items around. A claim is made below that 'Nested GUIs' are often coordinate-relative in this sense.</i>",
      "id": "799e0cd7d081210c833c04020b554698"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "<b>Summary of Arguments</b>",
      "id": "b3cae290a3fbee165c2fddcb05923be7"
    },
    {
      "type": "html",
      "text": "<b>Advantages of Nested Gui's</b>",
      "id": "55d397b0eaf3734415da7298508392fd"
    },
    {
      "type": "html",
      "text": " Generally adjust more automatically to screen size/resolution",
      "id": "1d5117ba60e14c4f51785c32ded72a92"
    },
    {
      "type": "html",
      "text": " Allows for modularity of groups of gui elements (e.g. reuse of sub-dialogs). <i>Disputed by some</i>",
      "id": "541351033973ced6d99f77da22967196"
    },
    {
      "type": "html",
      "text": " Easier to internationalize as GUI components can scale to text and reorganize for character order localization.",
      "id": "bd4c830ef953afea70041d2bd6db0891"
    },
    {
      "type": "html",
      "text": "<b>Disadvantages</b>",
      "id": "bd0606b0cd8fe7b0d785352b3ebb42a8"
    },
    {
      "type": "html",
      "text": " Visual design tools for nested GUI's are not as easy to create.",
      "id": "b12745100b5c51c1edda15d3d3027cd7"
    },
    {
      "type": "html",
      "text": " Can be difficult to fine-tune placement (disputed by some below).",
      "id": "5be4160d77d3dabcf7867b83b37f47d2"
    },
    {
      "type": "html",
      "text": "\nI personally think that each has its strengths and weaknesses and each is better for different situations. Thus, ideally a GUI kit should make <b>both</b> available. Some GUI kits have \"layout managers\" that include a coordinate-based placement as one of the layout techniques for the given \"panel\". Generally they include at least:",
      "id": "51fe99647982dfd5307e00bfbb592f88"
    },
    {
      "type": "html",
      "text": " Relative placement with directions (up, down, left, right)",
      "id": "ac9571078de41ca7b01a7ceda820c709"
    },
    {
      "type": "html",
      "text": " Grid-based where the grid elements are dynamic",
      "id": "1142090e7f4b2282cab4e85a3ec391fd"
    },
    {
      "type": "html",
      "text": " Coordinate",
      "id": "031aba3a8b750a1803a34a2b6a9f00c7"
    },
    {
      "type": "html",
      "text": "\nThe panels can be nested so that one can mix-and-match. HTML does this to some extent by mixing tables (grid) with relative placement. Each \"cell\" in the table is like an independent panel where you can use the (default) relative placement or define yet another table within it.",
      "id": "e023f8944d1f926e1fc471a281ae37c0"
    },
    {
      "type": "html",
      "text": "-- top",
      "id": "c94dfde5a06e07d897222ab0aeb58171"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "Limitations of absolute positioning are very apparent if we will try to see site like cnn.com on a screen with fine resolution and small size ( 1400x1050 on my 15 in. notebook screen ), everything looks small and makes it difficult to read and use. Sites like java.sun.com use relative positioning and fit nicely on my screen and very useful when I use Mozilla's CTRL(+) for zooming.",
      "id": "9a3565b0652d558345404217f36b0ba3"
    },
    {
      "type": "html",
      "text": "<i>Coordinate-based does not necessarily preclude zooming. It may just be bad design. A good design would perhaps make it so that only ads or menus go out of direct view when zooming, not specific articles.</i>",
      "id": "4fa6c5f3f5b8bde225349297311c0f3f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "One of the alleged drawbacks of the coordinate approach is that things are not \"grouped\". In practice, I think I would rather have set-based grouping anyhow rather than nested. For example, the group that may belong to a given entity may be different from or orthogonal to the group that you want to put a square around. Hierarchies are too limited in my opinion with regard to grouping options. See [[Limits Of Hierarchies]].",
      "id": "3dfb59c217d2b28146e0b7b1db3a3742"
    },
    {
      "type": "html",
      "text": "[What do you mean by this? Obviously, a logical grouping of controls doesn't necessarily (but probably should) have anything to do with how they're displayed on your screen. But when you're talking about 'layout', then of course controls have to be grouped with the box around them. Logical/programmatic grouping and layout grouping don't have to have anything to do with each other.]",
      "id": "226c155a844395853fd8259ebcfba304"
    },
    {
      "type": "html",
      "text": "\nThat is true, but generally tools tend to assume they are the same. But if they allow/implement orthogonal grouping for non-visual stuff, then why not also allow it for visual stuff? I suspect because it requires more training to work effectively with sets than trees.",
      "id": "0217f8afe372b2964349d5df1143579c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "IME, the coordinate approach has a great inertia against change. Want to add a new field? Shift everything over manually, the position of every control depends on the size and position of every other controls. With nested, you just add the field and you are done.",
      "id": "d175ee285fd9f5ecc67ac31f27d6930e"
    },
    {
      "type": "html",
      "text": "<i>True, but it is usually easier to find the add location to begin with with coordinates, and a good IDE usually makes it simple to select a group of widgets to move down as a group. Then again, it depends on the particular form arrangement.</i>",
      "id": "a851850d0e23c920ca41f40bcbceabf9"
    },
    {
      "type": "html",
      "text": "<i>(I don't know if \"tab order\" comes into play. If tab order allows decimals, then inserting something in between is usually not a problem. It is the integer-based tab orders which are a headache IMO.)</i>",
      "id": "94b70a8d060603ccbe1ce2fc76f27e70"
    },
    {
      "type": "html",
      "text": "\nI assume you really mean it is easier to find the add location to begin with <b>in the visual tool</b> you are using, because I find that, in the source, \"add(control, 123, 234)\" is just as tough to find as \"add(control)\". If we are comparing visual tools, it is just as easy, if not easier, to find the location to add your control, at least in VAJ the last time I used it, (it list a tree view of all the controls starting from your main window, making the nesting of the controls very clear).",
      "id": "2ac6747910448b28341185aa7a15a2ea"
    },
    {
      "type": "html",
      "text": "<i>For complex GUI's, trees often stink IMO - [[Limits Of Hierarchies]]. For example, I often want to group, filter, or move by rather orthogonal criteria. Trees don't handle orthogonality very well.</i>",
      "id": "9a7c781563213cdec1a6ab9c7f89436c"
    },
    {
      "type": "html",
      "text": "[You're talking about your convenience at design-time vrs. functionality at run time again. Regardless, it's a functionality of a specific visual tool, not any sort of consequence of coordinate based layout]",
      "id": "119b20a1a9f7e0e88f96b38dcaa29ee8"
    },
    {
      "type": "html",
      "text": "\nI am not sure what you mean.",
      "id": "6bcf0462a1065b93d3eac5291b55a42f"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "\nOr [[Structured Graphics]] versus [[Structured Documents]]. The former appeals to graphical artists, those with a visual orientation, the latter to textual artists, those with a language orientation.",
      "id": "57fb96b78ec805e65309a6f926cc3f27"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "I didn't understand the term \"nested\" until the examples were added. How about \"flowed\" instead? -- [[Kris Johnson]]",
      "id": "2d1f1ade85563b9f202e8f0168bc9581"
    },
    {
      "type": "html",
      "text": "<i>I think we're actually talking about static vs dynamic... i.e., hardcoding the relationships numerically between componenents/sizes vs dynamically assigning them through constraints of some form.</i>",
      "id": "6e033ffb8ad8767732a5e42f0388114d"
    },
    {
      "type": "html",
      "text": "<i>The fact that a dynamic layout is 'flowed' as opposed to 'nested' (widgets in containers in containers etc) isn't really the issue</i>",
      "id": "9d210fd1beeb8a7c6cd1bf06e64e890f"
    },
    {
      "type": "html",
      "text": "\nThe \"HTML tables with no height or width attribute\" example is what led me to believe that \"flowing\" is the issue rather than \"nesting\", as does the \"when things don't wrap as anticipated\" phrase in the prologue.\t-- kj",
      "id": "6e2a8481a84919d4cd7cfb4aa780333f"
    },
    {
      "type": "html",
      "text": "<i>But if it does have height or width attributes in parts of it, is it something in-between? I am okay with \"flow\" if you want to change the title, but perhaps there is a non-hierarchical flow approach possible, although I cannot envision it right now.</i>",
      "id": "1136b48d91ac8dc7a34ca4312a0717ac"
    },
    {
      "type": "html",
      "text": "<i>[delete when section when forces resolved]</i>",
      "id": "b0fcd3e236284e381e2f3320abaeb8c1"
    },
    {
      "type": "html",
      "text": "\"Flowing\" is a consequence of the second way, but not its defining characteristic. When you're discussing HTML, this tension is characterized as \"visual vs. semantic.\" Not sure if it applies as well here. -- francis",
      "id": "db2e8ca25b793f99778df23f450c484c"
    },
    {
      "type": "html",
      "text": "<i>How about</i>",
      "id": "5753d1f4f8b7d9e14d5809fa37412e64"
    },
    {
      "type": "html",
      "text": "Flow-based:<br>hierarchical nesting without absolute coordinates",
      "id": "48348fb62407635195f74bd4fb56f9f3"
    },
    {
      "type": "html",
      "text": "Coordinate-based:<br>uses absolute coordinates",
      "id": "8a1ca947eadb3ccc4e326fb1b211b610"
    },
    {
      "type": "html",
      "text": "Mixed:<br>Uses some nesting and some absolute coordinates",
      "id": "b36e918d96c14a6532e938cba052e2b4"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "\nIt seems that there are several distinct \"axes\" being considered here:",
      "id": "7b4751cbab0dd206b164bb5dc3fa799f"
    },
    {
      "type": "html",
      "text": " Flat organization (all components are siblings) vs. hierarchical organization (containment) ",
      "id": "14c5f58956dd8edfe6e3b88529e47b45"
    },
    {
      "type": "html",
      "text": " Absolute positioning (components share a common reference point) vs. relative positioning (components use other components as reference points)",
      "id": "5fe8c172bdcf93379909052427058001"
    },
    {
      "type": "html",
      "text": " Numeric vs. non-numeric position specifications",
      "id": "c56166c7f8a4af9d731defd64162b734"
    },
    {
      "type": "html",
      "text": " Screen pixel-based coordinates vs. logical coordinate systems",
      "id": "4229340cd923a6404217256eb05e2864"
    },
    {
      "type": "html",
      "text": " Explicit layout by developer vs. automated constraint-based layout",
      "id": "56ad114a548f261faa24b70f32a1cd2a"
    },
    {
      "type": "html",
      "text": " Edit/compile-time layout vs. run-time layout",
      "id": "99d73684c06c4475a4c46938285f2810"
    },
    {
      "type": "html",
      "text": " Visual vs. semantic (which I understand to mean \"Based on what looks good vs. based on the logical structure of the data\")",
      "id": "82447fa398b134f8f47fed6d9a6efbbc"
    },
    {
      "type": "html",
      "text": "Most real-world GUI systems provide some level of support for each extreme on each axis. A developer can usually make any system work any place along any of the axes, so this is not an \"either-or\" situation, but a \"how easy is it to do what I want\" situation.",
      "id": "23192003c46350751004794733379024"
    },
    {
      "type": "html",
      "text": "\nWhile certain combinations are more useful than others, I don't think \"coordinate\" vs \"nested\" makes it very clear exactly what we are talking about. Neither does \"flow\" or \"layout\". Maybe this page needs to be split up, or maybe somebody needs to clarify what the topic is.",
      "id": "9ff64da22e4704cbc9a407c51f6d27d3"
    },
    {
      "type": "html",
      "text": "-- [[Kris Johnson]]",
      "id": "071a62a5f19e27f701debe9a25d045e7"
    },
    {
      "type": "html",
      "text": "\nAssociative layouts (most widgets layouts are determined by a relationship to a different widget), as opposed to independent layouts (where most widgets layouts are determined by a relationship to a top-level container)",
      "id": "e26c6bfb7d760bae7bda2cdd49e2e237"
    },
    {
      "type": "html",
      "text": "<i>I think that is the same as \"absolute positioning vs. relative positioning\" in the bullet list above.</i>",
      "id": "1bcc8d054c6ae330c9be6d9a2c88d825"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "<i>What are examples of \"non-numeric\" and \"logical coordinates\"?</i>",
      "id": "d9e008fdd13c032e65131f5ea8b0f2e0"
    },
    {
      "type": "html",
      "text": "\"Non-numeric position specifications\" would be something like \"to the left of object X\", or \"between objects X and Y\", or \"at the top of the window\" or \"half the width of the screen\" (you might claim that \"half\" is numeric). A \"logical coordinate system\" is one that is not directly tied to hardware pixels; you might use percentages of window size, for example.",
      "id": "63b3ba10732f4b0a9173afb081a5e303"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "\nWhat about auto-generation of GUIs, such as a rule based system that <i>generates</i> GUIs for corresponding models? Coordinate systems can't handle that. It would then be more of Esthetic vs Model Based. Esthetic will imply the layout was based on visual appearance (a VB application where coordinates are hardcoded) and Model Based would imply that the GUI is generated from a model and comes out of the model. If your application does not auto-generate GUIs, then Flow based layout does not offer much other than resizability.",
      "id": "b92b1921fda9a39df7986f7ce12beb58"
    },
    {
      "type": "html",
      "text": "<i>Auto-generation is usually used for preliminary arrangement in my experience. One then makes custom adjustments.</i>",
      "id": "c9821e8f7a6067b7011104a97bcdae65"
    },
    {
      "type": "html",
      "text": "\nI do not mean auto-generation of <i>code</i>. I meant generation of GUI at run-time. -- [[Anonymous Donor]]",
      "id": "9acc570f657476284d60b1338a35bb51"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "<b>Users are Picky Down to the Pixel Level</b>",
      "id": "46c3aaa366489188390036b8727abb9b"
    },
    {
      "type": "html",
      "text": "\nI am suggesting that auto-generated GUI's are fine for prototypes, but users or customers often want to tweak stuff in ways that flow-based cannot easily handle. There are certain esthetic \"rules\" that a flow engine just has no clue about; perhaps because it is a subjective thing. But [[The Customer Is Always Right]] even if they want stupid things. In other words, coordinate-based allows you to do stupid or illogical things easier with the layout. ",
      "id": "8e986bb03ddece1fcfdda32d48331120"
    },
    {
      "type": "html",
      "text": "\nFor example, some things might tend to <i>almost</i> line up out of <b>pure coincidence</b>. The customer looks at it and says, \"could you line these up better, please?\" not knowing or caring that it is just coincidence that they are almost lined up. The flow engine has no idea that a bunch of things happen to coincide in length or position. With coordinate-based, you simply shuffle things around a bit in a WYSIWYG tool to make them line up all the way. No fuss, no hassle, no NBSP-like filler things. Suppose we have some input fields with labels right-justified against them:",
      "id": "24d625d294420025cbdc99749f00c59a"
    },
    {
      "type": "html",
      "text": "...Sdf asdf sflksjdf:<br>[____]",
      "id": "855a83393badc481fa986b58f46d3ab9"
    },
    {
      "type": "html",
      "text": "....Eosjslk blkjasdl:<br>[____]",
      "id": "bd5215c2dd2db0f4d156a2e4504f9f71"
    },
    {
      "type": "html",
      "text": "............Grog sdj:<br>[____]",
      "id": "6f873a8bc940867e341662b20d4794cc"
    },
    {
      "type": "html",
      "text": "..........Asdsdf sdf:<br>[____]",
      "id": "930b3a30a6833b8e960d8da3ff4d4235"
    },
    {
      "type": "html",
      "text": "............Sld bsok:<br>[____]",
      "id": "c1a5e38d565ce19c4d80961e85f03dc5"
    },
    {
      "type": "html",
      "text": "...Ybwslkj blso apon:<br>[____]",
      "id": "5eab36bc8c937b7212bf8853d017107b"
    },
    {
      "type": "html",
      "text": "...Ublkjs mogk robno:<br>[____]",
      "id": "42cb3e64095d8f0a816857f7b7a61cf4"
    },
    {
      "type": "html",
      "text": "\nThe user might look at the middle three fields as a visual group and say, \"Those are almost aligned on the left side. Can you make them fully aligned?\" Our framework only knows left, middle, and right aligned. It is blind to this coincidental alignment of the left-most characters in this case. (I would personally disagree with such a layout, but [[The Customer Is Always Right]]. They don't appreciate lectures on \"proper\" layouts, they just want it as they envision it without \"flak\".) In a coordinate-based system you simply shuffle the text around to make it fit how the customer wants it to be:",
      "id": "8469f10458cee69db812fd98a752fa25"
    },
    {
      "type": "html",
      "text": "...Sdf asdf sflksjdf:<br>[____]",
      "id": "855a83393badc481fa986b58f46d3ab9"
    },
    {
      "type": "html",
      "text": "....Eosjslk blkjasdl:<br>[____]",
      "id": "bd5215c2dd2db0f4d156a2e4504f9f71"
    },
    {
      "type": "html",
      "text": "..........Grog sdj..:<br>[____]",
      "id": "8e019ef35d7ac2545a73684173e581a6"
    },
    {
      "type": "html",
      "text": "..........Asdsdf sdf:<br>[____]",
      "id": "930b3a30a6833b8e960d8da3ff4d4235"
    },
    {
      "type": "html",
      "text": "..........Sld bsok..:<br>[____]",
      "id": "4bf70a934c8860f29bfc877ff427b597"
    },
    {
      "type": "html",
      "text": "...Ybwslkj blso apon:<br>[____]",
      "id": "5eab36bc8c937b7212bf8853d017107b"
    },
    {
      "type": "html",
      "text": "...Ublkjs mogk robno:<br>[____]",
      "id": "42cb3e64095d8f0a816857f7b7a61cf4"
    },
    {
      "type": "html",
      "text": "(Dots used to avoid [[Tab Munging]]. Unfortunately, the dots make it hard to see the alignment issue.)",
      "id": "9effc657e6c37277933ff723793433a0"
    },
    {
      "type": "html",
      "text": "\nI realize that we can make a split sub-container in a nested model to left-justify the middle three, but it is a lot more work and it is hard to tell from the code what it is going on until it is actually rendered. I would rather just click-and-drag than introduce more UI fiddle faddle into the software code. The less we have to go back and nit with the code for esthetic purposes, the better. Adding yet more nestedness to \"solve\" things like this reminds me of [[Adding Epicycles]]. -- top",
      "id": "be41b3ec18afe407f158661732fdf793"
    },
    {
      "type": "html",
      "text": " A non-broken layout management system can do that without blinking. Furthermore, unlike the coordinate based approach, it will continue to lay things out as specified even with the labels are translated into another language, or when the user selects a font with different kerning, or when it's run under a theme engine where the controls on the right are a different size. Yes, it involves nesting. No, that doesn't necessarily involve munging around with your code. Besides, what do you think all your pixel-twiddling is? That's code too.",
      "id": "96bccd9c9455a3f471114a3254853bb7"
    },
    {
      "type": "html",
      "text": " <i>I am skeptical it can do it conveniently. The computer can't \"know\" it looks odd to humans, especially if it only \"bothers\" a specific customer. Besides, change in language may create new coincidental oddities that need to be tweaked in or tweaked out just the same. The words that were short may be long in other languages, so the middle block issue may become irrelevant or different altogether with a different language. If you can provide some pseudo-code to illustrate how it can be handled via nested blocks, I would like to see it. I can tweak such easier with mouse dragging than with adding new text block layers into the GUI code. It is simple: See, Grab, Drag, Save, Done.</i> -t",
      "id": "47b1a7d7a7f8d052c5637529aa8577a8"
    },
    {
      "type": "html",
      "text": "<i>You can do that in a flow layout system if it supports grids (like HTML tables). Having seen that the things almost line up, nail them to a grid.</i>",
      "id": "229c7bcc0627c4e3e511d7b5b3eaa5c1"
    },
    {
      "type": "html",
      "text": "\nWhy have the middle-man? Just use coordinates. Besides, grids don't handle the \"almost\" problem described above unless each cell is pixel-sized, in which case you have a coordinate system anyhow. I suggest you try the above exercise using HTML tables and record your changes. Note that at least you are going to have to split one column into two and give \"colspan=2\" tags on all the non-participant cells. Then you have to worry about the middle-most row lining up properly on the right because it will be left justified if we want it to match its two neighbors on the new left edge. Our first try will probably look like this:",
      "id": "d8a64a5ade3c29f8900b256aef481c15"
    },
    {
      "type": "html",
      "text": "...Sdf asdf sflksjdf:<br>[____]",
      "id": "855a83393badc481fa986b58f46d3ab9"
    },
    {
      "type": "html",
      "text": "....Eosjslk blkjasdl:<br>[____]",
      "id": "bd5215c2dd2db0f4d156a2e4504f9f71"
    },
    {
      "type": "html",
      "text": "........Grog sdj....:<br>[____]",
      "id": "cbee5fb7c475fc7422b6ca6b5184d634"
    },
    {
      "type": "html",
      "text": "........Asdsdf sdf..:<br>[____]",
      "id": "f6e4d5c48b4cf460dd4e7fa9c98f067a"
    },
    {
      "type": "html",
      "text": "........Sld bsok....:<br>[____]",
      "id": "ce97f85a79898266e1b7e0b0f282de0b"
    },
    {
      "type": "html",
      "text": "...Ybwslkj blso apon:<br>[____]",
      "id": "5eab36bc8c937b7212bf8853d017107b"
    },
    {
      "type": "html",
      "text": "...Ublkjs mogk robno:<br>[____]",
      "id": "42cb3e64095d8f0a816857f7b7a61cf4"
    },
    {
      "type": "html",
      "text": "\nThere is no simple HTML command to tell it to line up both on the right side and match its two neighbors as the same time. That is an abstraction that HTML, nor any other known tool, was built to natively handle in a strait-forward way. In HTML it would likely require fiddling around with absolute cell widths or NBSP's. Something that would be 1 minute drag-and-move exercise under coordinates is now a 45-minute exercise in type-text-and-re-render, or as I like to call it: \"nudge-N-fudge\". Plus, it still might not render the same on another browser even after all that. Further, MS-IE has known layout bugs that they don't seem to be a in a hurry to fix.",
      "id": "8d35c9022849869a0a2b40ccf7a2798c"
    },
    {
      "type": "html",
      "text": "\nNote that this issue applies to the nested approach also, not just auto-generated GUI's.",
      "id": "a75d8285181f7873afe8333462f14394"
    },
    {
      "type": "html",
      "text": "<i>No it doesn't. Relative coordinates can be specified at any precision required.</i>",
      "id": "fc8d0697d237efbef01e027795a84aa5"
    },
    {
      "type": "html",
      "text": "\nRelative coordinates? That is kind of a hybrid between the choices considered.",
      "id": "a16ad9427a80e46bb32b5501a99f8858"
    },
    {
      "type": "html",
      "text": "<i>No it isn't. What you refer to as \"nested GUIs\" are just GUIs that use relative coordinates. Swing and HTML both support relative and absolute positioning of components, and those positions can be expressed in pixels.</i>",
      "id": "7a5140f26eb65ed071d40bf0d4497ab0"
    },
    {
      "type": "html",
      "text": "\nI think we have some serious definition issues to work out.",
      "id": "e385d399a97b31d374897c0923ccb79d"
    },
    {
      "type": "html",
      "text": "<i>OK, let's start with the top of the page:</i>",
      "id": "9d0dcb2f24794cc9073f762cd7df4de9"
    },
    {
      "type": "html",
      "text": "\"Examples of coordinate-based GUI: VB, VC++\"",
      "id": "44c9907fa99b7e5973dc0ecaf51d2e8f"
    },
    {
      "type": "html",
      "text": "<i>These use absolute positions for components.</i>",
      "id": "435b7abf7c5a73b6b673be7b4afda5b7"
    },
    {
      "type": "html",
      "text": "\"Examples of nested GUI: Java AWT and Swing using L<b></b>ayoutManagers, HTML tables with no height or width attribute, Tk.\"",
      "id": "4000a2f912f7622b721f5eee140a68f8"
    },
    {
      "type": "html",
      "text": "<i>These support relative positions for components. Swing and AWT have a \"null\" layout manager that allows absolute positioning. HTML's divs can be relative or absolute.</i>",
      "id": "7c1055c105a76e86016a3da427dc081d"
    },
    {
      "type": "html",
      "text": "<i>What other issues are there?</i>",
      "id": "8d1f95d34c393abf7b11bd8eb4a58827"
    },
    {
      "type": "html",
      "text": "\nI would not call HTML and Tk style \"relative\". Relative is \"5 pixels from the corner of containing table cell\". Here is a working taxonomy:",
      "id": "4f5dbf35a902abb603315fe4a8fab6cd"
    },
    {
      "type": "html",
      "text": " Absolute coordinates",
      "id": "f19b33286fe01cbdc4ed92be88e44e66"
    },
    {
      "type": "html",
      "text": " Relative coordinates",
      "id": "2e6391f06e488926ec21b9409a8aff09"
    },
    {
      "type": "html",
      "text": " Flow-based positioning",
      "id": "e10e0a6d541327cade1e4d97947f0090"
    },
    {
      "type": "html",
      "text": "(BTW, Tk has an optional coordinate-based geometry manager.)",
      "id": "3cfea538c4b249a7ac5d55879bbd24b8"
    },
    {
      "type": "html",
      "text": "<i>I've never used Tk, but HTML/CSS definitely supports relative positioning. (How else would you describe \"<div style='position:relative; left:0px; display:inline; width:25px'>0</div>\"?) Flow-based\" is just relative positioning where the coordinates are expressed as components instead of pixels.</i>",
      "id": "6416439fccfc9a69551b94f26f054ef6"
    },
    {
      "type": "html",
      "text": "\"Components\"? I admit I don't yet have a satisfactory definition of \"flow based\" to offer as an alternative, but I don't like \"relative\" because there is relative positioning like your example above.",
      "id": "6d2c898ccaf3ddb1a685ecef88886de9"
    },
    {
      "type": "html",
      "text": "\nThat CSS clause <i>is</i> an example of relative coordinates, but not flow-based. Working together, perhaps we can come up with sounder definitions. The best I can say at this point is that \"flow based\" gives positions relative to other components using <b>non-distance</b> references. Relative coordinates use numeric distances, as do absolute positions. In practice, flow-based may specify borders/buffers/margins (visible or invisible) using distances, which is a slight violation of the rule, but perhaps forgivable. ",
      "id": "7b2bc11db346a4a3dbcf00e3e8168145"
    },
    {
      "type": "html",
      "text": "\nDifferent reference techniques:",
      "id": "db7ce56b12e0637c32b55522283c2954"
    },
    {
      "type": "html",
      "text": " Absolute coordinates from corner of window",
      "id": "5579a780e77bf11a20b4605d8458eb8f"
    },
    {
      "type": "html",
      "text": " Relative (offset) coordinates from other widgets",
      "id": "b1f10682be3e54228962b4dbd7da9d87"
    },
    {
      "type": "html",
      "text": " Container references (such as which table a given item is \"in\")[1]",
      "id": "a5512b461bd789c319728c1ec5852e57"
    },
    {
      "type": "html",
      "text": " Compass directions relative to other items (including \"up\", \"right\", etc.)",
      "id": "300586bf9a14215ec96bde062b11a7ea"
    },
    {
      "type": "html",
      "text": " Compass directions relative to container (also known as \"alignment\")",
      "id": "e19044936683468cdc890481f30a51bc"
    },
    {
      "type": "html",
      "text": "\nFlow-based generally doesn't use the first two although it is possible to use hybrids, which I have done before to fine-tune (tweak) layouts that the flow-based approach could not by itself get quite right.",
      "id": "d3253efbf56b6e00c80bd01f4d38d7d6"
    },
    {
      "type": "html",
      "text": "[1] HTML, for example, does this by context, not by explicit reference. If one wanted to use an explicit reference for web stuff, they could use a DOM tree path.",
      "id": "77b2c18036c13a69f99111f48d0e3ccb"
    },
    {
      "type": "html",
      "text": "-- top",
      "id": "c94dfde5a06e07d897222ab0aeb58171"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "Another force is the need to generate the GUI on runtime (i.e. the number/type of controls cannot be known at compile time). You have to be more careful when generating the GUI in coordinate based system.",
      "id": "671a645c3522431022ad4c685f8f291d"
    },
    {
      "type": "html",
      "text": "<i>It seems to me this would probably greatly depend on the GUI API/framework and perhaps to a lesser extent the language.</i>",
      "id": "6943e16b41a318ee880015d6592ae525"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "We are looking for an abstract way to describe the layout of the components. (A coordinate system is not comfortable enough anyway. For an example the [[Java Swing]] [[Layout Manager]]s are very good.) The underlying implementation should be hidden. We came up with this:",
      "id": "91602a26e9df4ec7fee973462513e54e"
    },
    {
      "type": "html",
      "text": "<b>For arranging components we only need the information if they should be set vertically or horizontally and optional we must know which component should be set in the center.</b> To get the complex layout, these components will be grouped and the groups themselves will be layouted.",
      "id": "66ecd95fad8ef295a856112e7bdfa784"
    },
    {
      "type": "html",
      "text": "<i>I disagree. Abstraction does not work with GUI's because the customer wants it to fit their own mental vision (see above), not idealistic notions of grouping and placement. Abstraction works best for things hidden from the user.</i>",
      "id": "b62cdca9de4cd52b8164da56fd996d11"
    },
    {
      "type": "html",
      "text": "\nPlease see also the discussion with the topic Swing: Handling Complex Layouts [http://jinx.swiki.net/236 jinx.swiki.net] on the [[Jinx Wiki]] on the [[Swiki Farm]]",
      "id": "98aa3a0028c82630641438a6c6a0c31e"
    },
    {
      "type": "html",
      "text": "<i>I don't see any visual examples there. Anyhow, nobody is arguing that it cannot be done with enough nesting of different kinds of layout managers and iterative futzing around, but rather that it can get awkward and non-visual. It also risks [[Discontinuity Spike]]s if you pick the wrong one. Whenever people have to ponder a long time which approach they take, it is probably a symptom of a non-flexible approach.</i>",
      "id": "8235c76285868e88dc8453fa9336c3d3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "\nCoordinates can handle any screen arrangement you have in mind, unlike pure flow layouts. But flow-based layouts can be a kind of shell around coordinate-based layouts since everything must eventually be translated to coordinates anyhow. Thus, it seems logical to me to have a base protocol based on coordinates, and then put a nested (flow) layout engine on top of that if desired. You cannot do it the other way around.",
      "id": "9f2db6fdc5748922bba5f02320fc0e0f"
    },
    {
      "type": "html",
      "text": "With an appropriate nesting layout engine, you could go either way. The points of a flow layout are all that need be nested, not the entire components themselves. You can therefore define a grid of points by successive division, and name those points (1,1)(1,2)(1,3)...(2,1)(2,2)...(10,9)(10,10) and so forth. They are equivalent, and so the choice between them should be decided by whichever works best for the platform in mind. -- [[William Underwood]]",
      "id": "48170ba071b36ffdb8c1c02883f7a376"
    },
    {
      "type": "html",
      "text": "\nIf I understand you correctly, that leads to the [[Adding Epicycles]] complaint given above.",
      "id": "3db61c4e2bb69333b29ae96c80eba832"
    },
    {
      "type": "html",
      "text": "That complaint is ill-founded: epicycles are bad because they add complexity to a model in order to make it match a reality for which it is ill-suited. Adding a new definition of a point to a UI model actually models the UI exactly, because the model _is_ the reality.",
      "id": "93ef9464b1f8c476f36b8db68c7ba761"
    },
    {
      "type": "html",
      "text": "In other words, changing the coordinates by hand is the coincidental method of aligning components. It is like making columns line up in a word processor by using a bunch of spaces as opposed to setting a couple tab stops. It is like (nay, it is exactly) making eyeflow in a layout by nudging objects till they look right as opposed to setting a couple guides and having the objects snap to _exactly_ the right spot. (This is well known in publishing circles)",
      "id": "f729d79a69d6f4268535602127cecb03"
    },
    {
      "type": "html",
      "text": "-- [[William Underwood]] (who has spent more than his fair share of time doing print layout design in a previous life)",
      "id": "5d8f766db7ed838200af2d5d54aed5a5"
    },
    {
      "type": "html",
      "text": "<i>Perhaps 90% of the time, but about 10% it does not have fine enough control. Human minds don't always process images or esthetics with the same rules that the computer uses.</i>",
      "id": "800b6e321fe454ead9d5285108ad6882"
    },
    {
      "type": "html",
      "text": "[I disagree with this - I've never seen a layout I couldn't implement in my layout manager of choice.]",
      "id": "8692c05329a8e4c54bcc452d48a4ae38"
    },
    {
      "type": "html",
      "text": "\nNobody is suggesting it is a can-or-can't situation, but rather an issue of convenience and productivity. Just like [[Adding Epicycles]], with enough layers anything can probably eventually be achieved that way, but there is often a point where it would just be easier to click-and-point and be done with it. You pull out yer gun and just shoot du rabbit rather than build elaborate rabbit traps.",
      "id": "1ec47213111d1a5d52b801edff319b44"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "\nI was forced to make a website that had to make use of extensive absolute CSS positioning. The pain. There seems to be an overall forgetfulness of separating what the GUI creator needs from what the user wants. Which, as was already stated, tends to be illogical - I cherish every possibility of achieving this or that requested cheesy flashy pointless eyecandy without sacrificing all too much design logic. I have wet dreams of being able to create application GUIs with something as elegant and structured as lessay HTML/CSS, without having to wade through pixelwise mess and jungles of identifiers for widgets that only contain other, more semantically important ones. ",
      "id": "67bebca72521fb192fd48bc7de0cea96"
    },
    {
      "type": "html",
      "text": "\nWhat the user might want to do with what comes out of my design should not be my concern in the GUI code, but rather the concern of whatever system renders the GUI. A GUI defined with a flow layout is much easier to maintain in case someone has to hack at it and doesn't have your layout drawings, and I seriously doubt allowing the user to change widget position offsets is a horror to implement. As a matter of fact, it is very well implemented on most platforms, though I concede embedded and proprietary systems might pose a problem - but then again, these usually have a limited group of users that know better than to complain about what unneat pointless details their worktool looks to their employer. Serialize said offsets in a configuration file, and presto.",
      "id": "648ed92da8e6c3417c7ff755c4f9dc5d"
    },
    {
      "type": "html",
      "text": "\nWith a coordinate based system, you're actually robbing yourself of the opportunity of easier change at runtime, with having elements divided into small collections independent of each other (should you really feel such workspace chaos is a benefit) whose actual coordinates at temporal index foo need not interest anyone, much less the already overstrained coder. As far as set-based grouping goes for the more esoteric of GUI organizations, no-one's restraining you from defining your own containers and stuff in references to the elements you want, except hardware, but I'm not digressing that far. But not having to do so for the simpler GUIs since you already have a structure you can manipulate present will win out in the case statistics.",
      "id": "f2dd0af3d3d0c05ecaa687e1d0710f77"
    },
    {
      "type": "html",
      "text": "\nTo conclude with a small thought-provoker as to whether the user really wants that much control over the GUI: How many of you that use Windows have done something as trivial as relocated the taskbar from the bottom where it sits since the install? ",
      "id": "ad71e0de06a2749fbd09b114eaaa50a6"
    },
    {
      "type": "html",
      "text": " How about something even simpler? How many of you have ever resized a window? Coordinate based systems don't support resizing. If they do support resizing, they do it by implementing layout algorithms - which are the same thing as \"flow\" based layout. If your app will only ever run on machines with the same resolution, the same size fonts, and you don't permit the user to ever resize the window, then coordinate based layout is fine.",
      "id": "a3d76b6886e64fab1bec5b5081b9ee91"
    },
    {
      "type": "html",
      "text": " <i>I agree that such is a weakness of coordinate-based. But many managers want fine control over the want for screen-size flexibility. I agree it is not always rational, but we live in a Dilbertian world and cannot fight the inevitable. In short, coordinate better fits the Dilbertian world. We are not on Vulcan anymore, Dorthy.</i>",
      "id": "81fb978c9b86150189afddd06315f641"
    },
    {
      "type": "html",
      "text": "\nHonestly, I have trouble seeing how this is even an argument - the claim seems to be that since you it's easier for you to drag stuff around in a form designer, coordinate based layout is somehow superior. Note that HTML isn't the only model here. Positioning in HTML is primitive at best, in a \"real\" ui there's a lot more control and you have a lot more options.]",
      "id": "29b221d912d9a988f7ca021ddd1cc1f3"
    },
    {
      "type": "html",
      "text": "<i>Some people relish the ability to futz around with their environment. Some don't care. People vary widely.</i>",
      "id": "3662a349f4db16053e6c71ab9f684446"
    },
    {
      "type": "html",
      "text": "\nAlso, there is a reason why OOP won out over structural programming.",
      "id": "48d7e4a4fe59d1ac092d5831c7992b8c"
    },
    {
      "type": "html",
      "text": "<i>Better hype.</i>",
      "id": "3eea3d760bb2729be16d3c396ddaca24"
    },
    {
      "type": "html",
      "text": "\nSaid futzing around is implementable and implemented without having to be present in the GUI logic. And no way I'm taking the better hype argument. True, anything you can do with OOP can be emulated procedurally with strict nomenclature, but I see no point in emulation when i can use a more natural way of expressing. Well, that should prolly go into another page, so I'll stop here.",
      "id": "3556a652660a62e499f47079f63b6776"
    },
    {
      "type": "html",
      "text": "<i>\"Natural\" is probably very personal and subjective, based on past long arguments. Anyhow, I lean toward declarative GUI approaches, not so much procedural. Note that coordinate-based approaches do not rule out moving stuff as a group. Some tools make it easier than others. Perhaps that area can be improved by being able to have named sets (not hierarchies) such that one can simply type the name of the group/set and then move them all at the same time. \"Snap-to\" grids are also nice for such (as long as you can override them on a widget-by-widget basis.) Also, I agree that both styles have their place. It would be nice to be able to convert an existing nested-based layout to a coordinate one when you eventually need finer control. That way you can start out with the cleaner ideal approach, but tweak it at the pixel level if the customer is picky and does not want excuses. I am not sure this is an OOP-versus-non-OOP issue anyhow. Does OOP naturally lead to flow-based layouts? How do you recon that? -- top</i> ",
      "id": "79750ede346adee44e1670614bd66e4e"
    },
    {
      "type": "html",
      "text": "[I'd say this has zero to do with OOP. GUI layout isn't programming anyway, any more than writing HTML is. I don't see your need for \"finer control\", either - if you don't have the control you need with a nested layout manager, then your tools are broken. [[Sharpen The Saw]]. -- [[Chris Mellon]]]",
      "id": "21bb5eea0283980e7c2c628ae6206bf1"
    },
    {
      "type": "html",
      "text": "\nThey are often interrelated. What's possible/practical with programming may greatly affect the GUI design choices. Ideally they'd be separate interests, but in practice they are often intertwined for non-trivial apps. And auto-layout is often just \"dumb\", as illustrated nearby. It <b>does not understand human aesthetics and psychology</b>, and putting that knowledge into the tool, if technically possible, would make it bloated and unpredictable (just like the users :-)",
      "id": "857bc40dde46a3b1fd628e7f96777778"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "From what I have seen, people like GUI builders. They appear to like clicking and clicking and dropping and dropping, and clicking and clicking and dropping and dropping. I am buggered if I know why they enjoy it. From experience using auto generation of screens over twenty years in one environment, I am able to assess the usefulness of the generation process as opposed to the screen painting process. And my conclusion is absolutely in the generation camp. ",
      "id": "a59a9c5f10707ad3b84cf4e3625c0963"
    },
    {
      "type": "html",
      "text": " Of 18 screens in the current application I am developing, only 2 require any manual intervention where a field may hog more screen space than required, or where the layout of a table can be improved. This means I had to do no work, zero, none for 15 of the screens. They just magically appeared when I was testing.",
      "id": "579dc391f90b6abe67e8000a0b8756e0"
    },
    {
      "type": "html",
      "text": " Because the screens are generated, the definition applies to any screen, not just the environment's GUI builder. So conversion of the screens to HTML is a no-brainer. Which means I have to do not work to spit data at a browser. Zero, none.",
      "id": "99282396a5e9c98a1b830a58c10934bf"
    },
    {
      "type": "html",
      "text": " <i>But one generally cannot translate one-to-one between regular GUI's and web GUI's, at least not without targeting a specific browser vendor or goint [?] with a [[Lowest Common Denominator Interface]]. Browsers simply lack things like [[Combo List]]s, editable grid controls, tab controls, and outliners (tree browsers).</i>",
      "id": "10c3d5fd05846af3717446d0902f6c22"
    },
    {
      "type": "html",
      "text": " That is not true - Cache CSP for example (www.intersystems.com) or [[Design Bais]] (www.designbais.com)",
      "id": "8e49da698d34aeec3fbf3389c0eb3dd0"
    },
    {
      "type": "html",
      "text": " <i>Sure, but they are not standardized and often require money and installation.</i>",
      "id": "3f9b51603c8ff3c3f530c59209d63212"
    },
    {
      "type": "html",
      "text": " Yes, they are commercial products, but I think the Cache licence will cost you nothing until you deploy - so if you never deploy, it is free. It sounds like they are making a concerted effort to capture the developer market. (I don't use it myself, yet)",
      "id": "ce84cb166f52cdd12358693e2ba9e06a"
    },
    {
      "type": "html",
      "text": " <i>Maybe in this case you just had flexible and understanding managers who let designers stay within the practical boundaries of the layout tool. But this is not always the case.</i>",
      "id": "f3faf2ad3e4aad1a9efff49e1d2b6d71"
    },
    {
      "type": "html",
      "text": "\nThere is that question of user finickitiness. Very difficult to overcome. But after overcoming that, the user is in the long term happier because the generation process causes some consistency within the system. --[[Peter Lynch]]",
      "id": "3c7d87217f6986d8904ea94db69f8fc7"
    },
    {
      "type": "html",
      "text": "<i>Generally I agree, but the social/political environment often doesn't reward a longer-term view. Sometimes we just have to cater to silly whims if we want the rewards the game offers. Related: [[Choosing Satisfaction Over Money]]. You can say, \"I will risk my career to make the GUI right instead of please fools.\" But that decision will not scale to all readers or workers.</i>",
      "id": "a6ff4e0ac54b5e0cd233accc514493ac"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "\nI think a lot of things on this page could be summed up as \"HTML positioning sucks\", which I have no argument whatsoever with, and \"Nested layout is too complicated\", which is very different from being inferior to coordinate. ",
      "id": "894079c1979acefbb5a657abe6878d1c"
    },
    {
      "type": "html",
      "text": " <i>I think \"tedious\" or \"code intensive\" is a better description than \"complicated\". GUI's are visual, so it is natural to expect the design to be visual also.</i>",
      "id": "34bd7b7cf550ebedd4ebd08e33f53658"
    },
    {
      "type": "html",
      "text": " It's natural to expect GUIs to work at different scales, different orientations, different aspect ratios, etc.  Until you can show a coordinate approach that satisfies those expectations without being tedious or code intensive there's nothing to discuss.  Relative position layout managers, while more complicated internally, aren't more \"tedious\" and can be configured without writing any code at all via visual tools.",
      "id": "06052db99181976f9c733302bed82550"
    },
    {
      "type": "html",
      "text": "\nNested layouts provide a strict superset of capability, at the expense of complexity. Obviously, the need is to reduce complexity, which you can achieve by using form designers that support layout magnets. [[Qt Designer]] has a nice feature which lets you drag and drop your controls, which is nice for prototyping and brainstorming, and then to add those controls to layout managers. -- [[Chris Mellon]]",
      "id": "f9f58fe710d0823637ba1e724ca148ca"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "Relative position GUIs are much easier to internationalize. Fixed position GUIs don't automatically adjust to different character set sizes, and when you invert the text direction for Arabic or Hebrew the coordinates become meaningless.",
      "id": "ee8ba27345df1282c1a06f45116a647d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "\nTo end this useless thesis-antithesis brawl, I will try to show, that the synthesis of both is already widely in place. Examples:",
      "id": "aff26a1843f0e426bbaf354de4f96e9e"
    },
    {
      "type": "html",
      "text": " [[Hyper Text Markup Language]]",
      "id": "2a75a693826e6ec1d29f90948ddb2166"
    },
    {
      "type": "html",
      "text": " historically relative placement (table-layout with implicitly relative positions of the enclosed elements.",
      "id": "ac35226bf3c57f5ac414957b70c3083c"
    },
    {
      "type": "html",
      "text": " layers and stylesheets for placement independent of the contains-relation.",
      "id": "0c3fcfb9457c1cabcbe833970a504a1c"
    },
    {
      "type": "html",
      "text": " [[Tex Language]]",
      "id": "a776aff50dabe8c63bd0174df33bba95"
    },
    {
      "type": "html",
      "text": " everything is a box. Boxes in boxes in boxes. Spacing relative to the surrounding box.",
      "id": "f8c979723217f87e013a38bbeb1f69d0"
    },
    {
      "type": "html",
      "text": " But is is easy to put any box into a zero sized boxes (by using negative width/height). With these boxes layers and absolute positioning can be realized (as is done in the graphics-packages).",
      "id": "40319cd33e2bc4ce3e6fb3f50d7de2a1"
    },
    {
      "type": "html",
      "text": "\nI guess there are many more examples. The remaining question is not, which is better, but [[When To Apply Which]] or [[Finding The Middle Ways]].",
      "id": "385aeccdd957468e22830431f7a48aa8"
    },
    {
      "type": "html",
      "text": "-- [[Gunnar Zarncke]]",
      "id": "e7939d1e4f87977087fd45e9a9ee058d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "<b>Coordinates with Stretch-Zones</b>",
      "id": "0023131b5044bc7508f89c895a6e01c7"
    },
    {
      "type": "html",
      "text": "\nI thought of a possible way to allow coordinate-based screens to <b>expand without having to abandon coordinates</b>. Have a vertical and horizontal \"stretch bar\". In design mode the stretch bar would just be two lines, a cross in the middle whose end-points reach to the edge of the form. When the window is expanded, the line(s) forms a gap and widget points (corners) will stay on each side of the panels. Imagine the cartoons where somebody is on top of and between two train cars with one foot on each train. When the trains separate, the character's legs stretch. The location of the stretch bar would be designer-determined. It probably would not cover 100% of all situations, but may cover most. Also, in some cases some widgets may want a designation of \"non-stretch\" such that they keep the same proportion, stuck to one side or the other (or top and bottom) as the primary reference.",
      "id": "bcce604b215a5e3d69318be1bb431400"
    },
    {
      "type": "html",
      "text": "<i>Are you thinking of [[Springs And Struts]]?</i>",
      "id": "a8d99b68e9be4a981911a96c12347cbd"
    },
    {
      "type": "html",
      "text": "\nNo, but if somebody else already tried the idea, that is great. It looks a bit more complicated than what I have in mind, though.",
      "id": "d5699adc843f03968805b39e9d0ccc36"
    },
    {
      "type": "html",
      "text": "\nTo set how stretching happens across the zones, each edge of the bounding rectangle of the widget needs to be assigned to one of the 2 possible stretch directions.",
      "id": "da163d7eecb69e760236fc71d9cb0225"
    },
    {
      "type": "code",
      "text": " widget.topStretch   = \"top\";   // or \"bottom\"\n widget.rightStretch = \"right\";  // or \"left\"\n widget.leftStretch = \"left\";     // or \"right\"\n widget.bottomStretch = \"bottom\";  // or \"top\"",
      "id": "c28ae8cafdaa329c9083ea5d6b33b3d0"
    },
    {
      "type": "html",
      "text": "(Perhaps there should also be a \"middle\".)",
      "id": "d127e43ddb75fe8c06302a301f4b52a5"
    },
    {
      "type": "html",
      "text": "\nThese would be the defaults, so normally we wouldn't need to specify these specific ones. Note that buttons do not normally stretch, so bunches of buttons in a group may be best riding on a panel that you create for them, which itself uses the stretch settings.",
      "id": "e0287360bcb05a8750bc7dc2d6eeefe6"
    },
    {
      "type": "html",
      "text": "\nAnother feature would be scaling of widgets such that the user could magnify or shrink the screen, but the relative sizes of everything would stay the same. This would require vector-based fonts, however, which sometimes don't map well to raster-based conventions (at least until pixel sizes get sufficiently small via the technology curve).",
      "id": "a6e70e3f8b786fcf2a4bd3505b266879"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "This is a \"real world\" experience that reminds me of the limitations of auto-placement as described above (which I am not outright against if it's optional). I was hanging a picture on the wall the other day and was careful to center it properly between the available wall borders. It was a fairly narrow area. When done, I stood back and was dismayed about how off-center it looked. I checked the centering again, and technically it was correct, but it still <i>looked</i> off-center. It's just the \"lay of the land\" in that spot that tricks the eye. I'm still kicking around the idea of fudging it to make it look centered, but am too lazy to futz with it further. Many managers and users do complain, or at least notice such things on screen, and it thus affects a developer's score. -t",
      "id": "5096e8c6f68649def496e2e9085dbc31"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "See also: [[Gui Coordinate Notation Discussion]]",
      "id": "5203457a01481194f99e8d5474dc3e90"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "[[Category User Interface]], [[Category Web Design]], [[Category Interaction Design]]",
      "id": "c813fd416c186b5563cfe6926bdcb765"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3d264c48df94923a5d48245ffe07553d"
    },
    {
      "type": "html",
      "text": "[[May Zero Nine]]",
      "id": "a10f7ed95562ef285f28f284255bb390"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?CoordinateVersusNestedGui c2.com]",
      "id": "44045b2f857e249b7c369a8673131fe3"
    }
  ],
  "journal": [
    {
      "date": 1409270076000,
      "id": "27f8dd25559af4809c2df019eea5b60e",
      "type": "create",
      "item": {
        "title": "Coordinate Versus Nested Gui",
        "story": [
          {
            "type": "html",
            "text": "GUI systems seem to use two different positioning systems: coordinate-based and nested. ",
            "id": "45bb043451a27ddf5ec59e33beaff956"
          },
          {
            "type": "html",
            "text": "\nThe coordinate approach seems to lend itself to better visual positioning (WYSIWYG), while nesting seems to be more conducive to re-sized screens. I think coordinate-based approaches better fit corporate culture because you can make it very close to how the customer or boss wants it. Plus, nesting often creates surprises when things don't wrap as anticipated.",
            "id": "6c45441675409e371a4e64165671e145"
          },
          {
            "type": "html",
            "text": "\nExamples of coordinate-based GUI: [[Visual Studio]] ([[Visual Basic]], [[Visual Cee]]), Delphi",
            "id": "76388e6abf0f4773813ce80840c32f5e"
          },
          {
            "type": "html",
            "text": "\nExamples of nested GUI: [[Java Awt]] and [[Java Swing]] using [[Layout Manager]]s, [[Mozilla Xul]], HTML tables with no height or width attribute, [[Tcl Tk]], GTK+, Qt.",
            "id": "bc4e9e39b4f26c37b40dfdda034ab010"
          },
          {
            "type": "html",
            "text": "\nMeldings of the two: Apple's [[Interface Builder]], [[Springs And Struts]], Java [[Eclipse Ide]] Visual Editor.",
            "id": "458031947e1461576c4adb440f01041d"
          },
          {
            "type": "html",
            "text": "\nCSS doesn't really fall into either category, does it? Most of its work is done without explicit coordinates... of course I refer only to pure HTML with CSS here; Javascript muddies things.",
            "id": "8571aa306a9b8b7b1cbec013d34111d7"
          },
          {
            "type": "html",
            "text": "<i>CSS falls into the melding category IMO. (is that what you said?) normally it's nested, but specifying <tt>position:relative</tt> or <tt>position:fixed</tt> turns it into a coordinates based system for that element, with its descendents being nested.</i>",
            "id": "8f3f0c3f89735474abe44d160dc820b6"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "\nBe aware that this title seems to present a [[False Dichotomy]]. Examples of non-coordinate-based non-nested GUIs include declarative relative-layout (with statements such as 'above', 'below', 'left of', 'right of', 'behind', 'in front of', 'within', conditional appearance, etc. These are, admittedly, less common than some other systems, but they are also relational (no 'hierarchy' of rules as per nested GUI) and delightfully composable (in the sense that the 'automatic' positioning rules may be combined for [[Automatic Vs Manual Placement]]). I don't know of any frameworks for this that I haven't written myself, though.",
            "id": "e7ed54a025b4f2102f993a53107c97a4"
          },
          {
            "type": "html",
            "text": " Perhaps the title should be \"absolute versus relative positioning GUI\". However, it's the sort of thing that if you think about long enough, you'd probably have to add gajillion caveats and disclaimers into the title.",
            "id": "9dd36e7611bbefc7492bc37735ab09f6"
          },
          {
            "type": "html",
            "text": " If you need to add caveats, that's a smell that you have the wrong title. So is a [[False Dichotomy]]. Something like '[[Automatic Gui Layout Conventions]]' would be more accurate.",
            "id": "731a285dc1457cead856e04fc09eedf6"
          },
          {
            "type": "html",
            "text": " <i>I disagree. Brevity often trumps accuracy for titles. They do not need to carry the full weight of all possibilities. That's why they have content. (I've had this debate somewhere already.) Plus, the common 2 are the main attractions. We can't keep toggling the title every time a small side alternative is mentioned. That's not economical.</i>",
            "id": "66eea0744912a0d715879316269e1420"
          },
          {
            "type": "html",
            "text": " Only very rarely does one <b>need</b> to sacrifice brevity for accuracy or correctness. You are too willing to make unnecessary sacrifices, and to claim that you did so for \"brevity\" is usually to lie to yourself and your audience. I think you're simply being lazy and short-sighted. Do you also dump your liquid waste on the floor of your home because it is slightly closer than the lavatory? ",
            "id": "c77779dec94d7c40fd618c2b9610a772"
          },
          {
            "type": "html",
            "text": " <i>You didn't address my points, but I don't want to argue about titles. The damned title is fine how it is.</i>",
            "id": "6cbc32c60fd8493b2e2f33cab7ebd032"
          },
          {
            "type": "html",
            "text": " The title as it is is a [[False Dichotomy]], is not particularly 'brief', and your defense of it has been totally irrational. For example, you wouldn't need to \"toggle the title every time\" if you had applied your brain for the few brief seconds it would have taken to realize that \"Nested\" isn't really all that common and there would be many alternatives to mention. Over 50% of this page is dedicated to 'alternatives', so I consider your \"the common 2 are the main attractions\" to be a misrepresentation at best and a lie at worst. Why do you even bother with such total [[Straw Man]] arguments? Lazy. Short-sighted. That's why. You seem to get upset over page titles that you see as 'inflammatory' (such as [[Brain Damage]]). If you swear to never argue about those, then I'll not bother you with your illogical [[False Dichotomy]] titles. Deal?",
            "id": "b555b2b3a602ef8b2d82311b50c0a25b"
          },
          {
            "type": "html",
            "text": " <i>Dude, you are being anal again. Go obsess on something else.</i>",
            "id": "9e37cc0dad1424594893855827a4f526"
          },
          {
            "type": "html",
            "text": " Dude, you're oozing and seeping nasty irrational shit all over the place again. Learn to keep it shut.",
            "id": "c0e40e8cd28607b69b56d2910306e1f6"
          },
          {
            "type": "html",
            "text": " <i>Why \"automatic\" in your suggestion?</i>",
            "id": "841c59fc3bb5ff755ab0a726187bfcc7"
          },
          {
            "type": "html",
            "text": " There are reasonable debates on [[Automatic Vs Manual Placement]]. If there was no such debate, or there was some implication in the opening that you wished to include discussion of manual layout issues (such as persistence, per-user views, etc.), then I would not have included the word \"automatic\". ",
            "id": "e5d106ea05c6224d59772ca2a1e38e92"
          },
          {
            "type": "html",
            "text": " <i>Fully automatic to me means that the designer gives no info whatsoever about placement. This excludes below, above, right, left, etc. \"Automatic\" is relative.</i>",
            "id": "3b918e055a5ce71a10b19eb2804aef21"
          },
          {
            "type": "html",
            "text": " Automatic, I'll agree, is relative (and staged/layered). [[Automatic Vs Manual Placement]] still makes it clear that in \"manual\" placement the <b>user</b> is responsible for placement, not the designer. Sometimes user is designer, so there is overlap, but the dichotomy <i>in the roles</i> is one that can commonly be cleanly applied in the real world. What framework actively supports users in moving buttons, text-boxes, other arbitrary display elements, etc. around? Would you like to discuss such frameworks here?",
            "id": "8d20061354762f2876e68010fb674211"
          },
          {
            "type": "html",
            "text": "<i>There is also coordinate-relative, such as '5 pixels from the upper-left corner'. This isn't as composable in the sense that a composition cannot simply insert something 'between' two other display items without first explicitly moving the items around. A claim is made below that 'Nested GUIs' are often coordinate-relative in this sense.</i>",
            "id": "799e0cd7d081210c833c04020b554698"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "<b>Summary of Arguments</b>",
            "id": "b3cae290a3fbee165c2fddcb05923be7"
          },
          {
            "type": "html",
            "text": "<b>Advantages of Nested Gui's</b>",
            "id": "55d397b0eaf3734415da7298508392fd"
          },
          {
            "type": "html",
            "text": " Generally adjust more automatically to screen size/resolution",
            "id": "1d5117ba60e14c4f51785c32ded72a92"
          },
          {
            "type": "html",
            "text": " Allows for modularity of groups of gui elements (e.g. reuse of sub-dialogs). <i>Disputed by some</i>",
            "id": "541351033973ced6d99f77da22967196"
          },
          {
            "type": "html",
            "text": " Easier to internationalize as GUI components can scale to text and reorganize for character order localization.",
            "id": "bd4c830ef953afea70041d2bd6db0891"
          },
          {
            "type": "html",
            "text": "<b>Disadvantages</b>",
            "id": "bd0606b0cd8fe7b0d785352b3ebb42a8"
          },
          {
            "type": "html",
            "text": " Visual design tools for nested GUI's are not as easy to create.",
            "id": "b12745100b5c51c1edda15d3d3027cd7"
          },
          {
            "type": "html",
            "text": " Can be difficult to fine-tune placement (disputed by some below).",
            "id": "5be4160d77d3dabcf7867b83b37f47d2"
          },
          {
            "type": "html",
            "text": "\nI personally think that each has its strengths and weaknesses and each is better for different situations. Thus, ideally a GUI kit should make <b>both</b> available. Some GUI kits have \"layout managers\" that include a coordinate-based placement as one of the layout techniques for the given \"panel\". Generally they include at least:",
            "id": "51fe99647982dfd5307e00bfbb592f88"
          },
          {
            "type": "html",
            "text": " Relative placement with directions (up, down, left, right)",
            "id": "ac9571078de41ca7b01a7ceda820c709"
          },
          {
            "type": "html",
            "text": " Grid-based where the grid elements are dynamic",
            "id": "1142090e7f4b2282cab4e85a3ec391fd"
          },
          {
            "type": "html",
            "text": " Coordinate",
            "id": "031aba3a8b750a1803a34a2b6a9f00c7"
          },
          {
            "type": "html",
            "text": "\nThe panels can be nested so that one can mix-and-match. HTML does this to some extent by mixing tables (grid) with relative placement. Each \"cell\" in the table is like an independent panel where you can use the (default) relative placement or define yet another table within it.",
            "id": "e023f8944d1f926e1fc471a281ae37c0"
          },
          {
            "type": "html",
            "text": "-- top",
            "id": "c94dfde5a06e07d897222ab0aeb58171"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "Limitations of absolute positioning are very apparent if we will try to see site like cnn.com on a screen with fine resolution and small size ( 1400x1050 on my 15 in. notebook screen ), everything looks small and makes it difficult to read and use. Sites like java.sun.com use relative positioning and fit nicely on my screen and very useful when I use Mozilla's CTRL(+) for zooming.",
            "id": "9a3565b0652d558345404217f36b0ba3"
          },
          {
            "type": "html",
            "text": "<i>Coordinate-based does not necessarily preclude zooming. It may just be bad design. A good design would perhaps make it so that only ads or menus go out of direct view when zooming, not specific articles.</i>",
            "id": "4fa6c5f3f5b8bde225349297311c0f3f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "One of the alleged drawbacks of the coordinate approach is that things are not \"grouped\". In practice, I think I would rather have set-based grouping anyhow rather than nested. For example, the group that may belong to a given entity may be different from or orthogonal to the group that you want to put a square around. Hierarchies are too limited in my opinion with regard to grouping options. See [[Limits Of Hierarchies]].",
            "id": "3dfb59c217d2b28146e0b7b1db3a3742"
          },
          {
            "type": "html",
            "text": "[What do you mean by this? Obviously, a logical grouping of controls doesn't necessarily (but probably should) have anything to do with how they're displayed on your screen. But when you're talking about 'layout', then of course controls have to be grouped with the box around them. Logical/programmatic grouping and layout grouping don't have to have anything to do with each other.]",
            "id": "226c155a844395853fd8259ebcfba304"
          },
          {
            "type": "html",
            "text": "\nThat is true, but generally tools tend to assume they are the same. But if they allow/implement orthogonal grouping for non-visual stuff, then why not also allow it for visual stuff? I suspect because it requires more training to work effectively with sets than trees.",
            "id": "0217f8afe372b2964349d5df1143579c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "IME, the coordinate approach has a great inertia against change. Want to add a new field? Shift everything over manually, the position of every control depends on the size and position of every other controls. With nested, you just add the field and you are done.",
            "id": "d175ee285fd9f5ecc67ac31f27d6930e"
          },
          {
            "type": "html",
            "text": "<i>True, but it is usually easier to find the add location to begin with with coordinates, and a good IDE usually makes it simple to select a group of widgets to move down as a group. Then again, it depends on the particular form arrangement.</i>",
            "id": "a851850d0e23c920ca41f40bcbceabf9"
          },
          {
            "type": "html",
            "text": "<i>(I don't know if \"tab order\" comes into play. If tab order allows decimals, then inserting something in between is usually not a problem. It is the integer-based tab orders which are a headache IMO.)</i>",
            "id": "94b70a8d060603ccbe1ce2fc76f27e70"
          },
          {
            "type": "html",
            "text": "\nI assume you really mean it is easier to find the add location to begin with <b>in the visual tool</b> you are using, because I find that, in the source, \"add(control, 123, 234)\" is just as tough to find as \"add(control)\". If we are comparing visual tools, it is just as easy, if not easier, to find the location to add your control, at least in VAJ the last time I used it, (it list a tree view of all the controls starting from your main window, making the nesting of the controls very clear).",
            "id": "2ac6747910448b28341185aa7a15a2ea"
          },
          {
            "type": "html",
            "text": "<i>For complex GUI's, trees often stink IMO - [[Limits Of Hierarchies]]. For example, I often want to group, filter, or move by rather orthogonal criteria. Trees don't handle orthogonality very well.</i>",
            "id": "9a7c781563213cdec1a6ab9c7f89436c"
          },
          {
            "type": "html",
            "text": "[You're talking about your convenience at design-time vrs. functionality at run time again. Regardless, it's a functionality of a specific visual tool, not any sort of consequence of coordinate based layout]",
            "id": "119b20a1a9f7e0e88f96b38dcaa29ee8"
          },
          {
            "type": "html",
            "text": "\nI am not sure what you mean.",
            "id": "6bcf0462a1065b93d3eac5291b55a42f"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "\nOr [[Structured Graphics]] versus [[Structured Documents]]. The former appeals to graphical artists, those with a visual orientation, the latter to textual artists, those with a language orientation.",
            "id": "57fb96b78ec805e65309a6f926cc3f27"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "I didn't understand the term \"nested\" until the examples were added. How about \"flowed\" instead? -- [[Kris Johnson]]",
            "id": "2d1f1ade85563b9f202e8f0168bc9581"
          },
          {
            "type": "html",
            "text": "<i>I think we're actually talking about static vs dynamic... i.e., hardcoding the relationships numerically between componenents/sizes vs dynamically assigning them through constraints of some form.</i>",
            "id": "6e033ffb8ad8767732a5e42f0388114d"
          },
          {
            "type": "html",
            "text": "<i>The fact that a dynamic layout is 'flowed' as opposed to 'nested' (widgets in containers in containers etc) isn't really the issue</i>",
            "id": "9d210fd1beeb8a7c6cd1bf06e64e890f"
          },
          {
            "type": "html",
            "text": "\nThe \"HTML tables with no height or width attribute\" example is what led me to believe that \"flowing\" is the issue rather than \"nesting\", as does the \"when things don't wrap as anticipated\" phrase in the prologue.\t-- kj",
            "id": "6e2a8481a84919d4cd7cfb4aa780333f"
          },
          {
            "type": "html",
            "text": "<i>But if it does have height or width attributes in parts of it, is it something in-between? I am okay with \"flow\" if you want to change the title, but perhaps there is a non-hierarchical flow approach possible, although I cannot envision it right now.</i>",
            "id": "1136b48d91ac8dc7a34ca4312a0717ac"
          },
          {
            "type": "html",
            "text": "<i>[delete when section when forces resolved]</i>",
            "id": "b0fcd3e236284e381e2f3320abaeb8c1"
          },
          {
            "type": "html",
            "text": "\"Flowing\" is a consequence of the second way, but not its defining characteristic. When you're discussing HTML, this tension is characterized as \"visual vs. semantic.\" Not sure if it applies as well here. -- francis",
            "id": "db2e8ca25b793f99778df23f450c484c"
          },
          {
            "type": "html",
            "text": "<i>How about</i>",
            "id": "5753d1f4f8b7d9e14d5809fa37412e64"
          },
          {
            "type": "html",
            "text": "Flow-based:<br>hierarchical nesting without absolute coordinates",
            "id": "48348fb62407635195f74bd4fb56f9f3"
          },
          {
            "type": "html",
            "text": "Coordinate-based:<br>uses absolute coordinates",
            "id": "8a1ca947eadb3ccc4e326fb1b211b610"
          },
          {
            "type": "html",
            "text": "Mixed:<br>Uses some nesting and some absolute coordinates",
            "id": "b36e918d96c14a6532e938cba052e2b4"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "\nIt seems that there are several distinct \"axes\" being considered here:",
            "id": "7b4751cbab0dd206b164bb5dc3fa799f"
          },
          {
            "type": "html",
            "text": " Flat organization (all components are siblings) vs. hierarchical organization (containment) ",
            "id": "14c5f58956dd8edfe6e3b88529e47b45"
          },
          {
            "type": "html",
            "text": " Absolute positioning (components share a common reference point) vs. relative positioning (components use other components as reference points)",
            "id": "5fe8c172bdcf93379909052427058001"
          },
          {
            "type": "html",
            "text": " Numeric vs. non-numeric position specifications",
            "id": "c56166c7f8a4af9d731defd64162b734"
          },
          {
            "type": "html",
            "text": " Screen pixel-based coordinates vs. logical coordinate systems",
            "id": "4229340cd923a6404217256eb05e2864"
          },
          {
            "type": "html",
            "text": " Explicit layout by developer vs. automated constraint-based layout",
            "id": "56ad114a548f261faa24b70f32a1cd2a"
          },
          {
            "type": "html",
            "text": " Edit/compile-time layout vs. run-time layout",
            "id": "99d73684c06c4475a4c46938285f2810"
          },
          {
            "type": "html",
            "text": " Visual vs. semantic (which I understand to mean \"Based on what looks good vs. based on the logical structure of the data\")",
            "id": "82447fa398b134f8f47fed6d9a6efbbc"
          },
          {
            "type": "html",
            "text": "Most real-world GUI systems provide some level of support for each extreme on each axis. A developer can usually make any system work any place along any of the axes, so this is not an \"either-or\" situation, but a \"how easy is it to do what I want\" situation.",
            "id": "23192003c46350751004794733379024"
          },
          {
            "type": "html",
            "text": "\nWhile certain combinations are more useful than others, I don't think \"coordinate\" vs \"nested\" makes it very clear exactly what we are talking about. Neither does \"flow\" or \"layout\". Maybe this page needs to be split up, or maybe somebody needs to clarify what the topic is.",
            "id": "9ff64da22e4704cbc9a407c51f6d27d3"
          },
          {
            "type": "html",
            "text": "-- [[Kris Johnson]]",
            "id": "071a62a5f19e27f701debe9a25d045e7"
          },
          {
            "type": "html",
            "text": "\nAssociative layouts (most widgets layouts are determined by a relationship to a different widget), as opposed to independent layouts (where most widgets layouts are determined by a relationship to a top-level container)",
            "id": "e26c6bfb7d760bae7bda2cdd49e2e237"
          },
          {
            "type": "html",
            "text": "<i>I think that is the same as \"absolute positioning vs. relative positioning\" in the bullet list above.</i>",
            "id": "1bcc8d054c6ae330c9be6d9a2c88d825"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "<i>What are examples of \"non-numeric\" and \"logical coordinates\"?</i>",
            "id": "d9e008fdd13c032e65131f5ea8b0f2e0"
          },
          {
            "type": "html",
            "text": "\"Non-numeric position specifications\" would be something like \"to the left of object X\", or \"between objects X and Y\", or \"at the top of the window\" or \"half the width of the screen\" (you might claim that \"half\" is numeric). A \"logical coordinate system\" is one that is not directly tied to hardware pixels; you might use percentages of window size, for example.",
            "id": "63b3ba10732f4b0a9173afb081a5e303"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "\nWhat about auto-generation of GUIs, such as a rule based system that <i>generates</i> GUIs for corresponding models? Coordinate systems can't handle that. It would then be more of Esthetic vs Model Based. Esthetic will imply the layout was based on visual appearance (a VB application where coordinates are hardcoded) and Model Based would imply that the GUI is generated from a model and comes out of the model. If your application does not auto-generate GUIs, then Flow based layout does not offer much other than resizability.",
            "id": "b92b1921fda9a39df7986f7ce12beb58"
          },
          {
            "type": "html",
            "text": "<i>Auto-generation is usually used for preliminary arrangement in my experience. One then makes custom adjustments.</i>",
            "id": "c9821e8f7a6067b7011104a97bcdae65"
          },
          {
            "type": "html",
            "text": "\nI do not mean auto-generation of <i>code</i>. I meant generation of GUI at run-time. -- [[Anonymous Donor]]",
            "id": "9acc570f657476284d60b1338a35bb51"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "<b>Users are Picky Down to the Pixel Level</b>",
            "id": "46c3aaa366489188390036b8727abb9b"
          },
          {
            "type": "html",
            "text": "\nI am suggesting that auto-generated GUI's are fine for prototypes, but users or customers often want to tweak stuff in ways that flow-based cannot easily handle. There are certain esthetic \"rules\" that a flow engine just has no clue about; perhaps because it is a subjective thing. But [[The Customer Is Always Right]] even if they want stupid things. In other words, coordinate-based allows you to do stupid or illogical things easier with the layout. ",
            "id": "8e986bb03ddece1fcfdda32d48331120"
          },
          {
            "type": "html",
            "text": "\nFor example, some things might tend to <i>almost</i> line up out of <b>pure coincidence</b>. The customer looks at it and says, \"could you line these up better, please?\" not knowing or caring that it is just coincidence that they are almost lined up. The flow engine has no idea that a bunch of things happen to coincide in length or position. With coordinate-based, you simply shuffle things around a bit in a WYSIWYG tool to make them line up all the way. No fuss, no hassle, no NBSP-like filler things. Suppose we have some input fields with labels right-justified against them:",
            "id": "24d625d294420025cbdc99749f00c59a"
          },
          {
            "type": "html",
            "text": "...Sdf asdf sflksjdf:<br>[____]",
            "id": "855a83393badc481fa986b58f46d3ab9"
          },
          {
            "type": "html",
            "text": "....Eosjslk blkjasdl:<br>[____]",
            "id": "bd5215c2dd2db0f4d156a2e4504f9f71"
          },
          {
            "type": "html",
            "text": "............Grog sdj:<br>[____]",
            "id": "6f873a8bc940867e341662b20d4794cc"
          },
          {
            "type": "html",
            "text": "..........Asdsdf sdf:<br>[____]",
            "id": "930b3a30a6833b8e960d8da3ff4d4235"
          },
          {
            "type": "html",
            "text": "............Sld bsok:<br>[____]",
            "id": "c1a5e38d565ce19c4d80961e85f03dc5"
          },
          {
            "type": "html",
            "text": "...Ybwslkj blso apon:<br>[____]",
            "id": "5eab36bc8c937b7212bf8853d017107b"
          },
          {
            "type": "html",
            "text": "...Ublkjs mogk robno:<br>[____]",
            "id": "42cb3e64095d8f0a816857f7b7a61cf4"
          },
          {
            "type": "html",
            "text": "\nThe user might look at the middle three fields as a visual group and say, \"Those are almost aligned on the left side. Can you make them fully aligned?\" Our framework only knows left, middle, and right aligned. It is blind to this coincidental alignment of the left-most characters in this case. (I would personally disagree with such a layout, but [[The Customer Is Always Right]]. They don't appreciate lectures on \"proper\" layouts, they just want it as they envision it without \"flak\".) In a coordinate-based system you simply shuffle the text around to make it fit how the customer wants it to be:",
            "id": "8469f10458cee69db812fd98a752fa25"
          },
          {
            "type": "html",
            "text": "...Sdf asdf sflksjdf:<br>[____]",
            "id": "855a83393badc481fa986b58f46d3ab9"
          },
          {
            "type": "html",
            "text": "....Eosjslk blkjasdl:<br>[____]",
            "id": "bd5215c2dd2db0f4d156a2e4504f9f71"
          },
          {
            "type": "html",
            "text": "..........Grog sdj..:<br>[____]",
            "id": "8e019ef35d7ac2545a73684173e581a6"
          },
          {
            "type": "html",
            "text": "..........Asdsdf sdf:<br>[____]",
            "id": "930b3a30a6833b8e960d8da3ff4d4235"
          },
          {
            "type": "html",
            "text": "..........Sld bsok..:<br>[____]",
            "id": "4bf70a934c8860f29bfc877ff427b597"
          },
          {
            "type": "html",
            "text": "...Ybwslkj blso apon:<br>[____]",
            "id": "5eab36bc8c937b7212bf8853d017107b"
          },
          {
            "type": "html",
            "text": "...Ublkjs mogk robno:<br>[____]",
            "id": "42cb3e64095d8f0a816857f7b7a61cf4"
          },
          {
            "type": "html",
            "text": "(Dots used to avoid [[Tab Munging]]. Unfortunately, the dots make it hard to see the alignment issue.)",
            "id": "9effc657e6c37277933ff723793433a0"
          },
          {
            "type": "html",
            "text": "\nI realize that we can make a split sub-container in a nested model to left-justify the middle three, but it is a lot more work and it is hard to tell from the code what it is going on until it is actually rendered. I would rather just click-and-drag than introduce more UI fiddle faddle into the software code. The less we have to go back and nit with the code for esthetic purposes, the better. Adding yet more nestedness to \"solve\" things like this reminds me of [[Adding Epicycles]]. -- top",
            "id": "be41b3ec18afe407f158661732fdf793"
          },
          {
            "type": "html",
            "text": " A non-broken layout management system can do that without blinking. Furthermore, unlike the coordinate based approach, it will continue to lay things out as specified even with the labels are translated into another language, or when the user selects a font with different kerning, or when it's run under a theme engine where the controls on the right are a different size. Yes, it involves nesting. No, that doesn't necessarily involve munging around with your code. Besides, what do you think all your pixel-twiddling is? That's code too.",
            "id": "96bccd9c9455a3f471114a3254853bb7"
          },
          {
            "type": "html",
            "text": " <i>I am skeptical it can do it conveniently. The computer can't \"know\" it looks odd to humans, especially if it only \"bothers\" a specific customer. Besides, change in language may create new coincidental oddities that need to be tweaked in or tweaked out just the same. The words that were short may be long in other languages, so the middle block issue may become irrelevant or different altogether with a different language. If you can provide some pseudo-code to illustrate how it can be handled via nested blocks, I would like to see it. I can tweak such easier with mouse dragging than with adding new text block layers into the GUI code. It is simple: See, Grab, Drag, Save, Done.</i> -t",
            "id": "47b1a7d7a7f8d052c5637529aa8577a8"
          },
          {
            "type": "html",
            "text": "<i>You can do that in a flow layout system if it supports grids (like HTML tables). Having seen that the things almost line up, nail them to a grid.</i>",
            "id": "229c7bcc0627c4e3e511d7b5b3eaa5c1"
          },
          {
            "type": "html",
            "text": "\nWhy have the middle-man? Just use coordinates. Besides, grids don't handle the \"almost\" problem described above unless each cell is pixel-sized, in which case you have a coordinate system anyhow. I suggest you try the above exercise using HTML tables and record your changes. Note that at least you are going to have to split one column into two and give \"colspan=2\" tags on all the non-participant cells. Then you have to worry about the middle-most row lining up properly on the right because it will be left justified if we want it to match its two neighbors on the new left edge. Our first try will probably look like this:",
            "id": "d8a64a5ade3c29f8900b256aef481c15"
          },
          {
            "type": "html",
            "text": "...Sdf asdf sflksjdf:<br>[____]",
            "id": "855a83393badc481fa986b58f46d3ab9"
          },
          {
            "type": "html",
            "text": "....Eosjslk blkjasdl:<br>[____]",
            "id": "bd5215c2dd2db0f4d156a2e4504f9f71"
          },
          {
            "type": "html",
            "text": "........Grog sdj....:<br>[____]",
            "id": "cbee5fb7c475fc7422b6ca6b5184d634"
          },
          {
            "type": "html",
            "text": "........Asdsdf sdf..:<br>[____]",
            "id": "f6e4d5c48b4cf460dd4e7fa9c98f067a"
          },
          {
            "type": "html",
            "text": "........Sld bsok....:<br>[____]",
            "id": "ce97f85a79898266e1b7e0b0f282de0b"
          },
          {
            "type": "html",
            "text": "...Ybwslkj blso apon:<br>[____]",
            "id": "5eab36bc8c937b7212bf8853d017107b"
          },
          {
            "type": "html",
            "text": "...Ublkjs mogk robno:<br>[____]",
            "id": "42cb3e64095d8f0a816857f7b7a61cf4"
          },
          {
            "type": "html",
            "text": "\nThere is no simple HTML command to tell it to line up both on the right side and match its two neighbors as the same time. That is an abstraction that HTML, nor any other known tool, was built to natively handle in a strait-forward way. In HTML it would likely require fiddling around with absolute cell widths or NBSP's. Something that would be 1 minute drag-and-move exercise under coordinates is now a 45-minute exercise in type-text-and-re-render, or as I like to call it: \"nudge-N-fudge\". Plus, it still might not render the same on another browser even after all that. Further, MS-IE has known layout bugs that they don't seem to be a in a hurry to fix.",
            "id": "8d35c9022849869a0a2b40ccf7a2798c"
          },
          {
            "type": "html",
            "text": "\nNote that this issue applies to the nested approach also, not just auto-generated GUI's.",
            "id": "a75d8285181f7873afe8333462f14394"
          },
          {
            "type": "html",
            "text": "<i>No it doesn't. Relative coordinates can be specified at any precision required.</i>",
            "id": "fc8d0697d237efbef01e027795a84aa5"
          },
          {
            "type": "html",
            "text": "\nRelative coordinates? That is kind of a hybrid between the choices considered.",
            "id": "a16ad9427a80e46bb32b5501a99f8858"
          },
          {
            "type": "html",
            "text": "<i>No it isn't. What you refer to as \"nested GUIs\" are just GUIs that use relative coordinates. Swing and HTML both support relative and absolute positioning of components, and those positions can be expressed in pixels.</i>",
            "id": "7a5140f26eb65ed071d40bf0d4497ab0"
          },
          {
            "type": "html",
            "text": "\nI think we have some serious definition issues to work out.",
            "id": "e385d399a97b31d374897c0923ccb79d"
          },
          {
            "type": "html",
            "text": "<i>OK, let's start with the top of the page:</i>",
            "id": "9d0dcb2f24794cc9073f762cd7df4de9"
          },
          {
            "type": "html",
            "text": "\"Examples of coordinate-based GUI: VB, VC++\"",
            "id": "44c9907fa99b7e5973dc0ecaf51d2e8f"
          },
          {
            "type": "html",
            "text": "<i>These use absolute positions for components.</i>",
            "id": "435b7abf7c5a73b6b673be7b4afda5b7"
          },
          {
            "type": "html",
            "text": "\"Examples of nested GUI: Java AWT and Swing using L<b></b>ayoutManagers, HTML tables with no height or width attribute, Tk.\"",
            "id": "4000a2f912f7622b721f5eee140a68f8"
          },
          {
            "type": "html",
            "text": "<i>These support relative positions for components. Swing and AWT have a \"null\" layout manager that allows absolute positioning. HTML's divs can be relative or absolute.</i>",
            "id": "7c1055c105a76e86016a3da427dc081d"
          },
          {
            "type": "html",
            "text": "<i>What other issues are there?</i>",
            "id": "8d1f95d34c393abf7b11bd8eb4a58827"
          },
          {
            "type": "html",
            "text": "\nI would not call HTML and Tk style \"relative\". Relative is \"5 pixels from the corner of containing table cell\". Here is a working taxonomy:",
            "id": "4f5dbf35a902abb603315fe4a8fab6cd"
          },
          {
            "type": "html",
            "text": " Absolute coordinates",
            "id": "f19b33286fe01cbdc4ed92be88e44e66"
          },
          {
            "type": "html",
            "text": " Relative coordinates",
            "id": "2e6391f06e488926ec21b9409a8aff09"
          },
          {
            "type": "html",
            "text": " Flow-based positioning",
            "id": "e10e0a6d541327cade1e4d97947f0090"
          },
          {
            "type": "html",
            "text": "(BTW, Tk has an optional coordinate-based geometry manager.)",
            "id": "3cfea538c4b249a7ac5d55879bbd24b8"
          },
          {
            "type": "html",
            "text": "<i>I've never used Tk, but HTML/CSS definitely supports relative positioning. (How else would you describe \"<div style='position:relative; left:0px; display:inline; width:25px'>0</div>\"?) Flow-based\" is just relative positioning where the coordinates are expressed as components instead of pixels.</i>",
            "id": "6416439fccfc9a69551b94f26f054ef6"
          },
          {
            "type": "html",
            "text": "\"Components\"? I admit I don't yet have a satisfactory definition of \"flow based\" to offer as an alternative, but I don't like \"relative\" because there is relative positioning like your example above.",
            "id": "6d2c898ccaf3ddb1a685ecef88886de9"
          },
          {
            "type": "html",
            "text": "\nThat CSS clause <i>is</i> an example of relative coordinates, but not flow-based. Working together, perhaps we can come up with sounder definitions. The best I can say at this point is that \"flow based\" gives positions relative to other components using <b>non-distance</b> references. Relative coordinates use numeric distances, as do absolute positions. In practice, flow-based may specify borders/buffers/margins (visible or invisible) using distances, which is a slight violation of the rule, but perhaps forgivable. ",
            "id": "7b2bc11db346a4a3dbcf00e3e8168145"
          },
          {
            "type": "html",
            "text": "\nDifferent reference techniques:",
            "id": "db7ce56b12e0637c32b55522283c2954"
          },
          {
            "type": "html",
            "text": " Absolute coordinates from corner of window",
            "id": "5579a780e77bf11a20b4605d8458eb8f"
          },
          {
            "type": "html",
            "text": " Relative (offset) coordinates from other widgets",
            "id": "b1f10682be3e54228962b4dbd7da9d87"
          },
          {
            "type": "html",
            "text": " Container references (such as which table a given item is \"in\")[1]",
            "id": "a5512b461bd789c319728c1ec5852e57"
          },
          {
            "type": "html",
            "text": " Compass directions relative to other items (including \"up\", \"right\", etc.)",
            "id": "300586bf9a14215ec96bde062b11a7ea"
          },
          {
            "type": "html",
            "text": " Compass directions relative to container (also known as \"alignment\")",
            "id": "e19044936683468cdc890481f30a51bc"
          },
          {
            "type": "html",
            "text": "\nFlow-based generally doesn't use the first two although it is possible to use hybrids, which I have done before to fine-tune (tweak) layouts that the flow-based approach could not by itself get quite right.",
            "id": "d3253efbf56b6e00c80bd01f4d38d7d6"
          },
          {
            "type": "html",
            "text": "[1] HTML, for example, does this by context, not by explicit reference. If one wanted to use an explicit reference for web stuff, they could use a DOM tree path.",
            "id": "77b2c18036c13a69f99111f48d0e3ccb"
          },
          {
            "type": "html",
            "text": "-- top",
            "id": "c94dfde5a06e07d897222ab0aeb58171"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "Another force is the need to generate the GUI on runtime (i.e. the number/type of controls cannot be known at compile time). You have to be more careful when generating the GUI in coordinate based system.",
            "id": "671a645c3522431022ad4c685f8f291d"
          },
          {
            "type": "html",
            "text": "<i>It seems to me this would probably greatly depend on the GUI API/framework and perhaps to a lesser extent the language.</i>",
            "id": "6943e16b41a318ee880015d6592ae525"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "We are looking for an abstract way to describe the layout of the components. (A coordinate system is not comfortable enough anyway. For an example the [[Java Swing]] [[Layout Manager]]s are very good.) The underlying implementation should be hidden. We came up with this:",
            "id": "91602a26e9df4ec7fee973462513e54e"
          },
          {
            "type": "html",
            "text": "<b>For arranging components we only need the information if they should be set vertically or horizontally and optional we must know which component should be set in the center.</b> To get the complex layout, these components will be grouped and the groups themselves will be layouted.",
            "id": "66ecd95fad8ef295a856112e7bdfa784"
          },
          {
            "type": "html",
            "text": "<i>I disagree. Abstraction does not work with GUI's because the customer wants it to fit their own mental vision (see above), not idealistic notions of grouping and placement. Abstraction works best for things hidden from the user.</i>",
            "id": "b62cdca9de4cd52b8164da56fd996d11"
          },
          {
            "type": "html",
            "text": "\nPlease see also the discussion with the topic Swing: Handling Complex Layouts [http://jinx.swiki.net/236 jinx.swiki.net] on the [[Jinx Wiki]] on the [[Swiki Farm]]",
            "id": "98aa3a0028c82630641438a6c6a0c31e"
          },
          {
            "type": "html",
            "text": "<i>I don't see any visual examples there. Anyhow, nobody is arguing that it cannot be done with enough nesting of different kinds of layout managers and iterative futzing around, but rather that it can get awkward and non-visual. It also risks [[Discontinuity Spike]]s if you pick the wrong one. Whenever people have to ponder a long time which approach they take, it is probably a symptom of a non-flexible approach.</i>",
            "id": "8235c76285868e88dc8453fa9336c3d3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "\nCoordinates can handle any screen arrangement you have in mind, unlike pure flow layouts. But flow-based layouts can be a kind of shell around coordinate-based layouts since everything must eventually be translated to coordinates anyhow. Thus, it seems logical to me to have a base protocol based on coordinates, and then put a nested (flow) layout engine on top of that if desired. You cannot do it the other way around.",
            "id": "9f2db6fdc5748922bba5f02320fc0e0f"
          },
          {
            "type": "html",
            "text": "With an appropriate nesting layout engine, you could go either way. The points of a flow layout are all that need be nested, not the entire components themselves. You can therefore define a grid of points by successive division, and name those points (1,1)(1,2)(1,3)...(2,1)(2,2)...(10,9)(10,10) and so forth. They are equivalent, and so the choice between them should be decided by whichever works best for the platform in mind. -- [[William Underwood]]",
            "id": "48170ba071b36ffdb8c1c02883f7a376"
          },
          {
            "type": "html",
            "text": "\nIf I understand you correctly, that leads to the [[Adding Epicycles]] complaint given above.",
            "id": "3db61c4e2bb69333b29ae96c80eba832"
          },
          {
            "type": "html",
            "text": "That complaint is ill-founded: epicycles are bad because they add complexity to a model in order to make it match a reality for which it is ill-suited. Adding a new definition of a point to a UI model actually models the UI exactly, because the model _is_ the reality.",
            "id": "93ef9464b1f8c476f36b8db68c7ba761"
          },
          {
            "type": "html",
            "text": "In other words, changing the coordinates by hand is the coincidental method of aligning components. It is like making columns line up in a word processor by using a bunch of spaces as opposed to setting a couple tab stops. It is like (nay, it is exactly) making eyeflow in a layout by nudging objects till they look right as opposed to setting a couple guides and having the objects snap to _exactly_ the right spot. (This is well known in publishing circles)",
            "id": "f729d79a69d6f4268535602127cecb03"
          },
          {
            "type": "html",
            "text": "-- [[William Underwood]] (who has spent more than his fair share of time doing print layout design in a previous life)",
            "id": "5d8f766db7ed838200af2d5d54aed5a5"
          },
          {
            "type": "html",
            "text": "<i>Perhaps 90% of the time, but about 10% it does not have fine enough control. Human minds don't always process images or esthetics with the same rules that the computer uses.</i>",
            "id": "800b6e321fe454ead9d5285108ad6882"
          },
          {
            "type": "html",
            "text": "[I disagree with this - I've never seen a layout I couldn't implement in my layout manager of choice.]",
            "id": "8692c05329a8e4c54bcc452d48a4ae38"
          },
          {
            "type": "html",
            "text": "\nNobody is suggesting it is a can-or-can't situation, but rather an issue of convenience and productivity. Just like [[Adding Epicycles]], with enough layers anything can probably eventually be achieved that way, but there is often a point where it would just be easier to click-and-point and be done with it. You pull out yer gun and just shoot du rabbit rather than build elaborate rabbit traps.",
            "id": "1ec47213111d1a5d52b801edff319b44"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "\nI was forced to make a website that had to make use of extensive absolute CSS positioning. The pain. There seems to be an overall forgetfulness of separating what the GUI creator needs from what the user wants. Which, as was already stated, tends to be illogical - I cherish every possibility of achieving this or that requested cheesy flashy pointless eyecandy without sacrificing all too much design logic. I have wet dreams of being able to create application GUIs with something as elegant and structured as lessay HTML/CSS, without having to wade through pixelwise mess and jungles of identifiers for widgets that only contain other, more semantically important ones. ",
            "id": "67bebca72521fb192fd48bc7de0cea96"
          },
          {
            "type": "html",
            "text": "\nWhat the user might want to do with what comes out of my design should not be my concern in the GUI code, but rather the concern of whatever system renders the GUI. A GUI defined with a flow layout is much easier to maintain in case someone has to hack at it and doesn't have your layout drawings, and I seriously doubt allowing the user to change widget position offsets is a horror to implement. As a matter of fact, it is very well implemented on most platforms, though I concede embedded and proprietary systems might pose a problem - but then again, these usually have a limited group of users that know better than to complain about what unneat pointless details their worktool looks to their employer. Serialize said offsets in a configuration file, and presto.",
            "id": "648ed92da8e6c3417c7ff755c4f9dc5d"
          },
          {
            "type": "html",
            "text": "\nWith a coordinate based system, you're actually robbing yourself of the opportunity of easier change at runtime, with having elements divided into small collections independent of each other (should you really feel such workspace chaos is a benefit) whose actual coordinates at temporal index foo need not interest anyone, much less the already overstrained coder. As far as set-based grouping goes for the more esoteric of GUI organizations, no-one's restraining you from defining your own containers and stuff in references to the elements you want, except hardware, but I'm not digressing that far. But not having to do so for the simpler GUIs since you already have a structure you can manipulate present will win out in the case statistics.",
            "id": "f2dd0af3d3d0c05ecaa687e1d0710f77"
          },
          {
            "type": "html",
            "text": "\nTo conclude with a small thought-provoker as to whether the user really wants that much control over the GUI: How many of you that use Windows have done something as trivial as relocated the taskbar from the bottom where it sits since the install? ",
            "id": "ad71e0de06a2749fbd09b114eaaa50a6"
          },
          {
            "type": "html",
            "text": " How about something even simpler? How many of you have ever resized a window? Coordinate based systems don't support resizing. If they do support resizing, they do it by implementing layout algorithms - which are the same thing as \"flow\" based layout. If your app will only ever run on machines with the same resolution, the same size fonts, and you don't permit the user to ever resize the window, then coordinate based layout is fine.",
            "id": "a3d76b6886e64fab1bec5b5081b9ee91"
          },
          {
            "type": "html",
            "text": " <i>I agree that such is a weakness of coordinate-based. But many managers want fine control over the want for screen-size flexibility. I agree it is not always rational, but we live in a Dilbertian world and cannot fight the inevitable. In short, coordinate better fits the Dilbertian world. We are not on Vulcan anymore, Dorthy.</i>",
            "id": "81fb978c9b86150189afddd06315f641"
          },
          {
            "type": "html",
            "text": "\nHonestly, I have trouble seeing how this is even an argument - the claim seems to be that since you it's easier for you to drag stuff around in a form designer, coordinate based layout is somehow superior. Note that HTML isn't the only model here. Positioning in HTML is primitive at best, in a \"real\" ui there's a lot more control and you have a lot more options.]",
            "id": "29b221d912d9a988f7ca021ddd1cc1f3"
          },
          {
            "type": "html",
            "text": "<i>Some people relish the ability to futz around with their environment. Some don't care. People vary widely.</i>",
            "id": "3662a349f4db16053e6c71ab9f684446"
          },
          {
            "type": "html",
            "text": "\nAlso, there is a reason why OOP won out over structural programming.",
            "id": "48d7e4a4fe59d1ac092d5831c7992b8c"
          },
          {
            "type": "html",
            "text": "<i>Better hype.</i>",
            "id": "3eea3d760bb2729be16d3c396ddaca24"
          },
          {
            "type": "html",
            "text": "\nSaid futzing around is implementable and implemented without having to be present in the GUI logic. And no way I'm taking the better hype argument. True, anything you can do with OOP can be emulated procedurally with strict nomenclature, but I see no point in emulation when i can use a more natural way of expressing. Well, that should prolly go into another page, so I'll stop here.",
            "id": "3556a652660a62e499f47079f63b6776"
          },
          {
            "type": "html",
            "text": "<i>\"Natural\" is probably very personal and subjective, based on past long arguments. Anyhow, I lean toward declarative GUI approaches, not so much procedural. Note that coordinate-based approaches do not rule out moving stuff as a group. Some tools make it easier than others. Perhaps that area can be improved by being able to have named sets (not hierarchies) such that one can simply type the name of the group/set and then move them all at the same time. \"Snap-to\" grids are also nice for such (as long as you can override them on a widget-by-widget basis.) Also, I agree that both styles have their place. It would be nice to be able to convert an existing nested-based layout to a coordinate one when you eventually need finer control. That way you can start out with the cleaner ideal approach, but tweak it at the pixel level if the customer is picky and does not want excuses. I am not sure this is an OOP-versus-non-OOP issue anyhow. Does OOP naturally lead to flow-based layouts? How do you recon that? -- top</i> ",
            "id": "79750ede346adee44e1670614bd66e4e"
          },
          {
            "type": "html",
            "text": "[I'd say this has zero to do with OOP. GUI layout isn't programming anyway, any more than writing HTML is. I don't see your need for \"finer control\", either - if you don't have the control you need with a nested layout manager, then your tools are broken. [[Sharpen The Saw]]. -- [[Chris Mellon]]]",
            "id": "21bb5eea0283980e7c2c628ae6206bf1"
          },
          {
            "type": "html",
            "text": "\nThey are often interrelated. What's possible/practical with programming may greatly affect the GUI design choices. Ideally they'd be separate interests, but in practice they are often intertwined for non-trivial apps. And auto-layout is often just \"dumb\", as illustrated nearby. It <b>does not understand human aesthetics and psychology</b>, and putting that knowledge into the tool, if technically possible, would make it bloated and unpredictable (just like the users :-)",
            "id": "857bc40dde46a3b1fd628e7f96777778"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "From what I have seen, people like GUI builders. They appear to like clicking and clicking and dropping and dropping, and clicking and clicking and dropping and dropping. I am buggered if I know why they enjoy it. From experience using auto generation of screens over twenty years in one environment, I am able to assess the usefulness of the generation process as opposed to the screen painting process. And my conclusion is absolutely in the generation camp. ",
            "id": "a59a9c5f10707ad3b84cf4e3625c0963"
          },
          {
            "type": "html",
            "text": " Of 18 screens in the current application I am developing, only 2 require any manual intervention where a field may hog more screen space than required, or where the layout of a table can be improved. This means I had to do no work, zero, none for 15 of the screens. They just magically appeared when I was testing.",
            "id": "579dc391f90b6abe67e8000a0b8756e0"
          },
          {
            "type": "html",
            "text": " Because the screens are generated, the definition applies to any screen, not just the environment's GUI builder. So conversion of the screens to HTML is a no-brainer. Which means I have to do not work to spit data at a browser. Zero, none.",
            "id": "99282396a5e9c98a1b830a58c10934bf"
          },
          {
            "type": "html",
            "text": " <i>But one generally cannot translate one-to-one between regular GUI's and web GUI's, at least not without targeting a specific browser vendor or goint [?] with a [[Lowest Common Denominator Interface]]. Browsers simply lack things like [[Combo List]]s, editable grid controls, tab controls, and outliners (tree browsers).</i>",
            "id": "10c3d5fd05846af3717446d0902f6c22"
          },
          {
            "type": "html",
            "text": " That is not true - Cache CSP for example (www.intersystems.com) or [[Design Bais]] (www.designbais.com)",
            "id": "8e49da698d34aeec3fbf3389c0eb3dd0"
          },
          {
            "type": "html",
            "text": " <i>Sure, but they are not standardized and often require money and installation.</i>",
            "id": "3f9b51603c8ff3c3f530c59209d63212"
          },
          {
            "type": "html",
            "text": " Yes, they are commercial products, but I think the Cache licence will cost you nothing until you deploy - so if you never deploy, it is free. It sounds like they are making a concerted effort to capture the developer market. (I don't use it myself, yet)",
            "id": "ce84cb166f52cdd12358693e2ba9e06a"
          },
          {
            "type": "html",
            "text": " <i>Maybe in this case you just had flexible and understanding managers who let designers stay within the practical boundaries of the layout tool. But this is not always the case.</i>",
            "id": "f3faf2ad3e4aad1a9efff49e1d2b6d71"
          },
          {
            "type": "html",
            "text": "\nThere is that question of user finickitiness. Very difficult to overcome. But after overcoming that, the user is in the long term happier because the generation process causes some consistency within the system. --[[Peter Lynch]]",
            "id": "3c7d87217f6986d8904ea94db69f8fc7"
          },
          {
            "type": "html",
            "text": "<i>Generally I agree, but the social/political environment often doesn't reward a longer-term view. Sometimes we just have to cater to silly whims if we want the rewards the game offers. Related: [[Choosing Satisfaction Over Money]]. You can say, \"I will risk my career to make the GUI right instead of please fools.\" But that decision will not scale to all readers or workers.</i>",
            "id": "a6ff4e0ac54b5e0cd233accc514493ac"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "\nI think a lot of things on this page could be summed up as \"HTML positioning sucks\", which I have no argument whatsoever with, and \"Nested layout is too complicated\", which is very different from being inferior to coordinate. ",
            "id": "894079c1979acefbb5a657abe6878d1c"
          },
          {
            "type": "html",
            "text": " <i>I think \"tedious\" or \"code intensive\" is a better description than \"complicated\". GUI's are visual, so it is natural to expect the design to be visual also.</i>",
            "id": "34bd7b7cf550ebedd4ebd08e33f53658"
          },
          {
            "type": "html",
            "text": " It's natural to expect GUIs to work at different scales, different orientations, different aspect ratios, etc.  Until you can show a coordinate approach that satisfies those expectations without being tedious or code intensive there's nothing to discuss.  Relative position layout managers, while more complicated internally, aren't more \"tedious\" and can be configured without writing any code at all via visual tools.",
            "id": "06052db99181976f9c733302bed82550"
          },
          {
            "type": "html",
            "text": "\nNested layouts provide a strict superset of capability, at the expense of complexity. Obviously, the need is to reduce complexity, which you can achieve by using form designers that support layout magnets. [[Qt Designer]] has a nice feature which lets you drag and drop your controls, which is nice for prototyping and brainstorming, and then to add those controls to layout managers. -- [[Chris Mellon]]",
            "id": "f9f58fe710d0823637ba1e724ca148ca"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "Relative position GUIs are much easier to internationalize. Fixed position GUIs don't automatically adjust to different character set sizes, and when you invert the text direction for Arabic or Hebrew the coordinates become meaningless.",
            "id": "ee8ba27345df1282c1a06f45116a647d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "\nTo end this useless thesis-antithesis brawl, I will try to show, that the synthesis of both is already widely in place. Examples:",
            "id": "aff26a1843f0e426bbaf354de4f96e9e"
          },
          {
            "type": "html",
            "text": " [[Hyper Text Markup Language]]",
            "id": "2a75a693826e6ec1d29f90948ddb2166"
          },
          {
            "type": "html",
            "text": " historically relative placement (table-layout with implicitly relative positions of the enclosed elements.",
            "id": "ac35226bf3c57f5ac414957b70c3083c"
          },
          {
            "type": "html",
            "text": " layers and stylesheets for placement independent of the contains-relation.",
            "id": "0c3fcfb9457c1cabcbe833970a504a1c"
          },
          {
            "type": "html",
            "text": " [[Tex Language]]",
            "id": "a776aff50dabe8c63bd0174df33bba95"
          },
          {
            "type": "html",
            "text": " everything is a box. Boxes in boxes in boxes. Spacing relative to the surrounding box.",
            "id": "f8c979723217f87e013a38bbeb1f69d0"
          },
          {
            "type": "html",
            "text": " But is is easy to put any box into a zero sized boxes (by using negative width/height). With these boxes layers and absolute positioning can be realized (as is done in the graphics-packages).",
            "id": "40319cd33e2bc4ce3e6fb3f50d7de2a1"
          },
          {
            "type": "html",
            "text": "\nI guess there are many more examples. The remaining question is not, which is better, but [[When To Apply Which]] or [[Finding The Middle Ways]].",
            "id": "385aeccdd957468e22830431f7a48aa8"
          },
          {
            "type": "html",
            "text": "-- [[Gunnar Zarncke]]",
            "id": "e7939d1e4f87977087fd45e9a9ee058d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "<b>Coordinates with Stretch-Zones</b>",
            "id": "0023131b5044bc7508f89c895a6e01c7"
          },
          {
            "type": "html",
            "text": "\nI thought of a possible way to allow coordinate-based screens to <b>expand without having to abandon coordinates</b>. Have a vertical and horizontal \"stretch bar\". In design mode the stretch bar would just be two lines, a cross in the middle whose end-points reach to the edge of the form. When the window is expanded, the line(s) forms a gap and widget points (corners) will stay on each side of the panels. Imagine the cartoons where somebody is on top of and between two train cars with one foot on each train. When the trains separate, the character's legs stretch. The location of the stretch bar would be designer-determined. It probably would not cover 100% of all situations, but may cover most. Also, in some cases some widgets may want a designation of \"non-stretch\" such that they keep the same proportion, stuck to one side or the other (or top and bottom) as the primary reference.",
            "id": "bcce604b215a5e3d69318be1bb431400"
          },
          {
            "type": "html",
            "text": "<i>Are you thinking of [[Springs And Struts]]?</i>",
            "id": "a8d99b68e9be4a981911a96c12347cbd"
          },
          {
            "type": "html",
            "text": "\nNo, but if somebody else already tried the idea, that is great. It looks a bit more complicated than what I have in mind, though.",
            "id": "d5699adc843f03968805b39e9d0ccc36"
          },
          {
            "type": "html",
            "text": "\nTo set how stretching happens across the zones, each edge of the bounding rectangle of the widget needs to be assigned to one of the 2 possible stretch directions.",
            "id": "da163d7eecb69e760236fc71d9cb0225"
          },
          {
            "type": "code",
            "text": " widget.topStretch   = \"top\";   // or \"bottom\"\n widget.rightStretch = \"right\";  // or \"left\"\n widget.leftStretch = \"left\";     // or \"right\"\n widget.bottomStretch = \"bottom\";  // or \"top\"",
            "id": "c28ae8cafdaa329c9083ea5d6b33b3d0"
          },
          {
            "type": "html",
            "text": "(Perhaps there should also be a \"middle\".)",
            "id": "d127e43ddb75fe8c06302a301f4b52a5"
          },
          {
            "type": "html",
            "text": "\nThese would be the defaults, so normally we wouldn't need to specify these specific ones. Note that buttons do not normally stretch, so bunches of buttons in a group may be best riding on a panel that you create for them, which itself uses the stretch settings.",
            "id": "e0287360bcb05a8750bc7dc2d6eeefe6"
          },
          {
            "type": "html",
            "text": "\nAnother feature would be scaling of widgets such that the user could magnify or shrink the screen, but the relative sizes of everything would stay the same. This would require vector-based fonts, however, which sometimes don't map well to raster-based conventions (at least until pixel sizes get sufficiently small via the technology curve).",
            "id": "a6e70e3f8b786fcf2a4bd3505b266879"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "This is a \"real world\" experience that reminds me of the limitations of auto-placement as described above (which I am not outright against if it's optional). I was hanging a picture on the wall the other day and was careful to center it properly between the available wall borders. It was a fairly narrow area. When done, I stood back and was dismayed about how off-center it looked. I checked the centering again, and technically it was correct, but it still <i>looked</i> off-center. It's just the \"lay of the land\" in that spot that tricks the eye. I'm still kicking around the idea of fudging it to make it look centered, but am too lazy to futz with it further. Many managers and users do complain, or at least notice such things on screen, and it thus affects a developer's score. -t",
            "id": "5096e8c6f68649def496e2e9085dbc31"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "See also: [[Gui Coordinate Notation Discussion]]",
            "id": "5203457a01481194f99e8d5474dc3e90"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "[[Category User Interface]], [[Category Web Design]], [[Category Interaction Design]]",
            "id": "c813fd416c186b5563cfe6926bdcb765"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3d264c48df94923a5d48245ffe07553d"
          },
          {
            "type": "html",
            "text": "[[May Zero Nine]]",
            "id": "a10f7ed95562ef285f28f284255bb390"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?CoordinateVersusNestedGui c2.com]",
            "id": "44045b2f857e249b7c369a8673131fe3"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1708068787076
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1709813173334
    }
  ]
}