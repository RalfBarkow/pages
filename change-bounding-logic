{
  "title": "Change Bounding Logic",
  "story": [
    {
      "type": "paragraph",
      "id": "b6504bf7aad47300",
      "text": "The idea is to compare to versions highlighting the region that has changed between the prefix and suffix that hasn't. Recoding this in 2022 I encountered difficult questions such as when a new word is added does the space after it count as new or the space before? I don't remember these challenges."
    },
    {
      "type": "paragraph",
      "id": "2af6f890567ba681",
      "text": "I figured out what was different when I wrote the change bounding logic in 1988. It was in Smalltalk and the workflow I was supporting was highly interactive, much more so than what we have in this process. Here is how it worked:\n"
    },
    {
      "type": "paragraph",
      "id": "55edc0ee69e2c053",
      "text": "Any given method in our application was small. But after four years of work there were many bits of history that we found need to review. We had a tool that would list all of the versions by date. Click on one and you would see that version. Commonly we would march through a sequence of dates clicking each working forward or backward."
    },
    {
      "type": "paragraph",
      "id": "2dbabd7aa1557b1d",
      "text": "My improvement set the highlight to bound the chance with each new version. If you were clicking forward in time you would see new code highlighted. Clicking backwards you saw a sequence of removals. We never saw removals and replacements at the same time."
    },
    {
      "type": "paragraph",
      "id": "25af7280fabc5862",
      "text": "We also were moving through the history of a specific thing, always valued at the time, free of spelling or syntax errors because this was a list of \"keepers\". The selection was pointing to something more interesting and we were on the hunt looking for big game."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Change Bounding Logic",
        "story": []
      },
      "date": 1668221580741
    },
    {
      "item": {
        "type": "factory",
        "id": "b6504bf7aad47300"
      },
      "id": "b6504bf7aad47300",
      "type": "add",
      "date": 1668221582699
    },
    {
      "type": "edit",
      "id": "b6504bf7aad47300",
      "item": {
        "type": "paragraph",
        "id": "b6504bf7aad47300",
        "text": "The idea is to compare to versions highlighting the region that has changed between the prefix and suffix that hasn't. Recoding this in 2022 I encountered difficult questions such as when a new word is added does the space after it count as new or the space before? I don't remember these challenges."
      },
      "date": 1668221713254
    },
    {
      "type": "add",
      "id": "2af6f890567ba681",
      "item": {
        "type": "paragraph",
        "id": "2af6f890567ba681",
        "text": "I figured out what was different when I wrote the change bounding logic in 1988. It was in Smalltalk and the workflow I was supporting was highly interactive, much more so than what we have in this process. Here is how it worked:\n"
      },
      "after": "b6504bf7aad47300",
      "date": 1668221738085
    },
    {
      "type": "add",
      "id": "55edc0ee69e2c053",
      "item": {
        "type": "paragraph",
        "id": "55edc0ee69e2c053",
        "text": "Any given method in our application was small. But after four years of work there were many bits of history that we found need to review. We had a tool that would list all of the versions by date. Click on one and you would see that version. Commonly we would march through a sequence of dates clicking each working forward or backward. My improvement set the highlight to bound the chance with each new version. If you were clicking forward in time you would see new code highlighted. Clicking backwards you saw a sequence of removals. We never saw removals and replacements at the same time. We also were moving through the history of a specific thing, always valued at the time, free of spelling or syntax errors because this was a list of \"keepers\". The selection was pointing to something more interesting and we were on the hunt looking for big game."
      },
      "after": "2af6f890567ba681",
      "date": 1668221739056
    },
    {
      "type": "edit",
      "id": "55edc0ee69e2c053",
      "item": {
        "type": "paragraph",
        "id": "55edc0ee69e2c053",
        "text": "Any given method in our application was small. But after four years of work there were many bits of history that we found need to review. We had a tool that would list all of the versions by date. Click on one and you would see that version. Commonly we would march through a sequence of dates clicking each working forward or backward."
      },
      "date": 1668221756811
    },
    {
      "type": "add",
      "id": "2dbabd7aa1557b1d",
      "item": {
        "type": "paragraph",
        "id": "2dbabd7aa1557b1d",
        "text": "My improvement set the highlight to bound the chance with each new version. If you were clicking forward in time you would see new code highlighted. Clicking backwards you saw a sequence of removals. We never saw removals and replacements at the same time. We also were moving through the history of a specific thing, always valued at the time, free of spelling or syntax errors because this was a list of \"keepers\". The selection was pointing to something more interesting and we were on the hunt looking for big game."
      },
      "after": "55edc0ee69e2c053",
      "date": 1668221765349
    },
    {
      "type": "edit",
      "id": "2dbabd7aa1557b1d",
      "item": {
        "type": "paragraph",
        "id": "2dbabd7aa1557b1d",
        "text": "My improvement set the highlight to bound the chance with each new version. If you were clicking forward in time you would see new code highlighted. Clicking backwards you saw a sequence of removals. We never saw removals and replacements at the same time."
      },
      "date": 1668221789031
    },
    {
      "type": "add",
      "id": "25af7280fabc5862",
      "item": {
        "type": "paragraph",
        "id": "25af7280fabc5862",
        "text": "We also were moving through the history of a specific thing, always valued at the time, free of spelling or syntax errors because this was a list of \"keepers\". The selection was pointing to something more interesting and we were on the hunt looking for big game."
      },
      "after": "2dbabd7aa1557b1d",
      "date": 1668221790814
    },
    {
      "type": "fork",
      "site": "code.fed.wiki.org",
      "date": 1669244159339
    }
  ]
}