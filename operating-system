{
  "title": "Operating System",
  "story": [
    {
      "type": "paragraph",
      "id": "c1b188cc5b9db318",
      "text": "[[Alan Kay]] says that an operating system is a system that manages [[Time]] and [[Space]]. It means that an operating system in traditional sense manages CPU time and memory; we stretch the notion just a little bit to say that [[Croquet OS]] manages time with explicit time and space the bit-identical results in memory. [https://discord.com/channels/694586717247635488/966071402526543924/1039620480467992657 discord] \n"
    },
    {
      "type": "pagefold",
      "id": "893f374410d29516",
      "text": "~"
    },
    {
      "type": "html",
      "text": "The most low-level program that runs on any computer. It is started the moment the computer is switched on, and only ends the moment the computer is shut down. Its main task is to execute [[Application Program]]s, that perform the tasks that the user really wants to have done. ",
      "id": "f7d884e77a09dcc6a29b10c756119bfb"
    },
    {
      "type": "html",
      "text": "\nNote that not every computer runs an operating system. Many embedded systems have applications directly running over the hardware. Some desktop systems intentionally blur the distinction between operating system and application (e.g. the [[Oberon Language]]).",
      "id": "fec7572712e9132a9ebc00181e64fe73"
    },
    {
      "type": "html",
      "text": "<b><i>The [[Language Is An Os]]</b></i> -- for languages that were designed to run without benefit of an independent [[Operating System]].",
      "id": "b25ce9d5049fb257b23399add71c27e3"
    },
    {
      "type": "html",
      "text": "\nSee also [[Purely Functional Operating System]], [[Object Capability Operating System]], [[Killer Operating System]].",
      "id": "e03bf2f12f55d3ffa67f4efd7302aa35"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3592d2d6b68283f32f95c98834cfa236"
    },
    {
      "type": "html",
      "text": "\nAn operating system is a program that provides an interface between the hardware and the business logic.",
      "id": "f46d4268b20dc9a65806f85f39dc9862"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3592d2d6b68283f32f95c98834cfa236"
    },
    {
      "type": "html",
      "text": "<i>I take issue with the \"started the moment the computer is switched on\" statement:</i>",
      "id": "863ade33c0afa675406521ec24c054cb"
    },
    {
      "type": "html",
      "text": "\nIn the MS-DOS world, the ROM BIOS starts up when the computer is switched on, and it may invoke a bootstrap loader from the disk, which in turn loads the \"full blown\" [[Operating System]]. The ROM BIOS is [[Operating System]] independent - it could start many different OSes.",
      "id": "3e1bee013633412fec1a2debf9a28662"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3592d2d6b68283f32f95c98834cfa236"
    },
    {
      "type": "html",
      "text": "<i>I take issue with the \"Its main task is to execute [[Application Program]]s\"</i>",
      "id": "2229ea923934beb07ec61ca46322919f"
    },
    {
      "type": "html",
      "text": "\nThe primary purpose of the operating system is to regulate access to hardware devices, including RAM, CPU, disk drives, etc. -- [[David Corbin]]",
      "id": "5ffc66a87327e4ec7ea37c8e911cb8f8"
    },
    {
      "type": "html",
      "text": "<i>Yes, but this only matters in so far as it lets application programs run!</i>",
      "id": "fe81e6c11c91dfd8ba99abeadb8cd152"
    },
    {
      "type": "html",
      "text": "\nYes, like provide a protected memory space (NT uses a 4GB virtual address space with lower 2GB for users and upper 2 GB for the system, although this can be set to 3 GB for users with a special setting) with a Virtual Memory Manager, some abstract model of dealing with hardware (NT has Hardware Abstraction Layer - HAL), device driver model, kernel, services, etc.",
      "id": "80d598da0e232de4c71e9f1a95b7b028"
    },
    {
      "type": "html",
      "text": "-- sg",
      "id": "dc5ea10297dbac8cba4dbc79d02a4f8d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3592d2d6b68283f32f95c98834cfa236"
    },
    {
      "type": "html",
      "text": "\nThere are [[Operating System]]s for embedded applications too...",
      "id": "a8811eee6b5b5eef7798fb5d3b629617"
    },
    {
      "type": "html",
      "text": " [[Palm Os]] ",
      "id": "8d540748c053096998c00ecc915dd312"
    },
    {
      "type": "html",
      "text": " Windows CE (See [[Win Ce]])",
      "id": "7f4ef4052c2ed4aec309fc825e9f786f"
    },
    {
      "type": "html",
      "text": " [[Symbian Os]]",
      "id": "5da09e95b25e916118ec33e890d947b5"
    },
    {
      "type": "html",
      "text": " <i>...others...</i>",
      "id": "23f3b3993db6d496eedd20723680f2cb"
    },
    {
      "type": "html",
      "text": "\n[[Real Time Operating System]]s have rather special scheduling and synchronizing facilities. These ensure that the highest priority task that is ready to run will always get to the processor within a finite and deterministic amount of time (typically in the single-digit microseconds on mid-level Pentium hardware). Popular real time operating systems include:",
      "id": "edbe5da141c3ec5158bd157d206647f8"
    },
    {
      "type": "html",
      "text": " [[Rt Linux]], [[Rtai Linux]], and the rest of the hacked-up Linux kernels",
      "id": "4a194639fd80f8d70c603413039309ea"
    },
    {
      "type": "html",
      "text": " QNX4 and [[Qnx Neutrino]]",
      "id": "4b5b5eb0df01e6091c740bac6bb713f9"
    },
    {
      "type": "html",
      "text": " WinCE (finite and deterministic does not necessarily mean quick, though)",
      "id": "a1d6e5fb239a63363902944b760f5b32"
    },
    {
      "type": "html",
      "text": " Custom solutions; writing real-time operating systems is a traditional entertainment for all embedded systems programmers",
      "id": "df809d190007b786e4820ce0bb04b82e"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3592d2d6b68283f32f95c98834cfa236"
    },
    {
      "type": "html",
      "text": "\nAn operating system is [[Once And Only Once]] for the things that application programmers found themselves doing over and over.",
      "id": "e8fdf2552c962a0cd32fc295d5c2356c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3592d2d6b68283f32f95c98834cfa236"
    },
    {
      "type": "html",
      "text": "\nIs anyone doing real research on operating systems these days? We can all see the effects of what has evolved over the last twenty years - we have advanced so much that Linux is now quite popular, and Apple have developed a new OS \"based on Unix\", while [[Micro Soft]] continues to produce new operating systems which try to do better, but usually don't.",
      "id": "a7117a038e4c2672f45cbaa770c640ad"
    },
    {
      "type": "html",
      "text": "<i>[[Ell Four]]? PlanB? Systems with [[Orthogonal Persistency]]...</i>",
      "id": "4e4094f4c5245975c748a14527c9f886"
    },
    {
      "type": "html",
      "text": "\nUnix is perhaps the best thing we have, but that doesn't mean that it's really good. However, there's not much incentive for anyone to develop a new system is there?",
      "id": "e5204e42f25609f20e31739cde693910"
    },
    {
      "type": "html",
      "text": " <i>Or the barrier to entry is too high: dealing with modern memory management, zillions of device drivers, schmancy graphics to attract users, etc. takes a lot of time and energy.</i>",
      "id": "cd5e3df61e74c3f4a8b6331b862ddbaa"
    },
    {
      "type": "html",
      "text": "\nWhat do you think a new operating system should have - or even an older, but refurbished one? See [[New Os Features]].",
      "id": "3489db7f8ca4d9ff7d24daab8691fe15"
    },
    {
      "type": "html",
      "text": "-- [[David Martland]]",
      "id": "4cb9cc96d0505a7ce5d0242619b49036"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3592d2d6b68283f32f95c98834cfa236"
    },
    {
      "type": "html",
      "text": "<i>The most low-level program that runs on any computer</i>",
      "id": "ff2e2f677014ffcf5db188eb2aaeca4d"
    },
    {
      "type": "html",
      "text": "\nAs long as you don't count the [[Monitor Rom]].  In many older designs, and (as I understand it), some newer designs, a Monitor ROM got/gets control at [[Power On]].  This Monitor ROM could/can be used to examine memory, boot from specific devices, enter code by hand, and other stuff.  Some OS implementations were/are aware of the Monitor ROM and would/will allow escaping to it while preserving all other state.",
      "id": "a11f26b1daa7641b75f8e02644c1d267"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3592d2d6b68283f32f95c98834cfa236"
    },
    {
      "type": "html",
      "text": "\n[[Multi User]] [[Operating System]]s support many concurrent users",
      "id": "49791cb9631738ecb37e461452d9709d"
    },
    {
      "type": "html",
      "text": " Pr1mos ran on a Pr1me computer with 3 [[Mega Bytes]] of RAM, servicing 48 users at a time, all the time.",
      "id": "9b64f4c5f42a327d7d5ac31e06750351"
    },
    {
      "type": "html",
      "text": " OpenVMS runs [[Digital Equipment]]s (now owned by HP) VAXes, and 64bit Alpha Servers.",
      "id": "f8e94fe91f66cbd9e0dc757788758a76"
    },
    {
      "type": "html",
      "text": " Multics stood for Multiuser Computing System, I first saw it on some Honeywell hardware at MIT.",
      "id": "16f547ee5c6695709188439fb175a7bc"
    },
    {
      "type": "html",
      "text": " <b>Q</b>: What OS did Xerox's Sigma series run?",
      "id": "b6e563af5eda479d888396beb8b571e8"
    },
    {
      "type": "html",
      "text": " In the 1990's Unix became mainstream, with many vendors having their own flavors: DEC, HP, DG, Sun, SGI, IBM, and a whole litany of other acronyms.  At the same time, a variety of [[Open Source]] [[Unix Clones]] appeared:  [[Net Bsd]] [[Free Bsd]] [[Open Bsd]] and [[Linux Os]]",
      "id": "48a286bde08ccf86ec9daacf576632c6"
    },
    {
      "type": "html",
      "text": "\n[[Single User]] [[Operating System]]s have grown over time",
      "id": "d987df0b60b90a3b8fbe86a42b0f4022"
    },
    {
      "type": "html",
      "text": " CP/M booted on my Osborne from one 92kb floppy, with room to spare.",
      "id": "30622d9dba217f270da53df2c58bb850"
    },
    {
      "type": "html",
      "text": " Apple had a bunch of early OS, leading up to that on the Macintosh - which seemed to have remained nameless, but versioned.  They are now on version 10 (X) of the MacOS.",
      "id": "b3aee4ffcebf441e6c755a1789f2a204"
    },
    {
      "type": "html",
      "text": " MSDOS from Microsoft booted from floppies in the early days.",
      "id": "c55287a9199b6891ebb40cde2dd942bb"
    },
    {
      "type": "html",
      "text": " Unix was named as a pun on the OS named Multics, a single users programming environment.",
      "id": "aafae541aaba9846548fa8943a9fd47b"
    },
    {
      "type": "html",
      "text": "<i>[Unix never was a single-user OS. Its very first incarnation supported exactly two users.]</i>",
      "id": "2145b6344063df3cb7fe87191d70ddfe"
    },
    {
      "type": "html",
      "text": " [[Menuetos Operating System]] is a modern single-floppy OS written in [[Assembly Language]]",
      "id": "ab9a273600f7f8a7f76891b6f4735d55"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3592d2d6b68283f32f95c98834cfa236"
    },
    {
      "type": "html",
      "text": "\nSee [[Operating Systems Design]]",
      "id": "0f35d3f35d59da66fde3d358f31419d0"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3592d2d6b68283f32f95c98834cfa236"
    },
    {
      "type": "html",
      "text": "[[Category Operating System]] [[Category Jargon]]",
      "id": "c234e2ed63dc8dda55a060ade990b671"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?OperatingSystem c2.com]",
      "id": "e1fabf770d86c4515b5e05edc543ac9c"
    }
  ],
  "journal": [
    {
      "date": 1255463354000,
      "id": "6607eb831f63f3f1e84516eeb923735c",
      "type": "create",
      "item": {
        "title": "Operating System",
        "story": [
          {
            "type": "html",
            "text": "The most low-level program that runs on any computer. It is started the moment the computer is switched on, and only ends the moment the computer is shut down. Its main task is to execute [[Application Program]]s, that perform the tasks that the user really wants to have done. ",
            "id": "f7d884e77a09dcc6a29b10c756119bfb"
          },
          {
            "type": "html",
            "text": "\nNote that not every computer runs an operating system. Many embedded systems have applications directly running over the hardware. Some desktop systems intentionally blur the distinction between operating system and application (e.g. the [[Oberon Language]]).",
            "id": "fec7572712e9132a9ebc00181e64fe73"
          },
          {
            "type": "html",
            "text": "<b><i>The [[Language Is An Os]]</b></i> -- for languages that were designed to run without benefit of an independent [[Operating System]].",
            "id": "b25ce9d5049fb257b23399add71c27e3"
          },
          {
            "type": "html",
            "text": "\nSee also [[Purely Functional Operating System]], [[Object Capability Operating System]], [[Killer Operating System]].",
            "id": "e03bf2f12f55d3ffa67f4efd7302aa35"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3592d2d6b68283f32f95c98834cfa236"
          },
          {
            "type": "html",
            "text": "\nAn operating system is a program that provides an interface between the hardware and the business logic.",
            "id": "f46d4268b20dc9a65806f85f39dc9862"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3592d2d6b68283f32f95c98834cfa236"
          },
          {
            "type": "html",
            "text": "<i>I take issue with the \"started the moment the computer is switched on\" statement:</i>",
            "id": "863ade33c0afa675406521ec24c054cb"
          },
          {
            "type": "html",
            "text": "\nIn the MS-DOS world, the ROM BIOS starts up when the computer is switched on, and it may invoke a bootstrap loader from the disk, which in turn loads the \"full blown\" [[Operating System]]. The ROM BIOS is [[Operating System]] independent - it could start many different OSes.",
            "id": "3e1bee013633412fec1a2debf9a28662"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3592d2d6b68283f32f95c98834cfa236"
          },
          {
            "type": "html",
            "text": "<i>I take issue with the \"Its main task is to execute [[Application Program]]s\"</i>",
            "id": "2229ea923934beb07ec61ca46322919f"
          },
          {
            "type": "html",
            "text": "\nThe primary purpose of the operating system is to regulate access to hardware devices, including RAM, CPU, disk drives, etc. -- [[David Corbin]]",
            "id": "5ffc66a87327e4ec7ea37c8e911cb8f8"
          },
          {
            "type": "html",
            "text": "<i>Yes, but this only matters in so far as it lets application programs run!</i>",
            "id": "fe81e6c11c91dfd8ba99abeadb8cd152"
          },
          {
            "type": "html",
            "text": "\nYes, like provide a protected memory space (NT uses a 4GB virtual address space with lower 2GB for users and upper 2 GB for the system, although this can be set to 3 GB for users with a special setting) with a Virtual Memory Manager, some abstract model of dealing with hardware (NT has Hardware Abstraction Layer - HAL), device driver model, kernel, services, etc.",
            "id": "80d598da0e232de4c71e9f1a95b7b028"
          },
          {
            "type": "html",
            "text": "-- sg",
            "id": "dc5ea10297dbac8cba4dbc79d02a4f8d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3592d2d6b68283f32f95c98834cfa236"
          },
          {
            "type": "html",
            "text": "\nThere are [[Operating System]]s for embedded applications too...",
            "id": "a8811eee6b5b5eef7798fb5d3b629617"
          },
          {
            "type": "html",
            "text": " [[Palm Os]] ",
            "id": "8d540748c053096998c00ecc915dd312"
          },
          {
            "type": "html",
            "text": " Windows CE (See [[Win Ce]])",
            "id": "7f4ef4052c2ed4aec309fc825e9f786f"
          },
          {
            "type": "html",
            "text": " [[Symbian Os]]",
            "id": "5da09e95b25e916118ec33e890d947b5"
          },
          {
            "type": "html",
            "text": " <i>...others...</i>",
            "id": "23f3b3993db6d496eedd20723680f2cb"
          },
          {
            "type": "html",
            "text": "\n[[Real Time Operating System]]s have rather special scheduling and synchronizing facilities. These ensure that the highest priority task that is ready to run will always get to the processor within a finite and deterministic amount of time (typically in the single-digit microseconds on mid-level Pentium hardware). Popular real time operating systems include:",
            "id": "edbe5da141c3ec5158bd157d206647f8"
          },
          {
            "type": "html",
            "text": " [[Rt Linux]], [[Rtai Linux]], and the rest of the hacked-up Linux kernels",
            "id": "4a194639fd80f8d70c603413039309ea"
          },
          {
            "type": "html",
            "text": " QNX4 and [[Qnx Neutrino]]",
            "id": "4b5b5eb0df01e6091c740bac6bb713f9"
          },
          {
            "type": "html",
            "text": " WinCE (finite and deterministic does not necessarily mean quick, though)",
            "id": "a1d6e5fb239a63363902944b760f5b32"
          },
          {
            "type": "html",
            "text": " Custom solutions; writing real-time operating systems is a traditional entertainment for all embedded systems programmers",
            "id": "df809d190007b786e4820ce0bb04b82e"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3592d2d6b68283f32f95c98834cfa236"
          },
          {
            "type": "html",
            "text": "\nAn operating system is [[Once And Only Once]] for the things that application programmers found themselves doing over and over.",
            "id": "e8fdf2552c962a0cd32fc295d5c2356c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3592d2d6b68283f32f95c98834cfa236"
          },
          {
            "type": "html",
            "text": "\nIs anyone doing real research on operating systems these days? We can all see the effects of what has evolved over the last twenty years - we have advanced so much that Linux is now quite popular, and Apple have developed a new OS \"based on Unix\", while [[Micro Soft]] continues to produce new operating systems which try to do better, but usually don't.",
            "id": "a7117a038e4c2672f45cbaa770c640ad"
          },
          {
            "type": "html",
            "text": "<i>[[Ell Four]]? PlanB? Systems with [[Orthogonal Persistency]]...</i>",
            "id": "4e4094f4c5245975c748a14527c9f886"
          },
          {
            "type": "html",
            "text": "\nUnix is perhaps the best thing we have, but that doesn't mean that it's really good. However, there's not much incentive for anyone to develop a new system is there?",
            "id": "e5204e42f25609f20e31739cde693910"
          },
          {
            "type": "html",
            "text": " <i>Or the barrier to entry is too high: dealing with modern memory management, zillions of device drivers, schmancy graphics to attract users, etc. takes a lot of time and energy.</i>",
            "id": "cd5e3df61e74c3f4a8b6331b862ddbaa"
          },
          {
            "type": "html",
            "text": "\nWhat do you think a new operating system should have - or even an older, but refurbished one? See [[New Os Features]].",
            "id": "3489db7f8ca4d9ff7d24daab8691fe15"
          },
          {
            "type": "html",
            "text": "-- [[David Martland]]",
            "id": "4cb9cc96d0505a7ce5d0242619b49036"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3592d2d6b68283f32f95c98834cfa236"
          },
          {
            "type": "html",
            "text": "<i>The most low-level program that runs on any computer</i>",
            "id": "ff2e2f677014ffcf5db188eb2aaeca4d"
          },
          {
            "type": "html",
            "text": "\nAs long as you don't count the [[Monitor Rom]].  In many older designs, and (as I understand it), some newer designs, a Monitor ROM got/gets control at [[Power On]].  This Monitor ROM could/can be used to examine memory, boot from specific devices, enter code by hand, and other stuff.  Some OS implementations were/are aware of the Monitor ROM and would/will allow escaping to it while preserving all other state.",
            "id": "a11f26b1daa7641b75f8e02644c1d267"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3592d2d6b68283f32f95c98834cfa236"
          },
          {
            "type": "html",
            "text": "\n[[Multi User]] [[Operating System]]s support many concurrent users",
            "id": "49791cb9631738ecb37e461452d9709d"
          },
          {
            "type": "html",
            "text": " Pr1mos ran on a Pr1me computer with 3 [[Mega Bytes]] of RAM, servicing 48 users at a time, all the time.",
            "id": "9b64f4c5f42a327d7d5ac31e06750351"
          },
          {
            "type": "html",
            "text": " OpenVMS runs [[Digital Equipment]]s (now owned by HP) VAXes, and 64bit Alpha Servers.",
            "id": "f8e94fe91f66cbd9e0dc757788758a76"
          },
          {
            "type": "html",
            "text": " Multics stood for Multiuser Computing System, I first saw it on some Honeywell hardware at MIT.",
            "id": "16f547ee5c6695709188439fb175a7bc"
          },
          {
            "type": "html",
            "text": " <b>Q</b>: What OS did Xerox's Sigma series run?",
            "id": "b6e563af5eda479d888396beb8b571e8"
          },
          {
            "type": "html",
            "text": " In the 1990's Unix became mainstream, with many vendors having their own flavors: DEC, HP, DG, Sun, SGI, IBM, and a whole litany of other acronyms.  At the same time, a variety of [[Open Source]] [[Unix Clones]] appeared:  [[Net Bsd]] [[Free Bsd]] [[Open Bsd]] and [[Linux Os]]",
            "id": "48a286bde08ccf86ec9daacf576632c6"
          },
          {
            "type": "html",
            "text": "\n[[Single User]] [[Operating System]]s have grown over time",
            "id": "d987df0b60b90a3b8fbe86a42b0f4022"
          },
          {
            "type": "html",
            "text": " CP/M booted on my Osborne from one 92kb floppy, with room to spare.",
            "id": "30622d9dba217f270da53df2c58bb850"
          },
          {
            "type": "html",
            "text": " Apple had a bunch of early OS, leading up to that on the Macintosh - which seemed to have remained nameless, but versioned.  They are now on version 10 (X) of the MacOS.",
            "id": "b3aee4ffcebf441e6c755a1789f2a204"
          },
          {
            "type": "html",
            "text": " MSDOS from Microsoft booted from floppies in the early days.",
            "id": "c55287a9199b6891ebb40cde2dd942bb"
          },
          {
            "type": "html",
            "text": " Unix was named as a pun on the OS named Multics, a single users programming environment.",
            "id": "aafae541aaba9846548fa8943a9fd47b"
          },
          {
            "type": "html",
            "text": "<i>[Unix never was a single-user OS. Its very first incarnation supported exactly two users.]</i>",
            "id": "2145b6344063df3cb7fe87191d70ddfe"
          },
          {
            "type": "html",
            "text": " [[Menuetos Operating System]] is a modern single-floppy OS written in [[Assembly Language]]",
            "id": "ab9a273600f7f8a7f76891b6f4735d55"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3592d2d6b68283f32f95c98834cfa236"
          },
          {
            "type": "html",
            "text": "\nSee [[Operating Systems Design]]",
            "id": "0f35d3f35d59da66fde3d358f31419d0"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3592d2d6b68283f32f95c98834cfa236"
          },
          {
            "type": "html",
            "text": "[[Category Operating System]] [[Category Jargon]]",
            "id": "c234e2ed63dc8dda55a060ade990b671"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?OperatingSystem c2.com]",
            "id": "e1fabf770d86c4515b5e05edc543ac9c"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1665179657671
    },
    {
      "id": "c1b188cc5b9db318",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c1b188cc5b9db318",
        "text": "As for operating system, [[Alan Kay]] says that an operating system is a system that manages time and space. It means that an operating system in traditional sense manages CPU time and memory; we stretch the notion just a little bit to say that Croquet OS manages time with explicit time and space the bit-identical results in memory.\n"
      },
      "date": 1667993089884
    },
    {
      "type": "edit",
      "id": "c1b188cc5b9db318",
      "item": {
        "type": "paragraph",
        "id": "c1b188cc5b9db318",
        "text": "[[Alan Kay]] says that an operating system is a system that manages time and space. It means that an operating system in traditional sense manages CPU time and memory; we stretch the notion just a little bit to say that Croquet OS manages time with explicit time and space the bit-identical results in memory.\n"
      },
      "date": 1667993104970
    },
    {
      "type": "edit",
      "id": "c1b188cc5b9db318",
      "item": {
        "type": "paragraph",
        "id": "c1b188cc5b9db318",
        "text": "[[Alan Kay]] says that an operating system is a system that manages time and space. It means that an operating system in traditional sense manages CPU time and memory; we stretch the notion just a little bit to say that Croquet OS manages time with explicit time and space the bit-identical results in memory. [https://discord.com/channels/694586717247635488/966071402526543924/1039620480467992657 discord] \n"
      },
      "date": 1667993150476
    },
    {
      "item": {
        "type": "factory",
        "id": "893f374410d29516"
      },
      "id": "893f374410d29516",
      "type": "add",
      "after": "e1fabf770d86c4515b5e05edc543ac9c",
      "date": 1667993160952
    },
    {
      "type": "edit",
      "id": "893f374410d29516",
      "item": {
        "type": "pagefold",
        "id": "893f374410d29516",
        "text": "~"
      },
      "date": 1667993166207
    },
    {
      "id": "893f374410d29516",
      "type": "move",
      "order": [
        "c1b188cc5b9db318",
        "893f374410d29516",
        "f7d884e77a09dcc6a29b10c756119bfb",
        "fec7572712e9132a9ebc00181e64fe73",
        "b25ce9d5049fb257b23399add71c27e3",
        "e03bf2f12f55d3ffa67f4efd7302aa35",
        "3592d2d6b68283f32f95c98834cfa236",
        "f46d4268b20dc9a65806f85f39dc9862",
        "3592d2d6b68283f32f95c98834cfa236",
        "863ade33c0afa675406521ec24c054cb",
        "3e1bee013633412fec1a2debf9a28662",
        "3592d2d6b68283f32f95c98834cfa236",
        "2229ea923934beb07ec61ca46322919f",
        "5ffc66a87327e4ec7ea37c8e911cb8f8",
        "fe81e6c11c91dfd8ba99abeadb8cd152",
        "80d598da0e232de4c71e9f1a95b7b028",
        "dc5ea10297dbac8cba4dbc79d02a4f8d",
        "3592d2d6b68283f32f95c98834cfa236",
        "a8811eee6b5b5eef7798fb5d3b629617",
        "8d540748c053096998c00ecc915dd312",
        "7f4ef4052c2ed4aec309fc825e9f786f",
        "5da09e95b25e916118ec33e890d947b5",
        "23f3b3993db6d496eedd20723680f2cb",
        "edbe5da141c3ec5158bd157d206647f8",
        "4a194639fd80f8d70c603413039309ea",
        "4b5b5eb0df01e6091c740bac6bb713f9",
        "a1d6e5fb239a63363902944b760f5b32",
        "df809d190007b786e4820ce0bb04b82e",
        "3592d2d6b68283f32f95c98834cfa236",
        "e8fdf2552c962a0cd32fc295d5c2356c",
        "3592d2d6b68283f32f95c98834cfa236",
        "a7117a038e4c2672f45cbaa770c640ad",
        "4e4094f4c5245975c748a14527c9f886",
        "e5204e42f25609f20e31739cde693910",
        "cd5e3df61e74c3f4a8b6331b862ddbaa",
        "3489db7f8ca4d9ff7d24daab8691fe15",
        "4cb9cc96d0505a7ce5d0242619b49036",
        "3592d2d6b68283f32f95c98834cfa236",
        "ff2e2f677014ffcf5db188eb2aaeca4d",
        "a11f26b1daa7641b75f8e02644c1d267",
        "3592d2d6b68283f32f95c98834cfa236",
        "49791cb9631738ecb37e461452d9709d",
        "9b64f4c5f42a327d7d5ac31e06750351",
        "f8e94fe91f66cbd9e0dc757788758a76",
        "16f547ee5c6695709188439fb175a7bc",
        "b6e563af5eda479d888396beb8b571e8",
        "48a286bde08ccf86ec9daacf576632c6",
        "d987df0b60b90a3b8fbe86a42b0f4022",
        "30622d9dba217f270da53df2c58bb850",
        "b3aee4ffcebf441e6c755a1789f2a204",
        "c55287a9199b6891ebb40cde2dd942bb",
        "aafae541aaba9846548fa8943a9fd47b",
        "2145b6344063df3cb7fe87191d70ddfe",
        "ab9a273600f7f8a7f76891b6f4735d55",
        "3592d2d6b68283f32f95c98834cfa236",
        "0f35d3f35d59da66fde3d358f31419d0",
        "3592d2d6b68283f32f95c98834cfa236",
        "c234e2ed63dc8dda55a060ade990b671",
        "e1fabf770d86c4515b5e05edc543ac9c"
      ],
      "date": 1667993174251
    },
    {
      "type": "edit",
      "id": "c1b188cc5b9db318",
      "item": {
        "type": "paragraph",
        "id": "c1b188cc5b9db318",
        "text": "[[Alan Kay]] says that an operating system is a system that manages [[time]] and space. It means that an operating system in traditional sense manages CPU time and memory; we stretch the notion just a little bit to say that Croquet OS manages time with explicit time and space the bit-identical results in memory. [https://discord.com/channels/694586717247635488/966071402526543924/1039620480467992657 discord] \n"
      },
      "date": 1667993196207
    },
    {
      "type": "edit",
      "id": "c1b188cc5b9db318",
      "item": {
        "type": "paragraph",
        "id": "c1b188cc5b9db318",
        "text": "[[Alan Kay]] says that an operating system is a system that manages [[Time]] and [[Space]]. It means that an operating system in traditional sense manages CPU time and memory; we stretch the notion just a little bit to say that Croquet OS manages time with explicit time and space the bit-identical results in memory. [https://discord.com/channels/694586717247635488/966071402526543924/1039620480467992657 discord] \n"
      },
      "date": 1667993208504
    },
    {
      "type": "edit",
      "id": "c1b188cc5b9db318",
      "item": {
        "type": "paragraph",
        "id": "c1b188cc5b9db318",
        "text": "[[Alan Kay]] says that an operating system is a system that manages [[Time]] and [[Space]]. It means that an operating system in traditional sense manages CPU time and memory; we stretch the notion just a little bit to say that [[Croquet OS]] manages time with explicit time and space the bit-identical results in memory. [https://discord.com/channels/694586717247635488/966071402526543924/1039620480467992657 discord] \n"
      },
      "date": 1667993258682
    }
  ]
}