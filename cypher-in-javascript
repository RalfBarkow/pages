{
  "title": "Cypher in Javascript",
  "story": [
    {
      "type": "paragraph",
      "id": "12bc6e7cf414d6ee",
      "text": "We've encoded a property graph into javascript objects in a form that has a natural correspondence to neo4j's cypher query language."
    },
    {
      "type": "paragraph",
      "id": "0f9209a49b20a6c2",
      "text": "See [[Transform to Nodes and Rels]] for the encoding."
    },
    {
      "type": "paragraph",
      "id": "3a2197f78a25ef0c",
      "text": "See [[Match Nodes and Rels]] for our first queries."
    },
    {
      "type": "paragraph",
      "id": "e444ef840c3feda6",
      "text": "We will use the type vocabulary from [[Mock Graph Data]] for these examples. This rolls up into a schema with 4 node types and 6 rel types."
    },
    {
      "type": "graphviz",
      "text": "strict digraph { rankdir=TB\nnode [shape=box style=filled fillcolor=palegreen]\nEmployee -> Employee [label=Manager]\nProject -> Employee [label=Manager]\nService -> Project [label=Owner]\nService -> Employee [label=Team]\nService -> Service [label=Flow]\nService -> Statistic [label=Traffic]}",
      "id": "35018267345334665216",
      "dot": "strict digraph { rankdir=TB\nnode [shape=box style=filled fillcolor=palegreen]\nEmployee -> Employee [label=Manager]\nProject -> Employee [label=Manager]\nService -> Project [label=Owner]\nService -> Employee [label=Team]\nService -> Service [label=Flow]\nService -> Statistic [label=Traffic]}",
      "svg": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.44.0 (20200518.1210)\n -->\n<!-- Pages: 1 -->\n<svg width=\"202pt\" height=\"222pt\"\n viewBox=\"0.00 0.00 201.94 221.60\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 217.6)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-217.6 197.94,-217.6 197.94,4 -4,4\"/>\n<!-- Employee -->\n<g id=\"node1\" class=\"node\">\n<title>Employee</title>\n<polygon fill=\"palegreen\" stroke=\"black\" points=\"72.64,-36 0.12,-36 0.12,0 72.64,0 72.64,-36\"/>\n<text text-anchor=\"middle\" x=\"36.38\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\">Employee</text>\n</g>\n<!-- Employee&#45;&gt;Employee -->\n<g id=\"edge1\" class=\"edge\">\n<title>Employee&#45;&gt;Employee</title>\n<path fill=\"none\" stroke=\"black\" d=\"M72.72,-26.21C82.93,-25.85 90.76,-23.11 90.76,-18 90.76,-14.8 87.7,-12.54 82.92,-11.2\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"83.11,-7.69 72.72,-9.79 82.15,-14.63 83.11,-7.69\"/>\n<text text-anchor=\"middle\" x=\"115.64\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\">Manager</text>\n</g>\n<!-- Project -->\n<g id=\"node2\" class=\"node\">\n<title>Project</title>\n<polygon fill=\"palegreen\" stroke=\"black\" points=\"115.04,-124.8 59.73,-124.8 59.73,-88.8 115.04,-88.8 115.04,-124.8\"/>\n<text text-anchor=\"middle\" x=\"87.38\" y=\"-102.6\" font-family=\"Times,serif\" font-size=\"14.00\">Project</text>\n</g>\n<!-- Project&#45;&gt;Employee -->\n<g id=\"edge2\" class=\"edge\">\n<title>Project&#45;&gt;Employee</title>\n<path fill=\"none\" stroke=\"black\" d=\"M77.31,-88.65C69.97,-76.17 59.91,-59.04 51.6,-44.9\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"54.52,-42.96 46.44,-36.11 48.48,-46.51 54.52,-42.96\"/>\n<text text-anchor=\"middle\" x=\"92.26\" y=\"-58.2\" font-family=\"Times,serif\" font-size=\"14.00\">Manager</text>\n</g>\n<!-- Service -->\n<g id=\"node3\" class=\"node\">\n<title>Service</title>\n<polygon fill=\"palegreen\" stroke=\"black\" points=\"116.36,-213.6 58.4,-213.6 58.4,-177.6 116.36,-177.6 116.36,-213.6\"/>\n<text text-anchor=\"middle\" x=\"87.38\" y=\"-191.4\" font-family=\"Times,serif\" font-size=\"14.00\">Service</text>\n</g>\n<!-- Service&#45;&gt;Employee -->\n<g id=\"edge4\" class=\"edge\">\n<title>Service&#45;&gt;Employee</title>\n<path fill=\"none\" stroke=\"black\" d=\"M62.31,-177.36C46.46,-164.85 27.36,-146.38 18.51,-124.8 7.96,-99.09 15.77,-67.43 24.13,-45.47\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"27.41,-46.7 27.94,-36.12 20.92,-44.06 27.41,-46.7\"/>\n<text text-anchor=\"middle\" x=\"35.32\" y=\"-102.6\" font-family=\"Times,serif\" font-size=\"14.00\">Team</text>\n</g>\n<!-- Service&#45;&gt;Project -->\n<g id=\"edge3\" class=\"edge\">\n<title>Service&#45;&gt;Project</title>\n<path fill=\"none\" stroke=\"black\" d=\"M87.38,-177.45C87.38,-165.32 87.38,-148.82 87.38,-134.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"90.88,-134.91 87.38,-124.91 83.88,-134.91 90.88,-134.91\"/>\n<text text-anchor=\"middle\" x=\"106.43\" y=\"-147\" font-family=\"Times,serif\" font-size=\"14.00\">Owner</text>\n</g>\n<!-- Service&#45;&gt;Service -->\n<g id=\"edge5\" class=\"edge\">\n<title>Service&#45;&gt;Service</title>\n<path fill=\"none\" stroke=\"black\" d=\"M116.75,-203.85C126.54,-203.85 134.37,-201.1 134.37,-195.6 134.37,-192.25 131.46,-189.92 126.98,-188.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"127.1,-185.1 116.75,-187.35 126.25,-192.05 127.1,-185.1\"/>\n<text text-anchor=\"middle\" x=\"148.76\" y=\"-191.4\" font-family=\"Times,serif\" font-size=\"14.00\">Flow</text>\n</g>\n<!-- Statistic -->\n<g id=\"node4\" class=\"node\">\n<title>Statistic</title>\n<polygon fill=\"palegreen\" stroke=\"black\" points=\"193.99,-124.8 132.77,-124.8 132.77,-88.8 193.99,-88.8 193.99,-124.8\"/>\n<text text-anchor=\"middle\" x=\"163.38\" y=\"-102.6\" font-family=\"Times,serif\" font-size=\"14.00\">Statistic</text>\n</g>\n<!-- Service&#45;&gt;Statistic -->\n<g id=\"edge6\" class=\"edge\">\n<title>Service&#45;&gt;Statistic</title>\n<path fill=\"none\" stroke=\"black\" d=\"M110.28,-177.58C116.82,-172.19 123.69,-165.97 129.38,-159.6 136.4,-151.74 143.02,-142.3 148.53,-133.66\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"151.58,-135.38 153.83,-125.03 145.61,-131.72 151.58,-135.38\"/>\n<text text-anchor=\"middle\" x=\"160.81\" y=\"-147\" font-family=\"Times,serif\" font-size=\"14.00\">Traffic</text>\n</g>\n</g>\n</svg>\n"
    },
    {
      "type": "paragraph",
      "id": "a200cb2f8519dbe7",
      "text": "We find all Employees or some subset of these."
    },
    {
      "type": "code",
      "id": "baaccd6019e49b04",
      "text": "// All Employees\n// match (n:Employee)\nlet n = nodes\n  .filter(node => node.type == 'Employee')"
    },
    {
      "type": "code",
      "id": "6b66a50e89a415f6",
      "text": "// An Employee named A. J. Flores\n// match (n:Employee {name:'A. J. Flores'})\nlet n = nodes\n  .filter(node =>\n    node.type == 'Employee' &&\n    node.props.name == 'A. J. Flores')"
    },
    {
      "type": "code",
      "id": "0f0da9e3adb21180",
      "text": "// All Employees named Flores\n// match (n:Employee) where n.name contains 'Flores'\nlet n = nodes\n  .filter(node =>\n    node.type == 'Employee' &&\n    node.props.name.includes('Flores'))"
    },
    {
      "type": "paragraph",
      "id": "53a9b595b16f9a88",
      "text": "We further subset Employees by their relations."
    },
    {
      "type": "code",
      "id": "f1e5c44cf0b42fb2",
      "text": "// All Employees n that are managers.\n// match (n) <-[:Manager]- ()\nlet n = n\n  .filter(node => node.in\n    .find(rid => rels[rid].type == 'Manager')"
    },
    {
      "type": "code",
      "id": "28765fa5714aba37",
      "text": "// All Employees n that are managers of a Project.\n// match (n) <-[:Manager]- (:Project)\nlet n = n\n  .filter(node => node.in\n    .find(rid => \n      rels[rid].type == 'Manager' &&\n      nodes[rels[rid].from].type == 'Project')"
    },
    {
      "type": "code",
      "id": "959e2c8675bc29d2",
      "text": "// All Employees n that are something of a Project.\n// match (n) <-- (:Project)\nlet n = n\n  .filter(node => node.in\n    .find(rid => \n      nodes[rels[rid].from].type == 'Project')"
    },
    {
      "type": "code",
      "id": "e2ae6ab24ce7e2c6",
      "text": "// All Employees n that are something of a Project.\n// match (n) -- (:Project)\nlet n = n\n  .filter(node => [...node.in, ...node.out]\n    .find(rid => \n      nodes[rels[rid].from].type == 'Project' ||   \n      nodes[rels[rid].to].type == 'Project')"
    },
    {
      "type": "paragraph",
      "id": "bf98984704b27166",
      "text": "See [[Cypher Macros]], [[Parsing Cypher]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Cypher in Javascript",
        "story": []
      },
      "date": 1645115341528
    },
    {
      "item": {
        "type": "factory",
        "id": "12bc6e7cf414d6ee"
      },
      "id": "12bc6e7cf414d6ee",
      "type": "add",
      "date": 1645115347747
    },
    {
      "type": "edit",
      "id": "12bc6e7cf414d6ee",
      "item": {
        "type": "paragraph",
        "id": "12bc6e7cf414d6ee",
        "text": "We've encoded a property graph into javascript objects in a form that has a natural correspondence to neo4j's cypher query language."
      },
      "date": 1645115509061
    },
    {
      "type": "add",
      "id": "0f9209a49b20a6c2",
      "item": {
        "type": "paragraph",
        "id": "0f9209a49b20a6c2",
        "text": "See [[Transform to Nodes an Rels]] for the encoding."
      },
      "after": "12bc6e7cf414d6ee",
      "date": 1645115551450
    },
    {
      "type": "add",
      "id": "3a2197f78a25ef0c",
      "item": {
        "type": "paragraph",
        "id": "3a2197f78a25ef0c",
        "text": "See [[Match Nodes and Rels]] for our first queries."
      },
      "after": "0f9209a49b20a6c2",
      "date": 1645115596698
    },
    {
      "type": "add",
      "id": "e444ef840c3feda6",
      "item": {
        "type": "paragraph",
        "id": "e444ef840c3feda6",
        "text": "We will use the type vocabulary from [[Mock Graph Data]] for these examples. This rolls up into a schema with 4 node types and 6 rel types."
      },
      "after": "3a2197f78a25ef0c",
      "date": 1645115823239
    },
    {
      "id": "35018267345334665216",
      "type": "add",
      "item": {
        "type": "graphviz",
        "text": "strict digraph { rankdir=TB\nnode [shape=box style=filled fillcolor=palegreen]\nEmployee -> Employee [label=Manager]\nProject -> Employee [label=Manager]\nService -> Project [label=Owner]\nService -> Employee [label=Team]\nService -> Service [label=Flow]\nService -> Statistic [label=Traffic]}",
        "id": "35018267345334665216",
        "dot": "strict digraph { rankdir=TB\nnode [shape=box style=filled fillcolor=palegreen]\nEmployee -> Employee [label=Manager]\nProject -> Employee [label=Manager]\nService -> Project [label=Owner]\nService -> Employee [label=Team]\nService -> Service [label=Flow]\nService -> Statistic [label=Traffic]}",
        "svg": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.44.0 (20200518.1210)\n -->\n<!-- Pages: 1 -->\n<svg width=\"202pt\" height=\"222pt\"\n viewBox=\"0.00 0.00 201.94 221.60\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 217.6)\">\n<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-217.6 197.94,-217.6 197.94,4 -4,4\"/>\n<!-- Employee -->\n<g id=\"node1\" class=\"node\">\n<title>Employee</title>\n<polygon fill=\"palegreen\" stroke=\"black\" points=\"72.64,-36 0.12,-36 0.12,0 72.64,0 72.64,-36\"/>\n<text text-anchor=\"middle\" x=\"36.38\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\">Employee</text>\n</g>\n<!-- Employee&#45;&gt;Employee -->\n<g id=\"edge1\" class=\"edge\">\n<title>Employee&#45;&gt;Employee</title>\n<path fill=\"none\" stroke=\"black\" d=\"M72.72,-26.21C82.93,-25.85 90.76,-23.11 90.76,-18 90.76,-14.8 87.7,-12.54 82.92,-11.2\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"83.11,-7.69 72.72,-9.79 82.15,-14.63 83.11,-7.69\"/>\n<text text-anchor=\"middle\" x=\"115.64\" y=\"-13.8\" font-family=\"Times,serif\" font-size=\"14.00\">Manager</text>\n</g>\n<!-- Project -->\n<g id=\"node2\" class=\"node\">\n<title>Project</title>\n<polygon fill=\"palegreen\" stroke=\"black\" points=\"115.04,-124.8 59.73,-124.8 59.73,-88.8 115.04,-88.8 115.04,-124.8\"/>\n<text text-anchor=\"middle\" x=\"87.38\" y=\"-102.6\" font-family=\"Times,serif\" font-size=\"14.00\">Project</text>\n</g>\n<!-- Project&#45;&gt;Employee -->\n<g id=\"edge2\" class=\"edge\">\n<title>Project&#45;&gt;Employee</title>\n<path fill=\"none\" stroke=\"black\" d=\"M77.31,-88.65C69.97,-76.17 59.91,-59.04 51.6,-44.9\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"54.52,-42.96 46.44,-36.11 48.48,-46.51 54.52,-42.96\"/>\n<text text-anchor=\"middle\" x=\"92.26\" y=\"-58.2\" font-family=\"Times,serif\" font-size=\"14.00\">Manager</text>\n</g>\n<!-- Service -->\n<g id=\"node3\" class=\"node\">\n<title>Service</title>\n<polygon fill=\"palegreen\" stroke=\"black\" points=\"116.36,-213.6 58.4,-213.6 58.4,-177.6 116.36,-177.6 116.36,-213.6\"/>\n<text text-anchor=\"middle\" x=\"87.38\" y=\"-191.4\" font-family=\"Times,serif\" font-size=\"14.00\">Service</text>\n</g>\n<!-- Service&#45;&gt;Employee -->\n<g id=\"edge4\" class=\"edge\">\n<title>Service&#45;&gt;Employee</title>\n<path fill=\"none\" stroke=\"black\" d=\"M62.31,-177.36C46.46,-164.85 27.36,-146.38 18.51,-124.8 7.96,-99.09 15.77,-67.43 24.13,-45.47\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"27.41,-46.7 27.94,-36.12 20.92,-44.06 27.41,-46.7\"/>\n<text text-anchor=\"middle\" x=\"35.32\" y=\"-102.6\" font-family=\"Times,serif\" font-size=\"14.00\">Team</text>\n</g>\n<!-- Service&#45;&gt;Project -->\n<g id=\"edge3\" class=\"edge\">\n<title>Service&#45;&gt;Project</title>\n<path fill=\"none\" stroke=\"black\" d=\"M87.38,-177.45C87.38,-165.32 87.38,-148.82 87.38,-134.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"90.88,-134.91 87.38,-124.91 83.88,-134.91 90.88,-134.91\"/>\n<text text-anchor=\"middle\" x=\"106.43\" y=\"-147\" font-family=\"Times,serif\" font-size=\"14.00\">Owner</text>\n</g>\n<!-- Service&#45;&gt;Service -->\n<g id=\"edge5\" class=\"edge\">\n<title>Service&#45;&gt;Service</title>\n<path fill=\"none\" stroke=\"black\" d=\"M116.75,-203.85C126.54,-203.85 134.37,-201.1 134.37,-195.6 134.37,-192.25 131.46,-189.92 126.98,-188.61\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"127.1,-185.1 116.75,-187.35 126.25,-192.05 127.1,-185.1\"/>\n<text text-anchor=\"middle\" x=\"148.76\" y=\"-191.4\" font-family=\"Times,serif\" font-size=\"14.00\">Flow</text>\n</g>\n<!-- Statistic -->\n<g id=\"node4\" class=\"node\">\n<title>Statistic</title>\n<polygon fill=\"palegreen\" stroke=\"black\" points=\"193.99,-124.8 132.77,-124.8 132.77,-88.8 193.99,-88.8 193.99,-124.8\"/>\n<text text-anchor=\"middle\" x=\"163.38\" y=\"-102.6\" font-family=\"Times,serif\" font-size=\"14.00\">Statistic</text>\n</g>\n<!-- Service&#45;&gt;Statistic -->\n<g id=\"edge6\" class=\"edge\">\n<title>Service&#45;&gt;Statistic</title>\n<path fill=\"none\" stroke=\"black\" d=\"M110.28,-177.58C116.82,-172.19 123.69,-165.97 129.38,-159.6 136.4,-151.74 143.02,-142.3 148.53,-133.66\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"151.58,-135.38 153.83,-125.03 145.61,-131.72 151.58,-135.38\"/>\n<text text-anchor=\"middle\" x=\"160.81\" y=\"-147\" font-family=\"Times,serif\" font-size=\"14.00\">Traffic</text>\n</g>\n</g>\n</svg>\n"
      },
      "after": "e444ef840c3feda6",
      "date": 1645115860974
    },
    {
      "item": {
        "type": "factory",
        "id": "a200cb2f8519dbe7"
      },
      "id": "a200cb2f8519dbe7",
      "type": "add",
      "after": "35018267345334665216",
      "date": 1645117990603
    },
    {
      "type": "edit",
      "id": "a200cb2f8519dbe7",
      "item": {
        "type": "paragraph",
        "id": "a200cb2f8519dbe7",
        "text": "All Employees"
      },
      "date": 1645118015970
    },
    {
      "item": {
        "type": "factory",
        "id": "baaccd6019e49b04"
      },
      "id": "baaccd6019e49b04",
      "type": "add",
      "after": "a200cb2f8519dbe7",
      "date": 1645118037541
    },
    {
      "type": "edit",
      "id": "baaccd6019e49b04",
      "item": {
        "type": "code",
        "id": "baaccd6019e49b04",
        "text": "// All Employees\n// match (n:Employee)\n"
      },
      "date": 1645118126565
    },
    {
      "type": "edit",
      "id": "baaccd6019e49b04",
      "item": {
        "type": "code",
        "id": "baaccd6019e49b04",
        "text": "// All Employees\n// match (n:Employee)\nlet n = nodes.filter(node => node.type == 'Employee')"
      },
      "date": 1645118285080
    },
    {
      "type": "edit",
      "id": "baaccd6019e49b04",
      "item": {
        "type": "code",
        "id": "baaccd6019e49b04",
        "text": "// All Employees\n// match (n:Employee)\nlet n = nodes\n  .filter(node => node.type == 'Employee')"
      },
      "date": 1645118297520
    },
    {
      "item": {
        "type": "factory",
        "id": "0f0da9e3adb21180"
      },
      "id": "0f0da9e3adb21180",
      "type": "add",
      "after": "baaccd6019e49b04",
      "date": 1645118533462
    },
    {
      "type": "edit",
      "id": "0f0da9e3adb21180",
      "item": {
        "type": "code",
        "id": "0f0da9e3adb21180",
        "text": "// All Employees named Flores\n// match (n:Employee) where n.name contains 'Flores'\nlet n = nodes\n  .filter(node => node.type == 'Employee')\n  .filter(node => node.props.name.includes('Flores'))"
      },
      "date": 1645118735427
    },
    {
      "type": "edit",
      "id": "0f0da9e3adb21180",
      "item": {
        "type": "code",
        "id": "0f0da9e3adb21180",
        "text": "// All Employees named Flores\n// match (n:Employee) where n.name contains 'Flores'\nlet n = nodes\n  .filter(node =>\n    node.type == 'Employee' &&\n    node.props.name.includes('Flores'))"
      },
      "date": 1645118794327
    },
    {
      "item": {
        "type": "factory",
        "id": "6b66a50e89a415f6"
      },
      "id": "6b66a50e89a415f6",
      "type": "add",
      "after": "0f0da9e3adb21180",
      "date": 1645118963505
    },
    {
      "type": "edit",
      "id": "6b66a50e89a415f6",
      "item": {
        "type": "paragraph",
        "id": "6b66a50e89a415f6",
        "text": "// An Employee named A. J. Flores"
      },
      "date": 1645119065693
    },
    {
      "type": "edit",
      "id": "6b66a50e89a415f6",
      "item": {
        "type": "code",
        "id": "6b66a50e89a415f6",
        "text": "// An Employee named A. J. Flores\n// match (n:Employee {name:'A. J. Flores'})\n"
      },
      "date": 1645119121648
    },
    {
      "type": "edit",
      "id": "6b66a50e89a415f6",
      "item": {
        "type": "code",
        "id": "6b66a50e89a415f6",
        "text": "// An Employee named A. J. Flores\n// match (n:Employee {name:'A. J. Flores'})\nlet n = nodes\n  .filter(node =>\n    node.type == 'Employee' &&\n    node.props.name == 'Flores')"
      },
      "date": 1645119148273
    },
    {
      "id": "6b66a50e89a415f6",
      "type": "move",
      "order": [
        "12bc6e7cf414d6ee",
        "0f9209a49b20a6c2",
        "3a2197f78a25ef0c",
        "e444ef840c3feda6",
        "35018267345334665216",
        "a200cb2f8519dbe7",
        "baaccd6019e49b04",
        "6b66a50e89a415f6",
        "0f0da9e3adb21180"
      ],
      "date": 1645119150873
    },
    {
      "type": "edit",
      "id": "a200cb2f8519dbe7",
      "item": {
        "type": "paragraph",
        "id": "a200cb2f8519dbe7",
        "text": "We find all Employees or some subset of these."
      },
      "date": 1645119456692
    },
    {
      "item": {
        "type": "factory",
        "id": "53a9b595b16f9a88"
      },
      "id": "53a9b595b16f9a88",
      "type": "add",
      "after": "0f0da9e3adb21180",
      "date": 1645119632260
    },
    {
      "type": "edit",
      "id": "53a9b595b16f9a88",
      "item": {
        "type": "paragraph",
        "id": "53a9b595b16f9a88",
        "text": "We further subset Employees by their relations."
      },
      "date": 1645119674209
    },
    {
      "item": {
        "type": "factory",
        "id": "f1e5c44cf0b42fb2"
      },
      "id": "f1e5c44cf0b42fb2",
      "type": "add",
      "after": "53a9b595b16f9a88",
      "date": 1645119679208
    },
    {
      "type": "edit",
      "id": "f1e5c44cf0b42fb2",
      "item": {
        "type": "code",
        "id": "f1e5c44cf0b42fb2",
        "text": "// All Employees n that are managers.\n// match (n) <-[:Manager]- (m)\nlet n = n\n  .filter(node = node.in\n    .find(rid => rel[rid].type == 'Manager')"
      },
      "date": 1645120187972
    },
    {
      "item": {
        "type": "factory",
        "id": "28765fa5714aba37"
      },
      "id": "28765fa5714aba37",
      "type": "add",
      "after": "f1e5c44cf0b42fb2",
      "date": 1645120198512
    },
    {
      "type": "edit",
      "id": "28765fa5714aba37",
      "item": {
        "type": "code",
        "id": "28765fa5714aba37",
        "text": "// All Employees n that are managers of a Project.\n// match (n) <-[:Manager]- (m:Project)\nlet n = n\n  .filter(node = node.in\n    .find(rid => \n      rels[rid].type == 'Manager' &&\n      nodes[rels[rid].from].type == 'Project')"
      },
      "date": 1645120431243
    },
    {
      "type": "edit",
      "id": "f1e5c44cf0b42fb2",
      "item": {
        "type": "code",
        "id": "f1e5c44cf0b42fb2",
        "text": "// All Employees n that are managers.\n// match (n) <-[:Manager]- (m)\nlet n = n\n  .filter(node = node.in\n    .find(rid => rels[rid].type == 'Manager')"
      },
      "date": 1645120437478
    },
    {
      "item": {
        "type": "factory",
        "id": "959e2c8675bc29d2"
      },
      "id": "959e2c8675bc29d2",
      "type": "add",
      "after": "28765fa5714aba37",
      "date": 1645120457219
    },
    {
      "type": "edit",
      "id": "959e2c8675bc29d2",
      "item": {
        "type": "paragraph",
        "id": "959e2c8675bc29d2",
        "text": "// All Employees n that are managers of a Project.\n// match (n) <-- (m:Project)\nlet n = n\n  .filter(node = node.in\n    .find(rid => \n      nodes[rels[rid].from].type == 'Project')"
      },
      "date": 1645120517741
    },
    {
      "type": "edit",
      "id": "959e2c8675bc29d2",
      "item": {
        "type": "code",
        "id": "959e2c8675bc29d2",
        "text": "// All Employees n that must be managers of a Project.\n// match (n) <-- (m:Project)\nlet n = n\n  .filter(node = node.in\n    .find(rid => \n      nodes[rels[rid].from].type == 'Project')"
      },
      "date": 1645120568284
    },
    {
      "type": "edit",
      "id": "959e2c8675bc29d2",
      "item": {
        "type": "code",
        "id": "959e2c8675bc29d2",
        "text": "// All Employees n that are something of a Project.\n// match (n) <-- (m:Project)\nlet n = n\n  .filter(node = node.in\n    .find(rid => \n      nodes[rels[rid].from].type == 'Project')"
      },
      "date": 1645120587425
    },
    {
      "item": {
        "type": "factory",
        "id": "e2ae6ab24ce7e2c6"
      },
      "id": "e2ae6ab24ce7e2c6",
      "type": "add",
      "after": "959e2c8675bc29d2",
      "date": 1645125105776
    },
    {
      "type": "edit",
      "id": "e2ae6ab24ce7e2c6",
      "item": {
        "type": "code",
        "id": "e2ae6ab24ce7e2c6",
        "text": "// All Employees n that are something of a Project.\n// match (n) -- (m:Project)\nlet n = n\n  .filter(node => [...node.in, ...node.out]\n    .find(rid => \n      nodes[rels[rid].from].type == 'Project')      nodes[rels[rid].from].type == 'Project')"
      },
      "date": 1645125211188
    },
    {
      "type": "edit",
      "id": "e2ae6ab24ce7e2c6",
      "item": {
        "type": "code",
        "id": "e2ae6ab24ce7e2c6",
        "text": "// All Employees n that are something of a Project.\n// match (n) -- (m:Project)\nlet n = n\n  .filter(node => [...node.in, ...node.out]\n    .find(rid => \n      nodes[rels[rid].from].type == 'Project' ||   \n      nodes[rels[rid].to].type == 'Project')"
      },
      "date": 1645125282583
    },
    {
      "type": "edit",
      "id": "959e2c8675bc29d2",
      "item": {
        "type": "code",
        "id": "959e2c8675bc29d2",
        "text": "// All Employees n that are something of a Project.\n// match (n) <-- (m:Project)\nlet n = n\n  .filter(node => node.in\n    .find(rid => \n      nodes[rels[rid].from].type == 'Project')"
      },
      "date": 1645125295926
    },
    {
      "type": "edit",
      "id": "28765fa5714aba37",
      "item": {
        "type": "code",
        "id": "28765fa5714aba37",
        "text": "// All Employees n that are managers of a Project.\n// match (n) <-[:Manager]- (m:Project)\nlet n = n\n  .filter(node => node.in\n    .find(rid => \n      rels[rid].type == 'Manager' &&\n      nodes[rels[rid].from].type == 'Project')"
      },
      "date": 1645125307680
    },
    {
      "type": "edit",
      "id": "f1e5c44cf0b42fb2",
      "item": {
        "type": "code",
        "id": "f1e5c44cf0b42fb2",
        "text": "// All Employees n that are managers.\n// match (n) <-[:Manager]- (m)\nlet n = n\n  .filter(node => node.in\n    .find(rid => rels[rid].type == 'Manager')"
      },
      "date": 1645125312665
    },
    {
      "type": "edit",
      "id": "6b66a50e89a415f6",
      "item": {
        "type": "code",
        "id": "6b66a50e89a415f6",
        "text": "// An Employee named A. J. Flores\n// match (n:Employee {name:'A. J. Flores'})\nlet n = nodes\n  .filter(node =>\n    node.type == 'Employee' &&\n    node.props.name == 'A. J. Flores')"
      },
      "date": 1645125342776
    },
    {
      "type": "edit",
      "id": "0f9209a49b20a6c2",
      "item": {
        "type": "paragraph",
        "id": "0f9209a49b20a6c2",
        "text": "See [[Transform to Nodes and Rels]] for the encoding."
      },
      "date": 1645125408557
    },
    {
      "type": "edit",
      "id": "f1e5c44cf0b42fb2",
      "item": {
        "type": "code",
        "id": "f1e5c44cf0b42fb2",
        "text": "// All Employees n that are managers.\n// match (n) <-[:Manager]- ()\nlet n = n\n  .filter(node => node.in\n    .find(rid => rels[rid].type == 'Manager')"
      },
      "date": 1645134662168
    },
    {
      "type": "edit",
      "id": "28765fa5714aba37",
      "item": {
        "type": "code",
        "id": "28765fa5714aba37",
        "text": "// All Employees n that are managers of a Project.\n// match (n) <-[:Manager]- (:Project)\nlet n = n\n  .filter(node => node.in\n    .find(rid => \n      rels[rid].type == 'Manager' &&\n      nodes[rels[rid].from].type == 'Project')"
      },
      "date": 1645134668422
    },
    {
      "type": "edit",
      "id": "959e2c8675bc29d2",
      "item": {
        "type": "code",
        "id": "959e2c8675bc29d2",
        "text": "// All Employees n that are something of a Project.\n// match (n) <-- (:Project)\nlet n = n\n  .filter(node => node.in\n    .find(rid => \n      nodes[rels[rid].from].type == 'Project')"
      },
      "date": 1645134677246
    },
    {
      "type": "edit",
      "id": "e2ae6ab24ce7e2c6",
      "item": {
        "type": "code",
        "id": "e2ae6ab24ce7e2c6",
        "text": "// All Employees n that are something of a Project.\n// match (n) -- (:Project)\nlet n = n\n  .filter(node => [...node.in, ...node.out]\n    .find(rid => \n      nodes[rels[rid].from].type == 'Project' ||   \n      nodes[rels[rid].to].type == 'Project')"
      },
      "date": 1645134683129
    },
    {
      "item": {
        "type": "factory",
        "id": "bf98984704b27166"
      },
      "id": "bf98984704b27166",
      "type": "add",
      "after": "e2ae6ab24ce7e2c6",
      "date": 1645145352319
    },
    {
      "type": "edit",
      "id": "bf98984704b27166",
      "item": {
        "type": "paragraph",
        "id": "bf98984704b27166",
        "text": "See [[Parsing Cypher]]"
      },
      "date": 1645145392855
    },
    {
      "type": "edit",
      "id": "bf98984704b27166",
      "item": {
        "type": "paragraph",
        "id": "bf98984704b27166",
        "text": "See [[Cypher Macros]], [[Parsing Cypher]]"
      },
      "date": 1645209182228
    },
    {
      "type": "fork",
      "site": "ward.dojo.fed.wiki",
      "date": 1649692500860
    }
  ]
}