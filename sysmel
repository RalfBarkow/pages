{
  "title": "Sysmel",
  "story": [
    {
      "type": "markdown",
      "id": "41b190fc49e8385b",
      "text": "[https://github.com/ronsaldo/sysmel#sysmel GitHub] – A SYStem MEtaprogramming Language\n"
    },
    {
      "type": "markdown",
      "id": "bd9aea1126999ab6",
      "text": "Sysmel is a metaprogramming language whose source code is composed of scripts that are directly evaluated to construct another program. The direct evaluation of a sysmel source leave traces in a module (a metamodel instance) which are further analyzed to perform the following task:\n\n- Type checking\n- Macro expansion\n- Program entities dependency analysis\n- SSA intermediate code generation and optimization\n- LLVM backend for native code generation\n- Spir-V backend for Vulkan shader generation"
    },
    {
      "type": "markdown",
      "id": "3b5e3e92882c754b",
      "text": "# Syntax overview"
    },
    {
      "type": "markdown",
      "id": "9d76201a5aba2a14",
      "text": "The sysmel language syntax is a hybrid between Smalltalk and C++. Some elements of the syntax are picked with the object of facilitating either metaprogramming, or numerical computations (e.g. the same operator precedence levels as in C). Many syntactic elements of the Sysmel syntax are actually syntactic sugar for message sends. Message sends are analyzed in two phases:\n\n1. Unexpanded messages are looked up through the macro method dictionary and if a macro with a matching selector is found, the AST nodes for the unexpanded message send is expanded and analyzed by the matching macro. If macro with a matching selector is not found, then the unexpanded message send node is converted into an expanded message send node.\n\n1. Expanded message sends have the same style of lookup mechanism as a standard Smalltalk message send. Since Sysmel is a statically typed language (but one of the types, ProtoObject is treated as a generic dynamic object type) messages are typed, and like in C++ they can be overloaded.\n\n"
    },
    {
      "type": "markdown",
      "id": "6e54b715d33b531e",
      "text": "Unlike in Smalltak, in Sysmel there can be message sends without a receiver. These messages are bound to the namespace and they are looked through the lexical scoping chain. Messages without receiver are typically used for implementing macros that are expanded into AST nodes without syntactic correlation (i.e. they do not appear in the Sysmel grammar)."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Sysmel",
        "story": []
      },
      "date": 1628079638999
    },
    {
      "item": {
        "type": "factory",
        "id": "41b190fc49e8385b"
      },
      "id": "41b190fc49e8385b",
      "type": "add",
      "date": 1628079684286
    },
    {
      "type": "edit",
      "id": "41b190fc49e8385b",
      "item": {
        "type": "markdown",
        "id": "41b190fc49e8385b",
        "text": "https://github.com/ronsaldo/sysmel#sysmel"
      },
      "date": 1628079688315
    },
    {
      "type": "edit",
      "id": "41b190fc49e8385b",
      "item": {
        "type": "markdown",
        "id": "41b190fc49e8385b",
        "text": "[https://github.com/ronsaldo/sysmel#sysmel GitHub] – "
      },
      "date": 1628079704406
    },
    {
      "type": "edit",
      "id": "41b190fc49e8385b",
      "item": {
        "type": "markdown",
        "id": "41b190fc49e8385b",
        "text": "[https://github.com/ronsaldo/sysmel#sysmel GitHub] – A SYStem MEtaprogramming Language"
      },
      "date": 1628079715593
    },
    {
      "type": "edit",
      "id": "41b190fc49e8385b",
      "item": {
        "type": "markdown",
        "id": "41b190fc49e8385b",
        "text": "[https://github.com/ronsaldo/sysmel#sysmel GitHub] – A SYStem MEtaprogramming Language\n"
      },
      "date": 1628079721953
    },
    {
      "type": "add",
      "id": "bd9aea1126999ab6",
      "item": {
        "type": "markdown",
        "id": "bd9aea1126999ab6",
        "text": "Sysmel is a metaprogramming language whose source code is composed of scripts that are directly evaluated to construct another program. The direct evaluation of a sysmel source leave traces in a module (a metamodel instance) which are further analyzed to perform the following task:\n"
      },
      "after": "41b190fc49e8385b",
      "date": 1628079723284
    },
    {
      "type": "edit",
      "id": "bd9aea1126999ab6",
      "item": {
        "type": "markdown",
        "id": "bd9aea1126999ab6",
        "text": "Sysmel is a metaprogramming language whose source code is composed of scripts that are directly evaluated to construct another program. The direct evaluation of a sysmel source leave traces in a module (a metamodel instance) which are further analyzed to perform the following task:\n\nType checking.\nMacro expansion.\nProgram entities dependency analysis.\nSSA intermediate code generation and optimization.\nLLVM backend for native code generation.\nSpir-V backend for Vulkan shader generation."
      },
      "date": 1628079733068
    },
    {
      "type": "edit",
      "id": "bd9aea1126999ab6",
      "item": {
        "type": "markdown",
        "id": "bd9aea1126999ab6",
        "text": "Sysmel is a metaprogramming language whose source code is composed of scripts that are directly evaluated to construct another program. The direct evaluation of a sysmel source leave traces in a module (a metamodel instance) which are further analyzed to perform the following task:\n\n- Type checking\n- Macro expansion\n- Program entities dependency analysis\n- SSA intermediate code generation and optimization\n- LLVM backend for native code generation\n- Spir-V backend for Vulkan shader generation"
      },
      "date": 1628079770774
    },
    {
      "item": {
        "type": "factory",
        "id": "3b5e3e92882c754b"
      },
      "id": "3b5e3e92882c754b",
      "type": "add",
      "after": "bd9aea1126999ab6",
      "date": 1628081252918
    },
    {
      "type": "edit",
      "id": "3b5e3e92882c754b",
      "item": {
        "type": "markdown",
        "id": "3b5e3e92882c754b",
        "text": "#Syntax overview"
      },
      "date": 1628081258259
    },
    {
      "type": "edit",
      "id": "3b5e3e92882c754b",
      "item": {
        "type": "markdown",
        "id": "3b5e3e92882c754b",
        "text": "# Syntax overview"
      },
      "date": 1628081261350
    },
    {
      "item": {
        "type": "factory",
        "id": "9d76201a5aba2a14"
      },
      "id": "9d76201a5aba2a14",
      "type": "add",
      "after": "3b5e3e92882c754b",
      "date": 1628081277012
    },
    {
      "type": "edit",
      "id": "9d76201a5aba2a14",
      "item": {
        "type": "markdown",
        "id": "9d76201a5aba2a14",
        "text": "The sysmel language syntax is a hybrid between Smalltalk and C++. Some elements of the syntax are picked with the object of facilitating either metaprogramming, or numerical computations (e.g. the same operator precedence levels as in C). Many syntactic elements of the Sysmel syntax are actually syntactic sugar for message sends. Message sends are analyzed in two phases:\n\nUnexpanded messages are looked up through the macro method dictionary and if a macro with a matching selector is found, the AST nodes for the unexpanded message send is expanded and analyzed by the matching macro. If macro with a matching selector is not found, then the unexpanded message send node is converted into an expanded message send node.\nExpanded message sends have the same style of lookup mechanism as a standard Smalltalk message send. Since Sysmel is a statically typed language (but one of the types, ProtoObject is treated as a generic dynamic object type) messages are typed, and like in C++ they can be overloaded.\nUnlike in Smalltak, in Sysmel there can be message sends without a receiver. These messages are bound to the namespace and they are looked through the lexical scoping chain. Messages without receiver are typically used for implementing macros that are expanded into AST nodes without syntactic correlation (i.e. they do not appear in the Sysmel grammar)."
      },
      "date": 1628081279395
    },
    {
      "type": "edit",
      "id": "9d76201a5aba2a14",
      "item": {
        "type": "markdown",
        "id": "9d76201a5aba2a14",
        "text": "The sysmel language syntax is a hybrid between Smalltalk and C++. Some elements of the syntax are picked with the object of facilitating either metaprogramming, or numerical computations (e.g. the same operator precedence levels as in C). Many syntactic elements of the Sysmel syntax are actually syntactic sugar for message sends. Message sends are analyzed in two phases:\n\n1. Unexpanded messages are looked up through the macro method dictionary and if a macro with a matching selector is found, the AST nodes for the unexpanded message send is expanded and analyzed by the matching macro. If macro with a matching selector is not found, then the unexpanded message send node is converted into an expanded message send node.\nExpanded message sends have the same style of lookup mechanism as a standard Smalltalk message send. Since Sysmel is a statically typed language (but one of the types, ProtoObject is treated as a generic dynamic object type) messages are typed, and like in C++ they can be overloaded.\nUnlike in Smalltak, in Sysmel there can be message sends without a receiver. These messages are bound to the namespace and they are looked through the lexical scoping chain. Messages without receiver are typically used for implementing macros that are expanded into AST nodes without syntactic correlation (i.e. they do not appear in the Sysmel grammar)."
      },
      "date": 1628081320877
    },
    {
      "type": "edit",
      "id": "9d76201a5aba2a14",
      "item": {
        "type": "markdown",
        "id": "9d76201a5aba2a14",
        "text": "The sysmel language syntax is a hybrid between Smalltalk and C++. Some elements of the syntax are picked with the object of facilitating either metaprogramming, or numerical computations (e.g. the same operator precedence levels as in C). Many syntactic elements of the Sysmel syntax are actually syntactic sugar for message sends. Message sends are analyzed in two phases:\n\n1. Unexpanded messages are looked up through the macro method dictionary and if a macro with a matching selector is found, the AST nodes for the unexpanded message send is expanded and analyzed by the matching macro. If macro with a matching selector is not found, then the unexpanded message send node is converted into an expanded message send node.\n\n1. Expanded message sends have the same style of lookup mechanism as a standard Smalltalk message send. Since Sysmel is a statically typed language (but one of the types, ProtoObject is treated as a generic dynamic object type) messages are typed, and like in C++ they can be overloaded.\nUnlike in Smalltak, in Sysmel there can be message sends without a receiver. These messages are bound to the namespace and they are looked through the lexical scoping chain. Messages without receiver are typically used for implementing macros that are expanded into AST nodes without syntactic correlation (i.e. they do not appear in the Sysmel grammar)."
      },
      "date": 1628081334525
    },
    {
      "type": "edit",
      "id": "9d76201a5aba2a14",
      "item": {
        "type": "markdown",
        "id": "9d76201a5aba2a14",
        "text": "The sysmel language syntax is a hybrid between Smalltalk and C++. Some elements of the syntax are picked with the object of facilitating either metaprogramming, or numerical computations (e.g. the same operator precedence levels as in C). Many syntactic elements of the Sysmel syntax are actually syntactic sugar for message sends. Message sends are analyzed in two phases:\n\n1. Unexpanded messages are looked up through the macro method dictionary and if a macro with a matching selector is found, the AST nodes for the unexpanded message send is expanded and analyzed by the matching macro. If macro with a matching selector is not found, then the unexpanded message send node is converted into an expanded message send node.\n\n1. Expanded message sends have the same style of lookup mechanism as a standard Smalltalk message send. Since Sysmel is a statically typed language (but one of the types, ProtoObject is treated as a generic dynamic object type) messages are typed, and like in C++ they can be overloaded.\n\n"
      },
      "date": 1628124288400
    },
    {
      "type": "add",
      "id": "6e54b715d33b531e",
      "item": {
        "type": "markdown",
        "id": "6e54b715d33b531e",
        "text": "Unlike in Smalltak, in Sysmel there can be message sends without a receiver. These messages are bound to the namespace and they are looked through the lexical scoping chain. Messages without receiver are typically used for implementing macros that are expanded into AST nodes without syntactic correlation (i.e. they do not appear in the Sysmel grammar)."
      },
      "after": "9d76201a5aba2a14",
      "date": 1628124289984
    }
  ]
}