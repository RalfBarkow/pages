{
  "title": "Simple Doodling Script",
  "story": [
    {
      "type": "paragraph",
      "id": "484e092159df2d01",
      "text": "Explain what this does. [https://hacks.mozilla.org/2019/04/pyodide-bringing-the-scientific-python-stack-to-the-browser/ post]"
    },
    {
      "type": "code",
      "id": "5eb6b67568179aa3",
      "text": "// Code that does it.\n\nfrom js import document, iodide\n\ncanvas = iodide.output.element('canvas')\ncanvas.setAttribute('width', 450)\ncanvas.setAttribute('height', 300)\ncontext = canvas.getContext(\"2d\")\ncontext.strokeStyle = \"#df4b26\"\ncontext.lineJoin = \"round\"\ncontext.lineWidth = 5\n\npen = False\nlastPoint = (0, 0)\n\ndef onmousemove(e):\n    global lastPoint\n\n    if pen:\n        newPoint = (e.offsetX, e.offsetY)\n        context.beginPath()\n        context.moveTo(lastPoint[0], lastPoint[1])\n        context.lineTo(newPoint[0], newPoint[1])\n        context.closePath()\n        context.stroke()\n        lastPoint = newPoint\n\ndef onmousedown(e):\n    global pen, lastPoint\n    pen = True\n    lastPoint = (e.offsetX, e.offsetY)\n\ndef onmouseup(e):\n    global pen\n    pen = False\n\ncanvas.addEventListener('mousemove', onmousemove)\ncanvas.addEventListener('mousedown', onmousedown)\ncanvas.addEventListener('mouseup', onmouseup)\n"
    },
    {
      "type": "paragraph",
      "id": "caa626ac93aa7d4c",
      "text": "In the frame below we can view the results."
    },
    {
      "type": "frame",
      "id": "6cf52409eec3988c",
      "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
    },
    {
      "type": "assets",
      "id": "8be6c261d730d45d",
      "text": "pages/simple-doodling-script"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Simple Doodling Script",
        "story": [
          {
            "type": "paragraph",
            "id": "484e092159df2d01",
            "text": "Explain what this does."
          },
          {
            "type": "code",
            "id": "5eb6b67568179aa3",
            "text": "// Code that does it.\n\nexport async function emit(el) {\n el.innerHTML = 2 + 3\n}\n\n"
          },
          {
            "type": "paragraph",
            "id": "caa626ac93aa7d4c",
            "text": "In the frame below we can view the results."
          },
          {
            "type": "frame",
            "id": "6cf52409eec3988c",
            "text": "//wiki.dbbs.co/assets/pages/js-snippet-template/esm.html\nHEIGHT 400"
          },
          {
            "type": "paragraph",
            "id": "8155a586f5842b0f",
            "text": "See also [[Static Import Snippet]]"
          }
        ]
      },
      "date": 1652459664455
    },
    {
      "type": "edit",
      "id": "5eb6b67568179aa3",
      "item": {
        "type": "code",
        "id": "5eb6b67568179aa3",
        "text": "// Code that does it.\n\nfrom js import document, iodide\n\ncanvas = iodide.output.element('canvas')\ncanvas.setAttribute('width', 450)\ncanvas.setAttribute('height', 300)\ncontext = canvas.getContext(\"2d\")\ncontext.strokeStyle = \"#df4b26\"\ncontext.lineJoin = \"round\"\ncontext.lineWidth = 5\n\npen = False\nlastPoint = (0, 0)\n\ndef onmousemove(e):\n    global lastPoint\n\n    if pen:\n        newPoint = (e.offsetX, e.offsetY)\n        context.beginPath()\n        context.moveTo(lastPoint[0], lastPoint[1])\n        context.lineTo(newPoint[0], newPoint[1])\n        context.closePath()\n        context.stroke()\n        lastPoint = newPoint\n\ndef onmousedown(e):\n    global pen, lastPoint\n    pen = True\n    lastPoint = (e.offsetX, e.offsetY)\n\ndef onmouseup(e):\n    global pen\n    pen = False\n\ncanvas.addEventListener('mousemove', onmousemove)\ncanvas.addEventListener('mousedown', onmousedown)\ncanvas.addEventListener('mouseup', onmouseup)\n"
      },
      "date": 1652459683863
    },
    {
      "type": "edit",
      "id": "484e092159df2d01",
      "item": {
        "type": "paragraph",
        "id": "484e092159df2d01",
        "text": "Explain what this does. [https://hacks.mozilla.org/2019/04/pyodide-bringing-the-scientific-python-stack-to-the-browser/ post]"
      },
      "date": 1652459715659
    },
    {
      "type": "remove",
      "id": "8155a586f5842b0f",
      "date": 1652459840343
    },
    {
      "item": {
        "type": "factory",
        "id": "8be6c261d730d45d"
      },
      "id": "8be6c261d730d45d",
      "type": "add",
      "after": "6cf52409eec3988c",
      "date": 1652459841902
    },
    {
      "type": "edit",
      "id": "8be6c261d730d45d",
      "item": {
        "type": "assets",
        "id": "8be6c261d730d45d",
        "text": "pages/simple-doodling-script"
      },
      "date": 1652459846457
    }
  ]
}