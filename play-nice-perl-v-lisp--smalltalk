{
  "title": "Play Nice. Perl v LISP & Smalltalk",
  "story": [
    {
      "id": "40fc000",
      "type": "paragraph",
      "text": "Playing Nice - what Perl's got that LISP and Smalltalk lack  [http://dobbse.net/thinair/2006/06/play-nice.html blog]"
    },
    {
      "id": "17e34000",
      "type": "paragraph",
      "text": "Two features of Perl have made it more successful than LISP or Smalltalk."
    },
    {
      "type": "paragraph",
      "id": "3d3f5535b49a4b5a",
      "text": "There's always been only one Perl; differing versions, sure, but you have never had to spend any time choosing whose Perl interpreter to use."
    },
    {
      "type": "paragraph",
      "id": "15975fba8f362deb",
      "text": "More importantly, Perl began with the assumption that it would not be the only tool in your toolbox: it set out from the beginning to play well with others. By contrast, there have always been many flavors of LISP and Smalltalk any of which have tried to be pretty much everything you ever need."
    },
    {
      "type": "paragraph",
      "id": "dce8158a5b99528f",
      "text": "Smalltalk's weakness is at the boundaries: when you want to try to do some typical unix system maintenance, or interfacing with underlying C libraries, or something similar. As long as you're staying within the Smalltalk environment, it completely rocks. But it's definitely painful if you try to reach outside. And it's especially painful if you want your code to work with different Smalltalks."
    },
    {
      "type": "paragraph",
      "id": "61c4b33a2b992a91",
      "text": "What Perl got right was making it completely painless to integrate with its environment."
    },
    {
      "type": "paragraph",
      "id": "86ea415d1cb5c655",
      "text": "In some sense LISP wants to be on a LISP Machine and Smalltalk wants to be in its virtual machine, whereas Perl wants to go out and play with the other kids. The former languages are introverted and Perl is extroverted."
    },
    {
      "type": "pagefold",
      "id": "56f5a4b23d5e4143",
      "text": "."
    },
    {
      "type": "paragraph",
      "id": "e17fba78c16a0d7c",
      "text": "Lisp and Smalltalk wanted to be your language and your environment. Perl came from an environment that was already successful and didn't need to be hidden or replaced."
    },
    {
      "type": "paragraph",
      "id": "bf0ae8e294d99ccb",
      "text": "Unix hosted simple tools that did one thing well and could feed one another in a pipeline. Sed, grep and wc come to mind. Awk burst into this space showing that it could interpret small programs that combined all of these tools and ran faster too."
    },
    {
      "type": "paragraph",
      "id": "8bbf735279468cd5",
      "text": "We all thought, if awk just had functions, it could do everything. Then perl showed up with functions and, yes, it could do everything."
    },
    {
      "type": "paragraph",
      "id": "ff9fbee8cf25553e",
      "text": "Aside: I wrote an expense calculator in awk and later ported it to federated wiki to guild plugin development. See [[About Calculator Plugin]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Play Nice. Perl v LISP & Smalltalk",
        "story": []
      },
      "date": 1635441803129
    },
    {
      "id": "40fc000",
      "type": "add",
      "item": {
        "id": "40fc000",
        "type": "paragraph",
        "text": "Playing Nice - what Perl's got that LISP and Smalltalk lack  [http://dobbse.net/thinair/2006/06/play-nice.html blog]"
      },
      "date": 1635441972100,
      "error": {
        "type": "error",
        "msg": "",
        "response": "502 Bad Gateway\n"
      }
    },
    {
      "id": "17e34000",
      "type": "add",
      "item": {
        "id": "17e34000",
        "type": "paragraph",
        "text": "A long while back, David observed two features of Perl which have made it more successful than LISP or Smalltalk. (Defining \"successful\" is left as an exercise for the reader. :-) There's always been only one Perl; differing versions, sure, but you have never had to spend any time choosing whose Perl interpreter to use. More importantly, Perl began with the assumption that it would not be the only tool in your toolbox: it set out from the beginning to play well with others. By contrast, there have always been many flavors of LISP and Smalltalk any of which have tried to be pretty much everything you ever need.\n\nPainting in broad strokes, David says Smalltalk's weakness is \"at the boundaries:\" when you want to try to do some typical unix system maintenance, or interfacing with underlying C libraries, or something similar. As long as you're staying within the Smalltalk environment, it completely rocks. But it's definitely painful if you try to reach outside. And it's especially painful if you want your code to work with different Smalltalks. What Perl got right was making it completely painless to integrate with its environment.\n\nIn some sense LISP wants to be on a LISP Machine and Smalltalk wants to be in its virtual machine, whereas Perl wants to go out and play with the other kids. The former languages are introverted and Perl is extroverted."
      },
      "after": "40fc000",
      "date": 1635441980394
    },
    {
      "type": "edit",
      "id": "17e34000",
      "item": {
        "id": "17e34000",
        "type": "paragraph",
        "text": "Two features of Perl have made it more successful than LISP or Smalltalk."
      },
      "date": 1635441984112
    },
    {
      "type": "add",
      "id": "86ea415d1cb5c655",
      "item": {
        "type": "paragraph",
        "id": "86ea415d1cb5c655",
        "text": "In some sense LISP wants to be on a LISP Machine and Smalltalk wants to be in its virtual machine, whereas Perl wants to go out and play with the other kids. The former languages are introverted and Perl is extroverted."
      },
      "after": "17e34000",
      "date": 1635441986710
    },
    {
      "type": "edit",
      "id": "17e34000",
      "item": {
        "id": "17e34000",
        "type": "paragraph",
        "text": "Two features of Perl have made it more successful than LISP or Smalltalk."
      },
      "date": 1635441994237
    },
    {
      "type": "add",
      "id": "dce8158a5b99528f",
      "item": {
        "type": "paragraph",
        "id": "dce8158a5b99528f",
        "text": "Smalltalk's weakness is at the boundaries: when you want to try to do some typical unix system maintenance, or interfacing with underlying C libraries, or something similar. As long as you're staying within the Smalltalk environment, it completely rocks. But it's definitely painful if you try to reach outside. And it's especially painful if you want your code to work with different Smalltalks."
      },
      "after": "17e34000",
      "date": 1635441996231
    },
    {
      "type": "edit",
      "id": "17e34000",
      "item": {
        "id": "17e34000",
        "type": "paragraph",
        "text": "Two features of Perl have made it more successful than LISP or Smalltalk."
      },
      "date": 1635442038048
    },
    {
      "type": "add",
      "id": "3d3f5535b49a4b5a",
      "item": {
        "type": "paragraph",
        "id": "3d3f5535b49a4b5a",
        "text": "There's always been only one Perl; differing versions, sure, but you have never had to spend any time choosing whose Perl interpreter to use."
      },
      "after": "17e34000",
      "date": 1635442043823
    },
    {
      "type": "add",
      "id": "15975fba8f362deb",
      "item": {
        "type": "paragraph",
        "id": "15975fba8f362deb",
        "text": "More importantly, Perl began with the assumption that it would not be the only tool in your toolbox: it set out from the beginning to play well with others. By contrast, there have always been many flavors of LISP and Smalltalk any of which have tried to be pretty much everything you ever need."
      },
      "after": "3d3f5535b49a4b5a",
      "date": 1635442059050
    },
    {
      "type": "edit",
      "id": "dce8158a5b99528f",
      "item": {
        "type": "paragraph",
        "id": "dce8158a5b99528f",
        "text": "Smalltalk's weakness is at the boundaries: when you want to try to do some typical unix system maintenance, or interfacing with underlying C libraries, or something similar. As long as you're staying within the Smalltalk environment, it completely rocks. But it's definitely painful if you try to reach outside. And it's especially painful if you want your code to work with different Smalltalks."
      },
      "date": 1635442088359
    },
    {
      "type": "add",
      "id": "61c4b33a2b992a91",
      "item": {
        "type": "paragraph",
        "id": "61c4b33a2b992a91",
        "text": "What Perl got right was making it completely painless to integrate with its environment."
      },
      "after": "dce8158a5b99528f",
      "date": 1635442090529
    },
    {
      "type": "fork",
      "date": 1635442104903
    },
    {
      "type": "fork",
      "site": "wiki.dbbs.co"
    },
    {
      "item": {
        "type": "factory",
        "id": "56f5a4b23d5e4143"
      },
      "id": "56f5a4b23d5e4143",
      "type": "add",
      "after": "86ea415d1cb5c655",
      "date": 1635477278156
    },
    {
      "type": "edit",
      "id": "56f5a4b23d5e4143",
      "item": {
        "type": "pagefold",
        "id": "56f5a4b23d5e4143",
        "text": "."
      },
      "date": 1635477283006
    },
    {
      "item": {
        "type": "factory",
        "id": "e17fba78c16a0d7c"
      },
      "id": "e17fba78c16a0d7c",
      "type": "add",
      "after": "56f5a4b23d5e4143",
      "date": 1635477299532
    },
    {
      "type": "edit",
      "id": "e17fba78c16a0d7c",
      "item": {
        "type": "paragraph",
        "id": "e17fba78c16a0d7c",
        "text": "Lisp and Smalltalk wanted to be your language and your environment. Perl came from an environment that was already successful and didn't need to be hidden or replaced."
      },
      "date": 1635477436932
    },
    {
      "type": "add",
      "id": "bf0ae8e294d99ccb",
      "item": {
        "type": "paragraph",
        "id": "bf0ae8e294d99ccb",
        "text": "Unix hosted simple tools that did one thing well and could feed one another in a pipeline. Sed, grep and wc come to mind. Awk burst into this space showing that it could interpret small programs that combined all of these tools and ran faster too."
      },
      "after": "e17fba78c16a0d7c",
      "date": 1635477781079
    },
    {
      "type": "add",
      "id": "8bbf735279468cd5",
      "item": {
        "type": "paragraph",
        "id": "8bbf735279468cd5",
        "text": "We all thought, if awk just had functions, it could do everything. Then perl showed up with functions and did everything."
      },
      "after": "bf0ae8e294d99ccb",
      "date": 1635477849105
    },
    {
      "type": "add",
      "id": "ff9fbee8cf25553e",
      "item": {
        "type": "paragraph",
        "id": "ff9fbee8cf25553e",
        "text": "I wrote an expense calculator in awk and later ported it to federated wiki to guild plugin development. See [[About Calculator Plugin]]"
      },
      "after": "bf0ae8e294d99ccb",
      "date": 1635478031189
    },
    {
      "id": "ff9fbee8cf25553e",
      "type": "move",
      "order": [
        "40fc000",
        "17e34000",
        "3d3f5535b49a4b5a",
        "15975fba8f362deb",
        "dce8158a5b99528f",
        "61c4b33a2b992a91",
        "86ea415d1cb5c655",
        "56f5a4b23d5e4143",
        "e17fba78c16a0d7c",
        "bf0ae8e294d99ccb",
        "8bbf735279468cd5",
        "ff9fbee8cf25553e"
      ],
      "date": 1635478056059
    },
    {
      "type": "edit",
      "id": "ff9fbee8cf25553e",
      "item": {
        "type": "paragraph",
        "id": "ff9fbee8cf25553e",
        "text": "Aside: I wrote an expense calculator in awk and later ported it to federated wiki to guild plugin development. See [[About Calculator Plugin]]"
      },
      "date": 1635478070102
    },
    {
      "type": "edit",
      "id": "8bbf735279468cd5",
      "item": {
        "type": "paragraph",
        "id": "8bbf735279468cd5",
        "text": "We all thought, if awk just had functions, it could do everything. Then perl showed up with functions and, yes, it could do everything."
      },
      "date": 1635478146273
    },
    {
      "type": "fork",
      "site": "found.ward.bay.wiki.org",
      "date": 1635495681578
    }
  ]
}