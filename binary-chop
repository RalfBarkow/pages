{
  "title": "Binary Chop",
  "story": [
    {
      "type": "html",
      "text": "[[Oh Oh]], stack corruption. Or at least it looks like stack corruption. Someone's scrawling on memory, it doesn't always happen the same way, and you're able to [[Use Tracing]] to rule out noxious thread interactions. When you [[Ask The Code]] it doesn't happen the same way. ",
      "id": "e2b7e0ecddda60f805d3a6d48b1ec691"
    },
    {
      "type": "html",
      "text": "<b>Therefore,</b>",
      "id": "ba4125abdce889e99d5c905c556b64c2"
    },
    {
      "type": "html",
      "text": "\nChop out the first half of your program. Do things still screw up? If so, the problem must be in the second half. Otherwise it's likely in the first. Verify that. Now take the half where you know the problem lies and chop out half of it. Repeat until you say [[Ah Ha]], or you discover an [[Environment Problem]]. -- [[Peter Merel]]",
      "id": "de8096be8cd815298a6a338bf725e117"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1c691f0c6ff4bb2c09cff1bd258ee9f0"
    },
    {
      "type": "html",
      "text": "<b>However,</b>",
      "id": "e1b3c8f6b2cd25b22ec4f8ea2a5f9f29"
    },
    {
      "type": "html",
      "text": "\nRemember that the [[Binary Chop]] is one of the <b>least efficient</b> debugging tricks you have in your bag. While it will almost always converge on a solution, regardless of environmental problems, it will do so slowly, at a high cost in time and effort. [[Binary Chop]] is a \"technique of last resort\" - to be used after other appropriate techniques fail.",
      "id": "731f3dc355562f2cd8a37e93ee49276f"
    },
    {
      "type": "html",
      "text": "<i>I think that's much too strong. [[Binary Chop]] can be time-consuming if pursued as a matter of course, but often one or two iterations of it can be combined with the rest of the [[Debugging Pattern Language]] to shorten the time taken. Debugging is helped by controlled experiments - show me a positive before a negative - and a little [[Binary Chop]] can often get you that faster.</i>",
      "id": "097df83229fc6ef8a2792d9fc6fa4165"
    },
    {
      "type": "html",
      "text": "\nIn terms of efficiency (and only efficiency), [[Binary Chop]] is to [[Code Unit Test First]], as [[Binary Search]] is to [[Hash Table]]. I.e. O(log n) vs. O(1). [[Binary Chop]] is definitely more efficient on a large scale than linear debugging methods such as reading the code or stepping through the debugger, although once you have narrowed the problem area, stepping through the debugger can be better than continuing with [[Binary Chop]].",
      "id": "27f3d714d509354ba28349454b149232"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1c691f0c6ff4bb2c09cff1bd258ee9f0"
    },
    {
      "type": "html",
      "text": "The two parts don't have to have equal size or complexity. You should aim to get the same probability of error in each one. -- [[Dave Harris]]",
      "id": "7b86baf2be1a4eefd5001aca053dbeff"
    },
    {
      "type": "html",
      "text": "\nIf you <i>know</i> a large portion of the program is correct, then this can reduce to [[Spike Solution]].  Forget all the mundane stuff; just write a small test program involving the new library/algorithm/language feature that's the [[Simplest Thing That Could Possibly Work]] (or not work).  I use this often when playing around with [[Haskell Language]].  -- [[Jonathan Tang]]",
      "id": "d15caefcdcb004651983332a4dc31515"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1c691f0c6ff4bb2c09cff1bd258ee9f0"
    },
    {
      "type": "html",
      "text": "POD is good for doing this since Perl doesn't have block comments.",
      "id": "c5f3b4adfb635c3310fb57b6f9d98e04"
    },
    {
      "type": "code",
      "text": " =head1 Here's some cruddy code to switch off\n $foo = 73;\n do_something_stupid($foo);\n =cut",
      "id": "cc74e634da186f76bf4e8f7a8990d030"
    },
    {
      "type": "html",
      "text": "\nThe [[Binary Chop]] is also the method you used to have to use on [[Mac Os Classic]] to pin down a misbehaving Extension or Control Panel that was causing crashes or weird behavior. -- [[Earle Martin]]",
      "id": "3c20573343c202b87e4b9add56375713"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1c691f0c6ff4bb2c09cff1bd258ee9f0"
    },
    {
      "type": "html",
      "text": "[[Binary Chop]] was the only technique available in my most [[Heroic Debugging]] performance. -- [[John Farrell]]",
      "id": "94d4c2bd5cf30909fe66ee12617bd294"
    },
    {
      "type": "html",
      "text": "<i>(Description moved to [[Heroic Debugging]] page.)</i>",
      "id": "aef474e85d013b3402c65e14de8c44f2"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1c691f0c6ff4bb2c09cff1bd258ee9f0"
    },
    {
      "type": "html",
      "text": "See [[Divide And Conquer]], [[One Line Ata Time]]",
      "id": "c33db3d902adb3297237ea67581baed8"
    },
    {
      "type": "html",
      "text": "\nVaguely related to [[Abstraction Chop]].",
      "id": "8bde9f2970c2324594e79e204c44b50c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "1c691f0c6ff4bb2c09cff1bd258ee9f0"
    },
    {
      "type": "html",
      "text": "[[Category Debugging]]",
      "id": "e80858dbd06ac2b619fb10ef273a5833"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?BinaryChop c2.com]",
      "id": "d8d3621c818a9bbb07c86d9fc9a2fd52"
    }
  ],
  "journal": [
    {
      "date": 1160605826000,
      "id": "7744a538e63402f80d365069d47970f6",
      "type": "create",
      "item": {
        "title": "Binary Chop",
        "story": [
          {
            "type": "html",
            "text": "[[Oh Oh]], stack corruption. Or at least it looks like stack corruption. Someone's scrawling on memory, it doesn't always happen the same way, and you're able to [[Use Tracing]] to rule out noxious thread interactions. When you [[Ask The Code]] it doesn't happen the same way. ",
            "id": "e2b7e0ecddda60f805d3a6d48b1ec691"
          },
          {
            "type": "html",
            "text": "<b>Therefore,</b>",
            "id": "ba4125abdce889e99d5c905c556b64c2"
          },
          {
            "type": "html",
            "text": "\nChop out the first half of your program. Do things still screw up? If so, the problem must be in the second half. Otherwise it's likely in the first. Verify that. Now take the half where you know the problem lies and chop out half of it. Repeat until you say [[Ah Ha]], or you discover an [[Environment Problem]]. -- [[Peter Merel]]",
            "id": "de8096be8cd815298a6a338bf725e117"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1c691f0c6ff4bb2c09cff1bd258ee9f0"
          },
          {
            "type": "html",
            "text": "<b>However,</b>",
            "id": "e1b3c8f6b2cd25b22ec4f8ea2a5f9f29"
          },
          {
            "type": "html",
            "text": "\nRemember that the [[Binary Chop]] is one of the <b>least efficient</b> debugging tricks you have in your bag. While it will almost always converge on a solution, regardless of environmental problems, it will do so slowly, at a high cost in time and effort. [[Binary Chop]] is a \"technique of last resort\" - to be used after other appropriate techniques fail.",
            "id": "731f3dc355562f2cd8a37e93ee49276f"
          },
          {
            "type": "html",
            "text": "<i>I think that's much too strong. [[Binary Chop]] can be time-consuming if pursued as a matter of course, but often one or two iterations of it can be combined with the rest of the [[Debugging Pattern Language]] to shorten the time taken. Debugging is helped by controlled experiments - show me a positive before a negative - and a little [[Binary Chop]] can often get you that faster.</i>",
            "id": "097df83229fc6ef8a2792d9fc6fa4165"
          },
          {
            "type": "html",
            "text": "\nIn terms of efficiency (and only efficiency), [[Binary Chop]] is to [[Code Unit Test First]], as [[Binary Search]] is to [[Hash Table]]. I.e. O(log n) vs. O(1). [[Binary Chop]] is definitely more efficient on a large scale than linear debugging methods such as reading the code or stepping through the debugger, although once you have narrowed the problem area, stepping through the debugger can be better than continuing with [[Binary Chop]].",
            "id": "27f3d714d509354ba28349454b149232"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1c691f0c6ff4bb2c09cff1bd258ee9f0"
          },
          {
            "type": "html",
            "text": "The two parts don't have to have equal size or complexity. You should aim to get the same probability of error in each one. -- [[Dave Harris]]",
            "id": "7b86baf2be1a4eefd5001aca053dbeff"
          },
          {
            "type": "html",
            "text": "\nIf you <i>know</i> a large portion of the program is correct, then this can reduce to [[Spike Solution]].  Forget all the mundane stuff; just write a small test program involving the new library/algorithm/language feature that's the [[Simplest Thing That Could Possibly Work]] (or not work).  I use this often when playing around with [[Haskell Language]].  -- [[Jonathan Tang]]",
            "id": "d15caefcdcb004651983332a4dc31515"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1c691f0c6ff4bb2c09cff1bd258ee9f0"
          },
          {
            "type": "html",
            "text": "POD is good for doing this since Perl doesn't have block comments.",
            "id": "c5f3b4adfb635c3310fb57b6f9d98e04"
          },
          {
            "type": "code",
            "text": " =head1 Here's some cruddy code to switch off\n $foo = 73;\n do_something_stupid($foo);\n =cut",
            "id": "cc74e634da186f76bf4e8f7a8990d030"
          },
          {
            "type": "html",
            "text": "\nThe [[Binary Chop]] is also the method you used to have to use on [[Mac Os Classic]] to pin down a misbehaving Extension or Control Panel that was causing crashes or weird behavior. -- [[Earle Martin]]",
            "id": "3c20573343c202b87e4b9add56375713"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1c691f0c6ff4bb2c09cff1bd258ee9f0"
          },
          {
            "type": "html",
            "text": "[[Binary Chop]] was the only technique available in my most [[Heroic Debugging]] performance. -- [[John Farrell]]",
            "id": "94d4c2bd5cf30909fe66ee12617bd294"
          },
          {
            "type": "html",
            "text": "<i>(Description moved to [[Heroic Debugging]] page.)</i>",
            "id": "aef474e85d013b3402c65e14de8c44f2"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1c691f0c6ff4bb2c09cff1bd258ee9f0"
          },
          {
            "type": "html",
            "text": "See [[Divide And Conquer]], [[One Line Ata Time]]",
            "id": "c33db3d902adb3297237ea67581baed8"
          },
          {
            "type": "html",
            "text": "\nVaguely related to [[Abstraction Chop]].",
            "id": "8bde9f2970c2324594e79e204c44b50c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "1c691f0c6ff4bb2c09cff1bd258ee9f0"
          },
          {
            "type": "html",
            "text": "[[Category Debugging]]",
            "id": "e80858dbd06ac2b619fb10ef273a5833"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?BinaryChop c2.com]",
            "id": "d8d3621c818a9bbb07c86d9fc9a2fd52"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1705840139113
    }
  ]
}