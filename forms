{
  "title": "Forms",
  "story": [
    {
      "type": "paragraph",
      "id": "ce4dede5ae47970c",
      "text": "Now we will make a rudimentary form. It has a field for your name, a field for your password, and a field to verify that password. We will also do some very simple validation to check if the passwords match. [https://guide.elm-lang.org/architecture/forms.html elm-lang]"
    },
    {
      "type": "paragraph",
      "id": "2f5854fcf0362a6e",
      "text": "Note on [[Form]]: Here we should distinguish between a general form and forms. [[Forms]] in the meaning of filling in the forms. Since there is already a forms page, but it was created after reading Fritz B. Simon's German book \"Formen\", we move that content to a new [[Formen]] page and use the [[Forms]] page for the concept of forms in the meaning of filling in the forms."
    },
    {
      "type": "paragraph",
      "id": "be592158f5fb0c4a",
      "text": "PLENER, Peter, WERBER, Niels and WOLF, Burkhardt (eds.), 2021. Das Formular. Berlin, Heidelberg: Springer. AdminiStudies. Formen und Medien der Verwaltung. ISBN 978-3-662-64083-8, p. 7N5."
    },
    {
      "type": "markdown",
      "id": "70b3f65d03ca3020",
      "text": "# Elm Forms"
    },
    {
      "type": "paragraph",
      "id": "381c929b958bbbc5",
      "text": "Full program below from [https://elm-lang.org/examples/forms page]"
    },
    {
      "type": "code",
      "id": "2381d24dac6fae09",
      "text": "module Main exposing (main)\n\n-- Input a user name and password. Make sure the password matches.\n--\n-- Read how it works:\n--   https://guide.elm-lang.org/architecture/forms.html\n--\n\nimport Browser\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (onInput)\n\n\n\n-- MAIN\n\n\nmain =\n    Browser.sandbox { init = init, update = update, view = view }\n\n\n\n-- MODEL\n\n\ntype alias Model =\n    { name : String\n    , password : String\n    , passwordAgain : String\n    }\n\n\ninit : Model\ninit =\n    Model \"\" \"\" \"\"\n\n\n\n-- UPDATE\n\n\ntype Msg\n    = Name String\n    | Password String\n    | PasswordAgain String\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        Name name ->\n            { model | name = name }\n\n        Password password ->\n            { model | password = password }\n\n        PasswordAgain password ->\n            { model | passwordAgain = password }\n\n\n\n-- VIEW\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ viewInput \"text\" \"Name\" model.name Name\n        , viewInput \"password\" \"Password\" model.password Password\n        , viewInput \"password\" \"Re-enter Password\" model.passwordAgain PasswordAgain\n        , viewValidation model\n        ]\n\n\nviewInput : String -> String -> String -> (String -> msg) -> Html msg\nviewInput t p v toMsg =\n    input [ type_ t, placeholder p, value v, onInput toMsg ] []\n\n\nviewValidation : Model -> Html msg\nviewValidation model =\n    if model.password == model.passwordAgain then\n        div [ style \"color\" \"green\" ] [ text \"OK\" ]\n\n    else\n        div [ style \"color\" \"red\" ] [ text \"Passwords do not match!\" ]\n"
    },
    {
      "type": "paragraph",
      "id": "4983ce1445b3fb75",
      "text": "The provided code is written in the Elm programming language and defines an update function. The update function takes a Msg (message) and a Model as input and returns a new Model.\n\nLet's break down the code step by step:full program below"
    },
    {
      "type": "code",
      "id": "75710e1f95dc3a51",
      "text": "update : Msg -> Model -> Model\n"
    },
    {
      "type": "paragraph",
      "id": "a2ef76650ed0e86f",
      "text": "This line declares the type signature of the update function. It states that the function takes a Msg and a Model as arguments and returns a Model."
    },
    {
      "type": "paragraph",
      "id": "36a619c8c2687f36",
      "text": "The Msg type represents different messages or events that can occur in the application. It is a custom type defined elsewhere in the codebase and will typically have several constructors representing various actions or events that can happen in the application."
    },
    {
      "type": "paragraph",
      "id": "bc049aae6d1cfd5c",
      "text": "The Model type represents the application state. It contains different fields that store the current state of the application."
    },
    {
      "type": "code",
      "id": "80836bf103c03c39",
      "text": "update msg model =\n"
    },
    {
      "type": "paragraph",
      "id": "dd4ecb848988d8ac",
      "text": "This line defines the update function with two parameters: msg and model."
    },
    {
      "type": "code",
      "id": "0f19b8ee9d4f44e3",
      "text": "case msg of\n"
    },
    {
      "type": "paragraph",
      "id": "9c69d5fad817fd85",
      "text": "This line starts a pattern matching expression based on the value of msg. It matches the different constructors of the Msg type."
    },
    {
      "type": "code",
      "id": "a60e315a8ee58709",
      "text": "Name name ->\n  { model | name = name }\n"
    },
    {
      "type": "paragraph",
      "id": "ba4930b94b1c4a57",
      "text": "If the msg matches the Name constructor, it means that the message is related to updating the name field of the model. In this case, a new model is created using [[Record Update Syntax]] ({ model | name = name }). It copies the existing model and updates the name field with the provided name value."
    },
    {
      "type": "code",
      "id": "ae5341462cb8db0a",
      "text": "Password password ->\n  { model | password = password }\n"
    },
    {
      "type": "paragraph",
      "id": "c698073c899f7a02",
      "text": "If the msg matches the Password constructor, it means that the message is related to updating the password field of the model. Similar to the previous case, a new model is created by copying the existing model and updating the password field with the provided password value."
    },
    {
      "type": "code",
      "id": "049e7a1a3349b589",
      "text": "PasswordAgain password ->\n  { model | passwordAgain = password }\n"
    },
    {
      "type": "paragraph",
      "id": "023950b01ebfae0f",
      "text": "If the msg matches the PasswordAgain constructor, it means that the message is related to updating the passwordAgain field of the model. Again, a new model is created by copying the existing model and updating the passwordAgain field with the provided password value."
    },
    {
      "type": "paragraph",
      "id": "42c4f54b3a6a3da8",
      "text": "Overall, this code defines an update function that handles different messages and updates specific fields of the model accordingly. Depending on the constructor of the Msg, it creates a new model with the corresponding field updated and returns that updated model."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Forms",
        "story": []
      },
      "date": 1628753342574
    },
    {
      "item": {
        "type": "factory",
        "id": "cf5264d23390ac4b"
      },
      "id": "cf5264d23390ac4b",
      "type": "add",
      "date": 1628753352250
    },
    {
      "type": "edit",
      "id": "cf5264d23390ac4b",
      "item": {
        "type": "markdown",
        "id": "cf5264d23390ac4b",
        "text": "\nSIMON, Fritz B., 2018. Formen: zur Kopplung von Organismus, Psyche und sozialen Systemen. Heidelberg: Carl-Auer-Systeme Verlag. Systemische Horizonte. ISBN 978-3-8497-0225-0302\n"
      },
      "date": 1628753354507
    },
    {
      "item": {
        "type": "factory",
        "id": "f6fb58b2ad62f2c2"
      },
      "id": "f6fb58b2ad62f2c2",
      "type": "add",
      "after": "cf5264d23390ac4b",
      "date": 1628753365174
    },
    {
      "type": "edit",
      "id": "f6fb58b2ad62f2c2",
      "item": {
        "type": "markdown",
        "id": "f6fb58b2ad62f2c2",
        "text": "See [[Laws of Forms]]"
      },
      "date": 1628753377152
    },
    {
      "type": "edit",
      "id": "f6fb58b2ad62f2c2",
      "item": {
        "type": "markdown",
        "id": "f6fb58b2ad62f2c2",
        "text": "See [[Laws of Form]]"
      },
      "date": 1628753392387
    },
    {
      "type": "edit",
      "id": "cf5264d23390ac4b",
      "item": {
        "type": "markdown",
        "id": "cf5264d23390ac4b",
        "text": "SIMON, Fritz B., 2018. Formen: zur Kopplung von Organismus, Psyche und sozialen Systemen. Heidelberg: Carl-Auer-Systeme Verlag. Systemische Horizonte. ISBN 978-3-8497-0225-0302\n"
      },
      "date": 1628753466765
    },
    {
      "type": "edit",
      "id": "cf5264d23390ac4b",
      "item": {
        "type": "markdown",
        "id": "cf5264d23390ac4b",
        "text": "SIMON, Fritz B., 2018. Formen: zur Kopplung von Organismus, Psyche und sozialen Systemen. Heidelberg: Carl-Auer-Systeme Verlag. Systemische Horizonte. ISBN 978-3-8497-0225-0302 and [https://www.simon-weber.de/veranstaltungen/systemtheorie-reloaded-mit-fritz-b-simon/ page]\n"
      },
      "date": 1628753572440
    },
    {
      "item": {
        "type": "factory",
        "id": "5821216153d3bd0f"
      },
      "id": "5821216153d3bd0f",
      "type": "add",
      "after": "f6fb58b2ad62f2c2",
      "date": 1628754409103
    },
    {
      "type": "edit",
      "id": "5821216153d3bd0f",
      "item": {
        "type": "paragraph",
        "id": "5821216153d3bd0f",
        "text": "~"
      },
      "date": 1628754414125
    },
    {
      "item": {
        "type": "factory",
        "id": "d7c1f0df59550661"
      },
      "id": "d7c1f0df59550661",
      "type": "add",
      "after": "5821216153d3bd0f",
      "date": 1628754415723
    },
    {
      "type": "edit",
      "id": "d7c1f0df59550661",
      "item": {
        "type": "pagefold",
        "id": "d7c1f0df59550661",
        "text": "~"
      },
      "date": 1628754420749
    },
    {
      "id": "5821216153d3bd0f",
      "type": "move",
      "order": [
        "cf5264d23390ac4b",
        "f6fb58b2ad62f2c2",
        "d7c1f0df59550661",
        "5821216153d3bd0f"
      ],
      "date": 1628754422293
    },
    {
      "type": "edit",
      "id": "5821216153d3bd0f",
      "item": {
        "type": "paragraph",
        "id": "5821216153d3bd0f",
        "text": "[…] numbers are nothing more then alphabet to systemtize distinction in structural forms in the world itself, relationships are structures of information, but they are still physical in the sense that they exist and are detectable.\n"
      },
      "date": 1628754431810
    },
    {
      "type": "edit",
      "id": "5821216153d3bd0f",
      "item": {
        "type": "paragraph",
        "id": "5821216153d3bd0f",
        "text": "[…] numbers are nothing more than alphabet to systemize distinction in structural [[forms]] in the world itself, relationships are structures of information, but they are still physical in the sense that they exist and are detectable.\n"
      },
      "date": 1628754505014
    },
    {
      "id": "cf5264d23390ac4b",
      "type": "remove",
      "removedTo": {
        "page": "Formen"
      },
      "date": 1684922819053
    },
    {
      "id": "f6fb58b2ad62f2c2",
      "type": "remove",
      "removedTo": {
        "page": "Formen"
      },
      "date": 1684922853311
    },
    {
      "id": "d7c1f0df59550661",
      "type": "remove",
      "removedTo": {
        "page": "Formen"
      },
      "date": 1684922856292
    },
    {
      "id": "5821216153d3bd0f",
      "type": "remove",
      "removedTo": {
        "page": "Formen"
      },
      "date": 1684922859734
    },
    {
      "id": "ce4dede5ae47970c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ce4dede5ae47970c",
        "text": "Now we will make a rudimentary form. It has a field for your name, a field for your password, and a field to verify that password. We will also do some very simple validation to check if the passwords match."
      },
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1684923555175
    },
    {
      "id": "3bb255801e7406a1",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "3bb255801e7406a1",
        "text": "⇒ [[Forms]]: [https://guide.elm-lang.org/architecture/forms.html elm-lang]"
      },
      "after": "ce4dede5ae47970c",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1684923562445
    },
    {
      "type": "remove",
      "id": "3bb255801e7406a1",
      "date": 1684923568781
    },
    {
      "type": "edit",
      "id": "ce4dede5ae47970c",
      "item": {
        "type": "paragraph",
        "id": "ce4dede5ae47970c",
        "text": "Now we will make a rudimentary form. It has a field for your name, a field for your password, and a field to verify that password. We will also do some very simple validation to check if the passwords match. [https://guide.elm-lang.org/architecture/forms.html elm-lang]"
      },
      "date": 1684923569751
    },
    {
      "id": "be592158f5fb0c4a",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "be592158f5fb0c4a",
        "text": "PLENER, Peter, WERBER, Niels and WOLF, Burkhardt (eds.), 2021. Das Formular. Berlin, Heidelberg: Springer. AdminiStudies. Formen und Medien der Verwaltung. ISBN 978-3-662-64083-8, p. 7N5."
      },
      "after": "ce4dede5ae47970c",
      "attribution": {
        "page": "2023-05-26"
      },
      "date": 1685098793246
    },
    {
      "id": "2f5854fcf0362a6e",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2f5854fcf0362a6e",
        "text": "Note on [[Form]]: Here we should distinguish between a general form and forms. [[Forms]] in the meaning of filling in the forms. Since there is already a forms page, but it was created after reading Fritz B. Simon's German book \"Formen\", we move that content to a new [[Formen]] page and use the [[Forms]] page for the concept of forms in the meaning of filling in the forms."
      },
      "after": "ce4dede5ae47970c",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685104822641
    },
    {
      "id": "ce4dede5ae47970c",
      "type": "remove",
      "removedTo": {
        "page": "2023-05-23"
      },
      "date": 1685104841683
    },
    {
      "id": "ce4dede5ae47970c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ce4dede5ae47970c",
        "text": "Now we will make a rudimentary form. It has a field for your name, a field for your password, and a field to verify that password. We will also do some very simple validation to check if the passwords match. [https://guide.elm-lang.org/architecture/forms.html elm-lang]"
      },
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685104858367
    },
    {
      "id": "2381d24dac6fae09",
      "type": "add",
      "item": {
        "type": "code",
        "id": "2381d24dac6fae09",
        "text": "module Main exposing (main)\n\n-- Input a user name and password. Make sure the password matches.\n--\n-- Read how it works:\n--   https://guide.elm-lang.org/architecture/forms.html\n--\n\nimport Browser\nimport Html exposing (..)\nimport Html.Attributes exposing (..)\nimport Html.Events exposing (onInput)\n\n\n\n-- MAIN\n\n\nmain =\n    Browser.sandbox { init = init, update = update, view = view }\n\n\n\n-- MODEL\n\n\ntype alias Model =\n    { name : String\n    , password : String\n    , passwordAgain : String\n    }\n\n\ninit : Model\ninit =\n    Model \"\" \"\" \"\"\n\n\n\n-- UPDATE\n\n\ntype Msg\n    = Name String\n    | Password String\n    | PasswordAgain String\n\n\nupdate : Msg -> Model -> Model\nupdate msg model =\n    case msg of\n        Name name ->\n            { model | name = name }\n\n        Password password ->\n            { model | password = password }\n\n        PasswordAgain password ->\n            { model | passwordAgain = password }\n\n\n\n-- VIEW\n\n\nview : Model -> Html Msg\nview model =\n    div []\n        [ viewInput \"text\" \"Name\" model.name Name\n        , viewInput \"password\" \"Password\" model.password Password\n        , viewInput \"password\" \"Re-enter Password\" model.passwordAgain PasswordAgain\n        , viewValidation model\n        ]\n\n\nviewInput : String -> String -> String -> (String -> msg) -> Html msg\nviewInput t p v toMsg =\n    input [ type_ t, placeholder p, value v, onInput toMsg ] []\n\n\nviewValidation : Model -> Html msg\nviewValidation model =\n    if model.password == model.passwordAgain then\n        div [ style \"color\" \"green\" ] [ text \"OK\" ]\n\n    else\n        div [ style \"color\" \"red\" ] [ text \"Passwords do not match!\" ]\n"
      },
      "after": "be592158f5fb0c4a",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685104990179
    },
    {
      "id": "4983ce1445b3fb75",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "4983ce1445b3fb75",
        "text": "The provided code is written in the Elm programming language and defines an update function. The update function takes a Msg (message) and a Model as input and returns a new Model.\n\nLet's break down the code step by step:"
      },
      "after": "2381d24dac6fae09",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105000936
    },
    {
      "id": "a2ef76650ed0e86f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a2ef76650ed0e86f",
        "text": "This line declares the type signature of the update function. It states that the function takes a Msg and a Model as arguments and returns a Model."
      },
      "after": "4983ce1445b3fb75",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105076007
    },
    {
      "id": "75710e1f95dc3a51",
      "type": "add",
      "item": {
        "type": "code",
        "id": "75710e1f95dc3a51",
        "text": "update : Msg -> Model -> Model\n"
      },
      "after": "4983ce1445b3fb75",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105080585
    },
    {
      "id": "36a619c8c2687f36",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "36a619c8c2687f36",
        "text": "The Msg type represents different messages or events that can occur in the application. It is a custom type defined elsewhere in the codebase and will typically have several constructors representing various actions or events that can happen in the application."
      },
      "after": "a2ef76650ed0e86f",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105088267
    },
    {
      "id": "bc049aae6d1cfd5c",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "bc049aae6d1cfd5c",
        "text": "The Model type represents the application state. It contains different fields that store the current state of the application."
      },
      "after": "36a619c8c2687f36",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105096098
    },
    {
      "id": "80836bf103c03c39",
      "type": "add",
      "item": {
        "type": "code",
        "id": "80836bf103c03c39",
        "text": "update msg model =\n"
      },
      "after": "bc049aae6d1cfd5c",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105098747
    },
    {
      "id": "dd4ecb848988d8ac",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "dd4ecb848988d8ac",
        "text": "This line defines the update function with two parameters: msg and model."
      },
      "after": "80836bf103c03c39",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105106415
    },
    {
      "id": "0f19b8ee9d4f44e3",
      "type": "add",
      "item": {
        "type": "code",
        "id": "0f19b8ee9d4f44e3",
        "text": "case msg of\n"
      },
      "after": "dd4ecb848988d8ac",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105110035
    },
    {
      "id": "9c69d5fad817fd85",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "9c69d5fad817fd85",
        "text": "This line starts a pattern matching expression based on the value of msg. It matches the different constructors of the Msg type."
      },
      "after": "0f19b8ee9d4f44e3",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105113124
    },
    {
      "id": "a60e315a8ee58709",
      "type": "add",
      "item": {
        "type": "code",
        "id": "a60e315a8ee58709",
        "text": "Name name ->\n  { model | name = name }\n"
      },
      "after": "9c69d5fad817fd85",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105116614
    },
    {
      "id": "ba4930b94b1c4a57",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ba4930b94b1c4a57",
        "text": "If the msg matches the Name constructor, it means that the message is related to updating the name field of the model. In this case, a new model is created using record update syntax ({ model | name = name }). It copies the existing model and updates the name field with the provided name value."
      },
      "after": "a60e315a8ee58709",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105125153
    },
    {
      "id": "ae5341462cb8db0a",
      "type": "add",
      "item": {
        "type": "code",
        "id": "ae5341462cb8db0a",
        "text": "Password password ->\n  { model | password = password }\n"
      },
      "after": "ba4930b94b1c4a57",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105131316
    },
    {
      "id": "c698073c899f7a02",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "c698073c899f7a02",
        "text": "If the msg matches the Password constructor, it means that the message is related to updating the password field of the model. Similar to the previous case, a new model is created by copying the existing model and updating the password field with the provided password value."
      },
      "after": "ae5341462cb8db0a",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105134901
    },
    {
      "id": "049e7a1a3349b589",
      "type": "add",
      "item": {
        "type": "code",
        "id": "049e7a1a3349b589",
        "text": "PasswordAgain password ->\n  { model | passwordAgain = password }\n"
      },
      "after": "c698073c899f7a02",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105138539
    },
    {
      "id": "023950b01ebfae0f",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "023950b01ebfae0f",
        "text": "If the msg matches the PasswordAgain constructor, it means that the message is related to updating the passwordAgain field of the model. Again, a new model is created by copying the existing model and updating the passwordAgain field with the provided password value."
      },
      "after": "049e7a1a3349b589",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105145370
    },
    {
      "id": "42c4f54b3a6a3da8",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "42c4f54b3a6a3da8",
        "text": "Overall, this code defines an update function that handles different messages and updates specific fields of the model accordingly. Depending on the constructor of the Msg, it creates a new model with the corresponding field updated and returns that updated model."
      },
      "after": "023950b01ebfae0f",
      "attribution": {
        "page": "2023-05-23"
      },
      "date": 1685105148812
    },
    {
      "type": "add",
      "id": "70b3f65d03ca3020",
      "item": {
        "type": "paragraph",
        "id": "70b3f65d03ca3020",
        "text": "# Elm Forms"
      },
      "after": "be592158f5fb0c4a",
      "date": 1685105213836
    },
    {
      "type": "edit",
      "id": "70b3f65d03ca3020",
      "item": {
        "type": "markdown",
        "id": "70b3f65d03ca3020",
        "text": "# Elm Forms"
      },
      "date": 1685105215385
    },
    {
      "type": "edit",
      "id": "ba4930b94b1c4a57",
      "item": {
        "type": "paragraph",
        "id": "ba4930b94b1c4a57",
        "text": "If the msg matches the Name constructor, it means that the message is related to updating the name field of the model. In this case, a new model is created using [[Record Update Syntax]] ({ model | name = name }). It copies the existing model and updates the name field with the provided name value."
      },
      "date": 1685105369781
    },
    {
      "type": "edit",
      "id": "4983ce1445b3fb75",
      "item": {
        "type": "paragraph",
        "id": "4983ce1445b3fb75",
        "text": "The provided code is written in the Elm programming language and defines an update function. The update function takes a Msg (message) and a Model as input and returns a new Model.\n\nLet's break down the code step by step:full program below"
      },
      "date": 1685110373496
    },
    {
      "type": "add",
      "id": "381c929b958bbbc5",
      "item": {
        "type": "paragraph",
        "id": "381c929b958bbbc5",
        "text": "full program below"
      },
      "after": "be592158f5fb0c4a",
      "date": 1685110404323
    },
    {
      "id": "381c929b958bbbc5",
      "type": "move",
      "order": [
        "ce4dede5ae47970c",
        "2f5854fcf0362a6e",
        "be592158f5fb0c4a",
        "70b3f65d03ca3020",
        "381c929b958bbbc5",
        "2381d24dac6fae09",
        "4983ce1445b3fb75",
        "75710e1f95dc3a51",
        "a2ef76650ed0e86f",
        "36a619c8c2687f36",
        "bc049aae6d1cfd5c",
        "80836bf103c03c39",
        "dd4ecb848988d8ac",
        "0f19b8ee9d4f44e3",
        "9c69d5fad817fd85",
        "a60e315a8ee58709",
        "ba4930b94b1c4a57",
        "ae5341462cb8db0a",
        "c698073c899f7a02",
        "049e7a1a3349b589",
        "023950b01ebfae0f",
        "42c4f54b3a6a3da8"
      ],
      "date": 1685110407280
    },
    {
      "type": "edit",
      "id": "381c929b958bbbc5",
      "item": {
        "type": "paragraph",
        "id": "381c929b958bbbc5",
        "text": "Full program below from "
      },
      "date": 1685110414557
    },
    {
      "type": "edit",
      "id": "381c929b958bbbc5",
      "item": {
        "type": "paragraph",
        "id": "381c929b958bbbc5",
        "text": "Full program below from [https://elm-lang.org/examples/forms page]"
      },
      "date": 1685110441326
    }
  ]
}