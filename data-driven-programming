{
  "title": "Data-Driven Programming",
  "story": [
    {
      "type": "reference",
      "id": "141b191b47f88bbb",
      "site": "wiki.ralfbarkow.ch",
      "slug": "rafal-dittwald",
      "title": "Rafal Dittwald",
      "text": "After overcoming a fear of brackets, the next challenge for would-be Clojurians is less superficial: to stop writing Java (or Javascript, or Haskell...) with Clojure's syntax, and actually start \"thinking\" in Clojure. It is said that Clojure is a \"functional\" programming language; there's also talk of \"data-driven\" programming. What are these things? Are they any good? Why are they good? In this talk, Rafal attempts to distill the particular blend of functional and data-driven programming that makes up \"idiomatic Clojure\", clarify what it looks like in practise (with real-world examples), and reflect on how Clojure's conventions came to be and how they continue to evolve."
    },
    {
      "type": "video",
      "id": "1950bd2da013e990",
      "text": "YOUTUBE vK1DazRK_a0\nSolving Problems the Clojure Way - Rafal Dittwald "
    },
    {
      "type": "paragraph",
      "id": "a905e9a71f37a9c3",
      "text": "[https://youtu.be/vK1DazRK_a0?t=3289 54:49] – now i also want to talk a little bit about [[Data-Driven Programming]] […]"
    },
    {
      "type": "paragraph",
      "id": "79dd24bcb321849d",
      "text": "[https://youtu.be/vK1DazRK_a0?t=3475 57:55] –\nthis idea of you know what let's just describe all the things that you can do with the aws system in json so they have […] this giant list of like 1 000 json files um and each of them describes a part of amazon's web services "
    },
    {
      "type": "pagefold",
      "id": "e5071f4b140d9ec9",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "1cd13dff46764842",
      "text": "⇒ [[Hiccup]]: [https://youtu.be/vK1DazRK_a0?t=3588 59:48] – syntax called hiccup where you just use keywords and strings and maps and objects to create your structure of uh that corresponds to the html and it is absolutely trivial to work with it"
    },
    {
      "type": "paragraph",
      "id": "c2e8de8759bc2983",
      "text": "[https://youtu.be/vK1DazRK_a0?t=3688 1:01:28] – Transparency through Data by [[James Reeves]] "
    },
    {
      "type": "video",
      "id": "c5d9c98e11e4c5e5",
      "text": "YOUTUBE zznwKCifC1A\nKeynote: Transparency through data by James Reeves "
    },
    {
      "type": "paragraph",
      "id": "03156b16a636ba61",
      "text": "How do we make effective use of data when designing software in Clojure? This talk will provide a tour of the options that are available, and explain how liberal use of data structures can make a codebase simpler and more adaptive to change.\n\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Data-Driven Programming",
        "story": []
      },
      "date": 1684797744162
    },
    {
      "item": {
        "type": "factory",
        "id": "141b191b47f88bbb"
      },
      "id": "141b191b47f88bbb",
      "type": "add",
      "date": 1684797747841
    },
    {
      "type": "edit",
      "id": "141b191b47f88bbb",
      "item": {
        "type": "reference",
        "id": "141b191b47f88bbb",
        "site": "wiki.ralfbarkow.ch",
        "slug": "rafal-dittwald",
        "title": "Rafal Dittwald",
        "text": "After overcoming a fear of brackets, the next challenge for would-be Clojurians is less superficial: to stop writing Java (or Javascript, or [[Haskell]]...) with Clojure's syntax, and actually start \"thinking\" in Clojure. It is said that Clojure is a \"functional\" programming language; there's also talk of \"data-driven\" programming. What are these things? Are they any good? Why are they good? In this talk, Rafal attempts to distill the particular blend of functional and data-driven programming that makes up \"idiomatic Clojure\", clarify what it looks like "
      },
      "date": 1684797751290
    },
    {
      "id": "1950bd2da013e990",
      "type": "add",
      "item": {
        "type": "video",
        "id": "1950bd2da013e990",
        "text": "YOUTUBE vK1DazRK_a0\nSolving Problems the Clojure Way - Rafal Dittwald "
      },
      "after": "141b191b47f88bbb",
      "attribution": {
        "page": "Rafal Dittwald"
      },
      "date": 1684797760324
    },
    {
      "id": "a905e9a71f37a9c3",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "a905e9a71f37a9c3",
        "text": "[https://youtu.be/vK1DazRK_a0?t=3289 54:49] – now i also want to talk a little bit about [[Data-Driven Programming]] […]"
      },
      "after": "1950bd2da013e990",
      "attribution": {
        "page": "2023-05-22"
      },
      "date": 1684797773315
    },
    {
      "type": "edit",
      "id": "141b191b47f88bbb",
      "item": {
        "type": "reference",
        "id": "141b191b47f88bbb",
        "site": "wiki.ralfbarkow.ch",
        "slug": "rafal-dittwald",
        "title": "Rafal Dittwald",
        "text": "After overcoming a fear of brackets, the next challenge for would-be Clojurians is less superficial: to stop writing Java (or Javascript, or Haskell...) with Clojure's syntax, and actually start \"thinking\" in Clojure. It is said that Clojure is a \"functional\" programming language; there's also talk of \"data-driven\" programming. What are these things? Are they any good? Why are they good? In this talk, Rafal attempts to distill the particular blend of functional and data-driven programming that makes up \"idiomatic Clojure\", clarify what it looks like in practise (with real-world examples), and reflect on how Clojure's conventions came to be and how they continue to evolve."
      },
      "date": 1684797834873
    },
    {
      "item": {
        "type": "factory",
        "id": "79dd24bcb321849d"
      },
      "id": "79dd24bcb321849d",
      "type": "add",
      "after": "a905e9a71f37a9c3",
      "date": 1684798100670
    },
    {
      "type": "edit",
      "id": "79dd24bcb321849d",
      "item": {
        "type": "paragraph",
        "id": "79dd24bcb321849d",
        "text": "\n57:55\nthis idea of you know what let's just describe all the things that you can do with the aws system in json so they have these j so they have this giant list of like 1 000 json files um and each of them describes a part of amazon's web services "
      },
      "date": 1684798112539
    },
    {
      "type": "edit",
      "id": "79dd24bcb321849d",
      "item": {
        "type": "paragraph",
        "id": "79dd24bcb321849d",
        "text": "[https://youtu.be/vK1DazRK_a0?t=3475 57:55] –\nthis idea of you know what let's just describe all the things that you can do with the aws system in json so they have these j so they have this giant list of like 1 000 json files um and each of them describes a part of amazon's web services "
      },
      "date": 1684798126373
    },
    {
      "type": "edit",
      "id": "79dd24bcb321849d",
      "item": {
        "type": "paragraph",
        "id": "79dd24bcb321849d",
        "text": "[https://youtu.be/vK1DazRK_a0?t=3475 57:55] –\nthis idea of you know what let's just describe all the things that you can do with the aws system in json so they have […] this giant list of like 1 000 json files um and each of them describes a part of amazon's web services "
      },
      "date": 1684798161706
    },
    {
      "item": {
        "type": "factory",
        "id": "e5071f4b140d9ec9"
      },
      "id": "e5071f4b140d9ec9",
      "type": "add",
      "after": "79dd24bcb321849d",
      "date": 1684798303858
    },
    {
      "type": "edit",
      "id": "e5071f4b140d9ec9",
      "item": {
        "type": "pagefold",
        "id": "e5071f4b140d9ec9",
        "text": "~"
      },
      "date": 1684798309133
    },
    {
      "item": {
        "type": "factory",
        "id": "1cd13dff46764842"
      },
      "id": "1cd13dff46764842",
      "type": "add",
      "after": "e5071f4b140d9ec9",
      "date": 1684798310294
    },
    {
      "type": "edit",
      "id": "1cd13dff46764842",
      "item": {
        "type": "paragraph",
        "id": "1cd13dff46764842",
        "text": "[[Hiccup]"
      },
      "date": 1684798315478
    },
    {
      "type": "edit",
      "id": "1cd13dff46764842",
      "item": {
        "type": "paragraph",
        "id": "1cd13dff46764842",
        "text": "[[Hiccup]]"
      },
      "date": 1684798319315
    },
    {
      "type": "edit",
      "id": "1cd13dff46764842",
      "item": {
        "type": "paragraph",
        "id": "1cd13dff46764842",
        "text": "⇒ [[Hiccup]]"
      },
      "date": 1684798330125
    },
    {
      "type": "edit",
      "id": "1cd13dff46764842",
      "item": {
        "type": "paragraph",
        "id": "1cd13dff46764842",
        "text": "⇒ [[Hiccup]]: \n59:48\nsyntax called hiccup where you just use keywords and strings and maps and objects to create your structure of uh\n59:56\nthat corresponds to the html and it is absolutely trivial to work with it"
      },
      "date": 1684798419594
    },
    {
      "type": "edit",
      "id": "1cd13dff46764842",
      "item": {
        "type": "paragraph",
        "id": "1cd13dff46764842",
        "text": "⇒ [[Hiccup]]: [https://youtu.be/vK1DazRK_a0?t=3588 59:48] – syntax called hiccup where you just use keywords and strings and maps and objects to create your structure of uh that corresponds to the html and it is absolutely trivial to work with it"
      },
      "date": 1684798442734
    },
    {
      "item": {
        "type": "factory",
        "id": "c2e8de8759bc2983"
      },
      "id": "c2e8de8759bc2983",
      "type": "add",
      "after": "1cd13dff46764842",
      "date": 1684798629822
    },
    {
      "type": "edit",
      "id": "c2e8de8759bc2983",
      "item": {
        "type": "paragraph",
        "id": "c2e8de8759bc2983",
        "text": "transparency through data by james reeves "
      },
      "date": 1684798638175
    },
    {
      "type": "edit",
      "id": "c2e8de8759bc2983",
      "item": {
        "type": "paragraph",
        "id": "c2e8de8759bc2983",
        "text": "[https://youtu.be/vK1DazRK_a0?t=3688 transparency through data by james reeves "
      },
      "date": 1684798651193
    },
    {
      "type": "edit",
      "id": "c2e8de8759bc2983",
      "item": {
        "type": "paragraph",
        "id": "c2e8de8759bc2983",
        "text": "[https://youtu.be/vK1DazRK_a0?t=3688 \n1:01:28\n] – transparency through data by james reeves "
      },
      "date": 1684798667035
    },
    {
      "type": "edit",
      "id": "c2e8de8759bc2983",
      "item": {
        "type": "paragraph",
        "id": "c2e8de8759bc2983",
        "text": "[https://youtu.be/vK1DazRK_a0?t=3688 \n1:01:28\n] – Transparency through Data by [[James Reeves]] "
      },
      "date": 1684798697080
    },
    {
      "type": "edit",
      "id": "c2e8de8759bc2983",
      "item": {
        "type": "paragraph",
        "id": "c2e8de8759bc2983",
        "text": "[https://youtu.be/vK1DazRK_a0?t=3688 1:01:28] – Transparency through Data by [[James Reeves]] "
      },
      "date": 1684798707342
    },
    {
      "item": {
        "type": "factory",
        "id": "c5d9c98e11e4c5e5"
      },
      "id": "c5d9c98e11e4c5e5",
      "type": "add",
      "after": "c2e8de8759bc2983",
      "date": 1684798809281
    },
    {
      "type": "edit",
      "id": "c5d9c98e11e4c5e5",
      "item": {
        "type": "video",
        "id": "c5d9c98e11e4c5e5",
        "text": "YOUTUBE zznwKCifC1A"
      },
      "date": 1684798817448
    },
    {
      "type": "edit",
      "id": "c5d9c98e11e4c5e5",
      "item": {
        "type": "video",
        "id": "c5d9c98e11e4c5e5",
        "text": "YOUTUBE zznwKCifC1A\nKeynote: Transparency through data by James Reeves "
      },
      "date": 1684798837843
    },
    {
      "item": {
        "type": "factory",
        "id": "03156b16a636ba61"
      },
      "id": "03156b16a636ba61",
      "type": "add",
      "after": "c5d9c98e11e4c5e5",
      "date": 1684798852139
    },
    {
      "type": "edit",
      "id": "03156b16a636ba61",
      "item": {
        "type": "paragraph",
        "id": "03156b16a636ba61",
        "text": "How do we make effective use of data when designing software in Clojure? This talk will provide a tour of the options that are available, and explain how liberal use of data structures can make a codebase simpler and more adaptive to change.\n\nAbout the speaker: James Reeves is the current lead developer of Ring, and is the author of a number of other Clojure web development libraries, including Compojure and Hiccup."
      },
      "date": 1684798854164
    },
    {
      "type": "edit",
      "id": "03156b16a636ba61",
      "item": {
        "type": "paragraph",
        "id": "03156b16a636ba61",
        "text": "How do we make effective use of data when designing software in Clojure? This talk will provide a tour of the options that are available, and explain how liberal use of data structures can make a codebase simpler and more adaptive to change.\n\n"
      },
      "date": 1684798880819
    },
    {
      "type": "add",
      "id": "ac8f5132975fae54",
      "item": {
        "type": "paragraph",
        "id": "ac8f5132975fae54",
        "text": "About the speaker: James Reeves is the current lead developer of Ring, and is the author of a number of other Clojure web development libraries, including Compojure and Hiccup."
      },
      "after": "03156b16a636ba61",
      "date": 1684798881863
    },
    {
      "id": "ac8f5132975fae54",
      "type": "remove",
      "removedTo": {
        "page": "James Reeves"
      },
      "date": 1684798888328
    }
  ]
}