{
  "title": "David Ungar",
  "story": [
    {
      "type": "html",
      "text": "Co-created the [[Self Language]] and devised many advances in [[Garbage Collection]] algorithms and dynamic (runtime) compilation.",
      "id": "194feec7bbc994d598ffd14726b098cc"
    },
    {
      "type": "html",
      "text": "\nSee also [[Ungar Method]]",
      "id": "283186c4e72cfb334048c60ee8ed8fda"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "a94bc2168bb13910d3f7f5680b175e9b"
    },
    {
      "type": "html",
      "text": "Outline of OOPSLA2003 presentation (a note taker said last 4 paradoxes were left to discuss over beer)",
      "id": "f28f63467cca850b879b552440608e88"
    },
    {
      "type": "html",
      "text": "\nSeven Paradoxes of Object-Oriented Programming Languages",
      "id": "8c0745d62cb7a413d5157a16c456d2f6"
    },
    {
      "type": "html",
      "text": "\nWednesday, 29 October — 8:30-10:00 ",
      "id": "3645d6ce79c85a818d5dbde95e0bc989"
    },
    {
      "type": "html",
      "text": "\nDavid Ungar, Sun Microsystems",
      "id": "9351b9af3c05d195d8d83fe929cd31a6"
    },
    {
      "type": "html",
      "text": "Although many of us have worked to create good object-oriented programming languages, it would be hard to say (with a straight face) that any of our creations have totally succeeded. Why? I believe that this endeavour is essentially paradoxical. Thus, whenever a language designer pursues a particular goal and loses sight of the lurking paradox, the outcome is an all too often fatally flawed result. One way to think about this is to explore the following seven paradoxes: ",
      "id": "cbc45329a4e758a3dae8623266c563ce"
    },
    {
      "type": "html",
      "text": " Because programming languages, development environments, and execution engines are intended for both people and computers, they must both humanize and dehumanize us.",
      "id": "1b5d0c62da880e976fe89951985d5e5a"
    },
    {
      "type": "html",
      "text": " Adding a richer set of concepts to a programming language impoverishes its universe of discourse.",
      "id": "9289d523bc8ce4e4e947f7548cbe4c6f"
    },
    {
      "type": "html",
      "text": " Putting a language's cognitive centre in a more dynamic place reduces the verbiage needed to accomplish a task, even though less information can be mechanically deduced about the program.",
      "id": "306a48db402d99bed13a648bb8300aa9"
    },
    {
      "type": "html",
      "text": " The most concrete notions are the most abstract, and pursuing comfort or correctness with precision leads to fuzziness.",
      "id": "0b74de80d83ec68274c7869ef0352da6"
    },
    {
      "type": "html",
      "text": " Although a language, environment, and execution engine are designed for the users' minds, the experience of use will alter the users' minds.",
      "id": "ca92522d7953fbaa6bb031d3de9eef02"
    },
    {
      "type": "html",
      "text": " Object-oriented programming has its roots in modelling and reuse, yet these notions do not coincide and even conflict with each other.",
      "id": "85b80a2ec121a6260840e39a82e116bd"
    },
    {
      "type": "html",
      "text": " A language designed to give programmers what they want may initially succeed but create pernicious problems as it catches on. However, a language designed to give programmers what they really need may never catch fire at all.",
      "id": "063e1f90749014010dc7f5ab9b22e693"
    },
    {
      "type": "html",
      "text": "\nMany of these assertions seem nonsensical, misguided, or just plain wrong. Yet, a deeper understanding of these paradoxes can point the way to better designs for object-oriented programming languages.",
      "id": "c895a7b4855c241747f65bc5f5c3d3e1"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?DavidUngar c2.com]",
      "id": "b6f0f8b1e12e6f138e6a9474ca1d7218"
    }
  ],
  "journal": [
    {
      "date": 1371546327000,
      "id": "dfd21557ebdb770277f5d86c3fe6a21d",
      "type": "create",
      "item": {
        "title": "David Ungar",
        "story": [
          {
            "type": "html",
            "text": "Co-created the [[Self Language]] and devised many advances in [[Garbage Collection]] algorithms and dynamic (runtime) compilation.",
            "id": "194feec7bbc994d598ffd14726b098cc"
          },
          {
            "type": "html",
            "text": "\nSee also [[Ungar Method]]",
            "id": "283186c4e72cfb334048c60ee8ed8fda"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "a94bc2168bb13910d3f7f5680b175e9b"
          },
          {
            "type": "html",
            "text": "Outline of OOPSLA2003 presentation (a note taker said last 4 paradoxes were left to discuss over beer)",
            "id": "f28f63467cca850b879b552440608e88"
          },
          {
            "type": "html",
            "text": "\nSeven Paradoxes of Object-Oriented Programming Languages",
            "id": "8c0745d62cb7a413d5157a16c456d2f6"
          },
          {
            "type": "html",
            "text": "\nWednesday, 29 October — 8:30-10:00 ",
            "id": "3645d6ce79c85a818d5dbde95e0bc989"
          },
          {
            "type": "html",
            "text": "\nDavid Ungar, Sun Microsystems",
            "id": "9351b9af3c05d195d8d83fe929cd31a6"
          },
          {
            "type": "html",
            "text": "Although many of us have worked to create good object-oriented programming languages, it would be hard to say (with a straight face) that any of our creations have totally succeeded. Why? I believe that this endeavour is essentially paradoxical. Thus, whenever a language designer pursues a particular goal and loses sight of the lurking paradox, the outcome is an all too often fatally flawed result. One way to think about this is to explore the following seven paradoxes: ",
            "id": "cbc45329a4e758a3dae8623266c563ce"
          },
          {
            "type": "html",
            "text": " Because programming languages, development environments, and execution engines are intended for both people and computers, they must both humanize and dehumanize us.",
            "id": "1b5d0c62da880e976fe89951985d5e5a"
          },
          {
            "type": "html",
            "text": " Adding a richer set of concepts to a programming language impoverishes its universe of discourse.",
            "id": "9289d523bc8ce4e4e947f7548cbe4c6f"
          },
          {
            "type": "html",
            "text": " Putting a language's cognitive centre in a more dynamic place reduces the verbiage needed to accomplish a task, even though less information can be mechanically deduced about the program.",
            "id": "306a48db402d99bed13a648bb8300aa9"
          },
          {
            "type": "html",
            "text": " The most concrete notions are the most abstract, and pursuing comfort or correctness with precision leads to fuzziness.",
            "id": "0b74de80d83ec68274c7869ef0352da6"
          },
          {
            "type": "html",
            "text": " Although a language, environment, and execution engine are designed for the users' minds, the experience of use will alter the users' minds.",
            "id": "ca92522d7953fbaa6bb031d3de9eef02"
          },
          {
            "type": "html",
            "text": " Object-oriented programming has its roots in modelling and reuse, yet these notions do not coincide and even conflict with each other.",
            "id": "85b80a2ec121a6260840e39a82e116bd"
          },
          {
            "type": "html",
            "text": " A language designed to give programmers what they want may initially succeed but create pernicious problems as it catches on. However, a language designed to give programmers what they really need may never catch fire at all.",
            "id": "063e1f90749014010dc7f5ab9b22e693"
          },
          {
            "type": "html",
            "text": "\nMany of these assertions seem nonsensical, misguided, or just plain wrong. Yet, a deeper understanding of these paradoxes can point the way to better designs for object-oriented programming languages.",
            "id": "c895a7b4855c241747f65bc5f5c3d3e1"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?DavidUngar c2.com]",
            "id": "b6f0f8b1e12e6f138e6a9474ca1d7218"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1626125629001
    }
  ]
}