{
  "title": "Metamath",
  "story": [
    {
      "type": "paragraph",
      "id": "ff7dea333383ffe5",
      "text": "is a language that lets you express mathematical axioms and theorems. [https://github.com/digama0/mmj2 github]"
    },
    {
      "type": "paragraph",
      "id": "65e2ecb7050c7091",
      "text": "Metamath Home Page. [https://ssl.metamath.org/ site]"
    },
    {
      "type": "markdown",
      "id": "d9fb91e0036f6acf",
      "text": "* Metamath Proof Explorer Overview. [https://ssl.metamath.org/mpeuni/mmset.html#overview page]\n> In fact, there is a philosophy called *formalism* which says that mathematics is a game of symbols with no intrinsic meaning. With that in mind, Metamath lets you watch the game being played and the pieces manipulated according to simple and precise rules, one step at a time.\n\nAs humans, we observe interesting patterns in these \"meaningless\" symbol strings as they evolve from the axioms, and we attach meaning to them. One result is the set of natural numbers, whose properties match those we observe when we count everyday objects, and their extensions to rational and real numbers. Of course, numbers were discovered centuries before set theory, and historically they were \"reversed engineered\" back to the axioms of set theory. The proof of 2 + 2 = 4 shows what was involved in that reverse engineering, representing the work of many mathematicians from Dedekind to von Neumann. At the other extreme of abstraction is the theory of infinite sets or transfinite cardinal numbers. Some of the world's most brilliant mathematicians have given us deep insight into this mysterious and wondrous universe, which is sometimes called \"Cantor's paradise.\" "
    },
    {
      "type": "pagefold",
      "id": "e5b0383db2dea4a6",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "7fff60811073cf49",
      "text": "peter.h.meadows â€” 2020-09-14 via [https://discord.com/channels/729445214812504107/735947900651175998/754979844420272148 discord]\n(My personal goal is using GT to make a GUI for Metamath proofs. I'll share it with you when it doesn't suck) ðŸ™‚"
    },
    {
      "type": "markdown",
      "id": "44f8733d962cb01f",
      "text": "peter.h.meadows â€” 2022-06-27 via [https://discord.com/channels/729445214812504107/735949717049049129/990965401510875158 discord]\nhttps://github.com/Peter-H-Meadows/GtMetamath\n"
    },
    {
      "type": "paragraph",
      "id": "94ed9ec502bc1c47",
      "text": "A game/GUI to teach logic. Implemented with: GT / Pharo / Smalltalk / Metamath. [https://github.com/Peter-H-Meadows/GtMetamath github]"
    },
    {
      "type": "video",
      "id": "785d3130210c7df1",
      "text": "VIMEO 723971182\nmetamath logic game"
    },
    {
      "type": "video",
      "id": "83c1f1c615d67117",
      "text": "VIMEO 724183323\nMetamath game - 26/06/2022, 14:11:38"
    },
    {
      "type": "paragraph",
      "id": "3de512579e9fd1b9",
      "text": "Metamath's formal proofs are much more detailed than the proofs you see in textbooks. They are broken down into the most explicit detail possible so that you can see exactly what is going on. Each proof step represents a microscopic increment towards the final goal. But each step is derived from previous ones with a very simple rule, and you can verify for yourself the correctness of any proof with very little skill. All you need is patience. With no prior knowledge of advanced mathematics or even any mathematics at all, you can jump into the middle of any proof, from the most elementary to the most advanced, and understand immediately how the symbols were mechanically manipulated to go from one proof step to another, even if you don't know what the symbols themselves mean. In the next section we show you how. "
    },
    {
      "type": "markdown",
      "id": "106a18ad7217d32b",
      "text": "# How Metamath Proofs Work"
    },
    {
      "type": "paragraph",
      "id": "e06801e18e16a0a5",
      "text": "The only rule you need to know in order to follow the symbol manipulations in a Metamath proof is substitution. Substitution consists of replacing the symbols for variables with expressions representing special cases of those variables. For example, in high-school algebra you learned that a + b = b + a, where a and b are variables (placeholders for numbers). Two substitution instances of this law are 5 + 3 = 3 + 5 and (x - 7) + c = c + (x - 7). That's the only mathematical concept you need! Substitution is just writing down a specific example of a more general formula.\n\n[Note for logicians: The substitution in Metamath proofs is, indeed, simply the direct replacement of a variable with an expression. The more complex proper substitution of traditional logic is a derived concept in Metamath, broken down into multiple primitive steps. Distinct variable provisos, which accompany certain axioms and are inherited by theorems, forbid unsound substitutions.] "
    },
    {
      "type": "pagefold",
      "id": "650da7206de753f7",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "6424d581b9c00988",
      "text": "# MMProof \nThe set of mandatory variables associated with an assertion is the set of (zero or more) variables in the assertion and in any active $e statements. The (possibly empty) set of mandatory hypotheses is the set of all active $f statements containing mandatory variables, together with all active $e statements. The set of mandatory $d statements associated with an assertion are those active $d statements whose variables are both among the assertionâ€™s mandatory variables.\n\n\n"
    },
    {
      "type": "markdown",
      "id": "da9af5de1fd0a47b",
      "text": "A proof is scanned in order of its label sequence. If the label refers to an active hypothesis, the expression in the hypothesis is pushed onto a stack. If the label refers to an assertion, a (unique) substitution must exist that, when made to the mandatory hypotheses of the referenced assertion, causes them to match the topmost (i.e. most recent) entries of the stack, in order of occurrence of the mandatory hypotheses, with the topmost stack entry matching the last mandatory hypothesis of the referenced assertion. As many stack entries as there are mandatory hypotheses are then popped from the stack. The same substitution is made to the referenced assertion, and the result is pushed onto the stack. After the last label in the proof is processed, the stack must have a single entry that matches the expression in the $p statement containing the proof."
    },
    {
      "type": "pagefold",
      "id": "9ead9a059f332bf2",
      "text": "~"
    },
    {
      "type": "markdown",
      "id": "c6630aab647eca88",
      "text": "# How it works"
    },
    {
      "type": "paragraph",
      "id": "c301f57c28cab5f3",
      "text": "To show you how this works in Metamath, we will break down and analyze a proof step in the proof of 2 + 2 = 4. Once you grasp this example, you will immediately be able to verify for yourself any proof in the databaseâ€”no further prerequisites are needed. You may not understand what all (or any) of the symbols mean, but you can follow the rules for how they are manipulated, like game pieces, to prove theorems.\n\nCompare this with the years of study it might take to be able to follow and verify a proof in an advanced math textbook. Typically such proofs will omit many details, implicitly assuming you have a deep knowledge of prior material. If you want to be a mathematician, you will still need those years of study to achieve a high-level understanding. Metamath will not provide you with that. But if you just want the ability to convince yourself that a string of math symbols that mathematicians call a \"theorem\" is a mechanical consequence of the axioms, Metamath's proof method lets you accomplish that.\n\nMetamath's conceptual simplicity has a tradeoff, which is the often large number of steps needed for a complete proof all the way back to the axioms. But the proofs have been computer-verified, and you can choose to study only the steps that interest you and still have complete confidence that the rest are correct. "
    },
    {
      "type": "markdown",
      "id": "ab42e8cf169fe3b8",
      "text": "[â€¦] â€“ https://ssl.metamath.org/mpeuni/mmset.html#overview"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Metamath",
        "story": []
      },
      "date": 1656493343014
    },
    {
      "id": "ff7dea333383ffe5",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "ff7dea333383ffe5",
        "text": "is a language that lets you express mathematical axioms and theorems. [https://github.com/digama0/mmj2 github]"
      },
      "date": 1656493366390
    },
    {
      "id": "7fff60811073cf49",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "7fff60811073cf49",
        "text": "peter.h.meadows â€” 2020-09-14 via [https://discord.com/channels/729445214812504107/735947900651175998/754979844420272148 discord]\n(My personal goal is using GT to make a GUI for Metamath proofs. I'll share it with you when it doesn't suck) ðŸ™‚"
      },
      "after": "ff7dea333383ffe5",
      "date": 1656493434957
    },
    {
      "id": "44f8733d962cb01f",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "44f8733d962cb01f",
        "text": "peter.h.meadows â€” 27.06.2022-06-27 via [https://discord.com/channels/729445214812504107/735949717049049129/990965401510875158 discord]\nhttps://github.com/Peter-H-Meadows/GtMetamath\n"
      },
      "after": "7fff60811073cf49",
      "date": 1656493440920
    },
    {
      "id": "94ed9ec502bc1c47",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "94ed9ec502bc1c47",
        "text": "A game/GUI to teach logic. Implemented with: GT / Pharo / Smalltalk / Metamath. [https://github.com/Peter-H-Meadows/GtMetamath github]"
      },
      "after": "44f8733d962cb01f",
      "date": 1656493443428
    },
    {
      "id": "785d3130210c7df1",
      "type": "add",
      "item": {
        "type": "video",
        "id": "785d3130210c7df1",
        "text": "VIMEO 723971182\nmetamath logic game"
      },
      "after": "94ed9ec502bc1c47",
      "date": 1656493448359
    },
    {
      "id": "83c1f1c615d67117",
      "type": "add",
      "item": {
        "type": "video",
        "id": "83c1f1c615d67117",
        "text": "VIMEO 724183323\nMetamath game - 26/06/2022, 14:11:38"
      },
      "after": "785d3130210c7df1",
      "date": 1656493451391
    },
    {
      "item": {
        "type": "factory",
        "id": "6424d581b9c00988"
      },
      "id": "6424d581b9c00988",
      "type": "add",
      "after": "83c1f1c615d67117",
      "date": 1656493649203
    },
    {
      "type": "edit",
      "id": "6424d581b9c00988",
      "item": {
        "type": "markdown",
        "id": "6424d581b9c00988",
        "text": "# MMProof"
      },
      "date": 1656493656307
    },
    {
      "item": {
        "type": "factory",
        "id": "db23c89fc6b15511"
      },
      "id": "db23c89fc6b15511",
      "type": "add",
      "after": "6424d581b9c00988",
      "date": 1656493662025
    },
    {
      "type": "edit",
      "id": "db23c89fc6b15511",
      "item": {
        "type": "markdown",
        "id": "db23c89fc6b15511",
        "text": "The set of mandatory variables associated with an assertion is the set\nof (zero or more) variables in the assertion and in any active $e statements.\nThe (possibly empty) set of mandatory hypotheses is the set of all active\n$f statements containing mandatory variables, together with all active $e\nstatements. The set of mandatory $d statements associated with an\nassertion are those active $d statements whose variables are both among the\nassertionâ€™s mandatory variables.\n\n\nA proof is scanned in order of its label sequence. If the label refers to an\nactive hypothesis, the expression in the hypothesis is pushed onto a stack.\nIf the label refers to an assertion, a (unique) substitution must exist that,\nwhen made to the mandatory hypotheses of the referenced assertion, causes\nthem to match the topmost (i.e. most recent) entries of the stack, in order\nof occurrence of the mandatory hypotheses, with the topmost stack entry\nmatching the last mandatory hypothesis of the referenced assertion. As many\nstack entries as there are mandatory hypotheses are then popped from the\nstack. The same substitution is made to the referenced assertion, and the\nresult is pushed onto the stack. After the last label in the proof is processed,\nthe stack must have a single entry that matches the expression in the $p\nstatement containing the proof."
      },
      "date": 1656493664123
    },
    {
      "type": "edit",
      "id": "db23c89fc6b15511",
      "item": {
        "type": "markdown",
        "id": "db23c89fc6b15511",
        "text": "The set of mandatory variables associated with an assertion is the set of (zero or more) variables in the assertion and in any active $e statements.\nThe (possibly empty) set of mandatory hypotheses is the set of all active\n$f statements containing mandatory variables, together with all active $e\nstatements. The set of mandatory $d statements associated with an\nassertion are those active $d statements whose variables are both among the\nassertionâ€™s mandatory variables.\n\n\nA proof is scanned in order of its label sequence. If the label refers to an\nactive hypothesis, the expression in the hypothesis is pushed onto a stack.\n\nIf the label refers to an assertion, a (unique) substitution must exist that, when made to the mandatory hypotheses of the referenced assertion, causes them to match the topmost (i.e. most recent) entries of the stack, in order of occurrence of the mandatory hypotheses, with the topmost stack entry matching the last mandatory hypothesis of the referenced assertion. As manystack entries as there are mandatory hypotheses are then popped from the stack. The same substitution is made to the referenced assertion, and the result is pushed onto the stack. After the last label in the proof is processed, the stack must have a single entry that matches the expression in the $p statement containing the proof."
      },
      "date": 1656493713768
    },
    {
      "type": "edit",
      "id": "db23c89fc6b15511",
      "item": {
        "type": "markdown",
        "id": "db23c89fc6b15511",
        "text": "The set of mandatory variables associated with an assertion is the set of (zero or more) variables in the assertion and in any active $e statements.\nThe (possibly empty) set of mandatory hypotheses is the set of all active\n$f statements containing mandatory variables, together with all active $e\nstatements. The set of mandatory $d statements associated with an\nassertion are those active $d statements whose variables are both among the\nassertionâ€™s mandatory variables.\n\n\n"
      },
      "date": 1656493742557
    },
    {
      "type": "add",
      "id": "da9af5de1fd0a47b",
      "item": {
        "type": "markdown",
        "id": "da9af5de1fd0a47b",
        "text": "A proof is scanned in order of its label sequence. If the label refers to an active hypothesis, the expression in the hypothesis is pushed onto a stack. If the label refers to an assertion, a (unique) substitution must exist that, when made to the mandatory hypotheses of the referenced assertion, causes them to match the topmost (i.e. most recent) entries of the stack, in order of occurrence of the mandatory hypotheses, with the topmost stack entry matching the last mandatory hypothesis of the referenced assertion. As manystack entries as there are mandatory hypotheses are then popped from the stack. The same substitution is made to the referenced assertion, and the result is pushed onto the stack. After the last label in the proof is processed, the stack must have a single entry that matches the expression in the $p statement containing the proof."
      },
      "after": "db23c89fc6b15511",
      "date": 1656493745223
    },
    {
      "type": "edit",
      "id": "da9af5de1fd0a47b",
      "item": {
        "type": "markdown",
        "id": "da9af5de1fd0a47b",
        "text": "A proof is scanned in order of its label sequence. If the label refers to an active hypothesis, the expression in the hypothesis is pushed onto a stack. If the label refers to an assertion, a (unique) substitution must exist that, when made to the mandatory hypotheses of the referenced assertion, causes them to match the topmost (i.e. most recent) entries of the stack, in order of occurrence of the mandatory hypotheses, with the topmost stack entry matching the last mandatory hypothesis of the referenced assertion. As many stack entries as there are mandatory hypotheses are then popped from the stack. The same substitution is made to the referenced assertion, and the result is pushed onto the stack. After the last label in the proof is processed, the stack must have a single entry that matches the expression in the $p statement containing the proof."
      },
      "date": 1656493785992
    },
    {
      "type": "remove",
      "id": "db23c89fc6b15511",
      "date": 1656493820876
    },
    {
      "type": "edit",
      "id": "6424d581b9c00988",
      "item": {
        "type": "markdown",
        "id": "6424d581b9c00988",
        "text": "# MMProof \nThe set of mandatory variables associated with an assertion is the set of (zero or more) variables in the assertion and in any active $e statements. The (possibly empty) set of mandatory hypotheses is the set of all active $f statements containing mandatory variables, together with all active $e statements. The set of mandatory $d statements associated with an assertion are those active $d statements whose variables are both among the\nassertionâ€™s mandatory variables.\n\n\n"
      },
      "date": 1656493824173
    },
    {
      "type": "edit",
      "id": "6424d581b9c00988",
      "item": {
        "type": "markdown",
        "id": "6424d581b9c00988",
        "text": "# MMProof \nThe set of mandatory variables associated with an assertion is the set of (zero or more) variables in the assertion and in any active $e statements. The (possibly empty) set of mandatory hypotheses is the set of all active $f statements containing mandatory variables, together with all active $e statements. The set of mandatory $d statements associated with an assertion are those active $d statements whose variables are both among the assertionâ€™s mandatory variables.\n\n\n"
      },
      "date": 1656493832483
    },
    {
      "type": "add",
      "id": "65e2ecb7050c7091",
      "item": {
        "type": "paragraph",
        "id": "65e2ecb7050c7091",
        "text": "https://ssl.metamath.org/"
      },
      "after": "ff7dea333383ffe5",
      "date": 1656494056344
    },
    {
      "type": "edit",
      "id": "65e2ecb7050c7091",
      "item": {
        "type": "paragraph",
        "id": "65e2ecb7050c7091",
        "text": "Metamath Home Page. [https://ssl.metamath.org/ site]"
      },
      "date": 1656494077263
    },
    {
      "type": "add",
      "id": "d9fb91e0036f6acf",
      "item": {
        "type": "paragraph",
        "id": "d9fb91e0036f6acf",
        "text": "* Metamath Proof Explorer Overview   "
      },
      "after": "65e2ecb7050c7091",
      "date": 1656494195530
    },
    {
      "type": "edit",
      "id": "d9fb91e0036f6acf",
      "item": {
        "type": "paragraph",
        "id": "d9fb91e0036f6acf",
        "text": "* Metamath Proof Explorer Overview. [https://ssl.metamath.org/mpeuni/mmset.html#overview page]"
      },
      "date": 1656494214054
    },
    {
      "type": "edit",
      "id": "d9fb91e0036f6acf",
      "item": {
        "type": "markdown",
        "id": "d9fb91e0036f6acf",
        "text": "* Metamath Proof Explorer Overview. [https://ssl.metamath.org/mpeuni/mmset.html#overview page]"
      },
      "date": 1656494215247
    },
    {
      "type": "edit",
      "id": "d9fb91e0036f6acf",
      "item": {
        "type": "markdown",
        "id": "d9fb91e0036f6acf",
        "text": "* Metamath Proof Explorer Overview. [https://ssl.metamath.org/mpeuni/mmset.html#overview page]\n> In fact, there is a philosophy called formalism which says that mathematics is a game of symbols with no intrinsic meaning. With that in mind, Metamath lets you watch the game being played and the pieces manipulated according to simple and precise rules, one step at a time.\n\nAs humans, we observe interesting patterns in these \"meaningless\" symbol strings as they evolve from the axioms, and we attach meaning to them. One result is the set of natural numbers, whose properties match those we observe when we count everyday objects, and their extensions to rational and real numbers. Of course, numbers were discovered centuries before set theory, and historically they were \"reversed engineered\" back to the axioms of set theory. The proof of 2 + 2 = 4 shows what was involved in that reverse engineering, representing the work of many mathematicians from Dedekind to von Neumann. At the other extreme of abstraction is the theory of infinite sets or transfinite cardinal numbers. Some of the world's most brilliant mathematicians have given us deep insight into this mysterious and wondrous universe, which is sometimes called \"Cantor's paradise.\" "
      },
      "date": 1656494265508
    },
    {
      "item": {
        "type": "factory",
        "id": "e5b0383db2dea4a6"
      },
      "id": "e5b0383db2dea4a6",
      "type": "add",
      "after": "da9af5de1fd0a47b",
      "date": 1656494289162
    },
    {
      "id": "e5b0383db2dea4a6",
      "type": "move",
      "order": [
        "ff7dea333383ffe5",
        "65e2ecb7050c7091",
        "d9fb91e0036f6acf",
        "e5b0383db2dea4a6",
        "7fff60811073cf49",
        "44f8733d962cb01f",
        "94ed9ec502bc1c47",
        "785d3130210c7df1",
        "83c1f1c615d67117",
        "6424d581b9c00988",
        "da9af5de1fd0a47b"
      ],
      "date": 1656494294521
    },
    {
      "type": "edit",
      "id": "e5b0383db2dea4a6",
      "item": {
        "type": "pagefold",
        "id": "e5b0383db2dea4a6",
        "text": "~"
      },
      "date": 1656494298083
    },
    {
      "type": "edit",
      "id": "d9fb91e0036f6acf",
      "item": {
        "type": "markdown",
        "id": "d9fb91e0036f6acf",
        "text": "* Metamath Proof Explorer Overview. [https://ssl.metamath.org/mpeuni/mmset.html#overview page]\n> In fact, there is a philosophy called *formalism* which says that mathematics is a game of symbols with no intrinsic meaning. With that in mind, Metamath lets you watch the game being played and the pieces manipulated according to simple and precise rules, one step at a time.\n\nAs humans, we observe interesting patterns in these \"meaningless\" symbol strings as they evolve from the axioms, and we attach meaning to them. One result is the set of natural numbers, whose properties match those we observe when we count everyday objects, and their extensions to rational and real numbers. Of course, numbers were discovered centuries before set theory, and historically they were \"reversed engineered\" back to the axioms of set theory. The proof of 2 + 2 = 4 shows what was involved in that reverse engineering, representing the work of many mathematicians from Dedekind to von Neumann. At the other extreme of abstraction is the theory of infinite sets or transfinite cardinal numbers. Some of the world's most brilliant mathematicians have given us deep insight into this mysterious and wondrous universe, which is sometimes called \"Cantor's paradise.\" "
      },
      "date": 1656494325864
    },
    {
      "item": {
        "type": "factory",
        "id": "3de512579e9fd1b9"
      },
      "id": "3de512579e9fd1b9",
      "type": "add",
      "after": "da9af5de1fd0a47b",
      "date": 1656494416554
    },
    {
      "id": "3de512579e9fd1b9",
      "type": "move",
      "order": [
        "ff7dea333383ffe5",
        "65e2ecb7050c7091",
        "d9fb91e0036f6acf",
        "e5b0383db2dea4a6",
        "7fff60811073cf49",
        "44f8733d962cb01f",
        "94ed9ec502bc1c47",
        "785d3130210c7df1",
        "83c1f1c615d67117",
        "3de512579e9fd1b9",
        "6424d581b9c00988",
        "da9af5de1fd0a47b"
      ],
      "date": 1656494421358
    },
    {
      "type": "edit",
      "id": "3de512579e9fd1b9",
      "item": {
        "type": "paragraph",
        "id": "3de512579e9fd1b9",
        "text": "Metamath's formal proofs are much more detailed than the proofs you see in textbooks. They are broken down into the most explicit detail possible so that you can see exactly what is going on. Each proof step represents a microscopic increment towards the final goal. But each step is derived from previous ones with a very simple rule, and you can verify for yourself the correctness of any proof with very little skill. All you need is patience. With no prior knowledge of advanced mathematics or even any mathematics at all, you can jump into the middle of any proof, from the most elementary to the most advanced, and understand immediately how the symbols were mechanically manipulated to go from one proof step to another, even if you don't know what the symbols themselves mean. In the next section we show you how. "
      },
      "date": 1656494423529
    },
    {
      "type": "add",
      "id": "106a18ad7217d32b",
      "item": {
        "type": "paragraph",
        "id": "106a18ad7217d32b",
        "text": "## How Metamath Proofs Work"
      },
      "after": "3de512579e9fd1b9",
      "date": 1656494531995
    },
    {
      "type": "edit",
      "id": "106a18ad7217d32b",
      "item": {
        "type": "paragraph",
        "id": "106a18ad7217d32b",
        "text": "# How Metamath Proofs Work"
      },
      "date": 1656494544775
    },
    {
      "type": "add",
      "id": "e06801e18e16a0a5",
      "item": {
        "type": "paragraph",
        "id": "e06801e18e16a0a5",
        "text": "The only rule you need to know in order to follow the symbol manipulations in a Metamath proof is substitution. Substitution consists of replacing the symbols for variables with expressions representing special cases of those variables. For example, in high-school algebra you learned that a + b = b + a, where a and b are variables (placeholders for numbers). Two substitution instances of this law are 5 + 3 = 3 + 5 and (x - 7) + c = c + (x - 7). That's the only mathematical concept you need! Substitution is just writing down a specific example of a more general formula.\n\n[Note for logicians: The substitution in Metamath proofs is, indeed, simply the direct replacement of a variable with an expression. The more complex proper substitution of traditional logic is a derived concept in Metamath, broken down into multiple primitive steps. Distinct variable provisos, which accompany certain axioms and are inherited by theorems, forbid unsound substitutions.] "
      },
      "after": "106a18ad7217d32b",
      "date": 1656494566318
    },
    {
      "type": "edit",
      "id": "106a18ad7217d32b",
      "item": {
        "type": "markdown",
        "id": "106a18ad7217d32b",
        "text": "# How Metamath Proofs Work"
      },
      "date": 1656494567934
    },
    {
      "item": {
        "type": "factory",
        "id": "9ead9a059f332bf2"
      },
      "id": "9ead9a059f332bf2",
      "type": "add",
      "after": "da9af5de1fd0a47b",
      "date": 1656494768957
    },
    {
      "type": "edit",
      "id": "9ead9a059f332bf2",
      "item": {
        "type": "pagefold",
        "id": "9ead9a059f332bf2",
        "text": "~"
      },
      "date": 1656494773485
    },
    {
      "item": {
        "type": "factory",
        "id": "650da7206de753f7"
      },
      "id": "650da7206de753f7",
      "type": "add",
      "after": "9ead9a059f332bf2",
      "date": 1656494775099
    },
    {
      "id": "650da7206de753f7",
      "type": "move",
      "order": [
        "ff7dea333383ffe5",
        "65e2ecb7050c7091",
        "d9fb91e0036f6acf",
        "e5b0383db2dea4a6",
        "7fff60811073cf49",
        "44f8733d962cb01f",
        "94ed9ec502bc1c47",
        "785d3130210c7df1",
        "83c1f1c615d67117",
        "3de512579e9fd1b9",
        "106a18ad7217d32b",
        "e06801e18e16a0a5",
        "650da7206de753f7",
        "6424d581b9c00988",
        "da9af5de1fd0a47b",
        "9ead9a059f332bf2"
      ],
      "date": 1656494779471
    },
    {
      "type": "edit",
      "id": "650da7206de753f7",
      "item": {
        "type": "pagefold",
        "id": "650da7206de753f7",
        "text": "~"
      },
      "date": 1656494782849
    },
    {
      "item": {
        "type": "factory",
        "id": "c6630aab647eca88"
      },
      "id": "c6630aab647eca88",
      "type": "add",
      "after": "9ead9a059f332bf2",
      "date": 1656494786851
    },
    {
      "type": "edit",
      "id": "c6630aab647eca88",
      "item": {
        "type": "markdown",
        "id": "c6630aab647eca88",
        "text": "# How it works"
      },
      "date": 1656494792685
    },
    {
      "item": {
        "type": "factory",
        "id": "c301f57c28cab5f3"
      },
      "id": "c301f57c28cab5f3",
      "type": "add",
      "after": "c6630aab647eca88",
      "date": 1656494808439
    },
    {
      "type": "edit",
      "id": "c301f57c28cab5f3",
      "item": {
        "type": "paragraph",
        "id": "c301f57c28cab5f3",
        "text": "To show you how this works in Metamath, we will break down and analyze a proof step in the proof of 2 + 2 = 4. Once you grasp this example, you will immediately be able to verify for yourself any proof in the databaseâ€”no further prerequisites are needed. You may not understand what all (or any) of the symbols mean, but you can follow the rules for how they are manipulated, like game pieces, to prove theorems.\n\nCompare this with the years of study it might take to be able to follow and verify a proof in an advanced math textbook. Typically such proofs will omit many details, implicitly assuming you have a deep knowledge of prior material. If you want to be a mathematician, you will still need those years of study to achieve a high-level understanding. Metamath will not provide you with that. But if you just want the ability to convince yourself that a string of math symbols that mathematicians call a \"theorem\" is a mechanical consequence of the axioms, Metamath's proof method lets you accomplish that.\n\nMetamath's conceptual simplicity has a tradeoff, which is the often large number of steps needed for a complete proof all the way back to the axioms. But the proofs have been computer-verified, and you can choose to study only the steps that interest you and still have complete confidence that the rest are correct. "
      },
      "date": 1656494812185
    },
    {
      "type": "add",
      "id": "ab42e8cf169fe3b8",
      "item": {
        "type": "paragraph",
        "id": "ab42e8cf169fe3b8",
        "text": "[â€¦] "
      },
      "after": "c301f57c28cab5f3",
      "date": 1656494817622
    },
    {
      "type": "edit",
      "id": "ab42e8cf169fe3b8",
      "item": {
        "type": "paragraph",
        "id": "ab42e8cf169fe3b8",
        "text": "[â€¦] â€“ https://ssl.metamath.org/mpeuni/mmset.html#overview"
      },
      "date": 1656494826428
    },
    {
      "type": "edit",
      "id": "ab42e8cf169fe3b8",
      "item": {
        "type": "markdown",
        "id": "ab42e8cf169fe3b8",
        "text": "[â€¦] â€“ https://ssl.metamath.org/mpeuni/mmset.html#overview"
      },
      "date": 1656494827758
    },
    {
      "type": "edit",
      "id": "44f8733d962cb01f",
      "item": {
        "type": "markdown",
        "id": "44f8733d962cb01f",
        "text": "peter.h.meadows â€” 2022-06-27 via [https://discord.com/channels/729445214812504107/735949717049049129/990965401510875158 discord]\nhttps://github.com/Peter-H-Meadows/GtMetamath\n"
      },
      "date": 1656495118024
    }
  ]
}