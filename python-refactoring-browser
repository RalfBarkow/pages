{
  "title": "Python Refactoring Browser",
  "story": [
    {
      "type": "html",
      "text": "Okay, Python fans, on [[Smalltalk Instead Of Python]] it sounds like one thing the Smalltalkers have going for 'em is the [[Refactoring Browser]]. So who's working on a Python equivalent?",
      "id": "86ffda4c4f44fad661a1d9aff6dcadae"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3f69796ba7719e83f030ca4dac587a7e"
    },
    {
      "type": "html",
      "text": "This page is now pretty out of date. Check out the [[Bicycle Repair Man]] page. - [[Phil Dawes]] (Jan 2002)",
      "id": "5921128d40789784dfce2246fa7c51ec"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3f69796ba7719e83f030ca4dac587a7e"
    },
    {
      "type": "html",
      "text": "\nCurrent Design Plan:",
      "id": "64664057a63d5de40e9a107c1952e080"
    },
    {
      "type": "html",
      "text": "\nLoad the file(s) you want to work on into buffers on a [[Bicycle Repair Man]] object, BRM uses tokenize and parser python modules to attach the AST and important token structures to each buffer it holds. Methods of [[Bicycle Repair Man]] are then available to do the refactorings.",
      "id": "3c8bad1f64e06b6f8f357ca413276d60"
    },
    {
      "type": "html",
      "text": "\nStatus:",
      "id": "aecae60f68a912d61c496d2ba7ab65e2"
    },
    {
      "type": "html",
      "text": "\nHalf of the basic analysis methods are working, and adding the rest of them won't be difficult. I'm using the enhanced abstract syntax tree from Python2C, it's easier. I've looked at converting the ast+ back into Python code, it looks pretty hairy to me, if someone feels like contributing code towards that, I'd be most appreciative. -- [[Shae Erisson]]",
      "id": "fefc2bee96df5ef00b85ecf9dd29b659"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3f69796ba7719e83f030ca4dac587a7e"
    },
    {
      "type": "html",
      "text": "Assuming that no one is working on such a thing right now, what should it be written in (I presume Python, but maybe there is a reason for doing something else), and are there existing Python development environments (IDLE, emacs python-mode, pythonwin) that could be leveraged to provide part of the environment such a creature should be written in? And if someone were to start working on making one what are the [[User Stories]] and which ones should be in the first few iterations?",
      "id": "307c27104c01762134cfff19db5cb85d"
    },
    {
      "type": "html",
      "text": "<i>Python is without question the language to write it in. IDLE and pythonwin come with all their own source directly available from themselves, so they're the obvious starting points. I don't know about the [[User Stories]], but the obvious name, for those who are familiar with the sketch, is \"[[Bicycle Repair Man]]\"</i>",
      "id": "c99ad43a9887242650b4c3869a17f5e2"
    },
    {
      "type": "html",
      "text": "\nPython, of course, but as for leveraging existing environments, the need for managing Objects (Python classes, instances, function libraries) in a GUI begs the question, \"Why not a [[Zope Application Server]] based IDE?\" The GUI extensions in the Mozilla project are a powerful enticement to take a serious look at this possibility.",
      "id": "163f1b8f8f728809d8bdc025ec70a57a"
    },
    {
      "type": "html",
      "text": "\nFrom a groupware point of view, what could be more natural than managing Python projects \"through the Web\"? Zope's internal server (HTTP, FTP, WebDAV, XML-RPC) can run on a desktop to support a single user, or heavier hardware for a team of coders, or any combination. Lots of possibilities here.",
      "id": "1c024e8b9fafcbc2b1c5b7d758ebc8b5"
    },
    {
      "type": "html",
      "text": "<i>Interesting, sounds like 'refactoring while in CVS.' Or maybe that's as close to a Smalltalk Image as Python can get.</i>",
      "id": "ffa5a22d7ca249c6c3cd5abd3f3f0924"
    },
    {
      "type": "html",
      "text": "\nActually, this could become literally true. A new Zope module was recently introduced that will allow Zope components to be stored in CVS, in the form of XML snippets. This may be a step or two over the edge, but it does present some interesting possibilities, especially in the realm of groupware for software projects.",
      "id": "c003858c311fc64f95d5083feade4ca3"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3f69796ba7719e83f030ca4dac587a7e"
    },
    {
      "type": "html",
      "text": "<b>Stories</b>",
      "id": "3e45d59f2fa4e161674616d311e17693"
    },
    {
      "type": "html",
      "text": " A particular method has been poorly named. Given the old name, and an improved name, all appropriate occurrences of the old name are changed to the new same, unless the new name is already in use.",
      "id": "495c6e8ae7918ee45b42b9640dfa48e9"
    },
    {
      "type": "html",
      "text": " A particular programmer wants to turn a collection of modules and routines that he's written into a set of objects and methods. [[Bicycle Repair Man]] provides the ability to encapsulate the functionality into each object and method, as well as allow code to be moved from the functions to the objects.",
      "id": "4c9756938c2b6da58401afffd9c7bf8a"
    },
    {
      "type": "html",
      "text": " The Ubuntu GNU/Linux install process is being demonstrated to new users. The question is asked \"Why is it installing something called 'bicyclereapir'?\" The successful attempt to determine <i>what</i> the bicyclerepair package does only leads to further questions....",
      "id": "899cbeb5b3e32cdfbc573bd66046a154"
    },
    {
      "type": "html",
      "text": "\n[[Martin Fowler]]'s book details more refactorings, many of which would apply to Python. We will want to consult it before this project completes (though the above two stories are probably sufficient to get it started.)",
      "id": "38015f9035d4e18a864356ae829bd27a"
    },
    {
      "type": "html",
      "text": "<i>minor noise removed</i>",
      "id": "644006e39c9c722913334d9671ac3dd7"
    },
    {
      "type": "html",
      "text": "\nStarting with an existing codebase (IDLE), while potentially a big timesaver, poses XP issues that wouldn't exist in a project started from scratch - depending upon how tightly coupled the new code has to be with the existing code(not very), it would probably take a while to write unit tests for the existing functionality, assuming the current behavior was even understood. And the existing code may not be written to allow easy testing, particularly because of GUI issues.",
      "id": "4dedc7ace4483499fef6596df1204ddd"
    },
    {
      "type": "html",
      "text": "\nHaving made those negative points, I <i>have</i> been reading the IDLE code trying to understand it, from the perspective of adding refactoring support.[qui?]",
      "id": "8a307cf88b62722f1dfd55550587feed"
    },
    {
      "type": "html",
      "text": "\nPages we'll write or add to when the project is well under way.",
      "id": "32a9af699ee2c0a473a360f5bb69402e"
    },
    {
      "type": "html",
      "text": "\n[[Extremely Open]] [[Open Source]] and [[Distributed Development]] the extreme way",
      "id": "9bc125c7aebea286aefd071c1a157dc8"
    },
    {
      "type": "html",
      "text": "\nNo one has commented on the fact that Python (usually) loads modules from a PYTHONPATH, and that Smalltalk uses an image. I think this has important implications for those that want to write refactoring browsers in Python.\nA Python-based browser will have to worry about finding and editing files, not just manipulating classes. ",
      "id": "fa8a6c5450f4c9d80a051c80fec4975f"
    },
    {
      "type": "html",
      "text": "<i>Just finding the files is no biggie:</i>",
      "id": "3797e3771e72074acf4921d6e85f7d05"
    },
    {
      "type": "code",
      "text": " imp.findModule(MyClass.__module__)",
      "id": "b277f7c37a2426438d600fec9d3b0ec9"
    },
    {
      "type": "html",
      "text": "<i>But you're right, [[Bicycle Repair Man]] will need to work with uncompiled source, or at best the output of the tokenize module, because what has to be written out is source, not bytecodes. A big deal?</i>",
      "id": "591011e8bfd907a11748425d119c8b83"
    },
    {
      "type": "html",
      "text": "\nActually, there's a bytecode-to-source decompiler: [http://www.crazy-compilers.com/decompyle/ www.crazy-compilers.com]",
      "id": "36de9688a0b5dee6cc7818120af3aa48"
    },
    {
      "type": "html",
      "text": "\nI don't think so. I remember a couple of years ago, a friend of mine wrote a C++ browser in Smalltalk that worked on files. It was really nice, actually. It parsed the C files into memory, broke them up into their various component sections, and edited them in memory. You had to explicitly save them to disk again when you were done. I think the same approach is feasible in Python. -- [[Anthony Lander]]",
      "id": "d585534c1d264807a234c9a9a818a592"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3f69796ba7719e83f030ca4dac587a7e"
    },
    {
      "type": "html",
      "text": "See Don Roberts PhD thesis on the refactoring browser. Some of the key ideas are that you need an abstract syntax tree representation of a program and you need a database that can let you answer questions like what is inherited by a particular class. [http://st-www.cs.uiuc.edu/~droberts/thesis.pdf st-www.cs.uiuc.edu]",
      "id": "6267bbd72d68d5fbfa2809551855d0fc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3f69796ba7719e83f030ca4dac587a7e"
    },
    {
      "type": "html",
      "text": "What about the way Python classes are mutable?",
      "id": "eb00b508f93b0c2c226c92bd5e1bb761"
    },
    {
      "type": "code",
      "text": " some_class.some_method = some_other_class.some_method",
      "id": "1feb46cb83064940f44d4e245bd5a146"
    },
    {
      "type": "html",
      "text": "Also, the dynamic scoping of Python can play havoc with this kind of analysis.",
      "id": "afd2c3509798e03acc1858ed0e7acef8"
    },
    {
      "type": "html",
      "text": "<i>The first isn't exactly something you do every day. But I'm not certain how the dynamic scoping would cause trouble. Can you explain further?</i>",
      "id": "a793072c02161e0562bf656d0faad14c"
    },
    {
      "type": "html",
      "text": "\nIt's not a big deal, you don't deal with the class/method after it's been assigned somewhere else, you only deal with it beforehand.",
      "id": "2f65ea2f7f9f68fe9683855b81115dd1"
    },
    {
      "type": "code",
      "text": " some_class.some_method = some_other_class.some_method",
      "id": "1feb46cb83064940f44d4e245bd5a146"
    },
    {
      "type": "html",
      "text": "In the example in the line above, when some_other_class.some_method gets renamed to some_other_class.another_method, you just change it to:",
      "id": "a3d74f542ba9bf4965243a474d4a2077"
    },
    {
      "type": "code",
      "text": " some_class.some_method = some_other_class.another_method",
      "id": "ba4d6e50d885ca9c66dc4b12ac8e6138"
    },
    {
      "type": "html",
      "text": "and you're done.",
      "id": "e81c06b6fa0129ed690be74ac7d20da8"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3f69796ba7719e83f030ca4dac587a7e"
    },
    {
      "type": "html",
      "text": "See Also [[Bicycle Repair Man]]",
      "id": "9c0210c03ccae81e93584bd3e1049fdc"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "3f69796ba7719e83f030ca4dac587a7e"
    },
    {
      "type": "html",
      "text": "[[[Category Refactoring Browser]]]",
      "id": "811e2d01b12ac7ca1472a455a3047c19"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?PythonRefactoringBrowser c2.com]",
      "id": "7bb874ebb6bb8c60e6ddffb0662778ce"
    }
  ],
  "journal": [
    {
      "date": 1334106544000,
      "id": "841cf88eee01a45c5208d36e1de04c00",
      "type": "create",
      "item": {
        "title": "Python Refactoring Browser",
        "story": [
          {
            "type": "html",
            "text": "Okay, Python fans, on [[Smalltalk Instead Of Python]] it sounds like one thing the Smalltalkers have going for 'em is the [[Refactoring Browser]]. So who's working on a Python equivalent?",
            "id": "86ffda4c4f44fad661a1d9aff6dcadae"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3f69796ba7719e83f030ca4dac587a7e"
          },
          {
            "type": "html",
            "text": "This page is now pretty out of date. Check out the [[Bicycle Repair Man]] page. - [[Phil Dawes]] (Jan 2002)",
            "id": "5921128d40789784dfce2246fa7c51ec"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3f69796ba7719e83f030ca4dac587a7e"
          },
          {
            "type": "html",
            "text": "\nCurrent Design Plan:",
            "id": "64664057a63d5de40e9a107c1952e080"
          },
          {
            "type": "html",
            "text": "\nLoad the file(s) you want to work on into buffers on a [[Bicycle Repair Man]] object, BRM uses tokenize and parser python modules to attach the AST and important token structures to each buffer it holds. Methods of [[Bicycle Repair Man]] are then available to do the refactorings.",
            "id": "3c8bad1f64e06b6f8f357ca413276d60"
          },
          {
            "type": "html",
            "text": "\nStatus:",
            "id": "aecae60f68a912d61c496d2ba7ab65e2"
          },
          {
            "type": "html",
            "text": "\nHalf of the basic analysis methods are working, and adding the rest of them won't be difficult. I'm using the enhanced abstract syntax tree from Python2C, it's easier. I've looked at converting the ast+ back into Python code, it looks pretty hairy to me, if someone feels like contributing code towards that, I'd be most appreciative. -- [[Shae Erisson]]",
            "id": "fefc2bee96df5ef00b85ecf9dd29b659"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3f69796ba7719e83f030ca4dac587a7e"
          },
          {
            "type": "html",
            "text": "Assuming that no one is working on such a thing right now, what should it be written in (I presume Python, but maybe there is a reason for doing something else), and are there existing Python development environments (IDLE, emacs python-mode, pythonwin) that could be leveraged to provide part of the environment such a creature should be written in? And if someone were to start working on making one what are the [[User Stories]] and which ones should be in the first few iterations?",
            "id": "307c27104c01762134cfff19db5cb85d"
          },
          {
            "type": "html",
            "text": "<i>Python is without question the language to write it in. IDLE and pythonwin come with all their own source directly available from themselves, so they're the obvious starting points. I don't know about the [[User Stories]], but the obvious name, for those who are familiar with the sketch, is \"[[Bicycle Repair Man]]\"</i>",
            "id": "c99ad43a9887242650b4c3869a17f5e2"
          },
          {
            "type": "html",
            "text": "\nPython, of course, but as for leveraging existing environments, the need for managing Objects (Python classes, instances, function libraries) in a GUI begs the question, \"Why not a [[Zope Application Server]] based IDE?\" The GUI extensions in the Mozilla project are a powerful enticement to take a serious look at this possibility.",
            "id": "163f1b8f8f728809d8bdc025ec70a57a"
          },
          {
            "type": "html",
            "text": "\nFrom a groupware point of view, what could be more natural than managing Python projects \"through the Web\"? Zope's internal server (HTTP, FTP, WebDAV, XML-RPC) can run on a desktop to support a single user, or heavier hardware for a team of coders, or any combination. Lots of possibilities here.",
            "id": "1c024e8b9fafcbc2b1c5b7d758ebc8b5"
          },
          {
            "type": "html",
            "text": "<i>Interesting, sounds like 'refactoring while in CVS.' Or maybe that's as close to a Smalltalk Image as Python can get.</i>",
            "id": "ffa5a22d7ca249c6c3cd5abd3f3f0924"
          },
          {
            "type": "html",
            "text": "\nActually, this could become literally true. A new Zope module was recently introduced that will allow Zope components to be stored in CVS, in the form of XML snippets. This may be a step or two over the edge, but it does present some interesting possibilities, especially in the realm of groupware for software projects.",
            "id": "c003858c311fc64f95d5083feade4ca3"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3f69796ba7719e83f030ca4dac587a7e"
          },
          {
            "type": "html",
            "text": "<b>Stories</b>",
            "id": "3e45d59f2fa4e161674616d311e17693"
          },
          {
            "type": "html",
            "text": " A particular method has been poorly named. Given the old name, and an improved name, all appropriate occurrences of the old name are changed to the new same, unless the new name is already in use.",
            "id": "495c6e8ae7918ee45b42b9640dfa48e9"
          },
          {
            "type": "html",
            "text": " A particular programmer wants to turn a collection of modules and routines that he's written into a set of objects and methods. [[Bicycle Repair Man]] provides the ability to encapsulate the functionality into each object and method, as well as allow code to be moved from the functions to the objects.",
            "id": "4c9756938c2b6da58401afffd9c7bf8a"
          },
          {
            "type": "html",
            "text": " The Ubuntu GNU/Linux install process is being demonstrated to new users. The question is asked \"Why is it installing something called 'bicyclereapir'?\" The successful attempt to determine <i>what</i> the bicyclerepair package does only leads to further questions....",
            "id": "899cbeb5b3e32cdfbc573bd66046a154"
          },
          {
            "type": "html",
            "text": "\n[[Martin Fowler]]'s book details more refactorings, many of which would apply to Python. We will want to consult it before this project completes (though the above two stories are probably sufficient to get it started.)",
            "id": "38015f9035d4e18a864356ae829bd27a"
          },
          {
            "type": "html",
            "text": "<i>minor noise removed</i>",
            "id": "644006e39c9c722913334d9671ac3dd7"
          },
          {
            "type": "html",
            "text": "\nStarting with an existing codebase (IDLE), while potentially a big timesaver, poses XP issues that wouldn't exist in a project started from scratch - depending upon how tightly coupled the new code has to be with the existing code(not very), it would probably take a while to write unit tests for the existing functionality, assuming the current behavior was even understood. And the existing code may not be written to allow easy testing, particularly because of GUI issues.",
            "id": "4dedc7ace4483499fef6596df1204ddd"
          },
          {
            "type": "html",
            "text": "\nHaving made those negative points, I <i>have</i> been reading the IDLE code trying to understand it, from the perspective of adding refactoring support.[qui?]",
            "id": "8a307cf88b62722f1dfd55550587feed"
          },
          {
            "type": "html",
            "text": "\nPages we'll write or add to when the project is well under way.",
            "id": "32a9af699ee2c0a473a360f5bb69402e"
          },
          {
            "type": "html",
            "text": "\n[[Extremely Open]] [[Open Source]] and [[Distributed Development]] the extreme way",
            "id": "9bc125c7aebea286aefd071c1a157dc8"
          },
          {
            "type": "html",
            "text": "\nNo one has commented on the fact that Python (usually) loads modules from a PYTHONPATH, and that Smalltalk uses an image. I think this has important implications for those that want to write refactoring browsers in Python.\nA Python-based browser will have to worry about finding and editing files, not just manipulating classes. ",
            "id": "fa8a6c5450f4c9d80a051c80fec4975f"
          },
          {
            "type": "html",
            "text": "<i>Just finding the files is no biggie:</i>",
            "id": "3797e3771e72074acf4921d6e85f7d05"
          },
          {
            "type": "code",
            "text": " imp.findModule(MyClass.__module__)",
            "id": "b277f7c37a2426438d600fec9d3b0ec9"
          },
          {
            "type": "html",
            "text": "<i>But you're right, [[Bicycle Repair Man]] will need to work with uncompiled source, or at best the output of the tokenize module, because what has to be written out is source, not bytecodes. A big deal?</i>",
            "id": "591011e8bfd907a11748425d119c8b83"
          },
          {
            "type": "html",
            "text": "\nActually, there's a bytecode-to-source decompiler: [http://www.crazy-compilers.com/decompyle/ www.crazy-compilers.com]",
            "id": "36de9688a0b5dee6cc7818120af3aa48"
          },
          {
            "type": "html",
            "text": "\nI don't think so. I remember a couple of years ago, a friend of mine wrote a C++ browser in Smalltalk that worked on files. It was really nice, actually. It parsed the C files into memory, broke them up into their various component sections, and edited them in memory. You had to explicitly save them to disk again when you were done. I think the same approach is feasible in Python. -- [[Anthony Lander]]",
            "id": "d585534c1d264807a234c9a9a818a592"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3f69796ba7719e83f030ca4dac587a7e"
          },
          {
            "type": "html",
            "text": "See Don Roberts PhD thesis on the refactoring browser. Some of the key ideas are that you need an abstract syntax tree representation of a program and you need a database that can let you answer questions like what is inherited by a particular class. [http://st-www.cs.uiuc.edu/~droberts/thesis.pdf st-www.cs.uiuc.edu]",
            "id": "6267bbd72d68d5fbfa2809551855d0fc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3f69796ba7719e83f030ca4dac587a7e"
          },
          {
            "type": "html",
            "text": "What about the way Python classes are mutable?",
            "id": "eb00b508f93b0c2c226c92bd5e1bb761"
          },
          {
            "type": "code",
            "text": " some_class.some_method = some_other_class.some_method",
            "id": "1feb46cb83064940f44d4e245bd5a146"
          },
          {
            "type": "html",
            "text": "Also, the dynamic scoping of Python can play havoc with this kind of analysis.",
            "id": "afd2c3509798e03acc1858ed0e7acef8"
          },
          {
            "type": "html",
            "text": "<i>The first isn't exactly something you do every day. But I'm not certain how the dynamic scoping would cause trouble. Can you explain further?</i>",
            "id": "a793072c02161e0562bf656d0faad14c"
          },
          {
            "type": "html",
            "text": "\nIt's not a big deal, you don't deal with the class/method after it's been assigned somewhere else, you only deal with it beforehand.",
            "id": "2f65ea2f7f9f68fe9683855b81115dd1"
          },
          {
            "type": "code",
            "text": " some_class.some_method = some_other_class.some_method",
            "id": "1feb46cb83064940f44d4e245bd5a146"
          },
          {
            "type": "html",
            "text": "In the example in the line above, when some_other_class.some_method gets renamed to some_other_class.another_method, you just change it to:",
            "id": "a3d74f542ba9bf4965243a474d4a2077"
          },
          {
            "type": "code",
            "text": " some_class.some_method = some_other_class.another_method",
            "id": "ba4d6e50d885ca9c66dc4b12ac8e6138"
          },
          {
            "type": "html",
            "text": "and you're done.",
            "id": "e81c06b6fa0129ed690be74ac7d20da8"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3f69796ba7719e83f030ca4dac587a7e"
          },
          {
            "type": "html",
            "text": "See Also [[Bicycle Repair Man]]",
            "id": "9c0210c03ccae81e93584bd3e1049fdc"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "3f69796ba7719e83f030ca4dac587a7e"
          },
          {
            "type": "html",
            "text": "[[[Category Refactoring Browser]]]",
            "id": "811e2d01b12ac7ca1472a455a3047c19"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?PythonRefactoringBrowser c2.com]",
            "id": "7bb874ebb6bb8c60e6ddffb0662778ce"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1628171235089
    }
  ]
}