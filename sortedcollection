{
  "title": "SortedCollection",
  "story": [
    {
      "type": "markdown",
      "id": "2028d200d3f163e7",
      "text": "I am a collection close to an [[OrderedCollection]] at the exception that I keep my elements sorted by using a [[Block]].\n"
    },
    {
      "type": "markdown",
      "id": "303577ab932f1870",
      "text": "Like my superclass, I am a collection that can grow in size but I keep my elements sorted.\nBecause of that you cannot add elements at a fix index (with #at:put: or #insert:before: methods for example).\n"
    },
    {
      "type": "markdown",
      "id": "fcb18d2bc9051d6e",
      "text": "The [[sort block]] I use should return a boolean. It takes 2 elements and return true if the first parameter should be before the second, else false.\n\nI should be used only if you really need to keep the elements sorted all the time (but there are some exceptions, see at the end). If you do not need it, use OrderedCollection (and possibly his #sort: method).\n\n\n"
    },
    {
      "type": "markdown",
      "id": "01ae1c1a38e65737",
      "text": "### Public API and Key Messages\n\n- class method: #sortUsing:  aBlockOrSortFunction is a [[constructor]]. \t\t\n- #sort: aBlock is a function to change the way I am sorted. I will also update the index of my elements with the new block.\n\n### Example\n"
    },
    {
      "type": "markdown",
      "id": "8f059043f651a853",
      "text": " \n### Internal Representation and Key Implementation Points.\nInstance Variables\n-\tsortBlock:\t\t<Block> \t\tThis is  a sort block used to keep me sorted. I can take 2 parameters that are two values and I return true if the first parameter should be before the second.\n\nI refuse the methods that add elements at a fix index.\n\nWhen the user is adding an element, I use some methods like #reSort or #indexForInserting: to add an element at the right position.\n\n### Discussion\n\n- (1) sort: and sortBlock: can be used to set an order to my elements but uses different implementation of the sort algorithm... See  https://pharo.fogbugz.com/f/cases/17925/Why-SortedCollection-sort-and-sortBlock-do-not-uses-the-same-method-to-sort.\n- (2) DO NOT USE ADDLAST:!!!! \nhttps://pharo.fogbugz.com/f/cases/14812/addLast-should-not-work-in-SortedCollection\n\n```\nx := SortedCollection with: 4 with: 3 with: 2 with: 1 with: 7.\ny:=x addLast: 6; yourself.\ny isSorted \n>>> false\n```"
    },
    {
      "type": "code",
      "id": "5b412d2c1f0d5f5f",
      "text": "\tsortColl := SortedCollection sortUsing: [ :elem1 :elem2 | elem1 < elem2 ].\n\tsortColl\n\t\tadd: 4;\n\t\tadd: 2;\n\t\tadd: 1;\n\t\tadd: 2.\n\tsortColl. \t\t\"result: a SortedCollection(1 2 2 4)\"\n\t\n\t\"But you can also add a collection.\"\n\t\n\tsortColl addAll: #(3 5 0 6).\n\tsortColl. \t\t\"result: a SortedCollection(0 1 2 2 3 4 5 6)\"\n\t\t\t\n\t\"You can charge the block, imagine you have a collection with number and you want at the beginning the odd elements sorted by value then the even elements sorted by value.\"\n\t\n\tsortColl \n\t\tsort:\n\t\t\t[ :int1 :int2 | \n\t\t\t\t((int1 even and: [ int2 even ]) or: [ int1 odd and: [ int2 odd ] ])\n\t\t\t\t\tifTrue: [ int1 < int2 ]\n\t\t\t\t\tifFalse: [ int1 odd ] \n\t\t\t].\n\tsortColl \t\t\"result: a SortedCollection(1 3 5 0 2 2 4 6)\"\n\n"
    }
  ],
  "journal": [
    {
      "type": "add",
      "id": "01ae1c1a38e65737",
      "item": {
        "type": "markdown",
        "id": "01ae1c1a38e65737",
        "text": "### Public API and Key Messages\n\n- class method: #sortUsing:  aBlockOrSortFunction is a [[constructor]]. \t\t\n- #sort: aBlock is a function to change the way I am sorted. I will also update the index of my elements with the new block.\n\n### Example\n"
      },
      "after": "fcb18d2bc9051d6e",
      "date": 1654447503757
    },
    {
      "type": "edit",
      "id": "fcb18d2bc9051d6e",
      "item": {
        "type": "markdown",
        "id": "fcb18d2bc9051d6e",
        "text": "The sort block I use should return a boolean. It takes 2 elements and return true if the first parameter should be before the second, else false.\n\nI should be used only if you really need to keep the elements sorted all the time (but there are some exceptions, see at the end). If you do not need it, use OrderedCollection (and possibly his #sort: method).\n\n\n"
      },
      "date": 1654447495902
    },
    {
      "type": "add",
      "id": "fcb18d2bc9051d6e",
      "item": {
        "type": "markdown",
        "id": "fcb18d2bc9051d6e",
        "text": "The sort block I use should return a boolean. It takes 2 elements and return true if the first parameter should be before the second, else false.\n\nI should be used only if you really need to keep the elements sorted all the time (but there are some exceptions, see at the end). If you do not need it, use OrderedCollection (and possibly his #sort: method).\n\n\n"
      },
      "after": "303577ab932f1870",
      "date": 1654447465339
    },
    {
      "type": "edit",
      "id": "303577ab932f1870",
      "item": {
        "type": "markdown",
        "id": "303577ab932f1870",
        "text": "Like my superclass, I am a collection that can grow in size but I keep my elements sorted.\nBecause of that you cannot add elements at a fix index (with #at:put: or #insert:before: methods for example).\n"
      },
      "date": 1654447454370
    },
    {
      "type": "add",
      "id": "303577ab932f1870",
      "item": {
        "type": "markdown",
        "id": "303577ab932f1870",
        "text": "Like my superclass, I am a collection that can grow in size but I keep my elements sorted.\nBecause of that you cannot add elements at a fix index (with #at:put: or #insert:before: methods for example).\n"
      },
      "after": "2028d200d3f163e7",
      "date": 1654447415892
    },
    {
      "type": "edit",
      "id": "2028d200d3f163e7",
      "item": {
        "type": "markdown",
        "id": "2028d200d3f163e7",
        "text": "I am a collection close to an OrderedCollection at the exception that I keep my elements sorted by using a [[Block]].\n"
      },
      "date": 1654447407709
    },
    {
      "type": "edit",
      "id": "2028d200d3f163e7",
      "item": {
        "type": "markdown",
        "id": "2028d200d3f163e7",
        "text": "I am a collection close to an OrderedCollection at the exception that I keep my elements sorted by using a [[Block]].\n"
      },
      "date": 1654447386091
    },
    {
      "item": {
        "type": "markdown",
        "id": "2028d200d3f163e7",
        "text": "I am a collection close to an OrderedCollection at the exception that I keep my elements sorted by using a [[Block]].\n"
      },
      "id": "2028d200d3f163e7",
      "type": "add",
      "date": 1654447383899
    },
    {
      "type": "create",
      "item": {
        "title": "SortedCollection",
        "story": []
      },
      "date": 1654447382091
    },
    {
      "type": "edit",
      "id": "2028d200d3f163e7",
      "item": {
        "type": "markdown",
        "id": "2028d200d3f163e7",
        "text": "I am a collection close to an OrderedCollection at the exception that I keep my elements sorted by using a [[Block]].\n"
      },
      "date": 1654447413312
    },
    {
      "type": "edit",
      "id": "01ae1c1a38e65737",
      "item": {
        "type": "markdown",
        "id": "01ae1c1a38e65737",
        "text": "### Public API and Key Messages\n\n- class method: #sortUsing:  aBlockOrSortFunction is a [[constructor]]. \t\t\n- #sort: aBlock is a function to change the way I am sorted. I will also update the index of my elements with the new block.\n\n### Example\n"
      },
      "date": 1654447541824
    },
    {
      "type": "edit",
      "id": "01ae1c1a38e65737",
      "item": {
        "type": "markdown",
        "id": "01ae1c1a38e65737",
        "text": "### Public API and Key Messages\n\n- class method: #sortUsing:  aBlockOrSortFunction is a [[constructor]]. \t\t\n- #sort: aBlock is a function to change the way I am sorted. I will also update the index of my elements with the new block.\n\n### Example\n"
      },
      "date": 1654447594139
    },
    {
      "type": "add",
      "id": "c09620ecc0556d25",
      "item": {
        "type": "markdown",
        "id": "c09620ecc0556d25",
        "text": ""
      },
      "after": "01ae1c1a38e65737",
      "date": 1654447604047
    },
    {
      "item": {
        "type": "code",
        "id": "5b412d2c1f0d5f5f",
        "text": "\n\tsortColl := SortedCollection sortUsing: [ :elem1 :elem2 | elem1 < elem2 ].\n\tsortColl\n\t\tadd: 4;\n\t\tadd: 2;\n\t\tadd: 1;\n\t\tadd: 2.\n\tsortColl. \t\t\"result: a SortedCollection(1 2 2 4)\"\n\t\n\t\"But you can also add a collection.\"\n\t\n\tsortColl addAll: #(3 5 0 6).\n\tsortColl. \t\t\"result: a SortedCollection(0 1 2 2 3 4 5 6)\"\n\t\t\t\n\t\"You can charge the block, imagine you have a collection with number and you want at the beginning the odd elements sorted by value then the even elements sorted by value.\"\n\t\n\tsortColl \n\t\tsort:\n\t\t\t[ :int1 :int2 | \n\t\t\t\t((int1 even and: [ int2 even ]) or: [ int1 odd and: [ int2 odd ] ])\n\t\t\t\t\tifTrue: [ int1 < int2 ]\n\t\t\t\t\tifFalse: [ int1 odd ] \n\t\t\t].\n\tsortColl \t\t\"result: a SortedCollection(1 3 5 0 2 2 4 6)\"\n\n"
      },
      "id": "5b412d2c1f0d5f5f",
      "type": "add",
      "after": "8f059043f651a853",
      "date": 1654447607105
    },
    {
      "id": "5b412d2c1f0d5f5f",
      "type": "move",
      "order": [
        "2028d200d3f163e7",
        "303577ab932f1870",
        "fcb18d2bc9051d6e",
        "01ae1c1a38e65737",
        "c09620ecc0556d25",
        "5b412d2c1f0d5f5f",
        "8f059043f651a853"
      ],
      "date": 1654447610381,
      "error": {
        "type": "error",
        "msg": "Internal Server Error",
        "response": "Server Ignoring move. Try reload."
      }
    },
    {
      "type": "add",
      "id": "8f059043f651a853",
      "item": {
        "type": "markdown",
        "id": "8f059043f651a853",
        "text": " \n### Internal Representation and Key Implementation Points.\nInstance Variables\n-\tsortBlock:\t\t<Block> \t\tThis is  a sort block used to keep me sorted. I can take 2 parameters that are two values and I return true if the first parameter should be before the second.\n\nI refuse the methods that add elements at a fix index.\n\nWhen the user is adding an element, I use some methods like #reSort or #indexForInserting: to add an element at the right position.\n\n### Discussion\n\n- (1) sort: and sortBlock: can be used to set an order to my elements but uses different implementation of the sort algorithm... See  https://pharo.fogbugz.com/f/cases/17925/Why-SortedCollection-sort-and-sortBlock-do-not-uses-the-same-method-to-sort.\n- (2) DO NOT USE ADDLAST:!!!! \nhttps://pharo.fogbugz.com/f/cases/14812/addLast-should-not-work-in-SortedCollection\n\n```\nx := SortedCollection with: 4 with: 3 with: 2 with: 1 with: 7.\ny:=x addLast: 6; yourself.\ny isSorted \n>>> false\n```"
      },
      "after": "c09620ecc0556d25",
      "date": 1654447613696
    },
    {
      "type": "remove",
      "id": "c09620ecc0556d25",
      "date": 1654447616601
    },
    {
      "type": "edit",
      "id": "5b412d2c1f0d5f5f",
      "item": {
        "type": "code",
        "id": "5b412d2c1f0d5f5f",
        "text": "\n\tsortColl := SortedCollection sortUsing: [ :elem1 :elem2 | elem1 < elem2 ].\n\tsortColl\n\t\tadd: 4;\n\t\tadd: 2;\n\t\tadd: 1;\n\t\tadd: 2.\n\tsortColl. \t\t\"result: a SortedCollection(1 2 2 4)\"\n\t\n\t\"But you can also add a collection.\"\n\t\n\tsortColl addAll: #(3 5 0 6).\n\tsortColl. \t\t\"result: a SortedCollection(0 1 2 2 3 4 5 6)\"\n\t\t\t\n\t\"You can charge the block, imagine you have a collection with number and you want at the beginning the odd elements sorted by value then the even elements sorted by value.\"\n\t\n\tsortColl \n\t\tsort:\n\t\t\t[ :int1 :int2 | \n\t\t\t\t((int1 even and: [ int2 even ]) or: [ int1 odd and: [ int2 odd ] ])\n\t\t\t\t\tifTrue: [ int1 < int2 ]\n\t\t\t\t\tifFalse: [ int1 odd ] \n\t\t\t].\n\tsortColl \t\t\"result: a SortedCollection(1 3 5 0 2 2 4 6)\"\n\n"
      },
      "date": 1654447617548
    },
    {
      "type": "edit",
      "id": "5b412d2c1f0d5f5f",
      "item": {
        "type": "code",
        "id": "5b412d2c1f0d5f5f",
        "text": "\n\tsortColl := SortedCollection sortUsing: [ :elem1 :elem2 | elem1 < elem2 ].\n\tsortColl\n\t\tadd: 4;\n\t\tadd: 2;\n\t\tadd: 1;\n\t\tadd: 2.\n\tsortColl. \t\t\"result: a SortedCollection(1 2 2 4)\"\n\t\n\t\"But you can also add a collection.\"\n\t\n\tsortColl addAll: #(3 5 0 6).\n\tsortColl. \t\t\"result: a SortedCollection(0 1 2 2 3 4 5 6)\"\n\t\t\t\n\t\"You can charge the block, imagine you have a collection with number and you want at the beginning the odd elements sorted by value then the even elements sorted by value.\"\n\t\n\tsortColl \n\t\tsort:\n\t\t\t[ :int1 :int2 | \n\t\t\t\t((int1 even and: [ int2 even ]) or: [ int1 odd and: [ int2 odd ] ])\n\t\t\t\t\tifTrue: [ int1 < int2 ]\n\t\t\t\t\tifFalse: [ int1 odd ] \n\t\t\t].\n\tsortColl \t\t\"result: a SortedCollection(1 3 5 0 2 2 4 6)\"\n\n"
      },
      "date": 1654447639937
    },
    {
      "type": "fork",
      "date": 1654447648709
    },
    {
      "type": "edit",
      "id": "5b412d2c1f0d5f5f",
      "item": {
        "type": "code",
        "id": "5b412d2c1f0d5f5f",
        "text": "\tsortColl := SortedCollection sortUsing: [ :elem1 :elem2 | elem1 < elem2 ].\n\tsortColl\n\t\tadd: 4;\n\t\tadd: 2;\n\t\tadd: 1;\n\t\tadd: 2.\n\tsortColl. \t\t\"result: a SortedCollection(1 2 2 4)\"\n\t\n\t\"But you can also add a collection.\"\n\t\n\tsortColl addAll: #(3 5 0 6).\n\tsortColl. \t\t\"result: a SortedCollection(0 1 2 2 3 4 5 6)\"\n\t\t\t\n\t\"You can charge the block, imagine you have a collection with number and you want at the beginning the odd elements sorted by value then the even elements sorted by value.\"\n\t\n\tsortColl \n\t\tsort:\n\t\t\t[ :int1 :int2 | \n\t\t\t\t((int1 even and: [ int2 even ]) or: [ int1 odd and: [ int2 odd ] ])\n\t\t\t\t\tifTrue: [ int1 < int2 ]\n\t\t\t\t\tifFalse: [ int1 odd ] \n\t\t\t].\n\tsortColl \t\t\"result: a SortedCollection(1 3 5 0 2 2 4 6)\"\n\n"
      },
      "date": 1654447649125
    },
    {
      "type": "edit",
      "id": "2028d200d3f163e7",
      "item": {
        "type": "markdown",
        "id": "2028d200d3f163e7",
        "text": "I am a collection close to an [[OrderedCollection]] at the exception that I keep my elements sorted by using a [[Block]].\n"
      },
      "date": 1654609005192
    },
    {
      "type": "edit",
      "id": "fcb18d2bc9051d6e",
      "item": {
        "type": "markdown",
        "id": "fcb18d2bc9051d6e",
        "text": "The [[sort block]] I use should return a boolean. It takes 2 elements and return true if the first parameter should be before the second, else false.\n\nI should be used only if you really need to keep the elements sorted all the time (but there are some exceptions, see at the end). If you do not need it, use OrderedCollection (and possibly his #sort: method).\n\n\n"
      },
      "date": 1654609032520
    }
  ]
}