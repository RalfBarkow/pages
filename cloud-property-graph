{
  "title": "Cloud Property Graph",
  "story": [
    {
      "type": "paragraph",
      "id": "2d8a0a2501ff3048",
      "text": "We present the Cloud Property Graph (CloudPG). It is an extension of a Code Property Graph (CPG) [1], which itself is a labeled directed graph, representing source code. A CPG generates a language-independent representation of an application’s structural components, i.e. classes or methods, as well as information about data flows or program dependence. To build the CloudPG, we enrich this graph with additional nodes and edges that represent the actual deployment of the code as service(s) in the cloud at runtime."
    },
    {
      "type": "paragraph",
      "id": "746cc396af0f5068",
      "text": "[…] Bootstrapping the Cloud Property Graph "
    },
    {
      "type": "paragraph",
      "id": "dbaab4159242d3c8",
      "text": "Figure 2 shows the architecture of the framework, including its modules. First, a list of possible source code repositories which are deployed as part of the cloud service needs to be identified. The source code is then translated into the language-independent representation of a CPG following the regular process of graph-based static code analysis."
    },
    {
      "type": "pagefold",
      "id": "dff6c96221e831b5",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "1ebff69fcd1e3e1a",
      "text": "\nBANSE, Christian, KUNZ, Immanuel, SCHNEIDER, Angelika and WEISS, Konrad, 2021. Cloud Property Graph: Connecting Cloud Security Assessments with Static Code Analysis. In: 2021 IEEE 14th International Conference on Cloud Computing (CLOUD). September 2021. p. 13–19. DOI 10.1109/CLOUD53861.2021.00014. "
    },
    {
      "type": "markdown",
      "id": "4b493dfa39211a41",
      "text": "> In this paper, we present the Cloud Property Graph (CloudPG), which bridges the gap between static code analysis and runtime security assessment of cloud services. The CloudPG is able to resolve data flows between cloud applications deployed on different resources, and contextualizes the graph with runtime information, such as encryption settings. To provide a vendor- and technology-independent representation of a cloud service’s security posture, the graph is based on an ontology of cloud resources, their functionalities and security features. We show, using an example, that our CloudPG framework can be used by security experts to identify weaknesses in their cloud deployments, spanning multiple vendors or technologies, such as AWS, Azure and Kubernetes. This includes misconfigurations, such as publicly accessible storages or undesired data flows within a cloud service, as restricted by regulations such as GDPR.\n"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Cloud Property Graph",
        "story": []
      },
      "date": 1664747403441
    },
    {
      "item": {
        "type": "factory",
        "id": "1ebff69fcd1e3e1a"
      },
      "id": "1ebff69fcd1e3e1a",
      "type": "add",
      "date": 1664747413681
    },
    {
      "type": "edit",
      "id": "1ebff69fcd1e3e1a",
      "item": {
        "type": "paragraph",
        "id": "1ebff69fcd1e3e1a",
        "text": "\nBANSE, Christian, KUNZ, Immanuel, SCHNEIDER, Angelika and WEISS, Konrad, 2021. Cloud Property Graph: Connecting Cloud Security Assessments with Static Code Analysis. In: 2021 IEEE 14th International Conference on Cloud Computing (CLOUD). September 2021. p. 13–19. DOI 10.1109/CLOUD53861.2021.00014. "
      },
      "date": 1664747427442
    },
    {
      "type": "add",
      "id": "4b493dfa39211a41",
      "item": {
        "type": "paragraph",
        "id": "4b493dfa39211a41",
        "text": "> In this paper, we present the Cloud Property Graph (CloudPG), which bridges the gap between static code analysis and runtime security assessment of cloud services. The CloudPG is able to resolve data flows between cloud applications deployed on different resources, and contextualizes the graph with runtime information, such as encryption settings. To provide a vendorand technology-independent representation of a cloud service’s security posture, the graph is based on an ontology of cloud resources, their functionalities and security features. We show, using an example, that our CloudPG framework can be used by security experts to identify weaknesses in their cloud deployments, spanning multiple vendors or technologies, such as AWS, Azure and Kubernetes. This includes misconfigurations, such as publicly accessible storages or undesired data flows within a cloud service, as restricted by regulations such as GDPR.\n"
      },
      "after": "1ebff69fcd1e3e1a",
      "date": 1664747428646
    },
    {
      "type": "edit",
      "id": "4b493dfa39211a41",
      "item": {
        "type": "markdown",
        "id": "4b493dfa39211a41",
        "text": "> In this paper, we present the Cloud Property Graph (CloudPG), which bridges the gap between static code analysis and runtime security assessment of cloud services. The CloudPG is able to resolve data flows between cloud applications deployed on different resources, and contextualizes the graph with runtime information, such as encryption settings. To provide a vendorand technology-independent representation of a cloud service’s security posture, the graph is based on an ontology of cloud resources, their functionalities and security features. We show, using an example, that our CloudPG framework can be used by security experts to identify weaknesses in their cloud deployments, spanning multiple vendors or technologies, such as AWS, Azure and Kubernetes. This includes misconfigurations, such as publicly accessible storages or undesired data flows within a cloud service, as restricted by regulations such as GDPR.\n"
      },
      "date": 1664747429715
    },
    {
      "type": "edit",
      "id": "4b493dfa39211a41",
      "item": {
        "type": "markdown",
        "id": "4b493dfa39211a41",
        "text": "> In this paper, we present the Cloud Property Graph (CloudPG), which bridges the gap between static code analysis and runtime security assessment of cloud services. The CloudPG is able to resolve data flows between cloud applications deployed on different resources, and contextualizes the graph with runtime information, such as encryption settings. To provide a vendor and technology-independent representation of a cloud service’s security posture, the graph is based on an ontology of cloud resources, their functionalities and security features. We show, using an example, that our CloudPG framework can be used by security experts to identify weaknesses in their cloud deployments, spanning multiple vendors or technologies, such as AWS, Azure and Kubernetes. This includes misconfigurations, such as publicly accessible storages or undesired data flows within a cloud service, as restricted by regulations such as GDPR.\n"
      },
      "date": 1664747458671
    },
    {
      "type": "edit",
      "id": "4b493dfa39211a41",
      "item": {
        "type": "markdown",
        "id": "4b493dfa39211a41",
        "text": "> In this paper, we present the Cloud Property Graph (CloudPG), which bridges the gap between static code analysis and runtime security assessment of cloud services. The CloudPG is able to resolve data flows between cloud applications deployed on different resources, and contextualizes the graph with runtime information, such as encryption settings. To provide a vendor- and technology-independent representation of a cloud service’s security posture, the graph is based on an ontology of cloud resources, their functionalities and security features. We show, using an example, that our CloudPG framework can be used by security experts to identify weaknesses in their cloud deployments, spanning multiple vendors or technologies, such as AWS, Azure and Kubernetes. This includes misconfigurations, such as publicly accessible storages or undesired data flows within a cloud service, as restricted by regulations such as GDPR.\n"
      },
      "date": 1664747473807
    },
    {
      "item": {
        "type": "factory",
        "id": "dff6c96221e831b5"
      },
      "id": "dff6c96221e831b5",
      "type": "add",
      "after": "4b493dfa39211a41",
      "date": 1664747510565
    },
    {
      "type": "edit",
      "id": "dff6c96221e831b5",
      "item": {
        "type": "pagefold",
        "id": "dff6c96221e831b5",
        "text": "~"
      },
      "date": 1664747513892
    },
    {
      "id": "dff6c96221e831b5",
      "type": "move",
      "order": [
        "dff6c96221e831b5",
        "1ebff69fcd1e3e1a",
        "4b493dfa39211a41"
      ],
      "date": 1664747517016
    },
    {
      "item": {
        "type": "factory",
        "id": "2d8a0a2501ff3048"
      },
      "id": "2d8a0a2501ff3048",
      "type": "add",
      "after": "4b493dfa39211a41",
      "date": 1664747520209
    },
    {
      "id": "2d8a0a2501ff3048",
      "type": "move",
      "order": [
        "2d8a0a2501ff3048",
        "dff6c96221e831b5",
        "1ebff69fcd1e3e1a",
        "4b493dfa39211a41"
      ],
      "date": 1664747529091
    },
    {
      "type": "edit",
      "id": "2d8a0a2501ff3048",
      "item": {
        "type": "paragraph",
        "id": "2d8a0a2501ff3048",
        "text": "We present the Cloud Property Graph (CloudPG). It is an extension of a Code Property Graph (CPG) [1], which itself is a labeled directed graph, representing source code. A CPG generates a language-independent representation of an application’s structural components, i.e. classes or methods, as well as information about data flows or program dependence. To build the CloudPG, we enrich this graph with additional nodes and edges that represent the actual deployment of the code as service(s) in the cloud at runtime."
      },
      "date": 1664747547039
    },
    {
      "type": "add",
      "id": "746cc396af0f5068",
      "item": {
        "type": "paragraph",
        "id": "746cc396af0f5068",
        "text": "[…] Bootstrapping the Cloud Property Graph Figure 2 shows the architecture of the framework, including its modules. First, a list of possible source code repositories which are deployed as part of the cloud service needs to be identified. The source code is then translated into the languageindependent representation of a CPG following the regular process of graph-based static code analysis."
      },
      "after": "2d8a0a2501ff3048",
      "date": 1664747637617
    },
    {
      "type": "edit",
      "id": "746cc396af0f5068",
      "item": {
        "type": "paragraph",
        "id": "746cc396af0f5068",
        "text": "[…] Bootstrapping the Cloud Property Graph "
      },
      "date": 1664747643528
    },
    {
      "type": "add",
      "id": "dbaab4159242d3c8",
      "item": {
        "type": "paragraph",
        "id": "dbaab4159242d3c8",
        "text": "Figure 2 shows the architecture of the framework, including its modules. First, a list of possible source code repositories which are deployed as part of the cloud service needs to be identified. The source code is then translated into the languageindependent representation of a CPG following the regular process of graph-based static code analysis."
      },
      "after": "746cc396af0f5068",
      "date": 1664747644102
    },
    {
      "type": "edit",
      "id": "dbaab4159242d3c8",
      "item": {
        "type": "paragraph",
        "id": "dbaab4159242d3c8",
        "text": "Figure 2 shows the architecture of the framework, including its modules. First, a list of possible source code repositories which are deployed as part of the cloud service needs to be identified. The source code is then translated into the language independent representation of a CPG following the regular process of graph-based static code analysis."
      },
      "date": 1664747659302
    },
    {
      "type": "edit",
      "id": "dbaab4159242d3c8",
      "item": {
        "type": "paragraph",
        "id": "dbaab4159242d3c8",
        "text": "Figure 2 shows the architecture of the framework, including its modules. First, a list of possible source code repositories which are deployed as part of the cloud service needs to be identified. The source code is then translated into the language-independent representation of a CPG following the regular process of graph-based static code analysis."
      },
      "date": 1664747670713
    }
  ]
}