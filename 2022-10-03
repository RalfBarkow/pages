{
  "title": "2022-10-03",
  "story": [
    {
      "type": "paragraph",
      "id": "3d852228b7a73eaa",
      "text": "⇒ [[Conviviality]]"
    },
    {
      "type": "reference",
      "id": "62fd83485e1ec424",
      "site": "e2o.wiki.cafe",
      "slug": "6-beyond-the-fragments",
      "title": "6 Beyond the fragments",
      "text": "**Particularity, plurality and the production of scope**"
    },
    {
      "type": "markdown",
      "id": "5bc7a2287fb21495",
      "text": "> The (Fordist-modernist) days of [[Universalism]] are gone. And fragmentation is so easy to fall into, such a comfortable, heads-down, hard-working, embattled, lazy bubble of a place.\n\n\n"
    },
    {
      "type": "graphviz",
      "id": "cdfe425f09c0f59d",
      "text": "DOT FROM lambda-browsing"
    },
    {
      "type": "paragraph",
      "id": "24e10a04b36ba6c7",
      "text": "\"topological order\" \"property graph\""
    },
    {
      "type": "markdown",
      "id": "1437d3650614ec31",
      "text": "* [[Path Property Graph]]\n* [[Code Property Graph]]"
    },
    {
      "type": "markdown",
      "id": "7b6e2d4487861d94",
      "text": "* Graph-Based Source Code Analysis of JavaScript Repositories. [https://ftsrg.mit.bme.hu/thesis-works/pdfs/stein-daniel-msc.pdf pdf]\n* Potential of Graph Databases\nin Representing and Enriching Standardized Geodata. [https://www.researchgate.net/profile/Felix-Kunde/publication/305701542_Potential_of_Graph_Databases_in_Representing_and_Enriching_Standardized_Geodata/links/579a946608ae024e100e4b56/Potential-of-Graph-Databases-in-Representing-and-Enriching-Standardized-Geodata.pdf pdf]\n"
    },
    {
      "type": "markdown",
      "id": "d5ec48ba853472c1",
      "text": "* JStrong: Malicious JavaScript detection based on code semantic representation and graph neural network. [https://www.sciencedirect.com/science/article/pii/S0167404822001110 sciencedirect]\n"
    },
    {
      "type": "markdown",
      "id": "d6a989caad5354b3",
      "text": "FANG, Yong, HUANG, Chaoyi, ZENG, Minchuan, ZHAO, Zhiying and HUANG, Cheng, 2022. JStrong: Malicious JavaScript detection based on code semantic representation and graph neural network. Computers & Security. Online. 1 July 2022. Vol. 118, p. 102715. [Accessed 2 October 2022]. DOI 10.1016/j.cose.2022.102715. \n> Web development technology has experienced significant progress. The creation of JavaScript has highly enriched the interactive ability of the client. However, the attacker uses the dynamic characteristics of the JavaScript language to embed malicious code into web pages to achieve the purpose of smuggling, redirection, and so on. Traditional methods based on static feature detection are therefore difficult to detect malicious code after confusion, and the method based on dynamic analysis is inefficient. To meet these challenges, this paper proposes a static detection model JStrong based on graph neural network. The model first generates an abstract syntax tree from the JavaScript source code, and then adds data flow and control flow information into the program dependency graph. In addition, we embed the nodes and edges of the graph into the feature vector and fully learn the features of the whole graph through the graph neural network. We take advantage of a real-world dataset collected from the top website and GitHub to evaluate JStrong and compare it to the state-of-the-art method. Experimental results show that JStrong achieves near-perfect classification performance and is superior to the state-of-the-art method.\n"
    },
    {
      "type": "markdown",
      "id": "f116eb2de285dc93",
      "text": "* Modeling and Discovering Vulnerabilities with Code Property Graphs."
    },
    {
      "type": "paragraph",
      "id": "293d27b49e48e5a1",
      "text": "\nYAMAGUCHI, Fabian, GOLDE, Nico, ARP, Daniel and RIECK, Konrad, 2014. Modeling and Discovering Vulnerabilities with Code Property Graphs. In: 2014 IEEE Symposium on Security and Privacy. May 2014. p. 590–604. DOI 10.1109/SP.2014.44. "
    },
    {
      "type": "markdown",
      "id": "54498ef70f7d3485",
      "text": "> The vast majority of security breaches encountered today are a direct result of insecure code. Consequently, the protection of computer systems critically depends on the rigorous identification of vulnerabilities in software, a tedious and error-prone process requiring significant expertise. Unfortunately, a single flaw suffices to undermine the security of a system and thus the sheer amount of code to audit plays into the attacker’s cards. In this paper, we present a method to effectively mine large amounts of source code for vulnerabilities. To this end, we introduce a novel representation of source code called a code property graph that merges concepts of classic program analysis, namely abstract syntax trees, control flow graphs and program dependence graphs, into a joint data structure. This comprehensive representation enables us to elegantly model templates for common vulnerabilities with graph traversals that, for instance, can identify buffer overflows, integer overflows, format string vulnerabilities, or memory disclosures. We implement our approach using a popular graph database and demonstrate its efficacy by identifying 18 previously unknown vulnerabilities in the source code of the Linux kernel.\n\n"
    },
    {
      "type": "markdown",
      "id": "98fc7dbcc8c8b0ea",
      "text": "HideNoSeek: Camouflaging Malicious JavaScript in Benign ASTs"
    },
    {
      "type": "pagefold",
      "id": "8a04fbbfe2c7c24c",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "dd0aaf9a4e8142f6",
      "text": "How can we support a blind pianist to make music together with others?\nDoes she have to learn to read music for that?\nDo you know any uses of Smalltalk as a tool for making music?\nA kind of contextual prosthesis for tools for thought.\nI could use your help @ccrraaiigg @nsuslovi"
    },
    {
      "type": "paragraph",
      "id": "b39d415e946a4996",
      "text": "Nikolay Suslov\n@nsuslovi\n·\n30. Sep.\nAntwort an \n@RalfBarkow\n und \n@ccrraaiigg\nThat's a very interesting questions!\n1. Yes, current orchestras are based generally on sharing the data. e.g Musical Score is like a multitrack memory tape that is synchronised between \"Readers\"."
    },
    {
      "type": "paragraph",
      "id": "c9b1fe35c201b4a4",
      "text": "2. But, we can look at orchestra in the context of Smalltalk & Croquet, that is biologically inspired with objects sharing computations instead of the data. And moreover, where \"objects never send a message, but only receive”, and they can generate self-hosting meta languages."
    },
    {
      "type": "paragraph",
      "id": "f4bccdb30aaa7324",
      "text": "3. The orchestra can be considered as a single organism formed not from \"Readers\", but from \"Cells\" with unique bodies and actions. So, a hard/soft solution to make such an orchestra will be concentrated in maintaining the sustainability, and not in syncing musical scores."
    },
    {
      "type": "paragraph",
      "id": "7d3e04874180bc6d",
      "text": "4. In such orchestra she still has to learn to \"read music\" (as all others too), but on her own meta language of communication with that orchestra as an \"organism\".\n"
    },
    {
      "type": "paragraph",
      "id": "b11d0ec0d3f544f7",
      "text": "5. As for the use of Smalltalk as a tool for making music: there is \"MuO: musical objects for Squeak\" by Stephane Rollandin. But, as from my experience, I have used a SuperCollider, Smalltalk - inspired language as an external software synth for Squeak."
    },
    {
      "type": "paragraph",
      "id": "ead0fa563f8bcae5",
      "text": "⇒ [[Sound Unseen]]"
    },
    {
      "type": "pagefold",
      "id": "3da2b5611a9cee8a",
      "text": "~"
    },
    {
      "type": "paragraph",
      "id": "ab9364a59e8e0d5c",
      "text": "Synapse is available in the FreedomBox distribution (version 0.14.0 or later). [https://matrix.org/docs/projects/server/synapse page], [https://tracker.debian.org/pkg/matrix-synapse tracker]"
    },
    {
      "type": "code",
      "id": "c6f79b0b3514e588",
      "text": "sudo apt install \"matrix-synapse\" -t bullseye-backports"
    },
    {
      "type": "paragraph",
      "id": "fd143ea2341e9753",
      "text": "apt-listchanges: News\n---------------------\n\nmatrix-synapse (1.55.0-1) unstable; urgency=medium\n\n  Some of the commands shipped with Synapse now have names different\n  from those provided by the upstream. This is to ensure more consistent\n  naming and avoid potential name clashes with other packages:\n\n    (old name)                 (new name)\n\n    export_signing_key         synapse_export_signing_key\n    generate_config            synapse_generate_config\n    generate_log_config        synapse_generate_log_config\n    generate_signing_key       synapse_generate_signing_key\n    hash_password              synapse_hash_password\n    register_new_matrix_user   synapse_register_new_matrix_user\n    update_synapse_database    synapse_update_database\n\n  The commands with the previous names are still available in\n  /usr/libexec/matrix-synapse, should you prefer those.\n\n  Please also note that this version of Synapse no longer ships\n  sync_room_to_group.pl.\n\n -- Andrej Shadura <andrewsh@debian.org>  Tue, 22 Mar 2022 18:46:38 +0100\n\n(press q to quit)"
    },
    {
      "type": "markdown",
      "id": "1df1b487637fc249",
      "text": "> […] Unpacking matrix-synapse (1.66.0-1~bpo11+1) over (1.28.0-1) ..."
    },
    {
      "type": "markdown",
      "id": "0d21b6d2825fd7aa",
      "text": "* How to install and use Backports in Debian 11 Bullseye. [https://www.how2shout.com/linux/how-to-install-and-use-backports-in-debian-11-bullseye/#Steps_to_Add_or_Install_Backports_on_Debian_11_Bullseye page]"
    },
    {
      "type": "markdown",
      "id": "aac3149cde6298b4",
      "text": "* Matrix not available on Debian 11? [https://discuss.freedombox.org/t/matrix-not-available-on-debian-11/1719/3 page]"
    },
    {
      "type": "markdown",
      "id": "6e0c7e13a4b7b4ed",
      "text": "* Accepted matrix-synapse 1.63.0-1~bpo11+1 (source) into bullseye-backports. [https://tracker.debian.org/news/1352999/accepted-matrix-synapse-1630-1bpo111-source-into-bullseye-backports/ tracker]"
    },
    {
      "type": "code",
      "id": "b835d4f6f8eb6052",
      "text": "apt policy\n[…] Pinned packages:\n     python3-canonicaljson -> 1.4.0-1~bpo10+1 with priority 500\n     matrix-synapse -> 1.28.0-1~bpo10+2 with priority 500\n     python3-twisted -> 18.9.0-8~bpo10+1 with priority 500\n     python3-typing-extensions -> 3.7.4.1-1~bpo10+1 with priority 500\n     python3-attr -> 19.3.0-3~bpo10+1 with priority 500\n     python3-psycopg2 -> 2.8.6-2~bpo10+1 with priority 500\n     freedombox -> 21.4.4~bpo10+1 with priority 500\n     python3-signedjson -> 1.1.0-1~bpo10+1 with priority 500\n     python3-service-identity -> 18.1.0-5~bpo10+1 with priority 500\n     python3-twisted-bin -> 18.9.0-8~bpo10+1 with priority 500"
    },
    {
      "type": "markdown",
      "id": "aea553813ef209eb",
      "text": "/etc/apt/preferences.d# ls\n50freedombox4.pref  51freedombox-apps.pref"
    },
    {
      "type": "markdown",
      "id": "9b6359069a59ed7e",
      "text": "* AptConfiguration"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "2022-10-03",
        "story": []
      },
      "date": 1664781548976
    },
    {
      "item": {
        "type": "factory",
        "id": "62fd83485e1ec424"
      },
      "id": "62fd83485e1ec424",
      "type": "add",
      "date": 1664781567737
    },
    {
      "type": "edit",
      "id": "62fd83485e1ec424",
      "item": {
        "type": "reference",
        "id": "62fd83485e1ec424",
        "site": "e2o.wiki.cafe",
        "slug": "6-beyond-the-fragments",
        "title": "6 Beyond the fragments",
        "text": "**Particularity, plurality and the production of scope**"
      },
      "date": 1664781573392
    },
    {
      "item": {
        "type": "factory",
        "id": "3d852228b7a73eaa"
      },
      "id": "3d852228b7a73eaa",
      "type": "add",
      "after": "62fd83485e1ec424",
      "date": 1664781637652
    },
    {
      "type": "edit",
      "id": "3d852228b7a73eaa",
      "item": {
        "type": "paragraph",
        "id": "3d852228b7a73eaa",
        "text": "[[Conviviality]]"
      },
      "date": 1664781644770
    },
    {
      "id": "3d852228b7a73eaa",
      "type": "move",
      "order": [
        "3d852228b7a73eaa",
        "62fd83485e1ec424"
      ],
      "date": 1664781646566
    },
    {
      "type": "edit",
      "id": "3d852228b7a73eaa",
      "item": {
        "type": "paragraph",
        "id": "3d852228b7a73eaa",
        "text": "⇒ [[Conviviality]]"
      },
      "date": 1664781665993
    },
    {
      "item": {
        "type": "factory",
        "id": "cdfe425f09c0f59d"
      },
      "id": "cdfe425f09c0f59d",
      "type": "add",
      "after": "62fd83485e1ec424",
      "date": 1664781667096
    },
    {
      "type": "edit",
      "id": "cdfe425f09c0f59d",
      "item": {
        "type": "graphviz",
        "id": "cdfe425f09c0f59d",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1664781681231
    },
    {
      "item": {
        "type": "factory",
        "id": "24e10a04b36ba6c7"
      },
      "id": "24e10a04b36ba6c7",
      "type": "add",
      "after": "cdfe425f09c0f59d",
      "date": 1664793388636
    },
    {
      "type": "edit",
      "id": "24e10a04b36ba6c7",
      "item": {
        "type": "paragraph",
        "id": "24e10a04b36ba6c7",
        "text": "\"topological order\" \"property graph\""
      },
      "date": 1664793392848
    },
    {
      "item": {
        "type": "factory",
        "id": "1437d3650614ec31"
      },
      "id": "1437d3650614ec31",
      "type": "add",
      "after": "24e10a04b36ba6c7",
      "date": 1664793476246
    },
    {
      "type": "edit",
      "id": "1437d3650614ec31",
      "item": {
        "type": "markdown",
        "id": "1437d3650614ec31",
        "text": "* [[Path Property Graph]]"
      },
      "date": 1664793481472
    },
    {
      "type": "edit",
      "id": "1437d3650614ec31",
      "item": {
        "type": "markdown",
        "id": "1437d3650614ec31",
        "text": "* [[Path Property Graph]]\n* [[Code Property Graph]]"
      },
      "date": 1664794162005
    },
    {
      "item": {
        "type": "factory",
        "id": "7b6e2d4487861d94"
      },
      "id": "7b6e2d4487861d94",
      "type": "add",
      "after": "1437d3650614ec31",
      "date": 1664794270895
    },
    {
      "type": "edit",
      "id": "7b6e2d4487861d94",
      "item": {
        "type": "paragraph",
        "id": "7b6e2d4487861d94",
        "text": "* Graph-Based Source Code Analysis of JavaScript Repositories."
      },
      "date": 1664794276280
    },
    {
      "type": "edit",
      "id": "7b6e2d4487861d94",
      "item": {
        "type": "markdown",
        "id": "7b6e2d4487861d94",
        "text": "* Graph-Based Source Code Analysis of JavaScript Repositories."
      },
      "date": 1664794281564
    },
    {
      "type": "edit",
      "id": "7b6e2d4487861d94",
      "item": {
        "type": "markdown",
        "id": "7b6e2d4487861d94",
        "text": "* Graph-Based Source Code Analysis of JavaScript Repositories. [https://ftsrg.mit.bme.hu/thesis-works/pdfs/stein-daniel-msc.pdf pdf]"
      },
      "date": 1664794289373
    },
    {
      "type": "edit",
      "id": "7b6e2d4487861d94",
      "item": {
        "type": "markdown",
        "id": "7b6e2d4487861d94",
        "text": "* Graph-Based Source Code Analysis of JavaScript Repositories. [https://ftsrg.mit.bme.hu/thesis-works/pdfs/stein-daniel-msc.pdf pdf]\n* Potential of Graph Databases\nin Representing and Enriching Standardized Geodata. "
      },
      "date": 1664794365091
    },
    {
      "type": "edit",
      "id": "7b6e2d4487861d94",
      "item": {
        "type": "markdown",
        "id": "7b6e2d4487861d94",
        "text": "* Graph-Based Source Code Analysis of JavaScript Repositories. [https://ftsrg.mit.bme.hu/thesis-works/pdfs/stein-daniel-msc.pdf pdf]\n* Potential of Graph Databases\nin Representing and Enriching Standardized Geodata. [https://www.researchgate.net/profile/Felix-Kunde/publication/305701542_Potential_of_Graph_Databases_in_Representing_and_Enriching_Standardized_Geodata/links/579a946608ae024e100e4b56/Potential-of-Graph-Databases-in-Representing-and-Enriching-Standardized-Geodata.pdf pdf]"
      },
      "date": 1664794375135
    },
    {
      "type": "edit",
      "id": "7b6e2d4487861d94",
      "item": {
        "type": "markdown",
        "id": "7b6e2d4487861d94",
        "text": "* Graph-Based Source Code Analysis of JavaScript Repositories. [https://ftsrg.mit.bme.hu/thesis-works/pdfs/stein-daniel-msc.pdf pdf]\n* Potential of Graph Databases\nin Representing and Enriching Standardized Geodata. [https://www.researchgate.net/profile/Felix-Kunde/publication/305701542_Potential_of_Graph_Databases_in_Representing_and_Enriching_Standardized_Geodata/links/579a946608ae024e100e4b56/Potential-of-Graph-Databases-in-Representing-and-Enriching-Standardized-Geodata.pdf pdf]\n* JStrong: Malicious JavaScript detection based on code semantic representation and graph neural network. "
      },
      "date": 1664794423676
    },
    {
      "type": "edit",
      "id": "7b6e2d4487861d94",
      "item": {
        "type": "markdown",
        "id": "7b6e2d4487861d94",
        "text": "* Graph-Based Source Code Analysis of JavaScript Repositories. [https://ftsrg.mit.bme.hu/thesis-works/pdfs/stein-daniel-msc.pdf pdf]\n* Potential of Graph Databases\nin Representing and Enriching Standardized Geodata. [https://www.researchgate.net/profile/Felix-Kunde/publication/305701542_Potential_of_Graph_Databases_in_Representing_and_Enriching_Standardized_Geodata/links/579a946608ae024e100e4b56/Potential-of-Graph-Databases-in-Representing-and-Enriching-Standardized-Geodata.pdf pdf]\n* JStrong: Malicious JavaScript detection based on code semantic representation and graph neural network. [https://www.sciencedirect.com/science/article/pii/S0167404822001110 sciencedirect]"
      },
      "date": 1664794439052
    },
    {
      "type": "edit",
      "id": "7b6e2d4487861d94",
      "item": {
        "type": "markdown",
        "id": "7b6e2d4487861d94",
        "text": "* Graph-Based Source Code Analysis of JavaScript Repositories. [https://ftsrg.mit.bme.hu/thesis-works/pdfs/stein-daniel-msc.pdf pdf]\n* Potential of Graph Databases\nin Representing and Enriching Standardized Geodata. [https://www.researchgate.net/profile/Felix-Kunde/publication/305701542_Potential_of_Graph_Databases_in_Representing_and_Enriching_Standardized_Geodata/links/579a946608ae024e100e4b56/Potential-of-Graph-Databases-in-Representing-and-Enriching-Standardized-Geodata.pdf pdf]\n"
      },
      "date": 1664794456154
    },
    {
      "type": "add",
      "id": "d5ec48ba853472c1",
      "item": {
        "type": "markdown",
        "id": "d5ec48ba853472c1",
        "text": "* JStrong: Malicious JavaScript detection based on code semantic representation and graph neural network. [https://www.sciencedirect.com/science/article/pii/S0167404822001110 sciencedirect]\n"
      },
      "after": "7b6e2d4487861d94",
      "date": 1664794458281
    },
    {
      "type": "add",
      "id": "d6a989caad5354b3",
      "item": {
        "type": "markdown",
        "id": "d6a989caad5354b3",
        "text": "\nFANG, Yong, HUANG, Chaoyi, ZENG, Minchuan, ZHAO, Zhiying and HUANG, Cheng, 2022. JStrong: Malicious JavaScript detection based on code semantic representation and graph neural network. Computers & Security. Online. 1 July 2022. Vol. 118, p. 102715. [Accessed 2 October 2022]. DOI 10.1016/j.cose.2022.102715. Web development technology has experienced significant progress. The creation of JavaScript has highly enriched the interactive ability of the client. However, the attacker uses the dynamic characteristics of the JavaScript language to embed malicious code into web pages to achieve the purpose of smuggling, redirection, and so on. Traditional methods based on static feature detection are therefore difficult to detect malicious code after confusion, and the method based on dynamic analysis is inefficient. To meet these challenges, this paper proposes a static detection model JStrong based on graph neural network. The model first generates an abstract syntax tree from the JavaScript source code, and then adds data flow and control flow information into the program dependency graph. In addition, we embed the nodes and edges of the graph into the feature vector and fully learn the features of the whole graph through the graph neural network. We take advantage of a real-world dataset collected from the top website and GitHub to evaluate JStrong and compare it to the state-of-the-art method. Experimental results show that JStrong achieves near-perfect classification performance and is superior to the state-of-the-art method.\n"
      },
      "after": "d5ec48ba853472c1",
      "date": 1664794458957
    },
    {
      "type": "edit",
      "id": "d6a989caad5354b3",
      "item": {
        "type": "markdown",
        "id": "d6a989caad5354b3",
        "text": "FANG, Yong, HUANG, Chaoyi, ZENG, Minchuan, ZHAO, Zhiying and HUANG, Cheng, 2022. JStrong: Malicious JavaScript detection based on code semantic representation and graph neural network. Computers & Security. Online. 1 July 2022. Vol. 118, p. 102715. [Accessed 2 October 2022]. DOI 10.1016/j.cose.2022.102715. \n> Web development technology has experienced significant progress. The creation of JavaScript has highly enriched the interactive ability of the client. However, the attacker uses the dynamic characteristics of the JavaScript language to embed malicious code into web pages to achieve the purpose of smuggling, redirection, and so on. Traditional methods based on static feature detection are therefore difficult to detect malicious code after confusion, and the method based on dynamic analysis is inefficient. To meet these challenges, this paper proposes a static detection model JStrong based on graph neural network. The model first generates an abstract syntax tree from the JavaScript source code, and then adds data flow and control flow information into the program dependency graph. In addition, we embed the nodes and edges of the graph into the feature vector and fully learn the features of the whole graph through the graph neural network. We take advantage of a real-world dataset collected from the top website and GitHub to evaluate JStrong and compare it to the state-of-the-art method. Experimental results show that JStrong achieves near-perfect classification performance and is superior to the state-of-the-art method.\n"
      },
      "date": 1664794467136
    },
    {
      "item": {
        "type": "factory",
        "id": "f116eb2de285dc93"
      },
      "id": "f116eb2de285dc93",
      "type": "add",
      "after": "d6a989caad5354b3",
      "date": 1664794565347
    },
    {
      "type": "edit",
      "id": "f116eb2de285dc93",
      "item": {
        "type": "markdown",
        "id": "f116eb2de285dc93",
        "text": "* Modeling and Discovering Vulnerabilities with Code Property Graphs."
      },
      "date": 1664794571147
    },
    {
      "item": {
        "type": "factory",
        "id": "293d27b49e48e5a1"
      },
      "id": "293d27b49e48e5a1",
      "type": "add",
      "after": "f116eb2de285dc93",
      "date": 1664794770579
    },
    {
      "type": "edit",
      "id": "293d27b49e48e5a1",
      "item": {
        "type": "paragraph",
        "id": "293d27b49e48e5a1",
        "text": "\nYAMAGUCHI, Fabian, GOLDE, Nico, ARP, Daniel and RIECK, Konrad, 2014. Modeling and Discovering Vulnerabilities with Code Property Graphs. In: 2014 IEEE Symposium on Security and Privacy. May 2014. p. 590–604. DOI 10.1109/SP.2014.44. "
      },
      "date": 1664794779747
    },
    {
      "type": "add",
      "id": "54498ef70f7d3485",
      "item": {
        "type": "paragraph",
        "id": "54498ef70f7d3485",
        "text": "> The vast majority of security breaches encountered today are a direct result of insecure code. Consequently, the protection of computer systems critically depends on the rigorous identification of vulnerabilities in software, a tedious and error-prone process requiring significant expertise. Unfortunately, a single flaw suffices to undermine the security of a system and thus the sheer amount of code to audit plays into the attacker’s cards. In this paper, we present a method to effectively mine large amounts of source code for vulnerabilities. To this end, we introduce a novel representation of source code called a code property graph that merges concepts of classic program analysis, namely abstract syntax trees, control flow graphs and program dependence graphs, into a joint data structure. This comprehensive representation enables us to elegantly model templates for common vulnerabilities with graph traversals that, for instance, can identify buffer overflows, integer overflows, format string vulnerabilities, or memory disclosures. We implement our approach using a popular graph database and demonstrate its efficacy by identifying 18 previously unknown vulnerabilities in the source code of the Linux kernel.\n"
      },
      "after": "293d27b49e48e5a1",
      "date": 1664794780393
    },
    {
      "type": "edit",
      "id": "54498ef70f7d3485",
      "item": {
        "type": "markdown",
        "id": "54498ef70f7d3485",
        "text": "> The vast majority of security breaches encountered today are a direct result of insecure code. Consequently, the protection of computer systems critically depends on the rigorous identification of vulnerabilities in software, a tedious and error-prone process requiring significant expertise. Unfortunately, a single flaw suffices to undermine the security of a system and thus the sheer amount of code to audit plays into the attacker’s cards. In this paper, we present a method to effectively mine large amounts of source code for vulnerabilities. To this end, we introduce a novel representation of source code called a code property graph that merges concepts of classic program analysis, namely abstract syntax trees, control flow graphs and program dependence graphs, into a joint data structure. This comprehensive representation enables us to elegantly model templates for common vulnerabilities with graph traversals that, for instance, can identify buffer overflows, integer overflows, format string vulnerabilities, or memory disclosures. We implement our approach using a popular graph database and demonstrate its efficacy by identifying 18 previously unknown vulnerabilities in the source code of the Linux kernel.\n"
      },
      "date": 1664794781868
    },
    {
      "id": "5bc7a2287fb21495",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "5bc7a2287fb21495",
        "text": "The (Fordist-modernist) days of universalism are gone. And fragmentation is so easy to fall into, such a comfortable, heads-down, hard-working, embattled, lazy bubble of a place.\n\n\n"
      },
      "after": "62fd83485e1ec424",
      "date": 1664794877502
    },
    {
      "type": "edit",
      "id": "5bc7a2287fb21495",
      "item": {
        "type": "markdown",
        "id": "5bc7a2287fb21495",
        "text": "> The (Fordist-modernist) days of universalism are gone. And fragmentation is so easy to fall into, such a comfortable, heads-down, hard-working, embattled, lazy bubble of a place.\n\n\n"
      },
      "date": 1664794884037
    },
    {
      "type": "edit",
      "id": "5bc7a2287fb21495",
      "item": {
        "type": "markdown",
        "id": "5bc7a2287fb21495",
        "text": "> The (Fordist-modernist) days of [[universalism]] are gone. And fragmentation is so easy to fall into, such a comfortable, heads-down, hard-working, embattled, lazy bubble of a place.\n\n\n"
      },
      "date": 1664794892746
    },
    {
      "type": "edit",
      "id": "5bc7a2287fb21495",
      "item": {
        "type": "markdown",
        "id": "5bc7a2287fb21495",
        "text": "> The (Fordist-modernist) days of [[Universalism]] are gone. And fragmentation is so easy to fall into, such a comfortable, heads-down, hard-working, embattled, lazy bubble of a place.\n\n\n"
      },
      "date": 1664794903972
    },
    {
      "item": {
        "type": "factory",
        "id": "8a04fbbfe2c7c24c"
      },
      "id": "8a04fbbfe2c7c24c",
      "type": "add",
      "after": "54498ef70f7d3485",
      "date": 1664795173611
    },
    {
      "type": "edit",
      "id": "8a04fbbfe2c7c24c",
      "item": {
        "type": "pagefold",
        "id": "8a04fbbfe2c7c24c",
        "text": "~"
      },
      "date": 1664795177692
    },
    {
      "item": {
        "type": "factory",
        "id": "dd0aaf9a4e8142f6"
      },
      "id": "dd0aaf9a4e8142f6",
      "type": "add",
      "after": "8a04fbbfe2c7c24c",
      "date": 1664795179132
    },
    {
      "type": "edit",
      "id": "dd0aaf9a4e8142f6",
      "item": {
        "type": "paragraph",
        "id": "dd0aaf9a4e8142f6",
        "text": "How can we support a blind pianist to make music together with others?\nDoes she have to learn to read music for that?\nDo you know any uses of Smalltalk as a tool for making music?\nA kind of contextual prosthesis for tools for thought.\nI could use your help @ccrraaiigg @nsuslovi"
      },
      "date": 1664795180785
    },
    {
      "type": "add",
      "id": "b39d415e946a4996",
      "item": {
        "type": "paragraph",
        "id": "b39d415e946a4996",
        "text": "Nikolay Suslov\n@nsuslovi\n·\n30. Sep.\nAntwort an \n@RalfBarkow\n und \n@ccrraaiigg\nThat's a very interesting questions!\n1. Yes, current orchestras are based generally on sharing the data. e.g Musical Score is like a multitrack memory tape that is synchronised between \"Readers\"."
      },
      "after": "dd0aaf9a4e8142f6",
      "date": 1664795194435
    },
    {
      "type": "add",
      "id": "c9b1fe35c201b4a4",
      "item": {
        "type": "paragraph",
        "id": "c9b1fe35c201b4a4",
        "text": "2. But, we can look at orchestra in the context of Smalltalk & Croquet, that is biologically inspired with objects sharing computations instead of the data. And moreover, where \"objects never send a message, but only receive”, and they can generate self-hosting meta languages."
      },
      "after": "b39d415e946a4996",
      "date": 1664795204100
    },
    {
      "type": "add",
      "id": "f4bccdb30aaa7324",
      "item": {
        "type": "paragraph",
        "id": "f4bccdb30aaa7324",
        "text": "3. The orchestra can be considered as a single organism formed not from \"Readers\", but from \"Cells\" with unique bodies and actions. So, a hard/soft solution to make such an orchestra will be concentrated in maintaining the sustainability, and not in syncing musical scores."
      },
      "after": "c9b1fe35c201b4a4",
      "date": 1664795216100
    },
    {
      "type": "add",
      "id": "7d3e04874180bc6d",
      "item": {
        "type": "paragraph",
        "id": "7d3e04874180bc6d",
        "text": "4. In such orchestra she still has to learn to \"read music\" (as all others too), but on her own meta language of communication with that orchestra as an \"organism\".\n"
      },
      "after": "f4bccdb30aaa7324",
      "date": 1664795229590
    },
    {
      "type": "add",
      "id": "b11d0ec0d3f544f7",
      "item": {
        "type": "paragraph",
        "id": "b11d0ec0d3f544f7",
        "text": "5. As for the use of Smalltalk as a tool for making music: there is \"MuO: musical objects for Squeak\" by Stephane Rollandin. But, as from my experience, I have used a SuperCollider, Smalltalk - inspired language as an external software synth for Squeak."
      },
      "after": "7d3e04874180bc6d",
      "date": 1664795240621
    },
    {
      "item": {
        "type": "factory",
        "id": "ead0fa563f8bcae5"
      },
      "id": "ead0fa563f8bcae5",
      "type": "add",
      "after": "b11d0ec0d3f544f7",
      "date": 1664795280688
    },
    {
      "type": "edit",
      "id": "ead0fa563f8bcae5",
      "item": {
        "type": "paragraph",
        "id": "ead0fa563f8bcae5",
        "text": "– [[Sound Unseen]]"
      },
      "date": 1664795287342
    },
    {
      "type": "edit",
      "id": "ead0fa563f8bcae5",
      "item": {
        "type": "paragraph",
        "id": "ead0fa563f8bcae5",
        "text": "⇒ [[Sound Unseen]]"
      },
      "date": 1664795293893
    },
    {
      "type": "edit",
      "id": "54498ef70f7d3485",
      "item": {
        "type": "markdown",
        "id": "54498ef70f7d3485",
        "text": "> The vast majority of security breaches encountered today are a direct result of insecure code. Consequently, the protection of computer systems critically depends on the rigorous identification of vulnerabilities in software, a tedious and error-prone process requiring significant expertise. Unfortunately, a single flaw suffices to undermine the security of a system and thus the sheer amount of code to audit plays into the attacker’s cards. In this paper, we present a method to effectively mine large amounts of source code for vulnerabilities. To this end, we introduce a novel representation of source code called a code property graph that merges concepts of classic program analysis, namely abstract syntax trees, control flow graphs and program dependence graphs, into a joint data structure. This comprehensive representation enables us to elegantly model templates for common vulnerabilities with graph traversals that, for instance, can identify buffer overflows, integer overflows, format string vulnerabilities, or memory disclosures. We implement our approach using a popular graph database and demonstrate its efficacy by identifying 18 previously unknown vulnerabilities in the source code of the Linux kernel.\n\n"
      },
      "date": 1664795980075
    },
    {
      "type": "add",
      "id": "98fc7dbcc8c8b0ea",
      "item": {
        "type": "markdown",
        "id": "98fc7dbcc8c8b0ea",
        "text": "HideNoSeek: Camouflaging Malicious JavaScript in Benign ASTs"
      },
      "after": "54498ef70f7d3485",
      "date": 1664795983233
    },
    {
      "item": {
        "type": "factory",
        "id": "3da2b5611a9cee8a"
      },
      "id": "3da2b5611a9cee8a",
      "type": "add",
      "after": "ead0fa563f8bcae5",
      "date": 1664809487883
    },
    {
      "type": "edit",
      "id": "3da2b5611a9cee8a",
      "item": {
        "type": "pagefold",
        "id": "3da2b5611a9cee8a",
        "text": "~"
      },
      "date": 1664809493221
    },
    {
      "item": {
        "type": "factory",
        "id": "ab9364a59e8e0d5c"
      },
      "id": "ab9364a59e8e0d5c",
      "type": "add",
      "after": "3da2b5611a9cee8a",
      "date": 1664809494773
    },
    {
      "type": "edit",
      "id": "ab9364a59e8e0d5c",
      "item": {
        "type": "paragraph",
        "id": "ab9364a59e8e0d5c",
        "text": "Synapse is available in the FreedomBox distribution (version 0.14.0 or later)."
      },
      "date": 1664809498856
    },
    {
      "type": "edit",
      "id": "ab9364a59e8e0d5c",
      "item": {
        "type": "paragraph",
        "id": "ab9364a59e8e0d5c",
        "text": "Synapse is available in the FreedomBox distribution (version 0.14.0 or later). [https://matrix.org/docs/projects/server/synapse page]"
      },
      "date": 1664809508410
    },
    {
      "type": "edit",
      "id": "ab9364a59e8e0d5c",
      "item": {
        "type": "paragraph",
        "id": "ab9364a59e8e0d5c",
        "text": "Synapse is available in the FreedomBox distribution (version 0.14.0 or later). [https://matrix.org/docs/projects/server/synapse page], [https://tracker.debian.org/pkg/matrix-synapse tracker]"
      },
      "date": 1664809649928
    },
    {
      "item": {
        "type": "factory",
        "id": "fd143ea2341e9753"
      },
      "id": "fd143ea2341e9753",
      "type": "add",
      "after": "ab9364a59e8e0d5c",
      "date": 1664809735842
    },
    {
      "type": "edit",
      "id": "fd143ea2341e9753",
      "item": {
        "type": "paragraph",
        "id": "fd143ea2341e9753",
        "text": "apt-listchanges: News\n---------------------\n\nmatrix-synapse (1.55.0-1) unstable; urgency=medium\n\n  Some of the commands shipped with Synapse now have names different\n  from those provided by the upstream. This is to ensure more consistent\n  naming and avoid potential name clashes with other packages:\n\n    (old name)                 (new name)\n\n    export_signing_key         synapse_export_signing_key\n    generate_config            synapse_generate_config\n    generate_log_config        synapse_generate_log_config\n    generate_signing_key       synapse_generate_signing_key\n    hash_password              synapse_hash_password\n    register_new_matrix_user   synapse_register_new_matrix_user\n    update_synapse_database    synapse_update_database\n\n  The commands with the previous names are still available in\n  /usr/libexec/matrix-synapse, should you prefer those.\n\n  Please also note that this version of Synapse no longer ships\n  sync_room_to_group.pl.\n\n -- Andrej Shadura <andrewsh@debian.org>  Tue, 22 Mar 2022 18:46:38 +0100\n\n(press q to quit)"
      },
      "date": 1664809737456
    },
    {
      "item": {
        "type": "factory",
        "id": "1df1b487637fc249"
      },
      "id": "1df1b487637fc249",
      "type": "add",
      "after": "fd143ea2341e9753",
      "date": 1664809820714
    },
    {
      "type": "edit",
      "id": "1df1b487637fc249",
      "item": {
        "type": "markdown",
        "id": "1df1b487637fc249",
        "text": "> […] Unpacking matrix-synapse (1.66.0-1~bpo11+1) over (1.28.0-1) ..."
      },
      "date": 1664809826726
    },
    {
      "item": {
        "type": "factory",
        "id": "0d21b6d2825fd7aa"
      },
      "id": "0d21b6d2825fd7aa",
      "type": "add",
      "after": "1df1b487637fc249",
      "date": 1664810021707
    },
    {
      "type": "edit",
      "id": "0d21b6d2825fd7aa",
      "item": {
        "type": "markdown",
        "id": "0d21b6d2825fd7aa",
        "text": "* How to install and use Backports in Debian 11 Bullseye."
      },
      "date": 1664810042050
    },
    {
      "type": "edit",
      "id": "0d21b6d2825fd7aa",
      "item": {
        "type": "markdown",
        "id": "0d21b6d2825fd7aa",
        "text": "* How to install and use Backports in Debian 11 Bullseye. [https://www.how2shout.com/linux/how-to-install-and-use-backports-in-debian-11-bullseye/#Steps_to_Add_or_Install_Backports_on_Debian_11_Bullseye page]"
      },
      "date": 1664810051171
    },
    {
      "item": {
        "type": "factory",
        "id": "c6f79b0b3514e588"
      },
      "id": "c6f79b0b3514e588",
      "type": "add",
      "after": "0d21b6d2825fd7aa",
      "date": 1664810431762
    },
    {
      "type": "edit",
      "id": "c6f79b0b3514e588",
      "item": {
        "type": "code",
        "id": "c6f79b0b3514e588",
        "text": "sudo apt install \"matrix-synapse\" -t bullseye-backports"
      },
      "date": 1664810433684
    },
    {
      "id": "c6f79b0b3514e588",
      "type": "move",
      "order": [
        "3d852228b7a73eaa",
        "62fd83485e1ec424",
        "5bc7a2287fb21495",
        "cdfe425f09c0f59d",
        "24e10a04b36ba6c7",
        "1437d3650614ec31",
        "7b6e2d4487861d94",
        "d5ec48ba853472c1",
        "d6a989caad5354b3",
        "f116eb2de285dc93",
        "293d27b49e48e5a1",
        "54498ef70f7d3485",
        "98fc7dbcc8c8b0ea",
        "8a04fbbfe2c7c24c",
        "dd0aaf9a4e8142f6",
        "b39d415e946a4996",
        "c9b1fe35c201b4a4",
        "f4bccdb30aaa7324",
        "7d3e04874180bc6d",
        "b11d0ec0d3f544f7",
        "ead0fa563f8bcae5",
        "3da2b5611a9cee8a",
        "ab9364a59e8e0d5c",
        "fd143ea2341e9753",
        "c6f79b0b3514e588",
        "1df1b487637fc249",
        "0d21b6d2825fd7aa"
      ],
      "date": 1664810435947
    },
    {
      "id": "c6f79b0b3514e588",
      "type": "move",
      "order": [
        "3d852228b7a73eaa",
        "62fd83485e1ec424",
        "5bc7a2287fb21495",
        "cdfe425f09c0f59d",
        "24e10a04b36ba6c7",
        "1437d3650614ec31",
        "7b6e2d4487861d94",
        "d5ec48ba853472c1",
        "d6a989caad5354b3",
        "f116eb2de285dc93",
        "293d27b49e48e5a1",
        "54498ef70f7d3485",
        "98fc7dbcc8c8b0ea",
        "8a04fbbfe2c7c24c",
        "dd0aaf9a4e8142f6",
        "b39d415e946a4996",
        "c9b1fe35c201b4a4",
        "f4bccdb30aaa7324",
        "7d3e04874180bc6d",
        "b11d0ec0d3f544f7",
        "ead0fa563f8bcae5",
        "3da2b5611a9cee8a",
        "ab9364a59e8e0d5c",
        "c6f79b0b3514e588",
        "fd143ea2341e9753",
        "1df1b487637fc249",
        "0d21b6d2825fd7aa"
      ],
      "date": 1664810442584
    },
    {
      "item": {
        "type": "factory",
        "id": "aac3149cde6298b4"
      },
      "id": "aac3149cde6298b4",
      "type": "add",
      "after": "0d21b6d2825fd7aa",
      "date": 1664811267347
    },
    {
      "type": "edit",
      "id": "aac3149cde6298b4",
      "item": {
        "type": "markdown",
        "id": "aac3149cde6298b4",
        "text": "* Matrix not available on Debian 11? "
      },
      "date": 1664811275116
    },
    {
      "type": "edit",
      "id": "aac3149cde6298b4",
      "item": {
        "type": "markdown",
        "id": "aac3149cde6298b4",
        "text": "* Matrix not available on Debian 11? [https://discuss.freedombox.org/t/matrix-not-available-on-debian-11/1719/3 page]"
      },
      "date": 1664811288582
    },
    {
      "item": {
        "type": "factory",
        "id": "6e0c7e13a4b7b4ed"
      },
      "id": "6e0c7e13a4b7b4ed",
      "type": "add",
      "after": "aac3149cde6298b4",
      "date": 1664812113790
    },
    {
      "type": "edit",
      "id": "6e0c7e13a4b7b4ed",
      "item": {
        "type": "paragraph",
        "id": "6e0c7e13a4b7b4ed",
        "text": "* Accepted matrix-synapse 1.63.0-1~bpo11+1 (source) into bullseye-backports."
      },
      "date": 1664812124547
    },
    {
      "type": "edit",
      "id": "6e0c7e13a4b7b4ed",
      "item": {
        "type": "markdown",
        "id": "6e0c7e13a4b7b4ed",
        "text": "* Accepted matrix-synapse 1.63.0-1~bpo11+1 (source) into bullseye-backports."
      },
      "date": 1664812129176
    },
    {
      "type": "edit",
      "id": "6e0c7e13a4b7b4ed",
      "item": {
        "type": "markdown",
        "id": "6e0c7e13a4b7b4ed",
        "text": "* Accepted matrix-synapse 1.63.0-1~bpo11+1 (source) into bullseye-backports. [https://tracker.debian.org/news/1352999/accepted-matrix-synapse-1630-1bpo111-source-into-bullseye-backports/ tracker]"
      },
      "date": 1664812136721
    },
    {
      "item": {
        "type": "factory",
        "id": "b835d4f6f8eb6052"
      },
      "id": "b835d4f6f8eb6052",
      "type": "add",
      "after": "6e0c7e13a4b7b4ed",
      "date": 1664812515359
    },
    {
      "type": "edit",
      "id": "b835d4f6f8eb6052",
      "item": {
        "type": "code",
        "id": "b835d4f6f8eb6052",
        "text": "Pinned packages:\n     python3-canonicaljson -> 1.4.0-1~bpo10+1 with priority 500\n     matrix-synapse -> 1.28.0-1~bpo10+2 with priority 500\n     python3-twisted -> 18.9.0-8~bpo10+1 with priority 500\n     python3-typing-extensions -> 3.7.4.1-1~bpo10+1 with priority 500\n     python3-attr -> 19.3.0-3~bpo10+1 with priority 500\n     python3-psycopg2 -> 2.8.6-2~bpo10+1 with priority 500\n     freedombox -> 21.4.4~bpo10+1 with priority 500\n     python3-signedjson -> 1.1.0-1~bpo10+1 with priority 500\n     python3-service-identity -> 18.1.0-5~bpo10+1 with priority 500\n     python3-twisted-bin -> 18.9.0-8~bpo10+1 with priority 500"
      },
      "date": 1664812517975
    },
    {
      "type": "edit",
      "id": "b835d4f6f8eb6052",
      "item": {
        "type": "code",
        "id": "b835d4f6f8eb6052",
        "text": "apt policy\n[…] Pinned packages:\n     python3-canonicaljson -> 1.4.0-1~bpo10+1 with priority 500\n     matrix-synapse -> 1.28.0-1~bpo10+2 with priority 500\n     python3-twisted -> 18.9.0-8~bpo10+1 with priority 500\n     python3-typing-extensions -> 3.7.4.1-1~bpo10+1 with priority 500\n     python3-attr -> 19.3.0-3~bpo10+1 with priority 500\n     python3-psycopg2 -> 2.8.6-2~bpo10+1 with priority 500\n     freedombox -> 21.4.4~bpo10+1 with priority 500\n     python3-signedjson -> 1.1.0-1~bpo10+1 with priority 500\n     python3-service-identity -> 18.1.0-5~bpo10+1 with priority 500\n     python3-twisted-bin -> 18.9.0-8~bpo10+1 with priority 500"
      },
      "date": 1664812545628
    },
    {
      "item": {
        "type": "factory",
        "id": "aea553813ef209eb"
      },
      "id": "aea553813ef209eb",
      "type": "add",
      "after": "b835d4f6f8eb6052",
      "date": 1664812706255
    },
    {
      "type": "edit",
      "id": "aea553813ef209eb",
      "item": {
        "type": "markdown",
        "id": "aea553813ef209eb",
        "text": "/etc/apt/preferences.d# ls\n50freedombox4.pref  51freedombox-apps.pref"
      },
      "date": 1664812708418
    },
    {
      "item": {
        "type": "factory",
        "id": "9b6359069a59ed7e"
      },
      "id": "9b6359069a59ed7e",
      "type": "add",
      "after": "aea553813ef209eb",
      "date": 1664813293406
    },
    {
      "type": "edit",
      "id": "9b6359069a59ed7e",
      "item": {
        "type": "markdown",
        "id": "9b6359069a59ed7e",
        "text": "* AptConfiguration"
      },
      "date": 1664813300178
    }
  ]
}