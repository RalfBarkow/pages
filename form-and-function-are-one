{
  "title": "Form And Function Are One",
  "story": [
    {
      "type": "html",
      "text": "Another of [[Frank Lloyd Wright]]'s [[Organic Architecture]] principles. Look at a hand, or a flower, or a wing, or an eye - these things are not mere aggregations of elements, but vitally interdependent mechanisms wbose function cannot be distinguished from their form.",
      "id": "4bcdefad3bfd5c03230c96b894dbff35"
    },
    {
      "type": "html",
      "text": "<i>From the [[Organic Architecture]] page:</i> FORM FOLLOWS FUNCTION is a much abused slogan. Form is predicated by function but, so far as poetic imagination can go with it without destruction, transcends it. Only when we say or write [[Form And Function Are One]] is the slogan significant. It is otherwise the password for sterility. ",
      "id": "341fb2e180aa33c20a0d189216ff2bca"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c7d5442f6505f01ffc988c2e9179f6c0"
    },
    {
      "type": "html",
      "text": "So how come every form is different, when they are all serving the same function? For example, your retinal prints are different from mine, but we both use eyes for seeing with. In reality. quite a lot of natural forms have random or arbitrary elements. -- [[Dave Harris]]",
      "id": "665938ff3e55bc4c0a4e41029c5640ac"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c7d5442f6505f01ffc988c2e9179f6c0"
    },
    {
      "type": "html",
      "text": "But isn't it interesting that the arbitrary elements are tangential to the aspect of form which serves the function.  Fingerprint patterns are differentiated, yet they provide the common function of providing a frictional pad for our digits.  ",
      "id": "979f00aabcdcc79bca2201239d466b12"
    },
    {
      "type": "html",
      "text": "\nI tend to think that variation in nature occurs where it is tolerated by function and we will see the most variation in areas where function shields it.  Um, will anyone think I'm too weird in calling this an instance of the [[Shield Pattern]]??  [[David Lynch]] talks about fast areas and slow areas in the visual aspects of nature.  But, I'm not sure that software would survive the application of Lynchian philosophy.  We'd start to search for patterns in haphazard arrangement of meal leftovers and software documentation.  --[[Michael Feathers]]",
      "id": "cd9d62431cda7dbf7a057b2decc383eb"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c7d5442f6505f01ffc988c2e9179f6c0"
    },
    {
      "type": "html",
      "text": "All instances of forms have variations; it's really a value judgement to identify any two processes as being in the same bucket (more subjectivism per [[Lao Tse]]). Nevertheless when we look at building classes it serves us well to factor out both function that does not follow form and form that does not follow function.",
      "id": "1532d00552f68040963cbe82f0a55d08"
    },
    {
      "type": "html",
      "text": "\nAn example of the former might be, say, a collection class with an embedded iterator. The obvious benefit being that by refactoring it becomes safe to write multiple routines that iterate the class. An example of the latter might be applying a reflective architecture pattern to some very simple problem domain - something where a [[Ball Of Mud]] \n[http://www.laputan.org/mud/mud.html www.laputan.org] architecture would work fine. [[You Arent Gonna Need It]] after all.",
      "id": "0cfea1a8afafe62353628a945e86624d"
    },
    {
      "type": "html",
      "text": "\nFor me, when [[Form And Function Are One]] elegance has been maximized. By maximizing elegance you minimize maintenance hassles and extraneous documentation, and improve the longevity of the work. The obvious case in point is the wikibase itself.",
      "id": "c7073fa106026b52f52aa25025957efa"
    },
    {
      "type": "html",
      "text": "-- [[Peter Merel]].",
      "id": "e98b7e23fa9776288f3f9bb33566ec43"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c7d5442f6505f01ffc988c2e9179f6c0"
    },
    {
      "type": "html",
      "text": "I don't really disagree with that. I was struck by the assertion to the effect that mere \"form follows function\" is a password to sterility. The reference to poetry doesn't help. He's apparently getting at some difference between the two phrases, but I haven't nailed down exactly what in a way which matches my own image of nature.",
      "id": "e8c423ea274daa3e8c0eff7721875bf3"
    },
    {
      "type": "html",
      "text": "\nIn Alexander's work, variations in form are often driven by variations in circumstance. Everything is customised and de-massified. (For me this stuff relates to [[The Third Wave]] book.) Thus it might be appropriate to embed an iterator into a collection class if that is what the moment demands. Another example is the [[Intrusive List]]. The \"function\" in this case includes low-level efficiency: the aesthetic of efficiency overrides more academic notions of elegance or modularity.",
      "id": "d0cdf54d716255ec0969f9670df234cf"
    },
    {
      "type": "html",
      "text": "\nI have trouble reconciling his ideas on buildings with computer software. Would he be happy with the various ways we have to parameterise classes, or would be prefer every routine to be hand-crafted?",
      "id": "77714c326ec1a93c1079b4e16448477c"
    },
    {
      "type": "html",
      "text": "-- [[Dave Harris]]",
      "id": "96477c6a16fdbca60cb8ac836e2da961"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c7d5442f6505f01ffc988c2e9179f6c0"
    },
    {
      "type": "html",
      "text": "\nI confess I've only skimmed [[The Third Wave]], so shan't comment there. But what I think Wright is getting at is partly the problem described in [[Programming Outside The Cube]]. The cube's form follows its function because it makes the person visible in the corporate address space. But its form and function are not one because it takes away from corporate dynamics; a person in a cube is neither in a private space where they can achieve the [[Mental State Called Flow]], nor in a public space where they can achieve the [[Social Relationship Called Cooperation]], both of which are vital to the corporation's life. The form follows the function, but interferes with it.",
      "id": "2d033f5354162091b565834e39a78dd3"
    },
    {
      "type": "html",
      "text": "\nA programmatic example of this is the difference between COBOL and PERL. Both are reporting languages at their core; but where COBOL programs <b>look like reports</b> - their form follows their function - PERL programs tend to represent the actual semantics embodied within the reports - they are one with the reports.",
      "id": "03031ae24e9ced56b5c6ecdbd739d1f8"
    },
    {
      "type": "html",
      "text": "\nNot certain this catches it, \n[[Peter Merel]].",
      "id": "a01b023ba3ce8827dcc4e17997e2265d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c7d5442f6505f01ffc988c2e9179f6c0"
    },
    {
      "type": "html",
      "text": "We've said that [[Form Follows Function]] and [[Form And Function Are One]], but we haven't paid much attention to the missing piece:  [[Function Follows Form]].  A long while back I used to say form should follow function because [[Function Follows Form]].",
      "id": "14c5e692afadfcfcd4622a5f75fc856b"
    },
    {
      "type": "html",
      "text": "\nWhen we say that [[Form Follows Function]], we are talking about a design process or a natural process in which molds something as a result of forces.  [[Function Follows Form]] is a recognition that form places limitations on the use of a system, and that specifically is what makes design so hard.  Our designs can be accommodating or restrictive depending upon what we do.  Each decision toward a solution is also a decision against other forms of specialization.  Form can be limber or it can be suffocating.  ",
      "id": "f77a593794199fb06b5189521024f11f"
    },
    {
      "type": "html",
      "text": "\nSide note.  I actually was an architecture major before starting computer science a long time ago.  I moved on because india ink and I did not get along well.  I haven't gotten into Alexander yet, but I was always interested in the fact that you there were always things that you could do to make designs better, but they were often things that few architect would have the time to do.  It demands a bit of prescience.  I see what [[Extreme Programming]] is supposed to achieve, but it seems so reactive rather than proactive.  Imagine [[Extreme Architecture]] where you only build the rooms that people need when they need them.  Is the amount of refactoring that you have to do less costy than if you planned for them in advance?  Perhaps this is okay because software is more malleable than physical material (but less costly to develop?).  I do know that it is a great feeling when you get it right and solve problems for people before they themselves recognize that they are problems. Ooops.  Enough rambling.  -- [[Michael Feathers]]",
      "id": "2e32b6530fcf14cde199330dd25e3df7"
    },
    {
      "type": "html",
      "text": "<i>Imagine a walkthru of your proposed building in a [[Virtual Reality]] system.  \"I don't like that wallpaper,\" you say.  Boink, it's different.  \"The fireplace should be bigger,\" and it is.  \"Could we combine the two bathrooms and have a giant hot tub,\" and you do.</i>",
      "id": "e5d6e106d84f76f08c34ad40f78f5dd7"
    },
    {
      "type": "html",
      "text": "<i>The trouble with planning in advance is that customers don't know what they really want until they see what they've got, and we don't know what they'll really do until we see them do it.  [[Extreme Programming]] accepts (what we hold to be) these truths, and goes with the flow rather than against it. --[[Ron Jeffries]]</i>",
      "id": "1c3c283fb1f142addca7411c9e55051d"
    },
    {
      "type": "html",
      "text": "\n[[Virtual Reality]] isn't good enough (yet?) to do what you suggest. It would be like handing a customer a [[Paper Prototype]] and asking \"Is it fast enough?\" ",
      "id": "6b4a951a7382b8e6a325d460a73a5cdf"
    },
    {
      "type": "html",
      "text": "\nSome things you don't know until you're actually living with them -- you can't tell from a diagram (or from [[Virtual Reality]] as we know it) whether the ventilation system will be too loud, or if the cold spot on the outside wall means you can't start your tomatoes in the southern window, or whether the expensive oak mantel on your fireplace will be used as a scratching post by your cat.",
      "id": "ff812b720680fe988bf2e91911e5afaa"
    },
    {
      "type": "html",
      "text": "\nOn the other hand, [[Extreme Architecture]] probably could work. There are [[Modular Houses]]. And didn't [[Buckminster Fuller]] design a house with movable walls? And old farmhouses always seem to have all sorts of rambling additions. Most people's interior decorating works in the \"extreme\" style too -- furniture is purchased only when it's needed, not before. --[[Katy Mulvey]]",
      "id": "e8c5eba085126595f4f1ccc90f18bc02"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c7d5442f6505f01ffc988c2e9179f6c0"
    },
    {
      "type": "html",
      "text": "\nIf I may, I'd like to add some thoughts to this. I think what people are missing a little is the physicality of architecture. I consider this its most distinct feature. When Frank and Alexander refer to nature I think they are considering a building as part of a physical context. For them an elegant building was one which worked with the landscape to achieve a function by selectively separating the spaces. I think the analogy may be directly applied to information processing architecture.",
      "id": "6dd8f16ac172567d03246c69f1a5ed16"
    },
    {
      "type": "html",
      "text": "\nWithin this definition, an architectural pattern is a system which implements a system quality in a specific situation. This also implies that the implementation of architectural qualities occurs in the detail. Perhaps this explains why non-coding architects suck (oops, blew it there). It also explains why most architectures are very heavyweight. Like skyscrapers they defy nature, and are terribly inefficient. They look only inward to their function, and forget that form is what makes it work well.",
      "id": "d2b157938d50d1362637b665286f2f20"
    },
    {
      "type": "html",
      "text": "\nHope this was relevant.",
      "id": "651e784ffaa57c67e7fbc29b18426a30"
    },
    {
      "type": "html",
      "text": "\n[[Richard Henderson]]. ",
      "id": "55086878102ff4763b89edfe48a7dc2d"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c7d5442f6505f01ffc988c2e9179f6c0"
    },
    {
      "type": "html",
      "text": "\nInterestingly Mr. Wright tended to create low ceilings.\nHis form was short which meant low ceilings\nwould function for him, but gives us taller people panick attacks.\nI think there is a lesson in there somewhere.",
      "id": "54ce428e05b3241a7af6b2dcfaeab2fe"
    },
    {
      "type": "html",
      "text": "--[[Anonymous Donor]]",
      "id": "f418679de55389b097877edb3fde001c"
    },
    {
      "type": "html",
      "text": "\nI know [[Frank Lloyd Wright]]'s work mainly from one building, the Baird House in Western Massachusetts.\nA friend of mine lives in it, so I've spent a fair bit of time there.\nIt's very pretty from the outside, but it is one of the most uncomfortable houses I've ever been in.\nIt's has a number of odd nooks and crannies that are much too small to be useful, and it's quite dark. \nThe floorplan reminds me of the worst examples of University Married Student Housing.\nThe strangest thing about it is the placement of the doorknobs- they're more than a foot above the normal level. \nMy friend loves it because he can tell people that he lives in a [[Frank Lloyd Wright]].",
      "id": "7ffb35dc5bd27d412196cddc2b3c6f81"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c7d5442f6505f01ffc988c2e9179f6c0"
    },
    {
      "type": "html",
      "text": "''The trouble with planning in advance is that customers don't know what they really want until they see what they've got, and we don't know what they'll really do until we see them do it. [[Extreme Programming]] accepts (what we hold to be) these truths, and goes with the flow rather than\nagainst it.''",
      "id": "417e6fcc9e5930c1946a66cebd985c4e"
    },
    {
      "type": "html",
      "text": "\nIf this were strongly true you couldn't even start your project. \nIt's not weakly true either. Rarely do\ncustomers review the choice of nails or the placement of each nail.\nRarely does the customer measure every wall, check every level, \nor worry hundreds of other details about a house. Most of this detail goes \ncompletely by the customer and is left to the builder. The number of things\na customer is directly concerned with is a small fraction of the possibility\nspace.",
      "id": "06851d275ffca73f891fd816ff2a306c"
    },
    {
      "type": "html",
      "text": "--[[Anonymous Donor]]",
      "id": "f418679de55389b097877edb3fde001c"
    },
    {
      "type": "html",
      "text": "<hr>",
      "id": "c7d5442f6505f01ffc988c2e9179f6c0"
    },
    {
      "type": "html",
      "text": "See [[Point And Click Drag And Drop]]",
      "id": "15c91e3b3489383e7ea2f923d4f5c6b0"
    },
    {
      "type": "html",
      "text": "See original on  [http://c2.com/cgi/wiki?FormAndFunctionAreOne c2.com]",
      "id": "d673d1cd0541d7e8e061779a708a8819"
    }
  ],
  "journal": [
    {
      "date": 1052377772000,
      "id": "28608cd2e2c50eef39633b83ff923281",
      "type": "create",
      "item": {
        "title": "Form And Function Are One",
        "story": [
          {
            "type": "html",
            "text": "Another of [[Frank Lloyd Wright]]'s [[Organic Architecture]] principles. Look at a hand, or a flower, or a wing, or an eye - these things are not mere aggregations of elements, but vitally interdependent mechanisms wbose function cannot be distinguished from their form.",
            "id": "4bcdefad3bfd5c03230c96b894dbff35"
          },
          {
            "type": "html",
            "text": "<i>From the [[Organic Architecture]] page:</i> FORM FOLLOWS FUNCTION is a much abused slogan. Form is predicated by function but, so far as poetic imagination can go with it without destruction, transcends it. Only when we say or write [[Form And Function Are One]] is the slogan significant. It is otherwise the password for sterility. ",
            "id": "341fb2e180aa33c20a0d189216ff2bca"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c7d5442f6505f01ffc988c2e9179f6c0"
          },
          {
            "type": "html",
            "text": "So how come every form is different, when they are all serving the same function? For example, your retinal prints are different from mine, but we both use eyes for seeing with. In reality. quite a lot of natural forms have random or arbitrary elements. -- [[Dave Harris]]",
            "id": "665938ff3e55bc4c0a4e41029c5640ac"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c7d5442f6505f01ffc988c2e9179f6c0"
          },
          {
            "type": "html",
            "text": "But isn't it interesting that the arbitrary elements are tangential to the aspect of form which serves the function.  Fingerprint patterns are differentiated, yet they provide the common function of providing a frictional pad for our digits.  ",
            "id": "979f00aabcdcc79bca2201239d466b12"
          },
          {
            "type": "html",
            "text": "\nI tend to think that variation in nature occurs where it is tolerated by function and we will see the most variation in areas where function shields it.  Um, will anyone think I'm too weird in calling this an instance of the [[Shield Pattern]]??  [[David Lynch]] talks about fast areas and slow areas in the visual aspects of nature.  But, I'm not sure that software would survive the application of Lynchian philosophy.  We'd start to search for patterns in haphazard arrangement of meal leftovers and software documentation.  --[[Michael Feathers]]",
            "id": "cd9d62431cda7dbf7a057b2decc383eb"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c7d5442f6505f01ffc988c2e9179f6c0"
          },
          {
            "type": "html",
            "text": "All instances of forms have variations; it's really a value judgement to identify any two processes as being in the same bucket (more subjectivism per [[Lao Tse]]). Nevertheless when we look at building classes it serves us well to factor out both function that does not follow form and form that does not follow function.",
            "id": "1532d00552f68040963cbe82f0a55d08"
          },
          {
            "type": "html",
            "text": "\nAn example of the former might be, say, a collection class with an embedded iterator. The obvious benefit being that by refactoring it becomes safe to write multiple routines that iterate the class. An example of the latter might be applying a reflective architecture pattern to some very simple problem domain - something where a [[Ball Of Mud]] \n[http://www.laputan.org/mud/mud.html www.laputan.org] architecture would work fine. [[You Arent Gonna Need It]] after all.",
            "id": "0cfea1a8afafe62353628a945e86624d"
          },
          {
            "type": "html",
            "text": "\nFor me, when [[Form And Function Are One]] elegance has been maximized. By maximizing elegance you minimize maintenance hassles and extraneous documentation, and improve the longevity of the work. The obvious case in point is the wikibase itself.",
            "id": "c7073fa106026b52f52aa25025957efa"
          },
          {
            "type": "html",
            "text": "-- [[Peter Merel]].",
            "id": "e98b7e23fa9776288f3f9bb33566ec43"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c7d5442f6505f01ffc988c2e9179f6c0"
          },
          {
            "type": "html",
            "text": "I don't really disagree with that. I was struck by the assertion to the effect that mere \"form follows function\" is a password to sterility. The reference to poetry doesn't help. He's apparently getting at some difference between the two phrases, but I haven't nailed down exactly what in a way which matches my own image of nature.",
            "id": "e8c423ea274daa3e8c0eff7721875bf3"
          },
          {
            "type": "html",
            "text": "\nIn Alexander's work, variations in form are often driven by variations in circumstance. Everything is customised and de-massified. (For me this stuff relates to [[The Third Wave]] book.) Thus it might be appropriate to embed an iterator into a collection class if that is what the moment demands. Another example is the [[Intrusive List]]. The \"function\" in this case includes low-level efficiency: the aesthetic of efficiency overrides more academic notions of elegance or modularity.",
            "id": "d0cdf54d716255ec0969f9670df234cf"
          },
          {
            "type": "html",
            "text": "\nI have trouble reconciling his ideas on buildings with computer software. Would he be happy with the various ways we have to parameterise classes, or would be prefer every routine to be hand-crafted?",
            "id": "77714c326ec1a93c1079b4e16448477c"
          },
          {
            "type": "html",
            "text": "-- [[Dave Harris]]",
            "id": "96477c6a16fdbca60cb8ac836e2da961"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c7d5442f6505f01ffc988c2e9179f6c0"
          },
          {
            "type": "html",
            "text": "\nI confess I've only skimmed [[The Third Wave]], so shan't comment there. But what I think Wright is getting at is partly the problem described in [[Programming Outside The Cube]]. The cube's form follows its function because it makes the person visible in the corporate address space. But its form and function are not one because it takes away from corporate dynamics; a person in a cube is neither in a private space where they can achieve the [[Mental State Called Flow]], nor in a public space where they can achieve the [[Social Relationship Called Cooperation]], both of which are vital to the corporation's life. The form follows the function, but interferes with it.",
            "id": "2d033f5354162091b565834e39a78dd3"
          },
          {
            "type": "html",
            "text": "\nA programmatic example of this is the difference between COBOL and PERL. Both are reporting languages at their core; but where COBOL programs <b>look like reports</b> - their form follows their function - PERL programs tend to represent the actual semantics embodied within the reports - they are one with the reports.",
            "id": "03031ae24e9ced56b5c6ecdbd739d1f8"
          },
          {
            "type": "html",
            "text": "\nNot certain this catches it, \n[[Peter Merel]].",
            "id": "a01b023ba3ce8827dcc4e17997e2265d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c7d5442f6505f01ffc988c2e9179f6c0"
          },
          {
            "type": "html",
            "text": "We've said that [[Form Follows Function]] and [[Form And Function Are One]], but we haven't paid much attention to the missing piece:  [[Function Follows Form]].  A long while back I used to say form should follow function because [[Function Follows Form]].",
            "id": "14c5e692afadfcfcd4622a5f75fc856b"
          },
          {
            "type": "html",
            "text": "\nWhen we say that [[Form Follows Function]], we are talking about a design process or a natural process in which molds something as a result of forces.  [[Function Follows Form]] is a recognition that form places limitations on the use of a system, and that specifically is what makes design so hard.  Our designs can be accommodating or restrictive depending upon what we do.  Each decision toward a solution is also a decision against other forms of specialization.  Form can be limber or it can be suffocating.  ",
            "id": "f77a593794199fb06b5189521024f11f"
          },
          {
            "type": "html",
            "text": "\nSide note.  I actually was an architecture major before starting computer science a long time ago.  I moved on because india ink and I did not get along well.  I haven't gotten into Alexander yet, but I was always interested in the fact that you there were always things that you could do to make designs better, but they were often things that few architect would have the time to do.  It demands a bit of prescience.  I see what [[Extreme Programming]] is supposed to achieve, but it seems so reactive rather than proactive.  Imagine [[Extreme Architecture]] where you only build the rooms that people need when they need them.  Is the amount of refactoring that you have to do less costy than if you planned for them in advance?  Perhaps this is okay because software is more malleable than physical material (but less costly to develop?).  I do know that it is a great feeling when you get it right and solve problems for people before they themselves recognize that they are problems. Ooops.  Enough rambling.  -- [[Michael Feathers]]",
            "id": "2e32b6530fcf14cde199330dd25e3df7"
          },
          {
            "type": "html",
            "text": "<i>Imagine a walkthru of your proposed building in a [[Virtual Reality]] system.  \"I don't like that wallpaper,\" you say.  Boink, it's different.  \"The fireplace should be bigger,\" and it is.  \"Could we combine the two bathrooms and have a giant hot tub,\" and you do.</i>",
            "id": "e5d6e106d84f76f08c34ad40f78f5dd7"
          },
          {
            "type": "html",
            "text": "<i>The trouble with planning in advance is that customers don't know what they really want until they see what they've got, and we don't know what they'll really do until we see them do it.  [[Extreme Programming]] accepts (what we hold to be) these truths, and goes with the flow rather than against it. --[[Ron Jeffries]]</i>",
            "id": "1c3c283fb1f142addca7411c9e55051d"
          },
          {
            "type": "html",
            "text": "\n[[Virtual Reality]] isn't good enough (yet?) to do what you suggest. It would be like handing a customer a [[Paper Prototype]] and asking \"Is it fast enough?\" ",
            "id": "6b4a951a7382b8e6a325d460a73a5cdf"
          },
          {
            "type": "html",
            "text": "\nSome things you don't know until you're actually living with them -- you can't tell from a diagram (or from [[Virtual Reality]] as we know it) whether the ventilation system will be too loud, or if the cold spot on the outside wall means you can't start your tomatoes in the southern window, or whether the expensive oak mantel on your fireplace will be used as a scratching post by your cat.",
            "id": "ff812b720680fe988bf2e91911e5afaa"
          },
          {
            "type": "html",
            "text": "\nOn the other hand, [[Extreme Architecture]] probably could work. There are [[Modular Houses]]. And didn't [[Buckminster Fuller]] design a house with movable walls? And old farmhouses always seem to have all sorts of rambling additions. Most people's interior decorating works in the \"extreme\" style too -- furniture is purchased only when it's needed, not before. --[[Katy Mulvey]]",
            "id": "e8c5eba085126595f4f1ccc90f18bc02"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c7d5442f6505f01ffc988c2e9179f6c0"
          },
          {
            "type": "html",
            "text": "\nIf I may, I'd like to add some thoughts to this. I think what people are missing a little is the physicality of architecture. I consider this its most distinct feature. When Frank and Alexander refer to nature I think they are considering a building as part of a physical context. For them an elegant building was one which worked with the landscape to achieve a function by selectively separating the spaces. I think the analogy may be directly applied to information processing architecture.",
            "id": "6dd8f16ac172567d03246c69f1a5ed16"
          },
          {
            "type": "html",
            "text": "\nWithin this definition, an architectural pattern is a system which implements a system quality in a specific situation. This also implies that the implementation of architectural qualities occurs in the detail. Perhaps this explains why non-coding architects suck (oops, blew it there). It also explains why most architectures are very heavyweight. Like skyscrapers they defy nature, and are terribly inefficient. They look only inward to their function, and forget that form is what makes it work well.",
            "id": "d2b157938d50d1362637b665286f2f20"
          },
          {
            "type": "html",
            "text": "\nHope this was relevant.",
            "id": "651e784ffaa57c67e7fbc29b18426a30"
          },
          {
            "type": "html",
            "text": "\n[[Richard Henderson]]. ",
            "id": "55086878102ff4763b89edfe48a7dc2d"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c7d5442f6505f01ffc988c2e9179f6c0"
          },
          {
            "type": "html",
            "text": "\nInterestingly Mr. Wright tended to create low ceilings.\nHis form was short which meant low ceilings\nwould function for him, but gives us taller people panick attacks.\nI think there is a lesson in there somewhere.",
            "id": "54ce428e05b3241a7af6b2dcfaeab2fe"
          },
          {
            "type": "html",
            "text": "--[[Anonymous Donor]]",
            "id": "f418679de55389b097877edb3fde001c"
          },
          {
            "type": "html",
            "text": "\nI know [[Frank Lloyd Wright]]'s work mainly from one building, the Baird House in Western Massachusetts.\nA friend of mine lives in it, so I've spent a fair bit of time there.\nIt's very pretty from the outside, but it is one of the most uncomfortable houses I've ever been in.\nIt's has a number of odd nooks and crannies that are much too small to be useful, and it's quite dark. \nThe floorplan reminds me of the worst examples of University Married Student Housing.\nThe strangest thing about it is the placement of the doorknobs- they're more than a foot above the normal level. \nMy friend loves it because he can tell people that he lives in a [[Frank Lloyd Wright]].",
            "id": "7ffb35dc5bd27d412196cddc2b3c6f81"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c7d5442f6505f01ffc988c2e9179f6c0"
          },
          {
            "type": "html",
            "text": "''The trouble with planning in advance is that customers don't know what they really want until they see what they've got, and we don't know what they'll really do until we see them do it. [[Extreme Programming]] accepts (what we hold to be) these truths, and goes with the flow rather than\nagainst it.''",
            "id": "417e6fcc9e5930c1946a66cebd985c4e"
          },
          {
            "type": "html",
            "text": "\nIf this were strongly true you couldn't even start your project. \nIt's not weakly true either. Rarely do\ncustomers review the choice of nails or the placement of each nail.\nRarely does the customer measure every wall, check every level, \nor worry hundreds of other details about a house. Most of this detail goes \ncompletely by the customer and is left to the builder. The number of things\na customer is directly concerned with is a small fraction of the possibility\nspace.",
            "id": "06851d275ffca73f891fd816ff2a306c"
          },
          {
            "type": "html",
            "text": "--[[Anonymous Donor]]",
            "id": "f418679de55389b097877edb3fde001c"
          },
          {
            "type": "html",
            "text": "<hr>",
            "id": "c7d5442f6505f01ffc988c2e9179f6c0"
          },
          {
            "type": "html",
            "text": "See [[Point And Click Drag And Drop]]",
            "id": "15c91e3b3489383e7ea2f923d4f5c6b0"
          },
          {
            "type": "html",
            "text": "See original on  [http://c2.com/cgi/wiki?FormAndFunctionAreOne c2.com]",
            "id": "d673d1cd0541d7e8e061779a708a8819"
          }
        ]
      }
    },
    {
      "type": "fork",
      "site": "sfw.c2.com",
      "date": 1664257744500
    }
  ]
}