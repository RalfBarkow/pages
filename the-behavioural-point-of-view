{
  "title": "The Behavioural Point of View",
  "story": [
    {
      "type": "markdown",
      "id": "2f5263ea011d78c1",
      "text": "If you look at objects from the behavioural point of view (and here we could say that each object is *written in its own language, for which the object is that language’s [[Interpreter]]*) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
    },
    {
      "type": "markdown",
      "id": "e4441deec8b239bd",
      "text": "**Edit**: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\n\n\n"
    },
    {
      "type": "markdown",
      "id": "beb391aec953eba4",
      "text": "Most type systems use a concept of “name”. If two [[types]] have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not [[modular]].\n\n\n"
    },
    {
      "type": "markdown",
      "id": "119e9c0883c3e602",
      "text": "The other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as behaviour**.\n\nA problem with these two approaches is that, if you have something like:"
    },
    {
      "type": "code",
      "id": "b0b5a5100bbccb99",
      "text": "    interface Counter { \n      next(): Int; \n    } "
    },
    {
      "type": "markdown",
      "id": "ceb8cf0b8ffc6931",
      "text": "Then all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter *at all*:"
    },
    {
      "type": "code",
      "id": "caa602ebfeaa31d0",
      "text": "counter1 = { \n  next() { return 1 } \n}; \n \ncounter2 = { \n  next() { return randomInt(1, 100) } \n} \n \ncounter3 = { \n  value: 1, \n  next() { return this.value / 2 } \n}"
    },
    {
      "type": "markdown",
      "id": "95baa4e2d84540ee",
      "text": "And they’re only correct because the type “Counter” does not capture anything about the *behaviour* of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s *completely useless* for a view of objects as behaviour.\n"
    },
    {
      "type": "markdown",
      "id": "ca339d7375d9ea64",
      "text": "\nOf course, as soon as you start asking “does this object *do* the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either (⇒ [[Extensionality]]). –– [[Quildreen Motta]]"
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "The Behavioural Point of View",
        "story": []
      },
      "date": 1651150621704
    },
    {
      "id": "2f5263ea011d78c1",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "2f5263ea011d78c1",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is *written in its own language, for which the object is that language’s interpreter*) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1651150644872
    },
    {
      "id": "e4441deec8b239bd",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "e4441deec8b239bd",
        "text": "**Edit**: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\nMost type systems use a concept of “name”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work if you see objects as behaviour.\n\nA problem with these two approaches is that, if you have something like:"
      },
      "after": "2f5263ea011d78c1",
      "date": 1651150648482
    },
    {
      "id": "b0b5a5100bbccb99",
      "type": "add",
      "item": {
        "type": "code",
        "id": "b0b5a5100bbccb99",
        "text": "    interface Counter { \n      next(): Int; \n    } "
      },
      "after": "e4441deec8b239bd",
      "date": 1651150654253
    },
    {
      "id": "7ca3759963ec46a4",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "7ca3759963ec46a4",
        "text": "Then all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter at all:"
      },
      "after": "b0b5a5100bbccb99",
      "date": 1651150660118
    },
    {
      "id": "ceb8cf0b8ffc6931",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "ceb8cf0b8ffc6931",
        "text": "Then all of these are “correct” according to this type, but they’re most likely not what we want to consider a counter *at all*:"
      },
      "after": "7ca3759963ec46a4",
      "date": 1651150665520
    },
    {
      "id": "caa602ebfeaa31d0",
      "type": "add",
      "item": {
        "type": "code",
        "id": "caa602ebfeaa31d0",
        "text": "counter1 = { \n  next() { return 1 } \n}; \n \ncounter2 = { \n  next() { return randomInt(1, 100) } \n} \n \ncounter3 = { \n  value: 1, \n  next() { return this.value / 2 } \n}"
      },
      "after": "ceb8cf0b8ffc6931",
      "date": 1651150679157
    },
    {
      "id": "95baa4e2d84540ee",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "95baa4e2d84540ee",
        "text": "And they’re only correct because the type “Counter” does not capture anything about the *behaviour* of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s *completely useless* for a view of objects as behaviour.\n\nOf course, as soon as you start asking “does this object *do* the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either (⇒ [[Extensionality]])."
      },
      "after": "caa602ebfeaa31d0",
      "date": 1651150688102
    },
    {
      "id": "2a6fb9bace8b9c50",
      "type": "add",
      "item": {
        "type": "paragraph",
        "id": "2a6fb9bace8b9c50",
        "text": "–– [[Quildreen Motta]]"
      },
      "after": "95baa4e2d84540ee",
      "date": 1651150694306
    },
    {
      "type": "remove",
      "id": "7ca3759963ec46a4",
      "date": 1651150823634
    },
    {
      "type": "edit",
      "id": "e4441deec8b239bd",
      "item": {
        "type": "markdown",
        "id": "e4441deec8b239bd",
        "text": "**Edit**: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\nMost type systems use a concept of “name”. If two types have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\nThe other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as behaviour**.\n\nA problem with these two approaches is that, if you have something like:"
      },
      "date": 1651151683571
    },
    {
      "type": "fork",
      "date": 1651236563255
    },
    {
      "type": "edit",
      "id": "95baa4e2d84540ee",
      "item": {
        "type": "markdown",
        "id": "95baa4e2d84540ee",
        "text": "And they’re only correct because the type “Counter” does not capture anything about the *behaviour* of the object that we want. It only tells us what functions it must implement, and what data we can expect to input to this function and get out of it.\n\nAnd that’s *completely useless* for a view of objects as behaviour.\n"
      },
      "date": 1651236672963
    },
    {
      "id": "ca339d7375d9ea64",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "ca339d7375d9ea64",
        "text": "\nOf course, as soon as you start asking “does this object *do* the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either (⇒ [[Extensionality]]). –– [[Quildreen Motta]]"
      },
      "after": "95baa4e2d84540ee",
      "date": 1651236682602
    },
    {
      "type": "remove",
      "id": "2a6fb9bace8b9c50",
      "date": 1651236691511
    },
    {
      "id": "ca339d7375d9ea64",
      "type": "remove",
      "date": 1651236710175
    },
    {
      "id": "ca339d7375d9ea64",
      "type": "add",
      "item": {
        "type": "markdown",
        "id": "ca339d7375d9ea64",
        "text": "\nOf course, as soon as you start asking “does this object *do* the things I’m interested into?” you start getting into some places in mathematics that we don’t have answers for either (⇒ [[Extensionality]]). –– [[Quildreen Motta]]"
      },
      "after": "95baa4e2d84540ee",
      "date": 1651236755888
    },
    {
      "type": "fork",
      "date": 1651236757992
    },
    {
      "type": "fork",
      "date": 1651236788481
    },
    {
      "type": "edit",
      "id": "e4441deec8b239bd",
      "item": {
        "type": "markdown",
        "id": "e4441deec8b239bd",
        "text": "**Edit**: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\n\n\n"
      },
      "date": 1651399169800
    },
    {
      "type": "edit",
      "id": "e4441deec8b239bd",
      "item": {
        "type": "markdown",
        "id": "e4441deec8b239bd",
        "text": "**Edit**: To expand on some of the problems of modelling behaviour in type systems: think about what makes the type checker consider two types “equivalent”.\n\n\n\n"
      },
      "date": 1651399218235
    },
    {
      "type": "add",
      "id": "beb391aec953eba4",
      "item": {
        "type": "markdown",
        "id": "beb391aec953eba4",
        "text": "Most type systems use a concept of “name”. If two [[types]] have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not modular.\n\n\n"
      },
      "after": "e4441deec8b239bd",
      "date": 1651399221374
    },
    {
      "type": "add",
      "id": "119e9c0883c3e602",
      "item": {
        "type": "markdown",
        "id": "119e9c0883c3e602",
        "text": "The other simplification that type systems use is “structure”. If two types have roughly the same structure (i.e.: `A = B` if A and B have the field “counter” of type “Int”). This works if you see objects as plain records of data, and it’s even modular, and sort-of works across machines and languages (ground types are a bit of a problem), but it doesn’t work **if you see objects as behaviour**.\n\nA problem with these two approaches is that, if you have something like:"
      },
      "after": "beb391aec953eba4",
      "date": 1651399222716
    },
    {
      "type": "fork",
      "date": 1651399225842
    },
    {
      "type": "fork",
      "date": 1651399252959
    },
    {
      "type": "edit",
      "id": "beb391aec953eba4",
      "item": {
        "type": "markdown",
        "id": "beb391aec953eba4",
        "text": "Most type systems use a concept of “name”. If two [[types]] have the same name, then they must be equivalent. Names don’t work for any situation where we care about behaviour, and they really don’t work across languages, processes, or computers. They’re also very much not [[modular]].\n\n\n"
      },
      "date": 1655292232888
    },
    {
      "type": "edit",
      "id": "2f5263ea011d78c1",
      "item": {
        "type": "markdown",
        "id": "2f5263ea011d78c1",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is *written in its own language, for which the object is that language’s [[interprete]]r*) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1662442658273
    },
    {
      "type": "edit",
      "id": "2f5263ea011d78c1",
      "item": {
        "type": "markdown",
        "id": "2f5263ea011d78c1",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is *written in its own language, for which the object is that language’s [[interpreter]]*) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1662442667769
    },
    {
      "type": "edit",
      "id": "2f5263ea011d78c1",
      "item": {
        "type": "markdown",
        "id": "2f5263ea011d78c1",
        "text": "If you look at objects from the behavioural point of view (and here we could say that each object is *written in its own language, for which the object is that language’s [[Interpreter]]*) the answer is “we don’t know how to build that yet, or even what that is”. [https://www.quora.com/Is-there-static-typing-for-a-Smalltalk-derivative#wBzRI quora]"
      },
      "date": 1662442815390
    }
  ]
}