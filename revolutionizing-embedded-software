{
  "title": "Revolutionizing Embedded Software",
  "story": [
    {
      "type": "paragraph",
      "id": "fe710a98f378167e",
      "text": "Master's Thesis by Kasper Verdich Lund and Jakob Roland Andersen. [https://verdich.dk/kasper/RES.pdf pdf]"
    },
    {
      "type": "markdown",
      "id": "1f9cf71d4d3ed47d",
      "text": "# Preface\n\n"
    },
    {
      "type": "paragraph",
      "id": "d4bdee53da1fe5bd",
      "text": "The work presented in this thesis was done in OOVM A/S, a small startup company consisting of the two authors and [[Lars Bak]]. The mission of OOVM A/S is to improve reliability, availability, and servicability of embedded software by introducing a new software platform. The platform consists of several components. The design of the components is the result of animated discussions at the whiteboard between the three of us. This thesis will focus on the virtual machine and the system software, both of which were implemented by the authors. The programming environment, source code compiler, and garbage collector were implemented by Lars Bak.\n\nWe wish to thank our thesis supervisor, Ole Lehrmann Madsen, for encouraging us to focus on the written part of the thesis in addition to the software implementation. We also wish to thank Lars Bak, as well as Steffen Grarup who has recently joined the OOVM team. Both have made themselves available for technical discussions, and have provided useful feedback on the different parts of this thesis. We look forward to continuing to work together with you in the future. Furthermore, Mads Torgersen deserves special thanks for many enlightening discussions on object-orientation, reviewing the thesis, and for always bringing cake to our meetings. Finally, we wish to thank all the others who have read and provided feedback on this thesis. We really appreciate your efforts in helping us ensure the accuracy and readability of this thesis.\n\nAarhus, May 2003\n"
    },
    {
      "type": "markdown",
      "id": "8210c02c90600fc8",
      "text": "# Abstract\n\n"
    },
    {
      "type": "paragraph",
      "id": "572ba84394c530f9",
      "text": "More than 90% of the microprocessors produced today are used in embedded devices. With the current development tools, it is exceedingly difficult to debug, profile, and update code running on embedded devices in operation. This leaves developers unable to diagnose and solve software issues on deployed embedded systems, something that is unacceptable for an industry where robustness is paramount.\n\nIn this thesis, we show that it is possible to build a fully serviceable software platform that fits on memory-constrained embedded devices. We use virtual machine technology to enable full serviceability even for system software components. At the bottom of the software stack, we have replaced real-time operating systems with an efficient 30 KB object-oriented virtual machine. The virtual machine contains a reflective interface that allows developers to debug, profile, and update code running on embedded devices even in operation. The serviceability extends to system software components, including interrupt handlers, device drivers, and networking protocols. Like any other components, the system software components are implemented in safe, compact virtual machine instructions.\n\nOur virtual machine uses an interpreter to execute both system software and applications. On average, our interpreter is more than twice as fast as the closest competitor for low-end embedded devices. It even outperforms the fastest Java interpreter available. Compared to other object-oriented virtual machines, our compact memory representation of objects allows us to reduce the amount of memory spent on classes, methods, and strings by 40-50%. The result is that our entire software stack fits in less than 128 KB of memory. This way, our platform enables serviceability on a wide range of industrial and consumer devices; something we believe will revolutionize the way embedded software is developed and maintained. "
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Revolutionizing Embedded Software",
        "story": []
      },
      "date": 1662015721147
    },
    {
      "item": {
        "type": "factory",
        "id": "fe710a98f378167e"
      },
      "id": "fe710a98f378167e",
      "type": "add",
      "date": 1662015764397
    },
    {
      "type": "edit",
      "id": "fe710a98f378167e",
      "item": {
        "type": "paragraph",
        "id": "fe710a98f378167e",
        "text": "Master's Thesis by Kasper Verdich Lund and Jakob Roland Andersen. "
      },
      "date": 1662015772720
    },
    {
      "type": "edit",
      "id": "fe710a98f378167e",
      "item": {
        "type": "paragraph",
        "id": "fe710a98f378167e",
        "text": "Master's Thesis by Kasper Verdich Lund and Jakob Roland Andersen. [https://verdich.dk/kasper/RES.pdf pdf]"
      },
      "date": 1662015823387
    },
    {
      "item": {
        "type": "factory",
        "id": "1f9cf71d4d3ed47d"
      },
      "id": "1f9cf71d4d3ed47d",
      "type": "add",
      "after": "fe710a98f378167e",
      "date": 1662015849185
    },
    {
      "type": "fork",
      "date": 1662015859561
    },
    {
      "type": "edit",
      "id": "1f9cf71d4d3ed47d",
      "item": {
        "type": "paragraph",
        "id": "1f9cf71d4d3ed47d",
        "text": "Preface\n\nThe work presented in this thesis was done in OOVM A/S, a small startup company consisting of the two authors and Lars Bak. The mission of OOVM A/S is to improve reliability, availability, and servicability of embedded software by introducing a new software platform. The platform consists of several components. The design of the components is the result of animated discussions at the whiteboard between the three of us. This thesis will focus on the virtual machine and the system software, both of which were implemented by the authors. The programming environment, source code compiler, and garbage collector were implemented by Lars Bak.\n\nWe wish to thank our thesis supervisor, Ole Lehrmann Madsen, for encouraging us to focus on the written part of the thesis in addition to the software implementation. We also wish to thank Lars Bak, as well as Steffen Grarup who has recently joined the OOVM team. Both have made themselves available for technical discussions, and have provided useful feedback on the different parts of this thesis. We look forward to continuing to work together with you in the future. Furthermore, Mads Torgersen deserves special thanks for many enlightening discussions on object-orientation, reviewing the thesis, and for always bringing cake to our meetings. Finally, we wish to thank all the others who have read and provided feedback on this thesis. We really appreciate your efforts in helping us ensure the accuracy and readability of this thesis.\n\nAarhus, May 2003\nAbstract\n\nMore than 90% of the microprocessors produced today are used in embedded devices. With the current development tools, it is exceedingly difficult to debug, profile, and update code running on embedded devices in operation. This leaves developers unable to diagnose and solve software issues on deployed embedded systems, something that is unacceptable for an industry where robustness is paramount.\n\nIn this thesis, we show that it is possible to build a fully serviceable software platform that fits on memory-constrained embedded devices. We use virtual machine technology to enable full serviceability even for system software components. At the bottom of the software stack, we have replaced real-time operating systems with an efficient 30 KB object-oriented virtual machine. The virtual machine contains a reflective interface that allows developers to debug, profile, and update code running on embedded devices even in operation. The serviceability extends to system software components, including interrupt handlers, device drivers, and networking protocols. Like any other components, the system software components are implemented in safe, compact virtual machine instructions.\n\nOur virtual machine uses an interpreter to execute both system software and applications. On average, our interpreter is more than twice as fast as the closest competitor for low-end embedded devices. It even outperforms the fastest Java interpreter available. Compared to other object-oriented virtual machines, our compact memory representation of objects allows us to reduce the amount of memory spent on classes, methods, and strings by 40-50%. The result is that our entire software stack fits in less than 128 KB of memory. This way, our platform enables serviceability on a wide range of industrial and consumer devices; something we believe will revolutionize the way embedded software is developed and maintained. "
      },
      "date": 1662015863047
    },
    {
      "type": "edit",
      "id": "1f9cf71d4d3ed47d",
      "item": {
        "type": "paragraph",
        "id": "1f9cf71d4d3ed47d",
        "text": "# Preface\n\n"
      },
      "date": 1662015933674
    },
    {
      "type": "edit",
      "id": "1f9cf71d4d3ed47d",
      "item": {
        "type": "markdown",
        "id": "1f9cf71d4d3ed47d",
        "text": "# Preface\n\n"
      },
      "date": 1662015935844
    },
    {
      "type": "add",
      "id": "d4bdee53da1fe5bd",
      "item": {
        "type": "paragraph",
        "id": "d4bdee53da1fe5bd",
        "text": "The work presented in this thesis was done in OOVM A/S, a small startup company consisting of the two authors and Lars Bak. The mission of OOVM A/S is to improve reliability, availability, and servicability of embedded software by introducing a new software platform. The platform consists of several components. The design of the components is the result of animated discussions at the whiteboard between the three of us. This thesis will focus on the virtual machine and the system software, both of which were implemented by the authors. The programming environment, source code compiler, and garbage collector were implemented by Lars Bak.\n\nWe wish to thank our thesis supervisor, Ole Lehrmann Madsen, for encouraging us to focus on the written part of the thesis in addition to the software implementation. We also wish to thank Lars Bak, as well as Steffen Grarup who has recently joined the OOVM team. Both have made themselves available for technical discussions, and have provided useful feedback on the different parts of this thesis. We look forward to continuing to work together with you in the future. Furthermore, Mads Torgersen deserves special thanks for many enlightening discussions on object-orientation, reviewing the thesis, and for always bringing cake to our meetings. Finally, we wish to thank all the others who have read and provided feedback on this thesis. We really appreciate your efforts in helping us ensure the accuracy and readability of this thesis.\n\nAarhus, May 2003\n"
      },
      "after": "1f9cf71d4d3ed47d",
      "date": 1662015943630
    },
    {
      "type": "add",
      "id": "8210c02c90600fc8",
      "item": {
        "type": "paragraph",
        "id": "8210c02c90600fc8",
        "text": "# Abstract\n\n"
      },
      "after": "d4bdee53da1fe5bd",
      "date": 1662015945403
    },
    {
      "type": "edit",
      "id": "8210c02c90600fc8",
      "item": {
        "type": "markdown",
        "id": "8210c02c90600fc8",
        "text": "# Abstract\n\n"
      },
      "date": 1662015948416
    },
    {
      "type": "add",
      "id": "572ba84394c530f9",
      "item": {
        "type": "paragraph",
        "id": "572ba84394c530f9",
        "text": "More than 90% of the microprocessors produced today are used in embedded devices. With the current development tools, it is exceedingly difficult to debug, profile, and update code running on embedded devices in operation. This leaves developers unable to diagnose and solve software issues on deployed embedded systems, something that is unacceptable for an industry where robustness is paramount.\n\nIn this thesis, we show that it is possible to build a fully serviceable software platform that fits on memory-constrained embedded devices. We use virtual machine technology to enable full serviceability even for system software components. At the bottom of the software stack, we have replaced real-time operating systems with an efficient 30 KB object-oriented virtual machine. The virtual machine contains a reflective interface that allows developers to debug, profile, and update code running on embedded devices even in operation. The serviceability extends to system software components, including interrupt handlers, device drivers, and networking protocols. Like any other components, the system software components are implemented in safe, compact virtual machine instructions.\n\nOur virtual machine uses an interpreter to execute both system software and applications. On average, our interpreter is more than twice as fast as the closest competitor for low-end embedded devices. It even outperforms the fastest Java interpreter available. Compared to other object-oriented virtual machines, our compact memory representation of objects allows us to reduce the amount of memory spent on classes, methods, and strings by 40-50%. The result is that our entire software stack fits in less than 128 KB of memory. This way, our platform enables serviceability on a wide range of industrial and consumer devices; something we believe will revolutionize the way embedded software is developed and maintained. "
      },
      "after": "8210c02c90600fc8",
      "date": 1662015950182
    },
    {
      "type": "edit",
      "id": "d4bdee53da1fe5bd",
      "item": {
        "type": "paragraph",
        "id": "d4bdee53da1fe5bd",
        "text": "The work presented in this thesis was done in OOVM A/S, a small startup company consisting of the two authors and [[Lars Bak]]. The mission of OOVM A/S is to improve reliability, availability, and servicability of embedded software by introducing a new software platform. The platform consists of several components. The design of the components is the result of animated discussions at the whiteboard between the three of us. This thesis will focus on the virtual machine and the system software, both of which were implemented by the authors. The programming environment, source code compiler, and garbage collector were implemented by Lars Bak.\n\nWe wish to thank our thesis supervisor, Ole Lehrmann Madsen, for encouraging us to focus on the written part of the thesis in addition to the software implementation. We also wish to thank Lars Bak, as well as Steffen Grarup who has recently joined the OOVM team. Both have made themselves available for technical discussions, and have provided useful feedback on the different parts of this thesis. We look forward to continuing to work together with you in the future. Furthermore, Mads Torgersen deserves special thanks for many enlightening discussions on object-orientation, reviewing the thesis, and for always bringing cake to our meetings. Finally, we wish to thank all the others who have read and provided feedback on this thesis. We really appreciate your efforts in helping us ensure the accuracy and readability of this thesis.\n\nAarhus, May 2003\n"
      },
      "date": 1662018984723
    }
  ]
}